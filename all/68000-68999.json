[{"original_method":"/**\n   * Same behavior as in {@link URLClassLoader#loadClass(String, boolean)}, except loading from parent.\n   */\n  @Override\n  protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n    // First, check if the class has already been loaded\n    Class<?> c = findLoadedClass(name);\n    if (c == null) {\n      try {\n        // Load from parent\n        if ((getParent() != null) && canLoadFromParent(name)) {\n          c = getParent().loadClass(name);\n        } else {\n          // Load from system\n          c = getSystemClassLoader().loadClass(name);\n        }\n      } catch (ClassNotFoundException e) {\n        // If still not found, then invoke findClass in order\n        // to find the class.\n        c = findClass(name);\n      }\n    }\n    if (resolve) {\n      resolveClass(c);\n    }\n    return c;\n  }","id":68000,"modified_method":"/**\n   * Same behavior as in {@link URLClassLoader#loadClass(String, boolean)}, except loading from parent.\n   */\n  @Override\n  protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n    // First, check if the class has already been loaded\n    Class<?> c = findLoadedClass(name);\n    if (c == null) {\n      try {\n        // Load from parent\n        if (getParent() != null && canLoadFromParent(name)) {\n          c = getParent().loadClass(name);\n        } else {\n          // Load from system\n\n          // I don't know for other vendors, but for Oracle JVM :\n          // - ClassLoader.getSystemClassLoader() is sun.misc.Launcher$AppClassLoader. It contains app classpath.\n          // - ClassLoader.getSystemClassLoader().getParent() is sun.misc.Launcher$ExtClassLoader. It contains core JVM\n          ClassLoader systemClassLoader = getSystemClassLoader();\n          if (systemClassLoader.getParent() != null) {\n            systemClassLoader = systemClassLoader.getParent();\n          }\n          c = systemClassLoader.loadClass(name);\n        }\n      } catch (ClassNotFoundException e) {\n        // If still not found, then invoke findClass in order\n        // to find the class.\n        c = findClass(name);\n      }\n    }\n    if (resolve) {\n      resolveClass(c);\n    }\n    return c;\n  }","commit_id":"5c66652705937dbb24b6728180c63b1c951051d3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldRestrictLoadingFromParent() throws Exception {\n    BootstrapClassLoader classLoader = new BootstrapClassLoader(getClass().getClassLoader(), \"org.sonar.ant\");\n    assertThat(classLoader.canLoadFromParent(\"org.sonar.ant.Launcher\"), is(true));\n    assertThat(classLoader.canLoadFromParent(\"org.objectweb.asm.ClassVisitor\"), is(false));\n  }","id":68001,"modified_method":"@Test\n  public void shouldRestrictLoadingFromParent() throws Exception {\n    BootstrapClassLoader classLoader = new BootstrapClassLoader(getClass().getClassLoader(), \"org.sonar.ant\");\n    assertThat(classLoader.canLoadFromParent(\"org.sonar.ant.Launcher\")).isTrue();\n    assertThat(classLoader.canLoadFromParent(\"org.objectweb.asm.ClassVisitor\")).isFalse();\n  }","commit_id":"5c66652705937dbb24b6728180c63b1c951051d3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldReturnValidVersion() {\n    Bootstrapper bootstrapper = new Bootstrapper(\"\", \"http://test\", new File(\"target\")) {\n      @Override\n      String remoteContent(String path) throws IOException {\n        return \"2.6\";\n      }\n    };\n    assertThat(bootstrapper.getServerVersion(), is(\"2.6\"));\n  }","id":68002,"modified_method":"@Test\n  public void shouldReturnValidVersion() {\n    Bootstrapper bootstrapper = new Bootstrapper(\"\", \"http://test\", new File(\"target\")) {\n      @Override\n      String remoteContent(String path) throws IOException {\n        return \"2.6\";\n      }\n    };\n    assertThat(bootstrapper.getServerVersion()).isEqualTo(\"2.6\");\n  }","commit_id":"5c66652705937dbb24b6728180c63b1c951051d3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldRemoveLastUrlSlash() {\n    Bootstrapper bootstrapper = new Bootstrapper(\"\", \"http://test/\", new File(\"target\"));\n    assertThat(bootstrapper.getServerUrl(), is(\"http://test\"));\n  }","id":68003,"modified_method":"@Test\n  public void shouldRemoveLastUrlSlash() {\n    Bootstrapper bootstrapper = new Bootstrapper(\"\", \"http://test/\", new File(\"target\"));\n    assertThat(bootstrapper.getServerUrl()).isEqualTo(\"http://test\");\n  }","commit_id":"5c66652705937dbb24b6728180c63b1c951051d3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldReturnUserAgent() {\n    Bootstrapper bootstrapper = new Bootstrapper(\"test/0.1\", \"http://unknown.foo\", new File(\"target\"));\n    String userAgent = bootstrapper.getUserAgent();\n\n    assertThat(userAgent.length(), greaterThan(0));\n    assertThat(userAgent, startsWith(\"sonar-bootstrapper/\"));\n    assertThat(userAgent, endsWith(\" test/0.1\"));\n  }","id":68004,"modified_method":"@Test\n  public void shouldReturnUserAgent() {\n    Bootstrapper bootstrapper = new Bootstrapper(\"test/0.1\", \"http://unknown.foo\", new File(\"target\"));\n    String userAgent = bootstrapper.getUserAgent();\n\n    assertThat(userAgent.length()).isGreaterThan(0);\n    assertThat(userAgent).startsWith(\"sonar-bootstrapper/\");\n    assertThat(userAgent).endsWith(\" test/0.1\");\n  }","commit_id":"5c66652705937dbb24b6728180c63b1c951051d3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldLoadVersion() {\n    String version = BootstrapperVersion.getVersion();\n    assertThat(version, containsString(\".\"));\n    assertThat(version, not(containsString(\"$\")));\n  }","id":68005,"modified_method":"@Test\n  public void shouldLoadVersion() {\n    String version = BootstrapperVersion.getVersion();\n    assertThat(version).contains(\".\");\n    assertThat(version).doesNotContain(\"$\");\n  }","commit_id":"5c66652705937dbb24b6728180c63b1c951051d3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void insert(AuthorDto authorDto) {\n    SqlSession session = mybatis.openSession();\n    AuthorMapper mapper = session.getMapper(AuthorMapper.class);\n    try {\n      mapper.insert(authorDto);\n      session.commit();\n    } catch (RuntimeException e) {\n      // break the unique index on LOGIN ?\n      AuthorDto persistedAuthor = mapper.selectByLogin(authorDto.getLogin());\n      if (persistedAuthor != null) {\n        authorDto.setId(persistedAuthor.getId());\n      } else {\n        throw e;\n      }\n\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68006,"modified_method":"public void insert(AuthorDto authorDto) {\n    SqlSession session = mybatis.openSession();\n    AuthorMapper mapper = session.getMapper(AuthorMapper.class);\n    try {\n      mapper.insert(authorDto);\n      session.commit();\n    } catch (RuntimeException e) {\n      // break the unique index on LOGIN ?\n      AuthorDto persistedAuthor = mapper.selectByLogin(authorDto.getLogin());\n      if (persistedAuthor != null) {\n        authorDto.setId(persistedAuthor.getId());\n        authorDto.setPersonId(persistedAuthor.getPersonId());\n      } else {\n        throw e;\n      }\n\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"602700de57516592e661e1a3b40fc15a180cd08e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSelectByLogin() {\n    setupData(\"shouldSelectByLogin\");\n\n    AuthorDto authorDto = dao.selectByLogin(\"godin\");\n    assertThat(authorDto.getId(), is(1L));\n    assertThat(authorDto.getPersonId(), is(13L));\n    assertThat(authorDto.getLogin(), is(\"godin\"));\n\n    assertThat(dao.selectByLogin(\"simon\"), is(nullValue()));\n  }","id":68007,"modified_method":"@Test\n  public void shouldSelectByLogin() {\n    setupData(\"shouldSelectByLogin\");\n\n    AuthorDto authorDto = dao.selectByLogin(\"godin\");\n    assertThat(authorDto.getId()).isEqualTo(1L);\n    assertThat(authorDto.getPersonId()).isEqualTo(13L);\n    assertThat(authorDto.getLogin()).isEqualTo(\"godin\");\n\n    assertThat(dao.selectByLogin(\"simon\")).isNull();\n  }","commit_id":"602700de57516592e661e1a3b40fc15a180cd08e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void countDeveloperLogins() {\n    setupData(\"countDeveloperLogins\");\n\n    assertThat(dao.countDeveloperLogins(1L), is(2));\n    assertThat(dao.countDeveloperLogins(98765L), is(0));\n  }","id":68008,"modified_method":"@Test\n  public void countDeveloperLogins() {\n    setupData(\"countDeveloperLogins\");\n\n    assertThat(dao.countDeveloperLogins(1L)).isEqualTo(2);\n    assertThat(dao.countDeveloperLogins(98765L)).isEqualTo(0);\n  }","commit_id":"602700de57516592e661e1a3b40fc15a180cd08e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void defineDependencies() {\n    AbstractDivisionDecorator decorator = createDecorator();\n    assertThat(decorator.dependsUponMetrics(), hasItem(CoreMetrics.CLASSES));\n    assertThat(decorator.dependsUponMetrics(), hasItem(CoreMetrics.COMPLEXITY));\n    assertThat(decorator.generatesMetric(), is(CoreMetrics.CLASS_COMPLEXITY));\n  }","id":68009,"modified_method":"@Test\n  public void defineDependencies() {\n    AbstractDivisionDecorator decorator = createDecorator();\n    assertThat(decorator.dependsUponMetrics()).contains(CoreMetrics.CLASSES);\n    assertThat(decorator.dependsUponMetrics()).contains(CoreMetrics.COMPLEXITY);\n    assertThat(decorator.generatesMetric()).isEqualTo(CoreMetrics.CLASS_COMPLEXITY);\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test_create_unit_test_resource() {\n    AbstractSourceImporter importer = new AbstractSourceImporter(Java.INSTANCE) {\n    };\n\n    File unitTestFile = new File(\"test/UnitTest.java\");\n    File unitTestDir = new File(\"test\");\n    List<File> unitTestDirs = newArrayList();\n    unitTestDirs.add(unitTestDir);\n\n    Resource unitTest = importer.createResource(unitTestFile, unitTestDirs, true);\n    assertThat(unitTest.getQualifier(), is(\"UTS\"));\n\n    Resource srcTest = importer.createResource(unitTestFile, unitTestDirs, false);\n    assertThat(srcTest.getQualifier(), is(\"FIL\"));\n  }","id":68010,"modified_method":"@Test\n  public void test_create_unit_test_resource() {\n    AbstractSourceImporter importer = new AbstractSourceImporter(Java.INSTANCE) {\n    };\n\n    File unitTestFile = new File(\"test/UnitTest.java\");\n    File unitTestDir = new File(\"test\");\n    List<File> unitTestDirs = newArrayList();\n    unitTestDirs.add(unitTestDir);\n\n    Resource unitTest = importer.createResource(unitTestFile, unitTestDirs, true);\n    assertThat(unitTest.getQualifier()).isEqualTo(\"UTS\");\n\n    Resource srcTest = importer.createResource(unitTestFile, unitTestDirs, false);\n    assertThat(srcTest.getQualifier()).isEqualTo(\"FIL\");\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldBeEnabledByDefault() {\n    Project pom = mock(Project.class);\n    when(pom.getConfiguration()).thenReturn(new PropertiesConfiguration());\n    assertTrue(importer.isEnabled(pom));\n  }","id":68011,"modified_method":"@Test\n  public void shouldBeEnabledByDefault() {\n    Project pom = mock(Project.class);\n    when(pom.getConfiguration()).thenReturn(new PropertiesConfiguration());\n    assertThat(importer.isEnabled(pom)).isTrue();\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getChildren() {\n    DecoratorContext context = mock(DecoratorContext.class);\n    DecoratorContext child1 = mock(DecoratorContext.class);\n    DecoratorContext child2 = mock(DecoratorContext.class);\n    when(context.getChildren()).thenReturn(Arrays.asList(child1, child2));\n\n    DefaultFormulaData data = new DefaultFormulaData(context);\n    assertThat(data.getChildren().size(), is(2));\n  }","id":68012,"modified_method":"@Test\n  public void getChildren() {\n    DecoratorContext context = mock(DecoratorContext.class);\n    DecoratorContext child1 = mock(DecoratorContext.class);\n    DecoratorContext child2 = mock(DecoratorContext.class);\n    when(context.getChildren()).thenReturn(Arrays.asList(child1, child2));\n\n    DefaultFormulaData data = new DefaultFormulaData(context);\n    assertThat(data.getChildren()).hasSize(2);\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldBeExecutedByDefault() {\n    Project project = mock(Project.class);\n    assertThat(new FakeInitializer().shouldExecuteOnProject(project), is(true));\n  }","id":68013,"modified_method":"@Test\n  public void shouldBeExecutedByDefault() {\n    Project project = mock(Project.class);\n    assertThat(new FakeInitializer().shouldExecuteOnProject(project)).isTrue();\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldConvertToSquidKeyFormat() {\n    assertThat(SquidUtils.convertToSquidKeyFormat(new JavaFile(\"com.foo.Bar\")), is(\"com/foo/Bar.java\"));\n    assertThat(SquidUtils.convertToSquidKeyFormat(new JavaFile(\"Bar\")), is(\"Bar.java\"));\n  }","id":68014,"modified_method":"@Test\n  public void shouldConvertToSquidKeyFormat() {\n    assertThat(SquidUtils.convertToSquidKeyFormat(new JavaFile(\"com.foo.Bar\"))).isEqualTo((\"com/foo/Bar.java\"));\n    assertThat(SquidUtils.convertToSquidKeyFormat(new JavaFile(\"Bar\"))).isEqualTo((\"Bar.java\"));\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldConvertJavaPackageKeyFromSquidFormat() {\n    assertEquals(new JavaPackage(\"java.lang\"), SquidUtils.convertJavaPackageKeyFromSquidFormat(\"java/lang\"));\n    assertEquals(new JavaPackage(\"\"), SquidUtils.convertJavaPackageKeyFromSquidFormat(\"\"));\n    assertEquals(new JavaPackage(\"singlepackage\"), SquidUtils.convertJavaPackageKeyFromSquidFormat(\"singlepackage\"));\n  }","id":68015,"modified_method":"@Test\n  public void shouldConvertJavaPackageKeyFromSquidFormat() {\n    assertThat(new JavaPackage(\"java.lang\")).isEqualTo(SquidUtils.convertJavaPackageKeyFromSquidFormat(\"java/lang\"));\n    assertThat(new JavaPackage(\"\")).isEqualTo(SquidUtils.convertJavaPackageKeyFromSquidFormat(\"\"));\n    assertThat(new JavaPackage(\"singlepackage\")).isEqualTo(SquidUtils.convertJavaPackageKeyFromSquidFormat(\"singlepackage\"));\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void convertJavaFileKeyFromSquidFormat() {\n    assertEquals(new JavaFile(\"java.lang.String\"), SquidUtils.convertJavaFileKeyFromSquidFormat(\"java/lang/String\"));\n    assertEquals(new JavaFile(\"java.lang.String\"), SquidUtils.convertJavaFileKeyFromSquidFormat(\"java/lang/String.java\"));\n    assertEquals(new JavaFile(\"String\"), SquidUtils.convertJavaFileKeyFromSquidFormat(\"String.java\"));\n    assertEquals(new JavaFile(\"String\"), SquidUtils.convertJavaFileKeyFromSquidFormat(\"String\"));\n  }","id":68016,"modified_method":"@Test\n  public void convertJavaFileKeyFromSquidFormat() {\n    assertThat(new JavaFile(\"java.lang.String\")).isEqualTo(SquidUtils.convertJavaFileKeyFromSquidFormat(\"java/lang/String\"));\n    assertThat(new JavaFile(\"java.lang.String\")).isEqualTo(SquidUtils.convertJavaFileKeyFromSquidFormat(\"java/lang/String.java\"));\n    assertThat(new JavaFile(\"String\")).isEqualTo(SquidUtils.convertJavaFileKeyFromSquidFormat(\"String.java\"));\n    assertThat(new JavaFile(\"String\")).isEqualTo(SquidUtils.convertJavaFileKeyFromSquidFormat(\"String\"));\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void setNullMetrics() {\n    TimeMachineQuery query = new TimeMachineQuery(null).setMetrics(Arrays.asList(CoreMetrics.LINES));\n    assertThat(query.getMetrics(), hasItem(CoreMetrics.LINES));\n\n    query.unsetMetrics();\n    assertThat(query.getMetrics(), nullValue());\n\n    query.setMetrics(CoreMetrics.LINES, CoreMetrics.COVERAGE);\n    assertThat(query.getMetrics(), hasItems(CoreMetrics.LINES, CoreMetrics.COVERAGE));\n  }","id":68017,"modified_method":"@Test\n  public void setNullMetrics() {\n    TimeMachineQuery query = new TimeMachineQuery(null).setMetrics(Arrays.asList(CoreMetrics.LINES));\n    assertThat(query.getMetrics()).contains(CoreMetrics.LINES);\n\n    query.unsetMetrics();\n    assertThat(query.getMetrics()).isNull();\n\n    query.setMetrics(CoreMetrics.LINES, CoreMetrics.COVERAGE);\n    assertThat(query.getMetrics()).contains(CoreMetrics.LINES, CoreMetrics.COVERAGE);\n  }","commit_id":"3e7c244c67ab7095d90e3730acfac04b227559e3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public MyBatis start() {\n    LogFactory.useSlf4jLogging();\n\n    Configuration conf = new Configuration();\n    conf.setEnvironment(new Environment(\"production\", createTransactionFactory(), database.getDataSource()));\n    conf.setDatabaseId(database.getDialect().getId());\n    conf.setUseGeneratedKeys(true);\n    conf.setLazyLoadingEnabled(false);\n    conf.setJdbcTypeForNull(JdbcType.NULL);\n    conf.getVariables().setProperty(\"_true\", database.getDialect().getTrueSqlValue());\n    conf.getVariables().setProperty(\"_false\", database.getDialect().getFalseSqlValue());\n\n    loadAlias(conf, \"ActiveDashboard\", ActiveDashboardDto.class);\n    loadAlias(conf, \"Author\", AuthorDto.class);\n    loadAlias(conf, \"Dashboard\", DashboardDto.class);\n    loadAlias(conf, \"Dependency\", DependencyDto.class);\n    loadAlias(conf, \"DuplicationUnit\", DuplicationUnitDto.class);\n    loadAlias(conf, \"Graph\", GraphDto.class);\n    loadAlias(conf, \"Group\", GroupDto.class);\n    loadAlias(conf, \"GroupRole\", GroupRoleDto.class);\n    loadAlias(conf, \"LoadedTemplate\", LoadedTemplateDto.class);\n    loadAlias(conf, \"MeasureFilter\", MeasureFilterDto.class);\n    loadAlias(conf, \"NotificationQueue\", NotificationQueueDto.class);\n    loadAlias(conf, \"Property\", PropertyDto.class);\n    loadAlias(conf, \"PurgeableSnapshot\", PurgeableSnapshotDto.class);\n    loadAlias(conf, \"Resource\", ResourceDto.class);\n    loadAlias(conf, \"ResourceIndex\", ResourceIndexDto.class);\n    loadAlias(conf, \"ResourceSnapshot\", ResourceSnapshotDto.class);\n    loadAlias(conf, \"Rule\", RuleDto.class);\n    loadAlias(conf, \"Snapshot\", SnapshotDto.class);\n    loadAlias(conf, \"Semaphore\", SemaphoreDto.class);\n    loadAlias(conf, \"SchemaMigration\", SchemaMigrationDto.class);\n    loadAlias(conf, \"User\", UserDto.class);\n    loadAlias(conf, \"UserRole\", UserRoleDto.class);\n    loadAlias(conf, \"Widget\", WidgetDto.class);\n    loadAlias(conf, \"WidgetProperty\", WidgetPropertyDto.class);\n    loadAlias(conf, \"MeasureModel\", MeasureModel.class);\n    loadAlias(conf, \"MeasureData\", MeasureData.class);\n    loadAlias(conf, \"Issue\", IssueDto.class);\n    loadAlias(conf, \"IssueChange\", IssueChangeDto.class);\n    loadAlias(conf, \"IssueFilter\", IssueFilterDto.class);\n    loadAlias(conf, \"IssueFilterFavourite\", IssueFilterFavouriteDto.class);\n    loadAlias(conf, \"SnapshotData\", SnapshotDataDto.class);\n    loadAlias(conf, \"ActionPlanIssue\", ActionPlanDto.class);\n    loadAlias(conf, \"ActionPlanStats\", ActionPlanStatsDto.class);\n    loadAlias(conf, \"PermissionTemplate\", PermissionTemplateDto.class);\n    loadAlias(conf, \"PermissionTemplateUser\", PermissionTemplateUserDto.class);\n    loadAlias(conf, \"PermissionTemplateGroup\", PermissionTemplateGroupDto.class);\n    loadAlias(conf, \"Characteristic\", CharacteristicDto.class);\n\n    // AuthorizationMapper has to be loaded before IssueMapper because this last one used it\n    loadMapper(conf, \"org.sonar.core.user.AuthorizationMapper\");\n    // ResourceMapper has to be loaded before IssueMapper because this last one used it\n    loadMapper(conf, ResourceMapper.class);\n\n    Class<?>[] mappers = {ActiveDashboardMapper.class, AuthorMapper.class, DashboardMapper.class,\n      DependencyMapper.class, DuplicationMapper.class, GraphDtoMapper.class,\n      IssueMapper.class, IssueStatsMapper.class, IssueChangeMapper.class, IssueFilterMapper.class, IssueFilterFavouriteMapper.class,\n      LoadedTemplateMapper.class, MeasureFilterMapper.class, PermissionTemplateMapper.class, PropertiesMapper.class, PurgeMapper.class,\n      ResourceKeyUpdaterMapper.class, ResourceIndexerMapper.class, ResourceSnapshotMapper.class, RoleMapper.class, RuleMapper.class,\n      SchemaMigrationMapper.class, SemaphoreMapper.class, UserMapper.class, WidgetMapper.class, WidgetPropertyMapper.class,\n      MeasureMapper.class, SnapshotDataMapper.class, SnapshotSourceMapper.class, ActionPlanMapper.class, ActionPlanStatsMapper.class,\n      NotificationQueueMapper.class, CharacteristicMapper.class\n    };\n    loadMappers(conf, mappers);\n    configureLogback(mappers);\n\n    sessionFactory = new SqlSessionFactoryBuilder().build(conf);\n    return this;\n  }","id":68018,"modified_method":"public MyBatis start() {\n    LogFactory.useSlf4jLogging();\n\n    Configuration conf = new Configuration();\n    conf.setEnvironment(new Environment(\"production\", createTransactionFactory(), database.getDataSource()));\n    conf.setDatabaseId(database.getDialect().getId());\n    conf.setUseGeneratedKeys(true);\n    conf.setLazyLoadingEnabled(false);\n    conf.setJdbcTypeForNull(JdbcType.NULL);\n    conf.getVariables().setProperty(\"_true\", database.getDialect().getTrueSqlValue());\n    conf.getVariables().setProperty(\"_false\", database.getDialect().getFalseSqlValue());\n\n    loadAlias(conf, \"ActiveDashboard\", ActiveDashboardDto.class);\n    loadAlias(conf, \"Author\", AuthorDto.class);\n    loadAlias(conf, \"Dashboard\", DashboardDto.class);\n    loadAlias(conf, \"Dependency\", DependencyDto.class);\n    loadAlias(conf, \"DuplicationUnit\", DuplicationUnitDto.class);\n    loadAlias(conf, \"Graph\", GraphDto.class);\n    loadAlias(conf, \"Group\", GroupDto.class);\n    loadAlias(conf, \"GroupRole\", GroupRoleDto.class);\n    loadAlias(conf, \"LoadedTemplate\", LoadedTemplateDto.class);\n    loadAlias(conf, \"MeasureFilter\", MeasureFilterDto.class);\n    loadAlias(conf, \"NotificationQueue\", NotificationQueueDto.class);\n    loadAlias(conf, \"Property\", PropertyDto.class);\n    loadAlias(conf, \"PurgeableSnapshot\", PurgeableSnapshotDto.class);\n    loadAlias(conf, \"Resource\", ResourceDto.class);\n    loadAlias(conf, \"ResourceIndex\", ResourceIndexDto.class);\n    loadAlias(conf, \"ResourceSnapshot\", ResourceSnapshotDto.class);\n    loadAlias(conf, \"Rule\", RuleDto.class);\n    loadAlias(conf, \"RuleParam\", RuleParamDto.class);\n    loadAlias(conf, \"Snapshot\", SnapshotDto.class);\n    loadAlias(conf, \"Semaphore\", SemaphoreDto.class);\n    loadAlias(conf, \"SchemaMigration\", SchemaMigrationDto.class);\n    loadAlias(conf, \"User\", UserDto.class);\n    loadAlias(conf, \"UserRole\", UserRoleDto.class);\n    loadAlias(conf, \"Widget\", WidgetDto.class);\n    loadAlias(conf, \"WidgetProperty\", WidgetPropertyDto.class);\n    loadAlias(conf, \"MeasureModel\", MeasureModel.class);\n    loadAlias(conf, \"MeasureData\", MeasureData.class);\n    loadAlias(conf, \"Issue\", IssueDto.class);\n    loadAlias(conf, \"IssueChange\", IssueChangeDto.class);\n    loadAlias(conf, \"IssueFilter\", IssueFilterDto.class);\n    loadAlias(conf, \"IssueFilterFavourite\", IssueFilterFavouriteDto.class);\n    loadAlias(conf, \"SnapshotData\", SnapshotDataDto.class);\n    loadAlias(conf, \"ActionPlanIssue\", ActionPlanDto.class);\n    loadAlias(conf, \"ActionPlanStats\", ActionPlanStatsDto.class);\n    loadAlias(conf, \"PermissionTemplate\", PermissionTemplateDto.class);\n    loadAlias(conf, \"PermissionTemplateUser\", PermissionTemplateUserDto.class);\n    loadAlias(conf, \"PermissionTemplateGroup\", PermissionTemplateGroupDto.class);\n    loadAlias(conf, \"Characteristic\", CharacteristicDto.class);\n\n    // AuthorizationMapper has to be loaded before IssueMapper because this last one used it\n    loadMapper(conf, \"org.sonar.core.user.AuthorizationMapper\");\n    // ResourceMapper has to be loaded before IssueMapper because this last one used it\n    loadMapper(conf, ResourceMapper.class);\n\n    Class<?>[] mappers = {ActiveDashboardMapper.class, AuthorMapper.class, DashboardMapper.class,\n      DependencyMapper.class, DuplicationMapper.class, GraphDtoMapper.class,\n      IssueMapper.class, IssueStatsMapper.class, IssueChangeMapper.class, IssueFilterMapper.class, IssueFilterFavouriteMapper.class,\n      LoadedTemplateMapper.class, MeasureFilterMapper.class, PermissionTemplateMapper.class, PropertiesMapper.class, PurgeMapper.class,\n      ResourceKeyUpdaterMapper.class, ResourceIndexerMapper.class, ResourceSnapshotMapper.class, RoleMapper.class, RuleMapper.class,\n      SchemaMigrationMapper.class, SemaphoreMapper.class, UserMapper.class, WidgetMapper.class, WidgetPropertyMapper.class,\n      MeasureMapper.class, SnapshotDataMapper.class, SnapshotSourceMapper.class, ActionPlanMapper.class, ActionPlanStatsMapper.class,\n      NotificationQueueMapper.class, CharacteristicMapper.class\n    };\n    loadMappers(conf, mappers);\n    configureLogback(mappers);\n\n    sessionFactory = new SqlSessionFactoryBuilder().build(conf);\n    return this;\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public RuleDto selectById(Long id) {\n    SqlSession session = mybatis.openSession();\n    try {\n      RuleMapper mapper = session.getMapper(RuleMapper.class);\n      return mapper.selectById(id);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68019,"modified_method":"public RuleDto selectById(Long id) {\n    SqlSession session = mybatis.openSession();\n    try {\n      return getMapper(session).selectById(id);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<RuleDto> selectAll() {\n    SqlSession session = mybatis.openSession();\n    try {\n      RuleMapper mapper = session.getMapper(RuleMapper.class);\n      return mapper.selectAll();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68020,"modified_method":"public List<RuleDto> selectAll() {\n    SqlSession session = mybatis.openSession();\n    try {\n      return getMapper(session).selectAll();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSelectById() throws Exception {\n    setupData(\"selectById\");\n    RuleDto ruleDto = dao.selectById(2L);\n\n    assertThat(ruleDto.getId(), Is.is(2L));\n    assertThat(ruleDto.getName(), Is.is(\"Avoid Null\"));\n    assertThat(ruleDto.getDescription(), Is.is(\"Should avoid NULL\"));\n    assertThat(ruleDto.getStatus(), Is.is(Rule.STATUS_READY));\n    assertThat(ruleDto.getRepositoryKey(), Is.is(\"checkstyle\"));\n  }","id":68021,"modified_method":"@Test\n  public void testSelectById() throws Exception {\n    setupData(\"selectById\");\n    RuleDto ruleDto = dao.selectById(2L);\n\n    assertThat(ruleDto.getId()).isEqualTo(2L);\n    assertThat(ruleDto.getName()).isEqualTo(\"Avoid Null\");\n    assertThat(ruleDto.getDescription()).isEqualTo(\"Should avoid NULL\");\n    assertThat(ruleDto.getStatus()).isEqualTo(Rule.STATUS_READY);\n    assertThat(ruleDto.getRepositoryKey()).isEqualTo(\"checkstyle\");\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSelectAll() throws Exception {\n    setupData(\"selectAll\");\n    List<RuleDto> ruleDtos = dao.selectAll();\n\n    assertThat(ruleDtos.size(), Is.is(1));\n    RuleDto ruleDto = ruleDtos.get(0);\n    assertThat(ruleDto.getId(), Is.is(1L));\n    assertThat(ruleDto.getName(), Is.is(\"Avoid Null\"));\n    assertThat(ruleDto.getDescription(), Is.is(\"Should avoid NULL\"));\n    assertThat(ruleDto.getStatus(), Is.is(Rule.STATUS_READY));\n    assertThat(ruleDto.getRepositoryKey(), Is.is(\"checkstyle\"));\n  }","id":68022,"modified_method":"@Test\n  public void testSelectAll() throws Exception {\n    setupData(\"selectAll\");\n    List<RuleDto> ruleDtos = dao.selectAll();\n\n    assertThat(ruleDtos.size()).isEqualTo(1);\n    RuleDto ruleDto = ruleDtos.get(0);\n    assertThat(ruleDto.getId()).isEqualTo(1L);\n    assertThat(ruleDto.getName()).isEqualTo(\"Avoid Null\");\n    assertThat(ruleDto.getDescription()).isEqualTo(\"Should avoid NULL\");\n    assertThat(ruleDto.getStatus()).isEqualTo(Rule.STATUS_READY);\n    assertThat(ruleDto.getRepositoryKey()).isEqualTo(\"checkstyle\");\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public RuleRegistry(SearchIndex searchIndex, DatabaseSessionFactory sessionFactory, RuleI18nManager ruleI18nManager) {\n    this.searchIndex = searchIndex;\n    this.sessionFactory = sessionFactory;\n    this.ruleI18nManager = ruleI18nManager;\n  }","id":68023,"modified_method":"public RuleRegistry(SearchIndex searchIndex, RuleDao ruleDao, RuleI18nManager ruleI18nManager) {\n    this.searchIndex = searchIndex;\n    this.ruleDao = ruleDao;\n    this.ruleI18nManager = ruleI18nManager;\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Create or update definition of rule identified by <code>ruleId<\/code>\n   * @param ruleId\n   */\n  public void saveOrUpdate(int ruleId) {\n    DatabaseSession session = sessionFactory.getSession();\n    Rule rule = session.getEntity(Rule.class, ruleId);\n    try {\n      searchIndex.putSynchronous(INDEX_RULES, TYPE_RULE, Integer.toString(rule.getId()), ruleDocument(rule));\n    } catch(IOException ioexception) {\n      throw new IllegalStateException(\"Unable to index rule with id=\"+ruleId, ioexception);\n    }\n  }","id":68024,"modified_method":"/**\n   * Create or update definition of rule identified by <code>ruleId<\/code>\n   * @param ruleId\n   */\n  public void saveOrUpdate(int ruleId) {\n    RuleDto rule = ruleDao.selectById(Long.valueOf(ruleId));\n    Collection<RuleParamDto> params = ruleDao.selectParameters(rule.getId());\n    try {\n      searchIndex.putSynchronous(INDEX_RULES, TYPE_RULE, Long.toString(rule.getId()), ruleDocument(rule, params));\n    } catch(IOException ioexception) {\n      throw new IllegalStateException(\"Unable to index rule with id=\"+ruleId, ioexception);\n    }\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void bulkRegisterRules() {\n    TimeProfiler profiler = new TimeProfiler();\n    DatabaseSession session = sessionFactory.getSession();\n\n    profiler.start(\"Rebuilding rules index - query\");\n    List<Rule> rules = session.getResults(Rule.class);\n    profiler.stop();\n\n    try {\n      bulkIndex(rules);\n    } catch(IOException ioe) {\n      throw new IllegalStateException(\"Unable to index rules\", ioe);\n    }\n  }","id":68025,"modified_method":"public void bulkRegisterRules() {\n    TimeProfiler profiler = new TimeProfiler();\n\n    profiler.start(\"Rebuilding rules index - query\");\n    List<RuleDto> rules = ruleDao.selectNonManual();\n    List<RuleParamDto> flatParams = ruleDao.selectParameters();\n    profiler.stop();\n\n    Multimap<Long, RuleParamDto> paramsByRule = ArrayListMultimap.create();\n    for (RuleParamDto param: flatParams) {\n      paramsByRule.put(param.getRuleId(), param);\n    }\n\n    try {\n      bulkIndex(rules, paramsByRule);\n    } catch(IOException ioe) {\n      throw new IllegalStateException(\"Unable to index rules\", ioe);\n    }\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_index_and_reindex_single_rule() {\n    DatabaseSession session = mock(DatabaseSession.class);\n    when(sessionFactory.getSession()).thenReturn(session);\n    Rule rule = Rule.create(\"repo\", \"key\");\n    int id = 3;\n    rule.setId(id);\n    when(session.getEntity(Rule.class, id)).thenReturn(rule);\n    registry.saveOrUpdate(id);\n    assertThat(registry.findIds(ImmutableMap.of(\"repositoryKey\", \"repo\"))).hasSize(1);\n    rule.setName(\"polop\");\n    registry.saveOrUpdate(id);\n    assertThat(registry.findIds(ImmutableMap.of(\"repositoryKey\", \"repo\"))).hasSize(1);\n  }","id":68026,"modified_method":"@Test\n  public void should_index_and_reindex_single_rule() {\n    RuleDto rule = new RuleDto();\n    rule.setRepositoryKey(\"repo\");\n    rule.setRuleKey(\"key\");\n    int id = 3;\n    rule.setId((long) id);\n    when(ruleDao.selectById((long) id)).thenReturn(rule);\n    registry.saveOrUpdate(id);\n    assertThat(registry.findIds(ImmutableMap.of(\"repositoryKey\", \"repo\"))).hasSize(1);\n    rule.setName(\"polop\");\n    registry.saveOrUpdate(id);\n    assertThat(registry.findIds(ImmutableMap.of(\"repositoryKey\", \"repo\"))).hasSize(1);\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_index_all_rules() {\n    DatabaseSession session = mock(DatabaseSession.class);\n    when(sessionFactory.getSession()).thenReturn(session);\n    Rule rule1 = Rule.create(\"repo\", \"key1\");\n    rule1.setId(3);\n    Rule rule2 = Rule.create(\"repo\", \"key2\");\n    rule2.createParameter(\"param\");\n    rule2.setId(4);\n    rule2.setParent(rule1);\n    List<Rule> rules = ImmutableList.of(rule1, rule2);\n    when(session.getResults(Rule.class)).thenReturn(rules);\n    registry.bulkRegisterRules();\n    assertThat(registry.findIds(ImmutableMap.of(\"repositoryKey\", \"repo\"))).hasSize(2);\n  }","id":68027,"modified_method":"@Test\n  public void should_index_all_rules() {\n    long ruleId1 = 3L;\n    RuleDto rule1 = new RuleDto();\n    rule1.setRepositoryKey(\"repo\");\n    rule1.setRuleKey(\"key1\");\n    rule1.setId(ruleId1);\n    long ruleId2 = 4L;\n    RuleDto rule2 = new RuleDto();\n    rule2.setRepositoryKey(\"repo\");\n    rule2.setRuleKey(\"key2\");\n    rule2.setId(ruleId2);\n    rule2.setParentId(ruleId1);\n    List<RuleDto> rules = ImmutableList.of(rule1, rule2);\n\n    RuleParamDto paramRule2 = new RuleParamDto();\n    paramRule2.setName(\"name\");\n    paramRule2.setRuleId(ruleId2);\n    List<RuleParamDto> params = ImmutableList.of(paramRule2);\n\n    when(ruleDao.selectNonManual()).thenReturn(rules);\n    when(ruleDao.selectParameters()).thenReturn(params);\n    registry.bulkRegisterRules();\n    assertThat(registry.findIds(ImmutableMap.of(\"repositoryKey\", \"repo\"))).hasSize(2);\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    sessionFactory = mock(DatabaseSessionFactory.class);\n    ruleI18nManager = mock(RuleI18nManager.class);\n\n    esSetup = new EsSetup();\n    esSetup.execute(EsSetup.deleteAll());\n\n    SearchNode node = mock(SearchNode.class);\n    when(node.client()).thenReturn(esSetup.client());\n    searchIndex = new SearchIndex(node);\n    searchIndex.start();\n\n    registry = new RuleRegistry(searchIndex, sessionFactory, ruleI18nManager);\n    registry.start();\n\n    String source1 = IOUtils.toString(TestUtils.getResource(getClass(), \"rules/rule1.json\").toURI());\n    String source2 = IOUtils.toString(TestUtils.getResource(getClass(), \"rules/rule2.json\").toURI());\n    String source3 = IOUtils.toString(TestUtils.getResource(getClass(), \"rules/rule3.json\").toURI());\n\n    esSetup.execute(\n      EsSetup.index(\"rules\", \"rule\", \"1\").withSource(source1),\n      EsSetup.index(\"rules\", \"rule\", \"2\").withSource(source2),\n      EsSetup.index(\"rules\", \"rule\", \"3\").withSource(source3)\n    );\n\n  }","id":68028,"modified_method":"@Before\n  public void setUp() throws Exception {\n    ruleDao = mock(RuleDao.class);\n    ruleI18nManager = mock(RuleI18nManager.class);\n\n    esSetup = new EsSetup();\n    esSetup.execute(EsSetup.deleteAll());\n\n    SearchNode node = mock(SearchNode.class);\n    when(node.client()).thenReturn(esSetup.client());\n    searchIndex = new SearchIndex(node);\n    searchIndex.start();\n\n    registry = new RuleRegistry(searchIndex, ruleDao, ruleI18nManager);\n    registry.start();\n\n    String source1 = IOUtils.toString(TestUtils.getResource(getClass(), \"rules/rule1.json\").toURI());\n    String source2 = IOUtils.toString(TestUtils.getResource(getClass(), \"rules/rule2.json\").toURI());\n    String source3 = IOUtils.toString(TestUtils.getResource(getClass(), \"rules/rule3.json\").toURI());\n\n    esSetup.execute(\n      EsSetup.index(\"rules\", \"rule\", \"1\").withSource(source1),\n      EsSetup.index(\"rules\", \"rule\", \"2\").withSource(source2),\n      EsSetup.index(\"rules\", \"rule\", \"3\").withSource(source3)\n    );\n\n  }","commit_id":"37d08788c4467247a47aa30a5fb84335c6372a27","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public ActionPlansWidget() {\n    super(\"action_plans\", \"Action plans\", \"/org/sonar/plugins/core/widgets/actionPlans/action_plans.html.erb\");\n  }","id":68029,"modified_method":"public ActionPlansWidget() {\n    super(\"action_plans\", \"Action plans\", \"/org/sonar/plugins/core/widgets/action_plans.html.erb\");\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_be_registered_as_an_extension() {\n    for (CoreWidget widget : widgets()) {\n      assertThat(new CorePlugin().getExtensions()).contains(widget.getClass());\n    }\n  }","id":68030,"modified_method":"@Test\n  public void should_be_registered_as_an_extension() {\n    for (CoreWidget widget : widgets()) {\n      assertThat(new CorePlugin().getExtensions()).as(\"Widget not registered: \" + widget.getClass()).contains(widget.getClass());\n    }\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_templates() {\n    for (CoreWidget widget : widgets()) {\n      assertThat(widget.getClass().getResource(widget.getTemplatePath())).isNotNull();\n    }\n  }","id":68031,"modified_method":"@Test\n  public void should_find_templates() {\n    for (CoreWidget widget : widgets()) {\n      assertThat(widget.getClass().getResource(widget.getTemplatePath()))\n        .as(\"Template not found: \" + widget.getTemplatePath())\n        .isNotNull();\n    }\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * @return true if the database has been created, false if this database is not supported\n   */\n  public boolean createDatabase() {\n    if (!DdlUtils.supportsDialect(database.getDialect().getId())) {\n      return false;\n    }\n\n    LoggerFactory.getLogger(getClass()).info(\"Create database\");\n    SqlSession session = null;\n    Connection connection = null;\n    try {\n      session = myBatis.openSession();\n      connection = session.getConnection();\n      DdlUtils.createSchema(connection, database.getDialect().getId());\n    } finally {\n      try {\n        MyBatis.closeQuietly(session);\n\n        // The connection is probably already closed by session.close()\n        // but it's not documented in mybatis javadoc.\n        if (null != connection) {\n          connection.close();\n        }\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    return true;\n  }","id":68032,"modified_method":"/**\n   * @return true if the database has been created, false if this database is not supported\n   */\n  public boolean createDatabase() {\n    if (!DdlUtils.supportsDialect(database.getDialect().getId())) {\n      return false;\n    }\n\n    LoggerFactory.getLogger(getClass()).info(\"Create database\");\n    SqlSession session = null;\n    Connection connection = null;\n    try {\n      session = myBatis.openSession();\n      connection = session.getConnection();\n      DdlUtils.createSchema(connection, database.getDialect().getId());\n    } finally {\n      MyBatis.closeQuietly(session);\n\n      // The connection is probably already closed by session.close()\n      // but it's not documented in mybatis javadoc.\n      DatabaseUtils.closeQuietly(connection);\n    }\n    return true;\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public Dashboard createDashboard() {\n    Dashboard dashboard = Dashboard.create()\n        .setGlobal(true)\n        .setLayout(DashboardLayout.TWO_COLUMNS);\n\n    dashboard.addWidget(WelcomeWidget.ID, 1);\n\n    MeasureFilterDto filter = findSystemFilter(MyFavouritesFilter.NAME);\n    if (filter != null) {\n      dashboard\n          .addWidget(MeasureFilterListWidget.ID, 1)\n          .setProperty(MeasureFilterListWidget.FILTER_PROPERTY, filter.getId().toString())\n          .setProperty(MeasureFilterListWidget.PAGE_SIZE_PROPERTY, \"50\");\n    }\n\n    filter = findSystemFilter(ProjectFilter.NAME);\n    if (filter != null) {\n      dashboard\n          .addWidget(MeasureFilterListWidget.ID, 2)\n          .setProperty(MeasureFilterListWidget.FILTER_PROPERTY, filter.getId().toString())\n          .setProperty(MeasureFilterListWidget.PAGE_SIZE_PROPERTY, \"20\");\n\n      dashboard\n          .addWidget(MeasureFilterTreemapWidget.ID, 2)\n          .setProperty(MeasureFilterListWidget.FILTER_PROPERTY, filter.getId().toString())\n          .setProperty(MeasureFilterTreemapWidget.SIZE_METRIC_PROPERTY, \"ncloc\")\n          .setProperty(MeasureFilterTreemapWidget.COLOR_METRIC_PROPERTY, \"violations_density\");\n    }\n\n    return dashboard;\n  }","id":68033,"modified_method":"@Override\n  public Dashboard createDashboard() {\n    Dashboard dashboard = Dashboard.create()\n      .setGlobal(true)\n      .setLayout(DashboardLayout.TWO_COLUMNS);\n\n    dashboard.addWidget(WelcomeWidget.ID, 1);\n    addMyFavouritesWidget(dashboard);\n    addProjectsWidgets(dashboard);\n\n    return dashboard;\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"void appendSqlCondition(StringBuilder sql) {\n    sql.append(\" pm.metric_id=\");\n    sql.append(metric.getId());\n    sql.append(\" AND \").append(valueColumn()).append(operator.getSql()).append(value);\n  }","id":68034,"modified_method":"StringBuilder appendSqlCondition(StringBuilder sql) {\n    sql.append(\" pm.metric_id=\");\n    sql.append(metric.getId());\n    sql.append(\" AND \").append(valueColumn()).append(operator.getSql()).append(value);\n    return sql;\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void sequenceNameShouldFollowRailsConventions() {\n    Properties props = new Properties();\n    props.setProperty(PersistentIdentifierGenerator.TABLE, \"my_table\");\n    props.setProperty(PersistentIdentifierGenerator.PK, \"id\");\n\n    OracleSequenceGenerator generator = new OracleSequenceGenerator();\n    generator.configure(null, props, new Oracle.Oracle10gWithDecimalDialect());\n    assertThat(generator.getSequenceName(), is(\"MY_TABLE_SEQ\"));\n  }","id":68035,"modified_method":"@Test\n  public void sequenceNameShouldFollowRailsConventions() {\n    Properties props = new Properties();\n    props.setProperty(PersistentIdentifierGenerator.TABLE, \"my_table\");\n    props.setProperty(PersistentIdentifierGenerator.PK, \"id\");\n\n    OracleSequenceGenerator generator = new OracleSequenceGenerator();\n    generator.configure(null, props, new Oracle.Oracle10gWithDecimalDialect());\n    assertThat(generator.getSequenceName()).isEqualTo(\"MY_TABLE_SEQ\");\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_insert_filters_on_start() {\n    when(loadedTemplateDao.countByTypeAndKey(eq(LoadedTemplateDto.FILTER_TYPE), anyString())).thenReturn(0);\n    when(filterTemplate.createFilter()).thenReturn(Filter.create());\n\n    registerMeasure.start();\n\n    verify(filterDao).insert(any(MeasureFilterDto.class));\n    verify(loadedTemplateDao).insert(any(LoadedTemplateDto.class));\n  }","id":68036,"modified_method":"@Test\n  public void should_insert_filters_on_start() {\n    when(loadedTemplateDao.countByTypeAndKey(eq(LoadedTemplateDto.FILTER_TYPE), anyString())).thenReturn(0);\n    when(filterTemplate.createFilter()).thenReturn(Filter.create());\n\n    registration.start();\n\n    verify(filterDao).insert(any(MeasureFilterDto.class));\n    verify(loadedTemplateDao).insert(any(LoadedTemplateDto.class));\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_create_dto_from_extension() {\n    when(filterTemplate.createFilter()).thenReturn(Filter.create()\n      .setFavouritesOnly(false)\n      .setDisplayAs(\"list\")\n      .add(Criterion.createForMetric(\"complexity\", Criterion.LT, 12f, false))\n      .add(Criterion.createForMetric(\"lcom4\", Criterion.GTE, 5f, false))\n      .add(FilterColumn.create(\"metric\", \"distance\", \"ASC\", false))\n    );\n\n    MeasureFilterDto dto = registerMeasure.createDtoFromExtension(\"Fake\", filterTemplate.createFilter());\n\n    assertThat(dto.getName()).isEqualTo(\"Fake\");\n    assertThat(dto.isShared()).isTrue();\n    assertThat(dto.getData()).doesNotContain(\"onFavourites=true\");\n    assertThat(dto.getData()).contains(\"display=list\");\n    assertThat(dto.getData()).contains(\"c1_metric=complexity\");\n    assertThat(dto.getData()).contains(\"c1_op=lt\");\n    assertThat(dto.getData()).contains(\"c1_val=12.0\");\n    assertThat(dto.getData()).contains(\"c2_metric=lcom4\");\n    assertThat(dto.getData()).contains(\"c2_op=gte\");\n    assertThat(dto.getData()).contains(\"c2_val=5.0\");\n    assertThat(dto.getData()).contains(\"cols=metric:distance\");\n  }","id":68037,"modified_method":"@Test\n  public void should_create_dto_from_extension() {\n    when(filterTemplate.createFilter()).thenReturn(Filter.create()\n      .setFavouritesOnly(false)\n      .setDisplayAs(\"list\")\n      .add(Criterion.createForMetric(\"complexity\", Criterion.LT, 12f, false))\n      .add(Criterion.createForMetric(\"lcom4\", Criterion.GTE, 5f, false))\n      .add(FilterColumn.create(\"metric\", \"distance\", \"ASC\", false))\n    );\n\n    MeasureFilterDto dto = registration.createDtoFromExtension(\"Fake\", filterTemplate.createFilter());\n\n    assertThat(dto.getName()).isEqualTo(\"Fake\");\n    assertThat(dto.isShared()).isTrue();\n    assertThat(dto.getData()).doesNotContain(\"onFavourites=true\");\n    assertThat(dto.getData()).contains(\"display=list\");\n    assertThat(dto.getData()).contains(\"c1_metric=complexity\");\n    assertThat(dto.getData()).contains(\"c1_op=lt\");\n    assertThat(dto.getData()).contains(\"c1_val=12.0\");\n    assertThat(dto.getData()).contains(\"c2_metric=lcom4\");\n    assertThat(dto.getData()).contains(\"c2_op=gte\");\n    assertThat(dto.getData()).contains(\"c2_val=5.0\");\n    assertThat(dto.getData()).contains(\"cols=metric:distance\");\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_register_filter() {\n    when(filterTemplate.createFilter()).thenReturn(Filter.create());\n\n    MeasureFilterDto filterDto = registerMeasure.register(\"Fake\", filterTemplate.createFilter());\n\n    assertThat(filterDto).isNotNull();\n    verify(filterDao).insert(filterDto);\n    verify(loadedTemplateDao).insert(eq(new LoadedTemplateDto(\"Fake\", LoadedTemplateDto.FILTER_TYPE)));\n  }","id":68038,"modified_method":"@Test\n  public void should_register_filter() {\n    when(filterTemplate.createFilter()).thenReturn(Filter.create());\n\n    MeasureFilterDto filterDto = registration.register(\"Fake\", filterTemplate.createFilter());\n\n    assertThat(filterDto).isNotNull();\n    verify(filterDao).insert(filterDto);\n    verify(loadedTemplateDao).insert(eq(new LoadedTemplateDto(\"Fake\", LoadedTemplateDto.FILTER_TYPE)));\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void init() {\n    filterDao = mock(MeasureFilterDao.class);\n    loadedTemplateDao = mock(LoadedTemplateDao.class);\n    filterTemplate = mock(FilterTemplate.class);\n\n    registerMeasure = new RegisterNewMeasureFilters(new FilterTemplate[]{filterTemplate}, filterDao, loadedTemplateDao);\n  }","id":68039,"modified_method":"@Before\n  public void init() {\n    filterDao = mock(MeasureFilterDao.class);\n    loadedTemplateDao = mock(LoadedTemplateDao.class);\n    filterTemplate = mock(FilterTemplate.class);\n\n    registration = new RegisterNewMeasureFilters(new FilterTemplate[]{filterTemplate}, filterDao, loadedTemplateDao);\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_insert_nothing_if_templates_are_alreday_loaded() {\n    when(loadedTemplateDao.countByTypeAndKey(eq(LoadedTemplateDto.FILTER_TYPE), anyString())).thenReturn(1);\n\n    registerMeasure.start();\n\n    verify(filterDao, never()).insert(any(MeasureFilterDto.class));\n    verify(loadedTemplateDao, never()).insert(any(LoadedTemplateDto.class));\n  }","id":68040,"modified_method":"@Test\n  public void should_insert_nothing_if_templates_are_alreday_loaded() {\n    when(loadedTemplateDao.countByTypeAndKey(eq(LoadedTemplateDto.FILTER_TYPE), anyString())).thenReturn(1);\n\n    registration.start();\n\n    verify(filterDao, never()).insert(any(MeasureFilterDto.class));\n    verify(loadedTemplateDao, never()).insert(any(LoadedTemplateDto.class));\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_recreate_filter() {\n    when(filterDao.findSystemFilterByName(\"Fake\")).thenReturn(new MeasureFilterDto());\n\n    MeasureFilterDto filterDto = registerMeasure.register(\"Fake\", null);\n\n    assertThat(filterDto).isNull();\n    verify(filterDao, never()).insert(filterDto);\n    verify(loadedTemplateDao).insert(eq(new LoadedTemplateDto(\"Fake\", LoadedTemplateDto.FILTER_TYPE)));\n  }","id":68041,"modified_method":"@Test\n  public void should_not_recreate_filter() {\n    when(filterDao.findSystemFilterByName(\"Fake\")).thenReturn(new MeasureFilterDto());\n\n    MeasureFilterDto filterDto = registration.register(\"Fake\", null);\n\n    assertThat(filterDto).isNull();\n    verify(filterDao, never()).insert(filterDto);\n    verify(loadedTemplateDao).insert(eq(new LoadedTemplateDto(\"Fake\", LoadedTemplateDto.FILTER_TYPE)));\n  }","commit_id":"b951a180f8f247d809ba4358d409460192c67416","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void updateProperties(String key, String oldValue, String newValue, DbSession session) {\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    mapper.updateProperties(key, oldValue, newValue);\n  }","id":68042,"modified_method":"public void updateProperties(String key, String oldValue, String newValue, DbSession session) {\n    getMapper(session).updateProperties(key, oldValue, newValue);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectProjectProperties(String resourceKey) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      return selectProjectProperties(session, resourceKey);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68043,"modified_method":"public List<PropertyDto> selectProjectProperties(String resourceKey) {\n    try (DbSession session = mybatis.openSession(false)) {\n      return selectProjectProperties(session, resourceKey);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectGlobalProperties(DbSession session) {\n    return session.getMapper(PropertiesMapper.class).selectGlobalProperties();\n  }","id":68044,"modified_method":"public List<PropertyDto> selectGlobalProperties(DbSession session) {\n    return getMapper(session).selectGlobalProperties();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  public PropertyDto selectProjectProperty(long resourceId, String propertyKey) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      return selectProjectProperty(session, resourceId, propertyKey);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68045,"modified_method":"@CheckForNull\n  public PropertyDto selectProjectProperty(long resourceId, String propertyKey) {\n    try (DbSession session = mybatis.openSession(false)) {\n      return selectProjectProperty(session, resourceId, propertyKey);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  public PropertyDto selectProjectProperty(DbSession dbSession, long resourceId, String propertyKey) {\n    return dbSession.getMapper(PropertiesMapper.class).selectByKey(new PropertyDto().setKey(propertyKey).setResourceId(resourceId));\n  }","id":68046,"modified_method":"@CheckForNull\n  public PropertyDto selectProjectProperty(DbSession dbSession, long resourceId, String propertyKey) {\n    return getMapper(dbSession).selectByKey(new PropertyDto().setKey(propertyKey).setResourceId(resourceId));\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectEnabledDescendantModuleProperties(String moduleUuid, DbSession session) {\n    return session.getMapper(PropertiesMapper.class).selectDescendantModuleProperties(moduleUuid, Scopes.PROJECT, true);\n  }","id":68047,"modified_method":"public List<PropertyDto> selectEnabledDescendantModuleProperties(String moduleUuid, DbSession session) {\n    return getMapper(session).selectDescendantModuleProperties(moduleUuid, Scopes.PROJECT, true);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteProjectProperties(String key, String value, DbSession session) {\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    mapper.deleteProjectProperties(key, value);\n  }","id":68048,"modified_method":"public void deleteProjectProperties(String key, String value, DbSession session) {\n    getMapper(session).deleteProjectProperties(key, value);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectGlobalProperties() {\n    DbSession session = mybatis.openSession(false);\n    try {\n      return selectGlobalProperties(session);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68049,"modified_method":"public List<PropertyDto> selectGlobalProperties() {\n    try (DbSession session = mybatis.openSession(false)) {\n      return selectGlobalProperties(session);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectPropertiesByKeysAndComponentIds(DbSession session, Set<String> keys, Set<Long> componentIds) {\n    return executeLargeInputs(keys, partitionKeys -> executeLargeInputs(componentIds,\n      partitionComponentIds -> session.getMapper(PropertiesMapper.class).selectByKeysAndComponentIds(partitionKeys, partitionComponentIds)));\n  }","id":68050,"modified_method":"public List<PropertyDto> selectPropertiesByKeysAndComponentIds(DbSession session, Set<String> keys, Set<Long> componentIds) {\n    return executeLargeInputs(keys, partitionKeys -> executeLargeInputs(componentIds,\n      partitionComponentIds -> getMapper(session).selectByKeysAndComponentIds(partitionKeys, partitionComponentIds)));\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Update all properties (global and projects ones) with a given key and value to a new value\n   */\n  public void updateProperties(String key, String oldValue, String newValue) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      updateProperties(key, oldValue, newValue, session);\n      session.commit();\n\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68051,"modified_method":"/**\n   * Update all properties (global and projects ones) with a given key and value to a new value\n   */\n  public void updateProperties(String key, String oldValue, String newValue) {\n    try (DbSession session = mybatis.openSession(false)) {\n      updateProperties(key, oldValue, newValue, session);\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectByQuery(PropertyQuery query, DbSession session) {\n    return session.getMapper(PropertiesMapper.class).selectByQuery(query);\n  }","id":68052,"modified_method":"public List<PropertyDto> selectByQuery(PropertyQuery query, DbSession session) {\n    return getMapper(session).selectByQuery(query);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Returns the logins of users who have subscribed to the given notification dispatcher with the given notification channel.\n   * If a resource ID is passed, the search is made on users who have specifically subscribed for the given resource.\n   *\n   * @return the list of logins (maybe be empty - obviously)\n   */\n  public List<String> selectUsersForNotification(String notificationDispatcherKey, String notificationChannelKey,\n    @Nullable String projectUuid) {\n    DbSession session = mybatis.openSession(false);\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    try {\n      return mapper.findUsersForNotification(NOTIFICATION_PREFIX + notificationDispatcherKey + \".\" + notificationChannelKey, projectUuid);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68053,"modified_method":"/**\n   * Returns the logins of users who have subscribed to the given notification dispatcher with the given notification channel.\n   * If a resource ID is passed, the search is made on users who have specifically subscribed for the given resource.\n   *\n   * @return the list of logins (maybe be empty - obviously)\n   */\n  public List<String> selectUsersForNotification(String notificationDispatcherKey, String notificationChannelKey, @Nullable String projectUuid) {\n    try (DbSession session = mybatis.openSession(false)) {\n      return getMapper(session).findUsersForNotification(NOTIFICATION_PREFIX + notificationDispatcherKey + \".\" + notificationChannelKey, projectUuid);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PropertyDto> selectProjectProperties(DbSession session, String projectKey) {\n    return session.getMapper(PropertiesMapper.class).selectProjectProperties(projectKey);\n  }","id":68054,"modified_method":"public List<PropertyDto> selectProjectProperties(DbSession session, String projectKey) {\n    return getMapper(session).selectProjectProperties(projectKey);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void renamePropertyKey(String oldKey, String newKey) {\n    Preconditions.checkArgument(!Strings.isNullOrEmpty(oldKey), \"Old property key must not be empty\");\n    Preconditions.checkArgument(!Strings.isNullOrEmpty(newKey), \"New property key must not be empty\");\n\n    if (!newKey.equals(oldKey)) {\n      DbSession session = mybatis.openSession(false);\n      PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n      try {\n        mapper.renamePropertyKey(oldKey, newKey);\n        session.commit();\n\n      } finally {\n        MyBatis.closeQuietly(session);\n      }\n    }\n  }","id":68055,"modified_method":"public void renamePropertyKey(String oldKey, String newKey) {\n    checkArgument(!Strings.isNullOrEmpty(oldKey), \"Old property key must not be empty\");\n    checkArgument(!Strings.isNullOrEmpty(newKey), \"New property key must not be empty\");\n\n    if (!newKey.equals(oldKey)) {\n      try (DbSession session = mybatis.openSession(false)) {\n        getMapper(session).renamePropertyKey(oldKey, newKey);\n        session.commit();\n      }\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteAllProperties(String key) {\n    DbSession session = mybatis.openSession(false);\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    try {\n      mapper.deleteAllProperties(key);\n      session.commit();\n\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68056,"modified_method":"public void deleteAllProperties(String key) {\n    try (DbSession session = mybatis.openSession(false)) {\n      getMapper(session).deleteAllProperties(key);\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteGlobalProperty(String key) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      deleteGlobalProperty(key, session);\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68057,"modified_method":"public void deleteGlobalProperty(String key) {\n    try (DbSession session = mybatis.openSession(false)) {\n      deleteGlobalProperty(key, session);\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public boolean hasProjectNotificationSubscribersForDispatchers(String projectUuid, Collection<String> dispatcherKeys) {\n    DbSession session = mybatis.openSession(false);\n    Connection connection = session.getConnection();\n    PreparedStatement pstmt = null;\n    ResultSet rs = null;\n    String sql = \"SELECT count(1) FROM properties pp \" +\n      \"left outer join projects pj on pp.resource_id = pj.id \" +\n      \"where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) \" +\n      \"and (\" + DatabaseUtils.repeatCondition(\"pp.prop_key like ?\", dispatcherKeys.size(), \"or\") + \")\";\n    try {\n      pstmt = connection.prepareStatement(sql);\n      pstmt.setString(1, projectUuid);\n      int index = 2;\n      for (String dispatcherKey : dispatcherKeys) {\n        pstmt.setString(index, \"notification.\" + dispatcherKey + \".%\");\n        index++;\n      }\n      rs = pstmt.executeQuery();\n      return rs.next() && rs.getInt(1) > 0;\n    } catch (SQLException e) {\n      throw new IllegalStateException(\"Fail to execute SQL request: \" + sql, e);\n    } finally {\n      DbUtils.closeQuietly(connection, pstmt, rs);\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68058,"modified_method":"public boolean hasProjectNotificationSubscribersForDispatchers(String projectUuid, Collection<String> dispatcherKeys) {\n    try (DbSession session = mybatis.openSession(false);\n      Connection connection = session.getConnection();\n      PreparedStatement pstmt = createStatement(projectUuid, dispatcherKeys, connection);\n      ResultSet rs = pstmt.executeQuery()) {\n      return rs.next() && rs.getInt(1) > 0;\n    } catch (SQLException e) {\n      throw new IllegalStateException(\"Fail to execute SQL for hasProjectNotificationSubscribersForDispatchers\", e);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void insertProperty(PropertyDto property) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      insertProperty(session, property);\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68059,"modified_method":"public void insertProperty(PropertyDto property) {\n    try (DbSession session = mybatis.openSession(false)) {\n      insertProperty(session, property);\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteGlobalProperties() {\n    DbSession session = mybatis.openSession(false);\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    try {\n      mapper.deleteGlobalProperties();\n      session.commit();\n\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68060,"modified_method":"public void deleteGlobalProperties() {\n    try (DbSession session = mybatis.openSession(false)) {\n      getMapper(session).deleteGlobalProperties();\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void insertGlobalProperties(Map<String, String> properties) {\n    DbSession session = mybatis.openSession(true);\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    try {\n      for (Map.Entry<String, String> entry : properties.entrySet()) {\n        mapper.deleteGlobalProperty(entry.getKey());\n      }\n      for (Map.Entry<String, String> entry : properties.entrySet()) {\n        mapper.insert(new PropertyDto().setKey(entry.getKey()).setValue(entry.getValue()));\n      }\n      session.commit();\n\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68061,"modified_method":"public void insertGlobalProperties(Map<String, String> properties) {\n    try (DbSession session = mybatis.openSession(false)) {\n      PropertiesMapper mapper = getMapper(session);\n      properties.entrySet().forEach(entry -> delete(mapper, entry));\n      properties.entrySet().forEach(entry -> insert(mapper, entry));\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private List<PropertyDto> selectByKeys(DbSession session, Set<String> keys, @Nullable Long componentId) {\n    return executeLargeInputs(keys, partitionKeys -> session.getMapper(PropertiesMapper.class).selectByKeys(partitionKeys, componentId));\n  }","id":68062,"modified_method":"private List<PropertyDto> selectByKeys(DbSession session, Set<String> keys, @Nullable Long componentId) {\n    return executeLargeInputs(keys, partitionKeys -> getMapper(session).selectByKeys(partitionKeys, componentId));\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteProjectProperties(String key, String value) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      deleteProjectProperties(key, value, session);\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68063,"modified_method":"public void deleteProjectProperties(String key, String value) {\n    try (DbSession session = mybatis.openSession(false)) {\n      deleteProjectProperties(key, value, session);\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteProjectProperty(String key, Long projectId) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      deleteProjectProperty(key, projectId, session);\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68064,"modified_method":"public void deleteProjectProperty(String key, Long projectId) {\n    try (DbSession session = mybatis.openSession(false)) {\n      deleteProjectProperty(key, projectId, session);\n      session.commit();\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  public PropertyDto selectGlobalProperty(String propertyKey) {\n    DbSession session = mybatis.openSession(false);\n    try {\n      return selectGlobalProperty(session, propertyKey);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68065,"modified_method":"@CheckForNull\n  public PropertyDto selectGlobalProperty(String propertyKey) {\n    try (DbSession session = mybatis.openSession(false)) {\n      return selectGlobalProperty(session, propertyKey);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<String> selectNotificationSubscribers(String notificationDispatcherKey, String notificationChannelKey, @Nullable String componentKey) {\n    DbSession session = mybatis.openSession(false);\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    try {\n      return mapper.findNotificationSubscribers(NOTIFICATION_PREFIX + notificationDispatcherKey + \".\" + notificationChannelKey, componentKey);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":68066,"modified_method":"public List<String> selectNotificationSubscribers(String notificationDispatcherKey, String notificationChannelKey, @Nullable String componentKey) {\n    try (DbSession session = mybatis.openSession(false)) {\n      return getMapper(session).findNotificationSubscribers(NOTIFICATION_PREFIX + notificationDispatcherKey + \".\" + notificationChannelKey, componentKey);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void insertProperty(DbSession session, PropertyDto property) {\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    PropertyDto persistedProperty = mapper.selectByKey(property);\n    if (persistedProperty != null && !StringUtils.equals(persistedProperty.getValue(), property.getValue())) {\n      persistedProperty.setValue(property.getValue());\n      mapper.update(persistedProperty);\n    } else if (persistedProperty == null) {\n      mapper.insert(property);\n    }\n  }","id":68067,"modified_method":"public void insertProperty(DbSession session, PropertyDto property) {\n    PropertiesMapper mapper = getMapper(session);\n    PropertyDto persistedProperty = mapper.selectByKey(property);\n    if (persistedProperty != null && !StringUtils.equals(persistedProperty.getValue(), property.getValue())) {\n      persistedProperty.setValue(property.getValue());\n      mapper.update(persistedProperty);\n    } else if (persistedProperty == null) {\n      mapper.insert(property);\n    }\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteProjectProperty(String key, Long projectId, DbSession session) {\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    mapper.deleteProjectProperty(key, projectId);\n  }","id":68068,"modified_method":"public void deleteProjectProperty(String key, Long projectId, DbSession session) {\n    getMapper(session).deleteProjectProperty(key, projectId);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteGlobalProperty(String key, DbSession session) {\n    PropertiesMapper mapper = session.getMapper(PropertiesMapper.class);\n    mapper.deleteGlobalProperty(key);\n  }","id":68069,"modified_method":"public void deleteGlobalProperty(String key, DbSession session) {\n    getMapper(session).deleteGlobalProperty(key);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void deleteById(DbSession dbSession, long id) {\n    dbSession.getMapper(PropertiesMapper.class).deleteById(id);\n  }","id":68070,"modified_method":"public void deleteById(DbSession dbSession, long id) {\n    getMapper(dbSession).deleteById(id);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  public PropertyDto selectGlobalProperty(DbSession session, String propertyKey) {\n    return session.getMapper(PropertiesMapper.class).selectByKey(new PropertyDto().setKey(propertyKey));\n  }","id":68071,"modified_method":"@CheckForNull\n  public PropertyDto selectGlobalProperty(DbSession session, String propertyKey) {\n    return getMapper(session).selectByKey(new PropertyDto().setKey(propertyKey));\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void hasNotificationSubscribers() {\n    dbTester.prepareDbUnit(getClass(), \"findNotificationSubscribers.xml\");\n\n    // Nobody is subscribed\n    assertThat(dao.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", asList(\"NotSexyDispatcher\"))).isFalse();\n\n    // Global subscribers\n    assertThat(dao.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", asList(\"DispatcherWithGlobalSubscribers\"))).isTrue();\n\n    // Project subscribers\n    assertThat(dao.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", asList(\"DispatcherWithProjectSubscribers\"))).isTrue();\n    assertThat(dao.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_B\", asList(\"DispatcherWithProjectSubscribers\"))).isFalse();\n\n    // Global + Project subscribers\n    assertThat(dao.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", asList(\"DispatcherWithGlobalAndProjectSubscribers\"))).isTrue();\n    assertThat(dao.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_B\", asList(\"DispatcherWithGlobalAndProjectSubscribers\"))).isTrue();\n  }","id":68072,"modified_method":"@Test\n  public void hasNotificationSubscribers() {\n    insertUser(1);\n    insertUser(2);\n    insertProject(\"PROJECT_A\", 42);\n    // global subscription\n    insertProperty(1, \"notification.DispatcherWithGlobalSubscribers.Email\", \"true\", null, 2);\n    // project subscription\n    insertProperty(2, \"notification.DispatcherWithProjectSubscribers.Email\", \"true\", 42, 1);\n    insertProperty(3, \"notification.DispatcherWithGlobalAndProjectSubscribers.Email\", \"true\", 56, 1);\n    insertProperty(4, \"notification.DispatcherWithGlobalAndProjectSubscribers.Email\", \"true\", 42, 1);\n    // global subscription\n    insertProperty(5, \"notification.DispatcherWithGlobalAndProjectSubscribers.Email\", \"true\", null, 2);\n\n    // Nobody is subscribed\n    assertThat(underTest.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", singletonList(\"NotSexyDispatcher\"))).isFalse();\n\n    // Global subscribers\n    assertThat(underTest.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", singletonList(\"DispatcherWithGlobalSubscribers\"))).isTrue();\n\n    // Project subscribers\n    assertThat(underTest.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", singletonList(\"DispatcherWithProjectSubscribers\"))).isTrue();\n    assertThat(underTest.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_B\", singletonList(\"DispatcherWithProjectSubscribers\"))).isFalse();\n\n    // Global + Project subscribers\n    assertThat(underTest.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_A\", singletonList(\"DispatcherWithGlobalAndProjectSubscribers\"))).isTrue();\n    assertThat(underTest.hasProjectNotificationSubscribersForDispatchers(\"PROJECT_B\", singletonList(\"DispatcherWithGlobalAndProjectSubscribers\"))).isTrue();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void selectProjectProperty() {\n    dbTester.prepareDbUnit(getClass(), \"selectProjectProperties.xml\");\n    PropertyDto property = dao.selectProjectProperty(11L, \"commonslang.one\");\n\n    assertThat(property.getKey(), is(\"commonslang.one\"));\n    assertThat(property.getValue(), is(\"two\"));\n  }","id":68073,"modified_method":"@Test\n  public void selectProjectProperty() {\n    insertProject(\"A\", 10);\n    // global\n    insertProperty(1, \"global.one\", \"one\", null, null);\n    insertProperty(2, \"global.two\", \"two\", null, null);\n    // project\n    insertProperty(3, \"project.one\", \"one\", 10, null);\n\n    PropertyDto property = underTest.selectProjectProperty(10L, \"project.one\");\n\n    assertThat(property.getKey()).isEqualTo(\"project.one\");\n    assertThat(property.getValue()).isEqualTo(\"one\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void selectGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"selectGlobalProperties.xml\");\n    List<PropertyDto> properties = dao.selectGlobalProperties();\n    assertThat(properties.size(), is(2));\n\n    PropertyDto first = findById(properties, 1);\n    assertThat(first.getKey(), is(\"global.one\"));\n    assertThat(first.getValue(), is(\"one\"));\n\n    PropertyDto second = findById(properties, 2);\n    assertThat(second.getKey(), is(\"global.two\"));\n    assertThat(second.getValue(), is(\"two\"));\n  }","id":68074,"modified_method":"@Test\n  public void selectGlobalProperties() {\n    // global\n    insertProperty(1, \"global.one\", \"one\", null, null);\n    insertProperty(2, \"global.two\", \"two\", null, null);\n\n    List<PropertyDto> properties = underTest.selectGlobalProperties();\n    assertThat(properties.size()).isEqualTo(2);\n\n    PropertyDto first = findById(properties, 1);\n    assertThat(first.getKey()).isEqualTo(\"global.one\");\n    assertThat(first.getValue()).isEqualTo(\"one\");\n\n    PropertyDto second = findById(properties, 2);\n    assertThat(second.getKey()).isEqualTo(\"global.two\");\n    assertThat(second.getValue()).isEqualTo(\"two\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void select_properties_by_keys_and_component_ids() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project);\n    ComponentDto project2 = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project2);\n\n    UserDto user = UserTesting.newUserDto();\n    dbClient.userDao().insert(session, user);\n\n    String key = \"key\";\n    String anotherKey = \"anotherKey\";\n    insertProperties(\n      newGlobalPropertyDto().setKey(key),\n      newComponentPropertyDto(project).setKey(key),\n      newComponentPropertyDto(project2).setKey(key),\n      newComponentPropertyDto(project2).setKey(anotherKey),\n      newUserPropertyDto(user).setKey(key));\n\n    assertThat(dao.selectPropertiesByKeysAndComponentIds(session, newHashSet(key), newHashSet(project.getId())))\n      .extracting(\"key\", \"resourceId\").containsOnly(Tuple.tuple(key, project.getId()));\n    assertThat(dao.selectPropertiesByKeysAndComponentIds(session, newHashSet(key), newHashSet(project.getId(), project2.getId())))\n      .extracting(\"key\", \"resourceId\").containsOnly(\n        Tuple.tuple(key, project.getId()),\n        Tuple.tuple(key, project2.getId()));\n    assertThat(dao.selectPropertiesByKeysAndComponentIds(session, newHashSet(key, anotherKey), newHashSet(project.getId(), project2.getId())))\n      .extracting(\"key\", \"resourceId\").containsOnly(\n        Tuple.tuple(key, project.getId()),\n        Tuple.tuple(key, project2.getId()),\n        Tuple.tuple(anotherKey, project2.getId()));\n\n    assertThat(dao.selectPropertiesByKeysAndComponentIds(session, newHashSet(\"unknown\"), newHashSet(project.getId()))).isEmpty();\n    assertThat(dao.selectPropertiesByKeysAndComponentIds(session, newHashSet(\"key\"), newHashSet(123456789L))).isEmpty();\n    assertThat(dao.selectPropertiesByKeysAndComponentIds(session, newHashSet(\"unknown\"), newHashSet(123456789L))).isEmpty();\n  }","id":68075,"modified_method":"@Test\n  public void select_properties_by_keys_and_component_ids() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project);\n    ComponentDto project2 = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project2);\n\n    UserDto user = UserTesting.newUserDto();\n    dbClient.userDao().insert(session, user);\n\n    String key = \"key\";\n    String anotherKey = \"anotherKey\";\n    insertProperties(\n      newGlobalPropertyDto().setKey(key),\n      newComponentPropertyDto(project).setKey(key),\n      newComponentPropertyDto(project2).setKey(key),\n      newComponentPropertyDto(project2).setKey(anotherKey),\n      newUserPropertyDto(user).setKey(key));\n\n    assertThat(underTest.selectPropertiesByKeysAndComponentIds(session, newHashSet(key), newHashSet(project.getId())))\n      .extracting(\"key\", \"resourceId\").containsOnly(Tuple.tuple(key, project.getId()));\n    assertThat(underTest.selectPropertiesByKeysAndComponentIds(session, newHashSet(key), newHashSet(project.getId(), project2.getId())))\n      .extracting(\"key\", \"resourceId\").containsOnly(\n        Tuple.tuple(key, project.getId()),\n        Tuple.tuple(key, project2.getId()));\n    assertThat(underTest.selectPropertiesByKeysAndComponentIds(session, newHashSet(key, anotherKey), newHashSet(project.getId(), project2.getId())))\n      .extracting(\"key\", \"resourceId\").containsOnly(\n        Tuple.tuple(key, project.getId()),\n        Tuple.tuple(key, project2.getId()),\n        Tuple.tuple(anotherKey, project2.getId()));\n\n    assertThat(underTest.selectPropertiesByKeysAndComponentIds(session, newHashSet(\"unknown\"), newHashSet(project.getId()))).isEmpty();\n    assertThat(underTest.selectPropertiesByKeysAndComponentIds(session, newHashSet(\"key\"), newHashSet(123456789L))).isEmpty();\n    assertThat(underTest.selectPropertiesByKeysAndComponentIds(session, newHashSet(\"unknown\"), newHashSet(123456789L))).isEmpty();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void setProperty_update() {\n    dbTester.prepareDbUnit(getClass(), \"update.xml\");\n\n    dao.insertProperty(new PropertyDto().setKey(\"global.key\").setValue(\"new_global\"));\n    dao.insertProperty(new PropertyDto().setKey(\"project.key\").setResourceId(10L).setValue(\"new_project\"));\n    dao.insertProperty(new PropertyDto().setKey(\"user.key\").setUserId(100L).setValue(\"new_user\"));\n    dao.insertProperty(new PropertyDto().setKey(\"null.value\").setValue(null));\n\n    dbTester.assertDbUnit(getClass(), \"update-result.xml\", \"properties\");\n  }","id":68076,"modified_method":"@Test\n  public void setProperty_update() {\n    dbTester.prepareDbUnit(getClass(), \"update.xml\");\n\n    underTest.insertProperty(new PropertyDto().setKey(\"global.key\").setValue(\"new_global\"));\n    underTest.insertProperty(new PropertyDto().setKey(\"project.key\").setResourceId(10L).setValue(\"new_project\"));\n    underTest.insertProperty(new PropertyDto().setKey(\"user.key\").setUserId(100L).setValue(\"new_user\"));\n    underTest.insertProperty(new PropertyDto().setKey(\"null.value\").setValue(null));\n\n    dbTester.assertDbUnit(getClass(), \"update-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void updateGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"updateGlobalProperties.xml\");\n\n    dao.insertGlobalProperties(ImmutableMap.of(\"to_be_updated\", \"updated\"));\n\n    dbTester.assertDbUnitTable(getClass(), \"updateGlobalProperties-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","id":68077,"modified_method":"@Test\n  public void updateGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"updateGlobalProperties.xml\");\n\n    underTest.insertGlobalProperties(ImmutableMap.of(\"to_be_updated\", \"updated\"));\n\n    dbTester.assertDbUnitTable(getClass(), \"updateGlobalProperties-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void insertGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"insertGlobalProperties.xml\");\n\n    dao.insertGlobalProperties(ImmutableMap.of(\"to_be_inserted\", \"inserted\"));\n\n    dbTester.assertDbUnitTable(getClass(), \"insertGlobalProperties-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","id":68078,"modified_method":"@Test\n  public void insertGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"insertGlobalProperties.xml\");\n\n    underTest.insertGlobalProperties(ImmutableMap.of(\"to_be_inserted\", \"inserted\"));\n\n    dbTester.assertDbUnitTable(getClass(), \"insertGlobalProperties-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deleteGlobalProperty() {\n    dbTester.prepareDbUnit(getClass(), \"deleteGlobalProperty.xml\");\n\n    dao.deleteGlobalProperty(\"to_be_deleted\");\n\n    dbTester.assertDbUnit(getClass(), \"deleteGlobalProperty-result.xml\", \"properties\");\n  }","id":68079,"modified_method":"@Test\n  public void deleteGlobalProperty() {\n    dbTester.prepareDbUnit(getClass(), \"deleteGlobalProperty.xml\");\n\n    underTest.deleteGlobalProperty(\"to_be_deleted\");\n\n    dbTester.assertDbUnit(getClass(), \"deleteGlobalProperty-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void delete_property_by_id() {\n    dbTester.prepareDbUnit(getClass(), \"delete.xml\");\n\n    dao.deleteById(dbTester.getSession(), 1L);\n    dbTester.getSession().commit();\n\n    dbTester.assertDbUnit(getClass(), \"delete-result.xml\", \"properties\");\n  }","id":68080,"modified_method":"@Test\n  public void delete_property_by_id() {\n    dbTester.prepareDbUnit(getClass(), \"delete.xml\");\n\n    underTest.deleteById(dbTester.getSession(), 1L);\n    dbTester.getSession().commit();\n\n    dbTester.assertDbUnit(getClass(), \"delete-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void delete_project_properties() {\n    dbTester.prepareDbUnit(getClass(), \"delete_project_properties.xml\");\n\n    dao.deleteProjectProperties(\"sonar.profile.java\", \"Sonar Way\");\n\n    dbTester.assertDbUnit(getClass(), \"delete_project_properties-result.xml\", \"properties\");\n  }","id":68081,"modified_method":"@Test\n  public void delete_project_properties() {\n    dbTester.prepareDbUnit(getClass(), \"delete_project_properties.xml\");\n\n    underTest.deleteProjectProperties(\"sonar.profile.java\", \"Sonar Way\");\n\n    dbTester.assertDbUnit(getClass(), \"delete_project_properties-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void select_module_properties_tree() {\n    dbTester.prepareDbUnit(getClass(), \"select_module_properties_tree.xml\");\n\n    List<PropertyDto> properties = dao.selectEnabledDescendantModuleProperties(\"ABCD\", dbTester.getSession());\n    assertThat(properties.size(), is(4));\n    assertThat(properties).extracting(\"key\").containsOnly(\"struts.one\", \"core.one\", \"core.two\", \"data.one\");\n    assertThat(properties).extracting(\"value\").containsOnly(\"one\", \"two\");\n\n    properties = dao.selectEnabledDescendantModuleProperties(\"EFGH\", dbTester.getSession());\n    assertThat(properties.size(), is(3));\n    assertThat(properties).extracting(\"key\").containsOnly(\"core.one\", \"core.two\", \"data.one\");\n\n    properties = dao.selectEnabledDescendantModuleProperties(\"FGHI\", dbTester.getSession());\n    assertThat(properties.size(), is(1));\n    assertThat(properties).extracting(\"key\").containsOnly(\"data.one\");\n\n    assertThat(dao.selectEnabledDescendantModuleProperties(\"unknown-result.xml\", dbTester.getSession()).size(), is(0));\n  }","id":68082,"modified_method":"@Test\n  public void select_module_properties_tree() {\n    dbTester.prepareDbUnit(getClass(), \"select_module_properties_tree.xml\");\n\n    List<PropertyDto> properties = underTest.selectEnabledDescendantModuleProperties(\"ABCD\", dbTester.getSession());\n    assertThat(properties.size()).isEqualTo(4);\n    assertThat(properties).extracting(\"key\").containsOnly(\"struts.one\", \"core.one\", \"core.two\", \"data.one\");\n    assertThat(properties).extracting(\"value\").containsOnly(\"one\", \"two\");\n\n    properties = underTest.selectEnabledDescendantModuleProperties(\"EFGH\", dbTester.getSession());\n    assertThat(properties.size()).isEqualTo(3);\n    assertThat(properties).extracting(\"key\").containsOnly(\"core.one\", \"core.two\", \"data.one\");\n\n    properties = underTest.selectEnabledDescendantModuleProperties(\"FGHI\", dbTester.getSession());\n    assertThat(properties.size()).isEqualTo(1);\n    assertThat(properties).extracting(\"key\").containsOnly(\"data.one\");\n\n    assertThat(underTest.selectEnabledDescendantModuleProperties(\"unknown-result.xml\", dbTester.getSession()).size()).isEqualTo(0);\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_rename_if_same_key() {\n    dbTester.prepareDbUnit(getClass(), \"should_not_rename_if_same_key.xml\");\n\n    dao.renamePropertyKey(\"foo\", \"foo\");\n\n    dbTester.assertDbUnitTable(getClass(), \"should_not_rename_if_same_key-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","id":68083,"modified_method":"@Test\n  public void should_not_rename_if_same_key() {\n    dbTester.prepareDbUnit(getClass(), \"should_not_rename_if_same_key.xml\");\n\n    underTest.renamePropertyKey(\"foo\", \"foo\");\n\n    dbTester.assertDbUnitTable(getClass(), \"should_not_rename_if_same_key-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void select_by_query() {\n    dbTester.prepareDbUnit(getClass(), \"select_by_query.xml\");\n\n    List<PropertyDto> results = dao.selectByQuery(PropertyQuery.builder().setKey(\"user.two\").setComponentId(10L).setUserId(100).build(), dbTester.getSession());\n    assertThat(results).hasSize(1);\n    assertThat(results.get(0).getValue()).isEqualTo(\"two\");\n\n    results = dao.selectByQuery(PropertyQuery.builder().setKey(\"user.one\").setUserId(100).build(), dbTester.getSession());\n    assertThat(results).hasSize(1);\n    assertThat(results.get(0).getValue()).isEqualTo(\"one\");\n  }","id":68084,"modified_method":"@Test\n  public void select_by_query() {\n    dbTester.prepareDbUnit(getClass(), \"select_by_query.xml\");\n\n    List<PropertyDto> results = underTest.selectByQuery(PropertyQuery.builder().setKey(\"user.two\").setComponentId(10L).setUserId(100).build(), dbTester.getSession());\n    assertThat(results).hasSize(1);\n    assertThat(results.get(0).getValue()).isEqualTo(\"two\");\n\n    results = underTest.selectByQuery(PropertyQuery.builder().setKey(\"user.one\").setUserId(100).build(), dbTester.getSession());\n    assertThat(results).hasSize(1);\n    assertThat(results.get(0).getValue()).isEqualTo(\"one\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void selectGlobalProperty() {\n    dbTester.prepareDbUnit(getClass(), \"selectGlobalProperties.xml\");\n\n    PropertyDto prop = dao.selectGlobalProperty(\"global.one\");\n    assertThat(prop).isNotNull();\n    assertThat(prop.getValue(), is(\"one\"));\n\n    assertThat(dao.selectGlobalProperty(\"project.one\")).isNull();\n    assertThat(dao.selectGlobalProperty(\"user.one\")).isNull();\n    assertThat(dao.selectGlobalProperty(\"unexisting\")).isNull();\n  }","id":68085,"modified_method":"@Test\n  public void selectGlobalProperty() {\n    // global\n    insertProperty(1, \"global.one\", \"one\", null, null);\n    insertProperty(2, \"global.two\", \"two\", null, null);\n    // project\n    insertProperty(3, \"project.one\", \"one\", 10, null);\n    // user\n    insertProperty(4, \"user.one\", \"one\", null, 100);\n\n    PropertyDto prop = underTest.selectGlobalProperty(\"global.one\");\n    assertThat(prop).isNotNull();\n    assertThat(prop.getValue()).isEqualTo(\"one\");\n\n    assertThat(underTest.selectGlobalProperty(\"project.one\")).isNull();\n    assertThat(underTest.selectGlobalProperty(\"user.one\")).isNull();\n    assertThat(underTest.selectGlobalProperty(\"unexisting\")).isNull();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void select_component_properties_by_keys() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project);\n    UserDto user = UserTesting.newUserDto();\n    dbClient.userDao().insert(session, user);\n\n    String key = \"key\";\n    String anotherKey = \"anotherKey\";\n    insertProperties(\n      newGlobalPropertyDto().setKey(key),\n      newComponentPropertyDto(project).setKey(key),\n      newUserPropertyDto(user).setKey(key),\n      newComponentPropertyDto(project).setKey(anotherKey));\n\n    assertThat(dao.selectPropertiesByKeysAndComponentId(session, newHashSet(key), project.getId())).extracting(\"key\").containsOnly(key);\n    assertThat(dao.selectPropertiesByKeysAndComponentId(session, newHashSet(key, anotherKey), project.getId())).extracting(\"key\").containsOnly(key, anotherKey);\n    assertThat(dao.selectPropertiesByKeysAndComponentId(session, newHashSet(key, anotherKey, \"unknown\"), project.getId())).extracting(\"key\").containsOnly(key, anotherKey);\n\n    assertThat(dao.selectPropertiesByKeysAndComponentId(session, newHashSet(\"unknown\"), project.getId())).isEmpty();\n    assertThat(dao.selectPropertiesByKeysAndComponentId(session, newHashSet(key), 123456789L)).isEmpty();\n  }","id":68086,"modified_method":"@Test\n  public void select_component_properties_by_keys() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project);\n    UserDto user = UserTesting.newUserDto();\n    dbClient.userDao().insert(session, user);\n\n    String key = \"key\";\n    String anotherKey = \"anotherKey\";\n    insertProperties(\n      newGlobalPropertyDto().setKey(key),\n      newComponentPropertyDto(project).setKey(key),\n      newUserPropertyDto(user).setKey(key),\n      newComponentPropertyDto(project).setKey(anotherKey));\n\n    assertThat(underTest.selectPropertiesByKeysAndComponentId(session, newHashSet(key), project.getId())).extracting(\"key\").containsOnly(key);\n    assertThat(underTest.selectPropertiesByKeysAndComponentId(session, newHashSet(key, anotherKey), project.getId())).extracting(\"key\").containsOnly(key, anotherKey);\n    assertThat(underTest.selectPropertiesByKeysAndComponentId(session, newHashSet(key, anotherKey, \"unknown\"), project.getId())).extracting(\"key\").containsOnly(key, anotherKey);\n\n    assertThat(underTest.selectPropertiesByKeysAndComponentId(session, newHashSet(\"unknown\"), project.getId())).isEmpty();\n    assertThat(underTest.selectPropertiesByKeysAndComponentId(session, newHashSet(key), 123456789L)).isEmpty();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void selectProjectProperties() {\n    dbTester.prepareDbUnit(getClass(), \"selectProjectProperties.xml\");\n    List<PropertyDto> properties = dao.selectProjectProperties(\"org.struts:struts\");\n    assertThat(properties.size(), is(1));\n\n    PropertyDto first = properties.get(0);\n    assertThat(first.getKey(), is(\"struts.one\"));\n    assertThat(first.getValue(), is(\"one\"));\n  }","id":68087,"modified_method":"@Test\n  public void selectProjectProperties() {\n    insertProject(\"A\", 10);\n    // global\n    insertProperty(1, \"global.one\", \"one\", null, null);\n    insertProperty(2, \"global.two\", \"two\", null, null);\n    // project\n    insertProperty(3, \"project.one\", \"one\", 10, null);\n    insertProperty(4, \"project.two\", \"two\", 10, null);\n\n    List<PropertyDto> properties = underTest.selectProjectProperties(\"project10\");\n    assertThat(properties)\n      .hasSize(2)\n      .extracting(\"key\", \"value\")\n      .containsOnly(tuple(\"project.one\", \"one\"), tuple(\"project.two\", \"two\"));\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void renamePropertyKey() {\n    dbTester.prepareDbUnit(getClass(), \"renamePropertyKey.xml\");\n\n    dao.renamePropertyKey(\"sonar.license.secured\", \"sonar.license\");\n\n    dbTester.assertDbUnitTable(getClass(), \"renamePropertyKey-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","id":68088,"modified_method":"@Test\n  public void renamePropertyKey() {\n    dbTester.prepareDbUnit(getClass(), \"renamePropertyKey.xml\");\n\n    underTest.renamePropertyKey(\"sonar.license.secured\", \"sonar.license\");\n\n    dbTester.assertDbUnitTable(getClass(), \"renamePropertyKey-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void findNotificationSubscribers() {\n    dbTester.prepareDbUnit(getClass(), \"findNotificationSubscribers.xml\");\n\n    // Nobody is subscribed\n    List<String> users = dao.selectNotificationSubscribers(\"NotSexyDispatcher\", \"Email\", \"org.apache:struts\");\n    assertThat(users).isEmpty();\n\n    // Global subscribers\n    users = dao.selectNotificationSubscribers(\"DispatcherWithGlobalSubscribers\", \"Email\", \"org.apache:struts\");\n    assertThat(users).containsOnly(\"simon\");\n\n    users = dao.selectNotificationSubscribers(\"DispatcherWithGlobalSubscribers\", \"Email\", null);\n    assertThat(users).containsOnly(\"simon\");\n\n    // Project subscribers\n    users = dao.selectNotificationSubscribers(\"DispatcherWithProjectSubscribers\", \"Email\", \"org.apache:struts\");\n    assertThat(users).containsOnly(\"eric\");\n\n    // Global + Project subscribers\n    users = dao.selectNotificationSubscribers(\"DispatcherWithGlobalAndProjectSubscribers\", \"Email\", \"org.apache:struts\");\n    assertThat(users).containsOnly(\"eric\", \"simon\");\n  }","id":68089,"modified_method":"@Test\n  public void findNotificationSubscribers() {\n    insertUser(1);\n    insertUser(2);\n    insertProject(\"PROJECT_A\", 42);\n    // global subscription\n    insertProperty(1, \"notification.DispatcherWithGlobalSubscribers.Email\", \"true\", null, 2);\n    // project subscription\n    insertProperty(2, \"notification.DispatcherWithProjectSubscribers.Email\", \"true\", 42, 1);\n    insertProperty(3, \"notification.DispatcherWithGlobalAndProjectSubscribers.Email\", \"true\", 56, 1);\n    insertProperty(4, \"notification.DispatcherWithGlobalAndProjectSubscribers.Email\", \"true\", 42, 1);\n    // global subscription\n    insertProperty(5, \"notification.DispatcherWithGlobalAndProjectSubscribers.Email\", \"true\", null, 2);\n\n    // Nobody is subscribed\n    List<String> users = underTest.selectNotificationSubscribers(\"NotSexyDispatcher\", \"Email\", \"project42\");\n    assertThat(users).isEmpty();\n\n    // Global subscribers\n    users = underTest.selectNotificationSubscribers(\"DispatcherWithGlobalSubscribers\", \"Email\", \"project42\");\n    assertThat(users).containsOnly(\"user2\");\n\n    users = underTest.selectNotificationSubscribers(\"DispatcherWithGlobalSubscribers\", \"Email\", null);\n    assertThat(users).containsOnly(\"user2\");\n\n    // Project subscribers\n    users = underTest.selectNotificationSubscribers(\"DispatcherWithProjectSubscribers\", \"Email\", \"project42\");\n    assertThat(users).containsOnly(\"user1\");\n\n    // Global + Project subscribers\n    users = underTest.selectNotificationSubscribers(\"DispatcherWithGlobalAndProjectSubscribers\", \"Email\", \"project42\");\n    assertThat(users).containsOnly(\"user1\", \"user2\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void insertProperties(PropertyDto... properties) {\n    for (PropertyDto propertyDto : properties) {\n      dao.insertProperty(session, propertyDto);\n    }\n    session.commit();\n  }","id":68090,"modified_method":"private void insertProperties(PropertyDto... properties) {\n    for (PropertyDto propertyDto : properties) {\n      underTest.insertProperty(session, propertyDto);\n    }\n    session.commit();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFindUsersForNotification() {\n    dbTester.prepareDbUnit(getClass(), \"shouldFindUsersForNotification.xml\");\n\n    List<String> users = dao.selectUsersForNotification(\"NewViolations\", \"Email\", null);\n    assertThat(users).isEmpty();\n\n    users = dao.selectUsersForNotification(\"NewViolations\", \"Email\", \"uuid_78\");\n    assertThat(users).isEmpty();\n\n    users = dao.selectUsersForNotification(\"NewViolations\", \"Email\", \"uuid_45\");\n    assertThat(users).hasSize(1);\n    assertThat(users).containsOnly(\"user2\");\n\n    users = dao.selectUsersForNotification(\"NewViolations\", \"Twitter\", null);\n    assertThat(users).hasSize(1);\n    assertThat(users).containsOnly(\"user3\");\n\n    users = dao.selectUsersForNotification(\"NewViolations\", \"Twitter\", \"uuid_78\");\n    assertThat(users).isEmpty();\n\n    users = dao.selectUsersForNotification(\"NewViolations\", \"Twitter\", \"uuid_56\");\n    assertThat(users).hasSize(2);\n    assertThat(users).containsOnly(\"user1\", \"user3\");\n  }","id":68091,"modified_method":"@Test\n  public void shouldFindUsersForNotification() {\n    insertProject(\"uuid_45\", 45);\n    insertProject(\"uuid_56\", 56);\n    insertUser(1);\n    insertUser(2);\n    insertUser(3);\n    insertProperty(1, \"notification.NewViolations.Email\", \"true\", 45, 2);\n    insertProperty(2, \"notification.NewViolations.Twitter\", \"true\", null, 3);\n    insertProperty(3, \"notification.NewViolations.Twitter\", \"true\", 56, 1);\n    insertProperty(4, \"notification.NewViolations.Twitter\", \"true\", 56, 3);\n\n    List<String> users = underTest.selectUsersForNotification(\"NewViolations\", \"Email\", null);\n    assertThat(users).isEmpty();\n\n    users = underTest.selectUsersForNotification(\"NewViolations\", \"Email\", \"uuid_78\");\n    assertThat(users).isEmpty();\n\n    users = underTest.selectUsersForNotification(\"NewViolations\", \"Email\", \"uuid_45\");\n    assertThat(users).hasSize(1);\n    assertThat(users).containsOnly(\"user2\");\n\n    users = underTest.selectUsersForNotification(\"NewViolations\", \"Twitter\", null);\n    assertThat(users).hasSize(1);\n    assertThat(users).containsOnly(\"user3\");\n\n    users = underTest.selectUsersForNotification(\"NewViolations\", \"Twitter\", \"uuid_78\");\n    assertThat(users).isEmpty();\n\n    users = underTest.selectUsersForNotification(\"NewViolations\", \"Twitter\", \"uuid_56\");\n    assertThat(users).hasSize(2);\n    assertThat(users).containsOnly(\"user1\", \"user3\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void select_global_properties_by_keys() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project);\n    UserDto user = UserTesting.newUserDto();\n    dbClient.userDao().insert(session, user);\n\n    String key = \"key\";\n    String anotherKey = \"anotherKey\";\n    insertProperties(\n      newGlobalPropertyDto().setKey(key),\n      newComponentPropertyDto(project).setKey(key),\n      newUserPropertyDto(user).setKey(key),\n      newGlobalPropertyDto().setKey(anotherKey));\n\n    assertThat(dao.selectGlobalPropertiesByKeys(session, newHashSet(key))).extracting(\"key\").containsOnly(key);\n    assertThat(dao.selectGlobalPropertiesByKeys(session, newHashSet(key, anotherKey))).extracting(\"key\").containsOnly(key, anotherKey);\n    assertThat(dao.selectGlobalPropertiesByKeys(session, newHashSet(key, anotherKey, \"unknown\"))).extracting(\"key\").containsOnly(key, anotherKey);\n\n    assertThat(dao.selectGlobalPropertiesByKeys(session, newHashSet(\"unknown\"))).isEmpty();\n  }","id":68092,"modified_method":"@Test\n  public void select_global_properties_by_keys() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    dbClient.componentDao().insert(session, project);\n    UserDto user = UserTesting.newUserDto();\n    dbClient.userDao().insert(session, user);\n\n    String key = \"key\";\n    String anotherKey = \"anotherKey\";\n    insertProperties(\n      newGlobalPropertyDto().setKey(key),\n      newComponentPropertyDto(project).setKey(key),\n      newUserPropertyDto(user).setKey(key),\n      newGlobalPropertyDto().setKey(anotherKey));\n\n    assertThat(underTest.selectGlobalPropertiesByKeys(session, newHashSet(key))).extracting(\"key\").containsOnly(key);\n    assertThat(underTest.selectGlobalPropertiesByKeys(session, newHashSet(key, anotherKey))).extracting(\"key\").containsOnly(key, anotherKey);\n    assertThat(underTest.selectGlobalPropertiesByKeys(session, newHashSet(key, anotherKey, \"unknown\"))).extracting(\"key\").containsOnly(key, anotherKey);\n\n    assertThat(underTest.selectGlobalPropertiesByKeys(session, newHashSet(\"unknown\"))).isEmpty();\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void updatePropertiesFromKeyAndValueToNewValue() {\n    dbTester.prepareDbUnit(getClass(), \"updatePropertiesFromKeyAndValueToNewValue.xml\");\n\n    dao.updateProperties(\"sonar.profile.java\", \"Sonar Way\", \"Default\");\n\n    dbTester.assertDbUnitTable(getClass(), \"updatePropertiesFromKeyAndValueToNewValue-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","id":68093,"modified_method":"@Test\n  public void updatePropertiesFromKeyAndValueToNewValue() {\n    dbTester.prepareDbUnit(getClass(), \"updatePropertiesFromKeyAndValueToNewValue.xml\");\n\n    underTest.updateProperties(\"sonar.profile.java\", \"Sonar Way\", \"Default\");\n\n    dbTester.assertDbUnitTable(getClass(), \"updatePropertiesFromKeyAndValueToNewValue-result.xml\", \"properties\", \"prop_key\", \"text_value\", \"resource_id\", \"user_id\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void setProperty_insert() {\n    dbTester.prepareDbUnit(getClass(), \"insert.xml\");\n\n    dao.insertProperty(new PropertyDto().setKey(\"global.key\").setValue(\"new_global\"));\n    dao.insertProperty(new PropertyDto().setKey(\"project.key\").setResourceId(10L).setValue(\"new_project\"));\n    dao.insertProperty(new PropertyDto().setKey(\"user.key\").setUserId(100L).setValue(\"new_user\"));\n\n    dbTester.assertDbUnit(getClass(), \"insert-result.xml\", \"properties\");\n  }","id":68094,"modified_method":"@Test\n  public void setProperty_insert() {\n    dbTester.prepareDbUnit(getClass(), \"insert.xml\");\n\n    underTest.insertProperty(new PropertyDto().setKey(\"global.key\").setValue(\"new_global\"));\n    underTest.insertProperty(new PropertyDto().setKey(\"project.key\").setResourceId(10L).setValue(\"new_project\"));\n    underTest.insertProperty(new PropertyDto().setKey(\"user.key\").setUserId(100L).setValue(\"new_user\"));\n\n    dbTester.assertDbUnit(getClass(), \"insert-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_rename_with_empty_key() {\n    thrown.expect(IllegalArgumentException.class);\n    dao.renamePropertyKey(\"foo\", \"\");\n  }","id":68095,"modified_method":"@Test\n  public void should_not_rename_with_empty_key() {\n    thrown.expect(IllegalArgumentException.class);\n    underTest.renamePropertyKey(\"foo\", \"\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deleteAllProperties() {\n    dbTester.prepareDbUnit(getClass(), \"deleteAllProperties.xml\");\n\n    dao.deleteAllProperties(\"to_be_deleted\");\n\n    dbTester.assertDbUnit(getClass(), \"deleteAllProperties-result.xml\", \"properties\");\n  }","id":68096,"modified_method":"@Test\n  public void deleteAllProperties() {\n    dbTester.prepareDbUnit(getClass(), \"deleteAllProperties.xml\");\n\n    underTest.deleteAllProperties(\"to_be_deleted\");\n\n    dbTester.assertDbUnit(getClass(), \"deleteAllProperties-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void delete_project_property() {\n    dbTester.prepareDbUnit(getClass(), \"delete_project_property.xml\");\n\n    dao.deleteProjectProperty(\"struts.one\", 10L);\n\n    dbTester.assertDbUnit(getClass(), \"delete_project_property-result.xml\", \"properties\");\n  }","id":68097,"modified_method":"@Test\n  public void delete_project_property() {\n    dbTester.prepareDbUnit(getClass(), \"delete_project_property.xml\");\n\n    underTest.deleteProjectProperty(\"struts.one\", 10L);\n\n    dbTester.assertDbUnit(getClass(), \"delete_project_property-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deleteGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"deleteGlobalProperties.xml\");\n\n    dao.deleteGlobalProperties();\n\n    dbTester.assertDbUnit(getClass(), \"deleteGlobalProperties-result.xml\", \"properties\");\n  }","id":68098,"modified_method":"@Test\n  public void deleteGlobalProperties() {\n    dbTester.prepareDbUnit(getClass(), \"deleteGlobalProperties.xml\");\n\n    underTest.deleteGlobalProperties();\n\n    dbTester.assertDbUnit(getClass(), \"deleteGlobalProperties-result.xml\", \"properties\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_rename_an_empty_key() {\n    thrown.expect(IllegalArgumentException.class);\n    dao.renamePropertyKey(null, \"foo\");\n  }","id":68099,"modified_method":"@Test\n  public void should_not_rename_an_empty_key() {\n    thrown.expect(IllegalArgumentException.class);\n    underTest.renamePropertyKey(null, \"foo\");\n  }","commit_id":"e0ad2379d3e1f0e4c286570b5b86dd0a351589da","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGetExtensions() {\n    assertThat(new DbCleanerPlugin().getExtensions().size(), is(3));\n  }","id":68100,"modified_method":"@Test\n  public void shouldGetExtensions() {\n    assertThat(new DbCleanerPlugin().getExtensions()).hasSize(3);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotDecorateIfNoThresholds() {\n    assertThat(decorator.shouldExecuteOnProject(project), is(false));\n  }","id":68101,"modified_method":"@Test\n  public void shouldNotDecorateIfNoThresholds() {\n    assertThat(decorator.shouldExecuteOnProject(project)).isFalse();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDecorateIfThresholds() {\n    when(profile.getAlerts()).thenReturn(Arrays.asList(new Alert()));\n    assertThat(decorator.shouldExecuteOnProject(project), is(true));\n  }","id":68102,"modified_method":"@Test\n  public void shouldDecorateIfThresholds() {\n    when(profile.getAlerts()).thenReturn(Arrays.asList(new Alert()));\n    assertThat(decorator.shouldExecuteOnProject(project)).isTrue();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public NewIssue effortToFix(Double d) {\n    params.put(\"effortToFix\", d);\n    return this;\n  }","id":68103,"modified_method":"public NewIssue effortToFix(double d) {\n    params.put(\"effortToFix\", d);\n    return this;\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotExecuteIfProfileWithoutId() {\n    RulesProfile profile = mock(RulesProfile.class);\n    when(profile.getId()).thenReturn(null);\n    ProfileEventsSensor sensor = new ProfileEventsSensor(profile, null);\n\n    assertThat(sensor.shouldExecuteOnProject(project), is(false));\n    verifyZeroInteractions(project);\n  }","id":68104,"modified_method":"@Test\n  public void shouldNotExecuteIfProfileWithoutId() {\n    RulesProfile profile = mock(RulesProfile.class);\n    when(profile.getId()).thenReturn(null);\n    ProfileEventsSensor sensor = new ProfileEventsSensor(profile, null);\n\n    assertThat(sensor.shouldExecuteOnProject(project)).isFalse();\n    verifyZeroInteractions(project);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExecuteWhenProfileWithId() {\n    RulesProfile profile = mock(RulesProfile.class);\n    when(profile.getId()).thenReturn(123);\n    ProfileEventsSensor sensor = new ProfileEventsSensor(profile, null);\n\n    assertThat(sensor.shouldExecuteOnProject(project), is(true));\n    verifyZeroInteractions(project);\n  }","id":68105,"modified_method":"@Test\n  public void shouldExecuteWhenProfileWithId() {\n    RulesProfile profile = mock(RulesProfile.class);\n    when(profile.getId()).thenReturn(123);\n    ProfileEventsSensor sensor = new ProfileEventsSensor(profile, null);\n\n    assertThat(sensor.shouldExecuteOnProject(project)).isTrue();\n    verifyZeroInteractions(project);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExecuteOnProject_not_if_past_inspection() {\n    Project project = mock(Project.class);\n    when(project.isLatestAnalysis()).thenReturn(false);\n    assertFalse(decorator.shouldExecuteOnProject(project));\n  }","id":68106,"modified_method":"@Test\n  public void shouldExecuteOnProject_not_if_past_inspection() {\n    Project project = mock(Project.class);\n    when(project.isLatestAnalysis()).thenReturn(false);\n    assertThat(decorator.shouldExecuteOnProject(project)).isFalse();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExecuteOnProject() {\n    Project project = mock(Project.class);\n    when(project.isLatestAnalysis()).thenReturn(true);\n    assertTrue(decorator.shouldExecuteOnProject(project));\n  }","id":68107,"modified_method":"@Test\n  public void shouldExecuteOnProject() {\n    Project project = mock(Project.class);\n    when(project.isLatestAnalysis()).thenReturn(true);\n    assertThat(decorator.shouldExecuteOnProject(project)).isTrue();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void hasUpToDateInformation() {\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n        new ReviewDto().setTitle(\"Design\").setLine(30),\n        new Violation(new Rule()).setMessage(\"Design\").setLineId(30)),\n        Is.is(true));\n\n    // different title\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n        new ReviewDto().setTitle(\"Design\").setLine(30),\n        new Violation(new Rule()).setMessage(\"Other\").setLineId(30)),\n        Is.is(false));\n\n    // different line\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n        new ReviewDto().setTitle(\"Design\").setLine(300),\n        new Violation(new Rule()).setMessage(\"Design\").setLineId(200)),\n        Is.is(false));\n\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n        new ReviewDto().setTitle(\"Design\").setLine(300),\n        new Violation(new Rule()).setMessage(\"Design\").setLineId(null)),\n        Is.is(false));\n  }","id":68108,"modified_method":"@Test\n  public void hasUpToDateInformation() {\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n      new ReviewDto().setTitle(\"Design\").setLine(30),\n      new Violation(new Rule()).setMessage(\"Design\").setLineId(30)))\n      .isTrue();\n\n\n    // different title\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n      new ReviewDto().setTitle(\"Design\").setLine(30),\n      new Violation(new Rule()).setMessage(\"Other\").setLineId(30))\n    ).isFalse();\n\n    // different line\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n      new ReviewDto().setTitle(\"Design\").setLine(300),\n      new Violation(new Rule()).setMessage(\"Design\").setLineId(200)))\n      .isFalse();\n\n    assertThat(ReviewWorkflowDecorator.hasUpToDateInformation(\n      new ReviewDto().setTitle(\"Design\").setLine(300),\n      new Violation(new Rule()).setMessage(\"Design\").setLineId(null)))\n      .isFalse();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    reviewDao = mock(ReviewDao.class);\n\n    rightNow = new Date();\n    tenDaysAgo = DateUtils.addDays(rightNow, -10);\n    fiveDaysAgo = DateUtils.addDays(rightNow, -5);\n\n    PastSnapshot pastSnapshot = mock(PastSnapshot.class);\n    when(pastSnapshot.getIndex()).thenReturn(1);\n    when(pastSnapshot.getTargetDate()).thenReturn(fiveDaysAgo);\n\n    PastSnapshot pastSnapshot2 = mock(PastSnapshot.class);\n    when(pastSnapshot2.getIndex()).thenReturn(2);\n    when(pastSnapshot2.getTargetDate()).thenReturn(tenDaysAgo);\n\n    TimeMachineConfiguration timeMachineConfiguration = mock(TimeMachineConfiguration.class);\n    when(timeMachineConfiguration.getProjectPastSnapshots()).thenReturn(Arrays.asList(pastSnapshot, pastSnapshot2));\n\n    decorator = new ReviewsMeasuresDecorator(reviewDao, timeMachineConfiguration);\n    context = mock(DecoratorContext.class);\n    when(context.getMeasure(CoreMetrics.VIOLATIONS)).thenReturn(new Measure(CoreMetrics.VIOLATIONS, 35d));\n  }","id":68109,"modified_method":"@Before\n  public void setUp() {\n    ReviewDao reviewDao = mock(ReviewDao.class);\n\n    rightNow = new Date();\n    tenDaysAgo = DateUtils.addDays(rightNow, -10);\n    fiveDaysAgo = DateUtils.addDays(rightNow, -5);\n\n    PastSnapshot pastSnapshot = mock(PastSnapshot.class);\n    when(pastSnapshot.getIndex()).thenReturn(1);\n    when(pastSnapshot.getTargetDate()).thenReturn(fiveDaysAgo);\n\n    PastSnapshot pastSnapshot2 = mock(PastSnapshot.class);\n    when(pastSnapshot2.getIndex()).thenReturn(2);\n    when(pastSnapshot2.getTargetDate()).thenReturn(tenDaysAgo);\n\n    TimeMachineConfiguration timeMachineConfiguration = mock(TimeMachineConfiguration.class);\n    when(timeMachineConfiguration.getProjectPastSnapshots()).thenReturn(Arrays.asList(pastSnapshot, pastSnapshot2));\n\n    decorator = new ReviewsMeasuresDecorator(reviewDao, timeMachineConfiguration);\n    context = mock(DecoratorContext.class);\n    when(context.getMeasure(CoreMetrics.VIOLATIONS)).thenReturn(new Measure(CoreMetrics.VIOLATIONS, 35d));\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExecuteOnProject() {\n    ReviewsMeasuresDecorator decorator = new ReviewsMeasuresDecorator(null, null);\n    Project project = new Project(\"foo\");\n    project.setLatestAnalysis(true);\n    assertThat(decorator.shouldExecuteOnProject(project), is(true));\n  }","id":68110,"modified_method":"@Test\n  public void shouldExecuteOnProject() {\n    ReviewsMeasuresDecorator decorator = new ReviewsMeasuresDecorator(null, null);\n    Project project = new Project(\"foo\");\n    project.setLatestAnalysis(true);\n    assertThat(decorator.shouldExecuteOnProject(project)).isTrue();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldConvertToViolationMetric() {\n    assertThat(SeverityUtils.severityToViolationMetric(RulePriority.INFO), is(CoreMetrics.INFO_VIOLATIONS));\n    assertThat(SeverityUtils.severityToViolationMetric(RulePriority.BLOCKER), is(CoreMetrics.BLOCKER_VIOLATIONS));\n  }","id":68111,"modified_method":"@Test\n  public void shouldConvertToViolationMetric() {\n    assertThat(SeverityUtils.severityToViolationMetric(RulePriority.INFO)).isEqualTo(CoreMetrics.INFO_VIOLATIONS);\n    assertThat(SeverityUtils.severityToViolationMetric(RulePriority.BLOCKER)).isEqualTo(CoreMetrics.BLOCKER_VIOLATIONS);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2358\n   */\n  @Test\n  public void shouldGenerateCorrectChecksums() {\n    List<String> encoding = SourceChecksum.lineChecksumsOfFile(\"Привет Мир\");\n    assertThat(encoding.size(), is(1));\n    assertThat(encoding.get(0), is(\"5ba3a45e1299ede07f56e5531351be52\"));\n  }","id":68112,"modified_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2358\n   */\n  @Test\n  public void shouldGenerateCorrectChecksums() {\n    List<String> encoding = SourceChecksum.lineChecksumsOfFile(\"Привет Мир\");\n    assertThat(encoding).hasSize(1);\n    assertThat(encoding.get(0)).isEqualTo(\"5ba3a45e1299ede07f56e5531351be52\");\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGetChecksumForLine() {\n    List<String> checksums = SourceChecksum.lineChecksumsOfFile(\"line\");\n    assertThat(SourceChecksum.getChecksumForLine(checksums, null), nullValue());\n    assertThat(SourceChecksum.getChecksumForLine(checksums, 0), nullValue());\n    assertThat(SourceChecksum.getChecksumForLine(checksums, 1), notNullValue());\n    assertThat(SourceChecksum.getChecksumForLine(checksums, 2), nullValue());\n  }","id":68113,"modified_method":"@Test\n  public void shouldGetChecksumForLine() {\n    List<String> checksums = SourceChecksum.lineChecksumsOfFile(\"line\");\n    assertThat(SourceChecksum.getChecksumForLine(checksums, null)).isNull();\n    assertThat(SourceChecksum.getChecksumForLine(checksums, 0)).isNull();\n    assertThat(SourceChecksum.getChecksumForLine(checksums, 1)).isNotNull();\n    assertThat(SourceChecksum.getChecksumForLine(checksums, 2)).isNull();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSplitLinesAndIgnoreSpaces() {\n    List<String> crlf = SourceChecksum.lineChecksumsOfFile(\"Hello\\r\\nWorld\");\n    List<String> lf = SourceChecksum.lineChecksumsOfFile(\"Hello\\nWorld\");\n    List<String> cr = SourceChecksum.lineChecksumsOfFile(\"Hello\\rWorld\");\n    assertThat(crlf.size(), is(2));\n    assertThat(crlf.get(0), not(equalTo(crlf.get(1))));\n    assertThat(lf, equalTo(crlf));\n    assertThat(cr, equalTo(crlf));\n\n    assertThat(SourceChecksum.lineChecksum(\"\\tvoid  method()  {\\n\"),\n        equalTo(SourceChecksum.lineChecksum(\"  void method() {\")));\n  }","id":68114,"modified_method":"@Test\n  public void shouldSplitLinesAndIgnoreSpaces() {\n    List<String> crlf = SourceChecksum.lineChecksumsOfFile(\"Hello\\r\\nWorld\");\n    List<String> lf = SourceChecksum.lineChecksumsOfFile(\"Hello\\nWorld\");\n    List<String> cr = SourceChecksum.lineChecksumsOfFile(\"Hello\\rWorld\");\n    assertThat(crlf).hasSize(2);\n    assertThat(crlf.get(0)).isNotEqualTo(crlf.get(1));\n    assertThat(lf).isEqualTo(crlf);\n    assertThat(cr).isEqualTo(crlf);\n\n    assertThat(SourceChecksum.lineChecksum(\"\\tvoid  method()  {\\n\")).isEqualTo(SourceChecksum.lineChecksum(\"  void method() {\"));\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testEquals() {\n    StringTextComparator cmp = StringTextComparator.IGNORE_WHITESPACE;\n\n    StringText a = new StringText(\"abc\\nabc\\na bc\");\n    StringText b = new StringText(\"abc\\nabc d\\nab c\");\n\n    assertThat(\"abc == abc\", cmp.equals(a, 0, b, 0), is(true));\n    assertThat(\"abc != abc d\", cmp.equals(a, 1, b, 1), is(false));\n    assertThat(\"a bc == ab c\", cmp.equals(a, 2, b, 2), is(true));\n    assertThat(cmp.hash(a, 0), equalTo(cmp.hash(b, 0)));\n    assertThat(cmp.hash(a, 2), equalTo(cmp.hash(b, 2)));\n  }","id":68115,"modified_method":"@Test\n  public void testEquals() {\n    StringTextComparator cmp = StringTextComparator.IGNORE_WHITESPACE;\n\n    StringText a = new StringText(\"abc\\nabc\\na bc\");\n    StringText b = new StringText(\"abc\\nabc d\\nab c\");\n\n    assertThat(cmp.equals(a, 0, b, 0)).as(\"abc == abc\").isTrue();\n    assertThat(cmp.equals(a, 1, b, 1)).as(\"abc != abc d\").isFalse();\n    assertThat(cmp.equals(a, 2, b, 2)).as(\"a bc == ab c\").isTrue();\n    assertThat(cmp.hash(a, 0)).isEqualTo(cmp.hash(b, 0));\n    assertThat(cmp.hash(a, 2)).isEqualTo(cmp.hash(b, 2));\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testTwoLines() {\n    StringText r = new StringText(\"a\\nb\");\n    assertThat(r.length(), is(2));\n  }","id":68116,"modified_method":"@Test\n  public void testTwoLines() {\n    StringText r = new StringText(\"a\\nb\");\n    assertThat(r.length()).isEqualTo(2);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testEmpty() {\n    StringText r = new StringText(\"\");\n    assertThat(r.length(), is(0));\n  }","id":68117,"modified_method":"@Test\n  public void testEmpty() {\n    StringText r = new StringText(\"\");\n    assertThat(r.length()).isEqualTo(0);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void doNotDecorateIfTestsMeasureAlreadyExists() {\n    Project project = mock(Project.class);\n    when(context.getMeasure(CoreMetrics.TESTS)).thenReturn(new Measure());\n\n    decorator.decorate(project, context);\n\n    assertThat(decorator.shouldDecorateResource(project, context), is(false));\n    verify(context, atLeastOnce()).getMeasure(CoreMetrics.TESTS);\n    verifyNoMoreInteractions(context);\n  }","id":68118,"modified_method":"@Test\n  public void doNotDecorateIfTestsMeasureAlreadyExists() {\n    Project project = mock(Project.class);\n    when(context.getMeasure(CoreMetrics.TESTS)).thenReturn(new Measure());\n\n    decorator.decorate(project, context);\n\n    assertThat(decorator.shouldDecorateResource(project, context)).isFalse();\n    verify(context, atLeastOnce()).getMeasure(CoreMetrics.TESTS);\n    verifyNoMoreInteractions(context);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void generatesMetrics() {\n    assertThat(decorator.generatesMetrics().size(), is(5));\n  }","id":68119,"modified_method":"@Test\n  public void generatesMetrics() {\n    assertThat(decorator.generatesMetrics()).hasSize(5);\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void doNotDecorateStaticAnalysis() {\n    Project project = mock(Project.class);\n    when(project.getAnalysisType()).thenReturn(Project.AnalysisType.STATIC);\n    assertThat(decorator.shouldExecuteOnProject(project), is(false));\n\n    when(project.getAnalysisType()).thenReturn(Project.AnalysisType.DYNAMIC);\n    assertThat(decorator.shouldExecuteOnProject(project), is(true));\n  }","id":68120,"modified_method":"@Test\n  public void doNotDecorateStaticAnalysis() {\n    Project project = mock(Project.class);\n    when(project.getAnalysisType()).thenReturn(Project.AnalysisType.STATIC);\n    assertThat(decorator.shouldExecuteOnProject(project)).isFalse();\n\n    when(project.getAnalysisType()).thenReturn(Project.AnalysisType.DYNAMIC);\n    assertThat(decorator.shouldExecuteOnProject(project)).isTrue();\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void checkDefinitions() {\n    UserManagedMetrics userManagedMetrics = new UserManagedMetrics();\n    List<Metric> metrics = userManagedMetrics.getMetrics();\n    assertThat(metrics.size(), greaterThan(2));\n    for (Metric metric : metrics) {\n      assertThat(metric.getUserManaged(), is(true));\n      assertThat(metric.getDomain(), is(\"Management\"));\n    }\n  }","id":68121,"modified_method":"@Test\n  public void checkDefinitions() {\n    UserManagedMetrics userManagedMetrics = new UserManagedMetrics();\n    List<Metric> metrics = userManagedMetrics.getMetrics();\n    assertThat(metrics.size()).isGreaterThan(2);\n    for (Metric metric : metrics) {\n      assertThat(metric.getUserManaged()).isTrue();\n      assertThat(metric.getDomain()).isEqualTo(\"Management\");\n    }\n  }","commit_id":"3dca4efaa39052349116c8b2ac9c1917e0e96450","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  protected void configure() {\n    addCoreSingleton(reactor);\n    addCoreSingleton(new PropertiesConfiguration());\n    addCoreSingleton(BatchSettings.class);\n    addCoreSingleton(DryRun.class);\n    addCoreSingleton(Logback.class);\n    addCoreSingleton(ServerMetadata.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(TempDirectories.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(HttpDownloader.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(ArtifactDownloader.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(JdbcDriverHolder.class);\n    addCoreSingleton(EmailSettings.class);\n    addCoreSingleton(I18nManager.class);\n    addCoreSingleton(RuleI18nManager.class);\n\n    URLClassLoader bootstrapClassLoader = getComponentByType(JdbcDriverHolder.class).getClassLoader();\n    // set as the current context classloader for hibernate, else it does not find the JDBC driver.\n    Thread.currentThread().setContextClassLoader(bootstrapClassLoader);\n\n    addCoreSingleton(RemoteServerMetadata.class);\n    // mybatis\n    addCoreSingleton(BatchDatabase.class);\n    addCoreSingleton(MyBatis.class);\n    addCoreSingleton(DatabaseVersion.class);\n    addCoreSingleton(DatabaseBatchCompatibility.class);\n    for (Class daoClass : DaoUtils.getDaoClasses()) {\n      addCoreSingleton(daoClass);\n    }\n\n    // hibernate\n    addCoreSingleton(DefaultDatabaseConnector.class);\n    addCoreSingleton(ThreadLocalDatabaseSessionFactory.class);\n    addAdapter(new DatabaseSessionProvider());\n\n    for (Object component : boostrapperComponents) {\n      addCoreSingleton(component);\n    }\n    if (!isMavenPluginExecutorRegistered()) {\n      addCoreSingleton(FakeMavenPluginExecutor.class);\n    }\n\n    addCoreSingleton(BatchPluginRepository.class);\n    addCoreSingleton(BatchExtensionInstaller.class);\n    addCoreSingleton(BatchDatabaseSettingsLoader.class);\n  }","id":68122,"modified_method":"@Override\n  protected void configure() {\n    addCoreSingleton(reactor);\n    addCoreSingleton(new PropertiesConfiguration());\n    addCoreSingleton(BatchSettings.class);\n    addCoreSingleton(DryRun.class);\n    addCoreSingleton(Logback.class);\n    addCoreSingleton(ServerMetadata.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(TempDirectories.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(HttpDownloader.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(UriReader.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(ArtifactDownloader.class);// registered here because used by BootstrapClassLoader\n    addCoreSingleton(JdbcDriverHolder.class);\n    addCoreSingleton(EmailSettings.class);\n    addCoreSingleton(I18nManager.class);\n    addCoreSingleton(RuleI18nManager.class);\n\n    URLClassLoader bootstrapClassLoader = getComponentByType(JdbcDriverHolder.class).getClassLoader();\n    // set as the current context classloader for hibernate, else it does not find the JDBC driver.\n    Thread.currentThread().setContextClassLoader(bootstrapClassLoader);\n\n    addCoreSingleton(RemoteServerMetadata.class);\n    // mybatis\n    addCoreSingleton(BatchDatabase.class);\n    addCoreSingleton(MyBatis.class);\n    addCoreSingleton(DatabaseVersion.class);\n    addCoreSingleton(DatabaseBatchCompatibility.class);\n    for (Class daoClass : DaoUtils.getDaoClasses()) {\n      addCoreSingleton(daoClass);\n    }\n\n    // hibernate\n    addCoreSingleton(DefaultDatabaseConnector.class);\n    addCoreSingleton(ThreadLocalDatabaseSessionFactory.class);\n    addAdapter(new DatabaseSessionProvider());\n\n    for (Object component : boostrapperComponents) {\n      addCoreSingleton(component);\n    }\n    if (!isMavenPluginExecutorRegistered()) {\n      addCoreSingleton(FakeMavenPluginExecutor.class);\n    }\n\n    addCoreSingleton(BatchPluginRepository.class);\n    addCoreSingleton(BatchExtensionInstaller.class);\n    addCoreSingleton(BatchDatabaseSettingsLoader.class);\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_check_compatibility_with_sonar_version() {\n    assertThat(pluginWithVersion(\"1.1\").isCompatibleWith(\"1.1\")).isTrue();\n    assertThat(pluginWithVersion(\"1.1\").isCompatibleWith(\"1.1.0\")).isTrue();\n    assertThat(pluginWithVersion(\"1.0\").isCompatibleWith(\"1.0.0\")).isTrue();\n\n    assertThat(pluginWithVersion(\"1.0\").isCompatibleWith(\"1.1\")).isTrue();\n    assertThat(pluginWithVersion(\"1.1.1\").isCompatibleWith(\"1.1.2\")).isTrue();\n    assertThat(pluginWithVersion(\"2.0\").isCompatibleWith(\"2.1.0\")).isTrue();\n\n    assertThat(pluginWithVersion(\"1.1\").isCompatibleWith(\"1.0\")).isFalse();\n    assertThat(pluginWithVersion(\"2.0.1\").isCompatibleWith(\"2.0.0\")).isFalse();\n    assertThat(pluginWithVersion(\"2.10\").isCompatibleWith(\"2.1\")).isFalse();\n    assertThat(pluginWithVersion(\"10.10\").isCompatibleWith(\"2.2\")).isFalse();\n\n    assertThat(pluginWithVersion(\"1.1-SNAPSHOT\").isCompatibleWith(\"1.0\")).isFalse();\n    assertThat(pluginWithVersion(\"1.1-SNAPSHOT\").isCompatibleWith(\"1.1\")).isTrue();\n    assertThat(pluginWithVersion(\"1.1-SNAPSHOT\").isCompatibleWith(\"1.2\")).isTrue();\n    assertThat(pluginWithVersion(\"1.0.1-SNAPSHOT\").isCompatibleWith(\"1.0\")).isFalse();\n\n    assertThat(pluginWithVersion(\"3.1-RC2\").isCompatibleWith(\"3.2-SNAPSHOT\")).isTrue();\n    assertThat(pluginWithVersion(\"3.1-RC1\").isCompatibleWith(\"3.2-RC2\")).isTrue();\n    assertThat(pluginWithVersion(\"3.1-RC1\").isCompatibleWith(\"3.1-RC2\")).isTrue();\n    assertThat(pluginWithVersion(\"3.1-RC2\").isCompatibleWith(\"3.1-RC1\")).isTrue();\n\n    assertThat(pluginWithVersion(null).isCompatibleWith(\"0\")).isTrue();\n    assertThat(pluginWithVersion(null).isCompatibleWith(\"3.1\")).isTrue();\n  }","id":68123,"modified_method":"@Test\n  public void should_check_compatibility_with_sonar_version() {\n    assertThat(pluginWithVersion(\"1.1\").isCompatibleWith(\"1.1\")).isTrue();\n    assertThat(pluginWithVersion(\"1.1\").isCompatibleWith(\"1.1.0\")).isTrue();\n    assertThat(pluginWithVersion(\"1.0\").isCompatibleWith(\"1.0.0\")).isTrue();\n\n    assertThat(pluginWithVersion(\"1.0\").isCompatibleWith(\"1.1\")).isTrue();\n    assertThat(pluginWithVersion(\"1.1.1\").isCompatibleWith(\"1.1.2\")).isTrue();\n    assertThat(pluginWithVersion(\"2.0\").isCompatibleWith(\"2.1.0\")).isTrue();\n\n    assertThat(pluginWithVersion(\"1.1\").isCompatibleWith(\"1.0\")).isFalse();\n    assertThat(pluginWithVersion(\"2.0.1\").isCompatibleWith(\"2.0.0\")).isFalse();\n    assertThat(pluginWithVersion(\"2.10\").isCompatibleWith(\"2.1\")).isFalse();\n    assertThat(pluginWithVersion(\"10.10\").isCompatibleWith(\"2.2\")).isFalse();\n\n    assertThat(pluginWithVersion(\"1.1-SNAPSHOT\").isCompatibleWith(\"1.0\")).isFalse();\n    assertThat(pluginWithVersion(\"1.1-SNAPSHOT\").isCompatibleWith(\"1.1\")).isTrue();\n    assertThat(pluginWithVersion(\"1.1-SNAPSHOT\").isCompatibleWith(\"1.2\")).isTrue();\n    assertThat(pluginWithVersion(\"1.0.1-SNAPSHOT\").isCompatibleWith(\"1.0\")).isFalse();\n\n    assertThat(pluginWithVersion(\"3.1-RC2\").isCompatibleWith(\"3.2-SNAPSHOT\")).isTrue();\n    assertThat(pluginWithVersion(\"3.1-RC1\").isCompatibleWith(\"3.2-RC2\")).isTrue();\n    assertThat(pluginWithVersion(\"3.1-RC1\").isCompatibleWith(\"3.1-RC2\")).isTrue();\n    assertThat(pluginWithVersion(\"3.1-RC2\").isCompatibleWith(\"3.1-RC1\")).isFalse();\n\n    assertThat(pluginWithVersion(null).isCompatibleWith(\"0\")).isTrue();\n    assertThat(pluginWithVersion(null).isCompatibleWith(\"3.1\")).isTrue();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void downloadToFile() throws URISyntaxException, IOException {\n    File toDir = new File(\"target/test-tmp/org/sonar/api/utils/DownloaderTest/\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n    File toFile = new File(toDir, \"downloadToFile.txt\");\n\n    new HttpDownloader(new Settings()).download(new URI(baseUrl), toFile);\n    assertThat(toFile.exists(), is(true));\n    assertThat(toFile.length(), greaterThan(10l));\n  }","id":68124,"modified_method":"@Test\n  public void downloadToFile() throws URISyntaxException, IOException {\n    File toDir = new File(\"target/test-tmp/org/sonar/api/utils/DownloaderTest/\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n    File toFile = new File(toDir, \"downloadToFile.txt\");\n\n    new HttpDownloader(new Settings()).download(new URI(baseUrl), toFile);\n    assertThat(toFile).exists();\n    assertThat(toFile.length()).isGreaterThan(10l);\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotCreateFileIfFailToDownload() throws Exception {\n    File toDir = new File(\"target/test-tmp/org/sonar/api/utils/DownloaderTest/\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n    File toFile = new File(toDir, \"downloadToFile.txt\");\n\n    try {\n      // I hope that the port 1 is not used !\n      new HttpDownloader(new Settings()).download(new URI(\"http://localhost:1/unknown\"), toFile);\n    } catch (SonarException e) {\n      assertThat(toFile.exists(), is(false));\n    }\n  }","id":68125,"modified_method":"@Test\n  public void shouldNotCreateFileIfFailToDownload() throws Exception {\n    File toDir = new File(\"target/test-tmp/org/sonar/api/utils/DownloaderTest/\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n    File toFile = new File(toDir, \"downloadToFile.txt\");\n\n    try {\n      // I hope that the port 1 is not used !\n      new HttpDownloader(new Settings()).download(new URI(\"http://localhost:1/unknown\"), toFile);\n    } catch (SonarException e) {\n      assertThat(toFile).doesNotExist();\n    }\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void downloadBytes() throws URISyntaxException {\n    byte[] bytes = new HttpDownloader(new Settings()).download(new URI(baseUrl));\n    assertThat(bytes.length, greaterThan(10));\n  }","id":68126,"modified_method":"@Test\n  public void downloadBytes() throws Exception {\n    byte[] bytes = new HttpDownloader(new Settings()).readBytes(new URI(baseUrl));\n    assertThat(bytes.length).isGreaterThan(10);\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGetDirectProxySynthesis() throws URISyntaxException {\n    ProxySelector proxySelector = mock(ProxySelector.class);\n    when(proxySelector.select((URI) anyObject())).thenReturn(Arrays.asList(Proxy.NO_PROXY));\n    assertThat(HttpDownloader.getProxySynthesis(new URI(\"http://an_url\"), proxySelector), is(\"no proxy\"));\n  }","id":68127,"modified_method":"@Test\n  public void shouldGetDirectProxySynthesis() throws URISyntaxException {\n    ProxySelector proxySelector = mock(ProxySelector.class);\n    when(proxySelector.select((URI) anyObject())).thenReturn(Arrays.asList(Proxy.NO_PROXY));\n    assertThat(HttpDownloader.getProxySynthesis(new URI(\"http://an_url\"), proxySelector)).isEqualTo(\"no proxy\");\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGetProxySynthesis() throws URISyntaxException {\n    ProxySelector proxySelector = mock(ProxySelector.class);\n    when(proxySelector.select((URI) anyObject())).thenReturn(Arrays.asList((Proxy) new FakeProxy()));\n    assertThat(HttpDownloader.getProxySynthesis(new URI(\"http://an_url\"), proxySelector), is(\"proxy: http://proxy_url:4040\"));\n  }","id":68128,"modified_method":"@Test\n  public void shouldGetProxySynthesis() throws URISyntaxException {\n    ProxySelector proxySelector = mock(ProxySelector.class);\n    when(proxySelector.select((URI) anyObject())).thenReturn(Arrays.asList((Proxy) new FakeProxy()));\n    assertThat(HttpDownloader.getProxySynthesis(new URI(\"http://an_url\"), proxySelector)).isEqualTo(\"proxy: http://proxy_url:4040\");\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void followRedirect() throws URISyntaxException {\n    byte[] bytes = new HttpDownloader(new Settings()).download(new URI(baseUrl + \"/redirect/\"));\n    assertThat(new String(bytes), containsString(\"count\"));\n  }","id":68129,"modified_method":"@Test\n  public void followRedirect() throws URISyntaxException {\n    byte[] bytes = new HttpDownloader(new Settings()).readBytes(new URI(baseUrl + \"/redirect/\"));\n    assertThat(new String(bytes)).contains(\"count\");\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void userAgentIsSonarVersion() throws URISyntaxException, IOException {\n    Server server = mock(Server.class);\n    when(server.getVersion()).thenReturn(\"2.2\");\n\n    byte[] bytes = new HttpDownloader(server, new Settings()).download(new URI(baseUrl));\n    Properties props = new Properties();\n    props.load(IOUtils.toInputStream(new String(bytes)));\n    assertThat(props.getProperty(\"agent\"), is(\"Sonar 2.2\"));\n  }","id":68130,"modified_method":"@Test\n  public void userAgentIsSonarVersion() throws URISyntaxException, IOException {\n    Server server = mock(Server.class);\n    when(server.getVersion()).thenReturn(\"2.2\");\n\n    byte[] bytes = new HttpDownloader(server, new Settings()).readBytes(new URI(baseUrl));\n    Properties props = new Properties();\n    props.load(IOUtils.toInputStream(new String(bytes)));\n    assertThat(props.getProperty(\"agent\")).isEqualTo(\"Sonar 2.2\");\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test(expected = SonarException.class)\n  public void failIfServerDown() throws URISyntaxException {\n    // I hope that the port 1 is not used !\n    new HttpDownloader(new Settings()).download(new URI(\"http://localhost:1/unknown\"));\n  }","id":68131,"modified_method":"@Test(expected = SonarException.class)\n  public void failIfServerDown() throws Exception {\n    // I hope that the port 1 is not used !\n    new HttpDownloader(new Settings()).readBytes(new URI(\"http://localhost:1/unknown\"));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * plugin extensions + all the components that depend on plugin extensions\n   */\n  private void startServiceComponents() {\n    servicesContainer = coreContainer.createChild();\n    ServerExtensionInstaller extensionRegistrar = servicesContainer.getComponentByType(ServerExtensionInstaller.class);\n    extensionRegistrar.registerExtensions(servicesContainer);\n\n    servicesContainer.addSingleton(DefaultWorkflow.class);\n    servicesContainer.addSingleton(ReviewDatabaseStore.class);\n    servicesContainer.addSingleton(WorkflowEngine.class);\n\n    servicesContainer.addSingleton(HttpDownloader.class);\n    servicesContainer.addSingleton(UpdateCenterClient.class);\n    servicesContainer.addSingleton(UpdateCenterMatrixFactory.class);\n    servicesContainer.addSingleton(PluginDownloader.class);\n    servicesContainer.addSingleton(ServerIdGenerator.class);\n    servicesContainer.addComponent(FilterExecutor.class, false);\n    servicesContainer.addSingleton(DefaultModelFinder.class); // depends on plugins\n    servicesContainer.addSingleton(DefaultModelManager.class);\n    servicesContainer.addSingleton(Plugins.class);\n    servicesContainer.addSingleton(ChartFactory.class);\n    servicesContainer.addSingleton(Languages.class);\n    servicesContainer.addSingleton(Views.class);\n    servicesContainer.addSingleton(CodeColorizers.class);\n    servicesContainer.addComponent(RulesDao.class, false);\n    servicesContainer.addComponent(MeasuresDao.class, false);\n    servicesContainer.addComponent(org.sonar.api.database.daos.MeasuresDao.class, false);\n    servicesContainer.addComponent(ProfilesDao.class, false);\n    servicesContainer.addComponent(ProfilesManager.class, false);\n    servicesContainer.addComponent(Backup.class, false);\n    servicesContainer.addSingleton(SecurityRealmFactory.class);\n    servicesContainer.addSingleton(ServerLifecycleNotifier.class);\n    servicesContainer.addSingleton(AnnotationProfileParser.class);\n    servicesContainer.addSingleton(XMLProfileParser.class);\n    servicesContainer.addSingleton(XMLProfileSerializer.class);\n    servicesContainer.addSingleton(AnnotationRuleParser.class);\n    servicesContainer.addSingleton(XMLRuleParser.class);\n    servicesContainer.addSingleton(DefaultRuleFinder.class);\n    servicesContainer.addSingleton(DefaultMetricFinder.class);\n    servicesContainer.addSingleton(ProfilesConsole.class);\n    servicesContainer.addSingleton(RulesConsole.class);\n    servicesContainer.addSingleton(JRubyI18n.class);\n    servicesContainer.addSingleton(DefaultUserFinder.class);\n    servicesContainer.addSingleton(I18nManager.class);\n    servicesContainer.addSingleton(RuleI18nManager.class);\n    servicesContainer.addSingleton(GwtI18n.class);\n    servicesContainer.addSingleton(ResourceTypes.class);\n    servicesContainer.addSingleton(NewUserNotifier.class);\n\n    // Notifications\n    servicesContainer.addSingleton(EmailSettings.class);\n    servicesContainer.addSingleton(NotificationService.class);\n    servicesContainer.addSingleton(DefaultNotificationManager.class);\n    servicesContainer.addSingleton(ReviewsNotificationManager.class);\n\n    servicesContainer.startComponents();\n  }","id":68132,"modified_method":"/**\n   * plugin extensions + all the components that depend on plugin extensions\n   */\n  private void startServiceComponents() {\n    servicesContainer = coreContainer.createChild();\n    ServerExtensionInstaller extensionRegistrar = servicesContainer.getComponentByType(ServerExtensionInstaller.class);\n    extensionRegistrar.registerExtensions(servicesContainer);\n\n    servicesContainer.addSingleton(DefaultWorkflow.class);\n    servicesContainer.addSingleton(ReviewDatabaseStore.class);\n    servicesContainer.addSingleton(WorkflowEngine.class);\n\n    servicesContainer.addSingleton(HttpDownloader.class);\n    servicesContainer.addSingleton(UriReader.class);\n    servicesContainer.addSingleton(UpdateCenterClient.class);\n    servicesContainer.addSingleton(UpdateCenterMatrixFactory.class);\n    servicesContainer.addSingleton(PluginDownloader.class);\n    servicesContainer.addSingleton(ServerIdGenerator.class);\n    servicesContainer.addComponent(FilterExecutor.class, false);\n    servicesContainer.addSingleton(DefaultModelFinder.class); // depends on plugins\n    servicesContainer.addSingleton(DefaultModelManager.class);\n    servicesContainer.addSingleton(Plugins.class);\n    servicesContainer.addSingleton(ChartFactory.class);\n    servicesContainer.addSingleton(Languages.class);\n    servicesContainer.addSingleton(Views.class);\n    servicesContainer.addSingleton(CodeColorizers.class);\n    servicesContainer.addComponent(RulesDao.class, false);\n    servicesContainer.addComponent(MeasuresDao.class, false);\n    servicesContainer.addComponent(org.sonar.api.database.daos.MeasuresDao.class, false);\n    servicesContainer.addComponent(ProfilesDao.class, false);\n    servicesContainer.addComponent(ProfilesManager.class, false);\n    servicesContainer.addComponent(Backup.class, false);\n    servicesContainer.addSingleton(SecurityRealmFactory.class);\n    servicesContainer.addSingleton(ServerLifecycleNotifier.class);\n    servicesContainer.addSingleton(AnnotationProfileParser.class);\n    servicesContainer.addSingleton(XMLProfileParser.class);\n    servicesContainer.addSingleton(XMLProfileSerializer.class);\n    servicesContainer.addSingleton(AnnotationRuleParser.class);\n    servicesContainer.addSingleton(XMLRuleParser.class);\n    servicesContainer.addSingleton(DefaultRuleFinder.class);\n    servicesContainer.addSingleton(DefaultMetricFinder.class);\n    servicesContainer.addSingleton(ProfilesConsole.class);\n    servicesContainer.addSingleton(RulesConsole.class);\n    servicesContainer.addSingleton(JRubyI18n.class);\n    servicesContainer.addSingleton(DefaultUserFinder.class);\n    servicesContainer.addSingleton(I18nManager.class);\n    servicesContainer.addSingleton(RuleI18nManager.class);\n    servicesContainer.addSingleton(GwtI18n.class);\n    servicesContainer.addSingleton(ResourceTypes.class);\n    servicesContainer.addSingleton(NewUserNotifier.class);\n\n    // Notifications\n    servicesContainer.addSingleton(EmailSettings.class);\n    servicesContainer.addSingleton(NotificationService.class);\n    servicesContainer.addSingleton(DefaultNotificationManager.class);\n    servicesContainer.addSingleton(ReviewsNotificationManager.class);\n\n    servicesContainer.startComponents();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public UpdateCenterClient(HttpDownloader downloader, Settings configuration) throws URISyntaxException {\n    this(downloader, new URI(configuration.getString(URL_PROPERTY)));\n  }","id":68133,"modified_method":"public UpdateCenterClient(UriReader uriReader, Settings settings) throws URISyntaxException {\n    this(uriReader, new URI(settings.getString(URL_PROPERTY)));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * for unit tests\n   */\n  UpdateCenterClient(HttpDownloader downloader, URI uri) {\n    this.downloader = downloader;\n    this.uri = uri;\n    Logs.INFO.info(\"Update center: \" + uri + \" (\" + downloader.getProxySynthesis(uri) + \")\");\n  }","id":68134,"modified_method":"@VisibleForTesting\n  UpdateCenterClient(UriReader uriReader, URI uri) {\n    this.uriReader = uriReader;\n    this.uri = uri;\n    LoggerFactory.getLogger(getClass()).info(\"Update center: \" + uriReader.description(uri));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public UpdateCenter getCenter(boolean forceRefresh) {\n    if (center == null || forceRefresh || needsRefresh()) {\n      center = download();\n      lastRefreshDate = System.currentTimeMillis();\n    }\n    return center;\n  }","id":68135,"modified_method":"public UpdateCenter getCenter(boolean forceRefresh) {\n    if (center == null || forceRefresh || needsRefresh()) {\n      center = init();\n      lastRefreshDate = System.currentTimeMillis();\n    }\n    return center;\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void forceRefresh() throws URISyntaxException {\n    when(downloader.openStream(new URI(BASE_URL))).thenReturn(IOUtils.toInputStream(\"sonar.versions=2.2,2.3\"));\n\n    client.getCenter();\n    client.getCenter(true);\n\n    verify(downloader, times(2)).openStream(new URI(BASE_URL));\n  }","id":68136,"modified_method":"@Test\n  public void forceRefresh() throws Exception {\n    when(reader.openStream(new URI(BASE_URL))).thenReturn(IOUtils.toInputStream(\"sonar.versions=2.2,2.3\"));\n\n    client.getCenter();\n    client.getCenter(true);\n\n    verify(reader, times(2)).openStream(new URI(BASE_URL));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void startServer() throws Exception {\n    downloader = mock(HttpDownloader.class);\n    client = new UpdateCenterClient(downloader, new URI(BASE_URL));\n  }","id":68137,"modified_method":"@Before\n  public void startServer() throws Exception {\n    reader = mock(UriReader.class);\n    client = new UpdateCenterClient(reader, new URI(BASE_URL));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void cacheData() throws URISyntaxException {\n    when(downloader.openStream(new URI(BASE_URL))).thenReturn(IOUtils.toInputStream(\"sonar.versions=2.2,2.3\"));\n\n    client.getCenter();\n    client.getCenter();\n\n    verify(downloader, times(1)).openStream(new URI(BASE_URL));\n  }","id":68138,"modified_method":"@Test\n  public void cache_data() throws Exception {\n    when(reader.openStream(new URI(BASE_URL))).thenReturn(IOUtils.toInputStream(\"sonar.versions=2.2,2.3\"));\n\n    client.getCenter();\n    client.getCenter();\n\n    verify(reader, times(1)).openStream(new URI(BASE_URL));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void downloadUpdateCenter() throws URISyntaxException {\n    when(downloader.openStream(new URI(BASE_URL))).thenReturn(IOUtils.toInputStream(\"sonar.versions=2.2,2.3\"));\n    UpdateCenter center = client.getCenter();\n    verify(downloader, times(1)).openStream(new URI(BASE_URL));\n    assertThat(center.getSonar().getVersions(), hasItems(Version.create(\"2.2\"), Version.create(\"2.3\")));\n  }","id":68139,"modified_method":"@Test\n  public void downloadUpdateCenter() throws URISyntaxException {\n    when(reader.openStream(new URI(BASE_URL))).thenReturn(IOUtils.toInputStream(\"sonar.versions=2.2,2.3\"));\n    UpdateCenter center = client.getCenter();\n    verify(reader, times(1)).openStream(new URI(BASE_URL));\n    assertThat(center.getSonar().getVersions()).containsOnly(Version.create(\"2.2\"), Version.create(\"2.3\"));\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PluginUpdate> findPluginUpdates() {\n    List<PluginUpdate> updates = Lists.newArrayList();\n    for (Map.Entry<Plugin, Version> entry : installedPlugins.entrySet()) {\n      Plugin plugin = entry.getKey();\n      if (!isAlreadyDownloaded(plugin)) {\n        Version pluginVersion = entry.getValue();\n        for (Release release : plugin.getReleasesGreaterThan(pluginVersion)) {\n          updates.add(PluginUpdate.createForPluginRelease(release, installedSonarVersion));\n        }\n      }\n    }\n    return updates;\n  }","id":68140,"modified_method":"public List<PluginUpdate> findPluginUpdates() {\n    Version adjustedSonarVersion = getAdjustedSonarVersion();\n\n    List<PluginUpdate> updates = Lists.newArrayList();\n    for (Map.Entry<Plugin, Version> entry : installedPlugins.entrySet()) {\n      Plugin plugin = entry.getKey();\n      if (!isAlreadyDownloaded(plugin)) {\n        Version pluginVersion = entry.getValue();\n        for (Release release : plugin.getReleasesGreaterThan(pluginVersion)) {\n          updates.add(PluginUpdate.createForPluginRelease(release, adjustedSonarVersion));\n        }\n      }\n    }\n    return updates;\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public UpdateCenter getCenter() {\n    return center;\n  }","id":68141,"modified_method":"/**\n   * Used by ruby webapp\n   */\n  public UpdateCenter getCenter() {\n    return center;\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<PluginUpdate> findAvailablePlugins() {\n    List<PluginUpdate> availables = Lists.newArrayList();\n    for (Plugin plugin : center.getPlugins()) {\n      if (!installedPlugins.containsKey(plugin) && !isAlreadyDownloaded(plugin)) {\n        Release release = plugin.getLastCompatibleRelease(installedSonarVersion);\n        if (release != null) {\n          availables.add(PluginUpdate.createWithStatus(release, PluginUpdate.Status.COMPATIBLE));\n\n        } else {\n          release = plugin.getLastCompatibleReleaseIfUpgrade(installedSonarVersion);\n          if (release != null) {\n            availables.add(PluginUpdate.createWithStatus(release, PluginUpdate.Status.REQUIRE_SONAR_UPGRADE));\n          }\n        }\n      }\n    }\n    return availables;\n  }","id":68142,"modified_method":"public List<PluginUpdate> findAvailablePlugins() {\n    Version adjustedSonarVersion = getAdjustedSonarVersion();\n\n    List<PluginUpdate> availables = Lists.newArrayList();\n    for (Plugin plugin : center.getPlugins()) {\n      if (!installedPlugins.containsKey(plugin) && !isAlreadyDownloaded(plugin)) {\n        Release release = plugin.getLastCompatibleRelease(adjustedSonarVersion);\n        if (release != null) {\n          availables.add(PluginUpdate.createWithStatus(release, PluginUpdate.Status.COMPATIBLE));\n\n        } else {\n          release = plugin.getLastCompatibleReleaseIfUpgrade(adjustedSonarVersion);\n          if (release != null) {\n            availables.add(PluginUpdate.createWithStatus(release, PluginUpdate.Status.REQUIRE_SONAR_UPGRADE));\n          }\n        }\n      }\n    }\n    return availables;\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public Version getInstalledSonarVersion() {\n    return installedSonarVersion;\n  }","id":68143,"modified_method":"/**\n   * Update center declares RELEASE versions of Sonar, for instance 3.2 but not 3.2-SNAPSHOT.\n   * We assume that SNAPSHOT, milestones and release candidates of Sonar support the\n   * same plugins than related RELEASE.\n   */\n  private Version getAdjustedSonarVersion() {\n    return Version.createRelease(installedSonarVersion.toString());\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void findPluginUpdates() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.1\");\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n    List<PluginUpdate> updates = matrix.findPluginUpdates();\n    assertThat(updates.size(), is(2));\n\n    assertThat(updates.get(0).getRelease(), is(foo11));\n    assertThat(updates.get(0).isCompatible(), is(true));\n\n    assertThat(updates.get(1).getRelease(), is(foo12));\n    assertThat(updates.get(1).isCompatible(), is(false));\n    assertThat(updates.get(1).requiresSonarUpgrade(), is(true));\n  }","id":68144,"modified_method":"@Test\n  public void findPluginUpdates() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.1\"));\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n    List<PluginUpdate> updates = matrix.findPluginUpdates();\n    assertThat(updates).hasSize(2);\n\n    assertThat(updates.get(0).getRelease()).isEqualTo(foo11);\n    assertThat(updates.get(0).isCompatible()).isTrue();\n\n    assertThat(updates.get(1).getRelease()).isEqualTo(foo12);\n    assertThat(updates.get(1).isCompatible()).isFalse();\n    assertThat(updates.get(1).requiresSonarUpgrade()).isTrue();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void findSonarUpdates() {\n    center.getSonar().addRelease(Version.create(\"2.3\"));\n    center.getSonar().addRelease(Version.create(\"2.4\"));\n\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.2\");\n    List<SonarUpdate> updates = matrix.findSonarUpdates();\n\n    // no plugins are installed, so both sonar versions are compatible\n    assertThat(updates.size(), is(2));\n    assertThat(updates.get(0).hasWarnings(), is(false));\n    assertThat(updates.get(1).hasWarnings(), is(false));\n  }","id":68145,"modified_method":"@Test\n  public void findSonarUpdates() {\n    center.getSonar().addRelease(Version.create(\"2.3\"));\n    center.getSonar().addRelease(Version.create(\"2.4\"));\n\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.2\"));\n    List<SonarUpdate> updates = matrix.findSonarUpdates();\n\n    // no plugins are installed, so both sonar versions are compatible\n    assertThat(updates).hasSize(2);\n    assertThat(updates.get(0).hasWarnings()).isFalse();\n    assertThat(updates.get(1).hasWarnings()).isFalse();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void warningsOnSonarUpdates() {\n    center.getSonar().addRelease(Version.create(\"2.3\"));\n    center.getSonar().addRelease(Version.create(\"2.4\"));\n\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.2\");\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n    matrix.registerInstalledPlugin(\"bar\", Version.create(\"1.0\"));\n    List<SonarUpdate> updates = matrix.findSonarUpdates();\n\n    assertThat(updates.size(), is(2));\n\n    // sonar 2.3 supports foo 1.1/1.2 and bar 1.1\n    // => 2 plugin upgrades are required\n    assertThat(updates.get(0).hasWarnings(), is(true));\n    assertThat(updates.get(0).requiresPluginUpgrades(), is(true));\n    assertThat(updates.get(0).getPluginsToUpgrade().size(), is(2));\n\n    // sonar 2.4 supports no plugins\n    assertThat(updates.get(1).hasWarnings(), is(true));\n    assertThat(updates.get(1).isIncompatible(), is(true));\n    assertThat(updates.get(1).getIncompatiblePlugins().size(), is(2));\n  }","id":68146,"modified_method":"@Test\n  public void warningsOnSonarUpdates() {\n    center.getSonar().addRelease(Version.create(\"2.3\"));\n    center.getSonar().addRelease(Version.create(\"2.4\"));\n\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.2\"));\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n    matrix.registerInstalledPlugin(\"bar\", Version.create(\"1.0\"));\n    List<SonarUpdate> updates = matrix.findSonarUpdates();\n\n    assertThat(updates).hasSize(2);\n\n    // sonar 2.3 supports foo 1.1/1.2 and bar 1.1\n    // => 2 plugin upgrades are required\n    assertThat(updates.get(0).hasWarnings()).isTrue();\n    assertThat(updates.get(0).requiresPluginUpgrades()).isTrue();\n    assertThat(updates.get(0).getPluginsToUpgrade()).hasSize(2);\n\n    // sonar 2.4 supports no plugins\n    assertThat(updates.get(1).hasWarnings()).isTrue();\n    assertThat(updates.get(1).isIncompatible()).isTrue();\n    assertThat(updates.get(1).getIncompatiblePlugins()).hasSize(2);\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void noPluginUpdatesIfLastReleaseIsInstalled() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.3\");\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.2\"));\n    assertTrue(matrix.findPluginUpdates().isEmpty());\n  }","id":68147,"modified_method":"@Test\n  public void noPluginUpdatesIfLastReleaseIsInstalled() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.3\"));\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.2\"));\n    assertThat(matrix.findPluginUpdates()).isEmpty();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void availablePluginsRequireSonarUpgrade() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.2.1\");\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n\n    List<PluginUpdate> availables = matrix.findAvailablePlugins();\n\n    // bar 1.0 is not compatible with the installed sonar\n    // bar 1.1 requires sonar to be upgraded to 2.2.2 or 2.3\n    // => available plugin to install is bar 1.1\n    assertThat(availables.size(), is(1));\n    assertThat(availables.get(0).getRelease(), is(bar11));\n    assertThat(availables.get(0).requiresSonarUpgrade(), is(true));\n  }","id":68148,"modified_method":"@Test\n  public void availablePluginsRequireSonarUpgrade() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.2.1\"));\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n\n    List<PluginUpdate> availables = matrix.findAvailablePlugins();\n\n    // bar 1.0 is not compatible with the installed sonar\n    // bar 1.1 requires sonar to be upgraded to 2.2.2 or 2.3\n    // => available plugin to install is bar 1.1\n    assertThat(availables.size()).isEqualTo(1);\n    assertThat(availables.get(0).getRelease()).isEqualTo(bar11);\n    assertThat(availables.get(0).requiresSonarUpgrade()).isTrue();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void excludePendingDownloadsFromAvailablePlugins() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.1\");\n    matrix.registerPendingPluginsByFilename(\"foo-1.0.jar\");\n    matrix.registerPendingPluginsByFilename(\"bar-1.1.jar\");\n    List<PluginUpdate> updates = matrix.findAvailablePlugins();\n    assertThat(updates.size(), is(0));\n  }","id":68149,"modified_method":"@Test\n  public void excludePendingDownloadsFromAvailablePlugins() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.1\"));\n    matrix.registerPendingPluginsByFilename(\"foo-1.0.jar\");\n    matrix.registerPendingPluginsByFilename(\"bar-1.1.jar\");\n    List<PluginUpdate> updates = matrix.findAvailablePlugins();\n    assertThat(updates.size()).isEqualTo(0);\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void availablePluginsAreOnlyTheBestReleases() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.2\");\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n\n    List<PluginUpdate> availables = matrix.findAvailablePlugins();\n\n    // bar 1.0 is compatible with the installed sonar\n    // bar 1.1 requires sonar to be upgraded to 2.2.2 or 2.3\n    // => available plugin to install is bar 1.0\n    assertThat(availables.size(), is(1));\n    assertThat(availables.get(0).getRelease(), is(bar10));\n    assertThat(availables.get(0).isCompatible(), is(true));\n  }","id":68150,"modified_method":"@Test\n  public void availablePluginsAreOnlyTheBestReleases() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.2\"));\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n\n    List<PluginUpdate> availables = matrix.findAvailablePlugins();\n\n    // bar 1.0 is compatible with the installed sonar\n    // bar 1.1 requires sonar to be upgraded to 2.2.2 or 2.3\n    // => available plugin to install is bar 1.0\n    assertThat(availables.size()).isEqualTo(1);\n    assertThat(availables.get(0).getRelease()).isEqualTo(bar10);\n    assertThat(availables.get(0).isCompatible()).isTrue();\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void excludePendingDownloadsFromPluginUpdates() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, \"2.1\");\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n    matrix.registerPendingPluginsByFilename(\"foo-1.0.jar\");\n    List<PluginUpdate> updates = matrix.findPluginUpdates();\n    assertThat(updates.size(), is(0));\n  }","id":68151,"modified_method":"@Test\n  public void excludePendingDownloadsFromPluginUpdates() {\n    UpdateCenterMatrix matrix = new UpdateCenterMatrix(center, Version.create(\"2.1\"));\n    matrix.registerInstalledPlugin(\"foo\", Version.create(\"1.0\"));\n    matrix.registerPendingPluginsByFilename(\"foo-1.0.jar\");\n    List<PluginUpdate> updates = matrix.findPluginUpdates();\n    assertThat(updates.size()).isEqualTo(0);\n  }","commit_id":"86706f9bae9c427f729484cd98b425cd25ae653e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public Builder addComponents(Object... components) {\n      this.components.addAll(Arrays.asList(components));\n      return this;\n    }","id":68152,"modified_method":"public Builder addComponents(Object... components) {\n      Collections.addAll(this.components, components);\n      return this;\n    }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public Builder setComponents(List l) {\n      this.components = l;\n      return this;\n    }","id":68153,"modified_method":"public Builder setComponents(List<Object> l) {\n      this.components = l;\n      return this;\n    }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private Batch(Builder builder) {\n    components = Lists.newArrayList();\n    components.addAll(builder.components);\n    components.add(builder.environment);\n    projectReactor = builder.projectReactor;\n    if (builder.isEnableLoggingConfiguration()) {\n      logging = LoggingConfiguration.create().setProperties((Map) projectReactor.getRoot().getProperties());\n    }\n  }","id":68154,"modified_method":"private Batch(Builder builder) {\n    components = Lists.newArrayList();\n    components.addAll(builder.components);\n    components.add(builder.environment);\n    projectReactor = builder.projectReactor;\n    if (builder.isEnableLoggingConfiguration()) {\n      logging = LoggingConfiguration.create().setProperties(Maps.fromProperties(projectReactor.getRoot().getProperties()));\n    }\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"protected List evaluateAnnotatedClasses(Object extension, Class annotation) {\n    List results = Lists.newArrayList();\n    Class aClass = extension.getClass();\n    while (aClass != null) {\n      evaluateClass(aClass, annotation, results);\n\n      for (Method method : aClass.getDeclaredMethods()) {\n        if (method.getAnnotation(annotation) != null) {\n          checkAnnotatedMethod(method);\n          evaluateMethod(extension, method, results);\n        }\n      }\n      aClass = aClass.getSuperclass();\n    }\n\n    return results;\n  }","id":68155,"modified_method":"protected List evaluateAnnotatedClasses(Object extension, Class annotation) {\n    List<Object> results = Lists.newArrayList();\n    Class aClass = extension.getClass();\n    while (aClass != null) {\n      evaluateClass(aClass, annotation, results);\n\n      for (Method method : aClass.getDeclaredMethods()) {\n        if (method.getAnnotation(annotation) != null) {\n          checkAnnotatedMethod(method);\n          evaluateMethod(extension, method, results);\n        }\n      }\n      aClass = aClass.getSuperclass();\n    }\n\n    return results;\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void evaluateClass(Class extensionClass, Class annotationClass, List results) {\n    Annotation annotation = extensionClass.getAnnotation(annotationClass);\n    if (annotation != null) {\n      if (annotation.annotationType().isAssignableFrom(DependsUpon.class)) {\n        results.addAll(Arrays.asList(((DependsUpon) annotation).value()));\n\n      } else if (annotation.annotationType().isAssignableFrom(DependedUpon.class)) {\n        results.addAll(Arrays.asList(((DependedUpon) annotation).value()));\n      }\n    }\n\n    Class[] interfaces = extensionClass.getInterfaces();\n    for (Class anInterface : interfaces) {\n      evaluateClass(anInterface, annotationClass, results);\n    }\n  }","id":68156,"modified_method":"private void evaluateClass(Class extensionClass, Class annotationClass, List<Object> results) {\n    Annotation annotation = extensionClass.getAnnotation(annotationClass);\n    if (annotation != null) {\n      if (annotation.annotationType().isAssignableFrom(DependsUpon.class)) {\n        results.addAll(Arrays.asList(((DependsUpon) annotation).value()));\n\n      } else if (annotation.annotationType().isAssignableFrom(DependedUpon.class)) {\n        results.addAll(Arrays.asList(((DependedUpon) annotation).value()));\n      }\n    }\n\n    Class[] interfaces = extensionClass.getInterfaces();\n    for (Class anInterface : interfaces) {\n      evaluateClass(anInterface, annotationClass, results);\n    }\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@BeforeClass\n  public static void startDatabase() throws Exception {\n    Settings settings = new Settings();\n    settings.setProperties((Map) System.getProperties());\n    if (settings.hasKey(\"sonar.jdbc.dialect\")) {\n      database = new DefaultDatabase(settings);\n    } else {\n      database = new InMemoryDatabase();\n    }\n    database.start();\n\n    myBatis = new MyBatis(database);\n    myBatis.start();\n\n    databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n  }","id":68157,"modified_method":"@BeforeClass\n  public static void startDatabase() throws Exception {\n    Settings settings = new Settings();\n    settings.setProperties(Maps.fromProperties(System.getProperties()));\n    if (settings.hasKey(\"sonar.jdbc.dialect\")) {\n      database = new DefaultDatabase(settings);\n    } else {\n      database = new InMemoryDatabase();\n    }\n    database.start();\n\n    myBatis = new MyBatis(database);\n    myBatis.start();\n\n    databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void formatMultiset() {\n    Multiset set = TreeMultiset.create();\n    set.add(\"hello\", 1);\n    set.add(\"key\", 3);\n    assertThat(KeyValueFormat.format(set), is(\"hello=1;key=3\"));\n  }","id":68158,"modified_method":"@Test\n  public void formatMultiset() {\n    Multiset<String> set = TreeMultiset.create();\n    set.add(\"hello\", 1);\n    set.add(\"key\", 3);\n    assertThat(KeyValueFormat.format(set), is(\"hello=1;key=3\"));\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void doClear() {\n    if (countBag != null) {\n      countBag.clear();\n    }\n    if (bottomLimits != null) {\n      countBag.addAll(Arrays.asList(bottomLimits));\n    }\n    isEmpty = true;\n  }","id":68159,"modified_method":"private void doClear() {\n    if (countBag != null) {\n      countBag.clear();\n    }\n    if (bottomLimits != null) {\n      Collections.addAll(countBag, bottomLimits);\n    }\n    isEmpty = true;\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testDescendantProjects_do_not_include_self() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getDescendantProjects(1L);\n\n    assertThat(resources.size(), Is.is(1));\n    assertThat(resources.get(0).getId(), is(2L));\n  }","id":68160,"modified_method":"@Test\n  public void testDescendantProjects_do_not_include_self() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getDescendantProjects(1L);\n\n    assertThat(resources).onProperty(\"id\").containsOnly(2L);\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getResources_filter_by_qualifier() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getResources(ResourceQuery.create().setQualifiers(new String[]{\"TRK\", \"BRC\"}));\n    assertThat(resources.size(), Is.is(2));\n    assertThat(resources, hasItems(new QualifierMatcher(\"TRK\"), new QualifierMatcher(\"BRC\")));\n\n    resources = dao.getResources(ResourceQuery.create().setQualifiers(new String[]{\"XXX\"}));\n    assertThat(resources.size(), Is.is(0));\n\n    resources = dao.getResources(ResourceQuery.create().setQualifiers(new String[]{}));\n    assertThat(resources.size(), Is.is(4));\n  }","id":68161,"modified_method":"@Test\n  public void getResources_filter_by_qualifier() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getResources(ResourceQuery.create().setQualifiers(new String[]{\"TRK\", \"BRC\"}));\n    assertThat(resources).onProperty(\"qualifier\").containsOnly(\"TRK\", \"BRC\");\n\n    resources = dao.getResources(ResourceQuery.create().setQualifiers(new String[]{\"XXX\"}));\n    assertThat(resources).isEmpty();\n\n    resources = dao.getResources(ResourceQuery.create().setQualifiers(new String[]{}));\n    assertThat(resources).hasSize(4);\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testDescendantProjects_id_not_found() {\n    setupData(\"fixture\");\n\n    assertThat(dao.getDescendantProjects(33333L).size(), Is.is(0));\n  }","id":68162,"modified_method":"@Test\n  public void testDescendantProjects_id_not_found() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getDescendantProjects(33333L);\n\n    assertThat(resources).isEmpty();\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getResourceIds_filter_by_qualifier() {\n    setupData(\"fixture\");\n\n    List<Long> ids = dao.getResourceIds(ResourceQuery.create().setQualifiers(new String[]{\"TRK\", \"BRC\"}));\n    assertThat(ids.size(), Is.is(2));\n    assertThat(ids, hasItems(1l, 2l));\n\n    ids = dao.getResourceIds(ResourceQuery.create().setQualifiers(new String[]{\"XXX\"}));\n    assertThat(ids.size(), Is.is(0));\n\n    ids = dao.getResourceIds(ResourceQuery.create().setQualifiers(new String[]{}));\n    assertThat(ids.size(), Is.is(4));\n  }","id":68163,"modified_method":"@Test\n  public void getResourceIds_filter_by_qualifier() {\n    setupData(\"fixture\");\n\n    List<Long> ids = dao.getResourceIds(ResourceQuery.create().setQualifiers(new String[]{\"TRK\", \"BRC\"}));\n    assertThat(ids).containsOnly(1L, 2L);\n\n    ids = dao.getResourceIds(ResourceQuery.create().setQualifiers(new String[]{\"XXX\"}));\n    assertThat(ids).isEmpty();\n\n    ids = dao.getResourceIds(ResourceQuery.create().setQualifiers(new String[]{}));\n    assertThat(ids).hasSize(4);\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getResourceIds_all() {\n    setupData(\"fixture\");\n\n    List<Long> ids = dao.getResourceIds(ResourceQuery.create());\n\n    assertThat(ids.size(), Is.is(4));\n  }","id":68164,"modified_method":"@Test\n  public void getResourceIds_all() {\n    setupData(\"fixture\");\n\n    List<Long> ids = dao.getResourceIds(ResourceQuery.create());\n\n    assertThat(ids).hasSize(4);\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getResource() {\n    setupData(\"fixture\");\n\n    ResourceDto resource = dao.getResource(1L);\n    assertThat(resource.getName(), Is.is(\"Struts\"));\n    assertThat(resource.getLongName(), Is.is(\"Apache Struts\"));\n    assertThat(resource.getScope(), Is.is(\"PRJ\"));\n  }","id":68165,"modified_method":"@Test\n  public void getResource() {\n    setupData(\"fixture\");\n\n    ResourceDto resource = dao.getResource(1L);\n\n    assertThat(resource.getName()).isEqualTo(\"Struts\");\n    assertThat(resource.getLongName()).isEqualTo(\"Apache Struts\");\n    assertThat(resource.getScope()).isEqualTo(\"PRJ\");\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getResources_all() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getResources(ResourceQuery.create());\n\n    assertThat(resources.size(), Is.is(4));\n  }","id":68166,"modified_method":"@Test\n  public void getResources_all() {\n    setupData(\"fixture\");\n\n    List<ResourceDto> resources = dao.getResources(ResourceQuery.create());\n\n    assertThat(resources).hasSize(4);\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getResource_not_found() {\n    setupData(\"fixture\");\n\n    assertNull(dao.getResource(987654321L));\n  }","id":68167,"modified_method":"@Test\n  public void getResource_not_found() {\n    setupData(\"fixture\");\n\n    assertThat(dao.getResource(987654321L)).isNull();\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void configureLogging(LoggingConfiguration logging) {\n    logging.setProperties((Map) session.getExecutionProperties());\n    logging.setFormat(LoggingConfiguration.FORMAT_MAVEN);\n    if (getLog().isDebugEnabled()) {\n      logging.setVerbose(true);\n    }\n  }","id":68168,"modified_method":"private void configureLogging(LoggingConfiguration logging) {\n    logging.setProperties(Maps.fromProperties(session.getExecutionProperties()));\n    logging.setFormat(LoggingConfiguration.FORMAT_MAVEN);\n    if (getLog().isDebugEnabled()) {\n      logging.setVerbose(true);\n    }\n  }","commit_id":"01dd8cde2c85c6f2c87eb9798fd2cc6020302ed3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"void doStart(List<RemotePlugin> remotePlugins) {\n    PluginInstaller extractor = new PluginInstaller();\n    metadataByKey = Maps.newHashMap();\n    for (RemotePlugin remote : remotePlugins) {\n      if (isAccepted(remote.getKey())) {\n        List<File> pluginFiles = artifactDownloader.downloadPlugin(remote);\n        List<File> extensionFiles = pluginFiles.subList(1, pluginFiles.size());\n        PluginMetadata metadata = extractor.installInSameLocation(pluginFiles.get(0), remote.isCore(), extensionFiles);\n        if (StringUtils.isBlank(metadata.getBasePlugin()) || isAccepted(metadata.getBasePlugin())) {\n          LOG.debug(\"Excluded plugin: \" + metadata.getKey());\n          metadataByKey.put(metadata.getKey(), metadata);\n        }\n      }\n    }\n    classLoaders = new PluginClassloaders(Thread.currentThread().getContextClassLoader());\n    pluginsByKey = classLoaders.init(metadataByKey.values());\n  }","id":68169,"modified_method":"void doStart(List<RemotePlugin> remotePlugins) {\n    PluginInstaller extractor = new PluginInstaller();\n    metadataByKey = Maps.newHashMap();\n    for (RemotePlugin remote : remotePlugins) {\n      if (isAccepted(remote.getKey())) {\n        List<File> pluginFiles = pluginDownloader.downloadPlugin(remote);\n        List<File> extensionFiles = pluginFiles.subList(1, pluginFiles.size());\n        PluginMetadata metadata = extractor.installInSameLocation(pluginFiles.get(0), remote.isCore(), extensionFiles);\n        if (StringUtils.isBlank(metadata.getBasePlugin()) || isAccepted(metadata.getBasePlugin())) {\n          LOG.debug(\"Excluded plugin: \" + metadata.getKey());\n          metadataByKey.put(metadata.getKey(), metadata);\n        }\n      }\n    }\n    classLoaders = new PluginClassloaders(Thread.currentThread().getContextClassLoader());\n    pluginsByKey = classLoaders.init(metadataByKey.values());\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public BatchPluginRepository(ArtifactDownloader artifactDownloader, Settings settings) {\n    this.artifactDownloader = artifactDownloader;\n    if (settings.hasKey(CoreProperties.BATCH_INCLUDE_PLUGINS)) {\n      whiteList = Sets.newTreeSet(Arrays.asList(settings.getStringArray(CoreProperties.BATCH_INCLUDE_PLUGINS)));\n      LOG.info(\"Include plugins: \" + Joiner.on(\", \").join(whiteList));\n    }\n    if (settings.hasKey(CoreProperties.BATCH_EXCLUDE_PLUGINS)) {\n      blackList = Sets.newTreeSet(Arrays.asList(settings.getStringArray(CoreProperties.BATCH_EXCLUDE_PLUGINS)));\n      LOG.info(\"Exclude plugins: \" + Joiner.on(\", \").join(blackList));\n    }\n  }","id":68170,"modified_method":"public BatchPluginRepository(PluginDownloader pluginDownloader, Settings settings) {\n    this.pluginDownloader = pluginDownloader;\n    if (settings.hasKey(CoreProperties.BATCH_INCLUDE_PLUGINS)) {\n      whiteList = Sets.newTreeSet(Arrays.asList(settings.getStringArray(CoreProperties.BATCH_INCLUDE_PLUGINS)));\n      LOG.info(\"Include plugins: \" + Joiner.on(\", \").join(whiteList));\n    }\n    if (settings.hasKey(CoreProperties.BATCH_EXCLUDE_PLUGINS)) {\n      blackList = Sets.newTreeSet(Arrays.asList(settings.getStringArray(CoreProperties.BATCH_EXCLUDE_PLUGINS)));\n      LOG.info(\"Exclude plugins: \" + Joiner.on(\", \").join(blackList));\n    }\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void start() {\n    doStart(artifactDownloader.downloadPluginIndex());\n  }","id":68171,"modified_method":"public void start() {\n    doStart(pluginDownloader.downloadPluginIndex());\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void corePluginShouldNeverBeInBlackList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"core,findbugs\");\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), settings);\n    assertThat(repository.isAccepted(\"core\"), Matchers.is(true));\n  }","id":68172,"modified_method":"@Test\n  public void corePluginShouldNeverBeInBlackList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"core,findbugs\");\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), settings);\n    assertThat(repository.isAccepted(\"core\"), Matchers.is(true));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCheckWhitelist() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_INCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), settings);\n\n    assertThat(repository.isAccepted(\"checkstyle\"), Matchers.is(true));\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(true));\n    assertThat(repository.isAccepted(\"cobertura\"), Matchers.is(false));\n  }","id":68173,"modified_method":"@Test\n  public void shouldCheckWhitelist() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_INCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), settings);\n\n    assertThat(repository.isAccepted(\"checkstyle\"), Matchers.is(true));\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(true));\n    assertThat(repository.isAccepted(\"cobertura\"), Matchers.is(false));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void englishPackPluginShouldNeverBeInBlackList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"l10nen,findbugs\");\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), settings);\n    assertThat(repository.isAccepted(\"l10nen\"), Matchers.is(true));\n  }","id":68174,"modified_method":"@Test\n  public void englishPackPluginShouldNeverBeInBlackList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"l10nen,findbugs\");\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), settings);\n    assertThat(repository.isAccepted(\"l10nen\"), Matchers.is(true));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExcludePluginAndItsExtensions() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true);\n    RemotePlugin checkstyleExt = new RemotePlugin(\"checkstyleextensions\", false);\n\n    ArtifactDownloader downloader = mock(ArtifactDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\"));\n    when(downloader.downloadPlugin(checkstyleExt)).thenReturn(copyFiles(\"sonar-checkstyle-extensions-plugin-0.1-SNAPSHOT.jar\"));\n\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"checkstyle\");\n    repository = new BatchPluginRepository(downloader, settings);\n\n    repository.doStart(Arrays.asList(checkstyle, checkstyleExt));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(0));\n    assertThat(repository.getMetadata().size(), Matchers.is(0));\n  }","id":68175,"modified_method":"@Test\n  public void shouldExcludePluginAndItsExtensions() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true);\n    RemotePlugin checkstyleExt = new RemotePlugin(\"checkstyleextensions\", false);\n\n    PluginDownloader downloader = mock(PluginDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\"));\n    when(downloader.downloadPlugin(checkstyleExt)).thenReturn(copyFiles(\"sonar-checkstyle-extensions-plugin-0.1-SNAPSHOT.jar\"));\n\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"checkstyle\");\n    repository = new BatchPluginRepository(downloader, settings);\n\n    repository.doStart(Arrays.asList(checkstyle, checkstyleExt));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(0));\n    assertThat(repository.getMetadata().size(), Matchers.is(0));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldLoadPluginDeprecatedExtensions() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true)\n        .addFilename(\"checkstyle-ext.xml\");\n\n    ArtifactDownloader downloader = mock(ArtifactDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\", \"checkstyle-ext.xml\"));\n\n    repository = new BatchPluginRepository(downloader, new Settings());\n\n    repository.doStart(Arrays.asList(checkstyle));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(1));\n    assertThat(repository.getPlugin(\"checkstyle\"), not(nullValue()));\n    assertThat(repository.getMetadata().size(), Matchers.is(1));\n    assertThat(repository.getMetadata(\"checkstyle\").getName(), Matchers.is(\"Checkstyle\"));\n    assertThat(repository.getMetadata(\"checkstyle\").getDeployedFiles().size(), Matchers.is(5)); // plugin + 3 dependencies + 1 deprecated\n                                                                                                // extension\n  }","id":68176,"modified_method":"@Test\n  public void shouldLoadPluginDeprecatedExtensions() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true)\n        .addFilename(\"checkstyle-ext.xml\");\n\n    PluginDownloader downloader = mock(PluginDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\", \"checkstyle-ext.xml\"));\n\n    repository = new BatchPluginRepository(downloader, new Settings());\n\n    repository.doStart(Arrays.asList(checkstyle));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(1));\n    assertThat(repository.getPlugin(\"checkstyle\"), not(nullValue()));\n    assertThat(repository.getMetadata().size(), Matchers.is(1));\n    assertThat(repository.getMetadata(\"checkstyle\").getName(), Matchers.is(\"Checkstyle\"));\n    assertThat(repository.getMetadata(\"checkstyle\").getDeployedFiles().size(), Matchers.is(5)); // plugin + 3 dependencies + 1 deprecated\n                                                                                                // extension\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void corePluginShouldAlwaysBeInWhiteList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_INCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), settings);\n    assertThat(repository.isAccepted(\"core\"), Matchers.is(true));\n  }","id":68177,"modified_method":"@Test\n  public void corePluginShouldAlwaysBeInWhiteList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_INCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), settings);\n    assertThat(repository.isAccepted(\"core\"), Matchers.is(true));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldLoadPluginExtension() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true);\n    RemotePlugin checkstyleExt = new RemotePlugin(\"checkstyleextensions\", false);\n\n    ArtifactDownloader downloader = mock(ArtifactDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\"));\n    when(downloader.downloadPlugin(checkstyleExt)).thenReturn(copyFiles(\"sonar-checkstyle-extensions-plugin-0.1-SNAPSHOT.jar\"));\n\n    repository = new BatchPluginRepository(downloader, new Settings());\n\n    repository.doStart(Arrays.asList(checkstyle, checkstyleExt));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(2));\n    assertThat(repository.getPlugin(\"checkstyle\"), not(nullValue()));\n    assertThat(repository.getPlugin(\"checkstyleextensions\"), not(nullValue()));\n    assertThat(repository.getMetadata().size(), Matchers.is(2));\n    assertThat(repository.getMetadata(\"checkstyle\").getName(), Matchers.is(\"Checkstyle\"));\n    assertThat(repository.getMetadata(\"checkstyleextensions\").getVersion(), Matchers.is(\"0.1-SNAPSHOT\"));\n  }","id":68178,"modified_method":"@Test\n  public void shouldLoadPluginExtension() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true);\n    RemotePlugin checkstyleExt = new RemotePlugin(\"checkstyleextensions\", false);\n\n    PluginDownloader downloader = mock(PluginDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\"));\n    when(downloader.downloadPlugin(checkstyleExt)).thenReturn(copyFiles(\"sonar-checkstyle-extensions-plugin-0.1-SNAPSHOT.jar\"));\n\n    repository = new BatchPluginRepository(downloader, new Settings());\n\n    repository.doStart(Arrays.asList(checkstyle, checkstyleExt));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(2));\n    assertThat(repository.getPlugin(\"checkstyle\"), not(nullValue()));\n    assertThat(repository.getPlugin(\"checkstyleextensions\"), not(nullValue()));\n    assertThat(repository.getMetadata().size(), Matchers.is(2));\n    assertThat(repository.getMetadata(\"checkstyle\").getName(), Matchers.is(\"Checkstyle\"));\n    assertThat(repository.getMetadata(\"checkstyleextensions\").getVersion(), Matchers.is(\"0.1-SNAPSHOT\"));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldAlwaysAcceptIfNoWhiteListAndBlackList() {\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), new Settings());\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(true));\n  }","id":68179,"modified_method":"@Test\n  public void shouldAlwaysAcceptIfNoWhiteListAndBlackList() {\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), new Settings());\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(true));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldLoadPlugin() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true);\n\n    ArtifactDownloader downloader = mock(ArtifactDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\"));\n\n    repository = new BatchPluginRepository(downloader, new Settings());\n\n    repository.doStart(Arrays.asList(checkstyle));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(1));\n    assertThat(repository.getPlugin(\"checkstyle\"), not(nullValue()));\n    assertThat(repository.getMetadata().size(), Matchers.is(1));\n    assertThat(repository.getMetadata(\"checkstyle\").getName(), Matchers.is(\"Checkstyle\"));\n    assertThat(repository.getMetadata(\"checkstyle\").getDeployedFiles().size(), Matchers.is(4)); // plugin + 3 dependencies\n  }","id":68180,"modified_method":"@Test\n  public void shouldLoadPlugin() throws IOException {\n    RemotePlugin checkstyle = new RemotePlugin(\"checkstyle\", true);\n\n    PluginDownloader downloader = mock(PluginDownloader.class);\n    when(downloader.downloadPlugin(checkstyle)).thenReturn(copyFiles(\"sonar-checkstyle-plugin-2.8.jar\"));\n\n    repository = new BatchPluginRepository(downloader, new Settings());\n\n    repository.doStart(Arrays.asList(checkstyle));\n\n    assertThat(repository.getPlugins().size(), Matchers.is(1));\n    assertThat(repository.getPlugin(\"checkstyle\"), not(nullValue()));\n    assertThat(repository.getMetadata().size(), Matchers.is(1));\n    assertThat(repository.getMetadata(\"checkstyle\").getName(), Matchers.is(\"Checkstyle\"));\n    assertThat(repository.getMetadata(\"checkstyle\").getDeployedFiles().size(), Matchers.is(4)); // plugin + 3 dependencies\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void whiteListShouldTakePrecedenceOverBlackList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_INCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"cobertura,pmd\");\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), settings);\n\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(true));\n  }","id":68181,"modified_method":"@Test\n  public void whiteListShouldTakePrecedenceOverBlackList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_INCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"cobertura,pmd\");\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), settings);\n\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(true));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCheckBlackListIfNoWhiteList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    repository = new BatchPluginRepository(mock(ArtifactDownloader.class), settings);\n\n    assertThat(repository.isAccepted(\"checkstyle\"), Matchers.is(false));\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(false));\n    assertThat(repository.isAccepted(\"cobertura\"), Matchers.is(true));\n  }","id":68182,"modified_method":"@Test\n  public void shouldCheckBlackListIfNoWhiteList() {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.BATCH_EXCLUDE_PLUGINS, \"checkstyle,pmd,findbugs\");\n    repository = new BatchPluginRepository(mock(PluginDownloader.class), settings);\n\n    assertThat(repository.isAccepted(\"checkstyle\"), Matchers.is(false));\n    assertThat(repository.isAccepted(\"pmd\"), Matchers.is(false));\n    assertThat(repository.isAccepted(\"cobertura\"), Matchers.is(true));\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  protected void configure() {\n    container.addSingleton(reactor);\n    container.addSingleton(new PropertiesConfiguration());\n    container.addSingleton(BootstrapSettings.class);\n    container.addSingleton(BatchPluginRepository.class);\n    container.addSingleton(ExtensionInstaller.class);\n    container.addSingleton(DryRun.class);\n    container.addSingleton(Logback.class);\n    container.addSingleton(ServerMetadata.class);// registered here because used by BootstrapClassLoader\n    container.addSingleton(TempDirectories.class);// registered here because used by BootstrapClassLoader\n    container.addSingleton(HttpDownloader.class);// registered here because used by BootstrapClassLoader\n    container.addSingleton(UriReader.class);// registered here because used by BootstrapClassLoader\n    container.addSingleton(ArtifactDownloader.class);// registered here because used by BootstrapClassLoader\n    container.addSingleton(EmailSettings.class);\n    container.addSingleton(RemoteServerMetadata.class);\n    container.addSingleton(I18nManager.class);\n    container.addSingleton(RuleI18nManager.class);\n    for (Object component : boostrapperComponents) {\n      container.addSingleton(component);\n    }\n    container.addSingleton(BootstrapExtensionExecutor.class);\n    if (!isMavenPluginExecutorRegistered()) {\n      container.addSingleton(FakeMavenPluginExecutor.class);\n    }\n    addDatabaseComponents();\n  }","id":68183,"modified_method":"@Override\n  protected void configure() {\n    container.addSingleton(reactor);\n    container.addSingleton(new PropertiesConfiguration());\n    container.addSingleton(BootstrapSettings.class);\n    container.addSingleton(BatchPluginRepository.class);\n    container.addSingleton(ExtensionInstaller.class);\n    container.addSingleton(DryRun.class);\n    container.addSingleton(Logback.class);\n    container.addSingleton(ServerClient.class);\n    container.addSingleton(TempDirectories.class);\n    container.addSingleton(HttpDownloader.class);\n    container.addSingleton(UriReader.class);\n    container.addSingleton(PluginDownloader.class);\n    container.addSingleton(EmailSettings.class);\n    container.addSingleton(I18nManager.class);\n    container.addSingleton(RuleI18nManager.class);\n    for (Object component : boostrapperComponents) {\n      container.addSingleton(component);\n    }\n    container.addSingleton(BootstrapExtensionExecutor.class);\n    if (!isMavenPluginExecutorRegistered()) {\n      container.addSingleton(FakeMavenPluginExecutor.class);\n    }\n    addDatabaseComponents();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DatabaseBatchCompatibility(DatabaseVersion version, Server server, RemoteServerMetadata remoteServer, Settings settings) {\n    this.version = version;\n    this.server = server;\n    this.settings = settings;\n    this.remoteServer = remoteServer;\n  }","id":68184,"modified_method":"public DatabaseBatchCompatibility(DatabaseVersion version, ServerClient server, Settings settings) {\n    this.version = version;\n    this.server = server;\n    this.settings = settings;\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void checkCorrectServerId() {\n    String remoteServerId;\n    try {\n      remoteServerId = remoteServer.getServerId();\n    } catch (IOException e) {\n      throw new SonarException(\"Impossible to get the ID of the remote server: \" + server.getURL(), e);\n    }\n\n    if (!version.getSonarCoreId().equals(remoteServerId)) {\n      StringBuilder message = new StringBuilder(\"The current batch process and the configured remote server do not share the same DB configuration.\\n\");\n      message.append(\"\\t- Batch side: \");\n      message.append(settings.getString(DatabaseProperties.PROP_URL));\n      message.append(\" (\");\n      String userName = settings.getString(DatabaseProperties.PROP_USER);\n      message.append(userName == null ? \"sonar\" : userName);\n      message.append(\" / *****)\\n\\t- Server side: check the configuration at \");\n      message.append(server.getURL());\n      message.append(\"/system\\n\");\n      throw new BadDatabaseVersion(message.toString());\n    }\n  }","id":68185,"modified_method":"private void checkCorrectServerId() {\n    String remoteServerId;\n    try {\n      remoteServerId = server.getServerId();\n    } catch (IOException e) {\n      throw new SonarException(\"Impossible to get the ID of the remote server: \" + server.getURL(), e);\n    }\n\n    if (!version.getSonarCoreId().equals(remoteServerId)) {\n      StringBuilder message = new StringBuilder(\"The current batch process and the configured remote server do not share the same DB configuration.\\n\");\n      message.append(\"\\t- Batch side: \");\n      message.append(settings.getString(DatabaseProperties.PROP_URL));\n      message.append(\" (\");\n      String userName = settings.getString(DatabaseProperties.PROP_USER);\n      message.append(userName == null ? \"sonar\" : userName);\n      message.append(\" / *****)\\n\\t- Server side: check the configuration at \");\n      message.append(server.getURL());\n      message.append(\"/system\\n\");\n      throw new BadDatabaseVersion(message.toString());\n    }\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFailIfCantGetServerId() throws Exception {\n    when(remoteServerMetadata.getServerId()).thenThrow(new IOException());\n\n    thrown.expect(SonarException.class);\n    thrown.expectMessage(\"Impossible to get the ID of the remote server: http://localhost:9000\");\n\n    new DatabaseBatchCompatibility(mock(DatabaseVersion.class), server, remoteServerMetadata, settings).start();\n  }","id":68186,"modified_method":"@Test\n  public void shouldFailIfCantGetServerId() throws Exception {\n    when(server.getServerId()).thenThrow(new IOException());\n\n    thrown.expect(SonarException.class);\n    thrown.expectMessage(\"Impossible to get the ID of the remote server: http://localhost:9000\");\n\n    new DatabaseBatchCompatibility(mock(DatabaseVersion.class), server, settings).start();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFailIfNotSameServerId() throws Exception {\n    DatabaseVersion version = mock(DatabaseVersion.class);\n    when(version.getSonarCoreId()).thenReturn(\"1111111\");\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"The current batch process and the configured remote server do not share the same DB configuration.\");\n    thrown.expectMessage(\"- Batch side: jdbc:postgresql://localhost/foo (bar / *****)\");\n    thrown.expectMessage(\"- Server side: check the configuration at http://localhost:9000/system\");\n\n    new DatabaseBatchCompatibility(version, server, remoteServerMetadata, settings).start();\n  }","id":68187,"modified_method":"@Test\n  public void shouldFailIfNotSameServerId() throws Exception {\n    DatabaseVersion version = mock(DatabaseVersion.class);\n    when(version.getSonarCoreId()).thenReturn(\"1111111\");\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"The current batch process and the configured remote server do not share the same DB configuration.\");\n    thrown.expectMessage(\"- Batch side: jdbc:postgresql://localhost/foo (bar / *****)\");\n    thrown.expectMessage(\"- Server side: check the configuration at http://localhost:9000/system\");\n\n    new DatabaseBatchCompatibility(version, server, settings).start();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldUseDefaultUserNameWhenFaillingIfNotSameServerIdAndNoUserNameFound() throws Exception {\n    DatabaseVersion version = mock(DatabaseVersion.class);\n    when(version.getSonarCoreId()).thenReturn(\"1111111\");\n\n    settings.removeProperty(DatabaseProperties.PROP_USER);\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"- Batch side: jdbc:postgresql://localhost/foo (sonar / *****)\");\n\n    new DatabaseBatchCompatibility(version, server, remoteServerMetadata, settings).start();\n  }","id":68188,"modified_method":"@Test\n  public void shouldUseDefaultUserNameWhenFaillingIfNotSameServerIdAndNoUserNameFound() throws Exception {\n    DatabaseVersion version = mock(DatabaseVersion.class);\n    when(version.getSonarCoreId()).thenReturn(\"1111111\");\n\n    settings.removeProperty(DatabaseProperties.PROP_USER);\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"- Batch side: jdbc:postgresql://localhost/foo (sonar / *****)\");\n\n    new DatabaseBatchCompatibility(version, server, settings).start();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDoNothingIfUpToDate() {\n    when(databaseVersion.getStatus()).thenReturn(DatabaseVersion.Status.UP_TO_DATE);\n    new DatabaseBatchCompatibility(databaseVersion, server, remoteServerMetadata, settings).start();\n    // no error\n  }","id":68189,"modified_method":"@Test\n  public void shouldDoNothingIfUpToDate() {\n    when(databaseVersion.getStatus()).thenReturn(DatabaseVersion.Status.UP_TO_DATE);\n    new DatabaseBatchCompatibility(databaseVersion, server, settings).start();\n    // no error\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFailIfRequiresUpgrade() {\n    when(databaseVersion.getStatus()).thenReturn(DatabaseVersion.Status.REQUIRES_UPGRADE);\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"Database must be upgraded.\");\n\n    new DatabaseBatchCompatibility(databaseVersion, server, remoteServerMetadata, settings).start();\n  }","id":68190,"modified_method":"@Test\n  public void shouldFailIfRequiresUpgrade() {\n    when(databaseVersion.getStatus()).thenReturn(DatabaseVersion.Status.REQUIRES_UPGRADE);\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"Database must be upgraded.\");\n\n    new DatabaseBatchCompatibility(databaseVersion, server, settings).start();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void init() throws Exception {\n    databaseVersion = mock(DatabaseVersion.class);\n    when(databaseVersion.getSonarCoreId()).thenReturn(\"123456\");\n\n    server = mock(Server.class);\n    when(server.getURL()).thenReturn(\"http://localhost:9000\");\n\n    settings = new Settings();\n    settings.setProperty(DatabaseProperties.PROP_URL, \"jdbc:postgresql://localhost/foo\");\n    settings.setProperty(DatabaseProperties.PROP_USER, \"bar\");\n\n    remoteServerMetadata = mock(RemoteServerMetadata.class);\n    when(remoteServerMetadata.getServerId()).thenReturn(\"123456\");\n  }","id":68191,"modified_method":"@Before\n  public void init() throws Exception {\n    databaseVersion = mock(DatabaseVersion.class);\n    when(databaseVersion.getSonarCoreId()).thenReturn(\"123456\");\n\n    server = mock(ServerClient.class);\n    when(server.getURL()).thenReturn(\"http://localhost:9000\");\n    when(server.getServerId()).thenReturn(\"123456\");\n\n    settings = new Settings();\n    settings.setProperty(DatabaseProperties.PROP_URL, \"jdbc:postgresql://localhost/foo\");\n    settings.setProperty(DatabaseProperties.PROP_USER, \"bar\");\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFailIfRequiresDowngrade() {\n    when(databaseVersion.getStatus()).thenReturn(DatabaseVersion.Status.REQUIRES_DOWNGRADE);\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"Database relates to a more recent version of Sonar. Please check your settings (JDBC settings, version of Maven plugin)\");\n\n    new DatabaseBatchCompatibility(databaseVersion, server, remoteServerMetadata, settings).start();\n  }","id":68192,"modified_method":"@Test\n  public void shouldFailIfRequiresDowngrade() {\n    when(databaseVersion.getStatus()).thenReturn(DatabaseVersion.Status.REQUIRES_DOWNGRADE);\n\n    thrown.expect(BadDatabaseVersion.class);\n    thrown.expectMessage(\"Database relates to a more recent version of Sonar. Please check your settings (JDBC settings, version of Maven plugin)\");\n\n    new DatabaseBatchCompatibility(databaseVersion, server, settings).start();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public boolean shouldExecuteOnProject(Project project) {\n    return Java.KEY.equals(project.getLanguageKey())\n      && project.getAnalysisType().isDynamic(true);\n  }","id":68193,"modified_method":"public boolean shouldExecuteOnProject(Project project) {\n    return Java.KEY.equals(project.getLanguageKey())\n      && configuration.isEnabled()\n      && project.getAnalysisType().isDynamic(true);\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    configuration = mock(JacocoConfiguration.class);\n    sensor = new JaCoCoSensor(configuration);\n  }","id":68194,"modified_method":"@Before\n  public void setUp() {\n    configuration = mock(JacocoConfiguration.class);\n    when(configuration.isEnabled()).thenReturn(true);\n    sensor = new JaCoCoSensor(configuration);\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void start() {\n    // set as the current context classloader for hibernate, else it does not find the JDBC driver.\n    Thread.currentThread().setContextClassLoader(classLoader);\n  }","id":68195,"modified_method":"public void start() {\n    File jdbcDriver = new File(tempDirectories.getRoot(), \"jdbc-driver.jar\");\n    serverClient.download(\"/deploy/jdbc-driver.jar\", jdbcDriver);\n    classLoader = initClassloader(jdbcDriver);\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void start() {\n    if (!localMode.isEnabled()) {\n      return;\n    }\n\n    File file = tempDirectories.getFile(\"local\", \"db.h2.db\");\n    String h2DatabasePath = file.getAbsolutePath().replaceAll(\".h2.db\", \"\");\n\n    downloadDatabase(file);\n    replaceSettings(h2DatabasePath);\n  }","id":68196,"modified_method":"public void start() {\n    if (!dryRun.isEnabled()) {\n      return;\n    }\n\n    File file = tempDirectories.getFile(\"local\", \"db.h2.db\");\n    String h2DatabasePath = file.getAbsolutePath().replaceAll(\".h2.db\", \"\");\n\n    downloadDatabase(reactor.getRoot().getKey(), file);\n    replaceSettings(h2DatabasePath);\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void downloadDatabase(File toFile) {\n    String login = settings.getString(CoreProperties.LOGIN);\n    String password = settings.getString(CoreProperties.PASSWORD);\n    String resourceKey = settings.getString(\"sonar.resource\");\n    if (null == resourceKey) {\n      throw new SonarException(\"No resource key was provided using sonar.resource property\");\n    }\n\n    URI uri = URI.create(server.getURL() + API_SYNCHRO + \"?resource=\" + resourceKey);\n\n    HttpDownloader.BaseHttpDownloader downloader = new HttpDownloader.BaseHttpDownloader(settings, null);\n    InputSupplier<InputStream> inputSupplier;\n    if (Strings.isNullOrEmpty(login)) {\n      inputSupplier = downloader.newInputSupplier(uri);\n    } else {\n      inputSupplier = downloader.newInputSupplier(uri, login, password);\n    }\n\n    try {\n      Files.copy(inputSupplier, toFile);\n    } catch (IOException e) {\n      throw new SonarException(\"Unable to save local database to file: \" + toFile, e);\n    }\n  }","id":68197,"modified_method":"private void downloadDatabase(String projectKey, File toFile) {\n    server.download(API_SYNCHRO + \"?resource=\" + projectKey, toFile);\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public LocalDatabase(DryRun localMode, Settings settings, Server server, TempDirectories tempDirectories) {\n    this.localMode = localMode;\n    this.settings = settings;\n    this.server = server;\n    this.tempDirectories = tempDirectories;\n  }","id":68198,"modified_method":"public LocalDatabase(DryRun dryRun, Settings settings, ServerClient server, TempDirectories tempDirectories, ProjectReactor reactor) {\n    this.dryRun = dryRun;\n    this.settings = settings;\n    this.server = server;\n    this.reactor = reactor;\n    this.tempDirectories = tempDirectories;\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldStopAndDeleteDirectory() {\n    File root = tempDirectories.getRoot();\n    File findbugsDir = tempDirectories.getDir(\"findbugs\");\n    assertThat(findbugsDir.exists(), is(true));\n\n    tempDirectories.stop();\n\n    assertThat(root.exists(), is(false));\n    assertThat(findbugsDir.exists(), is(false));\n  }","id":68199,"modified_method":"@Test\n  public void shouldStopAndDeleteDirectory() {\n    File root = tempDirectories.getRoot();\n    File findbugsDir = tempDirectories.getDir(\"findbugs\");\n    assertThat(findbugsDir).exists();\n\n    tempDirectories.stop();\n\n    assertThat(root).doesNotExist();\n    assertThat(findbugsDir).doesNotExist();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCreateDirectory() {\n    File findbugsDir = tempDirectories.getDir(\"findbugs\");\n    assertNotNull(findbugsDir);\n    assertThat(findbugsDir.exists(), is(true));\n    assertThat(findbugsDir.getParentFile(), is(tempDirectories.getRoot()));\n    assertThat(findbugsDir.getName(), is(\"findbugs\"));\n  }","id":68200,"modified_method":"@Test\n  public void shouldCreateDirectory() {\n    File findbugsDir = tempDirectories.getDir(\"findbugs\");\n    assertThat(findbugsDir).isNotNull();\n    assertThat(findbugsDir).exists();\n    assertThat(findbugsDir.getParentFile()).isEqualTo(tempDirectories.getRoot());\n    assertThat(findbugsDir.getName()).isEqualTo(\"findbugs\");\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCreateDirectoryWhenGettingFile() {\n    File file = tempDirectories.getFile(\"findbugs\", \"bcel.jar\");\n    assertNotNull(file);\n    assertThat(file.getParentFile().getName(), is(\"findbugs\"));\n  }","id":68201,"modified_method":"@Test\n  public void shouldCreateDirectoryWhenGettingFile() {\n    File file = tempDirectories.getFile(\"findbugs\", \"bcel.jar\");\n    assertThat(file).isNotNull();\n    assertThat(file.getParentFile().getName()).isEqualTo(\"findbugs\");\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCreateRoot() {\n    assertNotNull(tempDirectories.getRoot());\n    assertThat(tempDirectories.getRoot().exists(), is(true));\n    assertThat(tempDirectories.getRoot().isDirectory(), is(true));\n  }","id":68202,"modified_method":"@Test\n  public void shouldCreateRoot() {\n    assertThat(tempDirectories.getRoot()).isNotNull();\n    assertThat(tempDirectories.getRoot()).exists();\n    assertThat(tempDirectories.getRoot()).isDirectory();\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public UpdateStatusJob(ServerMetadata server, DatabaseSession session, ResourcePersister resourcePersister, Snapshot snapshot) {\n    this.session = session;\n    this.server = server;\n    this.resourcePersister = resourcePersister;\n    this.snapshot = snapshot;\n  }","id":68203,"modified_method":"public UpdateStatusJob(ServerClient server, DatabaseSession session, ResourcePersister resourcePersister, Snapshot snapshot) {\n    this.session = session;\n    this.server = server;\n    this.resourcePersister = resourcePersister;\n    this.snapshot = snapshot;\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void assertAnalysis(int snapshotId, String fixture) {\n    setupData(\"sharedFixture\", fixture);\n\n    DatabaseSession session = getSession();\n    UpdateStatusJob sensor = new UpdateStatusJob(mock(ServerMetadata.class), session, new DefaultResourcePersister(session), loadSnapshot(snapshotId));\n    sensor.execute();\n\n    checkTables(fixture, \"snapshots\");\n  }","id":68204,"modified_method":"private void assertAnalysis(int snapshotId, String fixture) {\n    setupData(\"sharedFixture\", fixture);\n\n    DatabaseSession session = getSession();\n    UpdateStatusJob sensor = new UpdateStatusJob(mock(ServerClient.class), session, new DefaultResourcePersister(session), loadSnapshot(snapshotId));\n    sensor.execute();\n\n    checkTables(fixture, \"snapshots\");\n  }","commit_id":"b71b3673e91930aac3fff828d628279b5dee7616","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public ResourceTypeTree provide() {\n    return ResourceTypeTree.builder()\n\n        .addType(ResourceType.builder(Qualifiers.PROJECT)\n            .setProperty(\"deletable\", TRUE)\n            .setProperty(\"modifiable_history\", TRUE)\n            .setProperty(\"hasRolePolicy\", TRUE)\n            .setProperty(\"updatable_key\", TRUE)\n            .build())\n        .addType(ResourceType.builder(Qualifiers.MODULE)\n            .setProperty(\"updatable_key\", TRUE)\n            .build())\n        .addType(ResourceType.builder(Qualifiers.DIRECTORY).build())\n        .addType(ResourceType.builder(Qualifiers.PACKAGE).build())\n        .addType(ResourceType.builder(Qualifiers.FILE).hasSourceCode().build())\n        .addType(ResourceType.builder(Qualifiers.CLASS).hasSourceCode().build())\n        .addType(ResourceType.builder(Qualifiers.UNIT_TEST_FILE).hasSourceCode().build())\n\n        .addRelations(Qualifiers.PROJECT, Qualifiers.MODULE)\n        .addRelations(Qualifiers.MODULE, Qualifiers.DIRECTORY, Qualifiers.PACKAGE)\n        .addRelations(Qualifiers.DIRECTORY, Qualifiers.FILE, Qualifiers.UNIT_TEST_FILE)\n        .addRelations(Qualifiers.PACKAGE, Qualifiers.CLASS, Qualifiers.UNIT_TEST_FILE)\n\n        .build();\n\n  }","id":68205,"modified_method":"@Override\n  public ResourceTypeTree provide() {\n    return ResourceTypeTree.builder()\n\n      .addType(ResourceType.builder(Qualifiers.PROJECT)\n        .setProperty(\"deletable\", true)\n        .setProperty(\"modifiable_history\", true)\n        .setProperty(\"hasRolePolicy\", true)\n        .setProperty(\"updatable_key\", true)\n        .build())\n      .addType(ResourceType.builder(Qualifiers.MODULE)\n        .setProperty(\"updatable_key\", true)\n        .build())\n      .addType(ResourceType.builder(Qualifiers.DIRECTORY).build())\n      .addType(ResourceType.builder(Qualifiers.PACKAGE).build())\n      .addType(ResourceType.builder(Qualifiers.FILE).hasSourceCode().build())\n      .addType(ResourceType.builder(Qualifiers.CLASS).hasSourceCode().build())\n      .addType(ResourceType.builder(Qualifiers.UNIT_TEST_FILE).hasSourceCode().build())\n\n      .addRelations(Qualifiers.PROJECT, Qualifiers.MODULE)\n      .addRelations(Qualifiers.MODULE, Qualifiers.DIRECTORY, Qualifiers.PACKAGE)\n      .addRelations(Qualifiers.DIRECTORY, Qualifiers.FILE, Qualifiers.UNIT_TEST_FILE)\n      .addRelations(Qualifiers.PACKAGE, Qualifiers.CLASS, Qualifiers.UNIT_TEST_FILE)\n\n      .build();\n\n  }","commit_id":"7f74b18354bc2c92f32b79a18baff4fb518f3e90","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Returns the value of the property for this resource type.\n   * \n   * @return the Boolean value of the property. If the property hasn't been set, False is returned.\n   * @since 3.0\n   */\n  public Boolean getBooleanProperty(String key) {\n    Preconditions.checkNotNull(key);\n    return Boolean.valueOf(properties.get(key));\n  }","id":68206,"modified_method":"/**\n   * Returns the value of the property for this resource type.\n   *\n   * @return the Boolean value of the property. If the property hasn't been set, False is returned.\n   * @since 3.0\n   */\n  public boolean getBooleanProperty(String key) {\n    Preconditions.checkNotNull(key);\n    String value = properties.get(key);\n    return value != null && Boolean.parseBoolean(value);\n  }","commit_id":"7f74b18354bc2c92f32b79a18baff4fb518f3e90","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testDeprecatedIsAvailableForFiltesCompatibility() {\n    // test getter\n    ResourceType def = ResourceType.builder(\"qualifier\")\n        .setProperty(\"availableForFilters\", \"true\")\n        .build();\n    assertThat(def.isAvailableForFilters(), is(true));\n\n    // test setter on Builder\n    def = ResourceType.builder(\"qualifier\")\n        .availableForFilters()\n        .build();\n    assertThat(def.getBooleanProperty(\"availableForFilters\"), is(true));\n  }","id":68207,"modified_method":"@Test\n  public void testDeprecatedIsAvailableForFiltesCompatibility() {\n    ResourceType def = ResourceType.builder(\"qualifier\").build();\n    assertThat(def.getBooleanProperty(\"availableForFilters\")).isFalse();\n\n    def = ResourceType.builder(\"qualifier\").availableForFilters().build();\n    assertThat(def.getBooleanProperty(\"availableForFilters\")).isTrue();\n  }","commit_id":"7f74b18354bc2c92f32b79a18baff4fb518f3e90","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCreateWithDefaults() {\n    ResourceType def = ResourceType.builder(\"qualifier\")\n        .build();\n    assertThat(def.getQualifier(), is(\"qualifier\"));\n    assertThat(def.getIconPath(), is(\"/images/q/qualifier.png\"));\n    assertThat(def.hasSourceCode(), is(false));\n  }","id":68208,"modified_method":"@Test\n  public void shouldCreateWithDefaults() {\n    ResourceType def = ResourceType.builder(\"qualifier\")\n      .build();\n    assertThat(def.getQualifier()).isEqualTo(\"qualifier\");\n    assertThat(def.getIconPath()).isEqualTo(\"/images/q/qualifier.png\");\n    assertThat(def.hasSourceCode()).isFalse();\n  }","commit_id":"7f74b18354bc2c92f32b79a18baff4fb518f3e90","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testEqualsAndHashCode() {\n    ResourceType foo1 = ResourceType.builder(\"FOO\").build();\n    ResourceType foo2 = ResourceType.builder(\"FOO\").build();\n    ResourceType bar = ResourceType.builder(\"BAR\").build();\n\n    assertThat(foo1.equals(foo1), is(true));\n    assertThat(foo1.equals(foo2), is(true));\n    assertThat(foo1.equals(bar), is(false));\n\n    assertThat(foo1.hashCode(), is(foo1.hashCode()));\n  }","id":68209,"modified_method":"@Test\n  public void testEqualsAndHashCode() {\n    ResourceType foo1 = ResourceType.builder(\"FOO\").build();\n    ResourceType foo2 = ResourceType.builder(\"FOO\").build();\n    ResourceType bar = ResourceType.builder(\"BAR\").build();\n\n    assertThat(foo1.equals(foo1)).isTrue();\n    assertThat(foo1.equals(foo2)).isTrue();\n    assertThat(foo1.equals(bar)).isFalse();\n\n    assertThat(foo1.hashCode()).isEqualTo(foo1.hashCode());\n  }","commit_id":"7f74b18354bc2c92f32b79a18baff4fb518f3e90","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCreate() {\n    ResourceType def = ResourceType.builder(\"qualifier\")\n        .setIconPath(\"/custom-icon.png\")\n        .hasSourceCode()\n        .setProperty(\"availableForFilters\", \"true\")\n        .setProperty(\"anotherProperty\", \"foo\")\n        .build();\n    assertThat(def.getQualifier(), is(\"qualifier\"));\n    assertThat(def.getIconPath(), is(\"/custom-icon.png\"));\n    assertThat(def.hasSourceCode(), is(true));\n    assertThat(def.getBooleanProperty(\"availableForFilters\"), is(true));\n    assertThat(def.getStringProperty(\"anotherProperty\"), is(\"foo\"));\n  }","id":68210,"modified_method":"@Test\n  public void shouldCreate() {\n    ResourceType def = ResourceType.builder(\"qualifier\")\n      .setIconPath(\"/custom-icon.png\")\n      .hasSourceCode()\n      .setProperty(\"availableForFilters\", \"true\")\n      .setProperty(\"anotherProperty\", \"foo\")\n      .build();\n    assertThat(def.getQualifier()).isEqualTo(\"qualifier\");\n    assertThat(def.getIconPath()).isEqualTo(\"/custom-icon.png\");\n    assertThat(def.hasSourceCode()).isTrue();\n    assertThat(def.getBooleanProperty(\"availableForFilters\")).isTrue();\n    assertThat(def.getStringProperty(\"anotherProperty\")).isEqualTo(\"foo\");\n  }","commit_id":"7f74b18354bc2c92f32b79a18baff4fb518f3e90","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void decorate(Resource resource, DecoratorContext context) {\n    if (shouldDecorateResource(resource)) {\n      resourcePermissioning.grantDefaultRoles(resource);\n    }\n  }","id":68211,"modified_method":"public void decorate(Resource resource, DecoratorContext context) {\n    if (shouldDecorateResource(resource)) {\n      LoggerFactory.getLogger(ApplyProjectRolesDecorator.class).info(\"Grant default permissions to {}\", resource.getKey());\n      resourcePermissioning.grantDefaultRoles(resource);\n    }\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private boolean shouldDecorateResource(Resource resource) {\n    return resource.getId() != null && isProject(resource) && !resourcePermissioning.hasRoles(resource);\n  }","id":68212,"modified_method":"private boolean shouldDecorateResource(Resource resource) {\n    return resource.getId() != null && QUALIFIERS.contains(resource.getQualifier()) && !resourcePermissioning.hasRoles(resource);\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void doNotApplySecurityWhenExistingPermissions() {\n    Project project = new Project(\"project\");\n    project.setId(10);\n    when(resourcePermissioning.hasRoles(project)).thenReturn(true);\n\n    decorator.decorate(project, null);\n\n    verify(resourcePermissioning, never()).grantDefaultRoles(project);\n  }","id":68213,"modified_method":"@Test\n  public void doNotGrantDefaultRolesWhenExistingPermissions() {\n    Project project = new Project(\"project\");\n    project.setId(10);\n    when(resourcePermissioning.hasRoles(project)).thenReturn(true);\n\n    decorator.decorate(project, null);\n\n    verify(resourcePermissioning, never()).grantDefaultRoles(project);\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void grantDefaultRoles(Resource resource, String role, SqlSession session) {\n    UserMapper userMapper = session.getMapper(UserMapper.class);\n    RoleMapper roleMapper = session.getMapper(RoleMapper.class);\n    String[] groupNames = settings.getStringArrayBySeparator(\"sonar.role.\" + role + \".\" + resource.getQualifier() + \".defaultGroups\", \",\");\n    for (String groupName : groupNames) {\n      GroupRoleDto groupRole = new GroupRoleDto().setRole(role).setResourceId(new Long(resource.getId()));\n      if (DefaultGroups.isAnyone(groupName)) {\n        roleMapper.insertGroupRole(groupRole);\n      } else {\n        GroupDto group = userMapper.selectGroupByName(groupName);\n        if (group != null) {\n          roleMapper.insertGroupRole(groupRole.setGroupId(group.getId()));\n        }\n      }\n    }\n\n    String[] logins = settings.getStringArrayBySeparator(\"sonar.role.\" + role + \".\" + resource.getQualifier() + \".defaultUsers\", \",\");\n    for (String login : logins) {\n      UserDto user = userMapper.selectUserByLogin(login);\n      if (user != null) {\n        roleMapper.insertUserRole(new UserRoleDto().setRole(role).setUserId(user.getId()).setResourceId(new Long(resource.getId())));\n      }\n    }\n  }","id":68214,"modified_method":"private void grantDefaultRoles(Resource resource, String role, SqlSession session) {\n    UserMapper userMapper = session.getMapper(UserMapper.class);\n    RoleMapper roleMapper = session.getMapper(RoleMapper.class);\n\n    String strategy = getStrategy(resource);\n    String[] groupNames = settings.getStringArrayBySeparator(\"sonar.role.\" + role + \".\" + strategy + \".defaultGroups\", \",\");\n    for (String groupName : groupNames) {\n      GroupRoleDto groupRole = new GroupRoleDto().setRole(role).setResourceId(new Long(resource.getId()));\n      if (DefaultGroups.isAnyone(groupName)) {\n        roleMapper.insertGroupRole(groupRole);\n      } else {\n        GroupDto group = userMapper.selectGroupByName(groupName);\n        if (group != null) {\n          roleMapper.insertGroupRole(groupRole.setGroupId(group.getId()));\n        }\n      }\n    }\n\n    String[] logins = settings.getStringArrayBySeparator(\"sonar.role.\" + role + \".\" + strategy + \".defaultUsers\", \",\");\n    for (String login : logins) {\n      UserDto user = userMapper.selectUserByLogin(login);\n      if (user != null) {\n        roleMapper.insertUserRole(new UserRoleDto().setRole(role).setUserId(user.getId()).setResourceId(new Long(resource.getId())));\n      }\n    }\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getAll_predicate() {\n    Collection<ResourceType> forFilters = types.getAll(ResourceTypes.AVAILABLE_FOR_FILTERS);\n    assertThat(forFilters.size(), is(2));\n    assertThat(qualifiers(forFilters), hasItems(Qualifiers.PROJECT, Qualifiers.VIEW));\n  }","id":68215,"modified_method":"@Test\n  public void getAll_predicate() {\n    Collection<ResourceType> forFilters = types.getAll(ResourceTypes.AVAILABLE_FOR_FILTERS);\n    assertThat(qualifiers(forFilters)).containsOnly(Qualifiers.PROJECT, Qualifiers.VIEW).doesNotHaveDuplicates();\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getLeavesQualifiers() {\n    assertThat(types.getLeavesQualifiers(Qualifiers.PROJECT).size(), is(1));\n    assertThat(types.getLeavesQualifiers(Qualifiers.PROJECT), hasItem(Qualifiers.FILE));\n\n    assertThat(types.getLeavesQualifiers(Qualifiers.DIRECTORY).size(), is(1));\n    assertThat(types.getLeavesQualifiers(Qualifiers.DIRECTORY), hasItem(Qualifiers.FILE));\n\n    assertThat(types.getLeavesQualifiers(Qualifiers.VIEW).size(), is(1));\n    assertThat(types.getLeavesQualifiers(Qualifiers.VIEW), hasItem(Qualifiers.PROJECT));\n\n    assertThat(types.getLeavesQualifiers(\"xxx\").size(), is(0));\n  }","id":68216,"modified_method":"@Test\n  public void getLeavesQualifiers() {\n    assertThat(types.getLeavesQualifiers(Qualifiers.PROJECT)).containsExactly(Qualifiers.FILE);\n\n    assertThat(types.getLeavesQualifiers(Qualifiers.DIRECTORY)).containsExactly(Qualifiers.FILE);\n\n    assertThat(types.getLeavesQualifiers(Qualifiers.VIEW)).containsExactly(Qualifiers.PROJECT);\n\n    assertThat(types.getLeavesQualifiers(\"xxx\")).isEmpty();\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getChildrenQualifiers() {\n    assertThat(types.getChildrenQualifiers(Qualifiers.PROJECT).size(), is(1));\n    assertThat(types.getChildrenQualifiers(Qualifiers.PROJECT), hasItem(Qualifiers.DIRECTORY));\n    assertThat(types.getChildrenQualifiers(Qualifiers.SUBVIEW), hasItem(Qualifiers.PROJECT));\n    assertThat(types.getChildrenQualifiers(\"xxx\").isEmpty(), is(true));\n    assertThat(types.getChildrenQualifiers(Qualifiers.FILE).isEmpty(), is(true));\n  }","id":68217,"modified_method":"@Test\n  public void getChildrenQualifiers() {\n    assertThat(types.getChildrenQualifiers(Qualifiers.PROJECT)).containsExactly(Qualifiers.DIRECTORY);\n    assertThat(types.getChildrenQualifiers(Qualifiers.SUBVIEW)).containsExactly(Qualifiers.PROJECT);\n    assertThat(types.getChildrenQualifiers(\"xxx\")).isEmpty();\n    assertThat(types.getChildrenQualifiers(Qualifiers.FILE)).isEmpty();\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getTree() {\n    assertThat(qualifiers(types.getTree(Qualifiers.VIEW).getTypes()), hasItems(Qualifiers.VIEW, Qualifiers.SUBVIEW));\n    assertThat(types.getTree(\"xxx\"), nullValue());\n  }","id":68218,"modified_method":"@Test\n  public void getTree() {\n    assertThat(qualifiers(types.getTree(Qualifiers.VIEW).getTypes())).containsOnly(Qualifiers.VIEW, Qualifiers.SUBVIEW).doesNotHaveDuplicates();\n    assertThat(types.getTree(\"xxx\")).isNull();\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void get() {\n    assertThat(types.get(Qualifiers.PROJECT).getQualifier(), is(Qualifiers.PROJECT));\n\n    // does not return null\n    assertThat(types.get(\"xxx\").getQualifier(), is(\"xxx\"));\n  }","id":68219,"modified_method":"@Test\n  public void get() {\n    assertThat(types.get(Qualifiers.PROJECT).getQualifier()).isEqualTo(Qualifiers.PROJECT);\n\n    // does not return null\n    assertThat(types.get(\"xxx\").getQualifier()).isEqualTo(\"xxx\");\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getChildren() {\n    assertThat(qualifiers(types.getChildren(Qualifiers.PROJECT)), hasItem(Qualifiers.DIRECTORY));\n    assertThat(qualifiers(types.getChildren(Qualifiers.SUBVIEW)), hasItem(Qualifiers.PROJECT));\n  }","id":68220,"modified_method":"@Test\n  public void getChildren() {\n    assertThat(qualifiers(types.getChildren(Qualifiers.PROJECT))).contains(Qualifiers.DIRECTORY);\n    assertThat(qualifiers(types.getChildren(Qualifiers.SUBVIEW))).contains(Qualifiers.PROJECT);\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getAll() {\n    assertThat(types.getAll().size(), is(5));\n    assertThat(qualifiers(types.getAll()), hasItems(\n        Qualifiers.PROJECT, Qualifiers.DIRECTORY, Qualifiers.FILE, Qualifiers.VIEW, Qualifiers.SUBVIEW));\n  }","id":68221,"modified_method":"@Test\n  public void getAll() {\n    assertThat(qualifiers(types.getAll())).containsOnly(Qualifiers.PROJECT, Qualifiers.DIRECTORY, Qualifiers.FILE, Qualifiers.VIEW, Qualifiers.SUBVIEW);\n  }","commit_id":"b3ca2478b4cb39787d1be6e2e91463b9869b8908","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-3164\n   */\n  @Test\n  public void setValueOfInheritedField() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.ImplementedCheck\", \"\");\n    rule.createParameter(\"max\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"max\", \"300\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(ImplementedCheck.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((ImplementedCheck) check).getMax(), is(300));\n  }","id":68222,"modified_method":"/**\n   * SONAR-3164\n   */\n  @Test\n  public void setValueOfInheritedField() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.ImplementedCheck\", \"\");\n    rule.createParameter(\"max\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"max\", \"300\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(ImplementedCheck.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((ImplementedCheck) check).getMax()).isEqualTo(300);\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void createCheckWithStringProperty() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithStringProperty\", \"\");\n    rule.createParameter(\"pattern\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"pattern\", \"foo\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithStringProperty.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertNotNull(check);\n    assertThat(check, is(CheckWithStringProperty.class));\n    assertThat(((CheckWithStringProperty) check).getPattern(), is(\"foo\"));\n  }","id":68223,"modified_method":"@Test\n  public void createCheckWithStringProperty() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithStringProperty\", \"\");\n    rule.createParameter(\"pattern\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"pattern\", \"foo\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithStringProperty.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertNotNull(check);\n    assertThat(check).isInstanceOf(CheckWithStringProperty.class);\n    assertThat(((CheckWithStringProperty) check).getPattern()).isEqualTo(\"foo\");\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void createCheckWithoutProperties() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    ActiveRule activeRule = profile.activateRule(Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithoutProperties\", \"\"), null);\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithoutProperties.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertNotNull(check);\n    assertThat(check, is(CheckWithoutProperties.class));\n  }","id":68224,"modified_method":"@Test\n  public void createCheckWithoutProperties() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    ActiveRule activeRule = profile.activateRule(Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithoutProperties\", \"\"), null);\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithoutProperties.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertNotNull(check);\n    assertThat(check).isInstanceOf(CheckWithoutProperties.class);\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void create_instance_with_string_property() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithStringProperty\", \"\");\n    rule.createParameter(\"pattern\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"pattern\", \"foo\");\n    CheckWithStringProperty checkInstance = new CheckWithStringProperty();\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.asList(checkInstance));\n\n    Object check = factory.getCheck(activeRule);\n    assertNotNull(check);\n    assertSame(check, checkInstance);\n    assertThat(checkInstance.getPattern(), is(\"foo\"));\n  }","id":68225,"modified_method":"@Test\n  public void create_instance_with_string_property() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithStringProperty\", \"\");\n    rule.createParameter(\"pattern\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"pattern\", \"foo\");\n    CheckWithStringProperty checkInstance = new CheckWithStringProperty();\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.asList(checkInstance));\n\n    Object check = factory.getCheck(activeRule);\n    assertNotNull(check);\n    assertSame(check, checkInstance);\n    assertThat(checkInstance.getPattern()).isEqualTo(\"foo\");\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldOverridePropertyKey() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithOverriddenPropertyKey\", \"\");\n    rule.createParameter(\"maximum\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"maximum\", \"300\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithOverriddenPropertyKey.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((CheckWithOverriddenPropertyKey) check).getMax(), is(300));\n  }","id":68226,"modified_method":"@Test\n  public void shouldOverridePropertyKey() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithOverriddenPropertyKey\", \"\");\n    rule.createParameter(\"maximum\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"maximum\", \"300\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithOverriddenPropertyKey.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((CheckWithOverriddenPropertyKey) check).getMax()).isEqualTo(300);\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void createCheckWithPrimitiveProperties() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithPrimitiveProperties\", \"\");\n    rule.createParameter(\"max\");\n    rule.createParameter(\"ignore\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"max\", \"300\");\n    activeRule.setParameter(\"ignore\", \"true\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithPrimitiveProperties.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((CheckWithPrimitiveProperties) check).getMax(), is(300));\n    assertThat(((CheckWithPrimitiveProperties) check).isIgnore(), is(true));\n  }","id":68227,"modified_method":"@Test\n  public void createCheckWithPrimitiveProperties() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithPrimitiveProperties\", \"\");\n    rule.createParameter(\"max\");\n    rule.createParameter(\"ignore\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"max\", \"300\");\n    activeRule.setParameter(\"ignore\", \"true\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithPrimitiveProperties.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((CheckWithPrimitiveProperties) check).getMax()).isEqualTo(300);\n    assertThat(((CheckWithPrimitiveProperties) check).isIgnore()).isTrue();\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void createCheckWithIntegerProperty() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithIntegerProperty\", \"\");\n    rule.createParameter(\"max\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"max\", \"300\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithIntegerProperty.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((CheckWithIntegerProperty) check).getMax(), is(300));\n  }","id":68228,"modified_method":"@Test\n  public void createCheckWithIntegerProperty() {\n    RulesProfile profile = RulesProfile.create(\"repo\", \"java\");\n    Rule rule = Rule.create(\"repo\", \"org.sonar.api.checks.CheckWithIntegerProperty\", \"\");\n    rule.createParameter(\"max\");\n\n    ActiveRule activeRule = profile.activateRule(rule, null);\n    activeRule.setParameter(\"max\", \"300\");\n    AnnotationCheckFactory factory = AnnotationCheckFactory.create(profile, \"repo\", Arrays.<Class> asList(CheckWithIntegerProperty.class));\n\n    Object check = factory.getCheck(activeRule);\n    assertThat(((CheckWithIntegerProperty) check).getMax()).isEqualTo(300);\n  }","commit_id":"71ecd444fd3221d9d3547e879f606af12abe2de7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void startDatabase() throws SQLException {\n    if (database == null) {\n      Settings settings = new Settings().setProperties(Maps.fromProperties(System.getProperties()));\n\n      boolean hasDialect = settings.hasKey(\"sonar.jdbc.dialect\");\n      if (hasDialect) {\n        database = new DefaultDatabase(settings);\n      } else {\n        database = new H2Database(\"sonarMyBatis\");\n      }\n      database.start();\n\n      databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n      databaseTester = new DataSourceDatabaseTester(database.getDataSource());\n\n      myBatis = new MyBatis(database, settings, new Logback());\n      myBatis.start();\n    }\n\n    databaseCommands.truncateDatabase(database.getDataSource());\n  }","id":68229,"modified_method":"@Before\n  public void startDatabase() throws Exception {\n    if (database == null) {\n      Settings settings = new Settings().setProperties(Maps.fromProperties(System.getProperties()));\n      if (settings.hasKey(\"orchestrator.configUrl\")) {\n        loadOrchestratorSettings(settings);\n      }\n      boolean hasDialect = settings.hasKey(\"sonar.jdbc.dialect\");\n      if (hasDialect) {\n        database = new DefaultDatabase(settings);\n      } else {\n        database = new H2Database(\"h2Tests\");\n      }\n      database.start();\n      LOG.info(\"Test Database: \" + database);\n\n      databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n      databaseTester = new DataSourceDatabaseTester(database.getDataSource());\n\n      myBatis = new MyBatis(database, settings, new Logback());\n      myBatis.start();\n    }\n\n    databaseCommands.truncateDatabase(database.getDataSource());\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldInitOracleSchemaWithDeprecatedProperty() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", Oracle.ID);\n    settings.setProperty(\"sonar.hibernate.default_schema\", \"my_schema\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema(), Is.is(\"my_schema\"));\n  }","id":68230,"modified_method":"@Test\n  public void shouldInitOracleSchemaWithDeprecatedProperty() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", Oracle.ID);\n    settings.setProperty(\"sonar.hibernate.default_schema\", \"my_schema\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema()).isEqualTo(\"my_schema\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGuessDialectFromUrl() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.url\", \"jdbc:postgresql://localhost/sonar\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getDialect().getId(), Is.is(PostgreSql.ID));\n  }","id":68231,"modified_method":"@Test\n  public void shouldGuessDialectFromUrl() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.url\", \"jdbc:postgresql://localhost/sonar\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getDialect().getId()).isEqualTo(PostgreSql.ID);\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExtractCommonsDbcpProperties() {\n    Properties props = new Properties();\n    props.setProperty(\"sonar.jdbc.driverClassName\", \"my.Driver\");\n    props.setProperty(\"sonar.jdbc.username\", \"me\");\n    props.setProperty(\"sonar.jdbc.maxActive\", \"5\");\n\n    Properties commonsDbcpProps = DefaultDatabase.extractCommonsDbcpProperties(props);\n\n    assertThat(commonsDbcpProps.getProperty(\"username\"), Is.is(\"me\"));\n    assertThat(commonsDbcpProps.getProperty(\"driverClassName\"), Is.is(\"my.Driver\"));\n    assertThat(commonsDbcpProps.getProperty(\"maxActive\"), Is.is(\"5\"));\n  }","id":68232,"modified_method":"@Test\n  public void shouldExtractCommonsDbcpProperties() {\n    Properties props = new Properties();\n    props.setProperty(\"sonar.jdbc.driverClassName\", \"my.Driver\");\n    props.setProperty(\"sonar.jdbc.username\", \"me\");\n    props.setProperty(\"sonar.jdbc.maxActive\", \"5\");\n\n    Properties commonsDbcpProps = DefaultDatabase.extractCommonsDbcpProperties(props);\n\n    assertThat(commonsDbcpProps.getProperty(\"username\")).isEqualTo(\"me\");\n    assertThat(commonsDbcpProps.getProperty(\"driverClassName\")).isEqualTo(\"my.Driver\");\n    assertThat(commonsDbcpProps.getProperty(\"maxActive\")).isEqualTo(\"5\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldInitPostgresqlSchemaWithDeprecatedProperty() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", PostgreSql.ID);\n    settings.setProperty(\"sonar.jdbc.postgreSearchPath\", \"my_schema\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema(), Is.is(\"my_schema\"));\n  }","id":68233,"modified_method":"@Test\n  public void shouldInitPostgresqlSchemaWithDeprecatedProperty() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", PostgreSql.ID);\n    settings.setProperty(\"sonar.jdbc.postgreSearchPath\", \"my_schema\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema()).isEqualTo(\"my_schema\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotInitPostgresqlSchemaByDefault() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", PostgreSql.ID);\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema(), nullValue());\n  }","id":68234,"modified_method":"@Test\n  public void shouldNotInitPostgresqlSchemaByDefault() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", PostgreSql.ID);\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema()).isNull();\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotInitOracleSchemaByDefault() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", Oracle.ID);\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema(), nullValue());\n  }","id":68235,"modified_method":"@Test\n  public void shouldNotInitOracleSchemaByDefault() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.dialect\", Oracle.ID);\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema()).isNull();\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCompleteProperties() {\n    Settings settings = new Settings();\n\n    DefaultDatabase db = new DefaultDatabase(settings) {\n      @Override\n      protected void doCompleteProperties(Properties properties) {\n        properties.setProperty(\"sonar.jdbc.maxActive\", \"2\");\n      }\n    };\n    db.initSettings();\n\n    Properties props = db.getProperties();\n\n    assertThat(props.getProperty(\"sonar.jdbc.maxActive\"), Is.is(\"2\"));\n  }","id":68236,"modified_method":"@Test\n  public void shouldCompleteProperties() {\n    Settings settings = new Settings();\n\n    DefaultDatabase db = new DefaultDatabase(settings) {\n      @Override\n      protected void doCompleteProperties(Properties properties) {\n        properties.setProperty(\"sonar.jdbc.maxActive\", \"2\");\n      }\n    };\n    db.initSettings();\n\n    Properties props = db.getProperties();\n\n    assertThat(props.getProperty(\"sonar.jdbc.maxActive\")).isEqualTo(\"2\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSupportDeprecatedProperties() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.driver\", \"my.Driver\");\n    settings.setProperty(\"sonar.jdbc.user\", \"me\");\n\n    DefaultDatabase db = new DefaultDatabase(settings);\n    db.initSettings();\n    Properties props = db.getProperties();\n\n    assertThat(props.getProperty(\"sonar.jdbc.username\"), Is.is(\"me\"));\n    assertThat(props.getProperty(\"sonar.jdbc.driverClassName\"), Is.is(\"my.Driver\"));\n  }","id":68237,"modified_method":"@Test\n  public void shouldSupportDeprecatedProperties() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.driver\", \"my.Driver\");\n    settings.setProperty(\"sonar.jdbc.user\", \"me\");\n\n    DefaultDatabase db = new DefaultDatabase(settings);\n    db.initSettings();\n    Properties props = db.getProperties();\n\n    assertThat(props.getProperty(\"sonar.jdbc.username\")).isEqualTo(\"me\");\n    assertThat(props.getProperty(\"sonar.jdbc.driverClassName\")).isEqualTo(\"my.Driver\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldInitSchema() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.schema\", \"my_schema\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema(), Is.is(\"my_schema\"));\n  }","id":68238,"modified_method":"@Test\n  public void shouldInitSchema() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.schema\", \"my_schema\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getSchema()).isEqualTo(\"my_schema\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGuessDefaultDriver() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.url\", \"jdbc:postgresql://localhost/sonar\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getProperties().getProperty(\"sonar.jdbc.driverClassName\"), Is.is(\"org.postgresql.Driver\"));\n  }","id":68239,"modified_method":"@Test\n  public void shouldGuessDefaultDriver() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.url\", \"jdbc:postgresql://localhost/sonar\");\n\n    DefaultDatabase database = new DefaultDatabase(settings);\n    database.initSettings();\n\n    assertThat(database.getProperties().getProperty(\"sonar.jdbc.driverClassName\")).isEqualTo(\"org.postgresql.Driver\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldLoadDefaultValues() {\n    DefaultDatabase db = new DefaultDatabase(new Settings());\n    db.initSettings();\n\n    Properties props = db.getProperties();\n    assertThat(props.getProperty(\"sonar.jdbc.username\"), Is.is(\"sonar\"));\n    assertThat(props.getProperty(\"sonar.jdbc.password\"), Is.is(\"sonar\"));\n    assertThat(props.getProperty(\"sonar.jdbc.url\"), Is.is(\"jdbc:h2:tcp://localhost/sonar\"));\n    assertThat(props.getProperty(\"sonar.jdbc.driverClassName\"), Is.is(\"org.h2.Driver\"));\n  }","id":68240,"modified_method":"@Test\n  public void shouldLoadDefaultValues() {\n    DefaultDatabase db = new DefaultDatabase(new Settings());\n    db.initSettings();\n\n    Properties props = db.getProperties();\n    assertThat(props.getProperty(\"sonar.jdbc.username\")).isEqualTo(\"sonar\");\n    assertThat(props.getProperty(\"sonar.jdbc.password\")).isEqualTo(\"sonar\");\n    assertThat(props.getProperty(\"sonar.jdbc.url\")).isEqualTo(\"jdbc:h2:tcp://localhost/sonar\");\n    assertThat(props.getProperty(\"sonar.jdbc.driverClassName\")).isEqualTo(\"org.h2.Driver\");\n    assertThat(db.toString()).isEqualTo(\"Database[jdbc:h2:tcp://localhost/sonar]\");\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldStart() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.url\", \"jdbc:h2:mem:sonar\");\n    settings.setProperty(\"sonar.jdbc.driverClassName\", \"org.h2.Driver\");\n    settings.setProperty(\"sonar.jdbc.username\", \"sonar\");\n    settings.setProperty(\"sonar.jdbc.password\", \"sonar\");\n    settings.setProperty(\"sonar.jdbc.maxActive\", \"1\");\n\n    DefaultDatabase db = new DefaultDatabase(settings);\n    db.start();\n    db.stop();\n\n    assertThat(db.getDialect().getId(), Is.is(\"h2\"));\n    assertThat(((BasicDataSource) db.getDataSource()).getMaxActive(), Is.is(1));\n  }","id":68241,"modified_method":"@Test\n  public void shouldStart() {\n    Settings settings = new Settings();\n    settings.setProperty(\"sonar.jdbc.url\", \"jdbc:h2:mem:sonar\");\n    settings.setProperty(\"sonar.jdbc.driverClassName\", \"org.h2.Driver\");\n    settings.setProperty(\"sonar.jdbc.username\", \"sonar\");\n    settings.setProperty(\"sonar.jdbc.password\", \"sonar\");\n    settings.setProperty(\"sonar.jdbc.maxActive\", \"1\");\n\n    DefaultDatabase db = new DefaultDatabase(settings);\n    db.start();\n    db.stop();\n\n    assertThat(db.getDialect().getId()).isEqualTo(\"h2\");\n    assertThat(((BasicDataSource) db.getDataSource()).getMaxActive()).isEqualTo(1);\n  }","commit_id":"929fd9533eda332db4689cd8f28290b886cc28dc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void send(EmailMessage emailMessage) throws EmailException {\n    // Trick to correctly initilize javax.mail library\n    ClassLoader classloader = Thread.currentThread().getContextClassLoader();\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\n    try {\n      LOG.debug(\"Sending email: {}\", emailMessage);\n      String host = null;\n      try {\n        host = new URL(configuration.getServerBaseURL()).getHost();\n      } catch (MalformedURLException e) {\n        // ignore\n      }\n\n      SimpleEmail email = new SimpleEmail();\n      if (StringUtils.isNotBlank(host)) {\n        /*\n        * Set headers for proper threading: GMail will not group messages, even if they have same subject, but don't have \"In-Reply-To\" and\n        * \"References\" headers. TODO investigate threading in other clients like KMail, Thunderbird, Outlook\n        */\n        if (StringUtils.isNotEmpty(emailMessage.getMessageId())) {\n          String messageId = \"<\" + emailMessage.getMessageId() + \"@\" + host + \">\";\n          email.addHeader(IN_REPLY_TO_HEADER, messageId);\n          email.addHeader(REFERENCES_HEADER, messageId);\n        }\n        // Set headers for proper filtering\n        email.addHeader(LIST_ID_HEADER, \"Sonar <sonar.\" + host + \">\");\n        email.addHeader(LIST_ARCHIVE_HEADER, configuration.getServerBaseURL());\n      }\n      // Set general information\n      email.setCharset(\"UTF-8\");\n      String from = StringUtils.isBlank(emailMessage.getFrom()) ? FROM_NAME_DEFAULT : emailMessage.getFrom() + \" (Sonar)\";\n      email.setFrom(configuration.getFrom(), from);\n      email.addTo(emailMessage.getTo(), \" \");\n      String subject = StringUtils.defaultIfBlank(StringUtils.trimToEmpty(configuration.getPrefix()) + \" \", \"\")\n          + StringUtils.defaultString(emailMessage.getSubject(), SUBJECT_DEFAULT);\n      email.setSubject(subject);\n      email.setMsg(emailMessage.getMessage());\n      // Send\n      email.setHostName(configuration.getSmtpHost());\n      if (StringUtils.equalsIgnoreCase(configuration.getSecureConnection(), \"SSL\")) {\n        email.setSSL(true);\n        email.setSslSmtpPort(String.valueOf(configuration.getSmtpPort()));\n\n        // this port is not used except in EmailException message, that's why it's set with the same value than SSL port.\n        // It prevents from getting bad message.\n        email.setSmtpPort(configuration.getSmtpPort());\n      } else if (StringUtils.isBlank(configuration.getSecureConnection())) {\n        email.setSmtpPort(configuration.getSmtpPort());\n      } else {\n        throw new SonarException(\"Unknown type of SMTP secure connection: \" + configuration.getSecureConnection());\n      }\n      if (StringUtils.isNotBlank(configuration.getSmtpUsername()) || StringUtils.isNotBlank(configuration.getSmtpPassword())) {\n        email.setAuthentication(configuration.getSmtpUsername(), configuration.getSmtpPassword());\n      }\n      email.setSocketConnectionTimeout(SOCKET_TIMEOUT);\n      email.setSocketTimeout(SOCKET_TIMEOUT);\n      email.send();\n\n    } finally {\n      Thread.currentThread().setContextClassLoader(classloader);\n    }\n  }","id":68242,"modified_method":"private void send(EmailMessage emailMessage) throws EmailException {\n    // Trick to correctly initilize javax.mail library\n    ClassLoader classloader = Thread.currentThread().getContextClassLoader();\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\n    try {\n      LOG.debug(\"Sending email: {}\", emailMessage);\n      String host = null;\n      try {\n        host = new URL(configuration.getServerBaseURL()).getHost();\n      } catch (MalformedURLException e) {\n        // ignore\n      }\n\n      SimpleEmail email = new SimpleEmail();\n      if (StringUtils.isNotBlank(host)) {\n        /*\n        * Set headers for proper threading: GMail will not group messages, even if they have same subject, but don't have \"In-Reply-To\" and\n        * \"References\" headers. TODO investigate threading in other clients like KMail, Thunderbird, Outlook\n        */\n        if (StringUtils.isNotEmpty(emailMessage.getMessageId())) {\n          String messageId = \"<\" + emailMessage.getMessageId() + \"@\" + host + \">\";\n          email.addHeader(IN_REPLY_TO_HEADER, messageId);\n          email.addHeader(REFERENCES_HEADER, messageId);\n        }\n        // Set headers for proper filtering\n        email.addHeader(LIST_ID_HEADER, \"SonarQube <sonar.\" + host + \">\");\n        email.addHeader(LIST_ARCHIVE_HEADER, configuration.getServerBaseURL());\n      }\n      // Set general information\n      email.setCharset(\"UTF-8\");\n      String from = StringUtils.isBlank(emailMessage.getFrom()) ? FROM_NAME_DEFAULT : emailMessage.getFrom() + \" (SonarQube)\";\n      email.setFrom(configuration.getFrom(), from);\n      email.addTo(emailMessage.getTo(), \" \");\n      String subject = StringUtils.defaultIfBlank(StringUtils.trimToEmpty(configuration.getPrefix()) + \" \", \"\")\n          + StringUtils.defaultString(emailMessage.getSubject(), SUBJECT_DEFAULT);\n      email.setSubject(subject);\n      email.setMsg(emailMessage.getMessage());\n      // Send\n      email.setHostName(configuration.getSmtpHost());\n      if (StringUtils.equalsIgnoreCase(configuration.getSecureConnection(), \"SSL\")) {\n        email.setSSL(true);\n        email.setSslSmtpPort(String.valueOf(configuration.getSmtpPort()));\n\n        // this port is not used except in EmailException message, that's why it's set with the same value than SSL port.\n        // It prevents from getting bad message.\n        email.setSmtpPort(configuration.getSmtpPort());\n      } else if (StringUtils.isBlank(configuration.getSecureConnection())) {\n        email.setSmtpPort(configuration.getSmtpPort());\n      } else {\n        throw new SonarException(\"Unknown type of SMTP secure connection: \" + configuration.getSecureConnection());\n      }\n      if (StringUtils.isNotBlank(configuration.getSmtpUsername()) || StringUtils.isNotBlank(configuration.getSmtpPassword())) {\n        email.setAuthentication(configuration.getSmtpUsername(), configuration.getSmtpPassword());\n      }\n      email.setSocketConnectionTimeout(SOCKET_TIMEOUT);\n      email.setSocketTimeout(SOCKET_TIMEOUT);\n      email.send();\n\n    } finally {\n      Thread.currentThread().setContextClassLoader(classloader);\n    }\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void configure() {\n    when(configuration.getSmtpHost()).thenReturn(\"localhost\");\n    when(configuration.getSmtpPort()).thenReturn(port);\n    when(configuration.getFrom()).thenReturn(\"server@nowhere\");\n    when(configuration.getPrefix()).thenReturn(\"[SONAR]\");\n    when(configuration.getServerBaseURL()).thenReturn(\"http://nemo.sonarsource.org\");\n  }","id":68243,"modified_method":"private void configure() {\n    when(configuration.getSmtpHost()).thenReturn(\"localhost\");\n    when(configuration.getSmtpPort()).thenReturn(port);\n    when(configuration.getFrom()).thenReturn(\"server@nowhere\");\n    when(configuration.getPrefix()).thenReturn(\"[SONARQUBE]\");\n    when(configuration.getServerBaseURL()).thenReturn(\"http://nemo.sonarsource.org\");\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldThrowAnExceptionWhenUnableToSendTestEmail() throws Exception {\n    configure();\n    server.stop();\n\n    try {\n      channel.sendTestEmail(\"user@nowhere\", \"Test Message from Sonar\", \"This is a test message from Sonar.\");\n      fail();\n    } catch (EmailException e) {\n      // expected\n    }\n  }","id":68244,"modified_method":"@Test\n  public void shouldThrowAnExceptionWhenUnableToSendTestEmail() throws Exception {\n    configure();\n    server.stop();\n\n    try {\n      channel.sendTestEmail(\"user@nowhere\", \"Test Message from SonarQube\", \"This is a test message from SonarQube.\");\n      fail();\n    } catch (EmailException e) {\n      // expected\n    }\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSendTestEmail() throws Exception {\n    configure();\n    channel.sendTestEmail(\"user@nowhere\", \"Test Message from Sonar\", \"This is a test message from Sonar.\");\n\n    List<WiserMessage> messages = server.getMessages();\n    assertThat(messages.size(), is(1));\n\n    MimeMessage email = messages.get(0).getMimeMessage();\n    assertThat(email.getHeader(\"Content-Type\", null), is(\"text/plain; charset=UTF-8\"));\n    assertThat(email.getHeader(\"From\", \",\"), is(\"Sonar <server@nowhere>\"));\n    assertThat(email.getHeader(\"To\", null), is(\"<user@nowhere>\"));\n    assertThat(email.getHeader(\"Subject\", null), is(\"[SONAR] Test Message from Sonar\"));\n    assertThat((String) email.getContent(), startsWith(\"This is a test message from Sonar.\"));\n  }","id":68245,"modified_method":"@Test\n  public void shouldSendTestEmail() throws Exception {\n    configure();\n    channel.sendTestEmail(\"user@nowhere\", \"Test Message from SonarQube\", \"This is a test message from SonarQube.\");\n\n    List<WiserMessage> messages = server.getMessages();\n    assertThat(messages).hasSize(1);\n\n    MimeMessage email = messages.get(0).getMimeMessage();\n    assertThat(email.getHeader(\"Content-Type\", null)).isEqualTo(\"text/plain; charset=UTF-8\");\n    assertThat(email.getHeader(\"From\", \",\")).isEqualTo(\"SonarQube <server@nowhere>\");\n    assertThat(email.getHeader(\"To\", null)).isEqualTo(\"<user@nowhere>\");\n    assertThat(email.getHeader(\"Subject\", null)).isEqualTo(\"[SONARQUBE] Test Message from SonarQube\");\n    assertThat((String) email.getContent()).startsWith(\"This is a test message from SonarQube.\");\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSendNonThreadedEmail() throws Exception {\n    configure();\n    EmailMessage emailMessage = new EmailMessage()\n      .setTo(\"user@nowhere\")\n      .setSubject(\"Foo\")\n      .setMessage(\"Bar\");\n    channel.deliver(emailMessage);\n\n    List<WiserMessage> messages = server.getMessages();\n    assertThat(messages.size(), is(1));\n\n    MimeMessage email = messages.get(0).getMimeMessage();\n\n    assertThat(email.getHeader(\"Content-Type\", null), is(\"text/plain; charset=UTF-8\"));\n\n    assertThat(email.getHeader(\"In-Reply-To\", null), nullValue());\n    assertThat(email.getHeader(\"References\", null), nullValue());\n\n    assertThat(email.getHeader(\"List-ID\", null), is(\"Sonar <sonar.nemo.sonarsource.org>\"));\n    assertThat(email.getHeader(\"List-Archive\", null), is(\"http://nemo.sonarsource.org\"));\n\n    assertThat(email.getHeader(\"From\", null), is(\"Sonar <server@nowhere>\"));\n    assertThat(email.getHeader(\"To\", null), is(\"<user@nowhere>\"));\n    assertThat(email.getHeader(\"Subject\", null), is(\"[SONAR] Foo\"));\n    assertThat((String) email.getContent(), startsWith(\"Bar\"));\n  }","id":68246,"modified_method":"@Test\n  public void shouldSendNonThreadedEmail() throws Exception {\n    configure();\n    EmailMessage emailMessage = new EmailMessage()\n      .setTo(\"user@nowhere\")\n      .setSubject(\"Foo\")\n      .setMessage(\"Bar\");\n    channel.deliver(emailMessage);\n\n    List<WiserMessage> messages = server.getMessages();\n    assertThat(messages).hasSize(1);\n\n    MimeMessage email = messages.get(0).getMimeMessage();\n\n    assertThat(email.getHeader(\"Content-Type\", null)).isEqualTo(\"text/plain; charset=UTF-8\");\n\n    assertThat(email.getHeader(\"In-Reply-To\", null)).isNull();\n    assertThat(email.getHeader(\"References\", null)).isNull();\n\n    assertThat(email.getHeader(\"List-ID\", null)).isEqualTo(\"SonarQube <sonar.nemo.sonarsource.org>\");\n    assertThat(email.getHeader(\"List-Archive\", null)).isEqualTo(\"http://nemo.sonarsource.org\");\n\n    assertThat(email.getHeader(\"From\", null)).isEqualTo(\"SonarQube <server@nowhere>\");\n    assertThat(email.getHeader(\"To\", null)).isEqualTo(\"<user@nowhere>\");\n    assertThat(email.getHeader(\"Subject\", null)).isEqualTo(\"[SONARQUBE] Foo\");\n    assertThat((String) email.getContent()).startsWith(\"Bar\");\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSendThreadedEmail() throws Exception {\n    configure();\n    EmailMessage emailMessage = new EmailMessage()\n      .setMessageId(\"reviews/view/1\")\n      .setFrom(\"Full Username\")\n      .setTo(\"user@nowhere\")\n      .setSubject(\"Review #3\")\n      .setMessage(\"I'll take care of this violation.\");\n    channel.deliver(emailMessage);\n\n    List<WiserMessage> messages = server.getMessages();\n    assertThat(messages.size(), is(1));\n\n    MimeMessage email = messages.get(0).getMimeMessage();\n\n    assertThat(email.getHeader(\"Content-Type\", null), is(\"text/plain; charset=UTF-8\"));\n\n    assertThat(email.getHeader(\"In-Reply-To\", null), is(\"<reviews/view/1@nemo.sonarsource.org>\"));\n    assertThat(email.getHeader(\"References\", null), is(\"<reviews/view/1@nemo.sonarsource.org>\"));\n\n    assertThat(email.getHeader(\"List-ID\", null), is(\"Sonar <sonar.nemo.sonarsource.org>\"));\n    assertThat(email.getHeader(\"List-Archive\", null), is(\"http://nemo.sonarsource.org\"));\n\n    assertThat(email.getHeader(\"From\", \",\"), is(\"\\\"Full Username (Sonar)\\\" <server@nowhere>\"));\n    assertThat(email.getHeader(\"To\", null), is(\"<user@nowhere>\"));\n    assertThat(email.getHeader(\"Subject\", null), is(\"[SONAR] Review #3\"));\n    assertThat((String) email.getContent(), startsWith(\"I'll take care of this violation.\"));\n  }","id":68247,"modified_method":"@Test\n  public void shouldSendThreadedEmail() throws Exception {\n    configure();\n    EmailMessage emailMessage = new EmailMessage()\n      .setMessageId(\"reviews/view/1\")\n      .setFrom(\"Full Username\")\n      .setTo(\"user@nowhere\")\n      .setSubject(\"Review #3\")\n      .setMessage(\"I'll take care of this violation.\");\n    channel.deliver(emailMessage);\n\n    List<WiserMessage> messages = server.getMessages();\n    assertThat(messages).hasSize(1);\n\n    MimeMessage email = messages.get(0).getMimeMessage();\n\n    assertThat(email.getHeader(\"Content-Type\", null)).isEqualTo(\"text/plain; charset=UTF-8\");\n\n    assertThat(email.getHeader(\"In-Reply-To\", null)).isEqualTo(\"<reviews/view/1@nemo.sonarsource.org>\");\n    assertThat(email.getHeader(\"References\", null)).isEqualTo(\"<reviews/view/1@nemo.sonarsource.org>\");\n\n    assertThat(email.getHeader(\"List-ID\", null)).isEqualTo(\"SonarQube <sonar.nemo.sonarsource.org>\");\n    assertThat(email.getHeader(\"List-Archive\", null)).isEqualTo(\"http://nemo.sonarsource.org\");\n\n    assertThat(email.getHeader(\"From\", \",\")).isEqualTo(\"\\\"Full Username (SonarQube)\\\" <server@nowhere>\");\n    assertThat(email.getHeader(\"To\", null)).isEqualTo(\"<user@nowhere>\");\n    assertThat(email.getHeader(\"Subject\", null)).isEqualTo(\"[SONARQUBE] Review #3\");\n    assertThat((String) email.getContent()).startsWith(\"I'll take care of this violation.\");\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotSendEmailWhenHostnameNotConfigured() throws Exception {\n    EmailMessage emailMessage = new EmailMessage()\n      .setTo(\"user@nowhere\")\n      .setSubject(\"Foo\")\n      .setMessage(\"Bar\");\n    channel.deliver(emailMessage);\n    assertThat(server.getMessages().size(), is(0));\n  }","id":68248,"modified_method":"@Test\n  public void shouldNotSendEmailWhenHostnameNotConfigured() throws Exception {\n    EmailMessage emailMessage = new EmailMessage()\n      .setTo(\"user@nowhere\")\n      .setSubject(\"Foo\")\n      .setMessage(\"Bar\");\n    channel.deliver(emailMessage);\n    assertThat(server.getMessages()).isEmpty();\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_return_default_values() {\n    assertThat(emailSettings.getSmtpHost()).isEqualTo(\"\");\n    assertThat(emailSettings.getSmtpPort()).isEqualTo(25);\n    assertThat(emailSettings.getSmtpUsername()).isEmpty();\n    assertThat(emailSettings.getSmtpPassword()).isEmpty();\n    assertThat(emailSettings.getSecureConnection()).isEmpty();\n    assertThat(emailSettings.getFrom()).isEqualTo(\"noreply@nowhere\");\n    assertThat(emailSettings.getPrefix()).isEqualTo(\"[SONAR]\");\n    assertThat(emailSettings.getServerBaseURL()).isEqualTo(CoreProperties.SERVER_BASE_URL_DEFAULT_VALUE);\n  }","id":68249,"modified_method":"@Test\n  public void should_return_default_values() {\n    assertThat(emailSettings.getSmtpHost()).isEqualTo(\"\");\n    assertThat(emailSettings.getSmtpPort()).isEqualTo(25);\n    assertThat(emailSettings.getSmtpUsername()).isEmpty();\n    assertThat(emailSettings.getSmtpPassword()).isEmpty();\n    assertThat(emailSettings.getSecureConnection()).isEmpty();\n    assertThat(emailSettings.getFrom()).isEqualTo(\"noreply@nowhere\");\n    assertThat(emailSettings.getPrefix()).isEqualTo(\"[SONARQUBE]\");\n    assertThat(emailSettings.getServerBaseURL()).isEqualTo(CoreProperties.SERVER_BASE_URL_DEFAULT_VALUE);\n  }","commit_id":"aad61ea0cf5966908e53744f0d964db2ec2aa7c9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * @since 2.6\n   */\n  public List<InputFile> testFiles(String... langs) {\n    return getFiles(getTestDirs(), getInitialTestFiles(), project.getTestExclusionPatterns(), langs);\n  }","id":68250,"modified_method":"/**\n   * @since 2.6\n   */\n  public List<InputFile> testFiles(String... langs) {\n    return getFiles(getTestDirs(), getInitialTestFiles(), project.getTestExclusionPatterns(), project.getTestInclusionPatterns(), true, langs);\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"ExclusionFilter(File sourceDir, WildcardPattern[] patterns) {\n      this.sourceDir = sourceDir;\n      this.patterns = patterns;\n    }","id":68251,"modified_method":"ExclusionFilter(File sourceDir, WildcardPattern[] exclusions, WildcardPattern[] inclusions) {\n      this.sourceDir = sourceDir;\n      this.exclusions = exclusions;\n      this.inclusions = inclusions;\n    }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * @since 2.6\n   */\n  public List<InputFile> mainFiles(String... langs) {\n    return getFiles(getSourceDirs(), getInitialSourceFiles(), project.getExclusionPatterns(), langs);\n  }","id":68252,"modified_method":"/**\n   * @since 2.6\n   */\n  public List<InputFile> mainFiles(String... langs) {\n    return getFiles(getSourceDirs(), getInitialSourceFiles(), project.getExclusionPatterns(), project.getInclusionPatterns(), true, langs);\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"List<InputFile> getFiles(List<File> directories, List<File> initialFiles, String[] patterns, String... langs) {\n    List<InputFile> result = Lists.newArrayList();\n    if (directories == null) {\n      return result;\n    }\n\n    IOFileFilter suffixFilter = getFileSuffixFilter(langs);\n    WildcardPattern[] exclusionPatterns = WildcardPattern.create(patterns);\n\n    IOFileFilter initialFilesFilter = TrueFileFilter.INSTANCE;\n    if (initialFiles != null && !initialFiles.isEmpty()) {\n      initialFilesFilter = new FileSelectionFilter(initialFiles);\n    }\n\n    for (File dir : directories) {\n      if (dir.exists()) {\n        IOFileFilter exclusionFilter = new ExclusionFilter(dir, exclusionPatterns);\n        IOFileFilter visibleFileFilter = HiddenFileFilter.VISIBLE;\n        List<IOFileFilter> fileFilters = Lists.newArrayList(visibleFileFilter, suffixFilter, exclusionFilter, initialFilesFilter);\n        fileFilters.addAll(this.filters);\n\n        IOFileFilter dotPrefixDirFilter = FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter(\".\"));\n        List<File> files = (List<File>) FileUtils.listFiles(dir, new AndFileFilter(fileFilters), FileFilterUtils.and(HiddenFileFilter.VISIBLE, dotPrefixDirFilter));\n        for (File file : files) {\n          String relativePath = DefaultProjectFileSystem.getRelativePath(file, dir);\n          result.add(InputFileUtils.create(dir, relativePath));\n        }\n      }\n    }\n    return result;\n  }","id":68253,"modified_method":"List<InputFile> getFiles(List<File> directories, List<File> initialFiles, String[] exclusions, String[] inclusions, boolean toto, String... langs) {\n    List<InputFile> result = Lists.newArrayList();\n    if (directories == null) {\n      return result;\n    }\n\n    IOFileFilter suffixFilter = getFileSuffixFilter(langs);\n    WildcardPattern[] exclusionPatterns = WildcardPattern.create(exclusions);\n    WildcardPattern[] inclusionPatterns = WildcardPattern.create(inclusions);\n\n    IOFileFilter initialFilesFilter = TrueFileFilter.INSTANCE;\n    if (initialFiles != null && !initialFiles.isEmpty()) {\n      initialFilesFilter = new FileSelectionFilter(initialFiles);\n    }\n\n    for (File dir : directories) {\n      if (dir.exists()) {\n        IOFileFilter exclusionFilter = new ExclusionFilter(dir, exclusionPatterns, inclusionPatterns);\n        IOFileFilter visibleFileFilter = HiddenFileFilter.VISIBLE;\n        List<IOFileFilter> fileFilters = Lists.newArrayList(visibleFileFilter, suffixFilter, exclusionFilter, initialFilesFilter);\n        fileFilters.addAll(this.filters);\n\n        IOFileFilter dotPrefixDirFilter = FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter(\".\"));\n        List<File> files = (List<File>) FileUtils.listFiles(dir, new AndFileFilter(fileFilters), FileFilterUtils.and(HiddenFileFilter.VISIBLE, dotPrefixDirFilter));\n        for (File file : files) {\n          String relativePath = DefaultProjectFileSystem.getRelativePath(file, dir);\n          result.add(InputFileUtils.create(dir, relativePath));\n        }\n      }\n    }\n    return result;\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public boolean accept(File file) {\n      String relativePath = getRelativePath(file, sourceDir);\n      if (relativePath == null) {\n        return false;\n      }\n      for (WildcardPattern pattern : patterns) {\n        if (pattern.match(relativePath)) {\n          return false;\n        }\n      }\n      return true;\n    }","id":68254,"modified_method":"public boolean accept(File file) {\n      String relativePath = getRelativePath(file, sourceDir);\n      if (relativePath == null) {\n        return false;\n      }\n      for (WildcardPattern exclusion : exclusions) {\n        if (exclusion.match(relativePath)) {\n          return false;\n        }\n      }\n      for (WildcardPattern inclusion : inclusions) {\n        if (!inclusion.match(relativePath)) {\n          return false;\n        }\n      }\n      return true;\n    }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void applyExclusionPatternsToSourceFiles() {\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/B*.java\");\n    project.setConfiguration(conf);\n\n    final DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n\n    assertThat(fs.getJavaSourceFiles().size(), is(1));\n    assertThat(fs.getJavaSourceFiles(), hasItem(named(\"Whizz.java\")));\n  }","id":68255,"modified_method":"@Test\n  public void applyExclusionPatternsToSourceFiles() {\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/B*.java\");\n    project.setConfiguration(conf);\n\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getJavaSourceFiles()).onProperty(\"name\").containsOnly(\"Whizz.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldUseExtendedFilters() {\n    DefaultProjectFileSystem fsWithoutFilter = newDefaultProjectFileSystem(project);\n    assertThat(fsWithoutFilter.getSourceFiles().size(), is(2));\n    assertThat(fsWithoutFilter.getSourceFiles(), hasItem(named(\"Bar.java\")));\n\n    FileFilter filter = new FileFilter() {\n      public boolean accept(File file) {\n        return !StringUtils.equals(file.getName(), \"Bar.java\");\n      }\n    };\n    DefaultProjectFileSystem fsWithFilter = new DefaultProjectFileSystem(project, new Languages(Java.INSTANCE), filter);\n    assertThat(fsWithFilter.getSourceFiles().size(), is(1));\n    assertThat(fsWithFilter.getSourceFiles(), not(hasItem(named(\"Bar.java\"))));\n  }","id":68256,"modified_method":"@Test\n  public void shouldUseExtendedFilters() {\n    ProjectFileSystem fsWithoutFilter = project.getFileSystem();\n    assertThat(fsWithoutFilter.getSourceFiles()).hasSize(2);\n    assertThat(fsWithoutFilter.getSourceFiles()).onProperty(\"name\").contains(\"Bar.java\");\n\n    FileFilter filter = new FileFilter() {\n      public boolean accept(File file) {\n        return !StringUtils.equals(file.getName(), \"Bar.java\");\n      }\n    };\n    DefaultProjectFileSystem fsWithFilter = new DefaultProjectFileSystem(project, new Languages(Java.INSTANCE), filter);\n    assertThat(fsWithFilter.getSourceFiles()).hasSize(1);\n    assertThat(fsWithFilter.getSourceFiles()).onProperty(\"name\").excludes(\"Bar.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-3096\n   */\n  @Test\n  public void shouldExcludeDirectoriesStartingWithDot() {\n    List<File> dirs = Arrays.asList(new File(\"test-resources/org/sonar/api/resources/DefaultProjectFileSystemTest/shouldExcludeDirectoriesStartingWithDot/src\"));\n\n    List<InputFile> files = new DefaultProjectFileSystem(new Project(\"foo\"), null).getFiles(dirs, Collections.<File>emptyList(), new String[0]);\n    assertThat(files.size(), is(1));\n    assertThat(files.get(0).getRelativePath(), is(\"org/sonar/Included.java\"));\n  }","id":68257,"modified_method":"/**\n   * SONAR-3096\n   */\n  @Test\n  public void shouldExcludeDirectoriesStartingWithDot() {\n    List<File> dirs = Arrays.asList(new File(\"test-resources/org/sonar/api/resources/DefaultProjectFileSystemTest/shouldExcludeDirectoriesStartingWithDot/src\"));\n\n    List<InputFile> files = new DefaultProjectFileSystem(new Project(\"foo\"), null).getFiles(dirs, Collections.<File> emptyList(), new String[0], new String[0], true);\n    assertThat(files).hasSize(1);\n    assertThat(files.get(0).getRelativePath()).isEqualTo(\"org/sonar/Included.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getJapaneseCharSet() {\n    project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"japanese-project/pom.xml\");\n    DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n    assertThat(fs.getSourceCharset().name(), is(\"Shift_JIS\"));\n  }","id":68258,"modified_method":"@Test\n  public void getJapaneseCharSet() {\n    project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"japanese-project/pom.xml\");\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getSourceCharset().name()).isEqualTo(\"Shift_JIS\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getTestFiles() {\n    final DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n\n    assertThat(fs.getTestFiles(Java.INSTANCE).size(), is(1));\n    assertThat(fs.getTestFiles(Java.INSTANCE), hasItem(named(\"BarTest.java\")));\n  }","id":68259,"modified_method":"@Test\n  public void getTestFiles() {\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getTestFiles(Java.INSTANCE)).onProperty(\"name\").containsOnly(\"BarTest.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Example of hidden files/directories : .DSStore, .svn, .git\n   */\n  @Test\n  public void hiddenFilesAreIgnored() {\n    if (!SystemUtils.IS_OS_WINDOWS) {\n      // hidden files/directories can not be stored in svn windows\n      // On Mac/Linux it's easy, just prefix the filename by '.'\n      project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"hidden-files/pom.xml\");\n      ProjectFileSystem fs = newDefaultProjectFileSystem(project);\n      List<File> files = fs.getSourceFiles();\n      assertThat(files.size(), is(1));\n      assertThat(files.get(0).getName(), is(\"foo.sql\"));\n    }\n  }","id":68260,"modified_method":"/**\n   * Example of hidden files/directories : .DSStore, .svn, .git\n   */\n  @Test\n  public void hiddenFilesAreIgnored() {\n    if (!SystemUtils.IS_OS_WINDOWS) {\n      // hidden files/directories can not be stored in svn windows\n      // On Mac/Linux it's easy, just prefix the filename by '.'\n      project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"hidden-files/pom.xml\");\n      ProjectFileSystem fs = project.getFileSystem();\n      List<File> files = fs.getSourceFiles();\n      assertThat(files).hasSize(1);\n      assertThat(files.get(0).getName()).isEqualTo(\"foo.sql\");\n    }\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void doNotApplyExclusionPatternsToTestFiles() {\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/B*.java\");\n    project.setConfiguration(conf);\n\n    final DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n\n    assertThat(fs.getTestFiles(Java.INSTANCE).size(), is(1));\n    assertThat(fs.getTestFiles(Java.INSTANCE), hasItem(named(\"BarTest.java\")));\n  }","id":68261,"modified_method":"@Test\n  public void doNotApplyExclusionPatternsToTestFiles() {\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/B*.java\");\n    project.setConfiguration(conf);\n\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getTestFiles(Java.INSTANCE)).onProperty(\"name\").containsOnly(\"BarTest.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2280\n   */\n  @Test\n  public void resolvePathShouldReturnCanonicalFile() {\n    MavenProject pom = mock(MavenProject.class);\n    when(pom.getBasedir()).thenReturn(new File(\"/project\"));\n    Project project = new Project(\"foo\").setPom(pom);\n    DefaultProjectFileSystem fs = new DefaultProjectFileSystem(project, null);\n\n    assertThat(fs.resolvePath(\".\").getAbsolutePath(), endsWith(\"project\"));\n    assertThat(fs.resolvePath(\"../project\").getAbsolutePath(), endsWith(\"project\"));\n  }","id":68262,"modified_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2280\n   */\n  @Test\n  public void resolvePathShouldReturnCanonicalFile() {\n    MavenProject pom = mock(MavenProject.class);\n    when(pom.getBasedir()).thenReturn(new File(\"/project\"));\n    Project project = new Project(\"foo\").setPom(pom);\n    ProjectFileSystem fs = new DefaultProjectFileSystem(project, null);\n\n    assertThat(fs.resolvePath(\".\").getAbsolutePath()).endsWith(\"project\");\n    assertThat(fs.resolvePath(\"../project\").getAbsolutePath()).endsWith(\"project\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSelectiveFileFilter() {\n    DefaultProjectFileSystem.FileSelectionFilter filter = new DefaultProjectFileSystem.FileSelectionFilter(\n      Arrays.asList(new File(\"foo/Bar.java\"), new File(\"hello/Bar.java\"), new File(\"hello/World.java\")));\n    assertThat(filter.accept(new File(\"foo/Bar.java\")), Matchers.is(true));\n    assertThat(filter.accept(new File(\"hello/Bar.java\")), Matchers.is(true));\n    assertThat(filter.accept(new File(\"hello/World.java\")), Matchers.is(true));\n\n    assertThat(filter.accept(new File(\"foo/Unknown.java\")), Matchers.is(false));\n    assertThat(filter.accept(new File(\"foo/bar/Bar.java\")), Matchers.is(false));\n    assertThat(filter.accept(new File(\"foo/World.java\")), Matchers.is(false));\n  }","id":68263,"modified_method":"@Test\n  public void testSelectiveFileFilter() {\n    DefaultProjectFileSystem.FileSelectionFilter filter = new DefaultProjectFileSystem.FileSelectionFilter(\n        Arrays.asList(new File(\"foo/Bar.java\"), new File(\"hello/Bar.java\"), new File(\"hello/World.java\")));\n    assertThat(filter.accept(new File(\"foo/Bar.java\"))).isTrue();\n    assertThat(filter.accept(new File(\"hello/Bar.java\"))).isTrue();\n    assertThat(filter.accept(new File(\"hello/World.java\"))).isTrue();\n\n    assertThat(filter.accept(new File(\"foo/Unknown.java\"))).isFalse();\n    assertThat(filter.accept(new File(\"foo/bar/Bar.java\"))).isFalse();\n    assertThat(filter.accept(new File(\"foo/World.java\"))).isFalse();\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-1449\n   */\n  @Test\n  public void exclusionPatternOnAjFiles() {\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/*.aj\");\n    project.setConfiguration(conf);\n\n    final DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n\n    assertThat(fs.getSourceFiles(Java.INSTANCE).size(), is(2));\n    assertThat(fs.getSourceFiles(Java.INSTANCE), hasItem(named(\"Whizz.java\")));\n    assertThat(fs.getSourceFiles(Java.INSTANCE), hasItem(named(\"Bar.java\")));\n  }","id":68264,"modified_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-1449\n   */\n  @Test\n  public void exclusionPatternOnAjFiles() {\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/*.aj\");\n    project.setConfiguration(conf);\n\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getSourceFiles(Java.INSTANCE)).onProperty(\"name\").containsOnly(\"Whizz.java\", \"Bar.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void hasJavaSourceFiles() {\n    final DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n    assertThat(fs.hasJavaSourceFiles(), is(true));\n\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/*.java\");\n    project.setConfiguration(conf);\n    assertThat(fs.hasJavaSourceFiles(), is(false));\n  }","id":68265,"modified_method":"@Test\n  public void hasJavaSourceFiles() {\n    ProjectFileSystem fs = project.getFileSystem();\n    assertThat(fs.hasJavaSourceFiles()).isTrue();\n\n    PropertiesConfiguration conf = new PropertiesConfiguration();\n    conf.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/*.java\");\n    project.setConfiguration(conf);\n\n    assertThat(fs.hasJavaSourceFiles()).isFalse();\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void getJavaSourceFiles() {\n    final DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n\n    assertThat(fs.getJavaSourceFiles().size(), is(2));\n    assertThat(fs.getJavaSourceFiles(), hasItem(named(\"Bar.java\")));\n    assertThat(fs.getJavaSourceFiles(), hasItem(named(\"Whizz.java\")));\n  }","id":68266,"modified_method":"@Test\n  public void getJavaSourceFiles() {\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getJavaSourceFiles()).onProperty(\"name\").containsOnly(\"Whizz.java\", \"Bar.java\");\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void languageWithNoSpecificFileSuffixes() {\n    class NoSuffixLanguage implements Language {\n      public String getKey() {\n        return \"no-suffix\";\n      }\n\n      public String getName() {\n        return \"no-suffix\";\n      }\n\n      public String[] getFileSuffixes() {\n        return new String[0];\n      }\n    }\n\n    project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"sample-with-different-suffixes/pom.xml\");\n    ProjectFileSystem fs = newDefaultProjectFileSystem(project);\n    List<File> files = fs.getSourceFiles(new NoSuffixLanguage());\n    assertThat(files.size(), is(2));\n  }","id":68267,"modified_method":"@Test\n  public void languageWithNoSpecificFileSuffixes() {\n    class NoSuffixLanguage implements Language {\n      public String getKey() {\n        return \"no-suffix\";\n      }\n\n      public String getName() {\n        return \"no-suffix\";\n      }\n\n      public String[] getFileSuffixes() {\n        return new String[0];\n      }\n    }\n\n    project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"sample-with-different-suffixes/pom.xml\");\n    ProjectFileSystem fs = project.getFileSystem();\n    List<File> files = fs.getSourceFiles(new NoSuffixLanguage());\n\n    assertThat(files).hasSize(2);\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2266\n   */\n  @Test\n  public void shouldReturnOnlyExistingSourceAndTestDirectories() {\n    // in this example : \"src/main/java\" is a file, \"src/test/java\" doesn't exists\n    project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"nonexistent-dirs/pom.xml\");\n    DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n    assertThat(fs.getSourceDirs().size(), is(0));\n    assertThat(fs.getTestDirs().size(), is(0));\n  }","id":68268,"modified_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2266\n   */\n  @Test\n  public void shouldReturnOnlyExistingSourceAndTestDirectories() {\n    // in this example : \"src/main/java\" is a file, \"src/test/java\" doesn't exist\n    project = MavenTestUtils.loadProjectFromPom(DefaultProjectFileSystemTest.class, \"nonexistent-dirs/pom.xml\");\n\n    ProjectFileSystem fs = project.getFileSystem();\n\n    assertThat(fs.getSourceDirs()).isEmpty();\n    assertThat(fs.getTestDirs()).isEmpty();\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void createSonarWorkingDirectory() {\n    DefaultProjectFileSystem fs = newDefaultProjectFileSystem(project);\n    java.io.File dir = fs.getSonarWorkingDirectory();\n    assertThat(dir.exists(), is(true));\n    assertThat(dir.listFiles().length, is(0));\n  }","id":68269,"modified_method":"@Test\n  public void createSonarWorkingDirectory() {\n    ProjectFileSystem fs = project.getFileSystem();\n    java.io.File dir = fs.getSonarWorkingDirectory();\n\n    assertThat(dir).exists();\n    assertThat(dir.listFiles()).isEmpty();\n  }","commit_id":"0ca3e750948ff947c6ab5918cb7f36c9ad0095bb","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DefaultIssueFilter update(DefaultIssueFilter issueFilter, UserSession userSession) {\n    String login = getLoggedLogin(userSession);\n    IssueFilterDto existingFilterDto = findIssueFilterDto(issueFilter.id(), login);\n    verifyCurrentUserCanModifyFilter(existingFilterDto.toIssueFilter(), login);\n    if (!existingFilterDto.getUserLogin().equals(issueFilter.user())) {\n      verifyCurrentUserCanChangeFilterOwnership(login);\n    }\n    validateFilter(issueFilter);\n    deleteOtherFavoriteFiltersIfFilterBecomeUnshared(existingFilterDto, issueFilter);\n    filterDao.update(IssueFilterDto.toIssueFilter(issueFilter));\n    return issueFilter;\n  }","id":68270,"modified_method":"public DefaultIssueFilter update(DefaultIssueFilter issueFilter, UserSession userSession) {\n    String login = getLoggedLogin(userSession);\n    IssueFilterDto existingFilterDto = findIssueFilterDto(issueFilter.id(), login);\n    verifyCurrentUserCanModifyFilter(existingFilterDto.toIssueFilter(), login);\n    verifyCurrentUserCanChangeFilterSharingFilter(issueFilter, existingFilterDto, login);\n    if (!existingFilterDto.getUserLogin().equals(issueFilter.user())) {\n      verifyCurrentUserCanChangeFilterOwnership(login);\n    }\n    validateFilter(issueFilter);\n    deleteOtherFavoriteFiltersIfFilterBecomeUnshared(existingFilterDto, issueFilter);\n    filterDao.update(IssueFilterDto.toIssueFilter(issueFilter));\n    return issueFilter;\n  }","commit_id":"2a6d917d63bdb5cc05e8b97549fb948fc5277d43","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update_other_shared_filter_if_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(Permission.SYSTEM_ADMIN.key()));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"arthur\").setShared(true));\n\n    DefaultIssueFilter result = service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n    assertThat(result.name()).isEqualTo(\"My New Filter\");\n    assertThat(result.shared()).isFalse();\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","id":68271,"modified_method":"@Test\n  public void should_update_other_shared_filter_if_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(Permission.SYSTEM_ADMIN.key()));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setDescription(\"Old description\").setUserLogin(\"arthur\").setShared(true));\n\n    DefaultIssueFilter result = service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\").setDescription(\"New description\").setShared(true), userSession);\n    assertThat(result.name()).isEqualTo(\"My New Filter\");\n    assertThat(result.description()).isEqualTo(\"New description\");\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","commit_id":"2a6d917d63bdb5cc05e8b97549fb948fc5277d43","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * If input is null, then an empty map is returned.\n   */\n  public static <K, V> Map<K, V> parse(@Nullable String input, Converter<K> keyConverter, Converter<V> valueConverter) {\n    Map<K, V> map = Maps.newLinkedHashMap();\n    if (input != null) {\n      FieldParser reader = new FieldParser(input);\n      boolean end = false;\n      while (!end) {\n        String key = reader.nextKey();\n        if (key == null) {\n          end = true;\n        } else {\n          String val = StringUtils.defaultString(reader.nextVal(), \"\");\n          map.put(keyConverter.parse(key), valueConverter.parse(val));\n        }\n      }\n    }\n    return map;\n  }","id":68272,"modified_method":"/**\n   * If input is null, then an empty map is returned.\n   */\n  public static <K, V> Map<K, V> parse(@Nullable String input, Converter<K> keyConverter, Converter<V> valueConverter) {\n    Map<K, V> map = new LinkedHashMap<>();\n    if (input != null) {\n      FieldParser reader = new FieldParser(input);\n      boolean end = false;\n      while (!end) {\n        String key = reader.nextKey();\n        if (key == null) {\n          end = true;\n        } else {\n          String val = StringUtils.defaultString(reader.nextVal(), \"\");\n          map.put(keyConverter.parse(key), valueConverter.parse(val));\n        }\n      }\n    }\n    return map;\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSetEmptyFieldWhenNullValue() {\n    Map<Integer, Double> map = Maps.newLinkedHashMap();\n    map.put(13, null);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s).isEqualTo(\"13=;5=5.75\");\n  }","id":68273,"modified_method":"@Test\n  public void shouldSetEmptyFieldWhenNullValue() {\n    Map<Integer, Double> map = new LinkedHashMap<>();\n    map.put(13, null);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s).isEqualTo(\"13=;5=5.75\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void keep_order_of_linked_map() {\n    Map<String, String> map = Maps.newLinkedHashMap();\n    map.put(\"lucky\", \"luke\");\n    map.put(\"aste\", \"rix\");\n    String s = KeyValueFormat.format(map);\n    assertThat(s).isEqualTo(\"lucky=luke;aste=rix\");\n  }","id":68274,"modified_method":"@Test\n  public void keep_order_of_linked_map() {\n    Map<String, String> map = new LinkedHashMap<>();\n    map.put(\"lucky\", \"luke\");\n    map.put(\"aste\", \"rix\");\n    String s = KeyValueFormat.format(map);\n    assertThat(s).isEqualTo(\"lucky=luke;aste=rix\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void escape_strings() {\n    Map<String, String> input = Maps.newLinkedHashMap();\n    input.put(\"foo\", \"a=b=c\");\n    input.put(\"bar\", \"a;b;c\");\n    input.put(\"baz\", \"double\\\"quote\");\n    String csv = KeyValueFormat.format(input);\n    assertThat(csv).isEqualTo(\"foo=\\\"a=b=c\\\";bar=\\\"a;b;c\\\";baz=double\\\"quote\");\n\n    Map<String, String> output = KeyValueFormat.parse(csv);\n    assertThat(output.get(\"foo\")).isEqualTo(\"a=b=c\");\n    assertThat(output.get(\"bar\")).isEqualTo(\"a;b;c\");\n    assertThat(output.get(\"baz\")).isEqualTo(\"double\\\"quote\");\n  }","id":68275,"modified_method":"@Test\n  public void escape_strings() {\n    Map<String, String> input = new LinkedHashMap<>();\n    input.put(\"foo\", \"a=b=c\");\n    input.put(\"bar\", \"a;b;c\");\n    input.put(\"baz\", \"double\\\"quote\");\n    String csv = KeyValueFormat.format(input);\n    assertThat(csv).isEqualTo(\"foo=\\\"a=b=c\\\";bar=\\\"a;b;c\\\";baz=double\\\"quote\");\n\n    Map<String, String> output = KeyValueFormat.parse(csv);\n    assertThat(output.get(\"foo\")).isEqualTo(\"a=b=c\");\n    assertThat(output.get(\"bar\")).isEqualTo(\"a;b;c\");\n    assertThat(output.get(\"baz\")).isEqualTo(\"double\\\"quote\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatDate() throws ParseException {\n    Map<Integer, Date> map = Maps.newLinkedHashMap();\n    map.put(4, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2010-12-25\"));\n    map.put(20, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2009-05-28\"));\n    map.put(12, null);\n    String s = KeyValueFormat.formatIntDate(map);\n    assertThat(s).isEqualTo(\"4=2010-12-25;20=2009-05-28;12=\");\n  }","id":68276,"modified_method":"@Test\n  public void shouldFormatDate() throws ParseException {\n    Map<Integer, Date> map = new LinkedHashMap<>();\n    map.put(4, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2010-12-25\"));\n    map.put(20, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2009-05-28\"));\n    map.put(12, null);\n    String s = KeyValueFormat.formatIntDate(map);\n    assertThat(s).isEqualTo(\"4=2010-12-25;20=2009-05-28;12=\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatMapOfIntegerString() {\n    Map<Integer, String> map = Maps.newLinkedHashMap();\n    map.put(3, \"three\");\n    map.put(5, \"five\");\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s).isEqualTo(\"3=three;5=five\");\n  }","id":68277,"modified_method":"@Test\n  public void shouldFormatMapOfIntegerString() {\n    Map<Integer, String> map = new LinkedHashMap<>();\n    map.put(3, \"three\");\n    map.put(5, \"five\");\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s).isEqualTo(\"3=three;5=five\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void formatBagWithVariationHack() {\n    TreeBag bag = new TreeBag();\n    bag.add(\"hello\", 1);\n    bag.add(\"key\", 3);\n    Assert.assertThat(KeyValueFormat.format(bag, -1), is(\"hello=0;key=2\"));\n  }","id":68278,"modified_method":"@Test\n  public void formatBagWithVariationHack() {\n    TreeBag bag = new TreeBag();\n    bag.add(\"hello\", 1);\n    bag.add(\"key\", 3);\n    assertThat(KeyValueFormat.format(bag, -1)).isEqualTo(\"hello=0;key=2\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void formatBag() {\n    TreeBag bag = new TreeBag();\n    bag.add(\"hello\", 1);\n    bag.add(\"key\", 3);\n    Assert.assertThat(KeyValueFormat.format(bag, 0), is(\"hello=1;key=3\"));\n  }","id":68279,"modified_method":"@Test\n  public void formatBag() {\n    TreeBag bag = new TreeBag();\n    bag.add(\"hello\", 1);\n    bag.add(\"key\", 3);\n    assertThat(KeyValueFormat.format(bag, 0)).isEqualTo(\"hello=1;key=3\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatBlank() {\n    Map<Integer, String> map = Maps.newTreeMap();\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s).isEqualTo(\"\");\n  }","id":68280,"modified_method":"@Test\n  public void shouldFormatBlank() {\n    Map<Integer, String> map = new TreeMap<>();\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s).isEqualTo(\"\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatMapOfIntDouble() {\n    Map<Integer, Double> map = Maps.newLinkedHashMap();\n    map.put(13, 2.0);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s).isEqualTo(\"13=2.0;5=5.75\");\n  }","id":68281,"modified_method":"@Test\n  public void shouldFormatMapOfIntDouble() {\n    Map<Integer, Double> map = new LinkedHashMap<>();\n    map.put(13, 2.0);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s).isEqualTo(\"13=2.0;5=5.75\");\n  }","commit_id":"b68a5b1d5d3abd578f4efccbcc57620247a83f2f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_duplication_blocks() {\n    BatchReportWriter writer = new BatchReportWriter(dir);\n    writer.writeMetadata(BatchReport.Metadata.newBuilder()\n      .setRootComponentRef(1).build());\n    writer.writeComponent(BatchReport.Component.newBuilder()\n      .setRef(1).build());\n\n    BatchReport.CpdTextBlock duplicationBlock = BatchReport.CpdTextBlock.newBuilder()\n      .addAllHash(asList(1, 2, 3, 5, 7))\n      .setStartLine(1)\n      .setEndLine(2)\n      .setStartTokenIndex(10)\n      .setEndTokenIndex(15)\n      .build();\n    writer.writeCpdTextBlocks(1, singletonList(duplicationBlock));\n\n    BatchReportReader sut = new BatchReportReader(dir);\n    assertThat(sut.readCpdTextBlocks(1)).hasSize(1);\n  }","id":68282,"modified_method":"@Test\n  public void read_duplication_blocks() {\n    BatchReportWriter writer = new BatchReportWriter(dir);\n    writer.writeMetadata(BatchReport.Metadata.newBuilder()\n      .setRootComponentRef(1).build());\n    writer.writeComponent(BatchReport.Component.newBuilder()\n      .setRef(1).build());\n\n    BatchReport.CpdTextBlock duplicationBlock = BatchReport.CpdTextBlock.newBuilder()\n      .setHash(\"abcdefghijklmnop\")\n      .setStartLine(1)\n      .setEndLine(2)\n      .setStartTokenIndex(10)\n      .setEndTokenIndex(15)\n      .build();\n    writer.writeCpdTextBlocks(1, singletonList(duplicationBlock));\n\n    BatchReportReader sut = new BatchReportReader(dir);\n    assertThat(sut.readCpdTextBlocks(1)).hasSize(1);\n  }","commit_id":"c20343073c1c3ba5356db69a9c1a040cab339fa1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void write_duplication_blocks() {\n    assertThat(underTest.hasComponentData(FileStructure.Domain.CPD_TEXT_BLOCKS, 1)).isFalse();\n\n    BatchReport.CpdTextBlock duplicationBlock = BatchReport.CpdTextBlock.newBuilder()\n      .addAllHash(asList(1, 2, 3, 5, 7))\n      .setStartLine(1)\n      .setEndLine(2)\n      .setStartTokenIndex(10)\n      .setEndTokenIndex(15)\n      .build();\n    underTest.writeCpdTextBlocks(1, asList(duplicationBlock));\n\n    assertThat(underTest.hasComponentData(FileStructure.Domain.CPD_TEXT_BLOCKS, 1)).isTrue();\n    File file = underTest.getFileStructure().fileFor(FileStructure.Domain.CPD_TEXT_BLOCKS, 1);\n    assertThat(file).exists().isFile();\n    try (CloseableIterator<BatchReport.CpdTextBlock> duplicationBlocks = Protobuf.readStream(file, BatchReport.CpdTextBlock.parser())) {\n      BatchReport.CpdTextBlock duplicationBlockResult = duplicationBlocks.next();\n      assertThat(duplicationBlockResult.getHashList()).containsOnly(1, 2, 3, 5, 7);\n      assertThat(duplicationBlockResult.getStartLine()).isEqualTo(1);\n      assertThat(duplicationBlockResult.getEndLine()).isEqualTo(2);\n      assertThat(duplicationBlockResult.getStartTokenIndex()).isEqualTo(10);\n      assertThat(duplicationBlockResult.getEndTokenIndex()).isEqualTo(15);\n    }\n  }","id":68283,"modified_method":"@Test\n  public void write_duplication_blocks() {\n    assertThat(underTest.hasComponentData(FileStructure.Domain.CPD_TEXT_BLOCKS, 1)).isFalse();\n\n    BatchReport.CpdTextBlock duplicationBlock = BatchReport.CpdTextBlock.newBuilder()\n      .setHash(\"abcdefghijklmnop\")\n      .setStartLine(1)\n      .setEndLine(2)\n      .setStartTokenIndex(10)\n      .setEndTokenIndex(15)\n      .build();\n    underTest.writeCpdTextBlocks(1, asList(duplicationBlock));\n\n    assertThat(underTest.hasComponentData(FileStructure.Domain.CPD_TEXT_BLOCKS, 1)).isTrue();\n    File file = underTest.getFileStructure().fileFor(FileStructure.Domain.CPD_TEXT_BLOCKS, 1);\n    assertThat(file).exists().isFile();\n    try (CloseableIterator<BatchReport.CpdTextBlock> duplicationBlocks = Protobuf.readStream(file, BatchReport.CpdTextBlock.parser())) {\n      BatchReport.CpdTextBlock duplicationBlockResult = duplicationBlocks.next();\n      assertThat(duplicationBlockResult.getHash()).isEqualTo(\"abcdefghijklmnop\");\n      assertThat(duplicationBlockResult.getStartLine()).isEqualTo(1);\n      assertThat(duplicationBlockResult.getEndLine()).isEqualTo(2);\n      assertThat(duplicationBlockResult.getStartTokenIndex()).isEqualTo(10);\n      assertThat(duplicationBlockResult.getEndTokenIndex()).isEqualTo(15);\n    }\n  }","commit_id":"c20343073c1c3ba5356db69a9c1a040cab339fa1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void enableCrossProjectDuplication() throws IOException {\n    File srcDir = new File(baseDir, \"src\");\n    srcDir.mkdir();\n\n    String duplicatedStuff = \"Sample xoo\\ncontent\\nfoo\\nbar\\ntoto\\ntiti\\nfoo\";\n\n    File xooFile1 = new File(srcDir, \"sample1.xoo\");\n    FileUtils.write(xooFile1, duplicatedStuff);\n\n    TaskResult result = tester.newTask()\n      .properties(builder\n        .put(\"sonar.sources\", \"src\")\n        .put(\"sonar.cpd.xoo.minimumTokens\", \"1\")\n        .put(\"sonar.cpd.xoo.minimumLines\", \"5\")\n        .put(\"sonar.verbose\", \"true\")\n        .put(\"sonar.cpd.cross_project\", \"true\")\n        .build())\n      .start();\n\n    InputFile inputFile1 = result.inputFile(\"src/sample1.xoo\");\n\n    List<BatchReport.CpdTextBlock> duplicationBlocks = result.duplicationBlocksFor(inputFile1);\n    assertThat(duplicationBlocks).hasSize(3);\n    assertThat(duplicationBlocks.get(0).getStartLine()).isEqualTo(1);\n    assertThat(duplicationBlocks.get(0).getEndLine()).isEqualTo(5);\n    assertThat(duplicationBlocks.get(0).getStartTokenIndex()).isEqualTo(1);\n    assertThat(duplicationBlocks.get(0).getEndTokenIndex()).isEqualTo(6);\n    assertThat(duplicationBlocks.get(0).getHashList()).isNotEmpty();\n\n    assertThat(duplicationBlocks.get(1).getStartLine()).isEqualTo(2);\n    assertThat(duplicationBlocks.get(1).getEndLine()).isEqualTo(6);\n    assertThat(duplicationBlocks.get(1).getStartTokenIndex()).isEqualTo(3);\n    assertThat(duplicationBlocks.get(1).getEndTokenIndex()).isEqualTo(7);\n    assertThat(duplicationBlocks.get(0).getHashList()).isNotEmpty();\n\n    assertThat(duplicationBlocks.get(2).getStartLine()).isEqualTo(3);\n    assertThat(duplicationBlocks.get(2).getEndLine()).isEqualTo(7);\n    assertThat(duplicationBlocks.get(2).getStartTokenIndex()).isEqualTo(4);\n    assertThat(duplicationBlocks.get(2).getEndTokenIndex()).isEqualTo(8);\n    assertThat(duplicationBlocks.get(0).getHashList()).isNotEmpty();\n  }","id":68284,"modified_method":"@Test\n  public void enableCrossProjectDuplication() throws IOException {\n    File srcDir = new File(baseDir, \"src\");\n    srcDir.mkdir();\n\n    String duplicatedStuff = \"Sample xoo\\ncontent\\nfoo\\nbar\\ntoto\\ntiti\\nfoo\";\n\n    File xooFile1 = new File(srcDir, \"sample1.xoo\");\n    FileUtils.write(xooFile1, duplicatedStuff);\n\n    TaskResult result = tester.newTask()\n      .properties(builder\n        .put(\"sonar.sources\", \"src\")\n        .put(\"sonar.cpd.xoo.minimumTokens\", \"1\")\n        .put(\"sonar.cpd.xoo.minimumLines\", \"5\")\n        .put(\"sonar.verbose\", \"true\")\n        .put(\"sonar.cpd.cross_project\", \"true\")\n        .build())\n      .start();\n\n    InputFile inputFile1 = result.inputFile(\"src/sample1.xoo\");\n\n    List<BatchReport.CpdTextBlock> duplicationBlocks = result.duplicationBlocksFor(inputFile1);\n    assertThat(duplicationBlocks).hasSize(3);\n    assertThat(duplicationBlocks.get(0).getStartLine()).isEqualTo(1);\n    assertThat(duplicationBlocks.get(0).getEndLine()).isEqualTo(5);\n    assertThat(duplicationBlocks.get(0).getStartTokenIndex()).isEqualTo(1);\n    assertThat(duplicationBlocks.get(0).getEndTokenIndex()).isEqualTo(6);\n    assertThat(duplicationBlocks.get(0).getHash()).isNotEmpty();\n\n    assertThat(duplicationBlocks.get(1).getStartLine()).isEqualTo(2);\n    assertThat(duplicationBlocks.get(1).getEndLine()).isEqualTo(6);\n    assertThat(duplicationBlocks.get(1).getStartTokenIndex()).isEqualTo(3);\n    assertThat(duplicationBlocks.get(1).getEndTokenIndex()).isEqualTo(7);\n    assertThat(duplicationBlocks.get(0).getHash()).isNotEmpty();\n\n    assertThat(duplicationBlocks.get(2).getStartLine()).isEqualTo(3);\n    assertThat(duplicationBlocks.get(2).getEndLine()).isEqualTo(7);\n    assertThat(duplicationBlocks.get(2).getStartTokenIndex()).isEqualTo(4);\n    assertThat(duplicationBlocks.get(2).getEndTokenIndex()).isEqualTo(8);\n    assertThat(duplicationBlocks.get(0).getHash()).isNotEmpty();\n  }","commit_id":"c20343073c1c3ba5356db69a9c1a040cab339fa1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void insert(InputFile inputFile, Collection<Block> blocks) {\n    if (isCrossProjectDuplicationEnabled(settings)) {\n      int id = batchComponentCache.get(inputFile).batchId();\n      final BatchReport.CpdTextBlock.Builder builder = BatchReport.CpdTextBlock.newBuilder();\n      publisher.getWriter().writeCpdTextBlocks(id, Iterables.transform(blocks, new Function<Block, BatchReport.CpdTextBlock>() {\n        @Override\n        public BatchReport.CpdTextBlock apply(Block input) {\n          builder.clear();\n          builder.setStartLine(input.getStartLine());\n          builder.setEndLine(input.getEndLine());\n          builder.setStartTokenIndex(input.getStartUnit());\n          builder.setEndTokenIndex(input.getEndUnit());\n          for (int i : input.getBlockHash().toIntArray()) {\n            builder.addHash(i);\n          }\n          return builder.build();\n        }\n      }));\n    }\n    for (Block block : blocks) {\n      mem.insert(block);\n    }\n  }","id":68285,"modified_method":"public void insert(InputFile inputFile, Collection<Block> blocks) {\n    if (isCrossProjectDuplicationEnabled(settings)) {\n      int id = batchComponentCache.get(inputFile).batchId();\n      final BatchReport.CpdTextBlock.Builder builder = BatchReport.CpdTextBlock.newBuilder();\n      publisher.getWriter().writeCpdTextBlocks(id, Iterables.transform(blocks, new Function<Block, BatchReport.CpdTextBlock>() {\n        @Override\n        public BatchReport.CpdTextBlock apply(Block input) {\n          builder.clear();\n          builder.setStartLine(input.getStartLine());\n          builder.setEndLine(input.getEndLine());\n          builder.setStartTokenIndex(input.getStartUnit());\n          builder.setEndTokenIndex(input.getEndUnit());\n          builder.setHash(input.getBlockHash().toHexString());\n          return builder.build();\n        }\n      }));\n    }\n    for (Block block : blocks) {\n      mem.insert(block);\n    }\n  }","commit_id":"c20343073c1c3ba5356db69a9c1a040cab339fa1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n     * return start of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns\n     * Tue Mar 25 00:00:00 EST 2014\n     *\n     * @param actionTime\n     * @return\n     */\n    public static Date getStartOfDay(Date actionTime) {\n        DateTime truncateMonth =\n                new DateTime(actionTime).dayOfWeek().roundFloorCopy();\n        return truncateMonth.toDate();\n    }","id":68286,"modified_method":"/**\n     * return start of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns\n     * Tue Mar 25 00:00:00 EST 2014\n     *\n     * @param actionTime\n     * @return\n     */\n    public static Date getStartOfDay(Date actionTime) {\n        DateTime dateTime = new DateTime(actionTime);\n        return dateTime.withTimeAtStartOfDay().toDate();\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n     * return end of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns Tue\n     * Mar 25 23:59:59 EST 2014\n     *\n     * @param actionTime\n     * @return\n     */\n    public static Date getEndOfTheDay(Date actionTime) {\n        DateTime truncateMonth =\n                new DateTime(actionTime).dayOfWeek().roundCeilingCopy()\n                        .minusMillis(1);\n        return truncateMonth.toDate();\n    }","id":68287,"modified_method":"/**\n     * return end of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns Tue\n     * Mar 25 23:59:59 EST 2014\n     *\n     * @param actionTime\n     * @return\n     */\n    public static Date getEndOfTheDay(Date actionTime) {\n        DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n                .withTimeAtStartOfDay().minusMillis(1);\n        return endOfTheDay.toDate();\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void getSimpleDocumentStatisticsForAllLocales() {\n        StatisticsServiceImpl statisticsService =\n                seam.autowire(StatisticsServiceImpl.class);\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\",\n                        \"my/path/document.txt\", false, new String[] {});\n\n        // Make sure the id matches\n        assertThat(stats.getId(), is(\"my/path/document.txt\"));\n        // Make sure there are links\n        assertThat(stats.getRefs().size(), greaterThan(0));\n\n        // No detailed stats\n        assertThat(stats.getDetailedStats(), nullValue());\n\n        assertThat(stats.getStats().get(0).getUnit(),\n                is(TranslationStatistics.StatUnit.MESSAGE));\n\n        for (TranslationStatistics transStat : stats.getStats()) {\n            // Check that there are no word level stats\n            assertThat(transStat.getUnit(),\n                    not(TranslationStatistics.StatUnit.WORD));\n\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated(),\n                    equalTo(transStat.getTotal()));\n        }\n    }","id":68288,"modified_method":"@Test\n    public void getSimpleDocumentStatisticsForAllLocales() {\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\",\n                        \"my/path/document.txt\", false, new String[] {});\n\n        // Make sure the id matches\n        assertThat(stats.getId()).isEqualTo(\"my/path/document.txt\");\n        // Make sure there are links\n        assertThat(stats.getRefs().size()).isGreaterThan(0);\n\n        // No detailed stats\n        assertThat(stats.getDetailedStats()).isNull();\n\n        assertThat(stats.getStats().get(0).getUnit()).isEqualTo(\n                TranslationStatistics.StatUnit.MESSAGE);\n\n        for (TranslationStatistics transStat : stats.getStats()) {\n            // Check that there are no word level stats\n            assertThat(transStat.getUnit()).isNotEqualTo(\n                    TranslationStatistics.StatUnit.WORD);\n\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated()).isEqualTo(\n                    transStat.getTotal());\n        }\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@BeforeMethod\n    public void initializeSeam() {\n        MockitoAnnotations.initMocks(this);\n        // @formatter:off\n      seam.reset()\n            .use(\"entityManager\", getEm())\n            .use(\"session\", getSession())\n            .use(\"validationServiceImpl\", validationServiceImpl)\n            .useImpl(TranslationStateCacheImpl.class)\n            .ignoreNonResolvable();\n      // @formatter:on\n        cacheManager = CacheManager.create();\n        cacheManager.removalAll();\n    }","id":68289,"modified_method":"@BeforeMethod\n    public void initializeSeam() {\n        MockitoAnnotations.initMocks(this);\n        // @formatter:off\n      seam.reset()\n            .use(\"entityManager\", getEm())\n            .use(\"session\", getSession())\n            .use(\"validationServiceImpl\", validationServiceImpl)\n            .useImpl(TranslationStateCacheImpl.class)\n            .ignoreNonResolvable();\n      // @formatter:on\n        cacheManager = CacheManager.create();\n        cacheManager.removalAll();\n\n        statisticsService = seam.autowire(StatisticsServiceImpl.class);\n        textFlowTargetDAO = seam.autowire(TextFlowTargetDAO.class);\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void getSimpleIterationStatisticsForAllLocales() {\n        StatisticsServiceImpl statisticsService =\n                seam.autowire(StatisticsServiceImpl.class);\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\", false,\n                        false, new String[] {});\n\n        // Make sure the id matches\n        assertThat(stats.getId(), is(\"1.0\"));\n        // Make sure there are links\n        assertThat(stats.getRefs().size(), greaterThan(0));\n\n        // No detailed stats\n        assertThat(stats.getDetailedStats(), nullValue());\n\n        assertThat(stats.getStats().get(0).getUnit(),\n                is(TranslationStatistics.StatUnit.MESSAGE));\n\n        for (TranslationStatistics transStat : stats.getStats()) {\n            // Check that there are no word level stats\n            assertThat(transStat.getUnit(),\n                    not(TranslationStatistics.StatUnit.WORD));\n\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated(),\n                    equalTo(transStat.getTotal()));\n        }\n    }","id":68290,"modified_method":"@Test\n    public void getSimpleIterationStatisticsForAllLocales() {\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\", false,\n                        false, new String[] {});\n\n        // Make sure the id matches\n        assertThat(stats.getId()).isEqualTo(\"1.0\");\n        // Make sure there are links\n        assertThat(stats.getRefs().size()).isGreaterThan(0);\n\n        // No detailed stats\n        assertThat(stats.getDetailedStats()).isNull();\n\n        assertThat(stats.getStats().get(0).getUnit()).isEqualTo(\n                TranslationStatistics.StatUnit.MESSAGE);\n\n        for (TranslationStatistics transStat : stats.getStats()) {\n            // Check that there are no word level stats\n            assertThat(transStat.getUnit()).isNotEqualTo(\n                    TranslationStatistics.StatUnit.WORD);\n\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated()).isEqualTo(\n                    transStat.getTotal());\n        }\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void getWordIterationStatisticsForAllLocales() {\n        StatisticsServiceImpl statisticsService =\n                seam.autowire(StatisticsServiceImpl.class);\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\", false,\n                        true, new String[] {});\n\n        // Make sure the id matches\n        assertThat(stats.getId(), is(\"1.0\"));\n        // Make sure there are links\n        assertThat(stats.getRefs().size(), greaterThan(0));\n\n        // No detailed stats\n        assertThat(stats.getDetailedStats(), nullValue());\n\n        // Word level AND message level stats\n        int wordLevel = 0;\n        int mssgLevel = 0;\n        for (TranslationStatistics transStat : stats.getStats()) {\n            if (transStat.getUnit() == TranslationStatistics.StatUnit.MESSAGE) {\n                mssgLevel++;\n            } else if (transStat.getUnit() == TranslationStatistics.StatUnit.WORD) {\n                wordLevel++;\n            }\n\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated(),\n                    equalTo(transStat.getTotal()));\n        }\n\n        // make sure word and message level counts are the same and > 0\n        assertThat(wordLevel, greaterThan(0));\n        assertThat(wordLevel, is(mssgLevel));\n    }","id":68291,"modified_method":"@Test\n    public void getWordIterationStatisticsForAllLocales() {\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\", false,\n                        true, new String[] {});\n\n        // Make sure the id matches\n        assertThat(stats.getId()).isEqualTo(\"1.0\");\n        // Make sure there are links\n        assertThat(stats.getRefs().size()).isGreaterThan(0);\n\n        // No detailed stats\n        assertThat(stats.getDetailedStats()).isNull();\n\n        // Word level AND message level stats\n        int wordLevel = 0;\n        int mssgLevel = 0;\n        for (TranslationStatistics transStat : stats.getStats()) {\n            if (transStat.getUnit() == TranslationStatistics.StatUnit.MESSAGE) {\n                mssgLevel++;\n            } else if (transStat.getUnit() == TranslationStatistics.StatUnit.WORD) {\n                wordLevel++;\n            }\n\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated()).isEqualTo(\n                    transStat.getTotal());\n        }\n\n        // make sure word and message level counts are the same and > 0\n        assertThat(wordLevel).isGreaterThan(0);\n        assertThat(wordLevel).isEqualTo(mssgLevel);\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void getDetailedDocumentStatisticsForSpecificLocales() {\n        String[] locales = new String[] { \"en-US\", \"es\", \"as\" };\n\n        StatisticsServiceImpl statisticsService =\n                seam.autowire(StatisticsServiceImpl.class);\n\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\",\n                        \"my/path/document.txt\", true, locales);\n\n        // Make sure the id matches\n        assertThat(stats.getId(), is(\"my/path/document.txt\"));\n        // Make sure there are links\n        assertThat(stats.getRefs().size(), greaterThan(0));\n\n        // No Detailed Stats\n        assertThat(stats.getDetailedStats(), nullValue());\n\n        // Results returned only for specified locales\n        for (TranslationStatistics transStat : stats.getStats()) {\n            assertThat(Arrays.asList(locales), hasItem(transStat.getLocale()));\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated(),\n                    equalTo(transStat.getTotal()));\n        }\n    }","id":68292,"modified_method":"@Test\n    public void getDetailedDocumentStatisticsForSpecificLocales() {\n        String[] locales = new String[] { \"en-US\", \"es\", \"as\" };\n\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\",\n                        \"my/path/document.txt\", true, locales);\n\n        // Make sure the id matches\n        assertThat(stats.getId()).isEqualTo(\"my/path/document.txt\");\n        // Make sure there are links\n        assertThat(stats.getRefs().size()).isGreaterThan(0);\n\n        // No Detailed Stats\n        assertThat(stats.getDetailedStats()).isNull();\n\n        // Results returned only for specified locales\n        for (TranslationStatistics transStat : stats.getStats()) {\n            assertThat(Arrays.asList(locales)).contains(transStat.getLocale());\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated()).isEqualTo(\n                    transStat.getTotal());\n        }\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void getDetailedIterationStatisticsForSpecificLocales() {\n        String[] locales = new String[] { \"en-US\", \"es\", \"as\" };\n\n        StatisticsServiceImpl statisticsService =\n                seam.autowire(StatisticsServiceImpl.class);\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\", true,\n                        true, locales);\n\n        // Make sure the id matches\n        assertThat(stats.getId(), is(\"1.0\"));\n        // Make sure there are links\n        assertThat(stats.getRefs().size(), greaterThan(0));\n\n        // Detailed Stats\n        assertThat(stats.getDetailedStats().size(), greaterThan(0));\n\n        // Results returned only for specified locales\n        for (TranslationStatistics transStat : stats.getStats()) {\n            assertThat(Arrays.asList(locales), hasItem(transStat.getLocale()));\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated(),\n                    equalTo(transStat.getTotal()));\n        }\n    }","id":68293,"modified_method":"@Test\n    public void getDetailedIterationStatisticsForSpecificLocales() {\n        String[] locales = new String[] { \"en-US\", \"es\", \"as\" };\n\n        ContainerTranslationStatistics stats =\n                statisticsService.getStatistics(\"sample-project\", \"1.0\", true,\n                        true, locales);\n\n        // Make sure the id matches\n        assertThat(stats.getId()).isEqualTo(\"1.0\");\n        // Make sure there are links\n        assertThat(stats.getRefs().size()).isGreaterThan(0);\n\n        // Detailed Stats\n        assertThat(stats.getDetailedStats().size()).isGreaterThan(0);\n\n        // Results returned only for specified locales\n        for (TranslationStatistics transStat : stats.getStats()) {\n            assertThat(Arrays.asList(locales)).contains(transStat.getLocale());\n            // make sure counts are sane\n            assertThat(\n                    transStat.getDraft() + transStat.getApproved()\n                            + transStat.getTranslatedOnly()\n                            + transStat.getUntranslated()).isEqualTo(\n                    transStat.getTotal());\n        }\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"public static int calculateUntranslated(Long totalCount,\n            AbstractTranslationCount translationCount) {\n        return totalCount.intValue()\n                - translationCount.get(ContentState.Translated)\n                - translationCount.get(ContentState.NeedReview)\n                - translationCount.get(ContentState.Approved)\n                - translationCount.get(ContentState.Rejected);\n    }","id":68294,"modified_method":"public static int calculateUntranslated(Long totalCount,\n            BaseTranslationCount translationCount) {\n        return totalCount.intValue()\n                - translationCount.get(ContentState.Translated)\n                - translationCount.get(ContentState.NeedReview)\n                - translationCount.get(ContentState.Approved)\n                - translationCount.get(ContentState.Rejected);\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n     * Check that requestedState is valid for the given content, adjust if\n     * necessary and set the new state if it has changed.\n     *\n     * @return true if the content state or contents list were updated, false\n     *         otherwise\n     * @see #adjustContentsAndState(org.zanata.model.HTextFlowTarget, int,\n     *      java.util.List)\n     */\n    private boolean setContentStateIfChanged(\n            @Nonnull ContentState requestedState,\n            @Nonnull HTextFlowTarget target, int nPlurals,\n            boolean requireTranslationReview) {\n        boolean changed = false;\n        ContentState previousState = target.getState();\n        target.setState(requestedState);\n        ArrayList<String> warnings = new ArrayList<String>();\n        changed |= adjustContentsAndState(target, nPlurals, warnings);\n        for (String warning : warnings) {\n            log.warn(warning);\n        }\n        if (requireTranslationReview) {\n            if (isReviewState(target.getState())) {\n                // reviewer saved it\n                target.setReviewer(authenticatedAccount.getPerson());\n            } else {\n                target.setTranslator(authenticatedAccount.getPerson());\n            }\n        } else {\n            if (target.getState() == ContentState.Approved) {\n                target.setState(ContentState.Translated);\n            }\n            target.setTranslator(authenticatedAccount.getPerson());\n        }\n        if (target.getState() != previousState) {\n            changed = true;\n        }\n        return changed;\n    }","id":68295,"modified_method":"/**\n     * Check that requestedState is valid for the given content, adjust if\n     * necessary and set the new state if it has changed.\n     *\n     * @return true if the content state or contents list were updated, false\n     *         otherwise\n     * @see #adjustContentsAndState(org.zanata.model.HTextFlowTarget, int,\n     *      java.util.List)\n     */\n    private boolean setContentStateIfChanged(\n            @Nonnull ContentState requestedState,\n            @Nonnull HTextFlowTarget target, int nPlurals,\n            boolean requireTranslationReview) {\n        boolean changed = false;\n        ContentState previousState = target.getState();\n        target.setState(requestedState);\n        ArrayList<String> warnings = new ArrayList<String>();\n        changed |= adjustContentsAndState(target, nPlurals, warnings);\n        for (String warning : warnings) {\n            log.warn(warning);\n        }\n        if (requireTranslationReview) {\n            if (isReviewState(target.getState())) {\n                // reviewer saved it\n                target.setReviewer(authenticatedAccount.getPerson());\n                if (previousState == ContentState.New) {\n                    target.setTranslator(authenticatedAccount.getPerson());\n                }\n            } else {\n                target.setTranslator(authenticatedAccount.getPerson());\n            }\n        } else {\n            if (target.getState() == ContentState.Approved) {\n                target.setState(ContentState.Translated);\n            }\n            target.setTranslator(authenticatedAccount.getPerson());\n        }\n        if (target.getState() != previousState) {\n            changed = true;\n        }\n        return changed;\n    }","commit_id":"c8facd74dd113929ee3db4911eb28934aed29476","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(h2.matchesJdbcURL(\"jdbc:h2:foo\"), is(true));\n    assertThat(h2.matchesJdbcURL(\"jdbc:hsql:foo\"), is(false));\n  }","id":68296,"modified_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(h2.matchesJdbcURL(\"jdbc:h2:foo\")).isTrue();\n    assertThat(h2.matchesJdbcURL(\"jdbc:hsql:foo\")).isFalse();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(h2.getTrueSqlValue(), is(\"true\"));\n    assertThat(h2.getFalseSqlValue(), is(\"false\"));\n  }","id":68297,"modified_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(h2.getTrueSqlValue()).isEqualTo(\"true\");\n    assertThat(h2.getFalseSqlValue()).isEqualTo(\"false\");\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(msSql.getTrueSqlValue(), is(\"1\"));\n    assertThat(msSql.getFalseSqlValue(), is(\"0\"));\n  }","id":68298,"modified_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(msSql.getTrueSqlValue()).isEqualTo(\"1\");\n    assertThat(msSql.getFalseSqlValue()).isEqualTo(\"0\");\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(msSql.matchesJdbcURL(\"jdbc:jtds:sqlserver://localhost;databaseName=SONAR;SelectMethod=Cursor\"), is(true));\n    assertThat(msSql.matchesJdbcURL(\"jdbc:microsoft:sqlserver://localhost:1433;databasename=sonar\"), is(true));\n\n    assertThat(msSql.matchesJdbcURL(\"jdbc:hsql:foo\"), is(false));\n    assertThat(msSql.matchesJdbcURL(\"jdbc:mysql:foo\"), is(false));\n  }","id":68299,"modified_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(msSql.matchesJdbcURL(\"jdbc:jtds:sqlserver://localhost;databaseName=SONAR;SelectMethod=Cursor\")).isTrue();\n    assertThat(msSql.matchesJdbcURL(\"jdbc:microsoft:sqlserver://localhost:1433;databasename=sonar\")).isTrue();\n\n    assertThat(msSql.matchesJdbcURL(\"jdbc:hsql:foo\")).isFalse();\n    assertThat(msSql.matchesJdbcURL(\"jdbc:mysql:foo\")).isFalse();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(mySql.getTrueSqlValue(), is(\"true\"));\n    assertThat(mySql.getFalseSqlValue(), is(\"false\"));\n  }","id":68300,"modified_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(mySql.getTrueSqlValue()).isEqualTo(\"true\");\n    assertThat(mySql.getFalseSqlValue()).isEqualTo(\"false\");\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(mySql.matchesJdbcURL(\"jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8\"), is(true));\n    assertThat(mySql.matchesJdbcURL(\"JDBC:MYSQL://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8\"), is(true));\n\n    assertThat(mySql.matchesJdbcURL(\"jdbc:hsql:foo\"), is(false));\n    assertThat(mySql.matchesJdbcURL(\"jdbc:oracle:foo\"), is(false));\n  }","id":68301,"modified_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(mySql.matchesJdbcURL(\"jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8\")).isTrue();\n    assertThat(mySql.matchesJdbcURL(\"JDBC:MYSQL://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8\")).isTrue();\n\n    assertThat(mySql.matchesJdbcURL(\"jdbc:hsql:foo\")).isFalse();\n    assertThat(mySql.matchesJdbcURL(\"jdbc:oracle:foo\")).isFalse();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(oracle.matchesJdbcURL(\"jdbc:oracle:thin:@localhost/XE\"), is(true));\n    assertThat(oracle.matchesJdbcURL(\"jdbc:hsql:foo\"), is(false));\n  }","id":68302,"modified_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(oracle.matchesJdbcURL(\"jdbc:oracle:thin:@localhost/XE\")).isTrue();\n    assertThat(oracle.matchesJdbcURL(\"jdbc:hsql:foo\")).isFalse();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotChangeOracleSchemaByDefault() {\n    assertNull(oracle.getConnectionInitStatement(null));\n  }","id":68303,"modified_method":"@Test\n  public void shouldNotChangeOracleSchemaByDefault() {\n    assertThat(oracle.getConnectionInitStatement(null)).isNull();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Avoid conflicts with other schemas\n   */\n  @Test\n  public void shouldChangeOracleSchema() {\n    String initStatement = oracle.getConnectionInitStatement(\"my_schema\");\n\n    assertThat(initStatement, Is.is(\"ALTER SESSION SET CURRENT_SCHEMA = \\\"my_schema\\\"\"));\n  }","id":68304,"modified_method":"/**\n   * Avoid conflicts with other schemas\n   */\n  @Test\n  public void shouldChangeOracleSchema() {\n    String initStatement = oracle.getConnectionInitStatement(\"my_schema\");\n\n    assertThat(initStatement).isEqualTo(\"ALTER SESSION SET CURRENT_SCHEMA = \\\"my_schema\\\"\");\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(oracle.getTrueSqlValue(), is(\"1\"));\n    assertThat(oracle.getFalseSqlValue(), is(\"0\"));\n  }","id":68305,"modified_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(oracle.getTrueSqlValue()).isEqualTo(\"1\");\n    assertThat(oracle.getFalseSqlValue()).isEqualTo(\"0\");\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(postgreSql.getTrueSqlValue(), is(\"true\"));\n    assertThat(postgreSql.getFalseSqlValue(), is(\"false\"));\n  }","id":68306,"modified_method":"@Test\n  public void testBooleanSqlValues() {\n    assertThat(postgreSql.getTrueSqlValue()).isEqualTo(\"true\");\n    assertThat(postgreSql.getFalseSqlValue()).isEqualTo(\"false\");\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotChangePostgreSearchPathByDefault() {\n    assertNull(postgreSql.getConnectionInitStatement(null));\n  }","id":68307,"modified_method":"@Test\n  public void shouldNotChangePostgreSearchPathByDefault() {\n    assertThat(postgreSql.getConnectionInitStatement(null)).isNull();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(postgreSql.matchesJdbcURL(\"jdbc:postgresql://localhost/sonar\"), is(true));\n    assertThat(postgreSql.matchesJdbcURL(\"jdbc:hsql:foo\"), is(false));\n  }","id":68308,"modified_method":"@Test\n  public void matchesJdbcURL() {\n    assertThat(postgreSql.matchesJdbcURL(\"jdbc:postgresql://localhost/sonar\")).isTrue();\n    assertThat(postgreSql.matchesJdbcURL(\"jdbc:hsql:foo\")).isFalse();\n  }","commit_id":"e0e247b684d77a4522f3b393db86d4501aa27e3a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void clickWhenTabEnabled(final WebElement tab) {\n        waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver input) {\n                waitForPageSilence();\n                boolean clicked = false;\n                try {\n                    if (tab.isDisplayed() && tab.isEnabled()) {\n                        tab.click();\n                        clicked = true;\n                    }\n                } catch(WebDriverException wde) {\n                    return clicked;\n                }\n                return clicked;\n            }\n        });\n    }","id":68309,"modified_method":"public void clickWhenTabEnabled(final WebElement tab) {\n        waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver input) {\n                waitForPageSilence();\n                boolean clicked = false;\n                try {\n                    scrollIntoView(tab);\n                    if (tab.isDisplayed() && tab.isEnabled()) {\n                        tab.click();\n                        clicked = true;\n                    }\n                } catch(WebDriverException wde) {\n                    return false;\n                }\n                return clicked;\n            }\n        });\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"public ProjectsPage goToProjects() {\n        clickNavMenuItem(projectsLink);\n        return new ProjectsPage(getDriver());\n    }","id":68310,"modified_method":"public ProjectsPage goToProjects() {\n        clickNavMenuItem(getDriver().findElement(By.id(\"projects_link\")));\n        return new ProjectsPage(getDriver());\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void clickNavMenuItem(final WebElement menuItem) {\n        scrollIntoView(menuItem);\n        if (!menuItem.isDisplayed()) {\n            // screen is too small the menu become dropdown\n            getDriver().findElement(By.id(\"nav-main\"))\n                    .findElement(By.tagName(\"a\")).click();\n        }\n        waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver input) {\n                return menuItem.isDisplayed();\n            }\n        });\n        menuItem.click();\n    }","id":68311,"modified_method":"private void clickNavMenuItem(final WebElement menuItem) {\n        scrollToTop();\n        slightPause();\n        if (!menuItem.isDisplayed()) {\n            // screen is too small the menu become dropdown\n            getDriver().findElement(By.id(\"nav-main\"))\n                    .findElement(By.tagName(\"a\")).click();\n        }\n        waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver input) {\n                return menuItem.isDisplayed();\n            }\n        });\n        // The notifications can sometimes get in the way\n        waitForTenSec().until(ExpectedConditions.elementToBeClickable(menuItem));\n        menuItem.click();\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HomePage goToHomePage() {\n        homeLink.click();\n        return new HomePage(getDriver());\n    }","id":68312,"modified_method":"public HomePage goToHomePage() {\n        scrollToTop();\n        homeLink.click();\n        return new HomePage(getDriver());\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Category(BasicAcceptanceTest.class)\n    public void createABasicProject() {\n\n        assertThat(\"User logs in\",\n                new LoginWorkFlow().signIn(\"admin\", \"admin\").loggedInAs(),\n                equalTo(\"admin\"));\n\n        ProjectVersionsPage projectVersionsPage = new ProjectWorkFlow()\n                .createNewSimpleProject(\"basicproject\", \"basicproject\");\n\n        assertThat(\"The project name is correct\",\n                projectVersionsPage.getProjectName().trim(),\n                equalTo(\"basicproject\"));\n    }","id":68313,"modified_method":"@Feature(summary = \"The user can create a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 144262)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Category(BasicAcceptanceTest.class)\n    public void createABasicProject() throws Exception {\n        assertThat(new LoginWorkFlow().signIn(\"admin\", \"admin\").loggedInAs())\n                .isEqualTo(\"admin\")\n                .as(\"User logs in\");\n\n        ProjectVersionsPage projectVersionsPage = new ProjectWorkFlow()\n                .createNewSimpleProject(\"basicproject\", \"basicproject\");\n\n        assertThat(projectVersionsPage.getProjectName().trim())\n                .isEqualTo(\"basicproject\")\n                .as(\"The project name is correct\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void createABasicProjectWithHomepageContent() {\n\n        HashMap<String, String> projectSettings = projectDefaults();\n        projectSettings.put(\"Project ID\", \"homepageproject\");\n        projectSettings.put(\"Name\", \"Project With Homepage Test\");\n        projectSettings.put(\"Description\", \"Project Description!\");\n\n        assertThat(\"Admin can log in\",\n                new LoginWorkFlow().signIn(\"admin\", \"admin\").loggedInAs(),\n                equalTo(\"admin\"));\n\n        ProjectBasePage projectPage =\n                new ProjectWorkFlow().createNewProject(projectSettings);\n\n        assertThat(\"The project name is correct\",\n                projectPage.getProjectName().trim(),\n                equalTo(projectSettings.get(\"Name\")));\n\n        List<String> paragraphs = projectPage.getContentAreaParagraphs();\n\n        assertThat(\"The project content area shows the description\",\n                paragraphs,\n                hasItem(projectSettings.get(\"Description\")));\n\n    }","id":68314,"modified_method":"@Feature(summary = \"The user can create a project with description\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 144262)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void createABasicProjectWithDescription() throws Exception {\n        HashMap<String, String> projectSettings = projectDefaults();\n        projectSettings.put(\"Project ID\", \"descriptionproject\");\n        projectSettings.put(\"Name\", \"Project With Description Test\");\n        projectSettings.put(\"Description\", \"Project Description!\");\n\n        assertThat(new LoginWorkFlow().signIn(\"admin\", \"admin\").loggedInAs())\n                .isEqualTo(\"admin\")\n                .as(\"Admin can log in\");\n\n        ProjectBasePage projectPage =\n                new ProjectWorkFlow().createNewProject(projectSettings);\n\n        assertThat(projectPage.getProjectName().trim())\n                .isEqualTo(projectSettings.get(\"Name\"))\n                .as(\"The project name is correct\");\n\n        assertThat(projectPage.getContentAreaParagraphs())\n                .contains(projectSettings.get(\"Description\"))\n                .as(\"The project content area shows the description\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Ignore(\"rhbz1097030\")\n    public void addMaintainerAsAdmin() {\n        ProjectPermissionsTab projectPermissionsTab =\n                new LoginWorkFlow()\n                        .signIn(\"admin\", \"admin\")\n                        .goToProjects()\n                        .goToProject(\"about fedora\")\n                        .gotoSettingsTab()\n                        .gotoSettingsPermissionsTab();\n\n        assertThat(\"The translator user is not a maintainer\",\n                projectPermissionsTab.getSettingsMaintainersList(),\n                not(hasItem(\"translator\")));\n\n        projectPermissionsTab = new ProjectWorkFlow()\n                .addMaintainer(\"about fedora\", \"translator\");\n\n        assertThat(\"The translator user is a maintainer\",\n                projectPermissionsTab.getSettingsMaintainersList(),\n                hasItem(\"translator\"));\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(\"The translator user is shown in the list\",\n                projectMaintainersPage.getMaintainers(),\n                hasItem(\"translator @translator\"));\n\n        projectMaintainersPage.logout();\n\n        assertThat(\"The settings tab is now available to the user\",\n                new LoginWorkFlow().signIn(\"translator\", \"translator\")\n                        .goToProjects()\n                        .goToProject(\"about fedora\")\n                        .settingsTabIsDisplayed());\n    }","id":68315,"modified_method":"@Feature(summary = \"The administrator can add a maintainer to a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void addMaintainerAsAdmin() throws Exception {\n        ProjectPermissionsTab projectPermissionsTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsPermissionsTab();\n\n        assertThat(projectPermissionsTab.getSettingsMaintainersList())\n                .doesNotContain(\"translator\")\n                .as(\"The translator user is not a maintainer\");\n\n        projectPermissionsTab = new ProjectWorkFlow()\n                .addMaintainer(\"about fedora\", \"translator\");\n\n        assertThat(projectPermissionsTab.getSettingsMaintainersList())\n                .contains(\"translator\")\n                .as(\"The translator user is a maintainer\");\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(projectMaintainersPage.getMaintainers())\n                .contains(\"translator @translator\")\n                .as(\"The translator user is shown in the list\");\n\n        projectMaintainersPage.logout();\n\n        assertThat(new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .settingsTabIsDisplayed())\n                .isTrue()\n                .as(\"The settings tab is now available to the user\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Ignore(\"Exception on self removal\")\n    public void removeSelfAsMaintainer() {\n\n        assertThat(\"Translator has signed in\",\n                new LoginWorkFlow().signIn(\"translator\", \"translator\").loggedInAs(),\n                equalTo(\"translator\"));\n\n        assertThat(\"The project is created\",\n                new ProjectWorkFlow()\n                        .createNewSimpleProject(\"removemaintainer\",\n                                \"removemaintainer\")\n                        .getProjectName(),\n                equalTo(\"removemaintainer\"));\n\n        ProjectPermissionsTab projectPermissionsTab = new ProjectWorkFlow()\n                .addMaintainer(\"removemaintainer\", \"admin\");\n\n        assertThat(\"admin maintainer is added\",\n                projectPermissionsTab.getSettingsMaintainersList(),\n                hasItem(\"admin\"));\n\n        ProjectVersionsPage projectVersionsPage = projectPermissionsTab\n                .clickRemoveOnSelf(\"translator\")\n                .goToHomePage().goToProjects()\n                .goToProject(\"removemaintainer\");\n\n        assertThat(\"The translator user is no longer a maintainer\",\n                projectVersionsPage.settingsTabIsDisplayed(),\n                not(true));\n    }","id":68316,"modified_method":"@Feature(summary = \"The maintainer can remove themselves as maintainer \" +\n            \"from a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Ignore(\"Exception thrown on removing self\")\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void removeSelfAsMaintainer() throws Exception {\n        assertThat(new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .loggedInAs())\n                .isEqualTo(\"translator\")\n                .as(\"Translator has signed in\");\n\n        assertThat(new ProjectWorkFlow()\n                .createNewSimpleProject(\"removemaintainer\", \"removemaintainer\")\n                .getProjectName())\n                .isEqualTo(\"removemaintainer\")\n                .as(\"The project is created\");\n\n        ProjectPermissionsTab projectPermissionsTab = new ProjectWorkFlow()\n                .addMaintainer(\"removemaintainer\", \"admin\");\n\n        assertThat(projectPermissionsTab.getSettingsMaintainersList())\n                .contains(\"admin\")\n                .as(\"admin maintainer is added\");\n\n        projectPermissionsTab.slightPause();\n        ProjectBasePage projectBasePage = projectPermissionsTab\n                .clickRemoveOnSelf(\"translator\");\n        projectBasePage.slightPause();\n        ProjectVersionsPage projectVersionsPage = projectBasePage\n                .goToHomePage()\n                .goToProjects()\n                .goToProject(\"removemaintainer\");\n\n        assertThat(projectVersionsPage.settingsTabIsDisplayed())\n                .isFalse()\n                .as(\"The translator user is no longer a maintainer\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void maintainerDetailsAreDisplayed() {\n        ProjectPermissionsTab projectPermissionsTab =\n                new LoginWorkFlow()\n                        .signIn(\"admin\", \"admin\")\n                        .goToProjects()\n                        .goToProject(\"about fedora\")\n                        .gotoSettingsTab()\n                        .gotoSettingsPermissionsTab();\n\n        assertThat(\"The admin user is shown in the list\",\n                projectPermissionsTab.getSettingsMaintainersList(),\n                hasItem(\"admin\"));\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(\"The admin user is shown in the list\",\n                projectMaintainersPage.getMaintainers(),\n                hasItem(\"Administrator @admin\"));\n    }","id":68317,"modified_method":"@Feature(summary = \"The user can view maintainers for a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void maintainerDetailsAreDisplayed() throws Exception {\n        ProjectPermissionsTab projectPermissionsTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsPermissionsTab();\n\n        assertThat(projectPermissionsTab.getSettingsMaintainersList())\n                .contains(\"admin\")\n                .as(\"The admin user is shown in the list\");\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(projectMaintainersPage.getMaintainers())\n                .contains(\"Administrator @admin\")\n                .as(\"The admin user is shown in the list\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Ignore(\"rhbz1097030\")\n    public void addMaintainerAsMaintainer() {\n\n        assertThat(\"Translator has signed in\",\n                new LoginWorkFlow().signIn(\"translator\", \"translator\").loggedInAs(),\n                equalTo(\"translator\"));\n\n        ProjectPermissionsTab projectPermissionsTab = new ProjectWorkFlow()\n                .createNewSimpleProject(\"addmaintainer\", \"addmaintainer\")\n                .gotoSettingsTab()\n                .gotoSettingsPermissionsTab()\n                .enterSearchMaintainer(\"glossarist\")\n                .selectSearchMaintainer(\"glossarist\");\n\n        projectPermissionsTab.waitForMaintainersContains(\"glossarist\");\n\n        assertThat(\"The glossarist user was added as a maintainer\",\n                projectPermissionsTab.getSettingsMaintainersList(),\n                hasItem(\"glossarist\"));\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(\"The glossarist user is shown in the list\",\n                projectMaintainersPage.getMaintainers(),\n                hasItem(\"glossarist @glossarist\"));\n\n        projectMaintainersPage.logout();\n\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"glossarist\", \"glossarist\")\n                .goToProjects()\n                .goToProject(\"addmaintainer\");\n\n        assertThat(\"The settings tab is now available to the glossarist\",\n                projectVersionsPage.settingsTabIsDisplayed());\n    }","id":68318,"modified_method":"@Feature(summary = \"The maintainer can add a maintainer to a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 199006)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void addMaintainerAsMaintainer() throws Exception {\n        assertThat(new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .loggedInAs())\n                .isEqualTo(\"translator\")\n                .as(\"Translator has signed in\");\n\n        ProjectPermissionsTab projectPermissionsTab = new ProjectWorkFlow()\n                .createNewSimpleProject(\"addmaintainer\", \"addmaintainer\")\n                .gotoSettingsTab()\n                .gotoSettingsPermissionsTab()\n                .enterSearchMaintainer(\"glossarist\")\n                .selectSearchMaintainer(\"glossarist\");\n\n        projectPermissionsTab.waitForMaintainersContains(\"glossarist\");\n\n        assertThat(projectPermissionsTab.getSettingsMaintainersList())\n                .contains(\"glossarist\")\n                .as(\"The glossarist user was added as a maintainer\");\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(projectMaintainersPage.getMaintainers())\n                .contains(\"glossarist @glossarist\")\n                .as(\"The glossarist user is shown in the list\");\n\n        projectMaintainersPage.logout();\n\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"glossarist\", \"glossarist\")\n                .goToProjects()\n                .goToProject(\"addmaintainer\");\n\n        assertThat(projectVersionsPage.settingsTabIsDisplayed())\n                .isTrue()\n                .as(\"The settings tab is now available to the glossarist\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Ignore(\"rhbz1097030\")\n    public void removeMaintainer() {\n\n        assertThat(\"Translator has signed in\",\n                new LoginWorkFlow().signIn(\"translator\", \"translator\").loggedInAs(),\n                equalTo(\"translator\"));\n\n        assertThat(\"The project is created\",\n                new ProjectWorkFlow()\n                        .createNewSimpleProject(\"removemaintainer\",\n                                \"removemaintainer\")\n                        .getProjectName(),\n                equalTo(\"removemaintainer\"));\n\n        assertThat(\"Glossarist maintainer is added\",\n                new ProjectWorkFlow()\n                        .addMaintainer(\"removemaintainer\", \"glossarist\")\n                        .getSettingsMaintainersList(),\n                hasItem(\"glossarist\"));\n\n\n        ProjectPermissionsTab projectPermissionsTab = new ProjectWorkFlow()\n                .removeMaintainer(\"removemaintainer\", \"glossarist\");\n\n        assertThat(\"Glossarist maintainer is removed\",\n                projectPermissionsTab.getSettingsMaintainersList(),\n                not(hasItem(\"glossarist\")));\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(\"The glossarist user is not in the list\",\n                projectMaintainersPage.getMaintainers(),\n                not(hasItem(\"Glossarist @glossarist\")));\n    }","id":68319,"modified_method":"@Feature(summary = \"The maintainer can remove a maintainer from a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 321234)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void removeMaintainer() throws Exception {\n        assertThat(new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .loggedInAs())\n                .isEqualTo(\"translator\")\n                .as(\"Translator has signed in\");\n\n        assertThat(new ProjectWorkFlow()\n                .createNewSimpleProject(\"removemaintainer\", \"removemaintainer\")\n                .getProjectName())\n                .isEqualTo(\"removemaintainer\")\n                .as(\"The project is created\");\n\n        assertThat(new ProjectWorkFlow()\n                .addMaintainer(\"removemaintainer\", \"glossarist\")\n                .getSettingsMaintainersList())\n                .contains(\"glossarist\")\n                .as(\"Glossarist maintainer is added\");\n\n        ProjectPermissionsTab projectPermissionsTab = new ProjectWorkFlow()\n                .removeMaintainer(\"removemaintainer\", \"glossarist\");\n\n        assertThat(projectPermissionsTab.getSettingsMaintainersList())\n                .doesNotContain(\"glossarist\")\n                .as(\"Glossarist maintainer is removed\");\n\n        ProjectMaintainersPage projectMaintainersPage = projectPermissionsTab\n                .gotoMaintainersTab();\n\n        assertThat(projectMaintainersPage.getMaintainers())\n                .doesNotContain(\"Glossarist @glossarist\")\n                .as(\"The glossarist user is not in the list\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void addAboutPageDetails() {\n\n        String aboutText = \"This is my about text for AF\";\n        assertThat(\"Admin is logged in\", new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .loggedInAs(),\n                equalTo(\"admin\"));\n\n        ProjectAboutTab projectAboutTab = new ProjectWorkFlow()\n                .createNewSimpleProject(\"aboutpagetest\", \"aboutpagetest\")\n                .gotoSettingsTab()\n                .gotoSettingsAboutTab();\n\n        assertThat(\"The text is empty\",\n                projectAboutTab.getAboutText(),\n                isEmptyOrNullString());\n\n        projectAboutTab = projectAboutTab.clearAboutText()\n                .enterAboutText(aboutText)\n                .pressSave();\n\n        projectAboutTab.expectNotification(\"Successfully updated\");\n        ProjectAboutPage projectAboutPage = projectAboutTab.gotoAboutTab();\n\n        assertThat(\"The text in the About tab is correct\",\n                projectAboutPage.getAboutText(),\n                equalTo(aboutText));\n    }","id":68320,"modified_method":"@Feature(summary = \"The administrator can change a project about content\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void addAboutPageDetails() throws Exception {\n        String aboutText = \"This is my about text for AF\";\n        assertThat(new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .loggedInAs())\n                .isEqualTo(\"admin\")\n                .as(\"Admin is logged in\");\n\n        ProjectAboutTab projectAboutTab = new ProjectWorkFlow()\n                .createNewSimpleProject(\"aboutpagetest\", \"aboutpagetest\")\n                .gotoSettingsTab()\n                .gotoSettingsAboutTab();\n\n        assertThat(projectAboutTab.getAboutText())\n                .as(\"The text is empty\")\n                .isNullOrEmpty();\n\n        projectAboutTab = projectAboutTab\n                .clearAboutText()\n                .enterAboutText(aboutText)\n                .pressSave();\n\n        projectAboutTab.expectNotification(\"Successfully updated\");\n        ProjectAboutPage projectAboutPage = projectAboutTab.gotoAboutTab();\n\n        assertThat(projectAboutPage.getAboutText())\n                .isEqualTo(aboutText)\n                .as(\"The text in the About tab is correct\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAProjectToWritable() {\n        assertThat(\"The project is locked\", new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .lockProject()\n                .goToProjects()\n                .setActiveFilterEnabled(false)\n                .setReadOnlyFilterEnabled(true)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", true)\n                .getProjectNamesOnCurrentPage(),\n                hasItem(\"about fedora\"));\n\n        ProjectsPage projectsPage = new BasicWorkFlow()\n                .goToHome()\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .unlockProject()\n                .goToProjects()\n                .setActiveFilterEnabled(true)\n                .setReadOnlyFilterEnabled(false)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", true);\n\n        assertThat(\"The project is now displayed\",\n                projectsPage.getProjectNamesOnCurrentPage(),\n                hasItem(\"about fedora\"));\n    }","id":68321,"modified_method":"@Feature(summary = \"The administrator can set a read-only project \" +\n            \"to writable\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAProjectToWritable() throws Exception {\n        assertThat(new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .lockProject()\n                .goToProjects()\n                .setActiveFilterEnabled(false)\n                .setReadOnlyFilterEnabled(true)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", true)\n                .getProjectNamesOnCurrentPage())\n                .contains(\"about fedora\")\n                .as(\"The project is locked\");\n\n        ProjectsPage projectsPage = new BasicWorkFlow()\n                .goToHome()\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .unlockProject()\n                .goToProjects()\n                .setActiveFilterEnabled(true)\n                .setReadOnlyFilterEnabled(false)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", true);\n\n        assertThat(projectsPage.getProjectNamesOnCurrentPage())\n                .contains(\"about fedora\")\n                .as(\"The project is now displayed\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeProjectDescription() {\n        String replacementText = \"a new description\";\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\");\n\n        assertThat(\"The description is default\",\n                projectVersionsPage.getContentAreaParagraphs(),\n                not(hasItem(replacementText)));\n\n        ProjectGeneralTab projectGeneralTab = projectVersionsPage\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .enterDescription(replacementText)\n                .updateProject();\n\n        assertThat(\"The text has changed\",\n                projectGeneralTab.getContentAreaParagraphs(),\n                Matchers.hasItem(replacementText));\n    }","id":68322,"modified_method":"@Feature(summary = \"The administrator can change a project's description\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 198431)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeProjectDescription() throws Exception {\n        String replacementText = \"a new description\";\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\");\n\n        assertThat(projectVersionsPage.getContentAreaParagraphs())\n                .doesNotContain(replacementText)\n                .as(\"The description is default\");\n\n        ProjectGeneralTab projectGeneralTab = projectVersionsPage\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .enterDescription(replacementText)\n                .updateProject();\n\n        assertThat(projectGeneralTab.getContentAreaParagraphs())\n                .contains(replacementText)\n                .as(\"The text has changed\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeProjectName() {\n        String replacementText = \"a new name\";\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .enterProjectName(replacementText)\n                .updateProject()\n                .goToProjects()\n                .goToProject(replacementText);\n\n        assertThat(\"The name has changed\",\n                projectVersionsPage.getProjectName(),\n                Matchers.equalTo(replacementText));\n    }","id":68323,"modified_method":"@Feature(summary = \"The administrator can change a project's name\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 198431)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeProjectName() throws Exception {\n        String replacementText = \"a new name\";\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .enterProjectName(replacementText)\n                .updateProject()\n                .goToProjects()\n                .goToProject(replacementText);\n\n        assertThat(projectVersionsPage.getProjectName())\n                .isEqualTo(replacementText)\n                .as(\"The project name has changed\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeProjectType() {\n        ProjectGeneralTab projectGeneralTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .selectProjectType(\"Properties\")\n                .updateProject()\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral();\n\n        assertThat(\"The type is correct\",\n                projectGeneralTab.getSelectedProjectType(),\n                Matchers.equalTo(\"Properties\"));\n    }","id":68324,"modified_method":"@Feature(summary = \"The administrator can change a project's type\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 198431)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeProjectType() throws Exception {\n        ProjectGeneralTab projectGeneralTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .selectProjectType(\"Properties\")\n                .updateProject();\n\n        projectGeneralTab.reload();\n        projectGeneralTab = projectGeneralTab\n                .gotoSettingsTab()\n                .gotoSettingsGeneral();\n\n        assertThat(projectGeneralTab.getSelectedProjectType())\n                .isEqualTo(\"Properties\")\n                .as(\"The project type is correct\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAProjectToReadOnly() {\n        ProjectsPage projectsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .lockProject()\n                .goToProjects()\n                .setActiveFilterEnabled(true)\n                .setReadOnlyFilterEnabled(false)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", false);\n\n        assertThat(\"The project is not displayed\",\n                projectsPage.getProjectNamesOnCurrentPage(),\n                not(hasItem(\"about fedora\")));\n\n        projectsPage = projectsPage.setActiveFilterEnabled(false)\n                .setReadOnlyFilterEnabled(true)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", true);\n\n        assertThat(\"The project is now displayed\",\n                projectsPage.getProjectNamesOnCurrentPage(),\n                hasItem(\"about fedora\"));\n    }","id":68325,"modified_method":"@Feature(summary = \"The administrator can set a project to read-only\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 135848)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAProjectToReadOnly() throws Exception {\n        ProjectsPage projectsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .lockProject()\n                .goToProjects()\n                .setActiveFilterEnabled(true)\n                .setReadOnlyFilterEnabled(false)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", false);\n\n        assertThat(projectsPage.getProjectNamesOnCurrentPage())\n                .doesNotContain(\"about fedora\")\n                .as(\"The project is not displayed\");\n\n        projectsPage = projectsPage.setActiveFilterEnabled(false)\n                .setReadOnlyFilterEnabled(true)\n                .setObsoleteFilterEnabled(false)\n                .waitForProjectVisibility(\"about fedora\", true);\n\n        assertThat(projectsPage.getProjectNamesOnCurrentPage())\n                .contains(\"about fedora\")\n                .as(\"The project is now displayed\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeSourceLinks() {\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .enterHomePage(\"http://www.example.com\")\n                .enterRepository(\"http://www.test.com\")\n                .updateProject()\n                .goToProjects()\n                .goToProject(\"about fedora\");\n\n        assertThat(\"The homepage is correct\",\n                projectVersionsPage.getHomepage(),\n                Matchers.equalTo(\"http://www.example.com\"));\n\n        assertThat(\"The git url is correct\",\n                projectVersionsPage.getGitUrl(),\n                Matchers.equalTo(\"http://www.test.com\"));\n    }","id":68326,"modified_method":"@Feature(summary = \"The administrator can change a project's source urls\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 198431)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void changeSourceLinks() throws Exception {\n        ProjectVersionsPage projectVersionsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .enterHomePage(\"http://www.example.com\")\n                .enterRepository(\"http://www.test.com\")\n                .updateProject()\n                .goToProjects()\n                .goToProject(\"about fedora\");\n\n        assertThat(projectVersionsPage.getHomepage())\n                .isEqualTo(\"http://www.example.com\")\n                .as(\"The homepage is correct\");\n\n        assertThat(projectVersionsPage.getGitUrl())\n                .isEqualTo(\"http://www.test.com\")\n                .as(\"The git url is correct\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAProjectObsolete() {\n        ProjectsPage projectsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .archiveProject()\n                .goToProjects();\n\n        assertThat(\"The project is not displayed\",\n                projectsPage.getProjectNamesOnCurrentPage(),\n                not(hasItem(\"about fedora\")));\n\n        projectsPage = projectsPage.setActiveFilterEnabled(false)\n                .setReadOnlyFilterEnabled(false)\n                .setObsoleteFilterEnabled(true);\n\n        projectsPage.waitForProjectVisibility(\"about fedora\", true);\n\n        assertThat(\"The project is now displayed\",\n                projectsPage.getProjectNamesOnCurrentPage(),\n                hasItem(\"about fedora\"));\n\n        projectsPage.logout();\n\n        assertThat(\"User cannot navigate to a project\", new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .goToProjects()\n                .getProjectNamesOnCurrentPage(),\n                not(hasItem(\"about fedora\")));\n    }","id":68327,"modified_method":"@Feature(summary = \"The administrator can set a project to obsolete\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 135846)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAProjectObsolete() throws Exception {\n        ProjectsPage projectsPage = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .archiveProject()\n                .goToProjects();\n\n        assertThat(projectsPage.getProjectNamesOnCurrentPage())\n                .doesNotContain(\"about fedora\")\n                .as(\"The project is not displayed\");\n\n        projectsPage = projectsPage.setActiveFilterEnabled(false)\n                .setReadOnlyFilterEnabled(false)\n                .setObsoleteFilterEnabled(true);\n\n        projectsPage.waitForProjectVisibility(\"about fedora\", true);\n\n        assertThat(projectsPage.getProjectNamesOnCurrentPage())\n                .contains(\"about fedora\")\n                .as(\"The project is now displayed\");\n\n        projectsPage.logout();\n\n        assertThat(new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .goToProjects()\n                .getProjectNamesOnCurrentPage())\n                .doesNotContain(\"about fedora\")\n                .as(\"User cannot navigate to the obsolete project\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAnObsoleteProjectAsActive() {\n        ProjectGeneralTab projectGeneralTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .archiveProject()\n                .goToProjects()\n                .setObsoleteFilterEnabled(true)\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .unarchiveProject();\n\n        assertThat(\"The archive button is now available\",\n                projectGeneralTab.isArchiveButtonAvailable());\n\n        projectGeneralTab.logout();\n\n        assertThat(\"Translator can view the project\", new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .getProjectName(),\n                equalTo(\"about fedora\"));\n\n    }","id":68328,"modified_method":"@Feature(summary = \"The administrator can set an obsolete project \" +\n            \"to active\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setAnObsoleteProjectAsActive() throws Exception {\n        ProjectGeneralTab projectGeneralTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .archiveProject()\n                .goToProjects()\n                .setObsoleteFilterEnabled(true)\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsGeneral()\n                .unarchiveProject();\n\n        assertThat(projectGeneralTab.isArchiveButtonAvailable())\n                .isTrue()\n                .as(\"The archive button is now available\");\n\n        projectGeneralTab.logout();\n\n        assertThat(new LoginWorkFlow()\n                .signIn(\"translator\", \"translator\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .getProjectName())\n                .isEqualTo(\"about fedora\")\n                .as(\"Translator can view the project\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void editProjectLanguages() {\n        ProjectLanguagesTab projectLanguagesTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab();\n\n        projectLanguagesTab.slightPause();\n\n        List<String> enabledLocaleList = projectLanguagesTab\n                .getEnabledLocaleList();\n\n        assertThat(\"The enabled list contains three languages\",\n                enabledLocaleList,\n                contains(\"French[fr]\", \"Hindi[hi]\", \"Polish[pl]\"));\n\n        assertThat(\"The enabled list does not contain \" +\n                \"'English (United States)[en-US]'\",\n                enabledLocaleList,\n                not(hasItem(\"English (United States)[en-US]\")));\n\n        projectLanguagesTab = projectLanguagesTab\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab()\n                .removeLocale(\"pl\");\n\n        enabledLocaleList = projectLanguagesTab\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab()\n                .getEnabledLocaleList();\n\n        assertThat(\"The enabled list does not contain 'US English'\",\n                enabledLocaleList,\n                not(hasItem(\"English (United States)[en-US]\")));\n\n        assertThat(\"The enabled list does not contain 'Polish'\",\n                enabledLocaleList,\n                not(hasItem(\"Polish[pl]\")));\n\n        enabledLocaleList = projectLanguagesTab\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab()\n                .enterSearchLanguage(\"en-US\")\n                .addLanguage(\"English (United States)[en-US]\")\n                .getEnabledLocaleList();\n\n        Assertions.assertThat(\n                enabledLocaleList).\n                contains(\"English (United States)[en-US]\",\n                        \"French[fr]\",\n                        \"Hindi[hi]\");\n    }","id":68329,"modified_method":"@Feature(summary = \"The administrator can edit the project languages\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void editProjectLanguages() throws Exception {\n        ProjectLanguagesTab projectLanguagesTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab();\n\n        projectLanguagesTab.slightPause();\n\n        List<String> enabledLocaleList = projectLanguagesTab\n                .getEnabledLocaleList();\n\n        assertThat(enabledLocaleList)\n                .contains(\"French[fr]\", \"Hindi[hi]\", \"Polish[pl]\")\n                .as(\"The enabled list contains three languages\");\n\n        assertThat(enabledLocaleList)\n                .doesNotContain(\"English (United States)[en-US]\")\n                .as(\"The enabled list does not contain \" +\n                        \"'English (United States)[en-US]'\");\n\n        projectLanguagesTab = projectLanguagesTab\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab()\n                .removeLocale(\"pl\");\n\n        enabledLocaleList = projectLanguagesTab\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab()\n                .getEnabledLocaleList();\n\n        assertThat(enabledLocaleList)\n                .doesNotContain(\"English (United States)[en-US]\")\n                .doesNotContain(\"Polish[pl]\")\n                .as(\"The enabled list does not contain 'US English' or Polish\");\n\n        enabledLocaleList = projectLanguagesTab\n                .gotoSettingsTab()\n                .gotoSettingsLanguagesTab()\n                .enterSearchLanguage(\"en-US\")\n                .addLanguage(\"English (United States)[en-US]\")\n                .getEnabledLocaleList();\n\n        Assertions.assertThat(enabledLocaleList)\n                .contains(\"English (United States)[en-US]\",\n                        \"French[fr]\",\n                        \"Hindi[hi]\")\n                .as(\"The enabled language list contains en-US, fr and hi\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setValidationOptions() {\n\n        ProjectTranslationTab projectTranslationTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsTranslationTab();\n\n        assertThat(\"The level for tabs is currently Warning\",\n                projectTranslationTab.isValidationLevel(\n                        \"Tab characters (\\\\t)\", \"Warning\"));\n\n        projectTranslationTab = projectTranslationTab\n                .setValidationLevel(\"HTML/XML tags\", \"Error\")\n                .setValidationLevel(\"Java variables\", \"Error\")\n                .setValidationLevel(\"Leading/trailing newline (\\\\n)\", \"Error\")\n                .setValidationLevel(\"Printf variables\", \"Error\")\n                .setValidationLevel(\"Tab characters (\\\\t)\", \"Error\")\n                .setValidationLevel(\"XML entity reference\", \"Error\");\n\n\n        assumeTrue(\"RHBZ1017458\", projectTranslationTab.hasNoCriticalErrors());\n\n        projectTranslationTab = projectTranslationTab.goToHomePage()\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsTranslationTab();\n\n        assertThat(\"The validation changes were saved\", projectTranslationTab\n                .isValidationLevel(\"HTML/XML tags\", \"Error\"));\n        assertThat(\"The validation changes were saved\", projectTranslationTab\n                .isValidationLevel(\"Java variables\", \"Error\"));\n        assertThat(\"The validation changes were saved\", projectTranslationTab\n                .isValidationLevel(\"Leading/trailing newline (\\\\n)\", \"Error\"));\n        assertThat(\"The validation changes were saved\", projectTranslationTab\n                .isValidationLevel(\"Printf variables\", \"Error\"));\n        assertThat(\"The validation changes were saved\", projectTranslationTab\n                .isValidationLevel(\"Tab characters (\\\\t)\", \"Error\"));\n        assertThat(\"The validation changes were saved\", projectTranslationTab\n                .isValidationLevel(\"XML entity reference\", \"Error\"));\n    }","id":68330,"modified_method":"@Feature(summary = \"The administrator can change the validation levels \" +\n            \"for a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void setValidationOptions() throws Exception {\n\n        ProjectTranslationTab projectTranslationTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsTranslationTab();\n\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Tab characters (\\\\t)\", \"Warning\"))\n                .isTrue()\n                .as(\"The level for tabs is currently Warning\");\n\n        projectTranslationTab = projectTranslationTab\n                .setValidationLevel(\"HTML/XML tags\", \"Error\")\n                .setValidationLevel(\"Java variables\", \"Error\")\n                .setValidationLevel(\"Leading/trailing newline (\\\\n)\", \"Error\")\n                .setValidationLevel(\"Printf variables\", \"Error\")\n                .setValidationLevel(\"Tab characters (\\\\t)\", \"Error\")\n                .setValidationLevel(\"XML entity reference\", \"Error\");\n\n\n        assumeTrue(\"RHBZ1017458\", projectTranslationTab.hasNoCriticalErrors());\n\n        projectTranslationTab = projectTranslationTab.goToHomePage()\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsTranslationTab();\n\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"HTML/XML tags\", \"Error\"))\n                .isTrue()\n                .as(\"The validation changes were saved\");\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Java variables\", \"Error\"))\n                .isTrue()\n                .as(\"The validation changes were saved\");\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Leading/trailing newline (\\\\n)\", \"Error\"))\n                .isTrue()\n                .as(\"The validation changes were saved\");\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Printf variables\", \"Error\"))\n                .isTrue()\n                .as(\"The validation changes were saved\");\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Tab characters (\\\\t)\", \"Error\"))\n                .isTrue()\n                .as(\"The validation changes were saved\");\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"XML entity reference\", \"Error\"))\n                .isTrue()\n                .as(\"The validation changes were saved\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void printfAndPositionalPrintfAreExclusive() {\n        ProjectTranslationTab projectTranslationTab = new LoginWorkFlow()\n                        .signIn(\"admin\", \"admin\")\n                        .goToProjects()\n                        .goToProject(\"about fedora\")\n                        .gotoSettingsTab()\n                        .gotoSettingsTranslationTab()\n                        .setValidationLevel(\n                                \"Positional printf (XSI extension)\", \"Error\");\n\n        projectTranslationTab.expectNotification(\n                \"Updated validation Positional printf (XSI extension) to Error.\");\n\n        assertThat(\"The Positional printf level is Error\", projectTranslationTab\n                .isValidationLevel(\n                        \"Positional printf (XSI extension)\", \"Error\"));\n\n        assertThat(\"The Printf level is Off\", projectTranslationTab\n                .isValidationLevel(\"Printf variables\", \"Off\"));\n\n        projectTranslationTab = projectTranslationTab\n                .setValidationLevel(\"Printf variables\", \"Error\");\n\n        projectTranslationTab.expectNotification(\n                \"Updated validation Printf variables to Error.\");\n\n        assertThat(\"The Printf level is Error\", projectTranslationTab\n                .isValidationLevel(\"Printf variables\", \"Error\"));\n\n        assertThat(\"The Positional printf level is Off\", projectTranslationTab\n                .isValidationLevel(\n                        \"Positional printf (XSI extension)\", \"Off\"));\n    }","id":68331,"modified_method":"@Feature(summary = \"The system will only allow one of the two Printf \" +\n            \"validation options to be active at one time\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void printfAndPositionalPrintfAreExclusive() throws Exception {\n        ProjectTranslationTab projectTranslationTab = new LoginWorkFlow()\n                .signIn(\"admin\", \"admin\")\n                .goToProjects()\n                .goToProject(\"about fedora\")\n                .gotoSettingsTab()\n                .gotoSettingsTranslationTab()\n                .setValidationLevel(\n                        \"Positional printf (XSI extension)\", \"Error\");\n\n        projectTranslationTab.expectNotification(\"Updated validation \" +\n                \"Positional printf (XSI extension) to Error.\");\n\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Positional printf (XSI extension)\", \"Error\"))\n                .isTrue()\n                .as(\"The Positional printf level is Error\");\n\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Printf variables\", \"Off\"))\n                .isTrue()\n                .as(\"The Printf level is Off\");\n\n        projectTranslationTab = projectTranslationTab\n                .setValidationLevel(\"Printf variables\", \"Error\");\n\n        projectTranslationTab.expectNotification(\"Updated validation \" +\n                \"Printf variables to Error.\");\n\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Printf variables\", \"Error\"))\n                .isTrue()\n                .as(\"The Printf level is Error\");\n\n        assertThat(projectTranslationTab\n                .isValidationLevel(\"Positional printf (XSI extension)\", \"Off\"))\n                .isTrue()\n                .as(\"The Positional printf level is Off\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"public List<WebElement> getSettingsMaintainersElement() {\n        return getDriver()\n                .findElement(By.id(\"settings-permissions-form\"))\n                .findElement(By.id(\"maintainers-list\"))\n                .findElements(By.tagName(\"li\"));\n    }","id":68332,"modified_method":"public List<WebElement> getSettingsMaintainersElement() {\n        return getDriver()\n                .findElement(By.id(\"settings-permissions-form\"))\n                .findElement(By.id(\"maintainers-list\"))\n                .findElements(By.className(\"reveal--list-item\"));\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"private String getUsername(WebElement maintainersLi) {\n        return maintainersLi\n                .findElement(By.xpath(\".//span[@class='txt--meta']\")).getText()\n                .replace(\"@\", \"\");\n    }","id":68333,"modified_method":"private String getUsername(WebElement maintainersLi) {\n        return maintainersLi\n                .findElement(By.className(\"txt--meta\")).getText()\n                .replace(\"@\", \"\");\n    }","commit_id":"bd0d0645015696bb7a3ccd947b50f03e6c1b9131","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n  public void shouldCreateUID() {\n    Project project = new Project(\"my_project\");\n    assertThat(DefaultIndex.createUID(project, project), is(\"my_project\"));\n\n    JavaPackage javaPackage = new JavaPackage(\"org.foo\");\n    assertThat(DefaultIndex.createUID(project, javaPackage), is(\"my_project:org.foo\"));\n\n    Library library = new Library(\"junit:junit\", \"4.7\");\n    assertThat(DefaultIndex.createUID(project, library), is(\"junit:junit\"));\n  }","id":68334,"modified_method":"@Test\n  public void shouldCreateUID() {\n    Project project = new Project(\"my_project\");\n    assertThat(DefaultIndex.createUID(project, project)).isEqualTo(\"my_project\");\n\n    JavaPackage javaPackage = new JavaPackage(\"org.foo\");\n    assertThat(DefaultIndex.createUID(project, javaPackage)).isEqualTo(\"my_project:org.foo\");\n\n    Library library = new Library(\"junit:junit\", \"4.7\");\n    assertThat(DefaultIndex.createUID(project, library)).isEqualTo(\"junit:junit\");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotIndexResourceIfParentNotIndexed() {\n    Directory directory = new Directory(\"org/other\");\n    File file = new File(\"org/foo/Bar.java\");\n\n    assertThat(index.index(file, directory), is(false));\n\n    File fileRef = new File(\"org/foo/Bar.java\");\n    assertThat(index.isIndexed(directory, true), is(false));\n    assertThat(index.isIndexed(fileRef, true), is(false));\n    assertThat(index.isExcluded(fileRef), is(false));\n    assertThat(index.getChildren(fileRef).size(), is(0));\n    assertThat(index.getParent(fileRef), nullValue());\n  }","id":68335,"modified_method":"@Test\n  public void shouldNotIndexResourceIfParentNotIndexed() {\n    Directory directory = new Directory(\"org/other\");\n    File file = new File(\"org/foo/Bar.java\");\n\n    assertThat(index.index(file, directory)).isFalse();\n\n    File fileRef = new File(\"org/foo/Bar.java\");\n    assertThat(index.isIndexed(directory, true)).isFalse();\n    assertThat(index.isIndexed(fileRef, true)).isFalse();\n    assertThat(index.isExcluded(fileRef)).isFalse();\n    assertThat(index.getChildren(fileRef)).isEmpty();\n    assertThat(index.getParent(fileRef)).isNull();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2107\n   */\n  @Test\n  public void shouldNotFailWhenSavingViolationOnNullRule() {\n    File file = new File(\"org/foo/Bar.java\");\n    Violation violation = Violation.create((Rule) null, file);\n    index.addViolation(violation);\n\n    assertThat(index.getViolations(file).size(), is(0));\n  }","id":68336,"modified_method":"/**\n   * See http://jira.codehaus.org/browse/SONAR-2107\n   */\n  @Test\n  public void shouldNotFailWhenSavingViolationOnNullRule() {\n    File file = new File(\"org/foo/Bar.java\");\n    Violation violation = Violation.create((Rule) null, file);\n    index.addViolation(violation);\n\n    assertThat(index.getViolations(file)).isEmpty();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * See https://jira.codehaus.org/browse/SONAR-3583\n   */\n  @Test\n  public void should_ignore_violation_on_unknown_rules() {\n    Rule ruleWithoutID = Rule.create(\"repoKey\", \"ruleKey\", \"Rule\");\n\n    File file = new File(\"org/foo/Bar.java\");\n    Violation violation = Violation.create(ruleWithoutID, file);\n    index.addViolation(violation);\n\n    assertThat(index.getViolations(file).size(), is(0));\n  }","id":68337,"modified_method":"/**\n   * See https://jira.codehaus.org/browse/SONAR-3583\n   */\n  @Test\n  public void should_ignore_violation_on_unknown_rules() {\n    Rule ruleWithoutID = Rule.create(\"repoKey\", \"ruleKey\", \"Rule\");\n\n    File file = new File(\"org/foo/Bar.java\");\n    Violation violation = Violation.create(ruleWithoutID, file);\n    index.addViolation(violation);\n\n    assertThat(index.getViolations(file)).isEmpty();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldIndexParentOfDeprecatedFiles() {\n    File file = new File(\"org/foo/Bar.java\");\n    assertThat(index.index(file), is(true));\n\n    Directory reference = new Directory(\"org/foo\");\n    assertThat(index.getResource(reference).getName(), is(\"org/foo\"));\n    assertThat(index.isIndexed(reference, true), is(true));\n    assertThat(index.isExcluded(reference), is(false));\n    assertThat(index.getChildren(reference).size(), is(1));\n    assertThat(index.getParent(reference), is(Project.class));\n  }","id":68338,"modified_method":"@Test\n  public void shouldIndexParentOfDeprecatedFiles() {\n    File file = new File(\"org/foo/Bar.java\");\n    assertThat(index.index(file)).isTrue();\n\n    Directory reference = new Directory(\"org/foo\");\n    assertThat(index.getResource(reference).getName()).isEqualTo(\"org/foo\");\n    assertThat(index.isIndexed(reference, true)).isTrue();\n    assertThat(index.isExcluded(reference)).isFalse();\n    assertThat(index.getChildren(reference)).hasSize(1);\n    assertThat(index.getParent(reference)).isInstanceOf(Project.class);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldIndexLibraryOutsideProjectTree() {\n    Library lib = new Library(\"junit\", \"4.8\");\n    assertThat(index.index(lib), is(true));\n\n    Library reference = new Library(\"junit\", \"4.8\");\n    assertThat(index.getResource(reference).getQualifier(), is(Qualifiers.LIBRARY));\n    assertThat(index.isIndexed(reference, true), is(true));\n    assertThat(index.isExcluded(reference), is(false));\n  }","id":68339,"modified_method":"@Test\n  public void shouldIndexLibraryOutsideProjectTree() {\n    Library lib = new Library(\"junit\", \"4.8\");\n    assertThat(index.index(lib)).isTrue();\n\n    Library reference = new Library(\"junit\", \"4.8\");\n    assertThat(index.getResource(reference).getQualifier()).isEqualTo(Qualifiers.LIBRARY);\n    assertThat(index.isIndexed(reference, true)).isTrue();\n    assertThat(index.isExcluded(reference)).isFalse();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldIndexResourceWhenAddingMeasure() {\n    Resource dir = new Directory(\"org/foo\");\n    index.addMeasure(dir, new Measure(\"ncloc\").setValue(50.0));\n\n    assertThat(index.isIndexed(dir, true), is(true));\n    assertThat(index.getMeasures(dir, MeasuresFilters.metric(\"ncloc\")).getIntValue(), is(50));\n  }","id":68340,"modified_method":"@Test\n  public void shouldIndexResourceWhenAddingMeasure() {\n    Resource dir = new Directory(\"org/foo\");\n    index.addMeasure(dir, new Measure(\"ncloc\").setValue(50.0));\n\n    assertThat(index.isIndexed(dir, true)).isTrue();\n    assertThat(index.getMeasures(dir, MeasuresFilters.metric(\"ncloc\")).getIntValue()).isEqualTo(50);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Only a warning is logged when index is locked.\n   */\n  @Test\n  public void shouldIndexEvenIfLocked() {\n    lock.lock();\n\n    Directory dir = new Directory(\"org/foo\");\n    assertThat(index.index(dir), is(true));\n    assertThat(index.isIndexed(dir, true), is(true));\n  }","id":68341,"modified_method":"/**\n   * Only a warning is logged when index is locked.\n   */\n  @Test\n  public void shouldIndexEvenIfLocked() {\n    lock.lock();\n\n    Directory dir = new Directory(\"org/foo\");\n    assertThat(index.index(dir)).isTrue();\n    assertThat(index.isIndexed(dir, true)).isTrue();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void createIndex() {\n    lock = new DefaultResourceCreationLock(new Settings());\n    MetricFinder metricFinder = mock(MetricFinder.class);\n    when(metricFinder.findByKey(\"ncloc\")).thenReturn(CoreMetrics.NCLOC);\n    ruleFinder = mock(RuleFinder.class);\n\n    index = new DefaultIndex(mock(PersistenceManager.class), lock, mock(ProjectTree.class), metricFinder, mock(ScanGraph.class),\n      mock(DeprecatedViolations.class));\n    Project project = new Project(\"project\");\n\n    ResourceFilter filter = new ResourceFilter() {\n\n      public boolean isIgnored(Resource resource) {\n        return StringUtils.containsIgnoreCase(resource.getKey(), \"excluded\");\n      }\n    };\n    RulesProfile rulesProfile = RulesProfile.create();\n    rule = Rule.create(\"repoKey\", \"ruleKey\", \"Rule\");\n    rule.setId(1);\n    rulesProfile.activateRule(rule, null);\n    index.setCurrentProject(project, new ResourceFilters(new ResourceFilter[]{filter}), mock(ScanIssues.class));\n    index.doStart(project);\n  }","id":68342,"modified_method":"@Before\n  public void createIndex() {\n    deprecatedViolations = mock(DeprecatedViolations.class);\n    lock = new DefaultResourceCreationLock(new Settings());\n    MetricFinder metricFinder = mock(MetricFinder.class);\n    when(metricFinder.findByKey(\"ncloc\")).thenReturn(CoreMetrics.NCLOC);\n    ruleFinder = mock(RuleFinder.class);\n\n    index = new DefaultIndex(mock(PersistenceManager.class), lock, mock(ProjectTree.class), metricFinder, mock(ScanGraph.class), deprecatedViolations);\n    Project project = new Project(\"project\");\n\n    ResourceFilter filter = new ResourceFilter() {\n\n      public boolean isIgnored(Resource resource) {\n        return StringUtils.containsIgnoreCase(resource.getKey(), \"excluded\");\n      }\n    };\n    RulesProfile rulesProfile = RulesProfile.create();\n    rule = Rule.create(\"repoKey\", \"ruleKey\", \"Rule\");\n    rule.setId(1);\n    rulesProfile.activateRule(rule, null);\n    index.setCurrentProject(project, new ResourceFilters(new ResourceFilter[]{filter}), mock(ScanIssues.class));\n    index.doStart(project);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldBeExcluded() {\n    File file = new File(\"org/foo/ExcludedBar.java\");\n    assertThat(index.index(file), is(false));\n    assertThat(index.isIndexed(file, true), is(true));\n    assertThat(index.isIndexed(file, false), is(false));\n    assertThat(index.isExcluded(file), is(true));\n  }","id":68343,"modified_method":"@Test\n  public void shouldBeExcluded() {\n    File file = new File(\"org/foo/ExcludedBar.java\");\n    assertThat(index.index(file)).isFalse();\n    assertThat(index.isIndexed(file, true)).isTrue();\n    assertThat(index.isIndexed(file, false)).isFalse();\n    assertThat(index.isExcluded(file)).isTrue();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldIndexTreeOfResources() {\n    Directory directory = new Directory(\"org/foo\");\n    File file = new File(\"org/foo/Bar.java\");\n    file.setLanguage(Java.INSTANCE);\n\n    assertThat(index.index(directory), is(true));\n    assertThat(index.index(file, directory), is(true));\n\n    File fileRef = new File(\"org/foo/Bar.java\");\n    assertThat(index.getResource(fileRef).getKey(), is(\"org/foo/Bar.java\"));\n    assertThat(index.getResource(fileRef).getLanguage(), is((Language) Java.INSTANCE));\n    assertThat(index.isIndexed(fileRef, true), is(true));\n    assertThat(index.isExcluded(fileRef), is(false));\n    assertThat(index.getChildren(fileRef).size(), is(0));\n    assertThat(index.getParent(fileRef), is(Directory.class));\n  }","id":68344,"modified_method":"@Test\n  public void shouldIndexTreeOfResources() {\n    Directory directory = new Directory(\"org/foo\");\n    File file = new File(\"org/foo/Bar.java\");\n    file.setLanguage(Java.INSTANCE);\n\n    assertThat(index.index(directory)).isTrue();\n    assertThat(index.index(file, directory)).isTrue();\n\n    File fileRef = new File(\"org/foo/Bar.java\");\n    assertThat(index.getResource(fileRef).getKey()).isEqualTo(\"org/foo/Bar.java\");\n    assertThat(index.getResource(fileRef).getLanguage().getKey()).isEqualTo(\"java\");\n    assertThat(index.isIndexed(fileRef, true)).isTrue();\n    assertThat(index.isExcluded(fileRef)).isFalse();\n    assertThat(index.getChildren(fileRef)).isEmpty();\n    assertThat(index.getParent(fileRef)).isInstanceOf(Directory.class);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    updater = mock(IssueUpdater.class);\n    changeDao = mock(IssueChangeDao.class);\n    storage = mock(IssueStorage.class);\n\n    finder = mock(DefaultIssueFinder.class);\n    Issue issue = mock(Issue.class);\n    IssueQueryResult result = new DefaultIssueQueryResult(Lists.newArrayList(issue));\n    stub(finder.find(any(IssueQuery.class))).toReturn(result);\n\n    issueNotifications = mock(IssueNotifications.class);\n\n    issueCommentService = new IssueCommentService(updater, changeDao, storage, finder, issueNotifications);\n  }","id":68345,"modified_method":"@Before\n  public void setUp() {\n    updater = mock(IssueUpdater.class);\n    changeDao = mock(IssueChangeDao.class);\n    storage = mock(IssueStorage.class);\n\n    finder = mock(DefaultIssueFinder.class);\n    Issue issue = mock(Issue.class);\n    IssueQueryResult result = new DefaultIssueQueryResult(newArrayList(issue));\n    stub(finder.find(any(IssueQuery.class))).toReturn(result);\n\n    issueNotifications = mock(IssueNotifications.class);\n\n    issueCommentService = new IssueCommentService(updater, changeDao, storage, finder, issueNotifications);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_prevent_updating_empty_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.editComment(\"myComment\", \"\", MockUserSession.get());\n  }","id":68346,"modified_method":"@Test\n  public void should_prevent_updating_empty_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.editComment(\"ABCD\", \"\", MockUserSession.get());\n\n    verify(changeDao, never()).update(any(IssueChangeDto.class));\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_prevent_updating_null_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.editComment(\"myComment\", null, MockUserSession.get());\n  }","id":68347,"modified_method":"@Test\n  public void should_prevent_updating_null_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.editComment(\"ABCD\", null, MockUserSession.get());\n\n    verify(changeDao, never()).update(any(IssueChangeDto.class));\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_prevent_adding_empty_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.addComment(\"myIssue\", \" \", MockUserSession.get());\n  }","id":68348,"modified_method":"@Test\n  public void should_prevent_adding_empty_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.addComment(\"myIssue\", \" \", MockUserSession.get());\n\n    verify(updater, never()).addComment(any(DefaultIssue.class), anyString(), any(IssueChangeContext.class));\n    verify(storage, never()).save(any(DefaultIssue.class));\n    verify(issueNotifications, never()).sendChanges(any(DefaultIssue.class), any(IssueChangeContext.class), any(IssueQueryResult.class), anyString());\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_prevent_adding_null_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.addComment(\"myIssue\", null, MockUserSession.get());\n  }","id":68349,"modified_method":"@Test\n  public void should_prevent_adding_null_comment() throws Exception {\n    throwable.expect(BadRequestException.class);\n\n    issueCommentService.addComment(\"myIssue\", null, MockUserSession.get());\n\n    verify(updater, never()).addComment(any(DefaultIssue.class), anyString(), any(IssueChangeContext.class));\n    verify(storage, never()).save(any(DefaultIssue.class));\n    verify(issueNotifications, never()).sendChanges(any(DefaultIssue.class), any(IssueChangeContext.class), any(IssueQueryResult.class), anyString());\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@BeforeClass\n  public static void setUpUser() {\n    MockUserSession.set().setLogin(\"admin\").setPermissions(Permission.SYSTEM_ADMIN);\n  }","id":68350,"modified_method":"@Before\n  public void setUpUser() {\n    MockUserSession.set().setLogin(\"admin\").setPermissions(Permission.SYSTEM_ADMIN);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_build_query() throws Exception {\n    IssueQuery query = IssueQuery.builder()\n      .issueKeys(newArrayList(\"ABCDE\"))\n      .severities(newArrayList(Severity.BLOCKER))\n      .statuses(newArrayList(Issue.STATUS_RESOLVED))\n      .resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE))\n      .components(newArrayList(\"org/struts/Action.java\"))\n      .componentRoots(newArrayList(\"org.struts:core\"))\n      .rules(newArrayList(RuleKey.of(\"squid\", \"AvoidCycle\")))\n      .actionPlans(newArrayList(\"AP1\", \"AP2\"))\n      .reporters(newArrayList(\"crunky\"))\n      .assignees(newArrayList(\"gargantua\"))\n      .assigned(true)\n      .createdAfter(new Date())\n      .createdBefore(new Date())\n      .planned(true)\n      .resolved(true)\n      .sort(IssueQuery.SORT_BY_ASSIGNEE)\n      .asc(true)\n      .pageSize(10)\n      .pageIndex(2)\n      .requiredRole(UserRole.USER)\n      .build();\n    assertThat(query.issueKeys()).containsOnly(\"ABCDE\");\n    assertThat(query.severities()).containsOnly(Severity.BLOCKER);\n    assertThat(query.statuses()).containsOnly(Issue.STATUS_RESOLVED);\n    assertThat(query.resolutions()).containsOnly(Issue.RESOLUTION_FALSE_POSITIVE);\n    assertThat(query.components()).containsOnly(\"org/struts/Action.java\");\n    assertThat(query.componentRoots()).containsOnly(\"org.struts:core\");\n    assertThat(query.reporters()).containsOnly(\"crunky\");\n    assertThat(query.assignees()).containsOnly(\"gargantua\");\n    assertThat(query.assigned()).isTrue();\n    assertThat(query.rules()).containsOnly(RuleKey.of(\"squid\", \"AvoidCycle\"));\n    assertThat(query.actionPlans()).containsOnly(\"AP1\", \"AP2\");\n    assertThat(query.createdAfter()).isNotNull();\n    assertThat(query.createdBefore()).isNotNull();\n    assertThat(query.planned()).isTrue();\n    assertThat(query.resolved()).isTrue();\n    assertThat(query.sort()).isEqualTo(IssueQuery.SORT_BY_ASSIGNEE);\n    assertThat(query.asc()).isTrue();\n    assertThat(query.pageSize()).isEqualTo(10);\n    assertThat(query.pageIndex()).isEqualTo(2);\n    assertThat(query.requiredRole()).isEqualTo(UserRole.USER);\n  }","id":68351,"modified_method":"@Test\n  public void should_build_query() throws Exception {\n    IssueQuery query = IssueQuery.builder()\n      .issueKeys(newArrayList(\"ABCDE\"))\n      .severities(newArrayList(Severity.BLOCKER))\n      .statuses(newArrayList(Issue.STATUS_RESOLVED))\n      .resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE))\n      .components(newArrayList(\"org/struts/Action.java\"))\n      .componentRoots(newArrayList(\"org.struts:core\"))\n      .rules(newArrayList(RuleKey.of(\"squid\", \"AvoidCycle\")))\n      .actionPlans(newArrayList(\"AP1\", \"AP2\"))\n      .reporters(newArrayList(\"crunky\"))\n      .assignees(newArrayList(\"gargantua\"))\n      .assigned(true)\n      .createdAfter(new Date())\n      .createdBefore(new Date())\n      .createdAt(new Date())\n      .planned(true)\n      .resolved(true)\n      .sort(IssueQuery.SORT_BY_ASSIGNEE)\n      .asc(true)\n      .pageSize(10)\n      .pageIndex(2)\n      .requiredRole(UserRole.USER)\n      .build();\n    assertThat(query.issueKeys()).containsOnly(\"ABCDE\");\n    assertThat(query.severities()).containsOnly(Severity.BLOCKER);\n    assertThat(query.statuses()).containsOnly(Issue.STATUS_RESOLVED);\n    assertThat(query.resolutions()).containsOnly(Issue.RESOLUTION_FALSE_POSITIVE);\n    assertThat(query.components()).containsOnly(\"org/struts/Action.java\");\n    assertThat(query.componentRoots()).containsOnly(\"org.struts:core\");\n    assertThat(query.reporters()).containsOnly(\"crunky\");\n    assertThat(query.assignees()).containsOnly(\"gargantua\");\n    assertThat(query.assigned()).isTrue();\n    assertThat(query.rules()).containsOnly(RuleKey.of(\"squid\", \"AvoidCycle\"));\n    assertThat(query.actionPlans()).containsOnly(\"AP1\", \"AP2\");\n    assertThat(query.createdAfter()).isNotNull();\n    assertThat(query.createdBefore()).isNotNull();\n    assertThat(query.createdAt()).isNotNull();\n    assertThat(query.planned()).isTrue();\n    assertThat(query.resolved()).isTrue();\n    assertThat(query.sort()).isEqualTo(IssueQuery.SORT_BY_ASSIGNEE);\n    assertThat(query.asc()).isTrue();\n    assertThat(query.pageSize()).isEqualTo(10);\n    assertThat(query.pageIndex()).isEqualTo(2);\n    assertThat(query.requiredRole()).isEqualTo(UserRole.USER);\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_build_query_without_dates() throws Exception {\n    IssueQuery query = IssueQuery.builder()\n      .issueKeys(newArrayList(\"ABCDE\"))\n      .build();\n\n    assertThat(query.issueKeys()).containsOnly(\"ABCDE\");\n    assertThat(query.createdAfter()).isNull();\n    assertThat(query.createdBefore()).isNull();\n  }","id":68352,"modified_method":"@Test\n  public void should_build_query_without_dates() throws Exception {\n    IssueQuery query = IssueQuery.builder()\n      .issueKeys(newArrayList(\"ABCDE\"))\n      .createdAfter(null)\n      .createdBefore(null)\n      .createdAt(null)\n      .build();\n\n    assertThat(query.issueKeys()).containsOnly(\"ABCDE\");\n    assertThat(query.createdAfter()).isNull();\n    assertThat(query.createdBefore()).isNull();\n    assertThat(query.createdAt()).isNull();\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForDate() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DATE, new Date());\n    assertThat(pastSnapshot.toString(), startsWith(\"Compare to date \"));\n  }","id":68353,"modified_method":"@Test\n  public void testToStringForDate() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DATE, new Date());\n    assertThat(pastSnapshot.toString()).startsWith(\"Compare to date \");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForPreviousAnalysis() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS, new Date(), new Snapshot().setCreatedAt(new Date()));\n    assertThat(pastSnapshot.toString(), startsWith(\"Compare to previous analysis \"));\n  }","id":68354,"modified_method":"@Test\n  public void testToStringForPreviousAnalysis() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS, new Date(), new Snapshot().setCreatedAt(new Date()));\n    assertThat(pastSnapshot.toString()).startsWith(\"Compare to previous analysis \");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForDateWithSnapshot() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DATE, new Date(), new Snapshot().setCreatedAt(new Date()));\n    assertThat(pastSnapshot.toString(), startsWith(\"Compare to date \"));\n  }","id":68355,"modified_method":"@Test\n  public void testToStringForDateWithSnapshot() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DATE, new Date(), new Snapshot().setCreatedAt(new Date()));\n    assertThat(pastSnapshot.toString()).startsWith(\"Compare to date \");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForVersion() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_VERSION, new Date()).setModeParameter(\"2.3\");\n    assertThat(pastSnapshot.toString(), startsWith(\"Compare to version 2.3\"));\n  }","id":68356,"modified_method":"@Test\n  public void testToStringForVersion() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_VERSION, new Date()).setModeParameter(\"2.3\");\n    assertThat(pastSnapshot.toString()).startsWith(\"Compare to version 2.3\");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForVersionWithoutDate() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_VERSION).setModeParameter(\"2.3\");\n    assertThat(pastSnapshot.toString(), equalTo(\"Compare to version 2.3\"));\n  }","id":68357,"modified_method":"@Test\n  public void testToStringForVersionWithoutDate() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_VERSION).setModeParameter(\"2.3\");\n    assertThat(pastSnapshot.toString()).isEqualTo(\"Compare to version 2.3\");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForPreviousAnalysisWithoutDate() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);\n    assertThat(pastSnapshot.toString(), equalTo(\"Compare to previous analysis\"));\n  }","id":68358,"modified_method":"@Test\n  public void testToStringForPreviousAnalysisWithoutDate() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);\n    assertThat(pastSnapshot.toString()).isEqualTo(\"Compare to previous analysis\");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForNumberOfDays() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DAYS, new Date()).setModeParameter(\"30\");\n    assertThat(pastSnapshot.toString(), startsWith(\"Compare over 30 days (\"));\n  }","id":68359,"modified_method":"@Test\n  public void testToStringForNumberOfDays() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DAYS, new Date()).setModeParameter(\"30\");\n    assertThat(pastSnapshot.toString()).startsWith(\"Compare over 30 days (\");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testToStringForNumberOfDaysWithSnapshot() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DAYS, new Date(), new Snapshot().setCreatedAt(new Date())).setModeParameter(\"30\");\n    assertThat(pastSnapshot.toString(), startsWith(\"Compare over 30 days (\"));\n  }","id":68360,"modified_method":"@Test\n  public void testToStringForNumberOfDaysWithSnapshot() {\n    PastSnapshot pastSnapshot = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_DAYS, new Date(), new Snapshot().setCreatedAt(new Date())).setModeParameter(\"30\");\n    assertThat(pastSnapshot.toString()).startsWith(\"Compare over 30 days (\");\n  }","commit_id":"ac37e02d6d3d99e3e6acd3557e9a3fc202fe742f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void sequenceNameShouldFollowRailsConventions() {\n    Properties props = new Properties();\n    props.setProperty(PersistentIdentifierGenerator.TABLE, \"my_table\");\n    props.setProperty(PersistentIdentifierGenerator.PK, \"id\");\n\n    PostgreSQLSequenceGenerator generator = new PostgreSQLSequenceGenerator();\n    generator.configure(null, props, new PostgreSql.PostgreSQLWithDecimalDialect());\n    assertThat(generator.getSequenceName(), is(\"my_table_id_seq\"));\n  }","id":68361,"modified_method":"@Test\n  public void sequenceNameShouldFollowRailsConventions() {\n    Properties props = new Properties();\n    props.setProperty(PersistentIdentifierGenerator.TABLE, \"my_table\");\n    props.setProperty(PersistentIdentifierGenerator.PK, \"id\");\n\n    PostgreSQLSequenceGenerator generator = new PostgreSQLSequenceGenerator();\n    generator.configure(null, props, new PostgreSql.PostgreSQLWithDecimalDialect());\n    assertThat(generator.getSequenceName()).isEqualTo(\"my_table_id_seq\");\n  }","commit_id":"169c63d511d2f657520c0c301da6ba984fb3b253","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String pluginKey = getPluginKey(request);\n    String resource = getResourcePath(request);\n\n    DefaultServerPluginRepository pluginRepository = Platform.getInstance().getContainer().getComponentByType(DefaultServerPluginRepository.class);\n    ClassLoader classLoader = pluginRepository.getClassLoader(pluginKey);\n    if (classLoader == null) {\n      LOG.error(\"Plugin not found: \" + pluginKey);\n      response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      return;\n    }\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      in = classLoader.getResourceAsStream(resource);\n      if (in != null) {\n        out = response.getOutputStream();\n        IOUtils.copy(in, out);\n      } else {\n        LOG.error(\"Unable to find resource '\" + resource + \"' in plugin '\" + pluginKey + \"'\");\n        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to load static resource '\" + resource + \"' from plugin '\" + pluginKey + \"'\", e);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } finally {\n      IOUtils.closeQuietly(in);\n      IOUtils.closeQuietly(out);\n    }\n  }","id":68362,"modified_method":"@Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String pluginKey = getPluginKey(request);\n    String resource = getResourcePath(request);\n\n    DefaultServerPluginRepository pluginRepository = Platform.getInstance().getContainer().getComponentByType(DefaultServerPluginRepository.class);\n    ClassLoader classLoader = pluginRepository.getClassLoader(pluginKey);\n    if (classLoader == null) {\n      LOG.error(\"Plugin not found: \" + pluginKey);\n      response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      return;\n    }\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      in = classLoader.getResourceAsStream(resource);\n      if (in != null) {\n        out = response.getOutputStream();\n        IOUtils.copy(in, out);\n        completeContentType(response, resource);\n\n      } else {\n        LOG.error(\"Unable to find resource '\" + resource + \"' in plugin '\" + pluginKey + \"'\");\n        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to load static resource '\" + resource + \"' from plugin '\" + pluginKey + \"'\", e);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } finally {\n      IOUtils.closeQuietly(in);\n      IOUtils.closeQuietly(out);\n    }\n  }","commit_id":"5bcb19e0fd911170206ab574eb69d4b953a64e00","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDetermineResourcePath() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getResourcePath(request), is(\"static/image.png\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getResourcePath(request), is(\"static/images/image.png\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getResourcePath(request), is(\"static/\"));\n  }","id":68363,"modified_method":"@Test\n  public void shouldDetermineResourcePath() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getResourcePath(request)).isEqualTo(\"static/image.png\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getResourcePath(request)).isEqualTo(\"static/images/image.png\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getResourcePath(request)).isEqualTo(\"static/\");\n  }","commit_id":"5bcb19e0fd911170206ab574eb69d4b953a64e00","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDeterminePluginKey() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getPluginKey(request), is(\"myplugin\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getPluginKey(request), is(\"myplugin\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getPluginKey(request), is(\"myplugin\"));\n  }","id":68364,"modified_method":"@Test\n  public void shouldDeterminePluginKey() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getPluginKey(request)).isEqualTo(\"myplugin\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getPluginKey(request)).isEqualTo(\"myplugin\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getPluginKey(request)).isEqualTo(\"myplugin\");\n  }","commit_id":"5bcb19e0fd911170206ab574eb69d4b953a64e00","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * @param optionalSeverity if null, then the default rule severity is used\n   */\n  public ActiveRule activateRule(Rule rule, RulePriority optionalSeverity) {\n    ActiveRule activeRule = new ActiveRule();\n    activeRule.setRule(rule);\n    activeRule.setRulesProfile(this);\n    activeRule.setSeverity(optionalSeverity == null ? rule.getSeverity() : optionalSeverity);\n    activeRules.add(activeRule);\n    return activeRule;\n  }","id":68365,"modified_method":"/**\n   * @param optionalSeverity if null, then the default rule severity is used\n   */\n  public ActiveRule activateRule(final Rule rule, RulePriority optionalSeverity) {\n    if (Iterables.any(activeRules, new Predicate<ActiveRule>() {\n      @Override\n      public boolean apply(ActiveRule input) {\n        return input.getRule().equals(rule);\n      }\n    })){\n      throw new IllegalStateException(String.format(\"The rule '%s:%s' is already activated on the profile '%s' (language '%s')\",\n        rule.getRepositoryKey(), rule.getKey(), getName(), getLanguage()));\n    }\n    ActiveRule activeRule = new ActiveRule();\n    activeRule.setRule(rule);\n    activeRule.setRulesProfile(this);\n    activeRule.setSeverity(optionalSeverity == null ? rule.getSeverity() : optionalSeverity);\n    activeRules.add(activeRule);\n    return activeRule;\n  }","commit_id":"21d65415b3b95325dfe81a0ba48c4a43670eff11","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void activateRuleWithDefaultPriority() {\n    RulesProfile profile = RulesProfile.create();\n    Rule rule = Rule.create(\"repo\", \"key1\", \"name1\").setSeverity(RulePriority.CRITICAL);\n    profile.activateRule(rule, null);\n    assertThat(profile.getActiveRule(\"repo\", \"key1\").getSeverity(), is(RulePriority.CRITICAL));\n  }","id":68366,"modified_method":"@Test\n  public void activateRuleWithDefaultPriority() {\n    RulesProfile profile = RulesProfile.create();\n    Rule rule = Rule.create(\"repo\", \"key1\", \"name1\").setSeverity(RulePriority.CRITICAL);\n    profile.activateRule(rule, null);\n    assertThat(profile.getActiveRule(\"repo\", \"key1\").getSeverity()).isEqualTo(RulePriority.CRITICAL);\n  }","commit_id":"21d65415b3b95325dfe81a0ba48c4a43670eff11","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void searchRulesByConfigKey() {\n    RulesProfile profile = RulesProfile.create();\n    profile.activateRule(Rule.create(\"repo\", \"key1\", \"name1\"), null);\n    profile.activateRule(Rule.create(\"repo\", \"key2\", \"name2\").setConfigKey(\"config2\"), null);\n\n    assertNull(profile.getActiveRuleByConfigKey(\"repo\", \"unknown\"));\n    assertThat(profile.getActiveRuleByConfigKey(\"repo\", \"config2\").getRuleKey(), is(\"key2\"));\n  }","id":68367,"modified_method":"@Test\n  public void searchRulesByConfigKey() {\n    RulesProfile profile = RulesProfile.create();\n    profile.activateRule(Rule.create(\"repo\", \"key1\", \"name1\"), null);\n    profile.activateRule(Rule.create(\"repo\", \"key2\", \"name2\").setConfigKey(\"config2\"), null);\n\n    assertThat(profile.getActiveRuleByConfigKey(\"repo\", \"unknown\")).isNull();\n    assertThat(profile.getActiveRuleByConfigKey(\"repo\", \"config2\").getRuleKey()).isEqualTo(\"key2\");\n  }","commit_id":"21d65415b3b95325dfe81a0ba48c4a43670eff11","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void activateRuleWithSpecificPriority() {\n    RulesProfile profile = RulesProfile.create();\n    Rule rule = Rule.create(\"repo\", \"key1\", \"name1\").setSeverity(RulePriority.CRITICAL);\n    profile.activateRule(rule, RulePriority.MINOR);\n    assertThat(profile.getActiveRule(\"repo\", \"key1\").getSeverity(), is(RulePriority.MINOR));\n  }","id":68368,"modified_method":"@Test\n  public void activateRuleWithSpecificPriority() {\n    RulesProfile profile = RulesProfile.create();\n    Rule rule = Rule.create(\"repo\", \"key1\", \"name1\").setSeverity(RulePriority.CRITICAL);\n    profile.activateRule(rule, RulePriority.MINOR);\n    assertThat(profile.getActiveRule(\"repo\", \"key1\").getSeverity()).isEqualTo(RulePriority.MINOR);\n  }","commit_id":"21d65415b3b95325dfe81a0ba48c4a43670eff11","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void defaultVersionIs1() {\n    RulesProfile profile = RulesProfile.create();    \n    assertThat(profile.getVersion(), is(1));\n  }","id":68369,"modified_method":"@Test\n  public void defaultVersionIs1() {\n    RulesProfile profile = RulesProfile.create();\n    assertThat(profile.getVersion()).isEqualTo(1);\n  }","commit_id":"21d65415b3b95325dfe81a0ba48c4a43670eff11","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_disable_template_rules_if_parent_is_enabled() {\n    setupData(\"doNotDisableUserRulesIfParentIsEnabled\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.isEnabled(), is(true));\n  }","id":68370,"modified_method":"@Test\n  public void should_not_disable_template_rules_if_parent_is_enabled() {\n    setupData(\"doNotDisableUserRulesIfParentIsEnabled\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.isEnabled()).isEqualTo(true);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_store_bundle_name_and_description_in_database() {\n    setupData(\"updadeRuleFields\");\n    String i18nName = \"The One\";\n    String i18nDescription = \"The Description of One\";\n    when(ruleI18nManager.getName(\"fake\", \"rule1\")).thenReturn(i18nName);\n    when(ruleI18nManager.getDescription(\"fake\", \"rule1\")).thenReturn(i18nDescription);\n    task.start();\n\n    // fields have been updated with new values\n    Rule rule1 = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule1.getName(), is(i18nName));\n    assertThat(rule1.getDescription(), is(i18nDescription));\n    assertThat(rule1.getSeverity(), is(RulePriority.BLOCKER));\n    assertThat(rule1.getConfigKey(), is(\"config1\"));\n    assertThat(rule1.getUpdatedAt(), notNullValue());\n\n    Rule rule2 = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule2.getStatus(), is(Rule.STATUS_DEPRECATED));\n    assertThat(rule2.getUpdatedAt(), notNullValue());\n  }","id":68371,"modified_method":"@Test\n  public void should_store_bundle_name_and_description_in_database() {\n    setupData(\"updadeRuleFields\");\n    String i18nName = \"The One\";\n    String i18nDescription = \"The Description of One\";\n    when(ruleI18nManager.getName(\"fake\", \"rule1\")).thenReturn(i18nName);\n    when(ruleI18nManager.getDescription(\"fake\", \"rule1\")).thenReturn(i18nDescription);\n    task.start();\n\n    // fields have been updated with new values\n    Rule rule1 = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule1.getName()).isEqualTo(i18nName);\n    assertThat(rule1.getDescription()).isEqualTo(i18nDescription);\n    assertThat(rule1.getSeverity()).isEqualTo(RulePriority.BLOCKER);\n    assertThat(rule1.getConfigKey()).isEqualTo(\"config1\");\n    assertThat(rule1.getUpdatedAt()).isNotNull();\n\n    Rule rule2 = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule2.getStatus()).isEqualTo(Rule.STATUS_DEPRECATED);\n    assertThat(rule2.getUpdatedAt()).isNotNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_disable_manual_rules() {\n    // the hardcoded repository \"manual\" is used for manual violations\n    setupData(\"shouldNotDisableManualRules\");\n    task.start();\n\n    assertThat(getSession().getSingleResult(Rule.class, \"id\", 1).isEnabled(), is(true));\n    assertThat(getSession().getSingleResult(Rule.class, \"id\", 2).isEnabled(), is(false));\n  }","id":68372,"modified_method":"@Test\n  public void should_not_disable_manual_rules() {\n    // the hardcoded repository \"manual\" is used for manual violations\n    setupData(\"shouldNotDisableManualRules\");\n    task.start();\n\n    assertThat(getSession().getSingleResult(Rule.class, \"id\", 1).isEnabled()).isEqualTo(true);\n    assertThat(getSession().getSingleResult(Rule.class, \"id\", 2).isEnabled()).isEqualTo(false);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update_rule_fields() {\n    setupData(\"updadeRuleFields\");\n    task.start();\n\n    // fields have been updated with new values\n    Rule rule1 = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule1.getName(), is(\"One\"));\n    assertThat(rule1.getDescription(), is(\"Description of One\"));\n    assertThat(rule1.getSeverity(), is(RulePriority.BLOCKER));\n    assertThat(rule1.getConfigKey(), is(\"config1\"));\n    assertThat(rule1.getUpdatedAt(), notNullValue());\n\n    Rule rule2 = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule2.getStatus(), is(Rule.STATUS_DEPRECATED));\n    assertThat(rule2.getUpdatedAt(), notNullValue());\n  }","id":68373,"modified_method":"@Test\n  public void should_update_rule_fields() {\n    setupData(\"updadeRuleFields\");\n    task.start();\n\n    // fields have been updated with new values\n    Rule rule1 = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule1.getName()).isEqualTo(\"One\");\n    assertThat(rule1.getDescription()).isEqualTo(\"Description of One\");\n    assertThat(rule1.getSeverity()).isEqualTo(RulePriority.BLOCKER);\n    assertThat(rule1.getConfigKey()).isEqualTo(\"config1\");\n    assertThat(rule1.getUpdatedAt()).isNotNull();\n\n    Rule rule2 = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule2.getStatus()).isEqualTo(Rule.STATUS_DEPRECATED);\n    assertThat(rule2.getUpdatedAt()).isNotNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_fail_with_rule_without_name() throws Exception {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutNameRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a name\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage(), containsString(\"must have a name\"));\n    }\n\n    // now it is ok, the rule has a name in the English bundle\n    when(ruleI18nManager.getName(anyString(), anyString())).thenReturn(\"Name\");\n    when(ruleI18nManager.getDescription(anyString(), anyString())).thenReturn(\"Description\");\n    task.start();\n  }","id":68374,"modified_method":"@Test\n  public void should_fail_with_rule_without_name() throws Exception {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutNameRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a name\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage()).contains(\"must have a name\");\n    }\n\n    // now it is ok, the rule has a name in the English bundle\n    when(ruleI18nManager.getName(anyString(), anyString())).thenReturn(\"Name\");\n    when(ruleI18nManager.getDescription(anyString(), anyString())).thenReturn(\"Description\");\n    task.start();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_save_new_repositories() {\n    setupData(\"shared\");\n    task.start();\n\n    verify(ruleRegistry).bulkRegisterRules();\n\n    List<Rule> result = getSession().getResults(Rule.class, \"pluginName\", \"fake\");\n    assertThat(result.size(), is(2));\n\n    Rule first = result.get(0);\n    assertThat(first.getKey(), is(\"rule1\"));\n    assertThat(first.getRepositoryKey(), is(\"fake\"));\n    assertThat(first.isEnabled(), is(true));\n    assertThat(first.getCreatedAt(), notNullValue());\n    assertThat(first.getStatus(), is(Rule.STATUS_READY));\n    assertThat(first.getLanguage(), is(\"java\"));\n    assertThat(first.getParams().size(), is(2));\n  }","id":68375,"modified_method":"@Test\n  public void should_save_new_repositories() {\n    setupData(\"shared\");\n    task.start();\n\n    verify(ruleRegistry).bulkRegisterRules();\n\n    List<Rule> result = getSession().getResults(Rule.class, \"pluginName\", \"fake\");\n    assertThat(result.size()).isEqualTo(2);\n\n    Rule first = result.get(0);\n    assertThat(first.getKey()).isEqualTo(\"rule1\");\n    assertThat(first.getRepositoryKey()).isEqualTo(\"fake\");\n    assertThat(first.isEnabled()).isEqualTo(true);\n    assertThat(first.getCreatedAt()).isNotNull();\n    assertThat(first.getStatus()).isEqualTo(Rule.STATUS_READY);\n    assertThat(first.getLanguage()).isEqualTo(\"java\");\n    assertThat(first.getParams().size()).isEqualTo(2);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_fail_with_rule_with_blank_name() throws Exception {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutNameRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a name\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage(), containsString(\"must have a name\"));\n    }\n  }","id":68376,"modified_method":"@Test\n  public void should_fail_with_rule_with_blank_name() throws Exception {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutNameRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a name\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage()).contains(\"must have a name\");\n    }\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_fail_with_rule_without_description() throws Exception {\n    when(ruleI18nManager.getName(anyString(), anyString())).thenReturn(\"Name\");\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutDescriptionRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a description\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage(), containsString(\"must have a description\"));\n    }\n\n    // now it is ok, the rule has a name & a description in the English bundle\n    when(ruleI18nManager.getName(anyString(), anyString())).thenReturn(\"Name\");\n    when(ruleI18nManager.getDescription(anyString(), anyString())).thenReturn(\"Description\");\n    task.start();\n  }","id":68377,"modified_method":"@Test\n  public void should_fail_with_rule_without_description() throws Exception {\n    when(ruleI18nManager.getName(anyString(), anyString())).thenReturn(\"Name\");\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutDescriptionRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a description\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage()).contains(\"must have a description\");\n    }\n\n    // now it is ok, the rule has a name & a description in the English bundle\n    when(ruleI18nManager.getName(anyString(), anyString())).thenReturn(\"Name\");\n    when(ruleI18nManager.getDescription(anyString(), anyString())).thenReturn(\"Description\");\n    task.start();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_update_already_disabled_rules() {\n    setupData(\"notUpdateAlreadyDisabledRule\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.getStatus(), is(Rule.STATUS_REMOVED));\n    assertThat(rule.getUpdatedAt(), nullValue());\n  }","id":68378,"modified_method":"@Test\n  public void should_not_update_already_disabled_rules() {\n    setupData(\"notUpdateAlreadyDisabledRule\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.getStatus()).isEqualTo(Rule.STATUS_REMOVED);\n    assertThat(rule.getUpdatedAt()).isNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update_rule_parameters() {\n    setupData(\"updateRuleParameters\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.getParams().size(), is(2));\n\n    // new parameter\n    assertNotNull(rule.getParam(\"param2\"));\n    assertThat(rule.getParam(\"param2\").getDescription(), is(\"parameter two\"));\n    assertThat(rule.getParam(\"param2\").getDefaultValue(), is(\"default value two\"));\n\n    // updated parameter\n    assertNotNull(rule.getParam(\"param1\"));\n    assertThat(rule.getParam(\"param1\").getDescription(), is(\"parameter one\"));\n    assertThat(rule.getParam(\"param1\").getDefaultValue(), is(\"default value one\"));\n\n    // deleted parameter\n    assertNull(rule.getParam(\"deprecated_param\"));\n    assertNull(getSession().getSingleResult(RuleParam.class, \"id\", 2)); // id of deprecated_param is 2\n  }","id":68379,"modified_method":"@Test\n  public void should_update_rule_parameters() {\n    setupData(\"updateRuleParameters\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.getParams().size()).isEqualTo(2);\n\n    // new parameter\n    assertThat(rule.getParam(\"param2\")).isNotNull();\n    assertThat(rule.getParam(\"param2\").getDescription()).isEqualTo(\"parameter two\");\n    assertThat(rule.getParam(\"param2\").getDefaultValue()).isEqualTo(\"default value two\");\n\n    // updated parameter\n    assertThat(rule.getParam(\"param1\")).isNotNull();\n    assertThat(rule.getParam(\"param1\").getDescription()).isEqualTo(\"parameter one\");\n    assertThat(rule.getParam(\"param1\").getDefaultValue()).isEqualTo(\"default value one\");\n\n    // deleted parameter\n    assertThat(rule.getParam(\"deprecated_param\")).isNull();\n    assertThat(getSession().getSingleResult(RuleParam.class, \"id\", 2)).isNull(); // id of deprecated_param is 2\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_disable_deprecated_repositories() {\n    setupData(\"shared\");\n    task.start();\n\n    List<Rule> rules = getSession()\n        .createQuery(\"from \" + Rule.class.getSimpleName() + \" where pluginName<>'fake'\")\n        .getResultList();\n    assertThat(rules.size(), greaterThan(0));\n    for (Rule rule : rules) {\n      assertThat(rule.isEnabled(), is(false));\n      assertThat(rule.getUpdatedAt(), notNullValue());\n    }\n  }","id":68380,"modified_method":"@Test\n  public void should_disable_deprecated_repositories() {\n    setupData(\"shared\");\n    task.start();\n\n    List<Rule> rules = getSession()\n        .createQuery(\"from \" + Rule.class.getSimpleName() + \" where pluginName<>'fake'\")\n        .getResultList();\n    assertThat(rules.size()).isGreaterThan(0);\n    for (Rule rule : rules) {\n      assertThat(rule.isEnabled()).isEqualTo(false);\n      assertThat(rule.getUpdatedAt()).isNotNull();\n    }\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update_template_rule() {\n    setupData(\"should_update_template_rule_language\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.getRepositoryKey(), is(\"fake\"));\n    assertThat(rule.getLanguage(), is(\"java\"));\n    assertThat(rule.getStatus(), is(Rule.STATUS_READY));\n\n    rule = getSession().getSingleResult(Rule.class, \"id\", 4);\n    assertThat(rule.getRepositoryKey(), is(\"fake\"));\n    assertThat(rule.getLanguage(), is(\"java\"));\n    // parent status is now DEPRECATED but template should not be changed\n    assertThat(rule.getStatus(), is(Rule.STATUS_READY));\n  }","id":68381,"modified_method":"@Test\n  public void should_update_template_rule() {\n    setupData(\"should_update_template_rule_language\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.getRepositoryKey()).isEqualTo(\"fake\");\n    assertThat(rule.getLanguage()).isEqualTo(\"java\");\n    assertThat(rule.getStatus()).isEqualTo(Rule.STATUS_READY);\n\n    rule = getSession().getSingleResult(Rule.class, \"id\", 4);\n    assertThat(rule.getRepositoryKey()).isEqualTo(\"fake\");\n    assertThat(rule.getLanguage()).isEqualTo(\"java\");\n    // parent status is now DEPRECATED but template should not be changed\n    assertThat(rule.getStatus()).isEqualTo(Rule.STATUS_READY);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_reactivate_disabled_rules() {\n    setupData(\"reactivateDisabledRules\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.getStatus(), is(Rule.STATUS_READY));\n    assertThat(rule.getUpdatedAt(), notNullValue());\n  }","id":68382,"modified_method":"@Test\n  public void should_reactivate_disabled_rules() {\n    setupData(\"reactivateDisabledRules\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.getStatus()).isEqualTo(Rule.STATUS_READY);\n    assertThat(rule.getUpdatedAt()).isNotNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void volume_testing() {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new VolumeRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n    task.start();\n\n    List<Rule> result = getSession().getResults(Rule.class, \"status\", Rule.STATUS_READY);\n    assertThat(result.size(), is(VolumeRepository.SIZE));\n  }","id":68383,"modified_method":"@Test\n  public void volume_testing() {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new VolumeRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n    task.start();\n\n    List<Rule> result = getSession().getResults(Rule.class, \"status\", Rule.STATUS_READY);\n    assertThat(result.size()).isEqualTo(VolumeRepository.SIZE);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_fail_with_rule_without_name_in_bundle() throws Exception {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutDescriptionRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a description\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage(), containsString(\"No description found for the rule 'Rule 1' (repository: rule-without-description-repo) \" +\n        \"because the entry 'rule.rule-without-description-repo.rule1.name' is missing from the bundle.\"));\n    }\n  }","id":68384,"modified_method":"@Test\n  public void should_fail_with_rule_without_name_in_bundle() throws Exception {\n    task = new RegisterRules(getSessionFactory(), new RuleRepository[] {new RuleWithoutDescriptionRepository()}, ruleI18nManager, profilesManager, ruleRegistry);\n    setupData(\"shared\");\n\n    // the rule has no name, it should fail\n    try {\n      task.start();\n      fail(\"Rule must have a description\");\n    } catch (SonarException e) {\n      assertThat(e.getMessage()).contains(\"No description found for the rule 'Rule 1' (repository: rule-without-description-repo) \" +\n        \"because the entry 'rule.rule-without-description-repo.rule1.name' is missing from the bundle.\");\n    }\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_reactivate_disabled_template_rules() {\n    setupData(\"should_reactivate_disabled_template_rules\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.getStatus(), is(Rule.STATUS_REMOVED));\n    assertThat(rule.getUpdatedAt(), notNullValue());\n  }","id":68385,"modified_method":"@Test\n  public void should_not_reactivate_disabled_template_rules() {\n    setupData(\"should_reactivate_disabled_template_rules\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.getStatus()).isEqualTo(Rule.STATUS_REMOVED);\n    assertThat(rule.getUpdatedAt()).isNotNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_disable_deprecated_active_rules() {\n    setupData(\"disableDeprecatedActiveRules\");\n    task.start();\n\n    List<Rule> result = getSession().getResults(Rule.class, \"pluginName\", \"fake\");\n    assertThat(result.size(), is(3));\n\n    Rule deprecated = result.get(0);\n    assertThat(deprecated.getKey(), is(\"deprecated\"));\n    assertThat(deprecated.isEnabled(), is(false));\n    assertThat(deprecated.getUpdatedAt(), notNullValue());\n\n    assertThat(result.get(1).isEnabled(), is(true));\n    assertThat(result.get(2).isEnabled(), is(true));\n  }","id":68386,"modified_method":"@Test\n  public void should_disable_deprecated_active_rules() {\n    setupData(\"disableDeprecatedActiveRules\");\n    task.start();\n\n    List<Rule> result = getSession().getResults(Rule.class, \"pluginName\", \"fake\");\n    assertThat(result.size()).isEqualTo(3);\n\n    Rule deprecated = result.get(0);\n    assertThat(deprecated.getKey()).isEqualTo(\"deprecated\");\n    assertThat(deprecated.isEnabled()).isEqualTo(false);\n    assertThat(deprecated.getUpdatedAt()).isNotNull();\n\n    assertThat(result.get(1).isEnabled()).isEqualTo(true);\n    assertThat(result.get(2).isEnabled()).isEqualTo(true);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_disable_deprecated_rules() {\n    setupData(\"disableDeprecatedRules\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.isEnabled(), is(false));\n    assertThat(rule.getUpdatedAt(), notNullValue());\n\n    rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.isEnabled(), is(false));\n    assertThat(rule.getUpdatedAt(), notNullValue());\n  }","id":68387,"modified_method":"@Test\n  public void should_disable_deprecated_rules() {\n    setupData(\"disableDeprecatedRules\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 1);\n    assertThat(rule.isEnabled()).isEqualTo(false);\n    assertThat(rule.getUpdatedAt()).isNotNull();\n\n    rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.isEnabled()).isEqualTo(false);\n    assertThat(rule.getUpdatedAt()).isNotNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_disable_deprecated_active_rule_parameters() {\n    setupData(\"disableDeprecatedActiveRuleParameters\");\n    task.start();\n\n    ActiveRule arule = getSession().getSingleResult(ActiveRule.class, \"id\", 1);\n    assertThat(arule.getActiveRuleParams().size(), is(2));\n    assertNull(getSession().getSingleResult(ActiveRuleParam.class, \"id\", 3));\n  }","id":68388,"modified_method":"@Test\n  public void should_disable_deprecated_active_rule_parameters() {\n    setupData(\"disableDeprecatedActiveRuleParameters\");\n    task.start();\n\n    ActiveRule arule = getSession().getSingleResult(ActiveRule.class, \"id\", 1);\n    assertThat(arule.getActiveRuleParams().size()).isEqualTo(2);\n    assertThat(getSession().getSingleResult(ActiveRuleParam.class, \"id\", 3)).isNull();\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_disable_template_rules_if_parent_is_disabled() {\n    setupData(\"disableUserRulesIfParentIsDisabled\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.isEnabled(), is(false));\n    assertThat(rule.getUpdatedAt(), notNullValue());\n\n    assertThat(getSession().getSingleResult(Rule.class, \"id\", 4).isEnabled(), is(false));\n  }","id":68389,"modified_method":"@Test\n  public void should_disable_template_rules_if_parent_is_disabled() {\n    setupData(\"disableUserRulesIfParentIsDisabled\");\n    task.start();\n\n    Rule rule = getSession().getSingleResult(Rule.class, \"id\", 2);\n    assertThat(rule.isEnabled()).isEqualTo(false);\n    assertThat(rule.getUpdatedAt()).isNotNull();\n\n    assertThat(getSession().getSingleResult(Rule.class, \"id\", 4).isEnabled()).isEqualTo(false);\n  }","commit_id":"a81e6425d59ad1286a8c0fc1988f489ce23f9c3f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * @throws CommandException\n   * @since 3.0\n   */\n  public int execute(Command command, StreamConsumer stdOut, StreamConsumer stdErr, long timeoutMilliseconds) {\n    ExecutorService executorService = null;\n    Process process = null;\n    StreamGobbler outputGobbler = null;\n    StreamGobbler errorGobbler = null;\n    try {\n      ProcessBuilder builder = new ProcessBuilder(command.toStrings());\n      if (command.getDirectory() != null) {\n        builder.directory(command.getDirectory());\n      }\n      Map<String, String> envVars = command.getEnvironmentVariables();\n      if (!envVars.isEmpty()) {\n        builder.environment().putAll(envVars);\n      }\n      process = builder.start();\n\n      outputGobbler = new StreamGobbler(process.getInputStream(), stdOut);\n      errorGobbler = new StreamGobbler(process.getErrorStream(), stdErr);\n      outputGobbler.start();\n      errorGobbler.start();\n\n      final Process finalProcess = process;\n      executorService = Executors.newSingleThreadExecutor();\n      Future<Integer> ft = executorService.submit(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          return finalProcess.waitFor();\n        }\n      });\n      int exitCode = ft.get(timeoutMilliseconds, TimeUnit.MILLISECONDS);\n      waitUntilFinish(outputGobbler);\n      waitUntilFinish(errorGobbler);\n      verifyGobbler(command, outputGobbler, \"stdOut\");\n      verifyGobbler(command, errorGobbler, \"stdErr\");\n      return exitCode;\n\n    } catch (TimeoutException te) {\n      process.destroy();\n      throw new CommandException(command, \"Timeout exceeded: \" + timeoutMilliseconds + \" ms\", te);\n\n    } catch (CommandException e) {\n      throw e;\n\n    } catch (Exception e) {\n      throw new CommandException(command, e);\n\n    } finally {\n      waitUntilFinish(outputGobbler);\n      waitUntilFinish(errorGobbler);\n      closeStreams(process);\n\n      if (executorService != null) {\n        executorService.shutdown();\n      }\n    }\n  }","id":68390,"modified_method":"/**\n   * @throws CommandException\n   * @since 3.0\n   */\n  public int execute(Command command, StreamConsumer stdOut, StreamConsumer stdErr, long timeoutMilliseconds) {\n    ExecutorService executorService = null;\n    Process process = null;\n    StreamGobbler outputGobbler = null;\n    StreamGobbler errorGobbler = null;\n    try {\n      ProcessBuilder builder = new ProcessBuilder(command.toStrings());\n      if (command.getDirectory() != null) {\n        builder.directory(command.getDirectory());\n      }\n      builder.environment().putAll(command.getEnvironmentVariables());\n      process = builder.start();\n\n      outputGobbler = new StreamGobbler(process.getInputStream(), stdOut);\n      errorGobbler = new StreamGobbler(process.getErrorStream(), stdErr);\n      outputGobbler.start();\n      errorGobbler.start();\n\n      final Process finalProcess = process;\n      executorService = Executors.newSingleThreadExecutor();\n      Future<Integer> ft = executorService.submit(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          return finalProcess.waitFor();\n        }\n      });\n      int exitCode = ft.get(timeoutMilliseconds, TimeUnit.MILLISECONDS);\n      waitUntilFinish(outputGobbler);\n      waitUntilFinish(errorGobbler);\n      verifyGobbler(command, outputGobbler, \"stdOut\");\n      verifyGobbler(command, errorGobbler, \"stdErr\");\n      return exitCode;\n\n    } catch (TimeoutException te) {\n      process.destroy();\n      throw new CommandException(command, \"Timeout exceeded: \" + timeoutMilliseconds + \" ms\", te);\n\n    } catch (CommandException e) {\n      throw e;\n\n    } catch (Exception e) {\n      throw new CommandException(command, e);\n\n    } finally {\n      waitUntilFinish(outputGobbler);\n      waitUntilFinish(errorGobbler);\n      closeStreams(process);\n\n      if (executorService != null) {\n        executorService.shutdown();\n      }\n    }\n  }","commit_id":"4a6b9541a01065121b6472360c178708c5697f38","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n  public void shouldFailWhenBlankExecutable() throws Exception {\n    Command.create(\"  \");\n  }","id":68391,"modified_method":"@Test\n  public void shouldFailWhenBlankExecutable() throws Exception {\n    thrown.expect(IllegalArgumentException.class);\n    Command.create(\"  \");\n  }","commit_id":"4a6b9541a01065121b6472360c178708c5697f38","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSetWorkingDirectory() throws Exception {\n    Command command = Command.create(\"java\");\n    assertThat(command.getDirectory(), nullValue());\n\n    File working = new File(\"working\");\n    command = Command.create(\"java\").setDirectory(working);\n    assertThat(command.getDirectory(), is(working));\n  }","id":68392,"modified_method":"@Test\n  public void shouldSetWorkingDirectory() throws Exception {\n    Command command = Command.create(\"java\");\n    assertThat(command.getDirectory()).isNull();\n\n    File working = new File(\"working\");\n    command = Command.create(\"java\").setDirectory(working);\n    assertThat(command.getDirectory()).isEqualTo(working);\n  }","commit_id":"4a6b9541a01065121b6472360c178708c5697f38","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n  public void shouldFailWhenNullExecutable() throws Exception {\n    Command.create(null);\n  }","id":68393,"modified_method":"@Test\n  public void shouldFailWhenNullExecutable() throws Exception {\n    thrown.expect(IllegalArgumentException.class);\n    Command.create(null);\n  }","commit_id":"4a6b9541a01065121b6472360c178708c5697f38","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCreateCommand() throws Exception {\n    Command command = Command.create(\"java\");\n    command.addArgument(\"-Xmx512m\");\n    command.addArgument(\"-Dfoo=bar\");\n    assertThat(command.getExecutable(), is(\"java\"));\n    assertThat(command.getArguments().size(), is(2));\n    assertThat(command.toCommandLine(), is(\"java -Xmx512m -Dfoo=bar\"));\n  }","id":68394,"modified_method":"@Test\n  public void shouldCreateCommand() throws Exception {\n    Command command = Command.create(\"java\");\n    command.addArgument(\"-Xmx512m\");\n    command.addArguments(Arrays.asList(\"-a\", \"-b\"));\n    command.addArguments(new String[]{\"-x\", \"-y\"});\n    assertThat(command.getExecutable()).isEqualTo(\"java\");\n    assertThat(command.getArguments()).hasSize(5);\n    assertThat(command.toCommandLine()).isEqualTo(\"java -Xmx512m -a -b -x -y\");\n  }","commit_id":"4a6b9541a01065121b6472360c178708c5697f38","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void addRuleProperty(Rule rule, Field field) {\n    org.sonar.check.RuleProperty propertyAnnotation = field.getAnnotation(org.sonar.check.RuleProperty.class);\n    if (propertyAnnotation != null) {\n      String fieldKey = StringUtils.defaultIfEmpty(propertyAnnotation.key(), field.getName());\n      RuleParam param = rule.createParameter(fieldKey);\n      param.setDescription(propertyAnnotation.description());\n      param.setDefaultValue(propertyAnnotation.defaultValue());\n    }\n  }","id":68395,"modified_method":"private void addRuleProperty(Rule rule, Field field) {\n    org.sonar.check.RuleProperty propertyAnnotation = field.getAnnotation(org.sonar.check.RuleProperty.class);\n    if (propertyAnnotation != null) {\n      String fieldKey = StringUtils.defaultIfEmpty(propertyAnnotation.key(), field.getName());\n      RuleParam param = rule.createParameter(fieldKey);\n      param.setDescription(propertyAnnotation.description());\n      param.setDefaultValue(propertyAnnotation.defaultValue());\n      if (!StringUtils.isBlank(propertyAnnotation.type())) {\n        try {\n          param.setType(PropertyType.valueOf(propertyAnnotation.type().trim()).name());\n        } catch (IllegalArgumentException e) {\n          throw new IllegalArgumentException(\"Invalid property type [\" + propertyAnnotation.type() + \"]\", e);\n        }\n      } else {\n        param.setType(guessType(field.getType()).name());\n      }\n    }\n  }","commit_id":"1bf2a07bdcd8e56b485554687c8c3b6029dd7f7c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void ruleWithoutNameNorDescription() {\n    List<Rule> rules = parseAnnotatedClass(RuleWithoutNameNorDescription.class);\n    assertThat(rules.size(), is(1));\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey(), is(\"foo\"));\n    assertThat(rule.getSeverity(), is(RulePriority.MAJOR));\n    assertThat(rule.getName(), is(nullValue()));\n    assertThat(rule.getDescription(), is(nullValue()));\n  }","id":68396,"modified_method":"@Test\n  public void ruleWithoutNameNorDescription() {\n    List<Rule> rules = parseAnnotatedClass(RuleWithoutNameNorDescription.class);\n    assertThat(rules).hasSize(1);\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey()).isEqualTo(\"foo\");\n    assertThat(rule.getSeverity()).isEqualTo(RulePriority.MAJOR);\n    assertThat(rule.getName()).isNull();\n    assertThat(rule.getDescription()).isNull();\n  }","commit_id":"1bf2a07bdcd8e56b485554687c8c3b6029dd7f7c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void supportDeprecatedAnnotations() {\n    List<Rule> rules = parseAnnotatedClass(Check.class);\n    assertThat(rules.size(), is(1));\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey(), is(Check.class.getCanonicalName()));\n    assertThat(rule.getName(), is(Check.class.getCanonicalName()));\n    assertThat(rule.getDescription(), is(\"Deprecated check\"));\n    assertThat(rule.getSeverity(), is(RulePriority.BLOCKER));\n  }","id":68397,"modified_method":"@Test\n  public void supportDeprecatedAnnotations() {\n    List<Rule> rules = parseAnnotatedClass(Check.class);\n    assertThat(rules).hasSize(1);\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey()).isEqualTo(Check.class.getCanonicalName());\n    assertThat(rule.getName()).isEqualTo(Check.class.getCanonicalName());\n    assertThat(rule.getDescription()).isEqualTo(\"Deprecated check\");\n    assertThat(rule.getSeverity()).isEqualTo(RulePriority.BLOCKER);\n  }","commit_id":"1bf2a07bdcd8e56b485554687c8c3b6029dd7f7c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void ruleWithoutKey() {\n    List<Rule> rules = parseAnnotatedClass(RuleWithoutKey.class);\n    assertThat(rules.size(), is(1));\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey(), is(RuleWithoutKey.class.getCanonicalName()));\n    assertThat(rule.getName(), is(\"foo\"));\n    assertThat(rule.getDescription(), is(nullValue()));\n    assertThat(rule.getSeverity(), is(RulePriority.MAJOR));\n  }","id":68398,"modified_method":"@Test\n  public void ruleWithoutKey() {\n    List<Rule> rules = parseAnnotatedClass(RuleWithoutKey.class);\n    assertThat(rules).hasSize(1);\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey()).isEqualTo(RuleWithoutKey.class.getCanonicalName());\n    assertThat(rule.getName()).isEqualTo(\"foo\");\n    assertThat(rule.getDescription()).isNull();\n    assertThat(rule.getSeverity()).isEqualTo(RulePriority.MAJOR);\n  }","commit_id":"1bf2a07bdcd8e56b485554687c8c3b6029dd7f7c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void ruleWithProperty() {\n    List<Rule> rules = parseAnnotatedClass(RuleWithProperty.class);\n    assertThat(rules.size(), is(1));\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey(), is(\"foo\"));\n    assertThat(rule.getName(), is(\"bar\"));\n    assertThat(rule.getDescription(), is(\"Foo Bar\"));\n    assertThat(rule.getSeverity(), is(RulePriority.BLOCKER));\n    assertThat(rule.getParams().size(), is(1));\n    RuleParam prop = rule.getParam(\"property\");\n    assertThat(prop.getKey(), is(\"property\"));\n    assertThat(prop.getDescription(), is(\"Ignore ?\"));\n    assertThat(prop.getDefaultValue(), is(\"false\"));\n  }","id":68399,"modified_method":"@Test\n  public void ruleWithProperty() {\n    List<Rule> rules = parseAnnotatedClass(RuleWithProperty.class);\n    assertThat(rules).hasSize(1);\n    Rule rule = rules.get(0);\n    assertThat(rule.getKey()).isEqualTo(\"foo\");\n    assertThat(rule.getName()).isEqualTo(\"bar\");\n    assertThat(rule.getDescription()).isEqualTo(\"Foo Bar\");\n    assertThat(rule.getSeverity()).isEqualTo(RulePriority.BLOCKER);\n    assertThat(rule.getParams()).hasSize(1);\n    RuleParam prop = rule.getParam(\"property\");\n    assertThat(prop.getKey()).isEqualTo(\"property\");\n    assertThat(prop.getDescription()).isEqualTo(\"Ignore ?\");\n    assertThat(prop.getDefaultValue()).isEqualTo(\"false\");\n    assertThat(prop.getType()).isEqualTo(PropertyType.STRING.name());\n  }","commit_id":"1bf2a07bdcd8e56b485554687c8c3b6029dd7f7c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void sanitizeFileName() {\n    String newS = \"tmp\";\n    assertThat(FileUtil.sanitizeFileName(newS), sameInstance(newS));\n    assertThat(FileUtil.sanitizeFileName(\"_test\"), sameInstance(\"_test\"));\n\n    assertThat(FileUtil.sanitizeFileName(\" \"), equalTo(\"_\"));\n    assertThat(FileUtil.sanitizeFileName(\"\\u2026\"), equalTo(\"\"));\n    assertThat(FileUtil.sanitizeFileName(\"q_test\"), sameInstance(\"q_test\"));\n    assertThat(FileUtil.sanitizeFileName(\"12_\"), sameInstance(\"12_\"));\n    assertThat(FileUtil.sanitizeFileName(\"12_  123\"), equalTo(\"12___123\"));\n    assertThat(FileUtil.sanitizeFileName(\" 12\\u2026123\"), equalTo(\"_12123\"));\n\n    assertThat(FileUtil.sanitizeFileName(\"a+b+c\"), equalTo(\"a_b_c\"));\n  }","id":68400,"modified_method":"@Test\n  public void sanitizeFileName() {\n    String newS = \"tmp\";\n    assertThat(FileUtil.sanitizeFileName(newS)).isSameAs(newS);\n    assertThat(FileUtil.sanitizeFileName(\"_test\")).isSameAs(\"_test\");\n\n    assertThat(FileUtil.sanitizeFileName(\" \")).isEqualTo(\"_\");\n    assertThat(FileUtil.sanitizeFileName(\"\\u2026\")).isEmpty();\n    assertThat(FileUtil.sanitizeFileName(\"q_test\")).isSameAs(\"q_test\");\n    assertThat(FileUtil.sanitizeFileName(\"12_\")).isSameAs(\"12_\");\n    assertThat(FileUtil.sanitizeFileName(\"12_  123\")).isEqualTo(\"12___123\");\n    assertThat(FileUtil.sanitizeFileName(\" 12\\u2026123\")).isEqualTo(\"_12123\");\n\n    assertThat(FileUtil.sanitizeFileName(\"a+b+c\")).isEqualTo(\"a_b_c\");\n  }","commit_id":"f1c0a39844b1715fb405d9ee6c3ce2b627ecc264","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n  public void testDataUri() {\n    byte[] test = \"test\".getBytes(CharsetToolkit.UTF8_CHARSET);\n    assertThat(URLUtil.getBytesFromDataUri(\"data:text/plain;charset=utf-8;base64,dGVzdA==\"), equalTo(test));\n    // https://youtrack.jetbrains.com/issue/WEB-14581#comment=27-1014790\n    assertThat(URLUtil.getBytesFromDataUri(\"data:text/plain;charset:utf-8;base64,dGVzdA==\"), equalTo(test));\n  }","id":68401,"modified_method":"@Test\n  public void testDataUri() {\n    byte[] test = \"test\".getBytes(CharsetToolkit.UTF8_CHARSET);\n    assertThat(URLUtil.getBytesFromDataUri(\"data:text/plain;charset=utf-8;base64,dGVzdA==\")).isEqualTo(test);\n    // https://youtrack.jetbrains.com/issue/WEB-14581#comment=27-1014790\n    assertThat(URLUtil.getBytesFromDataUri(\"data:text/plain;charset:utf-8;base64,dGVzdA==\")).isEqualTo(test);\n  }","commit_id":"f1c0a39844b1715fb405d9ee6c3ce2b627ecc264","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n  public void shouldDecorateList() {\n    assertThat(Markdown.convertToHtml(\"  * one\\r* two\\r\\n* three\\n * \\n *five\"),\n        is(\"<ul><li>one<\/li>\\r<li>two<\/li>\\r\\n<li>three<\/li>\\n<li> <\/li>\\n<\/ul> *five\"));\n    assertThat(Markdown.convertToHtml(\"  * one\\r* two\"), is(\"<ul><li>one<\/li>\\r<li>two<\/li><\/ul>\"));\n  }","id":68402,"modified_method":"@Test\n  public void shouldDecorateList() {\n    assertThat(Markdown.convertToHtml(\"  * one\\r* two\\r\\n* three\\n * \\n *five\"))\n        .isEqualTo(\"<ul><li>one<\/li>\\r<li>two<\/li>\\r\\n<li>three<\/li>\\n<li> <\/li>\\n<\/ul> *five\");\n    assertThat(Markdown.convertToHtml(\"  * one\\r* two\")).isEqualTo(\"<ul><li>one<\/li>\\r<li>two<\/li><\/ul>\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDecorateMultipleLineCode() {\n    assertThat(Markdown.convertToHtml(\"This is a ``\\nline of code\\nOn multiple lines\\n``\"), is(\"This is a <pre><code>line of code\\nOn multiple lines<\/code><\/pre>\"));\n    assertThat(Markdown.convertToHtml(\"This is not a ``line of code\\nOn multiple lines``\"), is(\"This is not a ``line of code<br/>On multiple lines``\"));\n    assertThat(Markdown.convertToHtml(\"This is not a ``line of code\\nOn multiple lines\"), is(\"This is not a ``line of code<br/>On multiple lines\"));\n  }","id":68403,"modified_method":"@Test\n  public void shouldDecorateMultipleLineCode() {\n    assertThat(Markdown.convertToHtml(\"This is a ``\\nline of code\\nOn multiple lines\\n``\")).isEqualTo(\"This is a <pre><code>line of code\\nOn multiple lines<\/code><\/pre>\");\n    assertThat(Markdown.convertToHtml(\"This is not a ``line of code\\nOn multiple lines``\")).isEqualTo(\"This is not a ``line of code<br/>On multiple lines``\");\n    assertThat(Markdown.convertToHtml(\"This is not a ``line of code\\nOn multiple lines\")).isEqualTo(\"This is not a ``line of code<br/>On multiple lines\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDecorateMultipleLineCodeWithLanguageSpecified() {\n    assertThat(Markdown.convertToHtml(\"This is a ``java\\nline of code\\nOn multiple lines\\n``\"), is(\"This is a <pre lang=\\\"java\\\"><code>line of code\\nOn multiple lines<\/code><\/pre>\"));\n    assertThat(Markdown.convertToHtml(\"This is not a ``java line of code\\nOn multiple lines``\"), is(\"This is not a ``java line of code<br/>On multiple lines``\"));\n    assertThat(Markdown.convertToHtml(\"This is not a ``java \\nline of code\\nOn multiple lines``\"), is(\"This is not a ``java <br/>line of code<br/>On multiple lines``\"));\n  }","id":68404,"modified_method":"@Test\n  public void shouldDecorateMultipleLineCodeWithLanguageSpecified() {\n    assertThat(Markdown.convertToHtml(\"This is a ``java\\nline of code\\nOn multiple lines\\n``\")).isEqualTo(\"This is a <pre lang=\\\"java\\\"><code>line of code\\nOn multiple lines<\/code><\/pre>\");\n    assertThat(Markdown.convertToHtml(\"This is not a ``java line of code\\nOn multiple lines``\")).isEqualTo(\"This is not a ``java line of code<br/>On multiple lines``\");\n    assertThat(Markdown.convertToHtml(\"This is not a ``java \\nline of code\\nOn multiple lines``\")).isEqualTo(\"This is not a ``java <br/>line of code<br/>On multiple lines``\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDecorateEndOfLine() {\n    assertThat(Markdown.convertToHtml(\"1\\r2\\r\\n3\\n\"), is(\"1<br/>2<br/>3<br/>\"));\n  }","id":68405,"modified_method":"@Test\n  public void shouldDecorateEndOfLine() {\n    assertThat(Markdown.convertToHtml(\"1\\r2\\r\\n3\\n\")).isEqualTo(\"1<br/>2<br/>3<br/>\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDecorateCode() {\n    assertThat(Markdown.convertToHtml(\"This is a ``line of code``\"), is(\"This is a <code>line of code<\/code>\"));\n    assertThat(Markdown.convertToHtml(\"This is not a ``line of code\"), is(\"This is not a ``line of code\"));\n  }","id":68406,"modified_method":"@Test\n  public void shouldDecorateCode() {\n    assertThat(Markdown.convertToHtml(\"This is a ``line of code``\")).isEqualTo(\"This is a <code>line of code<\/code>\");\n    assertThat(Markdown.convertToHtml(\"This is not a ``line of code\")).isEqualTo(\"This is not a ``line of code\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldEmphaseText() {\n    assertThat(Markdown.convertToHtml(\"This is *important*\"), is(\"This is <em>important<\/em>\"));\n    assertThat(Markdown.convertToHtml(\"This should not be * \\n emphase\"), is(\"This should not be * <br/> emphase\"));\n    assertThat(Markdown.convertToHtml(\"This is *very* very *important*\"), is(\"This is <em>very<\/em> very <em>important<\/em>\"));\n    assertThat(Markdown.convertToHtml(\"Not * emphase * because of whitespaces\"), is(\"Not * emphase * because of whitespaces\"));\n    assertThat(Markdown.convertToHtml(\"Not *emphase * because of whitespace\"), is(\"Not *emphase * because of whitespace\"));\n    assertThat(Markdown.convertToHtml(\"Not * emphase* because of whitespace\"), is(\"Not * emphase* because of whitespace\"));\n    assertThat(Markdown.convertToHtml(\"emphase*inside*word\"), is(\"emphase<em>inside<\/em>word\"));\n    assertThat(Markdown.convertToHtml(\"*Emphase many words*\"), is(\"<em>Emphase many words<\/em>\"));\n  }","id":68407,"modified_method":"@Test\n  public void shouldEmphaseText() {\n    assertThat(Markdown.convertToHtml(\"This is *important*\")).isEqualTo(\"This is <em>important<\/em>\");\n    assertThat(Markdown.convertToHtml(\"This should not be * \\n emphase\")).isEqualTo(\"This should not be * <br/> emphase\");\n    assertThat(Markdown.convertToHtml(\"This is *very* very *important*\")).isEqualTo(\"This is <em>very<\/em> very <em>important<\/em>\");\n    assertThat(Markdown.convertToHtml(\"Not * emphase * because of whitespaces\")).isEqualTo(\"Not * emphase * because of whitespaces\");\n    assertThat(Markdown.convertToHtml(\"Not *emphase * because of whitespace\")).isEqualTo(\"Not *emphase * because of whitespace\");\n    assertThat(Markdown.convertToHtml(\"Not * emphase* because of whitespace\")).isEqualTo(\"Not * emphase* because of whitespace\");\n    assertThat(Markdown.convertToHtml(\"emphase*inside*word\")).isEqualTo(\"emphase<em>inside<\/em>word\");\n    assertThat(Markdown.convertToHtml(\"*Emphase many words*\")).isEqualTo(\"<em>Emphase many words<\/em>\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDecorateUrl() {\n    assertThat(Markdown.convertToHtml(\"http://google.com\"),\n        is(\"<a href=\\\"http://google.com\\\" target=\\\"_blank\\\">http://google.com<\/a>\"));\n  }","id":68408,"modified_method":"@Test\n  public void shouldDecorateUrl() {\n    assertThat(Markdown.convertToHtml(\"http://google.com\"))\n        .isEqualTo(\"<a href=\\\"http://google.com\\\" target=\\\"_blank\\\">http://google.com<\/a>\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotChangeAnythingInTheText() {\n    assertThat(Markdown.convertToHtml(\"My text is $123 ''\"), is(\"My text is $123 ''\"));\n  }","id":68409,"modified_method":"@Test\n  public void shouldNotChangeAnythingInTheText() {\n    assertThat(Markdown.convertToHtml(\"My text is $123 ''\")).isEqualTo(\"My text is $123 ''\");\n  }","commit_id":"5afa530a10f6a22a8c1e656af0ca38e26207fa95","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"ResourceBundle getBundle(Locale locale) {\n    try {\n      return ResourceBundle.getBundle(GWT_BUNDLE, locale, manager.getLanguagePackClassLoader());\n    } catch (MissingResourceException e) {\n      throw new IllegalStateException(\"The English bundle for GWT extensions is not deployed\", e);\n    }\n  }","id":68410,"modified_method":"ResourceBundle getBundle(Locale locale) {\n    try {\n      return ResourceBundle.getBundle(GWT_BUNDLE, locale, manager.getBundleClassLoader());\n    } catch (MissingResourceException e) {\n      throw new IllegalStateException(\"The English bundle for GWT extensions is not deployed\", e);\n    }\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Only the given locale is searched. Contrary to java.util.ResourceBundle, no strategy for locating the bundle is implemented in\n   * this method.\n   */\n  String messageFromFile(Locale locale, String filename, String relatedProperty, boolean keepInCache) {\n    Map<Locale, String> fileCache = fileContentCache.get(filename);\n    if (fileCache != null && fileCache.containsKey(locale)) {\n      return fileCache.get(locale);\n    }\n\n    ClassLoader classloader = getClassLoaderForProperty(relatedProperty, locale);\n    String result = null;\n    if (classloader != null) {\n      String bundleBase = propertyToBundles.get(relatedProperty);\n      String filePath = bundleBase.replace('.', '/');\n      if (!\"en\".equals(locale.getLanguage())) {\n        filePath += \"_\" + locale.getLanguage();\n      }\n      filePath += \"/\" + filename;\n      InputStream input = classloader.getResourceAsStream(filePath);\n      if (input != null) {\n        result = readInputStream(filePath, input);\n      }\n\n      if (keepInCache) {\n        if (fileCache == null) {\n          fileCache = Maps.newHashMap();\n          fileContentCache.put(filename, fileCache);\n        }\n        // put null value for negative caching.\n        fileCache.put(locale, result);\n      }\n    }\n    return result;\n  }","id":68411,"modified_method":"/**\n   * Only the given locale is searched. Contrary to java.util.ResourceBundle, no strategy for locating the bundle is implemented in\n   * this method.\n   */\n  String messageFromFile(Locale locale, String filename, String relatedProperty, boolean keepInCache) {\n    Map<Locale, String> fileCache = fileContentCache.get(filename);\n    if (fileCache != null && fileCache.containsKey(locale)) {\n      return fileCache.get(locale);\n    }\n\n    String result = null;\n    String bundleBase = propertyToBundles.get(relatedProperty);\n    String filePath = bundleBase.replace('.', '/');\n    if (!\"en\".equals(locale.getLanguage())) {\n      filePath += \"_\" + locale.getLanguage();\n    }\n    filePath += \"/\" + filename;\n    InputStream input = i18nClassloader.getResourceAsStream(filePath);\n    if (input != null) {\n      result = readInputStream(filePath, input);\n    }\n\n    if (keepInCache) {\n      if (fileCache == null) {\n        fileCache = Maps.newHashMap();\n        fileContentCache.put(filename, fileCache);\n      }\n      // put null value for negative caching.\n      fileCache.put(locale, result);\n    }\n    return result;\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public String message(Locale locale, String key, String defaultValue, Object... parameters) {\n    String bundleKey = propertyToBundles.get(key);\n    ResourceBundle resourceBundle = null;\n    if (bundleKey != null) {\n      try {\n        // First, we check if the bundle exists in the language pack classloader\n        resourceBundle = ResourceBundle.getBundle(bundleKey, locale, languagePackClassLoader);\n        String message = resourceBundle.getString(key);\n        return formatMessage(message, parameters);\n      } catch (MissingResourceException e1) {\n        // well, maybe the plugin has specified its own bundles, let's see\n        resourceBundle = getBundleFromCorrespondingPluginClassloader(bundleKey, locale);\n      }\n    }\n    return message(resourceBundle, key, defaultValue, parameters);\n  }","id":68412,"modified_method":"public String message(Locale locale, String key, String defaultValue, Object... parameters) {\n    String bundleKey = propertyToBundles.get(key);\n    String value = null;\n    if (bundleKey != null) {\n      try {\n        ResourceBundle resourceBundle = ResourceBundle.getBundle(bundleKey, locale, i18nClassloader);\n        value = resourceBundle.getString(key);\n      } catch (MissingResourceException e1) {\n        // ignore\n      }\n    }\n    if (value == null) {\n      value = defaultValue;\n    }\n    return formatMessage(value, parameters);\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void start() {\n    initClassloaders();\n    initProperties();\n  }","id":68413,"modified_method":"public void start() {\n    doStart(new I18nClassloader(pluginRepository));\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldUseDefaultLocaleIfMissingValueInLocalizedBundle() {\n    assertThat(manager.message(Locale.FRENCH, \"only.in.english\", null), Is.is(\"Missing in French bundle\"));\n    assertThat(manager.message(Locale.CHINA, \"only.in.english\", null), Is.is(\"Missing in French bundle\"));\n  }","id":68414,"modified_method":"@Test\n  public void shouldUseDefaultLocaleIfMissingValueInLocalizedBundle() {\n    assertThat(manager.message(Locale.FRENCH, \"only.in.english\", null)).isEqualTo(\"Missing in French bundle\");\n    assertThat(manager.message(Locale.CHINA, \"only.in.english\", null)).isEqualTo(\"Missing in French bundle\");\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldReturnDefaultValueIfMissingKey() {\n    assertThat(manager.message(Locale.ENGLISH, \"foo.unknown\", \"default\"), Is.is(\"default\"));\n    assertThat(manager.message(Locale.FRENCH, \"foo.unknown\", \"default\"), Is.is(\"default\"));\n  }","id":68415,"modified_method":"@Test\n  public void should_return_default_value_if_missing_key() {\n    assertThat(manager.message(Locale.ENGLISH, \"unknown\", \"default\")).isEqualTo(\"default\");\n    assertThat(manager.message(Locale.FRENCH, \"unknown\", \"default\")).isEqualTo(\"default\");\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void init() {\n    Map<String, ClassLoader> bundleToClassLoaders = Maps.newHashMap();\n    // following represents the English language pack + a core plugin : they use the same classloader\n    coreClassLoader = newCoreClassLoader();\n    bundleToClassLoaders.put(BUNDLE_PACKAGE + \"core\", coreClassLoader);\n    bundleToClassLoaders.put(BUNDLE_PACKAGE + \"checkstyle\", coreClassLoader);\n    // following represents a commercial plugin that must embed all its bundles, whatever the language\n    sqaleClassLoader = newSqaleClassLoader();\n    bundleToClassLoaders.put(BUNDLE_PACKAGE + \"sqale\", sqaleClassLoader);\n    // following represents a forge plugin that embeds only the english bundle, and lets the language\n    // packs embed all the bundles for the other languages\n    forgeClassLoader = newForgeClassLoader();\n    bundleToClassLoaders.put(BUNDLE_PACKAGE + \"forge\", forgeClassLoader);\n\n    manager = new I18nManager(bundleToClassLoaders, coreClassLoader);\n    manager.start();\n  }","id":68416,"modified_method":"@Before\n  public void init() {\n    PluginRepository pluginRepository = mock(PluginRepository.class);\n    List<PluginMetadata> plugins = Arrays.asList(newPlugin(\"sqale\"), newPlugin(\"frpack\"), newPlugin(\"core\"), newPlugin(\"checkstyle\"), newPlugin(\"other\"));\n    when(pluginRepository.getMetadata()).thenReturn(plugins);\n\n    I18nClassloader i18nClassloader = new I18nClassloader(new ClassLoader[]{\n      newCoreClassloader(), newFrenchPackClassloader(), newSqaleClassloader(), newCheckstyleClassloader()\n    });\n    manager = new I18nManager(pluginRepository);\n    manager.doStart(i18nClassloader);\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private URLClassLoader newCoreClassLoader() {\n    return newClassLoader(\"/org/sonar/core/i18n/englishPack/\", \"/org/sonar/core/i18n/frenchPack/\");\n  }","id":68417,"modified_method":"static URLClassLoader newCoreClassloader() {\n    return newClassLoader(\"/org/sonar/core/i18n/corePlugin/\");\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private URLClassLoader newClassLoader(String... resourcePaths) {\n    URL[] urls = new URL[resourcePaths.length];\n    for (int index = 0; index < resourcePaths.length; index++) {\n      urls[index] = getClass().getResource(resourcePaths[index]);\n    }\n    return new URLClassLoader(urls);\n  }","id":68418,"modified_method":"private static URLClassLoader newClassLoader(String... resourcePaths) {\n    URL[] urls = new URL[resourcePaths.length];\n    for (int index = 0; index < resourcePaths.length; index++) {\n      urls[index] = I18nManagerTest.class.getResource(resourcePaths[index]);\n    }\n    return new URLClassLoader(urls);\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private URLClassLoader newSqaleClassLoader() {\n    return newClassLoader(\"/org/sonar/core/i18n/sqalePlugin/\");\n  }","id":68419,"modified_method":"/**\n   * Example of plugin that embeds its own translations (English + French).\n   */\n  static URLClassLoader newSqaleClassloader() {\n    return newClassLoader(\"/org/sonar/core/i18n/sqalePlugin/\");\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldKeepInCache() {\n    assertThat(manager.getFileContentCache().size(), Is.is(0));\n    boolean keepInCache = true;\n    String html = manager.messageFromFile(Locale.ENGLISH, \"ArchitectureRule.html\", \"checkstyle.rule1.name\" /*\n                                                                                                            * any property in the same\n                                                                                                            * bundle\n                                                                                                            */, keepInCache);\n\n    assertThat(html, not(nullValue()));\n    Map<String, Map<Locale, String>> cache = manager.getFileContentCache();\n    assertThat(cache.size(), Is.is(1));\n    assertThat(cache.get(\"ArchitectureRule.html\").get(Locale.ENGLISH), Is.is(\"This is the architecture rule\"));\n  }","id":68420,"modified_method":"@Test\n  public void should_keep_in_cache() {\n    assertThat(manager.getFileContentCache()).isEmpty();\n    boolean keepInCache = true;\n    String html = manager.messageFromFile(Locale.ENGLISH, \"ArchitectureRule.html\", \"checkstyle.rule1.name\", keepInCache);\n    assertThat(html).isEqualTo(\"This is the architecture rule\");\n\n    html = manager.messageFromFile(Locale.ENGLISH, \"ArchitectureRule.html\", \"checkstyle.rule1.name\", keepInCache);\n    assertThat(html).isEqualTo(\"This is the architecture rule\");\n    assertThat(manager.getFileContentCache()).hasSize(1);\n\n    html = manager.messageFromFile(Locale.FRENCH, \"ArchitectureRule.html\", \"checkstyle.rule1.name\", keepInCache);\n    assertThat(html).isEqualTo(\"Règle d'architecture\");\n    assertThat(manager.getFileContentCache()).hasSize(1);\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatMessageWithParameters() {\n    assertThat(manager.message(Locale.ENGLISH, \"with.parameters\", null, \"one\", \"two\"), Is.is(\"First is one and second is two\"));\n  }","id":68421,"modified_method":"@Test\n  public void shouldFormatMessageWithParameters() {\n    assertThat(manager.message(Locale.ENGLISH, \"with.parameters\", null, \"one\", \"two\")).isEqualTo(\"First is one and second is two\");\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldAcceptEmptyLabels() {\n    assertThat(manager.message(Locale.ENGLISH, \"empty\", \"default\"), Is.is(\"\"));\n    assertThat(manager.message(Locale.FRENCH, \"empty\", \"default\"), Is.is(\"\"));\n  }","id":68422,"modified_method":"@Test\n  public void should_accept_empty_labels() {\n    assertThat(manager.message(Locale.ENGLISH, \"empty\", \"default\")).isEqualTo(\"\");\n    assertThat(manager.message(Locale.FRENCH, \"empty\", \"default\")).isEqualTo(\"\");\n  }","commit_id":"0cfe30231ba979729111fdbf79361af41c520824","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void processAlerts(SMInputCursor alertsCursor, RulesProfile profile, ValidationMessages messages) throws XMLStreamException {\n    if (metricFinder == null) {\n      // TODO remove when constructor without MetricFinder would be removed\n      Logs.INFO.error(\"Unable to parse alerts, because MetricFinder not available.\");\n      return;\n    }\n    while (alertsCursor.getNext() != null) {\n      SMInputCursor alertCursor = alertsCursor.childElementCursor();\n\n      String metricKey = null, operator = \"\", valueError = \"\", valueWarning = \"\";\n\n      while (alertCursor.getNext() != null) {\n        String nodeName = alertCursor.getLocalName();\n\n        if (StringUtils.equals(\"metric\", nodeName)) {\n          metricKey = StringUtils.trim(alertCursor.collectDescendantText(false));\n\n        } else if (StringUtils.equals(\"operator\", nodeName)) {\n          operator = StringUtils.trim(alertCursor.collectDescendantText(false));\n\n        } else if (StringUtils.equals(\"warning\", nodeName)) {\n          valueWarning = StringUtils.trim(alertCursor.collectDescendantText(false));\n\n        } else if (StringUtils.equals(\"error\", nodeName)) {\n          valueError = StringUtils.trim(alertCursor.collectDescendantText(false));\n        }\n      }\n\n      Metric metric = metricFinder.findByKey(metricKey);\n      if (metric == null) {\n        messages.addWarningText(\"Metric '\" + metricKey + \"' does not exist\");\n      } else {\n        Alert alert = new Alert(profile, metric, operator, valueError, valueWarning);\n        profile.getAlerts().add(alert);\n      }\n    }\n  }","id":68423,"modified_method":"private void processAlerts(SMInputCursor alertsCursor, RulesProfile profile, ValidationMessages messages) throws XMLStreamException {\n    if (metricFinder == null) {\n      // TODO remove when constructor without MetricFinder would be removed\n      Logs.INFO.error(\"Unable to parse alerts, because MetricFinder not available.\");\n      return;\n    }\n    while (alertsCursor.getNext() != null) {\n      SMInputCursor alertCursor = alertsCursor.childElementCursor();\n\n      String metricKey = null, operator = \"\", valueError = \"\", valueWarning = \"\";\n      Integer period = null;\n\n      while (alertCursor.getNext() != null) {\n        String nodeName = alertCursor.getLocalName();\n\n        if (StringUtils.equals(\"metric\", nodeName)) {\n          metricKey = StringUtils.trim(alertCursor.collectDescendantText(false));\n\n        } else if (StringUtils.equals(\"period\", nodeName)) {\n          String periodParameter = StringUtils.trim(alertCursor.collectDescendantText(false));\n          if (StringUtils.isNotBlank(periodParameter)) {\n            period = Integer.parseInt(periodParameter);\n          }\n        }else if (StringUtils.equals(\"operator\", nodeName)) {\n          operator = StringUtils.trim(alertCursor.collectDescendantText(false));\n\n        } else if (StringUtils.equals(\"warning\", nodeName)) {\n          valueWarning = StringUtils.trim(alertCursor.collectDescendantText(false));\n\n        } else if (StringUtils.equals(\"error\", nodeName)) {\n          valueError = StringUtils.trim(alertCursor.collectDescendantText(false));\n        }\n      }\n\n      Metric metric = metricFinder.findByKey(metricKey);\n      if (metric == null) {\n        messages.addWarningText(\"Metric '\" + metricKey + \"' does not exist\");\n      } else {\n        Alert alert = new Alert(profile, metric, operator, valueError, valueWarning, period);\n        profile.getAlerts().add(alert);\n      }\n    }\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void importProfileWithAlerts() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfileWithAlerts.xml\", validation);\n\n    assertThat(profile.getAlerts().size(), is(1));\n    Alert alert = profile.getAlerts().get(0);\n    assertThat(alert.getMetric().getKey(), is(\"complexity\"));\n    assertThat(alert.getOperator(), is(Alert.OPERATOR_GREATER));\n    assertThat(alert.getValueWarning(), is(\"10\"));\n    assertThat(alert.getValueError(), is(\"12\"));\n  }","id":68424,"modified_method":"@Test\n  public void importProfileWithAlerts() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfileWithAlerts.xml\", validation);\n\n    assertThat(profile.getAlerts()).hasSize(2);\n\n    Alert alert = profile.getAlerts().get(0);\n    assertThat(alert.getMetric().getKey()).isEqualTo(\"lines\");\n    assertThat(alert.getOperator()).isEqualTo(Alert.OPERATOR_SMALLER);\n    assertThat(alert.getValueWarning()).isEqualTo(\"0\");\n    assertThat(alert.getValueError()).isEqualTo(\"10\");\n    assertThat(alert.getPeriod()).isNull();\n\n    alert = profile.getAlerts().get(1);\n    assertThat(alert.getMetric().getKey()).isEqualTo(\"complexity\");\n    assertThat(alert.getOperator()).isEqualTo(Alert.OPERATOR_GREATER);\n    assertThat(alert.getValueWarning()).isEqualTo(\"10\");\n    assertThat(alert.getValueError()).isEqualTo(\"12\");\n    assertThat(alert.getPeriod()).isEqualTo(1);\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void importProfile() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfile.xml\", validation);\n\n    assertThat(profile.getLanguage(), is(\"java\"));\n    assertThat(profile.getName(), is(\"sonar way\"));\n    assertThat(validation.hasErrors(), is(false));\n    assertNotNull(profile);\n    assertThat(profile.getActiveRule(\"checkstyle\", \"IllegalRegexp\").getSeverity(), is(RulePriority.CRITICAL));\n  }","id":68425,"modified_method":"@Test\n  public void importProfile() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfile.xml\", validation);\n\n    assertThat(profile.getLanguage()).isEqualTo(\"java\");\n    assertThat(profile.getName()).isEqualTo(\"sonar way\");\n    assertThat(validation.hasErrors()).isFalse();\n    assertThat(profile).isNotNull();\n\n    assertThat(profile.getActiveRule(\"checkstyle\", \"IllegalRegexp\").getSeverity()).isEqualTo(RulePriority.CRITICAL);\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotFailWhenNoMetricFinder() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = new XMLProfileParser(newRuleFinder(), null)\n        .parseResource(getClass().getClassLoader(), getResourcePath(\"importProfileWithAlerts.xml\"), validation);\n\n    assertThat(profile.getAlerts().size(), is(0));\n  }","id":68426,"modified_method":"@Test\n  public void shouldNotFailWhenNoMetricFinder() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = new XMLProfileParser(newRuleFinder(), null)\n        .parseResource(getClass().getClassLoader(), getResourcePath(\"importProfileWithAlerts.xml\"), validation);\n\n    assertThat(profile.getAlerts()).isEmpty();\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void nameAndLanguageShouldBeMandatory() {\n    ValidationMessages validation = ValidationMessages.create();\n    parse(\"nameAndLanguageShouldBeMandatory.xml\", validation);\n\n    assertThat(validation.getErrors().size(), is(2));\n    assertThat(validation.getErrors().get(0), containsString(\"\"));\n  }","id":68427,"modified_method":"@Test\n  public void nameAndLanguageShouldBeMandatory() {\n    ValidationMessages validation = ValidationMessages.create();\n    parse(\"nameAndLanguageShouldBeMandatory.xml\", validation);\n\n    assertThat(validation.getErrors()).hasSize(2);\n    assertThat(validation.getErrors().get(0)).contains(\"\");\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void importProfileWithRuleParameters() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfileWithRuleParameters.xml\", validation);\n\n    assertThat(validation.hasErrors(), is(false));\n    assertThat(validation.hasWarnings(), is(false));\n    ActiveRule rule = profile.getActiveRule(\"checkstyle\", \"IllegalRegexp\");\n    assertThat(rule.getParameter(\"format\"), is(\"foo\"));\n    assertThat(rule.getParameter(\"message\"), is(\"with special characters < > &\"));\n  }","id":68428,"modified_method":"@Test\n  public void importProfileWithRuleParameters() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfileWithRuleParameters.xml\", validation);\n\n    assertThat(validation.hasErrors()).isFalse();\n    assertThat(validation.hasWarnings()).isFalse();\n\n    ActiveRule rule = profile.getActiveRule(\"checkstyle\", \"IllegalRegexp\");\n    assertThat(rule.getParameter(\"format\")).isEqualTo(\"foo\");\n    assertThat(rule.getParameter(\"message\")).isEqualTo(\"with special characters < > &\");\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void importProfileWithUnknownRuleParameter() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfileWithUnknownRuleParameter.xml\", validation);\n\n    assertThat(validation.getWarnings().size(), is(1));\n    ActiveRule rule = profile.getActiveRule(\"checkstyle\", \"IllegalRegexp\");\n    assertThat(rule.getParameter(\"unknown\"), nullValue());\n  }","id":68429,"modified_method":"@Test\n  public void importProfileWithUnknownRuleParameter() {\n    ValidationMessages validation = ValidationMessages.create();\n    RulesProfile profile = parse(\"importProfileWithUnknownRuleParameter.xml\", validation);\n\n    assertThat(validation.getWarnings()).hasSize(1);\n    ActiveRule rule = profile.getActiveRule(\"checkstyle\", \"IllegalRegexp\");\n    assertThat(rule.getParameter(\"unknown\")).isNull();\n  }","commit_id":"1c4f8c4b434d15b7bac640e5581f91dd0a2a844a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testCRLFIWithinQuotes() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,\\\"my test\\r\\n text\\\",1\\r\\n'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat((Integer) doc.field(\"id \"), equalTo(new Integer(1)));\n    assertThat((String) doc.field(\"text \"), equalTo(\"my test\\r\\n text\"));\n    assertThat((Integer) doc.field(\"num \"), equalTo(new Integer(1)));\n  }","id":68430,"modified_method":"@Test\n  public void testCRLFIWithinQuotes() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,\\\"my test\\r\\n text\\\",1\\r\\n'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat((Integer) doc.field(\"id \")).isEqualTo(1);\n    assertThat((String) doc.field(\"text \")).isEqualTo(\"my test\\r\\n text\");\n    assertThat((Integer) doc.field(\"num \")).isEqualTo(1);\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\n  public void testEndingSpaceInFieldName() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,my test text,1\\r\\n'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer> field(\"id \"), equalTo(1));\n    assertThat(doc.field(\"text\"), nullValue());\n    assertThat(doc.<String> field(\"text \"), equalTo(\"my test text\"));\n    assertThat(doc.<Integer> field(\"num \"), equalTo(1));\n  }","id":68431,"modified_method":"@Test\n  public void testEndingSpaceInFieldName() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,my test text,1\\r\\n'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer> field(\"id \")).isEqualTo(1);\n    assertThat(doc.field(\"text\")).isNull();\n    assertThat(doc.<String> field(\"text \")).isEqualTo(\"my test text\");\n    assertThat(doc.<Integer> field(\"num \")).isEqualTo(1);\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void testNegativeInteger() {\n    String cfgJson = \"{source: { content: { value: 'id\\r\\n-1'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat((Integer) doc.field(\"id\"), equalTo(new Integer(-1)));\n\n  }","id":68432,"modified_method":"public void testNegativeInteger() {\n    String cfgJson = \"{source: { content: { value: 'id\\r\\n-1'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer> field(\"id\")).isEqualTo(-1);\n\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\n  public void testCRLFDelimiter() {\n    String cfgJson = \"{source: { content: { value: 'id,text,num\\r\\n1,my test text,1'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer> field(\"id\"), equalTo(1));\n    assertThat(doc.<String> field(\"text\"), equalTo(\"my test text\"));\n    assertThat(doc.<Integer> field(\"num\"), equalTo(1));\n  }","id":68433,"modified_method":"@Test\n  public void testCRLFDelimiter() {\n    String cfgJson = \"{source: { content: { value: 'id,text,num\\r\\n1,my test text,1'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Integer> field(\"id\")).isEqualTo(1);\n    assertThat(doc.<String> field(\"text\")).isEqualTo(\"my test text\");\n    assertThat(doc.<Integer> field(\"num\")).isEqualTo(1);\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\n  public void testEscapingDoubleQuotes() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,\\\"my test \\\"\\\" text\\\",1\\r\\n'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat((Integer) doc.field(\"id \"), equalTo(new Integer(1)));\n    assertThat((String) doc.field(\"text \"), equalTo(\"my test \\\"\\\" text\"));\n    assertThat((Integer) doc.field(\"num \"), equalTo(new Integer(1)));\n  }","id":68434,"modified_method":"@Test\n  public void testEscapingDoubleQuotes() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,\\\"my test \\\"\\\" text\\\",1\\r\\n'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer> field(\"id \")).isEqualTo(1);\n    assertThat(doc.<String> field(\"text \")).isEqualTo(\"my test \\\"\\\" text\");\n    assertThat(doc.<Integer> field(\"num \")).isEqualTo(1);\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void testNegativeFloat() {\n    String cfgJson = \"{source: { content: { value: 'id\\r\\n-1.0'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat((Float) doc.field(\"id\"), equalTo(new Float(-1.0f)));\n  }","id":68435,"modified_method":"public void testNegativeFloat() {\n    String cfgJson = \"{source: { content: { value: 'id\\r\\n-1.0'} }, extractor : { row : {} }, transformers : [{ csv : {} }], loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertThat(doc.<Float> field(\"id\")).isEqualTo(-1.0f);\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\n   * Creates an ETL processor by setting the configuration of each component.\n   *\n   * @param iBeginBlocks\n   *          List of Block configurations to execute at the beginning of processing\n   * @param iSource\n   *          Source component configuration\n   * @param iExtractor\n   *          Extractor component configuration\n   * @param iTransformers\n   *          List of Transformer configurations\n   * @param iLoader\n   *          Loader component configuration\n   * @param iEndBlocks\n   *          List of Block configurations to execute at the end of processing\n   * @param iContext\n   *          Execution Context\n   * @return Current OETProcessor instance\n   **/\n  public OETLProcessor parse(final Collection<ODocument> iBeginBlocks, final ODocument iSource, final ODocument iExtractor,\n      final Collection<ODocument> iTransformers, final ODocument iLoader, final Collection<ODocument> iEndBlocks,\n      final OCommandContext iContext) {\n    if (iExtractor == null)\n      throw new IllegalArgumentException(\"No Extractor configured\");\n\n    context = iContext != null ? iContext : createDefaultContext();\n    init();\n\n    try {\n      String name;\n\n      // BEGIN BLOCKS\n      beginBlocks = new ArrayList<OBlock>();\n      if (iBeginBlocks != null)\n        for (ODocument block : iBeginBlocks) {\n          name = block.fieldNames()[0];\n          final OBlock b = factory.getBlock(name);\n          beginBlocks.add(b);\n          configureComponent(b, (ODocument) block.field(name), iContext);\n          // b.execute();\n        }\n\n      if (iSource != null) {\n        // SOURCE\n        name = iSource.fieldNames()[0];\n        source = factory.getSource(name);\n        configureComponent(source, (ODocument) iSource.field(name), iContext);\n      } else\n        source = factory.getSource(\"input\");\n\n      // EXTRACTOR\n      name = iExtractor.fieldNames()[0];\n      extractor = factory.getExtractor(name);\n      configureComponent(extractor, (ODocument) iExtractor.field(name), iContext);\n\n      if (iLoader != null) {\n        // LOADER\n        name = iLoader.fieldNames()[0];\n        loader = factory.getLoader(name);\n        configureComponent(loader, (ODocument) iLoader.field(name), iContext);\n      } else\n        loader = factory.getLoader(\"output\");\n\n      // TRANSFORMERS\n      transformers = new ArrayList<OTransformer>();\n      if (iTransformers != null)\n        for (ODocument t : iTransformers) {\n          name = t.fieldNames()[0];\n          final OTransformer tr = factory.getTransformer(name);\n          transformers.add(tr);\n          configureComponent(tr, (ODocument) t.field(name), iContext);\n        }\n\n      // END BLOCKS\n      endBlocks = new ArrayList<OBlock>();\n      if (iEndBlocks != null)\n        for (ODocument block : iEndBlocks) {\n          name = block.fieldNames()[0];\n          final OBlock b = factory.getBlock(name);\n          endBlocks.add(b);\n          configureComponent(b, (ODocument) block.field(name), iContext);\n        }\n\n      // analyzeFlow();\n\n    } catch (Exception e) {\n      throw new OConfigurationException(\"Error on creating ETL processor\", e);\n    }\n    return this;\n  }","id":68436,"modified_method":"/**\n   * Creates an ETL processor by setting the configuration of each component.\n   *\n   * @param iBeginBlocks\n   *          List of Block configurations to execute at the beginning of processing\n   * @param iSource\n   *          Source component configuration\n   * @param iExtractor\n   *          Extractor component configuration\n   * @param iTransformers\n   *          List of Transformer configurations\n   * @param iLoader\n   *          Loader component configuration\n   * @param iEndBlocks\n   *          List of Block configurations to execute at the end of processing\n   * @param iContext\n   *          Execution Context\n   * @return Current OETProcessor instance\n   **/\n  public OETLProcessor parse(final Collection<ODocument> iBeginBlocks, final ODocument iSource, final ODocument iExtractor,\n      final Collection<ODocument> iTransformers, final ODocument iLoader, final Collection<ODocument> iEndBlocks,\n      final OCommandContext iContext) {\n    if (iExtractor == null)\n      throw new IllegalArgumentException(\"No Extractor configured\");\n\n    context = iContext != null ? iContext : createDefaultContext();\n    init();\n\n    try {\n      String name;\n\n      // BEGIN BLOCKS\n      beginBlocks = new ArrayList<OBlock>();\n      if (iBeginBlocks != null)\n        for (ODocument block : iBeginBlocks) {\n          name = block.fieldNames()[0];\n          final OBlock b = factory.getBlock(name);\n          beginBlocks.add(b);\n          configureComponent(b, (ODocument) block.field(name), iContext);\n        }\n\n      if (iSource != null) {\n        // SOURCE\n        name = iSource.fieldNames()[0];\n        source = factory.getSource(name);\n        configureComponent(source, (ODocument) iSource.field(name), iContext);\n      } else\n        source = factory.getSource(\"input\");\n\n      // EXTRACTOR\n      name = iExtractor.fieldNames()[0];\n      System.out.println(\"name:: \" + name);\n      extractor = factory.getExtractor(name);\n      configureComponent(extractor, (ODocument) iExtractor.field(name), iContext);\n\n      if (iLoader != null) {\n        // LOADER\n        name = iLoader.fieldNames()[0];\n        loader = factory.getLoader(name);\n        configureComponent(loader, (ODocument) iLoader.field(name), iContext);\n      } else\n        loader = factory.getLoader(\"output\");\n\n      // TRANSFORMERS\n      transformers = new ArrayList<OTransformer>();\n      if (iTransformers != null)\n        for (ODocument t : iTransformers) {\n          name = t.fieldNames()[0];\n          final OTransformer tr = factory.getTransformer(name);\n          transformers.add(tr);\n          configureComponent(tr, (ODocument) t.field(name), iContext);\n        }\n\n      // END BLOCKS\n      endBlocks = new ArrayList<OBlock>();\n      if (iEndBlocks != null)\n        for (ODocument block : iEndBlocks) {\n          name = block.fieldNames()[0];\n          final OBlock b = factory.getBlock(name);\n          endBlocks.add(b);\n          configureComponent(b, (ODocument) block.field(name), iContext);\n        }\n\n      // analyzeFlow();\n\n    } catch (Exception e) {\n      throw new OConfigurationException(\"Error on creating ETL processor\", e);\n    }\n    return this;\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected static OETLProcessor parseConfigAndParameters(String[] args) {\n    final OCommandContext context = createDefaultContext();\n\n    ODocument configuration = new ODocument().fromJSON(\"{}\");\n    for (final String arg : args) {\n      if (arg.charAt(0) != '-') {\n        try {\n          final String config = OIOUtils.readFileAsString(new File(arg));\n          configuration = new ODocument().fromJSON(config, \"noMap\");\n          ODocument cfgGlobal = configuration.field(\"config\");\n          if (cfgGlobal != null) {\n            for (String f : cfgGlobal.fieldNames()) {\n              context.setVariable(f, cfgGlobal.field(f));\n            }\n          }\n        } catch (IOException e) {\n          throw new OConfigurationException(\"Error on loading config file: \" + arg, e);\n        }\n      }\n    }\n\n    // override with args passes by command line\n    for (final String arg : args) {\n      if (arg.charAt(0) == '-') {\n        final String[] parts = arg.substring(1).split(\"=\");\n        context.setVariable(parts[0], parts[1]);\n      }\n    }\n\n    return new OETLProcessor().parse(configuration, context);\n  }","id":68437,"modified_method":"protected static OETLProcessor parseConfigAndParameters(String[] args) {\n    final OCommandContext context = createDefaultContext();\n\n    ODocument configuration = new ODocument().fromJSON(\"{}\");\n    for (final String arg : args) {\n      if (arg.charAt(0) != '-') {\n        try {\n          final String config = OIOUtils.readFileAsString(new File(arg));\n\n          configuration.merge(new ODocument().fromJSON(config, \"noMap\"), true, true);\n          // configuration = ;\n          ODocument cfgGlobal = configuration.field(\"config\");\n          if (cfgGlobal != null) {\n            for (String f : cfgGlobal.fieldNames()) {\n              context.setVariable(f, cfgGlobal.field(f));\n            }\n          }\n        } catch (IOException e) {\n          throw new OConfigurationException(\"Error on loading config file: \" + arg, e);\n        }\n      }\n    }\n\n    // override with args passes by command line\n    for (final String arg : args) {\n      if (arg.charAt(0) == '-') {\n        final String[] parts = arg.substring(1).split(\"=\");\n        context.setVariable(parts[0], parts[1]);\n      }\n    }\n\n    return new OETLProcessor().parse(configuration, context);\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\n    public void testMain() throws Exception {\n\n        final OETLProcessor processor = OETLProcessor.parseConfigAndParameters(new String[]{\"-dburl=local:/tmp/db\",\"./src/main/resources/comment.json\"});\n\n        Assertions.assertThat(processor.getContext().getVariable(\"dburl\")).isEqualTo(\"local:/tmp/db\");\n\n    }","id":68438,"modified_method":"@Test\n  public void testMain() throws Exception {\n\n    final OETLProcessor processor = OETLProcessor.parseConfigAndParameters(new String[] { \"-dburl=local:/tmp/db\",\n        \"./src/main/resources/comment.json\" });\n\n    assertThat(processor.getContext().getVariable(\"dburl\")).isEqualTo(\"local:/tmp/db\");\n\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\n  public void testAddMetadataToIndex() {\n\n    process(\"{source: { content: { value: 'name,surname\\nJay,Miner' } }, extractor : { row: {} }, transformers: [{ csv: {} }], loader: { orientdb: {\\n\"\n        + \"      dbURL: \\\"memory:ETLBaseTest\\\",\\n\"\n        + \"      dbUser: \\\"admin\\\",\\n\"\n        + \"      dbPassword: \\\"admin\\\",\\n\"\n        + \"      dbAutoCreate: true,\\n\"\n        + \"      tx: false,\\n\"\n        + \"      batchCommit: 1000,\\n\"\n        + \"      wal : false,\\n\"\n        + \"      dbType: \\\"graph\\\",\\n\"\n        + \"      classes: [\\n\"\n        + \"        {name:\\\"Person\\\", extends: \\\"V\\\" },\\n\"\n        + \"      ],\\n\"\n        + \"      indexes: [{class:\\\"V\\\" , fields:[\\\"surname:String\\\"], \\\"type\\\":\\\"NOTUNIQUE\\\", \\\"metadata\\\": { \\\"ignoreNullValues\\\" : \\\"false\\\"}} ]  } } }\");\n\n    final OIndexManagerProxy indexManager = graph.getRawGraph().getMetadata().getIndexManager();\n\n    assertThat(indexManager.existsIndex(\"V.surname\"), is(true));\n\n    final ODocument indexMetadata = indexManager.getIndex(\"V.surname\").getMetadata();\n    assertThat(indexMetadata.containsField(\"ignoreNullValues\"), is(true));\n    assertThat(indexMetadata.<String>field(\"ignoreNullValues\"), equalTo(\"false\"));\n\n  }","id":68439,"modified_method":"@Test\n  public void testAddMetadataToIndex() {\n\n    process(\"{source: { content: { value: 'name,surname\\nJay,Miner' } }, extractor : { row: {} }, transformers: [{ csv: {} }], loader: { orientdb: {\\n\"\n            + \"      dbURL: \\\"memory:ETLBaseTest\\\",\\n\"\n            + \"      dbUser: \\\"admin\\\",\\n\"\n            + \"      dbPassword: \\\"admin\\\",\\n\"\n            + \"      dbAutoCreate: true,\\n\"\n            + \"      tx: false,\\n\"\n            + \"      batchCommit: 1000,\\n\"\n            + \"      wal : false,\\n\"\n            + \"      dbType: \\\"graph\\\",\\n\"\n            + \"      classes: [\\n\"\n            + \"        {name:\\\"Person\\\", extends: \\\"V\\\" },\\n\"\n            + \"      ],\\n\"\n            + \"      indexes: [{class:\\\"V\\\" , fields:[\\\"surname:String\\\"], \\\"type\\\":\\\"NOTUNIQUE\\\", \\\"metadata\\\": { \\\"ignoreNullValues\\\" : \\\"false\\\"}} ]  } } }\");\n\n    final OIndexManagerProxy indexManager = graph.getRawGraph().getMetadata().getIndexManager();\n\n    assertThat(indexManager.existsIndex(\"V.surname\")).isTrue();\n\n    final ODocument indexMetadata = indexManager.getIndex(\"V.surname\").getMetadata();\n    assertThat(indexMetadata.containsField(\"ignoreNullValues\")).isTrue();\n    assertThat(indexMetadata.<String>field(\"ignoreNullValues\")).isEqualTo(\"false\");\n\n  }","commit_id":"b6b13191720325d05538107eccc1f45eb3656db4","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\n  public void shouldFormatMapOfIntDouble() {\n    Map<Integer, Double> map = Maps.newLinkedHashMap();\n    map.put(13, 2.0);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s, is(\"13=2.0;5=5.75\"));// same order\n  }","id":68440,"modified_method":"@Test\n  public void shouldFormatMapOfIntDouble() {\n    Map<Integer, Double> map = Maps.newLinkedHashMap();\n    map.put(13, 2.0);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s).isEqualTo(\"13=2.0;5=5.75\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldKeepOrderWhenParsingMultiset() {\n    Multiset<String> multiset = KeyValueFormat.parseMultiset(\"foo=2;bar=1\");\n\n    // first one is foo\n    assertThat(multiset.iterator().next(), is(\"foo\"));\n  }","id":68441,"modified_method":"@Test\n  public void shouldKeepOrderWhenParsingMultiset() {\n    Multiset<String> multiset = KeyValueFormat.parseMultiset(\"foo=2;bar=1\");\n\n    // first one is foo\n    assertThat(multiset.iterator().next()).isEqualTo(\"foo\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatMultiset() {\n    Multiset<String> set = LinkedHashMultiset.create();\n    set.add(\"foo\");\n    set.add(\"foo\");\n    set.add(\"bar\");\n    assertThat(KeyValueFormat.format(set), is(\"foo=2;bar=1\"));\n  }","id":68442,"modified_method":"@Test\n  public void shouldFormatMultiset() {\n    Multiset<String> set = LinkedHashMultiset.create();\n    set.add(\"foo\");\n    set.add(\"foo\");\n    set.add(\"bar\");\n    assertThat(KeyValueFormat.format(set)).isEqualTo(\"foo=2;bar=1\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatMapOfStrings() {\n    Map<String, String> map = Maps.newLinkedHashMap();\n    map.put(\"lucky\", \"luke\");\n    map.put(\"aste\", \"rix\");\n    String s = KeyValueFormat.format(map);\n    assertThat(s, is(\"lucky=luke;aste=rix\"));// same order\n  }","id":68443,"modified_method":"@Test\n  public void shouldFormatMapOfStrings() {\n    Map<String, String> map = Maps.newLinkedHashMap();\n    map.put(\"lucky\", \"luke\");\n    map.put(\"aste\", \"rix\");\n    String s = KeyValueFormat.format(map);\n    // same order\n    assertThat(s).isEqualTo(\"lucky=luke;aste=rix\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatMapOfIntegerString() {\n    Map<Integer, String> map = Maps.newLinkedHashMap();\n    map.put(3, \"three\");\n    map.put(5, \"five\");\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s, is(\"3=three;5=five\"));// same order\n  }","id":68444,"modified_method":"@Test\n  public void shouldFormatMapOfIntegerString() {\n    Map<Integer, String> map = Maps.newLinkedHashMap();\n    map.put(3, \"three\");\n    map.put(5, \"five\");\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s).isEqualTo(\"3=three;5=five\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldParseStrings() {\n    Map<String, String> map = KeyValueFormat.parse(\"one=un;two=deux\");\n    assertThat(map.size(), is(2));\n    assertThat(map.get(\"one\"), is(\"un\"));\n    assertThat(map.get(\"two\"), is(\"deux\"));\n    assertThat(map.keySet().iterator().next(), is(\"one\"));// same order as in string\n  }","id":68445,"modified_method":"@Test\n  public void shouldParseStrings() {\n    Map<String, String> map = KeyValueFormat.parse(\"one=un;two=deux\");\n    assertThat(map.size()).isEqualTo(2);\n    assertThat(map.get(\"one\")).isEqualTo(\"un\");\n    assertThat(map.get(\"two\")).isEqualTo(\"deux\");\n    assertThat(map.keySet().iterator().next()).isEqualTo(\"one\");// same order as in string\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldParseEmptyFields() {\n    Map<Integer, Double> map = KeyValueFormat.parseIntDouble(\"4=4.2;2=;6=6.68\");\n    assertThat(map.size(), is(3));\n    assertThat(map.get(4), is(4.2));\n    assertThat(map.get(2), nullValue());\n    assertThat(map.get(6), is(6.68));\n  }","id":68446,"modified_method":"@Test\n  public void shouldParseEmptyFields() {\n    Map<Integer, Double> map = KeyValueFormat.parseIntDouble(\"4=4.2;2=;6=6.68\");\n    assertThat(map.size()).isEqualTo(3);\n    assertThat(map.get(4)).isEqualTo(4.2);\n    assertThat(map.get(2)).isNull();\n    assertThat(map.get(6)).isEqualTo(6.68);\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatBlank() {\n    Map<Integer, String> map = Maps.newTreeMap();\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s, is(\"\"));\n  }","id":68447,"modified_method":"@Test\n  public void shouldFormatBlank() {\n    Map<Integer, String> map = Maps.newTreeMap();\n    String s = KeyValueFormat.formatIntString(map);\n    assertThat(s).isEqualTo(\"\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldParseBlank() {\n    Map<String, String> map = KeyValueFormat.parse(\"\");\n    assertThat(map.size(), is(0));\n  }","id":68448,"modified_method":"@Test\n  public void shouldParseBlank() {\n    Map<String, String> map = KeyValueFormat.parse(\"\");\n    assertThat(map.size()).isEqualTo(0);\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldFormatDate() throws ParseException {\n    Map<Integer, Date> map = Maps.newLinkedHashMap();\n    map.put(4, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2010-12-25\"));\n    map.put(20, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2009-05-28\"));\n    map.put(12, null);\n    String s = KeyValueFormat.formatIntDate(map);\n    assertThat(s, is(\"4=2010-12-25;20=2009-05-28;12=\"));\n  }","id":68449,"modified_method":"@Test\n  public void shouldFormatDate() throws ParseException {\n    Map<Integer, Date> map = Maps.newLinkedHashMap();\n    map.put(4, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2010-12-25\"));\n    map.put(20, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2009-05-28\"));\n    map.put(12, null);\n    String s = KeyValueFormat.formatIntDate(map);\n    assertThat(s).isEqualTo(\"4=2010-12-25;20=2009-05-28;12=\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSetEmptyFieldWhenNullValue() {\n    Map<Integer, Double> map = Maps.newLinkedHashMap();\n    map.put(13, null);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s, is(\"13=;5=5.75\"));// same order\n  }","id":68450,"modified_method":"@Test\n  public void shouldSetEmptyFieldWhenNullValue() {\n    Map<Integer, Double> map = Maps.newLinkedHashMap();\n    map.put(13, null);\n    map.put(5, 5.75);\n    String s = KeyValueFormat.formatIntDouble(map);\n    assertThat(s).isEqualTo(\"13=;5=5.75\");\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldConvertPriority() {\n    assertThat(KeyValueFormat.newPriorityConverter().format(RulePriority.BLOCKER), is(\"BLOCKER\"));\n    assertThat(KeyValueFormat.newPriorityConverter().format(null), is(\"\"));\n\n    assertThat(KeyValueFormat.newPriorityConverter().parse(\"MAJOR\"), is(RulePriority.MAJOR));\n    assertThat(KeyValueFormat.newPriorityConverter().parse(\"\"), nullValue());\n  }","id":68451,"modified_method":"@Test\n  public void shouldConvertPriority() {\n    assertThat(KeyValueFormat.newPriorityConverter().format(RulePriority.BLOCKER)).isEqualTo(\"BLOCKER\");\n    assertThat(KeyValueFormat.newPriorityConverter().format(null)).isEqualTo(\"\");\n\n    assertThat(KeyValueFormat.newPriorityConverter().parse(\"MAJOR\")).isEqualTo(RulePriority.MAJOR);\n    assertThat(KeyValueFormat.newPriorityConverter().parse(\"\")).isNull();\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldParseNull() {\n    Map<String, String> map = KeyValueFormat.parse(null);\n    assertThat(map.size(), is(0));\n  }","id":68452,"modified_method":"@Test\n  public void shouldParseNull() {\n    Map<String, String> map = KeyValueFormat.parse(null);\n    assertThat(map.size()).isEqualTo(0);\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldParseMultiset() {\n    Multiset<String> multiset = KeyValueFormat.parseMultiset(\"foo=2;bar=1;none=\");\n    assertThat(multiset.count(\"foo\"), is(2));\n    assertThat(multiset.count(\"bar\"), is(1));\n    assertThat(multiset.count(\"none\"), is(0));\n    assertThat(multiset.contains(\"none\"), is(false));\n  }","id":68453,"modified_method":"@Test\n  public void shouldParseMultiset() {\n    Multiset<String> multiset = KeyValueFormat.parseMultiset(\"foo=2;bar=1;none=\");\n    assertThat(multiset.count(\"foo\")).isEqualTo(2);\n    assertThat(multiset.count(\"bar\")).isEqualTo(1);\n    assertThat(multiset.count(\"none\")).isEqualTo(0);\n    assertThat(multiset.contains(\"none\")).isFalse();\n  }","commit_id":"bcd54407f2a6ca42c80961303fe1567e7b33621a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\r\n  public void shouldConnectPooled() throws SQLException {\r\n\r\n    OrientDataSource ds = new OrientDataSource();\r\n    ds.setUrl(\"jdbc:orient:memory:test\");\r\n    ds.setUsername(\"admin\");\r\n    ds.setPassword(\"admin\");\r\n\r\n    Properties info = new Properties();\r\n    info.setProperty(\"db.usePool\", \"TRUE\");\r\n    info.setProperty(\"db.pool.min\", \"1\");\r\n    info.setProperty(\"db.pool.max\", \"1\");\r\n\r\n    //pool size is 1: database should be the same on different connection\r\n    //NOTE: not safe in production!\r\n    OrientJdbcConnection conn = (OrientJdbcConnection) ds.getConnection(info);\r\n    assertThat(conn, is(notNullValue()));\r\n\r\n    OrientJdbcConnection conn2 = (OrientJdbcConnection) ds.getConnection(info);\r\n    assertThat(conn2, is(notNullValue()));\r\n    conn.getDatabase();\r\n\r\n    assertThat(conn.getDatabase(), is(sameInstance(conn2.getDatabase())));\r\n\r\n    conn.close();\r\n    assertThat(conn.isClosed(), is(true));\r\n\r\n    conn2.close();\r\n    assertThat(conn2.isClosed(), is(true));\r\n\r\n\r\n  }","id":68454,"modified_method":"@Test\r\n  public void shouldConnectPooled() throws SQLException {\r\n\r\n    OrientDataSource ds = new OrientDataSource();\r\n    ds.setUrl(\"jdbc:orient:memory:test\");\r\n    ds.setUsername(\"admin\");\r\n    ds.setPassword(\"admin\");\r\n\r\n    Properties info = new Properties();\r\n    info.setProperty(\"db.usePool\", \"TRUE\");\r\n    info.setProperty(\"db.pool.min\", \"1\");\r\n    info.setProperty(\"db.pool.max\", \"1\");\r\n\r\n    //pool size is 1: database should be the same on different connection\r\n    //NOTE: not safe in production!\r\n    OrientJdbcConnection conn = (OrientJdbcConnection) ds.getConnection(info);\r\n    assertThat(conn).isNotNull();\r\n\r\n    OrientJdbcConnection conn2 = (OrientJdbcConnection) ds.getConnection(info);\r\n    assertThat(conn2).isNotNull();\r\n    conn.getDatabase();\r\n\r\n    assertThat(conn.getDatabase()).isSameAs(conn2.getDatabase());\r\n\r\n    conn.close();\r\n    assertThat(conn.isClosed()).isTrue();\r\n\r\n    conn2.close();\r\n    assertThat(conn2.isClosed()).isTrue();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldConnect() throws SQLException {\r\n\r\n    OrientDataSource ds = new OrientDataSource();\r\n    ds.setUrl(\"jdbc:orient:memory:test\");\r\n    ds.setUsername(\"admin\");\r\n    ds.setPassword(\"admin\");\r\n\r\n    Connection conn = ds.getConnection();\r\n\r\n    assertThat(conn, is(notNullValue()));\r\n    conn.close();\r\n    assertThat(conn.isClosed(), is(true));\r\n\r\n  }","id":68455,"modified_method":"@Test\r\n  public void shouldConnect() throws SQLException {\r\n\r\n    OrientDataSource ds = new OrientDataSource();\r\n    ds.setUrl(\"jdbc:orient:memory:test\");\r\n    ds.setUsername(\"admin\");\r\n    ds.setPassword(\"admin\");\r\n\r\n    Connection conn = ds.getConnection();\r\n\r\n    assertThat(conn).isNotNull();\r\n    conn.close();\r\n    assertThat(conn.isClosed()).isTrue();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldLoadChuckedBlob() throws SQLException, FileNotFoundException, IOException, NoSuchAlgorithmException {\r\n    File binaryFile = getOutFile();\r\n\r\n    String digest = this.calculateMD5checksum(ClassLoader.getSystemResourceAsStream(\"file.pdf\"));\r\n\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT FROM Article WHERE uuid = 2 \");\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    assertThat(rs.next(), is(true));\r\n    rs.next();\r\n\r\n    Blob blob = rs.getBlob(\"attachment\");\r\n\r\n    assertThat(blob, notNullValue());\r\n\r\n    dumpBlobToFile(binaryFile, blob);\r\n\r\n    assertTrue(\"The file '\" + binaryFile.getName() + \"' does not exist\", binaryFile.exists());\r\n    this.verifyMD5checksum(binaryFile, digest);\r\n\r\n  }","id":68456,"modified_method":"@Test\r\n  public void shouldLoadChuckedBlob() throws SQLException, IOException, NoSuchAlgorithmException {\r\n    File binaryFile = getOutFile();\r\n\r\n    String digest = this.calculateMD5checksum(ClassLoader.getSystemResourceAsStream(\"file.pdf\"));\r\n\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT FROM Article WHERE uuid = 2 \");\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    assertThat(rs.next()).isTrue();\r\n    rs.next();\r\n\r\n    Blob blob = rs.getBlob(\"attachment\");\r\n\r\n    assertThat(blob).isNotNull();\r\n\r\n    dumpBlobToFile(binaryFile, blob);\r\n\r\n    assertThat(binaryFile).exists();\r\n\r\n    verifyMD5checksum(binaryFile, digest);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void verifyMD5checksum(File fileToBeChecked, String digest) {\r\n    try {\r\n      assertEquals(\"The MD5 checksum of the file '\" + fileToBeChecked.getAbsolutePath() + \"' does not match the given one.\",\r\n          digest, calculateMD5checksum(new FileInputStream(fileToBeChecked)));\r\n    } catch (NoSuchAlgorithmException e) {\r\n      fail(e.getMessage());\r\n    } catch (IOException e) {\r\n      fail(e.getMessage());\r\n    }\r\n  }","id":68457,"modified_method":"private void verifyMD5checksum(File fileToBeChecked, String digest) {\r\n    try {\r\n\r\n      assertThat(digest).isEqualTo(calculateMD5checksum(new FileInputStream(fileToBeChecked)));\r\n    } catch (NoSuchAlgorithmException e) {\r\n      fail(e.getMessage());\r\n    } catch (IOException e) {\r\n      fail(e.getMessage());\r\n    }\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldLoadBlob() throws SQLException, FileNotFoundException, IOException, NoSuchAlgorithmException {\r\n    File binaryFile = getOutFile();\r\n\r\n    String digest = this.calculateMD5checksum(ClassLoader.getSystemResourceAsStream(\"file.pdf\"));\r\n\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT FROM Article WHERE uuid = 1 \");\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    assertThat(rs.next(), is(true));\r\n    rs.next();\r\n\r\n    Blob blob = rs.getBlob(\"attachment\");\r\n\r\n    assertThat(blob, notNullValue());\r\n\r\n    dumpBlobToFile(binaryFile, blob);\r\n\r\n    assertTrue(\"The file '\" + binaryFile.getName() + \"' does not exist\", binaryFile.exists());\r\n    verifyMD5checksum(binaryFile, digest);\r\n\r\n  }","id":68458,"modified_method":"@Test\r\n  public void shouldLoadBlob() throws SQLException, IOException, NoSuchAlgorithmException {\r\n    File binaryFile = getOutFile();\r\n\r\n    String digest = this.calculateMD5checksum(ClassLoader.getSystemResourceAsStream(\"file.pdf\"));\r\n\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT FROM Article WHERE uuid = 1 \");\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    assertThat(rs.next()).isTrue();\r\n    rs.next();\r\n\r\n    Blob blob = rs.getBlob(\"attachment\");\r\n\r\n    assertThat(blob).isNotNull();\r\n\r\n    dumpBlobToFile(binaryFile, blob);\r\n\r\n    assertThat(binaryFile).exists();\r\n\r\n    verifyMD5checksum(binaryFile, digest);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void checkSomePrecondition() throws Exception {\r\n\r\n    assertFalse(conn.isClosed());\r\n    conn.isReadOnly();\r\n\r\n    conn.isValid(0);\r\n    conn.setAutoCommit(true);\r\n    assertTrue(conn.getAutoCommit());\r\n    // conn.setTransactionIsolation(Connection.TRANSACTION_NONE);\r\n    // assertEquals(Connection.TRANSACTION_NONE,\r\n    // conn.getTransactionIsolation());\r\n  }","id":68459,"modified_method":"@Test\r\n  public void checkSomePrecondition() throws Exception {\r\n\r\n    assertThat(conn.isClosed()).isFalse();\r\n    conn.isReadOnly();\r\n\r\n    conn.isValid(0);\r\n    conn.setAutoCommit(true);\r\n    assertThat(conn.getAutoCommit()).isTrue();\r\n    // conn.setTransactionIsolation(Connection.TRANSACTION_NONE);\r\n    // assertEquals(Connection.TRANSACTION_NONE,\r\n    // conn.getTransactionIsolation());\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldCreateStatement() throws Exception {\r\n    Statement stmt = conn.createStatement();\r\n    assertNotNull(stmt);\r\n    stmt.close();\r\n  }","id":68460,"modified_method":"@Test\r\n  public void shouldCreateStatement() throws Exception {\r\n    Statement stmt = conn.createStatement();\r\n    assertThat(stmt).isNotNull();\r\n    stmt.close();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldCreateDifferentTypeOfStatement() throws Exception {\r\n    Statement stmt = conn.createStatement();\r\n    assertNotNull(stmt);\r\n\r\n    stmt = conn.createStatement(TYPE_FORWARD_ONLY, CONCUR_READ_ONLY);\r\n    assertNotNull(stmt);\r\n\r\n    stmt = conn.createStatement(TYPE_FORWARD_ONLY, CONCUR_READ_ONLY, HOLD_CURSORS_OVER_COMMIT);\r\n    assertNotNull(stmt);\r\n\r\n  }","id":68461,"modified_method":"@Test\r\n  public void shouldCreateDifferentTypeOfStatement() throws Exception {\r\n    Statement stmt = conn.createStatement();\r\n    assertThat(stmt).isNotNull();\r\n\r\n    stmt = conn.createStatement(TYPE_FORWARD_ONLY, CONCUR_READ_ONLY);\r\n    assertThat(stmt).isNotNull();\r\n\r\n    stmt = conn.createStatement(TYPE_FORWARD_ONLY, CONCUR_READ_ONLY, HOLD_CURSORS_OVER_COMMIT);\r\n    assertThat(stmt).isNotNull();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldConnectUsingPool() throws Exception {\r\n    String dbUrl = \"memory:test\";\r\n    Properties p = new Properties();\r\n    p.setProperty(\"db.usePool\", \"TRUE\");\r\n\r\n    Connection connection = DriverManager.getConnection(dbUrl, p);\r\n    assertNotNull(connection);\r\n\r\n    assertThat(connection,is(notNullValue()));\r\n    connection.close();\r\n  }","id":68462,"modified_method":"@Test\r\n  public void shouldConnectUsingPool() throws Exception {\r\n    String dbUrl = \"memory:test\";\r\n    Properties p = new Properties();\r\n    p.setProperty(\"db.usePool\", \"TRUE\");\r\n\r\n    Connection connection = DriverManager.getConnection(dbUrl, p);\r\n\r\n    assertThat(connection).isNotNull();\r\n    connection.close();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldGetAllTablesFilteredByAllTypes() throws SQLException {\r\n    ResultSet rs = this.metaData.getTableTypes();\r\n    List<String> tableTypes = new ArrayList<String>(2);\r\n    while (rs.next()) {\r\n      tableTypes.add(rs.getString(1));\r\n    }\r\n    rs = this.metaData.getTables(null, null, null, tableTypes.toArray(new String[2]));\r\n    int tableCount = rsSizeOf(rs);\r\n    assertThat(tableCount, is(14));\r\n  }","id":68463,"modified_method":"@Test\r\n  public void shouldGetAllTablesFilteredByAllTypes() throws SQLException {\r\n    ResultSet rs = this.metaData.getTableTypes();\r\n    List<String> tableTypes = new ArrayList<String>(2);\r\n    while (rs.next()) {\r\n      tableTypes.add(rs.getString(1));\r\n    }\r\n    rs = this.metaData.getTables(null, null, null, tableTypes.toArray(new String[2]));\r\n    int tableCount = rsSizeOf(rs);\r\n    assertThat(tableCount).isEqualTo(14);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void getSingleTable() throws SQLException {\r\n    ResultSet rs = this.metaData.getTables(null, null, \"ouser\", null);\r\n\r\n    assertThat(rsSizeOf(rs), is(1));\r\n  }","id":68464,"modified_method":"@Test\r\n  public void getSingleTable() throws SQLException {\r\n    ResultSet rs = this.metaData.getTables(null, null, \"ouser\", null);\r\n\r\n    assertThat(rsSizeOf(rs)).isEqualTo(1);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void getNoTablesFilteredByEmptySetOfTypes() throws SQLException {\r\n    final ResultSet rs = this.metaData.getTables(null, null, null, new String[0]);\r\n    int tableCount = rsSizeOf(rs);\r\n\r\n    assertThat(tableCount,is(0));\r\n  }","id":68465,"modified_method":"@Test\r\n  public void getNoTablesFilteredByEmptySetOfTypes() throws SQLException {\r\n    final ResultSet rs = this.metaData.getTables(null, null, null, new String[0]);\r\n    int tableCount = rsSizeOf(rs);\r\n\r\n    assertThat(tableCount).isEqualTo(0);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldGetSingleColumnOfArticle() throws SQLException {\r\n    ResultSet rs = this.metaData.getColumns(null, null, \"Article\", \"uuid\");\r\n\r\n    assertThat(rsSizeOf(rs), is(1));\r\n  }","id":68466,"modified_method":"@Test\r\n  public void shouldGetSingleColumnOfArticle() throws SQLException {\r\n    ResultSet rs = this.metaData.getColumns(null, null, \"Article\", \"uuid\");\r\n\r\n    assertThat(rsSizeOf(rs)).isEqualTo(1);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldFetchAllTables() throws SQLException {\r\n    ResultSet rs = this.metaData.getTables(null, null, null, null);\r\n    int tableCount = rsSizeOf(rs);\r\n\r\n    assertThat(tableCount, is(14));\r\n\r\n  }","id":68467,"modified_method":"@Test\r\n  public void shouldFetchAllTables() throws SQLException {\r\n    ResultSet rs = this.metaData.getTables(null, null, null, null);\r\n    int tableCount = rsSizeOf(rs);\r\n\r\n    assertThat(tableCount).isEqualTo(14);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldGetAllColumnsOfArticle() throws SQLException {\r\n    ResultSet rs = this.metaData.getColumns(null, null, \"Article\", null);\r\n\r\n    assertThat(rsSizeOf(rs),is(5));\r\n  }","id":68468,"modified_method":"@Test\r\n  public void shouldGetAllColumnsOfArticle() throws SQLException {\r\n    ResultSet rs = this.metaData.getColumns(null, null, \"Article\", null);\r\n\r\n    assertThat(rsSizeOf(rs)).isEqualTo(5);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldRetrieveKeywords() throws SQLException {\r\n\r\n    final String keywordsStr = metaData.getSQLKeywords();\r\n    assertNotNull(keywordsStr);\r\n    assertThat(Arrays.asList(keywordsStr.toUpperCase().split(\",\\\\s*\")), hasItem(\"TRAVERSE\"));\r\n  }","id":68469,"modified_method":"@Test\r\n  public void shouldRetrieveKeywords() throws SQLException {\r\n\r\n    final String keywordsStr = metaData.getSQLKeywords();\r\n    assertNotNull(keywordsStr);\r\n    assertThat(Arrays.asList(keywordsStr.toUpperCase().split(\",\\\\s*\"))).contains(\"TRAVERSE\");\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldAcceptsWellFormattedURLOnly() throws ClassNotFoundException, SQLException {\r\n\r\n    Driver drv = new OrientJdbcDriver();\r\n\r\n    assertThat(drv.acceptsURL(\"jdbc:orient:local:./working/db/test\"), is(true));\r\n    assertThat(drv.acceptsURL(\"local:./working/db/test\"), is(false));\r\n  }","id":68470,"modified_method":"@Test\r\n  public void shouldAcceptsWellFormattedURLOnly() throws ClassNotFoundException, SQLException {\r\n\r\n    Driver drv = new OrientJdbcDriver();\r\n\r\n    assertThat(drv.acceptsURL(\"jdbc:orient:local:./working/db/test\")).isTrue();\r\n    assertThat(drv.acceptsURL(\"local:./working/db/test\")).isFalse();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldConnect() throws SQLException {\r\n\r\n    Properties info = new Properties();\r\n    info.put(\"user\", \"admin\");\r\n    info.put(\"password\", \"admin\");\r\n\r\n    OrientJdbcConnection conn = (OrientJdbcConnection) DriverManager.getConnection(\"jdbc:orient:memory:test\", info);\r\n\r\n    assertThat(conn, is(notNullValue()));\r\n    conn.close();\r\n    assertThat(conn.isClosed(), is(true));\r\n  }","id":68471,"modified_method":"@Test\r\n  public void shouldConnect() throws SQLException {\r\n\r\n    Properties info = new Properties();\r\n    info.put(\"user\", \"admin\");\r\n    info.put(\"password\", \"admin\");\r\n\r\n    OrientJdbcConnection conn = (OrientJdbcConnection) DriverManager.getConnection(\"jdbc:orient:memory:test\", info);\r\n\r\n    assertThat(conn).isNotNull();\r\n    conn.close();\r\n    assertThat(conn.isClosed()).isTrue();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void testExecuteUpdateReturnsNumberOfRowsInserted() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n\r\n    PreparedStatement statement = conn.prepareStatement(\"INSERT INTO Insertable ( id ) VALUES (?)\");\r\n    statement.setString(1, \"testval\");\r\n    int rowsInserted = statement.executeUpdate();\r\n\r\n    assertThat(rowsInserted, equalTo(1));\r\n  }","id":68472,"modified_method":"@Test\r\n  public void testExecuteUpdateReturnsNumberOfRowsInserted() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n\r\n    PreparedStatement statement = conn.prepareStatement(\"INSERT INTO Insertable ( id ) VALUES (?)\");\r\n    statement.setString(1, \"testval\");\r\n    int rowsInserted = statement.executeUpdate();\r\n\r\n    assertThat(rowsInserted).isEqualTo(1);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void testExecuteUpdateReturnsNumberOfRowsDeleted() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(1)\");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(2)\");\r\n\r\n    PreparedStatement statement = conn.prepareStatement(\"DELETE FROM Insertable WHERE id > ?\");\r\n    statement.setInt(1, 0);\r\n    int rowsDeleted = statement.executeUpdate();\r\n\r\n    assertThat(rowsDeleted, equalTo(2));\r\n  }","id":68473,"modified_method":"@Test\r\n  public void testExecuteUpdateReturnsNumberOfRowsDeleted() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(1)\");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(2)\");\r\n\r\n    PreparedStatement statement = conn.prepareStatement(\"DELETE FROM Insertable WHERE id > ?\");\r\n    statement.setInt(1, 0);\r\n    int rowsDeleted = statement.executeUpdate();\r\n\r\n    assertThat(rowsDeleted).isEqualTo(2);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldExecutePreparedStatement() throws Exception {\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT  \" + \"FROM Item \" + \"WHERE stringKey = ? OR intKey = ?\");\r\n    assertNotNull(stmt);\r\n\r\n    stmt.setString(1, \"1\");\r\n    stmt.setInt(2, 1);\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    assertThat(rs.next(), is(true));\r\n\r\n    // assertThat(rs.getInt(\"@version\"), equalTo(0));\r\n\r\n    assertThat(rs.getString(\"@class\"), equalTo(\"Item\"));\r\n\r\n    assertThat(rs.getString(\"stringKey\"), equalTo(\"1\"));\r\n    assertThat(rs.getInt(\"intKey\"), equalTo(1));\r\n    //\r\n    // assertThat(rs.getDate(\"date\").toString(), equalTo(new java.sql.Date(System.currentTimeMillis()).toString()));\r\n    // assertThat(rs.getDate(\"time\").toString(), equalTo(new java.sql.Date(System.currentTimeMillis()).toString()));\r\n\r\n    stmt.close();\r\n    assertThat(stmt.isClosed(), is(true));\r\n\r\n  }","id":68474,"modified_method":"@Test\r\n  public void shouldExecutePreparedStatement() throws Exception {\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT  \" + \"FROM Item \" + \"WHERE stringKey = ? OR intKey = ?\");\r\n\r\n    assertThat(stmt).isNotNull();\r\n    stmt.setString(1, \"1\");\r\n    stmt.setInt(2, 1);\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    assertThat(rs.next()).isTrue();\r\n\r\n    // assertThat(rs.getInt(\"@version\"), equalTo(0));\r\n\r\n    assertThat(rs.getString(\"@class\")).isEqualToIgnoringCase(\"Item\");\r\n\r\n    assertThat(rs.getString(\"stringKey\")).isEqualTo(\"1\");\r\n    assertThat(rs.getInt(\"intKey\")).isEqualTo(1);\r\n    //\r\n    // assertThat(rs.getDate(\"date\").toString(), equalTo(new java.sql.Date(System.currentTimeMillis()).toString()));\r\n    // assertThat(rs.getDate(\"time\").toString(), equalTo(new java.sql.Date(System.currentTimeMillis()).toString()));\r\n\r\n    stmt.close();\r\n    assertThat(stmt.isClosed()).isTrue();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldReturnEmptyResultSetOnEmptyQuery() throws SQLException {\r\n    PreparedStatement stmt = conn.prepareStatement(\"\");\r\n    assertThat(stmt.execute(\"\"), is(false));\r\n\r\n    assertThat(stmt.getResultSet(), is(nullValue()));\r\n    assertThat(stmt.getMoreResults(), is(false));\r\n  }","id":68475,"modified_method":"@Test\r\n  public void shouldReturnEmptyResultSetOnEmptyQuery() throws SQLException {\r\n    PreparedStatement stmt = conn.prepareStatement(\"\");\r\n    assertThat(stmt.execute(\"\")).isFalse();\r\n\r\n    assertThat(stmt.getResultSet()).isNull();\r\n    assertThat(stmt.getMoreResults()).isFalse();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldExecutePreparedStatementWithExecuteMethod() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS insertable\");\r\n    PreparedStatement stmt = conn.prepareStatement(\"INSERT INTO insertable SET id = ?, number = ?\");\r\n    stmt.setString(1, \"someRandomUid\");\r\n    stmt.setInt(2, 42);\r\n    stmt.execute();\r\n\r\n    // Let's verify the previous process\r\n    ResultSet resultSet = conn.createStatement().executeQuery(\"SELECT count(*) FROM insertable WHERE id = 'someRandomUid'\");\r\n    assertThat(resultSet.getInt(1), equalTo(1));\r\n  }","id":68476,"modified_method":"@Test\r\n  public void shouldExecutePreparedStatementWithExecuteMethod() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS insertable\");\r\n    PreparedStatement stmt = conn.prepareStatement(\"INSERT INTO insertable SET id = ?, number = ?\");\r\n    stmt.setString(1, \"someRandomUid\");\r\n    stmt.setInt(2, 42);\r\n    stmt.execute();\r\n\r\n    // Let's verify the previous process\r\n    ResultSet resultSet = conn.createStatement().executeQuery(\"SELECT count(*) FROM insertable WHERE id = 'someRandomUid'\");\r\n    assertThat(resultSet.getInt(1)).isEqualTo(1);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void testExecuteUpdateReturnsNumberOfRowsInsertedWhenMultipleInserted() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(1)\");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(2)\");\r\n\r\n    PreparedStatement statement = conn.prepareStatement(\"UPDATE Insertable SET id = ?\");\r\n    statement.setString(1, \"testval\");\r\n    int rowsInserted = statement.executeUpdate();\r\n\r\n    assertThat(rowsInserted, equalTo(2));\r\n  }","id":68477,"modified_method":"@Test\r\n  public void testExecuteUpdateReturnsNumberOfRowsInsertedWhenMultipleInserted() throws Exception {\r\n    conn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(1)\");\r\n    conn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(2)\");\r\n\r\n    PreparedStatement statement = conn.prepareStatement(\"UPDATE Insertable SET id = ?\");\r\n    statement.setString(1, \"testval\");\r\n    int rowsInserted = statement.executeUpdate();\r\n\r\n    assertThat(rowsInserted).isEqualTo(2);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldCreateStatement() throws Exception {\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM Item WHERE stringKey = ? OR intKey = ?\");\r\n    assertThat(stmt, is(notNullValue()));\r\n    stmt.close();\r\n    assertThat(stmt.isClosed(), is(true));\r\n\r\n  }","id":68478,"modified_method":"@Test\r\n  public void shouldCreateStatement() throws Exception {\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM Item WHERE stringKey = ? OR intKey = ?\");\r\n    assertThat(stmt).isNotNull();\r\n    stmt.close();\r\n    assertThat(stmt.isClosed()).isTrue();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldExectuteSelectOne() throws SQLException {\r\n    PreparedStatement stmt = conn.prepareStatement(\"select 1\");\r\n    assertThat(stmt.execute(), is(true));\r\n    assertNotNull(stmt.getResultSet());\r\n    ResultSet resultSet = stmt.getResultSet();\r\n    resultSet.first();\r\n    int one = resultSet.getInt(\"1\");\r\n    assertThat(one, is(1));\r\n    assertThat(stmt.getMoreResults(), is(false));\r\n\r\n  }","id":68479,"modified_method":"@Test\r\n  public void shouldExectuteSelectOne() throws SQLException {\r\n    PreparedStatement stmt = conn.prepareStatement(\"select 1\");\r\n    assertThat(stmt.execute()).isTrue();\r\n    assertThat(stmt.getResultSet()).isNotNull();\r\n    ResultSet resultSet = stmt.getResultSet();\r\n    resultSet.first();\r\n    int one = resultSet.getInt(\"1\");\r\n    assertThat(one).isEqualTo(1);\r\n    assertThat(stmt.getMoreResults()).isFalse();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldNavigateResultSetByMetadata() throws Exception {\r\n    assertFalse(conn.isClosed());\r\n\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n\r\n    rs.next();\r\n    ResultSetMetaData metaData = rs.getMetaData();\r\n    assertThat(metaData.getColumnCount(), equalTo(5));\r\n\r\n    assertThat(metaData.getColumnName(1), equalTo(\"stringKey\"));\r\n    assertThat(rs.getObject(1) instanceof String, is(true));\r\n\r\n    assertThat(metaData.getColumnName(2), equalTo(\"intKey\"));\r\n\r\n    assertThat(metaData.getColumnName(3), equalTo(\"text\"));\r\n    assertThat(rs.getObject(3) instanceof String, is(true));\r\n\r\n    assertThat(metaData.getColumnName(4), equalTo(\"length\"));\r\n\r\n    assertThat(metaData.getColumnName(5), equalTo(\"date\"));\r\n\r\n  }","id":68480,"modified_method":"@Test\r\n  public void shouldNavigateResultSetByMetadata() throws Exception {\r\n\r\n    assertThat(conn.isClosed()).isFalse();\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n\r\n    rs.next();\r\n    ResultSetMetaData metaData = rs.getMetaData();\r\n    assertThat(metaData.getColumnCount()).isEqualTo(5);\r\n\r\n    assertThat(metaData.getColumnName(1)).isEqualTo(\"stringKey\");\r\n    assertThat(rs.getObject(1)).isInstanceOf(String.class);\r\n\r\n    assertThat(metaData.getColumnName(2)).isEqualTo(\"intKey\");\r\n\r\n    assertThat(metaData.getColumnName(3)).isEqualTo(\"text\");\r\n    assertThat(rs.getObject(3)).isInstanceOf(String.class);\r\n\r\n    assertThat(metaData.getColumnName(4)).isEqualTo(\"length\");\r\n\r\n    assertThat(metaData.getColumnName(5)).isEqualTo(\"date\");\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldMapOrientTypesToJavaSQL() throws Exception {\r\n    assertThat(conn.isClosed(), is(false));\r\n\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n\r\n    rs.next();\r\n    ResultSetMetaData metaData = rs.getMetaData();\r\n\r\n    assertThat(metaData.getColumnCount(), equalTo(5));\r\n\r\n    assertThat(metaData.getColumnType(2), equalTo(java.sql.Types.INTEGER));\r\n\r\n    assertThat(metaData.getColumnType(3), equalTo(java.sql.Types.VARCHAR));\r\n    assertThat(rs.getObject(3) instanceof String, is(true));\r\n\r\n    assertThat(metaData.getColumnType(4), equalTo(java.sql.Types.BIGINT));\r\n\r\n    assertThat(metaData.getColumnType(5), equalTo(java.sql.Types.TIMESTAMP));\r\n\r\n    assertThat(metaData.getColumnClassName(1), equalTo(String.class.getName()));\r\n    assertThat(metaData.getColumnType(1), equalTo(java.sql.Types.VARCHAR));\r\n\r\n  }","id":68481,"modified_method":"@Test\r\n  public void shouldMapOrientTypesToJavaSQL() throws Exception {\r\n    assertThat(conn.isClosed()).isFalse();\r\n\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n\r\n    rs.next();\r\n    ResultSetMetaData metaData = rs.getMetaData();\r\n\r\n    assertThat(metaData.getColumnCount()).isEqualTo(5);\r\n\r\n    assertThat(metaData.getColumnType(2)).isEqualTo(java.sql.Types.INTEGER);\r\n\r\n    assertThat(metaData.getColumnType(3)).isEqualTo(java.sql.Types.VARCHAR);\r\n    assertThat(rs.getObject(3)).isInstanceOf(String.class);\r\n\r\n    assertThat(metaData.getColumnType(4)).isEqualTo(java.sql.Types.BIGINT);\r\n\r\n    assertThat(metaData.getColumnType(5)).isEqualTo(java.sql.Types.TIMESTAMP);\r\n    assertThat(metaData.getColumnClassName(1)).isEqualTo(String.class.getName());\r\n    assertThat(metaData.getColumnType(1)).isEqualTo(java.sql.Types.VARCHAR);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldNavigateResultSet() throws Exception {\r\n    assertFalse(conn.isClosed());\r\n\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM Item\");\r\n    assertThat(rs.getFetchSize(), equalTo(20));\r\n\r\n    assertThat(rs.isBeforeFirst(), is(true));\r\n\r\n    assertThat(rs.next(), is(true));\r\n\r\n    assertThat(rs.getRow(), equalTo(0));\r\n\r\n    rs.last();\r\n\r\n    assertThat(rs.getRow(), equalTo(19));\r\n\r\n    assertThat(rs.next(), is(false));\r\n\r\n    rs.afterLast();\r\n\r\n    assertThat(rs.next(), is(false));\r\n\r\n    rs.close();\r\n\r\n    assertThat(rs.isClosed(), is(true));\r\n\r\n    stmt.close();\r\n\r\n    assertTrue(stmt.isClosed());\r\n  }","id":68482,"modified_method":"@Test\r\n  public void shouldNavigateResultSet() throws Exception {\r\n\r\n    assertThat(conn.isClosed()).isFalse();\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM Item\");\r\n    assertThat(rs.getFetchSize()).isEqualTo(20);\r\n\r\n    assertThat(rs.isBeforeFirst()).isTrue();\r\n\r\n    assertThat(rs.next()).isTrue();\r\n\r\n    assertThat(rs.getRow()).isEqualTo(0);\r\n\r\n    rs.last();\r\n\r\n    assertThat(rs.getRow()).isEqualTo(19);\r\n\r\n    assertThat(rs.next()).isFalse();\r\n\r\n    rs.afterLast();\r\n\r\n    assertThat(rs.next()).isFalse();\r\n\r\n    rs.close();\r\n\r\n    assertThat(rs.isClosed()).isTrue();\r\n\r\n    stmt.close();\r\n\r\n    assertThat(stmt.isClosed()).isTrue();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldMapReturnTypes() throws Exception {\r\n\r\n    assertThat(conn.isClosed(), is(false));\r\n\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n    assertThat(rs.getFetchSize(), equalTo(20));\r\n\r\n    assertThat(rs.isBeforeFirst(), is(true));\r\n\r\n    assertThat(rs.next(), is(true));\r\n\r\n    assertThat(rs.getRow(), equalTo(0));\r\n\r\n    assertThat(rs.getString(1), equalTo(\"1\"));\r\n    assertThat(rs.getString(\"stringKey\"), equalTo(\"1\"));\r\n    assertThat(rs.findColumn(\"stringKey\"), equalTo(1));\r\n\r\n    assertThat(rs.getInt(2), equalTo(1));\r\n    assertThat(rs.getInt(\"intKey\"), equalTo(1));\r\n\r\n    assertEquals(rs.getString(\"text\").length(), rs.getInt(\"length\"));\r\n\r\n    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\r\n    cal.add(Calendar.HOUR_OF_DAY, -1);\r\n    Date date = new Date(cal.getTimeInMillis());\r\n    assertThat(rs.getDate(\"date\").toString(), equalTo(date.toString()));\r\n    assertThat(rs.getDate(5).toString(), equalTo(date.toString()));\r\n\r\n    rs.last();\r\n\r\n    assertThat(rs.getRow(), equalTo(19));\r\n    rs.close();\r\n\r\n    assertThat(rs.isClosed(), is(true));\r\n  }","id":68483,"modified_method":"@Test\r\n  public void shouldMapReturnTypes() throws Exception {\r\n\r\n    assertThat(conn.isClosed()).isFalse();\r\n\r\n    Statement stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n    assertThat(rs.getFetchSize()).isEqualTo(20);\r\n\r\n    assertThat(rs.isBeforeFirst()).isTrue();\r\n\r\n    assertThat(rs.next()).isTrue();\r\n\r\n    assertThat(rs.getRow()).isEqualTo(0);\r\n\r\n    assertThat(rs.getString(1)).isEqualTo(\"1\");\r\n    assertThat(rs.getString(\"stringKey\")).isEqualTo(\"1\");\r\n    assertThat(rs.findColumn(\"stringKey\")).isEqualTo(1);\r\n\r\n    assertThat(rs.getInt(2)).isEqualTo(1);\r\n    assertThat(rs.getInt(\"intKey\")).isEqualTo(1);\r\n\r\n    assertThat(rs.getString(\"text\")).hasSize(rs.getInt(\"length\"));\r\n\r\n    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\r\n    cal.add(Calendar.HOUR_OF_DAY, -1);\r\n    Date date = new Date(cal.getTimeInMillis());\r\n    assertThat(rs.getDate(\"date\").toString()).isEqualTo(date.toString());\r\n    assertThat(rs.getDate(5).toString()).isEqualTo(date.toString());\r\n\r\n    rs.last();\r\n\r\n    assertThat(rs.getRow()).isEqualTo(19);\r\n    rs.close();\r\n\r\n    assertThat(rs.isClosed()).isTrue();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldReturnResultSetAfterExecute() throws Exception {\r\n\r\n    assertThat(conn.isClosed(), is(false));\r\n\r\n    Statement stmt = conn.createStatement();\r\n\r\n    assertThat(stmt.execute(\"SELECT stringKey, intKey, text, length, date FROM Item\"), is(true));\r\n    ResultSet rs = stmt.getResultSet();\r\n    assertThat(rs, is(notNullValue()));\r\n    assertThat(rs.getFetchSize(), equalTo(20));\r\n\r\n  }","id":68484,"modified_method":"@Test\r\n  public void shouldReturnResultSetAfterExecute() throws Exception {\r\n\r\n    assertThat(conn.isClosed()).isFalse();\r\n\r\n    Statement stmt = conn.createStatement();\r\n\r\n    assertThat(stmt.execute(\"SELECT stringKey, intKey, text, length, date FROM Item\")).isTrue();\r\n    ResultSet rs = stmt.getResultSet();\r\n    assertThat(rs).isNotNull();\r\n    assertThat(rs.getFetchSize()).isEqualTo(20);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldMapRatingToDouble() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM Author limit 10\");\r\n    int size = 0;\r\n    while (rs.next()) {\r\n      assertThat(rs.getDouble(\"rating\"), is(notNullValue()));\r\n      size++;\r\n    }\r\n    assertEquals(size, 10);\r\n  }","id":68485,"modified_method":"@Test\r\n  public void shouldMapRatingToDouble() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM Author limit 10\");\r\n    int size = 0;\r\n    while (rs.next()) {\r\n      assertThat(rs.getDouble(\"rating\")).isNotNull();\r\n      size++;\r\n    }\r\n    assertThat(size).isEqualTo(10);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldConvertUUIDToDouble() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM Author limit 10\");\r\n    int count = 0;\r\n    while (rs.next()) {\r\n      assertThat(rs.getDouble(\"uuid\"), is(notNullValue()));\r\n      count++;\r\n    }\r\n    assertThat(10, equalTo(count));\r\n  }","id":68486,"modified_method":"@Test\r\n  public void shouldConvertUUIDToDouble() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM Author limit 10\");\r\n    int count = 0;\r\n    while (rs.next()) {\r\n      assertThat(rs.getDouble(\"uuid\")).isNotNull();\r\n      count++;\r\n    }\r\n    assertThat(count).isEqualTo(10);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldReturnEmptyResultSet() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM Author where false = true\");\r\n\r\n    assertThat(rs.next(), is(false));\r\n  }","id":68487,"modified_method":"@Test\r\n  public void shouldReturnEmptyResultSet() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM Author where false = true\");\r\n\r\n    assertThat(rs.next()).isFalse();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldMapReturnTypes() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n\r\n    ResultSetMetaData metaData = rs.getMetaData();\r\n    assertThat(metaData, is(notNullValue()));\r\n\r\n    assertThat(metaData.getColumnType(1), equalTo(Types.VARCHAR));\r\n    assertThat(metaData.getColumnType(2), equalTo(Types.INTEGER));\r\n    assertThat(metaData.getColumnType(3), equalTo(Types.VARCHAR));\r\n    assertThat(metaData.getColumnType(4), equalTo(Types.BIGINT));\r\n    assertThat(metaData.getColumnType(5), equalTo(Types.TIMESTAMP));\r\n  }","id":68488,"modified_method":"@Test\r\n  public void shouldMapReturnTypes() throws Exception {\r\n\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item\");\r\n\r\n    ResultSetMetaData metaData = rs.getMetaData();\r\n    assertThat(metaData).isNotNull();\r\n\r\n    assertThat(metaData.getColumnType(1)).isEqualTo(Types.VARCHAR);\r\n    assertThat(metaData.getColumnType(2)).isEqualTo(Types.INTEGER);\r\n    assertThat(metaData.getColumnType(3)).isEqualTo(Types.VARCHAR);\r\n    assertThat(metaData.getColumnType(4)).isEqualTo(Types.BIGINT);\r\n    assertThat(metaData.getColumnType(5)).isEqualTo(Types.TIMESTAMP);\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shoulCreateClassWithBatchCommand() throws IOException, SQLException {\r\n\r\n    Statement stmt = conn.createStatement();\r\n\r\n    stmt.addBatch(\"CREATE CLASS Account \");\r\n    stmt.addBatch(\"CREATE PROPERTY Account.id INTEGER \");\r\n    stmt.addBatch(\"CREATE PROPERTY Account.birthDate DATE \");\r\n    stmt.addBatch(\"CREATE PROPERTY Account.binary BINARY \");\r\n    assertThat(stmt.executeBatch().length, equalTo(4));\r\n    stmt.close();\r\n\r\n    // double value test pattern?\r\n    ODatabaseDocumentTx database = conn.getDatabase();\r\n    assertThat(database.getClusterIdByName(\"account\"), notNullValue());\r\n    OClass account = database.getMetadata().getSchema().getClass(\"Account\");\r\n    assertThat(account, notNullValue());\r\n    assertThat(account.getProperty(\"id\").getType(), equalTo(OType.INTEGER));\r\n    assertThat(account.getProperty(\"birthDate\").getType(), equalTo(OType.DATE));\r\n    assertThat(account.getProperty(\"binary\").getType(), equalTo(OType.BINARY));\r\n\r\n  }","id":68489,"modified_method":"@Test\r\n  public void shoulCreateClassWithBatchCommand() throws IOException, SQLException {\r\n\r\n    Statement stmt = conn.createStatement();\r\n\r\n    stmt.addBatch(\"CREATE CLASS Account \");\r\n    stmt.addBatch(\"CREATE PROPERTY Account.id INTEGER \");\r\n    stmt.addBatch(\"CREATE PROPERTY Account.birthDate DATE \");\r\n    stmt.addBatch(\"CREATE PROPERTY Account.binary BINARY \");\r\n    assertThat(stmt.executeBatch()).hasSize(4);\r\n    stmt.close();\r\n\r\n    // double value test pattern?\r\n    ODatabaseDocumentTx database = conn.getDatabase();\r\n    assertThat(database.getClusterIdByName(\"account\")).isNotNull();\r\n    OClass account = database.getMetadata().getSchema().getClass(\"Account\");\r\n    assertThat(account).isNotNull();\r\n    assertThat(account.getProperty(\"id\").getType()).isEqualTo(OType.INTEGER);\r\n    assertThat(account.getProperty(\"birthDate\").getType()).isEqualTo(OType.DATE);\r\n    assertThat(account.getProperty(\"binary\").getType()).isEqualTo(OType.BINARY);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldDeleteAnItem() throws Exception {\r\n\r\n\r\n    Statement stmt = conn.createStatement();\r\n    int updated = stmt.executeUpdate(\"DELETE FROM Item WHERE intKey = '10'\");\r\n\r\n    assertThat(stmt.getMoreResults(), is(false));\r\n    assertEquals(1, updated);\r\n\r\n    stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item where intKey = '10' \");\r\n    assertThat(rs.next(), is(false));\r\n\r\n  }","id":68490,"modified_method":"@Test\r\n  public void shouldDeleteAnItem() throws Exception {\r\n\r\n    Statement stmt = conn.createStatement();\r\n    int updated = stmt.executeUpdate(\"DELETE FROM Item WHERE intKey = '10'\");\r\n\r\n    assertThat(stmt.getMoreResults()).isFalse();\r\n    assertThat(updated).isEqualTo(1);\r\n\r\n    stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item where intKey = '10' \");\r\n    assertThat(rs.next()).isFalse();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldUpdateAnItem() throws Exception {\r\n\r\n    Statement stmt = conn.createStatement();\r\n    int updated = stmt.executeUpdate(\"UPDATE Item set text = 'UPDATED'  WHERE intKey = '10'\");\r\n\r\n    assertThat(stmt.getMoreResults(), is(false));\r\n    assertThat(updated, equalTo(1));\r\n\r\n    stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item where intKey = '10' \");\r\n    rs.next();\r\n    assertThat(rs.getString(\"text\"), equalTo(\"UPDATED\"));\r\n\r\n  }","id":68491,"modified_method":"@Test\r\n  public void shouldUpdateAnItem() throws Exception {\r\n\r\n    Statement stmt = conn.createStatement();\r\n    int updated = stmt.executeUpdate(\"UPDATE Item set text = 'UPDATED'  WHERE intKey = '10'\");\r\n\r\n    assertThat(stmt.getMoreResults()).isFalse();\r\n    assertThat(updated).isEqualTo(1);\r\n\r\n    stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item where intKey = '10' \");\r\n    rs.next();\r\n    assertThat(rs.getString(\"text\")).isEqualTo(\"UPDATED\");\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shoulCreateClassWithProperties() throws IOException, SQLException {\r\n\r\n    Statement stmt = conn.createStatement();\r\n\r\n    stmt.executeUpdate(\"CREATE CLASS Account \");\r\n    stmt.executeUpdate(\"CREATE PROPERTY Account.id INTEGER \");\r\n    stmt.executeUpdate(\"CREATE PROPERTY Account.birthDate DATE \");\r\n    stmt.executeUpdate(\"CREATE PROPERTY Account.binary BINARY \");\r\n    stmt.close();\r\n\r\n    // double value test pattern?\r\n    ODatabaseDocumentTx database = conn.getDatabase();\r\n    assertThat(database.getClusterIdByName(\"account\"), notNullValue());\r\n    OClass account = database.getMetadata().getSchema().getClass(\"Account\");\r\n    assertThat(account, notNullValue());\r\n    assertThat(account.getProperty(\"id\").getType(), equalTo(OType.INTEGER));\r\n    assertThat(account.getProperty(\"birthDate\").getType(), equalTo(OType.DATE));\r\n    assertThat(account.getProperty(\"binary\").getType(), equalTo(OType.BINARY));\r\n\r\n  }","id":68492,"modified_method":"@Test\r\n  public void shoulCreateClassWithProperties() throws IOException, SQLException {\r\n\r\n    Statement stmt = conn.createStatement();\r\n\r\n    stmt.executeUpdate(\"CREATE CLASS Account \");\r\n    stmt.executeUpdate(\"CREATE PROPERTY Account.id INTEGER \");\r\n    stmt.executeUpdate(\"CREATE PROPERTY Account.birthDate DATE \");\r\n    stmt.executeUpdate(\"CREATE PROPERTY Account.binary BINARY \");\r\n    stmt.close();\r\n\r\n    // double value test pattern?\r\n    ODatabaseDocumentTx database = conn.getDatabase();\r\n    assertThat(database.getClusterIdByName(\"account\")).isNotNull();\r\n    OClass account = database.getMetadata().getSchema().getClass(\"Account\");\r\n    assertThat(account).isNotNull();\r\n    assertThat(account.getProperty(\"id\").getType()).isEqualTo(OType.INTEGER);\r\n    assertThat(account.getProperty(\"birthDate\").getType()).isEqualTo(OType.DATE);\r\n    assertThat(account.getProperty(\"binary\").getType()).isEqualTo(OType.BINARY);\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldInsertANewItem() throws Exception {\r\n\r\n    Date date = new Date(System.currentTimeMillis());\r\n\r\n    Statement stmt = conn.createStatement();\r\n    int updated = stmt\r\n        .executeUpdate(\"INSERT into Item (stringKey, intKey, text, length, date) values ('100','100','dummy text','10','\"\r\n            + date.toString() + \"')\");\r\n\r\n    assertThat(updated, equalTo(1));\r\n\r\n    stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item where intKey = '100' \");\r\n    rs.next();\r\n    assertThat(rs.getInt(\"intKey\"), equalTo(100));\r\n    assertThat(rs.getString(\"stringKey\"), equalTo(\"100\"));\r\n    assertThat(rs.getDate(\"date\").toString(), equalTo(date.toString()));\r\n\r\n  }","id":68493,"modified_method":"@Test\r\n  public void shouldInsertANewItem() throws Exception {\r\n\r\n    Date date = new Date(System.currentTimeMillis());\r\n\r\n    Statement stmt = conn.createStatement();\r\n    int updated = stmt.executeUpdate(\r\n        \"INSERT into Item (stringKey, intKey, text, length, date) values ('100','100','dummy text','10','\" + date.toString()\r\n            + \"')\");\r\n\r\n    assertThat(updated).isEqualTo(1);\r\n\r\n    stmt = conn.createStatement();\r\n    ResultSet rs = stmt.executeQuery(\"SELECT stringKey, intKey, text, length, date FROM Item where intKey = '100' \");\r\n    rs.next();\r\n    assertThat(rs.getInt(\"intKey\")).isEqualTo(100);\r\n    assertThat(rs.getString(\"stringKey\")).isEqualTo(\"100\");\r\n    assertThat(rs.getDate(\"date\").toString()).isEqualTo(date.toString());\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldExectuteSelectOne() throws SQLException {\r\n\r\n    Statement st = conn.createStatement();\r\n    assertThat(st.execute(\"select 1\"), is(true));\r\n    assertThat(st.getResultSet(), is(notNullValue()));\r\n    ResultSet resultSet = st.getResultSet();\r\n    resultSet.first();\r\n    assertThat(resultSet.getInt(\"1\"), is(1));\r\n    assertThat(st.getMoreResults(), is(false));\r\n\r\n  }","id":68494,"modified_method":"@Test\r\n  public void shouldExectuteSelectOne() throws SQLException {\r\n\r\n    Statement st = conn.createStatement();\r\n    assertThat(st.execute(\"select 1\")).isTrue();\r\n    assertThat(st.getResultSet()).isNotNull();\r\n    ResultSet resultSet = st.getResultSet();\r\n    resultSet.first();\r\n    assertThat(resultSet.getInt(\"1\")).isEqualTo(1);\r\n    assertThat(st.getMoreResults()).isFalse();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldCreateStatement() throws Exception {\r\n    Statement stmt = conn.createStatement();\r\n    assertThat(stmt, is(notNullValue()));\r\n    stmt.close();\r\n    assertThat(stmt.isClosed(), is(true));\r\n\r\n  }","id":68495,"modified_method":"@Test\r\n  public void shouldCreateStatement() throws Exception {\r\n    Statement stmt = conn.createStatement();\r\n    assertThat(stmt).isNotNull();\r\n    ;\r\n    stmt.close();\r\n    assertThat(stmt.isClosed()).isTrue();\r\n\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test\r\n  public void shouldReturnEmptyResultSetOnEmptyQuery() throws SQLException {\r\n    Statement stmt = conn.createStatement();\r\n    assertThat(stmt.execute(\"\"), is(false));\r\n    assertThat(stmt.getResultSet(), is(nullValue()));\r\n    assertThat(stmt.getMoreResults(), is(false));\r\n  }","id":68496,"modified_method":"@Test\r\n  public void shouldReturnEmptyResultSetOnEmptyQuery() throws SQLException {\r\n    Statement stmt = conn.createStatement();\r\n    assertThat(stmt.execute(\"\")).isFalse();\r\n    assertThat(stmt.getResultSet()).isNull();\r\n    ;\r\n    assertThat(stmt.getMoreResults()).isFalse();\r\n  }","commit_id":"59e3d87647e68c2f943db8a7f26154337e6369d5","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Feature(summary = \"can push pull gettext plural project\", tcmsTestCaseIds = {217601, 217905}, tcmsTestPlanIds = 5316)\n    public void canPushAndPullPlural() throws IOException {\n        restCaller.createProjectAndVersion(\"plurals\", \"master\", \"podir\");\n        List<String> output =\n                client.callWithTimeout(tempDir,\n                        \"mvn -B zanata:push -Dzanata.pushType=both -Dzanata.userConfig=\"\n                                + userConfigPath);\n\n        assertThat(client.isPushSuccessful(output), Matchers.is(true));\n\n        EditorPage editorPage = verifyPluralPushedToEditor();\n\n        File pullDir = Files.createTempDir();\n        String pullDirPath = pullDir.getAbsolutePath();\n        String command =\n                \"mvn -B zanata:pull -Dzanata.pullType=both -Dzanata.srcDir=\"\n                        + pullDirPath + \" -Dzanata.transDir=\" + pullDirPath\n                        + \" -Dzanata.userConfig=\" + userConfigPath;\n        output = client.callWithTimeout(tempDir, command);\n        assertThat(client.isPushSuccessful(output), Matchers.is(true));\n\n        // source round trip\n        List<TextFlow> originalTextFlows =\n                getTextFlows(new File(projectRootPath + \"/pot/test.pot\"));\n        List<TextFlow> pulledTextFlows =\n                getTextFlows(new File(pullDir, \"test.pot\"));\n        assertThat(pulledTextFlows, Matchers.equalTo(originalTextFlows));\n\n        // translation round trip\n        List<TextFlowTarget> originalTargets =\n                getTextFlowTargets(new File(projectRootPath + \"/pl/test.po\"));\n        List<TextFlowTarget> pulledTargets =\n                getTextFlowTargets(new File(pullDir + \"/pl/test.po\"));\n        assertThat(pulledTargets, Matchers.equalTo(originalTargets));\n\n        // translate on web UI and pull again\n        editorPage.translateTargetAtRowIndex(0, \"one aoeuaouaou\")\n                .saveAsFuzzyAtRow(0);\n\n\n        client.callWithTimeout(tempDir, command);\n        List<String> newContents =\n                getTextFlowTargets(new File(pullDir + \"/pl/test.po\")).get(0)\n                        .getContents();\n        assertThat(newContents, Matchers.hasItem(\"one aoeuaouaou\"));\n\n    }","id":68497,"modified_method":"@Feature(summary = \"The user can push and pull gettext plural projects\",\n            tcmsTestCaseIds = {217601, 217905}, tcmsTestPlanIds = 5316)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void canPushAndPullPlural() throws IOException {\n        restCaller.createProjectAndVersion(\"plurals\", \"master\", \"podir\");\n        List<String> output =\n                client.callWithTimeout(tempDir,\n                        \"mvn -B zanata:push -Dzanata.pushType=both -Dzanata.userConfig=\"\n                                + userConfigPath);\n\n        assertThat(client.isPushSuccessful(output)).isTrue();\n\n        EditorPage editorPage = verifyPluralPushedToEditor();\n\n        File pullDir = Files.createTempDir();\n        String pullDirPath = pullDir.getAbsolutePath();\n        String command =\n                \"mvn -B zanata:pull -Dzanata.pullType=both -Dzanata.srcDir=\"\n                        + pullDirPath + \" -Dzanata.transDir=\" + pullDirPath\n                        + \" -Dzanata.userConfig=\" + userConfigPath;\n        output = client.callWithTimeout(tempDir, command);\n        assertThat(client.isPushSuccessful(output)).isTrue();\n\n        // source round trip\n        List<TextFlow> originalTextFlows =\n                getTextFlows(new File(projectRootPath + \"/pot/test.pot\"));\n        List<TextFlow> pulledTextFlows =\n                getTextFlows(new File(pullDir, \"test.pot\"));\n        assertThat(pulledTextFlows).isEqualTo(originalTextFlows);\n\n        // translation round trip\n        List<TextFlowTarget> originalTargets =\n                getTextFlowTargets(new File(projectRootPath + \"/pl/test.po\"));\n        List<TextFlowTarget> pulledTargets =\n                getTextFlowTargets(new File(pullDir + \"/pl/test.po\"));\n        assertThat(pulledTargets).isEqualTo(originalTargets);\n\n        // translate on web UI and pull again\n        editorPage.translateTargetAtRowIndex(0, \"one aoeuaouaou\")\n                .saveAsFuzzyAtRow(0);\n\n\n        client.callWithTimeout(tempDir, command);\n        List<String> newContents =\n                getTextFlowTargets(new File(pullDir + \"/pl/test.po\")).get(0)\n                        .getContents();\n        assertThat(newContents).contains(\"one aoeuaouaou\");\n\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"private static EditorPage verifyPluralPushedToEditor() {\n        // verify first message\n        new LoginWorkFlow().signIn(\"admin\", \"admin\");\n        EditorPage editorPage = new BasicWorkFlow()\n                .goToEditor(\"plurals\", \"master\", \"pl\", \"test\");\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0, Plurals.SourceSingular),\n                Matchers.equalTo(\"One file removed\"));\n        assertThat(editorPage.getMessageSourceAtRowIndex(0, Plurals.SourcePlural),\n                Matchers.equalTo(\"%d files removed\"));\n        // nplural for Polish is 3\n        assertThat(editorPage.getBasicTranslationTargetAtRowIndex(0,\n                Plurals.TargetSingular),\n                Matchers.equalTo(\"1 aoeuaouaou\"));\n        assertThat(editorPage.getBasicTranslationTargetAtRowIndex(0,\n                Plurals.TargetPluralOne),\n                Matchers.equalTo(\"%d aoeuaouao\"));\n        assertThat(editorPage.getBasicTranslationTargetAtRowIndex(0,\n                Plurals.TargetPluralTwo),\n                Matchers.equalTo(\"\"));\n\n        return editorPage;\n    }","id":68498,"modified_method":"private static EditorPage verifyPluralPushedToEditor() {\n        // verify first message\n        new LoginWorkFlow().signIn(\"admin\", \"admin\");\n        EditorPage editorPage = new BasicWorkFlow()\n                .goToEditor(\"plurals\", \"master\", \"pl\", \"test\");\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0, Plurals.SourceSingular))\n                .isEqualTo(\"One file removed\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(0, Plurals.SourcePlural))\n                .isEqualTo(\"%d files removed\");\n        // nplural for Polish is 3\n\n        assertThat(editorPage.getBasicTranslationTargetAtRowIndex(0,\n                Plurals.TargetSingular))\n                .isEqualTo(\"1 aoeuaouaou\");\n        assertThat(editorPage.getBasicTranslationTargetAtRowIndex(0,\n                Plurals.TargetPluralOne))\n                .isEqualTo(\"%d aoeuaouao\");\n        assertThat(editorPage.getBasicTranslationTargetAtRowIndex(0,\n                Plurals.TargetPluralTwo))\n                .isEqualTo(\"\");\n\n        return editorPage;\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n     * TCMS test case <a\n     * href=\"https://tcms.engineering.redhat.com/case/136564/\">136564<\/a>\n     */\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void projectMaintainerPullTest() throws IOException {\n        ZanataRestCaller restCaller =\n                new ZanataRestCaller(\"translator\",\n                        \"d83882201764f7d339e97c4b087f0806\");\n        File workDir = Files.createTempDir();\n        String projectSlug = \"pull-test\";\n        String iterationSlug = \"master\";\n        String projectType = \"properties\";\n        restCaller.createProjectAndVersion(projectSlug, iterationSlug,\n                projectType);\n        // generate a properties source\n        makePropertiesFile(new File(workDir, \"prop1.properties\"), ImmutableMap\n                .<String, String> builder().put(\"hello\", \"hello world\").build());\n        makePropertiesFile(new File(workDir, \"prop2.properties\"), ImmutableMap\n                .<String, String> builder().put(\"greeting\", \"hey buddy\")\n                .build());\n\n        // copy a pom file\n        generateZanataXml(new File(workDir, \"zanata.xml\"), projectSlug,\n                iterationSlug, projectType, Lists.newArrayList(\"pl\"));\n\n        client.callWithTimeout(workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:push -Dzanata.userConfig=\"\n                        + translatorConfig);\n\n        // only message1 has translation\n        TranslationsResource translationsResource =\n                buildTranslationResource(buildTextFlowTarget(\"hello\",\n                        \"translated\"));\n        restCaller.postTargetDocResource(projectSlug, iterationSlug, \"prop1\",\n                new LocaleId(\"pl\"), translationsResource, \"auto\");\n\n        // dryRun creates nothing\n        File transDir = Files.createTempDir();\n        client.callWithTimeout(workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull -DdryRun -Dzanata.userConfig=\"\n                        + translatorConfig + \" -Dzanata.transDir=\" + transDir);\n        assertThat(transDir.listFiles(propFilter), Matchers.arrayWithSize(0));\n\n        // create skeletons is false will only pull translated files\n        client.callWithTimeout(\n                workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull -Dzanata.createSkeletons=false -Dzanata.userConfig=\"\n                        + translatorConfig\n                        + \" -Dzanata.transDir=\"\n                        + transDir.getAbsolutePath());\n\n        assertThat(transDir.listFiles(propFilter), Matchers.arrayContaining(new File(\n                transDir, \"prop1_pl.properties\")));\n\n        // pull both\n        client.callWithTimeout(\n                workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull -Dzanata.pullType=both -Dzanata.userConfig=\"\n                        + translatorConfig\n                        + \" -Dzanata.transDir=\"\n                        + transDir.getAbsolutePath());\n\n        assertThat(transDir.listFiles(propFilter),\n                Matchers.arrayContainingInAnyOrder(new File(transDir,\n                        \"prop1_pl.properties\")));\n        // @formatter:off\n        assertThat(workDir.listFiles(propFilter), Matchers.arrayContainingInAnyOrder(\n                new File(workDir, \"prop1.properties\"),\n                new File(workDir, \"prop2.properties\")));\n        // @formatter:on\n    }","id":68499,"modified_method":"@Feature(summary = \"A maintainer user may pull translations from a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 136564)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void projectMaintainerPullTest() throws IOException {\n        ZanataRestCaller restCaller =\n                new ZanataRestCaller(\"translator\",\n                        \"d83882201764f7d339e97c4b087f0806\");\n        File workDir = Files.createTempDir();\n        String projectSlug = \"pull-test\";\n        String iterationSlug = \"master\";\n        String projectType = \"properties\";\n        restCaller.createProjectAndVersion(projectSlug, iterationSlug,\n                projectType);\n        // generate a properties source\n        makePropertiesFile(new File(workDir, \"prop1.properties\"), ImmutableMap\n                .<String, String> builder().put(\"hello\", \"hello world\").build());\n        makePropertiesFile(new File(workDir, \"prop2.properties\"), ImmutableMap\n                .<String, String> builder().put(\"greeting\", \"hey buddy\")\n                .build());\n\n        // copy a pom file\n        generateZanataXml(new File(workDir, \"zanata.xml\"), projectSlug,\n                iterationSlug, projectType, Lists.newArrayList(\"pl\"));\n\n        client.callWithTimeout(workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:push -Dzanata.userConfig=\"\n                        + translatorConfig);\n\n        // only message1 has translation\n        TranslationsResource translationsResource =\n                buildTranslationResource(buildTextFlowTarget(\"hello\",\n                        \"translated\"));\n        restCaller.postTargetDocResource(projectSlug, iterationSlug, \"prop1\",\n                new LocaleId(\"pl\"), translationsResource, \"auto\");\n\n        // dryRun creates nothing\n        File transDir = Files.createTempDir();\n        client.callWithTimeout(workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull -DdryRun -Dzanata.userConfig=\"\n                        + translatorConfig + \" -Dzanata.transDir=\" + transDir);\n        assertThat(transDir.listFiles(propFilter).length).isEqualTo(0);\n\n        // create skeletons is false will only pull translated files\n        client.callWithTimeout(\n                workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull -Dzanata.createSkeletons=false -Dzanata.userConfig=\"\n                        + translatorConfig\n                        + \" -Dzanata.transDir=\"\n                        + transDir.getAbsolutePath());\n\n        assertThat(transDir.listFiles(propFilter)).contains(new File(\n                transDir, \"prop1_pl.properties\"));\n\n        // pull both\n        client.callWithTimeout(\n                workDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull -Dzanata.pullType=both -Dzanata.userConfig=\"\n                        + translatorConfig\n                        + \" -Dzanata.transDir=\"\n                        + transDir.getAbsolutePath());\n\n        assertThat(transDir.listFiles(propFilter)).contains(new File(transDir,\n                        \"prop1_pl.properties\"));\n        // @formatter:off\n        assertThat(workDir.listFiles(propFilter)).contains(\n                new File(workDir, \"prop1.properties\"),\n                new File(workDir, \"prop2.properties\"));\n        // @formatter:on\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n     * TCMS test case <a\n     * href=\"https://tcms.engineering.redhat.com/case/91869/\">91869<\/a>\n     */\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void pushTransAndCopyTransTest() {\n        // translator creates the project and become maintainer\n        ZanataRestCaller restCaller =\n                new ZanataRestCaller(\"translator\",\n                        \"d83882201764f7d339e97c4b087f0806\");\n        restCaller.createProjectAndVersion(\"plurals\", \"master\", \"podir\");\n        List<String> output =\n                client.callWithTimeout(projectRootPath,\n                        \"mvn -B zanata:push -Dzanata.copyTrans=false -Dzanata.userConfig=\"\n                                + translatorConfig);\n\n        assertThat(client.isPushSuccessful(output), Matchers.is(true));\n\n        new LoginWorkFlow().signIn(\"admin\", \"admin\");\n        VersionLanguagesPage versionPage =\n                new BasicWorkFlow().goToPage(String.format(\n                        PROJECT_VERSION_TEMPLATE, \"plurals\", \"master\"),\n                        VersionLanguagesPage.class);\n        assertThat(versionPage.getStatisticsForLocale(\"pl\"),\n                Matchers.containsString(\"0.0%\"));\n\n        // push trans\n        client.callWithTimeout(\n                projectRootPath,\n                \"mvn -B zanata:push -Dzanata.pushType=trans -Dzanata.copyTrans=false -Dzanata.userConfig=\"\n                        + translatorConfig);\n\n        versionPage.reload();\n        assertThat(versionPage.getStatisticsForLocale(\"pl\"),\n                Matchers.containsString(\"6.0%\"));\n\n        // create new version\n        restCaller.createProjectAndVersion(\"plurals\", \"beta\", \"podir\");\n        File updatedZanataXml = new File(Files.createTempDir(), \"zanata.xml\");\n        generateZanataXml(updatedZanataXml, \"plurals\", \"beta\", \"podir\",\n                Lists.newArrayList(\"pl\"));\n        // push source and run copyTrans\n        client.callWithTimeout(\n                projectRootPath,\n                \"mvn -B zanata:push -Dzanata.pushType=source -Dzanata.copyTrans=true -Dzanata.userConfig=\"\n                        + translatorConfig\n                        + \" -Dzanata.projectConfig=\"\n                        + updatedZanataXml.getAbsolutePath());\n\n        VersionLanguagesPage betaVersionPage =\n                new BasicWorkFlow().goToPage(String.format(\n                        PROJECT_VERSION_TEMPLATE, \"plurals\", \"beta\"),\n                        VersionLanguagesPage.class);\n\n        assertThat(betaVersionPage.getStatisticsForLocale(\"pl\"),\n                Matchers.containsString(\"6.0%\"));\n    }","id":68500,"modified_method":"@Feature(summary = \"The system will run CopyTrans when a push occurs\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 91869)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void pushTransAndCopyTransTest() {\n        // translator creates the project and become maintainer\n        ZanataRestCaller restCaller =\n                new ZanataRestCaller(\"translator\",\n                        \"d83882201764f7d339e97c4b087f0806\");\n        restCaller.createProjectAndVersion(\"plurals\", \"master\", \"podir\");\n        List<String> output =\n                client.callWithTimeout(projectRootPath,\n                        \"mvn -B zanata:push -Dzanata.copyTrans=false -Dzanata.userConfig=\"\n                                + translatorConfig);\n\n        assertThat(client.isPushSuccessful(output)).isTrue();\n\n        new LoginWorkFlow().signIn(\"admin\", \"admin\");\n        VersionLanguagesPage versionPage =\n                new BasicWorkFlow().goToPage(String.format(\n                        PROJECT_VERSION_TEMPLATE, \"plurals\", \"master\"),\n                        VersionLanguagesPage.class);\n        assertThat(versionPage.getStatisticsForLocale(\"pl\"))\n                .contains(\"0.0%\");\n\n        // push trans\n        client.callWithTimeout(\n                projectRootPath,\n                \"mvn -B zanata:push -Dzanata.pushType=trans -Dzanata.copyTrans=false -Dzanata.userConfig=\"\n                        + translatorConfig);\n\n        versionPage.reload();\n        assertThat(versionPage.getStatisticsForLocale(\"pl\")).contains(\"6.0%\");\n\n        // create new version\n        restCaller.createProjectAndVersion(\"plurals\", \"beta\", \"podir\");\n        File updatedZanataXml = new File(Files.createTempDir(), \"zanata.xml\");\n        generateZanataXml(updatedZanataXml, \"plurals\", \"beta\", \"podir\",\n                Lists.newArrayList(\"pl\"));\n        // push source and run copyTrans\n        client.callWithTimeout(\n                projectRootPath,\n                \"mvn -B zanata:push -Dzanata.pushType=source -Dzanata.copyTrans=true -Dzanata.userConfig=\"\n                        + translatorConfig\n                        + \" -Dzanata.projectConfig=\"\n                        + updatedZanataXml.getAbsolutePath());\n\n        VersionLanguagesPage betaVersionPage =\n                new BasicWorkFlow().goToPage(String.format(\n                        PROJECT_VERSION_TEMPLATE, \"plurals\", \"beta\"),\n                        VersionLanguagesPage.class);\n\n        assertThat(betaVersionPage.getStatisticsForLocale(\"pl\")).contains(\"6.0%\");\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n     * TCMS test case <a\n     * href=\"https://tcms.engineering.redhat.com/case/91146/\">91146<\/a>\n     */\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void nonProjectMaintainerCanNotPush() {\n        // admin creates the project\n        ZanataRestCaller adminRestCaller = new ZanataRestCaller();\n        adminRestCaller.createProjectAndVersion(\"plurals\", \"master\", \"podir\");\n\n        // translator tries to push\n        List<String> output =\n                client.callWithTimeout(projectRootPath,\n                        \"mvn -B zanata:push -Dzanata.userConfig=\"\n                                + translatorConfig);\n\n        String joinedOutput = Joiner.on(\"\\n\").skipNulls().join(output);\n        assertThat(joinedOutput,\n                Matchers.containsString(\"Authorization check failed\"));\n    }","id":68501,"modified_method":"@Feature(summary = \"A non-maintainer user may not push to a project\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 91146)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void nonProjectMaintainerCanNotPush() {\n        // admin creates the project\n        ZanataRestCaller adminRestCaller = new ZanataRestCaller();\n        adminRestCaller.createProjectAndVersion(\"plurals\", \"master\", \"podir\");\n\n        // translator tries to push\n        List<String> output =\n                client.callWithTimeout(projectRootPath,\n                        \"mvn -B zanata:push -Dzanata.userConfig=\"\n                                + translatorConfig);\n\n        String joinedOutput = Joiner.on(\"\\n\").skipNulls().join(output);\n        assertThat(joinedOutput).contains(\"Authorization check failed\");\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void canPushAndPullProperties() throws IOException,\n            InterruptedException {\n        restCaller.createProjectAndVersion(\"properties-test\", \"master\",\n                \"properties\");\n        // generate a zanata.xml\n        TestFileGenerator.generateZanataXml(new File(tempDir, \"zanata.xml\"),\n                \"properties-test\", \"master\", \"properties\", Lists\n                .newArrayList(\"pl\"));\n        List<String> output = client.callWithTimeout(tempDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:push -Dzanata.srcDir=. \"+\n                \"-Dzanata.userConfig=\" + userConfigPath);\n\n        assertThat(client.isPushSuccessful(output), Matchers.equalTo(true));\n\n        EditorPage editorPage = verifyPushedToEditor();\n        editorPage = editorPage.translateTargetAtRowIndex(2,\n                \"translation updated approved\")\n                .approveTranslationAtRow(2);\n\n        editorPage.translateTargetAtRowIndex(1, \"translation updated fuzzy\")\n                .saveAsFuzzyAtRow(1);\n\n        output = client.callWithTimeout(tempDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull \" +\n                \"-Dzanata.userConfig=\" + userConfigPath);\n\n        assertThat(client.isPushSuccessful(output), Matchers.is(true));\n        File transFile = new File(tempDir, \"test_pl.properties\");\n        assertThat(transFile.exists(), Matchers.is(true));\n        Properties translations = new Properties();\n        translations.load(new FileReader(transFile));\n        assertThat(translations.size(), Matchers.is(1));\n        assertThat(translations.getProperty(\"hey\"),\n                Matchers.equalTo(\"translation updated approved\"));\n\n        // change on client side\n        translations.setProperty(\"greeting\", \"translation updated on client\");\n        translations.store(new FileWriter(transFile), null);\n\n        // push again\n        client.callWithTimeout(tempDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:push \" +\n                \"-Dzanata.pushType=trans -Dzanata.srcDir=. -Dzanata.userConfig=\"\n                + userConfigPath);\n\n        final EditorPage editor =\n                new BasicWorkFlow().goToEditor(\"properties-test\",\n                        \"master\", \"pl\", \"test\");\n        assertThat(editor.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"translation updated on client\"));\n    }","id":68502,"modified_method":"@Feature(summary = \"The maintainer user may push and pull properties files\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 139837)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void canPushAndPullProperties() throws IOException,\n            InterruptedException {\n        restCaller.createProjectAndVersion(\"properties-test\", \"master\",\n                \"properties\");\n        // generate a zanata.xml\n        TestFileGenerator.generateZanataXml(new File(tempDir, \"zanata.xml\"),\n                \"properties-test\", \"master\", \"properties\", Lists\n                .newArrayList(\"pl\"));\n        List<String> output = client.callWithTimeout(tempDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:push -Dzanata.srcDir=. \"+\n                \"-Dzanata.userConfig=\" + userConfigPath);\n\n        assertThat(client.isPushSuccessful(output)).isTrue();\n\n        EditorPage editorPage = verifyPushedToEditor();\n        editorPage = editorPage.translateTargetAtRowIndex(2,\n                \"translation updated approved\")\n                .approveTranslationAtRow(2);\n\n        editorPage.translateTargetAtRowIndex(1, \"translation updated fuzzy\")\n                .saveAsFuzzyAtRow(1);\n\n        output = client.callWithTimeout(tempDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:pull \" +\n                \"-Dzanata.userConfig=\" + userConfigPath);\n\n        assertThat(client.isPushSuccessful(output)).isTrue();\n        File transFile = new File(tempDir, \"test_pl.properties\");\n        assertThat(transFile.exists()).isTrue();\n        Properties translations = new Properties();\n        translations.load(new FileReader(transFile));\n        assertThat(translations.size()).isEqualTo(1);\n        assertThat(translations.getProperty(\"hey\"))\n                .isEqualTo(\"translation updated approved\");\n\n        // change on client side\n        translations.setProperty(\"greeting\", \"translation updated on client\");\n        translations.store(new FileWriter(transFile), null);\n\n        // push again\n        client.callWithTimeout(tempDir,\n                \"mvn -B org.zanata:zanata-maven-plugin:push \" +\n                \"-Dzanata.pushType=trans -Dzanata.srcDir=. -Dzanata.userConfig=\"\n                + userConfigPath);\n\n        final EditorPage editor =\n                new BasicWorkFlow().goToEditor(\"properties-test\",\n                        \"master\", \"pl\", \"test\");\n        assertThat(editor.getBasicTranslationTargetAtRowIndex(1))\n                .isEqualTo(\"translation updated on client\");\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"private static EditorPage verifyPushedToEditor() {\n        new LoginWorkFlow().signIn(\"admin\", \"admin\");\n        EditorPage editorPage =\n                new BasicWorkFlow().goToEditor(\"properties-test\",\n                        \"master\", \"pl\", \"test\");\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0),\n                Matchers.equalTo(\"hello world\"));\n        assertThat(editorPage.getMessageSourceAtRowIndex(1),\n                Matchers.equalTo(\"this is from Huston\"));\n        assertThat(editorPage.getMessageSourceAtRowIndex(2),\n                Matchers.equalTo(\"hey hey\"));\n\n        return editorPage;\n    }","id":68503,"modified_method":"private static EditorPage verifyPushedToEditor() {\n        new LoginWorkFlow().signIn(\"admin\", \"admin\");\n        EditorPage editorPage =\n                new BasicWorkFlow().goToEditor(\"properties-test\",\n                        \"master\", \"pl\", \"test\");\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0))\n                .isEqualTo(\"hello world\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(1))\n                .isEqualTo(\"this is from Huston\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(2))\n                .isEqualTo(\"hey hey\");\n\n        return editorPage;\n    }","commit_id":"705d6dd7fb9372c4dbc033662a30a3691df69ca2","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n  public void shouldCompare() {\n    PluginMetadata checkstyle = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"))\n        .setKey(\"checkstyle\")\n        .setName(\"Checkstyle\");\n    PluginMetadata pmd = DefaultPluginMetadata.create(new File(\"sonar-pmd-plugin.jar\"))\n        .setKey(\"pmd\")\n        .setName(\"PMD\");\n\n    PluginMetadata[] array = {pmd, checkstyle};\n    Arrays.sort(array);\n    assertThat(array[0].getKey(), is(\"checkstyle\"));\n    assertThat(array[1].getKey(), is(\"pmd\"));\n  }","id":68504,"modified_method":"@Test\n  public void shouldCompare() {\n    DefaultPluginMetadata checkstyle = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"))\n        .setKey(\"checkstyle\")\n        .setName(\"Checkstyle\");\n    DefaultPluginMetadata pmd = DefaultPluginMetadata.create(new File(\"sonar-pmd-plugin.jar\"))\n        .setKey(\"pmd\")\n        .setName(\"PMD\");\n    List<DefaultPluginMetadata> plugins = Arrays.asList(pmd, checkstyle);\n\n    assertThat(natural().sortedCopy(plugins)).onProperty(\"key\").containsExactly(\"checkstyle\", \"pmd\");\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testGettersAndSetters() {\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"));\n    metadata.setKey(\"checkstyle\")\n        .setLicense(\"LGPL\")\n        .setDescription(\"description\")\n        .setHomepage(\"http://home\")\n        .setMainClass(\"org.Main\")\n        .setOrganization(\"SonarSource\")\n        .setOrganizationUrl(\"http://sonarsource.org\")\n        .setVersion(\"1.1\");\n\n    assertThat(metadata.getKey(), Is.is(\"checkstyle\"));\n    assertThat(metadata.getLicense(), Is.is(\"LGPL\"));\n    assertThat(metadata.getDescription(), Is.is(\"description\"));\n    assertThat(metadata.getHomepage(), Is.is(\"http://home\"));\n    assertThat(metadata.getMainClass(), Is.is(\"org.Main\"));\n    assertThat(metadata.getOrganization(), Is.is(\"SonarSource\"));\n    assertThat(metadata.getOrganizationUrl(), Is.is(\"http://sonarsource.org\"));\n    assertThat(metadata.getVersion(), Is.is(\"1.1\"));\n    assertThat(metadata.getBasePlugin(), nullValue());\n    assertThat(metadata.getFile(), not(nullValue()));\n    assertThat(metadata.getDeployedFiles().size(), is(0));\n  }","id":68505,"modified_method":"@Test\n  public void testGettersAndSetters() {\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"));\n    metadata.setKey(\"checkstyle\")\n        .setLicense(\"LGPL\")\n        .setDescription(\"description\")\n        .setHomepage(\"http://home\")\n        .setMainClass(\"org.Main\")\n        .setOrganization(\"SonarSource\")\n        .setOrganizationUrl(\"http://sonarsource.org\")\n        .setVersion(\"1.1\")\n        .setSonarVersion(\"3.0\")\n        .setUseChildFirstClassLoader(true)\n        .setCore(false);\n\n    assertThat(metadata.getKey()).isEqualTo(\"checkstyle\");\n    assertThat(metadata.getLicense()).isEqualTo(\"LGPL\");\n    assertThat(metadata.getDescription()).isEqualTo(\"description\");\n    assertThat(metadata.getHomepage()).isEqualTo(\"http://home\");\n    assertThat(metadata.getMainClass()).isEqualTo(\"org.Main\");\n    assertThat(metadata.getOrganization()).isEqualTo(\"SonarSource\");\n    assertThat(metadata.getOrganizationUrl()).isEqualTo(\"http://sonarsource.org\");\n    assertThat(metadata.getVersion()).isEqualTo(\"1.1\");\n    assertThat(metadata.getSonarVersion()).isEqualTo(\"3.0\");\n    assertThat(metadata.isUseChildFirstClassLoader()).isTrue();\n    assertThat(metadata.isCore()).isFalse();\n    assertThat(metadata.getBasePlugin()).isNull();\n    assertThat(metadata.getFile()).isNotNull();\n    assertThat(metadata.getDeployedFiles()).isEmpty();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldEquals() {\n    DefaultPluginMetadata checkstyle = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\")).setKey(\"checkstyle\");\n    PluginMetadata pmd = DefaultPluginMetadata.create(new File(\"sonar-pmd-plugin.jar\")).setKey(\"pmd\");\n\n    assertThat(checkstyle.equals(pmd), is(false));\n    assertThat(checkstyle.equals(checkstyle), is(true));\n    assertThat(checkstyle.equals(DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\")).setKey(\"checkstyle\")), is(true));\n  }","id":68506,"modified_method":"@Test\n  public void shouldEquals() {\n    DefaultPluginMetadata checkstyle = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\")).setKey(\"checkstyle\");\n    PluginMetadata pmd = DefaultPluginMetadata.create(new File(\"sonar-pmd-plugin.jar\")).setKey(\"pmd\");\n\n    assertThat(checkstyle).isEqualTo(checkstyle);\n    assertThat(checkstyle).isEqualTo(DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\")).setKey(\"checkstyle\"));\n    assertThat(checkstyle).isNotEqualTo(pmd);\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testInternalPathToDependencies() {\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"))\n        .setPathsToInternalDeps(new String[]{\"META-INF/lib/commons-lang.jar\", \"META-INF/lib/commons-io.jar\"});\n    assertThat(metadata.getPathsToInternalDeps().length, is(2));\n    assertThat(metadata.getPathsToInternalDeps()[0], is(\"META-INF/lib/commons-lang.jar\"));\n    assertThat(metadata.getPathsToInternalDeps()[1], is(\"META-INF/lib/commons-io.jar\"));\n  }","id":68507,"modified_method":"@Test\n  public void testInternalPathToDependencies() {\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"))\n        .setPathsToInternalDeps(new String[] {\"META-INF/lib/commons-lang.jar\", \"META-INF/lib/commons-io.jar\"});\n\n    assertThat(metadata.getPathsToInternalDeps()).containsOnly(\"META-INF/lib/commons-lang.jar\", \"META-INF/lib/commons-io.jar\");\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testDeployedFiles() {\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"))\n        .addDeployedFile(new File(\"foo.jar\"))\n        .addDeployedFile(new File(\"bar.jar\"));\n    assertThat(metadata.getDeployedFiles().size(), is(2));\n  }","id":68508,"modified_method":"@Test\n  public void testDeployedFiles() {\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(new File(\"sonar-checkstyle-plugin.jar\"))\n        .addDeployedFile(new File(\"foo.jar\"))\n        .addDeployedFile(new File(\"bar.jar\"));\n\n    assertThat(metadata.getDeployedFiles()).hasSize(2);\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void registerPlugin(File file, boolean isCore, boolean canDelete) {\n    DefaultPluginMetadata metadata = installer.extractMetadata(file, isCore);\n    if (StringUtils.isNotBlank(metadata.getKey())) {\n      PluginMetadata existing = pluginByKeys.get(metadata.getKey());\n      if (existing != null) {\n        if (canDelete) {\n          FileUtils.deleteQuietly(existing.getFile());\n          Logs.INFO.info(\"Plugin \" + metadata.getKey() + \" replaced by new version\");\n\n        } else {\n          throw new ServerStartException(\"Found two plugins with the same key '\" + metadata.getKey() + \"': \" + metadata.getFile().getName() + \" and \"\n            + existing.getFile().getName());\n        }\n      }\n      pluginByKeys.put(metadata.getKey(), metadata);\n    }\n  }","id":68509,"modified_method":"private void registerPlugin(File file, boolean isCore, boolean canDelete) {\n    DefaultPluginMetadata metadata = installer.extractMetadata(file, isCore);\n    if (StringUtils.isBlank(metadata.getKey())) {\n      return;\n    }\n\n    PluginMetadata existing = pluginByKeys.put(metadata.getKey(), metadata);\n\n    if ((existing != null) && !canDelete) {\n      throw new ServerStartException(\"Found two plugins with the same key '\" + metadata.getKey() + \"': \" + metadata.getFile().getName() + \" and \"\n        + existing.getFile().getName());\n    }\n\n    if (existing != null) {\n      FileUtils.deleteQuietly(existing.getFile());\n      LOG.info(\"Plugin \" + metadata.getKey() + \" replaced by new version\");\n    }\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void deploy(DefaultPluginMetadata plugin) {\n    try {\n      LOG.debug(\"Deploy plugin \" + plugin);\n\n      File pluginDeployDir = new File(fileSystem.getDeployedPluginsDir(), plugin.getKey());\n      FileUtils.forceMkdir(pluginDeployDir);\n      FileUtils.cleanDirectory(pluginDeployDir);\n\n      List<File> deprecatedExtensions = fileSystem.getExtensions(plugin.getKey());\n      for (File deprecatedExtension : deprecatedExtensions) {\n        plugin.addDeprecatedExtension(deprecatedExtension);\n      }\n\n      installer.install(plugin, pluginDeployDir);\n\n    } catch (IOException e) {\n      throw new RuntimeException(\"Fail to deploy the plugin \" + plugin, e);\n    }\n  }","id":68510,"modified_method":"private void deploy(DefaultPluginMetadata plugin) {\n    LOG.debug(\"Deploy plugin \" + plugin);\n\n    Preconditions.checkState(plugin.isCompatibleWith(server.getVersion()),\n        \"Plugin %s needs a more recent version of Sonar than %s. At least %s is expected\",\n        plugin.getKey(), server.getVersion(), plugin.getSonarVersion());\n\n    try {\n      File pluginDeployDir = new File(fileSystem.getDeployedPluginsDir(), plugin.getKey());\n      FileUtils.forceMkdir(pluginDeployDir);\n      FileUtils.cleanDirectory(pluginDeployDir);\n\n      List<File> deprecatedExtensions = fileSystem.getExtensions(plugin.getKey());\n      for (File deprecatedExtension : deprecatedExtensions) {\n        plugin.addDeprecatedExtension(deprecatedExtension);\n      }\n\n      installer.install(plugin, pluginDeployDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Fail to deploy the plugin \" + plugin, e);\n    }\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"PluginDeployer(DefaultServerFileSystem fileSystem, PluginInstaller installer) {\n    this.fileSystem = fileSystem;\n    this.installer = installer;\n  }","id":68511,"modified_method":"PluginDeployer(Server server, DefaultServerFileSystem fileSystem, PluginInstaller installer) {\n    this.server = server;\n    this.fileSystem = fileSystem;\n    this.installer = installer;\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public PluginDeployer(DefaultServerFileSystem fileSystem) {\n    this(fileSystem, new PluginInstaller());\n  }","id":68512,"modified_method":"public PluginDeployer(Server server, DefaultServerFileSystem fileSystem) {\n    this(server, fileSystem, new PluginInstaller());\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deployDeprecatedPlugin() {\n    deployer.start();\n\n    // check that the plugin is registered\n    assertThat(deployer.getMetadata().size(), Is.is(1)); // no more checkstyle\n\n    PluginMetadata plugin = deployer.getMetadata(\"buildbreaker\");\n    assertThat(plugin.isCore(), is(false));\n    assertThat(plugin.isUseChildFirstClassLoader(), is(false));\n\n    // check that the file is deployed\n    File deployedJar = new File(deployDir, \"plugins/buildbreaker/sonar-build-breaker-plugin-0.1.jar\");\n    assertThat(deployedJar.exists(), is(true));\n    assertThat(deployedJar.isFile(), is(true));\n  }","id":68513,"modified_method":"@Test\n  public void deployDeprecatedPlugin() {\n    deployer.start();\n\n    // check that the plugin is registered\n    assertThat(deployer.getMetadata()).hasSize(1); // no more checkstyle\n\n    PluginMetadata plugin = deployer.getMetadata(\"buildbreaker\");\n    assertThat(plugin.isCore()).isFalse();\n    assertThat(plugin.isUseChildFirstClassLoader()).isFalse();\n\n    // check that the file is deployed\n    File deployedJar = new File(deployDir, \"plugins/buildbreaker/sonar-build-breaker-plugin-0.1.jar\");\n    assertThat(deployedJar.exists()).isTrue();\n    assertThat(deployedJar.isFile()).isTrue();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deployPlugin() {\n    deployer.start();\n\n    // check that the plugin is registered\n    assertThat(deployer.getMetadata().size(), Is.is(1)); // no more checkstyle\n\n    PluginMetadata plugin = deployer.getMetadata(\"foo\");\n    assertThat(plugin.getName(), is(\"Foo\"));\n    assertThat(plugin.getDeployedFiles().size(), is(1));\n    assertThat(plugin.isCore(), is(false));\n    assertThat(plugin.isUseChildFirstClassLoader(), is(false));\n\n    // check that the file is deployed\n    File deployedJar = new File(deployDir, \"plugins/foo/foo-plugin.jar\");\n    assertThat(deployedJar.exists(), is(true));\n    assertThat(deployedJar.isFile(), is(true));\n  }","id":68514,"modified_method":"@Test\n  public void deployPlugin() {\n    deployer.start();\n\n    // check that the plugin is registered\n    assertThat(deployer.getMetadata()).hasSize(1); // no more checkstyle\n\n    PluginMetadata plugin = deployer.getMetadata(\"foo\");\n    assertThat(plugin.getName()).isEqualTo(\"Foo\");\n    assertThat(plugin.getDeployedFiles()).hasSize(1);\n    assertThat(plugin.isCore()).isFalse();\n    assertThat(plugin.isUseChildFirstClassLoader()).isFalse();\n\n    // check that the file is deployed\n    File deployedJar = new File(deployDir, \"plugins/foo/foo-plugin.jar\");\n    assertThat(deployedJar.exists()).isTrue();\n    assertThat(deployedJar.isFile()).isTrue();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deployPluginExtensions() {\n    deployer.start();\n\n    // check that the plugin is registered\n    assertThat(deployer.getMetadata().size(), Is.is(1)); // no more checkstyle\n\n    PluginMetadata plugin = deployer.getMetadata(\"foo\");\n    assertThat(plugin.getDeployedFiles().size(), is(2));\n    File extFile = plugin.getDeployedFiles().get(1);\n    assertThat(extFile.getName(), is(\"foo-extension.txt\"));\n\n    // check that the extension file is deployed\n    File deployedJar = new File(deployDir, \"plugins/foo/foo-extension.txt\");\n    assertThat(deployedJar.exists(), is(true));\n    assertThat(deployedJar.isFile(), is(true));\n  }","id":68515,"modified_method":"@Test\n  public void deployPluginExtensions() {\n    deployer.start();\n\n    // check that the plugin is registered\n    assertThat(deployer.getMetadata()).hasSize(1); // no more checkstyle\n\n    PluginMetadata plugin = deployer.getMetadata(\"foo\");\n    assertThat(plugin.getDeployedFiles()).hasSize(2);\n    File extFile = plugin.getDeployedFiles().get(1);\n    assertThat(extFile.getName()).isEqualTo(\"foo-extension.txt\");\n\n    // check that the extension file is deployed\n    File deployedJar = new File(deployDir, \"plugins/foo/foo-extension.txt\");\n    assertThat(deployedJar.exists()).isTrue();\n    assertThat(deployedJar.isFile()).isTrue();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void ignoreJarsWhichAreNotPlugins() {\n    deployer.start();\n\n    assertThat(deployer.getMetadata().size(), Is.is(0));\n  }","id":68516,"modified_method":"@Test\n  public void ignoreJarsWhichAreNotPlugins() {\n    deployer.start();\n\n    assertThat(deployer.getMetadata()).isEmpty();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void start() {\n    homeDir = TestUtils.getResource(PluginDeployerTest.class, name.getMethodName());\n    deployDir = TestUtils.getTestTempDir(PluginDeployerTest.class, name.getMethodName() + \"/deploy\");\n    fileSystem = new DefaultServerFileSystem(null, homeDir, deployDir);\n    extractor = new PluginInstaller();\n    deployer = new PluginDeployer(fileSystem, extractor);\n  }","id":68517,"modified_method":"@Before\n  public void start() {\n    when(server.getVersion()).thenReturn(\"3.1\");\n    homeDir = TestUtils.getResource(PluginDeployerTest.class, name.getMethodName());\n    deployDir = TestUtils.getTestTempDir(PluginDeployerTest.class, name.getMethodName() + \"/deploy\");\n    fileSystem = new DefaultServerFileSystem(null, homeDir, deployDir);\n    extractor = new PluginInstaller();\n    deployer = new PluginDeployer(server, fileSystem, extractor);\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DefaultPluginMetadata extractMetadata(File file, boolean isCore) {\n    try {\n      PluginManifest manifest = new PluginManifest(file);\n      DefaultPluginMetadata metadata = DefaultPluginMetadata.create(file);\n      metadata.setKey(manifest.getKey());\n      metadata.setName(manifest.getName());\n      metadata.setDescription(manifest.getDescription());\n      metadata.setLicense(manifest.getLicense());\n      metadata.setOrganization(manifest.getOrganization());\n      metadata.setOrganizationUrl(manifest.getOrganizationUrl());\n      metadata.setMainClass(manifest.getMainClass());\n      metadata.setVersion(manifest.getVersion());\n      metadata.setHomepage(manifest.getHomepage());\n      metadata.setPathsToInternalDeps(manifest.getDependencies());\n      metadata.setUseChildFirstClassLoader(manifest.isUseChildFirstClassLoader());\n      metadata.setBasePlugin(manifest.getBasePlugin());\n      metadata.setCore(isCore);\n      if (metadata.isOldManifest()) {\n        completeDeprecatedMetadata(metadata);\n      }\n      return metadata;\n\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Fail to extract plugin metadata from file: \" + file, e);\n    }\n  }","id":68518,"modified_method":"public DefaultPluginMetadata extractMetadata(File file, boolean isCore) {\n    try {\n      PluginManifest manifest = new PluginManifest(file);\n      DefaultPluginMetadata metadata = DefaultPluginMetadata.create(file);\n      metadata.setKey(manifest.getKey());\n      metadata.setName(manifest.getName());\n      metadata.setDescription(manifest.getDescription());\n      metadata.setLicense(manifest.getLicense());\n      metadata.setOrganization(manifest.getOrganization());\n      metadata.setOrganizationUrl(manifest.getOrganizationUrl());\n      metadata.setMainClass(manifest.getMainClass());\n      metadata.setVersion(manifest.getVersion());\n      metadata.setSonarVersion(manifest.getSonarVersion());\n      metadata.setHomepage(manifest.getHomepage());\n      metadata.setPathsToInternalDeps(manifest.getDependencies());\n      metadata.setUseChildFirstClassLoader(manifest.isUseChildFirstClassLoader());\n      metadata.setBasePlugin(manifest.getBasePlugin());\n      metadata.setCore(isCore);\n      if (metadata.isOldManifest()) {\n        completeDeprecatedMetadata(metadata);\n      }\n      return metadata;\n\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Fail to extract plugin metadata from file: \" + file, e);\n    }\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCopyAndExtractDependencies() throws IOException {\n    File toDir = new File(\"target/test-tmp/PluginInstallerTest/shouldCopyAndExtractDependencies\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n\n    DefaultPluginMetadata metadata = extractor.install(getFile(\"sonar-checkstyle-plugin-2.8.jar\"), true, null, toDir);\n\n    assertThat(metadata.getKey(), is(\"checkstyle\"));\n    assertThat(new File(toDir, \"sonar-checkstyle-plugin-2.8.jar\").exists(), is(true));\n    assertThat(new File(toDir, \"META-INF/lib/checkstyle-5.1.jar\").exists(), is(true));\n  }","id":68519,"modified_method":"@Test\n  public void shouldCopyAndExtractDependencies() throws IOException {\n    File toDir = temporaryFolder.newFolder();\n\n    DefaultPluginMetadata metadata = extractor.install(getFile(\"sonar-checkstyle-plugin-2.8.jar\"), true, null, toDir);\n\n    assertThat(metadata.getKey()).isEqualTo(\"checkstyle\");\n    assertThat(new File(toDir, \"sonar-checkstyle-plugin-2.8.jar\")).exists();\n    assertThat(new File(toDir, \"META-INF/lib/checkstyle-5.1.jar\")).exists();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExtractMetadata() {\n    DefaultPluginMetadata metadata = extractor.extractMetadata(getFile(\"sonar-checkstyle-plugin-2.8.jar\"), true);\n    assertThat(metadata.getKey(), is(\"checkstyle\"));\n    assertThat(metadata.getBasePlugin(), nullValue());\n    assertThat(metadata.getName(), is(\"Checkstyle\"));\n    assertThat(metadata.isCore(), is(true));\n    assertThat(metadata.getFile().getName(), is(\"sonar-checkstyle-plugin-2.8.jar\"));\n  }","id":68520,"modified_method":"@Test\n  public void shouldExtractMetadata() {\n    DefaultPluginMetadata metadata = extractor.extractMetadata(getFile(\"sonar-checkstyle-plugin-2.8.jar\"), true);\n\n    assertThat(metadata.getKey()).isEqualTo(\"checkstyle\");\n    assertThat(metadata.getBasePlugin()).isNull();\n    assertThat(metadata.getName()).isEqualTo(\"Checkstyle\");\n    assertThat(metadata.isCore()).isEqualTo(true);\n    assertThat(metadata.getFile().getName()).isEqualTo(\"sonar-checkstyle-plugin-2.8.jar\");\n    assertThat(metadata.getVersion()).isEqualTo(\"2.8\");\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldCopyRuleExtensionsOnServerSide() throws IOException {\n    File toDir = new File(\"target/test-tmp/PluginInstallerTest/shouldCopyRuleExtensionsOnServerSide\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(getFile(\"sonar-checkstyle-plugin-2.8.jar\"))\n        .setKey(\"checkstyle\")\n        .addDeprecatedExtension(getFile(\"PluginInstallerTest/shouldCopyRuleExtensionsOnServerSide/checkstyle-extension.xml\"));\n    extractor.install(metadata, toDir);\n\n    assertThat(new File(toDir, \"sonar-checkstyle-plugin-2.8.jar\").exists(), is(true));\n    assertThat(new File(toDir, \"checkstyle-extension.xml\").exists(), is(true));\n  }","id":68521,"modified_method":"@Test\n  public void shouldCopyRuleExtensionsOnServerSide() throws IOException {\n    File toDir = temporaryFolder.newFolder();\n\n    DefaultPluginMetadata metadata = DefaultPluginMetadata.create(getFile(\"sonar-checkstyle-plugin-2.8.jar\"))\n        .setKey(\"checkstyle\")\n        .addDeprecatedExtension(getFile(\"checkstyle-extension.xml\"));\n    extractor.install(metadata, toDir);\n\n    assertThat(new File(toDir, \"sonar-checkstyle-plugin-2.8.jar\")).exists();\n    assertThat(new File(toDir, \"checkstyle-extension.xml\")).exists();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExtractOnlyDependencies() throws IOException {\n    File toDir = new File(\"target/test-tmp/PluginInstallerTest/shouldExtractOnlyDependencies\");\n    FileUtils.forceMkdir(toDir);\n    FileUtils.cleanDirectory(toDir);\n\n    extractor.install(getFile(\"sonar-checkstyle-plugin-2.8.jar\"), true, null, toDir);\n\n    assertThat(new File(toDir, \"sonar-checkstyle-plugin-2.8.jar\").exists(), is(true));\n    assertThat(new File(toDir, \"META-INF/MANIFEST.MF\").exists(), is(false));\n    assertThat(new File(toDir, \"org/sonar/plugins/checkstyle/CheckstyleVersion.class\").exists(), is(false));\n  }","id":68522,"modified_method":"@Test\n  public void shouldExtractOnlyDependencies() throws IOException {\n    File toDir = temporaryFolder.newFolder();\n\n    extractor.install(getFile(\"sonar-checkstyle-plugin-2.8.jar\"), true, null, toDir);\n\n    assertThat(new File(toDir, \"sonar-checkstyle-plugin-2.8.jar\")).exists();\n    assertThat(new File(toDir, \"META-INF/MANIFEST.MF\")).doesNotExist();\n    assertThat(new File(toDir, \"org/sonar/plugins/checkstyle/CheckstyleVersion.class\")).doesNotExist();\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExtractExtensionMetadata() {\n    DefaultPluginMetadata metadata = extractor.extractMetadata(getFile(\"sonar-checkstyle-extensions-plugin-0.1-SNAPSHOT.jar\"), true);\n    assertThat(metadata.getKey(), is(\"checkstyleextensions\"));\n    assertThat(metadata.getBasePlugin(), is(\"checkstyle\"));\n  }","id":68523,"modified_method":"@Test\n  public void shouldExtractExtensionMetadata() {\n    DefaultPluginMetadata metadata = extractor.extractMetadata(getFile(\"sonar-checkstyle-extensions-plugin-0.1-SNAPSHOT.jar\"), true);\n\n    assertThat(metadata.getKey()).isEqualTo(\"checkstyleextensions\");\n    assertThat(metadata.getBasePlugin()).isEqualTo(\"checkstyle\");\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private File getFile(String filename) {\n    return FileUtils.toFile(getClass().getResource(\"/org/sonar/core/plugins/\" + filename));\n  }","id":68524,"modified_method":"static File getFile(String filename) {\n    return FileUtils.toFile(PluginInstallerTest.class.getResource(\"/org/sonar/core/plugins/\" + filename));\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldExtractDeprecatedMetadata() {\n    DefaultPluginMetadata metadata = extractor.extractMetadata(getFile(\"sonar-emma-plugin-0.3.jar\"), false);\n    assertThat(metadata.getKey(), is(\"emma\"));\n    assertThat(metadata.getBasePlugin(), nullValue());\n    assertThat(metadata.getName(), is(\"Emma\"));\n  }","id":68525,"modified_method":"@Test\n  public void shouldExtractDeprecatedMetadata() {\n    DefaultPluginMetadata metadata = extractor.extractMetadata(getFile(\"sonar-emma-plugin-0.3.jar\"), false);\n\n    assertThat(metadata.getKey()).isEqualTo(\"emma\");\n    assertThat(metadata.getBasePlugin()).isNull();\n    assertThat(metadata.getName()).isEqualTo(\"Emma\");\n  }","commit_id":"ba7439977f53e5c05f2c6cd52b907f6582a10bde","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String pluginKey = getPluginKey(request);\n    String resource = getResourcePath(request);\n\n    DefaultServerPluginRepository pluginRepository = Platform.getInstance().getContainer().getComponentByType(DefaultServerPluginRepository.class);\n    ClassLoader classLoader = pluginRepository.getClassLoader(pluginKey);\n    if (classLoader == null) {\n      LOG.error(\"Plugin not found: \" + pluginKey);\n      response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      return;\n    }\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      in = classLoader.getResourceAsStream(resource);\n      if (in != null) {\n        out = response.getOutputStream();\n        IOUtils.copy(in, out);\n      } else {\n        LOG.error(\"Unable to find resource '\" + resource + \"' in plugin '\" + pluginKey + \"'\");\n        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to load static resource '\" + resource + \"' from plugin '\" + pluginKey + \"'\", e);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } finally {\n      IOUtils.closeQuietly(in);\n      IOUtils.closeQuietly(out);\n    }\n  }","id":68526,"modified_method":"@Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String pluginKey = getPluginKey(request);\n    String resource = getResourcePath(request);\n\n    DefaultServerPluginRepository pluginRepository = Platform.getInstance().getContainer().getComponentByType(DefaultServerPluginRepository.class);\n    ClassLoader classLoader = pluginRepository.getClassLoader(pluginKey);\n    if (classLoader == null) {\n      LOG.error(\"Plugin not found: \" + pluginKey);\n      response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      return;\n    }\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      in = classLoader.getResourceAsStream(resource);\n      if (in != null) {\n        out = response.getOutputStream();\n        IOUtils.copy(in, out);\n        completeContentType(response, resource);\n\n      } else {\n        LOG.error(\"Unable to find resource '\" + resource + \"' in plugin '\" + pluginKey + \"'\");\n        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to load static resource '\" + resource + \"' from plugin '\" + pluginKey + \"'\", e);\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } finally {\n      IOUtils.closeQuietly(in);\n      IOUtils.closeQuietly(out);\n    }\n  }","commit_id":"e2fe328d3c5dea94096df17991e26855d937e621","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDeterminePluginKey() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getPluginKey(request), is(\"myplugin\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getPluginKey(request), is(\"myplugin\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getPluginKey(request), is(\"myplugin\"));\n  }","id":68527,"modified_method":"@Test\n  public void shouldDeterminePluginKey() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getPluginKey(request)).isEqualTo(\"myplugin\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getPluginKey(request)).isEqualTo(\"myplugin\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getPluginKey(request)).isEqualTo(\"myplugin\");\n  }","commit_id":"e2fe328d3c5dea94096df17991e26855d937e621","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDetermineResourcePath() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getResourcePath(request), is(\"static/image.png\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getResourcePath(request), is(\"static/images/image.png\"));\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getResourcePath(request), is(\"static/\"));\n  }","id":68528,"modified_method":"@Test\n  public void shouldDetermineResourcePath() {\n    when(request.getContextPath()).thenReturn(\"/\");\n    when(request.getServletPath()).thenReturn(\"static\");\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/image.png\");\n    assertThat(servlet.getResourcePath(request)).isEqualTo(\"static/image.png\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/images/image.png\");\n    assertThat(servlet.getResourcePath(request)).isEqualTo(\"static/images/image.png\");\n\n    when(request.getRequestURI()).thenReturn(\"/static/myplugin/\");\n    assertThat(servlet.getResourcePath(request)).isEqualTo(\"static/\");\n  }","commit_id":"e2fe328d3c5dea94096df17991e26855d937e621","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private License(Map<String, String> properties) {\n    product = StringUtils.defaultString(properties.get(\"Product\"), properties.get(\"Plugin\"));\n    organization = StringUtils.defaultString(properties.get(\"Organisation\"), properties.get(\"Name\"));\n    expirationDate = StringUtils.defaultString(properties.get(\"Expiration\"), properties.get(\"Expires\"));\n    type = properties.get(\"Type\");\n    server = properties.get(\"Server\");\n  }","id":68529,"modified_method":"private License(Map<String, String> properties) {\n    this.additionalProperties = Maps.newHashMap(properties);\n    product = StringUtils.defaultString(get(\"Product\", properties), get(\"Plugin\", properties));\n    organization = StringUtils.defaultString(get(\"Organisation\", properties), get(\"Name\", properties));\n    expirationDate = StringUtils.defaultString(get(\"Expiration\", properties), get(\"Expires\", properties));\n    type = get(\"Type\", properties);\n    server = get(\"Server\", properties);\n    // SONAR-4340 Don't expose Digest property\n    additionalProperties.remove(\"Digest\");\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void readPlainText_empty_fields() {\n    License license = License.readPlainText(\"\");\n\n    assertThat(license.getOrganization(), nullValue());\n    assertThat(license.getServer(), nullValue());\n    assertThat(license.getProduct(), nullValue());\n    assertThat(license.getExpirationDateAsString(), nullValue());\n    assertThat(license.getExpirationDate(), nullValue());\n    assertThat(license.getType(), nullValue());\n  }","id":68530,"modified_method":"@Test\n  public void readPlainText_empty_fields() {\n    License license = License.readPlainText(\"\");\n\n    assertThat(license.getOrganization()).isNull();\n    assertThat(license.getServer()).isNull();\n    assertThat(license.getProduct()).isNull();\n    assertThat(license.getExpirationDateAsString()).isNull();\n    assertThat(license.getExpirationDate()).isNull();\n    assertThat(license.getType()).isNull();\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void readBase64() {\n    License license = License.readBase64(new String(Base64.encodeBase64(V2_FORMAT.getBytes())));\n\n    assertThat(license.getOrganization(), Is.is(\"ABC\"));\n    assertThat(license.getServer(), Is.is(\"12345\"));\n    assertThat(license.getProduct(), Is.is(\"SQALE\"));\n    assertThat(license.getExpirationDateAsString(), Is.is(\"2012-05-18\"));\n    assertThat(license.getType(), Is.is(\"EVALUATION\"));\n  }","id":68531,"modified_method":"@Test\n  public void readBase64() {\n    License license = License.readBase64(new String(Base64.encodeBase64(V2_FORMAT.getBytes())));\n\n    assertThat(license.getOrganization()).isEqualTo(\"ABC\");\n    assertThat(license.getServer()).isEqualTo(\"12345\");\n    assertThat(license.getProduct()).isEqualTo(\"SQALE\");\n    assertThat(license.getExpirationDateAsString()).isEqualTo(\"2012-05-18\");\n    assertThat(license.getType()).isEqualTo(\"EVALUATION\");\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void readPlainText_not_valid_input() {\n    License license = License.readPlainText(\"old pond ... a frog leaps in water\u2019s sound\");\n\n    assertThat(license.getOrganization(), nullValue());\n    assertThat(license.getServer(), nullValue());\n    assertThat(license.getProduct(), nullValue());\n    assertThat(license.getExpirationDateAsString(), nullValue());\n    assertThat(license.getExpirationDate(), nullValue());\n    assertThat(license.getType(), nullValue());\n  }","id":68532,"modified_method":"@Test\n  public void readPlainText_not_valid_input() {\n    License license = License.readPlainText(\"old pond ... a frog leaps in water\u2019s sound\");\n\n    assertThat(license.getOrganization()).isNull();\n    assertThat(license.getServer()).isNull();\n    assertThat(license.getProduct()).isNull();\n    assertThat(license.getExpirationDateAsString()).isNull();\n    assertThat(license.getExpirationDate()).isNull();\n    assertThat(license.getType()).isNull();\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void trimBeforeReadingBase64() {\n    String encodedKeyWithTrailingWhiteSpaces = \"Rm9vOiBiYXIKT3JnYW5pc2F0aW9uOiBBQkMgClNlcnZlcjogMTIzND  \\n\" +\n      \"UgICAKUHJvZHVjdDogU1FBTEUKICBFeHBpcmF0aW9uOiAyMDEyLTA1    \\n\" +\n      \"LTE4ICAKVHlwZTogIEVWQUxVQVRJT04gICAKT3RoZXI6IGZpZWxkCg==\\n\";\n\n    License license = License.readBase64(new String(encodedKeyWithTrailingWhiteSpaces.getBytes()));\n\n    assertThat(license.getOrganization(), Is.is(\"ABC\"));\n    assertThat(license.getServer(), Is.is(\"12345\"));\n    assertThat(license.getProduct(), Is.is(\"SQALE\"));\n    assertThat(license.getExpirationDateAsString(), Is.is(\"2012-05-18\"));\n    assertThat(license.getType(), Is.is(\"EVALUATION\"));\n  }","id":68533,"modified_method":"@Test\n  public void trimBeforeReadingBase64() {\n    String encodedKeyWithTrailingWhiteSpaces = \"Rm9vOiBiYXIKT3JnYW5pc2F0aW9uOiBBQkMgClNlcnZlcjogMTIzND  \\n\" +\n      \"UgICAKUHJvZHVjdDogU1FBTEUKICBFeHBpcmF0aW9uOiAyMDEyLTA1    \\n\" +\n      \"LTE4ICAKVHlwZTogIEVWQUxVQVRJT04gICAKT3RoZXI6IGZpZWxkCg==\\n\";\n\n    License license = License.readBase64(new String(encodedKeyWithTrailingWhiteSpaces.getBytes()));\n\n    assertThat(license.getOrganization()).isEqualTo(\"ABC\");\n    assertThat(license.getServer()).isEqualTo(\"12345\");\n    assertThat(license.getProduct()).isEqualTo(\"SQALE\");\n    assertThat(license.getExpirationDateAsString()).isEqualTo(\"2012-05-18\");\n    assertThat(license.getType()).isEqualTo(\"EVALUATION\");\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void isExpired() {\n    License license = License.readPlainText(V2_FORMAT);\n\n    assertThat(license.isExpired(DateUtils.parseDate(\"2013-06-23\")), is(true));\n    assertThat(license.isExpired(DateUtils.parseDate(\"2012-05-18\")), is(true));\n    assertThat(license.isExpired(DateUtils.parseDateTime(\"2012-05-18T15:50:45+0100\")), is(true));\n    assertThat(license.isExpired(DateUtils.parseDate(\"2011-01-01\")), is(false));\n  }","id":68534,"modified_method":"@Test\n  public void isExpired() {\n    License license = License.readPlainText(V2_FORMAT);\n\n    assertThat(license.isExpired(DateUtils.parseDate(\"2013-06-23\"))).isTrue();\n    assertThat(license.isExpired(DateUtils.parseDate(\"2012-05-18\"))).isTrue();\n    assertThat(license.isExpired(DateUtils.parseDateTime(\"2012-05-18T15:50:45+0100\"))).isTrue();\n    assertThat(license.isExpired(DateUtils.parseDate(\"2011-01-01\"))).isFalse();\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void readPlainTest_version_1() {\n    License license = License.readPlainText(V1_FORMAT);\n\n    assertThat(license.getOrganization(), Is.is(\"ABC\"));\n    assertThat(license.getServer(), nullValue());\n    assertThat(license.getProduct(), Is.is(\"SQALE\"));\n    assertThat(license.getExpirationDateAsString(), Is.is(\"2012-05-18\"));\n    assertThat(license.getType(), nullValue());\n  }","id":68535,"modified_method":"@Test\n  public void readPlainTest_version_1() {\n    License license = License.readPlainText(V1_FORMAT);\n\n    assertThat(license.getOrganization()).isEqualTo(\"ABC\");\n    assertThat(license.getServer()).isNull();\n    assertThat(license.getProduct()).isEqualTo(\"SQALE\");\n    assertThat(license.getExpirationDateAsString()).isEqualTo(\"2012-05-18\");\n    assertThat(license.getType()).isNull();\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void readBase64_not_base64() {\n    License license = License.readBase64(\"çé '123$@\");\n\n    assertThat(license.getOrganization(), nullValue());\n    assertThat(license.getServer(), nullValue());\n    assertThat(license.getProduct(), nullValue());\n    assertThat(license.getExpirationDateAsString(), nullValue());\n    assertThat(license.getExpirationDate(), nullValue());\n    assertThat(license.getType(), nullValue());\n  }","id":68536,"modified_method":"@Test\n  public void readBase64_not_base64() {\n    License license = License.readBase64(\"çé '123$@\");\n\n    assertThat(license.getOrganization()).isNull();\n    assertThat(license.getServer()).isNull();\n    assertThat(license.getProduct()).isNull();\n    assertThat(license.getExpirationDateAsString()).isNull();\n    assertThat(license.getExpirationDate()).isNull();\n    assertThat(license.getType()).isNull();\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void readPlainTest() {\n    License license = License.readPlainText(V2_FORMAT);\n\n    assertThat(license.getOrganization(), Is.is(\"ABC\"));\n    assertThat(license.getServer(), Is.is(\"12345\"));\n    assertThat(license.getProduct(), Is.is(\"SQALE\"));\n    assertThat(license.getExpirationDateAsString(), Is.is(\"2012-05-18\"));\n    assertThat(license.getType(), Is.is(\"EVALUATION\"));\n  }","id":68537,"modified_method":"@Test\n  public void readPlainTest() {\n    License license = License.readPlainText(V2_FORMAT);\n\n    assertThat(license.getOrganization()).isEqualTo(\"ABC\");\n    assertThat(license.getServer()).isEqualTo(\"12345\");\n    assertThat(license.getProduct()).isEqualTo(\"SQALE\");\n    assertThat(license.getExpirationDateAsString()).isEqualTo(\"2012-05-18\");\n    assertThat(license.getType()).isEqualTo(\"EVALUATION\");\n  }","commit_id":"2870e3114a698d24f17a554281b8696f52da5978","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void measureWithLevelValue() {\n    assertThat(new Measure(CoreMetrics.ALERT_STATUS, Metric.Level.ERROR).getData(), is(\"ERROR\"));\n    assertThat(new Measure(CoreMetrics.ALERT_STATUS, Metric.Level.ERROR).getDataAsLevel(), is(Metric.Level.ERROR));\n    assertThat(new Measure(CoreMetrics.ALERT_STATUS).setData(Metric.Level.ERROR).getDataAsLevel(), is(Metric.Level.ERROR));\n  }","id":68538,"modified_method":"@Test\n  public void measureWithLevelValue() {\n    assertThat(new Measure(CoreMetrics.ALERT_STATUS, Metric.Level.ERROR).getData()).isEqualTo(\"ERROR\");\n    assertThat(new Measure(CoreMetrics.ALERT_STATUS, Metric.Level.ERROR).getDataAsLevel()).isEqualTo(Metric.Level.ERROR);\n    assertThat(new Measure(CoreMetrics.ALERT_STATUS).setData(Metric.Level.ERROR).getDataAsLevel()).isEqualTo(Metric.Level.ERROR);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void notEqualRuleMeasures() {\n    Measure measure = new Measure(CoreMetrics.VIOLATIONS, 30.0);\n    RuleMeasure ruleMeasure = new RuleMeasure(CoreMetrics.VIOLATIONS, new Rule(\"foo\", \"bar\"), RulePriority.CRITICAL, 3);\n    assertFalse(measure.equals(ruleMeasure));\n    assertFalse(ruleMeasure.equals(measure));\n  }","id":68539,"modified_method":"@Test\n  public void notEqualRuleMeasures() {\n    Measure measure = new Measure(CoreMetrics.VIOLATIONS, 30.0);\n    RuleMeasure ruleMeasure = new RuleMeasure(CoreMetrics.VIOLATIONS, new Rule(\"foo\", \"bar\"), RulePriority.CRITICAL, 3);\n    assertThat(measure.equals(ruleMeasure)).isFalse();\n    assertThat(ruleMeasure.equals(measure)).isFalse();\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldGetAndSetVariations() {\n    Measure measure = new Measure(CoreMetrics.LINES).setVariation1(1d).setVariation2(2d).setVariation3(3d);\n    assertThat(measure.getVariation1(), is(1d));\n    assertThat(measure.getVariation2(), is(2d));\n    assertThat(measure.getVariation3(), is(3d));\n  }","id":68540,"modified_method":"@Test\n  public void shouldGetAndSetVariations() {\n    Measure measure = new Measure(CoreMetrics.LINES).setVariation1(1d).setVariation2(2d).setVariation3(3d);\n    assertThat(measure.getVariation1()).isEqualTo(1d);\n    assertThat(measure.getVariation2()).isEqualTo(2d);\n    assertThat(measure.getVariation3()).isEqualTo(3d);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldSetVariationsWithIndex() {\n    Measure measure = new Measure(CoreMetrics.LINES).setVariation(2, 3.3);\n    assertThat(measure.getVariation1(), nullValue());\n    assertThat(measure.getVariation2(), is(3.3));\n    assertThat(measure.getVariation3(), nullValue());\n  }","id":68541,"modified_method":"@Test\n  public void shouldSetVariationsWithIndex() {\n    Measure measure = new Measure(CoreMetrics.LINES).setVariation(2, 3.3);\n    assertThat(measure.getVariation1()).isNull();\n    assertThat(measure.getVariation2()).isEqualTo(3.3);\n    assertThat(measure.getVariation3()).isNull();\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldUnsetData() {\n    String data = \"1=10;21=456\";\n    Measure measure = new Measure(CoreMetrics.CONDITIONS_BY_LINE).setData(data);\n    assertThat(measure.hasData(), is(true));\n    assertThat(measure.getData(), is(data));\n\n    measure.unsetData();\n\n    assertThat(measure.hasData(), is(false));\n    assertThat(measure.getData(), nullValue());\n  }","id":68542,"modified_method":"@Test\n  public void shouldUnsetData() {\n    String data = \"1=10;21=456\";\n    Measure measure = new Measure(CoreMetrics.CONDITIONS_BY_LINE).setData(data);\n    assertThat(measure.hasData()).isTrue();\n    assertThat(measure.getData()).isEqualTo(data);\n\n    measure.unsetData();\n\n    assertThat(measure.hasData()).isFalse();\n    assertThat(measure.getData()).isNull();\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void persistenceModeIsDatabaseForBigDataMeasures() {\n    Measure bigDataMeasure = new Measure(CoreMetrics.COVERAGE_LINE_HITS_DATA, \"long data\")\n        .setPersistenceMode(PersistenceMode.DATABASE);\n    assertThat(bigDataMeasure.getPersistenceMode(), is(PersistenceMode.DATABASE));\n  }","id":68543,"modified_method":"@Test\n  public void persistenceModeIsDatabaseForBigDataMeasures() {\n    Measure bigDataMeasure = new Measure(CoreMetrics.COVERAGE_LINE_HITS_DATA, \"long data\")\n      .setPersistenceMode(PersistenceMode.DATABASE);\n    assertThat(bigDataMeasure.getPersistenceMode()).isEqualTo(PersistenceMode.DATABASE);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void defaultPersistenceModeIsFull() {\n    assertThat(new Measure(CoreMetrics.LINES, 32.0).getPersistenceMode(), is(PersistenceMode.FULL));\n  }","id":68544,"modified_method":"@Test\n  public void defaultPersistenceModeIsFull() {\n    assertThat(new Measure(CoreMetrics.LINES, 32.0).getPersistenceMode()).isEqualTo(PersistenceMode.FULL);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n  public void valueShouldNotBeNaN() {\n    new Measure(\"metric_key\").setValue(Double.NaN);\n  }","id":68545,"modified_method":"@Test\n  public void valueShouldNotBeNaN() {\n    thrown.expect(IllegalArgumentException.class);\n    new Measure(\"metric_key\").setValue(Double.NaN);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void valueCanBeNull() {\n    Measure measure = new Measure(\"metric_key\").setValue(null);\n    assertThat(measure.getValue(), nullValue());\n  }","id":68546,"modified_method":"@Test\n  public void valueCanBeNull() {\n    Measure measure = new Measure(\"metric_key\").setValue(null);\n    assertThat(measure.getValue()).isNull();\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void valuesAreRoundUp() {\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.22222222).getValue(), is(5.2));\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.7777777).getValue(), is(5.8));\n\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.22222222, 3).getValue(), is(5.222));\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.7777777, 3).getValue(), is(5.778));\n  }","id":68547,"modified_method":"@Test\n  public void valuesAreRoundUp() {\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.22222222).getValue()).isEqualTo(5.2);\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.7777777).getValue()).isEqualTo(5.8);\n\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.22222222, 3).getValue()).isEqualTo(5.222);\n    assertThat(new Measure(CoreMetrics.COVERAGE, 5.7777777, 3).getValue()).isEqualTo(5.778);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void measureWithIntegerValue() {\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(3).getValue(), is(3.0));\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(null).getValue(), nullValue());\n\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(3).getIntValue(), is(3));\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(null).getIntValue(), nullValue());\n\n    assertThat(new Measure(CoreMetrics.LINES).setValue(3.6).getIntValue(), is(3));\n  }","id":68548,"modified_method":"@Test\n  public void measureWithIntegerValue() {\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(3).getValue()).isEqualTo(3.0);\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(null).getValue()).isNull();\n\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(3).getIntValue()).isEqualTo(3);\n    assertThat(new Measure(CoreMetrics.LINES).setIntValue(null).getIntValue()).isNull();\n\n    assertThat(new Measure(CoreMetrics.LINES).setValue(3.6).getIntValue()).isEqualTo(3);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Proper definition of equality for measures is important, because used to store them.\n   */\n  @Test\n  public void equalsAndHashCode() {\n    Measure measure1 = new Measure();\n    Measure measure2 = new Measure();\n\n    assertThat(measure1.equals(null), is(false));\n\n    // another class\n    assertThat(measure1.equals(\"\"), is(false));\n\n    // same instance\n    assertThat(measure1.equals(measure1), is(true));\n    assertThat(measure1.hashCode(), equalTo(measure2.hashCode()));\n\n    // same key - null\n    assertThat(measure1.equals(measure2), is(true));\n    assertThat(measure2.equals(measure1), is(true));\n    assertThat(measure1.hashCode(), equalTo(measure2.hashCode()));\n\n    // different keys\n    measure1.setMetric(CoreMetrics.COVERAGE);\n    assertThat(measure1.equals(measure2), is(false));\n    assertThat(measure2.equals(measure1), is(false));\n    assertThat(measure1.hashCode(), not(equalTo(measure2.hashCode())));\n\n    measure2.setMetric(CoreMetrics.LINES);\n    assertThat(measure1.equals(measure2), is(false));\n    assertThat(measure2.equals(measure1), is(false));\n    assertThat(measure1.hashCode(), not(equalTo(measure2.hashCode())));\n\n    // same key\n    measure2.setMetric(CoreMetrics.COVERAGE);\n    assertThat(measure1.equals(measure2), is(true));\n    assertThat(measure2.equals(measure1), is(true));\n    assertThat(measure1.hashCode(), equalTo(measure2.hashCode()));\n\n    // different committer\n    measure1.setPersonId(1);\n    assertThat(measure1.equals(measure2), is(false));\n    assertThat(measure2.equals(measure1), is(false));\n    assertThat(measure1.hashCode(), not(equalTo(measure2.hashCode())));\n\n    measure2.setPersonId(2);\n    assertThat(measure1.equals(measure2), is(false));\n    assertThat(measure2.equals(measure1), is(false));\n    assertThat(measure1.hashCode(), not(equalTo(measure2.hashCode())));\n\n    // same committer\n    measure2.setPersonId(1);\n    assertThat(measure1.equals(measure2), is(true));\n    assertThat(measure2.equals(measure1), is(true));\n    assertThat(measure1.hashCode(), equalTo(measure2.hashCode()));\n\n    // value doesn't matter\n    measure1.setValue(1.0);\n    measure2.setValue(2.0);\n    assertThat(measure1.equals(measure2), is(true));\n    assertThat(measure2.equals(measure1), is(true));\n    assertThat(measure1.hashCode(), equalTo(measure2.hashCode()));\n  }","id":68549,"modified_method":"/**\n   * Proper definition of equality for measures is important, because used to store them.\n   */\n  @Test\n  public void equalsAndHashCode() {\n    Measure measure1 = new Measure();\n    Measure measure2 = new Measure();\n\n    assertThat(measure1.equals(null)).isFalse();\n\n    // another class\n    assertThat(measure1.equals(\"\")).isFalse();\n\n    // same instance\n    assertThat(measure1.equals(measure1)).isTrue();\n    assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());\n\n    // same key - null\n    assertThat(measure1.equals(measure2)).isTrue();\n    assertThat(measure2.equals(measure1)).isTrue();\n    assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());\n\n    // different keys\n    measure1.setMetric(CoreMetrics.COVERAGE);\n    assertThat(measure1.equals(measure2)).isFalse();\n    assertThat(measure2.equals(measure1)).isFalse();\n    assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());\n\n    measure2.setMetric(CoreMetrics.LINES);\n    assertThat(measure1.equals(measure2)).isFalse();\n    assertThat(measure2.equals(measure1)).isFalse();\n    assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());\n\n    // same key\n    measure2.setMetric(CoreMetrics.COVERAGE);\n    assertThat(measure1.equals(measure2)).isTrue();\n    assertThat(measure2.equals(measure1)).isTrue();\n    assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());\n\n    // different committer\n    measure1.setPersonId(1);\n    assertThat(measure1.equals(measure2)).isFalse();\n    assertThat(measure2.equals(measure1)).isFalse();\n    assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());\n\n    measure2.setPersonId(2);\n    assertThat(measure1.equals(measure2)).isFalse();\n    assertThat(measure2.equals(measure1)).isFalse();\n    assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());\n\n    // same committer\n    measure2.setPersonId(1);\n    assertThat(measure1.equals(measure2)).isTrue();\n    assertThat(measure2.equals(measure1)).isTrue();\n    assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());\n\n    // value doesn't matter\n    measure1.setValue(1.0);\n    measure2.setValue(2.0);\n    assertThat(measure1.equals(measure2)).isTrue();\n    assertThat(measure2.equals(measure1)).isTrue();\n    assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void scaleValue() {\n    assertThat(new Measure(CoreMetrics.COVERAGE, 80.666666).getValue(), is(80.7));\n    assertThat(new Measure(CoreMetrics.COVERAGE, 80.666666, 2).getValue(), is(80.67));\n  }","id":68550,"modified_method":"@Test\n  public void scaleValue() {\n    assertThat(new Measure(CoreMetrics.COVERAGE, 80.666666).getValue()).isEqualTo(80.7);\n    assertThat(new Measure(CoreMetrics.COVERAGE, 80.666666, 2).getValue()).isEqualTo(80.67);\n  }","commit_id":"a2a1a000cb251bd814d1977cd7037a3e69681dd2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testHashCode() {\n    assertTrue(new AsmField(stringClass, \"firstField\").equals(new AsmField(stringClass, \"firstField\")));\n    assertFalse(new AsmField(stringClass, \"firstField\").equals(new AsmField(stringClass, \"secondField\")));\n    assertFalse(new AsmField(stringClass, \"firstField\").equals(new AsmField(numberClass, \"firstField\")));\n  }","id":68551,"modified_method":"@Test\n  public void testHashCode() {\n    assertThat(new AsmField(stringClass, \"firstField\").hashCode()).isEqualTo(new AsmField(stringClass, \"firstField\").hashCode());\n    assertThat(new AsmField(stringClass, \"firstField\").hashCode()).isNotEqualTo(new AsmField(stringClass, \"secondField\").hashCode());\n    assertThat(new AsmField(stringClass, \"firstField\").hashCode()).isNotEqualTo(new AsmField(numberClass, \"firstField\").hashCode());\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testEquals() {\n    assertEquals(new AsmField(stringClass, \"firstField\").hashCode(), new AsmField(stringClass, \"firstField\").hashCode());\n    assertFalse(new AsmField(stringClass, \"firstField\").hashCode() == new AsmField(stringClass, \"secondField\").hashCode());\n    assertFalse(new AsmField(stringClass, \"firstField\").hashCode() == new AsmField(numberClass, \"firstField\").hashCode());\n  }","id":68552,"modified_method":"@Test\n  public void testEquals() {\n    assertThat(new AsmField(stringClass, \"firstField\")).isEqualTo(new AsmField(stringClass, \"firstField\"));\n    assertThat(new AsmField(stringClass, \"firstField\")).isNotEqualTo(new AsmField(stringClass, \"secondField\"));\n    assertThat(new AsmField(stringClass, \"firstField\")).isNotEqualTo(new AsmField(numberClass, \"firstField\"));\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testHashCode() {\n    assertTrue(new AsmMethod(stringClass, \"firstMethod()V\").equals(new AsmMethod(stringClass, \"firstMethod()V\")));\n    assertFalse(new AsmMethod(stringClass, \"firstMethod()V\").equals(new AsmMethod(stringClass, \"secondMethod()V\")));\n    assertFalse(new AsmMethod(stringClass, \"firstMethod()V\").equals(new AsmMethod(numberClass, \"firstMethod()V\")));\n  }","id":68553,"modified_method":"@Test\n  public void testHashCode() {\n    assertThat(new AsmMethod(stringClass, \"firstMethod()V\").hashCode()).isEqualTo(new AsmMethod(stringClass, \"firstMethod()V\").hashCode());\n    assertThat(new AsmMethod(stringClass, \"firstMethod()V\").hashCode()).isNotEqualTo(new AsmMethod(stringClass, \"secondMethod()V\").hashCode());\n    assertThat(new AsmMethod(stringClass, \"firstMethod()V\").hashCode()).isNotEqualTo(new AsmMethod(numberClass, \"firstMethod()V\").hashCode());\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testEquals() {\n    assertEquals(new AsmMethod(stringClass, \"firstMethod()V\").hashCode(), new AsmMethod(stringClass, \"firstMethod()V\").hashCode());\n    assertFalse(new AsmMethod(stringClass, \"firstMethod()V\").hashCode() == new AsmMethod(stringClass, \"secondMethod()V\").hashCode());\n    assertFalse(new AsmMethod(stringClass, \"firstMethod()V\").hashCode() == new AsmMethod(numberClass, \"firstMethod()V\").hashCode());\n  }","id":68554,"modified_method":"@Test\n  public void testEquals() {\n    assertThat(new AsmMethod(stringClass, \"firstMethod()V\")).isEqualTo(new AsmMethod(stringClass, \"firstMethod()V\"));\n    assertThat(new AsmMethod(stringClass, \"firstMethod()V\")).isNotEqualTo(new AsmMethod(stringClass, \"secondMethod()V\"));\n    assertThat(new AsmMethod(stringClass, \"firstMethod()V\")).isNotEqualTo(new AsmMethod(numberClass, \"firstMethod()V\"));\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldRegisterItself() {\n    ComponentContainer container = new ComponentContainer();\n    assertTrue(container.getComponentByType(ComponentContainer.class) == container);\n  }","id":68555,"modified_method":"@Test\n  public void shouldRegisterItself() {\n    ComponentContainer container = new ComponentContainer();\n\n    assertThat(container.getComponentByType(ComponentContainer.class)).isSameAs(container);\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDeclareExtensionWhenAdding() {\n    ComponentContainer container = new ComponentContainer();\n    PluginMetadata plugin = mock(PluginMetadata.class);\n    container.addExtension(plugin, ComponentWithProperty.class);\n\n    PropertyDefinitions propertyDefinitions = container.getComponentByType(PropertyDefinitions.class);\n    assertThat(propertyDefinitions.get(\"foo\"), notNullValue());\n    assertThat(container.getComponentByType(ComponentWithProperty.class), notNullValue());\n  }","id":68556,"modified_method":"@Test\n  public void shouldDeclareExtensionWhenAdding() {\n    ComponentContainer container = new ComponentContainer();\n    PluginMetadata plugin = mock(PluginMetadata.class);\n    container.addExtension(plugin, ComponentWithProperty.class);\n\n    PropertyDefinitions propertyDefinitions = container.getComponentByType(PropertyDefinitions.class);\n    assertThat(propertyDefinitions.get(\"foo\")).isNotNull();\n    assertThat(container.getComponentByType(ComponentWithProperty.class)).isNotNull();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testRemoveChild() {\n    ComponentContainer parent = new ComponentContainer();\n    parent.startComponents();\n\n    ComponentContainer child = parent.createChild();\n    assertTrue(parent.getChild() == child);\n\n    parent.removeChild();\n    assertThat(parent.getChild(), nullValue());\n  }","id":68557,"modified_method":"@Test\n  public void testRemoveChild() {\n    ComponentContainer parent = new ComponentContainer();\n    parent.startComponents();\n\n    ComponentContainer child = parent.createChild();\n    assertThat(parent.getChild()).isSameAs(child);\n\n    parent.removeChild();\n    assertThat(parent.getChild()).isNull();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDeclareExtensionWithoutAddingIt() {\n    ComponentContainer container = new ComponentContainer();\n    PluginMetadata plugin = mock(PluginMetadata.class);\n    container.declareExtension(plugin, ComponentWithProperty.class);\n\n    PropertyDefinitions propertyDefinitions = container.getComponentByType(PropertyDefinitions.class);\n    assertThat(propertyDefinitions.get(\"foo\"), notNullValue());\n    assertThat(container.getComponentByType(ComponentWithProperty.class), nullValue());\n  }","id":68558,"modified_method":"@Test\n  public void shouldDeclareExtensionWithoutAddingIt() {\n    ComponentContainer container = new ComponentContainer();\n    PluginMetadata plugin = mock(PluginMetadata.class);\n    container.declareExtension(plugin, ComponentWithProperty.class);\n\n    PropertyDefinitions propertyDefinitions = container.getComponentByType(PropertyDefinitions.class);\n    assertThat(propertyDefinitions.get(\"foo\")).isNotNull();\n    assertThat(container.getComponentByType(ComponentWithProperty.class)).isNull();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testStartAndStop() {\n    ComponentContainer container = new ComponentContainer();\n    container.addSingleton(StartableComponent.class);\n    container.startComponents();\n\n    assertThat(container.getComponentByType(StartableComponent.class).started, is(true));\n    assertThat(container.getComponentByType(StartableComponent.class).stopped, is(false));\n\n    container.stopComponents();\n    assertThat(container.getComponentByType(StartableComponent.class).stopped, is(true));\n  }","id":68559,"modified_method":"@Test\n  public void testStartAndStop() {\n    ComponentContainer container = new ComponentContainer();\n    container.addSingleton(StartableComponent.class);\n    container.startComponents();\n\n    assertThat(container.getComponentByType(StartableComponent.class).started).isTrue();\n    assertThat(container.getComponentByType(StartableComponent.class).stopped).isFalse();\n\n    container.stopComponents();\n    assertThat(container.getComponentByType(StartableComponent.class).stopped).isTrue();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldDeclareComponentProperties() {\n    ComponentContainer container = new ComponentContainer();\n    container.addSingleton(ComponentWithProperty.class);\n\n    PropertyDefinitions propertyDefinitions = container.getComponentByType(PropertyDefinitions.class);\n    assertThat(propertyDefinitions.get(\"foo\"), notNullValue());\n    assertThat(propertyDefinitions.get(\"foo\").getDefaultValue(), is(\"bar\"));\n  }","id":68560,"modified_method":"@Test\n  public void shouldDeclareComponentProperties() {\n    ComponentContainer container = new ComponentContainer();\n    container.addSingleton(ComponentWithProperty.class);\n\n    PropertyDefinitions propertyDefinitions = container.getComponentByType(PropertyDefinitions.class);\n    assertThat(propertyDefinitions.get(\"foo\")).isNotNull();\n    assertThat(propertyDefinitions.get(\"foo\").getDefaultValue()).isEqualTo(\"bar\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testChild() {\n    ComponentContainer parent = new ComponentContainer();\n    parent.startComponents();\n\n    ComponentContainer child = parent.createChild();\n    child.addSingleton(StartableComponent.class);\n    child.startComponents();\n\n    assertTrue(child.getParent() == parent);\n    assertTrue(parent.getChild() == child);\n    assertTrue(child.getComponentByType(ComponentContainer.class) == child);\n    assertTrue(parent.getComponentByType(ComponentContainer.class) == parent);\n    assertThat(child.getComponentByType(StartableComponent.class), notNullValue());\n    assertThat(parent.getComponentByType(StartableComponent.class), nullValue());\n\n    parent.stopComponents();\n  }","id":68561,"modified_method":"@Test\n  public void testChild() {\n    ComponentContainer parent = new ComponentContainer();\n    parent.startComponents();\n\n    ComponentContainer child = parent.createChild();\n    child.addSingleton(StartableComponent.class);\n    child.startComponents();\n\n    assertThat(child.getParent()).isSameAs(parent);\n    assertThat(parent.getChild()).isSameAs(child);\n    assertThat(child.getComponentByType(ComponentContainer.class)).isSameAs(child);\n    assertThat(parent.getComponentByType(ComponentContainer.class)).isSameAs(parent);\n    assertThat(child.getComponentByType(StartableComponent.class)).isNotNull();\n    assertThat(parent.getComponentByType(StartableComponent.class)).isNull();\n\n    parent.stopComponents();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void valueLesserThanMinimumIsIgnored() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[]{0, 2, 4});\n    Measure measure = builder\n        .add(3.2)\n        .add(2.0)\n        .add(-3.0)\n        .build();\n\n    assertThat(measure.getData(), is(\"0=0;2=2;4=0\"));\n  }","id":68562,"modified_method":"@Test\n  public void valueLesserThanMinimumIsIgnored() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[] {0, 2, 4});\n    Measure measure = builder\n        .add(3.2)\n        .add(2.0)\n        .add(-3.0)\n        .build();\n\n    assertThat(measure.getData()).isEqualTo(\"0=0;2=2;4=0\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void workOnAnLimitsArrayCopy() {\n    Integer[] limits = new Integer[]{4,2,0};\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, limits);\n    builder.add(3.2).add(2.0).add(6.2).build();\n    assertTrue(builder.getBottomLimits() != limits);\n    assertThat(limits[0], is(4));\n    assertThat(limits[1], is(2));\n    assertThat(limits[2], is(0));\n  }","id":68563,"modified_method":"@Test\n  public void workOnAnLimitsArrayCopy() {\n    Integer[] limits = new Integer[] {4, 2, 0};\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, limits);\n    builder.add(3.2).add(2.0).add(6.2).build();\n\n    assertThat(builder.getBottomLimits()).isNotSameAs(limits);\n    assertThat(limits[0]).isEqualTo(4);\n    assertThat(limits[1]).isEqualTo(2);\n    assertThat(limits[2]).isEqualTo(0);\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void buildIntegerDistribution() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[]{0, 2, 4});\n    Measure measure = builder\n        .add(3.2)\n        .add(2.0)\n        .add(6.2)\n        .build();\n\n    assertThat(measure.getData(), is(\"0=0;2=2;4=1\"));\n  }","id":68564,"modified_method":"@Test\n  public void buildIntegerDistribution() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[] {0, 2, 4});\n    Measure measure = builder\n        .add(3.2)\n        .add(2.0)\n        .add(6.2)\n        .build();\n\n    assertThat(measure.getData()).isEqualTo(\"0=0;2=2;4=1\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void initLimitsAtTheFirstAdd() {\n    Measure m1 = mock(Measure.class);\n    when(m1.getData()).thenReturn(\"0.5=3;3.5=5;6.5=9\");\n\n    Measure m2 = mock(Measure.class);\n    when(m2.getData()).thenReturn(\"0.5=0;3.5=2;6.5=1\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION);\n    builder.clear();\n    Measure measure = builder\n        .add(m1)\n        .add(m2)\n        .build();\n\n    assertThat(measure.getData(), is(\"0.5=3;3.5=7;6.5=10\"));\n  }","id":68565,"modified_method":"@Test\n  public void initLimitsAtTheFirstAdd() {\n    Measure m1 = mock(Measure.class);\n    when(m1.getData()).thenReturn(\"0.5=3;3.5=5;6.5=9\");\n\n    Measure m2 = mock(Measure.class);\n    when(m2.getData()).thenReturn(\"0.5=0;3.5=2;6.5=1\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION);\n    builder.clear();\n    Measure measure = builder\n        .add(m1)\n        .add(m2)\n        .build();\n\n    assertThat(measure.getData()).isEqualTo(\"0.5=3;3.5=7;6.5=10\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void keepIntRangesWhenMergingDistributions() {\n    Measure m1 = mock(Measure.class);\n    when(m1.getData()).thenReturn(\"0=3;3=5;6=9\");\n\n    Measure m2 = mock(Measure.class);\n    when(m2.getData()).thenReturn(\"0=0;3=2;6=1\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION);\n    builder.clear();\n    Measure measure = builder\n        .add(m1)\n        .add(m2)\n        .build();\n\n    assertThat(measure.getData(), is(\"0=3;3=7;6=10\"));\n  }","id":68566,"modified_method":"@Test\n  public void keepIntRangesWhenMergingDistributions() {\n    Measure m1 = mock(Measure.class);\n    when(m1.getData()).thenReturn(\"0=3;3=5;6=9\");\n\n    Measure m2 = mock(Measure.class);\n    when(m2.getData()).thenReturn(\"0=0;3=2;6=1\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION);\n    builder.clear();\n    Measure measure = builder\n        .add(m1)\n        .add(m2)\n        .build();\n\n    assertThat(measure.getData()).isEqualTo(\"0=3;3=7;6=10\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void addDistributionMeasureWithIdenticalLimits() {\n    Measure measureToAdd = mock(Measure.class);\n    when(measureToAdd.getData()).thenReturn(\"0=3;2=5\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[]{0, 2});\n    builder.clear();\n    Measure measure = builder\n        .add(1)\n        .add(measureToAdd)\n        .build();\n\n    assertThat(measure.getData(), is(\"0=4;2=5\"));\n  }","id":68567,"modified_method":"@Test\n  public void addDistributionMeasureWithIdenticalLimits() {\n    Measure measureToAdd = mock(Measure.class);\n    when(measureToAdd.getData()).thenReturn(\"0=3;2=5\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[] {0, 2});\n    builder.clear();\n    Measure measure = builder\n        .add(1)\n        .add(measureToAdd)\n        .build();\n\n    assertThat(measure.getData()).isEqualTo(\"0=4;2=5\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void buildDoubleDistribution() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Double[]{0.0, 2.0, 4.0});\n    Measure measure = builder\n        .add(3.2)\n        .add(2.0)\n        .add(6.2)\n        .build();\n\n    assertThat(measure.getData(), is(\"0=0;2=2;4=1\"));\n  }","id":68568,"modified_method":"@Test\n  public void buildDoubleDistribution() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Double[] {0.0, 2.0, 4.0});\n    Measure measure = builder\n        .add(3.2)\n        .add(2.0)\n        .add(6.2)\n        .build();\n\n    assertThat(measure.getData()).isEqualTo(\"0=0;2=2;4=1\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void addDistributionMeasureWithDifferentIntLimits() {\n    Measure measureToAdd = mock(Measure.class);\n    when(measureToAdd.getData()).thenReturn(\"0=3;2=5\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[]{0, 2, 4});\n    builder.clear();\n    Measure measure = builder\n        .add(1)\n        .add(measureToAdd)\n        .build();\n\n    assertNull(measure);\n  }","id":68569,"modified_method":"@Test\n  public void addDistributionMeasureWithDifferentIntLimits() {\n    Measure measureToAdd = mock(Measure.class);\n    when(measureToAdd.getData()).thenReturn(\"0=3;2=5\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[] {0, 2, 4});\n    builder.clear();\n    Measure measure = builder\n        .add(1)\n        .add(measureToAdd)\n        .build();\n\n    assertThat(measure).isNull();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void aggregateEmptyDistribution() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.LCOM4_DISTRIBUTION);\n    builder.add(new Measure(CoreMetrics.LCOM4_DISTRIBUTION, (String)null));\n    Measure distribution = builder.build();\n    assertThat(distribution.getData(), is(\"\"));\n  }","id":68570,"modified_method":"@Test\n  public void aggregateEmptyDistribution() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.LCOM4_DISTRIBUTION);\n    builder.add(new Measure(CoreMetrics.LCOM4_DISTRIBUTION, (String) null));\n    Measure distribution = builder.build();\n    assertThat(distribution.getData()).isEmpty();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void nullIfEmptyData() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[]{0, 2, 4});\n\n    assertThat(builder.isEmpty(), is(true));\n    Measure measure = builder.build(false);\n    assertNull(measure);\n\n    measure = builder.build(true);\n    assertThat(measure.getData(), is(\"0=0;2=0;4=0\"));\n  }","id":68571,"modified_method":"@Test\n  public void nullIfEmptyData() {\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Integer[] {0, 2, 4});\n\n    assertThat(builder.isEmpty()).isTrue();\n    Measure measure = builder.build(false);\n    assertThat(measure).isNull();\n\n    measure = builder.build(true);\n    assertThat(measure.getData()).isEqualTo(\"0=0;2=0;4=0\");\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void addDistributionMeasureWithDifferentDoubleLimits() {\n    Measure measureToAdd = mock(Measure.class);\n    when(measureToAdd.getData()).thenReturn(\"0.0=3;3.0=5;6.0=9\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Double[]{0.0, 2.0, 4.0});\n    builder.clear();\n    Measure measure = builder\n        .add(measureToAdd)\n        .build();\n\n    assertNull(measure);\n  }","id":68572,"modified_method":"@Test\n  public void addDistributionMeasureWithDifferentDoubleLimits() {\n    Measure measureToAdd = mock(Measure.class);\n    when(measureToAdd.getData()).thenReturn(\"0.0=3;3.0=5;6.0=9\");\n\n    RangeDistributionBuilder builder = new RangeDistributionBuilder(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION, new Double[] {0.0, 2.0, 4.0});\n    builder.clear();\n    Measure measure = builder\n        .add(measureToAdd)\n        .build();\n\n    assertThat(measure).isNull();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void equals() {\n    SonarUpdate update1 = new SonarUpdate(new Release(new Sonar(), \"2.2\"));\n    SonarUpdate update2 = new SonarUpdate(new Release(new Sonar(), \"2.3\"));\n    assertTrue(update1.equals(update1));\n    assertTrue(update1.equals(new SonarUpdate(new Release(new Sonar(), \"2.2\"))));\n    assertFalse(update1.equals(update2));\n  }","id":68573,"modified_method":"@Test\n  public void equals() {\n    SonarUpdate update1 = new SonarUpdate(new Release(new Sonar(), \"2.2\"));\n    SonarUpdate update2 = new SonarUpdate(new Release(new Sonar(), \"2.3\"));\n\n    assertThat(update1).isEqualTo(update1);\n    assertThat(update1).isEqualTo(new SonarUpdate(new Release(new Sonar(), \"2.2\")));\n    assertThat(update1).isNotEqualTo(update2);\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void incompatibleUpdateIfSomePluginsAreIncompatible() {\n    SonarUpdate update = new SonarUpdate(new Release(new Sonar(), \"2.3\"));\n    update.addIncompatiblePlugin(new Plugin(\"old\"));\n    assertTrue(update.isIncompatible());\n    assertTrue(update.hasWarnings());\n    assertFalse(update.requiresPluginUpgrades());\n  }","id":68574,"modified_method":"@Test\n  public void incompatibleUpdateIfSomePluginsAreIncompatible() {\n    SonarUpdate update = new SonarUpdate(new Release(new Sonar(), \"2.3\"));\n    update.addIncompatiblePlugin(new Plugin(\"old\"));\n\n    assertThat(update.isIncompatible()).isTrue();\n    assertThat(update.hasWarnings()).isTrue();\n    assertThat(update.requiresPluginUpgrades()).isFalse();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void incompatibleUpdateIfRequiredPluginUpgrades() {\n    SonarUpdate update = new SonarUpdate(new Release(new Sonar(), \"2.3\"));\n    update.addPluginToUpgrade(new Release(new Plugin(\"old\"), Version.create(\"0.2\")));\n    assertFalse(update.isIncompatible());\n    assertTrue(update.hasWarnings());\n    assertTrue(update.requiresPluginUpgrades());\n  }","id":68575,"modified_method":"@Test\n  public void incompatibleUpdateIfRequiredPluginUpgrades() {\n    SonarUpdate update = new SonarUpdate(new Release(new Sonar(), \"2.3\"));\n    update.addPluginToUpgrade(new Release(new Plugin(\"old\"), Version.create(\"0.2\")));\n\n    assertThat(update.isIncompatible()).isFalse();\n    assertThat(update.hasWarnings()).isTrue();\n    assertThat(update.requiresPluginUpgrades()).isTrue();\n  }","commit_id":"be33ec41314feb7b5dea29d56b9855a03455e45a","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n     * Waits until stopped, or timeout.\n     *\n     * @return true if stopped, false if timeout\n     */\n    public boolean awaitStopOrIdleTimeout(int timeout) {\n        lock.lock();\n        try {\n            while ((!isStarted() || isRunning()) || (!isStopped() && !hasBeenIdleFor(timeout))) {\n                try {\n                    if (!isStarted() || isRunning()) {\n                        condition.await();\n                    } else {\n                        condition.awaitUntil(new Date(lastActivityAt + timeout));\n                    }\n                } catch (InterruptedException e) {\n                    throw UncheckedException.asUncheckedException(e);\n                }\n            }\n            assert !isRunning();\n            return isStopped();\n        } finally {\n            lock.unlock();\n        }\n    }","id":68576,"modified_method":"/**\n     * Waits until stopped, or timeout.\n     *\n     * @return true if stopped, false if timeout\n     */\n    public boolean awaitStopOrIdleTimeout(int timeout) {\n        lock.lock();\n        try {\n            LOGGER.lifecycle(\"waiting for daemon to stop or be idle for {}ms\", timeout);\n            while (true) {\n                if (isStopped()) {\n                    return true;\n                } else if (hasBeenIdleFor(timeout)) {\n                    return false;\n                }\n            \n                try {\n                    if (!isStarted()) {\n                        LOGGER.lifecycle(\"waiting for daemon to stop or idle timeout, daemon has not yet started, sleeping until then\");\n                        condition.await();\n                    } else if (isBusy()) {\n                        LOGGER.lifecycle(\"waiting for daemon to stop or idle timeout, daemon is busy, sleeping until it finishes\");\n                        condition.await();\n                    } else if (isIdle()) {\n                        Date waitUntil = new Date(lastActivityAt + timeout);\n                        LOGGER.lifecycle(\"waiting for daemon to stop or idle timeout, daemon is idle, sleeping until daemon state change or idle timeout at {}\", waitUntil);\n                        condition.awaitUntil(waitUntil);\n                    } else {\n                        throw new IllegalStateException(\"waiting for daemon to stop or idle timeout, daemon has started but is not busy or idle, this shouldn't happen\");\n                    }\n                } catch (InterruptedException e) {\n                    throw UncheckedException.asUncheckedException(e);\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"private void updateActivityTimestamp() {\n        lastActivityAt = System.currentTimeMillis();\n    }","id":68577,"modified_method":"private void updateActivityTimestamp() {\n        long now = System.currentTimeMillis();\n        LOGGER.lifecycle(\"updating lastActivityAt to {}\", now);\n        lastActivityAt = now;\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * Called when the execution of a command begins.\n     * <p>\n     * If the daemon is busy (i.e. already executing a command), this method will return the existing\n     * execution which the caller should be prepared for without considering the given execution to be in progress. \n     * If the daemon is idle the return value will be {@code null} and the given execution will be considered in progress.\n     */\n    public DaemonCommandExecution onStartCommand(DaemonCommandExecution execution) {\n        lock.lock();\n        try {\n            if (currentCommandExecution != null) { // daemon is busy\n                return currentCommandExecution;\n            } else {\n                currentCommandExecution = execution;\n                updateActivityTimestamp();\n                onStartCommand.run();\n                condition.signalAll();\n                return null;\n            }\n        } finally {\n            lock.unlock();\n        }\n    }","id":68578,"modified_method":"/**\n     * Called when the execution of a command begins.\n     * <p>\n     * If the daemon is busy (i.e. already executing a command), this method will return the existing\n     * execution which the caller should be prepared for without considering the given execution to be in progress.\n     * If the daemon is idle the return value will be {@code null} and the given execution will be considered in progress.\n     */\n    public DaemonCommandExecution onStartCommand(DaemonCommandExecution execution) {\n        lock.lock();\n        try {\n            if (currentCommandExecution != null) { // daemon is busy\n                LOGGER.warn(\"onStartCommand({}) called while currentCommandExecution = {}\", execution, currentCommandExecution);\n                return currentCommandExecution;\n            } else {\n                LOGGER.lifecycle(\"onStartCommand({}) called after {} mins of idle\", execution, getIdleMinutes());\n                currentCommandExecution = execution;\n                updateActivityTimestamp();\n                onStartCommand.run();\n                condition.signalAll();\n                return null;\n            }\n        } finally {\n            lock.unlock();\n        }\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"public boolean hasBeenIdleFor(int milliseconds) {\n        return lastActivityAt < (System.currentTimeMillis() - milliseconds);\n    }","id":68579,"modified_method":"public boolean hasBeenIdleFor(int milliseconds) {\n        if (!isStarted()) {\n            return false;\n        } else {\n            return lastActivityAt < (System.currentTimeMillis() - milliseconds);\n        }\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"public void stop() {\n        lock.lock();\n        try {\n            LOGGER.info(\"Stop requested. The daemon is running a build: \" + isRunning());\n            stopped = true;\n            onStop.run();\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }","id":68580,"modified_method":"public void stop() {\n        lock.lock();\n        try {\n            LOGGER.lifecycle(\"Stop requested. The daemon is running a build: \" + isRunning());\n            stopped = true;\n            onStop.run();\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"public boolean isIdle() {\n        return currentCommandExecution == null;\n    }","id":68581,"modified_method":"public boolean isIdle() {\n        return isRunning() && currentCommandExecution == null;\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * Called when the execution of a command is complete (or at least the daemon is available for new commands).\n     * <p>\n     * If the daemon is currently idle, this method will return {@code null}. If it is busy, it will return what was the\n     * current execution which will considered to be complete (putting the daemon back in idle state).\n     */\n    public DaemonCommandExecution onFinishCommand() {\n        lock.lock();\n        try {\n            DaemonCommandExecution execution = currentCommandExecution;\n            if (execution != null) {\n                currentCommandExecution = null;\n                updateActivityTimestamp();\n                onFinishCommand.run();\n                condition.signalAll();\n            }\n\n            return execution;\n        } finally {\n            lock.unlock();\n        }\n    }","id":68582,"modified_method":"/**\n     * Called when the execution of a command is complete (or at least the daemon is available for new commands).\n     * <p>\n     * If the daemon is currently idle, this method will return {@code null}. If it is busy, it will return what was the\n     * current execution which will considered to be complete (putting the daemon back in idle state).\n     */\n    public DaemonCommandExecution onFinishCommand() {\n        lock.lock();\n        try {\n            DaemonCommandExecution execution = currentCommandExecution;\n            if (execution == null) {\n                LOGGER.warn(\"onFinishCommand() called while currentCommandExecution is null\");\n            } else {\n                LOGGER.lifecycle(\"onFinishCommand() called while execution = {}\", execution);\n                currentCommandExecution = null;\n                updateActivityTimestamp();\n                onFinishCommand.run();\n                condition.signalAll();\n            }\n\n            return execution;\n        } finally {\n            lock.unlock();\n        }\n    }","commit_id":"3559fee51404f8538f1f39d905b230c33b3295b0","url":"https://github.com/gradle/gradle"},{"original_method":"public String getStatus()\n\t{\n\t\tString retval;\n\t\t\n\t\tif (isAlive())\n\t\t{\n\t\t\tretval=Messages.getString(\"BaseStep.status.Running\"); //$NON-NLS-1$\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (isInitialising())\n\t\t\t{\n\t\t\t\tretval=Messages.getString(\"BaseStep.status.Init\"); //$NON-NLS-1$\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (isStopped())\n\t\t\t\t{\n\t\t\t\t\tretval=Messages.getString(\"BaseStep.status.Stopped\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tretval=Messages.getString(\"BaseStep.status.Finished\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn retval;\n\t}","id":68583,"modified_method":"public int getStatus()\n    {\n        if (isAlive()) return StepDataInterface.STATUS_RUNNING;\n        if (isStopped()) return StepDataInterface.STATUS_STOPPED;\n        \n        // Get the rest in StepDataInterface object:\n        StepDataInterface sdi = trans.getStepDataInterface(stepname, stepcopy);\n        if (sdi!=null)\n        {\n            if (sdi.getStatus()==StepDataInterface.STATUS_DISPOSED && !isAlive()) return StepDataInterface.STATUS_FINISHED;\n            return sdi.getStatus();\n        }\n        return StepDataInterface.STATUS_EMPTY;\n    }","commit_id":"4fd3bbf3b9e145e5046ec322faac26a49318b706","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void runJob() {\n\ttry {\n\t    if (_clientPool.isStopped()) {\n\t\tif (ClientManagerFacade.getInstance().isLocal(_clientPool.getDestination())) {\n\t\t    // it was stopped, but they've reconnected, so boot 'er up again\n\t\t    if (_log.shouldLog(Log.INFO))\n\t\t\t_log.info(\"Client \" + _clientPool.getDestination().calculateHash().toBase64() + \" was stopped, but reconnected!  restarting it\");\n\t\t    _clientPool.startPool();\n\t\t    // we return directly, since it'll queue up jobs again, etc\n\t\t    return;\n\t\t} else {\n\t\t    // not currently connected - check to see whether all of the tunnels have expired\n\t\t    if ((_clientPool.getInactiveInboundTunnelIds().size() > 0) ||\n\t\t        (_clientPool.getInboundTunnelIds().size() > 0) ) {\n\t\t\t// there are tunnels left, requeue until later (in case the client reconnects\n\t\t\tif (_log.shouldLog(Log.DEBUG))\n\t\t\t    _log.debug(\"There are tunnels left, though the client is still disconnected: \" + _clientPool.getDestination().calculateHash());\n\t\t\trequeue(POOL_CHECK_DELAY);\n\t\t\treturn;\n\t\t    } else {\n\t\t\t// no tunnels left and the client is still disconnected, screw the pool\n\t\t\tif (_log.shouldLog(Log.INFO))\n\t\t\t    _log.info(\"No more tunnels left and the client has disconnected: \" + _clientPool.getDestination().calculateHash());\n\t\t\t_tunnelPool.removeClientPool(_clientPool.getDestination());\n\t\t\treturn;\n\t\t    }\n\t\t}\n\t    }\n\t    \n\t    if (!ClientManagerFacade.getInstance().isLocal(_clientPool.getDestination())) {\n\t\t_log.info(\"Client \" + _clientPool.getDestination().calculateHash() + \" is no longer connected, stop the pool\");\n\t\t_clientPool.stopPool();\n\t\trequeue(POOL_CHECK_DELAY);\n\t\treturn;\n\t    }\n\t    int requestedPoolSize = _clientPool.getClientSettings().getNumInboundTunnels();\n\t    int safePoolSize = _clientPool.getSafePoolSize(POOL_CHECK_DELAY);\n\t    if (safePoolSize < requestedPoolSize) {\n\t\trequestMoreTunnels(requestedPoolSize-safePoolSize);\n\t    }\n\t} catch (Exception t) {\n\t    _log.log(Log.CRIT, \"Unhandled exception managing the client tunnel pool\", t);\n\t}\n\trequeue(POOL_CHECK_DELAY);\n    }","id":68584,"modified_method":"public void runJob() {\n        try {\n            if (_clientPool.isStopped()) {\n                handleStopped();\n                return;\n            }\n\n            if (!ClientManagerFacade.getInstance().isLocal(_clientPool.getDestination())) {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Client \" + _clientPool.getDestination().calculateHash() \n                              + \" is no longer connected, stop the pool\");\n                _clientPool.stopPool();\n                requeue(POOL_CHECK_DELAY);\n                return;\n            }\n            int requestedPoolSize = _clientPool.getClientSettings().getNumInboundTunnels();\n            int safePoolSize = _clientPool.getSafePoolSize(POOL_CHECK_DELAY);\n            if (safePoolSize < requestedPoolSize) {\n                requestMoreTunnels(requestedPoolSize-safePoolSize);\n            }\n        } catch (Exception t) {\n            _log.log(Log.CRIT, \"Unhandled exception managing the client tunnel pool\", t);\n        }\n        requeue(POOL_CHECK_DELAY);\n    }","commit_id":"3c762c9a02316dd167213269e0cc51cc32b374e4","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Request num more inbound tunnels - either from the free pool or custom built ones\n     *\n     */\n    private void requestMoreTunnels(int numTunnels) {\n\tint allocated = 0;\n\tTreeMap goodEnoughTunnels = new TreeMap();\n\tint maxLength = _tunnelPool.getLongestTunnelLength();\n\tfor (Iterator iter = _tunnelPool.getFreeTunnels().iterator(); iter.hasNext() && allocated < numTunnels; ) {\n\t    TunnelId id = (TunnelId)iter.next();\n\t    TunnelInfo info = _tunnelPool.getFreeTunnel(id);\n\t    if (info != null) {\n\t\tif (isGoodEnough(info, maxLength)) {\n\t\t    goodEnoughTunnels.put(new Long(0 - info.getSettings().getExpiration()), id);\n\t\t}\n\t    }\n\t}\n\t\n\t// good enough tunnels, ordered with the longest from now duration first\n\tfor (Iterator iter = goodEnoughTunnels.values().iterator(); iter.hasNext() && allocated < numTunnels; ) {\n\t    TunnelId id = (TunnelId)iter.next();\n\t    TunnelInfo info = _tunnelPool.getTunnelInfo(id);\n\t    if (info.getLength() < _clientPool.getClientSettings().getDepthInbound()) {\n\t\t// this aint good 'nuff...\n\t\tcontinue;\n\t    }\n\t    boolean ok = _tunnelPool.allocateTunnel(id, _clientPool.getDestination());\n\t    if (ok) {\n\t\tallocated++;\n\t    }\n\t}\n\t\n\tif (allocated < numTunnels) {\n\t    requestCustomTunnels(numTunnels - allocated);\n\t} else {\n\t    _log.debug(\"Sufficient tunnels exist in the client pool for \" + _clientPool.getDestination().calculateHash() + \" w3wt\");\n\t    // done!  w00t\n\t}\n    }","id":68585,"modified_method":"/**\n     * Request num more inbound tunnels - either from the free pool or custom built ones\n     *\n     */\n    private void requestMoreTunnels(int numTunnels) {\n        if (_clientPool.getClientSettings().getDepthInbound() < 1) {\n            // the client wants 0-hop tunnels, so don't waste longer tunnels on them\n            requestCustomTunnels(numTunnels);\n            return;\n        }\n        \n        int allocated = allocateExisting(numTunnels);\n        \n        if (allocated < numTunnels) {\n            requestCustomTunnels(numTunnels - allocated);\n        } else {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Sufficient tunnels exist in the client pool for \" \n                           + _clientPool.getDestination().calculateHash() + \" w3wt\");\n            // done!  w00t\n        }\n    }","commit_id":"3c762c9a02316dd167213269e0cc51cc32b374e4","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private InNetMessagePool() {\n\t_messages = new ArrayList();\n\t_handlerJobBuilders = new HashMap();\n\tStatManager.getInstance().createFrequencyStat(\"inNetPool.dropped\", \"How frequently we drop a message\", \"InNetPool\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n\tStatManager.getInstance().createFrequencyStat(\"inNetPool.duplicate\", \"How frequently we receive a duplicate message\", \"InNetPool\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n    }","id":68586,"modified_method":"private InNetMessagePool() {\n        _messages = new ArrayList();\n        _handlerJobBuilders = new HashMap();\n        StatManager.getInstance().createRateStat(\"inNetPool.dropped\", \"How often do we drop a message\", \"InNetPool\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n        StatManager.getInstance().createRateStat(\"inNetPool.duplicate\", \"How often do we receive a duplicate message\", \"InNetPool\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n    }","commit_id":"3c762c9a02316dd167213269e0cc51cc32b374e4","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Add a new message to the pool, returning the number of messages in the \n     * pool so that the comm system can throttle inbound messages.  If there is \n     * a HandlerJobBuilder for the inbound message type, the message is loaded\n     * into a job created by that builder and queued up for processing instead\n     * (though if the builder doesn't create a job, it is added to the pool)\n     *\n     */\n    public int add(InNetMessage msg) {\n\tDate exp = msg.getMessage().getMessageExpiration();\n\tboolean valid = MessageValidator.getInstance().validateMessage(msg.getMessage().getUniqueId(), exp.getTime());\n\tif (!valid) {\n\t    if (_log.shouldLog(Log.WARN))\n\t\t_log.warn(\"Duplicate message received [\" + msg.getMessage().getUniqueId() + \" expiring on \" + exp + \"]: \" + msg.getMessage().getClass().getName());\n\t    StatManager.getInstance().updateFrequency(\"inNetPool.dropped\");\n\t    StatManager.getInstance().updateFrequency(\"inNetPool.duplicate\");\n\t    MessageHistory.getInstance().droppedOtherMessage(msg.getMessage());\n\t    MessageHistory.getInstance().messageProcessingError(msg.getMessage().getUniqueId(), msg.getMessage().getClass().getName(), \"Duplicate/expired\");\n\t    return -1;\n\t} else {\n\t    if (_log.shouldLog(Log.DEBUG))\n\t\t_log.debug(\"Message received [\" + msg.getMessage().getUniqueId() + \" expiring on \" + exp + \"] is NOT a duplicate or exipired\");\n\t}\n\t\n\tint size = -1;\n\tint type = msg.getMessage().getType();\n\tHandlerJobBuilder builder = (HandlerJobBuilder)_handlerJobBuilders.get(new Integer(type));\n\t\n\tif (_log.shouldLog(Log.DEBUG))\n\t    _log.debug(\"Add message to the inNetMessage pool - builder: \" + builder + \" message class: \" + msg.getMessage().getClass().getName());\n\t\n\tif (builder != null) {\n\t    Job job = builder.createJob(msg.getMessage(), msg.getFromRouter(), msg.getFromRouterHash(), msg.getReplyBlock());\n\t    if (job != null) {\n\t\tJobQueue.getInstance().addJob(job);\n\t\tsynchronized (_messages) { \n\t\t    size = _messages.size();\n\t\t}\n\t    }\n\t}\n\t\n\tList origMessages = OutboundMessageRegistry.getInstance().getOriginalMessages(msg.getMessage());\n\tif (_log.shouldLog(Log.DEBUG))\n\t    _log.debug(\"Original messages for inbound message: \" + origMessages.size());\n\tif (origMessages.size() > 1) {\n\t    if (_log.shouldLog(Log.DEBUG))\n\t\t_log.debug(\"Orig: \" + origMessages + \" \\nthe above are replies for: \" + msg, new Exception(\"Multiple matches\"));\n\t}\n\t\n\tfor (int i = 0; i < origMessages.size(); i++) {\n\t    OutNetMessage omsg = (OutNetMessage)origMessages.get(i);\n\t    ReplyJob job = omsg.getOnReplyJob();\n\t    if (_log.shouldLog(Log.DEBUG))\n\t\t_log.debug(\"Original message [\" + i + \"] \" + omsg.getReplySelector() + \" : \" + omsg + \": reply job: \" + job);\n\t    \n\t    if (job != null) {\n\t\tjob.setMessage(msg.getMessage());\n\t\tJobQueue.getInstance().addJob(job);\n\t    }\n\t}\n\t\t\n\n\tif (origMessages.size() <= 0) {\n\t    // not handled as a reply\n\t    if (size == -1) { \n\t\t// was not handled via HandlerJobBuilder\n\t\tMessageHistory.getInstance().droppedOtherMessage(msg.getMessage());\n\t\tif (_log.shouldLog(Log.ERROR))\n\t\t    _log.error(\"Message \" + msg.getMessage() + \" was not handled by a HandlerJobBuilder - DROPPING: \" + msg, new Exception(\"DROPPED MESSAGE\"));\n\t\tStatManager.getInstance().updateFrequency(\"inNetPool.dropped\");\n\t\t//_log.error(\"Pending registry: \\n\" + OutboundMessageRegistry.getInstance().renderStatusHTML());\n\t    } else {\n\t\tString mtype = msg.getMessage().getClass().getName();\n\t\tMessageHistory.getInstance().receiveMessage(mtype, msg.getMessage().getUniqueId(), msg.getMessage().getMessageExpiration(), msg.getFromRouterHash(), true);\t\n\t\treturn size;\n\t    }\n\t}\n\t\n\tString mtype = msg.getMessage().getClass().getName();\n\tMessageHistory.getInstance().receiveMessage(mtype, msg.getMessage().getUniqueId(), msg.getMessage().getMessageExpiration(), msg.getFromRouterHash(), true);\t\n\treturn size;\n    }","id":68587,"modified_method":"/**\n     * Add a new message to the pool, returning the number of messages in the \n     * pool so that the comm system can throttle inbound messages.  If there is \n     * a HandlerJobBuilder for the inbound message type, the message is loaded\n     * into a job created by that builder and queued up for processing instead\n     * (though if the builder doesn't create a job, it is added to the pool)\n     *\n     */\n    public int add(InNetMessage msg) {\n        Date exp = msg.getMessage().getMessageExpiration();\n        boolean valid = MessageValidator.getInstance().validateMessage(msg.getMessage().getUniqueId(), exp.getTime());\n        if (!valid) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Duplicate message received [\" + msg.getMessage().getUniqueId() \n                          + \" expiring on \" + exp + \"]: \" + msg.getMessage().getClass().getName());\n            StatManager.getInstance().addRateData(\"inNetPool.dropped\", 1, 0);\n            StatManager.getInstance().addRateData(\"inNetPool.duplicate\", 1, 0);\n            MessageHistory.getInstance().droppedOtherMessage(msg.getMessage());\n            MessageHistory.getInstance().messageProcessingError(msg.getMessage().getUniqueId(), \n                                                                msg.getMessage().getClass().getName(), \n                                                                \"Duplicate/expired\");\n            return -1;\n        } else {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Message received [\" + msg.getMessage().getUniqueId() \n                           + \" expiring on \" + exp + \"] is NOT a duplicate or exipired\");\n        }\n\n        int size = -1;\n        int type = msg.getMessage().getType();\n        HandlerJobBuilder builder = (HandlerJobBuilder)_handlerJobBuilders.get(new Integer(type));\n\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Add message to the inNetMessage pool - builder: \" + builder \n                       + \" message class: \" + msg.getMessage().getClass().getName());\n\n        if (builder != null) {\n            Job job = builder.createJob(msg.getMessage(), msg.getFromRouter(), \n                                        msg.getFromRouterHash(), msg.getReplyBlock());\n            if (job != null) {\n                JobQueue.getInstance().addJob(job);\n                synchronized (_messages) { \n                    size = _messages.size();\n                }\n            }\n        }\n\n        List origMessages = OutboundMessageRegistry.getInstance().getOriginalMessages(msg.getMessage());\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Original messages for inbound message: \" + origMessages.size());\n        if (origMessages.size() > 1) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Orig: \" + origMessages + \" \\nthe above are replies for: \" + msg, \n                           new Exception(\"Multiple matches\"));\n        }\n\n        for (int i = 0; i < origMessages.size(); i++) {\n            OutNetMessage omsg = (OutNetMessage)origMessages.get(i);\n            ReplyJob job = omsg.getOnReplyJob();\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Original message [\" + i + \"] \" + omsg.getReplySelector() \n                           + \" : \" + omsg + \": reply job: \" + job);\n\n            if (job != null) {\n                job.setMessage(msg.getMessage());\n                JobQueue.getInstance().addJob(job);\n            }\n        }\n\n        if (origMessages.size() <= 0) {\n            // not handled as a reply\n            if (size == -1) { \n                // was not handled via HandlerJobBuilder\n                MessageHistory.getInstance().droppedOtherMessage(msg.getMessage());\n                if (_log.shouldLog(Log.ERROR))\n                    _log.error(\"Message \" + msg.getMessage() + \" was not handled by a HandlerJobBuilder - DROPPING: \" \n                               + msg, new Exception(\"DROPPED MESSAGE\"));\n                StatManager.getInstance().addRateData(\"inNetPool.dropped\", 1, 0);\n            } else {\n                String mtype = msg.getMessage().getClass().getName();\n                MessageHistory.getInstance().receiveMessage(mtype, msg.getMessage().getUniqueId(), \n                                                            msg.getMessage().getMessageExpiration(), \n                                                            msg.getFromRouterHash(), true);\t\n                return size;\n            }\n        }\n\n        String mtype = msg.getMessage().getClass().getName();\n        MessageHistory.getInstance().receiveMessage(mtype, msg.getMessage().getUniqueId(), \n                                                    msg.getMessage().getMessageExpiration(), \n                                                    msg.getFromRouterHash(), true);\t\n        return size;\n    }","commit_id":"3c762c9a02316dd167213269e0cc51cc32b374e4","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public void addFreeTunnel(TunnelInfo tunnel) {\n        if (!_isLive) return;\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"Add free inbound tunnel \" + tunnel.getTunnelId());\n        MessageHistory.getInstance().tunnelJoined(\"free inbound\", tunnel);\n        synchronized (_freeInboundTunnels) {\n            _freeInboundTunnels.put(tunnel.getTunnelId(), tunnel);\n        }\n        synchronized (_pendingTunnels) {\n            _pendingTunnels.remove(tunnel.getTunnelId());\n        }\n    }","id":68588,"modified_method":"public void addFreeTunnel(TunnelInfo tunnel) {\n        if (!_isLive) return;\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"Add free inbound tunnel \" + tunnel.getTunnelId());\n        MessageHistory.getInstance().tunnelJoined(\"free inbound\", tunnel);\n        synchronized (_freeInboundTunnels) {\n            _freeInboundTunnels.put(tunnel.getTunnelId(), tunnel);\n        }\n        synchronized (_pendingTunnels) {\n            _pendingTunnels.remove(tunnel.getTunnelId());\n        }\n        if (tunnel.getDestination() != null) {\n            // this one was custom built, so tack 'er on directly\n            allocateTunnel(tunnel.getTunnelId(), tunnel.getDestination());\n        }\n    }","commit_id":"3c762c9a02316dd167213269e0cc51cc32b374e4","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public void preprocess(ToolConfiguration configuration,\n                           HttpServletRequest request,\n                           HttpServletResponse response,\n                           ServletContext context)\n            throws IOException, ToolRenderException {\n        if (isIn168TestMode(request) || isPortletApplication(context, configuration.getContext())) {\n            portletRenderService.preprocess(configuration, request, response, context);\n        } else {\n            iframeRenderService.preprocess(configuration, request, response, context);\n        }\n    }","id":68589,"modified_method":"public void preprocess(ToolConfiguration configuration,\n                           HttpServletRequest request,\n                           HttpServletResponse response,\n                           ServletContext context)\n            throws IOException, ToolRenderException {\n    \tfor ( Iterator i = renderServices.iterator(); i.hasNext(); ) {\n    \t\tToolRenderService trs = (ToolRenderService) i.next();\n    \t\tif ( trs.accept(configuration, request, response, context) ) {\n  \t\t\t  \tLOG.warn(\"Preprocessing with \"+trs);\n    \t\t\ttrs.preprocess(configuration, request, response, context) ;\n    \t\t\treturn;\n    \t\t}\n        }\n    \tthrow new ToolRenderException(\"No available Tool Render Service for the tool \"+configuration.getToolId());\n    }","commit_id":"fc30c0e091f5fa36c75d13f85157cfd38a42de57","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ToolRenderService getPortletRenderService() {\n        return portletRenderService;\n    }","id":68590,"modified_method":"/**\n\t * @return the renderServices\n\t */\n\tpublic List getRenderServices()\n\t{\n\t\treturn renderServices;\n\t}","commit_id":"fc30c0e091f5fa36c75d13f85157cfd38a42de57","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public RenderResult render(ToolConfiguration configuration,\n                       HttpServletRequest request,\n                       HttpServletResponse response,\n                       ServletContext context)\n            throws IOException, ToolRenderException {\n\n        if (isIn168TestMode(request) || isPortletApplication(context, configuration.getContext())) {\n            return portletRenderService.render(configuration, request, response, context);\n        } else {\n            return iframeRenderService.render(configuration, request, response, context);\n        }\n    }","id":68591,"modified_method":"public RenderResult render(ToolConfiguration configuration,\n                       HttpServletRequest request,\n                       HttpServletResponse response,\n                       ServletContext context)\n            throws IOException, ToolRenderException {\n\n    \tfor ( Iterator i = renderServices.iterator(); i.hasNext(); ) {\n    \t\tToolRenderService trs = (ToolRenderService) i.next();\n    \t\tif ( trs.accept(configuration, request, response, context) ) {\n    \t\t\t  LOG.warn(\"Rendering with \"+trs);\n    \t\t\t  return trs.render(configuration, request, response, context);\n            }\t\t\n    \t}\n    \tthrow new ToolRenderException(\"No available Tool Render Service for the tool \"+configuration.getToolId());\n    }","commit_id":"fc30c0e091f5fa36c75d13f85157cfd38a42de57","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private SakaiPortletWindow createPortletWindow(Tool tool, Placement placement) {\n//        String contextPath = placement.getContext();\n//        String portletName = tool.getId();\n        String contextPath = \"/testsuite\";\n        String portletName = \"TestPortlet1\";\n        String windowId = placement.getId();\n        return new SakaiPortletWindow(windowId, contextPath, portletName);\n    }","id":68592,"modified_method":"private SakaiPortletWindow createPortletWindow(Tool tool,\n\t\t\tPlacement placement) throws ToolRenderException\n\t{\n\t\t// String contextPath = placement.getContext();\n\t\t// String portletName = tool.getId();\n\t\t// String contextPath = \"/testsuite\";\n\t\t// String portletName = \"TestPortlet1\";\n\t\tProperties placementProperties = placement.getConfig();\n\t\tString contextPath = placementProperties\n\t\t\t\t.getProperty(TOOL_PORTLET_CONTEXT_PATH);\n\t\tString portletName = placementProperties.getProperty(TOOL_PORTLET_NAME);\n\t\tif (contextPath == null || contextPath.trim().length() == 0\n\t\t\t\t|| portletName == null || portletName.trim().length() == 0)\n\t\t{\n\t\t\tthrow new ToolRenderException(\"The tool placement does not have a context of a name, \"+\n\t\t\t\t\tTOOL_PORTLET_CONTEXT_PATH+\n\t\t\t\t\t\":\"+contextPath+\"  \"+TOOL_PORTLET_NAME+\":\"+portletName,new Exception());\n\t\t}\n\t\tString windowId = placement.getId();\n\t\treturn new SakaiPortletWindow(windowId, contextPath, portletName);\n\t}","commit_id":"fc30c0e091f5fa36c75d13f85157cfd38a42de57","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void preprocess(Message message)\n    {\n        byte[] body = message.getMessageBody();\n        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);\n        try\n        {\n            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));\n            if (logger.isDebugEnabled())\n                logger.debug(\"Preprocessed {} response\", result.isDigestQuery() ? \"digest\" : \"data\");\n            replies.put(message, result);\n        }\n        catch (IOException e)\n        {\n            throw new IOError(e);\n        }\n    }","id":68593,"modified_method":"public ReadResponse preprocess(Message message)\n    {\n        byte[] body = message.getMessageBody();\n        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);\n        try\n        {\n            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));\n            replies.put(message, result);\n            return result;\n        }\n        catch (IOException e)\n        {\n            throw new IOError(e);\n        }\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n    protected boolean waitingFor(ReadResponse response)\n    {\n        // cheat and leverage our knowledge that a local read is the only way the ReadResponse\n        // version of this method gets called\n        return true;\n    }","id":68594,"modified_method":"@Override\n    protected boolean waitingFor(ReadResponse response, InetAddress from)\n    {\n        // cheat and leverage our knowledge that a local read is the only way the ReadResponse\n        // version of this method gets called\n        return localdc.equals(snitch.getDatacenter(from));\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"public void sendOneWay(Message message, InetAddress to)\n    {\n        sendOneWay(message, nextId(), to);\n    }","id":68595,"modified_method":"public void sendOneWay(Message message, InetAddress to)\n    {\n        String id = nextId();\n        logger_.debug(\"Message id to {} is {}\", to, id);\n        sendOneWay(message, id, to);\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Send a message to a given endpoint. This method specifies a callback\n     * which is invoked with the actual response.\n     * @param message message to be sent.\n     * @param to endpoint to which the message needs to be sent\n     * @param cb callback interface which is used to pass the responses or\n     *           suggest that a timeout occurred to the invoker of the send().\n     *           suggest that a timeout occurred to the invoker of the send().\n     * @return an reference to message id used to match with the result\n     */\n    public String sendRR(Message message, InetAddress to, IMessageCallback cb)\n    {        \n        String id = nextId();\n        addCallback(cb, id, to);\n        sendOneWay(message, id, to);\n        return id;\n    }","id":68596,"modified_method":"/**\n     * Send a message to a given endpoint. This method specifies a callback\n     * which is invoked with the actual response.\n     * @param message message to be sent.\n     * @param to endpoint to which the message needs to be sent\n     * @param cb callback interface which is used to pass the responses or\n     *           suggest that a timeout occurred to the invoker of the send().\n     *           suggest that a timeout occurred to the invoker of the send().\n     * @return an reference to message id used to match with the result\n     */\n    public String sendRR(Message message, InetAddress to, IMessageCallback cb)\n    {        \n        String id = nextId();\n        logger_.debug(\"Message id to {} is {}\", to, id);\n        addCallback(cb, id, to);\n        sendOneWay(message, id, to);\n        return id;\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"public void preprocess(Message message)\n    {\n        responses.add(message);\n    }","id":68597,"modified_method":"public ReadResponse preprocess(Message message)\n    {\n        responses.add(message);\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @return true if the response counts towards the blockfor threshold\n     */\n    protected boolean waitingFor(ReadResponse response)\n    {\n        return true;\n    }","id":68598,"modified_method":"/**\n     * @return true if the response counts towards the blockfor threshold\n     */\n    protected boolean waitingFor(ReadResponse response, InetAddress from)\n    {\n        return true;\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"public void response(Message message)\n    {\n        resolver.preprocess(message);\n        int n = waitingFor(message)\n              ? received.incrementAndGet()\n              : received.get();\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","id":68599,"modified_method":"public void response(Message message)\n    {\n        ReadResponse result = resolver.preprocess(message);\n        int n = waitingFor(result, message.getFrom())\n              ? received.incrementAndGet()\n              : received.get();\n        if (logger.isDebugEnabled())\n            logger.debug(\"{} response; {} qualifying responses seen.  Data is {}present\",\n                         new Object[] { result.isDigestQuery() ? \"digest\" : \"data\", n, resolver.isDataPresent() ? \"\" : \"not \" });\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"public void response(ReadResponse result)\n    {\n        ((RowDigestResolver) resolver).injectPreProcessed(result);\n        int n = waitingFor(result)\n              ? received.incrementAndGet()\n              : received.get();\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","id":68600,"modified_method":"public void response(ReadResponse result)\n    {\n        ((RowDigestResolver) resolver).injectPreProcessed(result);\n        if (logger.isDebugEnabled())\n            logger.debug(\"Preprocessed {} response\", result.isDigestQuery() ? \"digest\" : \"data\");\n        int n = waitingFor(result, FBUtilities.getLocalAddress())\n              ? received.incrementAndGet()\n              : received.get();\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","commit_id":"50b490e046bdc23b23fbb268400abcc41a0de72c","url":"https://github.com/apache/cassandra"},{"original_method":"public ReadResponse preprocess(Message message)\n    {\n        byte[] body = message.getMessageBody();\n        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);\n        try\n        {\n            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));\n            replies.put(message, result);\n            return result;\n        }\n        catch (IOException e)\n        {\n            throw new IOError(e);\n        }\n    }","id":68601,"modified_method":"public void preprocess(Message message)\n    {\n        byte[] body = message.getMessageBody();\n        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);\n        try\n        {\n            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));\n            if (logger.isDebugEnabled())\n                logger.debug(\"Preprocessed {} response\", result.isDigestQuery() ? \"digest\" : \"data\");\n            replies.put(message, result);\n        }\n        catch (IOException e)\n        {\n            throw new IOError(e);\n        }\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n    protected boolean waitingFor(ReadResponse response, InetAddress from)\n    {\n        // cheat and leverage our knowledge that a local read is the only way the ReadResponse\n        // version of this method gets called\n        return localdc.equals(snitch.getDatacenter(from));\n    }","id":68602,"modified_method":"@Override\n    protected boolean waitingFor(ReadResponse response)\n    {\n        // cheat and leverage our knowledge that a local read is the only way the ReadResponse\n        // version of this method gets called\n        return true;\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Send a message to a given endpoint. This method specifies a callback\n     * which is invoked with the actual response.\n     * @param message message to be sent.\n     * @param to endpoint to which the message needs to be sent\n     * @param cb callback interface which is used to pass the responses or\n     *           suggest that a timeout occurred to the invoker of the send().\n     *           suggest that a timeout occurred to the invoker of the send().\n     * @return an reference to message id used to match with the result\n     */\n    public String sendRR(Message message, InetAddress to, IMessageCallback cb)\n    {        \n        String id = nextId();\n        logger_.debug(\"Message id to {} is {}\", to, id);\n        addCallback(cb, id, to);\n        sendOneWay(message, id, to);\n        return id;\n    }","id":68603,"modified_method":"/**\n     * Send a message to a given endpoint. This method specifies a callback\n     * which is invoked with the actual response.\n     * @param message message to be sent.\n     * @param to endpoint to which the message needs to be sent\n     * @param cb callback interface which is used to pass the responses or\n     *           suggest that a timeout occurred to the invoker of the send().\n     *           suggest that a timeout occurred to the invoker of the send().\n     * @return an reference to message id used to match with the result\n     */\n    public String sendRR(Message message, InetAddress to, IMessageCallback cb)\n    {        \n        String id = nextId();\n        addCallback(cb, id, to);\n        sendOneWay(message, id, to);\n        return id;\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"public void sendOneWay(Message message, InetAddress to)\n    {\n        String id = nextId();\n        logger_.debug(\"Message id to {} is {}\", to, id);\n        sendOneWay(message, id, to);\n    }","id":68604,"modified_method":"public void sendOneWay(Message message, InetAddress to)\n    {\n        sendOneWay(message, nextId(), to);\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"public ReadResponse preprocess(Message message)\n    {\n        responses.add(message);\n    }","id":68605,"modified_method":"public void preprocess(Message message)\n    {\n        responses.add(message);\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"public void response(Message message)\n    {\n        ReadResponse result = resolver.preprocess(message);\n        int n = waitingFor(result, message.getFrom())\n              ? received.incrementAndGet()\n              : received.get();\n        if (logger.isDebugEnabled())\n            logger.debug(\"{} response; {} qualifying responses seen.  Data is {}present\",\n                         new Object[] { result.isDigestQuery() ? \"digest\" : \"data\", n, resolver.isDataPresent() ? \"\" : \"not \" });\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","id":68606,"modified_method":"public void response(Message message)\n    {\n        resolver.preprocess(message);\n        int n = waitingFor(message)\n              ? received.incrementAndGet()\n              : received.get();\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @return true if the response counts towards the blockfor threshold\n     */\n    protected boolean waitingFor(ReadResponse response, InetAddress from)\n    {\n        return true;\n    }","id":68607,"modified_method":"/**\n     * @return true if the response counts towards the blockfor threshold\n     */\n    protected boolean waitingFor(ReadResponse response)\n    {\n        return true;\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"public void response(ReadResponse result)\n    {\n        ((RowDigestResolver) resolver).injectPreProcessed(result);\n        if (logger.isDebugEnabled())\n            logger.debug(\"Preprocessed {} response\", result.isDigestQuery() ? \"digest\" : \"data\");\n        int n = waitingFor(result, FBUtilities.getLocalAddress())\n              ? received.incrementAndGet()\n              : received.get();\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","id":68608,"modified_method":"public void response(ReadResponse result)\n    {\n        ((RowDigestResolver) resolver).injectPreProcessed(result);\n        int n = waitingFor(result)\n              ? received.incrementAndGet()\n              : received.get();\n        if (n >= blockfor && resolver.isDataPresent())\n        {\n            condition.signal();\n            maybeResolveForRepair();\n        }\n    }","commit_id":"c2cf5c4bececf7c2c46c6dfc5ffb9f702835127a","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n  public void import_backup_of_properties() {\n    Collection<Property> newProperties = Arrays.asList(new Property(\"key1\", \"value1\"), new Property(\"key2\", \"value2\"));\n    SonarConfig config = new SonarConfig();\n    config.setProperties(newProperties);\n\n    backup.importXml(config);\n\n    verify(persistentSettings).saveProperties(argThat(new ArgumentMatcher<Map<String, String>>() {\n      @Override\n      public boolean matches(Object o) {\n        Map<String, String> map = (Map<String, String>) o;\n        return map.get(\"key1\").equals(\"value1\") && map.get(\"key2\").equals(\"value2\");\n      }\n    }));\n  }","id":68609,"modified_method":"@Test\n  public void import_backup_of_properties() {\n    SonarConfig config = new SonarConfig();\n    config.setProperties(Arrays.asList(new Property(\"key1\", \"value1\")));\n\n    backup.importXml(config);\n\n    verify(persistentSettings).saveProperties(argThat(IsMapContaining.hasEntry(\"key1\", \"value1\")));\n  }","commit_id":"af18bdc024a770f822ea39e458ec589a2e6c10e1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_import_server_id() {\n    // initial server id\n    when(persistentSettings.getString(CoreProperties.SERVER_ID)).thenReturn(\"111\");\n\n    Collection<Property> newProperties = Arrays.asList(new Property(CoreProperties.SERVER_ID, \"999\"));\n    SonarConfig config = new SonarConfig();\n    config.setProperties(newProperties);\n    backup.importXml(config);\n\n    verify(persistentSettings).saveProperties(argThat(new ArgumentMatcher<Map<String, String>>() {\n      @Override\n      public boolean matches(Object o) {\n        Map<String, String> map = (Map<String, String>) o;\n        return map.get(CoreProperties.SERVER_ID).equals(\"111\");\n      }\n    }));\n  }","id":68610,"modified_method":"@Test\n  public void do_not_import_server_id() {\n    // initial server id\n    when(persistentSettings.getString(CoreProperties.SERVER_ID)).thenReturn(\"111\");\n\n    Collection<Property> newProperties = Arrays.asList(new Property(CoreProperties.SERVER_ID, \"999\"));\n    SonarConfig config = new SonarConfig();\n    config.setProperties(newProperties);\n    backup.importXml(config);\n\n    verify(persistentSettings).saveProperties(argThat(IsMapContaining.hasEntry(CoreProperties.SERVER_ID, \"111\")));\n  }","commit_id":"af18bdc024a770f822ea39e458ec589a2e6c10e1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * This method is overridden by old versions of plugins such as LDAP 1.1. It should be overridden anymore.\n   *\n   * @return details for specified user, or null if such user doesn't exist\n   * @throws RuntimeException in case of unexpected error such as connection failure\n   * @deprecated replaced by {@link #doGetUserDetails(org.sonar.api.security.ExternalUsersProvider.Context)} since v. 3.1\n   */\n  @Deprecated\n  public UserDetails doGetUserDetails(@Nullable String username) {\n    return null;\n  }","id":68611,"modified_method":"/**\n   * This method is overridden by old versions of plugins such as LDAP 1.1. It should be overridden anymore.\n   *\n   * @param username the username\n   * @return details for specified user, or null if such user doesn't exist\n   * @throws RuntimeException in case of unexpected error such as connection failure\n   * @deprecated replaced by {@link #doGetUserDetails(org.sonar.api.security.ExternalUsersProvider.Context)} since v. 3.1\n   */\n  @Deprecated\n  public UserDetails doGetUserDetails(@Nullable String username) {\n    return null;\n  }","commit_id":"0b9545a8b74aca473cb776275be4dc93a327c363","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSaveProperties() throws ParseException {\n    Date date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").parse(\"2010-05-18 17:59\");\n    Server server = mock(Server.class);\n    when(server.getPermanentServerId()).thenReturn(\"1abcdef\");\n    when(server.getId()).thenReturn(\"123\");\n    when(server.getVersion()).thenReturn(\"3.2\");\n    when(server.getStartedAt()).thenReturn(date);\n    ServerMetadataPersister persister = new ServerMetadataPersister(server, persistentSettings);\n    persister.start();\n\n    verify(persistentSettings).saveProperties(argThat(new ArgumentMatcher<Map<String, String>>() {\n      @Override\n      public boolean matches(Object o) {\n        Map<String, String> map = (Map<String, String>) o;\n        return map.get(CoreProperties.SERVER_ID).equals(\"123\")\n          && map.get(CoreProperties.SERVER_VERSION).equals(\"3.2\")\n          && map.get(CoreProperties.SERVER_STARTTIME).equals(\"2010-05-18T17:59:00+0000\")\n          && map.size() == 3;\n      }\n    }));\n  }","id":68612,"modified_method":"@Test\n  public void testSaveProperties() throws ParseException {\n    Date date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").parse(\"2010-05-18 17:59\");\n    Server server = mock(Server.class);\n    when(server.getPermanentServerId()).thenReturn(\"1abcdef\");\n    when(server.getId()).thenReturn(\"123\");\n    when(server.getVersion()).thenReturn(\"3.2\");\n    when(server.getStartedAt()).thenReturn(date);\n    ServerMetadataPersister persister = new ServerMetadataPersister(server, persistentSettings);\n    persister.start();\n\n    verify(persistentSettings).saveProperties(ImmutableMap.of(\n        CoreProperties.SERVER_ID, \"123\",\n        CoreProperties.SERVER_VERSION, \"3.2\",\n        CoreProperties.SERVER_STARTTIME, \"2010-05-18T17:59:00+0000\"));\n  }","commit_id":"0b9545a8b74aca473cb776275be4dc93a327c363","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void transferInstruction(InstructionHandle handle, BasicBlock basicBlock, IsNullValueFrame fact)\n\t\tthrows DataflowAnalysisException {\n\n\t\tvisitor.setFrame(fact);\n\t\thandle.getInstruction().accept(visitor);\n\n\t}","id":68613,"modified_method":"public void transferInstruction(InstructionHandle handle, BasicBlock basicBlock, IsNullValueFrame fact)\n\t\tthrows DataflowAnalysisException {\n\n\t\tvisitor.setFrame(fact);\n\t\tInstruction ins = handle.getInstruction();\n\t\tins.accept(visitor);\n\n\t\t// Special case:\n\t\t// The instruction may have produced previously seen values\n\t\t// about which new is-null information is known.\n\t\t// If any other instances of the produced values exist,\n\t\t// update their is-null information.\n\t\tint numProduced = ins.produceStack(methodGen.getConstantPool());\n\t\tif (numProduced == Constants.UNPREDICTABLE)\n\t\t\tthrow new AnalysisException(\"Unpredictable stack production\", methodGen, handle);\n\n\t\tint start = fact.getNumSlots() - numProduced;\n\t\tValueNumberFrame vnaFrameAfter = vnaDataflow.getFactAfterLocation(new Location(handle, basicBlock));\n\n\t\tfor (int i = start; i < fact.getNumSlots(); ++i) {\n\t\t\tValueNumber value = vnaFrameAfter.getValue(i);\n\t\t\tIsNullValue isNullValue = fact.getValue(i);\n\n\t\t\tfor (int j = 0; j < start; ++j) {\n\t\t\t\tValueNumber otherValue = vnaFrameAfter.getValue(j);\n\t\t\t\tif (value.equals(otherValue)) {\n\t\t\t\t\t// Same value is in both slots.\n\t\t\t\t\t// Update the is-null information to match\n\t\t\t\t\t// the new information.\n\t\t\t\t\tfact.setValue(j, isNullValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}","commit_id":"3fe0f337380dce7ea9d4734012d1effc038040c9","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public Lock isResourceCreation(BasicBlock basicBlock, InstructionHandle handle, ConstantPoolGen cpg) {\n\t\t\tInstruction ins = handle.getInstruction();\n\t\t\tif (!(ins instanceof INVOKEVIRTUAL))\n\t\t\t\treturn null;\n\t\t\tINVOKEVIRTUAL inv = (INVOKEVIRTUAL) ins;\n\n\t\t\tString className = inv.getClassName(cpg);\n\t\t\tString methodName = inv.getName(cpg);\n\t\t\tString methodSig = inv.getSignature(cpg);\n\n\t\t\ttry {\n\t\t\t\tif (Repository.instanceOf(className, \"java.util.concurrent.Lock\") &&\n\t\t\t\t\tmethodName.equals(\"lock\") &&\n\t\t\t\t\tmethodSig.equals(\"()V\")) {\n\t\t\t\t\treturn new Lock(new Location(handle, basicBlock), className);\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlookupFailureCallback.reportMissingClass(e);\n\t\t\t}\n\t\t\treturn null;\n\t\t}","id":68614,"modified_method":"public Lock isResourceCreation(BasicBlock basicBlock, InstructionHandle handle, ConstantPoolGen cpg) {\n\n\t\t\tInvokeInstruction inv = toInvokeInstruction(handle.getInstruction());\n\t\t\tif (inv == null)\n\t\t\t\treturn null;\n\n\t\t\tString className = inv.getClassName(cpg);\n\t\t\tString methodName = inv.getName(cpg);\n\t\t\tString methodSig = inv.getSignature(cpg);\n\n\t\t\ttry {\n\t\t\t\tif (Repository.instanceOf(className, \"java.util.concurrent.Lock\") &&\n\t\t\t\t\tmethodName.equals(\"lock\") &&\n\t\t\t\t\tmethodSig.equals(\"()V\")) {\n\t\t\t\t\treturn new Lock(new Location(handle, basicBlock), className);\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlookupFailureCallback.reportMissingClass(e);\n\t\t\t}\n\t\t\treturn null;\n\t\t}","commit_id":"4f5ac95086af436bf0aebd9d9be72e7e968545bd","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public boolean prescreen(ClassContext classContext, Method method) {\n\t\tBitSet bytecodeSet = classContext.getBytecodeSet(method);\n\t\treturn bytecodeSet.get(Constants.NEW) && bytecodeSet.get(Constants.INVOKEVIRTUAL);\n\t}","id":68615,"modified_method":"public boolean prescreen(ClassContext classContext, Method method) {\n\t\tBitSet bytecodeSet = classContext.getBytecodeSet(method);\n\t\treturn bytecodeSet.get(Constants.NEW)\n\t\t\t&& (bytecodeSet.get(Constants.INVOKEVIRTUAL) || bytecodeSet.get(Constants.INVOKEINTERFACE));\n\t}","commit_id":"4f5ac95086af436bf0aebd9d9be72e7e968545bd","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public void transferInstruction(InstructionHandle handle, BasicBlock basicBlock) throws DataflowAnalysisException {\n\t\t\tfinal Instruction ins = handle.getInstruction();\n\t\t\tfinal ConstantPoolGen cpg = getCPG();\n\t\t\tfinal ResourceValueFrame frame = getFrame();\n\n\t\t\tint status = -1;\n\n\t\t\t// Is a lock acquired or released by this instruction?\n\t\t\tLocation creationPoint = lock.getLocation();\n\t\t\tif (handle == creationPoint.getHandle() && basicBlock == creationPoint.getBasicBlock()) {\n\t\t\t\tstatus = ResourceValueFrame.OPEN;\n\t\t\t} else if (resourceTracker.isResourceClose(basicBlock, handle, cpg, lock, frame)) {\n\t\t\t\tstatus = ResourceValueFrame.CLOSED;\n\t\t\t}\n\n\t\t\t// Model use of instance values in frame slots\n\t\t\tins.accept(this);\n\n\t\t\t// If needed, update frame status\n\t\t\tif (status != -1) {\n\t\t\t\tframe.setStatus(status);\n\t\t\t\tif (status == ResourceValueFrame.CREATED)\n\t\t\t\t\tframe.setValue(frame.getNumSlots() - 1, ResourceValue.instance());\n\t\t\t}\n\t\t}","id":68616,"modified_method":"public void transferInstruction(InstructionHandle handle, BasicBlock basicBlock) throws DataflowAnalysisException {\n\t\t\tfinal Instruction ins = handle.getInstruction();\n\t\t\tfinal ConstantPoolGen cpg = getCPG();\n\t\t\tfinal ResourceValueFrame frame = getFrame();\n\n\t\t\tint status = -1;\n\n\t\t\t// Is a lock acquired or released by this instruction?\n\t\t\tLocation creationPoint = lock.getLocation();\n\t\t\tif (handle == creationPoint.getHandle() && basicBlock == creationPoint.getBasicBlock()) {\n\t\t\t\tstatus = ResourceValueFrame.OPEN;\n\t\t\t} else if (resourceTracker.isResourceClose(basicBlock, handle, cpg, lock, frame)) {\n\t\t\t\tstatus = ResourceValueFrame.CLOSED;\n\t\t\t}\n\n\t\t\t// Model use of instance values in frame slots\n\t\t\tins.accept(this);\n\n\t\t\t// If needed, update frame status\n\t\t\tif (status != -1) {\n\t\t\t\tframe.setStatus(status);\n\t\t\t\tif (status == ResourceValueFrame.OPEN)\n\t\t\t\t\tframe.setValue(frame.getNumSlots() - 1, ResourceValue.instance());\n\t\t\t}\n\t\t}","commit_id":"4f5ac95086af436bf0aebd9d9be72e7e968545bd","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public boolean isResourceClose(BasicBlock basicBlock, InstructionHandle handle, ConstantPoolGen cpg, Lock resource,\n\t\t\tResourceValueFrame frame) throws DataflowAnalysisException {\n\t\t\tInstruction ins = handle.getInstruction();\n\t\t\tif (!(ins instanceof INVOKEVIRTUAL))\n\t\t\t\treturn false;\n\t\t\tINVOKEVIRTUAL inv = (INVOKEVIRTUAL) ins;\n\n\t\t\tString className = inv.getClassName(cpg);\n\t\t\tString methodName = inv.getName(cpg);\n\t\t\tString methodSig = inv.getSignature(cpg);\n\n\t\t\tResourceValue topValue = frame.getTopValue();\n\t\t\tif (!topValue.isInstance())\n\t\t\t\treturn false;\n\n\t\t\ttry {\n\t\t\t\tif (Repository.instanceOf(className, \"java.util.concurrent.Lock\") &&\n\t\t\t\t\tmethodName.equals(\"unlock\") &&\n\t\t\t\t\tmethodSig.equals(\"()V\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlookupFailureCallback.reportMissingClass(e);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}","id":68617,"modified_method":"public boolean isResourceClose(BasicBlock basicBlock, InstructionHandle handle, ConstantPoolGen cpg, Lock resource,\n\t\t\tResourceValueFrame frame) throws DataflowAnalysisException {\n\n\t\t\tInvokeInstruction inv = toInvokeInstruction(handle.getInstruction());\n\t\t\tif (inv == null)\n\t\t\t\treturn false;\n\n\t\t\tString className = inv.getClassName(cpg);\n\t\t\tString methodName = inv.getName(cpg);\n\t\t\tString methodSig = inv.getSignature(cpg);\n\n\t\t\tResourceValue topValue = frame.getTopValue();\n\t\t\tif (!topValue.isInstance())\n\t\t\t\treturn false;\n\n\t\t\ttry {\n\t\t\t\tif (Repository.instanceOf(className, \"java.util.concurrent.Lock\") &&\n\t\t\t\t\tmethodName.equals(\"unlock\") &&\n\t\t\t\t\tmethodSig.equals(\"()V\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlookupFailureCallback.reportMissingClass(e);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}","commit_id":"4f5ac95086af436bf0aebd9d9be72e7e968545bd","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n     * @param request the current request for which this action is executed\n     * @param newDocument the document to be created\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @return the title of the page to be created\n     */\n    private String getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)\n    {\n        String title = request.getParameter(\"title\");\n        if (StringUtils.isEmpty(title)) {\n            title =\n                isSpace ? newDocument.getDocumentReference().getSpaceReferences().get(0).getName() : newDocument\n                    .getDocumentReference().getName();\n        }\n\n        return title;\n    }","id":68618,"modified_method":"/**\n     * @param request the current request for which this action is executed\n     * @param newDocument the document to be created\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @return the title of the page to be created. If no request parameter is set, the page name is returned for a new\n     *         page and the space name is returned for a new space\n     */\n    private String getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)\n    {\n        String title = request.getParameter(\"title\");\n        if (StringUtils.isEmpty(title)) {\n            title =\n                isSpace ? newDocument.getDocumentReference().getLastSpaceReference().getName() : newDocument\n                    .getDocumentReference().getName();\n        }\n\n        return title;\n    }","commit_id":"ad619c1d673482a7a4235226f0a104089f2fa4b3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        XWikiRequest request = context.getRequest();\n        XWikiDocument doc = context.getDoc();\n        // resolver to use to resolve references received in request parameters\n        DocumentReferenceResolver<String> resolver =\n            Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n\n        // Since this template can be used for creating a Page or a Space, check the passed \"tocreate\" parameter\n        // which can be either \"page\" or \"space\". If no parameter is passed then we default to creating a Page.\n        String toCreate = request.getParameter(\"tocreate\");\n        boolean isSpace = TOCREATE_SPACE.equals(toCreate);\n\n        // get the template provider for creating this document, if any template provider is specified\n        DocumentReferenceResolver<EntityReference> referenceResolver =\n            Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, CURRENT_RESOLVER_HINT);\n        DocumentReference templateProviderClassReference = referenceResolver.resolve(TEMPLATE_PROVIDER_CLASS);\n        BaseObject templateProvider = getTemplateProvider(context, resolver, templateProviderClassReference);\n\n        // Set the space, page, title variables from the current doc if its new, from the passed parameters if any\n        String space = \"\";\n        String page = \"\";\n        if (doc.isNew()) {\n            space = doc.getDocumentReference().getSpaceReferences().get(0).getName();\n            page = doc.getDocumentReference().getName();\n        } else {\n            space = request.getParameter(SPACE);\n            page = request.getParameter(PAGE);\n        }\n\n        // get the available templates, in the current space, to check if all conditions to create a new document are\n        // met\n        List<Document> availableTemplates =\n            getAvailableTemplates(doc.getDocumentReference().getSpaceReferences().get(0).getName(), isSpace, resolver,\n                templateProviderClassReference, context);\n        // put the available templates on the context, for the .vm to not compute them again\n        ((VelocityContext) context.get(VELOCITY_CONTEXT_KEY)).put(\"createAvailableTemplates\", availableTemplates);\n\n        // get the reference to the new document\n        DocumentReference newDocRef =\n            getNewDocumentReference(context, space, page, isSpace, templateProvider, availableTemplates);\n\n        if (newDocRef != null) {\n            // Checking rights\n            SpaceReference spaceReference = newDocRef.getLastSpaceReference();\n            AuthorizationManager authManager = Utils.getComponent(AuthorizationManager.class);\n            if (!authManager.hasAccess(Right.EDIT, context.getUserReference(), spaceReference)) {\n                Object[] args = { spaceReference.toString(), context.getUser() };\n                throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                    \"The creation of a document into the space {0} has been denied to user {1}\", null, args);\n            }\n\n            XWikiDocument newDoc = context.getWiki().getDocument(newDocRef, context);\n            // if the document exists don't create it, put the exception on the context so that the template gets it and\n            // re-requests the page and space, else create the document and redirect to edit\n            if (!isEmptyDocument(newDoc)) {\n                Object[] args = { space, page };\n                XWikiException documentAlreadyExists =\n                    new XWikiException(XWikiException.MODULE_XWIKI_STORE,\n                        XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY,\n                        \"Cannot create document {0}.{1} because it already has content\", null, args);\n                ((VelocityContext) context.get(VELOCITY_CONTEXT_KEY)).put(EXCEPTION, documentAlreadyExists);\n            } else {\n                // create is finally valid, can be executed\n                doCreate(context, newDoc, isSpace, templateProvider, resolver);\n            }\n        }\n\n        return \"create\";\n    }","id":68619,"modified_method":"@Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        XWikiRequest request = context.getRequest();\n        XWikiDocument doc = context.getDoc();\n        // resolver to use to resolve references received in request parameters\n        DocumentReferenceResolver<String> resolver =\n            Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, CURRENT_MIXED_RESOLVER_HINT);\n\n        // Since this template can be used for creating a Page or a Space, check the passed \"tocreate\" parameter\n        // which can be either \"page\" or \"space\". If no parameter is passed then we default to creating a Page.\n        String toCreate = request.getParameter(\"tocreate\");\n        boolean isSpace = TOCREATE_SPACE.equals(toCreate);\n\n        // get the template provider for creating this document, if any template provider is specified\n        DocumentReferenceResolver<EntityReference> referenceResolver =\n            Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, CURRENT_RESOLVER_HINT);\n        DocumentReference templateProviderClassReference = referenceResolver.resolve(TEMPLATE_PROVIDER_CLASS);\n        BaseObject templateProvider = getTemplateProvider(context, resolver, templateProviderClassReference);\n\n        // Set the space, page, title variables from the current doc if its new, from the passed parameters if any\n        SpaceReference spaceReference = null;\n        String pageName = \"\";\n\n        if (doc.isNew()) {\n            // Current space and page name.\n            spaceReference = doc.getDocumentReference().getLastSpaceReference();\n            pageName = doc.getDocumentReference().getName();\n        } else {\n            // Given space and page name.\n            String spaceParameter = request.getParameter(SPACE);\n            if (StringUtils.isNotEmpty(spaceParameter)) {\n                // Make sure we don`t use defaults for empty space by mistake.\n                EntityReferenceResolver<String> genericResolver =\n                    Utils.getComponent(EntityReferenceResolver.TYPE_STRING, CURRENT_RESOLVER_HINT);\n\n                spaceReference = new SpaceReference(genericResolver.resolve(spaceParameter, EntityType.SPACE));\n            }\n            pageName = request.getParameter(PAGE);\n        }\n\n        // get the available templates, in the current space, to check if all conditions to create a new document are\n        // met\n        List<Document> availableTemplates =\n            getAvailableTemplates(doc.getDocumentReference().getLastSpaceReference(), isSpace, resolver,\n                templateProviderClassReference, context);\n        // put the available templates on the context, for the .vm to not compute them again\n        ((VelocityContext) context.get(VELOCITY_CONTEXT_KEY)).put(\"createAvailableTemplates\", availableTemplates);\n\n        // get the reference to the new document\n        DocumentReference newDocRef =\n            getNewDocumentReference(context, spaceReference, pageName, isSpace, templateProvider, availableTemplates);\n\n        if (newDocRef != null) {\n            // Checking rights\n            checkRights(spaceReference, context);\n\n            XWikiDocument newDoc = context.getWiki().getDocument(newDocRef, context);\n            // if the document exists don't create it, put the exception on the context so that the template gets it and\n            // re-requests the page and space, else create the document and redirect to edit\n            if (!isEmptyDocument(newDoc)) {\n                Object[] args = {spaceReference, pageName};\n                XWikiException documentAlreadyExists =\n                    new XWikiException(XWikiException.MODULE_XWIKI_STORE,\n                        XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY,\n                        \"Cannot create document {0}.{1} because it already has content\", null, args);\n                ((VelocityContext) context.get(VELOCITY_CONTEXT_KEY)).put(EXCEPTION, documentAlreadyExists);\n            } else {\n                // create is finally valid, can be executed\n                doCreate(context, newDoc, isSpace, templateProvider, resolver);\n            }\n        }\n\n        return \"create\";\n    }","commit_id":"ad619c1d673482a7a4235226f0a104089f2fa4b3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Verifies if the creation inside space {@code space} is allowed by the template provider described by\n     * {@code templateProvider}. If the creation is not allowed, an exception will be set on the context.\n     *\n     * @param space the space to create page in\n     * @param page the page to create\n     * @param templateProvider the template provider to use for the creation\n     * @param context the context of the request\n     * @return {@code true} if the creation is allowed, {@code false} otherwise\n     */\n    private boolean checkAllowedSpace(String space, String page, BaseObject templateProvider, XWikiContext context)\n    {\n        // Check that the chosen space is allowed with the given template, if not:\n        // - Cancel the redirect\n        // - set an error on the context, to be read by the create.vm\n        if (templateProvider != null) {\n            @SuppressWarnings(\"unchecked\")\n            List<String> allowedSpaces = templateProvider.getListValue(SPACES_PROPERTY);\n            // if there is no allowed spaces set, all spaces are allowed\n            if (allowedSpaces.size() > 0 && !allowedSpaces.contains(space)) {\n                // put an exception on the context, for create.vm to know to display an error\n                Object[] args = { templateProvider.getStringValue(TEMPLATE), space, page };\n                XWikiException exception =\n                    new XWikiException(XWikiException.MODULE_XWIKI_STORE,\n                        XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE,\n                        \"Template {0} cannot be used in space {1} when creating page {2}\", null, args);\n                VelocityContext vcontext = (VelocityContext) context.get(VELOCITY_CONTEXT_KEY);\n                vcontext.put(EXCEPTION, exception);\n                vcontext.put(\"createAllowedSpaces\", allowedSpaces);\n                return false;\n            }\n        }\n        // if no template is specified, creation is allowed\n        return true;\n    }","id":68620,"modified_method":"/**\n     * Verifies if the creation inside space {@code space} is allowed by the template provider described by\n     * {@code templateProvider}. If the creation is not allowed, an exception will be set on the context.\n     *\n     * @param spaceReference the reference of the space to create a page in\n     * @param page the page to create\n     * @param templateProvider the template provider to use for the creation\n     * @param context the context of the request\n     * @return {@code true} if the creation is allowed, {@code false} otherwise\n     */\n    private boolean checkAllowedSpace(SpaceReference spaceReference, String page, BaseObject templateProvider,\n        XWikiContext context)\n    {\n        // Check that the chosen space is allowed with the given template, if not:\n        // - Cancel the redirect\n        // - set an error on the context, to be read by the create.vm\n        if (templateProvider != null) {\n            @SuppressWarnings(\"unchecked\")\n            List<String> allowedSpaces = templateProvider.getListValue(SPACES_PROPERTY);\n            // if there is no allowed spaces set, all spaces are allowed\n            if (allowedSpaces.size() > 0) {\n                EntityReferenceSerializer<String> localSerializer =\n                    Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, LOCAL_SERIALIZER_HINT);\n                String localSerializedSpace = localSerializer.serialize(spaceReference);\n                if (!allowedSpaces.contains(localSerializedSpace)) {\n                    // put an exception on the context, for create.vm to know to display an error\n                    Object[] args = {templateProvider.getStringValue(TEMPLATE), spaceReference, page};\n                    XWikiException exception =\n                        new XWikiException(XWikiException.MODULE_XWIKI_STORE,\n                            XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE,\n                            \"Template {0} cannot be used in space {1} when creating page {2}\", null, args);\n                    VelocityContext vcontext = (VelocityContext) context.get(VELOCITY_CONTEXT_KEY);\n                    vcontext.put(EXCEPTION, exception);\n                    vcontext.put(\"createAllowedSpaces\", allowedSpaces);\n                    return false;\n                }\n            }\n        }\n        // if no template is specified, creation is allowed\n        return true;\n    }","commit_id":"ad619c1d673482a7a4235226f0a104089f2fa4b3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param space the space to check if there are available templates for\n     * @param isSpace {@code true} if a space should be created instead of a page\n     * @param resolver the resolver to solve template document references\n     * @param context the context of the current request\n     * @param templateClassReference the reference to the template provider class\n     * @return the available templates for the passed space, as {@link Document}s\n     */\n    private List<Document> getAvailableTemplates(String space, boolean isSpace,\n        DocumentReferenceResolver<String> resolver, DocumentReference templateClassReference, XWikiContext context)\n    {\n        XWiki wiki = context.getWiki();\n        List<Document> templates = new ArrayList<Document>();\n        try {\n            QueryManager queryManager = Utils.getComponent((Type) QueryManager.class, \"secure\");\n            Query query =\n                queryManager.createQuery(\"from doc.object(XWiki.TemplateProviderClass) as template \"\n                    + \"where doc.fullName not like 'XWiki.TemplateProviderTemplate'\", Query.XWQL);\n            List<String> templateProviderDocNames = query.execute();\n            for (String templateProviderName : templateProviderDocNames) {\n                // get the document\n                DocumentReference reference = resolver.resolve(templateProviderName);\n                XWikiDocument templateDoc = wiki.getDocument(reference, context);\n                BaseObject templateObject = templateDoc.getXObject(templateClassReference);\n                if (isSpace && SPACE.equals(templateObject.getStringValue(TYPE_PROPERTY))) {\n                    templates.add(new Document(templateDoc, context));\n                } else if (!isSpace && !SPACE.equals(templateObject.getStringValue(TYPE_PROPERTY))) {\n                    @SuppressWarnings(\"unchecked\")\n                    List<String> allowedSpaces = templateObject.getListValue(SPACES_PROPERTY);\n                    // if no space is checked or the current space is in the list of allowed spaces\n                    if (allowedSpaces.size() == 0 || allowedSpaces.contains(space)) {\n                        // create a Document and put it in the list\n                        templates.add(new Document(templateDoc, context));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.warn(\"There was an error gettting the available templates for space \" + space, e);\n        }\n\n        return templates;\n    }","id":68621,"modified_method":"/**\n     * @param spaceReference the space to check if there are available templates for\n     * @param isSpace {@code true} if a space should be created instead of a page\n     * @param resolver the resolver to solve template document references\n     * @param context the context of the current request\n     * @param templateClassReference the reference to the template provider class\n     * @return the available templates for the passed space, as {@link Document}s\n     */\n    private List<Document> getAvailableTemplates(SpaceReference spaceReference, boolean isSpace,\n        DocumentReferenceResolver<String> resolver, DocumentReference templateClassReference, XWikiContext context)\n    {\n        XWiki wiki = context.getWiki();\n        List<Document> templates = new ArrayList<Document>();\n        try {\n            EntityReferenceSerializer<String> serializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n            String spaceStringReference = serializer.serialize(spaceReference);\n\n            QueryManager queryManager = Utils.getComponent((Type) QueryManager.class, \"secure\");\n            Query query =\n                queryManager.createQuery(\"from doc.object(XWiki.TemplateProviderClass) as template \"\n                    + \"where doc.fullName not like 'XWiki.TemplateProviderTemplate'\", Query.XWQL);\n\n            // TODO: Extend the above query to include a filter on the type and allowed spaces properties so we can\n            // remove the java code below, thus improving performance by not loading all the documents, but only the\n            // documents we need.\n\n            List<String> templateProviderDocNames = query.execute();\n            for (String templateProviderName : templateProviderDocNames) {\n                // get the document\n                DocumentReference reference = resolver.resolve(templateProviderName);\n                XWikiDocument templateDoc = wiki.getDocument(reference, context);\n                BaseObject templateObject = templateDoc.getXObject(templateClassReference);\n                if (isSpace && SPACE.equals(templateObject.getStringValue(TYPE_PROPERTY))) {\n                    templates.add(new Document(templateDoc, context));\n                } else if (!isSpace && !SPACE.equals(templateObject.getStringValue(TYPE_PROPERTY))) {\n                    @SuppressWarnings(\"unchecked\")\n                    List<String> allowedSpaces = templateObject.getListValue(SPACES_PROPERTY);\n                    // if no space is checked or the current space is in the list of allowed spaces\n                    if (allowedSpaces.size() == 0 || allowedSpaces.contains(spaceStringReference)) {\n                        // create a Document and put it in the list\n                        templates.add(new Document(templateDoc, context));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.warn(\"There was an error gettting the available templates for space {0}\", spaceReference, e);\n        }\n\n        return templates;\n    }","commit_id":"ad619c1d673482a7a4235226f0a104089f2fa4b3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param request the current request for which this action is executed\n     * @param doc the current document\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @param context the XWiki context\n     * @return the serialized reference of the parent to create the document for\n     */\n    private String getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)\n    {\n        // This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n        // If a parent parameter is passed, use it to set the parent when creating the new Page or Space.\n        // If no parent parameter was passed, use the current document if we're creating a new page, use the Main\n        // space's WebHome if we're creating a new space. Also don't set current document as parent if it's a new doc\n        String parent = request.getParameter(\"parent\");\n        if (StringUtils.isEmpty(parent)) {\n            EntityReferenceSerializer<String> localSerializer =\n                Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, LOCAL_SERIALIZER_HINT);\n\n            if (isSpace) {\n                Provider<DocumentReference> defaultDocumentReferenceProvider =\n                    Utils.getComponent(DocumentReference.TYPE_PROVIDER);\n\n                DocumentReference parentRef =\n                    defaultDocumentReferenceProvider.get().setWikiReference(context.getWikiReference());\n\n                parent = localSerializer.serialize(parentRef);\n            } else if (!doc.isNew()) {\n                DocumentReference parentRef = doc.getDocumentReference();\n\n                parent = localSerializer.serialize(parentRef);\n            }\n        }\n\n        return parent;\n    }","id":68622,"modified_method":"/**\n     * @param request the current request for which this action is executed\n     * @param doc the current document\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @param context the XWiki context\n     * @return the serialized reference of the parent to create the document for\n     */\n    private String getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)\n    {\n        // This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n        // If a parent parameter is passed, use it to set the parent when creating the new Page or Space.\n        // If no parent parameter was passed:\n        // * use the current document\n        // ** if we're creating a new page and if the current document exists or\n        // * use the Main space's WebHome\n        // ** if we're creating a new space or\n        // ** if we're creating a new page and the current document does not exist.\n        String parent = request.getParameter(\"parent\");\n        if (StringUtils.isEmpty(parent)) {\n            EntityReferenceSerializer<String> localSerializer =\n                Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, LOCAL_SERIALIZER_HINT);\n\n            if (isSpace || doc.isNew()) {\n                // Use the Main space's WebHome.\n                Provider<DocumentReference> defaultDocumentReferenceProvider =\n                    Utils.getComponent(DocumentReference.TYPE_PROVIDER);\n\n                DocumentReference parentRef =\n                    defaultDocumentReferenceProvider.get().setWikiReference(context.getWikiReference());\n\n                parent = localSerializer.serialize(parentRef);\n            } else {\n                // Use the current document.\n                DocumentReference parentRef = doc.getDocumentReference();\n\n                parent = localSerializer.serialize(parentRef);\n            }\n        }\n\n        return parent;\n    }","commit_id":"ad619c1d673482a7a4235226f0a104089f2fa4b3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param context the context to execute this action\n     * @param space the space of the new document\n     * @param page the page of the new document\n     * @param isSpace whether the new document to be created is a space homepage (create space) or a regular page\n     * @param templateProvider the template provider for creating this page\n     * @param availableTemplates the templates available\n     * @return the document reference of the new document to be created, {@code null} if a no document can be created\n     *         (because the conditions are not met)\n     */\n    private DocumentReference getNewDocumentReference(XWikiContext context, String space, String page, boolean isSpace,\n        BaseObject templateProvider, List<Document> availableTemplates)\n    {\n        DocumentReference newDocRef = null;\n\n        if (isSpace && !StringUtils.isEmpty(space)) {\n            // If a space is ready to be created, redirect to the space home in edit mode\n            newDocRef = new DocumentReference(context.getWikiId(), space, \"WebHome\");\n        }\n\n        // check whether there is a template parameter set, be it an empty one. If a page should be created and there is\n        // no template parameter, it means the create action is not supposed to be executed, but only display the\n        // available templates and let the user choose\n        boolean hasTemplate =\n            context.getRequest().getParameterMap().containsKey(TEMPLATE_PROVIDER)\n                || context.getRequest().getParameterMap().containsKey(TEMPLATE);\n        // if there's no passed template check if there are any available templates. If none available, then the fact\n        // that there is no template is ok\n        if (!hasTemplate) {\n            boolean canHasTemplate = availableTemplates.size() > 0;\n            hasTemplate = !canHasTemplate;\n        }\n        if (!isSpace && !StringUtils.isEmpty(page) && !StringUtils.isEmpty(space) && hasTemplate) {\n            // check if the creation in this space is allowed, and only set the new document reference if the creation\n            // is allowed\n            if (checkAllowedSpace(space, page, templateProvider, context)) {\n                newDocRef = new DocumentReference(context.getWikiId(), space, page);\n            }\n        }\n\n        return newDocRef;\n    }","id":68623,"modified_method":"/**\n     * @param context the context to execute this action\n     * @param spaceReference the space reference of the new document\n     * @param pageName the page name of the new document\n     * @param isSpace whether the new document to be created is a space homepage (create space) or a regular page\n     * @param templateProvider the template provider for creating this page\n     * @param availableTemplates the templates available\n     * @return the document reference of the new document to be created, {@code null} if a no document can be created\n     *         (because the conditions are not met)\n     */\n    private DocumentReference getNewDocumentReference(XWikiContext context, SpaceReference spaceReference,\n        String pageName, boolean isSpace, BaseObject templateProvider, List<Document> availableTemplates)\n    {\n        if (spaceReference == null) {\n            // No space specified, nothing to do.\n            return null;\n        }\n\n        DocumentReference newDocRef = null;\n\n        if (isSpace) {\n            // If a space is ready to be created, redirect to the space home in edit mode\n            newDocRef = new DocumentReference(\"WebHome\", spaceReference);\n\n            // Nothing else to do but return the new reference.\n            return newDocRef;\n        }\n\n        // Proceed with creating a document...\n\n        // Check whether there is a template parameter set, be it an empty one. If a page should be created and there is\n        // no template parameter, it means the create action is not supposed to be executed, but only display the\n        // available templates and let the user choose\n        boolean hasTemplate =\n            context.getRequest().getParameterMap().containsKey(TEMPLATE_PROVIDER)\n                || context.getRequest().getParameterMap().containsKey(TEMPLATE);\n        // If there's no passed template, check if there are any available templates. If none available, then the fact\n        // that there is no template is ok.\n        if (!hasTemplate) {\n            boolean canHasTemplate = availableTemplates.size() > 0;\n            hasTemplate = !canHasTemplate;\n        }\n\n        if (!StringUtils.isEmpty(pageName) && hasTemplate) {\n            // check if the creation in this space is allowed, and only set the new document reference if the creation\n            // is allowed\n            if (checkAllowedSpace(spaceReference, pageName, templateProvider, context)) {\n                newDocRef = new DocumentReference(pageName, spaceReference);\n            }\n        }\n\n        return newDocRef;\n    }","commit_id":"ad619c1d673482a7a4235226f0a104089f2fa4b3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\r\n     * Parses a configuration XML content and creates a configuration object from it.<p>\r\n     * \r\n     * @param basePath the base path \r\n     * @param content the XML content\r\n     *  \r\n     * @return the created configuration object with the data from the XML content \r\n     * @throws CmsException if something goes wrong \r\n     */\r\n    public CmsADEConfigData parseConfiguration(String basePath, CmsXmlContent content) throws CmsException {\r\n\r\n        m_detailPageConfigs = Lists.newArrayList();\r\n        m_functionReferences = Lists.newArrayList();\r\n        m_modelPageConfigs = Lists.newArrayList();\r\n        m_propertyConfigs = Lists.newArrayList();\r\n        m_resourceTypeConfigs = Lists.newArrayList();\r\n\r\n        if (!content.hasLocale(DEFAULT_LOCALE)) {\r\n            return CmsADEConfigData.emptyConfiguration(basePath);\r\n        }\r\n        CmsXmlContentRootLocation root = new CmsXmlContentRootLocation(content, DEFAULT_LOCALE);\r\n        for (I_CmsXmlContentValueLocation node : root.getSubValues(\"ResourceType\")) {\r\n            parseResourceTypeConfig(basePath, node);\r\n        }\r\n        for (I_CmsXmlContentValueLocation node : root.getSubValues(\"ModelPage\")) {\r\n            try {\r\n                parseModelPage(node);\r\n            } catch (CmsException e) {\r\n                LOG.error(e.getLocalizedMessage(), e);\r\n            }\r\n        }\r\n        for (I_CmsXmlContentLocation node : root.getSubValues(\"Property\")) {\r\n            parseProperty(node);\r\n        }\r\n        for (I_CmsXmlContentLocation node : root.getSubValues(\"DetailPage\")) {\r\n            parseDetailPage(node);\r\n        }\r\n\r\n        for (I_CmsXmlContentLocation node : root.getSubValues(\"FunctionRef\")) {\r\n            parseFunctionReference(node);\r\n        }\r\n\r\n        boolean discardInheritedTypes = getBoolean(root, \"DiscardTypes\");\r\n        boolean discardInheritedProperties = getBoolean(root, \"DiscardProperties\");\r\n        boolean discardInheritedModelPages = getBoolean(root, \"DiscardModelPages\");\r\n\r\n        boolean createContentsLocally = getBoolean(root, \"CreateContentsLocally\");\r\n\r\n        CmsADEConfigData result = new CmsADEConfigData(\r\n            basePath,\r\n            m_resourceTypeConfigs,\r\n            discardInheritedTypes,\r\n            m_propertyConfigs,\r\n            discardInheritedProperties,\r\n            m_detailPageConfigs,\r\n            m_modelPageConfigs,\r\n            m_functionReferences,\r\n            discardInheritedModelPages,\r\n            createContentsLocally);\r\n        result.setResource(content.getFile());\r\n        if (OpenCms.getResourceManager().getResourceType(content.getFile().getTypeId()).getTypeName().equals(\r\n            CmsADEManager.MODULE_CONFIG_TYPE)) {\r\n            result.setIsModuleConfig(true);\r\n        }\r\n        return result;\r\n    }","id":68624,"modified_method":"/**\r\n     * Parses a configuration XML content and creates a configuration object from it.<p>\r\n     * \r\n     * @param basePath the base path \r\n     * @param content the XML content\r\n     *  \r\n     * @return the created configuration object with the data from the XML content \r\n     * @throws CmsException if something goes wrong \r\n     */\r\n    public CmsADEConfigData parseConfiguration(String basePath, CmsXmlContent content) throws CmsException {\r\n\r\n        m_detailPageConfigs = Lists.newArrayList();\r\n        m_functionReferences = Lists.newArrayList();\r\n        m_modelPageConfigs = Lists.newArrayList();\r\n        m_propertyConfigs = Lists.newArrayList();\r\n        m_resourceTypeConfigs = Lists.newArrayList();\r\n\r\n        if (!content.hasLocale(DEFAULT_LOCALE)) {\r\n            return CmsADEConfigData.emptyConfiguration(basePath);\r\n        }\r\n        CmsXmlContentRootLocation root = new CmsXmlContentRootLocation(content, DEFAULT_LOCALE);\r\n        for (I_CmsXmlContentValueLocation node : root.getSubValues(N_RESOURCE_TYPE)) {\r\n            try {\r\n                parseResourceTypeConfig(basePath, node);\r\n            } catch (CmsException e) {\r\n                LOG.warn(e.getLocalizedMessage(), e);\r\n            }\r\n        }\r\n        for (I_CmsXmlContentValueLocation node : root.getSubValues(N_MODEL_PAGE)) {\r\n            try {\r\n                parseModelPage(node);\r\n            } catch (CmsException e) {\r\n                LOG.warn(e.getLocalizedMessage(), e);\r\n            }\r\n        }\r\n        for (I_CmsXmlContentLocation node : root.getSubValues(N_PROPERTY)) {\r\n            parseProperty(node);\r\n        }\r\n        for (I_CmsXmlContentLocation node : root.getSubValues(N_DETAIL_PAGE)) {\r\n            try {\r\n                parseDetailPage(node);\r\n            } catch (CmsException e) {\r\n                LOG.warn(e.getLocalizedMessage(), e);\r\n            }\r\n        }\r\n\r\n        for (I_CmsXmlContentLocation node : root.getSubValues(N_FUNCTION_REF)) {\r\n            parseFunctionReference(node);\r\n        }\r\n\r\n        boolean discardInheritedTypes = getBoolean(root, N_DISCARD_TYPES);\r\n        boolean discardInheritedProperties = getBoolean(root, N_DISCARD_PROPERTIES);\r\n        boolean discardInheritedModelPages = getBoolean(root, N_DISCARD_MODEL_PAGES);\r\n\r\n        boolean createContentsLocally = getBoolean(root, N_CREATE_CONTENTS_LOCALLY);\r\n\r\n        CmsADEConfigData result = new CmsADEConfigData(\r\n            basePath,\r\n            m_resourceTypeConfigs,\r\n            discardInheritedTypes,\r\n            m_propertyConfigs,\r\n            discardInheritedProperties,\r\n            m_detailPageConfigs,\r\n            m_modelPageConfigs,\r\n            m_functionReferences,\r\n            discardInheritedModelPages,\r\n            createContentsLocally);\r\n        result.setResource(content.getFile());\r\n        if (OpenCms.getResourceManager().getResourceType(content.getFile().getTypeId()).getTypeName().equals(\r\n            CmsADEManager.MODULE_CONFIG_TYPE)) {\r\n            result.setIsModuleConfig(true);\r\n        }\r\n        return result;\r\n    }","commit_id":"12516e6aaa8199247350231a8218d16147989612","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Gets the resource type info beans for types for which new detail pages can be created.<p>\n     * \n     * @param cms the current CMS context\n     * @param configData the configuration data from which the resource type infos should be read\n     * @param locale the locale used for retrieving descriptions/titles  \n     * \n     * @return the resource type info beans for types for which new detail pages can be created \n     */\n    private List<CmsNewResourceInfo> getResourceTypeInfos(CmsObject cms, CmsADEConfigData configData, Locale locale) {\n\n        List<CmsNewResourceInfo> result = new ArrayList<CmsNewResourceInfo>();\n        for (CmsResourceTypeConfig typeConfig : configData.getResourceTypes()) {\n            if (typeConfig.isDetailPagesDisabled()) {\n                continue;\n            }\n            String typeName = typeConfig.getTypeName();\n            try {\n                I_CmsResourceType resourceType = OpenCms.getResourceManager().getResourceType(typeName);\n                result.add(createResourceTypeInfo(resourceType, configData.getDefaultModelPage().getResource()));\n            } catch (CmsLoaderException e) {\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n        }\n        List<CmsFunctionReference> functionRefs = configData.getFunctionReferences();\n\n        for (CmsFunctionReference functionRef : functionRefs) {\n            try {\n                CmsResource functionRes = cms.readResource(functionRef.getStructureId());\n                String description = cms.readPropertyObject(\n                    functionRes,\n                    CmsPropertyDefinition.PROPERTY_DESCRIPTION,\n                    false).getValue();\n                String subtitle = description;\n                try {\n                    CmsGallerySearchResult searchResult = CmsGallerySearch.searchById(\n                        cms,\n                        functionRef.getStructureId(),\n                        getWorkplaceLocale());\n                    subtitle = searchResult.getDescription();\n                } catch (CmsException e) {\n                    LOG.warn(e.getLocalizedMessage(), e);\n                }\n\n                CmsNewResourceInfo info = new CmsNewResourceInfo(\n                    configData.getDefaultModelPage().getResource().getTypeId(),\n                    CmsDetailPageInfo.FUNCTION_PREFIX + functionRef.getName(),\n                    functionRef.getName(),\n                    description,\n                    configData.getDefaultModelPage().getResource().getStructureId(),\n                    false,\n                    subtitle);\n                info.setAdditionalData(functionRef.getStructureId().toString());\n                info.setIsFunction(true);\n                result.add(info);\n            } catch (CmsVfsResourceNotFoundException e) {\n                LOG.warn(e.getLocalizedMessage(), e);\n            } catch (CmsException e) {\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n        }\n        return result;\n    }","id":68625,"modified_method":"/**\n     * Gets the resource type info beans for types for which new detail pages can be created.<p>\n     * \n     * @param cms the current CMS context\n     * @param resourceTypeConfigs the resource type configurations\n     * @param functionReferences the function references\n     * @param modelResource the model resource\n     * @param locale the locale used for retrieving descriptions/titles  \n     * \n     * @return the resource type info beans for types for which new detail pages can be created \n     */\n    private List<CmsNewResourceInfo> getResourceTypeInfos(\n        CmsObject cms,\n        List<CmsResourceTypeConfig> resourceTypeConfigs,\n        List<CmsFunctionReference> functionReferences,\n        CmsResource modelResource,\n        Locale locale) {\n\n        List<CmsNewResourceInfo> result = new ArrayList<CmsNewResourceInfo>();\n        for (CmsResourceTypeConfig typeConfig : resourceTypeConfigs) {\n            if (typeConfig.isDetailPagesDisabled()) {\n                continue;\n            }\n            String typeName = typeConfig.getTypeName();\n            try {\n                I_CmsResourceType resourceType = OpenCms.getResourceManager().getResourceType(typeName);\n                result.add(createResourceTypeInfo(resourceType, modelResource));\n            } catch (CmsLoaderException e) {\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n        }\n        for (CmsFunctionReference functionRef : functionReferences) {\n            try {\n                CmsResource functionRes = cms.readResource(functionRef.getStructureId());\n                String description = cms.readPropertyObject(\n                    functionRes,\n                    CmsPropertyDefinition.PROPERTY_DESCRIPTION,\n                    false).getValue();\n                String subtitle = description;\n                try {\n                    CmsGallerySearchResult searchResult = CmsGallerySearch.searchById(\n                        cms,\n                        functionRef.getStructureId(),\n                        getWorkplaceLocale());\n                    subtitle = searchResult.getDescription();\n                } catch (CmsException e) {\n                    LOG.warn(e.getLocalizedMessage(), e);\n                }\n\n                CmsNewResourceInfo info = new CmsNewResourceInfo(\n                    modelResource.getTypeId(),\n                    CmsDetailPageInfo.FUNCTION_PREFIX + functionRef.getName(),\n                    functionRef.getName(),\n                    description,\n                    modelResource.getStructureId(),\n                    false,\n                    subtitle);\n                info.setAdditionalData(functionRef.getStructureId().toString());\n                info.setIsFunction(true);\n                result.add(info);\n            } catch (CmsVfsResourceNotFoundException e) {\n                LOG.warn(e.getLocalizedMessage(), e);\n            } catch (CmsException e) {\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n        }\n        return result;\n    }","commit_id":"12516e6aaa8199247350231a8218d16147989612","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#prefetch(java.lang.String)\n     */\n    public CmsSitemapData prefetch(String sitemapUri) throws CmsRpcException {\n\n        CmsSitemapData result = null;\n        CmsObject cms = getCmsObject();\n\n        try {\n            String openPath = getRequest().getParameter(CmsCoreData.PARAM_PATH);\n            if (CmsStringUtil.isEmptyOrWhitespaceOnly(openPath)) {\n                // if no path is supplied, start from root\n                openPath = \"/\";\n            }\n            CmsADEConfigData configData = OpenCms.getADEManager().lookupConfiguration(\n                cms,\n                cms.getRequestContext().addSiteRoot(openPath));\n            Map<String, CmsXmlContentProperty> propertyConfig = new LinkedHashMap<String, CmsXmlContentProperty>(\n                configData.getPropertyConfigurationAsMap());\n            Map<String, CmsClientProperty> parentProperties = generateParentProperties(configData.getBasePath());\n            String siteRoot = cms.getRequestContext().getSiteRoot();\n            String exportRfsPrefix = OpenCms.getStaticExportManager().getDefaultRfsPrefix();\n            CmsSite site = OpenCms.getSiteManager().getSiteForSiteRoot(siteRoot);\n            boolean isSecure = site.hasSecureServer();\n            String parentSitemap = null;\n            if (configData.getBasePath() != null) {\n                CmsADEConfigData parentConfigData = OpenCms.getADEManager().lookupConfiguration(\n                    cms,\n                    CmsResource.getParentFolder(configData.getBasePath()));\n                parentSitemap = parentConfigData.getBasePath();\n                if (parentSitemap != null) {\n                    parentSitemap = cms.getRequestContext().removeSiteRoot(parentSitemap);\n                }\n            }\n            String noEdit = \"\";\n            CmsNewResourceInfo defaultNewInfo = null;\n            List<CmsNewResourceInfo> newResourceInfos = null;\n            CmsDetailPageTable detailPages = null;\n            List<CmsNewResourceInfo> resourceTypeInfos = null;\n            boolean canEditDetailPages = false;\n            boolean isOnlineProject = CmsProject.isOnlineProject(cms.getRequestContext().getCurrentProject().getUuid());\n\n            Locale locale = CmsLocaleManager.getDefaultLocale();\n            try {\n                String basePath = configData.getBasePath();\n                CmsObject rootCms = OpenCms.initCmsObject(cms);\n                rootCms.getRequestContext().setSiteRoot(\"\");\n                CmsResource baseDir = rootCms.readResource(basePath);\n                OpenCms.getLocaleManager();\n                locale = CmsLocaleManager.getMainLocale(cms, baseDir);\n            } catch (CmsException e) {\n                LOG.warn(e.getLocalizedMessage(), e);\n            }\n\n            detailPages = new CmsDetailPageTable(configData.getAllDetailPages());\n            if (!isOnlineProject) {\n                if (configData.getDefaultModelPage() != null) {\n                    resourceTypeInfos = getResourceTypeInfos(getCmsObject(), configData, locale);\n                    defaultNewInfo = createNewResourceInfo(cms, configData.getDefaultModelPage().getResource(), locale);\n\n                }\n                canEditDetailPages = !(configData.isModuleConfiguration());\n                newResourceInfos = getNewResourceInfos(cms, configData, locale);\n            }\n            if (isOnlineProject) {\n                noEdit = Messages.get().getBundle(getWorkplaceLocale()).key(Messages.GUI_SITEMAP_NO_EDIT_ONLINE_0);\n            }\n            List<String> allPropNames = getPropertyNames(cms);\n            String returnCode = getRequest().getParameter(CmsCoreData.PARAM_RETURNCODE);\n            cms.getRequestContext().getSiteRoot();\n            result = new CmsSitemapData(\n                (new CmsTemplateFinder(cms)).getTemplates(),\n                propertyConfig,\n                getClipboardData(),\n                parentProperties,\n                allPropNames,\n                exportRfsPrefix,\n                isSecure,\n                noEdit,\n                isDisplayToolbar(getRequest()),\n                defaultNewInfo,\n                newResourceInfos,\n                createResourceTypeInfo(OpenCms.getResourceManager().getResourceType(RECOURCE_TYPE_NAME_REDIRECT), null),\n                getSitemapInfo(configData.getBasePath()),\n                parentSitemap,\n                getRootEntry(configData.getBasePath(), openPath),\n                openPath,\n                30,\n                detailPages,\n                resourceTypeInfos,\n                returnCode,\n                canEditDetailPages);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","id":68626,"modified_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#prefetch(java.lang.String)\n     */\n    public CmsSitemapData prefetch(String sitemapUri) throws CmsRpcException {\n\n        CmsSitemapData result = null;\n        CmsObject cms = getCmsObject();\n\n        try {\n            String openPath = getRequest().getParameter(CmsCoreData.PARAM_PATH);\n            if (CmsStringUtil.isEmptyOrWhitespaceOnly(openPath)) {\n                // if no path is supplied, start from root\n                openPath = \"/\";\n            }\n            CmsADEConfigData configData = OpenCms.getADEManager().lookupConfiguration(\n                cms,\n                cms.getRequestContext().addSiteRoot(openPath));\n            Map<String, CmsXmlContentProperty> propertyConfig = new LinkedHashMap<String, CmsXmlContentProperty>(\n                configData.getPropertyConfigurationAsMap());\n            Map<String, CmsClientProperty> parentProperties = generateParentProperties(configData.getBasePath());\n            String siteRoot = cms.getRequestContext().getSiteRoot();\n            String exportRfsPrefix = OpenCms.getStaticExportManager().getDefaultRfsPrefix();\n            CmsSite site = OpenCms.getSiteManager().getSiteForSiteRoot(siteRoot);\n            boolean isSecure = site.hasSecureServer();\n            String parentSitemap = null;\n            if (configData.getBasePath() != null) {\n                CmsADEConfigData parentConfigData = OpenCms.getADEManager().lookupConfiguration(\n                    cms,\n                    CmsResource.getParentFolder(configData.getBasePath()));\n                parentSitemap = parentConfigData.getBasePath();\n                if (parentSitemap != null) {\n                    parentSitemap = cms.getRequestContext().removeSiteRoot(parentSitemap);\n                }\n            }\n            String noEdit = \"\";\n            CmsNewResourceInfo defaultNewInfo = null;\n            List<CmsNewResourceInfo> newResourceInfos = null;\n            CmsDetailPageTable detailPages = null;\n            List<CmsNewResourceInfo> resourceTypeInfos = null;\n            boolean canEditDetailPages = false;\n            boolean isOnlineProject = CmsProject.isOnlineProject(cms.getRequestContext().getCurrentProject().getUuid());\n\n            Locale locale = CmsLocaleManager.getDefaultLocale();\n            try {\n                String basePath = configData.getBasePath();\n                CmsObject rootCms = OpenCms.initCmsObject(cms);\n                rootCms.getRequestContext().setSiteRoot(\"\");\n                CmsResource baseDir = rootCms.readResource(basePath);\n                OpenCms.getLocaleManager();\n                locale = CmsLocaleManager.getMainLocale(cms, baseDir);\n            } catch (CmsException e) {\n                LOG.warn(e.getLocalizedMessage(), e);\n            }\n\n            detailPages = new CmsDetailPageTable(configData.getAllDetailPages());\n            if (!isOnlineProject) {\n                newResourceInfos = getNewResourceInfos(cms, configData, locale);\n                CmsResource modelResource = null;\n                if (configData.getDefaultModelPage() != null) {\n                    if (cms.existsResource(configData.getDefaultModelPage().getResource().getStructureId())) {\n                        modelResource = configData.getDefaultModelPage().getResource();\n                    } else {\n                        try {\n                            modelResource = cms.readResource(cms.getSitePath(configData.getDefaultModelPage().getResource()));\n                        } catch (CmsException e) {\n                            LOG.warn(e.getLocalizedMessage(), e);\n                        }\n                    }\n                }\n                if ((modelResource == null) && !newResourceInfos.isEmpty()) {\n                    try {\n                        modelResource = cms.readResource(newResourceInfos.get(0).getCopyResourceId());\n                    } catch (CmsException e) {\n                        LOG.warn(e.getLocalizedMessage(), e);\n                    }\n                }\n                if (modelResource != null) {\n                    resourceTypeInfos = getResourceTypeInfos(\n                        getCmsObject(),\n                        configData.getResourceTypes(),\n                        configData.getFunctionReferences(),\n                        modelResource,\n                        locale);\n                    try {\n                        defaultNewInfo = createNewResourceInfo(cms, modelResource, locale);\n                    } catch (CmsException e) {\n                        LOG.warn(e.getLocalizedMessage(), e);\n                    }\n                }\n                canEditDetailPages = !(configData.isModuleConfiguration());\n            }\n            if (isOnlineProject) {\n                noEdit = Messages.get().getBundle(getWorkplaceLocale()).key(Messages.GUI_SITEMAP_NO_EDIT_ONLINE_0);\n            }\n            List<String> allPropNames = getPropertyNames(cms);\n            String returnCode = getRequest().getParameter(CmsCoreData.PARAM_RETURNCODE);\n            cms.getRequestContext().getSiteRoot();\n            result = new CmsSitemapData(\n                (new CmsTemplateFinder(cms)).getTemplates(),\n                propertyConfig,\n                getClipboardData(),\n                parentProperties,\n                allPropNames,\n                exportRfsPrefix,\n                isSecure,\n                noEdit,\n                isDisplayToolbar(getRequest()),\n                defaultNewInfo,\n                newResourceInfos,\n                createResourceTypeInfo(OpenCms.getResourceManager().getResourceType(RECOURCE_TYPE_NAME_REDIRECT), null),\n                getSitemapInfo(configData.getBasePath()),\n                parentSitemap,\n                getRootEntry(configData.getBasePath(), openPath),\n                openPath,\n                30,\n                detailPages,\n                resourceTypeInfos,\n                returnCode,\n                canEditDetailPages);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"12516e6aaa8199247350231a8218d16147989612","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the new resource infos.<p>\n     * \n     * @param cms the current CMS context \n     * @param configData the configuration data from which the new resource infos should be read \n     * @param locale locale used for retrieving descriptions/titles\n     * \n     * @return the new resource infos\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private List<CmsNewResourceInfo> getNewResourceInfos(CmsObject cms, CmsADEConfigData configData, Locale locale)\n    throws CmsException {\n\n        List<CmsNewResourceInfo> result = new ArrayList<CmsNewResourceInfo>();\n        for (CmsModelPageConfig modelConfig : configData.getModelPages()) {\n            result.add(createNewResourceInfo(cms, modelConfig.getResource(), locale));\n        }\n        Collections.sort(result, new Comparator<CmsNewResourceInfo>() {\n\n            public int compare(CmsNewResourceInfo a, CmsNewResourceInfo b) {\n\n                return ComparisonChain.start().compare(a.getNavPos(), b.getNavPos(), Ordering.natural().nullsLast()).result();\n            }\n        });\n        return result;\n    }","id":68627,"modified_method":"/**\n     * Returns the new resource infos.<p>\n     * \n     * @param cms the current CMS context \n     * @param configData the configuration data from which the new resource infos should be read \n     * @param locale locale used for retrieving descriptions/titles\n     * \n     * @return the new resource infos\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private List<CmsNewResourceInfo> getNewResourceInfos(CmsObject cms, CmsADEConfigData configData, Locale locale) {\n\n        List<CmsNewResourceInfo> result = new ArrayList<CmsNewResourceInfo>();\n        for (CmsModelPageConfig modelConfig : configData.getModelPages()) {\n            try {\n                result.add(createNewResourceInfo(cms, modelConfig.getResource(), locale));\n            } catch (CmsException e) {\n                LOG.debug(e.getLocalizedMessage(), e);\n            }\n        }\n        Collections.sort(result, new Comparator<CmsNewResourceInfo>() {\n\n            public int compare(CmsNewResourceInfo a, CmsNewResourceInfo b) {\n\n                return ComparisonChain.start().compare(a.getNavPos(), b.getNavPos(), Ordering.natural().nullsLast()).result();\n            }\n        });\n        return result;\n    }","commit_id":"12516e6aaa8199247350231a8218d16147989612","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Creates a new resource info to a given model page resource.<p>\n     * \n     * @param cms the current CMS context \n     * @param modelResource the model page resource\n     * @param locale the locale used for retrieving descriptions/titles\n     * \n     * @return the new resource info\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private CmsNewResourceInfo createNewResourceInfo(CmsObject cms, CmsResource modelResource, Locale locale)\n    throws CmsException {\n\n        int typeId = modelResource.getTypeId();\n        String name = OpenCms.getResourceManager().getResourceType(typeId).getTypeName();\n        String title = cms.readPropertyObject(modelResource, CmsPropertyDefinition.PROPERTY_TITLE, false).getValue();\n        String description = cms.readPropertyObject(modelResource, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false).getValue();\n\n        try {\n            CmsGallerySearchResult result = CmsGallerySearch.searchById(cms, modelResource.getStructureId(), locale);\n            if (!CmsStringUtil.isEmptyOrWhitespaceOnly(result.getTitle())) {\n                title = result.getTitle();\n            }\n            if (!CmsStringUtil.isEmptyOrWhitespaceOnly(result.getDescription())) {\n                description = result.getDescription();\n            }\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n\n        boolean editable = false;\n        try {\n            CmsResource freshModelResource = cms.readResource(modelResource.getStructureId());\n            editable = cms.hasPermissions(\n                freshModelResource,\n                CmsPermissionSet.ACCESS_WRITE,\n                false,\n                CmsResourceFilter.DEFAULT);\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n        CmsNewResourceInfo info = new CmsNewResourceInfo(\n            typeId,\n            name,\n            title,\n            description,\n            modelResource.getStructureId(),\n            editable,\n            description);\n        Float navpos = null;\n        try {\n            CmsProperty navposProp = cms.readPropertyObject(modelResource, CmsPropertyDefinition.PROPERTY_NAVPOS, true);\n            String navposStr = navposProp.getValue();\n            if (navposStr != null) {\n                try {\n                    navpos = Float.valueOf(navposStr);\n                } catch (NumberFormatException e) {\n                    // noop \n                }\n            }\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n\n        info.setNavPos(navpos);\n        info.setDate(CmsDateUtil.getDate(\n            new Date(modelResource.getDateLastModified()),\n            DateFormat.LONG,\n            getWorkplaceLocale()));\n        info.setVfsPath(modelResource.getRootPath());\n        return info;\n    }","id":68628,"modified_method":"/**\n     * Creates a new resource info to a given model page resource.<p>\n     * \n     * @param cms the current CMS context \n     * @param modelResource the model page resource\n     * @param locale the locale used for retrieving descriptions/titles\n     * \n     * @return the new resource info\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private CmsNewResourceInfo createNewResourceInfo(CmsObject cms, CmsResource modelResource, Locale locale)\n    throws CmsException {\n\n        // if model page got overwritten by another resource, reread from site path\n        if (!cms.existsResource(modelResource.getStructureId())) {\n            modelResource = cms.readResource(cms.getSitePath(modelResource));\n        }\n        int typeId = modelResource.getTypeId();\n        String name = OpenCms.getResourceManager().getResourceType(typeId).getTypeName();\n        String title = cms.readPropertyObject(modelResource, CmsPropertyDefinition.PROPERTY_TITLE, false).getValue();\n        String description = cms.readPropertyObject(modelResource, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false).getValue();\n\n        try {\n            CmsGallerySearchResult result = CmsGallerySearch.searchById(cms, modelResource.getStructureId(), locale);\n            if (!CmsStringUtil.isEmptyOrWhitespaceOnly(result.getTitle())) {\n                title = result.getTitle();\n            }\n            if (!CmsStringUtil.isEmptyOrWhitespaceOnly(result.getDescription())) {\n                description = result.getDescription();\n            }\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n\n        boolean editable = false;\n        try {\n            CmsResource freshModelResource = cms.readResource(modelResource.getStructureId());\n            editable = cms.hasPermissions(\n                freshModelResource,\n                CmsPermissionSet.ACCESS_WRITE,\n                false,\n                CmsResourceFilter.DEFAULT);\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n        CmsNewResourceInfo info = new CmsNewResourceInfo(\n            typeId,\n            name,\n            title,\n            description,\n            modelResource.getStructureId(),\n            editable,\n            description);\n        Float navpos = null;\n        try {\n            CmsProperty navposProp = cms.readPropertyObject(modelResource, CmsPropertyDefinition.PROPERTY_NAVPOS, true);\n            String navposStr = navposProp.getValue();\n            if (navposStr != null) {\n                try {\n                    navpos = Float.valueOf(navposStr);\n                } catch (NumberFormatException e) {\n                    // noop \n                }\n            }\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n\n        info.setNavPos(navpos);\n        info.setDate(CmsDateUtil.getDate(\n            new Date(modelResource.getDateLastModified()),\n            DateFormat.LONG,\n            getWorkplaceLocale()));\n        info.setVfsPath(modelResource.getRootPath());\n        return info;\n    }","commit_id":"12516e6aaa8199247350231a8218d16147989612","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t\t * Add urgent messages, then non-urgent messages. Add a load message if need to.\n\t\t * @param size\n\t\t * @param minSize\n\t\t * @param maxSize\n\t\t * @param now\n\t\t * @param messages\n\t\t * @param addPeerLoadStatsRT Will be set if the caller needs to include a load stats message for\n\t\t * realtime (i.e. a realtime request completes etc).\n\t\t * @param addPeerLoadStatsBulk Will be set if the caller needs to include a load stats message for\n\t\t * bulk (i.e. a bulk request completes etc).\n\t\t * @param incomplete Will be set if there were more messages but they did not fit. If this is\n\t\t * not set, we can try another priority.\n\t\t * @return\n\t\t */\n\t\tint addPriorityMessages(int size, int minSize, int maxSize, long now, ArrayList<MessageItem> messages, MutableBoolean addPeerLoadStatsRT, MutableBoolean addPeerLoadStatsBulk, MutableBoolean incomplete) {\n\t\t\tsynchronized(PeerMessageQueue.this) {\n\t\t\t\t// Urgent messages first.\n\t\t\t\tif(logMINOR) {\n\t\t\t\t\tint nonEmpty = nonEmptyItemsWithID == null ? 0 : nonEmptyItemsWithID.size();\n\t\t\t\t\tint empty = emptyItemsWithID == null ? 0 : emptyItemsWithID.size();\n\t\t\t\t\tint byID = itemsByID == null ? 0 : itemsByID.size();\n\t\t\t\t\tif(nonEmpty + empty < byID) {\n\t\t\t\t\t\tLogger.error(this, \"Leaking itemsByID? non empty = \"+nonEmpty+\" empty = \"+empty+\" by ID = \"+byID+\" on \"+this);\n\t\t\t\t\t} else if(logDEBUG)\n\t\t\t\t\t\tLogger.debug(this, \"Items: non empty \"+nonEmpty+\" empty \"+empty+\" by ID \"+byID+\" on \"+this);\n\t\t\t\t}\n\t\t\t\tif(roundRobinBetweenUIDs)\n\t\t\t\t\tmoveToUrgent(now);\n\t\t\t\tclearOldNonUrgent(now);\n\t\t\t\tif(roundRobinBetweenUIDs) {\n\t\t\t\t\tsize = addUrgentMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk);\n\t\t\t\t} else {\n\t\t\t\t\tassert(itemsByID == null);\n\t\t\t\t}\n\t\t\t\tif(size < 0) {\n\t\t\t\t\tsize = -size;\n\t\t\t\t\tincomplete.value = true;\n\t\t\t\t\treturn size;\n\t\t\t\t} else {\n\t\t\t\t\tif(messages.size() >= 1)\n\t\t\t\t\t\treturn size;\n\t\t\t\t\t// If no more urgent messages, try to add some non-urgent messages too.\n\t\t\t\t\t\tsize = addNonUrgentMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk);\n\t\t\t\t\t\tif(size < 0) {\n\t\t\t\t\t\t\tsize = -size;\n\t\t\t\t\t\t\tincomplete.value = true;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn size;\n\t\t}","id":68629,"modified_method":"/**\n\t\t * Add urgent messages, then non-urgent messages. Add a load message if need to.\n\t\t * @param size\n\t\t * @param minSize\n\t\t * @param maxSize\n\t\t * @param now\n\t\t * @param messages\n\t\t * @param addPeerLoadStatsRT Will be set if the caller needs to include a load stats message for\n\t\t * realtime (i.e. a realtime request completes etc).\n\t\t * @param addPeerLoadStatsBulk Will be set if the caller needs to include a load stats message for\n\t\t * bulk (i.e. a bulk request completes etc).\n\t\t * @param incomplete Will be set if there were more messages but they did not fit. If this is\n\t\t * not set, we can try another priority.\n\t\t * @return\n\t\t */\n\t\tvoid addPriorityMessages(int size, int minSize, int maxSize, long now, ArrayList<MessageItem> messages, MutableBoolean addPeerLoadStatsRT, MutableBoolean addPeerLoadStatsBulk, MutableBoolean incomplete) {\n\t\t\tsynchronized(PeerMessageQueue.this) {\n\t\t\t\t// Urgent messages first.\n\t\t\t\tif(logMINOR) {\n\t\t\t\t\tint nonEmpty = nonEmptyItemsWithID == null ? 0 : nonEmptyItemsWithID.size();\n\t\t\t\t\tint empty = emptyItemsWithID == null ? 0 : emptyItemsWithID.size();\n\t\t\t\t\tint byID = itemsByID == null ? 0 : itemsByID.size();\n\t\t\t\t\tif(nonEmpty + empty < byID) {\n\t\t\t\t\t\tLogger.error(this, \"Leaking itemsByID? non empty = \"+nonEmpty+\" empty = \"+empty+\" by ID = \"+byID+\" on \"+this);\n\t\t\t\t\t} else if(logDEBUG)\n\t\t\t\t\t\tLogger.debug(this, \"Items: non empty \"+nonEmpty+\" empty \"+empty+\" by ID \"+byID+\" on \"+this);\n\t\t\t\t}\n\t\t\t\tif(roundRobinBetweenUIDs)\n\t\t\t\t\tmoveToUrgent(now);\n\t\t\t\tclearOldNonUrgent(now);\n\t\t\t\tif(roundRobinBetweenUIDs) {\n\t\t\t\t\tsize = addUrgentMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk);\n\t\t\t\t} else {\n\t\t\t\t\tassert(itemsByID == null);\n\t\t\t\t}\n\t\t\t\tif(size < 0) {\n\t\t\t\t\tsize = -size;\n\t\t\t\t\tincomplete.value = true;\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif(messages.size() >= 1)\n\t\t\t\t\t\treturn;\n\t\t\t\t\t// If no more urgent messages, try to add some non-urgent messages too.\n\t\t\t\t\t\tsize = addNonUrgentMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk);\n\t\t\t\t\t\tif(size < 0) {\n\t\t\t\t\t\t\tsize = -size;\n\t\t\t\t\t\t\tincomplete.value = true;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}","commit_id":"6e7487e58587ae592bd827535e605206d8f0fdd8","url":"https://github.com/freenet/fred"},{"original_method":"/** At each priority level, send overdue (urgent) messages, then only send non-overdue\n\t * messages if we have exhausted the supply of overdue urgent messages. In other words,\n\t * at each priority level, we send overdue messages, and if the overdue messages don't\n\t * fit, we *DON'T* send smaller non-overdue messages, because if we did it would delay\n\t * the overdue messages we haven't sent (because after we send a packet it will be a\n\t * while due to bandwidth limiting until we can send another one). HOWEVER, this only\n\t * applies within priorities! In other words, high priority messages should be sent\n\t * quickly and opportunistically even if this means that low priority messages which\n\t * are already overdue take a little longer to be sent.\n\t * @param size the current size of the messages\n\t * @param now the current time\n\t * @param minSize the starting size with no messages\n\t * @param maxSize the maximum size of messages\n\t * @param messages the list that messages will be added to\n\t * @return the size of the messages, multiplied by -1 if there were\n\t * messages that didn't fit\n\t */\n\tpublic void addMessages(long now, int minSize, int maxSize,\n\t\t\tArrayList<MessageItem> messages, int minPriority) {\n\t\t// FIXME NETWORK PERFORMANCE NEW PACKET FORMAT:\n\t\t// If at a priority we have more to send than can fit into the packet, yet there \n\t\t// are smaller messages at lower priorities, we don't add the smaller messsages.\n\t\t// The same applies for urgent vs non-urgent at the same priority in the below method.\n\t\t// The reason for this is that we don't want the smaller lower priority messages\n\t\t// using up valuable, limited bandwidth and preventing us from clearing the backlog\n\t\t// of high priority messages. Fortunately this doesn't arise in practice very much,\n\t\t// but when we merge the new packet format it will be eliminated entirely.\n\t\t\n\t\tMutableBoolean addPeerLoadStatsRT = new MutableBoolean();\n\t\tMutableBoolean addPeerLoadStatsBulk = new MutableBoolean();\n\t\t\n\t\taddPeerLoadStatsRT.value = true;\n\t\taddPeerLoadStatsBulk.value = true;\n\t\t\n\t\tMutableBoolean incomplete = new MutableBoolean();\n\n\t\tfor(int i=0;i<DMT.PRIORITY_REALTIME_DATA;i++) {\n\t\t\tif(i < minPriority) continue;\n\t\t\tif(logMINOR) Logger.minor(this, \"Adding from priority \"+i);\n\t\t\tqueuesByPriority[i].addPriorityMessages(0, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Include bulk or realtime, whichever is more urgent.\n\t\t\n\t\tboolean tryRealtimeFirst = true;\n\t\t\n\t\t// LOCKING: Must lock while calling getNextUrgentTime, and also while accessing lastSentRealTime.\n\t\t// However, we need to be (or needed to be in the FNP era anyway) flexible with addPriorityMessages,\n\t\t// and we definitely need to not be locked when calling addLoadStats().\n\t\t// FIXME: All this can go away when FNP goes away and we can just lock the whole function.\n\t\t\n\t\tsynchronized(this) {\n\t\t\t\n\t\t\t// If one is empty, try the other.\n\t\t\t// Otherwise try whichever is more urgent, favouring realtime if there is a draw.\n\t\t\t// Realtime is supposed to be bursty.\n\t\t\t\n\t\t\tif(queuesByPriority[DMT.PRIORITY_REALTIME_DATA].isEmpty()) {\n\t\t\t\ttryRealtimeFirst = false;\n\t\t\t} else if(queuesByPriority[DMT.PRIORITY_BULK_DATA].isEmpty()) {\n\t\t\t\ttryRealtimeFirst = true;\n\t\t\t} else if(queuesByPriority[DMT.PRIORITY_BULK_DATA].getNextUrgentTime(Long.MAX_VALUE, 0) >= queuesByPriority[DMT.PRIORITY_REALTIME_DATA].getNextUrgentTime(Long.MAX_VALUE, 0)) {\n\t\t\t\ttryRealtimeFirst = true;\n\t\t\t} else {\n\t\t\t\ttryRealtimeFirst = false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t// FIXME token bucket?\n\t\tif(tryRealtimeFirst) {\n\t\t\t// Try realtime first\n\t\t\tint size = 0;\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying realtime first\");\n\t\t\tint s = queuesByPriority[DMT.PRIORITY_REALTIME_DATA].addPriorityMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(s != size) {\n\t\t\t\tsize = s;\n\t\t\t}\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying bulk\");\n\t\t\ts = queuesByPriority[DMT.PRIORITY_BULK_DATA].addPriorityMessages(Math.abs(size), minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(s != size) {\n\t\t\t\tsize = s;\n\t\t\t}\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tint size = 0;\n\t\t\t// Try bulk first\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying bulk first\");\n\t\t\tint s = queuesByPriority[DMT.PRIORITY_BULK_DATA].addPriorityMessages(Math.abs(size), minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(s != size) {\n\t\t\t\tsize = s;\n\t\t\t}\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying realtime\");\n\t\t\ts = queuesByPriority[DMT.PRIORITY_REALTIME_DATA].addPriorityMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(s != size) {\n\t\t\t\tsize = s;\n\t\t\t}\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i=DMT.PRIORITY_BULK_DATA+1;i<DMT.NUM_PRIORITIES;i++) {\n\t\t\tif(i < minPriority) continue;\n\t\t\tif(logMINOR) Logger.minor(this, \"Adding from priority \"+i);\n\t\t\tqueuesByPriority[i].addPriorityMessages(0, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}","id":68630,"modified_method":"/** At each priority level, send overdue (urgent) messages, then only send non-overdue\n\t * messages if we have exhausted the supply of overdue urgent messages. In other words,\n\t * at each priority level, we send overdue messages, and if the overdue messages don't\n\t * fit, we *DON'T* send smaller non-overdue messages, because if we did it would delay\n\t * the overdue messages we haven't sent (because after we send a packet it will be a\n\t * while due to bandwidth limiting until we can send another one). HOWEVER, this only\n\t * applies within priorities! In other words, high priority messages should be sent\n\t * quickly and opportunistically even if this means that low priority messages which\n\t * are already overdue take a little longer to be sent.\n\t * @param size the current size of the messages\n\t * @param now the current time\n\t * @param minSize the starting size with no messages\n\t * @param maxSize the maximum size of messages\n\t * @param messages the list that messages will be added to\n\t * @return the size of the messages, multiplied by -1 if there were\n\t * messages that didn't fit\n\t */\n\tpublic void addMessages(long now, int minSize, int maxSize,\n\t\t\tArrayList<MessageItem> messages, int minPriority) {\n\t\t// FIXME NETWORK PERFORMANCE NEW PACKET FORMAT:\n\t\t// If at a priority we have more to send than can fit into the packet, yet there \n\t\t// are smaller messages at lower priorities, we don't add the smaller messsages.\n\t\t// The same applies for urgent vs non-urgent at the same priority in the below method.\n\t\t// The reason for this is that we don't want the smaller lower priority messages\n\t\t// using up valuable, limited bandwidth and preventing us from clearing the backlog\n\t\t// of high priority messages. Fortunately this doesn't arise in practice very much,\n\t\t// but when we merge the new packet format it will be eliminated entirely.\n\t\t\n\t\tMutableBoolean addPeerLoadStatsRT = new MutableBoolean();\n\t\tMutableBoolean addPeerLoadStatsBulk = new MutableBoolean();\n\t\t\n\t\taddPeerLoadStatsRT.value = true;\n\t\taddPeerLoadStatsBulk.value = true;\n\t\t\n\t\tMutableBoolean incomplete = new MutableBoolean();\n\n\t\tfor(int i=0;i<DMT.PRIORITY_REALTIME_DATA;i++) {\n\t\t\tif(i < minPriority) continue;\n\t\t\tif(logMINOR) Logger.minor(this, \"Adding from priority \"+i);\n\t\t\tqueuesByPriority[i].addPriorityMessages(0, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Include bulk or realtime, whichever is more urgent.\n\t\t\n\t\tboolean tryRealtimeFirst = true;\n\t\t\n\t\t// LOCKING: Must lock while calling getNextUrgentTime, and also while accessing lastSentRealTime.\n\t\t// However, we need to be (or needed to be in the FNP era anyway) flexible with addPriorityMessages,\n\t\t// and we definitely need to not be locked when calling addLoadStats().\n\t\t// FIXME: All this can go away when FNP goes away and we can just lock the whole function.\n\t\t\n\t\tsynchronized(this) {\n\t\t\t\n\t\t\t// If one is empty, try the other.\n\t\t\t// Otherwise try whichever is more urgent, favouring realtime if there is a draw.\n\t\t\t// Realtime is supposed to be bursty.\n\t\t\t\n\t\t\tif(queuesByPriority[DMT.PRIORITY_REALTIME_DATA].isEmpty()) {\n\t\t\t\ttryRealtimeFirst = false;\n\t\t\t} else if(queuesByPriority[DMT.PRIORITY_BULK_DATA].isEmpty()) {\n\t\t\t\ttryRealtimeFirst = true;\n\t\t\t} else if(queuesByPriority[DMT.PRIORITY_BULK_DATA].getNextUrgentTime(Long.MAX_VALUE, 0) >= queuesByPriority[DMT.PRIORITY_REALTIME_DATA].getNextUrgentTime(Long.MAX_VALUE, 0)) {\n\t\t\t\ttryRealtimeFirst = true;\n\t\t\t} else {\n\t\t\t\ttryRealtimeFirst = false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t// FIXME token bucket?\n\t\tif(tryRealtimeFirst) {\n\t\t\t// Try realtime first\n\t\t\tint size = 0;\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying realtime first\");\n\t\t\tqueuesByPriority[DMT.PRIORITY_REALTIME_DATA].addPriorityMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying bulk\");\n\t\t\tqueuesByPriority[DMT.PRIORITY_BULK_DATA].addPriorityMessages(Math.abs(size), minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tint size = 0;\n\t\t\t// Try bulk first\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying bulk first\");\n\t\t\tqueuesByPriority[DMT.PRIORITY_BULK_DATA].addPriorityMessages(Math.abs(size), minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"Trying realtime\");\n\t\t\t queuesByPriority[DMT.PRIORITY_REALTIME_DATA].addPriorityMessages(size, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor(int i=DMT.PRIORITY_BULK_DATA+1;i<DMT.NUM_PRIORITIES;i++) {\n\t\t\tif(i < minPriority) continue;\n\t\t\tif(logMINOR) Logger.minor(this, \"Adding from priority \"+i);\n\t\t\tqueuesByPriority[i].addPriorityMessages(0, minSize, maxSize, now, messages, addPeerLoadStatsRT, addPeerLoadStatsBulk, incomplete);\n\t\t\tif(incomplete.value || messages.size() >= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}","commit_id":"6e7487e58587ae592bd827535e605206d8f0fdd8","url":"https://github.com/freenet/fred"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n        List<Card> cards = new ArrayList<Card>();\r\n        for (Cost cost: source.getCosts()) {\r\n            if (cost instanceof ExileFromHandCost) {\r\n                cards = ((ExileFromHandCost) cost).getCards();\r\n            }\r\n        }\r\n        if (cards != null && !cards.isEmpty()) {\r\n            Card card = game.getCard(cards.get(0).getId());\r\n            boolean hasSuspend = false;\r\n            for (Ability ability :card.getAbilities()) {\r\n                if (ability instanceof SuspendAbility) {\r\n                    hasSuspend = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            UUID exileId = (UUID) game.getState().getValue(\"SuspendExileId\" + source.getControllerId().toString());\r\n            if (exileId == null) {\r\n                exileId = UUID.randomUUID();\r\n                game.getState().setValue(\"SuspendExileId\" + source.getControllerId().toString(), exileId);\r\n            }\r\n            if (card.moveToExile(exileId, new StringBuilder(\"Suspended cards of \").append(controller.getName()).toString() , source.getSourceId(), game)) {\r\n                card.addCounters(CounterType.TIME.createInstance(4), game);\r\n                if (!hasSuspend) {\r\n                    ContinuousEffect effect = new GainAbilityTargetEffect(new SuspendAbility(4, null, card), Duration.OneUse, null, true);\r\n                    effect.setTargetPointer(new FixedTarget(card.getId()));\r\n                    game.addEffect(effect, source);\r\n                }\r\n                game.informPlayers(new StringBuilder(controller.getName()).append(\" suspends (\").append(4).append(\") \").append(card.getName()).toString());\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":68631,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n        List<Card> cards = new ArrayList<Card>();\r\n        for (Cost cost: source.getCosts()) {\r\n            if (cost instanceof ExileFromHandCost) {\r\n                cards = ((ExileFromHandCost) cost).getCards();\r\n            }\r\n        }\r\n        if (cards != null && !cards.isEmpty()) {\r\n            Card card = game.getCard(cards.get(0).getId());\r\n            boolean hasSuspend = false;\r\n            for (Ability ability :card.getAbilities()) {\r\n                if (ability instanceof SuspendAbility) {\r\n                    hasSuspend = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            UUID exileId = (UUID) game.getState().getValue(\"SuspendExileId\" + source.getControllerId().toString());\r\n            if (exileId == null) {\r\n                exileId = UUID.randomUUID();\r\n                game.getState().setValue(\"SuspendExileId\" + source.getControllerId().toString(), exileId);\r\n            }\r\n            if (card.moveToExile(exileId, new StringBuilder(\"Suspended cards of \").append(controller.getName()).toString() , source.getSourceId(), game)) {\r\n                card.addCounters(CounterType.TIME.createInstance(4), game);\r\n                if (!hasSuspend) {\r\n                    // add suspend ability\r\n                    // TODO: Find a better solution for giving suspend to a card.\r\n                    // If the exiled card leaves exile by another way, the abilites won't be removed from the card\r\n                    Abilities oldAbilities = card.getAbilities().copy();\r\n                    SuspendAbility suspendAbility = new SuspendAbility(4, null, card);\r\n                    card.addAbility(suspendAbility);\r\n\r\n                    for (Ability ability :card.getAbilities()) {\r\n                        if (!oldAbilities.contains(ability)) {\r\n                            ability.setControllerId(source.getControllerId());\r\n                            game.getState().addAbility(ability, card.getId(), card);\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                game.informPlayers(new StringBuilder(controller.getName()).append(\" suspends (\").append(4).append(\") \").append(card.getName()).toString());\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"0d3244b8a1102271560e4f91887d2e41b9758f4f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Card card = game.getCard(source.getSourceId());\r\n        if (player != null && card != null) {\r\n            // remove temporary suspend ability (used e.g. for Epochrasite)\r\n            Ability abilityToRemove = null;\r\n            for (Ability ability : card.getAbilities()) {\r\n                if (ability instanceof SuspendAbility) {\r\n                    if (((SuspendAbility)ability).isGainedTemporary()) {\r\n                        abilityToRemove = ability;\r\n                    }\r\n                }\r\n            }\r\n            if (abilityToRemove != null) {\r\n                card.getAbilities().remove(abilityToRemove);\r\n            }\r\n            // cast the card for free\r\n            player.cast(card.getSpellAbility(), game, true);\r\n        }\r\n        return false;\r\n    }","id":68632,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Card card = game.getCard(source.getSourceId());\r\n        if (player != null && card != null) {\r\n            // remove temporary suspend ability (used e.g. for Epochrasite)\r\n            List<Ability> abilitiesToRemove = new ArrayList<Ability>();\r\n            for (Ability ability : card.getAbilities()) {\r\n                if (ability instanceof SuspendAbility) {\r\n                    if (((SuspendAbility)ability).isGainedTemporary()) {\r\n                        abilitiesToRemove.add(ability);\r\n                    }\r\n                }\r\n            }\r\n            if (!abilitiesToRemove.isEmpty()) {\r\n                for (Ability ability : card.getAbilities()) {\r\n                    if (ability instanceof SuspendBeginningOfUpkeepTriggeredAbility || ability instanceof SuspendPlayCardAbility ) {\r\n                        abilitiesToRemove.add(ability);\r\n                    }\r\n                }\r\n                // remove the triggered abilities from the game\r\n                game.getState().resetTriggersForSourceId(card.getId());\r\n                // remove the continious effects from the game\r\n                game.getState().getContinuousEffects().removeGainedEffectsForSource(card.getId());\r\n                // remove the abilities from the card\r\n                card.getAbilities().removeAll(abilitiesToRemove);\r\n            }\r\n            // cast the card for free\r\n            player.cast(card.getSpellAbility(), game, true);\r\n        }\r\n        return false;\r\n    }","commit_id":"0d3244b8a1102271560e4f91887d2e41b9758f4f","url":"https://github.com/magefree/mage"},{"original_method":"public SuspendAbility(int suspend, ManaCost cost, Card card, boolean shortRule) {\r\n        super(Zone.HAND, new SuspendExileEffect(suspend), cost);\r\n        this.usesStack = false;\r\n        this.shortRule = shortRule;\r\n        StringBuilder sb = new StringBuilder(\"Suspend \");\r\n        if (cost != null) {\r\n            sb.append(suspend).append(\" - \").append(cost.getText());\r\n            if (!shortRule) {\r\n                sb.append(\" <i>(Rather than cast this card from your hand, pay \")\r\n                .append(cost.getText())\r\n                .append(\" and exile it with \")\r\n                .append(suspend == 1 ? \"a time counter\":suspend + \" time counters\")\r\n                .append(\" on it.\")\r\n                .append(\" At the beginning of your upkeep, remove a time counter. When the last is removed, cast it without paying its mana cost.\")\r\n                .append(card.getCardType().contains(CardType.CREATURE)? \" If you play it this way and it's a creature, it gains haste until you lose control of it.\":\"\")\r\n                .append(\")<\/i>\");\r\n            }\r\n        } else {\r\n            gainedTemporary = true;\r\n        }\r\n        ruleText = sb.toString();\r\n        if (card.getManaCost().isEmpty()) {\r\n            setRuleAtTheTop(true);\r\n        }        \r\n        // add triggered ability to remove the counter from the card\r\n        Ability ability = new ConditionalTriggeredAbility(\r\n                new BeginningOfUpkeepTriggeredAbility(Zone.EXILED, new RemoveCounterSourceEffect(CounterType.TIME.createInstance()), TargetController.YOU, false),\r\n                SuspendedCondition.getInstance(),\r\n                \"At the beginning of your upkeep, if this card is suspended, remove a time counter from it.\");\r\n        ability.setRuleVisible(false);\r\n        card.addAbility(ability);\r\n        card.addAbility(new SuspendPlayCardAbility(card.getCardType().contains(CardType.CREATURE)));\r\n    }","id":68633,"modified_method":"public SuspendAbility(int suspend, ManaCost cost, Card card, boolean shortRule) {\r\n        super(Zone.HAND, new SuspendExileEffect(suspend), cost);\r\n        this.usesStack = false;\r\n        this.shortRule = shortRule;\r\n        StringBuilder sb = new StringBuilder(\"Suspend \");\r\n        if (cost != null) {\r\n            sb.append(suspend).append(\" - \").append(cost.getText());\r\n            if (!shortRule) {\r\n                sb.append(\" <i>(Rather than cast this card from your hand, pay \")\r\n                .append(cost.getText())\r\n                .append(\" and exile it with \")\r\n                .append(suspend == 1 ? \"a time counter\":suspend + \" time counters\")\r\n                .append(\" on it.\")\r\n                .append(\" At the beginning of your upkeep, remove a time counter. When the last is removed, cast it without paying its mana cost.\")\r\n                .append(card.getCardType().contains(CardType.CREATURE)? \" If you play it this way and it's a creature, it gains haste until you lose control of it.\":\"\")\r\n                .append(\")<\/i>\");\r\n            }\r\n        } else {\r\n            gainedTemporary = true;\r\n        }\r\n        ruleText = sb.toString();\r\n        if (card.getManaCost().isEmpty()) {\r\n            setRuleAtTheTop(true);\r\n        }        \r\n        card.addAbility(new SuspendBeginningOfUpkeepTriggeredAbility());\r\n        card.addAbility(new SuspendPlayCardAbility(card.getCardType().contains(CardType.CREATURE)));\r\n    }","commit_id":"0d3244b8a1102271560e4f91887d2e41b9758f4f","url":"https://github.com/magefree/mage"},{"original_method":"public FilterCard(FilterCard<T> filter) {\n\t\tsuper(filter);\n\t\tfor (UUID oId: filter.ownerId) {\n\t\t\tthis.ownerId.add(oId);\n\t\t}\n\t\tthis.notOwner = filter.notOwner;\n\t\tfor (String code: filter.expansionSetCode) {\n\t\t\tthis.expansionSetCode.add(code);\n\t\t}\n\t\tthis.notExpansionSetCode = filter.notExpansionSetCode;\n\t}","id":68634,"modified_method":"public FilterCard(FilterCard<T> filter) {\n\t\tsuper(filter);\n\t\tfor (UUID oId: filter.ownerId) {\n\t\t\tthis.ownerId.add(oId);\n\t\t}\n\t\tthis.notOwner = filter.notOwner;\n\t\tfor (String code: filter.expansionSetCode) {\n\t\t\tthis.expansionSetCode.add(code);\n\t\t}\n\t\tthis.notExpansionSetCode = filter.notExpansionSetCode;\n        this.owner = filter.owner;\n\t}","commit_id":"2f3108c57c7c751f3d1a3e20789d64c0b4e0c4fe","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean match(E object) {\n\n\t\tif (name.size() > 0) {\n\t\t\tif (name.contains(object.getName()) == notName)\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (useColor) {\n\t\t\tif (scopeColor == ComparisonScope.All) {\n\t\t\t\tif (object.getColor().equals(color) == notColor) {\n\t\t\t\t\treturn notFilter;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (object.getColor().contains(color) == notColor) {\n\t\t\t\tif (useColorless && colorless) { //need to treat colorless like a color in this case\n\t\t\t\t\tif (object.getColor().isColorless() != colorless) {\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn notFilter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (useColorless && object.getColor().isColorless() != colorless) {\n\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (cardType.size() > 0) {\n\t\t\tif (!compCardType.compare(cardType, object.getCardType(), scopeCardType, notCardType))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (notCardTypeList.size() > 0) {\n\t\t\tif (compCardType.compare(notCardTypeList, object.getCardType(), notScopeCardType, false))\n\t\t\t\treturn notFilter;\n\t\t}\n\t\t\n\t\tif (subtype.size() > 0) {\n\t\t\tif (!object.getAbilities().contains(ChangelingAbility.getInstance())) {\n\t\t\t\tif (!compString.compare(subtype, object.getSubtype(), scopeSubtype, notSubtype))\n\t\t\t\t\treturn notFilter;\n\t\t\t}\n\t\t}\n\n\t\tif (supertype.size() > 0) {\n\t\t\tif (!compString.compare(supertype, object.getSupertype(), scopeSupertype, notSupertype))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (abilities.size() > 0 && object.getAbilities().containsAll(abilities) == notAbilities) {\n\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (convertedManaCostComparison != null) {\n\t\t\tif (!compareInts(object.getManaCost().convertedManaCost(), convertedManaCost, convertedManaCostComparison))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (powerComparison != null) {\n\t\t\tif (!compareInts(object.getPower().getValue(), power, powerComparison))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (toughnessComparison != null) {\n\t\t\tif (!compareInts(object.getToughness().getValue(), toughness, toughnessComparison))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\treturn !notFilter;\n\t}","id":68635,"modified_method":"@Override\n\tpublic boolean match(E object) {\n\n\t\tif (name.size() > 0) {\n\t\t\tif (name.contains(object.getName()) == notName)\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (useColor) {\n\t\t\tif (scopeColor == ComparisonScope.All) {\n\t\t\t\tif (object.getColor().equals(color) == notColor) {\n\t\t\t\t\treturn notFilter;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (object.getColor().contains(color) == notColor) {\n\t\t\t\tif (useColorless && colorless) { //need to treat colorless like a color in this case\n\t\t\t\t\tif (object.getColor().isColorless() != colorless) {\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn notFilter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (useColorless && object.getColor().isColorless() != colorless) {\n\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (cardType.size() > 0) {\n\t\t\tif (!compCardType.compare(cardType, object.getCardType(), scopeCardType, notCardType))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (notCardTypeList.size() > 0) {\n\t\t\tif (compCardType.compare(notCardTypeList, object.getCardType(), notScopeCardType, false))\n\t\t\t\treturn notFilter;\n\t\t}\n\t\t\n\t\tif (subtype.size() > 0) {\n\t\t\tif (!object.getAbilities().contains(ChangelingAbility.getInstance())) {\n\t\t\t\tif (!compString.compare(subtype, object.getSubtype(), scopeSubtype, notSubtype))\n\t\t\t\t\treturn notFilter;\n\t\t\t}\n\t\t}\n\n\t\tif (supertype.size() > 0) {\n\t\t\tif (!compString.compare(supertype, object.getSupertype(), scopeSupertype, notSupertype))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (abilities.size() > 0) {\n            List<Ability> test = new ArrayList<Ability>(abilities);\n            for (Ability ability: object.getAbilities()) {\n                for (Ability abilityTest: test) {\n                    if (ability == abilityTest || ability.getClass().equals(abilityTest.getClass())) {\n                        test.remove(abilityTest);\n                        break;\n                    }\n                }\n            }\n            if (test.isEmpty() == notAbilities)\n                return notFilter;\n\t\t}\n\n\t\tif (convertedManaCostComparison != null) {\n\t\t\tif (!compareInts(object.getManaCost().convertedManaCost(), convertedManaCost, convertedManaCostComparison))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (powerComparison != null) {\n\t\t\tif (!compareInts(object.getPower().getValue(), power, powerComparison))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\tif (toughnessComparison != null) {\n\t\t\tif (!compareInts(object.getToughness().getValue(), toughness, toughnessComparison))\n\t\t\t\treturn notFilter;\n\t\t}\n\n\t\treturn !notFilter;\n\t}","commit_id":"2f3108c57c7c751f3d1a3e20789d64c0b4e0c4fe","url":"https://github.com/magefree/mage"},{"original_method":"public boolean match(Permanent permanent, UUID sourceId, UUID playerId, Game game) {\n\t\tif (!this.match(permanent))\n\t\t\treturn notFilter;\n\n\t\tif (controller != TargetController.ANY && playerId != null) {\n\t\t\tswitch(controller) {\n\t\t\t\tcase YOU:\n\t\t\t\t\tif (!permanent.getControllerId().equals(playerId))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OPPONENT:\n\t\t\t\t\tif (!game.getOpponents(playerId).contains(permanent.getControllerId()))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase NOT_YOU:\n\t\t\t\t\tif (permanent.getControllerId().equals(playerId))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (another) {\n\t\t\t// filter out itself\n\t\t\tif (permanent.getId().equals(sourceId)) {\n\t\t\t\treturn notFilter;\n\t\t\t}\n\t\t}\n\n\t\treturn !notFilter;\n\t}","id":68636,"modified_method":"public boolean match(Permanent permanent, UUID sourceId, UUID playerId, Game game) {\n\t\tif (!this.match(permanent))\n\t\t\treturn notFilter;\n\n\t\tif (controller != TargetController.ANY && playerId != null) {\n\t\t\tswitch(controller) {\n\t\t\t\tcase YOU:\n\t\t\t\t\tif (!permanent.getControllerId().equals(playerId))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OPPONENT:\n\t\t\t\t\tif (!game.getOpponents(playerId).contains(permanent.getControllerId()))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase NOT_YOU:\n\t\t\t\t\tif (permanent.getControllerId().equals(playerId))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (owner != TargetController.ANY && playerId != null) {\n\t\t\tswitch(owner) {\n\t\t\t\tcase YOU:\n\t\t\t\t\tif (!permanent.getOwnerId().equals(playerId))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OPPONENT:\n\t\t\t\t\tif (!game.getOpponents(playerId).contains(permanent.getOwnerId()))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase NOT_YOU:\n\t\t\t\t\tif (permanent.getOwnerId().equals(playerId))\n\t\t\t\t\t\treturn notFilter;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n        if (another) {\n\t\t\t// filter out itself\n\t\t\tif (permanent.getId().equals(sourceId)) {\n\t\t\t\treturn notFilter;\n\t\t\t}\n\t\t}\n\n\t\treturn !notFilter;\n\t}","commit_id":"2f3108c57c7c751f3d1a3e20789d64c0b4e0c4fe","url":"https://github.com/magefree/mage"},{"original_method":"public FilterPermanent(final FilterPermanent<T> filter) {\n\t\tsuper(filter);\n\t\tfor (UUID oId: filter.ownerId) {\n\t\t\tthis.ownerId.add(oId);\n\t\t}\n\t\tthis.notOwner = filter.notOwner;\n\t\tfor (UUID oId: filter.controllerId) {\n\t\t\tthis.controllerId.add(oId);\n\t\t}\n\t\tthis.notController = filter.notController;\n\t\tthis.useTapped = filter.useTapped;\n\t\tthis.tapped = filter.tapped;\n\t\tthis.useFlipped = filter.useFlipped;\n\t\tthis.flipped = filter.flipped;\n\t\tthis.useFaceup = filter.useFaceup;\n\t\tthis.faceup = filter.faceup;\n\t\tthis.usePhased = filter.usePhased;\n\t\tthis.phasedIn = filter.phasedIn;\n\t\tthis.controller = filter.controller;\n\t}","id":68637,"modified_method":"public FilterPermanent(final FilterPermanent<T> filter) {\n\t\tsuper(filter);\n\t\tfor (UUID oId: filter.ownerId) {\n\t\t\tthis.ownerId.add(oId);\n\t\t}\n\t\tthis.notOwner = filter.notOwner;\n\t\tfor (UUID oId: filter.controllerId) {\n\t\t\tthis.controllerId.add(oId);\n\t\t}\n\t\tthis.notController = filter.notController;\n\t\tthis.useTapped = filter.useTapped;\n\t\tthis.tapped = filter.tapped;\n\t\tthis.useFlipped = filter.useFlipped;\n\t\tthis.flipped = filter.flipped;\n\t\tthis.useFaceup = filter.useFaceup;\n\t\tthis.faceup = filter.faceup;\n\t\tthis.usePhased = filter.usePhased;\n\t\tthis.phasedIn = filter.phasedIn;\n\t\tthis.controller = filter.controller;\n        this.owner = filter.owner;\n\t}","commit_id":"2f3108c57c7c751f3d1a3e20789d64c0b4e0c4fe","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {\n\t\tSet<UUID> possibleTargets = new HashSet<UUID>();\n\t\tPlayer player = game.getPlayer(sourceControllerId);\n\t\tif (player != null) {\n\t\t\tswitch (zone) {\n\t\t\t\tcase HAND:\n\t\t\t\t\tfor (Card card: player.getHand().getCards(filter, game)) {\n\t\t\t\t\t\tpossibleTargets.add(card.getId());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase GRAVEYARD:\n\t\t\t\t\tfor (Card card: player.getGraveyard().getCards(filter, game)) {\n\t\t\t\t\t\tpossibleTargets.add(card.getId());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIBRARY:\n\t\t\t\t\tfor (Card card: player.getLibrary().getUniqueCards(game)) {\n\t\t\t\t\t\tif (filter.match(card))\n\t\t\t\t\t\t\tpossibleTargets.add(card.getId());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn possibleTargets;\n\t}","id":68638,"modified_method":"@Override\n\tpublic Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {\n\t\tSet<UUID> possibleTargets = new HashSet<UUID>();\n\t\tPlayer player = game.getPlayer(sourceControllerId);\n\t\tif (player != null) {\n\t\t\tswitch (zone) {\n\t\t\t\tcase HAND:\n\t\t\t\t\tfor (Card card: player.getHand().getCards(filter, game)) {\n\t\t\t\t\t\tpossibleTargets.add(card.getId());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase GRAVEYARD:\n\t\t\t\t\tfor (Card card: player.getGraveyard().getCards(filter, game)) {\n\t\t\t\t\t\tpossibleTargets.add(card.getId());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIBRARY:\n\t\t\t\t\tfor (Card card: player.getLibrary().getUniqueCards(game)) {\n\t\t\t\t\t\tif (filter.match(card))\n\t\t\t\t\t\t\tpossibleTargets.add(card.getId());\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n                case EXILED:\n                    for (Card card: game.getExile().getPermanentExile().getUniqueCards(game)) {\n                        if (filter.match(card, player.getId(), game))\n                            possibleTargets.add(card.getId());\n                    }\n                    break;\n\t\t\t}\n\t\t}\n\t\treturn possibleTargets;\n\t}","commit_id":"2f3108c57c7c751f3d1a3e20789d64c0b4e0c4fe","url":"https://github.com/magefree/mage"},{"original_method":"/**\n\t * Checks if there are enough {@link Card} that can be selected.\n\t *\n\t * @param sourceControllerId - controller of the select event\n\t * @param game\n\t * @return - true if enough valid {@link Card} exist\n\t */\n\t@Override\n\tpublic boolean canChoose(UUID sourceControllerId, Game game) {\n\t\tfor (UUID playerId: game.getPlayer(sourceControllerId).getInRange()) {\n\t\t\tif (filter.matchOwner(playerId)) {\n\t\t\t\tPlayer player = game.getPlayer(playerId);\n\t\t\t\tif (player != null) {\n\t\t\t\t\tswitch (zone) {\n\t\t\t\t\t\tcase HAND:\n\t\t\t\t\t\t\tif (player.getHand().count(filter, game) >= this.minNumberOfTargets)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase GRAVEYARD:\n\t\t\t\t\t\t\tif (player.getGraveyard().count(filter, game) >= this.minNumberOfTargets)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase LIBRARY:\n\t\t\t\t\t\t\tif (player.getLibrary().count(filter, game) >= this.minNumberOfTargets)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","id":68639,"modified_method":"/**\n\t * Checks if there are enough {@link Card} that can be selected.\n\t *\n\t * @param sourceControllerId - controller of the select event\n\t * @param game\n\t * @return - true if enough valid {@link Card} exist\n\t */\n\t@Override\n\tpublic boolean canChoose(UUID sourceControllerId, Game game) {\n\t\tfor (UUID playerId: game.getPlayer(sourceControllerId).getInRange()) {\n\t\t\tif (filter.matchOwner(playerId)) {\n\t\t\t\tPlayer player = game.getPlayer(playerId);\n\t\t\t\tif (player != null) {\n\t\t\t\t\tswitch (zone) {\n\t\t\t\t\t\tcase HAND:\n\t\t\t\t\t\t\tif (player.getHand().count(filter, player.getId(), game) >= this.minNumberOfTargets)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase GRAVEYARD:\n\t\t\t\t\t\t\tif (player.getGraveyard().count(filter, player.getId(), game) >= this.minNumberOfTargets)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase LIBRARY:\n\t\t\t\t\t\t\tif (player.getLibrary().count(filter, game) >= this.minNumberOfTargets)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tbreak;\n                        case EXILED:\n                            if (game.getExile().getPermanentExile().count(filter, player.getId(), game) >= this.minNumberOfTargets)\n                                return true;\n                            break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","commit_id":"2f3108c57c7c751f3d1a3e20789d64c0b4e0c4fe","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(MageObject input, Game game) {\r\n        Abilities<Ability> abilities = input.getAbilities();\r\n        for (int i = 0; i < abilities.size(); i++) {\r\n            if (abilityClass.equals(abilities.get(i).getClass())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":68640,"modified_method":"@Override\r\n    public boolean apply(MageObject input, Game game) {\r\n        Abilities<Ability> abilities;\r\n        if (input instanceof Card){\r\n            abilities = ((Card)input).getAbilities(game);\r\n        } else {\r\n            abilities = input.getAbilities();\r\n        }\r\n        \r\n        for (Ability ability : abilities) {\r\n            if (abilityClass.equals(ability.getClass())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"ab4ed4f97317401760787f9ba6f825cd932b7442","url":"https://github.com/magefree/mage"},{"original_method":"public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n        Message m = JAXRSUtils.getCurrentMessage();\n        Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n        if (obj != null) {\n            return obj;\n        }\n        if (String.class == cls) {\n            return value;\n        } else if (cls.isPrimitive()) {\n            return PrimitiveUtils.read(value, cls);\n        } else if (cls.isEnum()) {\n            if (m == null || !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n                value = value.toUpperCase();\n            }\n            return invokeValueOf(value, cls);\n        } else {\n            try {\n                Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n                return c.newInstance(new Object[]{value});\n            } catch (Throwable ex) {\n                // try valueOf\n            }\n            return invokeValueOf(value, cls);\n        }\n    }","id":68641,"modified_method":"public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n        Message m = JAXRSUtils.getCurrentMessage();\n        Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n        if (obj != null) {\n            return obj;\n        }\n        if (String.class == cls) {\n            return value;\n        } else if (cls.isPrimitive()) {\n            return PrimitiveUtils.read(value, cls);\n        } else if (cls.isEnum()) {\n            if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n                obj = invokeValueOf(value.toUpperCase(), cls);\n            }\n            if (obj == null) {\n                try {\n                    obj = invokeValueOf(value, cls);\n                } catch (RuntimeException ex) {\n                    if (m == null) {\n                        obj = invokeValueOf(value.toUpperCase(), cls);\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n            return obj;\n        } else {\n            try {\n                Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n                return c.newInstance(new Object[]{value});\n            } catch (Throwable ex) {\n                // try valueOf\n            }\n            return invokeValueOf(value, cls);\n        }\n    }","commit_id":"691073067f89097ca951b89dafad82a5677417f4","url":"https://github.com/apache/cxf"},{"original_method":"@Override\r\n  public String getProperty(final String key) {\r\n    try {\r\n      final String prop = key.toUpperCase(Locale.ENGLISH);\r\n      return ((Option) MainOptions.class.getField(prop).get(null)).value.toString();\r\n    } catch(final Exception ex) {\r\n      return null;\r\n    }\r\n  }","id":68642,"modified_method":"@Override\r\n  public String getProperty(final String key) {\r\n    try {\r\n      return Get.get(key.toUpperCase(Locale.ENGLISH), ctx);\r\n    } catch(final BaseXException ex) {\r\n      return null;\r\n    }\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  protected boolean run() throws IOException {\r\n    if(args[0] == null) {\r\n      // retrieve values of all options\r\n      if(context.user.has(Perm.ADMIN)) {\r\n        out.println(MAIN_OPTIONS + COL);\r\n        for(final Option o : goptions) out.println(o.name + COLS + goptions.get(o));\r\n      }\r\n      out.println(NL + OPTIONS + COL);\r\n      for(final Option o : options) out.println(o.name + COLS + options.get(o));\r\n    } else {\r\n      // retrieve value of specific option\r\n      final String key = args[0].toUpperCase(Locale.ENGLISH);\r\n      Options opts = options;\r\n      Option opt = opts.option(key);\r\n      if(opt == null && context.user.has(Perm.ADMIN)) {\r\n        opts = goptions;\r\n        opt = opts.option(key);\r\n      }\r\n      if(opt == null) return error(options.error(key));\r\n      out.println(opt.name + COLS + opts.get(opt));\r\n    }\r\n    return true;\r\n  }","id":68643,"modified_method":"@Override\r\n  protected boolean run() throws IOException {\r\n    if(args[0] == null) {\r\n      // retrieve values of all options\r\n      if(context.user.has(Perm.ADMIN)) {\r\n        out.println(MAIN_OPTIONS + COL);\r\n        for(final Option o : goptions) out.println(o.name + COLS + goptions.get(o));\r\n      }\r\n      out.println(NL + OPTIONS + COL);\r\n      for(final Option o : options) out.println(o.name + COLS + options.get(o));\r\n    } else {\r\n      // retrieve value of specific option\r\n      final String name = args[0].toUpperCase(Locale.ENGLISH);\r\n      try {\r\n        out.println(name + COLS + get(name, context));\r\n      } catch(final BaseXException ex) {\r\n        return error(ex.getMessage());\r\n      }\r\n    }\r\n    return true;\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor for option with string value.\n   * @param k key\n   * @param v value\n   */\n  public Option(final String k, final String v) {\n    name = k;\n    value = v;\n  }","id":68644,"modified_method":"/**\n   * Option with string value.\n   * @param n name\n   * @param v value\n   */\n  public Option(final String n, final String v) {\n    this(n, v, Type.STRING);\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor for option with boolean value.\n   * @param k key\n   * @param v value\n   */\n  public Option(final String k, final Boolean v) {\n    name = k;\n    value = v;\n  }","id":68645,"modified_method":"/**\n   * Option with boolean value.\n   * @param n name\n   * @param v value\n   */\n  public Option(final String n, final Boolean v) {\n    this(n, v, Type.BOOLEAN);\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor for option with integer array value.\n   * @param k key\n   * @param v value\n   */\n  public Option(final String k, final int[] v) {\n    name = k;\n    value = v;\n  }","id":68646,"modified_method":"/**\n   * Option with integer array value.\n   * @param n name\n   * @param v value\n   */\n  public Option(final String n, final int[] v) {\n    this(n, v, Type.NUMBERS);\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public String toString() {\n    final StringBuilder sb = new StringBuilder(name);\n    if(value != null) {\n      sb.append('=').append(\n        value instanceof String[] ? Arrays.asList((String[]) value) :\n        value instanceof int[] ? Arrays.asList((int[]) value) : value);\n    }\n    return sb.toString();\n  }","id":68647,"modified_method":"@Override\n  public String toString() {\n    final StringBuilder sb = new StringBuilder(name);\n    switch(type) {\n      case COMMENT:\n        break;\n      case STRING:\n      case BOOLEAN:\n      case NUMBER:\n        sb.append('=').append(value);\n        break;\n      case NUMBERS:\n        sb.append('=').append(Arrays.asList((int[]) value));\n        break;\n      case STRINGS:\n        sb.append('=').append(Arrays.asList((String[]) value));\n        break;\n    }\n    return sb.toString();\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor for options without value (used for commenting option files).\n   * @param k key\n   */\n  public Option(final String k) {\n    name = k;\n    value = null;\n  }","id":68648,"modified_method":"/**\n   * Commenting option.\n   * @param n name\n   */\n  public Option(final String n) {\n    this(n, null, Type.COMMENT);\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor for option with string value value.\n   * @param k key\n   * @param v value\n   */\n  public Option(final String k, final String[] v) {\n    name = k;\n    value = v;\n  }","id":68649,"modified_method":"/**\n   * Option with string value value.\n   * @param n name\n   * @param v value\n   */\n  public Option(final String n, final String[] v) {\n    this(n, v, Type.STRINGS);\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor for option with integer value.\n   * @param k key\n   * @param v value\n   */\n  public Option(final String k, final Integer v) {\n    name = k;\n    value = v;\n  }","id":68650,"modified_method":"/**\n   * Option with integer value.\n   * @param n name\n   * @param v value\n   */\n  public Option(final String n, final Integer v) {\n    this(n, v, Type.NUMBER);\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Constructor, reading options from a configuration file.\r\n   * @param suffix if {@code null}, file parsing will be skipped\r\n   */\r\n  public Options(final String suffix) {\r\n    try {\r\n      for(final Option opt : options(getClass())) {\r\n        if(opt.value != null) {\r\n          values.put(opt.name, opt.value);\r\n          options.put(opt.name, opt);\r\n        }\r\n      }\r\n    } catch(final Exception ex) {\r\n      ex.printStackTrace();\r\n      Util.notexpected(ex);\r\n    }\r\n    if(suffix != null) read(suffix);\r\n    // sets options stored in system properties\r\n    setSystem();\r\n  }","id":68651,"modified_method":"/**\r\n   * Constructor, reading options from a configuration file.\r\n   * @param suffix if {@code null}, file parsing will be skipped\r\n   */\r\n  public Options(final String suffix) {\r\n    try {\r\n      for(final Option opt : options(getClass())) {\r\n        if(opt.type != Type.COMMENT) {\r\n          values.put(opt.name, opt.value);\r\n          options.put(opt.name, opt);\r\n        }\r\n      }\r\n    } catch(final Exception ex) {\r\n      ex.printStackTrace();\r\n      Util.notexpected(ex);\r\n    }\r\n    if(suffix != null) read(suffix);\r\n    // sets options stored in system properties\r\n    setSystem();\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns the requested integer array.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized int[] numbers(final Option option) {\r\n    return (int[]) get(option, int[].class);\r\n  }","id":68652,"modified_method":"/**\r\n   * Returns the requested integer array.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized int[] numbers(final Option option) {\r\n    return (int[]) get(option, Type.NUMBERS);\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns a key similar to the specified string, or {@code null}.\r\n   * @param key key to be found\r\n   * @return similar key\r\n   */\r\n  private String similar(final String key) {\r\n    final byte[] name = token(key);\r\n    final Levenshtein ls = new Levenshtein();\r\n    for(final String opts : values.keySet()) {\r\n      if(ls.similar(name, token(opts))) return opts;\r\n    }\r\n    return null;\r\n  }","id":68653,"modified_method":"/**\r\n   * Returns an option name similar to the specified string, or {@code null}.\r\n   * @param name name to be found\r\n   * @return similar name\r\n   */\r\n  private String similar(final String name) {\r\n    final byte[] nm = token(name);\r\n    final Levenshtein ls = new Levenshtein();\r\n    for(final String opts : values.keySet()) {\r\n      if(ls.similar(nm, token(opts))) return opts;\r\n    }\r\n    return null;\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Assigns a value to an option.\r\n   * @param option option\r\n   * @param value value to be assigned\r\n   */\r\n  public final synchronized void put(final Option option, final Object value) {\r\n    if(values.put(option.name, value) == null)\r\n      Util.notexpected(\"Option \\\"\" + option.name + \"\\\" not defined.\");\r\n  }","id":68654,"modified_method":"/**\r\n   * Assigns a value to an option.\r\n   * @param option option\r\n   * @param value value to be assigned\r\n   */\r\n  public final synchronized void put(final Option option, final Object value) {\r\n    values.put(option.name, value);\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Reads the configuration file and initializes the options.\r\n   * The file is located in the project home directory.\r\n   * @param suffix optional suffix of options file\r\n   */\r\n  private synchronized void read(final String suffix) {\r\n    file = new IOFile(HOME + IO.BASEXSUFFIX + suffix);\r\n\r\n    final StringList read = new StringList();\r\n    final TokenBuilder err = new TokenBuilder();\r\n    boolean local = false;\r\n    if(!file.exists()) {\r\n      err.addExt(\"Saving options in \\\"%\\\"...\" + NL, file);\r\n    } else {\r\n      BufferedReader br = null;\r\n      try {\r\n        br = new BufferedReader(new FileReader(file.file()));\r\n        for(String line; (line = br.readLine()) != null;) {\r\n          line = line.trim();\r\n\r\n          // start of local options\r\n          if(line.equals(PROPUSER)) {\r\n            local = true;\r\n            continue;\r\n          }\r\n          if(local) user.append(line).append(NL);\r\n\r\n          if(line.isEmpty() || line.charAt(0) == '#') continue;\r\n          final int d = line.indexOf('=');\r\n          if(d < 0) {\r\n            err.addExt(\"%: \\\"%\\\" ignored. \" + NL, file, line);\r\n            continue;\r\n          }\r\n\r\n          final String val = line.substring(d + 1).trim();\r\n          String key = line.substring(0, d).trim();\r\n\r\n          // extract numeric value in key\r\n          int num = 0;\r\n          final int ss = key.length();\r\n          for(int s = 0; s < ss; ++s) {\r\n            if(Character.isDigit(key.charAt(s))) {\r\n              num = Integer.parseInt(key.substring(s));\r\n              key = key.substring(0, s);\r\n              break;\r\n            }\r\n          }\r\n          // cache local options as system properties\r\n          if(local) {\r\n            setSystem(key, val);\r\n            continue;\r\n          }\r\n\r\n          final Object entry = values.get(key);\r\n          if(entry == null) {\r\n            err.addExt(\"%: \\\"%\\\" not found. \" + NL, file, key);\r\n          } else if(entry instanceof String) {\r\n            values.put(key, val);\r\n          } else if(entry instanceof Integer) {\r\n            values.put(key, Integer.parseInt(val));\r\n          } else if(entry instanceof Boolean) {\r\n            values.put(key, Boolean.parseBoolean(val));\r\n          } else if(entry instanceof String[]) {\r\n            if(num == 0) {\r\n              values.put(key, new String[Integer.parseInt(val)]);\r\n            } else {\r\n              ((String[]) entry)[num - 1] = val;\r\n            }\r\n          } else if(entry instanceof int[]) {\r\n            ((int[]) entry)[num] = Integer.parseInt(val);\r\n          }\r\n          // add key for final check\r\n          read.add(key);\r\n        }\r\n      } catch(final Exception ex) {\r\n        err.addExt(\"% could not be parsed.\" + NL, file);\r\n        Util.debug(ex);\r\n      } finally {\r\n        if(br != null) try { br.close(); } catch(final IOException ignored) { }\r\n      }\r\n    }\r\n\r\n    // check if all mandatory files have been read\r\n    try {\r\n      if(err.isEmpty()) {\r\n        boolean ok = true;\r\n        for(final Option opt : options(getClass())) {\r\n          if(ok && opt.value != null) ok = read.contains(opt.name);\r\n        }\r\n        if(!ok) err.addExt(\"Saving options in \\\"%\\\"...\" + NL, file);\r\n      }\r\n    } catch(final IllegalAccessException ex) {\r\n      Util.notexpected(ex);\r\n    }\r\n\r\n    if(!err.isEmpty()) {\r\n      Util.err(err.toString());\r\n      write();\r\n    }\r\n  }","id":68655,"modified_method":"/**\r\n   * Reads the configuration file and initializes the options.\r\n   * The file is located in the project home directory.\r\n   * @param suffix optional suffix of options file\r\n   */\r\n  private synchronized void read(final String suffix) {\r\n    file = new IOFile(HOME + IO.BASEXSUFFIX + suffix);\r\n\r\n    final StringList read = new StringList();\r\n    final TokenBuilder err = new TokenBuilder();\r\n    boolean local = false;\r\n    if(!file.exists()) {\r\n      err.addExt(\"Saving options in \\\"%\\\"...\" + NL, file);\r\n    } else {\r\n      BufferedReader br = null;\r\n      try {\r\n        br = new BufferedReader(new FileReader(file.file()));\r\n        for(String line; (line = br.readLine()) != null;) {\r\n          line = line.trim();\r\n\r\n          // start of local options\r\n          if(line.equals(PROPUSER)) {\r\n            local = true;\r\n            continue;\r\n          }\r\n          if(local) user.append(line).append(NL);\r\n\r\n          if(line.isEmpty() || line.charAt(0) == '#') continue;\r\n          final int d = line.indexOf('=');\r\n          if(d < 0) {\r\n            err.addExt(\"%: \\\"%\\\" ignored. \" + NL, file, line);\r\n            continue;\r\n          }\r\n\r\n          final String val = line.substring(d + 1).trim();\r\n          String name = line.substring(0, d).trim();\r\n\r\n          // extract numeric value in key\r\n          int num = 0;\r\n          final int ss = name.length();\r\n          for(int s = 0; s < ss; ++s) {\r\n            if(Character.isDigit(name.charAt(s))) {\r\n              num = Integer.parseInt(name.substring(s));\r\n              name = name.substring(0, s);\r\n              break;\r\n            }\r\n          }\r\n          // cache local options as system properties\r\n          if(local) {\r\n            setSystem(name, val);\r\n            continue;\r\n          }\r\n\r\n          final Option opt = options.get(name);\r\n          if(opt == null) {\r\n            err.addExt(\"%: \\\"%\\\" not found. \" + NL, file, name);\r\n          } else {\r\n            switch(opt.type) {\r\n              case BOOLEAN:\r\n                values.put(name, Boolean.parseBoolean(val));\r\n                break;\r\n              case COMMENT:\r\n                break;\r\n              case NUMBER:\r\n                values.put(name, Integer.parseInt(val));\r\n                break;\r\n              case NUMBERS:\r\n                ((int[]) get(opt))[num] = Integer.parseInt(val);\r\n                break;\r\n              case STRING:\r\n                put(opt, val);\r\n                break;\r\n              case STRINGS:\r\n                if(num == 0) {\r\n                  values.put(name, new String[Integer.parseInt(val)]);\r\n                } else {\r\n                  ((String[]) get(opt))[num - 1] = val;\r\n                }\r\n                break;\r\n            }\r\n          }\r\n          // add key for final check\r\n          read.add(name);\r\n        }\r\n      } catch(final Exception ex) {\r\n        err.addExt(\"% could not be parsed.\" + NL, file);\r\n        Util.debug(ex);\r\n      } finally {\r\n        if(br != null) try { br.close(); } catch(final IOException ignored) { }\r\n      }\r\n    }\r\n\r\n    // check if all mandatory files have been read\r\n    try {\r\n      if(err.isEmpty()) {\r\n        boolean ok = true;\r\n        for(final Option opt : options(getClass())) {\r\n          if(ok && opt.type != Type.COMMENT) ok = read.contains(opt.name);\r\n        }\r\n        if(!ok) err.addExt(\"Saving options in \\\"%\\\"...\" + NL, file);\r\n      }\r\n    } catch(final IllegalAccessException ex) {\r\n      Util.notexpected(ex);\r\n    }\r\n\r\n    if(!err.isEmpty()) {\r\n      Util.err(err.toString());\r\n      write();\r\n    }\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Assigns a value after casting it to the correct type.\r\n   * @param option option\r\n   * @param value value\r\n   * @throws IllegalArgumentException invalid argument\r\n   */\r\n  public final synchronized void set(final Option option, final String value) {\r\n    final Object type = option.value;\r\n    if(type instanceof Boolean) {\r\n      // toggle boolean if no value was specified\r\n      final boolean empty = value == null || value.isEmpty();\r\n      put(option, empty ? !((Boolean) get(option)) : Util.yes(value));\r\n    } else if(type instanceof Integer) {\r\n      put(option, Integer.parseInt(value));\r\n    } else if(type instanceof String) {\r\n      put(option, value);\r\n    } else if(type instanceof String[]) {\r\n      // add value to array\r\n      String[] ss = (String[]) get(option);\r\n      if(ss == null) ss = new String[0];\r\n      final StringList sl = new StringList(ss.length + 1);\r\n      for(final String s : ss) sl.add(s);\r\n      sl.add(value);\r\n      put(option, sl.toArray());\r\n    } else if(type instanceof int[]) {\r\n      // add value to array\r\n      int[] ii = (int[]) get(option);\r\n      if(ii == null) ii = new int[0];\r\n      final IntList il = new IntList(ii.length + 1);\r\n      for(final int i : ii) il.add(i);\r\n      il.add(Integer.parseInt(value));\r\n      put(option, il.toArray());\r\n    } else {\r\n      Util.notexpected(\"Unknown option type: \" + Util.className(type));\r\n    }\r\n  }","id":68656,"modified_method":"/**\r\n   * Assigns a value after casting it to the correct type.\r\n   * @param option option\r\n   * @param value value\r\n   * @throws IllegalArgumentException invalid argument\r\n   */\r\n  public final synchronized void set(final Option option, final String value) {\r\n    switch(option.type) {\r\n      case COMMENT:\r\n        break;\r\n      case BOOLEAN:\r\n        // toggle boolean if no value was specified\r\n        final boolean empty = value == null || value.isEmpty();\r\n        put(option, empty ? !((Boolean) get(option)) : Util.yes(value));\r\n        break;\r\n      case NUMBER:\r\n        put(option, Integer.parseInt(value));\r\n        break;\r\n      case STRING:\r\n        put(option, value);\r\n        break;\r\n      case NUMBERS:\r\n        int[] ii = (int[]) get(option);\r\n        if(ii == null) ii = new int[0];\r\n        final IntList il = new IntList(ii.length + 1);\r\n        for(final int i : ii) il.add(i);\r\n        il.add(Integer.parseInt(value));\r\n        put(option, il.toArray());\r\n        break;\r\n      case STRINGS:\r\n        String[] ss = (String[]) get(option);\r\n        if(ss == null) ss = new String[0];\r\n        final StringList sl = new StringList(ss.length + 1);\r\n        for(final String s : ss) sl.add(s);\r\n        sl.add(value);\r\n        put(option, sl.toArray());\r\n    }\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns the requested number.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized int number(final Option option) {\r\n    return (Integer) get(option, Integer.class);\r\n  }","id":68657,"modified_method":"/**\r\n   * Returns the requested number.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized int number(final Option option) {\r\n    return (Integer) get(option, Type.NUMBER);\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns the requested string array.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized String[] strings(final Option option) {\r\n    return (String[]) get(option, String[].class);\r\n  }","id":68658,"modified_method":"/**\r\n   * Returns the requested string array.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized String[] strings(final Option option) {\r\n    return (String[]) get(option, Type.STRINGS);\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns the requested boolean.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized boolean bool(final Option option) {\r\n    return (Boolean) get(option, Boolean.class);\r\n  }","id":68659,"modified_method":"/**\r\n   * Returns the requested boolean.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized boolean bool(final Option option) {\r\n    return (Boolean) get(option, Type.BOOLEAN);\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns the requested string.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized String string(final Option option) {\r\n    return (String) get(option, String.class);\r\n  }","id":68660,"modified_method":"/**\r\n   * Returns the requested string.\r\n   * @param option option to be found\r\n   * @return value\r\n   */\r\n  public final synchronized String string(final Option option) {\r\n    return (String) get(option, Type.STRING);\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Writes the options to disk.\r\n   */\r\n  public final synchronized void write() {\r\n    BufferedWriter bw = null;\r\n    try {\r\n      bw = new BufferedWriter(new FileWriter(file.file()));\r\n      for(final Option opt : options(getClass())) {\r\n        if(opt.value == null) {\r\n          bw.write(NL + \"# \" + opt.name + NL);\r\n          continue;\r\n        }\r\n\r\n        final Object val = values.get(opt.name);\r\n        if(val instanceof String[]) {\r\n          final String[] str = (String[]) val;\r\n          bw.write(opt.name + \" = \" + str.length + NL);\r\n          final int is = str.length;\r\n          for(int i = 0; i < is; ++i) {\r\n            if(str[i] != null) bw.write(opt.name + (i + 1) + \" = \" + str[i] + NL);\r\n          }\r\n        } else if(val instanceof int[]) {\r\n          final int[] num = (int[]) val;\r\n          final int ns = num.length;\r\n          for(int i = 0; i < ns; ++i) {\r\n            bw.write(opt.name + i + \" = \" + num[i] + NL);\r\n          }\r\n        } else {\r\n          bw.write(opt.name + \" = \" + val + NL);\r\n        }\r\n      }\r\n      bw.write(NL + PROPUSER + NL);\r\n      bw.write(user.toString());\r\n    } catch(final Exception ex) {\r\n      Util.errln(\"% could not be written.\", file);\r\n      Util.debug(ex);\r\n    } finally {\r\n      if(bw != null) try { bw.close(); } catch(final IOException ignored) { }\r\n    }\r\n  }","id":68661,"modified_method":"/**\r\n   * Writes the options to disk.\r\n   */\r\n  public final synchronized void write() {\r\n    BufferedWriter bw = null;\r\n    try {\r\n      bw = new BufferedWriter(new FileWriter(file.file()));\r\n      for(final Option opt : options(getClass())) {\r\n        final Object value = get(opt);\r\n        switch(opt.type) {\r\n          case COMMENT:\r\n            bw.write(NL + \"# \" + opt.name + NL);\r\n            break;\r\n          case BOOLEAN:\r\n          case NUMBER:\r\n          case STRING:\r\n            bw.write(opt.name + \" = \" + (value == null ? \"\" : value) + NL);\r\n            break;\r\n          case NUMBERS:\r\n            final int[] ints = (int[]) value;\r\n            final int is = ints == null ? 0 : ints.length;\r\n            for(int i = 0; i < is; ++i) bw.write(opt.name + i + \" = \" + ints[i] + NL);\r\n            break;\r\n          case STRINGS:\r\n            final String[] strings = (String[]) value;\r\n            final int ss = strings == null ? 0 : strings.length;\r\n            bw.write(opt.name + \" = \" + ss + NL);\r\n            for(int i = 0; i < ss; ++i) bw.write(opt.name + (i + 1) + \" = \" + strings[i] + NL);\r\n            break;\r\n        }\r\n      }\r\n      bw.write(NL + PROPUSER + NL);\r\n      bw.write(user.toString());\r\n    } catch(final Exception ex) {\r\n      Util.errln(\"% could not be written.\", file);\r\n      Util.debug(ex);\r\n    } finally {\r\n      if(bw != null) try { bw.close(); } catch(final IOException ignored) { }\r\n    }\r\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Adds the specified options.\n   * @param opt option class\n   * @throws Exception exception\n   */\n  private static void addOptions(final Class<? extends Options> opt) throws Exception {\n    for(final Option o : Options.options(opt)) {\n      if(o.value == null) continue;\n      Collections.addAll(FUNC, o.name.toLowerCase(Locale.ENGLISH).split(\"-\"));\n    }\n  }","id":68662,"modified_method":"/**\n   * Adds the specified options.\n   * @param opt option class\n   * @throws Exception exception\n   */\n  private static void addOptions(final Class<? extends Options> opt) throws Exception {\n    for(final Option o : Options.options(opt)) {\n      if(o.type != Type.COMMENT)\n        Collections.addAll(FUNC, o.name.toLowerCase(Locale.ENGLISH).split(\"-\"));\n    }\n  }","commit_id":"fc073b7e6210401660f6dcfe733a015cc1ead77c","url":"https://github.com/BaseXdb/basex"},{"original_method":"public static <T> Object convertStringToPrimitive(String value, Class<?> cls) {\n        if (String.class == cls) {\n            return value;\n        }\n        if (cls.isPrimitive()) {\n            return PrimitiveUtils.read(value, cls);\n        } else if (cls.isEnum()) {\n            try {\n                Method m  = cls.getMethod(\"valueOf\", new Class[]{String.class});\n                return m.invoke(null, value.toUpperCase());\n            } catch (Exception ex) {\n                throw new RuntimeException(ex);\n            }\n        } else {\n            try {\n                Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n                return c.newInstance(new Object[]{value});\n            } catch (Throwable ex) {\n                // try valueOf\n            }\n            try {\n                Method m = cls.getMethod(\"valueOf\", new Class[]{String.class});\n                return cls.cast(m.invoke(null, value));\n            } catch (Exception ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    }","id":68663,"modified_method":"public static Object convertStringToPrimitive(String value, Class<?> cls) {\n        if (String.class == cls) {\n            return value;\n        } else if (cls.isPrimitive()) {\n            return PrimitiveUtils.read(value, cls);\n        } else if (cls.isEnum()) {\n            Message m = PhaseInterceptorChain.getCurrentMessage();\n            if (m == null || !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n                value = value.toUpperCase();\n            }\n            return invokeValueOf(value, cls);\n        } else {\n            try {\n                Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n                return c.newInstance(new Object[]{value});\n            } catch (Throwable ex) {\n                // try valueOf\n            }\n            return invokeValueOf(value, cls);\n        }\n    }","commit_id":"3791ce7b41abc72353d572536d5c9b3c6d60c616","url":"https://github.com/apache/cxf"},{"original_method":"protected String getName(String name) {\n\t\treturn name + \" - \" + version;\n\t}","id":68664,"modified_method":"protected String getName(String name) {\n\t\tif (!appendVersion) {\n\t\t\treturn name;\n\t\t}\n\n\t\treturn name + \" - \" + version;\n\t}","commit_id":"f6412932b03b41046d0f58d03d2e39aacda31d49","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected String getKey(String name) {\n\t\tname = StringUtil.replace(name, StringPool.SPACE, StringPool.DASH);\n\n\t\treturn StringUtil.toUpperCase(name) + StringPool.DASH + version;\n\t}","id":68665,"modified_method":"protected String getKey(String name) {\n\t\tname = StringUtil.replace(name, StringPool.SPACE, StringPool.DASH);\n\n\t\tname = StringUtil.toUpperCase(name);\n\n\t\tif (appendVersion) {\n\t\t\tname = name + StringPool.DASH + version;\n\t\t}\n\n\t\treturn name;\n\t}","commit_id":"f6412932b03b41046d0f58d03d2e39aacda31d49","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void initialize(Message message) throws Exception {\n\t\tString servletContextName = message.getString(\"servletContextName\");\n\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tservletContextName);\n\n\t\tProperties pluginPackageProperties = getPluginPackageProperties(\n\t\t\tservletContext);\n\n\t\tString resourcesDir = pluginPackageProperties.getProperty(\n\t\t\t\"resources-importer-external-dir\");\n\n\t\tif ((servletContext.getResource(_RESOURCES_DIR) == null) &&\n\t\t\t(servletContext.getResource(_TEMPLATES_DIR) == null) &&\n\t\t\tValidator.isNull(resourcesDir)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tString targetClassName = pluginPackageProperties.getProperty(\n\t\t\t\"resources-importer-target-class-name\",\n\t\t\tLayoutSetPrototype.class.getName());\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_RESOURCES_DIR);\n\t\tSet<String> templatePaths = servletContext.getResourcePaths(\n\t\t\t_TEMPLATES_DIR);\n\n\t\tURL privateLARURL = null;\n\t\tURL publicLARURL = servletContext.getResource(\n\t\t\t_RESOURCES_DIR.concat(\"archive.lar\"));\n\n\t\tif (publicLARURL == null) {\n\t\t\tprivateLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"private.lar\"));\n\t\t\tpublicLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"public.lar\"));\n\t\t}\n\n\t\tList<Company> companies = CompanyLocalServiceUtil.getCompanies();\n\n\t\tfor (Company company : companies) {\n\t\t\tlong companyId = CompanyThreadLocal.getCompanyId();\n\n\t\t\tExportImportThreadLocal.setLayoutImportInProcess(true);\n\t\t\tExportImportThreadLocal.setPortletImportInProcess(true);\n\n\t\t\ttry {\n\t\t\t\tCompanyThreadLocal.setCompanyId(company.getCompanyId());\n\n\t\t\t\tImporter importer = null;\n\n\t\t\t\tif ((privateLARURL != null) || (publicLARURL != null)) {\n\t\t\t\t\tLARImporter larImporter = getLARImporter();\n\n\t\t\t\t\tURLConnection privateLARURLConnection = null;\n\n\t\t\t\t\tif (privateLARURL != null) {\n\t\t\t\t\t\tprivateLARURLConnection =\n\t\t\t\t\t\t\tprivateLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPrivateLARInputStream(\n\t\t\t\t\t\t\tprivateLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\tURLConnection publicLARURLConnection = null;\n\n\t\t\t\t\tif (publicLARURL != null) {\n\t\t\t\t\t\tpublicLARURLConnection = publicLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPublicLARInputStream(\n\t\t\t\t\t\t\tpublicLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\timporter = larImporter;\n\t\t\t\t}\n\t\t\t\telse if ((resourcePaths != null) && !resourcePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\timporter.setResourcesDir(_RESOURCES_DIR);\n\t\t\t\t}\n\t\t\t\telse if ((templatePaths != null) && !templatePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\t\tcompany.getCompanyId());\n\n\t\t\t\t\timporter.setGroupId(group.getGroupId());\n\t\t\t\t\timporter.setResourcesDir(_TEMPLATES_DIR);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(resourcesDir)) {\n\t\t\t\t\timporter = getFileSystemImporter();\n\n\t\t\t\t\timporter.setResourcesDir(resourcesDir);\n\t\t\t\t}\n\n\t\t\t\tif (importer == null) {\n\t\t\t\t\tthrow new ImporterException(\"No valid importer found\");\n\t\t\t\t}\n\n\t\t\t\timporter.setCompanyId(company.getCompanyId());\n\t\t\t\timporter.setServletContext(servletContext);\n\t\t\t\timporter.setServletContextName(servletContextName);\n\t\t\t\timporter.setTargetClassName(targetClassName);\n\n\t\t\t\tString targetValue = pluginPackageProperties.getProperty(\n\t\t\t\t\t\"resources-importer-target-value\");\n\n\t\t\t\tif (Validator.isNull(targetValue)) {\n\t\t\t\t\ttargetValue = TextFormatter.format(\n\t\t\t\t\t\tservletContextName, TextFormatter.J);\n\t\t\t\t}\n\n\t\t\t\timporter.setTargetValue(targetValue);\n\n\t\t\t\tPluginPackage pluginPackage =\n\t\t\t\t\tDeployManagerUtil.getInstalledPluginPackage(\n\t\t\t\t\t\tservletContextName);\n\n\t\t\t\timporter.setVersion(pluginPackage.getVersion());\n\n\t\t\t\tboolean developerModeEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-developer-mode-enabled\"));\n\n\t\t\t\timporter.setDeveloperModeEnabled(developerModeEnabled);\n\n\t\t\t\tboolean updateModeEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-update-mode-enabled\"));\n\n\t\t\t\timporter.setUpdateModeEnabled(updateModeEnabled);\n\n\t\t\t\timporter.afterPropertiesSet();\n\n\t\t\t\tif (!developerModeEnabled && importer.isExisting() &&\n\t\t\t\t\t!importer.isCompanyGroup()) {\n\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\t\"Group or layout set prototype already exists \" +\n\t\t\t\t\t\t\t\t\"for company \" + company.getWebId());\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlong startTime = 0;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstartTime = System.currentTimeMillis();\n\t\t\t\t}\n\n\t\t\t\timporter.importResources();\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tlong endTime = System.currentTimeMillis() - startTime;\n\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Importing resources from \" + servletContextName +\n\t\t\t\t\t\t\t\" to group \" + importer.getGroupId() + \" takes \" +\n\t\t\t\t\t\t\t\tendTime + \" ms\");\n\t\t\t\t}\n\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", importer.getTargetClassPK());\n\n\t\t\t\tif (message.getResponseId() != null) {\n\t\t\t\t\tMap<String, Object> responseMap =\n\t\t\t\t\t\tnew HashMap<String, Object>();\n\n\t\t\t\t\tresponseMap.put(\"groupId\", importer.getTargetClassPK());\n\n\t\t\t\t\tnewMessage.setPayload(responseMap);\n\n\t\t\t\t\tnewMessage.setResponseId(message.getResponseId());\n\t\t\t\t}\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tcatch (ImporterException ie) {\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"error\", ie.getMessage());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", 0);\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tCompanyThreadLocal.setCompanyId(companyId);\n\n\t\t\t\tExportImportThreadLocal.setLayoutImportInProcess(false);\n\t\t\t\tExportImportThreadLocal.setPortletImportInProcess(false);\n\t\t\t}\n\t\t}\n\t}","id":68666,"modified_method":"protected void initialize(Message message) throws Exception {\n\t\tString servletContextName = message.getString(\"servletContextName\");\n\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tservletContextName);\n\n\t\tProperties pluginPackageProperties = getPluginPackageProperties(\n\t\t\tservletContext);\n\n\t\tString resourcesDir = pluginPackageProperties.getProperty(\n\t\t\t\"resources-importer-external-dir\");\n\n\t\tif ((servletContext.getResource(_RESOURCES_DIR) == null) &&\n\t\t\t(servletContext.getResource(_TEMPLATES_DIR) == null) &&\n\t\t\tValidator.isNull(resourcesDir)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tString targetClassName = pluginPackageProperties.getProperty(\n\t\t\t\"resources-importer-target-class-name\",\n\t\t\tLayoutSetPrototype.class.getName());\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_RESOURCES_DIR);\n\t\tSet<String> templatePaths = servletContext.getResourcePaths(\n\t\t\t_TEMPLATES_DIR);\n\n\t\tURL privateLARURL = null;\n\t\tURL publicLARURL = servletContext.getResource(\n\t\t\t_RESOURCES_DIR.concat(\"archive.lar\"));\n\n\t\tif (publicLARURL == null) {\n\t\t\tprivateLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"private.lar\"));\n\t\t\tpublicLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"public.lar\"));\n\t\t}\n\n\t\tList<Company> companies = CompanyLocalServiceUtil.getCompanies();\n\n\t\tfor (Company company : companies) {\n\t\t\tlong companyId = CompanyThreadLocal.getCompanyId();\n\n\t\t\tExportImportThreadLocal.setLayoutImportInProcess(true);\n\t\t\tExportImportThreadLocal.setPortletImportInProcess(true);\n\n\t\t\ttry {\n\t\t\t\tCompanyThreadLocal.setCompanyId(company.getCompanyId());\n\n\t\t\t\tImporter importer = null;\n\n\t\t\t\tif ((privateLARURL != null) || (publicLARURL != null)) {\n\t\t\t\t\tLARImporter larImporter = getLARImporter();\n\n\t\t\t\t\tURLConnection privateLARURLConnection = null;\n\n\t\t\t\t\tif (privateLARURL != null) {\n\t\t\t\t\t\tprivateLARURLConnection =\n\t\t\t\t\t\t\tprivateLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPrivateLARInputStream(\n\t\t\t\t\t\t\tprivateLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\tURLConnection publicLARURLConnection = null;\n\n\t\t\t\t\tif (publicLARURL != null) {\n\t\t\t\t\t\tpublicLARURLConnection = publicLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPublicLARInputStream(\n\t\t\t\t\t\t\tpublicLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\timporter = larImporter;\n\t\t\t\t}\n\t\t\t\telse if ((resourcePaths != null) && !resourcePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\timporter.setResourcesDir(_RESOURCES_DIR);\n\t\t\t\t}\n\t\t\t\telse if ((templatePaths != null) && !templatePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\t\tcompany.getCompanyId());\n\n\t\t\t\t\timporter.setGroupId(group.getGroupId());\n\t\t\t\t\timporter.setResourcesDir(_TEMPLATES_DIR);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(resourcesDir)) {\n\t\t\t\t\timporter = getFileSystemImporter();\n\n\t\t\t\t\timporter.setResourcesDir(resourcesDir);\n\t\t\t\t}\n\n\t\t\t\tif (importer == null) {\n\t\t\t\t\tthrow new ImporterException(\"No valid importer found\");\n\t\t\t\t}\n\n\t\t\t\timporter.setCompanyId(company.getCompanyId());\n\t\t\t\timporter.setServletContext(servletContext);\n\t\t\t\timporter.setServletContextName(servletContextName);\n\t\t\t\timporter.setTargetClassName(targetClassName);\n\n\t\t\t\tString targetValue = pluginPackageProperties.getProperty(\n\t\t\t\t\t\"resources-importer-target-value\");\n\n\t\t\t\tif (Validator.isNull(targetValue)) {\n\t\t\t\t\ttargetValue = TextFormatter.format(\n\t\t\t\t\t\tservletContextName, TextFormatter.J);\n\t\t\t\t}\n\n\t\t\t\timporter.setTargetValue(targetValue);\n\n\t\t\t\tPluginPackage pluginPackage =\n\t\t\t\t\tDeployManagerUtil.getInstalledPluginPackage(\n\t\t\t\t\t\tservletContextName);\n\n\t\t\t\timporter.setVersion(pluginPackage.getVersion());\n\n\t\t\t\tboolean appendVersion = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-append-version\"),\n\t\t\t\t\ttrue);\n\n\t\t\t\timporter.setAppendVersion(appendVersion);\n\n\t\t\t\tboolean developerModeEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-developer-mode-enabled\"));\n\n\t\t\t\timporter.setDeveloperModeEnabled(developerModeEnabled);\n\n\t\t\t\tboolean updateModeEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-update-mode-enabled\"));\n\n\t\t\t\timporter.setUpdateModeEnabled(updateModeEnabled);\n\n\t\t\t\timporter.afterPropertiesSet();\n\n\t\t\t\tif (!developerModeEnabled && importer.isExisting() &&\n\t\t\t\t\t!importer.isCompanyGroup()) {\n\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\t\"Group or layout set prototype already exists \" +\n\t\t\t\t\t\t\t\t\"for company \" + company.getWebId());\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlong startTime = 0;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstartTime = System.currentTimeMillis();\n\t\t\t\t}\n\n\t\t\t\timporter.importResources();\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tlong endTime = System.currentTimeMillis() - startTime;\n\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Importing resources from \" + servletContextName +\n\t\t\t\t\t\t\t\" to group \" + importer.getGroupId() + \" takes \" +\n\t\t\t\t\t\t\t\tendTime + \" ms\");\n\t\t\t\t}\n\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", importer.getTargetClassPK());\n\n\t\t\t\tif (message.getResponseId() != null) {\n\t\t\t\t\tMap<String, Object> responseMap =\n\t\t\t\t\t\tnew HashMap<String, Object>();\n\n\t\t\t\t\tresponseMap.put(\"groupId\", importer.getTargetClassPK());\n\n\t\t\t\t\tnewMessage.setPayload(responseMap);\n\n\t\t\t\t\tnewMessage.setResponseId(message.getResponseId());\n\t\t\t\t}\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tcatch (ImporterException ie) {\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"error\", ie.getMessage());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", 0);\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tCompanyThreadLocal.setCompanyId(companyId);\n\n\t\t\t\tExportImportThreadLocal.setLayoutImportInProcess(false);\n\t\t\t\tExportImportThreadLocal.setPortletImportInProcess(false);\n\t\t\t}\n\t\t}\n\t}","commit_id":"f6412932b03b41046d0f58d03d2e39aacda31d49","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public boolean validateConfiguration(CompileScope compileScope) {\n    VirtualFile[] files = compileScope.getFiles(GroovyFileType.GROOVY_FILE_TYPE, true);\n    if (files.length == 0) return true;\n\n    Set<Module> modules = new HashSet<Module>();\n    for (VirtualFile file : files) {\n      ProjectRootManager rootManager = ProjectRootManager.getInstance(myProject);\n      Module module = rootManager.getFileIndex().getModuleForFile(file);\n      if (module != null) {\n        modules.add(module);\n      }\n    }\n\n    Set<Module> nojdkModules = new HashSet<Module>();\n    for (Module module : modules) {\n      if(!(module.getModuleType() instanceof JavaModuleType)) return true;\n      final Sdk sdk = ModuleRootManager.getInstance(module).getSdk();\n      if (sdk == null || !(sdk.getSdkType() instanceof JavaSdkType)) {\n        nojdkModules.add(module);\n        continue;\n      }\n\n      final GroovyFacet facet = GroovyFacet.getInstance(module);\n      if (facet != null && !facet.getConfiguration().isCompileGroovyFiles()) {\n        continue;\n      }\n\n      final String groovyInstallPath = GroovyConfigUtils.getInstance().getSDKInstallPath(module);\n      final String grailsInstallPath = GrailsConfigUtils.getInstance().getSDKInstallPath(module);\n      if (groovyInstallPath.length() == 0 && grailsInstallPath.length() == 0) {\n        if (!GroovyConfigUtils.getInstance().tryToSetUpGroovyFacetOntheFly(module)) {\n          Messages.showErrorDialog(myProject, GroovyBundle.message(\"cannot.compile.groovy.files.no.facet\", module.getName()),\n                                   GroovyBundle.message(\"cannot.compile\"));\n          ModulesConfigurator.showDialog(module.getProject(), module.getName(), ClasspathEditor.NAME, false);\n          return false;\n        }\n      }\n    }\n\n    if (!nojdkModules.isEmpty()) {\n      final Module[] noJdkArray = nojdkModules.toArray(new Module[nojdkModules.size()]);\n      if (noJdkArray.length == 1) {\n        Messages.showErrorDialog(myProject, GroovyBundle.message(\"cannot.compile.groovy.files.no.sdk\", noJdkArray[0].getName()),\n                                 GroovyBundle.message(\"cannot.compile\"));\n      }\n      else {\n        StringBuffer modulesList = new StringBuffer();\n        for (int i = 0; i < noJdkArray.length; i++) {\n          if (i > 0) modulesList.append(\", \");\n          modulesList.append(noJdkArray[i].getName());\n        }\n        Messages.showErrorDialog(myProject, GroovyBundle.message(\"cannot.compile.groovy.files.no.sdk.mult\", modulesList.toString()),\n                                 GroovyBundle.message(\"cannot.compile\"));\n      }\n      return false;\n    }\n\n    return true;\n  }","id":68667,"modified_method":"public boolean validateConfiguration(CompileScope compileScope) {\n    VirtualFile[] files = compileScope.getFiles(GroovyFileType.GROOVY_FILE_TYPE, true);\n    if (files.length == 0) return true;\n\n    Set<Module> modules = new HashSet<Module>();\n    for (VirtualFile file : files) {\n      ProjectRootManager rootManager = ProjectRootManager.getInstance(myProject);\n      Module module = rootManager.getFileIndex().getModuleForFile(file);\n      if (module != null) {\n        modules.add(module);\n      }\n    }\n\n    Set<Module> nojdkModules = new HashSet<Module>();\n    for (Module module : modules) {\n      if(!(module.getModuleType() instanceof JavaModuleType)) return true;\n      final Sdk sdk = ModuleRootManager.getInstance(module).getSdk();\n      if (sdk == null || !(sdk.getSdkType() instanceof JavaSdkType)) {\n        nojdkModules.add(module);\n        continue;\n      }\n\n      final GroovyFacet facet = GroovyFacet.getInstance(module);\n      if (facet != null && !facet.getConfiguration().isCompileGroovyFiles()) {\n        continue;\n      }\n\n      final String groovyInstallPath = LibrariesUtil.getGroovyHomePath(module);\n      if (groovyInstallPath == null) {\n        if (!GroovyConfigUtils.getInstance().tryToSetUpGroovyFacetOntheFly(module)) {\n          Messages.showErrorDialog(myProject, GroovyBundle.message(\"cannot.compile.groovy.files.no.facet\", module.getName()),\n                                   GroovyBundle.message(\"cannot.compile\"));\n          ModulesConfigurator.showDialog(module.getProject(), module.getName(), ClasspathEditor.NAME, false);\n          return false;\n        }\n      }\n    }\n\n    if (!nojdkModules.isEmpty()) {\n      final Module[] noJdkArray = nojdkModules.toArray(new Module[nojdkModules.size()]);\n      if (noJdkArray.length == 1) {\n        Messages.showErrorDialog(myProject, GroovyBundle.message(\"cannot.compile.groovy.files.no.sdk\", noJdkArray[0].getName()),\n                                 GroovyBundle.message(\"cannot.compile\"));\n      }\n      else {\n        StringBuffer modulesList = new StringBuffer();\n        for (int i = 0; i < noJdkArray.length; i++) {\n          if (i > 0) modulesList.append(\", \");\n          modulesList.append(noJdkArray[i].getName());\n        }\n        Messages.showErrorDialog(myProject, GroovyBundle.message(\"cannot.compile.groovy.files.no.sdk.mult\", modulesList.toString()),\n                                 GroovyBundle.message(\"cannot.compile\"));\n      }\n      return false;\n    }\n\n    return true;\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void runGroovycCompiler(CompileContext compileContext, Set<OutputItem> successfullyCompiled, Set<VirtualFile> toRecompile, final Module module,\n                         final List<VirtualFile> toCompile, boolean forStubs) {\n    GeneralCommandLine commandLine = new GeneralCommandLine();\n    final Sdk sdk = ModuleRootManager.getInstance(module).getSdk();\n    assert sdk != null; //verified before\n    SdkType sdkType = sdk.getSdkType();\n    assert sdkType instanceof JavaSdkType;\n    commandLine.setExePath(((JavaSdkType)sdkType).getVMExecutablePath(sdk));\n\n    String rtJarPath = PathUtil.getJarPathForClass(GroovycRunner.class);\n    final StringBuilder classPathBuilder = new StringBuilder();\n    classPathBuilder.append(rtJarPath);\n    classPathBuilder.append(File.pathSeparator);\n\n    String groovyPath = GroovyConfigUtils.getInstance().getSDKInstallPath(module);\n    String grailsPath = GrailsConfigUtils.getInstance().getSDKInstallPath(module);\n\n    String libPath =\n      (grailsPath.length() > 0 || groovyPath.length() == 0 ? grailsPath : groovyPath) + \"/lib\";\n\n    libPath = libPath.replace(File.separatorChar, '/');\n    VirtualFile lib = LocalFileSystem.getInstance().findFileByPath(libPath);\n    if (lib != null) {\n      for (VirtualFile file : lib.getChildren()) {\n        if (required(file.getName())) {\n          classPathBuilder.append(file.getPath());\n          classPathBuilder.append(File.pathSeparator);\n        }\n      }\n    }\n\n    classPathBuilder.append(getModuleSpecificClassPath(module));\n    if (\"true\".equals(System.getProperty(\"profile.groovy.compiler\"))) {\n      commandLine.addParameter(\"-Djava.library.path=\" + PathManager.getBinPath());\n      commandLine.addParameter(\"-Dprofile.groovy.compiler=true\");\n      commandLine.addParameter(\"-agentlib:yjpagent=disablej2ee,disablecounts,disablealloc,sessionname=GroovyCompiler\");\n      classPathBuilder.append(PathManager.getLibPath()).append(\"/yjp-controller-api-redist.jar\").append(File.pathSeparator);\n    }\n\n    commandLine.addParameter(\"-cp\");\n    commandLine.addParameter(classPathBuilder.toString());\n\n    commandLine.addParameter(\"-Xmx\" + System.getProperty(\"groovy.compiler.Xmx\", \"400m\"));\n    commandLine.addParameter(\"-XX:+HeapDumpOnOutOfMemoryError\");\n\n    //debug\n    //commandLine.addParameter(\"-Xdebug\"); commandLine.addParameter(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5239\");\n\n    // Setting up process encoding according to locale\n    final ArrayList<String> list = new ArrayList<String>();\n    CompilerUtil.addLocaleOptions(list, false);\n    commandLine.addParameters(list);\n\n    commandLine.addParameter(GroovycRunner.class.getName());\n\n    try {\n      File fileWithParameters = File.createTempFile(\"toCompile\", \"\");\n      fillFileWithGroovycParameters(module, toCompile, fileWithParameters, forStubs, compileContext);\n\n      commandLine.addParameter(fileWithParameters.getPath());\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n\n    GroovycOSProcessHandler processHandler;\n\n    try {\n      processHandler = new GroovycOSProcessHandler(compileContext, commandLine.createProcess(), commandLine.getCommandLineString());\n\n      processHandler.startNotify();\n      processHandler.waitFor();\n\n      Set<File> toRecompileFiles = processHandler.getToRecompileFiles();\n      for (File toRecompileFile : toRecompileFiles) {\n        final VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(toRecompileFile);\n        LOG.assertTrue(vFile != null);\n        toRecompile.add(vFile);\n      }\n\n      for (CompilerMessage compilerMessage : processHandler.getCompilerMessages()) {\n        final CompilerMessageCategory category;\n        category = getMessageCategory(compilerMessage);\n\n        final String url = compilerMessage.getUrl();\n\n        compileContext.addMessage(category, compilerMessage.getMessage(), VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(url)), compilerMessage.getLineNum(),\n                                  compilerMessage.getColumnNum());\n      }\n\n      StringBuffer unparsedBuffer = processHandler.getUnparsedOutput();\n      if (unparsedBuffer.length() != 0) compileContext.addMessage(CompilerMessageCategory.ERROR, unparsedBuffer.toString(), null, -1, -1);\n\n      successfullyCompiled.addAll(processHandler.getSuccessfullyCompiled());\n    }\n    catch (ExecutionException e) {\n      LOG.error(e);\n    }\n  }","id":68668,"modified_method":"protected void runGroovycCompiler(CompileContext compileContext, Set<OutputItem> successfullyCompiled, Set<VirtualFile> toRecompile, final Module module,\n                         final List<VirtualFile> toCompile, boolean forStubs) {\n    GeneralCommandLine commandLine = new GeneralCommandLine();\n    final Sdk sdk = ModuleRootManager.getInstance(module).getSdk();\n    assert sdk != null; //verified before\n    SdkType sdkType = sdk.getSdkType();\n    assert sdkType instanceof JavaSdkType;\n    commandLine.setExePath(((JavaSdkType)sdkType).getVMExecutablePath(sdk));\n\n    String rtJarPath = PathUtil.getJarPathForClass(GroovycRunner.class);\n    final StringBuilder classPathBuilder = new StringBuilder();\n    classPathBuilder.append(rtJarPath);\n    classPathBuilder.append(File.pathSeparator);\n\n    final String libPath = FileUtil.toSystemIndependentName(LibrariesUtil.getGroovyHomePath(module) + \"/lib\");\n    VirtualFile lib = LocalFileSystem.getInstance().findFileByPath(libPath);\n    if (lib != null) {\n      for (VirtualFile file : lib.getChildren()) {\n        if (required(file.getName())) {\n          classPathBuilder.append(file.getPath());\n          classPathBuilder.append(File.pathSeparator);\n        }\n      }\n    }\n\n    classPathBuilder.append(getModuleSpecificClassPath(module));\n    if (\"true\".equals(System.getProperty(\"profile.groovy.compiler\"))) {\n      commandLine.addParameter(\"-Djava.library.path=\" + PathManager.getBinPath());\n      commandLine.addParameter(\"-Dprofile.groovy.compiler=true\");\n      commandLine.addParameter(\"-agentlib:yjpagent=disablej2ee,disablecounts,disablealloc,sessionname=GroovyCompiler\");\n      classPathBuilder.append(PathManager.getLibPath()).append(\"/yjp-controller-api-redist.jar\").append(File.pathSeparator);\n    }\n\n    commandLine.addParameter(\"-cp\");\n    commandLine.addParameter(classPathBuilder.toString());\n\n    commandLine.addParameter(\"-Xmx\" + System.getProperty(\"groovy.compiler.Xmx\", \"400m\"));\n    commandLine.addParameter(\"-XX:+HeapDumpOnOutOfMemoryError\");\n\n    //debug\n    //commandLine.addParameter(\"-Xdebug\"); commandLine.addParameter(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5239\");\n\n    // Setting up process encoding according to locale\n    final ArrayList<String> list = new ArrayList<String>();\n    CompilerUtil.addLocaleOptions(list, false);\n    commandLine.addParameters(list);\n\n    commandLine.addParameter(GroovycRunner.class.getName());\n\n    try {\n      File fileWithParameters = File.createTempFile(\"toCompile\", \"\");\n      fillFileWithGroovycParameters(module, toCompile, fileWithParameters, forStubs, compileContext);\n\n      commandLine.addParameter(fileWithParameters.getPath());\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n\n    GroovycOSProcessHandler processHandler;\n\n    try {\n      processHandler = new GroovycOSProcessHandler(compileContext, commandLine.createProcess(), commandLine.getCommandLineString());\n\n      processHandler.startNotify();\n      processHandler.waitFor();\n\n      Set<File> toRecompileFiles = processHandler.getToRecompileFiles();\n      for (File toRecompileFile : toRecompileFiles) {\n        final VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(toRecompileFile);\n        LOG.assertTrue(vFile != null);\n        toRecompile.add(vFile);\n      }\n\n      for (CompilerMessage compilerMessage : processHandler.getCompilerMessages()) {\n        final CompilerMessageCategory category;\n        category = getMessageCategory(compilerMessage);\n\n        final String url = compilerMessage.getUrl();\n\n        compileContext.addMessage(category, compilerMessage.getMessage(), VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(url)), compilerMessage.getLineNum(),\n                                  compilerMessage.getColumnNum());\n      }\n\n      StringBuffer unparsedBuffer = processHandler.getUnparsedOutput();\n      if (unparsedBuffer.length() != 0) compileContext.addMessage(CompilerMessageCategory.ERROR, unparsedBuffer.toString(), null, -1, -1);\n\n      successfullyCompiled.addAll(processHandler.getSuccessfullyCompiled());\n    }\n    catch (ExecutionException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isSDKConfigured(Module module) {\n    return module != null && FacetManager.getInstance(module).getFacetByType(GroovyFacet.ID) != null ||\n           GrailsConfigUtils.getInstance().isSDKConfigured(module);\n  }","id":68669,"modified_method":"public static boolean isSDKConfigured(Module module) {\n    return module != null && GroovyFacet.getInstance(module) != null;\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GroovyDocAddPackageAction(final JList packagesList, final DefaultListModel dataModel) {\n    super(GrailsBundle.message(\"groovydoc.add.package\"), GrailsBundle.message(\"groovydoc.add.package\"),\n          IconLoader.getIcon(\"/general/add.png\"));\n    myPackagesList = packagesList;\n    myDataModel = dataModel;\n  }","id":68670,"modified_method":"public GroovyDocAddPackageAction(final JList packagesList, final DefaultListModel dataModel) {\n    super(\"Add package\", \"Add package\", IconLoader.getIcon(\"/general/add.png\"));\n    myPackagesList = packagesList;\n    myDataModel = dataModel;\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(final AnActionEvent e) {\n    final Project project = DataKeys.PROJECT.getData(e.getDataContext());\n\n    PackageChooserDialog chooser = new PackageChooserDialog(GrailsBundle.message(\"groovydoc.package.title\"), project);\n    chooser.show();\n\n    final List<PsiPackage> packages = chooser.getSelectedPackages();\n\n    for (PsiPackage aPackage : packages) {\n      final String qualifiedName = aPackage.getQualifiedName();\n\n      if (\"\".equals(qualifiedName)){\n        myDataModel.addElement(GroovyDocConfiguration.ALL_PACKAGES);\n      }\n      myDataModel.addElement(qualifiedName);\n    }\n  }","id":68671,"modified_method":"public void actionPerformed(final AnActionEvent e) {\n    final Project project = DataKeys.PROJECT.getData(e.getDataContext());\n\n    PackageChooserDialog chooser = new PackageChooserDialog(\"Choose packages\", project);\n    chooser.show();\n\n    final List<PsiPackage> packages = chooser.getSelectedPackages();\n\n    for (PsiPackage aPackage : packages) {\n      final String qualifiedName = aPackage.getQualifiedName();\n\n      if (\"\".equals(qualifiedName)){\n        myDataModel.addElement(GroovyDocConfiguration.ALL_PACKAGES);\n      }\n      myDataModel.addElement(qualifiedName);\n    }\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"GroovyDocGenerationPanel() {\n    myInputDir.addBrowseFolderListener(GroovyDocBundle.message(\"groovydoc.generate.input.directory.browse\"), null, null,\n                                       FileChooserDescriptorFactory.createSingleFolderDescriptor());\n\n    myOutputDir.addBrowseFolderListener(GroovyDocBundle.message(\"groovydoc.generate.output.directory.browse\"), null, null,\n                                        FileChooserDescriptorFactory.createSingleFolderDescriptor());\n\n    myDataModel = new DefaultListModel();\n\n    myPackagesList = new JList(myDataModel);\n    myPackagesList.setMinimumSize(new Dimension(100, 150));\n\n    JScrollPane packagesScrollPane = ScrollPaneFactory.createScrollPane(myPackagesList);\n    myPackagesPanel.setLayout(new BorderLayout());\n    myPackagesPanel.setBorder(IdeBorderFactory.createTitledBorder(GrailsBundle.message(\"groovydoc.packages.title\")));\n\n    myActionToolbar = ActionManager.getInstance().createActionToolbar(\"GroovyDoc\", getActionGroup(), true);\n    myPackagesPanel.add(myActionToolbar.getComponent(), BorderLayout.NORTH);\n    myPackagesPanel.add(packagesScrollPane, BorderLayout.SOUTH);\n\n    myActionToolbar.updateActionsImmediately();\n  }","id":68672,"modified_method":"GroovyDocGenerationPanel() {\n    myInputDir.addBrowseFolderListener(GroovyDocBundle.message(\"groovydoc.generate.input.directory.browse\"), null, null,\n                                       FileChooserDescriptorFactory.createSingleFolderDescriptor());\n\n    myOutputDir.addBrowseFolderListener(GroovyDocBundle.message(\"groovydoc.generate.output.directory.browse\"), null, null,\n                                        FileChooserDescriptorFactory.createSingleFolderDescriptor());\n\n    myDataModel = new DefaultListModel();\n\n    myPackagesList = new JList(myDataModel);\n    myPackagesList.setMinimumSize(new Dimension(100, 150));\n\n    JScrollPane packagesScrollPane = ScrollPaneFactory.createScrollPane(myPackagesList);\n    myPackagesPanel.setLayout(new BorderLayout());\n    myPackagesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Source packages\"));\n\n    myActionToolbar = ActionManager.getInstance().createActionToolbar(\"GroovyDoc\", getActionGroup(), true);\n    myPackagesPanel.add(myActionToolbar.getComponent(), BorderLayout.NORTH);\n    myPackagesPanel.add(packagesScrollPane, BorderLayout.SOUTH);\n\n    myActionToolbar.updateActionsImmediately();\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GroovyDocReducePackageAction(final JList packagesList, final DefaultListModel dataModel) {\n    super(GrailsBundle.message(\"groovydoc.remove.package\"), GrailsBundle.message(\"groovydoc.remove.package\"),\n          IconLoader.getIcon(\"/general/remove.png\"));\n    myPackagesList = packagesList;\n    myDataModel = dataModel;\n  }","id":68673,"modified_method":"public GroovyDocReducePackageAction(final JList packagesList, final DefaultListModel dataModel) {\n    super(\"Remove package from list\", \"Remove package from list\", IconLoader.getIcon(\"/general/remove.png\"));\n    myPackagesList = packagesList;\n    myDataModel = dataModel;\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean invoke(final Project project, final Editor editor, PsiFile file, int startOffset, int endOffset) {\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n    if (!(file instanceof GroovyFileBase || file instanceof GspFile)) {\n      String message = RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message(\"only.in.groovy.files\"));\n      showErrorMessage(project, editor, message);\n      return false;\n    }\n    // Expression or block to be introduced as a variable\n    GroovyFileBase fileBase = file instanceof GspFile ? ((GspFile) file).getGroovyLanguageRoot() : ((GroovyFileBase) file);\n    GrExpression tempExpr = GroovyRefactoringUtil.findElementInRange(fileBase, startOffset, endOffset, GrExpression.class);\n// removed according to GRVY-1231\n/*\n    if (tempExpr != null) {\n      PsiElement parent = tempExpr.getParent();\n      if (parent instanceof GrMethodCallExpression || parent instanceof GrIndexProperty) {\n        tempExpr = ((GrExpression) tempExpr.getParent());\n        SelectionModel model = editor.getSelectionModel();\n        model.setSelection(model.getSelectionStart(), tempExpr.getTextRange().getEndOffset());\n      }\n    }\n*/\n    return invokeImpl(project, tempExpr, editor);\n  }","id":68674,"modified_method":"private boolean invoke(final Project project, final Editor editor, PsiFile file, int startOffset, int endOffset) {\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n    if (!(file instanceof GroovyFileBase)) {\n      String message = RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message(\"only.in.groovy.files\"));\n      showErrorMessage(project, editor, message);\n      return false;\n    }\n    // Expression or block to be introduced as a variable\n    GrExpression tempExpr = GroovyRefactoringUtil.findElementInRange((GroovyFileBase) file, startOffset, endOffset, GrExpression.class);\n// removed according to GRVY-1231\n/*\n    if (tempExpr != null) {\n      PsiElement parent = tempExpr.getParent();\n      if (parent instanceof GrMethodCallExpression || parent instanceof GrIndexProperty) {\n        tempExpr = ((GrExpression) tempExpr.getParent());\n        SelectionModel model = editor.getSelectionModel();\n        model.setSelection(model.getSelectionStart(), tempExpr.getTextRange().getEndOffset());\n      }\n    }\n*/\n    return invokeImpl(project, tempExpr, editor);\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    final VirtualFile[] files = container.getLibraryFiles(library, OrderRootType.CLASSES);\n    return GroovyConfigUtils.isGroovyLibrary(files) && !GrailsConfigUtils.containsGrailsJar(files) && !GriffonLibraryManager.isGriffonSdk(files);\n  }","id":68675,"modified_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    return GroovyConfigUtils.isGroovyLibrary(container.getLibraryFiles(library, OrderRootType.CLASSES));\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String getGroovyHome(Module module) {\n    String groovyHome = GroovyConfigUtils.getInstance().getSDKInstallPath(module);\n    if (groovyHome.length() == 0) {\n      groovyHome = GrailsConfigUtils.getInstance().getSDKInstallPath(module);\n    }\n    return groovyHome;\n  }","id":68676,"modified_method":"private static String getGroovyHome(Module module) {\n    return StringUtil.notNullize(LibrariesUtil.getGroovyHomePath(module));\n  }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitContinueStatement(GrContinueStatement continueStatement) {\n      super.visitContinueStatement(continueStatement);\n      if (continueStatement.getContainingFile() instanceof GspFile) {\n        return;\n      }\n      final GrStatement continuedStatement = continueStatement.findTarget();\n      if (continuedStatement == null) {\n        return;\n      }\n\n      if (!(continuedStatement instanceof GrLoopStatement)) {\n        return;\n      }\n      final GrCondition body = ((GrLoopStatement) continuedStatement).getBody();\n      if (body == null) {\n        return;\n      }\n      if (body instanceof GrBlockStatement) {\n        if (ControlFlowUtils.blockCompletesWithStatement((GrBlockStatement) body,\n            continueStatement)) {\n          registerStatementError(continueStatement);\n        }\n      } else if (body instanceof GrStatement) {\n        if (ControlFlowUtils.statementCompletesWithStatement((GrStatement) body,\n            continueStatement)) {\n          registerStatementError(continueStatement);\n        }\n      }\n    }","id":68677,"modified_method":"public void visitContinueStatement(GrContinueStatement continueStatement) {\n      super.visitContinueStatement(continueStatement);\n      if (continueStatement.getContainingFile().getViewProvider() instanceof TemplateLanguageFileViewProvider) {\n        return;\n      }\n      final GrStatement continuedStatement = continueStatement.findTarget();\n      if (continuedStatement == null) {\n        return;\n      }\n\n      if (!(continuedStatement instanceof GrLoopStatement)) {\n        return;\n      }\n      final GrCondition body = ((GrLoopStatement) continuedStatement).getBody();\n      if (body == null) {\n        return;\n      }\n      if (body instanceof GrBlockStatement) {\n        if (ControlFlowUtils.blockCompletesWithStatement((GrBlockStatement) body,\n            continueStatement)) {\n          registerStatementError(continueStatement);\n        }\n      } else if (body instanceof GrStatement) {\n        if (ControlFlowUtils.statementCompletesWithStatement((GrStatement) body,\n            continueStatement)) {\n          registerStatementError(continueStatement);\n        }\n      }\n    }","commit_id":"c91eb4a0974ec36d757ab8deb569cb9d56ac540b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    VirtualFile[] files = container.getLibraryFiles(library, OrderRootType.CLASSES);\n    return GantConfigUtils.containsGantJar(files) && !GrailsConfigUtils.containsGrailsJar(files);\n  }","id":68678,"modified_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    final VirtualFile[] files = container.getLibraryFiles(library, OrderRootType.CLASSES);\n    return GantConfigUtils.isGantLibrary(files) && !GroovyConfigUtils.isGroovyLibrary(files) && !GrailsConfigUtils.containsGrailsJar(files);\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isSDKLibrary(Library library) {\n    if (library == null) return false;\n    VirtualFile[] classFiles = library.getFiles(OrderRootType.CLASSES);\n    return containsGroovyJar(classFiles) && !GrailsConfigUtils.containsGrailsJar(classFiles);\n  }","id":68679,"modified_method":"public boolean isSDKLibrary(Library library) {\n    if (library == null) return false;\n    return isGroovyLibrary(library.getFiles(OrderRootType.CLASSES));\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean containsGroovyJar(VirtualFile[] classFiles) {\n    for (VirtualFile file : classFiles) {\n      String name = file.getName();\n      if (isGroovyAllJar(name) || name.matches(GROOVY_LIB_PATTERN)) {\n        return true;\n      }\n    }\n    return false;\n  }","id":68680,"modified_method":"public static boolean isGroovyLibrary(VirtualFile[] classFiles) {\n    for (VirtualFile file : classFiles) {\n      if (isGroovyAllJar(file.getName())) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public boolean isSDKHome(VirtualFile file) {\n    if (file != null && file.isDirectory()) {\n      final String path = file.getPath();\n      if (GroovyUtils.getFilesInDirectoryByPattern(path + \"/lib\", GROOVY_JAR_PATTERN).length > 0) {\n        return true;\n      }\n      if (GroovyUtils.getFilesInDirectoryByPattern(path + \"/embeddable\", GROOVY_ALL_JAR_PATTERN).length > 0) {\n        return true;\n      }\n      if (file.findFileByRelativePath(\"bin/\" + STARTER_SCRIPT_FILE_NAME) != null) {\n        return true;\n      }\n    }\n    return false;\n  }","id":68681,"modified_method":"@Override\n  public boolean isSDKHome(VirtualFile file) {\n    if (file != null && file.isDirectory()) {\n      final String path = file.getPath();\n      if (GroovyUtils.getFilesInDirectoryByPattern(path + \"/lib\", GROOVY_JAR_PATTERN).length > 0) {\n        return true;\n      }\n      if (GroovyUtils.getFilesInDirectoryByPattern(path + \"/embeddable\", GROOVY_ALL_JAR_PATTERN).length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public String getSDKVersion(@NotNull final String path) {\n    String groovyJarVersion = getSDKJarVersion(path + \"/lib\", GROOVY_JAR_PATTERN, MANIFEST_PATH);\n    return groovyJarVersion != null ? groovyJarVersion : UNDEFINED_VERSION;\n  }","id":68682,"modified_method":"@NotNull\n  public String getSDKVersion(@NotNull final String path) {\n    String groovyJarVersion = getSDKJarVersion(path + \"/lib\", GROOVY_JAR_PATTERN, MANIFEST_PATH);\n    if (groovyJarVersion != null) {\n      return groovyJarVersion;\n    }\n\n    groovyJarVersion = getSDKJarVersion(path + \"/lib\", GROOVY_ALL_JAR_PATTERN, MANIFEST_PATH);\n    if (groovyJarVersion != null) {\n      return groovyJarVersion;\n    }\n    \n    return UNDEFINED_VERSION;\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void performAddAction(final JComponent component, boolean mainOnly) {\n    final Set<ManagedLibrary> managed = getUsedLibraries();\n    final Set<Library> usedLibraries = ContainerUtil.map2Set(managed, new Function<ManagedLibrary, Library>() {\n      public Library fun(ManagedLibrary managedLibrary) {\n        return managedLibrary.library;\n      }\n    });\n\n    final MultiMap<LibraryManager, ManagedLibrary> libs = new MultiMap<LibraryManager, ManagedLibrary>();\n\n    final List<Object> toAdd = CollectionFactory.arrayList();\n    final Map<Object, ListSeparator> separators = CollectionFactory.newTroveMap();\n\n    for (Library library : myLibrariesContainer.getAllLibraries()) {\n      if (!usedLibraries.contains(library)) {\n        final LibraryManager manager = findManagerFor(library);\n        if (manager != null) {\n          libs.putValue(manager, new ManagedLibrary(library, manager));\n        }\n      }\n    }\n\n    for (int i = myManagers.length - 1; i >= 0; i--) {\n      LibraryManager manager = myManagers[i];\n      if (mainOnly && !isGroovyOrGrails(manager)) {\n        continue;\n      }\n\n      boolean separatorSet = false;\n      for (ManagedLibrary library : libs.get(manager)) {\n        if (!separatorSet) {\n          separators.put(library, new ListSeparator(manager.getLibraryCategoryName()));\n          separatorSet = true;\n        }\n        toAdd.add(library);\n      }\n      if (!separatorSet) {\n        separators.put(manager, new ListSeparator(manager.getLibraryCategoryName()));\n      }\n      toAdd.add(manager);\n    }\n\n    JBPopupFactory.getInstance().createListPopup(new ManagedLibrariesPopupStep(toAdd, separators)).showUnderneathOf(component);\n  }","id":68683,"modified_method":"private void performAddAction(final JComponent component, boolean mainOnly) {\n    final Set<ManagedLibrary> managed = getUsedLibraries();\n    final Set<Library> usedLibraries = ContainerUtil.map2Set(managed, new Function<ManagedLibrary, Library>() {\n      public Library fun(ManagedLibrary managedLibrary) {\n        return managedLibrary.library;\n      }\n    });\n\n    final MultiMap<LibraryManager, ManagedLibrary> libs = new MultiMap<LibraryManager, ManagedLibrary>();\n\n    final List<Object> toAdd = CollectionFactory.arrayList();\n    final Map<Object, ListSeparator> separators = CollectionFactory.newTroveMap();\n\n    for (Library library : myLibrariesContainer.getAllLibraries()) {\n      if (!usedLibraries.contains(library)) {\n        final LibraryManager manager = findManagerFor(library);\n        if (manager != null) {\n          libs.putValue(manager, new ManagedLibrary(library, manager));\n        }\n      }\n    }\n\n    for (LibraryManager manager : myManagers) {\n      if (mainOnly && !isGroovyOrGrails(manager)) {\n        continue;\n      }\n\n      boolean separatorSet = false;\n      for (ManagedLibrary library : libs.get(manager)) {\n        if (!separatorSet) {\n          separators.put(library, new ListSeparator(manager.getLibraryCategoryName()));\n          separatorSet = true;\n        }\n        toAdd.add(library);\n      }\n      if (!separatorSet) {\n        separators.put(manager, new ListSeparator(manager.getLibraryCategoryName()));\n      }\n      toAdd.add(manager);\n    }\n\n    JBPopupFactory.getInstance().createListPopup(new ManagedLibrariesPopupStep(toAdd, separators)).showUnderneathOf(component);\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    return GroovyConfigUtils.containsGroovyJar(container.getLibraryFiles(library, OrderRootType.CLASSES));\n  }","id":68684,"modified_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    final VirtualFile[] files = container.getLibraryFiles(library, OrderRootType.CLASSES);\n    return GroovyConfigUtils.isGroovyLibrary(files) && !GrailsConfigUtils.containsGrailsJar(files);\n  }","commit_id":"d3616be8a002e483221a2adb4df0c7624e677444","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected Library createLibrary(ProjectSettingsContext context, final GroovyLibraryConfigurer configUtils, Icon bigIcon) {\n    final String libraryKind = getLibraryCategoryName();\n    final Module module = context.getModule();\n    final Project project = module.getProject();\n    final FileChooserDescriptor descriptor = new FileChooserDescriptor(false, true, false, false, false, false) {\n      public boolean isFileSelectable(VirtualFile file) {\n        return super.isFileSelectable(file) && configUtils.isSDKHome(file);\n      }\n    };\n    final VirtualFile[] files = FileChooserFactory.getInstance().createFileChooser(descriptor, project).choose(null, project);\n    if (files.length == 1) {\n      String path = files[0].getPath();\n      List<String> versions = CollectionFactory.arrayList();\n\n      final LibrariesContainer container = ((ProjectConfigurableContext)context).getContainer();\n      for (Library library : getAllDefinedLibraries(container)) {\n        if (managesLibrary(library, container)) {\n          ContainerUtil.addIfNotNull(getLibraryVersion(library, container), versions);\n        }\n      }\n\n      String newVersion = configUtils.getSDKVersion(path);\n\n      boolean addVersion = !versions.contains(newVersion) ||\n                           Messages.showOkCancelDialog(\"Add one more \" + libraryKind + \" library of version \" + newVersion + \"?\",\n                                                       \"Duplicate library version\", bigIcon) == 0;\n\n      if (addVersion && !AbstractConfigUtils.UNDEFINED_VERSION.equals(newVersion)) {\n        final String name = generatePointerName(context, newVersion, configUtils);\n        final CreateLibraryDialog dialog = new CreateLibraryDialog(project, \"Create \" + libraryKind + \" library\",\n                                                                   \"Create Project \" + libraryKind + \" library '\" + name + \"'\",\n                                                                   \"Create Global \" + libraryKind + \" library '\" + name + \"'\");\n        dialog.show();\n        if (dialog.isOK()) {\n          return configUtils.createSDKLibrary(path, name, project, true, dialog.isInProject());\n        }\n      }\n    }\n    return null;\n  }","id":68685,"modified_method":"protected Library createLibrary(ProjectSettingsContext context, final GroovyLibraryConfigurer configUtils, Icon bigIcon) {\n    final String libraryKind = getLibraryCategoryName();\n    final Module module = context.getModule();\n    final Project project = module.getProject();\n    final FileChooserDescriptor descriptor = new FileChooserDescriptor(false, true, false, false, false, false) {\n      public boolean isFileSelectable(VirtualFile file) {\n        return super.isFileSelectable(file) && configUtils.isSDKHome(file);\n      }\n    };\n    final VirtualFile[] files = FileChooserFactory.getInstance().createFileChooser(descriptor, project).choose(null, project);\n    if (files.length == 1) {\n      String path = files[0].getPath();\n      List<String> versions = CollectionFactory.arrayList();\n\n      final LibrariesContainer container = ((ProjectConfigurableContext)context).getContainer();\n      for (Library library : getAllDefinedLibraries(container)) {\n        if (managesLibrary(library, container)) {\n          ContainerUtil.addIfNotNull(getLibraryVersion(library, container), versions);\n        }\n      }\n\n      String newVersion = configUtils.getSDKVersion(path);\n\n      boolean addVersion = !versions.contains(newVersion) ||\n                           Messages.showOkCancelDialog(\"Add one more \" + libraryKind + \" library of version \" + newVersion + \"?\",\n                                                       \"Duplicate library version\", bigIcon) == 0;\n\n      if (addVersion && !AbstractConfigUtils.UNDEFINED_VERSION.equals(newVersion)) {\n        final String name = generatePointerName(context, newVersion, getLibraryPrefix());\n        final CreateLibraryDialog dialog = new CreateLibraryDialog(project, \"Create \" + libraryKind + \" library\",\n                                                                   \"Create Project \" + libraryKind + \" library '\" + name + \"'\",\n                                                                   \"Create Global \" + libraryKind + \" library '\" + name + \"'\");\n        dialog.show();\n        if (dialog.isOK()) {\n          return configUtils.createSDKLibrary(path, name, project, true, dialog.isInProject());\n        }\n      }\n    }\n    return null;\n  }","commit_id":"e2c887a19b44978b8da734dd0c6119508e4a67e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  protected static String generatePointerName(ProjectSettingsContext context, String version, GroovyLibraryConfigurer configUtils) {\n    final Set<String> usedLibraryNames = CollectionFactory.newTroveSet();\n    for (Library library : getAllDefinedLibraries(((ProjectConfigurableContext)context).getContainer())) {\n      usedLibraryNames.add(library.getName());\n    }\n\n    String originalName = configUtils.getSDKLibPrefix() + version;\n    String newName = originalName;\n    int index = 1;\n    while (usedLibraryNames.contains(newName)) {\n      newName = originalName + \" (\" + index + \")\";\n      index++;\n    }\n    return newName;\n  }","id":68686,"modified_method":"@NotNull\n  protected static String generatePointerName(ProjectSettingsContext context, String version, final String libPrefix) {\n    final Set<String> usedLibraryNames = CollectionFactory.newTroveSet();\n    for (Library library : getAllDefinedLibraries(((ProjectConfigurableContext)context).getContainer())) {\n      usedLibraryNames.add(library.getName());\n    }\n\n    String originalName = libPrefix + version;\n    String newName = originalName;\n    int index = 1;\n    while (usedLibraryNames.contains(newName)) {\n      newName = originalName + \" (\" + index + \")\";\n      index++;\n    }\n    return newName;\n  }","commit_id":"e2c887a19b44978b8da734dd0c6119508e4a67e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    final VirtualFile[] files = container.getLibraryFiles(library, OrderRootType.CLASSES);\n    return GantConfigUtils.isGantLibrary(files) && !GroovyConfigUtils.isGroovyLibrary(files) && !GrailsConfigUtils.containsGrailsJar(files);\n  }","id":68687,"modified_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    return GantConfigUtils.isGantLibrary(container.getLibraryFiles(library, OrderRootType.CLASSES));\n  }","commit_id":"e2c887a19b44978b8da734dd0c6119508e4a67e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Library createLibrary(@NotNull ProjectSettingsContext context) {\n    return createLibrary(context, new GroovyLibraryConfigurer() {\n      @NotNull\n      public String getSDKLibPrefix() {\n        return \"gant-\";\n      }\n\n      public boolean isSDKHome(VirtualFile file) {\n        return GantConfigUtils.isGantSdkHome(file);\n      }\n\n      @NotNull\n      public String getSDKVersion(String path) {\n        return GantConfigUtils.getGantVersion(path);\n      }\n\n      public Library createSDKLibrary(String path, String name, Project project, boolean inModuleSettings, boolean inProject) {\n        return GantConfigUtils.getInstance().createSDKLibImmediately(path, name, project, inModuleSettings, inProject);\n      }\n    }, GantIcons.GANT_ICON_16x16);\n  }","id":68688,"modified_method":"public Library createLibrary(@NotNull ProjectSettingsContext context) {\n    return createLibrary(context, new GroovyLibraryConfigurer() {\n\n      public boolean isSDKHome(VirtualFile file) {\n        return GantConfigUtils.isGantSdkHome(file);\n      }\n\n      @NotNull\n      public String getSDKVersion(String path) {\n        return GantConfigUtils.getGantVersion(path);\n      }\n\n      public Library createSDKLibrary(String path, String name, Project project, boolean inModuleSettings, boolean inProject) {\n        return GantConfigUtils.getInstance().createSDKLibImmediately(path, name, project, inModuleSettings, inProject);\n      }\n    }, GantIcons.GANT_ICON_16x16);\n  }","commit_id":"e2c887a19b44978b8da734dd0c6119508e4a67e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private LibraryManager findManagerFor(@NotNull Library library) {\n    for (final LibraryManager manager : myManagers) {\n      if (manager.managesLibrary(library, myLibrariesContainer)) {\n        return manager;\n      }\n    }\n    return null;\n  }","id":68689,"modified_method":"@Nullable\n  private LibraryManager findManagerFor(@NotNull Library library) {\n    for (final LibraryManager manager : myManagers) {\n      final String name = library.getName();\n      if (name != null && name.startsWith(manager.getLibraryPrefix())) {\n        return manager;\n      }\n    }\n\n    for (final LibraryManager manager : myManagers) {\n      if (manager.managesLibrary(library, myLibrariesContainer)) {\n        return manager;\n      }\n    }\n    return null;\n  }","commit_id":"e2c887a19b44978b8da734dd0c6119508e4a67e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    return GantConfigUtils.containsGantJar(container.getLibraryFiles(library, OrderRootType.CLASSES));\n  }","id":68690,"modified_method":"public boolean managesLibrary(@NotNull Library library, LibrariesContainer container) {\n    VirtualFile[] files = container.getLibraryFiles(library, OrderRootType.CLASSES);\n    return GantConfigUtils.containsGantJar(files) && !GrailsConfigUtils.containsGrailsJar(files);\n  }","commit_id":"7f14d9c842eaf8a672b2c94aaa7a479c028a266c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void performAddAction(final JComponent component, boolean mainOnly) {\n    final Set<ManagedLibrary> managed = getUsedLibraries();\n    final Set<LibraryManager> usedManagers = ContainerUtil.map2Set(managed, new Function<ManagedLibrary, LibraryManager>() {\n      public LibraryManager fun(ManagedLibrary managedLibrary) {\n        return managedLibrary.manager;\n      }\n    });\n    final Set<Library> usedLibraries = ContainerUtil.map2Set(managed, new Function<ManagedLibrary, Library>() {\n      public Library fun(ManagedLibrary managedLibrary) {\n        return managedLibrary.library;\n      }\n    });\n\n    final MultiMap<LibraryManager, ManagedLibrary> libs = new MultiMap<LibraryManager, ManagedLibrary>() {\n      @Override\n      protected Map<LibraryManager, Collection<ManagedLibrary>> createMap() {\n        return new TreeMap<LibraryManager, Collection<ManagedLibrary>>(new Comparator<LibraryManager>() {\n          public int compare(LibraryManager o1, LibraryManager o2) {\n            return Arrays.asList(myManagers).indexOf(o2) - Arrays.asList(myManagers).indexOf(o1);\n          }\n        });\n      }\n    };\n\n    final List<Object> toAdd = CollectionFactory.arrayList();\n    final Map<Object, ListSeparator> separators = CollectionFactory.newTroveMap();\n\n    for (Library library : myLibrariesContainer.getAllLibraries()) {\n      if (!usedLibraries.contains(library)) {\n        final LibraryManager manager = findManagerFor(library);\n        if (manager != null && !usedManagers.contains(manager)) {\n          libs.putValue(manager, new ManagedLibrary(library, manager));\n        }\n      }\n    }\n\n    for (final LibraryManager manager : libs.keySet()) {\n      if (mainOnly && !isGroovyOrGrails(manager)) {\n        continue;\n      }\n\n      boolean separatorSet = false;\n      for (ManagedLibrary library : libs.get(manager)) {\n        if (!separatorSet) {\n          separators.put(library, new ListSeparator(manager.getLibraryCategoryName()));\n          separatorSet = true;\n        }\n        toAdd.add(library);\n      }\n      toAdd.add(manager);\n    }\n\n    JBPopupFactory.getInstance().createListPopup(new ManagedLibrariesPopupStep(toAdd, separators)).showUnderneathOf(component);\n  }","id":68691,"modified_method":"private void performAddAction(final JComponent component, boolean mainOnly) {\n    final Set<ManagedLibrary> managed = getUsedLibraries();\n    final Set<LibraryManager> usedManagers = ContainerUtil.map2Set(managed, new Function<ManagedLibrary, LibraryManager>() {\n      public LibraryManager fun(ManagedLibrary managedLibrary) {\n        return managedLibrary.manager;\n      }\n    });\n    final Set<Library> usedLibraries = ContainerUtil.map2Set(managed, new Function<ManagedLibrary, Library>() {\n      public Library fun(ManagedLibrary managedLibrary) {\n        return managedLibrary.library;\n      }\n    });\n\n    final MultiMap<LibraryManager, ManagedLibrary> libs = new MultiMap<LibraryManager, ManagedLibrary>();\n\n    final List<Object> toAdd = CollectionFactory.arrayList();\n    final Map<Object, ListSeparator> separators = CollectionFactory.newTroveMap();\n\n    for (Library library : myLibrariesContainer.getAllLibraries()) {\n      if (!usedLibraries.contains(library)) {\n        final LibraryManager manager = findManagerFor(library);\n        if (manager != null && !usedManagers.contains(manager)) {\n          libs.putValue(manager, new ManagedLibrary(library, manager));\n        }\n      }\n    }\n\n    for (int i = myManagers.length - 1; i >= 0; i--) {\n      LibraryManager manager = myManagers[i];\n      if (mainOnly && !isGroovyOrGrails(manager)) {\n        continue;\n      }\n      if (usedManagers.contains(manager)) {\n        continue;\n      }\n\n      boolean separatorSet = false;\n      for (ManagedLibrary library : libs.get(manager)) {\n        if (!separatorSet) {\n          separators.put(library, new ListSeparator(manager.getLibraryCategoryName()));\n          separatorSet = true;\n        }\n        toAdd.add(library);\n      }\n      if (!separatorSet) {\n        separators.put(manager, new ListSeparator(manager.getLibraryCategoryName()));\n      }\n      toAdd.add(manager);\n    }\n\n    JBPopupFactory.getInstance().createListPopup(new ManagedLibrariesPopupStep(toAdd, separators)).showUnderneathOf(component);\n  }","commit_id":"7f14d9c842eaf8a672b2c94aaa7a479c028a266c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected RunnerAndConfigurationSettingsImpl createConfigurationByElement(final Location location, final ConfigurationContext context) {\n    final Project project = location.getProject();\n    final PsiElement element = location.getPsiElement();\n    myPackage = checkPackage(element);\n    if (myPackage == null) return null;\n    RunnerAndConfigurationSettingsImpl settings = cloneTemplateConfiguration(project, context);\n    final JUnitConfiguration configuration = (JUnitConfiguration)settings.getConfiguration();\n    final JUnitConfiguration.Data data = configuration.getPersistentData();\n    data.PACKAGE_NAME = myPackage.getQualifiedName();\n    data.TEST_OBJECT = JUnitConfiguration.TEST_PACKAGE;\n    if (data.getScope() != TestSearchScope.WHOLE_PROJECT) {\n      final Module predefinedModule = configuration.getConfigurationModule().getModule();\n      if (predefinedModule == null) {\n        Module module = null;\n        if (element instanceof PsiDirectory) {\n          module = ModuleUtil.findModuleForFile(((PsiDirectory)element).getVirtualFile(), project);\n        }\n        if (module != null) {\n          configuration.setModule(module);\n        }\n        else {\n          data.setScope(TestSearchScope.WHOLE_PROJECT);\n        }\n      }\n    } else {\n      final RunnerAndConfigurationSettingsImpl template =\n        ((RunManagerImpl)context.getRunManager()).getConfigurationTemplate(getConfigurationFactory());\n      final Module selectedModule = context.getModule();\n      if (selectedModule != null) {\n        final ModuleBasedConfiguration templateConfiguration = (ModuleBasedConfiguration)template.getConfiguration();\n        if (templateConfiguration.getConfigurationModule().getModule() == null) {\n          configuration.setModule(selectedModule);\n          data.setScope(TestSearchScope.SINGLE_MODULE);\n        }\n      }\n    }\n    configuration.setGeneratedName();\n    copyStepsBeforeRun(project, configuration);\n    return settings;\n  }","id":68692,"modified_method":"protected RunnerAndConfigurationSettingsImpl createConfigurationByElement(final Location location, final ConfigurationContext context) {\n    final Project project = location.getProject();\n    final PsiElement element = location.getPsiElement();\n    myPackage = checkPackage(element);\n    if (myPackage == null) return null;\n    RunnerAndConfigurationSettingsImpl settings = cloneTemplateConfiguration(project, context);\n    final JUnitConfiguration configuration = (JUnitConfiguration)settings.getConfiguration();\n    final JUnitConfiguration.Data data = configuration.getPersistentData();\n    data.PACKAGE_NAME = myPackage.getQualifiedName();\n    data.TEST_OBJECT = JUnitConfiguration.TEST_PACKAGE;\n    final RunnerAndConfigurationSettingsImpl template =\n        ((RunManagerImpl)context.getRunManager()).getConfigurationTemplate(getConfigurationFactory());\n    if (data.getScope() != TestSearchScope.WHOLE_PROJECT) {\n      final Module contextModule = context.getModule();\n      final Module predefinedModule = ((ModuleBasedConfiguration)template.getConfiguration()).getConfigurationModule().getModule();\n      if (predefinedModule != null) {\n        configuration.setModule(predefinedModule);\n      }\n      else if (contextModule != null) {\n        configuration.setModule(contextModule);\n      }\n      else {\n        data.setScope(TestSearchScope.WHOLE_PROJECT);\n      }\n    }\n    configuration.setGeneratedName();\n    copyStepsBeforeRun(project, configuration);\n    return settings;\n  }","commit_id":"823259ec00163740c58f247cb2e9177ed36c942c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Module loadModuleFromSource(String pkgName, LinkedList<JCCompilationUnit> moduleTrees, List<JCCompilationUnit> parsedTrees) {\n        if(pkgName.isEmpty())\n            return null;\n        String moduleClassName = pkgName + \".module\";\n        JavaFileObject fileObject;\n        try {\n            if(options.get(OptionName.VERBOSE) != null){\n                Log.printLines(log.noticeWriter, \"[Trying to load module \"+moduleClassName+\"]\");\n            }\n            fileObject = fileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH, moduleClassName, Kind.SOURCE);\n            if(options.get(OptionName.VERBOSE) != null){\n                Log.printLines(log.noticeWriter, \"[Got file object: \"+fileObject+\"]\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return loadModuleFromSource(getParentPackage(pkgName), moduleTrees, parsedTrees);\n        }\n        if(fileObject != null){\n            // first make sure we're not already compiling it: this can happen if we have several versions of the\n            // same module already loaded: we will get one which isn't the one we compile, but that's not the one\n            // we really want to compile.\n            for(JCCompilationUnit parsedTree : parsedTrees){\n                if(parsedTree.sourcefile.equals(fileObject)\n                        && parsedTree instanceof CeylonCompilationUnit){\n                    // same file! we already parsed it, let's return this one's module\n                    PhasedUnit phasedUnit = ((CeylonCompilationUnit)parsedTree).phasedUnit;\n                    // the module visitor does load the module but does not set the unit's package module\n                    if(phasedUnit.getPackage().getModule() == null){\n                        // so find the module it created\n                        for(Module mod : ceylonContext.getModules().getListOfModules()){\n                            // we recognise it with the unit\n                            if(mod.getUnit() == phasedUnit.getUnit()){\n                                // set the package's module\n                                phasedUnit.getPackage().setModule(mod);\n                                modulesLoadedFromSource.add(mod);\n                                break;\n                            }\n                        }\n                    }\n                    // now return it\n                    return phasedUnit.getPackage().getModule();\n                }\n            }\n            CeylonCompilationUnit ceylonCompilationUnit = (CeylonCompilationUnit) parse(fileObject);\n            moduleTrees.add(ceylonCompilationUnit);\n            // parse the module info from there\n            Module module = ceylonCompilationUnit.phasedUnit.visitSrcModulePhase();\n            ceylonCompilationUnit.phasedUnit.visitRemainingModulePhase();\n            // now try to obtain the parsed module\n            if(module != null){\n                ceylonCompilationUnit.phasedUnit.getPackage().setModule(module);\n                modulesLoadedFromSource.add(module);\n                return module;\n            }\n        }\n        return loadModuleFromSource(getParentPackage(pkgName), moduleTrees, parsedTrees);\n    }","id":68693,"modified_method":"private Module loadModuleFromSource(String pkgName, LinkedList<JCCompilationUnit> moduleTrees, List<JCCompilationUnit> parsedTrees) {\n        if(pkgName.isEmpty())\n            return null;\n        String moduleClassName = pkgName + \".module\";\n        JavaFileObject fileObject;\n        try {\n            if(options.get(OptionName.VERBOSE) != null){\n                Log.printLines(log.noticeWriter, \"[Trying to load module \"+moduleClassName+\"]\");\n            }\n            fileObject = fileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH, moduleClassName, Kind.SOURCE);\n            if(options.get(OptionName.VERBOSE) != null){\n                Log.printLines(log.noticeWriter, \"[Got file object: \"+fileObject+\"]\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return loadModuleFromSource(getParentPackage(pkgName), moduleTrees, parsedTrees);\n        }\n        if(fileObject != null){\n            // first make sure we're not already compiling it: this can happen if we have several versions of the\n            // same module already loaded: we will get one which isn't the one we compile, but that's not the one\n            // we really want to compile.\n            for(JCCompilationUnit parsedTree : parsedTrees){\n                if(parsedTree.sourcefile.equals(fileObject)\n                        && parsedTree instanceof CeylonCompilationUnit){\n                    // same file! we already parsed it, let's return this one's module\n                    PhasedUnit phasedUnit = ((CeylonCompilationUnit)parsedTree).phasedUnit;\n                    // the module visitor does load the module but does not set the unit's package module\n                    if(phasedUnit.getPackage().getModule() == null){\n                        // so find the module it created\n                        for(Module mod : ceylonContext.getModules().getListOfModules()){\n                            // we recognise it with the unit\n                            if(mod.getUnit() == phasedUnit.getUnit()){\n                                // set the package's module\n                                phasedUnit.getPackage().setModule(mod);\n                                modulesLoadedFromSource.add(mod);\n                                break;\n                            }\n                        }\n                    }\n                    // now return it\n                    return phasedUnit.getPackage().getModule();\n                }\n            }\n            JCCompilationUnit javaCompilationUnit = parse(fileObject);\n            Module module;\n            if(javaCompilationUnit instanceof CeylonCompilationUnit){\n                CeylonCompilationUnit ceylonCompilationUnit = (CeylonCompilationUnit) javaCompilationUnit;\n                moduleTrees.add(ceylonCompilationUnit);\n                // parse the module info from there\n                module = ceylonCompilationUnit.phasedUnit.visitSrcModulePhase();\n                ceylonCompilationUnit.phasedUnit.visitRemainingModulePhase();\n                // now set the module\n                if(module != null){\n                    ceylonCompilationUnit.phasedUnit.getPackage().setModule(module);\n                }\n            }else{\n                // there was a syntax error in the module descriptor, make a pretend module so that we can\n                // correctly mark all declarations as part of that module, but we won't generate any code\n                // for it\n                ModuleManager moduleManager = phasedUnits.getModuleManager();\n                module = moduleManager.getOrCreateModule(Arrays.asList(pkgName.split(\"\\\\.\")), \"bogus\");\n            }\n            // now remember it\n            if(module != null){\n                modulesLoadedFromSource.add(module);\n                return module;\n            }\n        }\n        return loadModuleFromSource(getParentPackage(pkgName), moduleTrees, parsedTrees);\n    }","commit_id":"885eb368469e1e2ed95d13cee2dac62a971fa253","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n  protected VirtualFileBasedTrace newAbstractTrace(final VirtualFileInProject file) {\n    final VirtualFileBasedTrace result = this.traceProvider.get();\n    result.setLocalStorage(file);\n    IProjectConfig _projectConfig = this.getProjectConfig(file);\n    Module _module = ((IdeaModuleConfig) _projectConfig).getModule();\n    result.setModule(_module);\n    return result;\n  }","id":68694,"modified_method":"@Override\n  protected VirtualFileBasedTrace newAbstractTrace(final VirtualFileInProject file) {\n    final VirtualFileBasedTrace result = this.traceProvider.get();\n    result.setLocalStorage(file);\n    JarFileSystem _instance = JarFileSystem.getInstance();\n    VirtualFile _file = file.getFile();\n    final VirtualFile jarRoot = _instance.getRootByEntry(_file);\n    boolean _notEquals = (!Objects.equal(jarRoot, null));\n    if (_notEquals) {\n      result.setJarRoot(jarRoot);\n    } else {\n      IProjectConfig _projectConfig = this.getProjectConfig(file);\n      Module _module = null;\n      if (((IdeaModuleConfig) _projectConfig)!=null) {\n        _module=((IdeaModuleConfig) _projectConfig).getModule();\n      }\n      result.setModule(_module);\n    }\n    return result;\n  }","commit_id":"01dc02f7bc1dfc3cdb816f3956daf0fba05dc94f","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n  public SourceRelativeURI getGeneratedUriForTrace(final IProjectConfig projectConfig, final AbsoluteURI absoluteSourceResource, final AbsoluteURI generatedFileURI, final ITraceURIConverter traceURIConverter) {\n    final Module module = ((IdeaModuleConfig) projectConfig).getModule();\n    IResourceServiceProvider _serviceProvider = this.getServiceProvider(absoluteSourceResource);\n    final IdeaOutputConfigurationProvider outputConfigurationProvider = _serviceProvider.<IdeaOutputConfigurationProvider>get(IdeaOutputConfigurationProvider.class);\n    final Set<OutputConfiguration> outputConfigurations = outputConfigurationProvider.getOutputConfigurations(module);\n    URI _uRI = absoluteSourceResource.getURI();\n    final ISourceFolder sourceFolder = projectConfig.findSourceFolderContaining(_uRI);\n    OutputConfiguration _head = IterableExtensions.<OutputConfiguration>head(outputConfigurations);\n    String _name = sourceFolder.getName();\n    final String outputFolder = _head.getOutputDirectory(_name);\n    VirtualFile _xifexpression = null;\n    boolean _isAbsolutePath = this.isAbsolutePath(outputFolder);\n    if (_isAbsolutePath) {\n      VirtualFileManager _instance = VirtualFileManager.getInstance();\n      String _pathToUrl = VfsUtilCore.pathToUrl(outputFolder);\n      _xifexpression = _instance.findFileByUrl(_pathToUrl);\n    } else {\n      VirtualFile _xblockexpression = null;\n      {\n        ModuleRootManager _instance_1 = ModuleRootManager.getInstance(module);\n        VirtualFile[] _contentRoots = _instance_1.getContentRoots();\n        final VirtualFile contentRoot = IterableExtensions.<VirtualFile>head(((Iterable<VirtualFile>)Conversions.doWrapArray(_contentRoots)));\n        _xblockexpression = contentRoot.findFileByRelativePath(outputFolder);\n      }\n      _xifexpression = _xblockexpression;\n    }\n    final VirtualFile outputSourceFolder = _xifexpression;\n    boolean _or = false;\n    if ((outputSourceFolder == null)) {\n      _or = true;\n    } else {\n      boolean _exists = outputSourceFolder.exists();\n      boolean _not = (!_exists);\n      _or = _not;\n    }\n    if (_or) {\n      final SourceRelativeURI result = super.getGeneratedUriForTrace(projectConfig, absoluteSourceResource, generatedFileURI, traceURIConverter);\n      return result;\n    }\n    final URI sourceFolderURI = VirtualFileURIUtil.getURI(outputSourceFolder);\n    final SourceRelativeURI result_1 = generatedFileURI.deresolve(sourceFolderURI);\n    return result_1;\n  }","id":68695,"modified_method":"@Override\n  public SourceRelativeURI getGeneratedUriForTrace(final IProjectConfig projectConfig, final AbsoluteURI absoluteSourceResource, final AbsoluteURI generatedFileURI, final ITraceURIConverter traceURIConverter) {\n    final Module module = ((IdeaModuleConfig) projectConfig).getModule();\n    IResourceServiceProvider _serviceProvider = this.getServiceProvider(absoluteSourceResource);\n    final IdeaOutputConfigurationProvider outputConfigurationProvider = _serviceProvider.<IdeaOutputConfigurationProvider>get(IdeaOutputConfigurationProvider.class);\n    final Set<OutputConfiguration> outputConfigurations = outputConfigurationProvider.getOutputConfigurations(module);\n    URI _uRI = absoluteSourceResource.getURI();\n    final ISourceFolder sourceFolder = projectConfig.findSourceFolderContaining(_uRI);\n    OutputConfiguration _head = IterableExtensions.<OutputConfiguration>head(outputConfigurations);\n    String _name = sourceFolder.getName();\n    final String outputFolder = _head.getOutputDirectory(_name);\n    Application _application = ApplicationManager.getApplication();\n    final Computable<VirtualFile> _function = new Computable<VirtualFile>() {\n      @Override\n      public VirtualFile compute() {\n        boolean _isAbsolutePath = TraceForVirtualFileProvider.this.isAbsolutePath(outputFolder);\n        if (_isAbsolutePath) {\n          VirtualFileManager _instance = VirtualFileManager.getInstance();\n          String _pathToUrl = VfsUtilCore.pathToUrl(outputFolder);\n          return _instance.findFileByUrl(_pathToUrl);\n        } else {\n          ModuleRootManager _instance_1 = ModuleRootManager.getInstance(module);\n          VirtualFile[] _contentRoots = _instance_1.getContentRoots();\n          for (final VirtualFile contentRoot : _contentRoots) {\n            {\n              final VirtualFile result = contentRoot.findFileByRelativePath(outputFolder);\n              boolean _notEquals = (!Objects.equal(result, null));\n              if (_notEquals) {\n                return result;\n              }\n            }\n          }\n          return null;\n        }\n      }\n    };\n    final VirtualFile outputSourceFolder = _application.<VirtualFile>runReadAction(_function);\n    boolean _or = false;\n    if ((outputSourceFolder == null)) {\n      _or = true;\n    } else {\n      boolean _exists = outputSourceFolder.exists();\n      boolean _not = (!_exists);\n      _or = _not;\n    }\n    if (_or) {\n      final SourceRelativeURI result = super.getGeneratedUriForTrace(projectConfig, absoluteSourceResource, generatedFileURI, traceURIConverter);\n      return result;\n    }\n    final URI sourceFolderURI = VirtualFileURIUtil.getURI(outputSourceFolder);\n    final SourceRelativeURI result_1 = generatedFileURI.deresolve(sourceFolderURI);\n    return result_1;\n  }","commit_id":"01dc02f7bc1dfc3cdb816f3956daf0fba05dc94f","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n    public long getTimestamp() {\n      return this.file.getTimeStamp();\n    }","id":68696,"modified_method":"@Override\n    public long getTimestamp() {\n      return this.file.getModificationStamp();\n    }","commit_id":"01dc02f7bc1dfc3cdb816f3956daf0fba05dc94f","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n  public AbsoluteURI resolvePath(final SourceRelativeURI path) {\n    boolean _isTraceToTarget = this.isTraceToTarget();\n    if (_isTraceToTarget) {\n      final Set<OutputConfiguration> outputConfigurations = this.outputConfigurationProvider.getOutputConfigurations(this.module);\n      IdeaModuleConfig _localProjectConfig = this.getLocalProjectConfig();\n      final Set<? extends ISourceFolder> sourceFolders = _localProjectConfig.getSourceFolders();\n      ModuleRootManager _instance = ModuleRootManager.getInstance(this.module);\n      VirtualFile[] _contentRoots = _instance.getContentRoots();\n      final VirtualFile contentRoot = IterableExtensions.<VirtualFile>head(((Iterable<VirtualFile>)Conversions.doWrapArray(_contentRoots)));\n      for (final ISourceFolder sourceFolder : sourceFolders) {\n        {\n          OutputConfiguration _head = IterableExtensions.<OutputConfiguration>head(outputConfigurations);\n          String _name = sourceFolder.getName();\n          String _outputDirectory = _head.getOutputDirectory(_name);\n          final VirtualFile outputFolder = contentRoot.findFileByRelativePath(_outputDirectory);\n          if ((outputFolder != null)) {\n            URI _uRI = path.getURI();\n            String _string = _uRI.toString();\n            final VirtualFile file = outputFolder.findFileByRelativePath(_string);\n            if ((file != null)) {\n              URI _uRI_1 = VirtualFileURIUtil.getURI(file);\n              return new AbsoluteURI(_uRI_1);\n            }\n          }\n        }\n      }\n    }\n    return super.resolvePath(path);\n  }","id":68697,"modified_method":"@Override\n  public AbsoluteURI resolvePath(final SourceRelativeURI path) {\n    boolean _notEquals = (!Objects.equal(this.jarRoot, null));\n    if (_notEquals) {\n      String _string = path.toString();\n      final VirtualFile child = this.jarRoot.findFileByRelativePath(_string);\n      final URI uri = VirtualFileURIUtil.getURI(child);\n      return new AbsoluteURI(uri);\n    } else {\n      boolean _and = false;\n      boolean _isTraceToTarget = this.isTraceToTarget();\n      if (!_isTraceToTarget) {\n        _and = false;\n      } else {\n        boolean _notEquals_1 = (!Objects.equal(this.module, null));\n        _and = _notEquals_1;\n      }\n      if (_and) {\n        final Set<OutputConfiguration> outputConfigurations = this.outputConfigurationProvider.getOutputConfigurations(this.module);\n        IdeaModuleConfig _localProjectConfig = this.getLocalProjectConfig();\n        final Set<? extends ISourceFolder> sourceFolders = _localProjectConfig.getSourceFolders();\n        ModuleRootManager _instance = ModuleRootManager.getInstance(this.module);\n        VirtualFile[] _contentRoots = _instance.getContentRoots();\n        for (final VirtualFile contentRoot : _contentRoots) {\n          for (final ISourceFolder sourceFolder : sourceFolders) {\n            {\n              OutputConfiguration _head = IterableExtensions.<OutputConfiguration>head(outputConfigurations);\n              String _name = sourceFolder.getName();\n              String _outputDirectory = _head.getOutputDirectory(_name);\n              final VirtualFile outputFolder = contentRoot.findFileByRelativePath(_outputDirectory);\n              if ((outputFolder != null)) {\n                URI _uRI = path.getURI();\n                String _string_1 = _uRI.toString();\n                final VirtualFile file = outputFolder.findFileByRelativePath(_string_1);\n                if ((file != null)) {\n                  URI _uRI_1 = VirtualFileURIUtil.getURI(file);\n                  return new AbsoluteURI(_uRI_1);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return super.resolvePath(path);\n  }","commit_id":"01dc02f7bc1dfc3cdb816f3956daf0fba05dc94f","url":"https://github.com/eclipse/xtext"},{"original_method":"private static void logError(Language language, PsiLanguageInjectionHost host, TextRange textRange, Throwable e) {\n      final Logger log = Logger.getInstance(CustomLanguageInjector.class.getName());\n      final String place = host.toString() +\n                           \": [\" +\n                           (host.getText()) +\n                           \" - \" +\n                           textRange +\n                           \"]\";\n      log.info(\"Failed to inject language '\" + language.getID() + \"' into '\" + place + \"'. Possibly there are overlapping injection areas.\",\n               e);\n    }","id":68698,"modified_method":"private static void logError(Language language, @NotNull PsiElement host, TextRange textRange, Throwable e) {\n      final String place = \"[\" + host.getText() + \" - \" + textRange + \"]\";\n      LOG.info(\"Failed to inject language '\" + language.getID() + \"' into '\" + place + \"'. Possibly there are overlapping injection areas.\", e);\n    }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void getLanguagesToInject(@NotNull final MultiHostRegistrar registrar, @NotNull final PsiElement host) {\n      final TreeSet<TextRange> ranges = new TreeSet<TextRange>(new Comparator<TextRange>() {\n        public int compare(final TextRange o1, final TextRange o2) {\n          if (o1.intersects(o2)) return 0;\n          return o1.getStartOffset() - o2.getStartOffset();\n        }\n      });\n      myInjector.getInjectedLanguage(host, new PairProcessor<Language, List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>>() {\n        public boolean process(final Language language, List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> list) {\n          // if language isn't injected when length == 0, subsequent edits will not cause the language to be injected as well.\n          // Maybe IDEA core is caching a bit too aggressively here?\n          if (language != null/* && (pair.second.getLength() > 0*/) {\n            try {\n              // do not handle overlapping injections\n              for (Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange> pair : list) {\n                if (ranges.contains(pair.third)) return true;\n              }\n              registrar.startInjecting(language);\n              for (Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange> pair : list) {\n                final PsiLanguageInjectionHost host = pair.first;\n                final TextRange textRange = pair.third;\n                final InjectedLanguage injectedLanguage = pair.second;\n                ranges.add(textRange);\n                if (injectedLanguage.isDynamic()) {\n                  // Only adjust prefix/suffix if it has been computed dynamically. Otherwise some other\n                  // useful cases may break. This system is far from perfect still...\n                  final StringBuilder prefix = new StringBuilder(injectedLanguage.getPrefix());\n                  final StringBuilder suffix = new StringBuilder(injectedLanguage.getSuffix());\n                  adjustPrefixAndSuffix(getUnescapedText(host, textRange.substring(host.getText())), prefix, suffix);\n\n                  addPlaceSafe(registrar, language, host, textRange, prefix.toString(), suffix.toString());\n                }\n                else {\n                  addPlaceSafe(registrar, language, host, textRange, injectedLanguage.getPrefix(), injectedLanguage.getSuffix());\n                }\n              }\n            }\n            finally {\n              registrar.doneInjecting();\n            }\n          }\n          return true;\n        }\n      });\n    }","id":68699,"modified_method":"public void getLanguagesToInject(@NotNull final MultiHostRegistrar registrar, @NotNull final PsiElement host) {\n      final TreeSet<TextRange> ranges = new TreeSet<TextRange>(new Comparator<TextRange>() {\n        public int compare(final TextRange o1, final TextRange o2) {\n          if (o1.intersects(o2)) return 0;\n          return o1.getStartOffset() - o2.getStartOffset();\n        }\n      });\n      myInjector.getInjectedLanguage(host, new PairProcessor<Language, List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>>() {\n        public boolean process(final Language language, List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> list) {\n          // if language isn't injected when length == 0, subsequent edits will not cause the language to be injected as well.\n          // Maybe IDEA core is caching a bit too aggressively here?\n          if (language != null/* && (pair.second.getLength() > 0*/) {\n            try {\n              // do not handle overlapping injections\n              for (Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange> pair : list) {\n                if (ranges.contains(pair.third)) return true;\n              }\n              registrar.startInjecting(language);\n              for (Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange> pair : list) {\n                final PsiLanguageInjectionHost host = pair.first;\n                final TextRange textRange = pair.third;\n                final InjectedLanguage injectedLanguage = pair.second;\n                ranges.add(textRange);\n                if (injectedLanguage.isDynamic()) {\n                  // Only adjust prefix/suffix if it has been computed dynamically. Otherwise some other\n                  // useful cases may break. This system is far from perfect still...\n                  final StringBuilder prefix = new StringBuilder(injectedLanguage.getPrefix());\n                  final StringBuilder suffix = new StringBuilder(injectedLanguage.getSuffix());\n                  adjustPrefixAndSuffix(getUnescapedText(host, textRange.substring(host.getText())), prefix, suffix);\n\n                  addPlaceSafe(registrar, language, host, textRange, prefix.toString(), suffix.toString());\n                }\n                else {\n                  addPlaceSafe(registrar, language, host, textRange, injectedLanguage.getPrefix(), injectedLanguage.getSuffix());\n                }\n              }\n            }\n            finally {\n              try {\n                registrar.doneInjecting();\n              }\n              catch (AssertionError e) {\n                logError(language, host, null, e);\n              }\n              catch (Exception e) {\n                logError(language, host, null, e);\n              }\n            }\n          }\n          return true;\n        }\n      });\n    }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void readExternalImpl(Element e) throws InvalidDataException {\n    setClassName(JDOMExternalizer.readString(e, \"CLASS\"));\n    setApplyInHierarchy(JDOMExternalizer.readBoolean(e, \"APPLY_IN_HIERARCHY\"));\n    readOldFormat(e);\n    final THashMap<String, String> map = new THashMap<String, String>();\n    JDOMExternalizer.readMap(e, map, null, \"SIGNATURES\");\n    for (String s : map.keySet()) {\n      myParameterMap.put(s, new MethodInfo(s, map.get(s)));\n    }\n  }","id":68700,"modified_method":"protected void readExternalImpl(Element e) throws InvalidDataException {\n    setClassName(JDOMExternalizer.readString(e, \"CLASS\"));\n    setApplyInHierarchy(JDOMExternalizer.readBoolean(e, \"APPLY_IN_HIERARCHY\"));\n    readOldFormat(e);\n    final THashMap<String, String> map = new THashMap<String, String>();\n    JDOMExternalizer.readMap(e, map, null, \"SIGNATURES\");\n    for (String s : map.keySet()) {\n      final String fixedSignature = fixSignature(s, false);\n      myParameterMap.put(fixedSignature, new MethodInfo(fixedSignature, map.get(s)));\n    }\n  }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void readOldFormat(final Element e) throws InvalidDataException {\n    final JDOMExternalizableStringList list = new JDOMExternalizableStringList();\n    list.readExternal(e);\n    if (list.isEmpty()) return;\n    final boolean[] selection = new boolean[list.size()];\n    for (int i = 0; i < list.size(); i++) {\n      selection[i] = Boolean.parseBoolean(list.get(i));\n    }\n    final String methodSignature = JDOMExternalizer.readString(e, \"METHOD\");\n    myParameterMap.put(methodSignature, new MethodInfo(methodSignature, selection));\n  }","id":68701,"modified_method":"private void readOldFormat(final Element e) throws InvalidDataException {\n    final JDOMExternalizableStringList list = new JDOMExternalizableStringList();\n    list.readExternal(e);\n    if (list.isEmpty()) return;\n    final boolean[] selection = new boolean[list.size()];\n    for (int i = 0; i < list.size(); i++) {\n      selection[i] = Boolean.parseBoolean(list.get(i));\n    }\n    final String methodSignature = fixSignature(JDOMExternalizer.readString(e, \"METHOD\"), false);\n    myParameterMap.put(methodSignature, new MethodInfo(methodSignature, selection));\n  }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private PsiMethod makeMethod(String signature) {\n    try {\n      if (signature.trim().length() > 0) {\n        final JavaPsiFacade facade = JavaPsiFacade.getInstance(myProject);\n        final PsiElementFactory ef = facade.getElementFactory();\n        return ef.createMethodFromText(\"void \" + signature + \"{}\", null);\n      }\n    }\n    catch (IncorrectOperationException e) {\n      // signature is not in form NAME(TYPE NAME)\n    }\n    return null;\n  }","id":68702,"modified_method":"@Nullable\n  private PsiMethod makeMethod(String signature) {\n    if (StringUtil.isEmpty(signature)) return null;\n    try {\n      return JavaPsiFacade.getInstance(myProject).getElementFactory().\n          createMethodFromText(\"void \" + MethodParameterInjection.fixSignature(signature, true) + \"{}\", null);\n    }\n    catch (IncorrectOperationException e) {\n      // something wrong\n    }\n    return null;\n  }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static String buildSignature(@NotNull PsiMethod method) {\n    final PsiParameterList list = method.getParameterList();\n    final PsiParameter[] parameters = list.getParameters();\n    final String s;\n    if (parameters.length > 0) {\n      // if there are no sources, parameter names are unknown. This trick gives the \"decompiled\" names\n      if (list instanceof ClsParameterListImpl && parameters[0].getName() == null) {\n        s = method.getName() + list.getText();\n      }\n      else {\n        s = PsiFormatUtil.formatMethod(method, PsiSubstitutor.EMPTY, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,\n                                       PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_FQ_CLASS_NAMES);\n      }\n    }\n    else {\n      s = PsiFormatUtil.formatMethod(method, PsiSubstitutor.EMPTY, PsiFormatUtil.SHOW_NAME, 0) + \"()\";\n    }\n    return s;\n  }","id":68703,"modified_method":"@NotNull\n  private static String buildSignature(@NotNull PsiMethod method) {\n    return PsiFormatUtil.formatMethod(method, PsiSubstitutor.EMPTY, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,\n                                      PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_FQ_CLASS_NAMES);\n  }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public MethodParameterPanel(MethodParameterInjection injection, final Project project) {\n    super(injection, project);\n\n    myClassField = new ReferenceEditorWithBrowseButton(new BrowseClassListener(project), project, new Function<String, Document>() {\n      public Document fun(String s) {\n        final Document document = ReferenceEditorWithBrowseButton.createTypeDocument(s, PsiManager.getInstance(project));\n        document.addDocumentListener(new DocumentAdapter() {\n          @Override\n          public void documentChanged(final DocumentEvent e) {\n            updateParamTree();\n            updateTree();\n          }\n        });\n        return document;\n      }\n    }, \"\");\n    myClassPanel.add(myClassField, BorderLayout.CENTER);\n    myParamsTable.getTree().setShowsRootHandles(true);\n    myParamsTable.getTree().setCellRenderer(new ColoredTreeCellRenderer() {\n\n      public void customizeCellRenderer(final JTree tree,\n                                        final Object value,\n                                        final boolean selected,\n                                        final boolean expanded,\n                                        final boolean leaf,\n                                        final int row,\n                                        final boolean hasFocus) {\n\n        final Object o = ((DefaultMutableTreeNode)value).getUserObject();\n        setIcon(o instanceof PsiMethod ? Icons.METHOD_ICON : o instanceof PsiParameter ? Icons.PARAMETER_ICON : null);\n        final String name = o instanceof PsiMethod\n                            ? PsiFormatUtil.formatMethod((PsiMethod)o, PsiSubstitutor.EMPTY,\n                                                         PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS, PsiFormatUtil.SHOW_NAME)\n                            : o instanceof PsiParameter\n                              ? PsiFormatUtil\n                                .formatVariable((PsiParameter)o, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE, PsiSubstitutor.EMPTY)\n                              : null;\n        final boolean missing = o instanceof PsiElement && !((PsiElement)o).isPhysical();\n        if (name != null) {\n          append(name, missing? SimpleTextAttributes.ERROR_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);\n        }\n      }\n\n    });\n    init(injection.copy());\n    PeerFactory.getInstance().getUIHelper().installTreeTableSpeedSearch(myParamsTable, new Convertor<TreePath, String>() {\n      @Nullable\n      public String convert(final TreePath o) {\n        final Object userObject = ((DefaultMutableTreeNode)o.getLastPathComponent()).getUserObject();\n        return userObject instanceof PsiNamedElement? ((PsiNamedElement)userObject).getName() : null;\n      }\n    });\n  }","id":68704,"modified_method":"public MethodParameterPanel(MethodParameterInjection injection, final Project project) {\n    super(injection, project);\n\n    myClassField = new ReferenceEditorWithBrowseButton(new BrowseClassListener(project), project, new Function<String, Document>() {\n      public Document fun(String s) {\n        final Document document = ReferenceEditorWithBrowseButton.createTypeDocument(s, PsiManager.getInstance(project));\n        document.addDocumentListener(new DocumentAdapter() {\n          @Override\n          public void documentChanged(final DocumentEvent e) {\n            updateParamTree();\n            updateTree();\n          }\n        });\n        return document;\n      }\n    }, \"\");\n    myClassPanel.add(myClassField, BorderLayout.CENTER);\n    myParamsTable.getTree().setShowsRootHandles(true);\n    myParamsTable.getTree().setCellRenderer(new ColoredTreeCellRenderer() {\n\n      public void customizeCellRenderer(final JTree tree,\n                                        final Object value,\n                                        final boolean selected,\n                                        final boolean expanded,\n                                        final boolean leaf,\n                                        final int row,\n                                        final boolean hasFocus) {\n\n        final Object o = ((DefaultMutableTreeNode)value).getUserObject();\n        setIcon(o instanceof PsiMethod ? Icons.METHOD_ICON : o instanceof PsiParameter ? Icons.PARAMETER_ICON : null);\n        final String name;\n        if (o instanceof PsiMethod) {\n          final PsiMethod method = (PsiMethod)o;\n          name = PsiFormatUtil.formatMethod(method, PsiSubstitutor.EMPTY, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,\n                                            PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE);\n        }\n        else if (o instanceof PsiParameter) {\n          final PsiParameter parameter = (PsiParameter)o;\n          name = PsiFormatUtil.formatVariable(parameter, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE, PsiSubstitutor.EMPTY);\n        }\n        else name = null;\n        final boolean missing = o instanceof PsiElement && !((PsiElement)o).isPhysical();\n        if (name != null) {\n          append(name, missing? SimpleTextAttributes.ERROR_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);\n        }\n      }\n\n    });\n    init(injection.copy());\n    PeerFactory.getInstance().getUIHelper().installTreeTableSpeedSearch(myParamsTable, new Convertor<TreePath, String>() {\n      @Nullable\n      public String convert(final TreePath o) {\n        final Object userObject = ((DefaultMutableTreeNode)o.getLastPathComponent()).getUserObject();\n        return userObject instanceof PsiNamedElement? ((PsiNamedElement)userObject).getName() : null;\n      }\n    });\n  }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void refreshTreeStructure() {\n    myRootNode.removeAllChildren();\n    final ArrayList<PsiMethod> methods = new ArrayList<PsiMethod>(myData.keySet());\n    Collections.sort(methods, new Comparator<PsiMethod>() {\n      public int compare(final PsiMethod o1, final PsiMethod o2) {\n        return o1.getName().compareTo(o2.getName());\n      }\n    });\n    for (PsiMethod method : methods) {\n      final PsiParameter[] params = method.getParameterList().getParameters();\n      final DefaultMutableTreeNode methodNode = new DefaultMutableTreeNode(method, true);\n      myRootNode.add(methodNode);\n      for (final PsiParameter parameter : params) {\n        methodNode.add(new DefaultMutableTreeNode(parameter, false));\n      }\n    }\n    final ListTreeTableModelOnColumns tableModel = (ListTreeTableModelOnColumns)myParamsTable.getTableModel();\n    tableModel.reload();\n    TreeUtil.expandAll(myParamsTable.getTree());\n    myParamsTable.revalidate();\n  }","id":68705,"modified_method":"private void refreshTreeStructure() {\n    myRootNode.removeAllChildren();\n    final ArrayList<PsiMethod> methods = new ArrayList<PsiMethod>(myData.keySet());\n    Collections.sort(methods, new Comparator<PsiMethod>() {\n      public int compare(final PsiMethod o1, final PsiMethod o2) {\n        final int names = o1.getName().compareTo(o2.getName());\n        if (names != 0) return names;\n        return o1.getParameterList().getParametersCount() - o2.getParameterList().getParametersCount();\n      }\n    });\n    for (PsiMethod method : methods) {\n      final PsiParameter[] params = method.getParameterList().getParameters();\n      final DefaultMutableTreeNode methodNode = new DefaultMutableTreeNode(method, true);\n      myRootNode.add(methodNode);\n      for (final PsiParameter parameter : params) {\n        methodNode.add(new DefaultMutableTreeNode(parameter, false));\n      }\n    }\n    final ListTreeTableModelOnColumns tableModel = (ListTreeTableModelOnColumns)myParamsTable.getTableModel();\n    tableModel.reload();\n    TreeUtil.expandAll(myParamsTable.getTree());\n    myParamsTable.revalidate();\n  }","commit_id":"ea4a458be96741d446db16a47ff3f00a1199da69","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getPresentableText() {\n    return StringUtil.replace(PsiFormatUtil.formatMethod(\n      getElement(),\n      PsiSubstitutor.EMPTY, PsiFormatUtilBase.SHOW_NAME |\n                            PsiFormatUtilBase.SHOW_TYPE | PsiFormatUtilBase.TYPE_AFTER | PsiFormatUtilBase.SHOW_PARAMETERS,\n      PsiFormatUtilBase.SHOW_TYPE\n    ), \":\", \": \");\n  }","id":68706,"modified_method":"public String getPresentableText() {\n    String method = PsiFormatUtil.formatMethod(getElement(),\n                                               PsiSubstitutor.EMPTY,\n                                               SHOW_NAME | SHOW_TYPE | TYPE_AFTER | SHOW_PARAMETERS,\n                                               SHOW_TYPE);\n    return StringUtil.replace(method, \":\", \": \");\n  }","commit_id":"18519f50353090e70372c1aa47f9c2a7d11b2627","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public String getLocationPrefix() {\n    return \" \\u2191\";\n  }","id":68707,"modified_method":"@Override\n  public String getLocationPrefix() {\n    return \" \";\n  }","commit_id":"18519f50353090e70372c1aa47f9c2a7d11b2627","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public String getLocationString() {\n    if (!Registry.is(\"show.method.base.class.in.java.file.structure\")) return null;\n    if (myLocation == null) {\n      final PsiMethod method = getElement();\n      try {\n        final MethodSignatureBackedByPsiMethod baseMethod = SuperMethodsSearch.search(method, null, true, false).findFirst();\n        if (baseMethod != null && !method.isEquivalentTo(baseMethod.getMethod())) {\n          PsiMethod base = baseMethod.getMethod();\n          PsiClass baseClass = base.getContainingClass();\n          if (baseClass != null && !CommonClassNames.JAVA_LANG_OBJECT.equals(baseClass.getQualifiedName())) {\n            if (baseClass.getMethods().length > 1) {\n              myLocation = baseClass.getName();\n            }\n          }\n        }\n      }\n      catch (IndexNotReadyException e) {\n        //some searchers (EJB) require indices. What shall we do?\n      }\n\n      if (myLocation == null) {\n        myLocation = \"\";\n      }\n    }\n    return StringUtil.isEmpty(myLocation) ? null : myLocation;\n  }","id":68708,"modified_method":"@Override\n  public String getLocationString() {\n    if (!Registry.is(\"show.method.base.class.in.java.file.structure\")) return null;\n    if (myLocation == null) {\n      final PsiMethod method = getElement();\n      try {\n        final MethodSignatureBackedByPsiMethod baseMethod = SuperMethodsSearch.search(method, null, true, false).findFirst();\n        if (baseMethod != null && !method.isEquivalentTo(baseMethod.getMethod())) {\n          PsiMethod base = baseMethod.getMethod();\n          PsiClass baseClass = base.getContainingClass();\n          if (baseClass != null && !CommonClassNames.JAVA_LANG_OBJECT.equals(baseClass.getQualifiedName())) {\n            if (baseClass.getMethods().length > 1) {\n              myLocation = baseClass.getName();\n            }\n          }\n        }\n      }\n      catch (IndexNotReadyException e) {\n        //some searchers (EJB) require indices. What shall we do?\n      }\n\n      if (StringUtil.isEmpty(myLocation)) {\n        myLocation = \"\";\n      } else {\n        char upArrow = '\\u2191';\n        myLocation = UIUtil.getLabelFont().canDisplay(upArrow) ? upArrow + myLocation : myLocation;\n      }\n    }\n    return StringUtil.isEmpty(myLocation) ? null : myLocation;\n  }","commit_id":"18519f50353090e70372c1aa47f9c2a7d11b2627","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testTypeParams() {\n    doTest(\"class Test {\\n\" +\n           \"  <T> void <caret>sort(T[] a, Comparator<? super T> c) { }\\n\" +\n           \"}\\n\" +\n           \"class Comparator<X>{}\",\n\n           \"sort(T[], Comparator)\", \"sort(T[], Comparator<? super T>)\");\n  }","id":68709,"modified_method":"public void testTypeParams() {\n    doTest(\"class Test {\\n\" +\n           \"  <T> void <caret>sort(T[] a, Comparator<? super T> c) { }\\n\" +\n           \"}\\n\" +\n           \"class Comparator<X>{}\",\n\n           \"sort-T:A-Comparator-\", \"sort-T:A-Comparator<? super T>-\");\n  }","commit_id":"a16d50baa65880b07ce6a2a34314726dfb9607d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void doTest(String text, String... expected) {\n    myFixture.configureByText(\"Test.java\", text);\n    PsiElement elementAtCaret = myFixture.getElementAtCaret();\n    PsiMethod member = PsiTreeUtil.getParentOfType(elementAtCaret, PsiMethod.class, false);\n    assertNotNull(member);\n    List<String> urls = JavaDocumentationProvider.getExternalJavaDocUrl(member);\n    assertNotNull(urls);\n    List<String> actual = ContainerUtil.map(urls, new Function<String, String>() {\n      @Override\n      public String fun(String url) {\n        return url.substring(url.indexOf('#') + 1);\n      }\n    });\n    assertOrderedEquals(actual, expected);\n  }","id":68710,"modified_method":"protected void doTest(String text, String... expected) {\n    myFixture.configureByText(\"Test.java\", text);\n    PsiElement elementAtCaret = myFixture.getElementAtCaret();\n    PsiMethod member = PsiTreeUtil.getParentOfType(elementAtCaret, PsiMethod.class, false);\n    assertNotNull(member);\n    List<String> urls = JavaDocumentationProvider.getExternalJavaDocUrl(member);\n    assertNotNull(urls);\n    List<String> actual = ContainerUtil.map(urls, new Function<String, String>() {\n      @Override\n      public String fun(String url) {\n        return url.substring(url.indexOf('#') + 1);\n      }\n    });\n    assertOrderedEquals(actual, expected);\n  }","commit_id":"a16d50baa65880b07ce6a2a34314726dfb9607d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testVarargs() {\n    doTest(\"class Test {\\n\" +\n           \"  void <caret>foo(Class<?>... cl) { }\\n\" +\n           \"}\",\n\n           \"foo(java.lang.Class...)\", \"foo(java.lang.Class<?>...)\");\n\n  }","id":68711,"modified_method":"public void testVarargs() {\n    doTest(\"class Test {\\n\" +\n           \"  void <caret>foo(Class<?>... cl) { }\\n\" +\n           \"}\",\n\n           \"foo-java.lang.Class...-\", \"foo-java.lang.Class<?>...-\");\n\n  }","commit_id":"a16d50baa65880b07ce6a2a34314726dfb9607d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String formatMethodSignature(PsiMethod method, boolean raw) {\n    int options = PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS;\n    int parameterOptions = PsiFormatUtilBase.SHOW_TYPE | PsiFormatUtilBase.SHOW_FQ_CLASS_NAMES;\n    if (raw) {\n      options |= PsiFormatUtilBase.SHOW_RAW_NON_TOP_TYPE;\n      parameterOptions |= PsiFormatUtilBase.SHOW_RAW_NON_TOP_TYPE;\n    }\n    return PsiFormatUtil.formatMethod(method, PsiSubstitutor.EMPTY, options, parameterOptions, 999);\n  }","id":68712,"modified_method":"private static String formatMethodSignature(PsiMethod method, boolean raw) {\n    int options = PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS;\n    int parameterOptions = PsiFormatUtilBase.SHOW_TYPE | PsiFormatUtilBase.SHOW_FQ_CLASS_NAMES;\n    if (raw) {\n      options |= PsiFormatUtilBase.SHOW_RAW_NON_TOP_TYPE;\n      parameterOptions |= PsiFormatUtilBase.SHOW_RAW_NON_TOP_TYPE;\n    }\n\n    String signature = PsiFormatUtil.formatMethod(method, PsiSubstitutor.EMPTY, options, parameterOptions, 999);\n\n    if (PsiUtil.isLanguageLevel8OrHigher(method)) {\n      signature = signature.replaceAll(\"\\\\(|\\\\)|, \", \"-\").replaceAll(\"\\\\[\\\\]\", \":A\");\n    }\n\n    return signature;\n  }","commit_id":"a16d50baa65880b07ce6a2a34314726dfb9607d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @NotNull\n  public List<StepTarget> findSmartStepTargets(final SourcePosition position) {\n    final int line = position.getLine();\n    if (line < 0) {\n      return Collections.emptyList(); // the document has been changed\n    }\n\n    final PsiFile file = position.getFile();\n    final VirtualFile vFile = file.getVirtualFile();\n    if (vFile == null) {\n      // the file is not physical\n      return Collections.emptyList();\n    }\n\n    final Document doc = FileDocumentManager.getInstance().getDocument(vFile);\n    if (doc == null) return Collections.emptyList();\n    if (line >= doc.getLineCount()) {\n      return Collections.emptyList(); // the document has been changed\n    }\n    final int startOffset = doc.getLineStartOffset(line);\n    final TextRange lineRange = new TextRange(startOffset, doc.getLineEndOffset(line));\n    final int offset = CharArrayUtil.shiftForward(doc.getCharsSequence(), startOffset, \" \\t\");\n    PsiElement element = file.findElementAt(offset);\n    if (element != null && !(element instanceof PsiCompiledElement)) {\n      do {\n        final PsiElement parent = element.getParent();\n        if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) {\n          break;\n        }\n        element = parent;\n      }\n      while(true);\n\n      //noinspection unchecked\n      final List<StepTarget> targets = new OrderedSet<StepTarget>();\n      final PsiElementVisitor methodCollector = new JavaRecursiveElementWalkingVisitor() {\n        @Override\n        public void visitAnonymousClass(PsiAnonymousClass aClass) {\n          for (PsiMethod psiMethod : aClass.getMethods()) {\n            targets.add(new MethodTarget(psiMethod, true));\n          }\n        }\n\n        @Override\n        public void visitStatement(PsiStatement statement) {\n          if (lineRange.intersects(statement.getTextRange())) {\n            super.visitStatement(statement);\n          }\n        }\n\n        @Override\n        public void visitCallExpression(final PsiCallExpression expression) {\n          final PsiMethod psiMethod = expression.resolveMethod();\n          if (psiMethod != null) {\n            targets.add(new MethodTarget(psiMethod, false));\n          }\n          super.visitCallExpression(expression);\n        }\n      };\n      element.accept(methodCollector);\n      for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) {\n        if (!lineRange.intersects(sibling.getTextRange())) {\n          break;\n        }\n        sibling.accept(methodCollector);\n      }\n      return targets;\n    }\n    return Collections.emptyList();\n  }","id":68713,"modified_method":"@Override\n  @NotNull\n  public List<StepTarget> findSmartStepTargets(final SourcePosition position) {\n    final int line = position.getLine();\n    if (line < 0) {\n      return Collections.emptyList(); // the document has been changed\n    }\n\n    final PsiFile file = position.getFile();\n    final VirtualFile vFile = file.getVirtualFile();\n    if (vFile == null) {\n      // the file is not physical\n      return Collections.emptyList();\n    }\n\n    final Document doc = FileDocumentManager.getInstance().getDocument(vFile);\n    if (doc == null) return Collections.emptyList();\n    if (line >= doc.getLineCount()) {\n      return Collections.emptyList(); // the document has been changed\n    }\n    final int startOffset = doc.getLineStartOffset(line);\n    final TextRange lineRange = new TextRange(startOffset, doc.getLineEndOffset(line));\n    final int offset = CharArrayUtil.shiftForward(doc.getCharsSequence(), startOffset, \" \\t\");\n    PsiElement element = file.findElementAt(offset);\n    if (element != null && !(element instanceof PsiCompiledElement)) {\n      do {\n        final PsiElement parent = element.getParent();\n        if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) {\n          break;\n        }\n        element = parent;\n      }\n      while(true);\n\n      //noinspection unchecked\n      final List<StepTarget> targets = new OrderedSet<StepTarget>();\n      final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() {\n        final Stack<String> myParamNameStack = new Stack<String>();\n\n        @Nullable\n        private String getCurrentParamName() {\n          return myParamNameStack.size() > 0? myParamNameStack.peek() : null;\n        }\n\n        @Override\n        public void visitAnonymousClass(PsiAnonymousClass aClass) {\n          for (PsiMethod psiMethod : aClass.getMethods()) {\n            targets.add(new MethodTarget(psiMethod, getCurrentParamName(), true));\n          }\n        }\n\n        @Override\n        public void visitStatement(PsiStatement statement) {\n          if (lineRange.intersects(statement.getTextRange())) {\n            super.visitStatement(statement);\n          }\n        }\n\n        @Override\n        public void visitCallExpression(final PsiCallExpression expression) {\n          final PsiMethod psiMethod = expression.resolveMethod();\n          if (psiMethod != null) {\n            targets.add(new MethodTarget(psiMethod, null, false));\n            final PsiExpressionList argList = expression.getArgumentList();\n            if (argList != null) {\n              final String methodName = psiMethod.getName();\n              final PsiExpression[] expressions = argList.getExpressions();\n              final PsiParameter[] parameters = psiMethod.getParameterList().getParameters();\n              for (int idx = 0; idx < expressions.length; idx++) {\n                final String paramName = (idx < parameters.length && !parameters[idx].isVarArgs())? parameters[idx].getName() : \"arg\"+(idx+1);\n                myParamNameStack.push(methodName + \": \" + paramName);\n                final PsiExpression argExpression = expressions[idx];\n                try {\n                  argExpression.accept(this);\n                }\n                finally {\n                  myParamNameStack.pop();\n                }\n              }\n            }\n          }\n          else {\n            super.visitCallExpression(expression);\n          }\n        }\n\n      };\n      element.accept(methodCollector);\n      for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) {\n        if (!lineRange.intersects(sibling.getTextRange())) {\n          break;\n        }\n        sibling.accept(methodCollector);\n      }\n      return targets;\n    }\n    return Collections.emptyList();\n  }","commit_id":"29487a16f08b232aa6bc88e314ff4c0247bdd5d6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private MethodTarget(@NotNull PsiMethod method, boolean needBreakpointRequest) {\n      myMethod = method;\n      myNeedBreakpointRequest = needBreakpointRequest;\n    }","id":68714,"modified_method":"private MethodTarget(@NotNull PsiMethod method, String currentParamName, boolean needBreakpointRequest) {\n      myMethod = method;\n      myLabel = currentParamName == null? null : currentParamName + \".\";\n      myNeedBreakpointRequest = needBreakpointRequest;\n    }","commit_id":"29487a16f08b232aa6bc88e314ff4c0247bdd5d6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n    public String getTextFor(JvmSmartStepIntoHandler.StepTarget value) {\n    final PsiMethod method = value.getMethod();\n    return PsiFormatUtil.formatMethod(\n      method,\n      PsiSubstitutor.EMPTY,\n      PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,\n      PsiFormatUtil.SHOW_TYPE,\n      999\n    );\n  }","id":68715,"modified_method":"@NotNull\n    public String getTextFor(JvmSmartStepIntoHandler.StepTarget value) {\n    final PsiMethod method = value.getMethod();\n    final String methodLabel = value.getMethodLabel();\n    final String methodRender = PsiFormatUtil.formatMethod(\n      method,\n      PsiSubstitutor.EMPTY,\n      PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,\n      PsiFormatUtil.SHOW_TYPE,\n      999\n    );\n    return methodLabel != null? methodLabel + methodRender : methodRender;\n  }","commit_id":"29487a16f08b232aa6bc88e314ff4c0247bdd5d6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IFileElementType file = LanguageParserDefinitions.INSTANCE.forLanguage(PythonLanguage.getInstance()).getFileNodeType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION =\n      TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(), CLASS_OR_FUNCTION);\n\n    final CommonCodeStyleSettings commonSettings = settings.getCommonSettings(PythonLanguage.getInstance());\n    return new SpacingBuilder(commonSettings)\n      .betweenInside(STATEMENT_OR_DECLARATION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .betweenInside(CLASS_OR_FUNCTION, STATEMENT_OR_DECLARATION, file).blankLines(pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(IMPORT_STATEMENTS, TokenSet.andNot(STATEMENT_OR_DECLARATION, IMPORT_STATEMENTS)).blankLines(commonSettings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      .beforeInside(ANNOTATION, NAMED_PARAMETER).none()\n\n      .between(allButLambda(), PARAMETER_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_PARENTHESES)\n\n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(commonSettings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(commonSettings.SPACE_BEFORE_COMMA)\n      .between(FROM_KEYWORD, DOT).spaces(1)\n      .between(DOT, IMPORT_KEYWORD).spaces(1)\n      .around(DOT).spaces(0)\n      .before(SEMICOLON).spaceIf(commonSettings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .withinPairInside(LPAR, RPAR, PARAMETER_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(pySettings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(commonSettings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .around(DECORATOR_CALL).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .after(DECORATOR_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(SINGLE_SPACE_KEYWORDS).spaces(1);\n  }","id":68716,"modified_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IFileElementType file = LanguageParserDefinitions.INSTANCE.forLanguage(PythonLanguage.getInstance()).getFileNodeType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION =\n      TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(), CLASS_OR_FUNCTION);\n\n    final CommonCodeStyleSettings commonSettings = settings.getCommonSettings(PythonLanguage.getInstance());\n    return new SpacingBuilder(commonSettings)\n      .betweenInside(STATEMENT_OR_DECLARATION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .betweenInside(CLASS_OR_FUNCTION, STATEMENT_OR_DECLARATION, file).blankLines(pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(IMPORT_STATEMENTS, TokenSet.andNot(STATEMENT_OR_DECLARATION, IMPORT_STATEMENTS)).blankLines(commonSettings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      .beforeInside(ANNOTATION, NAMED_PARAMETER).none()\n\n      .between(allButLambda(), PARAMETER_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_PARENTHESES)\n\n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(commonSettings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(commonSettings.SPACE_BEFORE_COMMA)\n      .between(FROM_KEYWORD, DOT).spaces(1)\n      .between(DOT, IMPORT_KEYWORD).spaces(1)\n      .around(DOT).spaces(0)\n      .before(SEMICOLON).spaceIf(commonSettings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .withinPairInside(LPAR, RPAR, PARAMETER_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_PARENTHESES)\n      .withinPairInside(LPAR, RPAR, FROM_IMPORT_STATEMENT).spaces(0)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(pySettings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(commonSettings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .around(DECORATOR_CALL).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .after(DECORATOR_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(SINGLE_SPACE_KEYWORDS).spaces(1);\n  }","commit_id":"6b085fe7e8745543653cc0ae6eb1cc0368c698c5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_DIRECTIVE).blankLines(1)\n\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                ;\n    }","id":68717,"modified_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_DIRECTIVE).blankLines(1)\n\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                ;\n    }","commit_id":"ab1095a84e6337315e6576e66aefcd6ac6121fba","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IFileElementType file = LanguageParserDefinitions.INSTANCE.forLanguage(PythonLanguage.getInstance()).getFileNodeType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION = TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(),\n                                                             CLASS_OR_FUNCTION);\n\n    final CommonCodeStyleSettings commonSettings = settings.getCommonSettings(PythonLanguage.getInstance());\n    return new SpacingBuilder(settings)\n      .between(IMPORT_STATEMENTS, STATEMENT_OR_DECLARATION.minus(IMPORT_STATEMENTS)).blankLines(commonSettings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_BETWEEN_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      \n      .between(TokenSet.not(TokenSet.create(LAMBDA_KEYWORD)), PARAMETER_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_PARENTHESES)\n      \n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(commonSettings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(commonSettings.SPACE_BEFORE_COMMA)\n      .around(DOT).spaces(0)\n      .before(SEMICOLON).spaceIf(commonSettings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(commonSettings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(commonSettings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(IN_KEYWORD).spaces(1);\n  }","id":68718,"modified_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IFileElementType file = LanguageParserDefinitions.INSTANCE.forLanguage(PythonLanguage.getInstance()).getFileNodeType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION = TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(),\n                                                             CLASS_OR_FUNCTION);\n\n    final CommonCodeStyleSettings commonSettings = settings.getCommonSettings(PythonLanguage.getInstance());\n    return new SpacingBuilder(settings)\n      .between(IMPORT_STATEMENTS, STATEMENT_OR_DECLARATION.minus(IMPORT_STATEMENTS)).blankLines(commonSettings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_BETWEEN_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      \n      .between(TokenSet.not(TokenSet.create(LAMBDA_KEYWORD)), PARAMETER_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_PARENTHESES)\n      \n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(commonSettings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(commonSettings.SPACE_BEFORE_COMMA)\n      .between(FROM_KEYWORD, DOT).spaces(1)\n      .around(DOT).spaces(0)\n      .before(SEMICOLON).spaceIf(commonSettings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(commonSettings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(commonSettings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(IN_KEYWORD).spaces(1);\n  }","commit_id":"84d0677d4e342106939285fa164335222d88195e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitWhiteSpace(PsiWhiteSpace space) {\n      myResult.append(space.getText().replace('\\n', ' '));\n    }","id":68719,"modified_method":"@Override\n    public void visitWhiteSpace(PsiWhiteSpace space) {\n      myResult.append(space.getText().replace('\\n', ' ').replace(\"\\\\\", \"\"));\n    }","commit_id":"af2fc97a8e8f5226b2c72cc1023e67f3371cd545","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IStubFileElementType file = PythonLanguage.getInstance().getFileElementType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION = TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(),\n                                                             CLASS_OR_FUNCTION);\n\n    final CommonCodeStyleSettings commonSettings = settings.getCommonSettings(PythonLanguage.getInstance());\n    return new SpacingBuilder(settings)\n      .between(IMPORT_STATEMENTS, STATEMENT_OR_DECLARATION.minus(IMPORT_STATEMENTS)).blankLines(commonSettings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_BETWEEN_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      \n      .between(TokenSet.not(TokenSet.create(LAMBDA_KEYWORD)), PARAMETER_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_PARENTHESES)\n      \n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(commonSettings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(commonSettings.SPACE_BEFORE_COMMA)\n      .before(SEMICOLON).spaceIf(commonSettings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(commonSettings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(commonSettings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(IN_KEYWORD).spaces(1);\n  }","id":68720,"modified_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IStubFileElementType file = PythonLanguage.getInstance().getFileElementType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION = TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(),\n                                                             CLASS_OR_FUNCTION);\n\n    final CommonCodeStyleSettings commonSettings = settings.getCommonSettings(PythonLanguage.getInstance());\n    return new SpacingBuilder(settings)\n      .between(IMPORT_STATEMENTS, STATEMENT_OR_DECLARATION.minus(IMPORT_STATEMENTS)).blankLines(commonSettings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_BETWEEN_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(commonSettings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      \n      .between(TokenSet.not(TokenSet.create(LAMBDA_KEYWORD)), PARAMETER_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_PARENTHESES)\n      \n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(commonSettings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(commonSettings.SPACE_BEFORE_COMMA)\n      .around(DOT).spaces(0)\n      .before(SEMICOLON).spaceIf(commonSettings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(commonSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(commonSettings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(commonSettings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(commonSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(IN_KEYWORD).spaces(1);\n  }","commit_id":"af2fc97a8e8f5226b2c72cc1023e67f3371cd545","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public Spacing getSpacing(Block child1, Block child2) {\n        return mySpacingBuilder.getSpacing(this, child1, child2);\n    }","id":68721,"modified_method":"@Override\n    public Spacing getSpacing(Block child1, Block child2) {\n        Spacing spacing = mySpacingBuilder.getSpacing(this, child1, child2);\n        if (spacing != null) {\n            return spacing;\n        }\n\n        // TODO: extend SpacingBuilder API - afterInside(RBRACE, FUNCTION_LITERAL).spacing(...), beforeInside(RBRACE, FUNCTION_LITERAL).spacing(...)\n\n        IElementType parentType = this.getNode().getElementType();\n        IElementType child1Type = ((ASTBlock) child1).getNode().getElementType();\n        IElementType child2Type = ((ASTBlock) child2).getNode().getElementType();\n\n        if (parentType == FUNCTION_LITERAL && child1Type == LBRACE && child2Type == BLOCK) {\n            return Spacing.createDependentLFSpacing(1, 1, this.getTextRange(), mySettings.KEEP_LINE_BREAKS, mySettings.KEEP_BLANK_LINES_IN_CODE);\n        }\n\n        if (parentType == FUNCTION_LITERAL && child1Type == ARROW && child2Type == BLOCK) {\n            return Spacing.createDependentLFSpacing(1, 1, this.getTextRange(), mySettings.KEEP_LINE_BREAKS, mySettings.KEEP_BLANK_LINES_IN_CODE);\n        }\n\n        if (parentType == FUNCTION_LITERAL && child2Type == RBRACE) {\n            return Spacing.createDependentLFSpacing(1, 1, this.getTextRange(), mySettings.KEEP_LINE_BREAKS, mySettings.KEEP_BLANK_LINES_IN_CODE);\n        }\n\n        if (parentType == FUNCTION_LITERAL && child1Type == LBRACE) {\n            return Spacing.createSpacing(1, 1, 0, mySettings.KEEP_LINE_BREAKS, mySettings.KEEP_BLANK_LINES_IN_CODE);\n        }\n\n        return null;\n    }","commit_id":"2e9259446266ae2a336eb7fedb16abe42a2f6a8b","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_DIRECTIVE).blankLines(1)\n\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                ;\n    }","id":68722,"modified_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_DIRECTIVE).blankLines(1)\n\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                ;\n    }","commit_id":"2e9259446266ae2a336eb7fedb16abe42a2f6a8b","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IStubFileElementType file = PythonLanguage.getInstance().getFileElementType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION = TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(),\n                                                             CLASS_OR_FUNCTION);\n\n    return new SpacingBuilder(settings)\n      .between(IMPORT_STATEMENTS, STATEMENT_OR_DECLARATION.minus(IMPORT_STATEMENTS)).blankLines(settings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_BETWEEN_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, PyElementTypes.LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      \n      .between(TokenSet.not(TokenSet.create(LAMBDA_KEYWORD)), PARAMETER_LIST).spaceIf(settings.SPACE_BEFORE_METHOD_PARENTHESES)\n      \n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(settings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(settings.SPACE_BEFORE_COMMA)\n      .before(SEMICOLON).spaceIf(settings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(settings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(settings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(settings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(settings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(settings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(settings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(settings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(settings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(settings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(settings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(settings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(settings.SPACE_AROUND_RELATIONAL_OPERATORS);\n  }","id":68723,"modified_method":"protected SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n    final IStubFileElementType file = PythonLanguage.getInstance().getFileElementType();\n    final PyCodeStyleSettings pySettings = settings.getCustomSettings(PyCodeStyleSettings.class);\n    final TokenSet STATEMENT_OR_DECLARATION = TokenSet.orSet(PythonDialectsTokenSetProvider.INSTANCE.getStatementTokens(),\n                                                             CLASS_OR_FUNCTION);\n\n    return new SpacingBuilder(settings)\n      .between(IMPORT_STATEMENTS, STATEMENT_OR_DECLARATION.minus(IMPORT_STATEMENTS)).blankLines(settings.BLANK_LINES_AFTER_IMPORTS)\n      .betweenInside(CLASS_OR_FUNCTION, CLASS_OR_FUNCTION, file).blankLines(pySettings.BLANK_LINES_BETWEEN_TOP_LEVEL_CLASSES_FUNCTIONS)\n      .between(CLASS_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, CLASS_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_CLASS)\n      .between(FUNCTION_DECLARATION, STATEMENT_OR_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_METHOD)\n      .between(STATEMENT_OR_DECLARATION, FUNCTION_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_METHOD)\n      .after(FUNCTION_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_METHOD)\n      .after(CLASS_DECLARATION).blankLines(settings.BLANK_LINES_AROUND_CLASS)\n      .between(STATEMENT_OR_DECLARATION, STATEMENT_OR_DECLARATION).spacing(0, Integer.MAX_VALUE, 1, false, 1)\n      \n      .between(COLON, STATEMENT_LIST).spacing(1, Integer.MAX_VALUE, 0, true, 0)\n      .afterInside(COLON, TokenSet.create(KEY_VALUE_EXPRESSION, PyElementTypes.LAMBDA_EXPRESSION)).spaceIf(pySettings.SPACE_AFTER_PY_COLON)\n\n      .afterInside(GT, ANNOTATION).spaces(1)\n      .betweenInside(MINUS, GT, ANNOTATION).none()\n      .beforeInside(ANNOTATION, FUNCTION_DECLARATION).spaces(1)\n      \n      .between(TokenSet.not(TokenSet.create(LAMBDA_KEYWORD)), PARAMETER_LIST).spaceIf(settings.SPACE_BEFORE_METHOD_PARENTHESES)\n      \n      .before(COLON).spaceIf(pySettings.SPACE_BEFORE_PY_COLON)\n      .after(COMMA).spaceIf(settings.SPACE_AFTER_COMMA)\n      .before(COMMA).spaceIf(settings.SPACE_BEFORE_COMMA)\n      .before(SEMICOLON).spaceIf(settings.SPACE_BEFORE_SEMICOLON)\n      .withinPairInside(LPAR, RPAR, ARGUMENT_LIST).spaceIf(settings.SPACE_WITHIN_METHOD_CALL_PARENTHESES)\n      .before(LBRACKET).spaceIf(pySettings.SPACE_BEFORE_LBRACKET)\n\n      .withinPair(LBRACE, RBRACE).spaceIf(settings.SPACE_WITHIN_BRACES)\n      .withinPair(LBRACKET, RBRACKET).spaceIf(settings.SPACE_WITHIN_BRACKETS)\n\n      .before(ARGUMENT_LIST).spaceIf(settings.SPACE_BEFORE_METHOD_CALL_PARENTHESES)\n\n      .aroundInside(EQ, ASSIGNMENT_STATEMENT).spaceIf(settings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(EQ, NAMED_PARAMETER).spaceIf(pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER)\n      .aroundInside(EQ, KEYWORD_ARGUMENT_EXPRESSION).spaceIf(pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)\n\n      .around(AUG_ASSIGN_OPERATIONS).spaceIf(settings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n      .aroundInside(ADDITIVE_OPERATIONS, BINARY_EXPRESSION).spaceIf(settings.SPACE_AROUND_ADDITIVE_OPERATORS)\n      .aroundInside(MULTIPLICATIVE_OR_EXP, STAR_PARAMETERS).none()\n      .around(MULTIPLICATIVE_OR_EXP).spaceIf(settings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n      .around(SHIFT_OPERATIONS).spaceIf(settings.SPACE_AROUND_SHIFT_OPERATORS)\n      .around(BITWISE_OPERATIONS).spaceIf(settings.SPACE_AROUND_BITWISE_OPERATORS)\n      .around(EQUALITY_OPERATIONS).spaceIf(settings.SPACE_AROUND_EQUALITY_OPERATORS)\n      .around(RELATIONAL_OPERATIONS).spaceIf(settings.SPACE_AROUND_RELATIONAL_OPERATORS)\n      .around(IN_KEYWORD).spaces(1);\n  }","commit_id":"48001c248a063f7649a1b9d1b2941565848c684b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_DIRECTIVE).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n                ;\n    }","id":68724,"modified_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_DIRECTIVE).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n                ;\n    }","commit_id":"a3bfd258252f98ed47fdc5292980f65eea44440c","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n     * @param s\n     * @param bug\n     * @return\n     */\n    private static Matcher makeMatcher(Sortables s, BugInstance bug) {\n    \tswitch(s) {\n    \tcase BUGCODE:\n    \t\treturn new BugMatcher(s.getFrom(bug), null, null);\n    \tcase CATEGORY:\n    \t\treturn new BugMatcher(null, null, s.getFrom(bug));\n    \tcase CLASS:\n    \t\treturn new ClassMatcher(s.getFrom(bug));\n    \tcase DESIGNATION:\n    \tcase FIRSTVERSION:\n    \tcase LASTVERSION:\n    \tcase PACKAGE:\n    \tcase PRIORITY:\n    \t\t throw new UnsupportedOperationException();\n    \tcase TYPE:\n    \t\treturn new BugMatcher(null, s.getFrom(bug), null);\n    \t\t\n    \tcase DIVIDER:\n\t\tdefault:\n    \t\tthrow new IllegalArgumentException();\n\n    \t\t\t \n    \t}\n\t  \n    }","id":68725,"modified_method":"/**\n\t * @param s\n\t * @param bug\n\t * @return\n\t */\n\tprivate static Matcher makeMatcher(Sortables s, BugInstance bug) {\n\t\tswitch (s) {\n\t\tcase BUGCODE:\n\t\t\treturn new BugMatcher(s.getFrom(bug), null, null);\n\t\tcase CATEGORY:\n\t\t\treturn new BugMatcher(null, null, s.getFrom(bug));\n\t\tcase CLASS:\n\t\t\treturn new ClassMatcher(s.getFrom(bug));\n\t\tcase DESIGNATION:\n\t\tcase FIRSTVERSION:\n\t\tcase LASTVERSION:\n\t\t\tthrow new UnsupportedOperationException();\n\t\tcase PACKAGE:\n\t\t\tString p = Sortables.CLASS.getFrom(bug);\n\t\t\tint lastDot = p.lastIndexOf('.');\n\t\t\tif (lastDot > 0)\n\t\t\t\tp = p.substring(0, lastDot);\n\t\t\treturn new ClassMatcher(\"~\" + p + \"\\\\..*\");\n\t\tcase PRIORITY:\n\t\t\treturn new PriorityMatcher(Integer.toString(bug.getPriority()));\n\t\t\t\n\t\tcase TYPE:\n\t\t\treturn new BugMatcher(null, s.getFrom(bug), null);\n\n\t\tcase DIVIDER:\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException();\n\n\t\t}\n\n\t}","commit_id":"35daa46ed9a8d7451e67c8a1f1d87a817b119c73","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Constructor.\n\t * \n\t * @param priorityAsString the priority, as a String\n\t * @throws FilterException\n\t */\n\tpublic PriorityMatcher(String priorityAsString) throws FilterException {\n\t\ttry {\n\t\t\tthis.priority = Integer.parseInt(priorityAsString);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new FilterException(\"Invalid priority \" + priorityAsString +\n\t\t\t\t\t\"specified for Priority element\", e);\n\t\t}\n\t}","id":68726,"modified_method":"/**\n\t * Constructor.\n\t * \n\t * @param priorityAsString the priority, as a String\n\t * @throws FilterException\n\t */\n\tpublic PriorityMatcher(String priorityAsString) {\n\t\t\tthis.priority = Integer.parseInt(priorityAsString);\n\t}","commit_id":"35daa46ed9a8d7451e67c8a1f1d87a817b119c73","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n     * @return Returns the exclusionFilter.\n     */\n    public Filter getExclusionFilter() {\n\t    return exclusionFilter;\n    }","id":68727,"modified_method":"/**\n     * @return Returns the suppressionFilter.\n     */\n    public Filter getSuppressionFilter() {\n\t    return suppressionFilter;\n    }","commit_id":"35daa46ed9a8d7451e67c8a1f1d87a817b119c73","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n     * @param exclusionFilter The exclusionFilter to set.\n     */\n    public void setExclusionFilter(Filter exclusionFilter) {\n\t    this.exclusionFilter = exclusionFilter;\n    }","id":68728,"modified_method":"/**\n     * @param suppressionFilter The suppressionFilter to set.\n     */\n    public void setSuppressionFilter(Filter suppressionFilter) {\n\t    this.suppressionFilter = suppressionFilter;\n    }","commit_id":"35daa46ed9a8d7451e67c8a1f1d87a817b119c73","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public void writeXML(XMLOutput xmlOutput) throws IOException {\n\t\tXMLAttributeList attributeList = new XMLAttributeList().addAttribute(FILENAME_ATTRIBUTE_NAME, getProjectFileName());\n\t\tif (getProjectName() != null)\n\t\t\tattributeList = attributeList.addAttribute(PROJECTNAME_ATTRIBUTE_NAME, getProjectName());\n\t\txmlOutput.openTag(\n\t\t\t\tBugCollection.PROJECT_ELEMENT_NAME,\n\t\t\t\tattributeList\n\t\t\t\t);\n\n\t\tXMLOutputUtil.writeElementList(xmlOutput, JAR_ELEMENT_NAME, fileList);\n\t\tXMLOutputUtil.writeElementList(xmlOutput, AUX_CLASSPATH_ENTRY_ELEMENT_NAME, auxClasspathEntryList);\n\t\tXMLOutputUtil.writeElementList(xmlOutput, SRC_DIR_ELEMENT_NAME, srcDirList);\n\n\t\tif (exclusionFilter != null)\n\t\t\texclusionFilter.writeXML(xmlOutput);\n\t\txmlOutput.closeTag(BugCollection.PROJECT_ELEMENT_NAME);\n\t}","id":68729,"modified_method":"public void writeXML(XMLOutput xmlOutput) throws IOException {\n\t\tXMLAttributeList attributeList = new XMLAttributeList().addAttribute(FILENAME_ATTRIBUTE_NAME, getProjectFileName());\n\t\tif (getProjectName() != null)\n\t\t\tattributeList = attributeList.addAttribute(PROJECTNAME_ATTRIBUTE_NAME, getProjectName());\n\t\txmlOutput.openTag(\n\t\t\t\tBugCollection.PROJECT_ELEMENT_NAME,\n\t\t\t\tattributeList\n\t\t\t\t);\n\n\t\tXMLOutputUtil.writeElementList(xmlOutput, JAR_ELEMENT_NAME, fileList);\n\t\tXMLOutputUtil.writeElementList(xmlOutput, AUX_CLASSPATH_ENTRY_ELEMENT_NAME, auxClasspathEntryList);\n\t\tXMLOutputUtil.writeElementList(xmlOutput, SRC_DIR_ELEMENT_NAME, srcDirList);\n\n\t\tif (suppressionFilter.numberChildren() > 0) {\n\t\t\txmlOutput.openTag(\"SuppressionFilter\");\n\t\t\tsuppressionFilter.writeXML(xmlOutput);\n\t\t\txmlOutput.closeTag(\"SuppressionFilter\");\n\t\t}\n\t\txmlOutput.closeTag(BugCollection.PROJECT_ELEMENT_NAME);\n\t}","commit_id":"35daa46ed9a8d7451e67c8a1f1d87a817b119c73","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public static void main(String[] args) throws IOException, DocumentException {\n       FindBugs.setNoAnalysis();\n       DetectorFactoryCollection.instance();\n       if (args.length != 2) {\n           System.out.println(USAGE);\n           return;\n       }\n\n       BugCollection origCollection;\n       origCollection = new SortedBugCollection();\n       origCollection.readXML(args[0]);\n       SourceFinder sourceFinder = new SourceFinder(origCollection.getProject());\n\n       Cloud cloud = origCollection.getCloud();\n       cloud.bugsPopulated();\n       cloud.waitUntilIssueDataDownloaded();\n       HashSet<SourceFile> seen = new HashSet<SourceFile>();\n       for(BugInstance b : origCollection) {\n           SourceLineAnnotation s = b.getPrimarySourceLineAnnotation();\n           if (!s.isSourceFileKnown())\n               continue;\n           if (!sourceFinder.hasSourceFile(s))\n               continue;\n           SourceFile sourceFile = sourceFinder.findSourceFile(s);\n           long when = sourceFile.getLastModified();\n           if (when <= 0) continue;\n           long firstSeen = cloud.getFirstSeen(b);\n           if (when < firstSeen) {\n               b.getXmlProps().setFirstSeen(new Date(when));\n               cloud.addDateSeen(b, when);\n               if (seen.add(sourceFile))\n                   System.out.printf(\"%s %s %s\\n\", new Date(when), new Date(firstSeen), sourceFile.getFullFileName());\n           }\n       }\n       origCollection.writeXML(args[1]);\n\n   }","id":68730,"modified_method":"public static void main(String[] args) throws IOException, DocumentException {\n       FindBugs.setNoAnalysis();\n       DetectorFactoryCollection.instance();\n       if (args.length < 1 || args.length > 2) {\n           System.out.println(USAGE);\n           return;\n       }\n\n       BugCollection origCollection;\n       origCollection = new SortedBugCollection();\n       origCollection.readXML(args[0]);\n       SourceFinder sourceFinder = new SourceFinder(origCollection.getProject());\n\n       Cloud cloud = origCollection.getCloud();\n       cloud.bugsPopulated();\n       cloud.waitUntilIssueDataDownloaded();\n       HashSet<SourceFile> seen = new HashSet<SourceFile>();\n       for(BugInstance b : origCollection) {\n           SourceLineAnnotation s = b.getPrimarySourceLineAnnotation();\n           if (!s.isSourceFileKnown())\n               continue;\n           if (!sourceFinder.hasSourceFile(s))\n               continue;\n           SourceFile sourceFile = sourceFinder.findSourceFile(s);\n           long when = sourceFile.getLastModified();\n           if (when <= 0) continue;\n           long firstSeen = cloud.getFirstSeen(b);\n           if (when < firstSeen) {\n               b.getXmlProps().setFirstSeen(new Date(when));\n               cloud.addDateSeen(b, when);\n               if (seen.add(sourceFile))\n                   System.out.printf(\"%s %s %s\\n\", new Date(when), new Date(firstSeen), sourceFile.getFullFileName());\n           }\n       }\n       if (args.length > 1)\n           origCollection.writeXML(args[1]);\n       cloud.waitUntilNewIssuesUploaded();\n       cloud.shutdown();\n\n   }","commit_id":"da03d37f6d899a3e0385dbd20a46b164d9fc2d93","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public static void main(String[] argv) throws Exception {\n\n\n\t\tif (argv.length == 0 || \"-help\".equals(argv[0])) {\n\t\t\tSystem.err.println(\"Usage: \" + UnionResults.class.getName() + \" <results1> <results2> ... <resultsn>\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tSortedBugCollection results = new SortedBugCollection();\n\t\tresults.readXML(argv[0], new Project());\n\t\tfor(int i = 1; i < argv.length; i++) {\n\t\t\tSortedBugCollection more = new SortedBugCollection();\n\t\t\tmore.readXML(argv[i], new Project());\n\t\t\tresults = union(results, more);\n\t\t}\n\n\t\tresults.writeXML(System.out, new Project());\n\t}","id":68731,"modified_method":"public static void main(String[] argv) throws Exception {\n\n\n\t\tfinal UnionResultsCommandLine commandLine = new UnionResultsCommandLine();\n\n\t\tint argCount = commandLine.parse(argv, 2, Integer.MAX_VALUE, \"Usage: \" + UnionResults.class.getName()\n\t\t\t\t+ \" [options] [<results1> <results2> ... <resultsn>] \");\n\t\t\n\n\t\tSortedBugCollection results = new SortedBugCollection();\n\t\tProject project = new Project();\n\t\tresults.readXML(argv[argCount++], project);\n\t\tfor(int i = argCount; i < argv.length; i++) {\n\t\t\tSortedBugCollection more = new SortedBugCollection();\n\t\t\tProject newProject = new Project();\n\t\t\tmore.readXML(argv[i], newProject);\n\t\t\tproject.add(newProject);\n\t\t\tresults = union(results, more);\n\t\t}\n\n\t\tresults.setWithMessages(commandLine.withMessages);\n\t\tif (commandLine.outputFile == null)\n\t\t\tresults.writeXML(System.out, project);\n\t\telse\n\t\t\tresults.writeXML(commandLine.outputFile, project);\n\t}","commit_id":"753e667c2e7e33e60992dd999fccae1268e69e63","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Print usage and exit.\n\t */\n\tprivate static void printUsage() {\n\t\tSystem.err.println(\"Usage: \" + BugHistory.class.getName() +\n\t\t        \" [options] <operation> <old results> <new results>\\n\" +\n\t\t        \"Options:\\n\" +\n\t\t        \"   -fuzzy      Use fuzzy bug comparison\\n\" +\n\t\t        \"Operations:\\n\" +\n\t\t        \"   -added      Output added bugs (in new results but not in old results)\\n\" +\n\t\t        \"   -new        Synonym for -added\\n\" +\n\t\t        \"   -removed    Output removed bugs (in old results but not in new results)\\n\" +\n\t\t        \"   -fixed      Synonym for -removed\\n\" +\n\t\t        \"   -retained   Output retained bugs (in both old and new results)\");\n\t\tSystem.exit(1);\n\t}","id":68732,"modified_method":"/**\n\t * Print usage and exit.\n\t */\n\tprivate static void printUsage() {\n\t\tSystem.err.println(\"Usage: \" + BugHistory.class.getName() +\n\t\t        \" [options] <operation> <old results> <new results>\");\n\t\tnew BugHistoryCommandLine().printUsage(System.err);\n\t\tSystem.exit(1);\n\t}","commit_id":"eef074372277e366b7e84c7a620904433f5a35c0","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public static void main(String[] argv) throws Exception {\n\t\tif (argv.length < 3) {\n\t\t\tprintUsage();\n\t\t}\n\n\t\tProject project = new Project();\n\t\t\n\t\tboolean useFuzzyComparator = false;\n\t\tint argCount = 0;\n\t\tif (argv[argCount].equals(\"-fuzzy\")) {\n\t\t\tif (argv.length < 4) {\n\t\t\t\tprintUsage();\n\t\t\t}\n\t\t\tuseFuzzyComparator = true;\n\t\t\t++argCount;\n\t\t}\n\n\t\tString op = argv[argCount++];\n\t\tSortedBugCollection origCollection = readCollection(argv[argCount++], project);\n\t\tSortedBugCollection newCollection = readCollection(argv[argCount++], new Project());\n\n\t\tSortedBugCollection result = null;\n\t\tBugHistory bugHistory = new BugHistory(origCollection, newCollection); \n\t\tbugHistory.setUseFuzzyComparator(useFuzzyComparator);\n\n\t\tif (op.equals(\"-new\") || op.equals(\"-added\")) {\n\t\t\tresult = bugHistory.performSetOperation(ADDED_WARNINGS);\n\t\t} else if (op.equals(\"-fixed\") || op.equals(\"-removed\")) {\n\t\t\tresult = bugHistory.performSetOperation(REMOVED_WARNINGS);\n\t\t} else if (op.equals(\"-retained\")) {\n\t\t\tresult = bugHistory.performSetOperation(RETAINED_WARNINGS);\n\t\t} else\n\t\t\tthrow new IllegalArgumentException(\"Unknown operation: \" + op);\n\n\t\tresult.writeXML(System.out, project);\n\t}","id":68733,"modified_method":"public static void main(String[] argv) throws Exception {\n\t\t\n\t\tBugHistoryCommandLine commandLine = new BugHistoryCommandLine();\n\t\tint argCount = commandLine.parse(argv);\n\t\tif (argv.length - argCount != 2) {\n\t\t\tprintUsage();\n\t\t}\n\t\t\n\t\tif (commandLine.getSetOp() == null) {\n\t\t\tSystem.err.println(\"No set operation specified\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tProject project = new Project();\n\t\tSortedBugCollection origCollection = readCollection(argv[argCount++], project);\n\t\tSortedBugCollection newCollection = readCollection(argv[argCount++], new Project());\n\t\t\n\t\tBugHistory bugHistory = new BugHistory(origCollection, newCollection);\n\t\tbugHistory.setUseFuzzyComparator(commandLine.isFuzzy());\n\t\t\n\t\tSortedBugCollection result = bugHistory.performSetOperation(commandLine.getSetOp());\n\t\t\n\t\tif (commandLine.isCount()) {\n\t\t\tSystem.out.println(\"Delta is \" +result.getCollection().size());\n\t\t} else {\n\t\t\tresult.writeXML(System.out, project);\n\t\t}\n\t}","commit_id":"eef074372277e366b7e84c7a620904433f5a35c0","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n     * Initialize a cache with initial capacity set to 0\n     *\n     * @param weightedCapacity cache weighted capacity\n     * @param weigher The weigher to use\n     *\n     * @param <K> key type\n     * @param <V> value type\n     *\n     * @return initialized cache\n     */\n    public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)\n    {\n        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()\n                                            .weigher(weigher)\n                                            .initialCapacity(0)\n                                            .maximumWeightedCapacity(weightedCapacity)\n                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                                            .build();\n\n        return new ConcurrentLinkedHashCache<K, V>(map);\n    }","id":68734,"modified_method":"/**\n     * Initialize a cache with initial capacity set to 0\n     *\n     * @param weightedCapacity cache weighted capacity\n     * @param weigher The weigher to use\n     *\n     * @param <K> key type\n     * @param <V> value type\n     *\n     * @return initialized cache\n     */\n    public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)\n    {\n        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()\n                                            .weigher(weigher)\n                                            .maximumWeightedCapacity(weightedCapacity)\n                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                                            .build();\n\n        return new ConcurrentLinkedHashCache<K, V>(map);\n    }","commit_id":"33cdcaf73463c351ada6e64dcd158a4823bdb902","url":"https://github.com/apache/cassandra"},{"original_method":"public SerializingCache(int capacity, boolean useMemoryWeigher, ISerializer<V> serializer)\n    {\n        this.serializer = serializer;\n\n        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()\n        {\n            public void onEviction(K k, FreeableMemory mem)\n            {\n                mem.unreference();\n            }\n        };\n\n        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()\n                   .weigher(useMemoryWeigher\n                                ? createMemoryWeigher()\n                                : Weighers.<FreeableMemory>singleton())\n                   .initialCapacity(capacity)\n                   .maximumWeightedCapacity(capacity)\n                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                   .listener(listener)\n                   .build();\n    }","id":68735,"modified_method":"public SerializingCache(int capacity, boolean useMemoryWeigher, ISerializer<V> serializer)\n    {\n        this.serializer = serializer;\n\n        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()\n        {\n            public void onEviction(K k, FreeableMemory mem)\n            {\n                mem.unreference();\n            }\n        };\n\n        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()\n                   .weigher(useMemoryWeigher\n                                ? createMemoryWeigher()\n                                : Weighers.<FreeableMemory>singleton())\n                   .maximumWeightedCapacity(capacity)\n                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                   .listener(listener)\n                   .build();\n    }","commit_id":"33cdcaf73463c351ada6e64dcd158a4823bdb902","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Initialize a cache with initial capacity set to 0\n     *\n     * @param weightedCapacity cache weighted capacity\n     * @param weigher The weigher to use\n     *\n     * @param <K> key type\n     * @param <V> value type\n     *\n     * @return initialized cache\n     */\n    public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)\n    {\n        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()\n                                            .weigher(weigher)\n                                            .initialCapacity(0)\n                                            .maximumWeightedCapacity(weightedCapacity)\n                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                                            .build();\n\n        return new ConcurrentLinkedHashCache<K, V>(map);\n    }","id":68736,"modified_method":"/**\n     * Initialize a cache with initial capacity set to 0\n     *\n     * @param weightedCapacity cache weighted capacity\n     * @param weigher The weigher to use\n     *\n     * @param <K> key type\n     * @param <V> value type\n     *\n     * @return initialized cache\n     */\n    public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)\n    {\n        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()\n                                            .weigher(weigher)\n                                            .maximumWeightedCapacity(weightedCapacity)\n                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                                            .build();\n\n        return new ConcurrentLinkedHashCache<K, V>(map);\n    }","commit_id":"531d01c04d120f4a784eab898240a6b7e59bf1c8","url":"https://github.com/apache/cassandra"},{"original_method":"public SerializingCache(int capacity, boolean useMemoryWeigher, ISerializer<V> serializer)\n    {\n        this.serializer = serializer;\n\n        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()\n        {\n            public void onEviction(K k, FreeableMemory mem)\n            {\n                mem.unreference();\n            }\n        };\n\n        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()\n                   .weigher(useMemoryWeigher\n                                ? createMemoryWeigher()\n                                : Weighers.<FreeableMemory>singleton())\n                   .initialCapacity(capacity)\n                   .maximumWeightedCapacity(capacity)\n                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                   .listener(listener)\n                   .build();\n    }","id":68737,"modified_method":"public SerializingCache(int capacity, boolean useMemoryWeigher, ISerializer<V> serializer)\n    {\n        this.serializer = serializer;\n\n        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()\n        {\n            public void onEviction(K k, FreeableMemory mem)\n            {\n                mem.unreference();\n            }\n        };\n\n        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()\n                   .weigher(useMemoryWeigher\n                                ? createMemoryWeigher()\n                                : Weighers.<FreeableMemory>singleton())\n                   .maximumWeightedCapacity(capacity)\n                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                   .listener(listener)\n                   .build();\n    }","commit_id":"531d01c04d120f4a784eab898240a6b7e59bf1c8","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Initialize a cache with initial capacity set to 0\n     *\n     * @param weightedCapacity cache weighted capacity\n     * @param weigher The weigher to use\n     *\n     * @param <K> key type\n     * @param <V> value type\n     *\n     * @return initialized cache\n     */\n    public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)\n    {\n        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()\n                                            .weigher(weigher)\n                                            .initialCapacity(0)\n                                            .maximumWeightedCapacity(weightedCapacity)\n                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                                            .build();\n\n        return new ConcurrentLinkedHashCache<K, V>(map);\n    }","id":68738,"modified_method":"/**\n     * Initialize a cache with initial capacity set to 0\n     *\n     * @param weightedCapacity cache weighted capacity\n     * @param weigher The weigher to use\n     *\n     * @param <K> key type\n     * @param <V> value type\n     *\n     * @return initialized cache\n     */\n    public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)\n    {\n        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()\n                                            .weigher(weigher)\n                                            .maximumWeightedCapacity(weightedCapacity)\n                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                                            .build();\n\n        return new ConcurrentLinkedHashCache<K, V>(map);\n    }","commit_id":"2eaea5be96461b1d9e405d26229b9803a96d3abf","url":"https://github.com/apache/cassandra"},{"original_method":"public SerializingCache(int capacity, boolean useMemoryWeigher, ISerializer<V> serializer)\n    {\n        this.serializer = serializer;\n\n        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()\n        {\n            public void onEviction(K k, FreeableMemory mem)\n            {\n                mem.unreference();\n            }\n        };\n\n        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()\n                   .weigher(useMemoryWeigher\n                                ? createMemoryWeigher()\n                                : Weighers.<FreeableMemory>singleton())\n                   .initialCapacity(capacity)\n                   .maximumWeightedCapacity(capacity)\n                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                   .listener(listener)\n                   .build();\n    }","id":68739,"modified_method":"public SerializingCache(int capacity, boolean useMemoryWeigher, ISerializer<V> serializer)\n    {\n        this.serializer = serializer;\n\n        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()\n        {\n            public void onEviction(K k, FreeableMemory mem)\n            {\n                mem.unreference();\n            }\n        };\n\n        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()\n                   .weigher(useMemoryWeigher\n                                ? createMemoryWeigher()\n                                : Weighers.<FreeableMemory>singleton())\n                   .maximumWeightedCapacity(capacity)\n                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)\n                   .listener(listener)\n                   .build();\n    }","commit_id":"2eaea5be96461b1d9e405d26229b9803a96d3abf","url":"https://github.com/apache/cassandra"},{"original_method":"public void testAddArticle2() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Add Article']\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article 2\"));\n\t\tselenium.type(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article 2\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_15_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article 2!\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article 2!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.select(\"_15_type\",\n\t\t\tRuntimeVariables.replace(\"label=Announcements\"));\n\t\tselenium.select(\"_15_displayDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=April\"));\n\t\tselenium.select(\"_15_displayDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=10\"));\n\t\tselenium.select(\"_15_displayDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2010\"));\n\t\tselenium.select(\"_15_displayDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_displayDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverExpireCheckbox\");\n\t\tselenium.select(\"_15_expirationDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=January\"));\n\t\tselenium.select(\"_15_expirationDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=27\"));\n\t\tselenium.select(\"_15_expirationDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_expirationDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_expirationDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverReviewCheckbox\");\n\t\tselenium.select(\"_15_reviewDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=September\"));\n\t\tselenium.select(\"_15_reviewDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=16\"));\n\t\tselenium.select(\"_15_reviewDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_reviewDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_reviewDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Save and Approve']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68740,"modified_method":"public void testAddArticle2() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Article']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article 2\"));\n\t\tselenium.type(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article 2\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_15_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article 2\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article 2!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.select(\"_15_type\",\n\t\t\tRuntimeVariables.replace(\"label=Announcements\"));\n\t\tselenium.select(\"_15_displayDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=April\"));\n\t\tselenium.select(\"_15_displayDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=10\"));\n\t\tselenium.select(\"_15_displayDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2010\"));\n\t\tselenium.select(\"_15_displayDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_displayDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverExpireCheckbox\");\n\t\tselenium.select(\"_15_expirationDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=January\"));\n\t\tselenium.select(\"_15_expirationDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=27\"));\n\t\tselenium.select(\"_15_expirationDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_expirationDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_expirationDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverReviewCheckbox\");\n\t\tselenium.select(\"_15_reviewDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=September\"));\n\t\tselenium.select(\"_15_reviewDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=16\"));\n\t\tselenium.select(\"_15_reviewDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_reviewDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_reviewDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.typeKeys(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"Test Description\"));\n\t\tselenium.type(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"Test Description!\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Save and Approve']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Save and Approve']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Articles\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Articles\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Journal Article 2\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Add Article']\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article\"));\n\t\tselenium.type(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_15_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article!\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.select(\"_15_type\",\n\t\t\tRuntimeVariables.replace(\"label=Announcements\"));\n\t\tselenium.select(\"_15_displayDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=April\"));\n\t\tselenium.select(\"_15_displayDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=10\"));\n\t\tselenium.select(\"_15_displayDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2010\"));\n\t\tselenium.select(\"_15_displayDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_displayDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverExpireCheckbox\");\n\t\tselenium.select(\"_15_expirationDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=January\"));\n\t\tselenium.select(\"_15_expirationDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=27\"));\n\t\tselenium.select(\"_15_expirationDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_expirationDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_expirationDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverReviewCheckbox\");\n\t\tselenium.select(\"_15_reviewDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=September\"));\n\t\tselenium.select(\"_15_reviewDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=16\"));\n\t\tselenium.select(\"_15_reviewDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_reviewDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_reviewDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Save and Approve']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68741,"modified_method":"public void testAddArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Article']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article\"));\n\t\tselenium.type(\"_15_title\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Article\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_15_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Article!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.select(\"_15_type\",\n\t\t\tRuntimeVariables.replace(\"label=Announcements\"));\n\t\tselenium.select(\"_15_displayDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=April\"));\n\t\tselenium.select(\"_15_displayDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=10\"));\n\t\tselenium.select(\"_15_displayDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2010\"));\n\t\tselenium.select(\"_15_displayDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_displayDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverExpireCheckbox\");\n\t\tselenium.select(\"_15_expirationDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=January\"));\n\t\tselenium.select(\"_15_expirationDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=27\"));\n\t\tselenium.select(\"_15_expirationDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_expirationDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_expirationDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.click(\"_15_neverReviewCheckbox\");\n\t\tselenium.select(\"_15_reviewDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=September\"));\n\t\tselenium.select(\"_15_reviewDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=16\"));\n\t\tselenium.select(\"_15_reviewDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2011\"));\n\t\tselenium.select(\"_15_reviewDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_15_reviewDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.typeKeys(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"Test Description\"));\n\t\tselenium.type(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"Test Description!\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Save and Approve']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Save and Approve']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Articles\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Articles\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Journal Article\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Journal Test Page\"));\n\t\tselenium.type(\"new_page\", RuntimeVariables.replace(\"Journal Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Journal Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Journal Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68742,"modified_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Journal Test Page\"));\n\t\tselenium.type(\"new_page\", RuntimeVariables.replace(\"Journal Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Journal Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Journal Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Blogs Aggregator Test Page\"));\n\t\tselenium.type(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Blogs Aggregator Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Aggregator Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"link=Blogs Aggregator Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68743,"modified_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Blogs Aggregator Test Page\"));\n\t\tselenium.type(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Blogs Aggregator Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Aggregator Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"link=Blogs Aggregator Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Journal Articles Test Page\"));\n\t\tselenium.type(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Journal Articles Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Journal Articles Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"link=Journal Articles Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68744,"modified_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Journal Articles Test Page\"));\n\t\tselenium.type(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Journal Articles Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Journal Articles Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"link=Journal Articles Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPortlet() throws Exception {\n\t\tselenium.click(\"link=Add Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"CMS-JournalArticles\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id=\\\"CMS-JournalArticles\\\"]/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68745,"modified_method":"public void testAddPortlet() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Add Application\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Add Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"CMS-JournalArticles\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id=\\\"CMS-JournalArticles\\\"]/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Configuration\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPortlet() throws Exception {\n\t\tselenium.click(\"link=Add Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[@id=\\\"CMS-Journal\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id=\\\"CMS-Journal\\\"]/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68746,"modified_method":"public void testAddPortlet() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Add Application\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Add Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[@id=\\\"CMS-Journal\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id=\\\"CMS-Journal\\\"]/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Article']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSecondEntry() throws Exception {\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Add Blog Entry']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"Second Test Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Second Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":68747,"modified_method":"public void testAddSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Add Blog Entry']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"Second Test Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Second Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddStructures() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Structures\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Structures\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Structure']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_15_newStructureId\", RuntimeVariables.replace(\"Test\"));\n\t\tselenium.type(\"_15_name\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Structure\"));\n\t\tselenium.type(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Structure!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Row']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_15_structure_el0_name\", RuntimeVariables.replace(\"Test\"));\n\t\tselenium.select(\"_15_structure_el0_type\",\n\t\t\tRuntimeVariables.replace(\"label=Text\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\"Test Journal Structure\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68748,"modified_method":"public void testAddStructures() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Structures\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Structures\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Structure']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Structure']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_newStructureId\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_newStructureId\", RuntimeVariables.replace(\"Test\"));\n\t\tselenium.type(\"_15_newStructureId\", RuntimeVariables.replace(\"Test\"));\n\t\tselenium.typeKeys(\"_15_name\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Structure\"));\n\t\tselenium.type(\"_15_name\",\n\t\t\tRuntimeVariables.replace(\"Test Journal Structure\"));\n\t\tselenium.typeKeys(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Structure\"));\n\t\tselenium.type(\"_15_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test Journal Structure!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Row']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_structure_el0_name\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_structure_el0_name\",\n\t\t\tRuntimeVariables.replace(\"Itp\"));\n\t\tselenium.type(\"_15_structure_el0_name\", RuntimeVariables.replace(\"Itp\"));\n\t\tselenium.select(\"_15_structure_el0_type\",\n\t\t\tRuntimeVariables.replace(\"label=Link to Page\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Row']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_structure_el0_name\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_15_structure_el0_name\",\n\t\t\tRuntimeVariables.replace(\"title\"));\n\t\tselenium.type(\"_15_structure_el0_name\",\n\t\t\tRuntimeVariables.replace(\"title\"));\n\t\tselenium.select(\"_15_structure_el0_type\",\n\t\t\tRuntimeVariables.replace(\"label=Text\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"Test Journal Structure\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testApproveArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Articles\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Articles\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"link=1.1\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Approve']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Approve']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\n\t\t\t\t\t\t\t\"Your request processed successfully.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68749,"modified_method":"public void testApproveArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=1.1\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=1.1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Approve']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Approve']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Not Approved\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testCancelPopup() throws Exception {\n\t\tselenium.click(RuntimeVariables.replace(\"link=Structures\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Structure']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_15_editorButton\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_xsdContent\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//div[@class=\\\"ui-dialog-container\\\"]\"));\n\t\tselenium.click(\n\t\t\t\"//input[@value='Cancel' and @type='button' and @onclick='Liferay.Popup.close(this);']\");\n\t\tThread.sleep(2000);\n\t\tassertFalse(selenium.isElementPresent(\"_15_xsdContent\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68750,"modified_method":"public void testCancelPopup() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Structures\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Structures\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Structure']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Structure']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_editorButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_15_editorButton\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_xsdContent\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//div[@class=\\\"ui-dialog-container\\\"]\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Cancel' and @type='button' and @onclick='Liferay.Popup.close(this);']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//input[@value='Cancel' and @type='button' and @onclick='Liferay.Popup.close(this);']\");\n\t\tThread.sleep(5000);\n\t\tassertFalse(selenium.isElementPresent(\"_15_xsdContent\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testConfigureDisplaySettings() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDelta\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDelta\", RuntimeVariables.replace(\"label=5\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDisplayStyle\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Title\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a test entry!\"));\n\t}","id":68751,"modified_method":"public void testConfigureDisplaySettings() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDelta\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDelta\", RuntimeVariables.replace(\"label=5\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDisplayStyle\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a test entry!\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Articles\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Articles\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=1.1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to deactivate this[\\\\s\\\\S]$\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (!selenium.isElementPresent(\"link=1.1\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68752,"modified_method":"public void testDeleteArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=1.1\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=1.1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to deactivate this[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=1.1\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t\tassertTrue(selenium.isElementPresent(\"//input[@value='Add Blog Entry']\"));\n\t}","id":68753,"modified_method":"public void testDeleteSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDisplayStyles() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.select(\"_86_displayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a test entry!\"));\n\t}","id":68754,"modified_method":"public void testDisplayStyles() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.select(\"_86_displayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a BA setup test entry!\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testExpireArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Articles\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Articles\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"link=1.1\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Expire']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Expire']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Expired\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68755,"modified_method":"public void testExpireArticle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=1.1\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=1.1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Expire']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Expire']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Expired\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JournalArticlesTests() {\n\t\taddTestSuite(AddPageTest.class);\n\t\taddTestSuite(AddPortletTest.class);\n\t\t//addTestSuite(AddJournalArticlesTest.class);\n\t\taddTestSuite(DeletePageTest.class);\n\t}","id":68756,"modified_method":"public JournalArticlesTests() {\n\t\taddTestSuite(SetupTest.class);\n\t\taddTestSuite(AddPageTest.class);\n\t\taddTestSuite(AddPortletTest.class);\n\t\taddTestSuite(DisplayArticleTest.class);\n\t\taddTestSuite(ViewArticleTest.class);\n\t\taddTestSuite(TearDownTest.class);\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JournalTests() {\n\t\taddTestSuite(AddPageTest.class);\n\t\taddTestSuite(AddPortletTest.class);\n\t\taddTestSuite(AddArticleTest.class);\n\t\taddTestSuite(AddArticle2Test.class);\n\t\taddTestSuite(WorkflowTest.class);\n\t\taddTestSuite(ApproveArticleTest.class);\n\t\taddTestSuite(ExpireArticleTest.class);\n\t\taddTestSuite(DeleteArticleTest.class);\n\t\taddTestSuite(AddStructuresTest.class);\n\t\t//addTestSuite(AddFeedTest.class);\n\t\taddTestSuite(SearchTest.class);\n\t\taddTestSuite(RecentPageTest.class);\n\t\taddTestSuite(AddBlankArticleTest.class);\n\t\taddTestSuite(CancelPopupTest.class);\n\t\taddTestSuite(DeletePageTest.class);\n\t}","id":68757,"modified_method":"public JournalTests() {\n\t\taddTestSuite(AddPageTest.class);\n\t\taddTestSuite(AddPortletTest.class);\n\t\taddTestSuite(AddArticleTest.class);\n\t\taddTestSuite(AddArticle2Test.class);\n\t\taddTestSuite(WorkflowTest.class);\n\t\taddTestSuite(ApproveArticleTest.class);\n\t\taddTestSuite(ExpireArticleTest.class);\n\t\taddTestSuite(DeleteArticleTest.class);\n\t\taddTestSuite(AddStructuresTest.class);\n\t\taddTestSuite(AddTemplateTest.class);\n\t\t//addTestSuite(AddFeedTest.class);\n\t\taddTestSuite(SearchArticleTest.class);\n\t\taddTestSuite(RecentPageTest.class);\n\t\t//addTestSuite(AddNullArticleTest.class);\n\t\taddTestSuite(AddNullTitleTest.class);\n\t\taddTestSuite(CancelPopupTest.class);\n\t\taddTestSuite(TearDownTest.class);\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testRecentPage() throws Exception {\n\t\tselenium.click(RuntimeVariables.replace(\"link=Recent\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\"Test Journal Structure\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68758,"modified_method":"public void testRecentPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Recent\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Recent\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Journal Structure\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSearchBlogs() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_keywords\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_keywords\", RuntimeVariables.replace(\"Test Entr\"));\n\t\tselenium.type(\"_33_keywords\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Search Entries']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=\\u00ab Back\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//input[@value='Add Blog Entry']\"));\n\t}","id":68759,"modified_method":"public void testSearchBlogs() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_keywords\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_keywords\", RuntimeVariables.replace(\"Test Entr\"));\n\t\tselenium.type(\"_33_keywords\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Search Entries']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//input[@value='Add Blog Entry']\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSetup() throws Exception {\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"Blogs Test Page\"));\n\t\tselenium.type(\"new_page\", RuntimeVariables.replace(\"Blogs Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Add Application\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Add Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"Collaboration-Blogs\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id=\\\"Collaboration-Blogs\\\"]/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Add Blog Entry']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\", RuntimeVariables.replace(\"Test Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":68760,"modified_method":"public void testSetup() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//a[@id=\\\"my-community-private-pages\\\"]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"new_page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"new_page\",\n\t\t\tRuntimeVariables.replace(\"BA Setup Test Page\"));\n\t\tselenium.type(\"new_page\", RuntimeVariables.replace(\"BA Setup Test Page\"));\n\t\tselenium.click(\"link=Save\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=BA Setup Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=BA Setup Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Add Application\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Add Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"Collaboration-Blogs\\\"]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id=\\\"Collaboration-Blogs\\\"]/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//input[@value='Add Blog Entry']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"BA Setup Test Entr\"));\n\t\tselenium.type(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"BA Setup Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a BA setup test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a BA setup test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=BA Setup Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDown() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Manage Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Blogs Test Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Aggregator Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"link=Blogs Aggregator Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.select(\"_86_displayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Abstract\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isTextPresent(\"There are no blogs.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Manage Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Blogs Aggregator Test Page\"));\n\t}","id":68761,"modified_method":"public void testTearDown() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=BA Setup Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=BA Setup Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=BA Setup Test Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Manage Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=BA Setup Test Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Aggregator Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"link=Blogs Aggregator Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.select(\"_86_displayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Abstract\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isTextPresent(\"There are no blogs.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Manage Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Blogs Aggregator Test Page\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDown() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDisplayStyle\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Full Content\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Manage Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Blogs Test Page\"));\n\t}","id":68762,"modified_method":"public void testTearDown() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDisplayStyle\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Full Content\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Manage Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li[2]/ul/li[3]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Delete']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[2]/ul/li[1]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[2]/ul/li[1]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Blogs Test Page\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testUploadLARFile() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Export / Import\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Import\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_importFileName\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_86_importFileName\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\blogs\\\\Blogs-Selenium.portlet.lar\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Import']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t}","id":68763,"modified_method":"public void testUploadLARFile() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Export / Import\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Export / Import\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Import\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Import\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_importFileName\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_86_importFileName\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\blogs\\\\Blogs-Selenium.portlet.lar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Import']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Import']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewBlogs() throws Exception {\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test entry!\"));\n\t}","id":68764,"modified_method":"public void testViewBlogs() throws Exception {\n\t\tassertTrue(selenium.isElementPresent(\"link=BA Setup Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a BA setup test entry!\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testWorkflow() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Articles\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Articles\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"Link=Test Journal Article 2\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_incrementVersionCheckbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_15_incrementVersionCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Save']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"Link=Not Approved\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":68765,"modified_method":"public void testWorkflow() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Test Journal Article 2\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"Link=Test Journal Article 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_15_incrementVersionCheckbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_15_incrementVersionCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"Link=1.1\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"87c69ddc0054b29ed681f88008830381981e6a87","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testMergeLayouts() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=All Communities\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=All Communities\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"portlet-wrapper-29\\\"]/div[2]/div/div/form/div[5]/table/tbody/tr[3]/td[6]/ul/li/ul/li[3]/nobr/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"portlet-wrapper-29\\\"]/div[2]/div/div/form/div[5]/table/tbody/tr[3]/td[6]/ul/li/ul/li[3]/nobr/a\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"link=Settings\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"link=Merge Pages\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"_29_mergeGuestPublicPagesCheckbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_29_mergeGuestPublicPagesCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Save']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Return to Full Page\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68766,"modified_method":"public void testMergeLayouts() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=All Communities\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=All Communities\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"portlet-wrapper-29\\\"]/div[2]/div/div/form/div[5]/table/tbody/tr[3]/td[6]/ul/li/ul/li[3]/nobr/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"portlet-wrapper-29\\\"]/div[2]/div/div/form/div[5]/table/tbody/tr[3]/td[6]/ul/li/ul/li[3]/nobr/a\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"link=Settings\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Merge Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Merge Pages\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"_29_mergeGuestPublicPagesCheckbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_29_mergeGuestPublicPagesCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Save']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Return to Full Page\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"e643ac2a23223d87e47bbfa06ab96bf42da1f862","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testVerifyMergeLayouts() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@title='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[5]/ul/li[1]/a[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[5]/ul/li[1]/a[2]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=New Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=New Page\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Stories\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[4]/ul/li[1]/a[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[4]/ul/li[1]/a[2]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\");\n\t\tselenium.click(\n\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Page\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_88_hiddenCheckbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_88_hiddenCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tThread.sleep(5000);\n\t\tselenium.click(\"//input[@value='Save']\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"banner\\\"]/div[1]/div[2]/ul/li[5]/ul/li[5]/ul/li[1]/a[1]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"banner\\\"]/div[1]/div[2]/ul/li[5]/ul/li[5]/ul/li[1]/a[1]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (!selenium.isElementPresent(\"link=Stories\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"document.getElementById('my-community-private-pages')\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"document.getElementById('my-community-private-pages')\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":68767,"modified_method":"public void testVerifyMergeLayouts() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@title='Configuration']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[5]/ul/li[1]/a[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[5]/ul/li[1]/a[2]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=New Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=New Page\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Stories\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[4]/ul/li[1]/a[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"banner\\\"]/div/div/ul/li[8]/ul/li[4]/ul/li[1]/a[2]\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Pages\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Page\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_88_hiddenCheckbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"document.getElementById('_branchId_2018').getElementsByTagName('a')[0].getElementsByTagName('span')[0]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"_88_hiddenCheckbox\");\n\t\tThread.sleep(5000);\n\t\tselenium.click(\"//input[@value='Save']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\n\t\t\t\t\t\t\t\"Your request processed successfully.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id=\\\"banner\\\"]/div[1]/div[2]/ul/li[6]/ul/li[5]/ul/li[1]/a[1]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\n\t\t\t\"//div[@id=\\\"banner\\\"]/div[1]/div[2]/ul/li[6]/ul/li[5]/ul/li[1]/a[1]\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (!selenium.isElementPresent(\"link=Stories\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"document.getElementById('my-community-private-pages')\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"document.getElementById('my-community-private-pages')\");\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"e643ac2a23223d87e47bbfa06ab96bf42da1f862","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<SNode> getClassifierNodes() {\n    return BaseAdapter.toNodes(getClassifiers());\n  }","id":68768,"modified_method":"public List<SNode> getClassifierNodes() {\n    return getClassifiers();\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<SNode> getNodes(Condition<SNode> condition) {\n    return this.getNodesFormClassifiersList(BaseAdapter.toNodes(getClassifiers()), this.myConstraint, condition);\n  }","id":68769,"modified_method":"@NotNull\n  public List<SNode> getNodes(Condition<SNode> condition) {\n    return this.getNodesFormClassifiersList(getClassifiers(), this.myConstraint, condition);\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean checkSubclassifier(Classifier cls) {\n    if (this.visitedClassifiersMap.containsKey(cls)) {\n      return this.visitedClassifiersMap.get(cls);\n    }\n    boolean result = false;\n    if (cls instanceof ClassConcept) {\n      ClassConcept extendedClass = BaseLanguageUtil.getSuperclass((ClassConcept) cls);\n      if (extendedClass != null && this.checkSubclassifier(extendedClass)) {\n        result = true;\n      }\n      if (!(result)) {\n        for (Iterator<ClassifierType> it = ((ClassConcept) cls).implementedInterfaces(); it.hasNext();) {\n          if (this.checkSubclassifier(it.next().getClassifier())) {\n            result = true;\n            break;\n          }\n        }\n      }\n    } else\n    if (cls instanceof Interface) {\n      for (Iterator<ClassifierType> it = ((Interface) cls).extendedInterfaces(); it.hasNext();) {\n        if (this.checkSubclassifier(it.next().getClassifier())) {\n          result = true;\n          break;\n        }\n      }\n    }\n    this.visitedClassifiersMap.put(cls, result);\n    return result;\n  }","id":68770,"modified_method":"private boolean checkSubclassifier(SNode cls) {\n    if (this.visitedClassifiersMap.containsKey(cls)) {\n      return this.visitedClassifiersMap.get(cls);\n    }\n    boolean result = false;\n    if (SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      SNode extendedClass = BaseLanguageUtil.getSuperclass(SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"));\n      if (extendedClass != null && this.checkSubclassifier(extendedClass)) {\n        result = true;\n      }\n      if (!(result)) {\n        for (SNode iface : ListSequence.fromList(SLinkOperations.getTargets((SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), \"implementedInterface\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return (SLinkOperations.getTarget(it, \"classifier\", false) != null);\n          }\n        }).<SNode>select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(it, \"classifier\", false);\n          }\n        })) {\n          if (this.checkSubclassifier(iface)) {\n            result = true;\n            break;\n          }\n        }\n      }\n    } else\n    if (SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      for (SNode iface : ListSequence.fromList(SLinkOperations.getTargets((SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.Interface\")), \"extendedInterface\", true)).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return (SLinkOperations.getTarget(it, \"classifier\", false) != null);\n        }\n      }).<SNode>select(new ISelector<SNode, SNode>() {\n        public SNode select(SNode it) {\n          return SLinkOperations.getTarget(it, \"classifier\", false);\n        }\n      })) {\n        if (this.checkSubclassifier(iface)) {\n          result = true;\n          break;\n        }\n      }\n    }\n    this.visitedClassifiersMap.put(cls, result);\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public AllSubclassifiersScope(Classifier classifier, SModel model, int constraint, IScope scope) {\n    super(constraint);\n    this.rootClassifier = classifier;\n    this.model = model;\n    this.scope = scope;\n  }","id":68771,"modified_method":"public AllSubclassifiersScope(Classifier classifier, SModel model, int constraint, IScope scope) {\n    super(constraint);\n    this.rootClassifier = classifier.getNode();\n    this.model = model;\n    this.scope = scope;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  @NotNull\n  public List<Classifier> getClassifiers() {\n    this.init();\n    return this.foundClassifiers;\n  }","id":68772,"modified_method":"@Override\n  @NotNull\n  public List<SNode> getClassifiers() {\n    this.init();\n    return this.foundClassifiers;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@SuppressWarnings(value = {\"unchecked\"})\n  private void init() {\n    if (this.foundClassifiers == null) {\n      this.visitedClassifiersMap = new HashMap<Classifier, Boolean>();\n      this.visitedClassifiersMap.put(this.rootClassifier, true);\n      ISearchScope searchScope = SModelSearchUtil.createModelAndImportedModelsScope(this.model, false, this.scope);\n      this.foundClassifiers = new ArrayList<Classifier>((List) searchScope.getAdapters(new Condition<INodeAdapter>() {\n        public boolean met(INodeAdapter adapter) {\n          return adapter instanceof Classifier && AllSubclassifiersScope.this.checkSubclassifier((Classifier) adapter);\n        }\n      }));\n      this.visitedClassifiersMap.clear();\n    }\n  }","id":68773,"modified_method":"@SuppressWarnings(value = {\"unchecked\"})\n  private void init() {\n    if (this.foundClassifiers == null) {\n      this.visitedClassifiersMap = new HashMap<SNode, Boolean>();\n      this.visitedClassifiersMap.put(this.rootClassifier, true);\n      ISearchScope searchScope = SModelSearchUtil.createModelAndImportedModelsScope(this.model, false, this.scope);\n      this.foundClassifiers = new ArrayList<SNode>((List) searchScope.getNodes(new Condition<SNode>() {\n        public boolean met(SNode node) {\n          return SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\") && AllSubclassifiersScope.this.checkSubclassifier(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\"));\n        }\n      }));\n      this.visitedClassifiersMap.clear();\n    }\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<Classifier> getClassifiers() {\n    if (this.myTopClassifier == null) {\n      return new ArrayList<Classifier>();\n    }\n    return new ArrayList<Classifier>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getClassifiers());\n  }","id":68774,"modified_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    if (this.myTopClassifier == null) {\n      return new ArrayList<SNode>();\n    }\n    return BaseAdapter.toNodes(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getClassifiers());\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_InterfaceExtension_7161354651095876188(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode outputConcept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.InterfaceExtension\");\n      SNode childConcept = (SNode) _context.getChildConcept();\n      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {\n        Calculable calc = new Calculable() {\n          public Object calculate() {\n            List<Classifier> classifiers = new VisibleClassifiersScope(_context.getParentNode(), IClassifiersSearchScope.CLASS, operationContext.getScope()).getClassifiers();\n            List<Tuples._2<SNode, SNode>> result = ListSequence.fromList(new ArrayList<Tuples._2<SNode, SNode>>());\n            for (final SNode iep : SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), \"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\")) {\n              for (SNode cc : Sequence.fromIterable(((Iterable<Classifier>) classifiers)).<SNode>select(new ISelector<Classifier, SNode>() {\n                public SNode select(Classifier cls) {\n                  return (SNode) cls.getNode();\n                }\n              }).where(new IWhereFilter<SNode>() {\n                public boolean accept(SNode cls) {\n                  return SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\") && Classifier_Behavior.call_isDescendant_7165541881557222913(cls, SLinkOperations.getTarget(iep, \"iface\", false));\n                }\n              })) {\n                ListSequence.fromList(result).addElement(MultiTuple.<SNode,SNode>from(iep, cc));\n              }\n            }\n            return result;\n          }\n        };\n        Iterable<Tuples._2<SNode, SNode>> queryResult = (Iterable) calc.calculate();\n        if (queryResult != null) {\n          for (final Tuples._2<SNode, SNode> item : queryResult) {\n            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {\n              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {\n                SNode ie = SConceptOperations.createNewNode(\"jetbrains.mps.platform.conf.structure.InterfaceExtension\", null);\n                SLinkOperations.setTarget(ie, \"extensionPoint\", (item)._0(), false);\n                SLinkOperations.setTarget(ie, \"impl\", (item)._1(), false);\n                return ie;\n              }\n\n              public String getMatchingText(String pattern) {\n                return SPropertyOperations.getString((item)._0(), \"name\") + \" implementation=\" + SPropertyOperations.getString((item)._1(), \"name\");\n              }\n\n              public String getVisibleMatchingText(String pattern) {\n                return this.getMatchingText(pattern);\n              }\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }","id":68775,"modified_method":"public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_InterfaceExtension_7161354651095876188(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode outputConcept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.InterfaceExtension\");\n      SNode childConcept = (SNode) _context.getChildConcept();\n      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {\n        Calculable calc = new Calculable() {\n          public Object calculate() {\n            List<SNode> classifiers = new VisibleClassifiersScope(_context.getParentNode(), IClassifiersSearchScope.CLASS, operationContext.getScope()).getClassifiers();\n            List<Tuples._2<SNode, SNode>> result = ListSequence.fromList(new ArrayList<Tuples._2<SNode, SNode>>());\n            for (final SNode iep : SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), \"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\")) {\n              for (SNode cc : ListSequence.fromList(classifiers).<SNode>select(new ISelector<SNode, SNode>() {\n                public SNode select(SNode cls) {\n                  return SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n                }\n              }).where(new IWhereFilter<SNode>() {\n                public boolean accept(SNode cls) {\n                  return SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\") && Classifier_Behavior.call_isDescendant_7165541881557222913(cls, SLinkOperations.getTarget(iep, \"iface\", false));\n                }\n              })) {\n                ListSequence.fromList(result).addElement(MultiTuple.<SNode,SNode>from(iep, cc));\n              }\n            }\n            return result;\n          }\n        };\n        Iterable<Tuples._2<SNode, SNode>> queryResult = (Iterable) calc.calculate();\n        if (queryResult != null) {\n          for (final Tuples._2<SNode, SNode> item : queryResult) {\n            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {\n              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {\n                SNode ie = SConceptOperations.createNewNode(\"jetbrains.mps.platform.conf.structure.InterfaceExtension\", null);\n                SLinkOperations.setTarget(ie, \"extensionPoint\", (item)._0(), false);\n                SLinkOperations.setTarget(ie, \"impl\", (item)._1(), false);\n                return ie;\n              }\n\n              public String getMatchingText(String pattern) {\n                return SPropertyOperations.getString((item)._0(), \"name\") + \" implementation=\" + SPropertyOperations.getString((item)._1(), \"name\");\n              }\n\n              public String getVisibleMatchingText(String pattern) {\n                return this.getMatchingText(pattern);\n              }\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IntefaceExtensionPoint_6618365175184889516(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode outputConcept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\");\n      SNode childConcept = (SNode) _context.getChildConcept();\n      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {\n        Calculable calc = new Calculable() {\n          public Object calculate() {\n            return Sequence.fromIterable(((Iterable<Classifier>) new VisibleClassifiersScope(_context.getParentNode(), IClassifiersSearchScope.INTERFACE, operationContext.getScope()).getClassifiers())).<SNode>select(new ISelector<Classifier, SNode>() {\n              public SNode select(Classifier cls) {\n                return (SNode) cls.getNode();\n              }\n            }).toListSequence();\n          }\n        };\n        Iterable<SNode> queryResult = (Iterable) calc.calculate();\n        if (queryResult != null) {\n          for (final SNode item : queryResult) {\n            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {\n              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {\n                SNode iep = SConceptOperations.createNewNode(\"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\", null);\n                SLinkOperations.setTarget(iep, \"iface\", (item), false);\n                return iep;\n              }\n\n              public String getMatchingText(String pattern) {\n                return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\"), \"alias\") + \" interface\" + \"=\" + INamedConcept_Behavior.call_getFqName_1213877404258((item));\n              }\n\n              public String getVisibleMatchingText(String pattern) {\n                return this.getMatchingText(pattern);\n              }\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }","id":68776,"modified_method":"public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IntefaceExtensionPoint_6618365175184889516(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode outputConcept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\");\n      SNode childConcept = (SNode) _context.getChildConcept();\n      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {\n        Calculable calc = new Calculable() {\n          public Object calculate() {\n            return ListSequence.fromList((new VisibleClassifiersScope(_context.getParentNode(), IClassifiersSearchScope.INTERFACE, operationContext.getScope()).getClassifiers())).<SNode>select(new ISelector<SNode, SNode>() {\n              public SNode select(SNode cls) {\n                return SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.Interface\");\n              }\n            }).toListSequence();\n          }\n        };\n        Iterable<SNode> queryResult = (Iterable) calc.calculate();\n        if (queryResult != null) {\n          for (final SNode item : queryResult) {\n            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {\n              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {\n                SNode iep = SConceptOperations.createNewNode(\"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\", null);\n                SLinkOperations.setTarget(iep, \"iface\", (item), false);\n                return iep;\n              }\n\n              public String getMatchingText(String pattern) {\n                return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint\"), \"alias\") + \" interface\" + \"=\" + INamedConcept_Behavior.call_getFqName_1213877404258((item));\n              }\n\n              public String getVisibleMatchingText(String pattern) {\n                return this.getMatchingText(pattern);\n              }\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_BeanExtensionPoint_6183559520328570476(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode outputConcept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.BeanExtensionPoint\");\n      SNode childConcept = (SNode) _context.getChildConcept();\n      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {\n        Calculable calc = new Calculable() {\n          public Object calculate() {\n            return Sequence.fromIterable(((Iterable<Classifier>) new VisibleClassifiersScope(_context.getParentNode(), IClassifiersSearchScope.CLASS, operationContext.getScope()).getClassifiers())).<SNode>select(new ISelector<Classifier, SNode>() {\n              public SNode select(Classifier cls) {\n                return (SNode) cls.getNode();\n              }\n            }).where(new IWhereFilter<SNode>() {\n              public boolean accept(SNode node) {\n                return BeanUtil.isBean(SNodeOperations.as(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"));\n              }\n            }).toListSequence();\n          }\n        };\n        Iterable<SNode> queryResult = (Iterable) calc.calculate();\n        if (queryResult != null) {\n          for (final SNode item : queryResult) {\n            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {\n              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {\n                SNode bep = SConceptOperations.createNewNode(\"jetbrains.mps.platform.conf.structure.BeanExtensionPoint\", null);\n                SLinkOperations.setTarget(bep, \"beanClass\", (item), false);\n                return bep;\n              }\n\n              public String getMatchingText(String pattern) {\n                return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.BeanExtensionPoint\"), \"alias\") + \" \" + \"beanClass\" + \"=\" + INamedConcept_Behavior.call_getFqName_1213877404258((item));\n              }\n\n              public String getVisibleMatchingText(String pattern) {\n                return this.getMatchingText(pattern);\n              }\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }","id":68777,"modified_method":"public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_BeanExtensionPoint_6183559520328570476(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode outputConcept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.BeanExtensionPoint\");\n      SNode childConcept = (SNode) _context.getChildConcept();\n      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {\n        Calculable calc = new Calculable() {\n          public Object calculate() {\n            return ListSequence.fromList((new VisibleClassifiersScope(_context.getParentNode(), IClassifiersSearchScope.CLASS, operationContext.getScope()).getClassifiers())).<SNode>select(new ISelector<SNode, SNode>() {\n              public SNode select(SNode cls) {\n                return SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n              }\n            }).where(new IWhereFilter<SNode>() {\n              public boolean accept(SNode node) {\n                return BeanUtil.isBean(node);\n              }\n            }).toListSequence();\n          }\n        };\n        Iterable<SNode> queryResult = (Iterable) calc.calculate();\n        if (queryResult != null) {\n          for (final SNode item : queryResult) {\n            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {\n              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {\n                SNode bep = SConceptOperations.createNewNode(\"jetbrains.mps.platform.conf.structure.BeanExtensionPoint\", null);\n                SLinkOperations.setTarget(bep, \"beanClass\", (item), false);\n                return bep;\n              }\n\n              public String getMatchingText(String pattern) {\n                return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.platform.conf.structure.BeanExtensionPoint\"), \"alias\") + \" \" + \"beanClass\" + \"=\" + INamedConcept_Behavior.call_getFqName_1213877404258((item));\n              }\n\n              public String getVisibleMatchingText(String pattern) {\n                return this.getMatchingText(pattern);\n              }\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<Classifier> getClassifiers() {\n    List<SModelDescriptor> models = new ModelAndImportedModelsScope(this.myModel, false, this.myScope).getModels();\n    List<Classifier> result = new ArrayList<Classifier>();\n    for (SModelDescriptor model : models) {\n      List<Classifier> classifiers = ClassifiersCache.getInstance(model).getClassifiers();\n      result.addAll(classifiers);\n    }\n    return result;\n  }","id":68778,"modified_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    List<SModelDescriptor> models = new ModelAndImportedModelsScope(this.myModel, false, this.myScope).getModels();\n    List<SNode> result = new ArrayList<SNode>();\n    for (SModelDescriptor model : models) {\n      List<SNode> classifiers = BaseAdapter.toNodes(ClassifiersCache.getInstance(model).getClassifiers());\n      result.addAll(classifiers);\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ?\n      _context.getEnclosingNode() :\n      _context.getReferenceNode()\n    ), IClassifiersSearchScope.CLASSIFFIER, operationContext.getScope()) {\n      @NotNull\n      @Override\n      public List<Classifier> getClassifiers() {\n        Set<SNode> enclosingClassifierAncestors = SetSequence.fromSet(new HashSet<SNode>());\n        SetSequence.fromSet(enclosingClassifierAncestors).addSequence(ListSequence.fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(), \"jetbrains.mps.baseLanguage.structure.Classifier\", false)));\n\n        List<Classifier> result = new ArrayList();\n        for (Classifier classifier : ListSequence.fromList(super.getClassifiers())) {\n          if (classifier.getNonStatic()) {\n            continue;\n          }\n          if (classifier instanceof AnonymousClass) {\n            continue;\n          }\n          List<SNode> ancestors = classifier.getNode().getAncestors(true);\n          // Filtering out Classifiers located in third-party containers (not Classifiers) \n          // and having no common Classifier container with enclosing node. \n          // Useful for Classifiers contained in EditorTestCases \n          // (\"result\" should not be able to access classifiers from \"nodeToEdit\")... \n          if (ListSequence.fromList(ancestors).where(new IWhereFilter<SNode>() {\n            public boolean accept(SNode it) {\n              return !(SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.Classifier\"));\n            }\n          }).isNotEmpty() && ListSequence.fromList(ancestors).intersect(SetSequence.fromSet(enclosingClassifierAncestors)).isEmpty()) {\n            continue;\n          }\n          result.add(classifier);\n        }\n        return result;\n      }\n    };\n  }","id":68779,"modified_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ?\n      _context.getEnclosingNode() :\n      _context.getReferenceNode()\n    ), IClassifiersSearchScope.CLASSIFFIER, operationContext.getScope()) {\n      @NotNull\n      @Override\n      public List<SNode> getClassifiers() {\n        Set<SNode> enclosingClassifierAncestors = SetSequence.fromSet(new HashSet<SNode>());\n        SetSequence.fromSet(enclosingClassifierAncestors).addSequence(ListSequence.fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(), \"jetbrains.mps.baseLanguage.structure.Classifier\", false)));\n\n        List<SNode> result = new ArrayList<SNode>();\n        for (SNode classifier : ListSequence.fromList(super.getClassifiers())) {\n          if (SPropertyOperations.getBoolean(classifier, \"nonStatic\")) {\n            continue;\n          }\n          if (SNodeOperations.isInstanceOf(classifier, \"jetbrains.mps.baseLanguage.structure.AnonymousClass\")) {\n            continue;\n          }\n          List<SNode> ancestors = SNodeOperations.getAncestors(classifier, null, true);\n          // Filtering out Classifiers located in third-party containers (not Classifiers) \n          // and having no common Classifier container with enclosing node. \n          // Useful for Classifiers contained in EditorTestCases \n          // (\"result\" should not be able to access classifiers from \"nodeToEdit\")... \n          if (ListSequence.fromList(ancestors).where(new IWhereFilter<SNode>() {\n            public boolean accept(SNode it) {\n              return !(SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.Classifier\"));\n            }\n          }).isNotEmpty() && ListSequence.fromList(ancestors).intersect(SetSequence.fromSet(enclosingClassifierAncestors)).isEmpty()) {\n            continue;\n          }\n          result.add(classifier);\n        }\n        return result;\n      }\n    };\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<Classifier> getClassifiers() {\n    List<Classifier> list = super.getClassifiers();\n    List<Classifier> result = new ArrayList<Classifier>(list.size());\n    for (Classifier classifier : list) {\n      if (classifier instanceof Interface) {\n        continue;\n      }\n      if (classifier instanceof ClassConcept && ((ClassConcept) classifier).getAbstractClass()) {\n        continue;\n      }\n      result.add(classifier);\n    }\n    return result;\n  }","id":68780,"modified_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    List<SNode> list = super.getClassifiers();\n    List<SNode> result = new ArrayList<SNode>();\n    for (SNode classifier : list) {\n      if (SNodeOperations.isInstanceOf(classifier, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n        continue;\n      }\n      if (SNodeOperations.isInstanceOf(classifier, \"jetbrains.mps.baseLanguage.structure.ClassConcept\") && SPropertyOperations.getBoolean((SNodeOperations.cast(classifier, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), \"abstractClass\")) {\n        continue;\n      }\n      result.add(classifier);\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<Classifier> getClassifiers() {\n    List<Classifier> list = super.getClassifiers();\n    List<Classifier> result = new ArrayList<Classifier>();\n    for (Classifier classifier : list) {\n      if (VisibilityUtil.isVisible(myContextNode, SNodeOperations.cast(BaseAdapter.fromAdapter(classifier), \"jetbrains.mps.baseLanguage.structure.IVisible\"))) {\n        result.add(classifier);\n      }\n    }\n    return result;\n  }","id":68781,"modified_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    List<SNode> result = new ArrayList<SNode>();\n    for (SNode classifier : super.getClassifiers()) {\n      if (VisibilityUtil.isVisible(myContextNode, classifier)) {\n        result.add(classifier);\n      }\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<Classifier> getClassifiers() {\n    List<Classifier> result = new ArrayList<Classifier>();\n    ClassConcept throwable = SModelUtil_new.findNodeByFQName(\"java.lang.Throwable\", ClassConcept.class, GlobalScope.getInstance());\n    for (Classifier cls : super.getClassifiers()) {\n      if (ClassifierAndSuperClassifiersCache.getInstance(cls).getClassifiers().contains(throwable)) {\n        result.add(cls);\n      }\n    }\n    return result;\n  }","id":68782,"modified_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    List<SNode> result = new ArrayList<SNode>();\n    SNode throwable = SModelUtil.findNodeByFQName(\"java.lang.Throwable\", SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassConcept\"), GlobalScope.getInstance());\n    for (SNode cls : super.getClassifiers()) {\n      if (ClassifierAndSuperClassifiersCache.getInstance(cls).getClassifiers().contains(BaseAdapter.fromNode(throwable))) {\n        result.add(cls);\n      }\n    }\n    return result;\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode call, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    List<SNode> containers = SNodeOperations.getAncestors(call, \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false);\n    Set<SNode> containersAndParentClasses = SetSequence.fromSet(new HashSet<SNode>());\n    for (SNode classConcept : containers) {\n      List<SNode> classifiers = ((List<SNode>) BaseAdapter.toNodes(new ClassifierAndSuperClassifiersScope(((ClassConcept) SNodeOperations.getAdapter(classConcept))).getClassifiers()));\n      for (SNode classifier : classifiers) {\n        SetSequence.fromSet(containersAndParentClasses).addElement(classifier);\n      }\n    }\n    if (!(SetSequence.fromSet(containersAndParentClasses).contains(SNodeOperations.getParent(SLinkOperations.getTarget(call, \"baseMethodDeclaration\", false))))) {\n      {\n        MessageTarget errorTarget = new NodeMessageTarget();\n        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(call, \"This method can't be called from the current context\", \"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)\", \"1228992682236\", null, errorTarget);\n      }\n    }\n  }","id":68783,"modified_method":"public void applyRule(final SNode call, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    List<SNode> containers = SNodeOperations.getAncestors(call, \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false);\n    Set<SNode> containersAndParentClasses = SetSequence.fromSet(new HashSet<SNode>());\n    for (SNode classConcept : containers) {\n      List<SNode> classifiers = new ClassifierAndSuperClassifiersScope(((ClassConcept) SNodeOperations.getAdapter(classConcept))).getClassifiers();\n      for (SNode classifier : classifiers) {\n        SetSequence.fromSet(containersAndParentClasses).addElement(classifier);\n      }\n    }\n    if (!(SetSequence.fromSet(containersAndParentClasses).contains(SNodeOperations.getParent(SLinkOperations.getTarget(call, \"baseMethodDeclaration\", false))))) {\n      {\n        MessageTarget errorTarget = new NodeMessageTarget();\n        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(call, \"This method can't be called from the current context\", \"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)\", \"1228992682236\", null, errorTarget);\n      }\n    }\n  }","commit_id":"df708ed78e2dc725071c686838d77139f870f37e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private ClassifierAndSuperClassifiersCache(Object key, SNode topClassifier) {\n    super(key);\n    this.myTopClassifier = ((Classifier) SNodeOperations.getAdapter(topClassifier));\n  }","id":68784,"modified_method":"private ClassifierAndSuperClassifiersCache(Object key, SNode topClassifier) {\n    super(key);\n    this.myTopClassifier = topClassifier;\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ClassifierVisibleStaticMembersScope(@Nullable SNode classifier, @Nullable SNode contextNode, int constraint) {\n    super(toClassifierType(classifier), contextNode, constraint);\n  }","id":68785,"modified_method":"public ClassifierVisibleStaticMembersScope(@Nullable SNode classifier, @Nullable SNode contextNode, int constraint) {\n    super(toClassifierType(classifier), contextNode, constraint);\n    if ((constraint & IClassifiersSearchScope.STATIC_MEMBER) != constraint) {\n      throw new IllegalArgumentException(\"only static members are applicable\");\n    }\n\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void removeClassifier(Classifier classifier) {\n    String name = this.getRefName(classifier);\n    if (this.myClassifiersByName.containsKey(name)) {\n      List<SNode> nodes = this.myClassifiersByName.get(name);\n      nodes.remove(classifier.getNode());\n      if (nodes.isEmpty()) {\n        this.myClassifiersByName.remove(name);\n      }\n    }\n    this.myNameByClassifier.remove(classifier.getNode());\n    List<Classifier> list = classifier.getStaticInnerClassifierses();\n    for (Classifier innerClassifier : list) {\n      this.removeClassifier(innerClassifier);\n    }\n  }","id":68786,"modified_method":"private void removeClassifier(SNode classifier) {\n    String name = this.getRefName(classifier);\n    if (MapSequence.fromMap(myClassifiersByName).containsKey(name)) {\n      List<SNode> nodes = MapSequence.fromMap(myClassifiersByName).get(name);\n      nodes.remove(classifier);\n      if (ListSequence.fromList(nodes).isEmpty()) {\n        MapSequence.fromMap(myClassifiersByName).removeKey(name);\n      }\n    }\n    MapSequence.fromMap(myNameByClassifier).removeKey(classifier);\n    List<SNode> list = SLinkOperations.getTargets(classifier, \"staticInnerClassifiers\", true);\n    for (SNode innerClassifier : list) {\n      this.removeClassifier(innerClassifier);\n    }\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<Classifier> getClassifiersByRefName(String refName) {\n    List<SNode> result = this.myClassifiersByName.get(refName);\n    if (result != null) {\n      return BaseAdapter.toAdapters(result);\n    }\n    return new ArrayList<Classifier>();\n  }","id":68787,"modified_method":"public List<SNode> getClassifiersByRefName(String refName) {\n    List<SNode> result = MapSequence.fromMap(myClassifiersByName).get(refName);\n    if (result != null) {\n      return result;\n    }\n    return new ArrayList<SNode>();\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void putClassifier(Classifier classifier) {\n    String name = this.getRefName(classifier);\n    if (!(this.myClassifiersByName.containsKey(name))) {\n      this.myClassifiersByName.put(name, new ArrayList<SNode>(1));\n    }\n    this.myClassifiersByName.get(name).add(classifier.getNode());\n    this.myNameByClassifier.put(classifier.getNode(), name);\n    List<Classifier> list = classifier.getStaticInnerClassifierses();\n    for (Classifier innerClassifier : list) {\n      this.putClassifier(innerClassifier);\n    }\n  }","id":68788,"modified_method":"private void putClassifier(SNode classifier) {\n    String name = this.getRefName(classifier);\n    if (!(MapSequence.fromMap(myClassifiersByName).containsKey(name))) {\n      MapSequence.fromMap(myClassifiersByName).put(name, new ArrayList<SNode>());\n    }\n    ListSequence.fromList(MapSequence.fromMap(myClassifiersByName).get(name)).addElement(classifier);\n    MapSequence.fromMap(myNameByClassifier).put(classifier, name);\n    List<SNode> list = SLinkOperations.getTargets(classifier, \"staticInnerClassifiers\", true);\n    for (SNode innerClassifier : list) {\n      this.putClassifier(innerClassifier);\n    }\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<Classifier> getClassifiers() {\n    List<SNode> result = new ArrayList<SNode>(this.myNameByClassifier.keySet());\n    return BaseAdapter.toAdapters(result);\n  }","id":68789,"modified_method":"public List<SNode> getClassifiers() {\n    return new ArrayList<SNode>(MapSequence.fromMap(this.myNameByClassifier).keySet());\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void collectInnerClasses(Classifier classConcept, List<Classifier> list) {\n    List<Classifier> inners = classConcept.getStaticInnerClassifierses();\n    list.addAll(inners);\n    for (Classifier inner : inners) {\n      this.collectInnerClasses(inner, list);\n    }\n  }","id":68790,"modified_method":"private void collectInnerClasses(SNode classConcept, List<SNode> list) {\n    List<SNode> inners = SLinkOperations.getTargets(classConcept, \"staticInnerClassifiers\", true);\n    list.addAll(inners);\n    for (SNode inner : inners) {\n      this.collectInnerClasses(inner, list);\n    }\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void processNode(SNode adapter, boolean put) {\n    if (SNodeOperations.isInstanceOf(adapter, \"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n      Classifier classifier = ((Classifier) SNodeOperations.getAdapter(SNodeOperations.cast(adapter, \"jetbrains.mps.baseLanguage.structure.Classifier\")));\n      if (put) {\n        this.putClassifier(classifier);\n      } else {\n        this.removeClassifier(classifier);\n      }\n    } else {\n      for (SNode child : SNodeOperations.getChildren(adapter)) {\n        this.processNode(child, put);\n      }\n    }\n  }","id":68791,"modified_method":"private void processNode(SNode node, boolean put) {\n    if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n      SNode classifier = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\");\n      if (put) {\n        this.putClassifier(classifier);\n      } else {\n        this.removeClassifier(classifier);\n      }\n    } else {\n      for (SNode child : SNodeOperations.getChildren(node)) {\n        this.processNode(child, put);\n      }\n    }\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void propertyChanged(SModelPropertyEvent event) {\n    BaseAdapter adapter = event.getNode().getAdapter();\n    if (adapter instanceof Classifier && Classifier.NAME.equals(event.getPropertyName())) {\n      List<Classifier> classifiersToUpdate = new ArrayList<Classifier>();\n      classifiersToUpdate.add(((Classifier) adapter));\n      this.collectInnerClasses((Classifier) adapter, classifiersToUpdate);\n      for (Classifier classifier : classifiersToUpdate) {\n        String oldRefName = this.myNameByClassifier.get(classifier.getNode());\n        List<SNode> nodes = this.myClassifiersByName.get(oldRefName);\n        if (nodes != null) {\n          nodes.remove(classifier.getNode());\n        }\n        if (nodes == null || nodes.isEmpty()) {\n          this.myClassifiersByName.remove(oldRefName);\n        }\n        this.myNameByClassifier.remove(classifier.getNode());\n      }\n      this.putClassifier(((Classifier) adapter));\n    }\n  }","id":68792,"modified_method":"public void propertyChanged(SModelPropertyEvent event) {\n    SNode node = event.getNode();\n    if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\") && \"name\".equals(event.getPropertyName())) {\n      SNode classifier = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\");\n      List<SNode> classifiersToUpdate = new ArrayList<SNode>();\n      ListSequence.fromList(classifiersToUpdate).addElement(classifier);\n      collectInnerClasses(classifier, classifiersToUpdate);\n      for (SNode cl : classifiersToUpdate) {\n        String oldRefName = MapSequence.fromMap(myNameByClassifier).get(cl);\n        List<SNode> nodes = MapSequence.fromMap(myClassifiersByName).get(oldRefName);\n        if (nodes != null) {\n          nodes.remove(cl);\n        }\n        if (nodes == null || nodes.isEmpty()) {\n          MapSequence.fromMap(myClassifiersByName).removeKey(oldRefName);\n        }\n        MapSequence.fromMap(myNameByClassifier).removeKey(cl);\n      }\n      this.putClassifier(classifier);\n    }\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void _populateLocalVariables(SNode loopStatement, List<SNode> result) {\n    for (SNode child : SNodeOperations.getChildren(loopStatement)) {\n      if (child.getRole_().equals(AbstractLoopStatement.BODY)) {\n        continue;\n      }\n      if (SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\")) {\n        result.add(child);\n      }\n      List<SNode> moreChildren = SNodeOperations.getDescendants(child, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", false, new String[]{});\n      for (SNode child_ : moreChildren) {\n        result.add(child_);\n      }\n    }\n    SNode containingLoop = SNodeOperations.as(LocalVariablesScope.findThisOrParent(SNodeOperations.getParent(loopStatement), SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\")), \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\");\n    if (containingLoop != null) {\n      this._populateLocalVariables(containingLoop, result);\n    }\n  }","id":68793,"modified_method":"private void _populateLocalVariables(SNode loopStatement, List<SNode> result) {\n    for (SNode child : SNodeOperations.getChildren(loopStatement)) {\n      if (child.getRole_().equals(\"body\")) {\n        continue;\n      }\n      if (SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\")) {\n        result.add(child);\n      }\n      List<SNode> moreChildren = SNodeOperations.getDescendants(child, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", false, new String[]{});\n      for (SNode child_ : moreChildren) {\n        result.add(child_);\n      }\n    }\n    SNode containingLoop = SNodeOperations.as(LocalVariablesScope.findThisOrParent(SNodeOperations.getParent(loopStatement), SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\")), \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\");\n    if (containingLoop != null) {\n      this._populateLocalVariables(containingLoop, result);\n    }\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<SNode> replaceNodeMenu_parameterObjects(SNode classifier, SNode contextNode) {\n    ISearchScope searchScope = new ClassifierVisibleStaticMembersScope(((Classifier) SNodeOperations.getAdapter(classifier)), contextNode, IClassifiersSearchScope.STATIC_MEMBER);\n    List<SNode> members = (List<SNode>) searchScope.getNodes();\n    List<SNode> result = ListSequence.fromList(members).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\") || SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\") || SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration\");\n      }\n    }).toListSequence();\n    if (SNodeOperations.isInstanceOf(classifier, \"jetbrains.mps.baseLanguage.structure.EnumClass\")) {\n      ListSequence.fromList(result).addElement(SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumValueOfExpression\", null));\n      ListSequence.fromList(result).addElement(SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumValuesExpression\", null));\n    }\n    return result;\n  }","id":68794,"modified_method":"public static List<SNode> replaceNodeMenu_parameterObjects(SNode classifier, SNode contextNode) {\n    ISearchScope searchScope = new ClassifierVisibleStaticMembersScope(classifier, contextNode, IClassifiersSearchScope.STATIC_MEMBER);\n    List<SNode> members = (List<SNode>) searchScope.getNodes();\n    List<SNode> result = ListSequence.fromList(members).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\") || SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\") || SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration\");\n      }\n    }).toListSequence();\n    if (SNodeOperations.isInstanceOf(classifier, \"jetbrains.mps.baseLanguage.structure.EnumClass\")) {\n      ListSequence.fromList(result).addElement(SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumValueOfExpression\", null));\n      ListSequence.fromList(result).addElement(SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumValuesExpression\", null));\n    }\n    return result;\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode resolve(String referenceInfo, SModelReference targetModelReference) {\n      SModelDescriptor targetModel = this.myScope.getModelDescriptor(targetModelReference);\n      if (targetModel == null) {\n        return null;\n      }\n      List<Classifier> classifiers = ClassifiersCache.getInstance(targetModel).getClassifiersByRefName(referenceInfo);\n      if (classifiers.size() > 0) {\n        return classifiers.get(0).getNode();\n      }\n      return null;\n    }","id":68795,"modified_method":"public SNode resolve(String referenceInfo, SModelReference targetModelReference) {\n      SModelDescriptor targetModel = this.myScope.getModelDescriptor(targetModelReference);\n      if (targetModel == null) {\n        return null;\n      }\n      List<SNode> classifiers = ClassifiersCache.getInstance(targetModel).getClassifiersByRefName(referenceInfo);\n      if (ListSequence.fromList(classifiers).isNotEmpty()) {\n        return ListSequence.fromList(classifiers).first();\n      }\n      return null;\n    }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    List<SModelDescriptor> models = new ModelAndImportedModelsScope(this.myModel, false, this.myScope).getModels();\n    List<SNode> result = new ArrayList<SNode>();\n    for (SModelDescriptor model : models) {\n      List<SNode> classifiers = BaseAdapter.toNodes(ClassifiersCache.getInstance(model).getClassifiers());\n      result.addAll(classifiers);\n    }\n    return result;\n  }","id":68796,"modified_method":"@NotNull\n  public List<SNode> getClassifiers() {\n    List<SModelDescriptor> models = new ModelAndImportedModelsScope(this.myModel, false, this.myScope).getModels();\n    List<SNode> result = new ArrayList<SNode>();\n    for (SModelDescriptor model : models) {\n      List<SNode> classifiers = ClassifiersCache.getInstance(model).getClassifiers();\n      ListSequence.fromList(result).addSequence(ListSequence.fromList(classifiers));\n    }\n    return result;\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {\n    if (SModelUtil.isAssignableConcept(NameUtil.nodeFQName(targetConcept), ConstructorDeclaration.concept)) {\n      if (SNodeOperations.isInstanceOf(referenceNode, \"jetbrains.mps.baseLanguage.structure.ClassCreator\")) {\n        SNode classCreator = SNodeOperations.cast(referenceNode, \"jetbrains.mps.baseLanguage.structure.ClassCreator\");\n        return new VisibleClassConstructorsScope.ConstructorDeclarationReferenceInfoResolver(SLinkOperations.getTargets(classCreator, \"actualArgument\", true), SLinkOperations.getTargets(classCreator, \"typeParameter\", true), getModel(), getScope());\n      }\n    }\n    return super.getReferenceInfoResolver(referenceNode, targetConcept);\n  }","id":68797,"modified_method":"public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {\n    if (SModelUtil.isAssignableConcept(NameUtil.nodeFQName(targetConcept), \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\")) {\n      if (SNodeOperations.isInstanceOf(referenceNode, \"jetbrains.mps.baseLanguage.structure.ClassCreator\")) {\n        SNode classCreator = SNodeOperations.cast(referenceNode, \"jetbrains.mps.baseLanguage.structure.ClassCreator\");\n        return new VisibleClassConstructorsScope.ConstructorDeclarationReferenceInfoResolver(SLinkOperations.getTargets(classCreator, \"actualArgument\", true), SLinkOperations.getTargets(classCreator, \"typeParameter\", true), getModel(), getScope());\n      }\n    }\n    return super.getReferenceInfoResolver(referenceNode, targetConcept);\n  }","commit_id":"ffde138e998cd45a704ff3fbab682ce027afcd4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void applyThresholds(String rrdPath, MonitoredService service, String dsName, LinkedHashMap<String, Number> entries) {\n\ttry {\n        if (m_thresholdingSet == null) {\n            RrdRepository repository = new RrdRepository();\n            repository.setRrdBaseDir(new File(rrdPath));\n            // Interval does not make sense for Latency Thresholding, because all values are gauge.\n            m_thresholdingSet = new LatencyThresholdingSet(service.getNodeId(), service.getIpAddr(), service.getSvcName(), repository, 0);\n        }\n        if (m_thresholdingSet.hasThresholds(dsName)) {\n            LinkedHashMap<String, Double> attributes = new LinkedHashMap<String, Double>();\n            for (String ds : entries.keySet()) {\n                attributes.put(ds, entries.get(ds).doubleValue());\n            }\n            List<Event> events = m_thresholdingSet.applyThresholds(dsName, attributes);\n            if (events.size() > 0) {\n                ThresholdingEventProxy proxy = new ThresholdingEventProxy();\n                proxy.add(events);\n                proxy.sendAllEvents();\n            }\n        }\n\n\t} catch(Exception e) {\n\t    log().error(\"Failed to threshold on \" + service + \" for \" + dsName + \" because of an exception\", e);\n\t}\n    }","id":68798,"modified_method":"private void applyThresholds(String rrdPath, MonitoredService service, String dsName, LinkedHashMap<String, Number> entries) {\n\ttry {\n        if (m_thresholdingSet == null) {\n            RrdRepository repository = new RrdRepository();\n            repository.setRrdBaseDir(new File(rrdPath));\n            // Interval does not make sense for Latency Thresholding, because all values are gauge.\n            m_thresholdingSet = new LatencyThresholdingSet(service.getNodeId(), service.getIpAddr(), service.getSvcName(), repository, 0);\n        }\n        LinkedHashMap<String, Double> attributes = new LinkedHashMap<String, Double>();\n        for (String ds : entries.keySet()) {\n            attributes.put(ds, entries.get(ds).doubleValue());\n        }\n        if (m_thresholdingSet.hasThresholds(attributes)) {\n            List<Event> events = m_thresholdingSet.applyThresholds(dsName, attributes);\n            if (events.size() > 0) {\n                ThresholdingEventProxy proxy = new ThresholdingEventProxy();\n                proxy.add(events);\n                proxy.sendAllEvents();\n            }\n        }\n\n\t} catch(Exception e) {\n\t    log().error(\"Failed to threshold on \" + service + \" for \" + dsName + \" because of an exception\", e);\n\t}\n    }","commit_id":"a4d5ce283d0b36a5ef56c10324ff28f2597fbc76","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean hasThresholds(String svcName) {\n        return hasThresholds() ? hasThresholds(\"if\", svcName) : false;\n    }","id":68799,"modified_method":"public boolean hasThresholds(Map<String, Double> attributes) {\n        if (hasThresholds()) {\n            for (String ds : attributes.keySet())\n                if (hasThresholds(\"if\", ds))\n                    return true;\n        }\n        return false;\n    }","commit_id":"a4d5ce283d0b36a5ef56c10324ff28f2597fbc76","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test    \n    public void testLatencyThresholdingSet() throws Exception {\n        Integer ifIndex = 1;\n        String ifName = \"lo0\";\n        setupSnmpInterfaceDatabase(\"127.0.0.1\", ifName);\n\n        LatencyThresholdingSet thresholdingSet = new LatencyThresholdingSet(1, \"127.0.0.1\", \"HTTP\", getRepository(), 0);\n        assertTrue(thresholdingSet.hasThresholds()); // Global Test\n        assertTrue(thresholdingSet.hasThresholds(\"http\")); // Datasource Test\n        Map<String, Double> attributes = new HashMap<String, Double>();        \n\n        attributes.put(\"http\", 90.0);\n        List<Event> triggerEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n        assertTrue(triggerEvents.size() == 0);\n\n        // Test Trigger\n        attributes.put(\"http\", 200.0);\n        for (int i = 1; i < 5; i++) {\n            log().debug(\"testLatencyThresholdingSet: run number \" + i);\n            if (thresholdingSet.hasThresholds(\"http\")) {\n                triggerEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n                assertTrue(triggerEvents.size() == 0);\n            }\n        }\n        if (thresholdingSet.hasThresholds(\"http\")) {\n            log().debug(\"testLatencyThresholdingSet: run number 5\");\n            triggerEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n            assertTrue(triggerEvents.size() == 1);\n        }\n        \n        // Test Rearm\n        List<Event> rearmEvents = null;\n        if (thresholdingSet.hasThresholds(\"http\")) {\n            attributes.put(\"http\", 40.0);\n            rearmEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n            assertTrue(rearmEvents.size() == 1);\n        }\n\n        // Validate Events\n        addEvent(\"uei.opennms.org/threshold/highThresholdExceeded\", \"127.0.0.1\", \"HTTP\", 5, 100, 50, 200, \"Unknown\", \"127.0.0.1[http]\", \"http\", ifName, ifIndex.toString());\n        addEvent(\"uei.opennms.org/threshold/highThresholdRearmed\", \"127.0.0.1\", \"HTTP\", 5, 100, 50, 40, \"Unknown\", \"127.0.0.1[http]\", \"http\", ifName, ifIndex.toString());\n        ThresholdingEventProxy proxy = new ThresholdingEventProxy();\n        proxy.add(triggerEvents);\n        proxy.add(rearmEvents);\n        proxy.sendAllEvents();\n        verifyEvents(0);\n    }","id":68800,"modified_method":"@Test    \n    public void testLatencyThresholdingSet() throws Exception {\n        Integer ifIndex = 1;\n        String ifName = \"lo0\";\n        setupSnmpInterfaceDatabase(\"127.0.0.1\", ifName);\n\n        LatencyThresholdingSet thresholdingSet = new LatencyThresholdingSet(1, \"127.0.0.1\", \"HTTP\", getRepository(), 0);\n        assertTrue(thresholdingSet.hasThresholds()); // Global Test\n        Map<String, Double> attributes = new HashMap<String, Double>();\n        attributes.put(\"http\", 90.0);\n        assertTrue(thresholdingSet.hasThresholds(attributes)); // Datasource Test\n        List<Event> triggerEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n        assertTrue(triggerEvents.size() == 0);\n\n        // Test Trigger\n        attributes.put(\"http\", 200.0);\n        for (int i = 1; i < 5; i++) {\n            log().debug(\"testLatencyThresholdingSet: run number \" + i);\n            if (thresholdingSet.hasThresholds(attributes)) {\n                triggerEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n                assertTrue(triggerEvents.size() == 0);\n            }\n        }\n        if (thresholdingSet.hasThresholds(attributes)) {\n            log().debug(\"testLatencyThresholdingSet: run number 5\");\n            triggerEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n            assertTrue(triggerEvents.size() == 1);\n        }\n        \n        // Test Rearm\n        List<Event> rearmEvents = null;\n        if (thresholdingSet.hasThresholds(attributes)) {\n            attributes.put(\"http\", 40.0);\n            rearmEvents = thresholdingSet.applyThresholds(\"http\", attributes);\n            assertTrue(rearmEvents.size() == 1);\n        }\n\n        // Validate Events\n        addEvent(\"uei.opennms.org/threshold/highThresholdExceeded\", \"127.0.0.1\", \"HTTP\", 5, 100, 50, 200, \"Unknown\", \"127.0.0.1[http]\", \"http\", ifName, ifIndex.toString());\n        addEvent(\"uei.opennms.org/threshold/highThresholdRearmed\", \"127.0.0.1\", \"HTTP\", 5, 100, 50, 40, \"Unknown\", \"127.0.0.1[http]\", \"http\", ifName, ifIndex.toString());\n        ThresholdingEventProxy proxy = new ThresholdingEventProxy();\n        proxy.add(triggerEvents);\n        proxy.add(rearmEvents);\n        proxy.sendAllEvents();\n        verifyEvents(0);\n    }","commit_id":"a4d5ce283d0b36a5ef56c10324ff28f2597fbc76","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testBug3488() throws Exception {\n        String ipAddress = \"127.0.0.1\";\n        setupSnmpInterfaceDatabase(ipAddress, null);\n        LatencyThresholdingSet thresholdingSet = new LatencyThresholdingSet(1, ipAddress, \"HTTP\", getRepository(), 0);\n        assertTrue(thresholdingSet.hasThresholds()); // Global Test\n        assertTrue(thresholdingSet.hasThresholds(\"http\")); // Datasource Test\n        Map<String, Double> attributes = new HashMap<String, Double>();\n        attributes.put(\"http\", 200.0);\n\n        m_defaultErrorLevelToCheck = Level.ERROR;\n        List<Event> triggerEvents = new ArrayList<Event>();\n        for (int i=0; i<5; i++)\n            triggerEvents.addAll(thresholdingSet.applyThresholds(\"http\", attributes));\n        LoggingEvent[] events = MockLogAppender.getEventsGreaterOrEqual(Level.WARN);\n        assertEquals(\"expecting 5 events\", 5, events.length);\n        for (LoggingEvent e : events)\n            assertEquals(\"Interface (nodeId/ipAddr=1/127.0.0.1) has no ifName and no ifDescr...setting to label to 'no_ifLabel'.\", e.getMessage());\n        assertTrue(triggerEvents.size() == 1);\n\n        addEvent(\"uei.opennms.org/threshold/highThresholdExceeded\", \"127.0.0.1\", \"HTTP\", 5, 100, 50, 200, \"Unknown\", \"127.0.0.1[http]\", \"http\", \"no_ifLabel\", null);\n        ThresholdingEventProxy proxy = new ThresholdingEventProxy();\n        proxy.add(triggerEvents);\n        proxy.sendAllEvents();\n        verifyEvents(0);\n    }","id":68801,"modified_method":"@Test\n    public void testBug3488() throws Exception {\n        String ipAddress = \"127.0.0.1\";\n        setupSnmpInterfaceDatabase(ipAddress, null);\n        LatencyThresholdingSet thresholdingSet = new LatencyThresholdingSet(1, ipAddress, \"HTTP\", getRepository(), 0);\n        assertTrue(thresholdingSet.hasThresholds()); // Global Test\n        Map<String, Double> attributes = new HashMap<String, Double>();\n        attributes.put(\"http\", 200.0);\n        assertTrue(thresholdingSet.hasThresholds(attributes)); // Datasource Test\n\n        m_defaultErrorLevelToCheck = Level.ERROR;\n        List<Event> triggerEvents = new ArrayList<Event>();\n        for (int i=0; i<5; i++)\n            triggerEvents.addAll(thresholdingSet.applyThresholds(\"http\", attributes));\n        LoggingEvent[] events = MockLogAppender.getEventsGreaterOrEqual(Level.WARN);\n        assertEquals(\"expecting 5 events\", 5, events.length);\n        for (LoggingEvent e : events)\n            assertEquals(\"Interface (nodeId/ipAddr=1/127.0.0.1) has no ifName and no ifDescr...setting to label to 'no_ifLabel'.\", e.getMessage());\n        assertTrue(triggerEvents.size() == 1);\n\n        addEvent(\"uei.opennms.org/threshold/highThresholdExceeded\", \"127.0.0.1\", \"HTTP\", 5, 100, 50, 200, \"Unknown\", \"127.0.0.1[http]\", \"http\", \"no_ifLabel\", null);\n        ThresholdingEventProxy proxy = new ThresholdingEventProxy();\n        proxy.add(triggerEvents);\n        proxy.sendAllEvents();\n        verifyEvents(0);\n    }","commit_id":"a4d5ce283d0b36a5ef56c10324ff28f2597fbc76","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public long mkPsiKey(@NotNull PsiMethod psiMethod, Direction direction) throws IOException {\n    final PsiClass psiClass = PsiTreeUtil.getParentOfType(psiMethod, PsiClass.class, false);\n    if (psiClass == null) {\n      LOG.debug(\"PsiClass was null for \" + psiMethod.getName());\n      return -1;\n    }\n    long sigKey = mkPsiSignatureKey(psiMethod);\n    if (sigKey == -1) {\n      return -1;\n    }\n    long directionKey = mkDirectionKey(direction);\n    return sigKey * SHIFT + directionKey;\n  }","id":68802,"modified_method":"/**\n   * Converts a Psi method to a small hash key (HKey).\n   * Returns null if conversion is impossible (something is not resolvable).\n   */\n  @Nullable\n  public static HKey psiKey(@NotNull PsiMethod psiMethod, @NotNull Direction direction, @NotNull MessageDigest md) {\n    final PsiClass psiClass = PsiTreeUtil.getParentOfType(psiMethod, PsiClass.class, false);\n    if (psiClass == null) {\n      return null;\n    }\n    byte[] classDigest = psiClassDigest(psiClass, md);\n    if (classDigest == null) {\n      return null;\n    }\n    byte[] sigDigest = methodDigest(psiMethod, md);\n    if (sigDigest == null) {\n      return null;\n    }\n    byte[] digest = new byte[HASH_SIZE];\n    System.arraycopy(classDigest, 0, digest, 0, CLASS_HASH_SIZE);\n    System.arraycopy(sigDigest, 0, digest, CLASS_HASH_SIZE, SIGNATURE_HASH_SIZE);\n    return new HKey(digest, mkDirectionKey(direction), true);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static String contractElement(int arity, InOut inOut, Value value) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < arity; i++) {\n      Value currentValue = Value.Top;\n      if (i == inOut.paramIndex) {\n        currentValue = inOut.inValue;\n      }\n      if (i > 0) {\n        sb.append(',');\n      }\n      sb.append(contractValueString(currentValue));\n    }\n    sb.append(\"->\");\n    sb.append(contractValueString(value));\n    return sb.toString();\n  }","id":68803,"modified_method":"private static String contractElement(int arity, InOut inOut, Value value) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < arity; i++) {\n      Value currentValue = Value.Top;\n      if (i == inOut.paramIndex) {\n        currentValue = inOut.inValue;\n      }\n      if (i > 0) {\n        sb.append(',');\n      }\n      sb.append(contractValueString(currentValue));\n    }\n    sb.append(\"->\");\n    sb.append(contractValueString(value));\n    return sb.toString();\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addMethodAnnotations(TLongObjectHashMap<Value> internalIdSolutions, Annotations annotations, long methodKey, int arity) {\n\n    List<String> clauses = new ArrayList<String>();\n    TLongObjectIterator<Value> solutionsIterator = internalIdSolutions.iterator();\n\n    TLongHashSet notNulls = annotations.notNulls;\n    TLongObjectHashMap<String> contracts = annotations.contracts;\n    for (int i = internalIdSolutions.size(); i-- > 0;) {\n      solutionsIterator.advance();\n      long key = Math.abs(solutionsIterator.key());\n      Value value = solutionsIterator.value();\n      if (value == Value.Top || value == Value.Bot) {\n        continue;\n      }\n      Direction direction = extractDirection((int)(key % SHIFT));\n      if (value == Value.NotNull && direction instanceof Out && key == methodKey) {\n        notNulls.add(key);\n      }\n      else if (direction instanceof InOut) {\n        long baseKey = key - (key % SHIFT);\n        if (baseKey == methodKey) {\n          clauses.add(contractElement(arity, (InOut)direction, value));\n        }\n      }\n    }\n\n    if (!notNulls.contains(methodKey) && !clauses.isEmpty()) {\n      Collections.sort(clauses);\n      StringBuilder sb = new StringBuilder(\"\\\"\");\n      StringUtil.join(clauses, \";\", sb);\n      sb.append('\"');\n      contracts.put(methodKey, sb.toString().intern());\n    }\n  }","id":68804,"modified_method":"/**\n   * Given `solution` of all dependencies of a method with the `methodKey`, converts this solution into annotations.\n   *\n   * @param solution solution of equations\n   * @param annotations annotations to which corresponding solutions should be added\n   * @param methodKey a primary key of a method being analyzed\n   * @param arity arity of this method (hint for constructing @Contract annotations)\n   */\n  public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull Annotations annotations, @NotNull HKey methodKey, int arity) {\n    List<String> clauses = new ArrayList<String>();\n    HashSet<HKey> notNulls = annotations.notNulls;\n    HashMap<HKey, String> contracts = annotations.contracts;\n    for (Map.Entry<HKey, Value> entry : solution.entrySet()) {\n      HKey key = entry.getKey().mkStable();\n      Value value = entry.getValue();\n      if (value == Value.Top || value == Value.Bot) {\n        continue;\n      }\n      Direction direction = extractDirection(key.dirKey);\n      if (value == Value.NotNull && direction instanceof Out && methodKey.equals(key)) {\n        notNulls.add(key);\n      }\n      else if (direction instanceof InOut) {\n        HKey baseKey = key.mkBase();\n        if (methodKey.equals(baseKey)) {\n          clauses.add(contractElement(arity, (InOut)direction, value));\n        }\n      }\n    }\n\n    if (!notNulls.contains(methodKey) && !clauses.isEmpty()) {\n      Collections.sort(clauses);\n      StringBuilder sb = new StringBuilder(\"\\\"\");\n      StringUtil.join(clauses, \";\", sb);\n      sb.append('\"');\n      contracts.put(methodKey, sb.toString().intern());\n    }\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"IdEquation convert(Equation<Key, Value> equation) throws IOException {\n    ProgressManager.checkCanceled();\n\n    Result<Key, Value> rhs = equation.rhs;\n    IdResult result;\n    if (rhs instanceof Final) {\n      result = new IdFinal(((Final<Key, Value>)rhs).value);\n    } else {\n      Pending<Key, Value> pending = (Pending<Key, Value>)rhs;\n      Set<Product<Key, Value>> sumOrigin = pending.sum;\n      IntIdComponent[] components = new IntIdComponent[sumOrigin.size()];\n      int componentI = 0;\n      for (Product<Key, Value> prod : sumOrigin) {\n        long[] intProd = new long[prod.ids.size()];\n        int idI = 0;\n        for (Key id : prod.ids) {\n          long rawId = mkAsmKey(id);\n          if (rawId <= 0) {\n            LOG.error(\"raw key should be positive. rawId = \" + rawId);\n          }\n          intProd[idI] = id.stable ? rawId : -rawId;\n          idI++;\n        }\n        IntIdComponent intIdComponent = new IntIdComponent(prod.value, intProd);\n        components[componentI] = intIdComponent;\n        componentI++;\n      }\n      result = new IdPending(components);\n    }\n\n    long rawKey = mkAsmKey(equation.id);\n    if (rawKey <= 0) {\n      LOG.error(\"raw key should be positive. rawKey = \" + rawKey);\n    }\n\n    long key = equation.id.stable ? rawKey : -rawKey;\n    return new IdEquation(key, result);\n  }","id":68805,"modified_method":"/**\n   * Converts an equation over asm keys into equation over small hash keys.\n   */\n  @NotNull\n  static HEquation convert(@NotNull Equation<Key, Value> equation, @NotNull MessageDigest md) {\n    ProgressManager.checkCanceled();\n\n    Result<Key, Value> rhs = equation.rhs;\n    HResult result;\n    if (rhs instanceof Final) {\n      result = new HFinal(((Final<Key, Value>)rhs).value);\n    } else {\n      Pending<Key, Value> pending = (Pending<Key, Value>)rhs;\n      Set<Product<Key, Value>> sumOrigin = pending.sum;\n      HComponent[] components = new HComponent[sumOrigin.size()];\n      int componentI = 0;\n      for (Product<Key, Value> prod : sumOrigin) {\n        HKey[] intProd = new HKey[prod.ids.size()];\n        int idI = 0;\n        for (Key id : prod.ids) {\n          intProd[idI] = asmKey(id, md);\n          idI++;\n        }\n        HComponent intIdComponent = new HComponent(prod.value, intProd);\n        components[componentI] = intIdComponent;\n        componentI++;\n      }\n      result = new HPending(components);\n    }\n\n    HKey key = asmKey(equation.id, md);\n    return new HEquation(key, result);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public TLongArrayList mkInOutKeys(@NotNull PsiMethod psiMethod, long primaryKey) throws IOException {\n    PsiParameter[] parameters = psiMethod.getParameterList().getParameters();\n    TLongArrayList keys = new TLongArrayList(parameters.length * 2 + 1);\n    for (int i = 0; i < parameters.length; i++) {\n      PsiParameter parameter = parameters[i];\n      PsiType parameterType = parameter.getType();\n      if (parameterType instanceof PsiPrimitiveType) {\n        if (PsiType.BOOLEAN.equals(parameterType)) {\n          keys.add(primaryKey + mkDirectionKey(new InOut(i, Value.False)));\n          keys.add(primaryKey + mkDirectionKey(new InOut(i, Value.True)));\n        }\n      } else {\n        keys.add(primaryKey + mkDirectionKey(new InOut(i, Value.NotNull)));\n        keys.add(primaryKey + mkDirectionKey(new InOut(i, Value.Null)));\n      }\n    }\n    return keys;\n  }","id":68806,"modified_method":"/**\n   * Given a PSI method and its primary HKey enumerate all contract keys for it.\n   */\n  @NotNull\n  public static ArrayList<HKey> mkInOutKeys(@NotNull PsiMethod psiMethod, @NotNull HKey primaryKey) {\n    PsiParameter[] parameters = psiMethod.getParameterList().getParameters();\n    ArrayList<HKey> keys = new ArrayList<HKey>(parameters.length * 2 + 1);\n    for (int i = 0; i < parameters.length; i++) {\n      PsiParameter parameter = parameters[i];\n      PsiType parameterType = parameter.getType();\n      if (parameterType instanceof PsiPrimitiveType) {\n        if (PsiType.BOOLEAN.equals(parameterType)) {\n          keys.add(primaryKey.updateDirection(mkDirectionKey(new InOut(i, Value.False))));\n          keys.add(primaryKey.updateDirection(mkDirectionKey(new InOut(i, Value.True))));\n        }\n      } else {\n        keys.add(primaryKey.updateDirection(mkDirectionKey(new InOut(i, Value.NotNull))));\n        keys.add(primaryKey.updateDirection(mkDirectionKey(new InOut(i, Value.Null))));\n      }\n    }\n    return keys;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addParameterAnnotations(TLongObjectHashMap<Value> internalIdSolutions, Annotations annotations) {\n    TLongObjectIterator<Value> solutionsIterator = internalIdSolutions.iterator();\n    TLongHashSet notNulls = annotations.notNulls;\n    for (int i = internalIdSolutions.size(); i-- > 0;) {\n      solutionsIterator.advance();\n      long key = Math.abs(solutionsIterator.key());\n      Value value = solutionsIterator.value();\n      if (value == Value.Top || value == Value.Bot) {\n        continue;\n      }\n      Direction direction = extractDirection((int)(key % SHIFT));\n      if (value == Value.NotNull && (direction instanceof In || direction instanceof Out)) {\n        notNulls.add(key);\n      }\n    }\n  }","id":68807,"modified_method":"/**\n   * Converts solutions for equations over parameters into annotations.\n   *\n   * @param solution\n   * @param annotations\n   */\n  public static void addParameterAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull Annotations annotations) {\n    HashSet<HKey> notNulls = annotations.notNulls;\n    for (Map.Entry<HKey, Value> entry : solution.entrySet()) {\n      HKey key = entry.getKey().mkStable();\n      Value value = entry.getValue();\n      if (value == Value.Top || value == Value.Bot) {\n        continue;\n      }\n      Direction direction = extractDirection(key.dirKey);\n      if (value == Value.NotNull && (direction instanceof In || direction instanceof Out)) {\n        notNulls.add(key);\n      }\n    }\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static String contractValueString(Value v) {\n    switch (v) {\n      case False: return \"false\";\n      case True: return \"true\";\n      case NotNull: return \"!null\";\n      case Null: return \"null\";\n      default: return \"_\";\n    }\n  }","id":68808,"modified_method":"private static String contractValueString(@NotNull Value v) {\n    switch (v) {\n      case False: return \"false\";\n      case True: return \"true\";\n      case NotNull: return \"!null\";\n      case Null: return \"null\";\n      default: return \"_\";\n    }\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public ID<Long, IdEquation> getName() {\n    return NAME;\n  }","id":68809,"modified_method":"@NotNull\n  @Override\n  public ID<HKey, HResult> getName() {\n    return NAME;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public int getVersion() {\n    return ourInternalVersion + BytecodeAnalysisConverter.getInstance().getVersion() + (ourEnabled ? 0xFF : 0);\n  }","id":68810,"modified_method":"@Override\n  public int getVersion() {\n    return ourInternalVersion + (ourEnabled ? 0xFF : 0);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public DataIndexer<Long, IdEquation, FileContent> getIndexer() {\n    return INDEXER;\n  }","id":68811,"modified_method":"@NotNull\n  @Override\n  public DataIndexer<HKey, HResult, FileContent> getIndexer() {\n    return INDEXER;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public KeyDescriptor<Long> getKeyDescriptor() {\n    return KEY_DESCRIPTOR;\n  }","id":68812,"modified_method":"@NotNull\n  @Override\n  public KeyDescriptor<HKey> getKeyDescriptor() {\n    return KEY_DESCRIPTOR;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public DataExternalizer<IdEquation> getValueExternalizer() {\n    return myExternalizer;\n  }","id":68813,"modified_method":"@NotNull\n  @Override\n  public DataExternalizer<HResult> getValueExternalizer() {\n    return myExternalizer;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkMethodAnnotations(PsiMethod method) {\n    try {\n      if (ProjectBytecodeAnalysis.getKey(method) == -1) {\n        return;\n      }\n    }\n    catch (IOException e) {\n      fail();\n    }\n\n    // not null-result\n    String externalOutAnnotation =\n      myExternalAnnotationsManager.findExternalAnnotation(method, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n    String inferredOutAnnotation =\n      myInferredAnnotationsManager.findInferredAnnotation(method, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n    String methodKey = PsiFormatUtil.getExternalName(method, false, Integer.MAX_VALUE);\n\n    if (!externalOutAnnotation.equals(inferredOutAnnotation)) {\n      diffs.add(methodKey + \": \" + externalOutAnnotation + \" != \" + inferredOutAnnotation);\n    }\n\n    for (PsiParameter parameter : method.getParameterList().getParameters()) {\n      String parameterKey = PsiFormatUtil.getExternalName(parameter, false, Integer.MAX_VALUE);\n      String externalParameterAnnotation =\n        myExternalAnnotationsManager.findExternalAnnotation(parameter, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n      String inferredParameterAnnotation =\n        myInferredAnnotationsManager.findInferredAnnotation(parameter, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n      if (!externalParameterAnnotation.equals(inferredParameterAnnotation)) {\n        diffs.add(parameterKey + \": \" + externalParameterAnnotation + \" != \" + inferredParameterAnnotation);\n      }\n    }\n\n    PsiAnnotation externalContractAnnotation =\n      myExternalAnnotationsManager.findExternalAnnotation(method, ORG_JETBRAINS_ANNOTATIONS_CONTRACT);\n    PsiAnnotation inferredContractAnnotation =\n      myInferredAnnotationsManager.findInferredAnnotation(method, ORG_JETBRAINS_ANNOTATIONS_CONTRACT);\n\n    String externalContractAnnotationString =\n      externalContractAnnotation == null ? \"null\" : \"@Contract(\" + AnnotationUtil.getStringAttributeValue(externalContractAnnotation, null) + \")\";\n    String inferredContractAnnotationString =\n      inferredContractAnnotation == null ? \"null\" : \"@Contract(\" + AnnotationUtil.getStringAttributeValue(inferredContractAnnotation, null) + \")\";\n\n    if (!externalContractAnnotationString.equals(inferredContractAnnotationString)) {\n      diffs.add(methodKey + \": \" + externalContractAnnotationString + \" != \" + inferredContractAnnotationString);\n    }\n\n  }","id":68814,"modified_method":"private void checkMethodAnnotations(PsiMethod method) {\n\n    if (ProjectBytecodeAnalysis.getKey(method, myMessageDigest) == null) {\n      return;\n    }\n\n    // not null-result\n    String externalOutAnnotation =\n      myExternalAnnotationsManager.findExternalAnnotation(method, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n    String inferredOutAnnotation =\n      myInferredAnnotationsManager.findInferredAnnotation(method, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n    String methodKey = PsiFormatUtil.getExternalName(method, false, Integer.MAX_VALUE);\n\n    if (!externalOutAnnotation.equals(inferredOutAnnotation)) {\n      diffs.add(methodKey + \": \" + externalOutAnnotation + \" != \" + inferredOutAnnotation);\n    }\n\n    for (PsiParameter parameter : method.getParameterList().getParameters()) {\n      String parameterKey = PsiFormatUtil.getExternalName(parameter, false, Integer.MAX_VALUE);\n      String externalParameterAnnotation =\n        myExternalAnnotationsManager.findExternalAnnotation(parameter, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n      String inferredParameterAnnotation =\n        myInferredAnnotationsManager.findInferredAnnotation(parameter, AnnotationUtil.NOT_NULL) == null ? \"null\" : \"@NotNull\";\n      if (!externalParameterAnnotation.equals(inferredParameterAnnotation)) {\n        diffs.add(parameterKey + \": \" + externalParameterAnnotation + \" != \" + inferredParameterAnnotation);\n      }\n    }\n\n    PsiAnnotation externalContractAnnotation =\n      myExternalAnnotationsManager.findExternalAnnotation(method, ORG_JETBRAINS_ANNOTATIONS_CONTRACT);\n    PsiAnnotation inferredContractAnnotation =\n      myInferredAnnotationsManager.findInferredAnnotation(method, ORG_JETBRAINS_ANNOTATIONS_CONTRACT);\n\n    String externalContractAnnotationString =\n      externalContractAnnotation == null ? \"null\" : \"@Contract(\" + AnnotationUtil.getStringAttributeValue(externalContractAnnotation, null) + \")\";\n    String inferredContractAnnotationString =\n      inferredContractAnnotation == null ? \"null\" : \"@Contract(\" + AnnotationUtil.getStringAttributeValue(inferredContractAnnotation, null) + \")\";\n\n    if (!externalContractAnnotationString.equals(inferredContractAnnotationString)) {\n      diffs.add(methodKey + \": \" + externalContractAnnotationString + \" != \" + inferredContractAnnotationString);\n    }\n\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    setUpLibraries();\n    setUpExternalUpAnnotations();\n\n    myInferredAnnotationsManager = InferredAnnotationsManager.getInstance(myModule.getProject());\n    myExternalAnnotationsManager = ExternalAnnotationsManager.getInstance(myModule.getProject());\n  }","id":68815,"modified_method":"@Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    setUpLibraries();\n    setUpExternalUpAnnotations();\n\n    myInferredAnnotationsManager = InferredAnnotationsManager.getInstance(myModule.getProject());\n    myExternalAnnotationsManager = ExternalAnnotationsManager.getInstance(myModule.getProject());\n    myMessageDigest = BytecodeAnalysisConverter.getMessageDigest();\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    myJavaPsiFacade = JavaPsiFacade.getInstance(myModule.getProject());\n    myInferredAnnotationsManager = InferredAnnotationsManager.getInstance(myModule.getProject());\n    myBytecodeAnalysisConverter = BytecodeAnalysisConverter.getInstance();\n\n    setUpDataClasses();\n  }","id":68816,"modified_method":"@Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    myJavaPsiFacade = JavaPsiFacade.getInstance(myModule.getProject());\n    myInferredAnnotationsManager = InferredAnnotationsManager.getInstance(myModule.getProject());\n    myMessageDigest = MessageDigest.getInstance(\"MD5\");\n    setUpDataClasses();\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkCompoundId(Method method, PsiMethod psiMethod, boolean noKey) throws IOException {\n    Direction direction = new Out();\n    long psiKey = myBytecodeAnalysisConverter.mkPsiKey(psiMethod, direction);\n    if (noKey) {\n      assertTrue(-1 == psiKey);\n      return;\n    }\n    else {\n      assertFalse(-1 == psiKey);\n    }\n\n    long asmKey = myBytecodeAnalysisConverter.mkAsmKey(new Key(method, direction, true));\n\n    Assert.assertEquals(asmKey, psiKey);\n  }","id":68817,"modified_method":"private void checkCompoundId(Method method, PsiMethod psiMethod, boolean noKey) throws IOException {\n    Direction direction = new Out();\n    System.out.println();\n    System.out.println(method.internalClassName);\n    System.out.println(method.methodName);\n    System.out.println(method.methodDesc);\n\n\n    HKey psiKey = BytecodeAnalysisConverter.psiKey(psiMethod, direction, myMessageDigest);\n    if (noKey) {\n      assertTrue(null == psiKey);\n      return;\n    }\n    else {\n      assertFalse(null == psiKey);\n    }\n    HKey asmKey = BytecodeAnalysisConverter.asmKey(new Key(method, direction, true), myMessageDigest);\n    Assert.assertEquals(asmKey, psiKey);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ClassEquations processClass(final ClassReader classReader) {\n    final List<Equation<Key, Value>> parameterEquations = new ArrayList<Equation<Key, Value>>();\n    final List<Equation<Key, Value>> contractEquations = new ArrayList<Equation<Key, Value>>();\n\n    classReader.accept(new ClassVisitor(Opcodes.ASM5) {\n      private boolean stableClass;\n\n      @Override\n      public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n        stableClass = (access & Opcodes.ACC_FINAL) != 0;\n        super.visit(version, access, name, signature, superName, interfaces);\n      }\n\n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        final MethodNode node = new MethodNode(Opcodes.ASM5, access, name, desc, signature, exceptions);\n        return new MethodVisitor(Opcodes.ASM5, node) {\n          @Override\n          public void visitEnd() {\n            super.visitEnd();\n            processMethod(classReader.getClassName(), node, stableClass);\n          }\n        };\n      }\n\n      void processMethod(final String className, final MethodNode methodNode, boolean stableClass) {\n        ProgressManager.checkCanceled();\n        Type[] argumentTypes = Type.getArgumentTypes(methodNode.desc);\n        Type resultType = Type.getReturnType(methodNode.desc);\n        int resultSort = resultType.getSort();\n        boolean isReferenceResult = resultSort == Type.OBJECT || resultSort == Type.ARRAY;\n        boolean isBooleanResult = Type.BOOLEAN_TYPE == resultType;\n        boolean isInterestingResult = isReferenceResult || isBooleanResult;\n\n        if (argumentTypes.length == 0 && !isInterestingResult) {\n          return;\n        }\n\n        final Method method = new Method(className, methodNode.name, methodNode.desc);\n        int access = methodNode.access;\n        final boolean stable =\n          stableClass ||\n          (access & Opcodes.ACC_FINAL) != 0 ||\n          (access & Opcodes.ACC_PRIVATE) != 0 ||\n          (access & Opcodes.ACC_STATIC) != 0 ||\n          \"<init>\".equals(methodNode.name);\n        try {\n          boolean added = false;\n          final ControlFlowGraph graph = cfg.buildControlFlowGraph(className, methodNode);\n\n          boolean maybeLeakingParameter = false;\n          for (Type argType : argumentTypes) {\n            int argSort = argType.getSort();\n            if (argSort == Type.OBJECT || argSort == Type.ARRAY || (isInterestingResult && Type.BOOLEAN_TYPE.equals(argType))) {\n              maybeLeakingParameter = true;\n              break;\n            }\n          }\n\n          if (graph.transitions.length > 0) {\n            final DFSTree dfs = cfg.buildDFSTree(graph.transitions);\n            boolean reducible = dfs.back.isEmpty() || cfg.reducible(graph, dfs);\n            if (reducible) {\n\n              final NullableLazyValue<TIntHashSet> resultOrigins = new NullableLazyValue<TIntHashSet>() {\n                @Override\n                protected TIntHashSet compute() {\n                  try {\n                    return cfg.resultOrigins(className, methodNode);\n                  }\n                  catch (AnalyzerException e) {\n                    return null;\n                  }\n                  catch (LimitReachedException e) {\n                    return null;\n                  }\n                }\n              };\n\n              NotNullLazyValue<Equation<Key, Value>> resultEquation = new NotNullLazyValue<Equation<Key, Value>>() {\n                @NotNull\n                @Override\n                protected Equation<Key, Value> compute() {\n                  TIntHashSet origins = resultOrigins.getValue();\n                  if (origins != null) {\n                    try {\n                      return new InOutAnalysis(new RichControlFlow(graph, dfs), new Out(), origins, stable).analyze();\n                    }\n                    catch (AnalyzerException ignored) {\n                    }\n                  }\n                  return new Equation<Key, Value>(new Key(method, new Out(), stable), new Final<Key, Value>(Value.Top));\n                }\n              };\n\n              boolean[] leakingParameters = maybeLeakingParameter ? cfg.leakingParameters(className, methodNode) : null;\n\n              for (int i = 0; i < argumentTypes.length; i++) {\n                Type argType = argumentTypes[i];\n                int argSort = argType.getSort();\n                boolean isReferenceArg = argSort == Type.OBJECT || argSort == Type.ARRAY;\n                boolean isBooleanArg = Type.BOOLEAN_TYPE.equals(argType);\n                if (isReferenceArg) {\n                  if (leakingParameters[i]) {\n                    parameterEquations.add(new NonNullInAnalysis(new RichControlFlow(graph, dfs), new In(i), stable).analyze());\n                  } else {\n                    parameterEquations.add(new Equation<Key, Value>(new Key(method, new In(i), stable), new Final<Key, Value>(Value.Top)));\n                  }\n                }\n                if (isReferenceArg && isInterestingResult) {\n                  if (leakingParameters[i]) {\n                    contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.Null), resultOrigins.getValue(), stable).analyze());\n                    contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.NotNull), resultOrigins.getValue(), stable).analyze());\n                  } else {\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.Null), stable), resultEquation.getValue().rhs));\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.NotNull), stable), resultEquation.getValue().rhs));\n                  }\n                }\n                if (isBooleanArg && isInterestingResult) {\n                  if (leakingParameters[i]) {\n                    contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.False), resultOrigins.getValue(), stable).analyze());\n                    contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.True), resultOrigins.getValue(), stable).analyze());\n                  } else {\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.False), stable), resultEquation.getValue().rhs));\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.True), stable), resultEquation.getValue().rhs));\n                  }\n                }\n              }\n              if (isReferenceResult) {\n                contractEquations.add(resultEquation.getValue());\n              }\n              added = true;\n            }\n            else {\n              LOG.debug(\"CFG for \" + method + \" is not reducible\");\n            }\n          }\n\n          if (!added) {\n            for (int i = 0; i < argumentTypes.length; i++) {\n              Type argType = argumentTypes[i];\n              int argSort = argType.getSort();\n              boolean isReferenceArg = argSort == Type.OBJECT || argSort == Type.ARRAY;\n              boolean isBooleanArg = Type.BOOLEAN_TYPE.equals(argType);\n\n              if (isReferenceArg) {\n                parameterEquations.add(new Equation<Key, Value>(new Key(method, new In(i), stable), new Final<Key, Value>(Value.Top)));\n              }\n              if (isReferenceArg && isInterestingResult) {\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.Null), stable), new Final<Key, Value>(Value.Top)));\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.NotNull), stable), new Final<Key, Value>(Value.Top)));\n              }\n              if (isBooleanArg && isInterestingResult) {\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.False), stable), new Final<Key, Value>(Value.Top)));\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.True), stable), new Final<Key, Value>(Value.Top)));\n              }\n            }\n            if (isReferenceResult) {\n              contractEquations.add(new Equation<Key, Value>(new Key(method, new Out(), stable), new Final<Key, Value>(Value.Top)));\n            }\n          }\n        }\n        catch (ProcessCanceledException e) {\n          throw e;\n        }\n        catch (Throwable e) {\n          // incorrect bytecode may result in Runtime exceptions during analysis\n          // so here we suppose that exception is due to incorrect bytecode\n          LOG.debug(\"Unexpected Error during processing of \" + method, e);\n        }\n      }\n    }, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n\n    return new ClassEquations(parameterEquations, contractEquations);\n  }","id":68818,"modified_method":"public static ClassEquations processClass(final ClassReader classReader, final String presentableUrl) {\n    final List<Equation<Key, Value>> parameterEquations = new ArrayList<Equation<Key, Value>>();\n    final List<Equation<Key, Value>> contractEquations = new ArrayList<Equation<Key, Value>>();\n\n    classReader.accept(new ClassVisitor(Opcodes.ASM5) {\n      private boolean stableClass;\n\n      @Override\n      public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n        stableClass = (access & Opcodes.ACC_FINAL) != 0;\n        super.visit(version, access, name, signature, superName, interfaces);\n      }\n\n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        final MethodNode node = new MethodNode(Opcodes.ASM5, access, name, desc, signature, exceptions);\n        return new MethodVisitor(Opcodes.ASM5, node) {\n          @Override\n          public void visitEnd() {\n            super.visitEnd();\n            processMethod(classReader.getClassName(), node, stableClass);\n          }\n        };\n      }\n\n      void processMethod(final String className, final MethodNode methodNode, boolean stableClass) {\n        ProgressManager.checkCanceled();\n        Type[] argumentTypes = Type.getArgumentTypes(methodNode.desc);\n        Type resultType = Type.getReturnType(methodNode.desc);\n        int resultSort = resultType.getSort();\n        boolean isReferenceResult = resultSort == Type.OBJECT || resultSort == Type.ARRAY;\n        boolean isBooleanResult = Type.BOOLEAN_TYPE == resultType;\n        boolean isInterestingResult = isReferenceResult || isBooleanResult;\n\n        if (argumentTypes.length == 0 && !isInterestingResult) {\n          return;\n        }\n\n        final Method method = new Method(className, methodNode.name, methodNode.desc);\n        int access = methodNode.access;\n        final boolean stable =\n          stableClass ||\n          (access & Opcodes.ACC_FINAL) != 0 ||\n          (access & Opcodes.ACC_PRIVATE) != 0 ||\n          (access & Opcodes.ACC_STATIC) != 0 ||\n          \"<init>\".equals(methodNode.name);\n        try {\n          boolean added = false;\n          final ControlFlowGraph graph = cfg.buildControlFlowGraph(className, methodNode);\n\n          boolean maybeLeakingParameter = false;\n          for (Type argType : argumentTypes) {\n            int argSort = argType.getSort();\n            if (argSort == Type.OBJECT || argSort == Type.ARRAY || (isInterestingResult && Type.BOOLEAN_TYPE.equals(argType))) {\n              maybeLeakingParameter = true;\n              break;\n            }\n          }\n\n          if (graph.transitions.length > 0) {\n            final DFSTree dfs = cfg.buildDFSTree(graph.transitions);\n            boolean reducible = dfs.back.isEmpty() || cfg.reducible(graph, dfs);\n            if (reducible) {\n\n              final NullableLazyValue<TIntHashSet> resultOrigins = new NullableLazyValue<TIntHashSet>() {\n                @Override\n                protected TIntHashSet compute() {\n                  try {\n                    return cfg.resultOrigins(className, methodNode);\n                  }\n                  catch (AnalyzerException e) {\n                    return null;\n                  }\n                  catch (LimitReachedException e) {\n                    return null;\n                  }\n                }\n              };\n\n              NotNullLazyValue<Equation<Key, Value>> resultEquation = new NotNullLazyValue<Equation<Key, Value>>() {\n                @NotNull\n                @Override\n                protected Equation<Key, Value> compute() {\n                  TIntHashSet origins = resultOrigins.getValue();\n                  if (origins != null) {\n                    try {\n                      return new InOutAnalysis(new RichControlFlow(graph, dfs), new Out(), origins, stable).analyze();\n                    }\n                    catch (AnalyzerException ignored) {\n                    }\n                  }\n                  return new Equation<Key, Value>(new Key(method, new Out(), stable), new Final<Key, Value>(Value.Top));\n                }\n              };\n\n              boolean[] leakingParameters = maybeLeakingParameter ? cfg.leakingParameters(className, methodNode) : null;\n\n              if (isReferenceResult) {\n                contractEquations.add(resultEquation.getValue());\n              }\n\n              for (int i = 0; i < argumentTypes.length; i++) {\n                Type argType = argumentTypes[i];\n                int argSort = argType.getSort();\n                boolean isReferenceArg = argSort == Type.OBJECT || argSort == Type.ARRAY;\n                boolean isBooleanArg = Type.BOOLEAN_TYPE.equals(argType);\n                if (isReferenceArg) {\n                  if (leakingParameters[i]) {\n                    parameterEquations.add(new NonNullInAnalysis(new RichControlFlow(graph, dfs), new In(i), stable).analyze());\n                  }\n                  else {\n                    // parameter is not leaking, so it is definitely NOT @NotNull\n                    parameterEquations.add(new Equation<Key, Value>(new Key(method, new In(i), stable), new Final<Key, Value>(Value.Top)));\n                  }\n                }\n                if (isReferenceArg && isInterestingResult) {\n                  if (leakingParameters[i]) {\n                    if (resultOrigins.getValue() != null) {\n                      // result origins analysis was ok\n                      contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.Null), resultOrigins.getValue(), stable).analyze());\n                      contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.NotNull), resultOrigins.getValue(), stable).analyze());\n                    }\n                    else {\n                      // result origins  analysis failed, approximating to Top\n                      contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.Null), stable), new Final<Key, Value>(Value.Top)));\n                      contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.NotNull), stable), new Final<Key, Value>(Value.Top)));\n                    }\n                  }\n                  else {\n                    // parameter is not leaking, so a contract is the same as for the whole method\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.Null), stable), resultEquation.getValue().rhs));\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.NotNull), stable), resultEquation.getValue().rhs));\n                  }\n                }\n                if (isBooleanArg && isInterestingResult) {\n                  if (leakingParameters[i]) {\n                    if (resultOrigins.getValue() != null) {\n                      // result origins analysis was ok\n                      contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.False), resultOrigins.getValue(), stable).analyze());\n                      contractEquations.add(new InOutAnalysis(new RichControlFlow(graph, dfs), new InOut(i, Value.True), resultOrigins.getValue(), stable).analyze());\n                    }\n                    else {\n                      // result origins  analysis failed, approximating to Top\n                      contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.False), stable), new Final<Key, Value>(Value.Top)));\n                      contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.True), stable), new Final<Key, Value>(Value.Top)));\n                    }\n                  }\n                  else {\n                    // parameter is not leaking, so a contract is the same as for the whole method\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.False), stable), resultEquation.getValue().rhs));\n                    contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.True), stable), resultEquation.getValue().rhs));\n                  }\n                }\n              }\n              added = true;\n            }\n            else {\n              LOG.debug(\"CFG for \" + method + \" is not reducible\");\n            }\n          }\n\n          if (!added) {\n            if (isReferenceResult) {\n              contractEquations.add(new Equation<Key, Value>(new Key(method, new Out(), stable), new Final<Key, Value>(Value.Top)));\n            }\n            for (int i = 0; i < argumentTypes.length; i++) {\n              Type argType = argumentTypes[i];\n              int argSort = argType.getSort();\n              boolean isReferenceArg = argSort == Type.OBJECT || argSort == Type.ARRAY;\n              boolean isBooleanArg = Type.BOOLEAN_TYPE.equals(argType);\n\n              if (isReferenceArg) {\n                parameterEquations.add(new Equation<Key, Value>(new Key(method, new In(i), stable), new Final<Key, Value>(Value.Top)));\n              }\n              if (isReferenceArg && isInterestingResult) {\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.Null), stable), new Final<Key, Value>(Value.Top)));\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.NotNull), stable), new Final<Key, Value>(Value.Top)));\n              }\n              if (isBooleanArg && isInterestingResult) {\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.False), stable), new Final<Key, Value>(Value.Top)));\n                contractEquations.add(new Equation<Key, Value>(new Key(method, new InOut(i, Value.True), stable), new Final<Key, Value>(Value.Top)));\n              }\n            }\n          }\n        }\n        catch (ProcessCanceledException e) {\n          throw e;\n        }\n        catch (Throwable e) {\n          // incorrect bytecode may result in Runtime exceptions during analysis\n          // so here we suppose that exception is due to incorrect bytecode\n          LOG.debug(\"Unexpected Error during processing of \" + method + \" in \" + presentableUrl, e);\n        }\n      }\n    }, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n\n    return new ClassEquations(parameterEquations, contractEquations);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public Map<Long, IdEquation> map(@NotNull FileContent inputData) {\n    HashMap<Long, IdEquation> map = new HashMap<Long, IdEquation>();\n    try {\n      ClassEquations rawEquations = processClass(new ClassReader(inputData.getContent()));\n      List<Equation<Key, Value>> rawParameterEquations = rawEquations.parameterEquations;\n      List<Equation<Key, Value>> rawContractEquations = rawEquations.contractEquations;\n\n      for (Equation<Key, Value> rawParameterEquation: rawParameterEquations) {\n        IdEquation equation = myConverter.convert(rawParameterEquation);\n        map.put(equation.id, equation);\n      }\n      for (Equation<Key, Value> rawContractEquation: rawContractEquations) {\n        IdEquation equation = myConverter.convert(rawContractEquation);\n        map.put(equation.id, equation);\n      }\n    }\n    catch (ProcessCanceledException e) {\n      throw e;\n    }\n    catch (Throwable e) {\n      // incorrect bytecode may result in Runtime exceptions during analysis\n      // so here we suppose that exception is due to incorrect bytecode\n      LOG.debug(\"Unexpected Error during indexing of bytecode\", e);\n    }\n    return map;\n  }","id":68819,"modified_method":"@NotNull\n  @Override\n  public Map<HKey, HResult> map(@NotNull FileContent inputData) {\n    HashMap<HKey, HResult> map = new HashMap<HKey, HResult>();\n    try {\n      MessageDigest md = BytecodeAnalysisConverter.getMessageDigest();\n      ClassEquations rawEquations = processClass(new ClassReader(inputData.getContent()), inputData.getFile().getPresentableUrl());\n      List<Equation<Key, Value>> rawParameterEquations = rawEquations.parameterEquations;\n      List<Equation<Key, Value>> rawContractEquations = rawEquations.contractEquations;\n\n      for (Equation<Key, Value> rawParameterEquation: rawParameterEquations) {\n        HEquation equation = BytecodeAnalysisConverter.convert(rawParameterEquation, md);\n        map.put(equation.key, equation.result);\n      }\n      for (Equation<Key, Value> rawContractEquation: rawContractEquations) {\n        HEquation equation = BytecodeAnalysisConverter.convert(rawContractEquation, md);\n        map.put(equation.key, equation.result);\n      }\n    }\n    catch (ProcessCanceledException e) {\n      throw e;\n    }\n    catch (Throwable e) {\n      // incorrect bytecode may result in Runtime exceptions during analysis\n      // so here we suppose that exception is due to incorrect bytecode\n      LOG.debug(\"Unexpected Error during indexing of bytecode\", e);\n    }\n    return map;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"IdResult normalize(IntIdComponent[] sum) {\n    Value acc = lattice.bot;\n    boolean computableNow = true;\n    for (IntIdComponent prod : sum) {\n      if (prod.isEmpty() || prod.value == lattice.bot) {\n        acc = lattice.join(acc, prod.value);\n      } else {\n        computableNow = false;\n      }\n    }\n    return (acc == lattice.top || computableNow) ? new IdFinal(acc) : new IdPending(sum);\n  }","id":68820,"modified_method":"@NotNull HResult normalize(@NotNull HComponent[] sum) {\n    Value acc = lattice.bot;\n    boolean computableNow = true;\n    for (HComponent prod : sum) {\n      if (prod.isEmpty() || prod.value == lattice.bot) {\n        acc = lattice.join(acc, prod.value);\n      } else {\n        computableNow = false;\n      }\n    }\n    return (acc == lattice.top || computableNow) ? new HFinal(acc) : new HPending(sum);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"TLongObjectHashMap<Value> solve() {\n    while (!moving.empty()) {\n      long id = moving.pop();\n      Value value = solved.get(id);\n\n      boolean stable = id > 0;\n      long[] pIds  = stable ? new long[]{id, -id} : new long[]{-id, id};\n      Value[] pVals = stable ? new Value[]{value, value} : new Value[]{value, lattice.top};\n\n      for (int i = 0; i < pIds.length; i++) {\n        long pId = pIds[i];\n        Value pVal = pVals[i];\n        TLongHashSet dIds = dependencies.get(pId);\n        if (dIds == null) {\n          continue;\n        }\n        TLongIterator dIdsIterator = dIds.iterator();\n        while (dIdsIterator.hasNext()) {\n          long dId = dIdsIterator.next();\n          IdPending pend = pending.remove(dId);\n          if (pend != null) {\n            IdResult pend1 = substitute(pend, pId, pVal);\n            if (pend1 instanceof IdFinal) {\n              IdFinal fi = (IdFinal)pend1;\n              solved.put(dId, fi.value);\n              moving.push(dId);\n            }\n            else {\n              pending.put(dId, (IdPending)pend1);\n            }\n          }\n        }\n      }\n    }\n    pending.clear();\n    return solved;\n  }","id":68821,"modified_method":"HashMap<HKey, Value> solve() {\n    while (!moving.empty()) {\n      HKey id = moving.pop();\n      Value value = solved.get(id);\n\n      HKey[] pIds  = id.stable ? new HKey[]{id, id.negate()} : new HKey[]{id.negate(), id};\n      Value[] pVals = id.stable ? new Value[]{value, value} : new Value[]{value, lattice.top};\n\n      for (int i = 0; i < pIds.length; i++) {\n        HKey pId = pIds[i];\n        Value pVal = pVals[i];\n        HashSet<HKey> dIds = dependencies.get(pId);\n        if (dIds == null) {\n          continue;\n        }\n        for (HKey dId : dIds) {\n          HPending pend = pending.remove(dId);\n          if (pend != null) {\n            HResult pend1 = substitute(pend, pId, pVal);\n            if (pend1 instanceof HFinal) {\n              HFinal fi = (HFinal)pend1;\n              solved.put(dId, fi.value);\n              moving.push(dId);\n            }\n            else {\n              pending.put(dId, (HPending)pend1);\n            }\n          }\n        }\n      }\n    }\n    pending.clear();\n    return solved;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void addEquation(IdEquation equation) {\n    size ++;\n    IdResult rhs = equation.rhs;\n    if (rhs instanceof IdFinal) {\n      solved.put(equation.id, ((IdFinal) rhs).value);\n      moving.push(equation.id);\n    } else if (rhs instanceof IdPending) {\n      IdPending pendResult = ((IdPending)rhs).copy();\n      IdResult norm = normalize(pendResult.delta);\n      if (norm instanceof IdFinal) {\n        solved.put(equation.id, ((IdFinal) norm).value);\n        moving.push(equation.id);\n      }\n      else {\n        IdPending pendResult1 = ((IdPending)rhs).copy();\n        for (IntIdComponent component : pendResult1.delta) {\n          for (long trigger : component.ids) {\n            TLongHashSet set = dependencies.get(trigger);\n            if (set == null) {\n              set = new TLongHashSet();\n              dependencies.put(trigger, set);\n            }\n            set.add(equation.id);\n          }\n          pending.put(equation.id, pendResult1);\n        }\n      }\n    }\n  }","id":68822,"modified_method":"void addEquation(HEquation equation) {\n    size ++;\n    HResult rhs = equation.result;\n    if (!queued.add(equation.key)) {\n      ProjectBytecodeAnalysis.LOG.error(\"duplicate\");\n    }\n    if (rhs instanceof HFinal) {\n      solved.put(equation.key, ((HFinal) rhs).value);\n      moving.push(equation.key);\n    } else if (rhs instanceof HPending) {\n      HPending pendResult = ((HPending)rhs).copy();\n      HResult norm = normalize(pendResult.delta);\n      if (norm instanceof HFinal) {\n        solved.put(equation.key, ((HFinal) norm).value);\n        moving.push(equation.key);\n      }\n      else {\n        HPending pendResult1 = ((HPending)rhs).copy();\n        for (HComponent component : pendResult1.delta) {\n          for (HKey trigger : component.ids) {\n            HashSet<HKey> set = dependencies.get(trigger);\n            if (set == null) {\n              set = new HashSet<HKey>();\n              dependencies.put(trigger, set);\n            }\n            set.add(equation.key);\n          }\n          pending.put(equation.key, pendResult1);\n        }\n      }\n    }\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"IdResult substitute(IdPending pending, long id, Value value) {\n    IntIdComponent[] sum = pending.delta;\n    for (IntIdComponent intIdComponent : sum) {\n      if (intIdComponent.remove(id)) {\n        intIdComponent.value = lattice.meet(intIdComponent.value, value);\n      }\n    }\n    return normalize(sum);\n  }","id":68823,"modified_method":"HResult substitute(@NotNull HPending pending, @NotNull HKey id, @NotNull Value value) {\n    HComponent[] sum = pending.delta;\n    for (HComponent intIdComponent : sum) {\n      if (intIdComponent.remove(id)) {\n        intIdComponent.value = lattice.meet(intIdComponent.value, value);\n      }\n    }\n    return normalize(sum);\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private PsiAnnotation[] collectInferredAnnotations(PsiModifierListOwner listOwner) {\n    try {\n      long ownerKey = getKey(listOwner);\n      if (ownerKey == -1) {\n        return PsiAnnotation.EMPTY_ARRAY;\n      }\n      TLongArrayList allKeys = contractKeys(listOwner, ownerKey);\n      Annotations annotations = loadAnnotations(listOwner, ownerKey, allKeys);\n      boolean notNull = annotations.notNulls.contains(ownerKey);\n      String contractValue = annotations.contracts.get(ownerKey);\n\n      if (notNull && contractValue != null) {\n        return new PsiAnnotation[]{\n          getNotNullAnnotation(),\n          createAnnotationFromText(\"@\" + ControlFlowAnalyzer.ORG_JETBRAINS_ANNOTATIONS_CONTRACT + \"(\" + contractValue + \")\")\n        };\n      }\n      else if (notNull) {\n        return new PsiAnnotation[]{\n          getNotNullAnnotation()\n        };\n      }\n      else if (contractValue != null) {\n        return new PsiAnnotation[]{\n          createAnnotationFromText(\"@\" + ControlFlowAnalyzer.ORG_JETBRAINS_ANNOTATIONS_CONTRACT + \"(\" + contractValue + \")\")\n        };\n      }\n      else {\n        return PsiAnnotation.EMPTY_ARRAY;\n      }\n    }\n    catch (IOException e) {\n      LOG.debug(e);\n      return PsiAnnotation.EMPTY_ARRAY;\n    }\n    catch (EquationsLimitException e) {\n      String externalName = PsiFormatUtil.getExternalName(listOwner, false, Integer.MAX_VALUE);\n      LOG.info(\"Too many equations for \" + externalName);\n      return PsiAnnotation.EMPTY_ARRAY;\n    }\n  }","id":68824,"modified_method":"@NotNull\n  private PsiAnnotation[] collectInferredAnnotations(PsiModifierListOwner listOwner) {\n    try {\n      MessageDigest md = BytecodeAnalysisConverter.getMessageDigest();\n      HKey ownerKey = getKey(listOwner, md);\n      if (ownerKey == null) {\n        return PsiAnnotation.EMPTY_ARRAY;\n      }\n      ArrayList<HKey> allKeys = contractKeys(listOwner, ownerKey);\n      Annotations annotations = loadAnnotations(listOwner, ownerKey, allKeys);\n      boolean notNull = annotations.notNulls.contains(ownerKey);\n      String contractValue = annotations.contracts.get(ownerKey);\n\n      if (notNull && contractValue != null) {\n        return new PsiAnnotation[]{\n          getNotNullAnnotation(),\n          createAnnotationFromText(\"@\" + ControlFlowAnalyzer.ORG_JETBRAINS_ANNOTATIONS_CONTRACT + \"(\" + contractValue + \")\")\n        };\n      }\n      else if (notNull) {\n        return new PsiAnnotation[]{\n          getNotNullAnnotation()\n        };\n      }\n      else if (contractValue != null) {\n        return new PsiAnnotation[]{\n          createAnnotationFromText(\"@\" + ControlFlowAnalyzer.ORG_JETBRAINS_ANNOTATIONS_CONTRACT + \"(\" + contractValue + \")\")\n        };\n      }\n      else {\n        return PsiAnnotation.EMPTY_ARRAY;\n      }\n    }\n    catch (EquationsLimitException e) {\n      String externalName = PsiFormatUtil.getExternalName(listOwner, false, Integer.MAX_VALUE);\n      LOG.info(\"Too many equations for \" + externalName);\n      return PsiAnnotation.EMPTY_ARRAY;\n    }\n    catch (NoSuchAlgorithmException e) {\n      LOG.error(e);\n      return PsiAnnotation.EMPTY_ARRAY;\n    }\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Annotations loadAnnotations(@NotNull PsiModifierListOwner owner, long key, TLongArrayList allKeys)\n    throws IOException, EquationsLimitException {\n    Annotations result = new Annotations();\n    if (owner instanceof PsiParameter) {\n      final Solver solver = new Solver(new ELattice<Value>(Value.NotNull, Value.Top));\n      collectEquations(allKeys, solver);\n      TLongObjectHashMap<Value> solutions = solver.solve();\n      BytecodeAnalysisConverter.getInstance().addParameterAnnotations(solutions, result);\n    } else if (owner instanceof PsiMethod) {\n      final Solver solver = new Solver(new ELattice<Value>(Value.Bot, Value.Top));\n      collectEquations(allKeys, solver);\n      TLongObjectHashMap<Value> solutions = solver.solve();\n      BytecodeAnalysisConverter.getInstance().addMethodAnnotations(solutions, result, key,\n                                                                   ((PsiMethod)owner).getParameterList().getParameters().length);\n    }\n    return result;\n  }","id":68825,"modified_method":"private Annotations loadAnnotations(@NotNull PsiModifierListOwner owner, @NotNull HKey key, ArrayList<HKey> allKeys)\n    throws EquationsLimitException {\n    Annotations result = new Annotations();\n    if (owner instanceof PsiParameter) {\n      final Solver solver = new Solver(new ELattice<Value>(Value.NotNull, Value.Top));\n      collectEquations(allKeys, solver);\n      HashMap<HKey, Value> solutions = solver.solve();\n      BytecodeAnalysisConverter.addParameterAnnotations(solutions, result);\n    } else if (owner instanceof PsiMethod) {\n      final Solver solver = new Solver(new ELattice<Value>(Value.Bot, Value.Top));\n      collectEquations(allKeys, solver);\n      HashMap<HKey, Value> solutions = solver.solve();\n      int arity = ((PsiMethod)owner).getParameterList().getParameters().length;\n      BytecodeAnalysisConverter.addMethodAnnotations(solutions, result, key, arity);\n    }\n    return result;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static long getKey(@NotNull PsiModifierListOwner owner) throws IOException {\n    LOG.assertTrue(owner instanceof PsiCompiledElement, owner);\n    if (owner instanceof PsiMethod) {\n      return BytecodeAnalysisConverter.getInstance().mkPsiKey((PsiMethod)owner, new Out());\n    }\n    if (owner instanceof PsiParameter) {\n      PsiElement parent = owner.getParent();\n      if (parent instanceof PsiParameterList) {\n        PsiElement gParent = parent.getParent();\n        if (gParent instanceof PsiMethod) {\n          final int index = ((PsiParameterList)parent).getParameterIndex((PsiParameter)owner);\n          return BytecodeAnalysisConverter.getInstance().mkPsiKey((PsiMethod)gParent, new In(index));\n        }\n      }\n    }\n\n    return -1;\n  }","id":68826,"modified_method":"@Nullable\n  public static HKey getKey(@NotNull PsiModifierListOwner owner, MessageDigest md) {\n    LOG.assertTrue(owner instanceof PsiCompiledElement, owner);\n    if (owner instanceof PsiMethod) {\n      return BytecodeAnalysisConverter.psiKey((PsiMethod)owner, new Out(), md);\n    }\n    if (owner instanceof PsiParameter) {\n      PsiElement parent = owner.getParent();\n      if (parent instanceof PsiParameterList) {\n        PsiElement gParent = parent.getParent();\n        if (gParent instanceof PsiMethod) {\n          final int index = ((PsiParameterList)parent).getParameterIndex((PsiParameter)owner);\n          return BytecodeAnalysisConverter.psiKey((PsiMethod)gParent, new In(index), md);\n        }\n      }\n    }\n    return null;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static TLongArrayList contractKeys(@NotNull PsiModifierListOwner owner, long primaryKey) throws IOException {\n    if (owner instanceof PsiMethod) {\n      TLongArrayList result = BytecodeAnalysisConverter.getInstance().mkInOutKeys((PsiMethod)owner, primaryKey);\n      result.add(primaryKey);\n      return result;\n    }\n    TLongArrayList result = new TLongArrayList(1);\n    result.add(primaryKey);\n    return result;\n  }","id":68827,"modified_method":"public static ArrayList<HKey> contractKeys(@NotNull PsiModifierListOwner owner, HKey primaryKey) {\n    if (owner instanceof PsiMethod) {\n      ArrayList<HKey> result = BytecodeAnalysisConverter.mkInOutKeys((PsiMethod)owner, primaryKey);\n      result.add(primaryKey);\n      return result;\n    }\n    ArrayList<HKey> result = new ArrayList<HKey>(1);\n    result.add(primaryKey);\n    return result;\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void collectEquations(TLongArrayList keys, Solver solver) throws EquationsLimitException {\n    GlobalSearchScope librariesScope = ProjectScope.getLibrariesScope(myProject);\n    TLongHashSet queued = new TLongHashSet();\n    LongStack queue = new LongStack();\n\n    for (int i = 0; i < keys.size(); i++) {\n      long key = keys.get(i);\n      queue.push(key);\n      queued.add(key);\n      // stable/unstable\n      queue.push(-key);\n      queued.add(-key);\n    }\n\n    FileBasedIndex index = FileBasedIndex.getInstance();\n    while (!queue.empty()) {\n      if (queued.size() > EQUATIONS_LIMIT) {\n        throw new EquationsLimitException();\n      }\n      ProgressManager.checkCanceled();\n      List<IdEquation> equations = index.getValues(BytecodeAnalysisIndex.NAME, queue.pop(), librariesScope);\n      for (IdEquation equation : equations) {\n        IdResult rhs = equation.rhs;\n        solver.addEquation(equation);\n        if (rhs instanceof IdPending) {\n          IdPending intIdPending = (IdPending)rhs;\n          for (IntIdComponent component : intIdPending.delta) {\n            for (long depKey : component.ids) {\n              if (!queued.contains(depKey)) {\n                queue.push(depKey);\n                queued.add(depKey);\n              }\n              // stable/unstable\n              long swapped = -depKey;\n              if (!queued.contains(swapped)) {\n                queue.push(swapped);\n                queued.add(swapped);\n              }\n            }\n          }\n        }\n      }\n    }\n  }","id":68828,"modified_method":"private void collectEquations(ArrayList<HKey> keys, Solver solver) throws EquationsLimitException {\n    GlobalSearchScope librariesScope = ProjectScope.getLibrariesScope(myProject);\n    HashSet<HKey> queued = new HashSet<HKey>();\n    Stack<HKey> queue = new Stack<HKey>();\n\n    for (HKey key : keys) {\n      queue.push(key);\n      queued.add(key);\n      // stable/unstable\n      HKey nKey = key.negate();\n      queue.push(nKey);\n      queued.add(nKey);\n    }\n\n    FileBasedIndex index = FileBasedIndex.getInstance();\n    while (!queue.empty()) {\n      if (queued.size() > EQUATIONS_LIMIT) {\n        throw new EquationsLimitException();\n      }\n      ProgressManager.checkCanceled();\n      HKey hKey = queue.pop();\n      List<HResult> results = index.getValues(BytecodeAnalysisIndex.NAME, hKey, librariesScope);\n      for (HResult result : results) {\n        solver.addEquation(new HEquation(hKey, result));\n        if (result instanceof HPending) {\n          HPending pending = (HPending)result;\n          for (HComponent component : pending.delta) {\n            for (HKey depKey : component.ids) {\n              if (!queued.contains(depKey)) {\n                queue.push(depKey);\n                queued.add(depKey);\n              }\n              // stable/unstable\n              HKey swapped = depKey.negate();\n              if (!queued.contains(swapped)) {\n                queue.push(swapped);\n                queued.add(swapped);\n              }\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"35e6a586d05bc60ced2123814a4be39e34872f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GridCellImpl(ViewContextEx context, @NotNull GridImpl container, GridImpl.Placeholder placeholder, PlaceInGrid placeInGrid) {\r\n    myContext = context;\r\n    myContainer = container;\r\n\r\n    myPlaceInGrid = placeInGrid;\r\n    myPlaceholder = placeholder;\r\n    myTabs = new JBTabsImpl(myContext.getProject(), myContext.getActionManager(), myContext.getFocusManager(), container) {\r\n      @Override\r\n      protected Color getFocusedTopFillColor() {\r\n        return new Color(202, 211, 227);\r\n      }\r\n\r\n      @Override\r\n      public boolean useSmallLabels() {\r\n        return true;\r\n      }\r\n\r\n      @Override\r\n      protected Color getFocusedBottomFillColor() {\r\n        return new Color(194, 203, 219);\r\n      }\r\n\r\n      @Override\r\n      public void processDropOver(TabInfo over, RelativePoint point) {\r\n        ((RunnerContentUi)myContext).myTabs.processDropOver(over, point);\r\n      }\r\n\r\n      @Override\r\n      public Image startDropOver(TabInfo tabInfo, RelativePoint point) {\r\n        return ((RunnerContentUi)myContext).myTabs.startDropOver(tabInfo, point);\r\n      }\r\n\r\n      @Override\r\n      public void resetDropOver(TabInfo tabInfo) {\r\n        ((RunnerContentUi)myContext).myTabs.resetDropOver(tabInfo);\r\n      }\r\n    }.setDataProvider(new DataProvider() {\r\n      @Nullable\r\n      public Object getData(@NonNls final String dataId) {\r\n        if (ViewContext.CONTENT_KEY.is(dataId)) {\r\n          TabInfo target = myTabs.getTargetInfo();\r\n          if (target != null) {\r\n            return new Content[]{getContentFor(target)};\r\n          }\r\n        }\r\n        else if (ViewContext.CONTEXT_KEY.is(dataId)) {\r\n          return myContext;\r\n        }\r\n\r\n        return null;\r\n      }\r\n    });\r\n    myTabs.getPresentation().setUiDecorator(new UiDecorator() {\r\n      @NotNull\r\n      public UiDecoration getDecoration() {\r\n        return new UiDecoration(null, new Insets(1, -1, 1, -1));\r\n      }\r\n    }).setSideComponentVertical(!context.getLayoutSettings().isToolbarHorizontal())\r\n      .setStealthTabMode(true).setFocusCycle(false).setPaintFocus(true)\r\n      .setProvideSwitchTargets(false).setTabDraggingEnabled(true).setSideComponentOnTabs(false);\r\n\r\n    myTabs.addTabMouseListener(new MouseAdapter() {\r\n      public void mousePressed(final MouseEvent e) {\r\n        if (UIUtil.isCloseClick(e)) {\r\n          // see RunnerContentUi tabMouseListener as well\r\n          closeOrMinimize(e);\r\n        }\r\n      }\r\n    });\r\n    rebuildPopupGroup();\r\n    myTabs.addListener(new TabsListener.Adapter() {\r\n\r\n      public void beforeSelectionChanged(TabInfo oldSelection, TabInfo newSelection) {\r\n        if (oldSelection != null && myContext.isStateBeingRestored()) {\r\n          saveUiState();\r\n        }\r\n      }\r\n\r\n      public void selectionChanged(final TabInfo oldSelection, final TabInfo newSelection) {\r\n        updateSelection(myTabs.getComponent().isShowing());\r\n\r\n        if (!myTabs.getComponent().isShowing()) return;\r\n\r\n        if (newSelection != null) {\r\n          newSelection.stopAlerting();\r\n        }\r\n      }\r\n    });\r\n  }","id":68829,"modified_method":"public GridCellImpl(ViewContextEx context, @NotNull GridImpl container, GridImpl.Placeholder placeholder, PlaceInGrid placeInGrid) {\r\n    myContext = context;\r\n    myContainer = container;\r\n\r\n    myPlaceInGrid = placeInGrid;\r\n    myPlaceholder = placeholder;\r\n    myTabs = new JBTabsImpl(myContext.getProject(), myContext.getActionManager(), myContext.getFocusManager(), container) {\r\n      @Override\r\n      protected Color getFocusedTopFillColor() {\r\n        return  UIUtil.isUnderDarcula() ? ColorUtil.toAlpha(new Color(0x1E2533), 100)  : new Color(202, 211, 227);\r\n      }\r\n\r\n      @Override\r\n      public boolean useSmallLabels() {\r\n        return true;\r\n      }\r\n\r\n      @Override\r\n      protected Color getFocusedBottomFillColor() {\r\n        return UIUtil.isUnderDarcula() ? new Color(0x1E2533)  : new Color(0xc2cbdb);\r\n      }\r\n\r\n      @Override\r\n      public Color getBackground() {\r\n        return UIUtil.isUnderDarcula() ? new Color(0x27292A) : super.getBackground();\r\n      }\r\n\r\n      @Override\r\n      public void processDropOver(TabInfo over, RelativePoint point) {\r\n        ((RunnerContentUi)myContext).myTabs.processDropOver(over, point);\r\n      }\r\n\r\n      @Override\r\n      public Image startDropOver(TabInfo tabInfo, RelativePoint point) {\r\n        return ((RunnerContentUi)myContext).myTabs.startDropOver(tabInfo, point);\r\n      }\r\n\r\n      @Override\r\n      public void resetDropOver(TabInfo tabInfo) {\r\n        ((RunnerContentUi)myContext).myTabs.resetDropOver(tabInfo);\r\n      }\r\n    }.setDataProvider(new DataProvider() {\r\n      @Nullable\r\n      public Object getData(@NonNls final String dataId) {\r\n        if (ViewContext.CONTENT_KEY.is(dataId)) {\r\n          TabInfo target = myTabs.getTargetInfo();\r\n          if (target != null) {\r\n            return new Content[]{getContentFor(target)};\r\n          }\r\n        }\r\n        else if (ViewContext.CONTEXT_KEY.is(dataId)) {\r\n          return myContext;\r\n        }\r\n\r\n        return null;\r\n      }\r\n    });\r\n    myTabs.getPresentation().setUiDecorator(new UiDecorator() {\r\n      @NotNull\r\n      public UiDecoration getDecoration() {\r\n        return new UiDecoration(null, new Insets(1, -1, 1, -1));\r\n      }\r\n    }).setSideComponentVertical(!context.getLayoutSettings().isToolbarHorizontal())\r\n      .setStealthTabMode(true).setFocusCycle(false).setPaintFocus(true)\r\n      .setProvideSwitchTargets(false).setTabDraggingEnabled(true).setSideComponentOnTabs(false);\r\n\r\n    myTabs.addTabMouseListener(new MouseAdapter() {\r\n      public void mousePressed(final MouseEvent e) {\r\n        if (UIUtil.isCloseClick(e)) {\r\n          // see RunnerContentUi tabMouseListener as well\r\n          closeOrMinimize(e);\r\n        }\r\n      }\r\n    });\r\n    rebuildPopupGroup();\r\n    myTabs.addListener(new TabsListener.Adapter() {\r\n\r\n      public void beforeSelectionChanged(TabInfo oldSelection, TabInfo newSelection) {\r\n        if (oldSelection != null && myContext.isStateBeingRestored()) {\r\n          saveUiState();\r\n        }\r\n      }\r\n\r\n      public void selectionChanged(final TabInfo oldSelection, final TabInfo newSelection) {\r\n        updateSelection(myTabs.getComponent().isShowing());\r\n\r\n        if (!myTabs.getComponent().isShowing()) return;\r\n\r\n        if (newSelection != null) {\r\n          newSelection.stopAlerting();\r\n        }\r\n      }\r\n    });\r\n  }","commit_id":"ebdb92e2bc2f965855f11b063e3adb4ba58eae94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void doPaintInactive(Graphics2D g2d,\n                                 boolean leftGhostExists,\n                                 TabLabel label,\n                                 Rectangle effectiveBounds,\n                                 boolean rightGhostExists, int row, int column) {\n    Insets insets = getTabsBorder().getEffectiveBorder();\n\n    int _x = effectiveBounds.x + insets.left;\n    int _y = effectiveBounds.y + insets.top + 3;\n    int _width = effectiveBounds.width - insets.left - insets.right;\n    int _height = effectiveBounds.height - insets.top - insets.bottom - 3;\n    _height -= TabsUtil.ACTIVE_TAB_UNDERLINE_HEIGHT;\n\n    g2d\n      .setPaint(new GradientPaint(_x, _y, new Color(255, 255, 255, 180), _x, _y + effectiveBounds.height, new Color(255, 255, 255, 100)));\n    g2d.fillRect(_x, _y, _width, _height);\n\n    g2d.setColor(new Color(255, 255, 255, 100));\n    g2d.drawRect(_x, _y, _width - 1, _height - 1);\n  }","id":68830,"modified_method":"protected void doPaintInactive(Graphics2D g2d,\n                                 boolean leftGhostExists,\n                                 TabLabel label,\n                                 Rectangle effectiveBounds,\n                                 boolean rightGhostExists, int row, int column) {\n    Insets insets = getTabsBorder().getEffectiveBorder();\n    final boolean dark = UIUtil.isUnderDarcula();\n    int _x = effectiveBounds.x + insets.left;\n    int _y = effectiveBounds.y + insets.top + 3;\n    int _width = effectiveBounds.width - insets.left - insets.right;\n    int _height = effectiveBounds.height - insets.top - insets.bottom - 3;\n    _height -= TabsUtil.ACTIVE_TAB_UNDERLINE_HEIGHT;\n    if (dark) {\n      g2d.setPaint(new GradientPaint(_x, _y, ColorUtil.shift(UIUtil.getListBackground(), 1.3), _x, _y + effectiveBounds.height, UIUtil.getPanelBackground()));\n      g2d.fillRect(_x, _y, _width, _height);\n\n      g2d.setColor(Gray._0.withAlpha(50));\n    } else {\n      g2d.setPaint(new GradientPaint(_x, _y, new Color(255, 255, 255, 180), _x, _y + effectiveBounds.height, new Color(255, 255, 255, 100)));\n      g2d.fillRect(_x, _y, _width, _height);\n\n      g2d.setColor(new Color(255, 255, 255, 100));\n      g2d.drawRect(_x, _y, _width - 1, _height - 1);\n    }\n  }","commit_id":"ebdb92e2bc2f965855f11b063e3adb4ba58eae94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void paintSelectionAndBorder(Graphics2D g2d) {\n    if (getSelectedInfo() == null) return;\n\n    TabLabel label = getSelectedLabel();\n    Rectangle r = label.getBounds();\n    r = new Rectangle(r.x, r.y + 3, r.width, r.height - 3);\n\n    ShapeInfo selectedShape = _computeSelectedLabelShape(r);\n\n    Insets insets = getTabsBorder().getEffectiveBorder();\n    Insets i = selectedShape.path.transformInsets(insets);\n\n    int _x = r.x;\n    int _y = r.y;\n    int _height = r.height;\n\n    if (!isHideTabs()) {\n      g2d.setPaint(new GradientPaint(_x, _y, Gray._255, _x, _y + _height - 3, UIUtil.getPanelBackground()));\n\n      g2d.fill(selectedShape.fillPath.getShape());\n\n      g2d.setColor(Gray._255.withAlpha(180));\n      g2d.draw(selectedShape.fillPath.getShape());\n\n      // fix right side due to swing stupidity (fill & draw will occupy different shapes)\n      g2d.draw(selectedShape.labelPath\n                 .transformLine(selectedShape.labelPath.getMaxX() - selectedShape.labelPath.deltaX(1), selectedShape.labelPath.getY() +\n                                                                                                       selectedShape.labelPath.deltaY(1),\n                                selectedShape.labelPath.getMaxX() - selectedShape.labelPath.deltaX(1), selectedShape.labelPath.getMaxY() -\n                                                                                                       selectedShape.labelPath.deltaY(4)));\n    }\n    g2d.setColor(UIUtil.getPanelBackground());\n    g2d.fillRect(2, selectedShape.labelPath.getMaxY() - 2, selectedShape.path.getMaxX() - 2, 3);\n    g2d.drawLine(1, selectedShape.labelPath.getMaxY(), 1, getHeight() - 1);\n    g2d.drawLine(selectedShape.path.getMaxX() - 1, selectedShape.labelPath.getMaxY() - 4,\n                 selectedShape.path.getMaxX() - 1, getHeight() - 1);\n\n    if (isHideTabs()) return;\n    g2d.setColor(Gray._0.withAlpha(50));\n    g2d.drawLine(1, selectedShape.labelPath.getMaxY(), 1, getHeight() - 1);\n    g2d.drawLine(selectedShape.path.getMaxX() - 1, selectedShape.labelPath.getMaxY() - 4,\n                 selectedShape.path.getMaxX() - 1, getHeight() - 1);\n  }","id":68831,"modified_method":"protected void paintSelectionAndBorder(Graphics2D g2d) {\n    if (getSelectedInfo() == null) return;\n    final boolean dark = UIUtil.isUnderDarcula();\n    final Color col = dark ? ColorUtil.shift(UIUtil.getListBackground(), 1.6) : Gray._255;\n    final Color panelBg = dark ? ColorUtil.shift(UIUtil.getPanelBackground(), 1.3) : UIUtil.getPanelBackground();\n\n    TabLabel label = getSelectedLabel();\n    Rectangle r = label.getBounds();\n    r = new Rectangle(r.x, r.y + 3, r.width, r.height - 3);\n\n    ShapeInfo selectedShape = _computeSelectedLabelShape(r);\n\n    Insets insets = getTabsBorder().getEffectiveBorder();\n    Insets i = selectedShape.path.transformInsets(insets);\n\n    int _x = r.x;\n    int _y = r.y;\n    int _height = r.height;\n\n    if (!isHideTabs()) {\n      g2d.setPaint(new GradientPaint(_x, _y, col, _x, _y + _height - 3, panelBg));\n\n      g2d.fill(selectedShape.fillPath.getShape());\n\n      g2d.setColor(ColorUtil.toAlpha(col, 180));\n      g2d.draw(selectedShape.fillPath.getShape());\n\n      // fix right side due to swing stupidity (fill & draw will occupy different shapes)\n      g2d.draw(selectedShape.labelPath\n                 .transformLine(selectedShape.labelPath.getMaxX() - selectedShape.labelPath.deltaX(1), selectedShape.labelPath.getY() +\n                                                                                                       selectedShape.labelPath.deltaY(1),\n                                selectedShape.labelPath.getMaxX() - selectedShape.labelPath.deltaX(1), selectedShape.labelPath.getMaxY() -\n                                                                                                       selectedShape.labelPath.deltaY(4)));\n    }\n    g2d.setColor(panelBg);\n    g2d.fillRect(2, selectedShape.labelPath.getMaxY() - 2, selectedShape.path.getMaxX() - 2, 3);\n    g2d.drawLine(1, selectedShape.labelPath.getMaxY(), 1, getHeight() - 1);\n    g2d.drawLine(selectedShape.path.getMaxX() - 1, selectedShape.labelPath.getMaxY() - 4,\n                 selectedShape.path.getMaxX() - 1, getHeight() - 1);\n\n    if (isHideTabs()) return;\n    g2d.setColor(Gray._0.withAlpha(50));\n    g2d.drawLine(1, selectedShape.labelPath.getMaxY(), 1, getHeight() - 1);\n    g2d.drawLine(selectedShape.path.getMaxX() - 1, selectedShape.labelPath.getMaxY() - 4,\n                 selectedShape.path.getMaxX() - 1, getHeight() - 1);\n  }","commit_id":"ebdb92e2bc2f965855f11b063e3adb4ba58eae94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public Color getBackground() {\n    return Gray._142;\n  }","id":68832,"modified_method":"@Override\n  public Color getBackground() {\n    return UIUtil.isUnderDarcula() ? UIUtil.getPanelBackground() : Gray._142;\n  }","commit_id":"ebdb92e2bc2f965855f11b063e3adb4ba58eae94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * Get and write all attributes from the parameter. Does not fire any listener, so\n\t * use this only in the data initializing phase\n\t */\n\tpublic void cloneFrom(OsmPrimitive osm) {\n\t\tkeys = osm.keys == null ? null : new HashMap<String, String>(osm.keys);\n\t\tid = osm.id;\n\t\tmodified = osm.modified;\n\t\tdeleted = osm.deleted;\n\t\tselected = osm.selected;\n\t\ttimestamp = osm.timestamp;\n\t}","id":68833,"modified_method":"/**\n\t * Get and write all attributes from the parameter. Does not fire any listener, so\n\t * use this only in the data initializing phase\n\t */\n\tpublic void cloneFrom(OsmPrimitive osm) {\n\t\tkeys = osm.keys == null ? null : new HashMap<String, String>(osm.keys);\n\t\tid = osm.id;\n\t\tmodified = osm.modified;\n\t\tdeleted = osm.deleted;\n\t\tselected = osm.selected;\n\t\ttimestamp = osm.timestamp;\n\t\ttagged = osm.tagged;\n\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Remove the given key from the list.\n\t */\n\tpublic final void remove(String key) {\n\t\tif (keys != null) {\n\t\t\tkeys.remove(key);\n\t\t\tif (keys.isEmpty())\n\t\t\t\tkeys = null;\n\t\t}\n\t}","id":68834,"modified_method":"/**\n\t * Remove the given key from the list.\n\t */\n\tpublic final void remove(String key) {\n\t\tif (keys != null) {\n\t\t\tkeys.remove(key);\n\t\t\tif (keys.isEmpty())\n\t\t\t\tkeys = null;\n\t\t}\n\t\tcheckTagged();\n\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Set the given value to the given key\n\t * @param key The key, for which the value is to be set.\n\t * @param value The value for the key.\n\t */\n\tpublic final void put(String key, String value) {\n\t\tif (value == null)\n\t\t\tremove(key);\n\t\telse {\n\t\t\tif (keys == null)\n\t\t\t\tkeys = new HashMap<String, String>();\n\t\t\tkeys.put(key, value);\n\t\t}\n\t}","id":68835,"modified_method":"/**\n\t * Set the given value to the given key\n\t * @param key The key, for which the value is to be set.\n\t * @param value The value for the key.\n\t */\n\tpublic final void put(String key, String value) {\n\t\tif (value == null)\n\t\t\tremove(key);\n\t\telse {\n\t\t\tif (keys == null)\n\t\t\t\tkeys = new HashMap<String, String>();\n\t\t\tkeys.put(key, value);\n\t\t}\n\t\tcheckTagged();\n\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"public void copyTo(OsmPrimitive osm) {\n\t\t\tosm.id = id;\n\t\t\tosm.keys = keys;\n\t\t\tosm.modified = modified;\n\t\t\tosm.selected = selected;\n\t\t\tosm.deleted = deleted;\n\t\t\tosm.timestamp = timestamp;\n\t\t\tosm.user = user;\n\t\t\tosm.visible = visible;\n\t\t}","id":68836,"modified_method":"public void copyTo(OsmPrimitive osm) {\n\t\t\tosm.id = id;\n\t\t\tosm.keys = keys;\n\t\t\tosm.modified = modified;\n\t\t\tosm.selected = selected;\n\t\t\tosm.deleted = deleted;\n\t\t\tosm.timestamp = timestamp;\n\t\t\tosm.user = user;\n\t\t\tosm.visible = visible;\n\t\t\tosm.checkTagged();\n\t\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Draw a darkblue line for all segments.\n\t * @param w The way to draw.\n\t */\n\tpublic void visit(Way w) {\n\t\tif (w.incomplete) return;\n\n\t\tColor wayColor;\n\t\tif (inactive)\n\t\t\twayColor = inactiveColor;\n\t\telse {\n\t\t\twayColor = dfltWayColor;\n\t\t}\n\n\t\tint orderNumber = 0;\n\t\tNode lastN = null;\n\t\tfor (Node n : w.nodes) {\n\t\t\tif (lastN == null) {\n\t\t\t\tlastN = n;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\torderNumber++;\n\t\t\tdrawSegment(lastN, n, w.selected && !inactive ? selectedColor : wayColor, showDirectionArrow);\n\t\t\tif (showOrderNumber)\n\t\t\t\tdrawOrderNumber(lastN, n, orderNumber);\n\t\t\tlastN = n;\n\t\t}\n\t}","id":68837,"modified_method":"/**\n\t * Draw a darkblue line for all segments.\n\t * @param w The way to draw.\n\t */\n\tpublic void visit(Way w) {\n\t\tif (w.incomplete) return;\n\n\t\tColor wayColor;\n\t\t\n\t\tif (inactive) {\n\t\t\twayColor = inactiveColor;\n\t\t} else if (!w.tagged) {\n\t\t\twayColor = untaggedWayColor;\n\t\t} else {\n\t\t\twayColor = dfltWayColor;\n\t\t}\n\n\t\tint orderNumber = 0;\n\t\tNode lastN = null;\n\t\tfor (Node n : w.nodes) {\n\t\t\tif (lastN == null) {\n\t\t\t\tlastN = n;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\torderNumber++;\n\t\t\tdrawSegment(lastN, n, w.selected && !inactive ? selectedColor : wayColor, showDirectionArrow);\n\t\t\tif (showOrderNumber)\n\t\t\t\tdrawOrderNumber(lastN, n, orderNumber);\n\t\t\tlastN = n;\n\t\t}\n\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Draw the node as small rectangle with the given color.\n\t *\n\t * @param n\t\tThe node to draw.\n\t * @param color The color of the node.\n\t */\n\tpublic void drawNode(Node n, Color color) {\n\t\tPoint p = nc.getPoint(n.eastNorth);\n\t\tg.setColor(color);\n\t\tRectangle screen = g.getClipBounds();\n\n\t\tif (screen.contains(p.x, p.y))\n\t\t\tg.drawRect(p.x-1, p.y-1, 2, 2);\n\t}","id":68838,"modified_method":"/**\n\t * Draw the node as small rectangle with the given color.\n\t *\n\t * @param n\t\tThe node to draw.\n\t * @param color The color of the node.\n\t */\n\tpublic void drawNode(Node n, Color color) {\n\t\tPoint p = nc.getPoint(n.eastNorth);\n\t\tg.setColor(color);\n\t\tRectangle screen = g.getClipBounds();\n\n\t\tif (screen.contains(p.x, p.y))\n\t\t\tif (n.tagged) {\n\t\t\t\tg.drawRect(p.x, p.y, 0, 0);\n\t\t\t\tg.drawRect(p.x-2, p.y-2, 4, 4);\n\t\t\t} else {\n\t\t\t\tg.drawRect(p.x-1, p.y-1, 2, 2);\n\t\t\t}\n\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"public void visitAll(DataSet data) {\n\t\t\n\t\tinactiveColor = getPreferencesColor(\"inactive\", Color.DARK_GRAY);\n\t\tselectedColor = getPreferencesColor(\"selected\", Color.WHITE);\n\t\tnodeColor = getPreferencesColor(\"node\", Color.RED);\n\t\tdfltWayColor = getPreferencesColor(\"way\", darkblue);\n\t\tincompleteColor = getPreferencesColor(\"incomplete way\", darkerblue);\n\t\tbackgroundColor = getPreferencesColor(\"background\", Color.BLACK);\n\t\tshowDirectionArrow = Main.pref.getBoolean(\"draw.segment.direction\");\n\t\tshowOrderNumber = Main.pref.getBoolean(\"draw.segment.order_number\");\n\t\t\n\t\tfor (final OsmPrimitive osm : data.ways)\n\t\t\tif (!osm.deleted && !osm.selected)\n\t\t\t\tosm.visit(this);\n\t\tdisplaySegments(null);\n\t\tfor (final OsmPrimitive osm : data.nodes)\n\t\t\tif (!osm.deleted && !osm.selected)\n\t\t\t\tosm.visit(this);\n\t\tfor (final OsmPrimitive osm : data.getSelected())\n\t\t\tif (!osm.deleted)\n\t\t\t\tosm.visit(this);\n\t\tdisplaySegments(null);\n\t}","id":68839,"modified_method":"public void visitAll(DataSet data) {\n\t\t\n\t\tinactiveColor = getPreferencesColor(\"inactive\", Color.DARK_GRAY);\n\t\tselectedColor = getPreferencesColor(\"selected\", Color.WHITE);\n\t\tnodeColor = getPreferencesColor(\"node\", Color.RED);\n\t\tdfltWayColor = getPreferencesColor(\"way\", darkblue);\n\t\tuntaggedWayColor = getPreferencesColor(\"untagged way\", darkgreen);\n\t\tincompleteColor = getPreferencesColor(\"incomplete way\", darkerblue);\n\t\tbackgroundColor = getPreferencesColor(\"background\", Color.BLACK);\n\t\tshowDirectionArrow = Main.pref.getBoolean(\"draw.segment.direction\");\n\t\tshowOrderNumber = Main.pref.getBoolean(\"draw.segment.order_number\");\n\t\t\n\t\t// draw tagged ways first, then untagged ways. takes\n\t\t// time to iterate through list twice, OTOH does not\n\t\t// require changing the colour while painting...\n\t\tfor (final OsmPrimitive osm : data.ways)\n\t\t\tif (!osm.deleted && !osm.selected && osm.tagged)\n\t\t\t\tosm.visit(this);\n\t\tdisplaySegments(null);\n\n\t    for (final OsmPrimitive osm : data.ways)\n\t\t\tif (!osm.deleted && !osm.selected && !osm.tagged)\n\t\t\t\tosm.visit(this);\n\t\tdisplaySegments(null);\n\t    \n\t\tfor (final OsmPrimitive osm : data.nodes)\n\t\t\tif (!osm.deleted && !osm.selected)\n\t\t\t\tosm.visit(this);\n\t\n\t\tfor (final OsmPrimitive osm : data.getSelected())\n\t\t\tif (!osm.deleted)\n\t\t\t\tosm.visit(this);\n\t\tdisplaySegments(null);\n\t}","commit_id":"9ddd1f4e1d77b0967c0443d04734c8d080f653f3","url":"https://github.com/openstreetmap/josm"},{"original_method":"void setMemoryIndicatorVisible(final boolean visible) {\n    if (myMemoryWidget != null) {\n      myMemoryWidget.setShowing(visible);\n    }\n  }","id":68840,"modified_method":"void setMemoryIndicatorVisible(final boolean visible) {\n    if (myMemoryWidget != null) {\n      myMemoryWidget.setShowing(visible);\n      if (!SystemInfo.isMac) {\n        myStatusBar.setBorder(BorderFactory.createEmptyBorder(1, 4, 0, visible ? 0 : 2));\n      }\n    }\n  }","commit_id":"1be93d2dae0960852123ca1f8d6adba15bd28708","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public IdeStatusBarImpl() {\n    setLayout(new BorderLayout());\n    setBorder(BorderFactory.createEmptyBorder(1, 4, 0, 2));\n\n    myInfoAndProgressPanel = new InfoAndProgressPanel();\n    addWidget(myInfoAndProgressPanel, Position.CENTER);\n\n    setOpaque(true);\n    updateUI();\n  }","id":68841,"modified_method":"public IdeStatusBarImpl() {\n    setLayout(new BorderLayout());\n    setBorder(BorderFactory.createEmptyBorder(1, 4, 0, SystemInfo.isMac ? 2 : 0));\n\n    myInfoAndProgressPanel = new InfoAndProgressPanel();\n    addWidget(myInfoAndProgressPanel, Position.CENTER);\n\n    setOpaque(true);\n    updateUI();\n  }","commit_id":"1be93d2dae0960852123ca1f8d6adba15bd28708","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public final int getPreferredWidth() {\n    final Insets insets = getInsets();\n    return getFontMetrics(UIUtil.getLabelFont().deriveFont(11.0f)).stringWidth(SAMPLE_STRING) + insets.left + insets.right + (SystemInfo.isMac ? 2 : 0);\n  }","id":68842,"modified_method":"public final int getPreferredWidth() {\n    final Insets insets = getInsets();\n    return getFontMetrics(SystemInfo.isMac ? UIUtil.getLabelFont().deriveFont(11.0f) : UIUtil.getLabelFont()).stringWidth(SAMPLE_STRING) + insets.left + insets.right + (SystemInfo.isMac ? 2 : 0);\n  }","commit_id":"1be93d2dae0960852123ca1f8d6adba15bd28708","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void paintComponent(final Graphics g) {\n    final Dimension size = getSize();\n\n    final Runtime runtime = Runtime.getRuntime();\n    final long maxMemory = runtime.maxMemory();\n    final long freeMemory = maxMemory - runtime.totalMemory() + runtime.freeMemory();\n\n    final Insets insets = getInsets();\n\n    final int totalBarLength = size.width - insets.left - insets.right - (SystemInfo.isMac ? 0 : 0);\n    final int usedBarLength = totalBarLength - (int)(totalBarLength * freeMemory / maxMemory);\n    final int barHeight = HEIGHT; // size.height - insets.top - insets.bottom;\n    final Graphics2D g2 = (Graphics2D)g;\n\n    final int yOffset = (size.height - barHeight) / 2;\n    final int xOffset = insets.left + (SystemInfo.isMac ? 0 : 0);\n\n    final boolean pressed = getModel().isPressed();\n\n    g2.setPaint(new GradientPaint(0, 0, new Color(190, 190, 190), 0, size.height - 1, new Color(230, 230, 230)));\n    g2.fillRect(xOffset, yOffset, totalBarLength, barHeight);\n\n    if (pressed) {\n      g2.setPaint(new GradientPaint(1, 1, new Color(101, 111, 135), 0, size.height - 2, new Color(175, 185, 202)));\n      g2.fillRect(xOffset + 1, yOffset, usedBarLength, barHeight);\n    } else {\n      g2.setPaint(new GradientPaint(1, 1, new Color(175, 185, 202), 0, size.height - 2, new Color(126, 138, 168)));\n      g2.fillRect(xOffset + 1, yOffset, usedBarLength, barHeight);\n\n      g2.setColor(new Color(194, 197, 203));\n      g2.drawLine(xOffset + 1, yOffset+1, xOffset + usedBarLength, yOffset+1);\n    }\n\n    g2.setColor(new Color(110, 110, 110));\n    g2.drawRect(xOffset, yOffset, totalBarLength, barHeight - 1);\n\n    g.setFont(getFont());\n    final long used = (maxMemory - freeMemory) / MEGABYTE;\n    final long total = maxMemory / MEGABYTE;\n    final String info = UIBundle.message(\"memory.usage.panel.message.text\", Long.toString(used), Long.toString(total));\n    final FontMetrics fontMetrics = g.getFontMetrics();\n    final int infoWidth = fontMetrics.charsWidth(info.toCharArray(), 0, info.length());\n    final int infoHeight = fontMetrics.getHeight() - fontMetrics.getDescent();\n    UIUtil.applyRenderingHints(g);\n\n    g.setColor(Color.black);\n    g.drawString(info, xOffset + (totalBarLength - infoWidth) / 2, yOffset + (barHeight + infoHeight) / 2 - 1);\n  }","id":68843,"modified_method":"@Override\n  public void paintComponent(final Graphics g) {\n    final Dimension size = getSize();\n\n    final Runtime runtime = Runtime.getRuntime();\n    final long maxMemory = runtime.maxMemory();\n    final long freeMemory = maxMemory - runtime.totalMemory() + runtime.freeMemory();\n\n    final Insets insets = SystemInfo.isMac ? getInsets() : new Insets(0, 0, 0, 0);\n\n    final int totalBarLength = size.width - insets.left - insets.right - (SystemInfo.isMac ? 0 : 0);\n    final int usedBarLength = totalBarLength - (int)(totalBarLength * freeMemory / maxMemory);\n    final int barHeight = SystemInfo.isMac ? HEIGHT : size.height - insets.top - insets.bottom;\n    final Graphics2D g2 = (Graphics2D)g;\n\n    final int yOffset = (size.height - barHeight) / 2;\n    final int xOffset = insets.left + (SystemInfo.isMac ? 0 : 0);\n\n    final boolean pressed = getModel().isPressed();\n\n    g2.setPaint(new GradientPaint(0, 0, new Color(190, 190, 190), 0, size.height - 1, new Color(230, 230, 230)));\n    g2.fillRect(xOffset, yOffset, totalBarLength, barHeight);\n\n    if (pressed) {\n      g2.setPaint(new GradientPaint(1, 1, new Color(101, 111, 135), 0, size.height - 2, new Color(175, 185, 202)));\n      g2.fillRect(xOffset + 1, yOffset, usedBarLength, barHeight);\n    } else {\n      g2.setPaint(new GradientPaint(1, 1, new Color(175, 185, 202), 0, size.height - 2, new Color(126, 138, 168)));\n      g2.fillRect(xOffset + 1, yOffset, usedBarLength, barHeight);\n\n      if (SystemInfo.isMac) {\n        g2.setColor(new Color(194, 197, 203));\n        g2.drawLine(xOffset + 1, yOffset+1, xOffset + usedBarLength, yOffset+1);\n      }\n    }\n\n    if (SystemInfo.isMac) {\n      g2.setColor(new Color(110, 110, 110));\n      g2.drawRect(xOffset, yOffset, totalBarLength, barHeight - 1);\n    }\n\n    g.setFont(getFont());\n    final long used = (maxMemory - freeMemory) / MEGABYTE;\n    final long total = maxMemory / MEGABYTE;\n    final String info = UIBundle.message(\"memory.usage.panel.message.text\", Long.toString(used), Long.toString(total));\n    final FontMetrics fontMetrics = g.getFontMetrics();\n    final int infoWidth = fontMetrics.charsWidth(info.toCharArray(), 0, info.length());\n    final int infoHeight = fontMetrics.getHeight() - fontMetrics.getDescent();\n    UIUtil.applyRenderingHints(g);\n\n    g.setColor(Color.black);\n    g.drawString(info, xOffset + (totalBarLength - infoWidth) / 2, yOffset + (barHeight + infoHeight) / 2 - 1);\n  }","commit_id":"1be93d2dae0960852123ca1f8d6adba15bd28708","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Result exportForm()  {\n        BreadcrumbList bc = new BreadcrumbList();\n        bc.addCrumb(\"System\", routes.SystemController.index(0));\n        bc.addCrumb(\"Bundles\", routes.BundlesController.index());\n        bc.addCrumb(\"Export\", routes.BundlesController.export());\n\n        final List<Input> inputs = Lists.newArrayList();\n        List<Output> outputs = Lists.newArrayList();\n        List<Stream> streams = Lists.newArrayList();\n        List<Dashboard> dashboards = Lists.newArrayList();\n        try {\n            for (InputState inputState : inputService.loadAllInputStates()) {\n                inputs.add(inputState.getInput());\n            }\n            outputs = outputService.list();\n            streams = streamService.all();\n            dashboards = dashboardService.getAll();\n        } catch (APIException e) {\n            Logger.error(\"Could not fetch data. We expected HTTP 200, but got a HTTP \" + e.getHttpCode());\n        } catch (IOException e) {\n            Logger.error(\"Could not connect to Graylog2 server. \" + e);\n        }\n\n        return ok(views.html.system.bundles.export.render(currentUser(), bc, inputs, outputs, streams, dashboards));\n    }","id":68844,"modified_method":"public Result exportForm()  {\n        BreadcrumbList bc = new BreadcrumbList();\n        bc.addCrumb(\"System\", routes.SystemController.index(0));\n        bc.addCrumb(\"Bundles\", routes.BundlesController.index());\n        bc.addCrumb(\"Export\", routes.BundlesController.exportForm());\n\n        final Map<String, List> data = getListData();\n\n        return ok(views.html.system.bundles.export.render(\n                exportBundleForm,\n                currentUser(),\n                bc,\n                (List<Input>) data.get(\"inputs\"),\n                (List<Output>) data.get(\"outputs\"),\n                (List<Stream>) data.get(\"streams\"),\n                (List<Dashboard>) data.get(\"dashboards\")\n        ));\n    }","commit_id":"fce759e47f9c69866e7f97f855de62d6cbad26b3","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public Result export() {\n        final Form<ExportBundleRequest> form = Tools.bindMultiValueFormFromRequest(ExportBundleRequest.class);\n\n        if (form.hasErrors()) {\n            flash(\"Alles scheisse oida\");\n            return redirect(routes.BundlesController.exportForm());\n        }\n\n        try {\n            final ExportBundleRequest exportBundleRequest = form.get();\n            ConfigurationBundle bundle = bundleService.export(exportBundleRequest);\n\n            response().setContentType(MediaType.JSON_UTF_8.toString());\n            response().setHeader(\"Content-Disposition\", \"attachment; filename=exported_bundle.json\");\n            ObjectMapper m = new ObjectMapper();\n            ObjectWriter ow = m.writer().withDefaultPrettyPrinter();\n            return ok(ow.writeValueAsString(bundle));\n        } catch (IOException e) {\n            flash(\"error\", \"Could not reach Graylog2 server\");\n        } catch (Exception e) {\n            flash(\"error\", \"Unexpected error exporting configuration bundle, please try again later\");\n        }\n\n        return redirect(routes.BundlesController.exportForm());\n    }","id":68845,"modified_method":"public Result export() {\n        final Form<ExportBundleRequest> form = Tools.bindMultiValueFormFromRequest(ExportBundleRequest.class);\n\n        if (form.hasErrors()) {\n            BreadcrumbList bc = new BreadcrumbList();\n            bc.addCrumb(\"System\", routes.SystemController.index(0));\n            bc.addCrumb(\"Bundles\", routes.BundlesController.index());\n            bc.addCrumb(\"Export\", routes.BundlesController.exportForm());\n\n            Map<String, List> data = getListData();\n\n            flash(\"error\", \"Please correct the fields marked in red to export the bundle\");\n            return badRequest(views.html.system.bundles.export.render(\n                    form,\n                    currentUser(),\n                    bc,\n                    (List<Input>) data.get(\"inputs\"),\n                    (List<Output>) data.get(\"outputs\"),\n                    (List<Stream>) data.get(\"streams\"),\n                    (List<Dashboard>) data.get(\"dashboards\")\n            ));\n        }\n\n        try {\n            final ExportBundleRequest exportBundleRequest = form.get();\n            ConfigurationBundle bundle = bundleService.export(exportBundleRequest);\n\n            response().setContentType(MediaType.JSON_UTF_8.toString());\n            response().setHeader(\"Content-Disposition\", \"attachment; filename=configuration_bundle.json\");\n            ObjectMapper m = new ObjectMapper();\n            ObjectWriter ow = m.writer().withDefaultPrettyPrinter();\n            return ok(ow.writeValueAsString(bundle));\n        } catch (IOException e) {\n            flash(\"error\", \"Could not reach Graylog2 server\");\n        } catch (Exception e) {\n            flash(\"error\", \"Unexpected error exporting configuration bundle, please try again later\");\n        }\n\n        return redirect(routes.BundlesController.exportForm());\n    }","commit_id":"fce759e47f9c69866e7f97f855de62d6cbad26b3","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"protected void processDelta(Delta delta, IBuildContext context, final SubMonitor progress) {\n\t\tprogress.setWorkRemaining(100);\n\t\tURI sourceURI = delta.getUri();\n\t\tIFile sourceFile = null;\n\t\ttry {\n\t\t\tsourceFile = compilationFileProvider.getFile(sourceURI, context.getBuiltProject());\n\t\t\tif (!sourceFile.exists() || hasErrors(sourceFile))\n\t\t\t\treturn;\n\t\t\tIFile targetFile = compilationFileProvider.getTargetFile(sourceURI, context.getBuiltProject(),\n\t\t\t\t\tprogress.newChild(10));\n\t\t\tResource sourceResource = null;\n\t\t\tif (delta.getNew() != null) {\n\t\t\t\tsourceResource = context.getResourceSet().getResource(sourceURI, true);\n\t\t\t\tif (sourceResource == null)\n\t\t\t\t\tthrow new IllegalStateException(\"Cannot load source Xtend2 resource \"\n\t\t\t\t\t\t\t+ notNull(sourceURI));\n\t\t\t\tEcoreUtil.resolveAll(sourceResource);\n\t\t\t\tif (!sourceResource.getErrors().isEmpty())\n\t\t\t\t\treturn;\n\t\t\t} else if (delta.getOld() != null)\n\t\t\t\ttargetFile.delete(true, progress.newChild(10));\n\t\t\tif (sourceResource != null && !sourceResource.getContents().isEmpty()) {\n\t\t\t\tcompile(sourceResource, targetFile, progress.newChild(80));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error compiling \" + notNull(sourceURI), e);\n\t\t}\n\t}","id":68846,"modified_method":"protected void processDelta(Delta delta, IBuildContext context, final SubMonitor progress) {\n\t\tprogress.setWorkRemaining(100);\n\t\tURI sourceURI = delta.getUri();\n\t\tIFile sourceFile = null;\n\t\ttry {\n\t\t\tsourceFile = compilationFileProvider.getFile(sourceURI, context.getBuiltProject());\n\t\t\tif (sourceFile.exists() && hasErrors(sourceFile))\n\t\t\t\treturn;\n\t\t\tif (!sourceFile.exists() && delta.getNew() != null)\n\t\t\t\treturn;\n\t\t\tIFile targetFile = compilationFileProvider.getTargetFile(sourceURI, context.getBuiltProject(),\n\t\t\t\t\tprogress.newChild(10));\n\t\t\tif (delta.getNew() != null) {\n\t\t\t\tResource sourceResource = null;\n\t\t\t\tsourceResource = context.getResourceSet().getResource(sourceURI, true);\n\t\t\t\tif (sourceResource == null)\n\t\t\t\t\tthrow new IllegalStateException(\"Cannot load source Xtend2 resource \"\n\t\t\t\t\t\t\t+ notNull(sourceURI));\n\t\t\t\tEcoreUtil.resolveAll(sourceResource);\n\t\t\t\tif (!sourceResource.getErrors().isEmpty())\n\t\t\t\t\treturn;\n\t\t\t\tif (!sourceResource.getContents().isEmpty()) {\n\t\t\t\t\tcompile(sourceResource, targetFile, progress.newChild(80));\n\t\t\t\t}\n\t\t\t} else if (delta.getOld() != null) {\n\t\t\t\ttargetFile.delete(true, progress.newChild(10));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error compiling \" + notNull(sourceURI), e);\n\t\t}\n\t}","commit_id":"e0c019e34bc5b1abc7c67d719f1567cd68a9007b","url":"https://github.com/eclipse/xtext"},{"original_method":"public User(UserResponse ur, String passwordHash) {\n        this(ur.id, ur.username, \"\", ur.fullName, ur.permissions, passwordHash);\n    }","id":68847,"modified_method":"public User(UserResponse ur, String passwordHash) {\n        this(ur.id, ur.username, ur.email, ur.fullName, ur.permissions, passwordHash);\n    }","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public List<String> getPermissions() {\n\t\treturn permissions;\n\t}","id":68848,"modified_method":"public List<String> getPermissions() {\n        if (permissions == null) {\n            return Lists.newArrayList();\n        }\n\t\treturn permissions;\n\t}","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static Result index() {\n        final List<User> allUsers = Users.all();\n        final List<String> permissions = Permissions.all();\n        return ok(views.html.users.index.render(currentUser(), allUsers, permissions));\n    }","id":68849,"modified_method":"public static Result index() {\n        final List<User> allUsers = User.all();\n        final List<String> permissions = Permissions.all();\n        return ok(views.html.users.index.render(currentUser(), allUsers, permissions));\n    }","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static Result create() {\n        Form<CreateUserRequest> createUserRequestForm = Tools.bindMultiValueFormFromRequest(CreateUserRequest.class);\n        final CreateUserRequest request = createUserRequestForm.get();\n\n        if (createUserRequestForm.hasErrors()) {\n            return newUser(); // TODO we really want to pass the filled-out form here. TehSuck\n        }\n        // hash it before sending it across\n        request.password = new SimpleHash(\"SHA1\", request.password).toString();\n        Users.create(request);\n        return redirect(routes.UsersController.index());\n    }","id":68850,"modified_method":"public static Result create() {\n        Form<CreateUserRequest> createUserRequestForm = Tools.bindMultiValueFormFromRequest(CreateUserRequest.class);\n        final CreateUserRequest request = createUserRequestForm.get();\n\n        if (createUserRequestForm.hasErrors()) {\n            BreadcrumbList bc = new BreadcrumbList();\n            bc.addCrumb(\"System\", routes.SystemController.index(0));\n            bc.addCrumb(\"Users\", routes.UsersController.index());\n            bc.addCrumb(\"Create new\", routes.UsersController.newUserForm());\n            final List<String> permissions = Permissions.all();\n            return badRequest(new_user.render(createUserRequestForm, currentUser(), permissions, ImmutableSet.copyOf(request.permissions), bc));\n        }\n        // hash it before sending it across\n        request.password = new SimpleHash(\"SHA1\", request.password).toString();\n        User.create(request);\n        return redirect(routes.UsersController.index());\n    }","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static Result newUser() {\n        BreadcrumbList bc = new BreadcrumbList();\n        bc.addCrumb(\"System\", routes.SystemController.index(0));\n        bc.addCrumb(\"Users\", routes.UsersController.index());\n        bc.addCrumb(\"Create new\", routes.UsersController.newUser());\n\n        final List<String> permissions = Permissions.all();\n        return ok(views.html.users.new_user.render(currentUser(), permissions, bc));\n    }","id":68851,"modified_method":"public static Result newUserForm() {\n        BreadcrumbList bc = new BreadcrumbList();\n        bc.addCrumb(\"System\", routes.SystemController.index(0));\n        bc.addCrumb(\"Users\", routes.UsersController.index());\n        bc.addCrumb(\"Create new\", routes.UsersController.newUserForm());\n\n        final List<String> permissions = Permissions.all();\n        return ok(new_user.render(createUserForm, currentUser(), permissions, ImmutableSet.<String>of(), bc));\n    }","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static Result edit(String username) {\n        User user = Users.loadUser(username);\n        return ok(views.html.users.edit.render(currentUser(), user));\n    }","id":68852,"modified_method":"public static Result editUserForm(String username) {\n        BreadcrumbList bc = new BreadcrumbList();\n        bc.addCrumb(\"System\", routes.SystemController.index(0));\n        bc.addCrumb(\"Users\", routes.UsersController.index());\n        bc.addCrumb(\"Edit \" + username, routes.UsersController.editUserForm(username));\n\n        User user = User.load(username);\n        final Form<ChangeUserRequest> form = changeUserForm.fill(new ChangeUserRequest(user));\n        return ok(views.html.users.edit.render(form, username, currentUser(), Permissions.all(), ImmutableSet.copyOf(user.getPermissions()), bc));\n    }","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static Result uniqueUsername(String username) {\n        if (User.LocalAdminUser.getInstance().getName().equals(username)) {\n            return noContent();\n        }\n        if (Users.loadUser(username) == null) {\n            return notFound();\n        } else {\n            return noContent();\n        }\n    }","id":68853,"modified_method":"public static Result isUniqueUsername(String username) {\n        if (User.LocalAdminUser.getInstance().getName().equals(username)) {\n            return noContent();\n        }\n        if (User.load(username) == null) {\n            return notFound();\n        } else {\n            return noContent();\n        }\n    }","commit_id":"ed227a36ceb8affd78d9192752a9a90bbb25408e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"protected void processDelta(Delta delta, IBuildContext context, final SubMonitor progress) {\n\t\tprogress.setWorkRemaining(100);\n\t\tURI sourceURI = delta.getUri();\n\t\tIFile sourceFile = null;\n\t\ttry {\n\t\t\tsourceFile = compilationFileProvider.getFile(sourceURI, context.getBuiltProject());\n\t\t\tif (!sourceFile.exists() || hasErrors(sourceFile))\n\t\t\t\treturn;\n\t\t\tIFile targetFile = compilationFileProvider.getTargetFile(sourceURI, context.getBuiltProject(),\n\t\t\t\t\tprogress.newChild(10));\n\t\t\tResource sourceResource = null;\n\t\t\tif (delta.getNew() != null) {\n\t\t\t\tsourceResource = context.getResourceSet().getResource(sourceURI, true);\n\t\t\t\tif (sourceResource == null)\n\t\t\t\t\tthrow new IllegalStateException(\"Cannot load source Xtend2 resource \"\n\t\t\t\t\t\t\t+ notNull(sourceURI));\n\t\t\t\tEcoreUtil.resolveAll(sourceResource);\n\t\t\t\tif (!sourceResource.getErrors().isEmpty())\n\t\t\t\t\treturn;\n\t\t\t} else if (delta.getOld() != null)\n\t\t\t\ttargetFile.delete(true, progress.newChild(10));\n\t\t\tif (sourceResource != null && !sourceResource.getContents().isEmpty()) {\n\t\t\t\tcompile(sourceResource, targetFile, progress.newChild(80));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error compiling \" + notNull(sourceURI), e);\n\t\t}\n\t}","id":68854,"modified_method":"protected void processDelta(Delta delta, IBuildContext context, final SubMonitor progress) {\n\t\tprogress.setWorkRemaining(100);\n\t\tURI sourceURI = delta.getUri();\n\t\tIFile sourceFile = null;\n\t\ttry {\n\t\t\tsourceFile = compilationFileProvider.getFile(sourceURI, context.getBuiltProject());\n\t\t\tif (sourceFile.exists() && hasErrors(sourceFile))\n\t\t\t\treturn;\n\t\t\tif (!sourceFile.exists() && delta.getNew() != null)\n\t\t\t\treturn;\n\t\t\tIFile targetFile = compilationFileProvider.getTargetFile(sourceURI, context.getBuiltProject(),\n\t\t\t\t\tprogress.newChild(10));\n\t\t\tif (delta.getNew() != null) {\n\t\t\t\tResource sourceResource = null;\n\t\t\t\tsourceResource = context.getResourceSet().getResource(sourceURI, true);\n\t\t\t\tif (sourceResource == null)\n\t\t\t\t\tthrow new IllegalStateException(\"Cannot load source Xtend2 resource \"\n\t\t\t\t\t\t\t+ notNull(sourceURI));\n\t\t\t\tEcoreUtil.resolveAll(sourceResource);\n\t\t\t\tif (!sourceResource.getErrors().isEmpty())\n\t\t\t\t\treturn;\n\t\t\t\tif (!sourceResource.getContents().isEmpty()) {\n\t\t\t\t\tcompile(sourceResource, targetFile, progress.newChild(80));\n\t\t\t\t}\n\t\t\t} else if (delta.getOld() != null) {\n\t\t\t\ttargetFile.delete(true, progress.newChild(10));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error compiling \" + notNull(sourceURI), e);\n\t\t}\n\t}","commit_id":"2adc74eba3e0fdd0aed295baf987089a29f1c0a4","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void set_variation_on_characteristic_measure() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n\n    CharacteristicDto char1 = new CharacteristicDto().setKey(\"PORTABILITY\");\n    CharacteristicDto char2 = new CharacteristicDto().setKey(\"MAINTAINABILITY\");\n    dbClient.debtCharacteristicDao().insert(session, char1, char2);\n\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 40d).setCharacteristicId(char1.getId()));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 20d).setCharacteristicId(char2.getId()));\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().create(80, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forCharacteristic(char1.getId()).create(45, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forCharacteristic(char2.getId()).create(35, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), new Characteristic(char1.getId(), char1.getKey())).get().getVariations().getVariation1())\n      .isEqualTo(5d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), new Characteristic(char2.getId(), char2.getKey())).get().getVariations().getVariation1())\n      .isEqualTo(15d);\n  }","id":68855,"modified_method":"@Test\n  public void set_variation_on_characteristic_measure() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n\n    CharacteristicDto char1 = new CharacteristicDto().setKey(\"PORTABILITY\");\n    CharacteristicDto char2 = new CharacteristicDto().setKey(\"MAINTAINABILITY\");\n    dbClient.debtCharacteristicDao().insert(session, char1, char2);\n\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 40d).setCharacteristicId(char1.getId()));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 20d).setCharacteristicId(char2.getId()));\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().create(80, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forCharacteristic(char1.getId()).create(45, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forCharacteristic(char2.getId()).create(35, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), new Characteristic(char1.getId(), char1.getKey())).get().getVariations().getVariation1())\n      .isEqualTo(5d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), new Characteristic(char2.getId(), char2.getKey())).get().getVariations().getVariation1())\n      .isEqualTo(15d);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_variations_on_all_periods() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period2ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period3ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period4ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period5ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot, period2ProjectSnapshot, period3ProjectSnapshot, period4ProjectSnapshot, period5ProjectSnapshot);\n\n    dbClient.measureDao().insert(session,\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 0d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period2ProjectSnapshot.getId(), 20d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period3ProjectSnapshot.getId(), 40d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period4ProjectSnapshot.getId(), 80d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period5ProjectSnapshot.getId(), 100d));\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n    periodsHolder.addPeriod(newPeriod(2, period2ProjectSnapshot));\n    periodsHolder.addPeriod(newPeriod(3, period3ProjectSnapshot));\n    periodsHolder.addPeriod(newPeriod(4, period4ProjectSnapshot));\n    periodsHolder.addPeriod(newPeriod(5, period5ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    addRawMeasure(PROJECT, ISSUES_METRIC, Measure.newMeasureBuilder().create(80, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(PROJECT).keys()).hasSize(1);\n\n    Measure measure = measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get();\n    assertThat(measure.hasVariations()).isTrue();\n    assertThat(measure.getVariations().getVariation1()).isEqualTo(80d);\n    assertThat(measure.getVariations().getVariation2()).isEqualTo(60d);\n    assertThat(measure.getVariations().getVariation3()).isEqualTo(40d);\n    assertThat(measure.getVariations().getVariation4()).isEqualTo(0d);\n    assertThat(measure.getVariations().getVariation5()).isEqualTo(-20d);\n  }","id":68856,"modified_method":"@Test\n  public void set_variations_on_all_periods() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period2ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period3ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period4ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    SnapshotDto period5ProjectSnapshot = createForProject(PROJECT_DTO).setLast(false);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot, period2ProjectSnapshot, period3ProjectSnapshot, period4ProjectSnapshot, period5ProjectSnapshot);\n\n    dbClient.measureDao().insert(session,\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 0d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period2ProjectSnapshot.getId(), 20d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period3ProjectSnapshot.getId(), 40d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period4ProjectSnapshot.getId(), 80d),\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period5ProjectSnapshot.getId(), 100d));\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot),\n      newPeriod(2, period2ProjectSnapshot),\n      newPeriod(3, period3ProjectSnapshot),\n      newPeriod(4, period4ProjectSnapshot),\n      newPeriod(5, period5ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    addRawMeasure(PROJECT, ISSUES_METRIC, Measure.newMeasureBuilder().create(80, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(PROJECT).keys()).hasSize(1);\n\n    Measure measure = measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get();\n    assertThat(measure.hasVariations()).isTrue();\n    assertThat(measure.getVariations().getVariation1()).isEqualTo(80d);\n    assertThat(measure.getVariations().getVariation2()).isEqualTo(60d);\n    assertThat(measure.getVariations().getVariation3()).isEqualTo(40d);\n    assertThat(measure.getVariations().getVariation4()).isEqualTo(0d);\n    assertThat(measure.getVariations().getVariation5()).isEqualTo(-20d);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_variation_on_all_numeric_metrics() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session,\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d),\n      newMeasureDto(DEBT_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 10d),\n      newMeasureDto(FILE_COMPLEXITY_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 2d),\n      newMeasureDto(BUILD_BREAKER_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 1d)\n      );\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    addRawMeasure(PROJECT, ISSUES_METRIC, Measure.newMeasureBuilder().create(80, null));\n    addRawMeasure(PROJECT, DEBT_METRIC, Measure.newMeasureBuilder().create(5L, null));\n    addRawMeasure(PROJECT, FILE_COMPLEXITY_METRIC, Measure.newMeasureBuilder().create(3d, null));\n    addRawMeasure(PROJECT, BUILD_BREAKER_METRIC, Measure.newMeasureBuilder().create(false, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(PROJECT).keys()).hasSize(4);\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(DEBT_METRIC)).get().getVariations().getVariation1()).isEqualTo(-5d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(FILE_COMPLEXITY_METRIC)).get().getVariations().getVariation1()).isEqualTo(1d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(BUILD_BREAKER_METRIC)).get().getVariations().getVariation1()).isEqualTo(-1d);\n  }","id":68857,"modified_method":"@Test\n  public void set_variation_on_all_numeric_metrics() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session,\n      newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d),\n      newMeasureDto(DEBT_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 10d),\n      newMeasureDto(FILE_COMPLEXITY_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 2d),\n      newMeasureDto(BUILD_BREAKER_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 1d)\n      );\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    addRawMeasure(PROJECT, ISSUES_METRIC, Measure.newMeasureBuilder().create(80, null));\n    addRawMeasure(PROJECT, DEBT_METRIC, Measure.newMeasureBuilder().create(5L, null));\n    addRawMeasure(PROJECT, FILE_COMPLEXITY_METRIC, Measure.newMeasureBuilder().create(3d, null));\n    addRawMeasure(PROJECT, BUILD_BREAKER_METRIC, Measure.newMeasureBuilder().create(false, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(PROJECT).keys()).hasSize(4);\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(DEBT_METRIC)).get().getVariations().getVariation1()).isEqualTo(-5d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(FILE_COMPLEXITY_METRIC)).get().getVariations().getVariation1()).isEqualTo(1d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(BUILD_BREAKER_METRIC)).get().getVariations().getVariation1()).isEqualTo(-1d);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_variation_on_rule_measure() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n\n    RuleDto rule1 = RuleTesting.newXooX1();\n    RuleDto rule2 = RuleTesting.newXooX2();\n    dbClient.ruleDao().insert(session, rule1, rule2);\n\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 40d).setRuleId(rule1.getId()));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 20d).setRuleId(rule2.getId()));\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().create(80, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forRule(rule1.getId()).create(45, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forRule(rule2.getId()).create(35, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), rule1).get().getVariations().getVariation1()).isEqualTo(5d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), rule2).get().getVariations().getVariation1()).isEqualTo(15d);\n  }","id":68858,"modified_method":"@Test\n  public void set_variation_on_rule_measure() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n\n    RuleDto rule1 = RuleTesting.newXooX1();\n    RuleDto rule2 = RuleTesting.newXooX2();\n    dbClient.ruleDao().insert(session, rule1, rule2);\n\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 40d).setRuleId(rule1.getId()));\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 20d).setRuleId(rule2.getId()));\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().create(80, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forRule(rule1.getId()).create(45, null));\n    measureRepository.add(PROJECT, toMetric(ISSUES_METRIC), Measure.newMeasureBuilder().forRule(rule2.getId()).create(35, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), rule1).get().getVariations().getVariation1()).isEqualTo(5d);\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC), rule2).get().getVariations().getVariation1()).isEqualTo(15d);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_measure_from_batch() throws Exception {\n    // Project\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    reportReader.putMeasures(PROJECT.getRef(), Collections.singletonList(\n      BatchReport.Measure.newBuilder().setIntValue(80).setMetricKey(ISSUES_METRIC.getKey()).build())\n      );\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n  }","id":68859,"modified_method":"@Test\n  public void read_measure_from_batch() throws Exception {\n    // Project\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    reportReader.putMeasures(PROJECT.getRef(), Collections.singletonList(\n      BatchReport.Measure.newBuilder().setIntValue(80).setMetricKey(ISSUES_METRIC.getKey()).build())\n      );\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(PROJECT, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_nothing_when_no_period() throws Exception {\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(PROJECT_DTO.uuid()).build();\n    treeRootHolder.setRoot(project);\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(project).keys()).isEmpty();\n  }","id":68860,"modified_method":"@Test\n  public void do_nothing_when_no_period() throws Exception {\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(PROJECT_DTO.uuid()).build();\n    treeRootHolder.setRoot(project);\n    periodsHolder.setPeriods();\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(project).keys()).isEmpty();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_variation() throws Exception {\n    // Project\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n\n    // Directory\n    ComponentDto directoryDto = ComponentTesting.newDirectory(PROJECT_DTO, \"dir\");\n    dbClient.componentDao().insert(session, directoryDto);\n    SnapshotDto period1DirectorySnapshot = createForComponent(directoryDto, period1ProjectSnapshot);\n    dbClient.snapshotDao().insert(session, period1DirectorySnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), directoryDto.getId(), period1DirectorySnapshot.getId(), 10d));\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n\n    Component directory = DumbComponent.builder(Component.Type.DIRECTORY, 2).setUuid(directoryDto.uuid()).build();\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(PROJECT_DTO.uuid()).addChildren(directory).build();\n    treeRootHolder.setRoot(project);\n\n    addRawMeasure(project, ISSUES_METRIC, Measure.newMeasureBuilder().create(80, null));\n    addRawMeasure(directory, ISSUES_METRIC, Measure.newMeasureBuilder().create(20, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(project, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(directory, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(10d);\n  }","id":68861,"modified_method":"@Test\n  public void set_variation() throws Exception {\n    // Project\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n\n    // Directory\n    ComponentDto directoryDto = ComponentTesting.newDirectory(PROJECT_DTO, \"dir\");\n    dbClient.componentDao().insert(session, directoryDto);\n    SnapshotDto period1DirectorySnapshot = createForComponent(directoryDto, period1ProjectSnapshot);\n    dbClient.snapshotDao().insert(session, period1DirectorySnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), directoryDto.getId(), period1DirectorySnapshot.getId(), 10d));\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot));\n\n    Component directory = DumbComponent.builder(Component.Type.DIRECTORY, 2).setUuid(directoryDto.uuid()).build();\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(PROJECT_DTO.uuid()).addChildren(directory).build();\n    treeRootHolder.setRoot(project);\n\n    addRawMeasure(project, ISSUES_METRIC, Measure.newMeasureBuilder().create(80, null));\n    addRawMeasure(directory, ISSUES_METRIC, Measure.newMeasureBuilder().create(20, null));\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasure(project, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(20d);\n    assertThat(measureRepository.getRawMeasure(directory, toMetric(ISSUES_METRIC)).get().getVariations().getVariation1()).isEqualTo(10d);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_nothing_when_no_raw_measure() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    session.commit();\n\n    periodsHolder.addPeriod(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(PROJECT).keys()).isEmpty();\n  }","id":68862,"modified_method":"@Test\n  public void do_nothing_when_no_raw_measure() throws Exception {\n    SnapshotDto period1ProjectSnapshot = createForProject(PROJECT_DTO);\n    dbClient.snapshotDao().insert(session, period1ProjectSnapshot);\n    dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), PROJECT_DTO.getId(), period1ProjectSnapshot.getId(), 60d));\n    session.commit();\n\n    periodsHolder.setPeriods(newPeriod(1, period1ProjectSnapshot));\n\n    treeRootHolder.setRoot(PROJECT);\n\n    sut.execute();\n\n    assertThat(measureRepository.getRawMeasures(PROJECT).keys()).isEmpty();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void setPeriods(List<Period> periods) {\n    Preconditions.checkNotNull(periods, \"Periods cannot be null\");\n    Preconditions.checkState(this.periods == null, \"Periods have already been initialized\");\n    this.periods = ImmutableList.copyOf(periods);\n  }","id":68863,"modified_method":"/**\n   * Initializes the periods in the holder.\n   *\n   * @throws NullPointerException if the specified Iterable is {@code null}\n   * @throws NullPointerException if the specified Iterable contains a {@code null}\n   * @throws IllegalArgumentException if the specified Iterable has more than 5 elements\n   * @throws IllegalStateException if the holder has already been initialized\n   * @throws IllegalStateException if two Periods have the same index\n   */\n  public void setPeriods(Iterable<Period> periods) {\n    requireNonNull(periods, \"Periods cannot be null\");\n    checkArgument(Iterables.size(periods) <= 5, \"There can not be more than 5 periods\");\n    checkState(this.periods == null, \"Periods have already been initialized\");\n\n    Period[] newPeriods = new Period[5];\n    for (Period period : from(periods).filter(CheckNotNull.INSTANCE)) {\n      int arrayIndex = period.getIndex() - 1;\n      checkArgument(newPeriods[(arrayIndex)] == null, \"More than one period has the index \" + period.getIndex());\n      newPeriods[(arrayIndex)] = period;\n    }\n    this.periods = newPeriods;\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public List<Period> getPeriods() {\n    Preconditions.checkState(periods != null, \"Periods have not been initialized yet\");\n    return periods;\n  }","id":68864,"modified_method":"@Override\n  public List<Period> getPeriods() {\n    checkHolderIsInitialized();\n    return from(Arrays.asList(periods)).filter(Predicates.notNull()).toList();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update_periods_throws_unsupported_operation_exception() throws Exception {\n    thrown.expect(UnsupportedOperationException.class);\n\n    List<Period> periods = new ArrayList<>();\n    periods.add(new Period(1, \"mode\", null, 1000L, 10L));\n\n    PeriodsHolderImpl periodsHolder = new PeriodsHolderImpl();\n    periodsHolder.setPeriods(periods);\n\n    periodsHolder.getPeriods().add(new Period(2, \"mode\", null, 1001L, 11L));\n  }","id":68865,"modified_method":"@Test\n  public void update_periods_throws_unsupported_operation_exception() throws Exception {\n    thrown.expect(UnsupportedOperationException.class);\n\n    underTest.setPeriods(ImmutableList.of(createPeriod(1)));\n\n    underTest.getPeriods().add(createPeriod(2));\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_periods_throws_illegal_state_exception_if_already_initialized() throws Exception {\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\"Periods have already been initialized\");\n\n    List<Period> periods = new ArrayList<>();\n    periods.add(new Period(1, \"mode\", null, 1000L, 10L));\n\n    PeriodsHolderImpl periodsHolder = new PeriodsHolderImpl();\n    periodsHolder.setPeriods(periods);\n    periodsHolder.setPeriods(periods);\n  }","id":68866,"modified_method":"@Test\n  public void setPeriods_throws_ISE_if_already_initialized() throws Exception {\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\"Periods have already been initialized\");\n\n    List<Period> periods = new ArrayList<>();\n    periods.add(createPeriod(1));\n\n    underTest.setPeriods(periods);\n    underTest.setPeriods(periods);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void get_periods() throws Exception {\n    List<Period> periods = new ArrayList<>();\n    periods.add(new Period(1, \"mode\", null, 1000L, 10L));\n\n    PeriodsHolderImpl periodsHolder = new PeriodsHolderImpl();\n    periodsHolder.setPeriods(periods);\n\n    assertThat(periodsHolder.getPeriods()).hasSize(1);\n  }","id":68867,"modified_method":"@Test\n  public void get_periods() throws Exception {\n    List<Period> periods = new ArrayList<>();\n    periods.add(createPeriod(1));\n\n    underTest.setPeriods(periods);\n\n    assertThat(underTest.getPeriods()).hasSize(1);\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void clear() {\n    this.periods.clear();\n  }","id":68868,"modified_method":"private void clear() {\n    this.delegate = new PeriodsHolderImpl();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public List<Period> getPeriods() {\n    return periods;\n  }","id":68869,"modified_method":"@Override\n  public List<Period> getPeriods() {\n    return delegate.getPeriods();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setup() throws Exception {\n    dbTester.truncateTables();\n    session = dbTester.myBatis().openSession(false);\n    dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), new ComponentDao(), new SnapshotDao());\n\n    analysisDate = DateUtils.parseDateQuietly(\"2015-06-01\").getTime();\n    reportReader.setMetadata(BatchReport.Metadata.newBuilder()\n      .setAnalysisDate(analysisDate)\n      .build());\n    dbIdsRepository = new DbIdsRepository();\n\n    now = DateUtils.parseDateQuietly(\"2015-06-02\").getTime();\n\n    when(system2.now()).thenReturn(now);\n\n    sut = new PersistSnapshotsStep(system2, dbClient, treeRootHolder, reportReader, dbIdsRepository, periodsHolderRule);\n  }","id":68870,"modified_method":"@Before\n  public void setup() throws Exception {\n    dbTester.truncateTables();\n    session = dbTester.myBatis().openSession(false);\n    dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), new ComponentDao(), new SnapshotDao());\n\n    analysisDate = DateUtils.parseDateQuietly(\"2015-06-01\").getTime();\n    reportReader.setMetadata(BatchReport.Metadata.newBuilder()\n      .setAnalysisDate(analysisDate)\n      .build());\n    dbIdsRepository = new DbIdsRepository();\n\n    now = DateUtils.parseDateQuietly(\"2015-06-02\").getTime();\n\n    when(system2.now()).thenReturn(now);\n\n    sut = new PersistSnapshotsStep(system2, dbClient, treeRootHolder, reportReader, dbIdsRepository, periodsHolderRule);\n\n    // initialize PeriodHolder to empty by default\n    periodsHolderRule.setPeriods();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void persist_snapshots_with_periods() throws Exception {\n    ComponentDto projectDto = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");\n    dbClient.componentDao().insert(session, projectDto);\n    SnapshotDto snapshotDto = SnapshotTesting.createForProject(projectDto).setCreatedAt(DateUtils.parseDateQuietly(\"2015-01-01\").getTime());\n    dbClient.snapshotDao().insert(session, snapshotDto);\n    session.commit();\n    periodsHolderRule.addPeriod(new Period(1, CoreProperties.TIMEMACHINE_MODE_DATE, \"2015-01-01\", analysisDate, 123L));\n\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).build();\n    treeRootHolder.setRoot(project);\n    dbIdsRepository.setComponentId(project, projectDto.getId());\n\n    sut.execute();\n\n    SnapshotDto projectSnapshot = getUnprocessedSnapshot(projectDto.getId());\n    assertThat(projectSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_DATE);\n    assertThat(projectSnapshot.getPeriodDate(1)).isEqualTo(analysisDate);\n    assertThat(projectSnapshot.getPeriodModeParameter(1)).isNotNull();\n  }","id":68871,"modified_method":"@Test\n  public void persist_snapshots_with_periods() throws Exception {\n    ComponentDto projectDto = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");\n    dbClient.componentDao().insert(session, projectDto);\n    SnapshotDto snapshotDto = SnapshotTesting.createForProject(projectDto).setCreatedAt(DateUtils.parseDateQuietly(\"2015-01-01\").getTime());\n    dbClient.snapshotDao().insert(session, snapshotDto);\n    session.commit();\n    periodsHolderRule.setPeriods(new Period(1, CoreProperties.TIMEMACHINE_MODE_DATE, \"2015-01-01\", analysisDate, 123L));\n\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).build();\n    treeRootHolder.setRoot(project);\n    dbIdsRepository.setComponentId(project, projectDto.getId());\n\n    sut.execute();\n\n    SnapshotDto projectSnapshot = getUnprocessedSnapshot(projectDto.getId());\n    assertThat(projectSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_DATE);\n    assertThat(projectSnapshot.getPeriodDate(1)).isEqualTo(analysisDate);\n    assertThat(projectSnapshot.getPeriodModeParameter(1)).isNotNull();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void only_persist_snapshots_with_periods_on_project_and_module() throws Exception {\n    periodsHolderRule.addPeriod(new Period(1, CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS, null, analysisDate, 123L));\n\n    ComponentDto projectDto = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");\n    dbClient.componentDao().insert(session, projectDto);\n    SnapshotDto projectSnapshot = SnapshotTesting.createForProject(projectDto);\n    dbClient.snapshotDao().insert(session, projectSnapshot);\n\n    ComponentDto moduleDto = ComponentTesting.newModuleDto(\"BCDE\", projectDto).setKey(\"MODULE_KEY\").setName(\"Module\");\n    dbClient.componentDao().insert(session, moduleDto);\n    SnapshotDto moduleSnapshot = SnapshotTesting.createForComponent(moduleDto, projectSnapshot);\n    dbClient.snapshotDao().insert(session, moduleSnapshot);\n\n    ComponentDto directoryDto = ComponentTesting.newDirectory(moduleDto, \"CDEF\", \"MODULE_KEY:src/main/java/dir\").setKey(\"MODULE_KEY:src/main/java/dir\");\n    dbClient.componentDao().insert(session, directoryDto);\n    SnapshotDto directorySnapshot = SnapshotTesting.createForComponent(directoryDto, moduleSnapshot);\n    dbClient.snapshotDao().insert(session, directorySnapshot);\n\n    ComponentDto fileDto = ComponentTesting.newFileDto(moduleDto, \"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\");\n    dbClient.componentDao().insert(session, fileDto);\n    SnapshotDto fileSnapshot = SnapshotTesting.createForComponent(fileDto, directorySnapshot);\n    dbClient.snapshotDao().insert(session, fileSnapshot);\n\n    session.commit();\n\n    Component file = DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build();\n    Component directory = DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(file).build();\n    Component module = DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(directory).build();\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(module).build();\n    treeRootHolder.setRoot(project);\n\n    dbIdsRepository.setComponentId(project, projectDto.getId());\n    dbIdsRepository.setComponentId(module, moduleDto.getId());\n    dbIdsRepository.setComponentId(directory, directoryDto.getId());\n    dbIdsRepository.setComponentId(file, fileDto.getId());\n\n    sut.execute();\n\n    SnapshotDto newProjectSnapshot = getUnprocessedSnapshot(projectDto.getId());\n    assertThat(newProjectSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);\n\n    SnapshotDto newModuleSnapshot = getUnprocessedSnapshot(moduleDto.getId());\n    assertThat(newModuleSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);\n\n    SnapshotDto newDirectorySnapshot = getUnprocessedSnapshot(directoryDto.getId());\n    assertThat(newDirectorySnapshot.getPeriodMode(1)).isNull();\n\n    SnapshotDto newFileSnapshot = getUnprocessedSnapshot(fileDto.getId());\n    assertThat(newFileSnapshot.getPeriodMode(1)).isNull();\n  }","id":68872,"modified_method":"@Test\n  public void only_persist_snapshots_with_periods_on_project_and_module() throws Exception {\n    periodsHolderRule.setPeriods(new Period(1, CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS, null, analysisDate, 123L));\n\n    ComponentDto projectDto = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");\n    dbClient.componentDao().insert(session, projectDto);\n    SnapshotDto projectSnapshot = SnapshotTesting.createForProject(projectDto);\n    dbClient.snapshotDao().insert(session, projectSnapshot);\n\n    ComponentDto moduleDto = ComponentTesting.newModuleDto(\"BCDE\", projectDto).setKey(\"MODULE_KEY\").setName(\"Module\");\n    dbClient.componentDao().insert(session, moduleDto);\n    SnapshotDto moduleSnapshot = SnapshotTesting.createForComponent(moduleDto, projectSnapshot);\n    dbClient.snapshotDao().insert(session, moduleSnapshot);\n\n    ComponentDto directoryDto = ComponentTesting.newDirectory(moduleDto, \"CDEF\", \"MODULE_KEY:src/main/java/dir\").setKey(\"MODULE_KEY:src/main/java/dir\");\n    dbClient.componentDao().insert(session, directoryDto);\n    SnapshotDto directorySnapshot = SnapshotTesting.createForComponent(directoryDto, moduleSnapshot);\n    dbClient.snapshotDao().insert(session, directorySnapshot);\n\n    ComponentDto fileDto = ComponentTesting.newFileDto(moduleDto, \"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\");\n    dbClient.componentDao().insert(session, fileDto);\n    SnapshotDto fileSnapshot = SnapshotTesting.createForComponent(fileDto, directorySnapshot);\n    dbClient.snapshotDao().insert(session, fileSnapshot);\n\n    session.commit();\n\n    Component file = DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build();\n    Component directory = DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(file).build();\n    Component module = DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(directory).build();\n    Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(module).build();\n    treeRootHolder.setRoot(project);\n\n    dbIdsRepository.setComponentId(project, projectDto.getId());\n    dbIdsRepository.setComponentId(module, moduleDto.getId());\n    dbIdsRepository.setComponentId(directory, directoryDto.getId());\n    dbIdsRepository.setComponentId(file, fileDto.getId());\n\n    sut.execute();\n\n    SnapshotDto newProjectSnapshot = getUnprocessedSnapshot(projectDto.getId());\n    assertThat(newProjectSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);\n\n    SnapshotDto newModuleSnapshot = getUnprocessedSnapshot(moduleDto.getId());\n    assertThat(newModuleSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);\n\n    SnapshotDto newDirectorySnapshot = getUnprocessedSnapshot(directoryDto.getId());\n    assertThat(newDirectorySnapshot.getPeriodMode(1)).isNull();\n\n    SnapshotDto newFileSnapshot = getUnprocessedSnapshot(fileDto.getId());\n    assertThat(newFileSnapshot.getPeriodMode(1)).isNull();\n  }","commit_id":"6ac8a76c55772ce0164fb44152dffca7dcc0b036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    protected void configure() {\n        // This is holding all our metrics.\n        bind(MetricRegistry.class).toInstance(new MetricRegistry());\n        bind(ThroughputStats.class).toInstance(new ThroughputStats());\n        bind(ProcessBufferWatermark.class).toInstance(new ProcessBufferWatermark());\n\n        bind(InstantiationService.class).toInstance(instantiationService);\n\n        install(new FactoryModuleBuilder().build(ProcessBuffer.Factory.class));\n\n        bind(ProcessBuffer.class).toProvider(ProcessBufferProvider.class);\n        bind(GELFChunkManager.class).toProvider(GELFChunkManagerProvider.class);\n        bind(NodeId.class).toProvider(NodeIdProvider.class);\n\n        bind(ServiceManager.class).toProvider(ServiceManagerProvider.class);\n\n        bind(HashedWheelTimer.class).toInstance(new HashedWheelTimer());\n        bind(ThroughputCounter.class);\n\n        AsyncEventBus eventBus = new AsyncEventBus(\"graylog2-eventbus\",\n                                                   Executors.newFixedThreadPool(\n                                                           2, // TODO make configurable\n                                                           new ThreadFactoryBuilder()\n                                                                   .setDaemon(true)\n                                                                   .setNameFormat(\n                                                                           \"eventbus-handler-%d\")\n                                                                   .build()\n                                                   ));\n        bind(EventBus.class).toInstance(eventBus);\n    }","id":68873,"modified_method":"@Override\n    protected void configure() {\n        // This is holding all our metrics.\n        bind(MetricRegistry.class).toInstance(new MetricRegistry());\n        bind(ThroughputStats.class).toInstance(new ThroughputStats());\n        bind(ProcessBufferWatermark.class).toInstance(new ProcessBufferWatermark());\n\n        bind(InstantiationService.class).toInstance(instantiationService);\n\n        install(new FactoryModuleBuilder().build(ProcessBuffer.Factory.class));\n\n        bind(ProcessBuffer.class).toProvider(ProcessBufferProvider.class);\n        bind(GELFChunkManager.class).toProvider(GELFChunkManagerProvider.class);\n        bind(NodeId.class).toProvider(NodeIdProvider.class);\n\n        bind(ServiceManager.class).toProvider(ServiceManagerProvider.class);\n\n        bind(HashedWheelTimer.class).toInstance(new HashedWheelTimer());\n        bind(ThroughputCounter.class);\n\n        bind(EventBus.class).toProvider(EventBusProvider.class).in(Scopes.SINGLETON);\n    }","commit_id":"3142c404c47dd6b653542edf43bb25f81a2e421e","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    protected void configure() {\n        final ObjectMapper objectMapper = makeObjectMapper();\n        bind(ObjectMapper.class).toInstance(objectMapper);\n    }","id":68874,"modified_method":"@Override\n    protected void configure() {\n        bind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).asEagerSingleton();\n    }","commit_id":"a33856b943174536952bc7c3a41835636b4d6e15","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Nullable\n  public static ResourceBundle getResourceBundle(@NotNull final PropertiesFile representative) {\n    final PsiFile containingFile = representative.getContainingFile();\n    if (!containingFile.isValid()) {\n      return EmptyResourceBundle.getInstance();\n    }\n    final ResourceBundleManager manager = ResourceBundleManager.getInstance(representative.getProject());\n    final CustomResourceBundle customResourceBundle =\n      manager.getCustomResourceBundle(representative);\n    if (customResourceBundle != null) {\n      return customResourceBundle;\n    }\n\n    final VirtualFile virtualFile = representative.getVirtualFile();\n    if (virtualFile == null) {\n      return EmptyResourceBundle.getInstance();\n    }\n    if (manager.isDefaultDissociated(virtualFile)) {\n      return new ResourceBundleImpl(representative);\n    }\n\n\n    final String baseName = manager.getBaseName(containingFile);\n    final PsiDirectory directory = ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory>() {\n      @Nullable\n      public PsiDirectory compute() {\n        return containingFile.getContainingDirectory();\n      }});\n    if (directory == null) return EmptyResourceBundle.getInstance();\n    return getResourceBundle(baseName, directory);\n  }","id":68875,"modified_method":"@Nullable\n  public static ResourceBundle getResourceBundle(@NotNull final PropertiesFile representative) {\n    final PsiFile containingFile = representative.getContainingFile();\n    if (!containingFile.isValid()) {\n      return EmptyResourceBundle.getInstance();\n    }\n    final ResourceBundleManager manager = ResourceBundleManager.getInstance(representative.getProject());\n    final CustomResourceBundle customResourceBundle =\n      manager.getCustomResourceBundle(representative);\n    if (customResourceBundle != null) {\n      return customResourceBundle;\n    }\n\n    final VirtualFile virtualFile = representative.getVirtualFile();\n    if (virtualFile == null) {\n      return EmptyResourceBundle.getInstance();\n    }\n    if (manager.isDefaultDissociated(virtualFile)) {\n      return new ResourceBundleImpl(representative);\n    }\n\n\n    final String baseName = manager.getBaseName(containingFile);\n    final PsiDirectory directory = ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory>() {\n      @Nullable\n      public PsiDirectory compute() {\n        return containingFile.getContainingDirectory();\n      }});\n    if (directory == null) return EmptyResourceBundle.getInstance();\n    final ResourceBundle bundle = getResourceBundle(baseName, directory);\n    return bundle == null ? new ResourceBundleImpl(representative) : bundle;\n  }","commit_id":"401a5cf5408bccf4729e849462157f99da94de48","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static ResourceBundle getResourceBundle(@NotNull final String baseName, @NotNull final PsiDirectory baseDirectory) {\n    PropertiesFile defaultPropertiesFile = null;\n    final ResourceBundleManager bundleBaseNameManager = ResourceBundleManager.getInstance(baseDirectory.getProject());\n    final PsiFile[] psiFiles = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() {\n      @Override\n      public PsiFile[] compute() {\n        return baseDirectory.getFiles();\n      }\n    });\n    for (final PsiFile psiFile : psiFiles) {\n      if (baseName.equals(bundleBaseNameManager.getBaseName(psiFile))) {\n        final PropertiesFile propertiesFile = getPropertiesFile(psiFile);\n        if (propertiesFile != null) {\n          if (defaultPropertiesFile == null || defaultPropertiesFile.getName().compareTo(propertiesFile.getName()) > 0) {\n            defaultPropertiesFile = propertiesFile;\n          }\n        }\n      }\n    }\n    if (defaultPropertiesFile == null) {\n      return null;\n    }\n    return new ResourceBundleImpl(defaultPropertiesFile);\n  }","id":68876,"modified_method":"@Nullable\n  private static ResourceBundle getResourceBundle(@NotNull final String baseName, @NotNull final PsiDirectory baseDirectory) {\n    PropertiesFile defaultPropertiesFile = null;\n    final ResourceBundleManager bundleBaseNameManager = ResourceBundleManager.getInstance(baseDirectory.getProject());\n    final PsiFile[] psiFiles = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() {\n      @Override\n      public PsiFile[] compute() {\n        return baseDirectory.getFiles();\n      }\n    });\n    for (final PsiFile psiFile : psiFiles) {\n      if (baseName.equals(bundleBaseNameManager.getBaseName(psiFile))) {\n        final PropertiesFile propertiesFile = getPropertiesFile(psiFile);\n        if (propertiesFile != null) {\n          if (defaultPropertiesFile == null) {\n            defaultPropertiesFile = propertiesFile;\n          } else {\n            final int nameDiff = FileUtil.getNameWithoutExtension(defaultPropertiesFile.getName()).compareTo(FileUtil.getNameWithoutExtension(propertiesFile.getName()));\n            if (nameDiff > 0) {\n              defaultPropertiesFile = propertiesFile;\n            } else if (nameDiff == 0) {\n              //means 2 default properties files\n              return null;\n            }\n          }\n        }\n      }\n    }\n    if (defaultPropertiesFile == null) {\n      return null;\n    }\n    return new ResourceBundleImpl(defaultPropertiesFile);\n  }","commit_id":"401a5cf5408bccf4729e849462157f99da94de48","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public List<PropertiesFile> getPropertiesFiles() {\n    if (ResourceBundleManager.getInstance(getProject()).isDefaultDissociated(myDefaultPropertiesFile.getVirtualFile())) {\n      return Collections.singletonList(myDefaultPropertiesFile);\n    }\n    PsiFile[] children = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() {\n      @Override\n      public PsiFile[] compute() {\n        return myDefaultPropertiesFile.getParent().getFiles();\n      }\n    });\n    final String baseName = getBaseName();\n    List<PropertiesFile> result = new SmartList<PropertiesFile>();\n    for (PsiFile file : children) {\n      if (!file.isValid() || file.getVirtualFile().getExtension() == null) continue;\n      if (Comparing.strEqual(PropertiesUtil.getDefaultBaseName(file.getVirtualFile()), baseName)) {\n        PropertiesFile propertiesFile = PropertiesImplUtil.getPropertiesFile(file);\n        if (propertiesFile != null) {\n          result.add(propertiesFile);\n        }\n      }\n    }\n    return result;\n  }","id":68877,"modified_method":"@NotNull\n  @Override\n  public List<PropertiesFile> getPropertiesFiles() {\n    if (ResourceBundleManager.getInstance(getProject()).isDefaultDissociated(myDefaultPropertiesFile.getVirtualFile())) {\n      return Collections.singletonList(myDefaultPropertiesFile);\n    }\n    PsiFile[] children = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() {\n      @Override\n      public PsiFile[] compute() {\n        return myDefaultPropertiesFile.getParent().getFiles();\n      }\n    });\n    final String baseName = getBaseName();\n    List<PropertiesFile> result = new SmartList<PropertiesFile>();\n    final String defaultNameWithoutExtension = FileUtil.getNameWithoutExtension(myDefaultPropertiesFile.getName());\n    for (PsiFile file : children) {\n      if (!file.isValid() || file.getVirtualFile().getExtension() == null) continue;\n      if (Comparing.strEqual(PropertiesUtil.getDefaultBaseName(file.getVirtualFile()), baseName)) {\n        PropertiesFile propertiesFile = PropertiesImplUtil.getPropertiesFile(file);\n        if (propertiesFile != null) {\n          result.add(propertiesFile);\n          if (propertiesFile != myDefaultPropertiesFile && FileUtil.getNameWithoutExtension(propertiesFile.getName()).compareTo(defaultNameWithoutExtension) == 0) {\n            //means 2 default properties files\n            return Collections.singletonList(myDefaultPropertiesFile);\n          }\n        }\n      }\n    }\n    return result;\n  }","commit_id":"401a5cf5408bccf4729e849462157f99da94de48","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getConfirmSelectStructureMessage(Locale locale) {\n\t\tResourceBundle resourceBundle = getResourceBundle(locale);\n\n\t\tString key =\n\t\t\t\"selecting-a-new-structure-changes-the-available-input-fields-\" +\n\t\t\t\t\"and-available-templates\";\n\n\t\treturn LanguageUtil.get(resourceBundle, key);\n\t}","id":68878,"modified_method":"public String getConfirmSelectStructureMessage(Locale locale) {\n\t\treturn LanguageUtil.get(\n\t\t\tgetResourceBundle(locale),\n\t\t\t\"selecting-a-new-structure-changes-the-available-input-fields-\" +\n\t\t\t\t\"and-available-templates\");\n\t}","commit_id":"b1ac03465cbee024c1f0121daf91e8583d70e0c0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String getConfirmSelectTemplateMessage(Locale locale) {\n\t\tResourceBundle resourceBundle = getResourceBundle(locale);\n\n\t\treturn LanguageUtil.get(\n\t\t\tresourceBundle,\n\t\t\t\"selecting-a-new-template-deletes-all-unsaved-content\");\n\t}","id":68879,"modified_method":"public String getConfirmSelectTemplateMessage(Locale locale) {\n\t\treturn LanguageUtil.get(\n\t\t\tgetResourceBundle(locale),\n\t\t\t\"selecting-a-new-template-deletes-all-unsaved-content\");\n\t}","commit_id":"b1ac03465cbee024c1f0121daf91e8583d70e0c0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic String get(\n\t\tResourceBundle resourceBundle, String key, String defaultValue) {\n\n\t\ttry {\n\t\t\treturn _get(\n\t\t\t\tnull, null, resourceBundle, resourceBundle.getLocale(), key,\n\t\t\t\tdefaultValue);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(e, e);\n\t\t\t}\n\n\t\t\treturn defaultValue;\n\t\t}\n\t}","id":68880,"modified_method":"@Override\n\tpublic String get(\n\t\tResourceBundle resourceBundle, String key, String defaultValue) {\n\n\t\ttry {\n\t\t\treturn _get(resourceBundle, key, defaultValue);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(e, e);\n\t\t\t}\n\n\t\t\treturn defaultValue;\n\t\t}\n\t}","commit_id":"c6d99ddd785b5cd4701fa68371c6b5acb1829305","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private ResourceBundle _getResourceBundleFromConfiguratingPortlet(PageContext pageContext, Locale locale) throws SystemException {\n\t\tHttpServletRequest request =\n\t\t\t(HttpServletRequest)pageContext.getRequest();\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\trequest, \"portletResource\");\n\n\t\tlong companyId = PortalUtil.getCompanyId(request);\n\n\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(\n\t\t\tcompanyId, portletResource);\n\n\t\tPortletConfig portletConfig = PortletConfigFactoryUtil.create(\n\t\t\tportlet, pageContext.getServletContext());\n\n\t\tResourceBundle resourceBundle = portletConfig.getResourceBundle(locale);\n\n\t\treturn ResourceBundleUtil.getString(resourceBundle, key);\n\t}","id":68881,"modified_method":"private ResourceBundle _getResourceBundleFromConfiguratingPortlet(PageContext pageContext, Locale locale) throws SystemException {\n\t\tHttpServletRequest request =\n\t\t\t(HttpServletRequest)pageContext.getRequest();\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\trequest, \"portletResource\");\n\n\t\tlong companyId = PortalUtil.getCompanyId(request);\n\n\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(\n\t\t\tcompanyId, portletResource);\n\n\t\tPortletConfig portletConfig = PortletConfigFactoryUtil.create(\n\t\t\tportlet, pageContext.getServletContext());\n\n\t\treturn portletConfig.getResourceBundle(locale);\n\t}","commit_id":"c6d99ddd785b5cd4701fa68371c6b5acb1829305","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic String get(\n\t\tPageContext pageContext, String key, String defaultValue) {\n\n\t\ttry {\n\t\t\treturn _get(pageContext, null, null, null, key, defaultValue);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(e, e);\n\t\t\t}\n\n\t\t\treturn defaultValue;\n\t\t}\n\t}","id":68882,"modified_method":"@Override\n\tpublic String get(\n\t\tPageContext pageContext, String key, String defaultValue) {\n\n\t\ttry {\n\t\t\tResourceBundle resourceBundle = _getResourceBundleFromPageContext(\n\t\t\t\tpageContext);\n\n\t\t\treturn _get(resourceBundle, key, defaultValue);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(e, e);\n\t\t\t}\n\n\t\t\treturn defaultValue;\n\t\t}\n\t}","commit_id":"c6d99ddd785b5cd4701fa68371c6b5acb1829305","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private String _get(\n\t\t\tPageContext pageContext, PortletConfig portletConfig,\n\t\t\tResourceBundle resourceBundle, Locale locale, String key,\n\t\t\tString defaultValue)\n\t\tthrows Exception {\n\n\t\tif (PropsValues.TRANSLATIONS_DISABLED) {\n\t\t\treturn key;\n\t\t}\n\n\t\tif (key == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString value = null;\n\n\t\tif (resourceBundle != null) {\n\t\t\tvalue = ResourceBundleUtil.getString(resourceBundle, key);\n\n\t\t\tif (value != null) {\n\t\t\t\tvalue = LanguageResources.fixValue(value);\n\t\t\t}\n\t\t}\n\n\t\tif ((value == null) || value.equals(defaultValue)) {\n\t\t\tvalue = LanguageResources.getMessage(locale, key);\n\t\t}\n\n\t\tif ((value == null) || value.equals(defaultValue)) {\n\t\t\tif ((key.length() > 0) &&\n\t\t\t\t(key.charAt(key.length() - 1) == CharPool.CLOSE_BRACKET)) {\n\n\t\t\t\tint pos = key.lastIndexOf(CharPool.OPEN_BRACKET);\n\n\t\t\t\tif (pos != -1) {\n\t\t\t\t\tkey = key.substring(0, pos);\n\n\t\t\t\t\treturn _get(\n\t\t\t\t\t\tpageContext, portletConfig, resourceBundle, locale, key,\n\t\t\t\t\t\tdefaultValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((value == null) || value.equals(key)) {\n\t\t\tvalue = defaultValue;\n\t\t}\n\n\t\treturn value;\n\t}","id":68883,"modified_method":"private String _get(\n\t\tResourceBundle resourceBundle, String key, String defaultValue)\n\n\t\tthrows Exception {\n\n\t\tLocale locale = resourceBundle.getLocale();\n\n\t\tif (PropsValues.TRANSLATIONS_DISABLED) {\n\t\t\treturn key;\n\t\t}\n\n\t\tif (key == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString value = null;\n\n\t\tif (resourceBundle != null) {\n\t\t\tvalue = ResourceBundleUtil.getString(resourceBundle, key);\n\n\t\t\tif (value != null) {\n\t\t\t\tvalue = LanguageResources.fixValue(value);\n\t\t\t}\n\t\t}\n\n\t\tif ((value == null) || value.equals(defaultValue)) {\n\t\t\tvalue = LanguageResources.getMessage(locale, key);\n\t\t}\n\n\t\tif ((value == null) || value.equals(defaultValue)) {\n\t\t\tif ((key.length() > 0) &&\n\t\t\t\t(key.charAt(key.length() - 1) == CharPool.CLOSE_BRACKET)) {\n\n\t\t\t\tint pos = key.lastIndexOf(CharPool.OPEN_BRACKET);\n\n\t\t\t\tif (pos != -1) {\n\t\t\t\t\tkey = key.substring(0, pos);\n\n\t\t\t\t\treturn _get(resourceBundle, key, defaultValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((value == null) || value.equals(key)) {\n\t\t\tvalue = defaultValue;\n\t\t}\n\n\t\treturn value;\n\t}","commit_id":"c6d99ddd785b5cd4701fa68371c6b5acb1829305","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Nullable\n  public static ResourceBundle getResourceBundle(@NotNull final PropertiesFile representative) {\n    final PsiFile containingFile = representative.getContainingFile();\n    if (!containingFile.isValid()) {\n      return EmptyResourceBundle.getInstance();\n    }\n    final ResourceBundleManager manager = ResourceBundleManager.getInstance(representative.getProject());\n    final CustomResourceBundle customResourceBundle =\n      manager.getCustomResourceBundle(representative);\n    if (customResourceBundle != null) {\n      return customResourceBundle;\n    }\n\n    final VirtualFile virtualFile = representative.getVirtualFile();\n    if (virtualFile == null) {\n      return EmptyResourceBundle.getInstance();\n    }\n    if (manager.isDefaultDissociated(virtualFile)) {\n      return new ResourceBundleImpl(representative);\n    }\n\n\n    final String baseName = manager.getBaseName(containingFile);\n    final PsiDirectory directory = ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory>() {\n      @Nullable\n      public PsiDirectory compute() {\n        return containingFile.getContainingDirectory();\n      }});\n    if (directory == null) return EmptyResourceBundle.getInstance();\n    final ResourceBundle bundle = getResourceBundle(baseName, directory);\n    return bundle == null ? new ResourceBundleImpl(representative) : bundle;\n  }","id":68884,"modified_method":"@NotNull\n  public static ResourceBundle getResourceBundle(@NotNull final PropertiesFile representative) {\n    return getResourceBundleWithCachedFiles(representative).getBundle();\n  }","commit_id":"11cc6af01d1f0127de039e8dd8911987f25ee0ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static ResourceBundle getResourceBundle(@NotNull final String baseName, @NotNull final PsiDirectory baseDirectory) {\n    PropertiesFile defaultPropertiesFile = null;\n    final ResourceBundleManager bundleBaseNameManager = ResourceBundleManager.getInstance(baseDirectory.getProject());\n    final PsiFile[] psiFiles = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() {\n      @Override\n      public PsiFile[] compute() {\n        return baseDirectory.getFiles();\n      }\n    });\n    for (final PsiFile psiFile : psiFiles) {\n      final PropertiesFile propertiesFile = getPropertiesFile(psiFile);\n      if (propertiesFile == null) {\n        continue;\n      }\n      if (baseName.equals(bundleBaseNameManager.getBaseName(psiFile))) {\n        if (defaultPropertiesFile == null) {\n          defaultPropertiesFile = propertiesFile;\n        } else {\n          final int nameDiff = defaultPropertiesFile.getName().compareTo(propertiesFile.getName());\n          if (nameDiff > 0) {\n            defaultPropertiesFile = propertiesFile;\n          } else if (nameDiff == 0) {\n            return null;\n          }\n        }\n      }\n    }\n    if (defaultPropertiesFile == null) {\n      return null;\n    }\n    return new ResourceBundleImpl(defaultPropertiesFile);\n  }","id":68885,"modified_method":"@Nullable\n  private static ResourceBundleWithCachedFiles getResourceBundle(@NotNull final String baseName,\n                                                                 @NotNull final PsiDirectory baseDirectory) {\n    PropertiesFile defaultPropertiesFile = null;\n    final ResourceBundleManager bundleBaseNameManager = ResourceBundleManager.getInstance(baseDirectory.getProject());\n    final PsiFile[] psiFiles = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() {\n      @Override\n      public PsiFile[] compute() {\n        return baseDirectory.getFiles();\n      }\n    });\n    final List<PropertiesFile> bundleFiles = new ArrayList<PropertiesFile>(1);\n    for (final PsiFile psiFile : psiFiles) {\n      final PropertiesFile propertiesFile = getPropertiesFile(psiFile);\n      if (propertiesFile == null) {\n        continue;\n      }\n      if (baseName.equals(bundleBaseNameManager.getBaseName(psiFile))) {\n        if (defaultPropertiesFile == null) {\n          defaultPropertiesFile = propertiesFile;\n        } else {\n          final int nameDiff = defaultPropertiesFile.getName().compareTo(propertiesFile.getName());\n          if (nameDiff > 0) {\n            defaultPropertiesFile = propertiesFile;\n          } else if (nameDiff == 0) {\n            return null;\n          }\n        }\n        bundleFiles.add(propertiesFile);\n      }\n    }\n    if (defaultPropertiesFile == null) {\n      return null;\n    }\n    return new ResourceBundleWithCachedFiles(new ResourceBundleImpl(defaultPropertiesFile), bundleFiles);\n  }","commit_id":"11cc6af01d1f0127de039e8dd8911987f25ee0ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static ResourceBundle createByUrl(final @NotNull String url, final @NotNull Project project) {\n    final int idx = url.lastIndexOf('/');\n    if (idx == -1) return null;\n    final String baseDirectoryName = url.substring(0, idx);\n    final String baseName = url.substring(idx + 1);\n    final VirtualFile baseDirectoryVirtualFile = VirtualFileManager.getInstance().findFileByUrl(baseDirectoryName);\n    if (baseDirectoryVirtualFile == null) {\n      return null;\n    }\n    final PsiDirectory baseDirectory = PsiManager.getInstance(project).findDirectory(baseDirectoryVirtualFile);\n    if (baseDirectory == null) {\n      return null;\n    }\n    return getResourceBundle(baseName, baseDirectory);\n  }","id":68886,"modified_method":"@Nullable\n  public static ResourceBundle createByUrl(final @NotNull String url, final @NotNull Project project) {\n    final int idx = url.lastIndexOf('/');\n    if (idx == -1) return null;\n    final String baseDirectoryName = url.substring(0, idx);\n    final String baseName = url.substring(idx + 1);\n    final VirtualFile baseDirectoryVirtualFile = VirtualFileManager.getInstance().findFileByUrl(baseDirectoryName);\n    if (baseDirectoryVirtualFile == null) {\n      return null;\n    }\n    final PsiDirectory baseDirectory = PsiManager.getInstance(project).findDirectory(baseDirectoryVirtualFile);\n    if (baseDirectory == null) {\n      return null;\n    }\n    final ResourceBundleWithCachedFiles rb = getResourceBundle(baseName, baseDirectory);\n    return rb == null ? null : rb.getBundle();\n  }","commit_id":"11cc6af01d1f0127de039e8dd8911987f25ee0ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public Collection<AbstractTreeNode> modify(@NotNull AbstractTreeNode parent, @NotNull final Collection<AbstractTreeNode> children, final ViewSettings settings) {\n    if (parent instanceof ResourceBundleNode) return children;\n\n    return ApplicationManager.getApplication().runReadAction(new Computable<Collection<AbstractTreeNode>>() {\n      @Override\n      public Collection<AbstractTreeNode> compute() {\n        Map<ResourceBundle,Collection<PropertiesFile>> childBundles = new THashMap<ResourceBundle, Collection<PropertiesFile>>();\n        for (AbstractTreeNode child : children) {\n          Object f = child.getValue();\n          if (f instanceof PsiFile) {\n            PropertiesFile propertiesFile = PropertiesImplUtil.getPropertiesFile((PsiFile)f);\n            if (propertiesFile != null) {\n              ResourceBundle bundle = propertiesFile.getResourceBundle();\n              Collection<PropertiesFile> files = childBundles.get(bundle);\n              if (files == null) {\n                files = new SmartList<PropertiesFile>();\n                childBundles.put(bundle, files);\n              }\n              files.add(propertiesFile);\n            }\n          }\n        }\n\n        List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>();\n        for (Map.Entry<ResourceBundle, Collection<PropertiesFile>> entry : childBundles.entrySet()) {\n          ResourceBundle resourceBundle = entry.getKey();\n          Collection<PropertiesFile> files = entry.getValue();\n          if (files.size() != 1) {\n            result.add(new ResourceBundleNode(myProject, resourceBundle, settings));\n          }\n        }\n        for (AbstractTreeNode child : children) {\n          Object f = child.getValue();\n          if (f instanceof PsiFile) {\n            PropertiesFile propertiesFile = PropertiesImplUtil.getPropertiesFile((PsiFile)f);\n            if (propertiesFile != null) {\n              ResourceBundle bundle = propertiesFile.getResourceBundle();\n              if (childBundles.get(bundle).size() != 1) {\n                continue;\n              } else if (bundle instanceof CustomResourceBundle) {\n                final CustomResourceBundlePropertiesFileNode node =\n                  new CustomResourceBundlePropertiesFileNode(myProject, (PsiFile)f, settings);\n                result.add(node);\n              }\n            }\n          }\n          result.add(child);\n        }\n\n        return result;\n      }\n    });\n  }","id":68887,"modified_method":"@NotNull\n  public Collection<AbstractTreeNode> modify(@NotNull AbstractTreeNode parent, @NotNull final Collection<AbstractTreeNode> children, final ViewSettings settings) {\n    if (parent instanceof ResourceBundleNode) return children;\n\n    return ApplicationManager.getApplication().runReadAction(new Computable<Collection<AbstractTreeNode>>() {\n      @Override\n      public Collection<AbstractTreeNode> compute() {\n        Map<ResourceBundle,Collection<PropertiesFile>> childBundles = new THashMap<ResourceBundle, Collection<PropertiesFile>>();\n        for (AbstractTreeNode child : children) {\n          Object f = child.getValue();\n          if (f instanceof PsiFile) {\n            PropertiesFile propertiesFile = PropertiesImplUtil.getPropertiesFile((PsiFile)f);\n            if (propertiesFile != null) {\n              boolean isProcessed = false;\n              for (Collection<PropertiesFile> files : childBundles.values()) {\n                if (files.contains(propertiesFile)) {\n                  isProcessed = true;\n                  break;\n                }\n              }\n              if (isProcessed) continue;\n              PropertiesImplUtil.ResourceBundleWithCachedFiles resourceBundleWithCachedFiles =\n                PropertiesImplUtil.getResourceBundleWithCachedFiles(propertiesFile);\n              final ResourceBundle bundle = resourceBundleWithCachedFiles.getBundle();\n              Collection<PropertiesFile> files = childBundles.get(bundle);\n              if (files == null) {\n                files = new LinkedHashSet<PropertiesFile>();\n                childBundles.put(bundle, files);\n              }\n              files.add(propertiesFile);\n              files.addAll(resourceBundleWithCachedFiles.getFiles());\n            }\n          }\n        }\n\n        List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>();\n        for (Map.Entry<ResourceBundle, Collection<PropertiesFile>> entry : childBundles.entrySet()) {\n          ResourceBundle resourceBundle = entry.getKey();\n          Collection<PropertiesFile> files = entry.getValue();\n          if (files.size() != 1) {\n            result.add(new ResourceBundleNode(myProject, resourceBundle, settings));\n          }\n        }\n\n        for (AbstractTreeNode child : children) {\n          Object f = child.getValue();\n          if (f instanceof PsiFile) {\n            PropertiesFile propertiesFile = PropertiesImplUtil.getPropertiesFile((PsiFile)f);\n            if (propertiesFile != null) {\n              ResourceBundle bundle = null;\n              for (Map.Entry<ResourceBundle, Collection<PropertiesFile>> e : childBundles.entrySet()) {\n                if (e.getValue().contains(propertiesFile)) {\n                  bundle = e.getKey();\n                  break;\n                }\n              }\n              LOG.assertTrue(bundle != null);\n              if (childBundles.get(bundle).size() != 1) {\n                continue;\n              }\n              else if (bundle instanceof CustomResourceBundle) {\n                final CustomResourceBundlePropertiesFileNode node =\n                  new CustomResourceBundlePropertiesFileNode(myProject, (PsiFile)f, settings);\n                result.add(node);\n              }\n            }\n          }\n          result.add(child);\n        }\n\n        return result;\n      }\n    });\n  }","commit_id":"11cc6af01d1f0127de039e8dd8911987f25ee0ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ResourceBundle _getResourceBundleFromPageContext(\n\t\tPageContext pageContext) {\n\n\t\tif (pageContext == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tLocale locale = null;\n\n\t\tHttpServletRequest request =\n\t\t\t(HttpServletRequest)pageContext.getRequest();\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tif (themeDisplay != null) {\n\t\t\tlocale = themeDisplay.getLocale();\n\t\t}\n\t\telse {\n\t\t\tlocale = request.getLocale();\n\n\t\t\tif (!isAvailableLocale(locale)) {\n\t\t\t\tlocale = LocaleUtil.getDefault();\n\t\t\t}\n\t\t}\n\n\t\tPortletConfig configPortletConfig = (PortletConfig)request.getAttribute(\n\t\t\tJavaConstants.JAVAX_PORTLET_CONFIG);\n\n\t\tif (configPortletConfig != null) {\n\t\t\tResourceBundle configResourceBundle =\n\t\t\t\tconfigPortletConfig.getResourceBundle(locale);\n\n\t\t\treturn configResourceBundle;\n\t\t}\n\n\t\treturn null;\n\t}","id":68888,"modified_method":"private ResourceBundle _getResourceBundleFromPageContext(\n\t\tPageContext pageContext) {\n\n\t\tif (pageContext == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tLocale locale = null;\n\n\t\tHttpServletRequest request =\n\t\t\t(HttpServletRequest)pageContext.getRequest();\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tif (themeDisplay != null) {\n\t\t\tlocale = themeDisplay.getLocale();\n\t\t}\n\t\telse {\n\t\t\tlocale = request.getLocale();\n\n\t\t\tif (!isAvailableLocale(locale)) {\n\t\t\t\tlocale = LocaleUtil.getDefault();\n\t\t\t}\n\t\t}\n\n\t\tPortletConfig configPortletConfig = (PortletConfig)request.getAttribute(\n\t\t\tJavaConstants.JAVAX_PORTLET_CONFIG);\n\n\t\tif (configPortletConfig != null) {\n\t\t\treturn configPortletConfig.getResourceBundle(locale);\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"2c6c27b2c398f2108f34c850452dcda93e3cff35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private ResourceBundle getBundle() {\n    return getResourceBundle(myPathToBundle, getClass().getClassLoader());\n  }","id":68889,"modified_method":"private ResourceBundle getBundle() {\n    ResourceBundle bundle = null;\n    if (myBundle != null) bundle = myBundle.get();\n    if (bundle == null) {\n      bundle = getResourceBundle(myPathToBundle, getClass().getClassLoader());\n      myBundle = new SoftReference<ResourceBundle>(bundle);\n    }\n    return bundle;\n  }","commit_id":"904dc6fa98354446d1c5f41f0372b6e28a3aa744","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings(\"unchecked\")\n  @NotNull\n  @Override\n  public <Psi extends PsiElement> List<Psi> getAugments(@NotNull PsiElement element, @NotNull Class<Psi> type) {\n    if ((type != PsiClass.class && type != PsiField.class) ||\n        !(element instanceof PsiExtensibleClass) ||\n        DumbService.isDumb(element.getProject())) {\n      return Collections.emptyList();\n    }\n    final PsiExtensibleClass aClass = (PsiExtensibleClass)element;\n    final String className = aClass.getName();\n\n    final AndroidFacet facet = AndroidFacet.getInstance(element);\n    if (facet == null) {\n      return Collections.emptyList();\n    }\n\n    final PsiFile containingFile = element.getContainingFile();\n    if (containingFile == null) {\n      return Collections.emptyList();\n    }\n\n    if (type == PsiClass.class) {\n      if (AndroidUtils.R_CLASS_NAME.equals(className) &&\n          AndroidResourceUtil.isRJavaFile(facet, containingFile)) {\n        final Set<String> existingInnerClasses = getOwnInnerClasses(aClass);\n        final Set<String> types = ResourceReferenceConverter.getResourceTypesInCurrentModule(facet);\n        final List<Psi> result = new ArrayList<Psi>();\n\n        for (String resType : types) {\n          if (!existingInnerClasses.contains(resType)) {\n            final AndroidLightClass resClass = new ResourceTypeClass(facet, resType, aClass);\n            result.add((Psi)resClass);\n          }\n        }\n        return result;\n      }\n      else if (AndroidUtils.MANIFEST_CLASS_NAME.equals(className) &&\n               AndroidResourceUtil.isManifestJavaFile(facet, containingFile)) {\n        return Arrays.asList((Psi)new PermissionClass(facet, aClass),\n                             (Psi)new PermissionGroupClass(facet, aClass));\n      }\n    }\n    else if (type == PsiField.class && !(aClass instanceof AndroidLightClass)) {\n      // extend existing inner classes, not provided by this augment (ex. they can be generated by maven)\n      final PsiClass parentClass = aClass.getContainingClass();\n\n      if (parentClass != null &&\n          AndroidUtils.R_CLASS_NAME.equals(parentClass.getName()) &&\n          AndroidResourceUtil.isRJavaFile(facet, containingFile)) {\n        final String resClassName = aClass.getName();\n\n        if (resClassName != null && ResourceType.getEnum(resClassName) != null) {\n          final Set<String> existingFields = getOwnFields(aClass);\n          final PsiField[] newFields = ResourceTypeClass.buildResourceFields(facet, resClassName, aClass);\n          final List<Psi> result = new ArrayList<Psi>();\n\n          for (PsiField field : newFields) {\n            if (!existingFields.contains(field.getName())) {\n              result.add((Psi)field);\n            }\n          }\n          return result;\n        }\n      }\n    }\n    return Collections.emptyList();\n  }","id":68890,"modified_method":"@SuppressWarnings(\"unchecked\")\n  @NotNull\n  @Override\n  public <Psi extends PsiElement> List<Psi> getAugments(@NotNull PsiElement element, @NotNull Class<Psi> type) {\n    if ((type != PsiClass.class && type != PsiField.class) ||\n        !(element instanceof PsiExtensibleClass)) {\n      return Collections.emptyList();\n    }\n    final PsiExtensibleClass aClass = (PsiExtensibleClass)element;\n    final String className = aClass.getName();\n    final boolean rClassAugment = AndroidUtils.R_CLASS_NAME.equals(className)\n                                  && type == PsiClass.class;\n\n    if (DumbService.isDumb(element.getProject())) {\n      if (rClassAugment) {\n        LOG.info(\"R_CLASS_AUGMENT: empty because of dumb mode\");\n      }\n      return Collections.emptyList();\n    }\n\n    final AndroidFacet facet = AndroidFacet.getInstance(element);\n    if (facet == null) {\n      if (rClassAugment) {\n        LOG.info(\"R_CLASS_AUGMENT: empty because no facet\");\n      }\n      return Collections.emptyList();\n    }\n\n    final PsiFile containingFile = element.getContainingFile();\n    if (containingFile == null) {\n      if (rClassAugment) {\n        LOG.info(\"R_CLASS_AUGMENT: empty because of no containing file\");\n      }\n      return Collections.emptyList();\n    }\n\n    if (type == PsiClass.class) {\n      if (AndroidUtils.R_CLASS_NAME.equals(className) &&\n          AndroidResourceUtil.isRJavaFile(facet, containingFile)) {\n        final Set<String> existingInnerClasses = getOwnInnerClasses(aClass);\n        final Set<String> types = ResourceReferenceConverter.getResourceTypesInCurrentModule(facet);\n        final List<Psi> result = new ArrayList<Psi>();\n\n        for (String resType : types) {\n          if (!existingInnerClasses.contains(resType)) {\n            final AndroidLightClass resClass = new ResourceTypeClass(facet, resType, aClass);\n            result.add((Psi)resClass);\n          }\n        }\n        if (rClassAugment) {\n          LOG.info(\"R_CLASS_AUGMENT: \" + result.size() + \" classes added\");\n        }\n        return result;\n      }\n      else if (AndroidUtils.MANIFEST_CLASS_NAME.equals(className) &&\n               AndroidResourceUtil.isManifestJavaFile(facet, containingFile)) {\n        return Arrays.asList((Psi)new PermissionClass(facet, aClass),\n                             (Psi)new PermissionGroupClass(facet, aClass));\n      }\n\n      if (rClassAugment) {\n        LOG.info(\"R_CLASS_AUGMENT: empty because containing file is not actual R.java file\");\n      }\n    }\n    else if (type == PsiField.class && !(aClass instanceof AndroidLightClass)) {\n      // extend existing inner classes, not provided by this augment (ex. they can be generated by maven)\n      final PsiClass parentClass = aClass.getContainingClass();\n\n      if (parentClass != null &&\n          AndroidUtils.R_CLASS_NAME.equals(parentClass.getName()) &&\n          AndroidResourceUtil.isRJavaFile(facet, containingFile)) {\n        final String resClassName = aClass.getName();\n\n        if (resClassName != null && ResourceType.getEnum(resClassName) != null) {\n          final Set<String> existingFields = getOwnFields(aClass);\n          final PsiField[] newFields = ResourceTypeClass.buildResourceFields(facet, resClassName, aClass);\n          final List<Psi> result = new ArrayList<Psi>();\n\n          for (PsiField field : newFields) {\n            if (!existingFields.contains(field.getName())) {\n              result.add((Psi)field);\n            }\n          }\n          return result;\n        }\n      }\n    }\n    return Collections.emptyList();\n  }","commit_id":"71aa97f70cfd5c1b847c5e31cc76eb788cac231d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean hasAngularJS(Project project) {\n    return !DumbService.isDumb(project) && resolve(project, AngularDirectivesIndex.INDEX_ID, \"ng-model\") != null;\n  }","id":68891,"modified_method":"public static boolean hasAngularJS(final Project project) {\n    if (DumbService.isDumb(project)) return false;\n    return CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Boolean>() {\n      @Nullable\n      @Override\n      public Result<Boolean> compute() {\n        final boolean hasNgModel = resolve(project, AngularDirectivesIndex.INDEX_ID, \"ng-model\") != null;\n        return Result.create(hasNgModel, PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);\n      }\n    });\n  }","commit_id":"4a9812007c849f67a3991b3a424f3bccf148f939","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@NotNull\n  private PsiClass[] getCachedClassesByName(String name) {\n    SoftReference<Map<String, PsiClass[]>> ref = myClassCache;\n    Map<String, PsiClass[]> map = SoftReference.dereference(ref);\n    if (map == null) {\n      myClassCache = new SoftReference<Map<String, PsiClass[]>>(map = new ConcurrentSoftValueHashMap<String, PsiClass[]>());\n    }\n    PsiClass[] classes = map.get(name);\n    if (classes != null) {\n      return classes;\n    }\n    \n    GlobalSearchScope scope = new EverythingGlobalScope(getProject());\n\n    if (DumbService.getInstance(getProject()).isDumb()) {\n      if (ref == null) {\n        for (PsiClass psiClass : getClasses(scope)) {\n          String psiClassName = psiClass.getName();\n          if (psiClassName != null) {\n            PsiClass[] existing = map.get(psiClassName);\n            map.put(psiClassName, existing == null ? new PsiClass[]{psiClass} : ArrayUtil.append(existing, psiClass));\n          }\n        }\n      }\n      classes = map.get(name);\n      return classes == null ? PsiClass.EMPTY_ARRAY : classes;\n    }\n    \n    final String qName = getQualifiedName();\n    final String classQName = !qName.isEmpty() ? qName + \".\" + name : name;\n    map.put(name, classes = getFacade().findClasses(classQName, scope));\n    return classes;\n  }","id":68892,"modified_method":"@NotNull\n  private PsiClass[] getCachedClassesByName(String name) {\n    if (DumbService.getInstance(getProject()).isDumb()) {\n      return getCachedClassInDumbMode(name);\n    }\n\n    Map<String, PsiClass[]> map = SoftReference.dereference(myClassCache);\n    if (map == null) {\n      myClassCache = new SoftReference<Map<String, PsiClass[]>>(map = new ConcurrentSoftValueHashMap<String, PsiClass[]>());\n    }\n    PsiClass[] classes = map.get(name);\n    if (classes != null) {\n      return classes;\n    }\n\n    final String qName = getQualifiedName();\n    final String classQName = !qName.isEmpty() ? qName + \".\" + name : name;\n    map.put(name, classes = getFacade().findClasses(classQName, new EverythingGlobalScope(getProject())));\n    return classes;\n  }","commit_id":"8fba72950041d16a9676057b977fea772d370cd6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void syncOutputFiles(final CompileContext context, ModuleChunk chunk) throws ProjectBuildException {\n    final BuildDataManager dataManager = context.getProjectDescriptor().dataManager;\n    try {\n      final Collection<String> allOutputs = new LinkedList<String>();\n\n      FSOperations.processFilesToRecompile(context, chunk, new FileProcessor() {\n        private final Map<ModuleBuildTarget, SourceToOutputMapping> storageMap = new HashMap<ModuleBuildTarget, SourceToOutputMapping>();\n\n        @Override\n        public boolean apply(ModuleBuildTarget target, File file, String sourceRoot) throws IOException {\n          SourceToOutputMapping srcToOut = storageMap.get(target);\n          if (srcToOut == null) {\n            srcToOut = dataManager.getSourceToOutputMap(target);\n            storageMap.put(target, srcToOut);\n          }\n          final String srcPath = FileUtil.toSystemIndependentName(file.getPath());\n          final Collection<String> outputs = srcToOut.getState(srcPath);\n\n          if (outputs != null) {\n            final JavaBuilderLogger logger = context.getLoggingManager().getJavaBuilderLogger();\n            for (String output : outputs) {\n              if (logger.isEnabled()) {\n                allOutputs.add(output);\n              }\n              new File(output).delete();\n            }\n            if (!outputs.isEmpty()) {\n              context.processMessage(new FileDeletedEvent(outputs));\n            }\n            srcToOut.remove(srcPath);\n          }\n          return true;\n        }\n      });\n\n      final JavaBuilderLogger logger = context.getLoggingManager().getJavaBuilderLogger();\n      if (logger.isEnabled()) {\n        if (context.isMake() && allOutputs.size() > 0) {\n          logger.log(\"Cleaning output files:\");\n          final String[] buffer = new String[allOutputs.size()];\n          int i = 0;\n          for (String output : allOutputs) {\n            buffer[i++] = output;\n          }\n          Arrays.sort(buffer);\n          for (String output : buffer) {\n            logger.log(output);\n          }\n          logger.log(\"End of files\");\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new ProjectBuildException(e);\n    }\n  }","id":68893,"modified_method":"private static void syncOutputFiles(final CompileContext context, ModuleChunk chunk) throws ProjectBuildException {\n    final BuildDataManager dataManager = context.getProjectDescriptor().dataManager;\n    try {\n      final Collection<String> allOutputs = new LinkedList<String>();\n\n      FSOperations.processFilesToRecompile(context, chunk, new FileProcessor() {\n        private final Map<ModuleBuildTarget, SourceToOutputMapping> storageMap = new HashMap<ModuleBuildTarget, SourceToOutputMapping>();\n\n        @Override\n        public boolean apply(ModuleBuildTarget target, File file, String sourceRoot) throws IOException {\n          SourceToOutputMapping srcToOut = storageMap.get(target);\n          if (srcToOut == null) {\n            srcToOut = dataManager.getSourceToOutputMap(target);\n            storageMap.put(target, srcToOut);\n          }\n          final String srcPath = FileUtil.toSystemIndependentName(file.getPath());\n          final Collection<String> outputs = srcToOut.getState(srcPath);\n\n          if (outputs != null) {\n            final JavaBuilderLogger logger = context.getLoggingManager().getJavaBuilderLogger();\n            for (String output : outputs) {\n              if (logger.isEnabled()) {\n                allOutputs.add(output);\n              }\n              new File(output).delete();\n            }\n            if (!outputs.isEmpty()) {\n              context.processMessage(new FileDeletedEvent(outputs));\n            }\n            srcToOut.update(srcPath, Collections.<String>emptyList());\n          }\n          return true;\n        }\n      });\n\n      final JavaBuilderLogger logger = context.getLoggingManager().getJavaBuilderLogger();\n      if (logger.isEnabled()) {\n        if (context.isMake() && allOutputs.size() > 0) {\n          logger.log(\"Cleaning output files:\");\n          final String[] buffer = new String[allOutputs.size()];\n          int i = 0;\n          for (String output : allOutputs) {\n            buffer[i++] = output;\n          }\n          Arrays.sort(buffer);\n          for (String output : buffer) {\n            logger.log(output);\n          }\n          logger.log(\"End of files\");\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new ProjectBuildException(e);\n    }\n  }","commit_id":"6ec02f5a9d4babf1351035d3fbc2ddbd4a12d40f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public BuildResult doTest() {\n    if (new File(workDir, \".idea\").exists()) {\n      getOrCreateJdk();\n      loadProject(workDir.getAbsolutePath());\n    }\n    else {\n      addModule();\n    }\n\n    return doTestBuild();\n  }","id":68894,"modified_method":"public BuildResult doTest() {\n    setupInitialProject();\n\n    return doTestBuild(1);\n  }","commit_id":"6ec02f5a9d4babf1351035d3fbc2ddbd4a12d40f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected BuildResult doTestBuild() {\n    final TestJavaBuilderLogger\n      javaBuilderLogger = new TestJavaBuilderLogger(FileUtil.toSystemIndependentName(workDir.getAbsolutePath()) + \"/\");\n    final ProjectDescriptor\n      projectDescriptor = createProjectDescriptor(new BuildLoggingManager(new ArtifactBuilderLoggerImpl(), javaBuilderLogger));\n    try {\n      doBuild(projectDescriptor, createAllModulesScope(true), false, true, false).assertSuccessful();\n\n      modify();\n      if (Utils.TIMESTAMP_ACCURACY > 1) {\n        try {\n          Thread.sleep(Utils.TIMESTAMP_ACCURACY);\n        }\n        catch (InterruptedException ignored) {\n        }\n      }\n\n\n      BuildResult result = doBuild(projectDescriptor, createAllModulesScope(false), true, false, false);\n\n      final ByteArrayOutputStream makeDump = new ByteArrayOutputStream();\n\n      if (result.isSuccessful()) {\n        projectDescriptor.dataManager.getMappings().toStream(new PrintStream(makeDump));\n      }\n\n      makeDump.close();\n\n      File logFile = new File(baseDir.getAbsolutePath() + \".log\");\n      if (!logFile.exists()) {\n        logFile = new File(baseDir, \"build.log\");\n      }\n      final String expected = StringUtil.convertLineSeparators(FileUtil.loadFile(logFile));\n      final String actual = javaBuilderLogger.myLog.toString();\n\n      assertEquals(expected, actual);\n\n      if (result.isSuccessful()) {\n        doBuild(projectDescriptor, createAllModulesScope(true), false, true, false).assertSuccessful();\n\n        final ByteArrayOutputStream rebuildDump = new ByteArrayOutputStream();\n\n        projectDescriptor.dataManager.getMappings().toStream(new PrintStream(rebuildDump));\n\n        rebuildDump.close();\n\n        assertEquals(rebuildDump.toString(), makeDump.toString());\n      }\n      return result;\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      projectDescriptor.release();\n    }\n  }","id":68895,"modified_method":"protected BuildResult doTestBuild(int makesCount) {\n    final TestJavaBuilderLogger builderLogger = new TestJavaBuilderLogger(FileUtil.toSystemIndependentName(workDir.getAbsolutePath()) + \"/\");\n    final ProjectDescriptor pd = createProjectDescriptor(new BuildLoggingManager(new ArtifactBuilderLoggerImpl(), builderLogger));\n    try {\n      doBuild(pd, createAllModulesScope(true), false, true, false).assertSuccessful();\n\n      BuildResult result = null;\n\n      for (int idx = 0; idx < makesCount; idx++) {\n        modify(idx);\n        result = doBuild(pd, createAllModulesScope(false), true, false, false);\n      }\n\n      assertNotNull(result);\n      \n      final ByteArrayOutputStream makeDump = new ByteArrayOutputStream();\n\n      if (result.isSuccessful()) {\n        final PrintStream stream = new PrintStream(makeDump);\n        try {\n          pd.dataManager.getMappings().toStream(stream);\n        }\n        finally {\n          stream.close();\n        }\n      }\n\n      makeDump.close();\n\n      File logFile = new File(baseDir.getAbsolutePath() + \".log\");\n      if (!logFile.exists()) {\n        logFile = new File(baseDir, \"build.log\");\n      }\n      final String expected = StringUtil.convertLineSeparators(FileUtil.loadFile(logFile));\n      final String actual = builderLogger.myLog.toString();\n\n      assertEquals(expected, actual);\n\n      if (result.isSuccessful()) {\n        doBuild(pd, createAllModulesScope(true), false, true, false).assertSuccessful();\n  \n        final ByteArrayOutputStream rebuildDump = new ByteArrayOutputStream();\n\n        final PrintStream stream = new PrintStream(rebuildDump);\n        try {\n          pd.dataManager.getMappings().toStream(stream);\n        }\n        finally {\n          stream.close();\n        }\n\n        rebuildDump.close();\n  \n        assertEquals(rebuildDump.toString(), makeDump.toString());\n      }\n      return result;\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      pd.release();\n    }\n  }","commit_id":"6ec02f5a9d4babf1351035d3fbc2ddbd4a12d40f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void modify() {\n    FileUtil.processFilesRecursively(baseDir, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        if (file.getName().endsWith(\".remove\")) {\n          FileUtil.delete(getTargetFile(file, \".remove\"));\n        }\n        return true;\n      }\n    });\n    FileUtil.processFilesRecursively(baseDir, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        try {\n          if (file.getName().endsWith(\".new\")) {\n            FileUtil.copyContent(file, getTargetFile(file, \".new\"));\n          }\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return true;\n      }\n    });\n  }","id":68896,"modified_method":"private void modify(int stage) {\n    final String removedSuffix = stage == 0? \".remove\" : \".remove\" + stage;\n    final String newSuffix = stage == 0? \".new\" : \".new\" + stage;\n\n    FileUtil.processFilesRecursively(baseDir, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        if (file.getName().endsWith(removedSuffix)) {\n          FileUtil.delete(getTargetFile(file, removedSuffix));\n        }\n        return true;\n      }\n    });\n    FileUtil.processFilesRecursively(baseDir, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        try {\n          if (file.getName().endsWith(newSuffix)) {\n            FileUtil.copyContent(file, getTargetFile(file, newSuffix));\n          }\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return true;\n      }\n    });\n    if (Utils.TIMESTAMP_ACCURACY > 1) {\n      try {\n        Thread.sleep(Utils.TIMESTAMP_ACCURACY);\n      }\n      catch (InterruptedException ignored) {\n      }\n    }\n  }","commit_id":"6ec02f5a9d4babf1351035d3fbc2ddbd4a12d40f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testRecompileDependentTests() {\n    JpsModule module = addModule();\n    addTestRoot(module, \"testSrc\");\n    JpsLibrary library = addLibrary(\"lib/a.jar\");\n    JpsModuleRootModificationUtil.addDependency(module, library, JpsJavaDependencyScope.TEST, false);\n    doTestBuild().assertSuccessful();\n  }","id":68897,"modified_method":"public void testRecompileDependentTests() {\n    JpsModule module = addModule();\n    addTestRoot(module, \"testSrc\");\n    JpsLibrary library = addLibrary(\"lib/a.jar\");\n    JpsModuleRootModificationUtil.addDependency(module, library, JpsJavaDependencyScope.TEST, false);\n    doTestBuild(1).assertSuccessful();\n  }","commit_id":"6ec02f5a9d4babf1351035d3fbc2ddbd4a12d40f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testTransitiveRecompile() {\n    JpsModule module = addModule();\n    addTestRoot(module, \"testSrc\");\n    JpsModule util = addModule(\"util\", \"util/src\");\n    addTestRoot(util, \"util/testSrc\");\n    JpsModuleRootModificationUtil.addDependency(module, util);\n    JpsModule lib = addModule(\"lib\", \"lib/src\");\n    addTestRoot(lib, \"lib/testSrc\");\n    JpsModuleRootModificationUtil.addDependency(util, lib);\n    doTestBuild().assertSuccessful();\n  }","id":68898,"modified_method":"public void testTransitiveRecompile() {\n    JpsModule module = addModule();\n    addTestRoot(module, \"testSrc\");\n    JpsModule util = addModule(\"util\", \"util/src\");\n    addTestRoot(util, \"util/testSrc\");\n    JpsModuleRootModificationUtil.addDependency(module, util);\n    JpsModule lib = addModule(\"lib\", \"lib/src\");\n    addTestRoot(lib, \"lib/testSrc\");\n    JpsModuleRootModificationUtil.addDependency(util, lib);\n    doTestBuild(1).assertSuccessful();\n  }","commit_id":"6ec02f5a9d4babf1351035d3fbc2ddbd4a12d40f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void createXtendLinkingIssueResolutions(final Issue issue, final IssueResolutionAcceptor issueResolutionAcceptor) {\n\t\tfinal IModificationContext modificationContext = getModificationContextFactory().createModificationContext(issue);\n\t\tfinal String elementName = issue.getData()[0];\n\t\tmodificationContext.getXtextDocument().modify(new IUnitOfWork.Void<XtextResource>(){\n\n\t\t\t@SuppressWarnings(\"null\")\n\t\t\t@Override\n\t\t\tpublic void process(XtextResource state) throws Exception {\n\t\t\t\tEObject eObject = state.getEObject(issue.getUriToProblem().fragment());\n\t\t\t\tif(eObject instanceof XAbstractFeatureCall){\n\t\t\t\t\tXAbstractFeatureCall call = (XAbstractFeatureCall) eObject;\n\t\t\t\t\tEList<XExpression> explicitArguments = call.getExplicitArguments();\n\t\t\t\t\tStringBuilderBasedAppendable appendable = new StringBuilderBasedAppendable();\n\t\t\t\t\tgetTypeArgumentString(call, appendable);\n\t\t\t\t\tJvmTypeReference expectedType = typeProvider.getExpectedType(call);\n\t\t\t\t\tif(expectedType != null && expectedType.getType() != null)\n\t\t\t\t\t\tappendable.append(expectedType.getSimpleName()).append(\" \");\n\t\t\t\t\tappendable.append(elementName);\n\t\t\t\t\tcomputeArgumentString(call, false, appendable);\n\t\t\t\t\tboolean isExtension = false;\n\t\t\t\t\tif(call instanceof XMemberFeatureCall)\n\t\t\t\t\t\tisExtension = ((XMemberFeatureCall) call).getMemberCallTarget() != null;\n\t\t\t\t\tboolean isSetter = false;\n\t\t\t\t\tif(call instanceof XAssignment)\n\t\t\t\t\t\tisSetter = true;\n\t\t\t\t\tcreateNewXtendFunction(elementName, appendable.toString(), isExtension, isSetter,expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\tif (expectedType != null && expectedType.getType() != null && explicitArguments.size() == 0){\n\t\t\t\t\t\tcreateNewXtendField(elementName, expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\tcreateNewLocalVariable(elementName, expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}","id":68899,"modified_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void createXtendLinkingIssueResolutions(final Issue issue, final IssueResolutionAcceptor issueResolutionAcceptor) {\n\t\tfinal IModificationContext modificationContext = getModificationContextFactory().createModificationContext(issue);\n\t\tIXtextDocument xtextDocument = modificationContext.getXtextDocument();\n\t\tif(issue.getData() != null && xtextDocument != null){\n\t\t\tfinal String elementName = issue.getData()[0];\n\t\t\txtextDocument.modify(new IUnitOfWork.Void<XtextResource>(){\n\n\t\t\t\t@SuppressWarnings(\"null\")\n\t\t\t\t@Override\n\t\t\t\tpublic void process(XtextResource state) throws Exception {\n\t\t\t\t\tEObject eObject = state.getEObject(issue.getUriToProblem().fragment());\n\t\t\t\t\tif(eObject instanceof XAbstractFeatureCall){\n\t\t\t\t\t\tXAbstractFeatureCall call = (XAbstractFeatureCall) eObject;\n\t\t\t\t\t\tEList<XExpression> explicitArguments = call.getExplicitArguments();\n\t\t\t\t\t\tStringBuilderBasedAppendable appendable = new StringBuilderBasedAppendable();\n\t\t\t\t\t\tgetTypeArgumentString(call, appendable);\n\t\t\t\t\t\tJvmTypeReference expectedType = typeProvider.getExpectedType(call);\n\t\t\t\t\t\tif(expectedType != null && expectedType.getType() != null)\n\t\t\t\t\t\t\tappendable.append(expectedType.getSimpleName()).append(\" \");\n\t\t\t\t\t\tappendable.append(elementName);\n\t\t\t\t\t\tcomputeArgumentString(call, false, appendable);\n\t\t\t\t\t\tboolean isExtension = false;\n\t\t\t\t\t\tif(call instanceof XMemberFeatureCall)\n\t\t\t\t\t\t\tisExtension = ((XMemberFeatureCall) call).getMemberCallTarget() != null;\n\t\t\t\t\t\tboolean isSetter = false;\n\t\t\t\t\t\tif(call instanceof XAssignment)\n\t\t\t\t\t\t\tisSetter = true;\n\t\t\t\t\t\tcreateNewXtendFunction(elementName, appendable.toString(), isExtension, isSetter,expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\tif (expectedType != null && expectedType.getType() != null && explicitArguments.size() == 0){\n\t\t\t\t\t\t\tcreateNewXtendField(elementName, expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t\tcreateNewLocalVariable(elementName, expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}","commit_id":"ce3677eb23200bf59524c4d24fc98ec3b3354b1f","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void createXtendLinkingIssueResolutions(final Issue issue, final IssueResolutionAcceptor issueResolutionAcceptor) {\n\t\tfinal IModificationContext modificationContext = getModificationContextFactory().createModificationContext(issue);\n\t\tIXtextDocument xtextDocument = modificationContext.getXtextDocument();\n\t\tif(issue.getData() != null && xtextDocument != null){\n\t\t\tfinal String elementName = issue.getData()[0];\n\t\t\txtextDocument.modify(new IUnitOfWork.Void<XtextResource>(){\n\n\t\t\t\t@SuppressWarnings(\"null\")\n\t\t\t\t@Override\n\t\t\t\tpublic void process(XtextResource state) throws Exception {\n\t\t\t\t\tEObject eObject = state.getEObject(issue.getUriToProblem().fragment());\n\t\t\t\t\tif(eObject instanceof XAbstractFeatureCall){\n\t\t\t\t\t\tXAbstractFeatureCall call = (XAbstractFeatureCall) eObject;\n\t\t\t\t\t\tEList<XExpression> explicitArguments = call.getExplicitArguments();\n\t\t\t\t\t\tStringBuilderBasedAppendable appendable = new StringBuilderBasedAppendable(new ImportManager(true));\n\t\t\t\t\t\tgetTypeArgumentString(call, appendable);\n\t\t\t\t\t\tJvmTypeReference expectedType = typeProvider.getExpectedType(call);\n\t\t\t\t\t\tif(expectedType != null && expectedType.getType() != null)\n\t\t\t\t\t\t\tappendable.append(expectedType.getSimpleName()).append(\" \");\n\t\t\t\t\t\tappendable.append(elementName);\n\t\t\t\t\t\tcomputeArgumentString(call, false, appendable);\n\t\t\t\t\t\tboolean isExtension = false;\n\t\t\t\t\t\tif(call instanceof XMemberFeatureCall)\n\t\t\t\t\t\t\tisExtension = ((XMemberFeatureCall) call).getMemberCallTarget() != null;\n\t\t\t\t\t\tboolean isSetter = false;\n\t\t\t\t\t\tif(call instanceof XAssignment)\n\t\t\t\t\t\t\tisSetter = true;\n\t\t\t\t\t\tcreateNewXtendFunction(elementName, appendable.toString(), isExtension, isSetter,expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\tif (expectedType != null && expectedType.getType() != null && explicitArguments.size() == 0){\n\t\t\t\t\t\t\tcreateNewXtendField(elementName, expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t\tcreateNewLocalVariable(elementName, expectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}","id":68900,"modified_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void createXtendLinkingIssueResolutions(final Issue issue, final IssueResolutionAcceptor issueResolutionAcceptor) {\n\t\tfinal IModificationContext modificationContext = getModificationContextFactory().createModificationContext(issue);\n\t\tIXtextDocument xtextDocument = modificationContext.getXtextDocument();\n\t\tif(issue.getData() != null && xtextDocument != null){\n\t\t\tfinal String elementName = issue.getData()[0];\n\t\t\tif(elementName != null)\n\t\t\t\txtextDocument.modify(new IUnitOfWork.Void<XtextResource>(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(XtextResource state) throws Exception {\n\t\t\t\t\t\tEObject eObject = state.getEObject(issue.getUriToProblem().fragment());\n\t\t\t\t\t\tif(eObject instanceof XAbstractFeatureCall){\n\t\t\t\t\t\t\tXAbstractFeatureCall call = (XAbstractFeatureCall) eObject;\n\t\t\t\t\t\t\tEList<XExpression> explicitArguments = call.getExplicitArguments();\n\t\t\t\t\t\t\tStringBuilderBasedAppendable appendable = new StringBuilderBasedAppendable(new ImportManager(true));\n\t\t\t\t\t\t\tcomputeTypeArguments(call, call.getTypeArguments(), appendable);\n\t\t\t\t\t\t\t// ------ExpectedType computation\n\t\t\t\t\t\t\tJvmTypeReference expectedType = typeProvider.getExpectedType(call);\n\t\t\t\t\t\t\tUnboundTypeParameterSubstitutor substitutor = new UnboundTypeParameterSubstitutor(Collections.<JvmTypeParameter, JvmTypeReference>emptyMap(), computationServices);\n\t\t\t\t\t\t\tJvmTypeReference resolvedExpectedType= substitutor.substitute(expectedType);\n\t\t\t\t\t\t\tif(resolvedExpectedType != null && resolvedExpectedType.getType() != null){\n\t\t\t\t\t\t\t\ttypeRefSerializer.serialize(resolvedExpectedType, call, appendable);\n\t\t\t\t\t\t\t\tappendable.append(\" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// ------ END\n\t\t\t\t\t\t\tappendable.append(elementName);\n\t\t\t\t\t\t\tcomputeArgumentString(call, false, appendable);\n\t\t\t\t\t\t\tboolean isExtension = false;\n\t\t\t\t\t\t\tif(call instanceof XMemberFeatureCall)\n\t\t\t\t\t\t\t\tisExtension = ((XMemberFeatureCall) call).getMemberCallTarget() != null;\n\t\t\t\t\t\t\tboolean isSetter = false;\n\t\t\t\t\t\t\tif(call instanceof XAssignment)\n\t\t\t\t\t\t\t\tisSetter = true;\n\t\t\t\t\t\t\tcreateNewXtendFunction(elementName, appendable.toString(), isExtension, isSetter, resolvedExpectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t\tif (resolvedExpectedType != null && resolvedExpectedType.getType() != null && explicitArguments.size() == 0){\n\t\t\t\t\t\t\t\tICompositeNode callNode = NodeModelUtils.getNode(call);\n\t\t\t\t\t\t\t\tif(callNode != null && !callNode.getText().endsWith(\")\")){\n\t\t\t\t\t\t\t\t\tcreateNewXtendField(elementName, resolvedExpectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t\t\t\tcreateNewLocalVariable(elementName, resolvedExpectedType, issue, issueResolutionAcceptor, modificationContext);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}","commit_id":"2e5a5109b48cf922acea597b57b4eb04ceb3c0cd","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void createNewXtendFunction(@NonNull final String elementName, @NonNull String callText,final  boolean isExtension, final boolean isSetter, final JvmTypeReference expectedType, final Issue issue, final IssueResolutionAcceptor issueResolutionAcceptor, IModificationContext modificationContext){\n\t\tStringBuilderBasedAppendable methodDescriptionBuilder = new StringBuilderBasedAppendable();\n\t\tStringBuilderBasedAppendable methodLabelBuilder = new StringBuilderBasedAppendable();\n\t\tmethodDescriptionBuilder.append(\"...\").newLine().append(\"def \");\n\t\tmethodLabelBuilder.append(\"create \"); \n\t\tif(isExtension)\n\t\t\tmethodLabelBuilder.append(\"extension \");\n\t\t\tmethodLabelBuilder.append(\"method \");\n\t\tif(isSetter){\n\t\t\tmethodLabelBuilder.append(\"set\");\n\t\t\tmethodDescriptionBuilder.append(\"set\");\n\t\t}\n\t\tmethodLabelBuilder.append(callText);\n\t\tmethodDescriptionBuilder.append(callText).append(\" {}\").newLine().append(\"...\");\n\t\tIssueResolution issueResolutionMethodInType = new IssueResolution(methodLabelBuilder.toString(), methodDescriptionBuilder.toString(), \"fix_public_function.png\", modificationContext,  new SemanticModificationWrapper(issue.getUriToProblem(),new ISemanticModification(){\n\n\t\t\tpublic void apply(final EObject element, final IModificationContext context) throws Exception {\n\t\t\t\tif(element != null){\n\t\t\t\t\tXAbstractFeatureCall call = (XAbstractFeatureCall) element;\n\t\t\t\t\tXtendClass xtendClazz = EcoreUtil2.getContainerOfType(element, XtendClass.class);\n\t\t\t\t\tIXtextDocument xtextDocument = context.getXtextDocument();\n\t\t\t\t\tdoCreateNewFunctionInClazz(call, xtendClazz, expectedType,isSetter, xtextDocument, elementName);\n\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tissueResolutionAcceptor.getIssueResolutions().add(issueResolutionMethodInType);\n\t}","id":68901,"modified_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void createNewXtendFunction(@NonNull final String elementName, @NonNull String callText,final  boolean isExtension, final boolean isSetter, final JvmTypeReference expectedType, final Issue issue, final IssueResolutionAcceptor issueResolutionAcceptor, IModificationContext modificationContext){\n\t\tStringBuilderBasedAppendable methodDescriptionBuilder = new StringBuilderBasedAppendable();\n\t\tStringBuilderBasedAppendable methodLabelBuilder = new StringBuilderBasedAppendable();\n\t\tmethodDescriptionBuilder.append(\"...\").newLine().append(\"def \");\n\t\tmethodLabelBuilder.append(\"create \"); \n\t\tif(isExtension)\n\t\t\tmethodLabelBuilder.append(\"extension \");\n\t\tmethodLabelBuilder.append(\"method \");\n\t\tif(isSetter){\n\t\t\tmethodLabelBuilder.append(\"set\");\n\t\t\tmethodDescriptionBuilder.append(\"set\");\n\t\t}\n\t\tmethodLabelBuilder.append(elementName);\n\t\tmethodDescriptionBuilder.append(callText).append(\" {}\").newLine().append(\"...\");\n\t\tIssueResolution issueResolutionMethodInType = new IssueResolution(methodLabelBuilder.toString(), methodDescriptionBuilder.toString(), \"fix_public_function.png\", modificationContext,  new SemanticModificationWrapper(issue.getUriToProblem(),new ISemanticModification(){\n\t\t\tpublic void apply(final EObject element, final IModificationContext context) throws Exception {\n\t\t\t\tif(element != null){\n\t\t\t\t\tXAbstractFeatureCall call = (XAbstractFeatureCall) element;\n\t\t\t\t\tXtendClass xtendClazz = EcoreUtil2.getContainerOfType(element, XtendClass.class);\n\t\t\t\t\tIXtextDocument xtextDocument = context.getXtextDocument();\n\t\t\t\t\tdoCreateNewFunctionInClazz(call, xtendClazz, expectedType,isSetter, xtextDocument, elementName);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tissueResolutionAcceptor.getIssueResolutions().add(issueResolutionMethodInType);\n\t}","commit_id":"2e5a5109b48cf922acea597b57b4eb04ceb3c0cd","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void doCreateNewFunctionInClazz(@NonNull XAbstractFeatureCall call, XtendClass xtendClazz,@Nullable JvmTypeReference expectedType, boolean isSetter, IXtextDocument xtextDocument,\n\t\t\t@NonNull String functionName) throws BadLocationException {\n\t\tXtendFunction function = EcoreUtil2.getContainerOfType(call, XtendFunction.class);\n\t\tint offset = superMemberImplementor.getFunctionInsertOffset(xtendClazz);\n\t\tif(function != null){\n\t\t\tICompositeNode node = NodeModelUtils.getNode(function);\n\t\t\tif(node != null)\n\t\t\t\toffset = node.getTotalEndOffset();\n\t\t}\n\t\tfinal ReplacingAppendable appendable = appendableFactory.get(xtextDocument, call, offset, 0, 1, false);\n\t\tappendable.newLine().increaseIndentation().append(\"def \");\n\t\tgetTypeArgumentString(call, appendable);\n\t\tif(expectedType != null && expectedType.getType() != null){\n\t\t\ttypeRefSerializer.serialize(expectedType, call, appendable);\n\t\t\tappendable.append(\" \");\n\t\t}\n\t\tif(isSetter)\n\t\t\tappendable.append(\"set\");\n\t\tappendable.append(functionName);\n\t\tcomputeArgumentString(call,true, appendable);\n\t\tappendable.append(\" { }\").decreaseIndentation().decreaseIndentation().newLine();\n\t\tappendable.commitChanges();\n\t}","id":68902,"modified_method":"/**\n\t * @since 2.3\n\t */\n\tprotected void doCreateNewFunctionInClazz(@NonNull XAbstractFeatureCall call, XtendClass xtendClazz,@Nullable JvmTypeReference expectedType, boolean isSetter, IXtextDocument xtextDocument,\n\t\t\t@NonNull String functionName) throws BadLocationException {\n\t\tXtendFunction function = EcoreUtil2.getContainerOfType(call, XtendFunction.class);\n\t\tint offset = superMemberImplementor.getFunctionInsertOffset(xtendClazz);\n\t\tif(function != null){\n\t\t\tICompositeNode node = NodeModelUtils.getNode(function);\n\t\t\tif(node != null)\n\t\t\t\toffset = node.getTotalEndOffset();\n\t\t}\n\t\tfinal ReplacingAppendable appendable = appendableFactory.get(xtextDocument, call, offset, 0, 1, false);\n\t\tappendable.newLine().increaseIndentation().append(\"def \");\n\t\tcomputeTypeArguments(call, call.getTypeArguments(), appendable);\n\t\tif(expectedType != null && expectedType.getType() != null){\n\t\t\ttypeRefSerializer.serialize(expectedType, call, appendable);\n\t\t\tappendable.append(\" \");\n\t\t}\n\t\tif(isSetter)\n\t\t\tappendable.append(\"set\");\n\t\tappendable.append(functionName);\n\t\tcomputeArgumentString(call,true, appendable);\n\t\tappendable.append(\" { }\").decreaseIndentation().decreaseIndentation().newLine();\n\t\tappendable.commitChanges();\n\t}","commit_id":"2e5a5109b48cf922acea597b57b4eb04ceb3c0cd","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n    @Slow\n    public void testUpdateThrottleSettings() {\n\n        // No throttling at first, only 1 non-replicated shard, force lots of merging:\n        assertAcked(prepareCreate(\"test\")\n                    .setSettings(ImmutableSettings.builder()\n                                 .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, \"none\")\n                                 .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"1\")\n                                 .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, \"0\")\n                                 .put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE, \"2\")\n                                 .put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER, \"2\")\n                                 .put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT, \"1\")\n                                 .put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT, \"2\")\n                                 ));\n        ensureGreen();\n        long termUpto = 0;\n        for(int i=0;i<100;i++) {\n            // Provoke slowish merging by making many unique terms:\n            StringBuilder sb = new StringBuilder();\n            for(int j=0;j<100;j++) {\n                sb.append(' ');\n                sb.append(termUpto++);\n            }\n            client().prepareIndex(\"test\", \"type\", \"\"+termUpto).setSource(\"field\" + (i%10), sb.toString()).get();\n            if (i % 2 == 0) {\n                refresh();\n            }\n        }\n\n        // No merge IO throttling should have happened:\n        NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n        for(NodeStats stats : nodesStats.getNodes()) {\n            assertThat(stats.getIndices().getStore().getThrottleTime().getMillis(), equalTo(0l));\n        }\n\n        logger.info(\"test: set low merge throttling\");\n\n        // Now updates settings to turn on merge throttling lowish rate\n        client()\n            .admin()\n            .indices()\n            .prepareUpdateSettings(\"test\")\n            .setSettings(ImmutableSettings.builder()\n                         .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, \"merge\")\n                         .put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC, \"1mb\"))\n            .get();\n\n        // Make sure setting says it is in fact changed:\n        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(\"test\").get();\n        assertThat(getSettingsResponse.getSetting(\"test\", AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE), equalTo(\"merge\"));\n\n        // Also make sure we see throttling kicking in:\n        boolean done = false;\n        while (done == false) {\n            // Provoke slowish merging by making many unique terms:\n            for(int i=0;i<5;i++) {\n                StringBuilder sb = new StringBuilder();\n                for(int j=0;j<100;j++) {\n                    sb.append(' ');\n                    sb.append(termUpto++);\n                    sb.append(\" some random text that keeps repeating over and over again hambone\");\n                }\n                client().prepareIndex(\"test\", \"type\", \"\"+termUpto).setSource(\"field\" + (i%10), sb.toString()).get();\n            }\n            refresh();\n            nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n            for(NodeStats stats : nodesStats.getNodes()) {\n                long throttleMillis = stats.getIndices().getStore().getThrottleTime().getMillis();\n                if (throttleMillis > 0) {\n                    done = true;\n                    break;\n                }\n            }\n        }\n\n        logger.info(\"test: disable merge throttling\");\n        \n        // Now updates settings to disable merge throttling\n        client()\n            .admin()\n            .indices()\n            .prepareUpdateSettings(\"test\")\n            .setSettings(ImmutableSettings.builder()\n                         .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, \"none\"))\n            .get();\n\n        // Optimize does a waitForMerges, which we must do to make sure all in-flight (throttled) merges finish:\n        logger.info(\"test: optimize\");\n        client().admin().indices().prepareOptimize(\"test\").get();\n        logger.info(\"test: optimize done\");\n\n        // Record current throttling so far\n        long sumThrottleTime = 0;\n        nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n        for(NodeStats stats : nodesStats.getNodes()) {\n            sumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis();\n        }\n\n        // Make sure no further throttling happens:\n        for(int i=0;i<100;i++) {\n            // Provoke slowish merging by making many unique terms:\n            StringBuilder sb = new StringBuilder();\n            for(int j=0;j<100;j++) {\n                sb.append(' ');\n                sb.append(termUpto++);\n            }\n            client().prepareIndex(\"test\", \"type\", \"\"+termUpto).setSource(\"field\" + (i%10), sb.toString()).get();\n            if (i % 2 == 0) {\n                refresh();\n            }\n        }\n        logger.info(\"test: done indexing after disabling throttling\");\n\n        long newSumThrottleTime = 0;\n        nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n        for(NodeStats stats : nodesStats.getNodes()) {\n            newSumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis();\n        }\n\n        // No additional merge IO throttling should have happened:\n        assertEquals(sumThrottleTime, newSumThrottleTime);\n\n        logger.info(\"test: test done\");\n    }","id":68903,"modified_method":"@Test\n    @Slow\n    public void testUpdateThrottleSettings() {\n\n        // No throttling at first, only 1 non-replicated shard, force lots of merging:\n        assertAcked(prepareCreate(\"test\")\n                    .setSettings(ImmutableSettings.builder()\n                                 .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, \"none\")\n                                 .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"1\")\n                                 .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, \"0\")\n                                 .put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE, \"2\")\n                                 .put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER, \"2\")\n                                 .put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT, \"1\")\n                                 .put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT, \"2\")\n                                 ));\n        ensureGreen();\n        long termUpto = 0;\n        for(int i=0;i<100;i++) {\n            // Provoke slowish merging by making many unique terms:\n            StringBuilder sb = new StringBuilder();\n            for(int j=0;j<100;j++) {\n                sb.append(' ');\n                sb.append(termUpto++);\n            }\n            client().prepareIndex(\"test\", \"type\", \"\"+termUpto).setSource(\"field\" + (i%10), sb.toString()).get();\n            if (i % 2 == 0) {\n                refresh();\n            }\n        }\n\n        // No merge IO throttling should have happened:\n        NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n        for(NodeStats stats : nodesStats.getNodes()) {\n            assertThat(stats.getIndices().getStore().getThrottleTime().getMillis(), equalTo(0l));\n        }\n\n        logger.info(\"test: set low merge throttling\");\n\n        // Now updates settings to turn on merge throttling lowish rate\n        client()\n            .admin()\n            .indices()\n            .prepareUpdateSettings(\"test\")\n            .setSettings(ImmutableSettings.builder()\n                         .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, \"merge\")\n                         .put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC, \"1mb\"))\n            .get();\n\n        // Make sure setting says it is in fact changed:\n        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(\"test\").get();\n        assertThat(getSettingsResponse.getSetting(\"test\", AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE), equalTo(\"merge\"));\n\n        // Also make sure we see throttling kicking in:\n        boolean done = false;\n        while (done == false) {\n            // Provoke slowish merging by making many unique terms:\n            for(int i=0;i<5;i++) {\n                StringBuilder sb = new StringBuilder();\n                for(int j=0;j<100;j++) {\n                    sb.append(' ');\n                    sb.append(termUpto++);\n                    sb.append(\" some random text that keeps repeating over and over again hambone\");\n                }\n                client().prepareIndex(\"test\", \"type\", \"\"+termUpto).setSource(\"field\" + (i%10), sb.toString()).get();\n            }\n            refresh();\n            nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n            for(NodeStats stats : nodesStats.getNodes()) {\n                long throttleMillis = stats.getIndices().getStore().getThrottleTime().getMillis();\n                if (throttleMillis > 0) {\n                    done = true;\n                    break;\n                }\n            }\n        }\n\n        logger.info(\"test: disable merge throttling\");\n        \n        // Now updates settings to disable merge throttling\n        client()\n            .admin()\n            .indices()\n            .prepareUpdateSettings(\"test\")\n            .setSettings(ImmutableSettings.builder()\n                         .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, \"none\"))\n            .get();\n\n        // Optimize does a waitForMerges, which we must do to make sure all in-flight (throttled) merges finish:\n        logger.info(\"test: optimize\");\n        client().admin().indices().prepareOptimize(\"test\").setWaitForMerge(true).get();\n        logger.info(\"test: optimize done\");\n\n        // Record current throttling so far\n        long sumThrottleTime = 0;\n        nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n        for(NodeStats stats : nodesStats.getNodes()) {\n            sumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis();\n        }\n\n        // Make sure no further throttling happens:\n        for(int i=0;i<100;i++) {\n            // Provoke slowish merging by making many unique terms:\n            StringBuilder sb = new StringBuilder();\n            for(int j=0;j<100;j++) {\n                sb.append(' ');\n                sb.append(termUpto++);\n            }\n            client().prepareIndex(\"test\", \"type\", \"\"+termUpto).setSource(\"field\" + (i%10), sb.toString()).get();\n            if (i % 2 == 0) {\n                refresh();\n            }\n        }\n        logger.info(\"test: done indexing after disabling throttling\");\n\n        long newSumThrottleTime = 0;\n        nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get();\n        for(NodeStats stats : nodesStats.getNodes()) {\n            newSumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis();\n        }\n\n        // No additional merge IO throttling should have happened:\n        assertEquals(sumThrottleTime, newSumThrottleTime);\n\n        // Optimize & flush and wait; else we sometimes get a \"Delete Index failed - not acked\"\n        // when ElasticsearchIntegrationTest.after tries to remove indices created by the test:\n\n        // Wait for merges to finish\n        client().admin().indices().prepareOptimize(\"test\").setWaitForMerge(true).get();\n        flush();\n\n        logger.info(\"test: test done\");\n    }","commit_id":"462336c13566cfa13414e8cd400a000d58297455","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void benchmarkIssueIndexing() {\n    LOGGER.info(\"Indexing issues\");\n    IssueIterator issues = new IssueIterator(PROJECTS, FILES_PER_PROJECT, ISSUES_PER_FILE);\n    ProgressTask progressTask = new ProgressTask(LOGGER, \"issues\", issues.count());\n    Timer timer = new Timer(\"IssuesIndex\");\n    timer.schedule(progressTask, ProgressTask.PERIOD_MS, ProgressTask.PERIOD_MS);\n\n    long start = System.currentTimeMillis();\n    tester.get(IssueIndexer.class).index(issues);\n\n    timer.cancel();\n    long period = System.currentTimeMillis() - start;\n    long throughputPerSecond = 1000 * issues.count.get() / period;\n    LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n\n    // be sure that physical files do not evolve during estimation of size\n    tester.get(EsClient.class).prepareOptimize(\"issues\").get();\n    long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n    LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 200L * FileUtils.ONE_MB, 420L * FileUtils.ONE_MB);\n  }","id":68904,"modified_method":"private void benchmarkIssueIndexing() {\n    LOGGER.info(\"Indexing issues\");\n    IssueIterator issues = new IssueIterator(PROJECTS, FILES_PER_PROJECT, ISSUES_PER_FILE);\n    ProgressTask progressTask = new ProgressTask(LOGGER, \"issues\", issues.count());\n    Timer timer = new Timer(\"IssuesIndex\");\n    timer.schedule(progressTask, ProgressTask.PERIOD_MS, ProgressTask.PERIOD_MS);\n\n    long start = System.currentTimeMillis();\n    tester.get(IssueIndexer.class).index(issues);\n\n    timer.cancel();\n    long period = System.currentTimeMillis() - start;\n    long throughputPerSecond = 1000 * issues.count.get() / period;\n    LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 5116, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n\n    // be sure that physical files do not evolve during estimation of size\n    tester.get(EsClient.class).prepareOptimize(\"issues\").setWaitForMerge(true).get();\n    long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n    LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 200L * FileUtils.ONE_MB, 420L * FileUtils.ONE_MB);\n  }","commit_id":"c0f002c521c84fc7922e77c724347b0c92bfd020","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void benchmarkIndexing() {\n    LOGGER.info(\"Indexing source lines\");\n\n    SourceIterator files = new SourceIterator(FILES, LINES_PER_FILE);\n    ProgressTask progressTask = new ProgressTask(LOGGER, \"files of \" + LINES_PER_FILE + \" lines\", files.count());\n    Timer timer = new Timer(\"SourceIndexer\");\n    timer.schedule(progressTask, ProgressTask.PERIOD_MS, ProgressTask.PERIOD_MS);\n\n    long start = System.currentTimeMillis();\n    tester.get(SourceLineIndexer.class).index(files);\n    long end = System.currentTimeMillis();\n\n    timer.cancel();\n    long period = end - start;\n    long nbLines = files.count.get() * LINES_PER_FILE;\n    long throughputPerSecond = 1000L * nbLines / period;\n    LOGGER.info(String.format(\"%d lines indexed in %d ms (%d docs/second)\", nbLines, period, throughputPerSecond));\n    benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n\n    // be sure that physical files do not evolve during estimation of size\n    tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).get();\n    long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n    LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 103L * FileUtils.ONE_MB, 109L * FileUtils.ONE_MB);\n  }","id":68905,"modified_method":"private void benchmarkIndexing() {\n    LOGGER.info(\"Indexing source lines\");\n\n    SourceIterator files = new SourceIterator(FILES, LINES_PER_FILE);\n    ProgressTask progressTask = new ProgressTask(LOGGER, \"files of \" + LINES_PER_FILE + \" lines\", files.count());\n    Timer timer = new Timer(\"SourceIndexer\");\n    timer.schedule(progressTask, ProgressTask.PERIOD_MS, ProgressTask.PERIOD_MS);\n\n    long start = System.currentTimeMillis();\n    tester.get(SourceLineIndexer.class).index(files);\n    long end = System.currentTimeMillis();\n\n    timer.cancel();\n    long period = end - start;\n    long nbLines = files.count.get() * LINES_PER_FILE;\n    long throughputPerSecond = 1000L * nbLines / period;\n    LOGGER.info(String.format(\"%d lines indexed in %d ms (%d docs/second)\", nbLines, period, throughputPerSecond));\n    benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 8950, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n\n    // be sure that physical files do not evolve during estimation of size\n    tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).setWaitForMerge(true).get();\n    long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n    LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 103L * FileUtils.ONE_MB, 109L * FileUtils.ONE_MB);\n  }","commit_id":"c0f002c521c84fc7922e77c724347b0c92bfd020","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public SourceFileResultSetIterator.Row next() {\n      String projectUuid = \"P\" + currentProject;\n      String fileUuid = \"FILE\" + count.get();\n      dataBuilder.clear();\n      for (int indexLine = 1; indexLine <= nbLinesPerFile; indexLine++) {\n        dataBuilder.addLinesBuilder()\n          .setLine(indexLine)\n          .setScmRevision(\"REVISION_\" + indexLine)\n          .setScmAuthor(\"a_guy\")\n          .setSource(\"this is not java code \" + indexLine)\n          .setUtLineHits(2)\n          .setUtConditions(8)\n          .setUtCoveredConditions(2)\n          .setItLineHits(2)\n          .setItConditions(8)\n          .setItCoveredConditions(2)\n          .setOverallLineHits(2)\n          .setOverallConditions(8)\n          .setOverallCoveredConditions(2)\n          .setScmDate(1_500_000_000_000L)\n          .setHighlighting(\"2,9,k;9,18,k\")\n          .addAllDuplication(Arrays.asList(19, 33, 141))\n          .build();\n      }\n      count.incrementAndGet();\n      if (count.get() % 500 == 0) {\n        currentProject++;\n      }\n      return SourceFileResultSetIterator.toRow(projectUuid, fileUuid, new Date(), dataBuilder.build());\n    }","id":68906,"modified_method":"@Override\n    public SourceFileResultSetIterator.Row next() {\n      String projectUuid = \"P\" + currentProject;\n      String fileUuid = \"FILE\" + count.get();\n      dataBuilder.clear();\n\n      for (int indexLine = 1; indexLine <= nbLinesPerFile; indexLine++) {\n        lineBuilder.clear();\n        dataBuilder.addLines(lineBuilder\n          .setLine(indexLine)\n          .setScmRevision(\"REVISION_\" + indexLine)\n          .setScmAuthor(\"a_guy\")\n          .setSource(\"this is not java code \" + indexLine)\n          .setUtLineHits(2)\n          .setUtConditions(8)\n          .setUtCoveredConditions(2)\n          .setItLineHits(2)\n          .setItConditions(8)\n          .setItCoveredConditions(2)\n          .setOverallLineHits(2)\n          .setOverallConditions(8)\n          .setOverallCoveredConditions(2)\n          .setScmDate(1_500_000_000_000L)\n          .setHighlighting(\"2,9,k;9,18,k\")\n          .addAllDuplication(Arrays.asList(19, 33, 141))\n          .build());\n      }\n      count.incrementAndGet();\n      if (count.get() % 500 == 0) {\n        currentProject++;\n      }\n      return SourceFileResultSetIterator.toRow(projectUuid, fileUuid, new Date(), dataBuilder.build());\n    }","commit_id":"c0f002c521c84fc7922e77c724347b0c92bfd020","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * The following logic determines if a warning is generated for config merge\n   * issues:\n   * <ul>\n   *   <li>A value that has been customized from HDP 2.2.x.x no longer exists in HDP 2.3.x.x<\/li>\n   *   <li>A value that has been customized from HDP 2.2.x.x has changed its default value between HDP 2.2.x.x and HDP 2.3.x.x<\/li>\n   * <\/ul>\n   */\n  @Override\n  public void perform(PrerequisiteCheck prerequisiteCheck, PrereqCheckRequest request)\n      throws AmbariException {\n\n    RepositoryVersionEntity rve = findByVersion(request.getRepositoryVersion());\n\n    Map<String, Map<String, ThreeWayValue>> changes =\n        m_mergeHelper.getConflicts(request.getClusterName(), rve.getStackId());\n\n    Set<String> failedTypes = new HashSet<String>();\n\n    for (Entry<String, Map<String, ThreeWayValue>> entry : changes.entrySet()) {\n      for (Entry<String, ThreeWayValue> configEntry : entry.getValue().entrySet()) {\n\n        ThreeWayValue twv = configEntry.getValue();\n        if (null == twv.oldStackValue) { // !!! did not exist and in the map means changed\n          failedTypes.add(entry.getKey());\n          prerequisiteCheck.getFailedOn().add(entry.getKey() + \"/\" + configEntry.getKey());\n        } else if (!twv.oldStackValue.equals(twv.savedValue)) {  // !!! value customized\n          if (null == twv.newStackValue || // !!! not in new stack\n              !twv.oldStackValue.equals(twv.newStackValue)) { // !!! or the default value changed\n            failedTypes.add(entry.getKey());\n            prerequisiteCheck.getFailedOn().add(entry.getKey() + \"/\" + configEntry.getKey());\n          }\n        }\n      }\n    }\n\n    if (prerequisiteCheck.getFailedOn().size() > 0) {\n      prerequisiteCheck.setStatus(PrereqCheckStatus.WARNING);\n      String failReason = getFailReason(prerequisiteCheck, request);\n\n      prerequisiteCheck.setFailReason(String.format(failReason, StringUtils.join(\n          failedTypes, \", \")));\n\n    } else {\n      prerequisiteCheck.setStatus(PrereqCheckStatus.PASS);\n    }\n  }","id":68907,"modified_method":"/**\n   * The following logic determines if a warning is generated for config merge\n   * issues:\n   * <ul>\n   *   <li>A value that has been customized from HDP 2.2.x.x no longer exists in HDP 2.3.x.x<\/li>\n   *   <li>A value that has been customized from HDP 2.2.x.x has changed its default value between HDP 2.2.x.x and HDP 2.3.x.x<\/li>\n   * <\/ul>\n   */\n  @Override\n  public void perform(PrerequisiteCheck prerequisiteCheck, PrereqCheckRequest request)\n      throws AmbariException {\n\n    RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findMaxByVersion(request.getRepositoryVersion());\n\n    Map<String, Map<String, ThreeWayValue>> changes =\n        m_mergeHelper.getConflicts(request.getClusterName(), rve.getStackId());\n\n    Set<String> failedTypes = new HashSet<String>();\n\n    for (Entry<String, Map<String, ThreeWayValue>> entry : changes.entrySet()) {\n      for (Entry<String, ThreeWayValue> configEntry : entry.getValue().entrySet()) {\n\n        ThreeWayValue twv = configEntry.getValue();\n        if (null == twv.oldStackValue) { // !!! did not exist and in the map means changed\n          failedTypes.add(entry.getKey());\n          prerequisiteCheck.getFailedOn().add(entry.getKey() + \"/\" + configEntry.getKey());\n        } else if (!twv.oldStackValue.equals(twv.savedValue)) {  // !!! value customized\n          if (null == twv.newStackValue || // !!! not in new stack\n              !twv.oldStackValue.equals(twv.newStackValue)) { // !!! or the default value changed\n            failedTypes.add(entry.getKey());\n            prerequisiteCheck.getFailedOn().add(entry.getKey() + \"/\" + configEntry.getKey());\n          }\n        }\n      }\n    }\n\n    if (prerequisiteCheck.getFailedOn().size() > 0) {\n      prerequisiteCheck.setStatus(PrereqCheckStatus.WARNING);\n      String failReason = getFailReason(prerequisiteCheck, request);\n\n      prerequisiteCheck.setFailReason(String.format(failReason, StringUtils.join(\n          failedTypes, \", \")));\n\n    } else {\n      prerequisiteCheck.setStatus(PrereqCheckStatus.PASS);\n    }\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public boolean isApplicable(PrereqCheckRequest request) throws AmbariException {\n    String repoVersion = request.getRepositoryVersion();\n    if (null == repoVersion) {\n      return false;\n    }\n\n    RepositoryVersionEntity rve = findByVersion(repoVersion);\n    if (null == rve) {\n      return false;\n    }\n\n    Cluster cluster = clustersProvider.get().getCluster(request.getClusterName());\n\n    if (rve.getStackId().equals(cluster.getCurrentStackVersion())) {\n      return false;\n    }\n\n    return true;\n  }","id":68908,"modified_method":"@Override\n  public boolean isApplicable(PrereqCheckRequest request) throws AmbariException {\n    String repoVersion = request.getRepositoryVersion();\n    if (null == repoVersion) {\n      return false;\n    }\n\n    RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findMaxByVersion(repoVersion);\n    if (null == rve) {\n      return false;\n    }\n\n    Cluster cluster = clustersProvider.get().getCluster(request.getClusterName());\n\n    if (rve.getStackId().equals(cluster.getCurrentStackVersion())) {\n      return false;\n    }\n\n    return true;\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testApplicable() throws Exception {\n\n    PrereqCheckRequest request = new PrereqCheckRequest(\"cluster\");\n\n    ConfigurationMergeCheck cmc = new ConfigurationMergeCheck();\n    Assert.assertFalse(cmc.isApplicable(request));\n\n    final RepositoryVersionDAO repositoryVersionDAO = EasyMock.createMock(RepositoryVersionDAO.class);\n    expect(repositoryVersionDAO.findByVersion(\"1.0\")).andReturn(\n        Collections.singletonList(createFor(\"1.0\"))).anyTimes();\n    expect(repositoryVersionDAO.findByVersion(\"1.1\")).andReturn(\n        Collections.singletonList(createFor(\"1.1\"))).anyTimes();\n    expect(repositoryVersionDAO.findByVersion(\"1.2\")).andReturn(\n        Collections.<RepositoryVersionEntity>emptyList()).anyTimes();\n\n\n    replay(repositoryVersionDAO);\n\n    cmc.repositoryVersionDaoProvider = new Provider<RepositoryVersionDAO>() {\n      @Override\n      public RepositoryVersionDAO get() {\n        return repositoryVersionDAO;\n      }\n    };\n\n    cmc.clustersProvider = new Provider<Clusters>() {\n      @Override\n      public Clusters get() {\n        return clusters;\n      }\n    };\n\n    request.setRepositoryVersion(\"1.0\");\n    Assert.assertFalse(cmc.isApplicable(request));\n\n    request.setRepositoryVersion(\"1.1\");\n    Assert.assertTrue(cmc.isApplicable(request));\n\n    request.setRepositoryVersion(\"1.2\");\n    Assert.assertFalse(cmc.isApplicable(request));\n\n  }","id":68909,"modified_method":"@Test\n  public void testApplicable() throws Exception {\n\n    PrereqCheckRequest request = new PrereqCheckRequest(\"cluster\");\n\n    ConfigurationMergeCheck cmc = new ConfigurationMergeCheck();\n    Assert.assertFalse(cmc.isApplicable(request));\n\n    final RepositoryVersionDAO repositoryVersionDAO = EasyMock.createMock(RepositoryVersionDAO.class);\n    expect(repositoryVersionDAO.findMaxByVersion(\"1.0\")).andReturn(createFor(\"1.0\")).anyTimes();\n    expect(repositoryVersionDAO.findMaxByVersion(\"1.1\")).andReturn(createFor(\"1.1\")).anyTimes();\n    expect(repositoryVersionDAO.findMaxByVersion(\"1.2\")).andReturn(null).anyTimes();\n\n    replay(repositoryVersionDAO);\n\n    cmc.repositoryVersionDaoProvider = new Provider<RepositoryVersionDAO>() {\n      @Override\n      public RepositoryVersionDAO get() {\n        return repositoryVersionDAO;\n      }\n    };\n\n    cmc.clustersProvider = new Provider<Clusters>() {\n      @Override\n      public Clusters get() {\n        return clusters;\n      }\n    };\n\n    request.setRepositoryVersion(\"1.0\");\n    Assert.assertFalse(cmc.isApplicable(request));\n\n    request.setRepositoryVersion(\"1.1\");\n    Assert.assertTrue(cmc.isApplicable(request));\n\n    request.setRepositoryVersion(\"1.2\");\n    Assert.assertFalse(cmc.isApplicable(request));\n\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPerform() throws Exception {\n    ConfigurationMergeCheck cmc = new ConfigurationMergeCheck();\n\n    final RepositoryVersionDAO repositoryVersionDAO = EasyMock.createMock(RepositoryVersionDAO.class);\n    expect(repositoryVersionDAO.findByVersion(\"1.0\")).andReturn(\n        Collections.singletonList(createFor(\"1.0\"))).anyTimes();\n    expect(repositoryVersionDAO.findByVersion(\"1.1\")).andReturn(\n        Collections.singletonList(createFor(\"1.1\"))).anyTimes();\n\n    replay(repositoryVersionDAO);\n\n    cmc.repositoryVersionDaoProvider = new Provider<RepositoryVersionDAO>() {\n      @Override\n      public RepositoryVersionDAO get() {\n        return repositoryVersionDAO;\n      }\n    };\n\n    cmc.clustersProvider = new Provider<Clusters>() {\n      @Override\n      public Clusters get() {\n        return clusters;\n      }\n    };\n\n    cmc.m_mergeHelper = new ConfigMergeHelper();\n    Field field = ConfigMergeHelper.class.getDeclaredField(\"m_clusters\");\n    field.setAccessible(true);\n    field.set(cmc.m_mergeHelper, cmc.clustersProvider);\n\n    final AmbariMetaInfo ami = EasyMock.createMock(AmbariMetaInfo.class);\n\n\n    field = ConfigMergeHelper.class.getDeclaredField(\"m_ambariMetaInfo\");\n    field.setAccessible(true);\n    field.set(cmc.m_mergeHelper, new Provider<AmbariMetaInfo>() {\n      @Override\n      public AmbariMetaInfo get() {\n        return ami;\n      }\n    });\n\n    PropertyInfo pi10 = new PropertyInfo();\n    pi10.setFilename(CONFIG_FILE);\n    pi10.setName(CONFIG_PROPERTY);\n    pi10.setValue(\"1024m\");\n\n    PropertyInfo pi11 = new PropertyInfo();\n    pi11.setFilename(CONFIG_FILE);\n    pi11.setName(CONFIG_PROPERTY);\n    pi11.setValue(\"1024m\");\n\n    expect(ami.getServiceProperties(\"HDP\", \"1.0\", \"HDFS\")).andReturn(\n        Collections.singleton(pi10)).anyTimes();\n\n    expect(ami.getServiceProperties(\"HDP\", \"1.1\", \"HDFS\")).andReturn(\n        Collections.singleton(pi11)).anyTimes();\n\n    expect(ami.getStackProperties(anyObject(String.class), anyObject(String.class))).andReturn(\n        Collections.<PropertyInfo>emptySet()).anyTimes();\n\n    replay(ami);\n\n    PrereqCheckRequest request = new PrereqCheckRequest(\"cluster\");\n    request.setRepositoryVersion(\"1.1\");\n\n    PrerequisiteCheck check = new PrerequisiteCheck(null, \"cluster\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect no warnings\", 0, check.getFailedOn().size());\n\n    check = new PrerequisiteCheck(null, \"cluster\");\n    pi11.setValue(\"1026m\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect warning when user-set has changed from new default\",\n        1, check.getFailedOn().size());\n\n    check = new PrerequisiteCheck(null, \"cluster\");\n    pi11.setName(CONFIG_PROPERTY + \".foo\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect no warning when user new stack is empty\",\n        0, check.getFailedOn().size());\n\n\n    check = new PrerequisiteCheck(null, \"cluster\");\n    pi11.setName(CONFIG_PROPERTY);\n    pi10.setName(CONFIG_PROPERTY + \".foo\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect warning when user old stack is empty, and value changed\",\n        1, check.getFailedOn().size());\n\n  }","id":68910,"modified_method":"@Test\n  public void testPerform() throws Exception {\n    ConfigurationMergeCheck cmc = new ConfigurationMergeCheck();\n\n    final RepositoryVersionDAO repositoryVersionDAO = EasyMock.createMock(RepositoryVersionDAO.class);\n    expect(repositoryVersionDAO.findMaxByVersion(\"1.0\")).andReturn(createFor(\"1.0\")).anyTimes();\n    expect(repositoryVersionDAO.findMaxByVersion(\"1.1\")).andReturn(createFor(\"1.1\")).anyTimes();\n\n    replay(repositoryVersionDAO);\n\n    cmc.repositoryVersionDaoProvider = new Provider<RepositoryVersionDAO>() {\n      @Override\n      public RepositoryVersionDAO get() {\n        return repositoryVersionDAO;\n      }\n    };\n\n    cmc.clustersProvider = new Provider<Clusters>() {\n      @Override\n      public Clusters get() {\n        return clusters;\n      }\n    };\n\n    cmc.m_mergeHelper = new ConfigMergeHelper();\n    Field field = ConfigMergeHelper.class.getDeclaredField(\"m_clusters\");\n    field.setAccessible(true);\n    field.set(cmc.m_mergeHelper, cmc.clustersProvider);\n\n    final AmbariMetaInfo ami = EasyMock.createMock(AmbariMetaInfo.class);\n\n\n    field = ConfigMergeHelper.class.getDeclaredField(\"m_ambariMetaInfo\");\n    field.setAccessible(true);\n    field.set(cmc.m_mergeHelper, new Provider<AmbariMetaInfo>() {\n      @Override\n      public AmbariMetaInfo get() {\n        return ami;\n      }\n    });\n\n    PropertyInfo pi10 = new PropertyInfo();\n    pi10.setFilename(CONFIG_FILE);\n    pi10.setName(CONFIG_PROPERTY);\n    pi10.setValue(\"1024m\");\n\n    PropertyInfo pi11 = new PropertyInfo();\n    pi11.setFilename(CONFIG_FILE);\n    pi11.setName(CONFIG_PROPERTY);\n    pi11.setValue(\"1024m\");\n\n    expect(ami.getServiceProperties(\"HDP\", \"1.0\", \"HDFS\")).andReturn(\n        Collections.singleton(pi10)).anyTimes();\n\n    expect(ami.getServiceProperties(\"HDP\", \"1.1\", \"HDFS\")).andReturn(\n        Collections.singleton(pi11)).anyTimes();\n\n    expect(ami.getStackProperties(anyObject(String.class), anyObject(String.class))).andReturn(\n        Collections.<PropertyInfo>emptySet()).anyTimes();\n\n    replay(ami);\n\n    PrereqCheckRequest request = new PrereqCheckRequest(\"cluster\");\n    request.setRepositoryVersion(\"1.1\");\n\n    PrerequisiteCheck check = new PrerequisiteCheck(null, \"cluster\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect no warnings\", 0, check.getFailedOn().size());\n\n    check = new PrerequisiteCheck(null, \"cluster\");\n    pi11.setValue(\"1026m\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect warning when user-set has changed from new default\",\n        1, check.getFailedOn().size());\n\n    check = new PrerequisiteCheck(null, \"cluster\");\n    pi11.setName(CONFIG_PROPERTY + \".foo\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect no warning when user new stack is empty\",\n        0, check.getFailedOn().size());\n\n\n    check = new PrerequisiteCheck(null, \"cluster\");\n    pi11.setName(CONFIG_PROPERTY);\n    pi10.setName(CONFIG_PROPERTY + \".foo\");\n    cmc.perform(check, request);\n    Assert.assertEquals(\"Expect warning when user old stack is empty, and value changed\",\n        1, check.getFailedOn().size());\n\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"private UpgradeEntity createUpgrade(Direction direction, UpgradePack pack,\n                                      Map<String, Object> requestMap) throws AmbariException {\n\n    String clusterName = (String) requestMap.get(UPGRADE_CLUSTER_NAME);\n\n    if (null == clusterName) {\n      throw new AmbariException(String.format(\"%s is required\", UPGRADE_CLUSTER_NAME));\n    }\n\n    Cluster cluster = getManagementController().getClusters().getCluster(clusterName);\n    ConfigHelper configHelper = getManagementController().getConfigHelper();\n\n    // the version being upgraded or downgraded to (ie hdp-2.2.1.0-1234)\n    final String version = (String) requestMap.get(UPGRADE_VERSION);\n\n    MasterHostResolver resolver = direction.isUpgrade() ?\n        new MasterHostResolver(configHelper, cluster) : new MasterHostResolver(configHelper, cluster, version);\n\n    UpgradeContext ctx = new UpgradeContext(resolver, version, direction);\n\n    List<UpgradeGroupHolder> groups = s_upgradeHelper.createSequence(pack, ctx);\n\n    if (groups.isEmpty()) {\n      throw new AmbariException(\"There are no groupings available\");\n    }\n\n    List<UpgradeGroupEntity> groupEntities = new ArrayList<UpgradeGroupEntity>();\n    RequestStageContainer req = createRequest(direction, version);\n\n    for (UpgradeGroupHolder group : groups) {\n      UpgradeGroupEntity groupEntity = new UpgradeGroupEntity();\n      groupEntity.setName(group.name);\n      groupEntity.setTitle(group.title);\n      boolean skippable = group.skippable;\n      boolean allowRetry = group.allowRetry;\n\n      List<UpgradeItemEntity> itemEntities = new ArrayList<UpgradeItemEntity>();\n\n      for (StageWrapper wrapper : group.items) {\n        if (wrapper.getType() == StageWrapper.Type.SERVER_SIDE_ACTION) {\n          // !!! each stage is guaranteed to be of one type.  but because there\n          // is a bug that prevents one stage with multiple tasks assigned for the same host,\n          // break them out into individual stages.\n\n          for (TaskWrapper taskWrapper : wrapper.getTasks()) {\n            for (Task task : taskWrapper.getTasks()) {\n              UpgradeItemEntity itemEntity = new UpgradeItemEntity();\n              itemEntity.setText(wrapper.getText());\n              itemEntity.setTasks(wrapper.getTasksJson());\n              itemEntity.setHosts(wrapper.getHostsJson());\n              itemEntities.add(itemEntity);\n\n              injectVariables(configHelper, cluster, itemEntity);\n\n              makeServerSideStage(ctx, req, itemEntity, (ServerSideActionTask) task, skippable, allowRetry);\n            }\n          }\n        } else {\n          UpgradeItemEntity itemEntity = new UpgradeItemEntity();\n          itemEntity.setText(wrapper.getText());\n          itemEntity.setTasks(wrapper.getTasksJson());\n          itemEntity.setHosts(wrapper.getHostsJson());\n          itemEntities.add(itemEntity);\n\n          injectVariables(configHelper, cluster, itemEntity);\n\n          // upgrade items match a stage\n          createStage(ctx, req, itemEntity, wrapper, skippable, allowRetry);\n        }\n      }\n\n      groupEntity.setItems(itemEntities);\n\n      groupEntities.add(groupEntity);\n\n    }\n\n    UpgradeEntity entity = new UpgradeEntity();\n    entity.setFromVersion(cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion());\n    entity.setToVersion(version);\n    entity.setUpgradeGroups(groupEntities);\n    entity.setClusterId(Long.valueOf(cluster.getClusterId()));\n    entity.setDirection(direction);\n\n    req.getRequestStatusResponse();\n\n    entity.setRequestId(req.getId());\n\n    req.persist();\n\n    s_upgradeDAO.create(entity);\n\n    return entity;\n  }","id":68911,"modified_method":"private UpgradeEntity createUpgrade(Direction direction, UpgradePack pack,\n                                      Map<String, Object> requestMap) throws AmbariException {\n\n    String clusterName = (String) requestMap.get(UPGRADE_CLUSTER_NAME);\n\n    if (null == clusterName) {\n      throw new AmbariException(String.format(\"%s is required\", UPGRADE_CLUSTER_NAME));\n    }\n\n    Cluster cluster = getManagementController().getClusters().getCluster(clusterName);\n    ConfigHelper configHelper = getManagementController().getConfigHelper();\n\n    // the version being upgraded or downgraded to (ie hdp-2.2.1.0-1234)\n    final String version = (String) requestMap.get(UPGRADE_VERSION);\n\n    MasterHostResolver resolver = direction.isUpgrade() ?\n        new MasterHostResolver(configHelper, cluster) : new MasterHostResolver(configHelper, cluster, version);\n\n    UpgradeContext ctx = new UpgradeContext(resolver, version, direction);\n\n    List<UpgradeGroupHolder> groups = s_upgradeHelper.createSequence(pack, ctx);\n\n    if (groups.isEmpty()) {\n      throw new AmbariException(\"There are no groupings available\");\n    }\n\n    List<UpgradeGroupEntity> groupEntities = new ArrayList<UpgradeGroupEntity>();\n    RequestStageContainer req = createRequest(direction, version);\n\n    for (UpgradeGroupHolder group : groups) {\n      UpgradeGroupEntity groupEntity = new UpgradeGroupEntity();\n      groupEntity.setName(group.name);\n      groupEntity.setTitle(group.title);\n      boolean skippable = group.skippable;\n      boolean allowRetry = group.allowRetry;\n\n      List<UpgradeItemEntity> itemEntities = new ArrayList<UpgradeItemEntity>();\n\n      for (StageWrapper wrapper : group.items) {\n        if (wrapper.getType() == StageWrapper.Type.SERVER_SIDE_ACTION) {\n          // !!! each stage is guaranteed to be of one type.  but because there\n          // is a bug that prevents one stage with multiple tasks assigned for the same host,\n          // break them out into individual stages.\n\n          for (TaskWrapper taskWrapper : wrapper.getTasks()) {\n            for (Task task : taskWrapper.getTasks()) {\n              UpgradeItemEntity itemEntity = new UpgradeItemEntity();\n              itemEntity.setText(wrapper.getText());\n              itemEntity.setTasks(wrapper.getTasksJson());\n              itemEntity.setHosts(wrapper.getHostsJson());\n              itemEntities.add(itemEntity);\n\n              injectVariables(configHelper, cluster, itemEntity);\n\n              makeServerSideStage(ctx, req, itemEntity, (ServerSideActionTask) task, skippable, allowRetry);\n            }\n          }\n        } else {\n          UpgradeItemEntity itemEntity = new UpgradeItemEntity();\n          itemEntity.setText(wrapper.getText());\n          itemEntity.setTasks(wrapper.getTasksJson());\n          itemEntity.setHosts(wrapper.getHostsJson());\n          itemEntities.add(itemEntity);\n\n          injectVariables(configHelper, cluster, itemEntity);\n\n          // upgrade items match a stage\n          createStage(ctx, req, itemEntity, wrapper, skippable, allowRetry);\n        }\n      }\n\n      groupEntity.setItems(itemEntities);\n\n      groupEntities.add(groupEntity);\n\n    }\n\n    UpgradeEntity entity = new UpgradeEntity();\n    entity.setFromVersion(cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion());\n    entity.setToVersion(version);\n    entity.setUpgradeGroups(groupEntities);\n    entity.setClusterId(Long.valueOf(cluster.getClusterId()));\n    entity.setDirection(direction);\n\n    req.getRequestStatusResponse();\n\n    entity.setRequestId(req.getId());\n\n    // !!! in case persist() starts creating tasks right away, square away the configs\n    createConfigs(cluster, version);\n\n    req.persist();\n\n    s_upgradeDAO.create(entity);\n\n    return entity;\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Validates a singular API request.\n   *\n   * @param requestMap the map of properties\n   * @return the validated upgrade pack\n   * @throws AmbariException\n   */\n  private UpgradePack validateRequest(Direction direction, Map<String, Object> requestMap)\n      throws AmbariException {\n    String clusterName = (String) requestMap.get(UPGRADE_CLUSTER_NAME);\n    String version = (String) requestMap.get(UPGRADE_VERSION);\n    String versionForUpgradePack = (String) requestMap.get(UPGRADE_FROM_VERSION);\n\n\n    if (null == clusterName) {\n      throw new AmbariException(String.format(\"%s is required\", UPGRADE_CLUSTER_NAME));\n    }\n\n    if (null == version) {\n      throw new AmbariException(String.format(\"%s is required\", UPGRADE_VERSION));\n    }\n\n    Cluster cluster = getManagementController().getClusters().getCluster(clusterName);\n    StackId stack = cluster.getDesiredStackVersion();\n\n    String repoVersion = version;\n\n    if (direction.isDowngrade() && null != versionForUpgradePack) {\n      repoVersion = versionForUpgradePack;\n    }\n\n    RepositoryVersionEntity versionEntity = s_repoVersionDAO.findByStackAndVersion(\n        stack, repoVersion);\n\n    if (null == versionEntity) {\n      throw new AmbariException(String.format(\"Version %s for stack %s was not found\",\n          repoVersion, stack.getStackVersion()));\n    }\n\n    Map<String, UpgradePack> packs = s_metaProvider.get().getUpgradePacks(\n        stack.getStackName(), stack.getStackVersion());\n\n    UpgradePack up = packs.get(versionEntity.getUpgradePackage());\n\n    if (null == up) {\n      throw new AmbariException(String.format(\n          \"Unable to perform %s.  Could not locate upgrade pack %s for version %s\",\n          direction.getText(false),\n          versionEntity.getUpgradePackage(),\n          repoVersion));\n    }\n\n    // !!! validate all hosts have the version installed\n\n    return up;\n  }","id":68912,"modified_method":"/**\n   * Validates a singular API request.\n   *\n   * @param requestMap the map of properties\n   * @return the validated upgrade pack\n   * @throws AmbariException\n   */\n  private UpgradePack validateRequest(Direction direction, Map<String, Object> requestMap)\n      throws AmbariException {\n    String clusterName = (String) requestMap.get(UPGRADE_CLUSTER_NAME);\n    String version = (String) requestMap.get(UPGRADE_VERSION);\n    String versionForUpgradePack = (String) requestMap.get(UPGRADE_FROM_VERSION);\n\n    if (null == clusterName) {\n      throw new AmbariException(String.format(\"%s is required\", UPGRADE_CLUSTER_NAME));\n    }\n\n    if (null == version) {\n      throw new AmbariException(String.format(\"%s is required\", UPGRADE_VERSION));\n    }\n\n    Cluster cluster = getManagementController().getClusters().getCluster(clusterName);\n    StackId stack = cluster.getDesiredStackVersion();\n\n    String repoVersion = version;\n\n    if (direction.isDowngrade() && null != versionForUpgradePack) {\n      repoVersion = versionForUpgradePack;\n    }\n\n    RepositoryVersionEntity versionEntity = s_repoVersionDAO.findMaxByVersion(repoVersion);\n\n    if (null == versionEntity) {\n      throw new AmbariException(String.format(\"Version %s for stack %s was not found\",\n          repoVersion, stack.getStackVersion()));\n    }\n\n    Map<String, UpgradePack> packs = s_metaProvider.get().getUpgradePacks(\n        versionEntity.getStackName(), versionEntity.getStackVersion());\n\n    UpgradePack up = packs.get(versionEntity.getUpgradePackage());\n\n    if (null == up) {\n      throw new AmbariException(String.format(\n          \"Unable to perform %s.  Could not locate upgrade pack %s for version %s\",\n          direction.getText(false),\n          versionEntity.getUpgradePackage(),\n          repoVersion));\n    }\n\n    return up;\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"@Before\n  public void before() throws Exception {\n    // setup the config helper for placeholder resolution\n    configHelper = EasyMock.createNiceMock(ConfigHelper.class);\n    expect(\n        configHelper.getPlaceholderValueFromDesiredConfigurations(\n            EasyMock.anyObject(Cluster.class), EasyMock.eq(\"{{foo/bar}}\"))).andReturn(\n        \"placeholder-rendered-properly\").anyTimes();\n\n    EasyMock.replay(configHelper);\n\n    // create an injector which will inject the mocks\n    injector = Guice.createInjector(Modules.override(\n        new InMemoryDefaultTestModule()).with(new MockModule()));\n\n    injector.getInstance(GuiceJpaInitializer.class);\n\n\n    helper = injector.getInstance(OrmTestHelper.class);\n\n    amc = injector.getInstance(AmbariManagementController.class);\n\n    Field field = AmbariServer.class.getDeclaredField(\"clusterController\");\n    field.setAccessible(true);\n    field.set(null, amc);\n\n    stackDAO = injector.getInstance(StackDAO.class);\n    upgradeDao = injector.getInstance(UpgradeDAO.class);\n    repoVersionDao = injector.getInstance(RepositoryVersionDAO.class);\n\n    AmbariEventPublisher publisher = createNiceMock(AmbariEventPublisher.class);\n    replay(publisher);\n    ViewRegistry.initInstance(new ViewRegistry(publisher));\n\n    StackEntity stackEntity = stackDAO.find(\"HDP\", \"2.1.1\");\n\n    RepositoryVersionEntity repoVersionEntity = new RepositoryVersionEntity();\n    repoVersionEntity.setDisplayName(\"My New Version 1\");\n    repoVersionEntity.setOperatingSystems(\"\");\n    repoVersionEntity.setStack(stackEntity);\n    repoVersionEntity.setUpgradePackage(\"upgrade_test\");\n    repoVersionEntity.setVersion(\"2.2.2.1\");\n    repoVersionDao.create(repoVersionEntity);\n\n    repoVersionEntity = new RepositoryVersionEntity();\n    repoVersionEntity.setDisplayName(\"My New Version 2\");\n    repoVersionEntity.setOperatingSystems(\"\");\n    repoVersionEntity.setStack(stackEntity);\n    repoVersionEntity.setUpgradePackage(\"upgrade_test\");\n    repoVersionEntity.setVersion(\"2.2.2.2\");\n    repoVersionDao.create(repoVersionEntity);\n\n\n    clusters = injector.getInstance(Clusters.class);\n\n    StackId stackId = new StackId(\"HDP-2.1.1\");\n    clusters.addCluster(\"c1\", stackId);\n    Cluster cluster = clusters.getCluster(\"c1\");\n\n    helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());\n    cluster.createClusterVersion(stackId, stackId.getStackVersion(), \"admin\", RepositoryVersionState.UPGRADING);\n    cluster.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);\n\n    clusters.addHost(\"h1\");\n    Host host = clusters.getHost(\"h1\");\n    Map<String, String> hostAttributes = new HashMap<String, String>();\n    hostAttributes.put(\"os_family\", \"redhat\");\n    hostAttributes.put(\"os_release_version\", \"6.3\");\n    host.setHostAttributes(hostAttributes);\n    host.setState(HostState.HEALTHY);\n    host.persist();\n\n    clusters.mapHostToCluster(\"h1\", \"c1\");\n\n    // add a single ZK server\n    Service service = cluster.addService(\"ZOOKEEPER\");\n    service.setDesiredStackVersion(cluster.getDesiredStackVersion());\n    service.persist();\n\n    ServiceComponent component = service.addServiceComponent(\"ZOOKEEPER_SERVER\");\n    ServiceComponentHost sch = component.addServiceComponentHost(\"h1\");\n    sch.setVersion(\"2.2.2.1\");\n\n    component = service.addServiceComponent(\"ZOOKEEPER_CLIENT\");\n    sch = component.addServiceComponentHost(\"h1\");\n    sch.setVersion(\"2.2.2.1\");\n  }","id":68913,"modified_method":"@Before\n  public void before() throws Exception {\n    // setup the config helper for placeholder resolution\n    configHelper = EasyMock.createNiceMock(ConfigHelper.class);\n    expect(\n        configHelper.getPlaceholderValueFromDesiredConfigurations(\n            EasyMock.anyObject(Cluster.class), EasyMock.eq(\"{{foo/bar}}\"))).andReturn(\n        \"placeholder-rendered-properly\").anyTimes();\n\n    EasyMock.replay(configHelper);\n\n    // create an injector which will inject the mocks\n    injector = Guice.createInjector(Modules.override(\n        new InMemoryDefaultTestModule()).with(new MockModule()));\n\n    injector.getInstance(GuiceJpaInitializer.class);\n\n\n    helper = injector.getInstance(OrmTestHelper.class);\n\n    amc = injector.getInstance(AmbariManagementController.class);\n\n    Field field = AmbariServer.class.getDeclaredField(\"clusterController\");\n    field.setAccessible(true);\n    field.set(null, amc);\n\n    stackDAO = injector.getInstance(StackDAO.class);\n    upgradeDao = injector.getInstance(UpgradeDAO.class);\n    repoVersionDao = injector.getInstance(RepositoryVersionDAO.class);\n\n    AmbariEventPublisher publisher = createNiceMock(AmbariEventPublisher.class);\n    replay(publisher);\n    ViewRegistry.initInstance(new ViewRegistry(publisher));\n\n    StackEntity stackEntity = stackDAO.find(\"HDP\", \"2.1.1\");\n\n    RepositoryVersionEntity repoVersionEntity = new RepositoryVersionEntity();\n    repoVersionEntity.setDisplayName(\"My New Version 1\");\n    repoVersionEntity.setOperatingSystems(\"\");\n    repoVersionEntity.setStack(stackEntity);\n    repoVersionEntity.setUpgradePackage(\"upgrade_test\");\n    repoVersionEntity.setVersion(\"2.2.2.1\");\n    repoVersionDao.create(repoVersionEntity);\n\n    repoVersionEntity = new RepositoryVersionEntity();\n    repoVersionEntity.setDisplayName(\"My New Version 2\");\n    repoVersionEntity.setOperatingSystems(\"\");\n    repoVersionEntity.setStack(stackEntity);\n    repoVersionEntity.setUpgradePackage(\"upgrade_test\");\n    repoVersionEntity.setVersion(\"2.2.2.2\");\n    repoVersionDao.create(repoVersionEntity);\n\n    repoVersionEntity = new RepositoryVersionEntity();\n    repoVersionEntity.setDisplayName(\"For Stack Version 2.2.0\");\n    repoVersionEntity.setOperatingSystems(\"\");\n    repoVersionEntity.setStack(stackDAO.find(\"HDP\", \"2.2.0\"));\n    repoVersionEntity.setUpgradePackage(\"upgrade_test\");\n    repoVersionEntity.setVersion(\"2.2.0.0\");\n    repoVersionDao.create(repoVersionEntity);\n\n    clusters = injector.getInstance(Clusters.class);\n\n    StackId stackId = new StackId(\"HDP-2.1.1\");\n    clusters.addCluster(\"c1\", stackId);\n    Cluster cluster = clusters.getCluster(\"c1\");\n\n    helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());\n    cluster.createClusterVersion(stackId, stackId.getStackVersion(), \"admin\", RepositoryVersionState.UPGRADING);\n    cluster.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);\n\n    clusters.addHost(\"h1\");\n    Host host = clusters.getHost(\"h1\");\n    Map<String, String> hostAttributes = new HashMap<String, String>();\n    hostAttributes.put(\"os_family\", \"redhat\");\n    hostAttributes.put(\"os_release_version\", \"6.3\");\n    host.setHostAttributes(hostAttributes);\n    host.setState(HostState.HEALTHY);\n    host.persist();\n\n    clusters.mapHostToCluster(\"h1\", \"c1\");\n\n    // add a single ZK server\n    Service service = cluster.addService(\"ZOOKEEPER\");\n    service.setDesiredStackVersion(cluster.getDesiredStackVersion());\n    service.persist();\n\n    ServiceComponent component = service.addServiceComponent(\"ZOOKEEPER_SERVER\");\n    ServiceComponentHost sch = component.addServiceComponentHost(\"h1\");\n    sch.setVersion(\"2.2.2.1\");\n\n    component = service.addServiceComponent(\"ZOOKEEPER_CLIENT\");\n    sch = component.addServiceComponentHost(\"h1\");\n    sch.setVersion(\"2.2.2.1\");\n  }","commit_id":"f23f12618223d556a79c24fc061d21c95b821b52","url":"https://github.com/apache/ambari"},{"original_method":"ApplicationServerService(final List<ServiceActivator> extraServices, final Bootstrap.Configuration configuration) {\n        this.extraServices = extraServices;\n        this.configuration = configuration;\n    }","id":68914,"modified_method":"ApplicationServerService(final List<ServiceActivator> extraServices, final Bootstrap.Configuration configuration) {\n        this.extraServices = extraServices;\n        this.configuration = configuration;\n        startTime = configuration.getStartTime();\n    }","commit_id":"7f0b4bbfa8a442181a8367550f463d8c5d3f992c","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void start(final StartContext context) throws StartException {\n        log.infof(\"JBoss AS %s \\\"%s\\\" starting\", Version.AS_VERSION, Version.AS_RELEASE_CODENAME);\n        final ServiceContainer container = context.getController().getServiceContainer();\n        final TrackingServiceTarget serviceTarget = new TrackingServiceTarget(container.subTarget());\n        serviceTarget.addDependency(context.getController().getName());\n        Bootstrap.Configuration configuration = this.configuration;\n        serviceTarget\n                .addService(Services.JBOSS_SERVER_CONTROLLER, new ServerControllerService(configuration))\n                .install();\n        final ServerEnvironment serverEnvironment = configuration.getServerEnvironment();\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContext() {\n            public ServiceTarget getServiceTarget() {\n                return serviceTarget;\n            }\n\n            public ServiceRegistry getServiceRegistry() {\n                return container;\n            }\n        };\n\n        for(ServiceActivator activator : extraServices) {\n            activator.activate(serviceActivatorContext);\n        }\n\n        // TODO: decide the fate of these\n\n        // Graceful shutdown\n        serviceTarget.addService(ShutdownHandler.SERVICE_NAME, new ShutdownHandlerImpl()).install();\n\n        // Add server environment\n        ServerEnvironmentService.addService(serverEnvironment, serviceTarget);\n\n        // Add environment paths\n        AbsolutePathService.addService(ServerEnvironment.HOME_DIR, serverEnvironment.getHomeDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_BASE_DIR, serverEnvironment.getServerBaseDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_CONFIG_DIR, serverEnvironment.getServerConfigurationDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_DATA_DIR, serverEnvironment.getServerDataDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_LOG_DIR, serverEnvironment.getServerLogDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_TEMP_DIR, serverEnvironment.getServerTempDir().getAbsolutePath(), serviceTarget);\n\n        // Add system paths\n        AbsolutePathService.addService(\"user.dir\", System.getProperty(\"user.dir\"), serviceTarget);\n        AbsolutePathService.addService(\"user.home\", System.getProperty(\"user.home\"), serviceTarget);\n        AbsolutePathService.addService(\"java.home\", System.getProperty(\"java.home\"), serviceTarget);\n\n        // Socket binding manager\n        serviceTarget.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,\n            new SocketBindingManagerService(configuration.getPortOffset()))\n            .setInitialMode(ServiceController.Mode.ON_DEMAND)\n            .install();\n        services = new ArrayList<ServiceName>(serviceTarget.getSet());\n        if (log.isDebugEnabled()) {\n            final long nanos = context.getElapsedTime();\n            log.debugf(\"JBoss AS root service started in %d.%06d ms\", Long.valueOf(nanos / 1000000L), Long.valueOf(nanos % 1000000L));\n        }\n    }","id":68915,"modified_method":"public synchronized void start(final StartContext context) throws StartException {\n        log.infof(\"JBoss AS %s \\\"%s\\\" starting\", Version.AS_VERSION, Version.AS_RELEASE_CODENAME);\n        final ServiceController<?> myController = context.getController();\n        final ServiceContainer container = myController.getServiceContainer();\n        long startTime = this.startTime;\n        if (startTime == -1) {\n            startTime = System.currentTimeMillis();\n        } else {\n            this.startTime = -1;\n        }\n        final BootstrapListener bootstrapListener = new BootstrapListener(container, startTime);\n        container.addListener(bootstrapListener);\n        myController.addListener(bootstrapListener);\n        final TrackingServiceTarget serviceTarget = new TrackingServiceTarget(container.subTarget());\n        serviceTarget.addDependency(myController.getName());\n        Bootstrap.Configuration configuration = this.configuration;\n        serviceTarget\n                .addService(Services.JBOSS_SERVER_CONTROLLER, new ServerControllerService(configuration))\n                .install();\n        final ServerEnvironment serverEnvironment = configuration.getServerEnvironment();\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContext() {\n            public ServiceTarget getServiceTarget() {\n                return serviceTarget;\n            }\n\n            public ServiceRegistry getServiceRegistry() {\n                return container;\n            }\n        };\n\n        for(ServiceActivator activator : extraServices) {\n            activator.activate(serviceActivatorContext);\n        }\n\n        // TODO: decide the fate of these\n\n        // Graceful shutdown\n        serviceTarget.addService(ShutdownHandler.SERVICE_NAME, new ShutdownHandlerImpl()).install();\n\n        // Add server environment\n        ServerEnvironmentService.addService(serverEnvironment, serviceTarget);\n\n        // Add environment paths\n        AbsolutePathService.addService(ServerEnvironment.HOME_DIR, serverEnvironment.getHomeDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_BASE_DIR, serverEnvironment.getServerBaseDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_CONFIG_DIR, serverEnvironment.getServerConfigurationDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_DATA_DIR, serverEnvironment.getServerDataDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_LOG_DIR, serverEnvironment.getServerLogDir().getAbsolutePath(), serviceTarget);\n        AbsolutePathService.addService(ServerEnvironment.SERVER_TEMP_DIR, serverEnvironment.getServerTempDir().getAbsolutePath(), serviceTarget);\n\n        // Add system paths\n        AbsolutePathService.addService(\"user.dir\", System.getProperty(\"user.dir\"), serviceTarget);\n        AbsolutePathService.addService(\"user.home\", System.getProperty(\"user.home\"), serviceTarget);\n        AbsolutePathService.addService(\"java.home\", System.getProperty(\"java.home\"), serviceTarget);\n\n        // Socket binding manager\n        serviceTarget.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,\n            new SocketBindingManagerService(configuration.getPortOffset()))\n            .setInitialMode(ServiceController.Mode.ON_DEMAND)\n            .install();\n        services = new ArrayList<ServiceName>(serviceTarget.getSet());\n        if (log.isDebugEnabled()) {\n            final long nanos = context.getElapsedTime();\n            log.debugf(\"JBoss AS root service started in %d.%06d ms\", Long.valueOf(nanos / 1000000L), Long.valueOf(nanos % 1000000L));\n        }\n    }","commit_id":"7f0b4bbfa8a442181a8367550f463d8c5d3f992c","url":"https://github.com/wildfly/wildfly"},{"original_method":"public AsyncFuture<ServerController> start(final Configuration configuration, final List<ServiceActivator> extraServices) {\n        if (configuration == null) {\n            throw new IllegalArgumentException(\"configuration is null\");\n        }\n        final ModuleLoader moduleLoader = configuration.getModuleLoader();\n        final ServerEnvironment serverEnvironment = configuration.getServerEnvironment();\n        final String name = serverEnvironment.getServerName();\n        final ServerConfigurationPersister configurationPersister = configuration.getConfigurationPersister();\n        if (moduleLoader == null) {\n            throw new IllegalArgumentException(\"moduleLoader is null\");\n        }\n        if (name == null) {\n            throw new IllegalArgumentException(\"name is null\");\n        }\n        if (serverEnvironment == null) {\n            throw new IllegalArgumentException(\"serverEnvironment is null\");\n        }\n        if (configurationPersister == null) {\n            throw new IllegalArgumentException(\"configurationPersister is null\");\n        }\n        final ServiceContainer container = ServiceContainer.Factory.create(\"jboss-as-server\");\n        final StartTask future = new StartTask(container);\n        final ServiceTarget tracker = container.subTarget();\n        final Service<?> applicationServerService = new ApplicationServerService(extraServices, configuration);\n        container.addListener(new BootstrapListener(future, container, configuration.getStartTime()));\n        tracker.addService(Services.JBOSS_AS, applicationServerService)\n            .install();\n        return future;\n    }","id":68916,"modified_method":"public AsyncFuture<ServerController> start(final Configuration configuration, final List<ServiceActivator> extraServices) {\n        if (configuration == null) {\n            throw new IllegalArgumentException(\"configuration is null\");\n        }\n        final ModuleLoader moduleLoader = configuration.getModuleLoader();\n        final ServerEnvironment serverEnvironment = configuration.getServerEnvironment();\n        final String name = serverEnvironment.getServerName();\n        final ServerConfigurationPersister configurationPersister = configuration.getConfigurationPersister();\n        if (moduleLoader == null) {\n            throw new IllegalArgumentException(\"moduleLoader is null\");\n        }\n        if (name == null) {\n            throw new IllegalArgumentException(\"name is null\");\n        }\n        if (serverEnvironment == null) {\n            throw new IllegalArgumentException(\"serverEnvironment is null\");\n        }\n        if (configurationPersister == null) {\n            throw new IllegalArgumentException(\"configurationPersister is null\");\n        }\n        final FutureServerController future = new FutureServerController(container);\n        final ServiceTarget tracker = container.subTarget();\n        final Service<?> applicationServerService = new ApplicationServerService(extraServices, configuration);\n        tracker.addService(Services.JBOSS_AS, applicationServerService)\n            .install();\n        final ServiceController<?> rootService = container.getRequiredService(Services.JBOSS_AS);\n        rootService.addListener(new AbstractServiceListener<Object>() {\n            public void serviceStarted(final ServiceController<?> controller) {\n                controller.removeListener(this);\n                final ServiceController<?> controllerServiceController = controller.getServiceContainer().getRequiredService(Services.JBOSS_SERVER_CONTROLLER);\n                controllerServiceController.addListener(new AbstractServiceListener<Object>() {\n                    public void serviceStarted(final ServiceController<?> controller) {\n                        future.done((ServerController) controller.getValue());\n                        controller.removeListener(this);\n                    }\n\n                    public void serviceFailed(final ServiceController<?> controller, final StartException reason) {\n                        future.failed(reason);\n                        controller.removeListener(this);\n                    }\n\n                    public void serviceRemoved(final ServiceController<?> controller) {\n                        future.failed(new ServiceNotFoundException(\"Server controller service was removed\"));\n                        controller.removeListener(this);\n                    }\n                });\n            }\n\n            public void serviceFailed(final ServiceController<?> controller, final StartException reason) {\n                controller.removeListener(this);\n                future.failed(reason);\n            }\n\n            public void serviceRemoved(final ServiceController<?> controller) {\n                controller.removeListener(this);\n                future.failed(new ServiceNotFoundException(\"Root service was removed\"));\n            }\n        });\n        return future;\n    }","commit_id":"7f0b4bbfa8a442181a8367550f463d8c5d3f992c","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n   * Starts a Program\n   *\n   * @param token\n   * @param descriptor\n   */\n  @Override\n  public synchronized RunIdentifier start(AuthToken token, ProgramDescriptor descriptor)\n    throws AppFabricServiceException, TException {\n\n    try {\n      ProgramId id = descriptor.getIdentifier();\n      ProgramRuntimeService.RuntimeInfo existingRuntimeInfo = findRuntimeInfo(id);\n      Preconditions.checkArgument(existingRuntimeInfo == null, UserMessages.getMessage(UserErrors.ALREADY_RUNNING));\n      Id.Program programId = Id.Program.from(id.getAccountId(), id.getApplicationId(), id.getFlowId());\n\n      Program program = store.loadProgram(programId, entityTypeToType(id));\n\n      BasicArguments userArguments = new BasicArguments();\n      if (descriptor.isSetArguments()) {\n        userArguments = new BasicArguments(descriptor.getArguments());\n      }\n\n      ProgramRuntimeService.RuntimeInfo runtimeInfo =\n        runtimeService.run(program, new SimpleProgramOptions(id.getFlowId(),\n                                                             new BasicArguments(),\n                                                             userArguments));\n      store.setStart(programId, runtimeInfo.getController().getRunId().getId(),\n                     TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS));\n      return new RunIdentifier(runtimeInfo.getController().getRunId().toString());\n\n    } catch (Throwable throwable) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(throwable));\n      throw new AppFabricServiceException(throwable.getMessage());\n    }\n  }","id":68917,"modified_method":"/**\n   * Starts a Program\n   *\n   * @param token\n   * @param descriptor\n   */\n  @Override\n  public synchronized RunIdentifier start(AuthToken token, ProgramDescriptor descriptor)\n    throws AppFabricServiceException, TException {\n\n    try {\n      ProgramId id = descriptor.getIdentifier();\n      ProgramRuntimeService.RuntimeInfo existingRuntimeInfo = findRuntimeInfo(id);\n      Preconditions.checkArgument(existingRuntimeInfo == null, UserMessages.getMessage(UserErrors.ALREADY_RUNNING));\n      final Id.Program programId = Id.Program.from(id.getAccountId(), id.getApplicationId(), id.getFlowId());\n\n      Program program = store.loadProgram(programId, entityTypeToType(id));\n\n      BasicArguments userArguments = new BasicArguments();\n      if (descriptor.isSetArguments()) {\n        userArguments = new BasicArguments(descriptor.getArguments());\n      }\n\n      ProgramRuntimeService.RuntimeInfo runtimeInfo =\n        runtimeService.run(program, new SimpleProgramOptions(id.getFlowId(),\n                                                             new BasicArguments(),\n                                                             userArguments));\n      ProgramController controller = runtimeInfo.getController();\n      final String runId = controller.getRunId().getId();\n\n      controller.addListener(new AbstractListener() {\n        @Override\n        public void stopped() {\n          store.setStop(programId, runId,\n                        TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS),\n                        ProgramController.State.STOPPED.toString());\n        }\n\n        @Override\n        public void error(Throwable cause) {\n          LOG.info(\"Program stopped with error {}, {}\", programId, runId, cause);\n          store.setStop(programId, runId,\n                        TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS),\n                        ProgramController.State.ERROR.toString());\n        }\n      }, Threads.SAME_THREAD_EXECUTOR);\n\n\n      store.setStart(programId, runId, TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS));\n      return new RunIdentifier(runId);\n\n    } catch (Throwable throwable) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(throwable));\n      throw new AppFabricServiceException(throwable.getMessage());\n    }\n  }","commit_id":"571fc023745d9eec6b5087036e304451f81441a0","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Stops a Program\n   *\n   * @param token\n   * @param identifier\n   */\n  @Override\n  public synchronized RunIdentifier stop(AuthToken token, ProgramId identifier)\n    throws AppFabricServiceException, TException {\n    try {\n      ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(identifier);\n      Preconditions.checkNotNull(runtimeInfo, UserMessages.getMessage(UserErrors.RUNTIME_INFO_NOT_FOUND),\n              identifier.getApplicationId(), identifier.getFlowId());\n      ProgramController controller = runtimeInfo.getController();\n      RunId runId = controller.getRunId();\n      controller.stop().get();\n      store.setStop(runtimeInfo.getProgramId(), runId.getId(),\n                    TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS),\n                    runtimeInfo.getController().getState().toString());\n      return new RunIdentifier(runId.getId());\n    } catch (Throwable throwable) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(throwable));\n      throw new AppFabricServiceException(throwable.getMessage());\n    }\n  }","id":68918,"modified_method":"/**\n   * Stops a Program\n   *\n   * @param token\n   * @param identifier\n   */\n  @Override\n  public synchronized RunIdentifier stop(AuthToken token, ProgramId identifier)\n    throws AppFabricServiceException, TException {\n    try {\n      ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(identifier);\n      Preconditions.checkNotNull(runtimeInfo, UserMessages.getMessage(UserErrors.RUNTIME_INFO_NOT_FOUND),\n              identifier.getApplicationId(), identifier.getFlowId());\n      ProgramController controller = runtimeInfo.getController();\n      RunId runId = controller.getRunId();\n      controller.stop().get();\n      return new RunIdentifier(runId.getId());\n    } catch (Throwable throwable) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(throwable));\n      throw new AppFabricServiceException(throwable.getMessage());\n    }\n  }","commit_id":"571fc023745d9eec6b5087036e304451f81441a0","url":"https://github.com/caskdata/cdap"},{"original_method":"private AutoInstallIntegration() {\n    }","id":68919,"modified_method":"AutoInstallIntegration() {\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ServiceController<?> controller = context.getController();\n        log.debugf(\"Starting: %s in mode %s\", controller.getName(), controller.getMode());\n        final Map<ServiceName, OSGiModule> pendingServices = new LinkedHashMap<ServiceName, OSGiModule>();\n        try {\n            final BundleManagerService bundleManager = injectedBundleManager.getValue();\n            final ServiceContainer serviceContainer = context.getController().getServiceContainer();\n            final ServiceTarget serviceTarget = context.getChildTarget();\n            final File modulesDir = injectedEnvironment.getValue().getModulesDir();\n            final File bundlesDir = new File(modulesDir.getPath() + \"/../bundles\").getCanonicalFile();\n\n            if (bundlesDir.isDirectory() == false)\n                throw new IllegalStateException(\"Cannot find bundles directory: \" + bundlesDir);\n\n            for (OSGiModule moduleMetaData : injectedSubsystemState.getValue().getModules()) {\n                ServiceName serviceName;\n                ModuleIdentifier identifier = moduleMetaData.getIdentifier();\n                File bundleFile = getRepositoryEntry(bundlesDir, identifier);\n                if (bundleFile != null) {\n                    URL url = bundleFile.toURI().toURL();\n                    BundleInfo info = BundleInfo.createBundleInfo(url);\n                    Deployment dep = DeploymentFactory.createDeployment(info);\n                    Integer startLevel = moduleMetaData.getStartLevel();\n                    if (startLevel != null)\n                        dep.setStartLevel(startLevel.intValue());\n                    serviceName = bundleManager.installBundle(serviceTarget, dep);\n                } else {\n                    ModuleLoader moduleLoader = Module.getBootModuleLoader();\n                    Module module = moduleLoader.loadModule(identifier);\n                    OSGiMetaData metadata = getModuleMetadata(module);\n                    serviceName = bundleManager.registerModule(serviceTarget, module, metadata);\n                }\n                pendingServices.put(serviceName, moduleMetaData);\n            }\n\n            // Install a service that has a dependency on all pending bundle INSTALLED services\n            ServiceName servicesInstalled = Services.AUTOINSTALL_PROVIDER.append(\"INSTALLED\");\n            ServiceBuilder<Void> builder = serviceTarget.addService(servicesInstalled, new AbstractService<Void>() {\n                public void start(StartContext context) throws StartException {\n                    log.debugf(\"Auto bundles installed\");\n                }\n            });\n            builder.addDependencies(pendingServices.keySet());\n            builder.install();\n\n            // Install a service that starts the bundles\n            builder = serviceTarget.addService(Services.AUTOINSTALL_PROVIDER_COMPLETE, new AbstractService<Void>() {\n                public void start(StartContext context) throws StartException {\n                    for (ServiceName serviceName : pendingServices.keySet()) {\n                        OSGiModule moduleMetaData = pendingServices.get(serviceName);\n                        if (moduleMetaData.getStartLevel() != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            ServiceController<Bundle> controller = (ServiceController<Bundle>) serviceContainer.getRequiredService(serviceName);\n                            Bundle bundle = controller.getValue();\n                            StartLevel startLevel = injectedStartLevel.getValue();\n                            startLevel.setBundleStartLevel(bundle, moduleMetaData.getStartLevel());\n                            try {\n                                bundle.start();\n                            } catch (BundleException ex) {\n                                log.errorf(ex, \"Cannot start bundle: %s\", bundle);\n                            }\n                        }\n                    }\n                    log.debugf(\"Auto bundles bundles started\");\n                }\n            });\n            builder.addDependencies(servicesInstalled);\n            builder.install();\n\n        } catch (Exception ex) {\n            throw new StartException(\"Failed to create auto install list\", ex);\n        }\n    }","id":68920,"modified_method":"@Override\n    public void start(StartContext context) throws StartException {\n        serviceController = context.getController();\n        log.debugf(\"Starting: %s in mode %s\", serviceController.getName(), serviceController.getMode());\n\n        final Map<ServiceName, OSGiModule> pendingServices = new LinkedHashMap<ServiceName, OSGiModule>();\n        try {\n            final BundleManagerService bundleManager = injectedBundleManager.getValue();\n            final ServiceContainer serviceContainer = serviceController.getServiceContainer();\n            serviceTarget = context.getChildTarget();\n\n            final File modulesDir = injectedEnvironment.getValue().getModulesDir();\n            bundlesDir = new File(modulesDir.getPath() + \"/../bundles\").getCanonicalFile();\n\n            if (bundlesDir.isDirectory() == false)\n                throw new IllegalStateException(\"Cannot find bundles directory: \" + bundlesDir);\n\n            injectedSubsystemState.getValue().addObserver(this);\n\n            for (OSGiModule moduleMetaData : injectedSubsystemState.getValue().getModules()) {\n                ServiceName serviceName = installModule(bundleManager, moduleMetaData);\n                pendingServices.put(serviceName, moduleMetaData);\n            }\n\n            // Install a service that has a dependency on all pending bundle INSTALLED services\n            ServiceName servicesInstalled = Services.AUTOINSTALL_PROVIDER.append(\"INSTALLED\");\n            ServiceBuilder<Void> builder = serviceTarget.addService(servicesInstalled, new AbstractService<Void>() {\n                public void start(StartContext context) throws StartException {\n                    log.debugf(\"Auto bundles installed\");\n                }\n            });\n            builder.addDependencies(pendingServices.keySet());\n            builder.install();\n\n            // Install a service that starts the bundles\n            builder = serviceTarget.addService(Services.AUTOINSTALL_PROVIDER_COMPLETE, new AbstractService<Void>() {\n                public void start(StartContext context) throws StartException {\n                    for (ServiceName serviceName : pendingServices.keySet()) {\n                        OSGiModule moduleMetaData = pendingServices.get(serviceName);\n                        startBundle(serviceContainer, serviceName, moduleMetaData);\n                    }\n                    log.debugf(\"Auto bundles bundles started\");\n                }\n            });\n            builder.addDependencies(servicesInstalled);\n            builder.install();\n\n        } catch (Exception ex) {\n            throw new StartException(\"Failed to create auto install list\", ex);\n        }\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void initialize(ExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n        final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(OSGiSubsystemProviders.SUBSYSTEM);\n        registration.registerOperationHandler(ADD, OSGiSubsystemAdd.INSTANCE, OSGiSubsystemAdd.INSTANCE, false);\n        registration.registerOperationHandler(DESCRIBE, OSGiSubsystemDescribeHandler.INSTANCE, OSGiSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n\n        // Configuration Admin Setings\n        ManagementResourceRegistration casConfigs = registration.registerSubModel(PathElement.pathElement(CONFIGURATION), OSGiSubsystemProviders.OSGI_CONFIGURATION_RESOURCE);\n        casConfigs.registerOperationHandler(ModelDescriptionConstants.ADD, OSGiCasConfigAdd.INSTANCE, OSGiCasConfigAdd.INSTANCE, false);\n        casConfigs.registerOperationHandler(ModelDescriptionConstants.REMOVE, OSGiCasConfigRemove.INSTANCE, OSGiCasConfigRemove.INSTANCE, false);\n\n        // Framework Properties\n        ManagementResourceRegistration properties = registration.registerSubModel(PathElement.pathElement(PROPERTY), OSGiSubsystemProviders.OSGI_PROPERTY_RESOURCE);\n        properties.registerOperationHandler(ModelDescriptionConstants.ADD, OSGiPropertyAdd.INSTANCE, OSGiPropertyAdd.INSTANCE, false);\n        properties.registerOperationHandler(ModelDescriptionConstants.REMOVE, OSGiPropertyRemove.INSTANCE, OSGiPropertyRemove.INSTANCE, false);\n\n        // Pre loaded modules\n        ManagementResourceRegistration modules = registration.registerSubModel(PathElement.pathElement(MODULE), OSGiSubsystemProviders.OSGI_MODULE_RESOURCE);\n        modules.registerOperationHandler(ModelDescriptionConstants.ADD, OSGiModuleAdd.INSTANCE, OSGiModuleAdd.INSTANCE, false);\n        modules.registerOperationHandler(ModelDescriptionConstants.REMOVE, OSGiModuleRemove.INSTANCE, OSGiModuleRemove.INSTANCE, false);\n\n        subsystem.registerXMLElementWriter(parser);\n    }","id":68921,"modified_method":"@Override\n    public void initialize(ExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n        final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(OSGiSubsystemProviders.SUBSYSTEM);\n        registration.registerOperationHandler(ADD, OSGiSubsystemAdd.INSTANCE, OSGiSubsystemAdd.INSTANCE, false);\n        registration.registerOperationHandler(DESCRIBE, OSGiSubsystemDescribeHandler.INSTANCE, OSGiSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n        registration.registerReadWriteAttribute(CommonAttributes.ACTIVATION, null, new ActivationWriteHandler(), Storage.CONFIGURATION);\n\n        // Configuration Admin Setings\n        ManagementResourceRegistration casConfigs = registration.registerSubModel(PathElement.pathElement(CONFIGURATION), OSGiSubsystemProviders.OSGI_CONFIGURATION_RESOURCE);\n        casConfigs.registerOperationHandler(ModelDescriptionConstants.ADD, OSGiCasConfigAdd.INSTANCE, OSGiCasConfigAdd.INSTANCE, false);\n        casConfigs.registerOperationHandler(ModelDescriptionConstants.REMOVE, OSGiCasConfigRemove.INSTANCE, OSGiCasConfigRemove.INSTANCE, false);\n\n        // Framework Properties\n        ManagementResourceRegistration properties = registration.registerSubModel(PathElement.pathElement(PROPERTY), OSGiSubsystemProviders.OSGI_PROPERTY_RESOURCE);\n        properties.registerOperationHandler(ModelDescriptionConstants.ADD, OSGiPropertyAdd.INSTANCE, OSGiPropertyAdd.INSTANCE, false);\n        properties.registerOperationHandler(ModelDescriptionConstants.REMOVE, OSGiPropertyRemove.INSTANCE, OSGiPropertyRemove.INSTANCE, false);\n\n        // Pre loaded modules\n        ManagementResourceRegistration modules = registration.registerSubModel(PathElement.pathElement(MODULE), OSGiSubsystemProviders.OSGI_MODULE_RESOURCE);\n        modules.registerOperationHandler(ModelDescriptionConstants.ADD, OSGiModuleAdd.INSTANCE, OSGiModuleAdd.INSTANCE, false);\n        modules.registerOperationHandler(ModelDescriptionConstants.REMOVE, OSGiModuleRemove.INSTANCE, OSGiModuleRemove.INSTANCE, false);\n\n        subsystem.registerXMLElementWriter(parser);\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Dictionary<String, String> putConfiguration(String pid, Dictionary<String, String> props) {\n        synchronized (configurations) {\n            return configurations.put(pid, new UnmodifiableDictionary<String, String>(props));\n        }\n    }","id":68922,"modified_method":"public Dictionary<String, String> putConfiguration(String pid, Dictionary<String, String> props) {\n        try {\n            synchronized (configurations) {\n                return configurations.put(pid, new UnmodifiableDictionary<String, String>(props));\n            }\n        } finally {\n            notifyObservers(new ChangeEvent(ChangeType.CONFIG, false, pid));\n        }\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"void setActivation(Activation activation) {\n        this.activationPolicy = activation;\n    }","id":68923,"modified_method":"void setActivation(Activation activation) {\n        if (activationPolicy == activation)\n            return;\n\n        try {\n            activationPolicy = activation;\n        } finally {\n            notifyObservers(new ChangeEvent(ChangeType.ACTIVATION, false, activation.name()));\n        }\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"OSGiModule(ModuleIdentifier identifier, Integer startlevel) {\n            this.identifier = identifier;\n            this.startlevel = startlevel;\n        }","id":68924,"modified_method":"public OSGiModule(ModuleIdentifier identifier, Integer startlevel) {\n            this.identifier = identifier;\n            this.startlevel = startlevel;\n        }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"Object setProperty(String name, Object value) {\n        if (value == null)\n            return properties.remove(name);\n        else\n            return properties.put(name, value);\n    }","id":68925,"modified_method":"Object setProperty(String name, Object value) {\n        try {\n            if (value == null)\n                return properties.remove(name);\n            else\n                return properties.put(name, value);\n        } finally {\n            notifyObservers(new ChangeEvent(ChangeType.PROPERTY, value == null, name));\n        }\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Dictionary<String, String> removeConfiguration(String pid) {\n        synchronized (configurations) {\n            return configurations.remove(pid);\n        }\n    }","id":68926,"modified_method":"public Dictionary<String, String> removeConfiguration(String pid) {\n        try {\n            synchronized (configurations) {\n                return configurations.remove(pid);\n            }\n        } finally {\n            notifyObservers(new ChangeEvent(ChangeType.CONFIG, true, pid));\n        }\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"public OSGiModule removeModule(String id) {\n        ModuleIdentifier identifier = ModuleIdentifier.fromString(id);\n        synchronized (modules) {\n            for (Iterator<OSGiModule> it = modules.iterator(); it.hasNext(); ) {\n                OSGiModule module = it.next();\n                if (module.getIdentifier().equals(identifier)) {\n                    it.remove();\n                    return module;\n                }\n            }\n            return null;\n        }\n    }","id":68927,"modified_method":"public OSGiModule removeModule(String id) {\n        ModuleIdentifier identifier = ModuleIdentifier.fromString(id);\n        synchronized (modules) {\n            for (Iterator<OSGiModule> it = modules.iterator(); it.hasNext(); ) {\n                OSGiModule module = it.next();\n                if (module.getIdentifier().equals(identifier)) {\n                    it.remove();\n                    notifyObservers(new ChangeEvent(ChangeType.MODULE, true, identifier.toString()));\n                    return module;\n                }\n            }\n            return null;\n        }\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void addModule(OSGiModule module) {\n        modules.add(module);\n    }","id":68928,"modified_method":"public void addModule(OSGiModule module) {\n        modules.add(module);\n        notifyObservers(new ChangeEvent(ChangeType.MODULE, false, module.getIdentifier().toString()));\n    }","commit_id":"b8e7368f2d1576d29511a4374e024799ae46c480","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static boolean runProguardIfNecessary(@NotNull AndroidFacet facet,\n                                                @NotNull File classesDir,\n                                                @NotNull AndroidPlatform platform,\n                                                @NotNull Set<String> externalJars,\n                                                @NotNull CompileContext context,\n                                                @NotNull String outputJarPath,\n                                                @NotNull String proguardCfgPath,\n                                                boolean includeSystemProguardCfg,\n                                                @NotNull AndroidFileSetStorage proguardStateStorage) throws IOException {\n    final Module module = facet.getModule();\n\n    final File proguardCfgFile = new File(proguardCfgPath);\n    if (!proguardCfgFile.exists()) {\n      context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR,\n                                                 AndroidJpsBundle.message(\"android.jps.cannot.find.file\", proguardCfgPath)));\n      return false;\n    }\n\n    final File mainContentRoot = AndroidJpsUtil.getMainContentRoot(facet);\n    if (mainContentRoot == null) {\n      context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, AndroidJpsBundle\n        .message(\"android.jps.errors.main.content.root.not.found\", module.getName())));\n      return false;\n    }\n\n    final ProjectPaths paths = context.getProjectPaths();\n    final Set<String> classFilesDirs = new HashSet<String>();\n    final Set<String> libClassFilesDirs = new HashSet<String>();\n\n    AndroidJpsUtil.addSubdirectories(classesDir, classFilesDirs);\n\n    for (String depPath : AndroidJpsUtil.getClassdirsOfDependentModulesAndPackagesLibraries(paths, module)) {\n      final File depFile = new File(depPath);\n      if (depFile.isDirectory()) {\n        AndroidJpsUtil.addSubdirectories(depFile, classFilesDirs);\n      }\n      else {\n        AndroidJpsUtil.addSubdirectories(depFile.getParentFile(), libClassFilesDirs);\n      }\n    }\n\n    final String logsDirOsPath =\n          FileUtil.toSystemDependentName(mainContentRoot.getPath() + '/' + AndroidCommonUtils.DIRECTORY_FOR_LOGS_NAME);\n\n    final Set<String> allFiles = new HashSet<String>();\n    allFiles.addAll(classFilesDirs);\n    allFiles.addAll(libClassFilesDirs);\n    allFiles.addAll(externalJars);\n\n    final AndroidFileSetState newState = new AndroidFileSetState(allFiles, AndroidJpsUtil.CLASSES_AND_JARS_FILTER, true);\n    final AndroidFileSetState oldState = proguardStateStorage.getState(module.getName());\n    if (context.getTimestamps().getStamp(proguardCfgFile) == proguardCfgFile.lastModified() &&\n        newState.equalsTo(oldState)) {\n      return true;\n    }\n\n    final String[] classFilesDirOsPaths = ArrayUtil.toStringArray(classFilesDirs);\n    final String[] libClassFilesDirOsPaths = ArrayUtil.toStringArray(libClassFilesDirs);\n    final String[] externalJarOsPaths = ArrayUtil.toStringArray(externalJars);\n    final String inputJarOsPath = AndroidCommonUtils.buildTempInputJar(classFilesDirOsPaths, libClassFilesDirOsPaths);\n\n    final File logsDir = new File(logsDirOsPath);\n    if (!logsDir.exists()) {\n      if (!logsDir.mkdirs()) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR,\n                                                   AndroidJpsBundle.message(\"android.jps.cannot.create.directory\", logsDirOsPath)));\n        return false;\n      }\n    }\n\n    context.processMessage(new ProgressMessage(AndroidJpsBundle.message(\"android.jps.progress.proguard\", module.getName())));\n\n    final Map<AndroidCompilerMessageKind, List<String>> messages =\n      AndroidCommonUtils.launchProguard(platform.getTarget(), platform.getSdkToolsRevision(), platform.getSdk().getSdkPath(),\n                                        proguardCfgPath, includeSystemProguardCfg, inputJarOsPath, externalJarOsPaths, outputJarPath,\n                                        logsDirOsPath);\n    AndroidJpsUtil.addMessages(context, messages, BUILDER_NAME, module.getName());\n    final boolean success = messages.get(AndroidCompilerMessageKind.ERROR).isEmpty();\n\n    proguardStateStorage.update(module.getName(), success ? newState : null);\n\n    if (success) {\n      context.getTimestamps().saveStamp(proguardCfgFile, proguardCfgFile.lastModified());\n    }\n    return success;\n  }","id":68929,"modified_method":"private static boolean runProguardIfNecessary(@NotNull AndroidFacet facet,\n                                                @NotNull File classesDir,\n                                                @NotNull AndroidPlatform platform,\n                                                @NotNull Set<String> externalJars,\n                                                @NotNull CompileContext context,\n                                                @NotNull String outputJarPath,\n                                                @NotNull String proguardCfgPath,\n                                                boolean includeSystemProguardCfg,\n                                                @NotNull AndroidFileSetStorage proguardStateStorage) throws IOException {\n    final Module module = facet.getModule();\n\n    final File proguardCfgFile = new File(proguardCfgPath);\n    if (!proguardCfgFile.exists()) {\n      context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR,\n                                                 AndroidJpsBundle.message(\"android.jps.cannot.find.file\", proguardCfgPath)));\n      return false;\n    }\n\n    final File mainContentRoot = AndroidJpsUtil.getMainContentRoot(facet);\n    if (mainContentRoot == null) {\n      context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, AndroidJpsBundle\n        .message(\"android.jps.errors.main.content.root.not.found\", module.getName())));\n      return false;\n    }\n\n    final ProjectPaths paths = context.getProjectPaths();\n    final Set<String> classFilesDirs = new HashSet<String>();\n    final Set<String> libClassFilesDirs = new HashSet<String>();\n    final Set<String> outputDirs = new HashSet<String>();\n\n    AndroidJpsUtil.addSubdirectories(classesDir, classFilesDirs);\n    outputDirs.add(classesDir.getPath());\n\n    AndroidJpsUtil.processClasspath(paths, module, new AndroidDependencyProcessor() {\n\n      @Override\n      public void processAndroidLibraryOutputDirectory(@NotNull File dir) {\n        AndroidJpsUtil.addSubdirectories(dir, libClassFilesDirs);\n        outputDirs.add(dir.getPath());\n      }\n\n      @Override\n      public void processJavaModuleOutputDirectory(@NotNull File dir) {\n        AndroidJpsUtil.addSubdirectories(dir, classFilesDirs);\n        outputDirs.add(dir.getPath());\n      }\n\n      @Override\n      public boolean isToProcess(@NotNull AndroidDependencyType type) {\n        return type == AndroidDependencyType.ANDROID_LIBRARY_OUTPUT_DIRECTORY ||\n               type == AndroidDependencyType.JAVA_MODULE_OUTPUT_DIR;\n      }\n    });\n\n    final String logsDirOsPath =\n          FileUtil.toSystemDependentName(mainContentRoot.getPath() + '/' + AndroidCommonUtils.DIRECTORY_FOR_LOGS_NAME);\n    final AndroidFileSetState newState = new AndroidFileSetState(externalJars, AndroidJpsUtil.CLASSES_AND_JARS_FILTER, true);\n\n    if (context.isMake()) {\n      final AndroidFileSetState oldState = proguardStateStorage.getState(module.getName());\n      if (context.getTimestamps().getStamp(proguardCfgFile) == proguardCfgFile.lastModified() &&\n          newState.equalsTo(oldState)) {\n\n        final Set<String> dirtyOutputDirs = context.getUserData(DIRTY_OUTPUT_DIRS);\n        assert dirtyOutputDirs != null;\n        boolean outputDirsDirty = false;\n        for (String outputDir : outputDirs) {\n          if (dirtyOutputDirs.contains(outputDir)) {\n            outputDirsDirty = true;\n          }\n        }\n        if (!outputDirsDirty) {\n          return true;\n        }\n      }\n    }\n    final String[] classFilesDirOsPaths = ArrayUtil.toStringArray(classFilesDirs);\n    final String[] libClassFilesDirOsPaths = ArrayUtil.toStringArray(libClassFilesDirs);\n    final String[] externalJarOsPaths = ArrayUtil.toStringArray(externalJars);\n    final String inputJarOsPath = AndroidCommonUtils.buildTempInputJar(classFilesDirOsPaths, libClassFilesDirOsPaths);\n\n    final File logsDir = new File(logsDirOsPath);\n    if (!logsDir.exists()) {\n      if (!logsDir.mkdirs()) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR,\n                                                   AndroidJpsBundle.message(\"android.jps.cannot.create.directory\", logsDirOsPath)));\n        return false;\n      }\n    }\n\n    context.processMessage(new ProgressMessage(AndroidJpsBundle.message(\"android.jps.progress.proguard\", module.getName())));\n\n    final Map<AndroidCompilerMessageKind, List<String>> messages =\n      AndroidCommonUtils.launchProguard(platform.getTarget(), platform.getSdkToolsRevision(), platform.getSdk().getSdkPath(),\n                                        proguardCfgPath, includeSystemProguardCfg, inputJarOsPath, externalJarOsPaths, outputJarPath,\n                                        logsDirOsPath);\n    AndroidJpsUtil.addMessages(context, messages, BUILDER_NAME, module.getName());\n    final boolean success = messages.get(AndroidCompilerMessageKind.ERROR).isEmpty();\n\n    proguardStateStorage.update(module.getName(), success ? newState : null);\n\n    if (success) {\n      context.getTimestamps().saveStamp(proguardCfgFile, proguardCfgFile.lastModified());\n    }\n    return success;\n  }","commit_id":"0a41856bc369070b3b2e6368478c4b812224a626","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean doDexBuild(@NotNull CompileContext context,\n                                    @NotNull AndroidFileSetStorage dexStateStorage,\n                                    @NotNull AndroidFileSetStorage proguardStateStorage) throws IOException {\n    boolean success = true;\n\n    for (Module module : context.getProject().getModules().values()) {\n      final AndroidFacet facet = AndroidJpsUtil.getFacet(module);\n      if (facet == null || facet.getLibrary()) {\n        continue;\n      }\n\n      final AndroidPlatform platform = AndroidJpsUtil.getAndroidPlatform(module, context, BUILDER_NAME);\n      if (platform == null) {\n        success = false;\n        continue;\n      }\n\n      final ProjectPaths projectPaths = context.getProjectPaths();\n      final File dexOutputDir = AndroidJpsUtil.getOutputDirectoryForPackagedFiles(projectPaths, module);\n\n      if (dexOutputDir == null) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, AndroidJpsBundle\n          .message(\"android.jps.errors.output.dir.not.specified\", module.getName())));\n        success = false;\n        continue;\n      }\n\n      final File classesDir = projectPaths.getModuleOutputDir(module, false);\n      if (classesDir == null || !classesDir.isDirectory()) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.INFO, AndroidJpsBundle\n          .message(\"android.jps.warnings.dex.no.compiled.files\", module.getName())));\n        continue;\n      }\n      final Set<String> externalLibraries = AndroidJpsUtil.getExternalLibraries(projectPaths, module, platform);\n\n      boolean includeSystemProguardCfg = false;\n      String proguardCfgPath = context.getBuilderParameter(AndroidCommonUtils.PROGUARD_CFG_PATH_OPTION);\n\n      if (proguardCfgPath != null) {\n        final String includeSystemProguardCfgOption = context.getBuilderParameter(AndroidCommonUtils.INCLUDE_SYSTEM_PROGUARD_FILE_OPTION);\n        includeSystemProguardCfg = Boolean.parseBoolean(includeSystemProguardCfgOption);\n      }\n      else if (facet.isRunProguard()) {\n        final File proguardCfgFile = facet.getProguardConfigFile();\n        if (proguardCfgFile == null) {\n          context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR,\n                                                     AndroidJpsBundle.message(\"android.jps.errors.cannot.find.proguard.cfg\", module.getName())));\n          success = false;\n          continue;\n        }\n\n        proguardCfgPath = proguardCfgFile != null ? proguardCfgFile.getPath() : null;\n        includeSystemProguardCfg = facet.isIncludeSystemProguardCfgFile();\n      }\n\n      final Set<String> fileSet;\n\n      try {\n        if (proguardCfgPath != null) {\n          final String outputJarPath =\n            FileUtil.toSystemDependentName(dexOutputDir.getPath() + '/' + AndroidCommonUtils.PROGUARD_OUTPUT_JAR_NAME);\n\n          if (!runProguardIfNecessary(facet, classesDir, platform, externalLibraries, context, outputJarPath, proguardCfgPath,\n                                      includeSystemProguardCfg, proguardStateStorage)) {\n            success = false;\n            continue;\n          }\n          fileSet = Collections.singleton(outputJarPath);\n        }\n        else {\n          fileSet = new HashSet<String>();\n          AndroidJpsUtil.addSubdirectories(classesDir, fileSet);\n          fileSet.addAll(externalLibraries);\n\n          for (String filePath : AndroidJpsUtil.getClassdirsOfDependentModulesAndPackagesLibraries(projectPaths, module)) {\n            if (!classesDir.getPath().equals(filePath)) {\n              fileSet.add(filePath);\n            }\n          }\n\n          if (facet.isPackTestCode()) {\n            final File testsClassDir = projectPaths.getModuleOutputDir(module, true);\n\n            if (testsClassDir != null && testsClassDir.isDirectory()) {\n              AndroidJpsUtil.addSubdirectories(testsClassDir, fileSet);\n            }\n          }\n        }\n        final AndroidFileSetState newState = new AndroidFileSetState(fileSet, AndroidJpsUtil.CLASSES_AND_JARS_FILTER, true);\n\n        if (context.isMake()) {\n          final AndroidFileSetState oldState = dexStateStorage.getState(module.getName());\n          if (oldState != null && oldState.equalsTo(newState)) {\n            continue;\n          }\n        }\n\n        if (fileSet.size() == 0) {\n          continue;\n        }\n\n        final String[] files = new String[fileSet.size()];\n        int i = 0;\n        for (String filePath : fileSet) {\n          files[i++] = FileUtil.toSystemDependentName(filePath);\n        }\n\n        context.processMessage(new ProgressMessage(AndroidJpsBundle.message(\"android.jps.progress.dex\", module.getName())));\n\n        if (!runDex(platform, dexOutputDir.getPath(), files, context, module.getName())) {\n          success = false;\n          dexStateStorage.update(module.getName(), null);\n        }\n        else {\n          dexStateStorage.update(module.getName(), newState);\n        }\n      }\n      catch (IOException e) {\n        AndroidJpsUtil.reportExceptionError(context, null, e, BUILDER_NAME);\n        return false;\n      }\n    }\n    return success;\n  }","id":68930,"modified_method":"private static boolean doDexBuild(@NotNull CompileContext context,\n                                    @NotNull AndroidFileSetStorage dexStateStorage,\n                                    @NotNull AndroidFileSetStorage proguardStateStorage) throws IOException {\n    boolean success = true;\n\n    for (Module module : context.getProject().getModules().values()) {\n      final AndroidFacet facet = AndroidJpsUtil.getFacet(module);\n      if (facet == null || facet.getLibrary()) {\n        continue;\n      }\n\n      final AndroidPlatform platform = AndroidJpsUtil.getAndroidPlatform(module, context, BUILDER_NAME);\n      if (platform == null) {\n        success = false;\n        continue;\n      }\n\n      final ProjectPaths projectPaths = context.getProjectPaths();\n      final File dexOutputDir = AndroidJpsUtil.getOutputDirectoryForPackagedFiles(projectPaths, module);\n\n      if (dexOutputDir == null) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, AndroidJpsBundle\n          .message(\"android.jps.errors.output.dir.not.specified\", module.getName())));\n        success = false;\n        continue;\n      }\n\n      final File classesDir = projectPaths.getModuleOutputDir(module, false);\n      if (classesDir == null || !classesDir.isDirectory()) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.INFO, AndroidJpsBundle\n          .message(\"android.jps.warnings.dex.no.compiled.files\", module.getName())));\n        continue;\n      }\n      final Set<String> externalLibraries = AndroidJpsUtil.getExternalLibraries(projectPaths, module, platform);\n\n      boolean includeSystemProguardCfg = false;\n      String proguardCfgPath = context.getBuilderParameter(AndroidCommonUtils.PROGUARD_CFG_PATH_OPTION);\n\n      if (proguardCfgPath != null) {\n        final String includeSystemProguardCfgOption = context.getBuilderParameter(AndroidCommonUtils.INCLUDE_SYSTEM_PROGUARD_FILE_OPTION);\n        includeSystemProguardCfg = Boolean.parseBoolean(includeSystemProguardCfgOption);\n      }\n      else if (facet.isRunProguard()) {\n        final File proguardCfgFile = facet.getProguardConfigFile();\n        if (proguardCfgFile == null) {\n          context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR,\n                                                     AndroidJpsBundle.message(\"android.jps.errors.cannot.find.proguard.cfg\", module.getName())));\n          success = false;\n          continue;\n        }\n\n        proguardCfgPath = proguardCfgFile != null ? proguardCfgFile.getPath() : null;\n        includeSystemProguardCfg = facet.isIncludeSystemProguardCfgFile();\n      }\n\n      final Set<String> fileSet;\n      final Set<String> jars;\n      final Set<String> outputDirs;\n\n      try {\n        if (proguardCfgPath != null) {\n          final String outputJarPath =\n            FileUtil.toSystemDependentName(dexOutputDir.getPath() + '/' + AndroidCommonUtils.PROGUARD_OUTPUT_JAR_NAME);\n\n          if (!runProguardIfNecessary(facet, classesDir, platform, externalLibraries, context, outputJarPath, proguardCfgPath,\n                                      includeSystemProguardCfg, proguardStateStorage)) {\n            success = false;\n            continue;\n          }\n          fileSet = jars = Collections.singleton(outputJarPath);\n          outputDirs = Collections.emptySet();\n        }\n        else {\n          fileSet = new HashSet<String>();\n          jars = new HashSet<String>();\n          outputDirs = new HashSet<String>();\n\n          AndroidJpsUtil.addSubdirectories(classesDir, fileSet);\n          outputDirs.add(classesDir.getPath());\n\n          fileSet.addAll(externalLibraries);\n          jars.addAll(externalLibraries);\n\n          AndroidJpsUtil.processClasspath(projectPaths, module, new AndroidDependencyProcessor() {\n            @Override\n            public void processExternalLibrary(@NotNull File file) {\n              fileSet.add(file.getPath());\n              jars.add(file.getPath());\n            }\n\n            @Override\n            public void processAndroidLibraryPackage(@NotNull File file) {\n              fileSet.add(file.getPath());\n              jars.add(file.getPath());\n            }\n\n            @Override\n            public void processJavaModuleOutputDirectory(@NotNull File dir) {\n              fileSet.add(dir.getPath());\n              outputDirs.add(dir.getPath());\n            }\n\n            @Override\n            public boolean isToProcess(@NotNull AndroidDependencyType type) {\n              return type == AndroidDependencyType.JAVA_MODULE_OUTPUT_DIR ||\n                     type == AndroidDependencyType.ANDROID_LIBRARY_PACKAGE ||\n                     type == AndroidDependencyType.EXTERNAL_LIBRARY;\n            }\n          });\n\n          if (facet.isPackTestCode()) {\n            final File testsClassDir = projectPaths.getModuleOutputDir(module, true);\n\n            if (testsClassDir != null && testsClassDir.isDirectory()) {\n              AndroidJpsUtil.addSubdirectories(testsClassDir, fileSet);\n              outputDirs.add(testsClassDir.getPath());\n            }\n          }\n        }\n        final AndroidFileSetState newState = new AndroidFileSetState(jars, AndroidJpsUtil.CLASSES_AND_JARS_FILTER, true);\n\n        if (context.isMake()) {\n          final AndroidFileSetState oldState = dexStateStorage.getState(module.getName());\n          if (oldState != null && oldState.equalsTo(newState)) {\n            final Set<String> dirtyOutputDirs = context.getUserData(DIRTY_OUTPUT_DIRS);\n            boolean outputDirsDirty = false;\n\n            for (String outputDir : outputDirs) {\n              if (dirtyOutputDirs.contains(outputDir)) {\n                outputDirsDirty = true;\n                break;\n              }\n            }\n            if (!outputDirsDirty) {\n              continue;\n            }\n          }\n        }\n\n        if (fileSet.size() == 0) {\n          continue;\n        }\n\n        final String[] files = new String[fileSet.size()];\n        int i = 0;\n        for (String filePath : fileSet) {\n          files[i++] = FileUtil.toSystemDependentName(filePath);\n        }\n\n        context.processMessage(new ProgressMessage(AndroidJpsBundle.message(\"android.jps.progress.dex\", module.getName())));\n\n        if (!runDex(platform, dexOutputDir.getPath(), files, context, module.getName())) {\n          success = false;\n          dexStateStorage.update(module.getName(), null);\n        }\n        else {\n          dexStateStorage.update(module.getName(), newState);\n        }\n      }\n      catch (IOException e) {\n        AndroidJpsUtil.reportExceptionError(context, null, e, BUILDER_NAME);\n        return false;\n      }\n    }\n    return success;\n  }","commit_id":"0a41856bc369070b3b2e6368478c4b812224a626","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static Set<String> getExternalLibraries(@NotNull ProjectPaths paths, @NotNull Module module, @NotNull AndroidPlatform platform) {\n    final Set<String> result = new HashSet<String>();\n    fillClasspath(paths, module, null, result, new HashSet<String>(), false);\n    addAnnotationsJarIfNecessary(platform, result);\n    return result;\n  }","id":68931,"modified_method":"@NotNull\n  public static Set<String> getExternalLibraries(@NotNull ProjectPaths paths, @NotNull Module module, @NotNull AndroidPlatform platform) {\n    final Set<String> result = new HashSet<String>();\n    final AndroidDependencyProcessor processor = new AndroidDependencyProcessor() {\n      @Override\n      public void processExternalLibrary(@NotNull File file) {\n        result.add(file.getPath());\n      }\n\n      @Override\n      public boolean isToProcess(@NotNull AndroidDependencyType type) {\n        return type == AndroidDependencyType.EXTERNAL_LIBRARY;\n      }\n    };\n    processClasspath(paths, module, processor);\n    addAnnotationsJarIfNecessary(platform, result);\n    return result;\n  }","commit_id":"0a41856bc369070b3b2e6368478c4b812224a626","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void fillClasspath(@NotNull ProjectPaths paths,\n                                    @NotNull final Module module,\n                                    @Nullable final Set<String> outputDirs,\n                                    @Nullable final Set<String> libraries,\n                                    @NotNull final Set<String> visitedModules,\n                                    final boolean exportedLibrariesOnly) {\n    if (!visitedModules.add(module.getName())) {\n      return;\n    }\n\n    if (libraries != null) {\n      for (ClasspathItem item : module.getClasspath(ClasspathKind.PRODUCTION_RUNTIME, exportedLibrariesOnly)) {\n        if (item instanceof Library && !(item instanceof Sdk)) {\n          for (Object filePathObj : ((Library)item).getClasspath()) {\n            final String filePath = (String)filePathObj;\n            final File file = new File(filePath);\n\n            if (file.exists()) {\n              processClassFilesAndJarsRecursively(filePath, new Processor<File>() {\n                @Override\n                public boolean process(File file) {\n                  libraries.add(file.getPath());\n                  return true;\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    for (ClasspathItem item : module.getClasspath(ClasspathKind.PRODUCTION_RUNTIME, false)) {\n      if (item instanceof Module) {\n        final Module depModule = (Module)item;\n        final AndroidFacet depFacet = getFacet(depModule);\n        final boolean depLibrary = depFacet != null && depFacet.isLibrary();\n        final File depClassDir = paths.getModuleOutputDir(depModule, false);\n\n        if (outputDirs != null && depClassDir != null) {\n          if (depLibrary) {\n            final File packagedClassesJar = new File(depClassDir, AndroidCommonUtils.CLASSES_JAR_FILE_NAME);\n\n            if (packagedClassesJar.isFile()) {\n              outputDirs.add(packagedClassesJar.getPath());\n            }\n          }\n          else if (depFacet == null && depClassDir.isDirectory()) {\n            // do not support android-app->android-app compile dependencies\n            outputDirs.add(depClassDir.getPath());\n          }\n        }\n        fillClasspath(paths, depModule, outputDirs, libraries, visitedModules, !depLibrary || exportedLibrariesOnly);\n      }\n    }\n  }","id":68932,"modified_method":"private static void processClasspath(@NotNull ProjectPaths paths,\n                                      @NotNull final Module module,\n                                      @NotNull final AndroidDependencyProcessor processor,\n                                      @NotNull final Set<String> visitedModules,\n                                      final boolean exportedLibrariesOnly) {\n    if (!visitedModules.add(module.getName())) {\n      return;\n    }\n\n    if (processor.isToProcess(AndroidDependencyType.EXTERNAL_LIBRARY)) {\n      for (ClasspathItem item : module.getClasspath(ClasspathKind.PRODUCTION_RUNTIME, exportedLibrariesOnly)) {\n        if (item instanceof Library && !(item instanceof Sdk)) {\n          for (Object filePathObj : ((Library)item).getClasspath()) {\n            final String filePath = (String)filePathObj;\n            final File file = new File(filePath);\n\n            if (file.exists()) {\n              processClassFilesAndJarsRecursively(filePath, new Processor<File>() {\n                @Override\n                public boolean process(File file) {\n                  processor.processExternalLibrary(file);\n                  return true;\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    for (ClasspathItem item : module.getClasspath(ClasspathKind.PRODUCTION_RUNTIME, false)) {\n      if (item instanceof Module) {\n        final Module depModule = (Module)item;\n        final AndroidFacet depFacet = getFacet(depModule);\n        final boolean depLibrary = depFacet != null && depFacet.isLibrary();\n        final File depClassDir = paths.getModuleOutputDir(depModule, false);\n\n        if (depClassDir != null) {\n          if (depLibrary) {\n            if (processor.isToProcess(AndroidDependencyType.ANDROID_LIBRARY_PACKAGE)) {\n              final File packagedClassesJar = new File(depClassDir, AndroidCommonUtils.CLASSES_JAR_FILE_NAME);\n\n              if (packagedClassesJar.isFile()) {\n                processor.processAndroidLibraryPackage(packagedClassesJar);\n              }\n            }\n            if (processor.isToProcess(AndroidDependencyType.ANDROID_LIBRARY_OUTPUT_DIRECTORY)) {\n              processor.processAndroidLibraryOutputDirectory(depClassDir);\n            }\n          }\n          else if (processor.isToProcess(AndroidDependencyType.JAVA_MODULE_OUTPUT_DIR) && depFacet == null && depClassDir.isDirectory()) {\n            // do not support android-app->android-app compile dependencies\n            processor.processJavaModuleOutputDirectory(depClassDir);\n          }\n        }\n        processClasspath(paths, depModule, processor, visitedModules, !depLibrary || exportedLibrariesOnly);\n      }\n    }\n  }","commit_id":"0a41856bc369070b3b2e6368478c4b812224a626","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static ModuleLevelBuilder.ExitCode doBuild(CompileContext context, ModuleChunk chunk) throws IOException {\n    boolean success = true;\n    final AndroidFileSetStorage storage = new AndroidFileSetStorage(context.getDataManager().getDataStorageRoot(), \"libs_packaging\");\n\n    try {\n      boolean doneSomething = false;\n      for (Module module : chunk.getModules()) {\n        final AndroidFacet facet = AndroidJpsUtil.getFacet(module);\n        if (facet == null || !facet.isLibrary()) {\n          continue;\n        }\n\n        final ProjectPaths projectPaths = context.getProjectPaths();\n        final File outputDirectoryForPackagedFiles = AndroidJpsUtil.getOutputDirectoryForPackagedFiles(projectPaths, module);\n\n        if (outputDirectoryForPackagedFiles == null) {\n          context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, AndroidJpsBundle\n            .message(\"android.jps.errors.output.dir.not.specified\", module.getName())));\n          success = false;\n          continue;\n        }\n\n        final File classesDir = projectPaths.getModuleOutputDir(module, false);\n        if (classesDir == null || !classesDir.isDirectory()) {\n          continue;\n        }\n\n        final Set<String> subdirs = new HashSet<String>();\n        AndroidJpsUtil.addSubdirectories(classesDir, subdirs);\n\n        final AndroidFileSetState newState = new AndroidFileSetState(subdirs, AndroidJpsUtil.CLASSES_AND_JARS_FILTER, true);\n        final AndroidFileSetState oldState = storage.getState(module.getName());\n\n        if (oldState != null && oldState.equalsTo(newState)) {\n          continue;\n        }\n\n        if (subdirs.size() > 0) {\n          context.processMessage(new ProgressMessage(AndroidJpsBundle.message(\"android.jps.progress.library.packaging\", module.getName())));\n          final File outputJarFile = new File(outputDirectoryForPackagedFiles, AndroidCommonUtils.CLASSES_JAR_FILE_NAME);\n          doneSomething = true;\n          try {\n            AndroidCommonUtils.packClassFilesIntoJar(ArrayUtil.EMPTY_STRING_ARRAY, ArrayUtil.toStringArray(subdirs), outputJarFile);\n            storage.update(module.getName(), newState);\n          }\n          catch (IOException e) {\n            AndroidJpsUtil.reportExceptionError(context, null, e, BUILDER_NAME);\n            storage.update(module.getName(), null);\n            success = false;\n          }\n        }\n      }\n      return success ? (doneSomething? ExitCode.OK : ExitCode.NOTHING_DONE) : ExitCode.ABORT;\n    }\n    finally {\n      storage.close();\n    }\n  }","id":68933,"modified_method":"private static ModuleLevelBuilder.ExitCode doBuild(CompileContext context, ModuleChunk chunk) throws IOException {\n    boolean success = true;\n    boolean doneSomething = false;\n\n    for (Module module : chunk.getModules()) {\n      final AndroidFacet facet = AndroidJpsUtil.getFacet(module);\n      if (facet == null || !facet.isLibrary()) {\n        continue;\n      }\n\n      final ProjectPaths projectPaths = context.getProjectPaths();\n      final File outputDirectoryForPackagedFiles = AndroidJpsUtil.getOutputDirectoryForPackagedFiles(projectPaths, module);\n\n      if (outputDirectoryForPackagedFiles == null) {\n        context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, AndroidJpsBundle\n          .message(\"android.jps.errors.output.dir.not.specified\", module.getName())));\n        success = false;\n        continue;\n      }\n\n      final File classesDir = projectPaths.getModuleOutputDir(module, false);\n      if (classesDir == null || !classesDir.isDirectory()) {\n        continue;\n      }\n\n      if (context.isMake()) {\n        final Set<String> dirtyOutputDirs = context.getUserData(AndroidDexBuilder.DIRTY_OUTPUT_DIRS);\n        assert dirtyOutputDirs != null;\n        if (!dirtyOutputDirs.contains(classesDir.getPath())) {\n          continue;\n        }\n      }\n      final Set<String> subdirs = new HashSet<String>();\n      AndroidJpsUtil.addSubdirectories(classesDir, subdirs);\n\n      if (subdirs.size() > 0) {\n        context.processMessage(new ProgressMessage(AndroidJpsBundle.message(\"android.jps.progress.library.packaging\", module.getName())));\n        final File outputJarFile = new File(outputDirectoryForPackagedFiles, AndroidCommonUtils.CLASSES_JAR_FILE_NAME);\n        doneSomething = true;\n        try {\n          AndroidCommonUtils.packClassFilesIntoJar(ArrayUtil.EMPTY_STRING_ARRAY, ArrayUtil.toStringArray(subdirs), outputJarFile);\n        }\n        catch (IOException e) {\n          AndroidJpsUtil.reportExceptionError(context, null, e, BUILDER_NAME);\n          success = false;\n        }\n      }\n    }\n    return success ? (doneSomething ? ExitCode.OK : ExitCode.NOTHING_DONE) : ExitCode.ABORT;\n  }","commit_id":"0a41856bc369070b3b2e6368478c4b812224a626","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public Set<Class> getExtraProjectModelClasses() {\n    return Collections.<Class>singleton(ScalaModel.class);\n  }","id":68934,"modified_method":"@NotNull\n  @Override\n  public Set<Class> getExtraProjectModelClasses() {\n    return scalaPluginPresent ? Collections.<Class>singleton(ScalaModel.class) : Collections.<Class>emptySet();\n  }","commit_id":"52a92f2125fd859fc8ccdefa47bd634d248add62","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void populateModuleExtraModels(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ideModule) {\n    ScalaModel scalaModel = resolverCtx.getExtraProject(gradleModule, ScalaModel.class);\n    if (scalaModel != null) {\n      ScalaModelData scalaModelData = create(scalaModel);\n      ideModule.createChild(ScalaModelData.KEY, scalaModelData);\n    }\n\n    nextResolver.populateModuleExtraModels(gradleModule, ideModule);\n  }","id":68935,"modified_method":"@Override\n  public void populateModuleExtraModels(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ideModule) {\n    if (!scalaPluginPresent) return;\n\n    ScalaModel scalaModel = resolverCtx.getExtraProject(gradleModule, ScalaModel.class);\n    if (scalaModel != null) {\n      ScalaModelData scalaModelData = create(scalaModel);\n      ideModule.createChild(ScalaModelData.KEY, scalaModelData);\n    }\n\n    nextResolver.populateModuleExtraModels(gradleModule, ideModule);\n  }","commit_id":"52a92f2125fd859fc8ccdefa47bd634d248add62","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Set<VirtualFile> getRootsToIndex(final Project project) {\n    final VirtualFile file = getStandardSchemas();\n    return Collections.singleton(file);\n  }","id":68936,"modified_method":"public Set<VirtualFile> getRootsToIndex(final Project project) {\n    final VirtualFile file = getStandardSchemas();\n    return file != null ? Collections.singleton(file) : Collections.<VirtualFile>emptySet();\n  }","commit_id":"6b5a54a575d54ff8352ec061e6a08ad3e8276319","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static VirtualFile getStandardSchemas() {\n    final URL resource = ExternalResourcesRootsProvider.class.getResource(ExternalResourceManagerImpl.STANDARD_SCHEMAS);\n    return VfsUtil.findFileByURL(resource);\n  }","id":68937,"modified_method":"@Nullable\n  public static VirtualFile getStandardSchemas() {\n    final URL resource = ExternalResourcesRootsProvider.class.getResource(ExternalResourceManagerImpl.STANDARD_SCHEMAS);\n    return resource == null ? null : VfsUtil.findFileByURL(resource);\n  }","commit_id":"6b5a54a575d54ff8352ec061e6a08ad3e8276319","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * If the way has a name-key or id-key, this is displayed. If not, (x nodes)\n\t * is displayed with x being the number of nodes in the way.\n\t */\n\tpublic void visit(Way w) {\n\t\tname = w.get(\"name\");\n\t\tif (name == null) name = w.get(\"ref\");\n\t\tif (name == null) {\n\t\t\tString what = (w.get(\"highway\") != null) ? \"highway \" : (w.get(\"railway\") != null) ? \"railway \" : (w.get(\"waterway\") != null) ? \"waterway \" : \"\";\n\t\t\tint nodesNo = new HashSet(w.nodes).size();\n\t\t\tname = what + trn(\"{0} node\", \"{0} nodes\", nodesNo, nodesNo);\n\t\t}\n\t\taddId(w);\n\t\ticon = ImageProvider.get(\"data\", \"way\");\n\t\ttrn(\"way\", \"ways\", 0); // no marktrn available\n\t\tclassName = \"way\";\n\t}","id":68938,"modified_method":"/**\n\t * If the way has a name-key or id-key, this is displayed. If not, (x nodes)\n\t * is displayed with x being the number of nodes in the way.\n\t */\n\tpublic void visit(Way w) {\n\t\tname = w.get(\"name\");\n\t\tif (name == null) name = w.get(\"ref\");\n\t\tif (name == null) {\n\t\t\tString what = (w.get(\"highway\") != null) ? \"highway \" : (w.get(\"railway\") != null) ? \"railway \" : (w.get(\"waterway\") != null) ? \"waterway \" : \"\";\n\t\t\tint nodesNo = new HashSet<Node>(w.nodes).size();\n\t\t\tname = what + trn(\"{0} node\", \"{0} nodes\", nodesNo, nodesNo);\n\t\t}\n\t\taddId(w);\n\t\ticon = ImageProvider.get(\"data\", \"way\");\n\t\ttrn(\"way\", \"ways\", 0); // no marktrn available\n\t\tclassName = \"way\";\n\t}","commit_id":"504fca04c285e81400973b48981c509782366084","url":"https://github.com/openstreetmap/josm"},{"original_method":"private void refreshPluginPanel(final PreferenceDialog gui) {\r\n\t\tCollection<PluginDescription> availablePlugins = getAvailablePlugins();\r\n\t\tpluginMap = new HashMap<PluginDescription, Boolean>();\r\n\t\tpluginPanel.removeAll();\n\n\t\t// the following could probably be done more elegantly?\n\t\tCollection<String> enabledPlugins = null;\n\t\tString enabledProp = Main.pref.get(\"plugins\");\n\t\tif ((enabledProp == null) || (\"\".equals(enabledProp))) {\n\t\t\tenabledPlugins = Collections.EMPTY_SET;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tenabledPlugins = Arrays.asList(enabledProp.split(\",\"));\n\t\t}\n\t\t\r\n\t\tfor (final PluginDescription plugin : availablePlugins) {\r\n\t\t\tboolean enabled = enabledPlugins.contains(plugin.name);\r\n\t\t\tfinal JCheckBox pluginCheck = new JCheckBox(plugin.name+(plugin.version != null && !plugin.version.equals(\"\") ? \" Version: \"+plugin.version : \"\"), enabled);\r\n\t\t\tpluginPanel.add(pluginCheck);\r\n\r\n\t\t\tpluginCheck.setToolTipText(plugin.resource != null ? plugin.resource : tr(\"Plugin bundled with JOSM\"));\r\n\t\t\tJLabel label = new JLabel(\"<html><i>\"+(plugin.description==null?tr(\"no description available\"):plugin.description)+\"<\/i><\/html>\");\r\n\t\t\tlabel.setBorder(BorderFactory.createEmptyBorder(0,20,0,0));\r\n\t\t\tlabel.setMaximumSize(new Dimension(450,1000));\r\n\t\t\tpluginPanel.add(label);\r\n\t\t\tpluginPanel.add(Box.createVerticalStrut(5));\r\n\r\n\t\t\tpluginMap.put(plugin, enabled);\r\n\t\t\tpluginCheck.addActionListener(new ActionListener(){\r\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t\tpluginMap.put(plugin, pluginCheck.isSelected());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tplugin.updateUI();\r\n\t}","id":68939,"modified_method":"private void refreshPluginPanel(final PreferenceDialog gui) {\r\n\t\tCollection<PluginDescription> availablePlugins = getAvailablePlugins();\r\n\t\tpluginMap = new HashMap<PluginDescription, Boolean>();\r\n\t\tpluginPanel.removeAll();\n\n\t\t// the following could probably be done more elegantly?\n\t\tCollection<String> enabledPlugins = null;\n\t\tString enabledProp = Main.pref.get(\"plugins\");\n\t\tif ((enabledProp == null) || (\"\".equals(enabledProp))) {\n\t\t\tenabledPlugins = Collections.emptySet();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tenabledPlugins = Arrays.asList(enabledProp.split(\",\"));\n\t\t}\n\t\t\r\n\t\tfor (final PluginDescription plugin : availablePlugins) {\r\n\t\t\tboolean enabled = enabledPlugins.contains(plugin.name);\r\n\t\t\tfinal JCheckBox pluginCheck = new JCheckBox(plugin.name+(plugin.version != null && !plugin.version.equals(\"\") ? \" Version: \"+plugin.version : \"\"), enabled);\r\n\t\t\tpluginPanel.add(pluginCheck);\r\n\r\n\t\t\tpluginCheck.setToolTipText(plugin.resource != null ? plugin.resource : tr(\"Plugin bundled with JOSM\"));\r\n\t\t\tJLabel label = new JLabel(\"<html><i>\"+(plugin.description==null?tr(\"no description available\"):plugin.description)+\"<\/i><\/html>\");\r\n\t\t\tlabel.setBorder(BorderFactory.createEmptyBorder(0,20,0,0));\r\n\t\t\tlabel.setMaximumSize(new Dimension(450,1000));\r\n\t\t\tpluginPanel.add(label);\r\n\t\t\tpluginPanel.add(Box.createVerticalStrut(5));\r\n\r\n\t\t\tpluginMap.put(plugin, enabled);\r\n\t\t\tpluginCheck.addActionListener(new ActionListener(){\r\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t\tpluginMap.put(plugin, pluginCheck.isSelected());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tplugin.updateUI();\r\n\t}","commit_id":"504fca04c285e81400973b48981c509782366084","url":"https://github.com/openstreetmap/josm"},{"original_method":"public RelationListDialog() {\r\n\t\tsuper(tr(\"Relations\"), \"relationlist\", tr(\"Open a list of all relations.\"), KeyEvent.VK_N, 150);\r\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\r\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\r\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\r\n\t\t\t\tif (e.getClickCount() < 2)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\r\n\t\t\t\tif (toEdit != null)\r\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\r\n\r\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,3));\r\n\r\n\t\tbuttonPanel.add(createButton(marktr(\"Add Relation\"), \"addrelation\", tr(\"Create a new relation\"), KeyEvent.VK_A, new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t// call relation editor with null argument to create new relation\r\n\t\t\t\tnew RelationEditor(null).setVisible(true);\r\n\t\t\t}\r\n\t\t}));\r\n\t\t\r\n\t\tbuttonPanel.add(createButton(marktr(\"Edit\"), \"edit\", tr( \"Open an editor for the selected relation\"), KeyEvent.VK_E, new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\r\n\t\t\t\tif (toEdit != null)\r\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\t\t\t\t\r\n\t\t\t}\r\n\t\t}));\r\n\t\t\r\n\t\tbuttonPanel.add(createButton(marktr(\"Delete\"), \"delete\", tr(\"Delete the selected relation\"), KeyEvent.VK_D, new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tRelation toDelete = (Relation) displaylist.getSelectedValue();\r\n\t\t\t\tif (toDelete != null) {\r\n\t\t\t\t\tMain.main.editLayer().add(new DeleteCommand(Collections.singleton(toDelete)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}));\r\n\t\tLayer.listeners.add(this);\r\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\r\n\t}","id":68940,"modified_method":"public RelationListDialog() {\r\n\t\tsuper(tr(\"Relations\"), \"relationlist\", tr(\"Open a list of all relations.\"), KeyEvent.VK_N, 150);\r\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\r\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\r\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\r\n\t\t\t\tif (e.getClickCount() < 2)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\r\n\t\t\t\tif (toEdit != null)\r\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\r\n\r\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,3));\r\n\r\n\t\tbuttonPanel.add(createButton(marktr(\"Add Relation\"), \"addrelation\", tr(\"Create a new relation\"), KeyEvent.VK_A, new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t// call relation editor with null argument to create new relation\r\n\t\t\t\tnew RelationEditor(null).setVisible(true);\r\n\t\t\t}\r\n\t\t}));\r\n\t\t\r\n\t\tbuttonPanel.add(createButton(marktr(\"Edit\"), \"edit\", tr( \"Open an editor for the selected relation\"), KeyEvent.VK_E, new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\r\n\t\t\t\tif (toEdit != null)\r\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\t\t\t\t\r\n\t\t\t}\r\n\t\t}));\r\n\t\t\r\n\t\tbuttonPanel.add(createButton(marktr(\"Delete\"), \"delete\", tr(\"Delete the selected relation\"), KeyEvent.VK_D, new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tRelation toDelete = (Relation) displaylist.getSelectedValue();\r\n\t\t\t\tif (toDelete != null) {\r\n\t\t\t\t\tMain.main.undoRedo.add(\r\n\t\t\t\t\t\tnew DeleteCommand(Collections.singleton(toDelete)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}));\r\n\t\tLayer.listeners.add(this);\r\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\r\n\t}","commit_id":"504fca04c285e81400973b48981c509782366084","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Look, whether any object is selected. If not, select the nearest node.\n\t * If there are no nodes in the dataset, do nothing.\n\t * \n\t * If the user did not press the left mouse button, do nothing.\n\t * \n\t * Also remember the starting position of the movement and change the mouse \n\t * cursor to movement.\n\t */\n\t@Override public void mousePressed(MouseEvent e) {\n\t\tif (e.getButton() != MouseEvent.BUTTON1)\n\t\t\treturn;\n\t\tboolean ctrl = (e.getModifiers() & ActionEvent.CTRL_MASK) != 0;\n\t\tboolean alt = (e.getModifiers() & ActionEvent.ALT_MASK) != 0;\n\t\tboolean shift = (e.getModifiers() & ActionEvent.SHIFT_MASK) != 0;\n\n\t\tCollection<OsmPrimitive> sel = Main.ds.getSelected();\n\t\tOsmPrimitive osm = Main.map.mapView.getNearest(e.getPoint());\n\t\tCollection osmColl = osm == null\n\t\t\t? Collections.emptyList() : Collections.singleton(osm);\n\t\tif (ctrl && shift) {\n\t\t\tselectPrims(osmColl, true, false);\n\t\t\tmode = Mode.rotate;\n\t\t\tsetCursor(ImageProvider.getCursor(\"rotate\", null));\n\t\t} else if (osm != null) {\n\t\t\tselectPrims(osmColl, shift, ctrl);\n\t\t\tmode = Mode.move;\n\t\t} else {\n\t\t\tmode = Mode.select;\n\t\t\toldCursor = Main.map.mapView.getCursor();\n\t\t\tselectionManager.register(Main.map.mapView);\n\t\t\tselectionManager.mousePressed(e);\n\t\t}\n\n\t\tupdateStatusLine();\n\t\tMain.map.mapView.repaint();\n\n\t\tmousePos = e.getPoint();\n\t}","id":68941,"modified_method":"/**\n\t * Look, whether any object is selected. If not, select the nearest node.\n\t * If there are no nodes in the dataset, do nothing.\n\t * \n\t * If the user did not press the left mouse button, do nothing.\n\t * \n\t * Also remember the starting position of the movement and change the mouse \n\t * cursor to movement.\n\t */\n\t@Override public void mousePressed(MouseEvent e) {\n\t\tif (e.getButton() != MouseEvent.BUTTON1)\n\t\t\treturn;\n\t\tboolean ctrl = (e.getModifiers() & ActionEvent.CTRL_MASK) != 0;\n\t\tboolean alt = (e.getModifiers() & ActionEvent.ALT_MASK) != 0;\n\t\tboolean shift = (e.getModifiers() & ActionEvent.SHIFT_MASK) != 0;\n\n\t\tCollection<OsmPrimitive> sel = Main.ds.getSelected();\n\t\tOsmPrimitive osm = Main.map.mapView.getNearest(e.getPoint());\n\t\tCollection<OsmPrimitive> osmColl;\n\t\tif (osm == null) {\n\t\t\tosmColl = Collections.emptySet();\n\t\t} else {\n\t\t\tosmColl = Collections.singleton(osm);\n\t\t}\n\n\t\tif (ctrl && shift) {\n\t\t\tselectPrims(osmColl, true, false);\n\t\t\tmode = Mode.rotate;\n\t\t\tsetCursor(ImageProvider.getCursor(\"rotate\", null));\n\t\t} else if (osm != null) {\n\t\t\tselectPrims(osmColl, shift, ctrl);\n\t\t\tmode = Mode.move;\n\t\t} else {\n\t\t\tmode = Mode.select;\n\t\t\toldCursor = Main.map.mapView.getCursor();\n\t\t\tselectionManager.register(Main.map.mapView);\n\t\t\tselectionManager.mousePressed(e);\n\t\t}\n\n\t\tupdateStatusLine();\n\t\tMain.map.mapView.repaint();\n\n\t\tmousePos = e.getPoint();\n\t}","commit_id":"504fca04c285e81400973b48981c509782366084","url":"https://github.com/openstreetmap/josm"},{"original_method":"@NotNull\n    public Set<ConstructorDescriptor> getConstructors() {\n        return Collections.singleton(getPrimaryConstructor());\n    }","id":68942,"modified_method":"@NotNull\n    public Set<ConstructorDescriptor> getConstructors() {\n        ConstructorDescriptor constructor = getPrimaryConstructor();\n        return constructor == null ? Collections.<ConstructorDescriptor>emptySet() : Collections.singleton(constructor);\n    }","commit_id":"a390908592cae1bc8e0ed9ad800c7b1e02927e7f","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public ConstructorDescriptor getPrimaryConstructor() {\n        if (!primaryConstructorResolved) {\n            JetClassOrObject classOrObject = declarationProvider.getOwnerClassOrObject();\n            if (classOrObject instanceof JetClass) {\n                JetClass jetClass = (JetClass) classOrObject;\n                ConstructorDescriptorImpl descriptor = resolveSession.getInjector().getDescriptorResolver()\n                        .resolvePrimaryConstructorDescriptor(thisDescriptor.getScopeForClassHeaderResolution(), thisDescriptor, jetClass,\n                                                             resolveSession.getTrace());\n                primaryConstructor = descriptor;\n                ((ConstructorDescriptorImpl) primaryConstructor).setReturnType(DeferredType.create(resolveSession.getTrace(), new LazyValue<JetType>() {\n                    @Override\n                    protected JetType compute() {\n                        return thisDescriptor.getDefaultType();\n                    }\n                }));\n            }\n            primaryConstructorResolved = true;\n        }\n        return primaryConstructor;\n    }","id":68943,"modified_method":"@Nullable\n    public ConstructorDescriptor getPrimaryConstructor() {\n        if (!primaryConstructorResolved) {\n            if (EnumSet.of(ClassKind.CLASS, ClassKind.ANNOTATION_CLASS).contains(thisDescriptor.getKind())) {\n                JetClassOrObject classOrObject = declarationProvider.getOwnerClassOrObject();\n                if (classOrObject instanceof JetClass) {\n                    JetClass jetClass = (JetClass) classOrObject;\n                    ConstructorDescriptorImpl descriptor = resolveSession.getInjector().getDescriptorResolver()\n                            .resolvePrimaryConstructorDescriptor(thisDescriptor.getScopeForClassHeaderResolution(), thisDescriptor,\n                                                                 jetClass,\n                                                                 resolveSession.getTrace());\n                    primaryConstructor = descriptor;\n                    descriptor.setReturnType(DeferredType.create(resolveSession.getTrace(), new LazyValue<JetType>() {\n                        @Override\n                        protected JetType compute() {\n                            return thisDescriptor.getDefaultType();\n                        }\n                    }));\n                }\n            }\n            primaryConstructorResolved = true;\n        }\n        return primaryConstructor;\n    }","commit_id":"a390908592cae1bc8e0ed9ad800c7b1e02927e7f","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES,\n                \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        if (getLength() == 0)\n            return Sequence.EMPTY_SEQUENCE;\n        if (contextItem != null)\n            contextSequence = contextItem.toSequence();\n        boolean doOptimize = optimize;\n        if (contextSequence != null && !contextSequence.isPersistentSet())\n            doOptimize = false;\n        Sequence result;\n        Expression left = getLeft();\n        Expression right = getRight();\n        Sequence ls = left.eval(contextSequence, null);\n        // first check if left operand is a persistent set\n        doOptimize = doOptimize && ls.isPersistentSet();\n        if (doOptimize) {\n            // yes: try to optimize by looking at right operand\n            Sequence rs = right.eval(contextSequence, null);\n            if (rs.isPersistentSet()) {\n                NodeSet rl = ls.toNodeSet();\n                rl = rl.getContextNodes(contextId);\n                NodeSet rr = rs.toNodeSet();\n                rr = rr.getContextNodes(contextId);\n                result = rl.union(rr);\n                //<test>{() or ()}<\/test> should return <test>false<\/test>\t\t\t\n                if (getParent() instanceof EnclosedExpr ||\n                    //First, the intermediate PathExpr\n                    (getParent() != null && getParent().getParent() == null)) {\n                    result = result.isEmpty() ? BooleanValue.FALSE : BooleanValue.TRUE;\n                }\n            } else {\n                // fall back\n                boolean rl = ls.effectiveBooleanValue();\n                if (rl) {\n                    result = BooleanValue.TRUE;\n                } else {\n                    boolean rr = rs.effectiveBooleanValue();\n                    result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n                }\n            }\n        } else {\n            // no: default evaluation based on boolean value\n            boolean rl = ls.effectiveBooleanValue();\n            if (rl) {\n                result = BooleanValue.TRUE;\n            } else {\n                Sequence rs = right.eval(contextSequence, null);\n                boolean rr = rs.effectiveBooleanValue();\n                result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n            }\n        }\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        return result;\n    }","id":68944,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES,\n                \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        if (getLength() == 0)\n            return Sequence.EMPTY_SEQUENCE;\n        if (contextItem != null)\n            contextSequence = contextItem.toSequence();\n        boolean doOptimize = optimize;\n        if (contextSequence != null && !contextSequence.isPersistentSet())\n            doOptimize = false;\n        Sequence result;\n        Expression left = getLeft();\n        Expression right = getRight();\n        Sequence ls = left.eval(contextSequence, null);\n        // first check if left operand is a persistent set\n        doOptimize = doOptimize && (ls.isPersistentSet() || ls.isEmpty());\n        if (doOptimize) {\n            // yes: try to optimize by looking at right operand\n            Sequence rs = right.eval(contextSequence, null);\n            if (rs.isPersistentSet()) {\n                NodeSet rl = ls.toNodeSet();\n                rl = rl.getContextNodes(contextId);\n                NodeSet rr = rs.toNodeSet();\n                rr = rr.getContextNodes(contextId);\n                result = rl.union(rr);\n                //<test>{() or ()}<\/test> should return <test>false<\/test>\t\t\t\n                if (getParent() instanceof EnclosedExpr ||\n                    //First, the intermediate PathExpr\n                    (getParent() != null && getParent().getParent() == null)) {\n                    result = result.isEmpty() ? BooleanValue.FALSE : BooleanValue.TRUE;\n                }\n            } else {\n                // fall back\n                boolean rl = ls.effectiveBooleanValue();\n                if (rl) {\n                    result = BooleanValue.TRUE;\n                } else {\n                    boolean rr = rs.effectiveBooleanValue();\n                    result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n                }\n            }\n        } else {\n            // no: default evaluation based on boolean value\n            boolean rl = ls.effectiveBooleanValue();\n            if (rl) {\n                result = BooleanValue.TRUE;\n            } else {\n                Sequence rs = right.eval(contextSequence, null);\n                boolean rr = rs.effectiveBooleanValue();\n                result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n            }\n        }\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        return result;\n    }","commit_id":"28d5c0d7dfdf60760b0b4006fe5e148376186ee2","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES,\n                \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        Sequence result; \n        if (getLength() == 0) {\n            result = Sequence.EMPTY_SEQUENCE;\n        } else {\n            if (contextItem != null)\n                contextSequence = contextItem.toSequence();\n            boolean doOptimize = optimize;\n            if (contextSequence != null && !contextSequence.isPersistentSet())\n                doOptimize = false;\n            Expression left = getLeft();\n            Expression right = getRight();\n            \n//            setContextId(getExpressionId());\n            if (doOptimize && contextSequence != null)\n            \tcontextSequence.setSelfAsContext(getContextId());\n            \n            Sequence ls = left.eval(contextSequence, null);\n            doOptimize = doOptimize && ls.isPersistentSet();\n            if (doOptimize) {\n            \t\n            \tif (inPredicate) {\n                    NodeSet lr = ls.toNodeSet();\n                    lr = lr.getContextNodes(getContextId()); \n\n                    Sequence rs = right.eval(lr, null);\n                    \n                    NodeSet rr = rs.toNodeSet();\n                    result = rr.getContextNodes(getContextId()); \n\n            \t} else {\n            \t\tSequence rs = right.eval(contextSequence, null);\n\n\t            \tif (rs.isPersistentSet()) {\n\t                    NodeSet rl = ls.toNodeSet();\n\t                    rl = rl.getContextNodes(left.getContextId()); \n\t                    // TODO: optimize and return false if rl.isEmpty() ?\n\t                    NodeSet rr = rs.toNodeSet();\n\t                    rr = rr.getContextNodes(right.getContextId());\n\t                    result = rr.intersection(rl);\n\t                    //<test>{() and ()}<\/test> has to return <test>false<\/test>    \t\t\t\n\t                    if (getParent() instanceof EnclosedExpr ||\n\t                        //First, the intermediate PathExpr\n\t                        (getParent() != null && getParent().getParent() == null)) {\n\t                        result = result.isEmpty() ? BooleanValue.FALSE : BooleanValue.TRUE;\n\t                    }\n\t                } else {\n\t                    // fall back if right sequence is not persistent\n\t                    boolean rl = ls.effectiveBooleanValue();\n\t                    if (!rl) {\n\t                        result = BooleanValue.FALSE;\n\t                    } else {\n\t                        boolean rr = rs.effectiveBooleanValue();\n\t                        result = (rl && rr) ? BooleanValue.TRUE : BooleanValue.FALSE;\n\t                    }\n\t                }\n            \t}\n            } else {\n                boolean rl = ls.effectiveBooleanValue();\n                //Immediately return false if the left operand is false\n                if (!rl) {\n                    result = BooleanValue.FALSE;\n                } else {\n                    Sequence rs = right.eval(contextSequence, null);\n                    boolean rr = rs.effectiveBooleanValue();\n                    result = (rl && rr) ? BooleanValue.TRUE : BooleanValue.FALSE;\n                }\n            }\n        }\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        return result;\n    }","id":68945,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES,\n                \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        Sequence result; \n        if (getLength() == 0) {\n            result = Sequence.EMPTY_SEQUENCE;\n        } else {\n            if (contextItem != null)\n                contextSequence = contextItem.toSequence();\n            boolean doOptimize = optimize;\n            if (contextSequence != null && !contextSequence.isPersistentSet())\n                doOptimize = false;\n            Expression left = getLeft();\n            Expression right = getRight();\n            \n//            setContextId(getExpressionId());\n            if (doOptimize && contextSequence != null)\n            \tcontextSequence.setSelfAsContext(getContextId());\n            \n            Sequence ls = left.eval(contextSequence, null);\n            doOptimize = doOptimize && (ls.isPersistentSet() || ls.isEmpty());\n            if (doOptimize) {\n            \t\n            \tif (inPredicate) {\n                    NodeSet lr = ls.toNodeSet();\n                    lr = lr.getContextNodes(getContextId()); \n\n                    if (lr.isEmpty())\n                        return NodeSet.EMPTY_SET;\n\n                    Sequence rs = right.eval(lr, null);\n                    \n                    NodeSet rr = rs.toNodeSet();\n                    result = rr.getContextNodes(getContextId()); \n\n            \t} else {\n            \t\tSequence rs = right.eval(contextSequence, null);\n\n\t            \tif (rs.isPersistentSet()) {\n\t                    NodeSet rl = ls.toNodeSet();\n\t                    rl = rl.getContextNodes(left.getContextId());\n\n                        if (rl.isEmpty())\n                            return NodeSet.EMPTY_SET;\n\n\t                    // TODO: optimize and return false if rl.isEmpty() ?\n\t                    NodeSet rr = rs.toNodeSet();\n\t                    rr = rr.getContextNodes(right.getContextId());\n\t                    result = rr.intersection(rl);\n\t                    //<test>{() and ()}<\/test> has to return <test>false<\/test>    \t\t\t\n\t                    if (getParent() instanceof EnclosedExpr ||\n\t                        //First, the intermediate PathExpr\n\t                        (getParent() != null && getParent().getParent() == null)) {\n\t                        result = result.isEmpty() ? BooleanValue.FALSE : BooleanValue.TRUE;\n\t                    }\n\t                } else {\n\t                    // fall back if right sequence is not persistent\n\t                    boolean rl = ls.effectiveBooleanValue();\n\t                    if (!rl) {\n\t                        result = BooleanValue.FALSE;\n\t                    } else {\n\t                        boolean rr = rs.effectiveBooleanValue();\n\t                        result = (rl && rr) ? BooleanValue.TRUE : BooleanValue.FALSE;\n\t                    }\n\t                }\n            \t}\n            } else {\n                boolean rl = ls.effectiveBooleanValue();\n                //Immediately return false if the left operand is false\n                if (!rl) {\n                    result = BooleanValue.FALSE;\n                } else {\n                    Sequence rs = right.eval(contextSequence, null);\n                    boolean rr = rs.effectiveBooleanValue();\n                    result = (rl && rr) ? BooleanValue.TRUE : BooleanValue.FALSE;\n                }\n            }\n        }\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        return result;\n    }","commit_id":"e9020d18969e287073391d4362840a2fc8de748a","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES,\n                \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                {context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT SEQUENCE\", contextSequence);}\n            if (contextItem != null)\n                {context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT ITEM\", contextItem.toSequence());}\n        }\n        if (getLength() == 0)\n            {return Sequence.EMPTY_SEQUENCE;}\n        if (contextItem != null)\n            {contextSequence = contextItem.toSequence();}\n        boolean doOptimize = optimize;\n        if (contextSequence != null && !contextSequence.isPersistentSet())\n            {doOptimize = false;}\n        Sequence result;\n        final Expression left = getLeft();\n        final Expression right = getRight();\n        final Sequence ls = left.eval(contextSequence, null);\n        // first check if left operand is a persistent set\n        doOptimize = doOptimize && (ls.isPersistentSet() || ls.isEmpty());\n        if (doOptimize) {\n            // yes: try to optimize by looking at right operand\n            final Sequence rs = right.eval(contextSequence, null);\n            if (rs.isPersistentSet()) {\n                NodeSet rl = ls.toNodeSet();\n                rl = rl.getContextNodes(contextId);\n                NodeSet rr = rs.toNodeSet();\n                rr = rr.getContextNodes(contextId);\n                result = rl.union(rr);\n                //<test>{() or ()}<\/test> should return <test>false<\/test>\t\t\t\n                if (getParent() instanceof EnclosedExpr ||\n                    //First, the intermediate PathExpr\n                    (getParent() != null && getParent().getParent() == null)) {\n                    result = result.isEmpty() ? BooleanValue.FALSE : BooleanValue.TRUE;\n                }\n            } else {\n                // fall back\n                final boolean rl = ls.effectiveBooleanValue();\n                if (rl) {\n                    result = BooleanValue.TRUE;\n                } else {\n                    final boolean rr = rs.effectiveBooleanValue();\n                    result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n                }\n            }\n        } else {\n            // no: default evaluation based on boolean value\n            final boolean rl = ls.effectiveBooleanValue();\n            if (rl) {\n                result = BooleanValue.TRUE;\n            } else {\n                final Sequence rs = right.eval(contextSequence, null);\n                final boolean rr = rs.effectiveBooleanValue();\n                result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n            }\n        }\n        if (context.getProfiler().isEnabled()) \n            {context.getProfiler().end(this, \"\", result);}\n        return result;\n    }","id":68946,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES,\n                \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                {context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT SEQUENCE\", contextSequence);}\n            if (contextItem != null)\n                {context.getProfiler().message(this, Profiler.START_SEQUENCES,\n                    \"CONTEXT ITEM\", contextItem.toSequence());}\n        }\n        if (getLength() == 0)\n            {return Sequence.EMPTY_SEQUENCE;}\n        if (contextItem != null)\n            {contextSequence = contextItem.toSequence();}\n        boolean doOptimize = optimize;\n        if (contextSequence != null && !contextSequence.isPersistentSet())\n            {doOptimize = false;}\n        Sequence result;\n        final Expression left = getLeft();\n        final Expression right = getRight();\n        final Sequence ls = left.eval(contextSequence, null);\n        // first check if left operand is a persistent set\n        doOptimize = doOptimize && (ls.isPersistentSet() || ls.isEmpty());\n        if (doOptimize) {\n            // yes: try to optimize by looking at right operand\n            final Sequence rs = right.eval(contextSequence, null);\n            if (rs.isPersistentSet() || rs.isEmpty()) {\n                NodeSet rl = ls.toNodeSet();\n                rl = rl.getContextNodes(contextId);\n                NodeSet rr = rs.toNodeSet();\n                rr = rr.getContextNodes(contextId);\n                result = rl.union(rr);\n                //<test>{() or ()}<\/test> should return <test>false<\/test>\t\t\t\n                if (getParent() instanceof EnclosedExpr ||\n                    //First, the intermediate PathExpr\n                    (getParent() != null && getParent().getParent() == null)) {\n                    result = result.isEmpty() ? BooleanValue.FALSE : BooleanValue.TRUE;\n                }\n            } else {\n                // fall back\n                final boolean rl = ls.effectiveBooleanValue();\n                if (rl) {\n                    result = BooleanValue.TRUE;\n                } else {\n                    final boolean rr = rs.effectiveBooleanValue();\n                    result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n                }\n            }\n        } else {\n            // no: default evaluation based on boolean value\n            final boolean rl = ls.effectiveBooleanValue();\n            if (rl) {\n                result = BooleanValue.TRUE;\n            } else {\n                final Sequence rs = right.eval(contextSequence, null);\n                final boolean rr = rs.effectiveBooleanValue();\n                result = rl || rr ? BooleanValue.TRUE : BooleanValue.FALSE;\n            }\n        }\n        if (context.getProfiler().isEnabled()) \n            {context.getProfiler().end(this, \"\", result);}\n        return result;\n    }","commit_id":"a0ae13b2c6b6e620829508ca7ce7361c6d225893","url":"https://github.com/eXist-db/exist"},{"original_method":"protected AbstractDistributedProgramRunner(WeaveRunner weaveRunner, Configuration hConf, CConfiguration cConf) {\n    this.weaveRunner = weaveRunner;\n    this.hConf = hConf;\n    this.cConf = cConf;\n  }","id":68947,"modified_method":"protected AbstractDistributedProgramRunner(WeaveRunner weaveRunner, Configuration hConf, CConfiguration cConf) {\n    this.weaveRunner = weaveRunner;\n    this.hConf = hConf;\n    this.cConf = cConf;\n    this.eventHandler = createEventHandler(cConf);\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.FLOW, \"Only FLOW process type is supported.\");\n\n    try {\n      boolean disableTransaction = program.getMainClass().isAnnotationPresent(DisableTransaction.class);\n\n      if (disableTransaction) {\n        LOG.info(\"Transaction is disable for flow {}.{}\", program.getApplicationId(), program.getId().getId());\n      }\n\n      FlowSpecification flowSpec = appSpec.getFlows().get(program.getName());\n      Preconditions.checkNotNull(flowSpec, \"Missing FlowSpecification for %s\", program.getName());\n\n      LOG.info(\"Configuring flowlets queues\");\n      Multimap<String, QueueName> flowletQueues = configureQueue(program, flowSpec);\n\n      // Launch flowlet program runners\n      LOG.info(\"Launching distributed flow: \" + program.getName() + \":\" + flowSpec.getName());\n\n      WeaveController controller = launcher.launch(new FlowWeaveApplication(program, flowSpec,\n                                                                            hConfFile, cConfFile, disableTransaction));\n      DistributedFlowletInstanceUpdater instanceUpdater = new DistributedFlowletInstanceUpdater(program, controller,\n                                                                                                queueAdmin, streamAdmin,\n                                                                                                flowletQueues);\n      return new FlowWeaveProgramController(program.getName(), controller, instanceUpdater).startListen();\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }","id":68948,"modified_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.FLOW, \"Only FLOW process type is supported.\");\n\n    try {\n      boolean disableTransaction = program.getMainClass().isAnnotationPresent(DisableTransaction.class);\n\n      if (disableTransaction) {\n        LOG.info(\"Transaction is disable for flow {}.{}\", program.getApplicationId(), program.getId().getId());\n      }\n\n      FlowSpecification flowSpec = appSpec.getFlows().get(program.getName());\n      Preconditions.checkNotNull(flowSpec, \"Missing FlowSpecification for %s\", program.getName());\n\n      LOG.info(\"Configuring flowlets queues\");\n      Multimap<String, QueueName> flowletQueues = configureQueue(program, flowSpec);\n\n      // Launch flowlet program runners\n      LOG.info(\"Launching distributed flow: \" + program.getName() + \":\" + flowSpec.getName());\n\n      WeaveController controller = launcher.launch(new FlowWeaveApplication(program, flowSpec,\n                                                                            hConfFile, cConfFile,\n                                                                            disableTransaction, eventHandler));\n      DistributedFlowletInstanceUpdater instanceUpdater = new DistributedFlowletInstanceUpdater(program, controller,\n                                                                                                queueAdmin, streamAdmin,\n                                                                                                flowletQueues);\n      return new FlowWeaveProgramController(program.getName(), controller, instanceUpdater).startListen();\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.MAPREDUCE, \"Only MAPREDUCE process type is supported.\");\n\n    MapReduceSpecification spec = appSpec.getMapReduce().get(program.getName());\n    Preconditions.checkNotNull(spec, \"Missing MapReduceSpecification for %s\", program.getName());\n\n    LOG.info(\"Launching MapReduce program: \" + program.getName() + \":\" + spec.getName());\n    WeaveController controller = launcher.launch(new MapReduceWeaveApplication(program, spec, hConfFile, cConfFile));\n\n    return new MapReduceWeaveProgramController(program.getName(), controller).startListen();\n  }","id":68949,"modified_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.MAPREDUCE, \"Only MAPREDUCE process type is supported.\");\n\n    MapReduceSpecification spec = appSpec.getMapReduce().get(program.getName());\n    Preconditions.checkNotNull(spec, \"Missing MapReduceSpecification for %s\", program.getName());\n\n    LOG.info(\"Launching MapReduce program: \" + program.getName() + \":\" + spec.getName());\n    WeaveController controller = launcher.launch(new MapReduceWeaveApplication(program, spec,\n                                                                               hConfFile, cConfFile, eventHandler));\n\n    return new MapReduceWeaveProgramController(program.getName(), controller).startListen();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.PROCEDURE, \"Only PROCEDURE process type is supported.\");\n\n    ProcedureSpecification procedureSpec = appSpec.getProcedures().get(program.getName());\n    Preconditions.checkNotNull(procedureSpec, \"Missing ProcedureSpecification for %s\", program.getName());\n\n    LOG.info(\"Launching distributed flow: \" + program.getName() + \":\" + procedureSpec.getName());\n    WeaveController controller = launcher.launch(new ProcedureWeaveApplication(program, procedureSpec,\n                                                                               hConfFile, cConfFile));\n    return new ProcedureWeaveProgramController(program.getName(), controller).startListen();\n  }","id":68950,"modified_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.PROCEDURE, \"Only PROCEDURE process type is supported.\");\n\n    ProcedureSpecification procedureSpec = appSpec.getProcedures().get(program.getName());\n    Preconditions.checkNotNull(procedureSpec, \"Missing ProcedureSpecification for %s\", program.getName());\n\n    LOG.info(\"Launching distributed flow: \" + program.getName() + \":\" + procedureSpec.getName());\n    WeaveController controller = launcher.launch(new ProcedureWeaveApplication(program, procedureSpec,\n                                                                               hConfFile, cConfFile, eventHandler));\n    return new ProcedureWeaveProgramController(program.getName(), controller).startListen();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.WEBAPP, \"Only WEBAPP process type is supported.\");\n\n    LOG.info(\"Launching distributed webapp: \" + program.getName());\n    WeaveController controller = launcher.launch(new WebappWeaveApplication(program, hConfFile, cConfFile));\n    return new WebappWeaveProgramController(program.getName(), controller).startListen();\n  }","id":68951,"modified_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.WEBAPP, \"Only WEBAPP process type is supported.\");\n\n    LOG.info(\"Launching distributed webapp: \" + program.getName());\n    WeaveController controller = launcher.launch(new WebappWeaveApplication(program, hConfFile,\n                                                                            cConfFile, eventHandler));\n    return new WebappWeaveProgramController(program.getName(), controller).startListen();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.WORKFLOW, \"Only WORKFLOW process type is supported.\");\n\n    WorkflowSpecification workflowSpec = appSpec.getWorkflows().get(program.getName());\n    Preconditions.checkNotNull(workflowSpec, \"Missing WorkflowSpecification for %s\", program.getName());\n\n    LOG.info(\"Launching distributed workflow: \" + program.getName() + \":\" + workflowSpec.getName());\n    WeaveController controller = launcher.launch(new WorkflowWeaveApplication(program, workflowSpec,\n                                                                              hConfFile, cConfFile));\n    return new WorkflowWeaveProgramController(program.getName(), controller).startListen();\n  }","id":68952,"modified_method":"@Override\n  protected ProgramController launch(Program program, ProgramOptions options,\n                                     File hConfFile, File cConfFile, ApplicationLauncher launcher) {\n    // Extract and verify parameters\n    ApplicationSpecification appSpec = program.getSpecification();\n    Preconditions.checkNotNull(appSpec, \"Missing application specification.\");\n\n    Type processorType = program.getType();\n    Preconditions.checkNotNull(processorType, \"Missing processor type.\");\n    Preconditions.checkArgument(processorType == Type.WORKFLOW, \"Only WORKFLOW process type is supported.\");\n\n    WorkflowSpecification workflowSpec = appSpec.getWorkflows().get(program.getName());\n    Preconditions.checkNotNull(workflowSpec, \"Missing WorkflowSpecification for %s\", program.getName());\n\n    LOG.info(\"Launching distributed workflow: \" + program.getName() + \":\" + workflowSpec.getName());\n    WeaveController controller = launcher.launch(new WorkflowWeaveApplication(program, workflowSpec,\n                                                                              hConfFile, cConfFile, eventHandler));\n    return new WorkflowWeaveProgramController(program.getName(), controller).startListen();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"public FlowWeaveApplication(Program program, FlowSpecification spec,\n                              File hConfig, File cConfig, boolean disableTransaction) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n    this.disableTransaction = disableTransaction;\n  }","id":68953,"modified_method":"public FlowWeaveApplication(Program program, FlowSpecification spec,\n                              File hConfig, File cConfig, boolean disableTransaction,\n                              EventHandler eventHandler) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n    this.disableTransaction = disableTransaction;\n    this.eventHandler = eventHandler;\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    WeaveSpecification.Builder.MoreRunnable moreRunnable = WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.FLOW.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable();\n\n    Location programLocation = program.getJarLocation();\n    String programName = programLocation.getName();\n    WeaveSpecification.Builder.RunnableSetter runnableSetter = null;\n    for (Map.Entry<String, FlowletDefinition> entry  : spec.getFlowlets().entrySet()) {\n      FlowletDefinition flowletDefinition = entry.getValue();\n      FlowletSpecification flowletSpec = flowletDefinition.getFlowletSpec();\n      ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n        .setVirtualCores(flowletSpec.getResources().getVirtualCores())\n        .setMemory(flowletSpec.getResources().getMemoryMB(), ResourceSpecification.SizeUnit.MEGA)\n        .setInstances(flowletDefinition.getInstances())\n        .build();\n\n      String flowletName = entry.getKey();\n      runnableSetter = moreRunnable\n        .add(flowletName,\n             new FlowletWeaveRunnable(flowletName, \"hConf.xml\", \"cConf.xml\", disableTransaction), resourceSpec)\n        .withLocalFiles().add(programName, programLocation.toURI())\n                         .add(\"hConf.xml\", hConfig.toURI())\n                         .add(\"cConf.xml\", cConfig.toURI()).apply();\n    }\n\n    Preconditions.checkState(runnableSetter != null, \"No flowlet for the flow.\");\n    return runnableSetter.anyOrder().build();\n  }","id":68954,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    WeaveSpecification.Builder.MoreRunnable moreRunnable = WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.FLOW.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable();\n\n    Location programLocation = program.getJarLocation();\n    String programName = programLocation.getName();\n    WeaveSpecification.Builder.RunnableSetter runnableSetter = null;\n    for (Map.Entry<String, FlowletDefinition> entry  : spec.getFlowlets().entrySet()) {\n      FlowletDefinition flowletDefinition = entry.getValue();\n      FlowletSpecification flowletSpec = flowletDefinition.getFlowletSpec();\n      ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n        .setVirtualCores(flowletSpec.getResources().getVirtualCores())\n        .setMemory(flowletSpec.getResources().getMemoryMB(), ResourceSpecification.SizeUnit.MEGA)\n        .setInstances(flowletDefinition.getInstances())\n        .build();\n\n      String flowletName = entry.getKey();\n      runnableSetter = moreRunnable\n        .add(flowletName,\n             new FlowletWeaveRunnable(flowletName, \"hConf.xml\", \"cConf.xml\", disableTransaction), resourceSpec)\n        .withLocalFiles().add(programName, programLocation.toURI())\n                         .add(\"hConf.xml\", hConfig.toURI())\n                         .add(\"cConf.xml\", cConfig.toURI()).apply();\n    }\n\n    Preconditions.checkState(runnableSetter != null, \"No flowlet for the flow.\");\n    return runnableSetter.anyOrder().withEventHandler(eventHandler).build();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    int numCores = cConf.getInt(Constants.Gateway.NUM_CORES, Constants.Gateway.DEFAULT_NUM_CORES);\n    int memoryMb = cConf.getInt(Constants.Gateway.MEMORY_MB, Constants.Gateway.DEFAULT_MEMORY_MB);\n    int instances = cConf.getInt(Constants.Gateway.NUM_INSTANCES, Constants.Gateway.DEFAULT_NUM_INSTANCES);\n\n    ResourceSpecification spec = ResourceSpecification.Builder\n      .with()\n      .setVirtualCores(numCores)\n      .setMemory(memoryMb, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(instances)\n      .build();\n\n    return WeaveSpecification.Builder.with()\n      .setName(name)\n      .withRunnable()\n      .add(new GatewayWeaveRunnable(\"gateway\", \"cConf.xml\", \"hConf.xml\"), spec)\n      .withLocalFiles()\n      .add(\"cConf.xml\", cConfFile.toURI())\n      .add(\"hConf.xml\", hConfFile.toURI())\n      .apply().anyOrder().build();\n  }","id":68955,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    int numCores = cConf.getInt(Constants.Gateway.NUM_CORES, Constants.Gateway.DEFAULT_NUM_CORES);\n    int memoryMb = cConf.getInt(Constants.Gateway.MEMORY_MB, Constants.Gateway.DEFAULT_MEMORY_MB);\n    int instances = cConf.getInt(Constants.Gateway.NUM_INSTANCES, Constants.Gateway.DEFAULT_NUM_INSTANCES);\n\n    // It is always present in continuuity-default.xml\n    long noContainerTimeout = cConf.getLong(Constants.CFG_WEAVE_NO_CONTAINER_TIMEOUT, Long.MAX_VALUE);\n\n    ResourceSpecification spec = ResourceSpecification.Builder\n      .with()\n      .setVirtualCores(numCores)\n      .setMemory(memoryMb, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(instances)\n      .build();\n\n    return WeaveSpecification.Builder.with()\n      .setName(name)\n      .withRunnable()\n      .add(new GatewayWeaveRunnable(\"gateway\", \"cConf.xml\", \"hConf.xml\"), spec)\n      .withLocalFiles()\n      .add(\"cConf.xml\", cConfFile.toURI())\n      .add(\"hConf.xml\", hConfFile.toURI())\n      .apply().anyOrder().withEventHandler(new AbortOnTimeoutEventHandler(noContainerTimeout)).build();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    int numInstances = cConf.getInt(LoggingConfiguration.LOG_SAVER_NUM_INSTANCES,\n                                    LoggingConfiguration.DEFAULT_LOG_SAVER_NUM_INSTANCES);\n    Preconditions.checkArgument(numInstances > 0, \"log saver num instances should be at least 1, got %s\",\n                                numInstances);\n\n    int memory = cConf.getInt(LoggingConfiguration.LOG_SAVER_RUN_MEMORY_MB, 1024);\n    Preconditions.checkArgument(memory > 0, \"Got invalid memory value for log saver %s\", memory);\n\n    WeaveSpecification.Builder.MoreRunnable moreRunnable = WeaveSpecification.Builder.with()\n      .setName(NAME)\n      .withRunnable();\n\n    ResourceSpecification spec = ResourceSpecification.Builder\n      .with()\n      .setVirtualCores(2)\n      .setMemory(memory, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(numInstances)\n      .build();\n\n    WeaveSpecification.Builder.RunnableSetter runnableSetter =\n      moreRunnable.add(new LogSaverWeaveRunnable(\"saver\", \"hConf.xml\", \"cConf.xml\"), spec)\n        .withLocalFiles()\n        .add(\"hConf.xml\", hConfig.toURI())\n        .add(\"cConf.xml\", cConfig.toURI())\n        .apply();\n\n    return runnableSetter.anyOrder().build();\n  }","id":68956,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    int numInstances = cConf.getInt(LoggingConfiguration.LOG_SAVER_NUM_INSTANCES,\n                                    LoggingConfiguration.DEFAULT_LOG_SAVER_NUM_INSTANCES);\n    Preconditions.checkArgument(numInstances > 0, \"log saver num instances should be at least 1, got %s\",\n                                numInstances);\n\n    int memory = cConf.getInt(LoggingConfiguration.LOG_SAVER_RUN_MEMORY_MB, 1024);\n    Preconditions.checkArgument(memory > 0, \"Got invalid memory value for log saver %s\", memory);\n\n    // It is always present in continuuity-default.xml\n    long noContainerTimeout = cConf.getLong(Constants.CFG_WEAVE_NO_CONTAINER_TIMEOUT, Long.MAX_VALUE);\n\n    WeaveSpecification.Builder.MoreRunnable moreRunnable = WeaveSpecification.Builder.with()\n      .setName(NAME)\n      .withRunnable();\n\n    ResourceSpecification spec = ResourceSpecification.Builder\n      .with()\n      .setVirtualCores(2)\n      .setMemory(memory, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(numInstances)\n      .build();\n\n    WeaveSpecification.Builder.RunnableSetter runnableSetter =\n      moreRunnable.add(new LogSaverWeaveRunnable(\"saver\", \"hConf.xml\", \"cConf.xml\"), spec)\n        .withLocalFiles()\n        .add(\"hConf.xml\", hConfig.toURI())\n        .add(\"cConf.xml\", cConfig.toURI())\n        .apply();\n\n    return runnableSetter.anyOrder().withEventHandler(new AbortOnTimeoutEventHandler(noContainerTimeout)).build();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"public MapReduceWeaveApplication(Program program, MapReduceSpecification spec, File hConfig, File cConfig) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n  }","id":68957,"modified_method":"public MapReduceWeaveApplication(Program program, MapReduceSpecification spec,\n                                   File hConfig, File cConfig, EventHandler eventHandler) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n    this.eventHandler = eventHandler;\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    // These resources are for the container that runs the mapred client that will launch the actual mapred job.\n    // It does not need much memory.  Memory for mappers and reduces are specified in the MapReduceSpecification,\n    // which is configurable by the author of the job.\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(1)\n      .setMemory(512, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(1)\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    return WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.MAPREDUCE.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable()\n        .add(spec.getName(),\n             new MapReduceWeaveRunnable(spec.getName(), \"hConf.xml\", \"cConf.xml\"),\n             resourceSpec)\n        .withLocalFiles()\n          .add(programLocation.getName(), programLocation.toURI())\n          .add(\"hConf.xml\", hConfig.toURI())\n          .add(\"cConf.xml\", cConfig.toURI()).apply()\n      .anyOrder().build();\n  }","id":68958,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    // These resources are for the container that runs the mapred client that will launch the actual mapred job.\n    // It does not need much memory.  Memory for mappers and reduces are specified in the MapReduceSpecification,\n    // which is configurable by the author of the job.\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(1)\n      .setMemory(512, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(1)\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    return WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.MAPREDUCE.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable()\n        .add(spec.getName(),\n             new MapReduceWeaveRunnable(spec.getName(), \"hConf.xml\", \"cConf.xml\"),\n             resourceSpec)\n        .withLocalFiles()\n          .add(programLocation.getName(), programLocation.toURI())\n          .add(\"hConf.xml\", hConfig.toURI())\n          .add(\"cConf.xml\", cConfig.toURI()).apply()\n      .anyOrder().withEventHandler(eventHandler).build();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(spec.getResources().getVirtualCores())\n      .setMemory(spec.getResources().getMemoryMB(), ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(spec.getInstances())\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    return WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.PROCEDURE.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable()\n        .add(spec.getName(),\n             new ProcedureWeaveRunnable(spec.getName(), \"hConf.xml\", \"cConf.xml\"),\n             resourceSpec)\n        .withLocalFiles()\n          .add(programLocation.getName(), programLocation.toURI())\n          .add(\"hConf.xml\", hConfig.toURI())\n          .add(\"cConf.xml\", cConfig.toURI()).apply()\n      .anyOrder().build();\n  }","id":68959,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(spec.getResources().getVirtualCores())\n      .setMemory(spec.getResources().getMemoryMB(), ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(spec.getInstances())\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    return WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.PROCEDURE.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable()\n        .add(spec.getName(),\n             new ProcedureWeaveRunnable(spec.getName(), \"hConf.xml\", \"cConf.xml\"),\n             resourceSpec)\n        .withLocalFiles()\n          .add(programLocation.getName(), programLocation.toURI())\n          .add(\"hConf.xml\", hConfig.toURI())\n          .add(\"cConf.xml\", cConfig.toURI()).apply()\n      .anyOrder().withEventHandler(eventHandler).build();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"public ProcedureWeaveApplication(Program program, ProcedureSpecification spec, File hConfig, File cConfig) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n  }","id":68960,"modified_method":"public ProcedureWeaveApplication(Program program, ProcedureSpecification spec,\n                                   File hConfig, File cConfig, EventHandler eventHandler) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n    this.eventHandler = eventHandler;\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(1)\n      .setMemory(512, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(1)\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    try {\n      String serviceName = WebappProgramRunner.getServiceName(Type.WEBAPP, program);\n\n      return WeaveSpecification.Builder.with()\n        .setName(serviceName)\n        .withRunnable()\n          .add(serviceName, new WebappWeaveRunnable(serviceName, \"hConf.xml\", \"cConf.xml\"),\n               resourceSpec)\n          .withLocalFiles()\n            .add(programLocation.getName(), programLocation.toURI())\n            .add(\"hConf.xml\", hConfig.toURI())\n            .add(\"cConf.xml\", cConfig.toURI()).apply()\n        .anyOrder().build();\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }","id":68961,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(1)\n      .setMemory(512, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(1)\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    try {\n      String serviceName = WebappProgramRunner.getServiceName(Type.WEBAPP, program);\n\n      return WeaveSpecification.Builder.with()\n        .setName(serviceName)\n        .withRunnable()\n          .add(serviceName, new WebappWeaveRunnable(serviceName, \"hConf.xml\", \"cConf.xml\"),\n               resourceSpec)\n          .withLocalFiles()\n            .add(programLocation.getName(), programLocation.toURI())\n            .add(\"hConf.xml\", hConfig.toURI())\n            .add(\"cConf.xml\", cConfig.toURI()).apply()\n        .anyOrder().withEventHandler(eventHandler).build();\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"public WebappWeaveApplication(Program program, File hConfig, File cConfig) {\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n  }","id":68962,"modified_method":"public WebappWeaveApplication(Program program, File hConfig, File cConfig, EventHandler eventHandler) {\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n    this.eventHandler = eventHandler;\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"public WorkflowWeaveApplication(Program program, WorkflowSpecification spec, File hConfig, File cConfig) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n  }","id":68963,"modified_method":"public WorkflowWeaveApplication(Program program, WorkflowSpecification spec,\n                                  File hConfig, File cConfig, EventHandler eventHandler) {\n    this.spec = spec;\n    this.program = program;\n    this.hConfig = hConfig;\n    this.cConfig = cConfig;\n    this.eventHandler = eventHandler;\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public WeaveSpecification configure() {\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(1)\n      .setMemory(WORKFLOW_MEMORY_MB, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(1)\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    return WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.WORKFLOW.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable()\n      .add(spec.getName(),\n           new WorkflowWeaveRunnable(spec.getName(), \"hConf.xml\", \"cConf.xml\"),\n           resourceSpec)\n      .withLocalFiles()\n      .add(programLocation.getName(), programLocation.toURI())\n      .add(\"hConf.xml\", hConfig.toURI())\n      .add(\"cConf.xml\", cConfig.toURI()).apply()\n      .anyOrder().build();\n  }","id":68964,"modified_method":"@Override\n  public WeaveSpecification configure() {\n    ResourceSpecification resourceSpec = ResourceSpecification.Builder.with()\n      .setVirtualCores(1)\n      .setMemory(WORKFLOW_MEMORY_MB, ResourceSpecification.SizeUnit.MEGA)\n      .setInstances(1)\n      .build();\n\n    Location programLocation = program.getJarLocation();\n\n    return WeaveSpecification.Builder.with()\n      .setName(String.format(\"%s.%s.%s.%s\",\n                             Type.WORKFLOW.name().toLowerCase(),\n                             program.getAccountId(), program.getApplicationId(), spec.getName()))\n      .withRunnable()\n      .add(spec.getName(),\n           new WorkflowWeaveRunnable(spec.getName(), \"hConf.xml\", \"cConf.xml\"),\n           resourceSpec)\n      .withLocalFiles()\n      .add(programLocation.getName(), programLocation.toURI())\n      .add(\"hConf.xml\", hConfig.toURI())\n      .add(\"cConf.xml\", cConfig.toURI()).apply()\n      .anyOrder().withEventHandler(eventHandler).build();\n  }","commit_id":"8ebf5aaf40d7ae79e605d24c51d83881dc96cd1a","url":"https://github.com/caskdata/cdap"},{"original_method":"public Format getDateTime(Locale locale, TimeZone timeZone) {\n\t\treturn FastDateFormat.getDateTimeInstance(\n\t\t\tFastDateFormat.SHORT, FastDateFormat.SHORT, timeZone, locale);\n\t}","id":68965,"modified_method":"public Format getDateTime(Locale locale, TimeZone timeZone) {\n\t\tString key = getKey(locale, timeZone);\n\n\t\tFormat format = _dateTimeFormats.get(key);\n\n\t\tif (format == null) {\n\t\t\tformat = FastDateFormat.getDateTimeInstance(\n\t\t\t\tFastDateFormat.SHORT, FastDateFormat.SHORT, timeZone, locale);\n\n\t\t\t_dateTimeFormats.put(key, format);\n\t\t}\n\n\t\treturn format;\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getTime(Locale locale, TimeZone timeZone) {\n\t\treturn FastDateFormat.getTimeInstance(\n\t\t\tFastDateFormat.SHORT, timeZone, locale);\n\t}","id":68966,"modified_method":"public Format getTime(Locale locale, TimeZone timeZone) {\n\t\tString key = getKey(locale, timeZone);\n\n\t\tFormat format = _timeFormats.get(key);\n\n\t\tif (format == null) {\n\t\t\tformat = FastDateFormat.getTimeInstance(\n\t\t\t\tFastDateFormat.SHORT, timeZone, locale);\n\n\t\t\t_timeFormats.put(key, format);\n\t\t}\n\n\t\treturn format;\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getTime(TimeZone timeZone) {\n\t\treturn FastDateFormat.getTimeInstance(FastDateFormat.SHORT, timeZone);\n\t}","id":68967,"modified_method":"public Format getTime(TimeZone timeZone) {\n\t\treturn getTime(null, timeZone);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getDate(Locale locale) {\n\t\treturn FastDateFormat.getDateInstance(FastDateFormat.SHORT, locale);\n\t}","id":68968,"modified_method":"public Format getDate(Locale locale) {\n\t\treturn getDate(locale, null);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getDateTime(TimeZone timeZone) {\n\t\treturn FastDateFormat.getDateTimeInstance(\n\t\t\tFastDateFormat.SHORT, FastDateFormat.SHORT, timeZone);\n\t}","id":68969,"modified_method":"public Format getDateTime(TimeZone timeZone) {\n\t\treturn getDateTime(null, timeZone);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getDate(TimeZone timeZone) {\n\t\treturn FastDateFormat.getDateInstance(FastDateFormat.SHORT, timeZone);\n\t}","id":68970,"modified_method":"public Format getDate(TimeZone timeZone) {\n\t\treturn getDate(null, timeZone);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getSimpleDateFormat(String pattern) {\n\t\treturn FastDateFormat.getInstance(pattern);\n\t}","id":68971,"modified_method":"public Format getSimpleDateFormat(String pattern) {\n\t\treturn getSimpleDateFormat(pattern, null, null);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getSimpleDateFormat(String pattern, TimeZone timeZone) {\n\t\treturn FastDateFormat.getInstance(pattern, timeZone);\n\t}","id":68972,"modified_method":"public Format getSimpleDateFormat(String pattern, TimeZone timeZone) {\n\t\treturn getSimpleDateFormat(pattern, null, timeZone);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getSimpleDateFormat(\n\t\tString pattern, Locale locale, TimeZone timeZone) {\n\n\t\treturn FastDateFormat.getInstance(pattern, timeZone, locale);\n\t}","id":68973,"modified_method":"public Format getSimpleDateFormat(\n\t\tString pattern, Locale locale, TimeZone timeZone) {\n\n\t\tString key = getKey(pattern, locale, timeZone);\n\n\t\tFormat format = _simpleDateFormats.get(key);\n\n\t\tif (format == null) {\n\t\t\tformat = FastDateFormat.getInstance(pattern, timeZone, locale);\n\n\t\t\t_simpleDateFormats.put(key, format);\n\t\t}\n\n\t\treturn format;\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getSimpleDateFormat(String pattern, Locale locale) {\n\t\treturn FastDateFormat.getInstance(pattern, locale);\n\t}","id":68974,"modified_method":"public Format getSimpleDateFormat(String pattern, Locale locale) {\n\t\treturn getSimpleDateFormat(pattern, locale, null);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getTime(Locale locale) {\n\t\treturn FastDateFormat.getTimeInstance(FastDateFormat.SHORT, locale);\n\t}","id":68975,"modified_method":"public Format getTime(Locale locale) {\n\t\treturn getTime(locale, null);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getDateTime(Locale locale) {\n\t\treturn FastDateFormat.getDateTimeInstance(\n\t\t\tFastDateFormat.SHORT, FastDateFormat.SHORT, locale);\n\t}","id":68976,"modified_method":"public Format getDateTime(Locale locale) {\n\t\treturn getDateTime(locale, null);\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Format getDate(Locale locale, TimeZone timeZone) {\n\t\treturn FastDateFormat.getDateInstance(\n\t\t\tFastDateFormat.SHORT, timeZone, locale);\n\t}","id":68977,"modified_method":"public Format getDate(Locale locale, TimeZone timeZone) {\n\t\tString key = getKey(locale, timeZone);\n\n\t\tFormat format = _dateFormats.get(key);\n\n\t\tif (format == null) {\n\t\t\tformat = FastDateFormat.getDateInstance(\n\t\t\t\tFastDateFormat.SHORT, timeZone, locale);\n\n\t\t\t_dateFormats.put(key, format);\n\t\t}\n\n\t\treturn format;\n\t}","commit_id":"5d1a12bc6410b7bcc4f4d68ae058cd5b8c0ce6c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * An utility method to parse a string into a 'Date' instance. Note that the\n     * string should be in the locale specific DateFormat.FULL style for both\n     * the date and time.\n     *\n     * @see java.text.DateFormat\n     * @param timeString a {@link java.lang.String} object.\n     * @return a {@link java.util.Date} object.\n     * @throws java.text.ParseException if any.\n     */\n    public static final Date parseToDate(String timeString) throws ParseException {\n\treturn DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).parse(timeString);\n    }","id":68978,"modified_method":"/**\n     * An utility method to parse a string into a 'Date' instance. Note that the\n     * string should be in the locale specific DateFormat.FULL style for both\n     * the date and time.\n     *\n     * @see java.text.DateFormat\n     * @param timeString a {@link java.lang.String} object.\n     * @return a {@link java.util.Date} object.\n     * @throws java.text.ParseException if any.\n     */\n    public static final Date parseToDate(final String timeString) throws ParseException {\n        try {\n            return getCustomFormatter().parse(timeString);\n        } catch (final ParseException parseException) {\n            return getFormatter().parse(timeString);\n        }\n    }","commit_id":"f0d1af5fdf2b5c5fdd611dd912af933bef8655b4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * An utility method to format a 'Date' into a string in the local specific\n     * FULL DateFormat style for both the date and time.\n     *\n     * @see java.text.DateFormat\n     * @param date a {@link java.util.Date} object.\n     * @return a {@link java.lang.String} object.\n     */\n    public static final String formatToString(Date date) {\n\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.FULL,\n\t\t\t\t\t\t       DateFormat.FULL);\n\tdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n\treturn df.format(date);\n    }","id":68979,"modified_method":"/**\n     * An utility method to format a 'Date' into a string in the local specific\n     * FULL DateFormat style for both the date and time.\n     *\n     * @see java.text.DateFormat\n     * @param date a {@link java.util.Date} object.\n     * @return a {@link java.lang.String} object.\n     */\n    public static final String formatToString(final Date date) {\n        final DateFormat df = getFormatter();\n        df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n        return df.format(date);\n    }","commit_id":"f0d1af5fdf2b5c5fdd611dd912af933bef8655b4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * An utility method to format a 'Date' into a string in the local specific\n     * DEFALUT DateFormat style for both the date and time. This is used by the\n     * webui and a change here should get all time display in the webui changed.\n     *\n     * @see java.text.DateFormat\n     * @see org.opennms.web.Util.formatDateToUIString\n     * @deprecated This is no longer used by the UI. All WebUI-specific code\n     *             should under the org.opennms.web packages.\n     * @param date a {@link java.util.Date} object.\n     * @return a {@link java.lang.String} object.\n     */\n    public static final String formatToUIString(Date date) {\n        return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(date);\n    }","id":68980,"modified_method":"/**\n     * An utility method to format a 'Date' into a string in the local specific\n     * DEFALUT DateFormat style for both the date and time. This is used by the\n     * webui and a change here should get all time display in the webui changed.\n     *\n     * @see java.text.DateFormat\n     * @see org.opennms.web.Util.formatDateToUIString\n     * @deprecated This is no longer used by the UI. All WebUI-specific code\n     *             should under the org.opennms.web packages.\n     * @param date a {@link java.util.Date} object.\n     * @return a {@link java.lang.String} object.\n     */\n    public static final String formatToUIString(final Date date) {\n        final DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM);\n        formatter.setLenient(true);\n        return formatter.format(date);\n    }","commit_id":"f0d1af5fdf2b5c5fdd611dd912af933bef8655b4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * An utility method to format a 'Date' into a string in the local specific\n     * FULL DateFormat style for both the date and time.\n     * \n     * @see java.text.DateFormat\n     */\n    public static final String formatToString(Date date) {\n        return DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date);\n    }","id":68981,"modified_method":"/**\n     * An utility method to format a 'Date' into a string in the local specific\n     * FULL DateFormat style for both the date and time.\n     * \n     * @see java.text.DateFormat\n     */\n    public static final String formatToString(Date date) {\n\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.FULL,\n\t\t\t\t\t\t       DateFormat.FULL);\n\tdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n\treturn df.format(date);\n    }","commit_id":"2f8ff322ae2645f43f3f55366fdbd8d803af68b9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n\tpublic Map<String, String> getEmailDefinitionTerms(\n\t\tPortletRequest portletRequest, String emailFromAddress,\n\t\tString emailFromName) {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)portletRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tMap<String, String> definitionTerms =\n\t\t\tnew LinkedHashMap<String, String>();\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_ID$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-id-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_MX$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-mx-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-name-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_TITLE$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-document-title\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_TYPE$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-document-type\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_URL$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-document-url\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_USER_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-email-address-of-the-user-who-added-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-user-who-added-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FOLDER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-folder-in-which-the-document-has-been-added\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FROM_ADDRESS$]\", HtmlUtil.escape(emailFromAddress));\n\t\tdefinitionTerms.put(\"[$FROM_NAME$]\", HtmlUtil.escape(emailFromName));\n\n\t\tCompany company = themeDisplay.getCompany();\n\n\t\tdefinitionTerms.put(\"[$PORTAL_URL$]\", company.getVirtualHostname());\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PORTLET_NAME$]\", PortalUtil.getPortletTitle(portletRequest));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$SITE_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-site-name-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-address-of-the-email-recipient\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-name-of-the-email-recipient\"));\n\n\t\treturn definitionTerms;\n\t}","id":68982,"modified_method":"@Override\n\tpublic Map<String, String> getEmailDefinitionTerms(\n\t\tPortletRequest portletRequest, String emailFromAddress,\n\t\tString emailFromName) {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)portletRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tMap<String, String> definitionTerms =\n\t\t\tnew LinkedHashMap<String, String>();\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_ID$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-id-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_MX$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-mx-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-name-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_TITLE$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-document-title\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_TYPE$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-document-type\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_URL$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-document-url\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_USER_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-email-address-of-the-user-who-added-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DOCUMENT_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-user-who-added-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FOLDER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-folder-in-which-the-document-has-been-added\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FROM_ADDRESS$]\", HtmlUtil.escape(emailFromAddress));\n\t\tdefinitionTerms.put(\"[$FROM_NAME$]\", HtmlUtil.escape(emailFromName));\n\n\t\tCompany company = themeDisplay.getCompany();\n\n\t\tdefinitionTerms.put(\"[$PORTAL_URL$]\", company.getVirtualHostname());\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PORTLET_NAME$]\",\n\t\t\tHtmlUtil.escape(PortalUtil.getPortletTitle(portletRequest)));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$SITE_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-site-name-associated-with-the-document\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-address-of-the-email-recipient\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-name-of-the-email-recipient\"));\n\n\t\treturn definitionTerms;\n\t}","commit_id":"41b10014bf7534695633f2f314e5a33623a60869","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Map<String, String> getEmailNotificationDefinitionTerms(\n\t\tRenderRequest request, String emailFromAddress, String emailFromName) {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tMap<String, String> definitionTerms =\n\t\t\tnew LinkedHashMap<String, String>();\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_ID$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-id-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_MX$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-mx-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-name-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DIFFS_URL$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-url-of-the-page-comparing-this-page-content-with-the-\" +\n\t\t\t\t\t\"previous-version\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FROM_ADDRESS$]\", HtmlUtil.escape(emailFromAddress));\n\t\tdefinitionTerms.put(\"[$FROM_NAME$]\", HtmlUtil.escape(emailFromName));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$NODE_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-node-in-which-the-page-was-added\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_CONTENT$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-content\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_DATE_UPDATE$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-date-of-the-modifications\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_DIFFS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-page-content-compared-with-the-previous-version-page-\" +\n\t\t\t\t\t\"content\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_ID$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-id\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_SUMMARY$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-summary-of-the-page-or-the-modifications\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_TITLE$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-title\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_URL$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-url\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_USER_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-email-address-of-the-user-who-added-the-page\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-user-who-added-the-page\"));\n\n\t\tCompany company = themeDisplay.getCompany();\n\n\t\tdefinitionTerms.put(\"[$PORTAL_URL$]\", company.getVirtualHostname());\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PORTLET_NAME$]\", PortalUtil.getPortletTitle(request));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$SITE_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-site-name-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-address-of-the-email-recipient\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-name-of-the-email-recipient\"));\n\n\t\treturn definitionTerms;\n\t}","id":68983,"modified_method":"public static Map<String, String> getEmailNotificationDefinitionTerms(\n\t\tRenderRequest request, String emailFromAddress, String emailFromName) {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tMap<String, String> definitionTerms =\n\t\t\tnew LinkedHashMap<String, String>();\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_ID$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-id-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_MX$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-mx-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-company-name-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$DIFFS_URL$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-url-of-the-page-comparing-this-page-content-with-the-\" +\n\t\t\t\t\t\"previous-version\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FROM_ADDRESS$]\", HtmlUtil.escape(emailFromAddress));\n\t\tdefinitionTerms.put(\"[$FROM_NAME$]\", HtmlUtil.escape(emailFromName));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$NODE_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-node-in-which-the-page-was-added\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_CONTENT$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-content\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_DATE_UPDATE$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-date-of-the-modifications\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_DIFFS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-page-content-compared-with-the-previous-version-page-\" +\n\t\t\t\t\t\"content\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_ID$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-id\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_SUMMARY$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-summary-of-the-page-or-the-modifications\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_TITLE$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-title\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_URL$]\",\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"the-page-url\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_USER_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-email-address-of-the-user-who-added-the-page\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PAGE_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-user-who-added-the-page\"));\n\n\t\tCompany company = themeDisplay.getCompany();\n\n\t\tdefinitionTerms.put(\"[$PORTAL_URL$]\", company.getVirtualHostname());\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PORTLET_NAME$]\",\n\t\t\tHtmlUtil.escape(PortalUtil.getPortletTitle(request)));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$SITE_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-site-name-associated-with-the-wiki\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-address-of-the-email-recipient\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-name-of-the-email-recipient\"));\n\n\t\treturn definitionTerms;\n\t}","commit_id":"41b10014bf7534695633f2f314e5a33623a60869","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Map<String, String> getEmailDefinitionTerms(\n\t\tPortletRequest portletRequest, String emailFromAddress,\n\t\tString emailFromName) {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)portletRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tMap<String, String> definitionTerms =\n\t\t\tnew LinkedHashMap<String, String>();\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$BOOKMARKS_ENTRY_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-user-who-added-the-bookmark-entry\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$BOOKMARKS_ENTRY_STATUS_BY_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-user-who-updated-the-bookmark-entry\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$BOOKMARKS_ENTRY_URL$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-bookmark-entry-url\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FROM_ADDRESS$]\", HtmlUtil.escape(emailFromAddress));\n\t\tdefinitionTerms.put(\"[$FROM_NAME$]\", HtmlUtil.escape(emailFromName));\n\n\t\tCompany company = themeDisplay.getCompany();\n\n\t\tdefinitionTerms.put(\"[$PORTAL_URL$]\", company.getVirtualHostname());\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PORTLET_NAME$]\", PortalUtil.getPortletTitle(portletRequest));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-address-of-the-email-recipient\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-name-of-the-email-recipient\"));\n\n\t\treturn definitionTerms;\n\t}","id":68984,"modified_method":"public static Map<String, String> getEmailDefinitionTerms(\n\t\tPortletRequest portletRequest, String emailFromAddress,\n\t\tString emailFromName) {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)portletRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tMap<String, String> definitionTerms =\n\t\t\tnew LinkedHashMap<String, String>();\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$BOOKMARKS_ENTRY_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-user-who-added-the-bookmark-entry\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$BOOKMARKS_ENTRY_STATUS_BY_USER_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-user-who-updated-the-bookmark-entry\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$BOOKMARKS_ENTRY_URL$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-bookmark-entry-url\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$FROM_ADDRESS$]\", HtmlUtil.escape(emailFromAddress));\n\t\tdefinitionTerms.put(\"[$FROM_NAME$]\", HtmlUtil.escape(emailFromName));\n\n\t\tCompany company = themeDisplay.getCompany();\n\n\t\tdefinitionTerms.put(\"[$PORTAL_URL$]\", company.getVirtualHostname());\n\n\t\tdefinitionTerms.put(\n\t\t\t\"[$PORTLET_NAME$]\",\n\t\t\tHtmlUtil.escape(PortalUtil.getPortletTitle(portletRequest)));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_ADDRESS$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(),\n\t\t\t\t\"the-address-of-the-email-recipient\"));\n\t\tdefinitionTerms.put(\n\t\t\t\"[$TO_NAME$]\",\n\t\t\tLanguageUtil.get(\n\t\t\t\tthemeDisplay.getLocale(), \"the-name-of-the-email-recipient\"));\n\n\t\treturn definitionTerms;\n\t}","commit_id":"4c153654e0f54f52b7c7d7c05745645b7c4346a0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertLBFailoverToNodeOne() throws Exception {\n\t\tselenium.open(\"/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68985,"modified_method":"public void testAssertLBFailoverToNodeOne() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertLBFailoverToNodeTwo() throws Exception {\n\t\tselenium.open(\"/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68986,"modified_method":"public void testAssertLBFailoverToNodeTwo() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertNodeOne() throws Exception {\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68987,"modified_method":"public void testAssertNodeOne() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertNodeOne() throws Exception {\n\t\tselenium.open(\"/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_58_login\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68988,"modified_method":"public void testAssertNodeOne() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_58_login\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertNodeTwo() throws Exception {\n\t\tselenium.open(\"/\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_58_login\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68989,"modified_method":"public void testAssertNodeTwo() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_58_login\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertNodeTwo() throws Exception {\n\t\tselenium.open(\"/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68990,"modified_method":"public void testAssertNodeTwo() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testN1_AddMessageBoardsContent() throws Exception {\n\t\tselenium.open(\"/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_145_addApplication\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='Collaboration-MessageBoards']/p\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id='Collaboration-MessageBoards']/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Category']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Category']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_19_name\", RuntimeVariables.replace(\"Test Category 1\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 1\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t}","id":68991,"modified_method":"public void testN1_AddMessageBoardsContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"_145_addApplication\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@title='Message Boards']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//div[@title='Message Boards']/p/a\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Category']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Category']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_19_name\", RuntimeVariables.replace(\"Test Category 1\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 1\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testN1_AssertMessageBoardsContentUpdated()\n\t\tthrows Exception {\n\t\tselenium.open(\"/\");\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//div[4]/ul/li[5]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 2\"));\n\t}","id":68992,"modified_method":"public void testN1_AssertMessageBoardsContentUpdated()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 2\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_1$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testN2_AssertMessageBoardsContentPresent()\n\t\tthrows Exception {\n\t\tselenium.open(\"/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//li[5]/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='wrapper']/div[6]\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 1\"));\n\t}","id":68993,"modified_method":"public void testN2_AssertMessageBoardsContentPresent()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Sign In']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 1\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Node: [$CLUSTER_NODE_2$]\"),\n\t\t\tselenium.getText(\"//div[@id='content']/div[3]\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testN2_UpdateMessageBoardsContent() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//td[5]/ul/li/strong/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_19_name\", RuntimeVariables.replace(\"Test Category 2\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 2\"));\n\t}","id":68994,"modified_method":"public void testN2_UpdateMessageBoardsContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//td[5]/ul/li/strong/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//td[5]/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_19_name\", RuntimeVariables.replace(\"Test Category 2\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Category 2\"));\n\t}","commit_id":"f462b76b2767718b35ae02f986f83171f992c8ca","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void updateBalloon() {\n    boolean correct = false;\n    try {\n      final PsiFile file = myParams.first;\n      //todo: unfortunately there is no way to access host element representing regexp\n      int offset = -1;\n      try {\n        final String name = file.getName();\n        offset = Integer.parseInt(name.substring(name.lastIndexOf(':') + 1, name.lastIndexOf(')')));\n      } catch (Exception ignore) {}\n\n      int flags = 0;\n      if (offset != -1) {\n        final PsiFile host = FileContextUtil.getContextFile(file);\n        if (host != null) {\n          final PsiElement regexpInHost = host.findElementAt(offset);\n          if (regexpInHost != null) {\n            for (RegExpModifierProvider provider : RegExpModifierProvider.EP.getExtensions()) {\n              final int modifiers = provider.getFlags(regexpInHost, file);\n              if (modifiers > 0) {\n                flags = modifiers;\n                break;\n              }\n            }\n          }\n        }\n      }\n      correct = Pattern.compile(myRegExp.getText(), flags).matcher(mySampleText.getText()).matches();\n    } catch (Exception ignore) {}\n\n    mySampleText.setBackground(correct ? new JBColor(new Color(231, 250, 219), new Color(68, 85, 66)) : new JBColor(new Color(255, 177, 160), new Color(110, 43, 40)));\n    BalloonImpl balloon = (BalloonImpl)myRef.get();\n    if (balloon != null && balloon.isDisposed()) {\n      balloon.revalidate();\n    }\n  }","id":68995,"modified_method":"private void updateBalloon() {\n    boolean correct = false;\n    PsiFile file = myParams.first;\n    PsiLanguageInjectionHost host = InjectedLanguageUtil.findInjectionHost(file);\n    int flags = 0;\n    if (host != null) {\n      for (RegExpModifierProvider provider : RegExpModifierProvider.EP.getExtensions()) {\n        flags = provider.getFlags(host, file);\n        if (flags > 0) break;\n      }\n    }\n    try {\n      correct = Pattern.compile(myRegExp.getText(), flags).matcher(mySampleText.getText()).matches();\n    } catch (Exception ignore) {}\n\n    JBColor color1 = new JBColor(new Color(231, 250, 219), new Color(68, 85, 66));\n    JBColor color2 = new JBColor(new Color(255, 177, 160), new Color(110, 43, 40));\n    mySampleText.setBackground(correct ? color1 : color2);\n    myMessage.setText(correct ? \"Matches!\" : \"no match\");\n    BalloonImpl balloon = (BalloonImpl)myRef.get();\n    if (balloon != null && balloon.isDisposed()) {\n      balloon.revalidate();\n    }\n  }","commit_id":"58af58ba53d8c53d6d4fc8d61a209b23ea082913","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createUIComponents() {\n    PsiFile file = myParams.first;\n    myProject = file.getProject();\n    myRef = myParams.second;\n    Document document = PsiDocumentManager.getInstance(myProject).getDocument(file);\n\n    myRegExp = new EditorTextField(document, myProject, RegExpLanguage.INSTANCE.getAssociatedFileType());\n    final String sampleText = PropertiesComponent.getInstance(myProject).getValue(LAST_EDITED_REGEXP, \"Sample Text\");\n    mySampleText = new EditorTextField(sampleText, myProject, PlainTextFileType.INSTANCE);\n    mySampleText.setBorder(\n      new CompoundBorder(new EmptyBorder(2, 2, 2, 4), new LineBorder(UIUtil.isUnderDarcula() ? Gray._100 : UIUtil.getBorderColor())));\n    mySampleText.setOneLineMode(false);\n    mySampleText.addDocumentListener(new DocumentAdapter() {\n      @Override\n      public void documentChanged(DocumentEvent e) {\n        //noinspection SSBasedInspection\n        SwingUtilities.invokeLater(new Runnable() {\n          public void run() {\n            myRootPanel.revalidate();\n            final Balloon balloon = myRef.get();\n            if (balloon != null) {\n              balloon.revalidate();\n            }\n          }\n        });\n      }\n    });\n\n    myRootPanel = new JPanel(new BorderLayout()) {\n      @Override\n      public void addNotify() {\n        super.addNotify();\n        IdeFocusManager.getGlobalInstance().requestFocus(mySampleText, true);\n\n        new AnAction(){\n          @Override\n          public void actionPerformed(AnActionEvent e) {\n            IdeFocusManager.findInstance().requestFocus(myRegExp.getFocusTarget(), true);\n          }\n        }.registerCustomShortcutSet(CustomShortcutSet.fromString(\"shift TAB\"), mySampleText, myRef.get());\n        final AnAction escaper = new AnAction() {\n          @Override\n          public void actionPerformed(AnActionEvent e) {\n            myRef.get().hide();\n          }\n        };\n        escaper.registerCustomShortcutSet(CommonShortcuts.ESCAPE, myRegExp.getFocusTarget(), myRef.get());\n        escaper.registerCustomShortcutSet(CommonShortcuts.ESCAPE, mySampleText.getFocusTarget(), myRef.get());\n\n\n        myRef.get().addListener(new JBPopupAdapter() {\n          @Override\n          public void onClosed(LightweightWindowEvent event) {\n            PropertiesComponent.getInstance(myProject).setValue(LAST_EDITED_REGEXP, mySampleText.getText());\n          }\n        });\n\n        final Alarm updater = new Alarm(Alarm.ThreadToUse.SWING_THREAD, myRef.get());\n        final DocumentAdapter documentListener = new DocumentAdapter() {\n          @Override\n          public void documentChanged(DocumentEvent e) {\n            updater.cancelAllRequests();\n            if (!updater.isDisposed()) {\n              updater.addRequest(new Runnable() {\n                @Override\n                public void run() {\n                  updateBalloon();\n                }\n              }, 200);\n            }\n          }\n        };\n        myRegExp.addDocumentListener(documentListener);\n        mySampleText.addDocumentListener(documentListener);\n\n        updateBalloon();\n        mySampleText.selectAll();\n      }\n    };\n  }","id":68996,"modified_method":"private void createUIComponents() {\n    PsiFile file = myParams.first;\n    myProject = file.getProject();\n    myRef = myParams.second;\n    Document document = PsiDocumentManager.getInstance(myProject).getDocument(file);\n\n    myRegExp = new EditorTextField(document, myProject, RegExpLanguage.INSTANCE.getAssociatedFileType());\n    myRegExp.setPreferredWidth(Math.max(300, myRegExp.getPreferredSize().width));\n    final String sampleText = PropertiesComponent.getInstance(myProject).getValue(LAST_EDITED_REGEXP, \"Sample Text\");\n    mySampleText = new EditorTextField(sampleText, myProject, PlainTextFileType.INSTANCE);\n    mySampleText.setBorder(\n      new CompoundBorder(new EmptyBorder(2, 2, 2, 4), new LineBorder(UIUtil.isUnderDarcula() ? Gray._100 : UIUtil.getBorderColor())));\n    mySampleText.setOneLineMode(false);\n    mySampleText.addDocumentListener(new DocumentAdapter() {\n      @Override\n      public void documentChanged(DocumentEvent e) {\n        //noinspection SSBasedInspection\n        SwingUtilities.invokeLater(new Runnable() {\n          public void run() {\n            myRootPanel.revalidate();\n            final Balloon balloon = myRef.get();\n            if (balloon != null) {\n              balloon.revalidate();\n            }\n          }\n        });\n      }\n    });\n\n    myRootPanel = new JPanel(new BorderLayout()) {\n      @Override\n      public void addNotify() {\n        super.addNotify();\n        IdeFocusManager.getGlobalInstance().requestFocus(mySampleText, true);\n\n        new AnAction(){\n          @Override\n          public void actionPerformed(AnActionEvent e) {\n            IdeFocusManager.findInstance().requestFocus(myRegExp.getFocusTarget(), true);\n          }\n        }.registerCustomShortcutSet(CustomShortcutSet.fromString(\"shift TAB\"), mySampleText, myRef.get());\n        final AnAction escaper = new AnAction() {\n          @Override\n          public void actionPerformed(AnActionEvent e) {\n            myRef.get().hide();\n          }\n        };\n        escaper.registerCustomShortcutSet(CommonShortcuts.ESCAPE, myRegExp.getFocusTarget(), myRef.get());\n        escaper.registerCustomShortcutSet(CommonShortcuts.ESCAPE, mySampleText.getFocusTarget(), myRef.get());\n\n\n        myRef.get().addListener(new JBPopupAdapter() {\n          @Override\n          public void onClosed(LightweightWindowEvent event) {\n            PropertiesComponent.getInstance(myProject).setValue(LAST_EDITED_REGEXP, mySampleText.getText());\n          }\n        });\n\n        final Alarm updater = new Alarm(Alarm.ThreadToUse.SWING_THREAD, myRef.get());\n        final DocumentAdapter documentListener = new DocumentAdapter() {\n          @Override\n          public void documentChanged(DocumentEvent e) {\n            updater.cancelAllRequests();\n            if (!updater.isDisposed()) {\n              updater.addRequest(new Runnable() {\n                @Override\n                public void run() {\n                  updateBalloon();\n                }\n              }, 200);\n            }\n          }\n        };\n        myRegExp.addDocumentListener(documentListener);\n        mySampleText.addDocumentListener(documentListener);\n\n        updateBalloon();\n        mySampleText.selectAll();\n      }\n    };\n  }","commit_id":"58af58ba53d8c53d6d4fc8d61a209b23ea082913","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {\n    final Pair<PsiElement, TextRange> pair = getRangePair(file, editor);\n    /*super.isAvailable(project, editor, file) && */\n    if (pair != null && pair.first != null) {\n      Language language = pair.first.getLanguage();\n      Language baseLanguage = language.getBaseLanguage();\n      return language == RegExpLanguage.INSTANCE || baseLanguage == RegExpLanguage.INSTANCE;\n    }\n    return false;\n  }","id":68997,"modified_method":"@Override\n  public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {\n    Pair<PsiElement, TextRange> pair = getRangePair(file, editor);\n    if (pair != null && pair.first != null) {\n      Language language = pair.first.getLanguage();\n      return language.isKindOf(RegExpLanguage.INSTANCE);\n    }\n    return false;\n  }","commit_id":"58af58ba53d8c53d6d4fc8d61a209b23ea082913","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ValueNumber(int number, int flags) {\n        if (flags == 25) {\n            System.out.println(\"hguh\");\n        }\n        this.number = number;\n        this.flags = flags;\n    }","id":68998,"modified_method":"private ValueNumber(int number, int flags) {\n        this.number = number;\n        this.flags = flags;\n    }","commit_id":"30901804cf5aa81bfbf087533ec3a6b7f3d485c4","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private ValueNumber mergeValues(ValueNumberFrame frame, int slot, ValueNumber mine, ValueNumber other)\n            throws DataflowAnalysisException {\n\n        // Merging slot values:\n        // - Merging identical values results in no change\n        // - If the values are different, and the value in the result\n        // frame is not the result of a previous result, a fresh value\n        // is allocated.\n        // - If the value in the result frame is the result of a\n        // previous merge, IT STAYS THE SAME.\n        //\n        // The \"one merge\" rule means that merged values are essentially like\n        // phi nodes. They combine some number of other values.\n\n        // I believe (but haven't proved) that this technique is a dumb way\n        // of computing SSA.\n\n        if (mine != frame.getValue(slot))\n            throw new IllegalStateException();\n\n        if (mine.equals(other))\n            return mine;\n\n        ValueNumber mergedValue = frame.getMergedValue(slot);\n        if (mergedValue == null) {\n            mergedValue = factory.createFreshValue((mine.getFlags() & other.getFlags()) | ValueNumber.PHI_NODE);\n            frame.setMergedValue(slot, mergedValue);\n\n        }\n\n        if (mergeTree != null) {\n            mergeTree.mapInputToOutput(mine, mergedValue);\n            mergeTree.mapInputToOutput(other, mergedValue);\n        }\n\n        return mergedValue;\n    }","id":68999,"modified_method":"private ValueNumber mergeValues(ValueNumberFrame frame, int slot, ValueNumber mine, ValueNumber other)\n            throws DataflowAnalysisException {\n\n        // Merging slot values:\n        // - Merging identical values results in no change\n        // - If the values are different, and the value in the result\n        // frame is not the result of a previous result, a fresh value\n        // is allocated.\n        // - If the value in the result frame is the result of a\n        // previous merge, IT STAYS THE SAME.\n        //\n        // The \"one merge\" rule means that merged values are essentially like\n        // phi nodes. They combine some number of other values.\n\n        // I believe (but haven't proved) that this technique is a dumb way\n        // of computing SSA.\n\n        if (mine != frame.getValue(slot))\n            throw new IllegalStateException();\n\n        if (mine.equals(other))\n            return mine;\n\n        ValueNumber mergedValue = frame.getMergedValue(slot);\n        if (mergedValue == null) {\n            mergedValue = factory.createFreshValue(ValueNumber.mergeFlags(mine.getFlags(), other.getFlags()) | ValueNumber.PHI_NODE);\n            frame.setMergedValue(slot, mergedValue);\n\n        }\n\n        if (mergeTree != null) {\n            mergeTree.mapInputToOutput(mine, mergedValue);\n            mergeTree.mapInputToOutput(other, mergedValue);\n        }\n\n        return mergedValue;\n    }","commit_id":"30901804cf5aa81bfbf087533ec3a6b7f3d485c4","url":"https://github.com/findbugsproject/findbugs"}]