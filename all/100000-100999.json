[{"original_method":"private String translateESNodeIdToHostname(String id) {\n        NodeInfo[] result = indexer.getClient().admin().cluster().nodesInfo(new NodesInfoRequest(id)).actionGet().getNodes();\n        if (result == null || result.length == 0) {\n            return \"unknown\";\n        }\n\n        return result[0].getHostname();\n    }","id":100000,"modified_method":"private String translateESNodeIdToHostname(String id) {\n        final NodeInfo[] result = indexer.getClient().admin().cluster().nodesInfo(new NodesInfoRequest(id)).actionGet().getNodes();\n        if (result == null || result.length == 0) {\n            return \"unknown\";\n        }\n\n        return result[0].getHostname();\n    }","commit_id":"47a0dd7050cdfa5ef469d8679cdadb803052de87","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@POST @Timed\n    public Response launch(String body) {\n\n        InputLaunchRequest lr;\n        try {\n            lr = objectMapper.readValue(body, InputLaunchRequest.class);\n        } catch(IOException e) {\n            LOG.error(\"Error while parsing JSON\", e);\n            throw new WebApplicationException(e, Response.Status.BAD_REQUEST);\n        }\n\n        // Build a proper configuration from POST data.\n        Configuration inputConfig = new Configuration(lr.configuration);\n\n        // Build input.\n        DateTime createdAt = new DateTime(DateTimeZone.UTC);\n        MessageInput input;\n        try {\n            input = inputRegistry.create(lr.type);\n            input.setTitle(lr.title);\n            input.setCreatorUserId(lr.creatorUserId);\n            input.setCreatedAt(createdAt);\n            input.setGlobal(lr.global);\n\n            input.checkConfiguration(inputConfig);\n        } catch (NoSuchInputTypeException e) {\n            LOG.error(\"There is no such input type registered.\", e);\n            throw new WebApplicationException(e, Response.Status.NOT_FOUND);\n        } catch (ConfigurationException e) {\n            LOG.error(\"Missing or invalid input configuration.\", e);\n            throw new WebApplicationException(e, Response.Status.BAD_REQUEST);\n        }\n\n        String inputId = UUID.randomUUID().toString();\n        input.setPersistId(inputId);\n\n        // Don't run if exclusive and another instance is already running.\n        if (input.isExclusive() && inputRegistry.hasTypeRunning(input.getClass())) {\n            LOG.error(\"Type is exclusive and already has input running.\");\n            throw new WebApplicationException(Response.Status.BAD_REQUEST);\n        }\n\n        input.initialize(inputConfig);\n\n        // Launch input. (this will run async and clean up itself in case of an error.)\n        inputRegistry.launch(input, inputId, true);\n\n        Map<String, Object> result = Maps.newHashMap();\n        result.put(\"input_id\", inputId);\n        result.put(\"persist_id\", inputId);\n\n        return Response.status(Response.Status.ACCEPTED).entity(json(result)).build();\n    }","id":100001,"modified_method":"@POST\n    @Timed\n    public Response launch(String body) {\n\n        InputLaunchRequest lr;\n        try {\n            lr = objectMapper.readValue(body, InputLaunchRequest.class);\n        } catch (IOException e) {\n            LOG.error(\"Error while parsing JSON\", e);\n            throw new BadRequestException(e);\n        }\n\n        // Build a proper configuration from POST data.\n        Configuration inputConfig = new Configuration(lr.configuration);\n\n        // Build input.\n        DateTime createdAt = new DateTime(DateTimeZone.UTC);\n        MessageInput input;\n        try {\n            input = inputRegistry.create(lr.type);\n            input.setTitle(lr.title);\n            input.setCreatorUserId(lr.creatorUserId);\n            input.setCreatedAt(createdAt);\n            input.setGlobal(lr.global);\n\n            input.checkConfiguration(inputConfig);\n        } catch (NoSuchInputTypeException e) {\n            LOG.error(\"There is no such input type registered.\", e);\n            throw new BadRequestException(e);\n        } catch (ConfigurationException e) {\n            LOG.error(\"Missing or invalid input configuration.\", e);\n            throw new BadRequestException(e);\n        }\n\n        String inputId = UUID.randomUUID().toString();\n        input.setPersistId(inputId);\n\n        // Don't run if exclusive and another instance is already running.\n        if (input.isExclusive() && inputRegistry.hasTypeRunning(input.getClass())) {\n            LOG.error(\"Type is exclusive and already has input running.\");\n            throw new BadRequestException();\n        }\n\n        input.initialize(inputConfig);\n\n        // Launch input. (this will run async and clean up itself in case of an error.)\n        inputRegistry.launch(input, inputId, true);\n\n        final Map<String, String> result = ImmutableMap.of(\n                \"input_id\", inputId,\n                \"persist_id\", inputId);\n\n        return Response.accepted().entity(json(result)).build();\n    }","commit_id":"54c7e1af3bef9300798da0665bc17a3a7a1d8cdd","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@GET @Timed\n    @Path(\"/types\")\n    public String types() {\n        Map<String, Object> result = Maps.newHashMap();\n        result.put(\"types\", inputRegistry.getAvailableInputs());\n\n        return json(result);\n    }","id":100002,"modified_method":"@GET\n    @Timed\n    @Path(\"/types\")\n    public String types() {\n        return json(ImmutableMap.of(\"types\", inputRegistry.getAvailableInputs()));\n    }","commit_id":"54c7e1af3bef9300798da0665bc17a3a7a1d8cdd","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@GET @Timed\n    public String list() {\n        List<Map<String, Object>> inputStates = Lists.newArrayList();\n\n        for (InputState inputState : inputRegistry.getInputStates()) {\n            inputStates.add(inputState.asMap());\n        }\n\n        Map<String, Object> result = Maps.newHashMap();\n        result.put(\"inputs\", inputStates);\n        result.put(\"total\", inputStates.size());\n\n        return json(result);\n    }","id":100003,"modified_method":"@GET\n    @Timed\n    public String list() {\n        final List<Map<String, Object>> inputStates = Lists.newArrayList();\n\n        for (InputState inputState : inputRegistry.getInputStates()) {\n            inputStates.add(inputState.asMap());\n        }\n\n        final Map<String, Object> result = ImmutableMap.of(\n                \"inputs\", inputStates,\n                \"total\", inputStates.size());\n\n        return json(result);\n    }","commit_id":"54c7e1af3bef9300798da0665bc17a3a7a1d8cdd","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public UnknownAddressMonitor( Log log, Clock clock, long initialTimeoutMs )\n    {\n        this.log = log;\n        this.clock = clock;\n        this.initialTimeoutMs = initialTimeoutMs;\n    }","id":100004,"modified_method":"public UnknownAddressMonitor( Log log, Clock clock, long timeLimitMs )\n    {\n        this.log = log;\n        this.clock = clock;\n        this.timeLimitMs = timeLimitMs;\n    }","commit_id":"bf7168b8d17655ded1d32f4c4440e373a4bc9424","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long logAttemptToSendToMemberWithNoKnownAddress( MemberId to )\n    {\n        PeriodicLogger logger = loggers.get( to );\n        if ( logger == null )\n        {\n            logger = new PeriodicLogger( clock, log );\n            loggers.put( to, logger );\n        }\n        return logger.attemptLog( to );\n    }","id":100005,"modified_method":"public void logAttemptToSendToMemberWithNoKnownAddress( MemberId to )\n    {\n        CappedLogger cappedLogger = loggers.get( to );\n        if ( cappedLogger == null )\n        {\n            cappedLogger = new CappedLogger( log );\n            cappedLogger.setTimeLimit( timeLimitMs, MILLISECONDS, clock );\n            loggers.put( to, cappedLogger );\n        }\n        cappedLogger.info(String.format(\"No address found for %s, probably because the member has been shut down.\", to)  );\n    }","commit_id":"bf7168b8d17655ded1d32f4c4440e373a4bc9424","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldResumeLoggingAfterQuietPeriod() throws Exception\n    {\n        // given\n        Log log = mock( Log.class );\n        FakeClock clock = Clocks.fakeClock();\n        UnknownAddressMonitor logger = new UnknownAddressMonitor( log, clock, 10000 );\n\n        // when\n        logger.logAttemptToSendToMemberWithNoKnownAddress( member( 0 ) );\n        clock.forward( 20001, MILLISECONDS );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( member( 0 ) );\n        clock.forward( 80001, MILLISECONDS );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( member( 0 ) );\n\n        // then\n        verify( log, times( 3 ) ).info( anyString(), eq( member( 0 ) ), anyLong(), anyLong() );\n    }","id":100006,"modified_method":"@Test\n    public void shouldResumeLoggingAfterQuietPeriod() throws Exception\n    {\n        // given\n        Log log = mock( Log.class );\n        FakeClock clock = testClock();\n        UnknownAddressMonitor logger = new UnknownAddressMonitor( log, clock, 1000 );\n        MemberId to = member( 0 );\n\n        // when\n        logger.logAttemptToSendToMemberWithNoKnownAddress( to );\n        clock.forward( 20001, MILLISECONDS );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( to );\n        clock.forward( 80001, MILLISECONDS );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( to );\n\n        // then\n        verify( log, times( 3 ) )\n                .info( format( \"No address found for %s, probably because the member has been shut \" + \"down.\", to ) );\n    }","commit_id":"bf7168b8d17655ded1d32f4c4440e373a4bc9424","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldThrottleLogging() throws Exception\n    {\n        // given\n        Log log = mock( Log.class );\n        FakeClock clock = Clocks.fakeClock();\n        UnknownAddressMonitor logger = new UnknownAddressMonitor( log, clock, 10000 );\n\n        // when\n        logger.logAttemptToSendToMemberWithNoKnownAddress( member( 0 ) );\n        clock.forward( 1, MILLISECONDS );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( member( 0 ) );\n\n        // then\n        verify( log, times( 1 ) ).info( anyString(), eq( member( 0 ) ), anyLong(), anyLong() );\n    }","id":100007,"modified_method":"@Test\n    public void shouldThrottleLogging() throws Exception\n    {\n        // given\n        Log log = mock( Log.class );\n        FakeClock clock = testClock();\n        UnknownAddressMonitor logger = new UnknownAddressMonitor( log, clock, 1000 );\n        MemberId to = member( 0 );\n\n        // when\n        logger.logAttemptToSendToMemberWithNoKnownAddress( to );\n        clock.forward( 1, MILLISECONDS );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( to );\n\n        // then\n        verify( log, times( 1 ) )\n                .info( format( \"No address found for %s, probably because the member has been shut \" + \"down.\", to ) );\n    }","commit_id":"bf7168b8d17655ded1d32f4c4440e373a4bc9424","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLogFirstFailure() throws Exception\n    {\n        // given\n        Log log = mock( Log.class );\n        UnknownAddressMonitor logger = new UnknownAddressMonitor( log, Clocks.fakeClock(), 10000 );\n\n        // when\n        logger.logAttemptToSendToMemberWithNoKnownAddress( member( 0 ) );\n\n        // then\n        verify( log ).info( anyString(), eq( member( 0 ) ), anyLong(), anyLong() );\n    }","id":100008,"modified_method":"@Test\n    public void shouldLogFirstFailure() throws Exception\n    {\n        // given\n        Log log = mock( Log.class );\n        UnknownAddressMonitor logger = new UnknownAddressMonitor( log, testClock(), 100 );\n\n        // when\n        MemberId to = member( 0 );\n        logger.logAttemptToSendToMemberWithNoKnownAddress( to );\n\n        // then\n        verify( log ).info( format( \"No address found for %s, probably because the member has been shut down.\", to ) );\n    }","commit_id":"bf7168b8d17655ded1d32f4c4440e373a4bc9424","url":"https://github.com/neo4j/neo4j"},{"original_method":"private MavenModuleSet createProject(final String scmResource) throws Exception {\n        MavenModuleSet project = createMavenProject();\n        MavenInstallation mi = configureDefaultMaven();\n        project.setScm(new ExtractResourceSCM(getClass().getResource(\n                scmResource)));\n        project.setMaven(mi.getName());\n        // PerJobLocalRepositoryLocator does not work, since the repo for a module is distinct from that of the set\n        project.setLocalRepository(new PerExecutorLocalRepositoryLocator());\n        return project;\n    }","id":100009,"modified_method":"private MavenModuleSet createProject(final String scmResource) throws Exception {\n        MavenModuleSet project = createMavenProject();\n        MavenInstallation mi = configureDefaultMaven();\n        project.setScm(new ExtractResourceSCM(getClass().getResource(\n                scmResource)));\n        project.setMaven(mi.getName());\n        project.setLocalRepository(new PerJobLocalRepositoryLocator());\n        return project;\n    }","commit_id":"56c6aa32273df43ba1d5cec375e256cc40c07f6e","url":"https://github.com/kohsuke/hudson"},{"original_method":"@Override\n    public FilePath locate(AbstractMavenBuild build) {\n        // XXX should this use ((MavenBuild) build).getParentBuild().getWorkspace() when instanceof MavenBuild?\n        return build.getWorkspace().child(\".repository\");\n    }","id":100010,"modified_method":"@Override\n    public FilePath locate(AbstractMavenBuild build) {\n        if (build instanceof MavenBuild) {\n            MavenModuleSetBuild parentBuild = ((MavenBuild) build).getModuleSetBuild();\n            if (parentBuild != null) {\n                build = parentBuild;\n            }\n        }\n        FilePath ws = build.getWorkspace();\n        if (ws == null) {\n            return null;\n        }\n        return ws.child(\".repository\");\n    }","commit_id":"56c6aa32273df43ba1d5cec375e256cc40c07f6e","url":"https://github.com/kohsuke/hudson"},{"original_method":"@Override\n  public boolean canImport(@NotNull VirtualFile fileOrDir, @Nullable Project project) {\n    return BndProjectImporter.getWorkspace(project) != null &&\n           (!fileOrDir.isDirectory() && BndProjectImporter.BND_FILE.equals(fileOrDir.getName()) ||\n            fileOrDir.isDirectory() && fileOrDir.findChild(BndProjectImporter.BND_FILE) != null);\n  }","id":100011,"modified_method":"@Override\n  public boolean canImport(@NotNull VirtualFile fileOrDir, @Nullable Project project) {\n    Workspace ws = BndProjectImporter.getWorkspace(project);\n    if (ws == null) return false;\n\n    File projectDir = fileOrDir.isDirectory() ? new File(fileOrDir.getPath()) : new File(fileOrDir.getPath()).getParentFile();\n    return FileUtil.filesEqual(ws.getBase(), projectDir.getParentFile()) &&\n           projectDir.isDirectory() &&\n           new File(projectDir, BndProjectImporter.BND_FILE).isFile();\n  }","commit_id":"4d0e2cddc47e65c9f9b5efe8a46c29083457201c","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"/**\n     * Returns the root directory of the checked-out module.\n     * <p>\n     * This is usually where <tt>pom.xml<\/tt>, <tt>build.xml<\/tt>\n     * and so on exists.\n     */\n    public FilePath getModuleRoot() {\n        return getScm().getModuleRoot(getWorkspace());\n    }","id":100012,"modified_method":"/**\n     * Returns the root directory of the checked-out module.\n     * <p>\n     * This is usually where <tt>pom.xml<\/tt>, <tt>build.xml<\/tt>\n     * and so on exists.\n     */\n    public FilePath getModuleRoot() {\n        FilePath ws = getWorkspace();\n        if(ws==null)    return null;\n        return getScm().getModuleRoot(ws);\n    }","commit_id":"eb9f0b4f2bb5936c73b3983b578b28ca6603c5c9","url":"https://github.com/kohsuke/hudson"},{"original_method":"private void record(Build<?,?> build, BuildListener listener, Map<String,String> record, final String targets) throws IOException, InterruptedException {\n        final class Record implements Serializable {\n            final boolean produced;\n            final String relativePath;\n            final String fileName;\n            final String md5sum;\n\n            public Record(boolean produced, String relativePath, String fileName, String md5sum) {\n                this.produced = produced;\n                this.relativePath = relativePath;\n                this.fileName = fileName;\n                this.md5sum = md5sum;\n            }\n\n            Fingerprint addRecord(Build build) throws IOException {\n                FingerprintMap map = Hudson.getInstance().getFingerprintMap();\n                return map.getOrCreate(produced?build:null, fileName, md5sum);\n            }\n\n            private static final long serialVersionUID = 1L;\n        }\n\n        Project p = build.getProject();\n        final long buildTimestamp = build.getTimestamp().getTimeInMillis();\n\n        List<Record> records = p.getWorkspace().act(new FileCallable<List<Record>>() {\n            public List<Record> invoke(File baseDir, VirtualChannel channel) throws IOException {\n                List<Record> results = new ArrayList<Record>();\n\n                FileSet src = new FileSet();\n                src.setDir(baseDir);\n                src.setIncludes(targets);\n\n                DirectoryScanner ds = src.getDirectoryScanner(new org.apache.tools.ant.Project());\n                for( String f : ds.getIncludedFiles() ) {\n                    File file = new File(baseDir,f);\n\n                    // consider the file to be produced by this build only if the timestamp\n                    // is newer than when the build has started.\n                    boolean produced = buildTimestamp <= file.lastModified();\n\n                    try {\n                        results.add(new Record(produced,f,file.getName(),new FilePath(file).digest()));\n                    } catch (IOException e) {\n                        throw new IOException2(\"Failed to compute digest for \"+file,e);\n                    } catch (InterruptedException e) {\n                        throw new IOException2(\"Aborted\",e);\n                    }\n                }\n\n                return results;\n            }\n        });\n\n        for (Record r : records) {\n            Fingerprint fp = r.addRecord(build);\n            if(fp==null) {\n                listener.error(\"failed to record fingerprint for \"+r.relativePath);\n                continue;\n            }\n            fp.add(build);\n            record.put(r.relativePath,fp.getHashString());\n        }\n    }","id":100013,"modified_method":"private void record(Build<?,?> build, BuildListener listener, Map<String,String> record, final String targets) throws IOException, InterruptedException {\n        final class Record implements Serializable {\n            final boolean produced;\n            final String relativePath;\n            final String fileName;\n            final String md5sum;\n\n            public Record(boolean produced, String relativePath, String fileName, String md5sum) {\n                this.produced = produced;\n                this.relativePath = relativePath;\n                this.fileName = fileName;\n                this.md5sum = md5sum;\n            }\n\n            Fingerprint addRecord(Build build) throws IOException {\n                FingerprintMap map = Hudson.getInstance().getFingerprintMap();\n                return map.getOrCreate(produced?build:null, fileName, md5sum);\n            }\n\n            private static final long serialVersionUID = 1L;\n        }\n\n        Project p = build.getProject();\n        final long buildTimestamp = build.getTimestamp().getTimeInMillis();\n\n        FilePath ws = p.getWorkspace();\n        if(ws==null) {\n            listener.error(\"Unable to record fingerprints because there's no workspace\");\n            build.setResult(Result.FAILURE);\n            return;\n        }\n\n        List<Record> records = ws.act(new FileCallable<List<Record>>() {\n            public List<Record> invoke(File baseDir, VirtualChannel channel) throws IOException {\n                List<Record> results = new ArrayList<Record>();\n\n                FileSet src = new FileSet();\n                src.setDir(baseDir);\n                src.setIncludes(targets);\n\n                DirectoryScanner ds = src.getDirectoryScanner(new org.apache.tools.ant.Project());\n                for( String f : ds.getIncludedFiles() ) {\n                    File file = new File(baseDir,f);\n\n                    // consider the file to be produced by this build only if the timestamp\n                    // is newer than when the build has started.\n                    boolean produced = buildTimestamp <= file.lastModified();\n\n                    try {\n                        results.add(new Record(produced,f,file.getName(),new FilePath(file).digest()));\n                    } catch (IOException e) {\n                        throw new IOException2(\"Failed to compute digest for \"+file,e);\n                    } catch (InterruptedException e) {\n                        throw new IOException2(\"Aborted\",e);\n                    }\n                }\n\n                return results;\n            }\n        });\n\n        for (Record r : records) {\n            Fingerprint fp = r.addRecord(build);\n            if(fp==null) {\n                listener.error(\"failed to record fingerprint for \"+r.relativePath);\n                continue;\n            }\n            fp.add(build);\n            record.put(r.relativePath,fp.getHashString());\n        }\n    }","commit_id":"3e1c88024972af2476e14302d74feb5a7d8e41db","url":"https://github.com/kohsuke/hudson"},{"original_method":"public RecordId writeNode(Node node) throws RepositoryException {\n        NodeBuilder builder =\n                new MemoryNodeBuilder(MemoryNodeState.EMPTY_NODE);\n        buildNode(builder, node);\n        return writer.writeNode(builder.getNodeState());\n    }","id":100014,"modified_method":"public NodeState writeNode(Node node) throws RepositoryException {\n        NodeBuilder builder =\n                new MemoryNodeBuilder(MemoryNodeState.EMPTY_NODE);\n        buildNode(builder, node);\n        return writer.writeNode(builder.getNodeState());\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public MemoryStore(NodeState root) {\r\n        SegmentWriter writer = new SegmentWriter(this, new SegmentReader(this));\r\n        journals.put(\"root\", writer.writeNode(root));\r\n        writer.flush();\r\n    }","id":100015,"modified_method":"public MemoryStore(NodeState root) {\r\n        SegmentWriter writer = new SegmentWriter(this, new SegmentReader(this));\r\n        journals.put(\"root\", writer.writeNode(root).getRecordId());\r\n        writer.flush();\r\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public MongoStore(DB db, SegmentCache cache) {\n        this.segments = db.getCollection(\"segments\");\n        this.journals = db.getCollection(\"journals\");\n\n        this.cache = cache;\n\n        if (journals.findOne(new BasicDBObject(\"_id\", \"root\")) == null) {\n            SegmentWriter writer = new SegmentWriter(this, new SegmentReader(this));\n            RecordId id = writer.writeNode(MemoryNodeState.EMPTY_NODE);\n            writer.flush();\n            journals.insert(new BasicDBObject(ImmutableMap.of(\n                    \"_id\", \"root\", \"head\", id.toString())));\n        }\n    }","id":100016,"modified_method":"public MongoStore(DB db, SegmentCache cache) {\n        this.segments = db.getCollection(\"segments\");\n        this.journals = db.getCollection(\"journals\");\n\n        this.cache = cache;\n\n        if (journals.findOne(new BasicDBObject(\"_id\", \"root\")) == null) {\n            SegmentWriter writer = new SegmentWriter(this, new SegmentReader(this));\n            RecordId id = writer.writeNode(MemoryNodeState.EMPTY_NODE).getRecordId();\n            writer.flush();\n            journals.insert(new BasicDBObject(ImmutableMap.of(\n                    \"_id\", \"root\", \"head\", id.toString())));\n        }\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override @Nonnull\n    public synchronized NodeState merge(CommitHook hook)\n            throws CommitFailedException {\n        RecordId originalBaseId = baseId;\n        RecordId originalRootId = rootId;\n        long backoff = 1;\n        for (int i = 0; i < 10; i++) {\n            // rebase to latest head and apply commit hooks\n            rebase();\n            RecordId headId = writer.writeNode(\n                    hook.processCommit(getBase(), getRoot()));\n            writer.flush();\n\n            // use optimistic locking to update the journal\n            if (store.setJournalHead(journal, headId, baseId)) {\n                baseId = headId;\n                rootId = headId;\n                return getRoot();\n            }\n\n            // someone else was faster, so clear state and try again later\n            baseId = originalBaseId;\n            rootId = originalRootId;\n\n            // use exponential backoff to reduce contention\n            try {\n                TimeUnit.MICROSECONDS.sleep(backoff);\n                backoff *= 2;\n            } catch (InterruptedException e) {\n                throw new CommitFailedException(\"Commit was interrupted\", e);\n            }\n        }\n        throw new CommitFailedException(\"System overloaded, try again later\");\n    }","id":100017,"modified_method":"@Override @Nonnull\n    public synchronized NodeState merge(CommitHook hook)\n            throws CommitFailedException {\n        RecordId originalBaseId = baseId;\n        RecordId originalRootId = rootId;\n        long backoff = 1;\n        for (int i = 0; i < 10; i++) {\n            // rebase to latest head and apply commit hooks\n            rebase();\n            RecordId headId = writer.writeNode(\n                    hook.processCommit(getBase(), getRoot())).getRecordId();\n            writer.flush();\n\n            // use optimistic locking to update the journal\n            if (store.setJournalHead(journal, headId, baseId)) {\n                baseId = headId;\n                rootId = headId;\n                return getRoot();\n            }\n\n            // someone else was faster, so clear state and try again later\n            baseId = originalBaseId;\n            rootId = originalRootId;\n\n            // use exponential backoff to reduce contention\n            try {\n                TimeUnit.MICROSECONDS.sleep(backoff);\n                backoff *= 2;\n            } catch (InterruptedException e) {\n                throw new CommitFailedException(\"Commit was interrupted\", e);\n            }\n        }\n        throw new CommitFailedException(\"System overloaded, try again later\");\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public synchronized void rebase() {\n        RecordId newBaseId = store.getJournalHead(journal);\n        if (!baseId.equals(newBaseId)) {\n            NodeBuilder builder =\n                    new MemoryNodeBuilder(new SegmentNodeState(reader, newBaseId));\n            getRoot().compareAgainstBaseState(getBase(), new RebaseDiff(builder));\n            this.baseId = newBaseId;\n            this.rootId = writer.writeNode(builder.getNodeState());\n            writer.flush();\n        }\n    }","id":100018,"modified_method":"@Override\n    public synchronized void rebase() {\n        RecordId newBaseId = store.getJournalHead(journal);\n        if (!baseId.equals(newBaseId)) {\n            NodeBuilder builder =\n                    new MemoryNodeBuilder(new SegmentNodeState(reader, newBaseId));\n            getRoot().compareAgainstBaseState(getBase(), new RebaseDiff(builder));\n            this.baseId = newBaseId;\n            this.rootId = writer.writeNode(builder.getNodeState()).getRecordId();\n            writer.flush();\n        }\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public synchronized void setRoot(NodeState newRoot) {\n        this.rootId = writer.writeNode(newRoot);\n        writer.flush();\n    }","id":100019,"modified_method":"@Override\n    public synchronized void setRoot(NodeState newRoot) {\n        this.rootId = writer.writeNode(newRoot).getRecordId();\n        writer.flush();\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public RecordId writeNode(NodeState state) {\n        RecordId nodeId = SegmentNodeState.getRecordIdIfAvailable(state);\n        if (nodeId != null) {\n            return nodeId;\n        }\n\n        SegmentNodeState before = null;\n        ModifiedNodeState after = null;\n        if (state instanceof ModifiedNodeState) {\n            after = ModifiedNodeState.collapse((ModifiedNodeState) state);\n            NodeState base = after.getBaseState();\n            if (base instanceof SegmentNodeState) {\n                before = (SegmentNodeState) base;\n            }\n        }\n\n        Template template = new Template(state);\n\n        List<RecordId> ids = Lists.newArrayList();\n        ids.add(writeTemplate(template));\n\n        if (template.hasManyChildNodes()) {\n            MapRecord base;\n            final Map<String, RecordId> childNodes = Maps.newHashMap();\n            if (before != null\n                    && before.getChildNodeCount() > 1\n                    && after.getChildNodeCount() > 1) {\n                base = before.getChildNodeMap();\n                after.compareAgainstBaseState(before, new DefaultNodeStateDiff() {\n                    @Override\n                    public void childNodeAdded(String name, NodeState after) {\n                        childNodes.put(name, writeNode(after));\n                    }\n                    @Override\n                    public void childNodeChanged(\n                            String name, NodeState before, NodeState after) {\n                        childNodes.put(name, writeNode(after));\n                    }\n                    @Override\n                    public void childNodeDeleted(String name, NodeState before) {\n                        childNodes.put(name, null);\n                    }\n                });\n            } else {\n                base = null;\n                for (ChildNodeEntry entry : state.getChildNodeEntries()) {\n                    childNodes.put(entry.getName(), writeNode(entry.getNodeState()));\n                }\n            }\n            ids.add(writeMap(base, childNodes).getRecordId());\n        } else if (!template.hasNoChildNodes()) {\n            ids.add(writeNode(state.getChildNode(template.getChildName())));\n        }\n\n        for (PropertyTemplate property : template.getPropertyTemplates()) {\n            ids.add(writeProperty(state.getProperty(property.getName())));\n        }\n\n        RecordId recordId = prepare(0, ids);\n        for (RecordId id : ids) {\n            writeRecordId(id);\n        }\n        return recordId;\n    }","id":100020,"modified_method":"public SegmentNodeState writeNode(NodeState state) {\n        if (state instanceof SegmentNodeState) {\n            return (SegmentNodeState) state;\n        }\n\n        SegmentNodeState before = null;\n        ModifiedNodeState after = null;\n        if (state instanceof ModifiedNodeState) {\n            after = ModifiedNodeState.collapse((ModifiedNodeState) state);\n            NodeState base = after.getBaseState();\n            if (base instanceof SegmentNodeState) {\n                before = (SegmentNodeState) base;\n            }\n        }\n\n        Template template = new Template(state);\n\n        List<RecordId> ids = Lists.newArrayList();\n        ids.add(writeTemplate(template));\n\n        if (template.hasManyChildNodes()) {\n            MapRecord base;\n            final Map<String, RecordId> childNodes = Maps.newHashMap();\n            if (before != null\n                    && before.getChildNodeCount() > 1\n                    && after.getChildNodeCount() > 1) {\n                base = before.getChildNodeMap();\n                after.compareAgainstBaseState(before, new DefaultNodeStateDiff() {\n                    @Override\n                    public void childNodeAdded(String name, NodeState after) {\n                        childNodes.put(name, writeNode(after).getRecordId());\n                    }\n                    @Override\n                    public void childNodeChanged(\n                            String name, NodeState before, NodeState after) {\n                        childNodes.put(name, writeNode(after).getRecordId());\n                    }\n                    @Override\n                    public void childNodeDeleted(String name, NodeState before) {\n                        childNodes.put(name, null);\n                    }\n                });\n            } else {\n                base = null;\n                for (ChildNodeEntry entry : state.getChildNodeEntries()) {\n                    childNodes.put(\n                            entry.getName(),\n                            writeNode(entry.getNodeState()).getRecordId());\n                }\n            }\n            ids.add(writeMap(base, childNodes).getRecordId());\n        } else if (!template.hasNoChildNodes()) {\n            ids.add(writeNode(state.getChildNode(template.getChildName())).getRecordId());\n        }\n\n        for (PropertyTemplate property : template.getPropertyTemplates()) {\n            ids.add(writeProperty(state.getProperty(property.getName())));\n        }\n\n        RecordId recordId = prepare(0, ids);\n        for (RecordId id : ids) {\n            writeRecordId(id);\n        }\n        return new SegmentNodeState(reader, recordId);\n    }","commit_id":"bcc7721d12393482da137cf9e58cf2d42a534d1c","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public synchronized void flush() throws IOException {\n        if (updated) {\n            getWriter().flush();\n            for (TarFile file : bulkFiles) {\n                file.flush();\n            }\n            for (TarFile file : dataFiles) {\n                file.flush();\n            }\n            journalFile.writeBytes(head + \" root\\n\");\n            journalFile.getChannel().force(false);\n        }\n    }","id":100021,"modified_method":"public synchronized void flush() throws IOException {\n        RecordId id = head.get();\n        if (!id.equals(persistedHead)) {\n            getWriter().flush();\n            for (TarFile file : bulkFiles) {\n                file.flush();\n            }\n            for (TarFile file : dataFiles) {\n                file.flush();\n            }\n            journalFile.writeBytes(id + \" root\\n\");\n            journalFile.getChannel().force(false);\n            persistedHead = id;\n        }\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public FileStore(File directory, NodeState initial, int maxFileSizeMB,\n            int cacheSizeMB, boolean memoryMapping) throws IOException {\n        super(cacheSizeMB);\n        checkNotNull(directory).mkdirs();\n        this.directory = directory;\n        this.maxFileSize = maxFileSizeMB * MB;\n        this.memoryMapping = memoryMapping;\n\n        for (int i = 0; true; i++) {\n            String name = String.format(FILE_NAME_FORMAT, \"bulk\", i);\n            File file = new File(directory, name);\n            if (file.isFile()) {\n                bulkFiles.add(new TarFile(file, maxFileSizeMB, memoryMapping));\n            } else {\n                break;\n            }\n        }\n\n        for (int i = 0; true; i++) {\n            String name = String.format(FILE_NAME_FORMAT, \"data\", i);\n            File file = new File(directory, name);\n            if (file.isFile()) {\n                dataFiles.add(new TarFile(file, maxFileSizeMB, memoryMapping));\n            } else {\n                break;\n            }\n        }\n\n        head = null;\n        journalFile = new RandomAccessFile(\n                new File(directory, JOURNAL_FILE_NAME), \"rw\");\n        String line = journalFile.readLine();\n        while (line != null) {\n            int space = line.indexOf(' ');\n            if (space != -1) {\n                head = RecordId.fromString(line.substring(0, space));\n            }\n            line = journalFile.readLine();\n        }\n\n        if (head == null) {\n            NodeBuilder builder = EMPTY_NODE.builder();\n            builder.setChildNode(\"root\", initial);\n            SegmentNodeState root =\n                    getWriter().writeNode(builder.getNodeState());\n            head = root.getRecordId();\n            updated = true;\n        }\n\n        this.flushThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    timeToClose.await(1, SECONDS);\n                    while (timeToClose.getCount() > 0) {\n                        try {\n                            flush();\n                        } catch (IOException e) {\n                            log.warn(\"Failed to flush the TarMK at\" +\n                                    FileStore.this.directory, e);\n                        }\n                        timeToClose.await(5, SECONDS);\n                    }\n                } catch (InterruptedException e) {\n                    log.warn(\"TarMK flush thread interrupted\");\n                }\n            }\n        });\n        flushThread.setName(\"TarMK flush thread: \" + directory);\n        flushThread.setDaemon(true);\n        flushThread.setPriority(Thread.MIN_PRIORITY);\n        flushThread.start();\n    }","id":100022,"modified_method":"public FileStore(\n            final File directory, NodeState initial, int maxFileSizeMB,\n            int cacheSizeMB, boolean memoryMapping) throws IOException {\n        super(cacheSizeMB);\n        checkNotNull(directory).mkdirs();\n        this.directory = directory;\n        this.maxFileSize = maxFileSizeMB * MB;\n        this.memoryMapping = memoryMapping;\n\n        for (int i = 0; true; i++) {\n            String name = String.format(FILE_NAME_FORMAT, \"bulk\", i);\n            File file = new File(directory, name);\n            if (file.isFile()) {\n                bulkFiles.add(new TarFile(file, maxFileSizeMB, memoryMapping));\n            } else {\n                break;\n            }\n        }\n\n        for (int i = 0; true; i++) {\n            String name = String.format(FILE_NAME_FORMAT, \"data\", i);\n            File file = new File(directory, name);\n            if (file.isFile()) {\n                dataFiles.add(new TarFile(file, maxFileSizeMB, memoryMapping));\n            } else {\n                break;\n            }\n        }\n\n        journalFile = new RandomAccessFile(\n                new File(directory, JOURNAL_FILE_NAME), \"rw\");\n        String line = journalFile.readLine();\n        while (line != null) {\n            int space = line.indexOf(' ');\n            if (space != -1) {\n                persistedHead = RecordId.fromString(line.substring(0, space));\n            }\n            line = journalFile.readLine();\n        }\n\n        if (persistedHead != null) {\n            head = new AtomicReference<RecordId>(persistedHead);\n        } else {\n            NodeBuilder builder = EMPTY_NODE.builder();\n            builder.setChildNode(\"root\", initial);\n            head = new AtomicReference<RecordId>(\n                    getWriter().writeNode(builder.getNodeState()).getRecordId());\n        }\n\n        this.flushThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    timeToClose.await(1, SECONDS);\n                    while (timeToClose.getCount() > 0) {\n                        try {\n                            flush();\n                        } catch (IOException e) {\n                            log.warn(\"Failed to flush the TarMK at\" +\n                                    directory, e);\n                        }\n                        timeToClose.await(5, SECONDS);\n                    }\n                } catch (InterruptedException e) {\n                    log.warn(\"TarMK flush thread interrupted\");\n                }\n            }\n        });\n        flushThread.setName(\"TarMK flush thread: \" + directory);\n        flushThread.setDaemon(true);\n        flushThread.setPriority(Thread.MIN_PRIORITY);\n        flushThread.start();\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public Journal getJournal(String name) {\n        checkArgument(\"root\".equals(name)); // only root supported for now\n        return new Journal() {\n            @Override\n            public RecordId getHead() {\n                return head;\n            }\n            @Override\n            public boolean setHead(RecordId base, RecordId head) {\n                synchronized (FileStore.this) {\n                    if (base.equals(FileStore.this.head)) {\n                        updated = !head.equals(FileStore.this.head);\n                        FileStore.this.head = head;\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            @Override\n            public void merge() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }","id":100023,"modified_method":"@Override\n    public Journal getJournal(String name) {\n        checkArgument(\"root\".equals(name)); // only root supported for now\n        return new Journal() {\n            @Override\n            public RecordId getHead() {\n                return head.get();\n            }\n            @Override\n            public boolean setHead(RecordId before, RecordId after) {\n                RecordId id = head.get();\n                return id.equals(before) && head.compareAndSet(id, after);\n            }\n            @Override\n            public void merge() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private SegmentNodeBuilder prepare() throws CommitFailedException {\n            SegmentNodeBuilder builder = head.builder();\n            if (fastEquals(before, head.getChildNode(ROOT))) {\n                // use a shortcut when there are no external changes\n                builder.setChildNode(ROOT, hook.processCommit(before, after));\n            } else {\n                // there were some external changes, so do the full rebase\n                ConflictAnnotatingRebaseDiff diff =\n                        new ConflictAnnotatingRebaseDiff(builder.child(ROOT));\n                after.compareAgainstBaseState(before, diff);\n                // apply commit hooks on the rebased changes\n                builder.setChildNode(ROOT, hook.processCommit(\n                        builder.getBaseState().getChildNode(ROOT),\n                        builder.getNodeState().getChildNode(ROOT)));\n            }\n            return builder;\n        }","id":100024,"modified_method":"private SegmentNodeBuilder prepare() throws CommitFailedException {\n            SegmentNodeState state = head.get();\n            SegmentNodeBuilder builder = state.builder();\n            if (fastEquals(before, state.getChildNode(ROOT))) {\n                // use a shortcut when there are no external changes\n                builder.setChildNode(ROOT, hook.processCommit(before, after));\n            } else {\n                // there were some external changes, so do the full rebase\n                ConflictAnnotatingRebaseDiff diff =\n                        new ConflictAnnotatingRebaseDiff(builder.child(ROOT));\n                after.compareAgainstBaseState(before, diff);\n                // apply commit hooks on the rebased changes\n                builder.setChildNode(ROOT, hook.processCommit(\n                        builder.getBaseState().getChildNode(ROOT),\n                        builder.getNodeState().getChildNode(ROOT)));\n            }\n            return builder;\n        }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Refreshes the head state. Does nothing if a concurrent local commit is\n     * in progress, as that commit will automatically refresh the head state.\n     */\n    private void refreshHead() {\n        RecordId id = journal.getHead();\n        if (!id.equals(head.getRecordId())) {\n            head = new SegmentNodeState(\n                    store.getWriter().getDummySegment(), id);\n            changeDispatcher.contentChanged(head.getChildNode(ROOT), null);\n        }\n    }","id":100025,"modified_method":"/**\n     * Refreshes the head state. Should only be called while holding a\n     * permit from the {@link #commitSemaphore}.\n     */\n    private void refreshHead() {\n        RecordId id = journal.getHead();\n        if (!id.equals(head.get().getRecordId())) {\n            SegmentNodeState state = new SegmentNodeState(\n                    store.getWriter().getDummySegment(), id);\n            head.set(state);\n            changeDispatcher.contentChanged(state.getChildNode(ROOT), null);\n        }\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void pessimisticMerge(long timeout)\n                throws CommitFailedException, InterruptedException {\n            while (true) {\n                long now = currentTimeMillis();\n                if (head.hasProperty(\"token\")\n                        && head.getLong(\"timeout\") >= now) {\n                    // locked by someone else, wait until unlocked or expired\n                    Thread.sleep(\n                            Math.min(head.getLong(\"timeout\") - now, 1000),\n                            random.nextInt(1000000));\n                } else {\n                    // attempt to acquire the lock\n                    SegmentNodeBuilder builder = head.builder();\n                    builder.setProperty(\"token\", UUID.randomUUID().toString());\n                    builder.setProperty(\"timeout\", now + timeout);\n\n                    if (setHead(builder)) {\n                         // lock acquired; rebase, apply commit hooks, and unlock\n                        builder = prepare();\n                        builder.removeProperty(\"token\");\n                        builder.removeProperty(\"timeout\");\n\n                        // complete the commit\n                        if (setHead(builder)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }","id":100026,"modified_method":"private void pessimisticMerge(long timeout)\n                throws CommitFailedException, InterruptedException {\n            while (true) {\n                long now = currentTimeMillis();\n                SegmentNodeState state = head.get();\n                if (state.hasProperty(\"token\")\n                        && state.getLong(\"timeout\") >= now) {\n                    // locked by someone else, wait until unlocked or expired\n                    Thread.sleep(\n                            Math.min(state.getLong(\"timeout\") - now, 1000),\n                            random.nextInt(1000000));\n                } else {\n                    // attempt to acquire the lock\n                    SegmentNodeBuilder builder = state.builder();\n                    builder.setProperty(\"token\", UUID.randomUUID().toString());\n                    builder.setProperty(\"timeout\", now + timeout);\n\n                    if (setHead(builder)) {\n                         // lock acquired; rebase, apply commit hooks, and unlock\n                        builder = prepare();\n                        builder.removeProperty(\"token\");\n                        builder.removeProperty(\"timeout\");\n\n                        // complete the commit\n                        if (setHead(builder)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override @Nonnull\n    public String checkpoint(long lifetime) {\n        checkArgument(lifetime > 0);\n        String name = UUID.randomUUID().toString();\n\n        // try 5 times\n        for (int i = 0; i < 5; i++) {\n            if (commitSemaphore.tryAcquire()) {\n                try {\n                    refreshHead();\n\n                    SegmentNodeState ns = head;\n                    RecordId ri = head.getRecordId();\n\n                    SegmentNodeBuilder builder = ns.builder();\n                    NodeBuilder cp = builder.child(name);\n                    cp.setProperty(\"timestamp\", System.currentTimeMillis()\n                            + lifetime);\n                    cp.setChildNode(ROOT, ns.getChildNode(ROOT));\n\n                    if (journal.setHead(ri, builder.getNodeState()\n                            .getRecordId())) {\n                        refreshHead();\n                        return name;\n                    }\n\n                } finally {\n                    commitSemaphore.release();\n                }\n            }\n        }\n\n        return name;\n    }","id":100027,"modified_method":"@Override @Nonnull\n    public String checkpoint(long lifetime) {\n        checkArgument(lifetime > 0);\n        String name = UUID.randomUUID().toString();\n\n        // try 5 times\n        for (int i = 0; i < 5; i++) {\n            if (commitSemaphore.tryAcquire()) {\n                try {\n                    refreshHead();\n\n                    SegmentNodeState state = head.get();\n                    RecordId ri = state.getRecordId();\n\n                    SegmentNodeBuilder builder = state.builder();\n                    NodeBuilder cp = builder.child(name);\n                    cp.setProperty(\"timestamp\", System.currentTimeMillis()\n                            + lifetime);\n                    cp.setChildNode(ROOT, state.getChildNode(ROOT));\n\n                    if (journal.setHead(ri, builder.getNodeState()\n                            .getRecordId())) {\n                        refreshHead();\n                        return name;\n                    }\n\n                } finally {\n                    commitSemaphore.release();\n                }\n            }\n        }\n\n        return name;\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override @CheckForNull\n    public NodeState retrieve(@Nonnull String checkpoint) {\n        NodeState cp = head.getChildNode(checkpoint).getChildNode(ROOT);\n        if (cp.exists()) {\n            return cp;\n        }\n        return null;\n    }","id":100028,"modified_method":"@Override @CheckForNull\n    public NodeState retrieve(@Nonnull String checkpoint) {\n        NodeState cp = head.get().getChildNode(checkpoint).getChildNode(ROOT);\n        if (cp.exists()) {\n            return cp;\n        }\n        return null;\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public SegmentNodeStore(SegmentStore store, String journal) {\n        this.store = store;\n        this.journal = store.getJournal(journal);\n        this.head = new SegmentNodeState(\n                store.getWriter().getDummySegment(), this.journal.getHead());\n        this.changeDispatcher = new ChangeDispatcher(getRoot());\n    }","id":100029,"modified_method":"public SegmentNodeStore(SegmentStore store, String journal) {\n        this.store = store;\n        this.journal = store.getJournal(journal);\n        this.head = new AtomicReference<SegmentNodeState>(new SegmentNodeState(\n                store.getWriter().getDummySegment(), this.journal.getHead()));\n        this.changeDispatcher = new ChangeDispatcher(getRoot());\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Nonnull\n        NodeState execute()\n                throws CommitFailedException, InterruptedException {\n            // only do the merge if there are some changes to commit\n            if (!fastEquals(before, after)) {\n                long timeout = optimisticMerge();\n                if (timeout >= 0) {\n                    pessimisticMerge(timeout);\n                }\n            }\n            return head.getChildNode(ROOT);\n        }","id":100030,"modified_method":"@Nonnull\n        NodeState execute()\n                throws CommitFailedException, InterruptedException {\n            // only do the merge if there are some changes to commit\n            if (!fastEquals(before, after)) {\n                long timeout = optimisticMerge();\n                if (timeout >= 0) {\n                    pessimisticMerge(timeout);\n                }\n            }\n            return head.get().getChildNode(ROOT);\n        }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override @Nonnull\n    public NodeState getRoot() {\n        if (commitSemaphore.tryAcquire()) {\n            try {\n                refreshHead();\n            } finally {\n                commitSemaphore.release();\n            }\n        }\n        return head.getChildNode(ROOT);\n    }","id":100031,"modified_method":"@Override @Nonnull\n    public NodeState getRoot() {\n        if (commitSemaphore.tryAcquire()) {\n            try {\n                refreshHead();\n            } finally {\n                commitSemaphore.release();\n            }\n        }\n        return head.get().getChildNode(ROOT);\n    }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private long optimisticMerge()\n                throws CommitFailedException, InterruptedException {\n            long timeout = 1;\n\n            // use exponential backoff in case of concurrent commits\n            for (long backoff = 1; backoff < maximumBackoff; backoff *= 2) {\n                long start = System.nanoTime();\n\n                refreshHead();\n                if (head.hasProperty(\"token\")\n                        && head.getLong(\"timeout\") >= currentTimeMillis()) {\n                    // someone else has a pessimistic lock on the journal,\n                    // so we should not try to commit anything yet\n                } else {\n                    SegmentNodeBuilder builder = prepare();\n                    // use optimistic locking to update the journal\n                    if (setHead(builder)) {\n                        return -1;\n                    }\n                }\n\n                // someone else was faster, so wait a while and retry later\n                Thread.sleep(backoff, random.nextInt(1000000));\n\n                long stop = System.nanoTime();\n                if (stop - start > timeout) {\n                    timeout = stop - start;\n                }\n            }\n\n            return MILLISECONDS.convert(timeout, NANOSECONDS);\n        }","id":100032,"modified_method":"private long optimisticMerge()\n                throws CommitFailedException, InterruptedException {\n            long timeout = 1;\n\n            // use exponential backoff in case of concurrent commits\n            for (long backoff = 1; backoff < maximumBackoff; backoff *= 2) {\n                long start = System.nanoTime();\n\n                refreshHead();\n                SegmentNodeState state = head.get();\n                if (state.hasProperty(\"token\")\n                        && state.getLong(\"timeout\") >= currentTimeMillis()) {\n                    // someone else has a pessimistic lock on the journal,\n                    // so we should not try to commit anything yet\n                } else {\n                    SegmentNodeBuilder builder = prepare();\n                    // use optimistic locking to update the journal\n                    if (setHead(builder)) {\n                        return -1;\n                    }\n                }\n\n                // someone else was faster, so wait a while and retry later\n                Thread.sleep(backoff, random.nextInt(1000000));\n\n                long stop = System.nanoTime();\n                if (stop - start > timeout) {\n                    timeout = stop - start;\n                }\n            }\n\n            return MILLISECONDS.convert(timeout, NANOSECONDS);\n        }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private boolean setHead(SegmentNodeBuilder builder) {\n            SegmentNodeState base = builder.getBaseState();\n            SegmentNodeState head = builder.getNodeState();\n\n            refreshHead();\n            if (journal.setHead(base.getRecordId(), head.getRecordId())) {\n                SegmentNodeStore.this.head = head;\n                changeDispatcher.contentChanged(head.getChildNode(ROOT), info);\n                refreshHead();\n                return true;\n            } else {\n                return false;\n            }\n        }","id":100033,"modified_method":"private boolean setHead(SegmentNodeBuilder builder) {\n            SegmentNodeState before = builder.getBaseState();\n            SegmentNodeState after = builder.getNodeState();\n\n            refreshHead();\n            if (journal.setHead(before.getRecordId(), after.getRecordId())) {\n                head.set(after);\n                changeDispatcher.contentChanged(after.getChildNode(ROOT), info);\n                refreshHead();\n                return true;\n            } else {\n                return false;\n            }\n        }","commit_id":"68a5beeadf9dd6112ac67177ea0650a57c1b0d7d","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public AddOrEditGradeItemPanel(final String id, final ModalWindow window, final IModel<Long> model) {\n\t\tsuper(id);\n\t\tthis.model = model;\n\n\t\t// determine mode\n\t\tif (model != null) {\n\t\t\tthis.mode = Mode.EDIT;\n\t\t} else {\n\t\t\tthis.mode = Mode.ADD;\n\t\t}\n\n\t\t// setup the backing object\n\t\tAssignment assignment;\n\n\t\tif (this.mode == Mode.EDIT) {\n\t\t\tfinal Long assignmentId = this.model.getObject();\n\t\t\tassignment = this.businessService.getAssignment(assignmentId);\n\n\t\t\t// TODO if we are in edit mode and don't have an assignment, need to error here\n\n\t\t} else {\n\t\t\t// Mode.ADD\n\t\t\tassignment = new Assignment();\n\t\t\t// Default released to true\n\t\t\tassignment.setReleased(true);\n\t\t\t// If no categories, then default counted to true\n\t\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\t\t\tassignment.setCounted(GradebookService.CATEGORY_TYPE_NO_CATEGORY == gradebook.getCategory_type());\n\t\t}\n\n\t\t// form model\n\t\tfinal Model<Assignment> formModel = new Model<Assignment>(assignment);\n\n\t\t// form\n\t\tfinal Form<Assignment> form = new Form<Assignment>(\"addOrEditGradeItemForm\", formModel);\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tfinal Assignment assignment = (Assignment) form.getModelObject();\n\n\t\t\t\tif (AddOrEditGradeItemPanel.this.mode == Mode.EDIT) {\n\n\t\t\t\t\t// TODO validation of the fields here\n\n\t\t\t\t\tfinal boolean success = AddOrEditGradeItemPanel.this.businessService.updateAssignment(assignment);\n\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tgetSession().info(MessageFormat.format(getString(\"message.edititem.success\"), assignment.getName()));\n\t\t\t\t\t\tsetResponsePage(getPage().getPageClass());\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(new ResourceModel(\"message.edititem.error\").getObject());\n\t\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tLong assignmentId = null;\n\n\t\t\t\t\tboolean success = true;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tassignmentId = AddOrEditGradeItemPanel.this.businessService.addAssignment(assignment);\n\t\t\t\t\t} catch (final AssignmentHasIllegalPointsException e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.points\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t} catch (final ConflictingAssignmentNameException e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.title\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t} catch (final ConflictingExternalIdException e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.exception\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.exception\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tgetSession().info(MessageFormat.format(getString(\"notification.addgradeitem.success\"), assignment.getName()));\n\t\t\t\t\t\tsetResponsePage(getPage().getPageClass(),\n\t\t\t\t\t\t\t\tnew PageParameters().add(GradebookPage.CREATED_ASSIGNMENT_ID_PARAM, assignmentId));\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\n\t\t// submit button label\n\t\tsubmit.add(new Label(\"submitLabel\", getSubmitButtonLabel()));\n\t\tform.add(submit);\n\n\t\t// heading\n\t\tform.add(new Label(\"heading\", getHeadingLabel()));\n\n\t\t// add the common components\n\t\tform.add(new AddOrEditGradeItemPanelContent(\"subComponents\", formModel));\n\n\t\t// feedback panel\n\t\tform.add(new GbFeedbackPanel(\"addGradeFeedback\"));\n\n\t\t// cancel button\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\twindow.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\tadd(form);\n\t}","id":100034,"modified_method":"public AddOrEditGradeItemPanel(final String id, final ModalWindow window, final IModel<Long> model) {\n\t\tsuper(id);\n\t\tthis.model = model;\n\n\t\t// determine mode\n\t\tif (model != null) {\n\t\t\tthis.mode = Mode.EDIT;\n\t\t} else {\n\t\t\tthis.mode = Mode.ADD;\n\t\t}\n\n\t\t// setup the backing object\n\t\tAssignment assignment;\n\n\t\tif (this.mode == Mode.EDIT) {\n\t\t\tfinal Long assignmentId = this.model.getObject();\n\t\t\tassignment = this.businessService.getAssignment(assignmentId);\n\n\t\t\t// TODO if we are in edit mode and don't have an assignment, need to error here\n\n\t\t} else {\n\t\t\t// Mode.ADD\n\t\t\tassignment = new Assignment();\n\t\t\t// Default released to true\n\t\t\tassignment.setReleased(true);\n\t\t\t// If no categories, then default counted to true\n\t\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\t\t\tassignment.setCounted(GradebookService.CATEGORY_TYPE_NO_CATEGORY == gradebook.getCategory_type());\n\t\t}\n\n\t\t// form model\n\t\tfinal Model<Assignment> formModel = new Model<Assignment>(assignment);\n\n\t\t// form\n\t\tfinal Form<Assignment> form = new Form<Assignment>(\"addOrEditGradeItemForm\", formModel);\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tfinal Assignment assignment = (Assignment) form.getModelObject();\n\n\t\t\t\tif (AddOrEditGradeItemPanel.this.mode == Mode.EDIT) {\n\n\t\t\t\t\t// TODO validation of the fields here\n\n\t\t\t\t\tfinal boolean success = AddOrEditGradeItemPanel.this.businessService.updateAssignment(assignment);\n\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tgetSession().info(MessageFormat.format(getString(\"message.edititem.success\"), assignment.getName()));\n\t\t\t\t\t\tsetResponsePage(getPage().getPageClass());\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(new ResourceModel(\"message.edititem.error\").getObject());\n\t\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tLong assignmentId = null;\n\n\t\t\t\t\tboolean success = true;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tassignmentId = AddOrEditGradeItemPanel.this.businessService.addAssignment(assignment);\n\t\t\t\t\t} catch (final AssignmentHasIllegalPointsException e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.points\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t} catch (final ConflictingAssignmentNameException e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.title\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t} catch (final ConflictingExternalIdException e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.exception\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\terror(new ResourceModel(\"error.addgradeitem.exception\").getObject());\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tgetSession().info(MessageFormat.format(getString(\"notification.addgradeitem.success\"), assignment.getName()));\n\t\t\t\t\t\tsetResponsePage(getPage().getPageClass(),\n\t\t\t\t\t\t\t\tnew PageParameters().add(GradebookPage.CREATED_ASSIGNMENT_ID_PARAM, assignmentId));\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\n\t\t// submit button label\n\t\tsubmit.add(new Label(\"submitLabel\", getSubmitButtonLabel()));\n\t\tform.add(submit);\n\n\t\t// add the common components\n\t\tform.add(new AddOrEditGradeItemPanelContent(\"subComponents\", formModel));\n\n\t\t// feedback panel\n\t\tform.add(new GbFeedbackPanel(\"addGradeFeedback\"));\n\n\t\t// cancel button\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\twindow.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\tadd(form);\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetParentCellFor(this).setOutputMarkupId(true);\n\n\t\tfinal Assignment assignment = this.modelData.getObject();\n\n\t\t// get user's role\n\t\tfinal GbRole role = this.businessService.getUserRole();\n\n\t\tfinal Link<String> title = new Link<String>(\"title\", Model.of(assignment.getName())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\n\t\t\t\t// toggle the sort direction on each click\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GradebookUiSettings settings = gradebookPage.getUiSettings();\n\n\t\t\t\t// if null, set a default sort, otherwise toggle, save, refresh.\n\t\t\t\tif (settings.getAssignmentSortOrder() == null\n\t\t\t\t\t\t|| !assignment.getId().equals(settings.getAssignmentSortOrder().getAssignmentId())) {\n\t\t\t\t\tsettings.setAssignmentSortOrder(new GbAssignmentGradeSortOrder(assignment.getId(), SortDirection.ASCENDING));\n\t\t\t\t} else {\n\t\t\t\t\tfinal GbAssignmentGradeSortOrder sortOrder = settings.getAssignmentSortOrder();\n\t\t\t\t\tSortDirection direction = sortOrder.getDirection();\n\t\t\t\t\tdirection = direction.toggle();\n\t\t\t\t\tsortOrder.setDirection(direction);\n\t\t\t\t\tsettings.setAssignmentSortOrder(sortOrder);\n\t\t\t\t}\n\n\t\t\t\t// clear any category sort order to prevent conflicts\n\t\t\t\tsettings.setCategorySortOrder(null);\n\n\t\t\t\t// save settings\n\t\t\t\tgradebookPage.setUiSettings(settings);\n\n\t\t\t\t// refresh\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\n\t\t};\n\t\ttitle.add(new AttributeModifier(\"title\", assignment.getName()));\n\t\ttitle.add(new Label(\"label\", assignment.getName()));\n\n\t\t// set the class based on the sortOrder. May not be set for this assignment so match it\n\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\tfinal GradebookUiSettings settings = gradebookPage.getUiSettings();\n\t\tif (settings != null && settings.getAssignmentSortOrder() != null\n\t\t\t\t&& settings.getAssignmentSortOrder().getAssignmentId() == assignment.getId()) {\n\t\t\ttitle.add(\n\t\t\t\t\tnew AttributeModifier(\"class\", \"gb-sort-\" + settings.getAssignmentSortOrder().getDirection().toString().toLowerCase()));\n\t\t}\n\n\t\tadd(title);\n\n\t\tadd(new Label(\"totalPoints\", Model.of(assignment.getPoints())));\n\t\tadd(new Label(\"dueDate\", Model.of(FormatHelper.formatDate(assignment.getDueDate(), getString(\"label.noduedate\")))));\n\n\t\tfinal WebMarkupContainer externalAppFlag = gradebookPage.buildFlagWithPopover(\"externalAppFlag\", \"\");\n\t\tif (assignment.getExternalAppName() == null) {\n\t\t\texternalAppFlag.setVisible(false);\n\t\t} else {\n\t\t\texternalAppFlag.setVisible(true);\n\t\t\texternalAppFlag.add(new AttributeModifier(\"data-content\",\n\t\t\t\t\tgradebookPage.generatePopoverContent(new StringResourceModel(\"label.gradeitem.externalapplabel\",\n\t\t\t\t\t\t\tnull, new Object[] { assignment.getExternalAppName() }).getString())));\n\t\t\tString iconClass = \"icon-sakai\";\n\t\t\tif (\"Assignments\".equals(assignment.getExternalAppName())) {\n\t\t\t\ticonClass = \"icon-sakai-assignment-grades\";\n\t\t\t} else if (\"Tests & Quizzes\".equals(assignment.getExternalAppName())) {\n\t\t\t\ticonClass = \"icon-sakai-samigo\";\n\t\t\t} else if (\"Lesson Builder\".equals(assignment.getExternalAppName())) {\n\t\t\t\ticonClass = \"icon-sakai-lessonbuildertool\";\n\t\t\t}\n\t\t\texternalAppFlag\n\t\t\t\t\t.add(new AttributeModifier(\"class\", \"gb-external-app-flag \" + iconClass));\n\t\t}\n\t\tadd(externalAppFlag);\n\n\t\tadd(gradebookPage.buildFlagWithPopover(\"extraCreditFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_EXTRA_CREDIT))\n\t\t\t\t.setVisible(assignment.isExtraCredit()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"isCountedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_COUNTED)).setVisible(assignment.isCounted()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"notCountedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_NOT_COUNTED))\n\t\t\t\t.setVisible(!assignment.isCounted()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"isReleasedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_RELEASED))\n\t\t\t\t.setVisible(assignment.isReleased()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"notReleasedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_NOT_RELEASED))\n\t\t\t\t.setVisible(!assignment.isReleased()));\n\n\t\tadd(new AttributeModifier(\"data-assignmentId\", assignment.getId()));\n\t\tadd(new AttributeModifier(\"data-category\", assignment.getCategoryName()));\n\t\tadd(new AttributeModifier(\"data-sort-order\", assignment.getSortOrder()));\n\t\tadd(new AttributeModifier(\"data-categorized-sort-order\", assignment.getCategorizedSortOrder()));\n\t\tif (GbCategoryType.WEIGHTED_CATEGORY.equals(this.businessService.getGradebookCategoryType()) && assignment.getWeight() != null) {\n\t\t\tadd(new AttributeModifier(\"data-category-weight\", String.format(\"%s%%\", Math.round(assignment.getWeight() * 100))));\n\t\t}\n\t\tadd(new AttributeModifier(\"data-category-extra-credit\", assignment.isCategoryExtraCredit()));\n\t\tadd(new AttributeModifier(\"data-category-order\", assignment.getCategoryOrder()));\n\n\t\t// menu\n\t\tfinal WebMarkupContainer menu = new WebMarkupContainer(\"menu\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (role != GbRole.INSTRUCTOR) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tmenu.add(new AjaxLink<Long>(\"editAssignmentDetails\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getAddOrEditGradeItemWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new AddOrEditGradeItemPanel(window.getContentId(), window, getModel()));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\n\t\t});\n\n\t\tmenu.add(new AjaxLink<Long>(\"viewAssignmentGradeStatistics\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getGradeStatisticsWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new GradeStatisticsPanel(window.getContentId(), getModel(), window));\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new Link<Long>(\"moveAssignmentLeft\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\t\t\t\t// given the id, get the assignment, get the sort order, then update and refresh\n\t\t\t\t// note that we cannot use the passed in assignment sort order in here\n\t\t\t\t// as we may have had an async reorder on the front end but not had the model data updated,\n\t\t\t\t// so we just make sure we get it fresh\n\n\t\t\t\tfinal Long assignmentId = getModelObject();\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tGradebookUiSettings settings = gradebookPage.getUiSettings();\n\n\t\t\t\tif (settings == null) {\n\t\t\t\t\tsettings = new GradebookUiSettings();\n\t\t\t\t\tgradebookPage.setUiSettings(settings);\n\t\t\t\t}\n\n\t\t\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tInteger order = calculateCurrentCategorizedSortOrder(assignmentId);\n\t\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentCategorizedOrder(assignmentId, (order.intValue() - 1));\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\terror(\"error reordering within category\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfinal int order = AssignmentColumnHeaderPanel.this.businessService.getAssignmentSortOrder(assignmentId.longValue());\n\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentOrder(assignmentId.longValue(), (order - 1));\n\t\t\t\t}\n\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new Link<Long>(\"moveAssignmentRight\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\n\t\t\t\tfinal Long assignmentId = getModelObject();\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tGradebookUiSettings settings = gradebookPage.getUiSettings();\n\n\t\t\t\tif (settings == null) {\n\t\t\t\t\tsettings = new GradebookUiSettings();\n\t\t\t\t\tgradebookPage.setUiSettings(settings);\n\t\t\t\t}\n\n\t\t\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tInteger order = calculateCurrentCategorizedSortOrder(assignmentId);\n\t\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentCategorizedOrder(assignmentId, (order.intValue() + 1));\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\terror(\"error reordering within category\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfinal int order = AssignmentColumnHeaderPanel.this.businessService.getAssignmentSortOrder(assignmentId.longValue());\n\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentOrder(assignmentId.longValue(), (order + 1));\n\t\t\t\t}\n\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new AjaxLink<Long>(\"hideAssignment\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal long assignmentId = getModelObject();\n\t\t\t\ttarget.appendJavaScript(\"sakai.gradebookng.spreadsheet.hideGradeItemAndSyncToolbar('\" + assignmentId + \"');\");\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new AjaxLink<Long>(\"setUngraded\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateUngradedItemsWindow();\n\t\t\t\tfinal UpdateUngradedItemsPanel panel = new UpdateUngradedItemsPanel(window.getContentId(), getModel(), window);\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(panel);\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\n\t\t\t\tpanel.setOutputMarkupId(true);\n\t\t\t\ttarget.appendJavaScript(\"new GradebookUpdateUngraded($(\\\"#\" + panel.getMarkupId() + \"\\\"));\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (assignment.isExternallyMaintained()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t});\n\n\t\t// delete item\n\t\tmenu.add(new AjaxLink<Long>(\"deleteGradeItem\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getDeleteItemWindow();\n\t\t\t\tfinal DeleteItemPanel panel = new DeleteItemPanel(window.getContentId(), getModel(), window);\n\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(panel);\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (assignment.isExternallyMaintained()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tadd(menu);\n\n\t}","id":100035,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetParentCellFor(this).setOutputMarkupId(true);\n\n\t\tfinal Assignment assignment = this.modelData.getObject();\n\n\t\t// get user's role\n\t\tfinal GbRole role = this.businessService.getUserRole();\n\n\t\tfinal Link<String> title = new Link<String>(\"title\", Model.of(assignment.getName())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\n\t\t\t\t// toggle the sort direction on each click\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GradebookUiSettings settings = gradebookPage.getUiSettings();\n\n\t\t\t\t// if null, set a default sort, otherwise toggle, save, refresh.\n\t\t\t\tif (settings.getAssignmentSortOrder() == null\n\t\t\t\t\t\t|| !assignment.getId().equals(settings.getAssignmentSortOrder().getAssignmentId())) {\n\t\t\t\t\tsettings.setAssignmentSortOrder(new GbAssignmentGradeSortOrder(assignment.getId(), SortDirection.ASCENDING));\n\t\t\t\t} else {\n\t\t\t\t\tfinal GbAssignmentGradeSortOrder sortOrder = settings.getAssignmentSortOrder();\n\t\t\t\t\tSortDirection direction = sortOrder.getDirection();\n\t\t\t\t\tdirection = direction.toggle();\n\t\t\t\t\tsortOrder.setDirection(direction);\n\t\t\t\t\tsettings.setAssignmentSortOrder(sortOrder);\n\t\t\t\t}\n\n\t\t\t\t// clear any category sort order to prevent conflicts\n\t\t\t\tsettings.setCategorySortOrder(null);\n\n\t\t\t\t// save settings\n\t\t\t\tgradebookPage.setUiSettings(settings);\n\n\t\t\t\t// refresh\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\n\t\t};\n\t\ttitle.add(new AttributeModifier(\"title\", assignment.getName()));\n\t\ttitle.add(new Label(\"label\", assignment.getName()));\n\n\t\t// set the class based on the sortOrder. May not be set for this assignment so match it\n\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\tfinal GradebookUiSettings settings = gradebookPage.getUiSettings();\n\t\tif (settings != null && settings.getAssignmentSortOrder() != null\n\t\t\t\t&& settings.getAssignmentSortOrder().getAssignmentId() == assignment.getId()) {\n\t\t\ttitle.add(\n\t\t\t\t\tnew AttributeModifier(\"class\", \"gb-sort-\" + settings.getAssignmentSortOrder().getDirection().toString().toLowerCase()));\n\t\t}\n\n\t\tadd(title);\n\n\t\tadd(new Label(\"totalPoints\", Model.of(assignment.getPoints())));\n\t\tadd(new Label(\"dueDate\", Model.of(FormatHelper.formatDate(assignment.getDueDate(), getString(\"label.noduedate\")))));\n\n\t\tfinal WebMarkupContainer externalAppFlag = gradebookPage.buildFlagWithPopover(\"externalAppFlag\", \"\");\n\t\tif (assignment.getExternalAppName() == null) {\n\t\t\texternalAppFlag.setVisible(false);\n\t\t} else {\n\t\t\texternalAppFlag.setVisible(true);\n\t\t\texternalAppFlag.add(new AttributeModifier(\"data-content\",\n\t\t\t\t\tgradebookPage.generatePopoverContent(new StringResourceModel(\"label.gradeitem.externalapplabel\",\n\t\t\t\t\t\t\tnull, new Object[] { assignment.getExternalAppName() }).getString())));\n\t\t\tString iconClass = \"icon-sakai\";\n\t\t\tif (\"Assignments\".equals(assignment.getExternalAppName())) {\n\t\t\t\ticonClass = \"icon-sakai-assignment-grades\";\n\t\t\t} else if (\"Tests & Quizzes\".equals(assignment.getExternalAppName())) {\n\t\t\t\ticonClass = \"icon-sakai-samigo\";\n\t\t\t} else if (\"Lesson Builder\".equals(assignment.getExternalAppName())) {\n\t\t\t\ticonClass = \"icon-sakai-lessonbuildertool\";\n\t\t\t}\n\t\t\texternalAppFlag\n\t\t\t\t\t.add(new AttributeModifier(\"class\", \"gb-external-app-flag \" + iconClass));\n\t\t}\n\t\tadd(externalAppFlag);\n\n\t\tadd(gradebookPage.buildFlagWithPopover(\"extraCreditFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_EXTRA_CREDIT))\n\t\t\t\t.setVisible(assignment.isExtraCredit()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"isCountedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_COUNTED)).setVisible(assignment.isCounted()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"notCountedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_NOT_COUNTED))\n\t\t\t\t.setVisible(!assignment.isCounted()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"isReleasedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_RELEASED))\n\t\t\t\t.setVisible(assignment.isReleased()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"notReleasedFlag\", generateFlagPopover(HeaderFlagPopoverPanel.Flag.GRADE_ITEM_NOT_RELEASED))\n\t\t\t\t.setVisible(!assignment.isReleased()));\n\n\t\tadd(new AttributeModifier(\"data-assignmentId\", assignment.getId()));\n\t\tadd(new AttributeModifier(\"data-category\", assignment.getCategoryName()));\n\t\tadd(new AttributeModifier(\"data-sort-order\", assignment.getSortOrder()));\n\t\tadd(new AttributeModifier(\"data-categorized-sort-order\", assignment.getCategorizedSortOrder()));\n\t\tif (GbCategoryType.WEIGHTED_CATEGORY.equals(this.businessService.getGradebookCategoryType()) && assignment.getWeight() != null) {\n\t\t\tadd(new AttributeModifier(\"data-category-weight\", String.format(\"%s%%\", Math.round(assignment.getWeight() * 100))));\n\t\t}\n\t\tadd(new AttributeModifier(\"data-category-extra-credit\", assignment.isCategoryExtraCredit()));\n\t\tadd(new AttributeModifier(\"data-category-order\", assignment.getCategoryOrder()));\n\n\t\t// menu\n\t\tfinal WebMarkupContainer menu = new WebMarkupContainer(\"menu\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (role != GbRole.INSTRUCTOR) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tmenu.add(new AjaxLink<Long>(\"editAssignmentDetails\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getAddOrEditGradeItemWindow();\n\t\t\t\twindow.setTitle(getString(\"heading.editgradeitem\"));\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new AddOrEditGradeItemPanel(window.getContentId(), window, getModel()));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\n\t\t});\n\n\t\tmenu.add(new AjaxLink<Long>(\"viewAssignmentGradeStatistics\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getGradeStatisticsWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new GradeStatisticsPanel(window.getContentId(), getModel(), window));\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new Link<Long>(\"moveAssignmentLeft\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\t\t\t\t// given the id, get the assignment, get the sort order, then update and refresh\n\t\t\t\t// note that we cannot use the passed in assignment sort order in here\n\t\t\t\t// as we may have had an async reorder on the front end but not had the model data updated,\n\t\t\t\t// so we just make sure we get it fresh\n\n\t\t\t\tfinal Long assignmentId = getModelObject();\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tGradebookUiSettings settings = gradebookPage.getUiSettings();\n\n\t\t\t\tif (settings == null) {\n\t\t\t\t\tsettings = new GradebookUiSettings();\n\t\t\t\t\tgradebookPage.setUiSettings(settings);\n\t\t\t\t}\n\n\t\t\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tInteger order = calculateCurrentCategorizedSortOrder(assignmentId);\n\t\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentCategorizedOrder(assignmentId, (order.intValue() - 1));\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\terror(\"error reordering within category\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfinal int order = AssignmentColumnHeaderPanel.this.businessService.getAssignmentSortOrder(assignmentId.longValue());\n\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentOrder(assignmentId.longValue(), (order - 1));\n\t\t\t\t}\n\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new Link<Long>(\"moveAssignmentRight\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\n\t\t\t\tfinal Long assignmentId = getModelObject();\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tGradebookUiSettings settings = gradebookPage.getUiSettings();\n\n\t\t\t\tif (settings == null) {\n\t\t\t\t\tsettings = new GradebookUiSettings();\n\t\t\t\t\tgradebookPage.setUiSettings(settings);\n\t\t\t\t}\n\n\t\t\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tInteger order = calculateCurrentCategorizedSortOrder(assignmentId);\n\t\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentCategorizedOrder(assignmentId, (order.intValue() + 1));\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\terror(\"error reordering within category\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfinal int order = AssignmentColumnHeaderPanel.this.businessService.getAssignmentSortOrder(assignmentId.longValue());\n\t\t\t\t\tAssignmentColumnHeaderPanel.this.businessService.updateAssignmentOrder(assignmentId.longValue(), (order + 1));\n\t\t\t\t}\n\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new AjaxLink<Long>(\"hideAssignment\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal long assignmentId = getModelObject();\n\t\t\t\ttarget.appendJavaScript(\"sakai.gradebookng.spreadsheet.hideGradeItemAndSyncToolbar('\" + assignmentId + \"');\");\n\t\t\t}\n\t\t});\n\n\t\tmenu.add(new AjaxLink<Long>(\"setUngraded\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateUngradedItemsWindow();\n\t\t\t\tfinal UpdateUngradedItemsPanel panel = new UpdateUngradedItemsPanel(window.getContentId(), getModel(), window);\n\t\t\t\twindow.setTitle(getString(\"heading.updateungradeditems\"));\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(panel);\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\n\t\t\t\tpanel.setOutputMarkupId(true);\n\t\t\t\ttarget.appendJavaScript(\"new GradebookUpdateUngraded($(\\\"#\" + panel.getMarkupId() + \"\\\"));\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (assignment.isExternallyMaintained()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t});\n\n\t\t// delete item\n\t\tmenu.add(new AjaxLink<Long>(\"deleteGradeItem\", Model.of(assignment.getId())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getDeleteItemWindow();\n\t\t\t\tfinal DeleteItemPanel panel = new DeleteItemPanel(window.getContentId(), getModel(), window);\n\t\t\t\twindow.setTitle(getString(\"delete.label\"));\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(panel);\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (assignment.isExternallyMaintained()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tadd(menu);\n\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetParentCellFor(this).setOutputMarkupId(true);\n\n\t\tadd(new Label(\"title\", new ResourceModel(\"column.header.coursegrade\")));\n\n\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\n\t\tadd(gradebookPage.buildFlagWithPopover(\"isReleasedFlag\",\n\t\t\t\tnew HeaderFlagPopoverPanel(\"popover\", HeaderFlagPopoverPanel.Flag.COURSE_GRADE_RELEASED).toPopoverString())\n\t\t\t.setVisible(gradebook.isCourseGradeDisplayed()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"notReleasedFlag\",\n\t\t\t\tnew HeaderFlagPopoverPanel(\"popover\", HeaderFlagPopoverPanel.Flag.COURSE_GRADE_NOT_RELEASED).toPopoverString())\n\t\t\t.setVisible(!gradebook.isCourseGradeDisplayed()));\n\n\t\t// menu\n\t\tfinal WebMarkupContainer menu = new WebMarkupContainer(\"menu\");\n\t\tmenu.add(new AjaxLink<Void>(\"setUngraded\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getAddOrEditGradeItemWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new ZeroUngradedItemsPanel(window.getContentId(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tmenu.add(new AjaxLink<Void>(\"updateCourseGradeDisplay\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateCourseGradeDisplayWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new UpdateCourseGradeDisplayPanel(window.getContentId(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tadd(menu);\n\t}","id":100036,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetParentCellFor(this).setOutputMarkupId(true);\n\n\t\tadd(new Label(\"title\", new ResourceModel(\"column.header.coursegrade\")));\n\n\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\n\t\tadd(gradebookPage.buildFlagWithPopover(\"isReleasedFlag\",\n\t\t\t\tnew HeaderFlagPopoverPanel(\"popover\", HeaderFlagPopoverPanel.Flag.COURSE_GRADE_RELEASED).toPopoverString())\n\t\t\t.setVisible(gradebook.isCourseGradeDisplayed()));\n\t\tadd(gradebookPage.buildFlagWithPopover(\"notReleasedFlag\",\n\t\t\t\tnew HeaderFlagPopoverPanel(\"popover\", HeaderFlagPopoverPanel.Flag.COURSE_GRADE_NOT_RELEASED).toPopoverString())\n\t\t\t.setVisible(!gradebook.isCourseGradeDisplayed()));\n\n\t\t// menu\n\t\tfinal WebMarkupContainer menu = new WebMarkupContainer(\"menu\");\n\t\tmenu.add(new AjaxLink<Void>(\"setUngraded\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateUngradedItemsWindow();\n\t\t\t\twindow.setTitle(getString(\"heading.zeroungradeditems\"));\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new ZeroUngradedItemsPanel(window.getContentId(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tmenu.add(new AjaxLink<Void>(\"updateCourseGradeDisplay\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateCourseGradeDisplayWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new UpdateCourseGradeDisplayPanel(window.getContentId(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tadd(menu);\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetParentCellFor(this).setOutputMarkupId(true);\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = this.model.getObject();\n\t\tfinal String studentUuid = (String) modelData.get(\"studentUuid\");\n\n\t\t// the model map contains a lot of additional info we need for the course grade label, this is passed through\n\n\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\n\t\t// course grade label\n\t\tadd(new GbCourseGradeLabel(\"courseGrade\", Model.ofMap(modelData)));\n\n\t\t// menu\n\t\tfinal WebMarkupContainer menu = new WebMarkupContainer(\"menu\");\n\t\tmenu.add(new AjaxLink<String>(\"courseGradeOverride\", Model.of(studentUuid)) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getGradeLogWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new CourseGradeOverridePanel(window.getContentId(), getModel(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tmenu.add(new AjaxLink<String>(\"courseGradeOverrideLog\", Model.of(studentUuid)) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getAddOrEditGradeItemWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new CourseGradeOverrideLogPanel(window.getContentId(), getModel(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tadd(menu);\n\t}","id":100037,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetParentCellFor(this).setOutputMarkupId(true);\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = this.model.getObject();\n\t\tfinal String studentUuid = (String) modelData.get(\"studentUuid\");\n\n\t\t// the model map contains a lot of additional info we need for the course grade label, this is passed through\n\n\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\n\t\t// course grade label\n\t\tadd(new GbCourseGradeLabel(\"courseGrade\", Model.ofMap(modelData)));\n\n\t\t// menu\n\t\tfinal WebMarkupContainer menu = new WebMarkupContainer(\"menu\");\n\t\tmenu.add(new AjaxLink<String>(\"courseGradeOverride\", Model.of(studentUuid)) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateCourseGradeDisplayWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new CourseGradeOverridePanel(window.getContentId(), getModel(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tmenu.add(new AjaxLink<String>(\"courseGradeOverrideLog\", Model.of(studentUuid)) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getUpdateCourseGradeDisplayWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(getParentCellFor(this));\n\t\t\t\twindow.setContent(new CourseGradeOverrideLogPanel(window.getContentId(), getModel(), window));\n\t\t\t\twindow.showUnloadConfirmation(false);\n\t\t\t\twindow.show(target);\n\t\t\t}\n\t\t});\n\t\tadd(menu);\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal String studentUuid = (String) getDefaultModelObject();\n\n\t\t// get the course grade\n\t\tfinal CourseGrade courseGrade = this.businessService.getCourseGrade(studentUuid);\n\n\t\t// get the events\n\t\tList<GbGradeLog> gradeLog;\n\n\t\t// if course grade is null we don't have any override events to show\n\t\tif (courseGrade.getId() == null) {\n\t\t\tgradeLog = Collections.emptyList();\n\t\t} else {\n\t\t\tgradeLog = this.businessService.getGradeLog(studentUuid, courseGrade.getId());\n\t\t}\n\n\t\t// render list\n\t\tfinal ListView<GbGradeLog> listView = new ListView<GbGradeLog>(\"log\", gradeLog) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateItem(final ListItem<GbGradeLog> item) {\n\n\t\t\t\tfinal GbGradeLog gradeLog = item.getModelObject();\n\n\t\t\t\t// add the entry\n\t\t\t\titem.add(new Label(\"entry\", formatLogEntry(gradeLog)).setEscapeModelStrings(false));\n\t\t\t}\n\t\t};\n\t\tadd(listView);\n\n\t\t// no entries\n\t\tfinal Label emptyLabel = new Label(\"empty\", new ResourceModel(\"coursegrade.log.none\"));\n\t\temptyLabel.setVisible(gradeLog.isEmpty());\n\t\tadd(emptyLabel);\n\n\t\t// done button\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tCourseGradeOverrideLogPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\n\t\t// heading\n\t\t// TODO if user has been deleted since rendering the GradebookPage, handle a null here gracefully\n\t\tfinal GbUser user = this.businessService.getUser(studentUuid);\n\t\tadd(new Label(\"heading\",\n\t\t\t\tnew StringResourceModel(\"heading.coursegradelog\", null, new Object[] { user.getDisplayName(), user.getDisplayId() })));\n\n\t}","id":100038,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal String studentUuid = (String) getDefaultModelObject();\n\n\t\t// heading\n\t\t// TODO if user has been deleted since rendering the GradebookPage, handle a null here gracefully\n\t\tfinal GbUser user = this.businessService.getUser(studentUuid);\n\t\tCourseGradeOverrideLogPanel.this.window.setTitle(\n\t\t\t\t(new StringResourceModel(\"heading.coursegradelog\", null,\n\t\t\t\t\t\tnew Object[] { user.getDisplayName(), user.getDisplayId() })).getString());\n\n\t\t// get the course grade\n\t\tfinal CourseGrade courseGrade = this.businessService.getCourseGrade(studentUuid);\n\n\t\t// get the events\n\t\tList<GbGradeLog> gradeLog;\n\n\t\t// if course grade is null we don't have any override events to show\n\t\tif (courseGrade.getId() == null) {\n\t\t\tgradeLog = Collections.emptyList();\n\t\t} else {\n\t\t\tgradeLog = this.businessService.getGradeLog(studentUuid, courseGrade.getId());\n\t\t}\n\n\t\t// render list\n\t\tfinal ListView<GbGradeLog> listView = new ListView<GbGradeLog>(\"log\", gradeLog) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateItem(final ListItem<GbGradeLog> item) {\n\n\t\t\t\tfinal GbGradeLog gradeLog = item.getModelObject();\n\n\t\t\t\t// add the entry\n\t\t\t\titem.add(new Label(\"entry\", formatLogEntry(gradeLog)).setEscapeModelStrings(false));\n\t\t\t}\n\t\t};\n\t\tadd(listView);\n\n\t\t// no entries\n\t\tfinal Label emptyLabel = new Label(\"empty\", new ResourceModel(\"coursegrade.log.none\"));\n\t\temptyLabel.setVisible(gradeLog.isEmpty());\n\t\tadd(emptyLabel);\n\n\t\t// done button\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tCourseGradeOverrideLogPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal String studentUuid = (String) getDefaultModelObject();\n\n\t\t// get the rest of the data we need\n\t\t// TODO some of this could be passed in through the model if it was a map...\n\t\tfinal GbUser studentUser = this.businessService.getUser(studentUuid);\n\t\tfinal String currentUserUuid = this.businessService.getCurrentUser().getId();\n\t\tfinal GbRole currentUserRole = this.businessService.getUserRole();\n\t\tfinal CourseGrade courseGrade = this.businessService.getCourseGrade(studentUuid);\n\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\n\t\t// form model\n\t\t// we are only dealing with the 'entered grade' so we use this directly\n\t\tfinal Model<String> formModel = new Model<String>(courseGrade.getEnteredGrade());\n\n\t\t// form\n\t\tfinal Form<String> form = new Form<String>(\"form\", formModel);\n\n\t\tform.add(new Label(\"studentName\", studentUser.getDisplayName()));\n\t\tform.add(new Label(\"studentEid\", studentUser.getDisplayId()));\n\t\tform.add(new Label(\"points\", formatPoints(courseGrade, gradebook)));\n\n\t\t// setup a map of data for the course grade label\n\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\tmodelData.put(\"currentUserUuid\", currentUserUuid);\n\t\tmodelData.put(\"currentUserRole\", currentUserRole);\n\t\tmodelData.put(\"courseGrade\", courseGrade);\n\t\tmodelData.put(\"gradebook\", gradebook);\n\t\tmodelData.put(\"showPoints\", false);\n\t\tmodelData.put(\"showOverride\", false);\n\t\tform.add(new GbCourseGradeLabel(\"calculated\", Model.ofMap(modelData)));\n\n\t\tform.add(new TextField<String>(\"overrideGrade\", formModel));\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tfinal String newGrade = (String) form.getModelObject();\n\n\t\t\t\t// validate the grade entered is a valid one for the selected grading schema\n\t\t\t\t// though we allow blank grades so the override is removed\n\t\t\t\tif (StringUtils.isNotBlank(newGrade)) {\n\t\t\t\t\tfinal GradebookInformation gbInfo = CourseGradeOverridePanel.this.businessService.getGradebookSettings();\n\n\t\t\t\t\tfinal Map<String, Double> schema = gbInfo.getSelectedGradingScaleBottomPercents();\n\t\t\t\t\tif (!schema.containsKey(newGrade)) {\n\t\t\t\t\t\terror(new ResourceModel(\"message.addcoursegradeoverride.invalid\").getObject());\n\t\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// save\n\t\t\t\tfinal boolean success = CourseGradeOverridePanel.this.businessService.updateCourseGrade(studentUuid, newGrade);\n\n\t\t\t\tif (success) {\n\t\t\t\t\tgetSession().info(getString(\"message.addcoursegradeoverride.success\"));\n\t\t\t\t\tsetResponsePage(getPage().getPageClass());\n\t\t\t\t} else {\n\t\t\t\t\terror(new ResourceModel(\"message.addcoursegradeoverride.error\").getObject());\n\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\tform.add(submit);\n\n\t\t// feedback panel\n\t\tform.add(new GbFeedbackPanel(\"feedback\"));\n\n\t\t// cancel button\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> f) {\n\t\t\t\tCourseGradeOverridePanel.this.window.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\tadd(form);\n\n\t\t// heading\n\t\tadd(new Label(\"heading\",\n\t\t\t\tnew StringResourceModel(\"heading.coursegrade\", null,\n\t\t\t\t\t\tnew Object[] { studentUser.getDisplayName(), studentUser.getDisplayId() })));\n\n\t}","id":100039,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal String studentUuid = (String) getDefaultModelObject();\n\n\t\t// get the rest of the data we need\n\t\t// TODO some of this could be passed in through the model if it was a map...\n\t\tfinal GbUser studentUser = this.businessService.getUser(studentUuid);\n\t\tfinal String currentUserUuid = this.businessService.getCurrentUser().getId();\n\t\tfinal GbRole currentUserRole = this.businessService.getUserRole();\n\t\tfinal CourseGrade courseGrade = this.businessService.getCourseGrade(studentUuid);\n\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\n\t\t// heading\n\t\tCourseGradeOverridePanel.this.window.setTitle(\n\t\t\t\t(new StringResourceModel(\"heading.coursegrade\", null,\n\t\t\t\t\t\tnew Object[] { studentUser.getDisplayName(), studentUser.getDisplayId() })).getString());\n\n\t\t// form model\n\t\t// we are only dealing with the 'entered grade' so we use this directly\n\t\tfinal Model<String> formModel = new Model<String>(courseGrade.getEnteredGrade());\n\n\t\t// form\n\t\tfinal Form<String> form = new Form<String>(\"form\", formModel);\n\n\t\tform.add(new Label(\"studentName\", studentUser.getDisplayName()));\n\t\tform.add(new Label(\"studentEid\", studentUser.getDisplayId()));\n\t\tform.add(new Label(\"points\", formatPoints(courseGrade, gradebook)));\n\n\t\t// setup a map of data for the course grade label\n\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\tmodelData.put(\"currentUserUuid\", currentUserUuid);\n\t\tmodelData.put(\"currentUserRole\", currentUserRole);\n\t\tmodelData.put(\"courseGrade\", courseGrade);\n\t\tmodelData.put(\"gradebook\", gradebook);\n\t\tmodelData.put(\"showPoints\", false);\n\t\tmodelData.put(\"showOverride\", false);\n\t\tform.add(new GbCourseGradeLabel(\"calculated\", Model.ofMap(modelData)));\n\n\t\tform.add(new TextField<String>(\"overrideGrade\", formModel));\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tfinal String newGrade = (String) form.getModelObject();\n\n\t\t\t\t// validate the grade entered is a valid one for the selected grading schema\n\t\t\t\t// though we allow blank grades so the override is removed\n\t\t\t\tif (StringUtils.isNotBlank(newGrade)) {\n\t\t\t\t\tfinal GradebookInformation gbInfo = CourseGradeOverridePanel.this.businessService.getGradebookSettings();\n\n\t\t\t\t\tfinal Map<String, Double> schema = gbInfo.getSelectedGradingScaleBottomPercents();\n\t\t\t\t\tif (!schema.containsKey(newGrade)) {\n\t\t\t\t\t\terror(new ResourceModel(\"message.addcoursegradeoverride.invalid\").getObject());\n\t\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// save\n\t\t\t\tfinal boolean success = CourseGradeOverridePanel.this.businessService.updateCourseGrade(studentUuid, newGrade);\n\n\t\t\t\tif (success) {\n\t\t\t\t\tgetSession().info(getString(\"message.addcoursegradeoverride.success\"));\n\t\t\t\t\tsetResponsePage(getPage().getPageClass());\n\t\t\t\t} else {\n\t\t\t\t\terror(new ResourceModel(\"message.addcoursegradeoverride.error\").getObject());\n\t\t\t\t\ttarget.addChildren(form, FeedbackPanel.class);\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\tform.add(submit);\n\n\t\t// feedback panel\n\t\tform.add(new GbFeedbackPanel(\"feedback\"));\n\n\t\t// cancel button\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> f) {\n\t\t\t\tCourseGradeOverridePanel.this.window.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\tadd(form);\n\n\t\t// heading\n\t\tadd(new Label(\"heading\",\n\t\t\t\tnew StringResourceModel(\"heading.coursegrade\", null,\n\t\t\t\t\t\tnew Object[] { studentUser.getDisplayName(), studentUser.getDisplayId() })));\n\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = (Map<String, Object>) getDefaultModelObject();\n\t\tfinal Long assignmentId = (Long) modelData.get(\"assignmentId\");\n\t\tfinal String studentUuid = (String) modelData.get(\"studentUuid\");\n\n\t\t// fetch current comment\n\t\tthis.comment = this.businessService.getAssignmentGradeComment(assignmentId, studentUuid);\n\n\t\t// form model\n\t\tfinal GradeComment gradeComment = new GradeComment();\n\t\tgradeComment.setGradeComment(this.comment);\n\t\tfinal CompoundPropertyModel<GradeComment> formModel = new CompoundPropertyModel<GradeComment>(gradeComment);\n\n\t\t// build form\n\t\t// modal window forms must be submitted via AJAX so we do not specify an onSubmit here\n\t\tfinal Form<GradeComment> form = new Form<GradeComment>(\"form\", formModel);\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\n\t\t\t\tfinal GradeComment updatedComment = (GradeComment) form.getModelObject();\n\n\t\t\t\tfinal boolean success = EditGradeCommentPanel.this.businessService.updateAssignmentGradeComment(assignmentId, studentUuid,\n\t\t\t\t\t\tupdatedComment.getGradeComment());\n\n\t\t\t\tif (success) {\n\t\t\t\t\t// update member var\n\t\t\t\t\tEditGradeCommentPanel.this.comment = updatedComment.getGradeComment();\n\n\t\t\t\t\t// trigger a close\n\t\t\t\t\tEditGradeCommentPanel.this.window.close(target);\n\t\t\t\t} else {\n\n\t\t\t\t\t// TODO need to handle the error here\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\t\tform.add(submit);\n\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tEditGradeCommentPanel.this.window.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\t// heading\n\t\t// TODO if user/assignment has been deleted since rendering the GradebookPage, handle nulls here gracefully\n\t\tfinal GbUser user = this.businessService.getUser(studentUuid);\n\t\tfinal Assignment assignment = this.businessService.getAssignment(assignmentId);\n\t\tadd(new Label(\"heading\", new StringResourceModel(\"heading.editcomment\", null,\n\t\t\t\tnew Object[] { user.getDisplayName(), user.getDisplayId(), assignment.getName() })));\n\n\t\t// textarea\n\t\tform.add(new TextArea<String>(\"comment\", new PropertyModel<String>(formModel, \"gradeComment\"))\n\t\t\t\t.add(StringValidator.maximumLength(500)));\n\n\t\t// instant validation\n\t\t// AjaxFormValidatingBehavior.addToAllFormComponents(form, \"onkeyup\", Duration.ONE_SECOND);\n\n\t\tadd(form);\n\t}","id":100040,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = (Map<String, Object>) getDefaultModelObject();\n\t\tfinal Long assignmentId = (Long) modelData.get(\"assignmentId\");\n\t\tfinal String studentUuid = (String) modelData.get(\"studentUuid\");\n\n\t\t// fetch current comment\n\t\tthis.comment = this.businessService.getAssignmentGradeComment(assignmentId, studentUuid);\n\n\t\t// form model\n\t\tfinal GradeComment gradeComment = new GradeComment();\n\t\tgradeComment.setGradeComment(this.comment);\n\t\tfinal CompoundPropertyModel<GradeComment> formModel = new CompoundPropertyModel<GradeComment>(gradeComment);\n\n\t\t// build form\n\t\t// modal window forms must be submitted via AJAX so we do not specify an onSubmit here\n\t\tfinal Form<GradeComment> form = new Form<GradeComment>(\"form\", formModel);\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\n\t\t\t\tfinal GradeComment updatedComment = (GradeComment) form.getModelObject();\n\n\t\t\t\tfinal boolean success = EditGradeCommentPanel.this.businessService.updateAssignmentGradeComment(assignmentId, studentUuid,\n\t\t\t\t\t\tupdatedComment.getGradeComment());\n\n\t\t\t\tif (success) {\n\t\t\t\t\t// update member var\n\t\t\t\t\tEditGradeCommentPanel.this.comment = updatedComment.getGradeComment();\n\n\t\t\t\t\t// trigger a close\n\t\t\t\t\tEditGradeCommentPanel.this.window.close(target);\n\t\t\t\t} else {\n\n\t\t\t\t\t// TODO need to handle the error here\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\t\tform.add(submit);\n\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tEditGradeCommentPanel.this.window.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\t// heading\n\t\t// TODO if user/assignment has been deleted since rendering the GradebookPage, handle nulls here gracefully\n\t\tfinal GbUser user = this.businessService.getUser(studentUuid);\n\t\tfinal Assignment assignment = this.businessService.getAssignment(assignmentId);\n\t\tEditGradeCommentPanel.this.window.setTitle(\n\t\t\t\t(new StringResourceModel(\"heading.editcomment\", null,\n\t\t\t\t\t\tnew Object[] { user.getDisplayName(), user.getDisplayId(), assignment.getName() })).getString());\n\n\t\t// textarea\n\t\tform.add(new TextArea<String>(\"comment\", new PropertyModel<String>(formModel, \"gradeComment\"))\n\t\t\t\t.add(StringValidator.maximumLength(500)));\n\n\t\t// instant validation\n\t\t// AjaxFormValidatingBehavior.addToAllFormComponents(form, \"onkeyup\", Duration.ONE_SECOND);\n\n\t\tadd(form);\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = (Map<String, Object>) getDefaultModelObject();\n\t\tfinal Long assignmentId = (Long) modelData.get(\"assignmentId\");\n\t\tfinal String studentUuid = (String) modelData.get(\"studentUuid\");\n\n\t\t// get the data\n\t\tfinal List<GbGradeLog> gradeLog = this.businessService.getGradeLog(studentUuid, assignmentId);\n\n\t\t// render list\n\t\tfinal ListView<GbGradeLog> listView = new ListView<GbGradeLog>(\"log\", gradeLog) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateItem(final ListItem<GbGradeLog> item) {\n\n\t\t\t\tfinal GbGradeLog gradeLog = item.getModelObject();\n\n\t\t\t\tfinal String logDate = FormatHelper.formatDateTime(gradeLog.getDateGraded());\n\t\t\t\tfinal String grade = FormatHelper.formatGrade(gradeLog.getGrade());\n\n\t\t\t\tfinal GbUser grader = GradeLogPanel.this.businessService.getUser(gradeLog.getGraderUuid());\n\t\t\t\tfinal String graderDisplayId = (grader != null) ? grader.getDisplayId() : getString(\"unknown.user.id\");\n\n\t\t\t\t// add the entry\n\t\t\t\titem.add(new Label(\"entry\",\n\t\t\t\t\t\tnew StringResourceModel(\"grade.log.entry\", null, new Object[] { logDate, grade, graderDisplayId }))\n\t\t\t\t\t\t\t\t.setEscapeModelStrings(false));\n\n\t\t\t}\n\t\t};\n\t\tadd(listView);\n\n\t\t// no entries\n\t\tfinal Label emptyLabel = new Label(\"empty\", new ResourceModel(\"grade.log.none\"));\n\t\temptyLabel.setVisible(gradeLog.isEmpty());\n\t\tadd(emptyLabel);\n\n\t\t// done button\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tGradeLogPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\n\t\t// heading\n\t\t// TODO if user has been deleted since rendering the GradebookPage, handle a null here gracefully\n\t\tfinal GbUser user = this.businessService.getUser(studentUuid);\n\t\tadd(new Label(\"heading\",\n\t\t\t\tnew StringResourceModel(\"heading.gradelog\", null, new Object[] { user.getDisplayName(), user.getDisplayId() })));\n\n\t}","id":100041,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = (Map<String, Object>) getDefaultModelObject();\n\t\tfinal Long assignmentId = (Long) modelData.get(\"assignmentId\");\n\t\tfinal String studentUuid = (String) modelData.get(\"studentUuid\");\n\n\t\t// get the data\n\t\tfinal List<GbGradeLog> gradeLog = this.businessService.getGradeLog(studentUuid, assignmentId);\n\n\t\t// render list\n\t\tfinal ListView<GbGradeLog> listView = new ListView<GbGradeLog>(\"log\", gradeLog) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateItem(final ListItem<GbGradeLog> item) {\n\n\t\t\t\tfinal GbGradeLog gradeLog = item.getModelObject();\n\n\t\t\t\tfinal String logDate = FormatHelper.formatDateTime(gradeLog.getDateGraded());\n\t\t\t\tfinal String grade = FormatHelper.formatGrade(gradeLog.getGrade());\n\n\t\t\t\tfinal GbUser grader = GradeLogPanel.this.businessService.getUser(gradeLog.getGraderUuid());\n\t\t\t\tfinal String graderDisplayId = (grader != null) ? grader.getDisplayId() : getString(\"unknown.user.id\");\n\n\t\t\t\t// add the entry\n\t\t\t\titem.add(new Label(\"entry\",\n\t\t\t\t\t\tnew StringResourceModel(\"grade.log.entry\", null, new Object[] { logDate, grade, graderDisplayId }))\n\t\t\t\t\t\t\t\t.setEscapeModelStrings(false));\n\n\t\t\t}\n\t\t};\n\t\tadd(listView);\n\n\t\t// no entries\n\t\tfinal Label emptyLabel = new Label(\"empty\", new ResourceModel(\"grade.log.none\"));\n\t\temptyLabel.setVisible(gradeLog.isEmpty());\n\t\tadd(emptyLabel);\n\n\t\t// done button\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tGradeLogPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\n\t\t// heading\n\t\t// TODO if user has been deleted since rendering the GradebookPage, handle a null here gracefully\n\t\tfinal GbUser user = this.businessService.getUser(studentUuid);\n\t\tGradeLogPanel.this.window.setTitle(\n\t\t\t\t(new StringResourceModel(\"heading.gradelog\", null,\n\t\t\t\t\t\tnew Object[] { user.getDisplayName(), user.getDisplayId() })).getString());\n\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tfinal Long assignmentId = ((Model<Long>) getDefaultModel()).getObject();\n\n\t\tfinal Assignment assignment = this.businessService.getAssignment(assignmentId.longValue());\n\n\t\tadd(new Label(\"title\", new StringResourceModel(\"label.statistics.title\",\n\t\t\t\tnull, new Object[] { assignment.getName() }).getString()));\n\n\t\tfinal List<GbStudentGradeInfo> gradeInfo = this.businessService.buildGradeMatrix(Arrays.asList(assignment));\n\n\t\tfinal List<Double> allGrades = new ArrayList<>();\n\n\t\tfor (int i = 0; i < gradeInfo.size(); i++) {\n\t\t\tfinal GbStudentGradeInfo studentGradeInfo = gradeInfo.get(i);\n\n\t\t\tfinal Map<Long, GbGradeInfo> studentGrades = studentGradeInfo.getGrades();\n\t\t\tfinal GbGradeInfo grade = studentGrades.get(assignmentId);\n\n\t\t\tif (grade == null || grade.getGrade() == null) {\n\t\t\t\t// this is not the grade you are looking for\n\t\t\t} else {\n\t\t\t\tallGrades.add(Double.valueOf(grade.getGrade()));\n\t\t\t}\n\t\t}\n\n\t\tCollections.sort(allGrades);\n\n\t\tDefaultCategoryDataset data = new DefaultCategoryDataset();\n\n\t\tSortedMap<String, Integer> counts = new TreeMap();\n\t\tInteger extraCredits = 0;\n\n\t\tint range = 10;\n\n\t\tfor (int start=0; start < 100; start=start+range) {\n\t\t\tString key = String.format(\"%d-%d\", start, start + range);\n\t\t\tcounts.put(key, 0);\n\t\t}\n\n\t\tfor (Iterator<Double> iter = allGrades.iterator(); iter.hasNext();) {\n\t\t\tDouble grade = iter.next();\n\n\t\t\tif (grade > assignment.getPoints()) {\n\t\t\t\textraCredits = extraCredits + 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdouble percentage = grade / assignment.getPoints() * 100;\n\n\t\t\tint total = Double.valueOf(Math.ceil(percentage) / range).intValue();\n\n\t\t\tint start = total * range;\n\n\t\t\tif (start == 100) {\n\t\t\t\tstart = start - range;\n\t\t\t}\n\t\t\tString key = String.format(\"%d-%d\", start, start + range);\n\t\t\tcounts.put(key, counts.get(key) + 1);\n\t\t}\n\n\t\tfor (String label : counts.keySet()) {\n\t\t\tdata.addValue(counts.get(label), \"count\", label);\n\t\t}\n\t\tif (extraCredits > 0) {\n\t\t\tdata.addValue(extraCredits, \"count\",\n\t\t\t\t\tgetString(\"label.statistics.chart.extracredit\"));\n\t\t}\n\n\t\tJFreeChart chart = ChartFactory.createBarChart(\n\t\t\t\tnull,\t\t\t// the chart title\n\t\t\t\tgetString(\"label.statistics.chart.xaxis\"),\t// the label for the category axis\n\t\t\t\tnull,\t\t\t\t\t\t// the label for the value axis\n\t\t\t\tdata,\t\t\t\t\t// the dataset for the chart\n\t\t\t\tPlotOrientation.VERTICAL,\t\t// the plot orientation \n\t\t\t\tfalse,\t\t\t\t// show legend\n\t\t\t\ttrue,\t\t\t\t// show tooltips\n\t\t\t\tfalse);\t\t\t\t// show urls\n\n\t\tchart.setBorderVisible(false);\n\n\t\tCategoryPlot categoryPlot = chart.getCategoryPlot();\n\t\tBarRenderer br = (BarRenderer) categoryPlot.getRenderer();\n\n\t\tbr.setItemMargin(0);\n\t\tbr.setMinimumBarLength(0.05);\n\t\tbr.setMaximumBarWidth(0.1);\n\t\tbr.setSeriesPaint(0, new Color(51, 122, 183));\n\t\tbr.setBarPainter(new StandardBarPainter());\n\t\tbr.setShadowPaint(new Color(220, 220, 220));\n\t\tbr.setDefaultShadowsVisible(true);\n\n\t\tbr.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(\n\t\t\t\tgetString(\"label.statistics.chart.tooltip\"), NumberFormat.getInstance()));\n\n\t\tcategoryPlot.setRenderer(br);\n\n\t\t// show only integers in the count axis\n\t\tcategoryPlot.getRangeAxis().setStandardTickUnits(new NumberTickUnitSource(true));\n\t\tcategoryPlot.setBackgroundPaint(new Color(238, 238, 238));\n\n\t\tadd(new JFreeChartImageWithToolTip(\"chart\", Model.of(chart), \"tooltip\", 792, 440));\n\n\t\tadd(new Label(\"graded\", String.valueOf(allGrades.size())));\n\n\t\tif (allGrades.size() > 0) {\n\t\t\tadd(new Label(\"average\", constructAverageLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"median\", constructMedianLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"lowest\", constructLowestLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"highest\", constructHighestLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"deviation\", constructStandardDeviationLabel(allGrades)));\n\t\t} else {\n\t\t\tadd(new Label(\"average\", \"-\"));\n\t\t\tadd(new Label(\"median\", \"-\"));\n\t\t\tadd(new Label(\"lowest\", \"-\"));\n\t\t\tadd(new Label(\"highest\", \"-\"));\n\t\t\tadd(new Label(\"deviation\", \"-\"));\n\t\t}\n\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tGradeStatisticsPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\t}","id":100042,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tfinal Long assignmentId = ((Model<Long>) getDefaultModel()).getObject();\n\n\t\tfinal Assignment assignment = this.businessService.getAssignment(assignmentId.longValue());\n\n\t\tGradeStatisticsPanel.this.window.setTitle(\n\t\t\t\t(new StringResourceModel(\"label.statistics.title\", null,\n\t\t\t\t\t\tnew Object[] { assignment.getName() }).getString()));\n\n\t\tfinal List<GbStudentGradeInfo> gradeInfo = this.businessService.buildGradeMatrix(Arrays.asList(assignment));\n\n\t\tfinal List<Double> allGrades = new ArrayList<>();\n\n\t\tfor (int i = 0; i < gradeInfo.size(); i++) {\n\t\t\tfinal GbStudentGradeInfo studentGradeInfo = gradeInfo.get(i);\n\n\t\t\tfinal Map<Long, GbGradeInfo> studentGrades = studentGradeInfo.getGrades();\n\t\t\tfinal GbGradeInfo grade = studentGrades.get(assignmentId);\n\n\t\t\tif (grade == null || grade.getGrade() == null) {\n\t\t\t\t// this is not the grade you are looking for\n\t\t\t} else {\n\t\t\t\tallGrades.add(Double.valueOf(grade.getGrade()));\n\t\t\t}\n\t\t}\n\n\t\tCollections.sort(allGrades);\n\n\t\tDefaultCategoryDataset data = new DefaultCategoryDataset();\n\n\t\tSortedMap<String, Integer> counts = new TreeMap();\n\t\tInteger extraCredits = 0;\n\n\t\tint range = 10;\n\n\t\tfor (int start=0; start < 100; start=start+range) {\n\t\t\tString key = String.format(\"%d-%d\", start, start + range);\n\t\t\tcounts.put(key, 0);\n\t\t}\n\n\t\tfor (Iterator<Double> iter = allGrades.iterator(); iter.hasNext();) {\n\t\t\tDouble grade = iter.next();\n\n\t\t\tif (grade > assignment.getPoints()) {\n\t\t\t\textraCredits = extraCredits + 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdouble percentage = grade / assignment.getPoints() * 100;\n\n\t\t\tint total = Double.valueOf(Math.ceil(percentage) / range).intValue();\n\n\t\t\tint start = total * range;\n\n\t\t\tif (start == 100) {\n\t\t\t\tstart = start - range;\n\t\t\t}\n\t\t\tString key = String.format(\"%d-%d\", start, start + range);\n\t\t\tcounts.put(key, counts.get(key) + 1);\n\t\t}\n\n\t\tfor (String label : counts.keySet()) {\n\t\t\tdata.addValue(counts.get(label), \"count\", label);\n\t\t}\n\t\tif (extraCredits > 0) {\n\t\t\tdata.addValue(extraCredits, \"count\",\n\t\t\t\t\tgetString(\"label.statistics.chart.extracredit\"));\n\t\t}\n\n\t\tJFreeChart chart = ChartFactory.createBarChart(\n\t\t\t\tnull,\t\t\t// the chart title\n\t\t\t\tgetString(\"label.statistics.chart.xaxis\"),\t// the label for the category axis\n\t\t\t\tnull,\t\t\t\t\t\t// the label for the value axis\n\t\t\t\tdata,\t\t\t\t\t// the dataset for the chart\n\t\t\t\tPlotOrientation.VERTICAL,\t\t// the plot orientation \n\t\t\t\tfalse,\t\t\t\t// show legend\n\t\t\t\ttrue,\t\t\t\t// show tooltips\n\t\t\t\tfalse);\t\t\t\t// show urls\n\n\t\tchart.setBorderVisible(false);\n\n\t\tCategoryPlot categoryPlot = chart.getCategoryPlot();\n\t\tBarRenderer br = (BarRenderer) categoryPlot.getRenderer();\n\n\t\tbr.setItemMargin(0);\n\t\tbr.setMinimumBarLength(0.05);\n\t\tbr.setMaximumBarWidth(0.1);\n\t\tbr.setSeriesPaint(0, new Color(51, 122, 183));\n\t\tbr.setBarPainter(new StandardBarPainter());\n\t\tbr.setShadowPaint(new Color(220, 220, 220));\n\t\tbr.setDefaultShadowsVisible(true);\n\n\t\tbr.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(\n\t\t\t\tgetString(\"label.statistics.chart.tooltip\"), NumberFormat.getInstance()));\n\n\t\tcategoryPlot.setRenderer(br);\n\n\t\t// show only integers in the count axis\n\t\tcategoryPlot.getRangeAxis().setStandardTickUnits(new NumberTickUnitSource(true));\n\t\tcategoryPlot.setBackgroundPaint(new Color(238, 238, 238));\n\n\t\tadd(new JFreeChartImageWithToolTip(\"chart\", Model.of(chart), \"tooltip\", 792, 440));\n\n\t\tadd(new Label(\"graded\", String.valueOf(allGrades.size())));\n\n\t\tif (allGrades.size() > 0) {\n\t\t\tadd(new Label(\"average\", constructAverageLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"median\", constructMedianLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"lowest\", constructLowestLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"highest\", constructHighestLabel(allGrades, assignment)));\n\t\t\tadd(new Label(\"deviation\", constructStandardDeviationLabel(allGrades)));\n\t\t} else {\n\t\t\tadd(new Label(\"average\", \"-\"));\n\t\t\tadd(new Label(\"median\", \"-\"));\n\t\t\tadd(new Label(\"lowest\", \"-\"));\n\t\t\tadd(new Label(\"highest\", \"-\"));\n\t\t\tadd(new Label(\"deviation\", \"-\"));\n\t\t}\n\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tGradeStatisticsPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@SuppressWarnings({ \"rawtypes\", \"unchecked\", \"serial\" })\n\tpublic GradebookPage() {\n\t\tdisableLink(this.gradebookPageLink);\n\n\t\t// students cannot access this page\n\t\tif (this.role == GbRole.STUDENT) {\n\t\t\tthrow new RestartResponseException(StudentPage.class);\n\t\t}\n\n\t\tfinal StopWatch stopwatch = new StopWatch();\n\t\tstopwatch.start();\n\t\tTemp.time(\"GradebookPage init\", stopwatch.getTime());\n\n\t\tthis.form = new Form<Void>(\"form\");\n\t\tadd(this.form);\n\n\t\t/**\n\t\t * Note that SEMI_TRANSPARENT has a 100% black background and TRANSPARENT is overridden to 10% opacity\n\t\t */\n\t\tthis.addOrEditGradeItemWindow = new GbModalWindow(\"addOrEditGradeItemWindow\");\n\t\tthis.addOrEditGradeItemWindow.showUnloadConfirmation(false);\n\t\tthis.form.add(this.addOrEditGradeItemWindow);\n\n\t\tthis.studentGradeSummaryWindow = new GbModalWindow(\"studentGradeSummaryWindow\");\n\t\tthis.studentGradeSummaryWindow.setWidthUnit(\"%\");\n\t\tthis.studentGradeSummaryWindow.setInitialWidth(70);\n\t\tthis.form.add(this.studentGradeSummaryWindow);\n\n\t\tthis.updateUngradedItemsWindow = new GbModalWindow(\"updateUngradedItemsWindow\");\n\t\tthis.form.add(this.updateUngradedItemsWindow);\n\n\t\tthis.gradeLogWindow = new GbModalWindow(\"gradeLogWindow\");\n\t\tthis.form.add(this.gradeLogWindow);\n\n\t\tthis.gradeCommentWindow = new GbModalWindow(\"gradeCommentWindow\");\n\t\tthis.form.add(this.gradeCommentWindow);\n\n\t\tthis.deleteItemWindow = new GbModalWindow(\"deleteItemWindow\");\n\t\tthis.form.add(this.deleteItemWindow);\n\n\t\tthis.gradeStatisticsWindow = new GbModalWindow(\"gradeStatisticsWindow\");\n\t\tthis.gradeStatisticsWindow.setWidthUnit(\"%\");\n\t\tthis.gradeStatisticsWindow.setInitialWidth(70);\n\t\tthis.form.add(this.gradeStatisticsWindow);\n\n\t\tthis.updateCourseGradeDisplayWindow = new GbModalWindow(\"updateCourseGradeDisplayWindow\");\n\t\tthis.form.add(this.updateCourseGradeDisplayWindow);\n\n\t\tfinal AjaxButton addGradeItem = new AjaxButton(\"addGradeItem\") {\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form form) {\n\t\t\t\tfinal GbModalWindow window = getAddOrEditGradeItemWindow();\n\t\t\t\twindow.setComponentToReturnFocusTo(this);\n\t\t\t\twindow.setContent(new AddOrEditGradeItemPanel(window.getContentId(), window, null));\n\t\t\t\twindow.show(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (GradebookPage.this.role != GbRole.INSTRUCTOR) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t};\n\t\taddGradeItem.setDefaultFormProcessing(false);\n\t\taddGradeItem.setOutputMarkupId(true);\n\t\tthis.form.add(addGradeItem);\n\n\t\t// first get any settings data from the session\n\t\tfinal GradebookUiSettings settings = getUiSettings();\n\n\t\tSortType sortBy = SortType.SORT_BY_SORTING;\n\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t// Pre-sort assignments by the categorized sort order\n\t\t\tsortBy = SortType.SORT_BY_CATEGORY;\n\t\t}\n\n\t\t// get Gradebook to save additional calls later\n\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\n\t\t// get list of assignments. this allows us to build the columns and then fetch the grades for each student for each assignment from\n\t\t// the map\n\t\tfinal List<Assignment> assignments = this.businessService.getGradebookAssignments(sortBy);\n\t\tTemp.time(\"getGradebookAssignments\", stopwatch.getTime());\n\n\t\t// get the grade matrix. It should be sorted if we have that info\n\t\tfinal List<GbStudentGradeInfo> grades = this.businessService.buildGradeMatrix(assignments,\n\t\t\t\tsettings.getAssignmentSortOrder(), settings.getNameSortOrder(), settings.getCategorySortOrder(),\n\t\t\t\tsettings.getGroupFilter());\n\n\t\tTemp.time(\"buildGradeMatrix\", stopwatch.getTime());\n\n\t\t// categories enabled?\n\t\tfinal boolean categoriesEnabled = this.businessService.categoriesAreEnabled();\n\n\t\t// this could potentially be a sortable data provider\n\t\tfinal ListDataProvider<GbStudentGradeInfo> studentGradeMatrix = new ListDataProvider<GbStudentGradeInfo>(grades);\n\t\tfinal List<IColumn> cols = new ArrayList<IColumn>();\n\n\t\t// add an empty column that we can use as a handle for selecting the row\n\t\tfinal AbstractColumn handleColumn = new AbstractColumn(new Model(\"\")) {\n\n\t\t\t@Override\n\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\t\t\t\tcellItem.add(new EmptyPanel(componentId));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getCssClass() {\n\t\t\t\treturn \"gb-row-selector\";\n\t\t\t}\n\t\t};\n\t\tcols.add(handleColumn);\n\n\t\t// student name column\n\t\tfinal AbstractColumn studentNameColumn = new AbstractColumn(new Model(\"\")) {\n\n\t\t\t@Override\n\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\treturn new StudentNameColumnHeaderPanel(componentId, Model.of(settings.getNameSortOrder())); // pass in the sort\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\tfinal GbStudentGradeInfo studentGradeInfo = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\n\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\tmodelData.put(\"userId\", studentGradeInfo.getStudentUuid());\n\t\t\t\tmodelData.put(\"eid\", studentGradeInfo.getStudentEid());\n\t\t\t\tmodelData.put(\"firstName\", studentGradeInfo.getStudentFirstName());\n\t\t\t\tmodelData.put(\"lastName\", studentGradeInfo.getStudentLastName());\n\t\t\t\tmodelData.put(\"displayName\", studentGradeInfo.getStudentDisplayName());\n\t\t\t\tmodelData.put(\"nameSortOrder\", settings.getNameSortOrder()); // pass in the sort\n\n\t\t\t\tcellItem.add(new StudentNameCellPanel(componentId, Model.ofMap(modelData)));\n\t\t\t\tcellItem.add(new AttributeModifier(\"data-studentUuid\", studentGradeInfo.getStudentUuid()));\n\n\t\t\t\t// TODO may need a subclass of Item that does the onComponentTag override and then tag.setName(\"th\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getCssClass() {\n\t\t\t\treturn \"gb-student-cell\";\n\t\t\t}\n\n\t\t};\n\t\tcols.add(studentNameColumn);\n\n\t\t// course grade column\n\t\tfinal AbstractColumn courseGradeColumn = new AbstractColumn(new Model(\"\")) {\n\t\t\t@Override\n\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\tfinal CourseGradeColumnHeaderPanel panel = new CourseGradeColumnHeaderPanel(componentId);\n\t\t\t\treturn panel;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getCssClass() {\n\t\t\t\treturn \"gb-course-grade\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\tfinal GbStudentGradeInfo studentGradeInfo = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\n\t\t\t\t// setup model\n\t\t\t\t// note we have additional fields here fornthe course grade model\n\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\tmodelData.put(\"courseGrade\", studentGradeInfo.getCourseGrade());\n\t\t\t\tmodelData.put(\"studentUuid\", studentGradeInfo.getStudentUuid());\n\t\t\t\tmodelData.put(\"currentUserUuid\", GradebookPage.this.currentUserUuid);\n\t\t\t\tmodelData.put(\"currentUserRole\", GradebookPage.this.role);\n\t\t\t\tmodelData.put(\"gradebook\", gradebook);\n\t\t\t\tmodelData.put(\"showPoints\", true); // this will come from the GbUiSettings\n\t\t\t\tmodelData.put(\"showOverride\", true);\n\n\t\t\t\tcellItem.add(new CourseGradeItemCellPanel(componentId, Model.ofMap(modelData)));\n\t\t\t\tcellItem.setOutputMarkupId(true);\n\t\t\t}\n\t\t};\n\t\tcols.add(courseGradeColumn);\n\n\t\t// build the rest of the columns based on the assignment list\n\t\tfor (final Assignment assignment : assignments) {\n\n\t\t\tfinal AbstractColumn column = new AbstractColumn(new Model(assignment)) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\t\tfinal AssignmentColumnHeaderPanel panel = new AssignmentColumnHeaderPanel(componentId,\n\t\t\t\t\t\t\tnew Model<Assignment>(assignment));\n\n\t\t\t\t\tpanel.add(new AttributeModifier(\"data-category\", assignment.getCategoryName()));\n\t\t\t\t\tpanel.add(new AttributeModifier(\"data-category-id\", assignment.getCategoryId()));\n\n\t\t\t\t\tfinal StringValue createdAssignmentId = getPageParameters().get(CREATED_ASSIGNMENT_ID_PARAM);\n\t\t\t\t\tif (!createdAssignmentId.isNull() && assignment.getId().equals(createdAssignmentId.toLong())) {\n\t\t\t\t\t\tpanel.add(new AttributeModifier(\"class\", \"gb-just-created\"));\n\t\t\t\t\t\tgetPageParameters().remove(CREATED_ASSIGNMENT_ID_PARAM);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn panel;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getCssClass() {\n\t\t\t\t\treturn \"gb-grade-item-column-cell\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\t\tfinal GbStudentGradeInfo studentGrades = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\t\tfinal GbGradeInfo gradeInfo = studentGrades.getGrades().get(assignment.getId());\n\n\t\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\t\tmodelData.put(\"assignmentId\", assignment.getId());\n\t\t\t\t\tmodelData.put(\"assignmentPoints\", assignment.getPoints());\n\t\t\t\t\tmodelData.put(\"studentUuid\", studentGrades.getStudentUuid());\n\t\t\t\t\tmodelData.put(\"categoryId\", assignment.getCategoryId());\n\t\t\t\t\tmodelData.put(\"isExternal\", assignment.isExternallyMaintained());\n\t\t\t\t\tmodelData.put(\"externalAppName\", assignment.getExternalAppName());\n\t\t\t\t\tmodelData.put(\"gradeInfo\", gradeInfo);\n\t\t\t\t\tmodelData.put(\"role\", GradebookPage.this.role);\n\n\t\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\n\t\t\t\t\tcellItem.add(new GradeItemCellPanel(componentId, Model.ofMap(modelData)));\n\n\t\t\t\t\tcellItem.setOutputMarkupId(true);\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tcols.add(column);\n\t\t}\n\n\t\t// render the categories\n\t\t// Display rules:\n\t\t// 1. only show categories if the global setting is enabled\n\t\t// 2. only show categories if they have items\n\t\t// TODO may be able to pass this list into the matrix to save another lookup in there)\n\n\t\tList<CategoryDefinition> categories = new ArrayList<>();\n\n\t\tif (categoriesEnabled) {\n\n\t\t\t// only work with categories if enabled\n\t\t\tcategories = this.businessService.getGradebookCategories();\n\n\t\t\t// remove those that have no assignments\n\t\t\tcategories.removeIf(cat -> cat.getAssignmentList().isEmpty());\n\n\t\t\tfor (final CategoryDefinition category : categories) {\n\n\t\t\t\tif (category.getAssignmentList().isEmpty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal AbstractColumn column = new AbstractColumn(new Model(category)) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\t\t\tfinal CategoryColumnHeaderPanel panel = new CategoryColumnHeaderPanel(componentId,\n\t\t\t\t\t\t\t\tnew Model<CategoryDefinition>(category));\n\n\t\t\t\t\t\tpanel.add(new AttributeModifier(\"data-category\", category.getName()));\n\n\t\t\t\t\t\treturn panel;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\t\t\tfinal GbStudentGradeInfo studentGrades = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\t\t\tfinal Double score = studentGrades.getCategoryAverages().get(category.getId());\n\n\t\t\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\t\t\tmodelData.put(\"score\", score);\n\t\t\t\t\t\tmodelData.put(\"studentUuid\", studentGrades.getStudentUuid());\n\t\t\t\t\t\tmodelData.put(\"categoryId\", category.getId());\n\n\t\t\t\t\t\tcellItem.add(new CategoryColumnCellPanel(componentId, Model.ofMap(modelData)));\n\t\t\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\t\t\t\t\t\tcellItem.setOutputMarkupId(true);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getCssClass() {\n\t\t\t\t\t\treturn \"gb-category-item-column-cell\";\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tcols.add(column);\n\t\t\t}\n\t\t}\n\n\t\tTemp.time(\"all Columns added\", stopwatch.getTime());\n\n\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\tmodelData.put(\"assignments\", assignments);\n\t\tmodelData.put(\"categories\", categories);\n\n\t\tthis.form.add(new GradebookSpreadsheetFixedTables(\"fixedHeader\", Model.ofMap(modelData)));\n\n\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t// Pre-sort columns so the JavaScript doesn't have to\n\t\t\t// by putting the category total columns after assignments\n\t\t\t// in that category (which are already grouped by category).\n\t\t\t// If categories are not enabled, these average columns\n\t\t\t// will display as the last columns in the table.\n\t\t\tCollections.sort(cols, new Comparator<IColumn>() {\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(final IColumn col1, final IColumn col2) {\n\t\t\t\t\tfinal IModel model1 = ((AbstractColumn) col1).getDisplayModel();\n\t\t\t\t\tfinal IModel model2 = ((AbstractColumn) col2).getDisplayModel();\n\n\t\t\t\t\tfinal Object o1 = model1.getObject();\n\t\t\t\t\tfinal Object o2 = model2.getObject();\n\n\t\t\t\t\tif (o1.equals(o2)) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tLong cat1;\n\t\t\t\t\tLong cat2;\n\t\t\t\t\tif (o1 instanceof Assignment) {\n\t\t\t\t\t\tcat1 = ((Assignment) o1).getCategoryId();\n\t\t\t\t\t} else if (o1 instanceof CategoryDefinition) {\n\t\t\t\t\t\tcat1 = ((CategoryDefinition) o1).getId();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (o2 instanceof Assignment) {\n\t\t\t\t\t\tcat2 = ((Assignment) o2).getCategoryId();\n\t\t\t\t\t} else if (o2 instanceof CategoryDefinition) {\n\t\t\t\t\t\tcat2 = ((CategoryDefinition) o2).getId();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cat1 == null) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else if (cat2 == null) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn cat1.compareTo(cat2);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// TODO make this AjaxFallbackDefaultDataTable\n\t\tfinal DataTable table = new DataTable(\"table\", cols, studentGradeMatrix, 100);\n\t\ttable.addBottomToolbar(new NavigationToolbar(table) {\n\t\t\t@Override\n\t\t\tprotected WebComponent newNavigatorLabel(final String navigatorId, final DataTable<?, ?> table) {\n\t\t\t\treturn constructTablePaginationLabel(navigatorId, table);\n\t\t\t}\n\t\t});\n\t\ttable.addTopToolbar(new HeadersToolbar(table, null));\n\t\ttable.add(new AttributeModifier(\"data-siteid\", this.businessService.getCurrentSiteId()));\n\n\t\t// enable drag and drop based on user role (note: entity provider has role checks on exposed API)\n\t\ttable.add(new AttributeModifier(\"data-sort-enabled\", this.businessService.getUserRole() == GbRole.INSTRUCTOR));\n\n\t\tfinal WebMarkupContainer noAssignments = new WebMarkupContainer(\"noAssignments\");\n\t\tnoAssignments.setVisible(false);\n\t\tthis.form.add(noAssignments);\n\n\t\tfinal WebMarkupContainer noStudents = new WebMarkupContainer(\"noStudents\");\n\t\tnoStudents.setVisible(false);\n\t\tthis.form.add(noStudents);\n\n\t\tthis.form.add(table);\n\n\t\t// Populate the toolbar\n\t\tthis.form.add(constructTableSummaryLabel(\"studentSummary\", table));\n\n\t\tfinal Label gradeItemSummary = new Label(\"gradeItemSummary\", new StringResourceModel(\"label.toolbar.gradeitemsummary\", null,\n\t\t\t\tassignments.size() + categories.size(), assignments.size() + categories.size()));\n\t\tgradeItemSummary.setEscapeModelStrings(false);\n\t\tthis.form.add(gradeItemSummary);\n\n\t\tfinal WebMarkupContainer toggleGradeItemsToolbarItem = new WebMarkupContainer(\"toggleGradeItemsToolbarItem\");\n\t\tthis.form.add(toggleGradeItemsToolbarItem);\n\n\t\tfinal Button toggleCategoriesToolbarItem = new Button(\"toggleCategoriesToolbarItem\") {\n\t\t\t@Override\n\t\t\tprotected void onInitialize() {\n\t\t\t\tsuper.onInitialize();\n\t\t\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t\t\tadd(new AttributeModifier(\"class\", \"on\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit() {\n\t\t\t\tsettings.setCategoriesEnabled(!settings.isCategoriesEnabled());\n\t\t\t\tsetUiSettings(settings);\n\n\t\t\t\t// refresh\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\treturn categoriesEnabled && !assignments.isEmpty();\n\t\t\t}\n\t\t};\n\t\tthis.form.add(toggleCategoriesToolbarItem);\n\n\t\t// section and group dropdown\n\t\tfinal List<GbGroup> groups = this.businessService.getSiteSectionsAndGroups();\n\n\t\t// add the default ALL group to the list\n\t\tgroups.add(0, new GbGroup(null, getString(\"groups.all\"), null, GbGroup.Type.ALL));\n\n\t\tfinal DropDownChoice<GbGroup> groupFilter = new DropDownChoice<GbGroup>(\"groupFilter\", new Model<GbGroup>(), groups,\n\t\t\t\tnew ChoiceRenderer<GbGroup>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object getDisplayValue(final GbGroup g) {\n\t\t\t\t\t\treturn g.getTitle();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getIdValue(final GbGroup g, final int index) {\n\t\t\t\t\t\treturn g.getId();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\tgroupFilter.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n\n\t\t\t@Override\n\t\t\tprotected void onUpdate(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GbGroup selected = (GbGroup) groupFilter.getDefaultModelObject();\n\n\t\t\t\t// store selected group (null ok)\n\t\t\t\tfinal GradebookUiSettings settings = getUiSettings();\n\t\t\t\tsettings.setGroupFilter(selected);\n\t\t\t\tsetUiSettings(settings);\n\n\t\t\t\t// refresh\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\n\t\t});\n\n\t\t// set selected group, or first item in list\n\t\tgroupFilter.setModelObject((settings.getGroupFilter() != null) ? settings.getGroupFilter() : groups.get(0));\n\t\tgroupFilter.setNullValid(false);\n\t\tthis.form.add(groupFilter);\n\n\t\tfinal ToggleGradeItemsToolbarPanel gradeItemsTogglePanel = new ToggleGradeItemsToolbarPanel(\"gradeItemsTogglePanel\",\n\t\t\t\tModel.ofList(assignments));\n\t\tadd(gradeItemsTogglePanel);\n\n\t\t// hide/show components\n\n\t\t// no assignments, hide table, show message\n\t\tif (assignments.isEmpty()) {\n\t\t\ttable.setVisible(false);\n\t\t\ttoggleGradeItemsToolbarItem.setVisible(false);\n\t\t\tnoAssignments.setVisible(true);\n\t\t}\n\n\t\t// no visible students, show table, show message\n\t\t// don't want two messages though, hence the else\n\t\telse if (studentGradeMatrix.size() == 0) {\n\t\t\tnoStudents.setVisible(true);\n\t\t}\n\n\t\tTemp.time(\"Gradebook page done\", stopwatch.getTime());\n\t}","id":100043,"modified_method":"@SuppressWarnings({ \"rawtypes\", \"unchecked\", \"serial\" })\n\tpublic GradebookPage() {\n\t\tdisableLink(this.gradebookPageLink);\n\n\t\t// students cannot access this page\n\t\tif (this.role == GbRole.STUDENT) {\n\t\t\tthrow new RestartResponseException(StudentPage.class);\n\t\t}\n\n\t\tfinal StopWatch stopwatch = new StopWatch();\n\t\tstopwatch.start();\n\t\tTemp.time(\"GradebookPage init\", stopwatch.getTime());\n\n\t\tthis.form = new Form<Void>(\"form\");\n\t\tadd(this.form);\n\n\t\t/**\n\t\t * Note that SEMI_TRANSPARENT has a 100% black background and TRANSPARENT is overridden to 10% opacity\n\t\t */\n\t\tthis.addOrEditGradeItemWindow = new GbModalWindow(\"addOrEditGradeItemWindow\");\n\t\tthis.addOrEditGradeItemWindow.showUnloadConfirmation(false);\n\t\tthis.form.add(this.addOrEditGradeItemWindow);\n\n\t\tthis.studentGradeSummaryWindow = new GbModalWindow(\"studentGradeSummaryWindow\");\n\t\tthis.studentGradeSummaryWindow.setWidthUnit(\"%\");\n\t\tthis.studentGradeSummaryWindow.setInitialWidth(70);\n\t\tthis.form.add(this.studentGradeSummaryWindow);\n\n\t\tthis.updateUngradedItemsWindow = new GbModalWindow(\"updateUngradedItemsWindow\");\n\t\tthis.form.add(this.updateUngradedItemsWindow);\n\n\t\tthis.gradeLogWindow = new GbModalWindow(\"gradeLogWindow\");\n\t\tthis.form.add(this.gradeLogWindow);\n\n\t\tthis.gradeCommentWindow = new GbModalWindow(\"gradeCommentWindow\");\n\t\tthis.form.add(this.gradeCommentWindow);\n\n\t\tthis.deleteItemWindow = new GbModalWindow(\"deleteItemWindow\");\n\t\tthis.form.add(this.deleteItemWindow);\n\n\t\tthis.gradeStatisticsWindow = new GbModalWindow(\"gradeStatisticsWindow\");\n\t\tthis.gradeStatisticsWindow.setWidthUnit(\"%\");\n\t\tthis.gradeStatisticsWindow.setInitialWidth(70);\n\t\tthis.form.add(this.gradeStatisticsWindow);\n\n\t\tthis.updateCourseGradeDisplayWindow = new GbModalWindow(\"updateCourseGradeDisplayWindow\");\n\t\tthis.form.add(this.updateCourseGradeDisplayWindow);\n\n\t\tfinal AjaxButton addGradeItem = new AjaxButton(\"addGradeItem\") {\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form form) {\n\t\t\t\tfinal GbModalWindow window = getAddOrEditGradeItemWindow();\n\t\t\t\twindow.setTitle(getString(\"heading.addgradeitem\"));\n\t\t\t\twindow.setComponentToReturnFocusTo(this);\n\t\t\t\twindow.setContent(new AddOrEditGradeItemPanel(window.getContentId(), window, null));\n\t\t\t\twindow.show(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\tif (GradebookPage.this.role != GbRole.INSTRUCTOR) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t};\n\t\taddGradeItem.setDefaultFormProcessing(false);\n\t\taddGradeItem.setOutputMarkupId(true);\n\t\tthis.form.add(addGradeItem);\n\n\t\t// first get any settings data from the session\n\t\tfinal GradebookUiSettings settings = getUiSettings();\n\n\t\tSortType sortBy = SortType.SORT_BY_SORTING;\n\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t// Pre-sort assignments by the categorized sort order\n\t\t\tsortBy = SortType.SORT_BY_CATEGORY;\n\t\t}\n\n\t\t// get Gradebook to save additional calls later\n\t\tfinal Gradebook gradebook = this.businessService.getGradebook();\n\n\t\t// get list of assignments. this allows us to build the columns and then fetch the grades for each student for each assignment from\n\t\t// the map\n\t\tfinal List<Assignment> assignments = this.businessService.getGradebookAssignments(sortBy);\n\t\tTemp.time(\"getGradebookAssignments\", stopwatch.getTime());\n\n\t\t// get the grade matrix. It should be sorted if we have that info\n\t\tfinal List<GbStudentGradeInfo> grades = this.businessService.buildGradeMatrix(assignments,\n\t\t\t\tsettings.getAssignmentSortOrder(), settings.getNameSortOrder(), settings.getCategorySortOrder(),\n\t\t\t\tsettings.getGroupFilter());\n\n\t\tTemp.time(\"buildGradeMatrix\", stopwatch.getTime());\n\n\t\t// categories enabled?\n\t\tfinal boolean categoriesEnabled = this.businessService.categoriesAreEnabled();\n\n\t\t// this could potentially be a sortable data provider\n\t\tfinal ListDataProvider<GbStudentGradeInfo> studentGradeMatrix = new ListDataProvider<GbStudentGradeInfo>(grades);\n\t\tfinal List<IColumn> cols = new ArrayList<IColumn>();\n\n\t\t// add an empty column that we can use as a handle for selecting the row\n\t\tfinal AbstractColumn handleColumn = new AbstractColumn(new Model(\"\")) {\n\n\t\t\t@Override\n\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\t\t\t\tcellItem.add(new EmptyPanel(componentId));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getCssClass() {\n\t\t\t\treturn \"gb-row-selector\";\n\t\t\t}\n\t\t};\n\t\tcols.add(handleColumn);\n\n\t\t// student name column\n\t\tfinal AbstractColumn studentNameColumn = new AbstractColumn(new Model(\"\")) {\n\n\t\t\t@Override\n\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\treturn new StudentNameColumnHeaderPanel(componentId, Model.of(settings.getNameSortOrder())); // pass in the sort\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\tfinal GbStudentGradeInfo studentGradeInfo = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\n\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\tmodelData.put(\"userId\", studentGradeInfo.getStudentUuid());\n\t\t\t\tmodelData.put(\"eid\", studentGradeInfo.getStudentEid());\n\t\t\t\tmodelData.put(\"firstName\", studentGradeInfo.getStudentFirstName());\n\t\t\t\tmodelData.put(\"lastName\", studentGradeInfo.getStudentLastName());\n\t\t\t\tmodelData.put(\"displayName\", studentGradeInfo.getStudentDisplayName());\n\t\t\t\tmodelData.put(\"nameSortOrder\", settings.getNameSortOrder()); // pass in the sort\n\n\t\t\t\tcellItem.add(new StudentNameCellPanel(componentId, Model.ofMap(modelData)));\n\t\t\t\tcellItem.add(new AttributeModifier(\"data-studentUuid\", studentGradeInfo.getStudentUuid()));\n\n\t\t\t\t// TODO may need a subclass of Item that does the onComponentTag override and then tag.setName(\"th\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getCssClass() {\n\t\t\t\treturn \"gb-student-cell\";\n\t\t\t}\n\n\t\t};\n\t\tcols.add(studentNameColumn);\n\n\t\t// course grade column\n\t\tfinal AbstractColumn courseGradeColumn = new AbstractColumn(new Model(\"\")) {\n\t\t\t@Override\n\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\tfinal CourseGradeColumnHeaderPanel panel = new CourseGradeColumnHeaderPanel(componentId);\n\t\t\t\treturn panel;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getCssClass() {\n\t\t\t\treturn \"gb-course-grade\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\tfinal GbStudentGradeInfo studentGradeInfo = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\n\t\t\t\t// setup model\n\t\t\t\t// note we have additional fields here fornthe course grade model\n\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\tmodelData.put(\"courseGrade\", studentGradeInfo.getCourseGrade());\n\t\t\t\tmodelData.put(\"studentUuid\", studentGradeInfo.getStudentUuid());\n\t\t\t\tmodelData.put(\"currentUserUuid\", GradebookPage.this.currentUserUuid);\n\t\t\t\tmodelData.put(\"currentUserRole\", GradebookPage.this.role);\n\t\t\t\tmodelData.put(\"gradebook\", gradebook);\n\t\t\t\tmodelData.put(\"showPoints\", true); // this will come from the GbUiSettings\n\t\t\t\tmodelData.put(\"showOverride\", true);\n\n\t\t\t\tcellItem.add(new CourseGradeItemCellPanel(componentId, Model.ofMap(modelData)));\n\t\t\t\tcellItem.setOutputMarkupId(true);\n\t\t\t}\n\t\t};\n\t\tcols.add(courseGradeColumn);\n\n\t\t// build the rest of the columns based on the assignment list\n\t\tfor (final Assignment assignment : assignments) {\n\n\t\t\tfinal AbstractColumn column = new AbstractColumn(new Model(assignment)) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\t\tfinal AssignmentColumnHeaderPanel panel = new AssignmentColumnHeaderPanel(componentId,\n\t\t\t\t\t\t\tnew Model<Assignment>(assignment));\n\n\t\t\t\t\tpanel.add(new AttributeModifier(\"data-category\", assignment.getCategoryName()));\n\t\t\t\t\tpanel.add(new AttributeModifier(\"data-category-id\", assignment.getCategoryId()));\n\n\t\t\t\t\tfinal StringValue createdAssignmentId = getPageParameters().get(CREATED_ASSIGNMENT_ID_PARAM);\n\t\t\t\t\tif (!createdAssignmentId.isNull() && assignment.getId().equals(createdAssignmentId.toLong())) {\n\t\t\t\t\t\tpanel.add(new AttributeModifier(\"class\", \"gb-just-created\"));\n\t\t\t\t\t\tgetPageParameters().remove(CREATED_ASSIGNMENT_ID_PARAM);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn panel;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getCssClass() {\n\t\t\t\t\treturn \"gb-grade-item-column-cell\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\t\tfinal GbStudentGradeInfo studentGrades = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\t\tfinal GbGradeInfo gradeInfo = studentGrades.getGrades().get(assignment.getId());\n\n\t\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\t\tmodelData.put(\"assignmentId\", assignment.getId());\n\t\t\t\t\tmodelData.put(\"assignmentPoints\", assignment.getPoints());\n\t\t\t\t\tmodelData.put(\"studentUuid\", studentGrades.getStudentUuid());\n\t\t\t\t\tmodelData.put(\"categoryId\", assignment.getCategoryId());\n\t\t\t\t\tmodelData.put(\"isExternal\", assignment.isExternallyMaintained());\n\t\t\t\t\tmodelData.put(\"externalAppName\", assignment.getExternalAppName());\n\t\t\t\t\tmodelData.put(\"gradeInfo\", gradeInfo);\n\t\t\t\t\tmodelData.put(\"role\", GradebookPage.this.role);\n\n\t\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\n\t\t\t\t\tcellItem.add(new GradeItemCellPanel(componentId, Model.ofMap(modelData)));\n\n\t\t\t\t\tcellItem.setOutputMarkupId(true);\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tcols.add(column);\n\t\t}\n\n\t\t// render the categories\n\t\t// Display rules:\n\t\t// 1. only show categories if the global setting is enabled\n\t\t// 2. only show categories if they have items\n\t\t// TODO may be able to pass this list into the matrix to save another lookup in there)\n\n\t\tList<CategoryDefinition> categories = new ArrayList<>();\n\n\t\tif (categoriesEnabled) {\n\n\t\t\t// only work with categories if enabled\n\t\t\tcategories = this.businessService.getGradebookCategories();\n\n\t\t\t// remove those that have no assignments\n\t\t\tcategories.removeIf(cat -> cat.getAssignmentList().isEmpty());\n\n\t\t\tfor (final CategoryDefinition category : categories) {\n\n\t\t\t\tif (category.getAssignmentList().isEmpty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal AbstractColumn column = new AbstractColumn(new Model(category)) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Component getHeader(final String componentId) {\n\t\t\t\t\t\tfinal CategoryColumnHeaderPanel panel = new CategoryColumnHeaderPanel(componentId,\n\t\t\t\t\t\t\t\tnew Model<CategoryDefinition>(category));\n\n\t\t\t\t\t\tpanel.add(new AttributeModifier(\"data-category\", category.getName()));\n\n\t\t\t\t\t\treturn panel;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void populateItem(final Item cellItem, final String componentId, final IModel rowModel) {\n\t\t\t\t\t\tfinal GbStudentGradeInfo studentGrades = (GbStudentGradeInfo) rowModel.getObject();\n\n\t\t\t\t\t\tfinal Double score = studentGrades.getCategoryAverages().get(category.getId());\n\n\t\t\t\t\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\t\t\t\t\tmodelData.put(\"score\", score);\n\t\t\t\t\t\tmodelData.put(\"studentUuid\", studentGrades.getStudentUuid());\n\t\t\t\t\t\tmodelData.put(\"categoryId\", category.getId());\n\n\t\t\t\t\t\tcellItem.add(new CategoryColumnCellPanel(componentId, Model.ofMap(modelData)));\n\t\t\t\t\t\tcellItem.add(new AttributeModifier(\"tabindex\", 0));\n\t\t\t\t\t\tcellItem.setOutputMarkupId(true);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getCssClass() {\n\t\t\t\t\t\treturn \"gb-category-item-column-cell\";\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tcols.add(column);\n\t\t\t}\n\t\t}\n\n\t\tTemp.time(\"all Columns added\", stopwatch.getTime());\n\n\t\tfinal Map<String, Object> modelData = new HashMap<>();\n\t\tmodelData.put(\"assignments\", assignments);\n\t\tmodelData.put(\"categories\", categories);\n\n\t\tthis.form.add(new GradebookSpreadsheetFixedTables(\"fixedHeader\", Model.ofMap(modelData)));\n\n\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t// Pre-sort columns so the JavaScript doesn't have to\n\t\t\t// by putting the category total columns after assignments\n\t\t\t// in that category (which are already grouped by category).\n\t\t\t// If categories are not enabled, these average columns\n\t\t\t// will display as the last columns in the table.\n\t\t\tCollections.sort(cols, new Comparator<IColumn>() {\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(final IColumn col1, final IColumn col2) {\n\t\t\t\t\tfinal IModel model1 = ((AbstractColumn) col1).getDisplayModel();\n\t\t\t\t\tfinal IModel model2 = ((AbstractColumn) col2).getDisplayModel();\n\n\t\t\t\t\tfinal Object o1 = model1.getObject();\n\t\t\t\t\tfinal Object o2 = model2.getObject();\n\n\t\t\t\t\tif (o1.equals(o2)) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tLong cat1;\n\t\t\t\t\tLong cat2;\n\t\t\t\t\tif (o1 instanceof Assignment) {\n\t\t\t\t\t\tcat1 = ((Assignment) o1).getCategoryId();\n\t\t\t\t\t} else if (o1 instanceof CategoryDefinition) {\n\t\t\t\t\t\tcat1 = ((CategoryDefinition) o1).getId();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (o2 instanceof Assignment) {\n\t\t\t\t\t\tcat2 = ((Assignment) o2).getCategoryId();\n\t\t\t\t\t} else if (o2 instanceof CategoryDefinition) {\n\t\t\t\t\t\tcat2 = ((CategoryDefinition) o2).getId();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cat1 == null) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else if (cat2 == null) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn cat1.compareTo(cat2);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// TODO make this AjaxFallbackDefaultDataTable\n\t\tfinal DataTable table = new DataTable(\"table\", cols, studentGradeMatrix, 100);\n\t\ttable.addBottomToolbar(new NavigationToolbar(table) {\n\t\t\t@Override\n\t\t\tprotected WebComponent newNavigatorLabel(final String navigatorId, final DataTable<?, ?> table) {\n\t\t\t\treturn constructTablePaginationLabel(navigatorId, table);\n\t\t\t}\n\t\t});\n\t\ttable.addTopToolbar(new HeadersToolbar(table, null));\n\t\ttable.add(new AttributeModifier(\"data-siteid\", this.businessService.getCurrentSiteId()));\n\n\t\t// enable drag and drop based on user role (note: entity provider has role checks on exposed API)\n\t\ttable.add(new AttributeModifier(\"data-sort-enabled\", this.businessService.getUserRole() == GbRole.INSTRUCTOR));\n\n\t\tfinal WebMarkupContainer noAssignments = new WebMarkupContainer(\"noAssignments\");\n\t\tnoAssignments.setVisible(false);\n\t\tthis.form.add(noAssignments);\n\n\t\tfinal WebMarkupContainer noStudents = new WebMarkupContainer(\"noStudents\");\n\t\tnoStudents.setVisible(false);\n\t\tthis.form.add(noStudents);\n\n\t\tthis.form.add(table);\n\n\t\t// Populate the toolbar\n\t\tthis.form.add(constructTableSummaryLabel(\"studentSummary\", table));\n\n\t\tfinal Label gradeItemSummary = new Label(\"gradeItemSummary\", new StringResourceModel(\"label.toolbar.gradeitemsummary\", null,\n\t\t\t\tassignments.size() + categories.size(), assignments.size() + categories.size()));\n\t\tgradeItemSummary.setEscapeModelStrings(false);\n\t\tthis.form.add(gradeItemSummary);\n\n\t\tfinal WebMarkupContainer toggleGradeItemsToolbarItem = new WebMarkupContainer(\"toggleGradeItemsToolbarItem\");\n\t\tthis.form.add(toggleGradeItemsToolbarItem);\n\n\t\tfinal Button toggleCategoriesToolbarItem = new Button(\"toggleCategoriesToolbarItem\") {\n\t\t\t@Override\n\t\t\tprotected void onInitialize() {\n\t\t\t\tsuper.onInitialize();\n\t\t\t\tif (settings.isCategoriesEnabled()) {\n\t\t\t\t\tadd(new AttributeModifier(\"class\", \"on\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit() {\n\t\t\t\tsettings.setCategoriesEnabled(!settings.isCategoriesEnabled());\n\t\t\t\tsetUiSettings(settings);\n\n\t\t\t\t// refresh\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\treturn categoriesEnabled && !assignments.isEmpty();\n\t\t\t}\n\t\t};\n\t\tthis.form.add(toggleCategoriesToolbarItem);\n\n\t\t// section and group dropdown\n\t\tfinal List<GbGroup> groups = this.businessService.getSiteSectionsAndGroups();\n\n\t\t// add the default ALL group to the list\n\t\tgroups.add(0, new GbGroup(null, getString(\"groups.all\"), null, GbGroup.Type.ALL));\n\n\t\tfinal DropDownChoice<GbGroup> groupFilter = new DropDownChoice<GbGroup>(\"groupFilter\", new Model<GbGroup>(), groups,\n\t\t\t\tnew ChoiceRenderer<GbGroup>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object getDisplayValue(final GbGroup g) {\n\t\t\t\t\t\treturn g.getTitle();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getIdValue(final GbGroup g, final int index) {\n\t\t\t\t\t\treturn g.getId();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\tgroupFilter.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n\n\t\t\t@Override\n\t\t\tprotected void onUpdate(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GbGroup selected = (GbGroup) groupFilter.getDefaultModelObject();\n\n\t\t\t\t// store selected group (null ok)\n\t\t\t\tfinal GradebookUiSettings settings = getUiSettings();\n\t\t\t\tsettings.setGroupFilter(selected);\n\t\t\t\tsetUiSettings(settings);\n\n\t\t\t\t// refresh\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\n\t\t});\n\n\t\t// set selected group, or first item in list\n\t\tgroupFilter.setModelObject((settings.getGroupFilter() != null) ? settings.getGroupFilter() : groups.get(0));\n\t\tgroupFilter.setNullValid(false);\n\t\tthis.form.add(groupFilter);\n\n\t\tfinal ToggleGradeItemsToolbarPanel gradeItemsTogglePanel = new ToggleGradeItemsToolbarPanel(\"gradeItemsTogglePanel\",\n\t\t\t\tModel.ofList(assignments));\n\t\tadd(gradeItemsTogglePanel);\n\n\t\t// hide/show components\n\n\t\t// no assignments, hide table, show message\n\t\tif (assignments.isEmpty()) {\n\t\t\ttable.setVisible(false);\n\t\t\ttoggleGradeItemsToolbarItem.setVisible(false);\n\t\t\tnoAssignments.setVisible(true);\n\t\t}\n\n\t\t// no visible students, show table, show message\n\t\t// don't want two messages though, hence the else\n\t\telse if (studentGradeMatrix.size() == 0) {\n\t\t\tnoStudents.setVisible(true);\n\t\t}\n\n\t\tTemp.time(\"Gradebook page done\", stopwatch.getTime());\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tfinal Map<String, Object> modelData = (Map<String, Object>) getDefaultModelObject();\n\t\tfinal String eid = (String) modelData.get(\"eid\");\n\t\tfinal String displayName = (String) modelData.get(\"displayName\");\n\n\t\t// done button\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tStudentGradeSummaryPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\n\t\tfinal WebMarkupContainer studentNavigation = new WebMarkupContainer(\"studentNavigation\");\n\t\tstudentNavigation.setOutputMarkupPlaceholderTag(true);\n\t\tadd(studentNavigation);\n\n\t\tfinal List tabs = new ArrayList();\n\n\t\ttabs.add(new AbstractTab(new Model<String>(getString(\"label.studentsummary.instructorviewtab\"))) {\n\t\t\t@Override\n\t\t\tpublic Panel getPanel(final String panelId) {\n\t\t\t\treturn new InstructorGradeSummaryGradesPanel(panelId, (IModel<Map<String, Object>>) getDefaultModel());\n\t\t\t}\n\t\t});\n\t\ttabs.add(new AbstractTab(new Model<String>(getString(\"label.studentsummary.studentviewtab\"))) {\n\t\t\t@Override\n\t\t\tpublic Panel getPanel(final String panelId) {\n\t\t\t\treturn new StudentGradeSummaryGradesPanel(panelId, (IModel<Map<String, Object>>) getDefaultModel());\n\t\t\t}\n\t\t});\n\n\t\tadd(new AjaxBootstrapTabbedPanel(\"tabs\", tabs) {\n\t\t\t@Override\n\t\t\tprotected String getTabContainerCssClass() {\n\t\t\t\treturn \"nav nav-tabs\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onAjaxUpdate(final AjaxRequestTarget target) {\n\t\t\t\tsuper.onAjaxUpdate(target);\n\n\t\t\t\tfinal boolean showingInstructorView = (getSelectedTab() == 0);\n\t\t\t\tfinal boolean showingStudentView = (getSelectedTab() == 1);\n\n\t\t\t\tstudentNavigation.setVisible(showingInstructorView);\n\t\t\t\ttarget.add(studentNavigation);\n\n\t\t\t\ttarget.appendJavaScript(\n\t\t\t\t\t\tString.format(\"new GradebookGradeSummary($(\\\"#%s\\\"), %s);\", getParent().getMarkupId(), showingStudentView));\n\t\t\t}\n\t\t});\n\n\t\tadd(new Label(\"heading\", new StringResourceModel(\"heading.studentsummary\", null, new Object[] { displayName, eid })));\n\t}","id":100044,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tfinal Map<String, Object> modelData = (Map<String, Object>) getDefaultModelObject();\n\t\tfinal String eid = (String) modelData.get(\"eid\");\n\t\tfinal String displayName = (String) modelData.get(\"displayName\");\n\n\t\t// done button\n\t\tadd(new AjaxLink<Void>(\"done\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tStudentGradeSummaryPanel.this.window.close(target);\n\t\t\t}\n\t\t});\n\n\t\tfinal WebMarkupContainer studentNavigation = new WebMarkupContainer(\"studentNavigation\");\n\t\tstudentNavigation.setOutputMarkupPlaceholderTag(true);\n\t\tadd(studentNavigation);\n\n\t\tfinal List tabs = new ArrayList();\n\n\t\ttabs.add(new AbstractTab(new Model<String>(getString(\"label.studentsummary.instructorviewtab\"))) {\n\t\t\t@Override\n\t\t\tpublic Panel getPanel(final String panelId) {\n\t\t\t\treturn new InstructorGradeSummaryGradesPanel(panelId, (IModel<Map<String, Object>>) getDefaultModel());\n\t\t\t}\n\t\t});\n\t\ttabs.add(new AbstractTab(new Model<String>(getString(\"label.studentsummary.studentviewtab\"))) {\n\t\t\t@Override\n\t\t\tpublic Panel getPanel(final String panelId) {\n\t\t\t\treturn new StudentGradeSummaryGradesPanel(panelId, (IModel<Map<String, Object>>) getDefaultModel());\n\t\t\t}\n\t\t});\n\n\t\tadd(new AjaxBootstrapTabbedPanel(\"tabs\", tabs) {\n\t\t\t@Override\n\t\t\tprotected String getTabContainerCssClass() {\n\t\t\t\treturn \"nav nav-tabs\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onAjaxUpdate(final AjaxRequestTarget target) {\n\t\t\t\tsuper.onAjaxUpdate(target);\n\n\t\t\t\tfinal boolean showingInstructorView = (getSelectedTab() == 0);\n\t\t\t\tfinal boolean showingStudentView = (getSelectedTab() == 1);\n\n\t\t\t\tstudentNavigation.setVisible(showingInstructorView);\n\t\t\t\ttarget.add(studentNavigation);\n\n\t\t\t\ttarget.appendJavaScript(\n\t\t\t\t\t\tString.format(\"new GradebookGradeSummary($(\\\"#%s\\\"), %s);\", getParent().getMarkupId(), showingStudentView));\n\t\t\t}\n\t\t});\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = this.model.getObject();\n\t\tfinal String eid = (String) modelData.get(\"eid\");\n\t\tfinal String firstName = (String) modelData.get(\"firstName\");\n\t\tfinal String lastName = (String) modelData.get(\"lastName\");\n\t\tfinal GbStudentNameSortOrder nameSortOrder = (GbStudentNameSortOrder) modelData.get(\"nameSortOrder\");\n\n\t\t// link\n\t\tfinal AjaxLink<String> link = new AjaxLink<String>(\"link\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getStudentGradeSummaryWindow();\n\n\t\t\t\tfinal Component content = new StudentGradeSummaryPanel(window.getContentId(), StudentNameCellPanel.this.model, window);\n\n\t\t\t\tif (window.isShown() && window.isVisible()) {\n\t\t\t\t\twindow.replace(content);\n\t\t\t\t\tcontent.setVisible(true);\n\t\t\t\t\ttarget.add(content);\n\t\t\t\t} else {\n\t\t\t\t\twindow.setContent(content);\n\t\t\t\t\twindow.setComponentToReturnFocusTo(this);\n\t\t\t\t\twindow.show(target);\n\t\t\t\t}\n\n\t\t\t\tcontent.setOutputMarkupId(true);\n\t\t\t\ttarget.appendJavaScript(\"new GradebookGradeSummary($(\\\"#\" + content.getMarkupId() + \"\\\"));\");\n\t\t\t}\n\t\t};\n\t\tlink.setOutputMarkupId(true);\n\n\t\t// name label\n\t\tlink.add(new Label(\"name\", getFormattedStudentName(firstName, lastName, nameSortOrder)));\n\n\t\t// eid label, configurable\n\t\tlink.add(new Label(\"eid\", eid) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\treturn true; // TODO use config, will need to be passed in the model map\n\t\t\t}\n\n\t\t});\n\n\t\tadd(link);\n\n\t\tgetParent().add(new AttributeModifier(\"scope\", \"row\"));\n\t\tgetParent().add(new AttributeModifier(\"role\", \"rowheader\"));\n\n\t}","id":100045,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// unpack model\n\t\tfinal Map<String, Object> modelData = this.model.getObject();\n\t\tfinal String eid = (String) modelData.get(\"eid\");\n\t\tfinal String firstName = (String) modelData.get(\"firstName\");\n\t\tfinal String lastName = (String) modelData.get(\"lastName\");\n\t\tfinal String displayName = (String) modelData.get(\"displayName\");\n\t\tfinal GbStudentNameSortOrder nameSortOrder = (GbStudentNameSortOrder) modelData.get(\"nameSortOrder\");\n\n\t\t// link\n\t\tfinal AjaxLink<String> link = new AjaxLink<String>(\"link\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getStudentGradeSummaryWindow();\n\n\t\t\t\tfinal Component content = new StudentGradeSummaryPanel(window.getContentId(), StudentNameCellPanel.this.model, window);\n\n\t\t\t\tif (window.isShown() && window.isVisible()) {\n\t\t\t\t\twindow.replace(content);\n\t\t\t\t\tcontent.setVisible(true);\n\t\t\t\t\ttarget.add(content);\n\t\t\t\t} else {\n\t\t\t\t\twindow.setContent(content);\n\t\t\t\t\twindow.setComponentToReturnFocusTo(this);\n\t\t\t\t\twindow.show(target);\n\t\t\t\t}\n\n\t\t\t\tcontent.setOutputMarkupId(true);\n\t\t\t\tString modalTitle = (new StringResourceModel(\"heading.studentsummary\",\n\t\t\t\t\t\tnull, new Object[]{displayName, eid})).getString();\n\t\t\t\ttarget.appendJavaScript(String.format(\n\t\t\t\t\t\t\"new GradebookGradeSummary($(\\\"#%s\\\"), false, \\\"%s\\\");\",\n\t\t\t\t\t\tcontent.getMarkupId(), modalTitle));\n\t\t\t}\n\t\t};\n\t\tlink.setOutputMarkupId(true);\n\n\t\t// name label\n\t\tlink.add(new Label(\"name\", getFormattedStudentName(firstName, lastName, nameSortOrder)));\n\n\t\t// eid label, configurable\n\t\tlink.add(new Label(\"eid\", eid) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\treturn true; // TODO use config, will need to be passed in the model map\n\t\t\t}\n\n\t\t});\n\n\t\tadd(link);\n\n\t\tgetParent().add(new AttributeModifier(\"scope\", \"row\"));\n\t\tgetParent().add(new AttributeModifier(\"role\", \"rowheader\"));\n\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// get settings data\n\t\tfinal GradebookInformation settings = this.businessService.getGradebookSettings();\n\n\t\tfinal GbSettings gbSettings = new GbSettings(settings);\n\t\tfinal CompoundPropertyModel<GbSettings> formModel = new CompoundPropertyModel<GbSettings>(gbSettings);\n\n\t\t// form\n\t\tForm<GbSettings> form = new Form<GbSettings>(\"form\", formModel);\n\n\t\t// letter grade\n\t\tform.add(new CheckBox(\"letterGrade\",\n\t\t\t\tnew PropertyModel<Boolean>(formModel, \"gradebookInformation.courseLetterGradeDisplayed\")));\n\n\t\t// percentage\n\t\tform.add(new CheckBox(\"percentage\",\n\t\t\t\tnew PropertyModel<Boolean>(formModel, \"gradebookInformation.courseAverageDisplayed\")));\n\n\t\t// points\n\t\tform.add(new CheckBox(\"points\",\n\t\t\t\tnew PropertyModel<Boolean>(formModel, \"gradebookInformation.coursePointsDisplayed\")));\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\t// update settings\n\t\t\t\tUpdateCourseGradeDisplayPanel.this.businessService.updateGradebookSettings(formModel.getObject().getGradebookInformation());\n\n\t\t\t\tgetSession().info(getString(\"label.updatecoursegradedisplay.success\"));\n\t\t\t\tUpdateCourseGradeDisplayPanel.this.window.close(target);\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\t\t};\n\t\tform.add(submit);\n\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tUpdateCourseGradeDisplayPanel.this.window.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\tadd(form);\n\t}","id":100046,"modified_method":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\t// set window title\n\t\tUpdateCourseGradeDisplayPanel.this.window.setTitle(getString(\"heading.updatecoursegradedisplay\"));\n\n\t\t// get settings data\n\t\tfinal GradebookInformation settings = this.businessService.getGradebookSettings();\n\n\t\tfinal GbSettings gbSettings = new GbSettings(settings);\n\t\tfinal CompoundPropertyModel<GbSettings> formModel = new CompoundPropertyModel<GbSettings>(gbSettings);\n\n\t\t// form\n\t\tForm<GbSettings> form = new Form<GbSettings>(\"form\", formModel);\n\n\t\t// letter grade\n\t\tform.add(new CheckBox(\"letterGrade\",\n\t\t\t\tnew PropertyModel<Boolean>(formModel, \"gradebookInformation.courseLetterGradeDisplayed\")));\n\n\t\t// percentage\n\t\tform.add(new CheckBox(\"percentage\",\n\t\t\t\tnew PropertyModel<Boolean>(formModel, \"gradebookInformation.courseAverageDisplayed\")));\n\n\t\t// points\n\t\tform.add(new CheckBox(\"points\",\n\t\t\t\tnew PropertyModel<Boolean>(formModel, \"gradebookInformation.coursePointsDisplayed\")));\n\n\t\tfinal AjaxButton submit = new AjaxButton(\"submit\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\t// update settings\n\t\t\t\tUpdateCourseGradeDisplayPanel.this.businessService.updateGradebookSettings(formModel.getObject().getGradebookInformation());\n\n\t\t\t\tgetSession().info(getString(\"label.updatecoursegradedisplay.success\"));\n\t\t\t\tUpdateCourseGradeDisplayPanel.this.window.close(target);\n\t\t\t\tsetResponsePage(new GradebookPage());\n\t\t\t}\n\t\t};\n\t\tform.add(submit);\n\n\t\tfinal AjaxButton cancel = new AjaxButton(\"cancel\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n\t\t\t\tUpdateCourseGradeDisplayPanel.this.window.close(target);\n\t\t\t}\n\t\t};\n\t\tcancel.setDefaultFormProcessing(false);\n\t\tform.add(cancel);\n\n\t\tadd(form);\n\t}","commit_id":"ff2aed9bc3dd577586c212f141432fb0d3be6269","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private static void populateDefaults(final flex2.tools.oem.Configuration oemConfig,\n                                       final ToolsConfiguration c,\n                                       final CompilerConfiguration cc) {\n    oemConfig.enableAccessibility(cc.accessible());\n    oemConfig.setActionScriptMetadata(cc.getKeepAs3Metadata());\n    oemConfig.setActionScriptFileEncoding(cc.getActionscriptFileEncoding());\n    oemConfig.allowSourcePathOverlap(cc.allowSourcePathOverlap());\n    oemConfig.useActionScript3(cc.dialect() == CompilerConfiguration.AS3Dialect);\n    oemConfig.setContextRoot(cc.getContextRoot());\n    oemConfig.enableDebugging(cc.debug(), c.debugPassword());  // CHANGES HERE\n\n    if (cc.getDefaultsCssUrl() != null) {\n      oemConfig.setDefaultCSS(FileUtil.openFile(cc.getDefaultsCssUrl().getName()));\n    }\n\n    oemConfig.useECMAScript(cc.dialect() == CompilerConfiguration.ESDialect);\n    oemConfig.setExternalLibraryPath(toFiles(cc.getExternalLibraryPath()));\n    oemConfig.useHeadlessServer(cc.headlessServer());\n    oemConfig.keepAllTypeSelectors(cc.keepAllTypeSelectors());\n    oemConfig.keepCompilerGeneratedActionScript(cc.keepGeneratedActionScript());\n    oemConfig.includeLibraries(toFiles(cc.getIncludeLibraries()));\n    oemConfig.setLibraryPath(toFiles(cc.getLibraryPath()));\n    oemConfig.setLocale(cc.getLocales());\n    oemConfig.optimize(cc.optimize());\n    oemConfig.setServiceConfiguration(toFile(cc.getServices()));\n    oemConfig.showActionScriptWarnings(cc.warnings());\n    oemConfig.showBindingWarnings(cc.showBindingWarnings());\n    oemConfig.showDeprecationWarnings(cc.showDeprecationWarnings());\n    oemConfig.showShadowedDeviceFontWarnings(cc.showShadowedDeviceFontWarnings());\n    oemConfig.showUnusedTypeSelectorWarnings(cc.showUnusedTypeSelectorWarnings());\n    oemConfig.setSourcePath(toFiles(cc.getSourcePath()));    // CHANGES HERE\n    oemConfig.enableStrictChecking(cc.strict());\n    oemConfig.setTheme(toFiles(cc.getThemeFiles()));\n    oemConfig.useResourceBundleMetaData(cc.useResourceBundleMetadata());\n    oemConfig.enableVerboseStacktraces(cc.debug());\n    setDefineDirective(oemConfig, cc.getDefine());        // CHANGES HERE\n    oemConfig.setCompatibilityVersion(cc.getMxmlConfiguration().getMajorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getMinorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getRevisionCompatibilityVersion());\n\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ARRAY_TOSTRING_CHANGES, cc.warn_array_tostring_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ASSIGNMENT_WITHIN_CONDITIONAL,\n                                       cc.warn_assignment_within_conditional());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ARRAY_CAST, cc.warn_bad_array_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_BOOLEAN_ASSIGNMENT, cc.warn_bad_bool_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_DATE_CAST, cc.warn_bad_date_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_METHOD, cc.warn_bad_es3_type_method());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_PROP, cc.warn_bad_es3_type_prop());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NAN_COMPARISON, cc.warn_bad_nan_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_ASSIGNMENT, cc.warn_bad_null_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_COMPARISON, cc.warn_bad_null_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_UNDEFINED_COMPARISON, cc.warn_bad_undefined_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BOOLEAN_CONSTRUCTOR_WITH_NO_ARGS,\n                                       cc.warn_boolean_constructor_with_no_args());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CHANGES_IN_RESOLVE, cc.warn_changes_in_resolve());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CLASS_IS_SEALED, cc.warn_class_is_sealed());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONST_NOT_INITIALIZED, cc.warn_const_not_initialized());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONSTRUCTOR_RETURNS_VALUE, cc.warn_constructor_returns_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_EVENT_HANDLER_ERROR,\n                                       cc.warn_deprecated_event_handler_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_FUNCTION_ERROR, cc.warn_deprecated_function_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_PROPERTY_ERROR, cc.warn_deprecated_property_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_ARGUMENT_NAMES, cc.warn_duplicate_argument_names());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_VARIABLE_DEF, cc.warn_duplicate_variable_def());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_FOR_VAR_IN_CHANGES, cc.warn_for_var_in_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_IMPORT_HIDES_CLASS, cc.warn_import_hides_class());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INSTANCEOF_CHANGES, cc.warn_instance_of_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INTERNAL_ERROR, cc.warn_internal_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_LEVEL_NOT_SUPPORTED, cc.warn_level_not_supported());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_MISSING_NAMESPACE_DECL, cc.warn_missing_namespace_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NEGATIVE_UINT_LITERAL, cc.warn_negative_uint_literal());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_CONSTRUCTOR, cc.warn_no_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_EXPLICIT_SUPER_CALL_IN_CONSTRUCTOR,\n                                       cc.warn_no_explicit_super_call_in_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_TYPE_DECL, cc.warn_no_type_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NUMBER_FROM_STRING_CHANGES,\n                                       cc.warn_number_from_string_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SCOPING_CHANGE_IN_THIS, cc.warn_scoping_change_in_this());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SLOW_TEXTFIELD_ADDITION, cc.warn_slow_text_field_addition());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_UNLIKELY_FUNCTION_VALUE, cc.warn_unlikely_function_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_XML_CLASS_HAS_CHANGED, cc.warn_xml_class_has_changed());\n\n    populateDefaults(oemConfig, cc.getFontsConfiguration());\n    populateDefaults(oemConfig, cc.getNamespacesConfiguration());\n  }","id":100047,"modified_method":"private static void populateDefaults(final flex2.tools.oem.Configuration oemConfig,\n                                       final ToolsConfiguration c,\n                                       final CompilerConfiguration cc) {\n    oemConfig.enableAccessibility(cc.accessible());\n    oemConfig.setActionScriptMetadata(cc.getKeepAs3Metadata());\n    oemConfig.setActionScriptFileEncoding(cc.getActionscriptFileEncoding());\n    oemConfig.allowSourcePathOverlap(cc.allowSourcePathOverlap());\n    oemConfig.useActionScript3(cc.dialect() == CompilerConfiguration.AS3Dialect);\n    oemConfig.setContextRoot(cc.getContextRoot());\n    oemConfig.enableDebugging(cc.debug(), c.debugPassword());  // CHANGES HERE\n\n    if (cc.getDefaultsCssUrl() != null) {\n      oemConfig.setDefaultCSS(FileUtil.openFile(cc.getDefaultsCssUrl().getName()));\n    }\n\n    oemConfig.useECMAScript(cc.dialect() == CompilerConfiguration.ESDialect);\n    oemConfig.setExternalLibraryPath(toFiles(cc.getExternalLibraryPath()));\n    oemConfig.useHeadlessServer(cc.headlessServer());\n    oemConfig.keepAllTypeSelectors(cc.keepAllTypeSelectors());\n    oemConfig.keepCompilerGeneratedActionScript(cc.keepGeneratedActionScript());\n    oemConfig.includeLibraries(toFiles(cc.getIncludeLibraries()));\n    oemConfig.setLibraryPath(toFiles(cc.getLibraryPath()));\n    oemConfig.setLocale(cc.getLocales());\n    oemConfig.optimize(cc.optimize());\n    oemConfig.setServiceConfiguration(toFile(cc.getServices()));\n    oemConfig.showActionScriptWarnings(cc.warnings());\n    oemConfig.showBindingWarnings(cc.showBindingWarnings());\n    oemConfig.showDeprecationWarnings(cc.showDeprecationWarnings());\n    oemConfig.showShadowedDeviceFontWarnings(cc.showShadowedDeviceFontWarnings());\n    oemConfig.showUnusedTypeSelectorWarnings(cc.showUnusedTypeSelectorWarnings());\n    oemConfig.setSourcePath(FlexCompilerUtil.getPathsWithLocaleToken(cc.getUnexpandedSourcePath(), toFiles(cc.getSourcePath()),\n                                                                     cc.getLocales()));      // CHANGES HERE\n    oemConfig.enableStrictChecking(cc.strict());\n    oemConfig.setTheme(toFiles(cc.getThemeFiles()));\n    oemConfig.useResourceBundleMetaData(cc.useResourceBundleMetadata());\n    oemConfig.enableVerboseStacktraces(cc.debug());\n    setDefineDirective(oemConfig, cc.getDefine());        // CHANGES HERE\n    oemConfig.setCompatibilityVersion(cc.getMxmlConfiguration().getMajorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getMinorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getRevisionCompatibilityVersion());\n\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ARRAY_TOSTRING_CHANGES, cc.warn_array_tostring_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ASSIGNMENT_WITHIN_CONDITIONAL,\n                                       cc.warn_assignment_within_conditional());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ARRAY_CAST, cc.warn_bad_array_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_BOOLEAN_ASSIGNMENT, cc.warn_bad_bool_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_DATE_CAST, cc.warn_bad_date_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_METHOD, cc.warn_bad_es3_type_method());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_PROP, cc.warn_bad_es3_type_prop());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NAN_COMPARISON, cc.warn_bad_nan_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_ASSIGNMENT, cc.warn_bad_null_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_COMPARISON, cc.warn_bad_null_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_UNDEFINED_COMPARISON, cc.warn_bad_undefined_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BOOLEAN_CONSTRUCTOR_WITH_NO_ARGS,\n                                       cc.warn_boolean_constructor_with_no_args());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CHANGES_IN_RESOLVE, cc.warn_changes_in_resolve());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CLASS_IS_SEALED, cc.warn_class_is_sealed());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONST_NOT_INITIALIZED, cc.warn_const_not_initialized());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONSTRUCTOR_RETURNS_VALUE, cc.warn_constructor_returns_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_EVENT_HANDLER_ERROR,\n                                       cc.warn_deprecated_event_handler_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_FUNCTION_ERROR, cc.warn_deprecated_function_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_PROPERTY_ERROR, cc.warn_deprecated_property_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_ARGUMENT_NAMES, cc.warn_duplicate_argument_names());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_VARIABLE_DEF, cc.warn_duplicate_variable_def());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_FOR_VAR_IN_CHANGES, cc.warn_for_var_in_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_IMPORT_HIDES_CLASS, cc.warn_import_hides_class());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INSTANCEOF_CHANGES, cc.warn_instance_of_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INTERNAL_ERROR, cc.warn_internal_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_LEVEL_NOT_SUPPORTED, cc.warn_level_not_supported());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_MISSING_NAMESPACE_DECL, cc.warn_missing_namespace_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NEGATIVE_UINT_LITERAL, cc.warn_negative_uint_literal());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_CONSTRUCTOR, cc.warn_no_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_EXPLICIT_SUPER_CALL_IN_CONSTRUCTOR,\n                                       cc.warn_no_explicit_super_call_in_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_TYPE_DECL, cc.warn_no_type_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NUMBER_FROM_STRING_CHANGES,\n                                       cc.warn_number_from_string_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SCOPING_CHANGE_IN_THIS, cc.warn_scoping_change_in_this());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SLOW_TEXTFIELD_ADDITION, cc.warn_slow_text_field_addition());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_UNLIKELY_FUNCTION_VALUE, cc.warn_unlikely_function_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_XML_CLASS_HAS_CHANGED, cc.warn_xml_class_has_changed());\n\n    populateDefaults(oemConfig, cc.getFontsConfiguration());\n    populateDefaults(oemConfig, cc.getNamespacesConfiguration());\n  }","commit_id":"b28dc298f36b86bee27b35ec784652acf395c979","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static void populateDefaults(final flex2.tools.oem.Configuration oemConfig,\n                                       final ToolsConfiguration c,\n                                       final CompilerConfiguration cc) {\n    oemConfig.enableAccessibility(cc.accessible());\n    oemConfig.setActionScriptMetadata(cc.getKeepAs3Metadata());\n    oemConfig.setActionScriptFileEncoding(cc.getActionscriptFileEncoding());\n    oemConfig.allowSourcePathOverlap(cc.allowSourcePathOverlap());\n    oemConfig.useActionScript3(cc.dialect() == CompilerConfiguration.AS3Dialect);\n    oemConfig.setContextRoot(cc.getContextRoot());\n    oemConfig.enableDebugging(cc.debug(), c.debugPassword());  // CHANGES HERE\n\n    if (cc.getDefaultsCssUrl() != null) {\n      oemConfig.setDefaultCSS(FileUtil.openFile(cc.getDefaultsCssUrl().getName()));\n    }\n\n    oemConfig.useECMAScript(cc.dialect() == CompilerConfiguration.ESDialect);\n    oemConfig.setExternalLibraryPath(toFiles(cc.getExternalLibraryPath()));\n    oemConfig.useHeadlessServer(cc.headlessServer());\n    oemConfig.keepAllTypeSelectors(cc.keepAllTypeSelectors());\n    oemConfig.keepCompilerGeneratedActionScript(cc.keepGeneratedActionScript());\n    oemConfig.includeLibraries(toFiles(cc.getIncludeLibraries()));\n    oemConfig.setLibraryPath(toFiles(cc.getLibraryPath()));\n    oemConfig.setLocale(cc.getLocales());\n    oemConfig.optimize(cc.optimize());\n    oemConfig.setServiceConfiguration(toFile(cc.getServices()));\n    oemConfig.showActionScriptWarnings(cc.warnings());\n    oemConfig.showBindingWarnings(cc.showBindingWarnings());\n    oemConfig.showDeprecationWarnings(cc.showDeprecationWarnings());\n    oemConfig.showShadowedDeviceFontWarnings(cc.showShadowedDeviceFontWarnings());\n    oemConfig.showUnusedTypeSelectorWarnings(cc.showUnusedTypeSelectorWarnings());\n    oemConfig.setSourcePath(toFiles(cc.getSourcePath()));    // CHANGES HERE\n    oemConfig.enableStrictChecking(cc.strict());\n    oemConfig.setTheme(toFiles(cc.getThemeFiles()));\n    oemConfig.useResourceBundleMetaData(cc.useResourceBundleMetadata());\n    oemConfig.enableVerboseStacktraces(cc.debug());\n    setDefineDirective(oemConfig, cc.getDefine());        // CHANGES HERE\n    oemConfig.setCompatibilityVersion(cc.getMxmlConfiguration().getMajorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getMinorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getRevisionCompatibilityVersion());\n\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ARRAY_TOSTRING_CHANGES, cc.warn_array_tostring_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ASSIGNMENT_WITHIN_CONDITIONAL,\n                                       cc.warn_assignment_within_conditional());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ARRAY_CAST, cc.warn_bad_array_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_BOOLEAN_ASSIGNMENT, cc.warn_bad_bool_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_DATE_CAST, cc.warn_bad_date_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_METHOD, cc.warn_bad_es3_type_method());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_PROP, cc.warn_bad_es3_type_prop());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NAN_COMPARISON, cc.warn_bad_nan_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_ASSIGNMENT, cc.warn_bad_null_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_COMPARISON, cc.warn_bad_null_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_UNDEFINED_COMPARISON, cc.warn_bad_undefined_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BOOLEAN_CONSTRUCTOR_WITH_NO_ARGS,\n                                       cc.warn_boolean_constructor_with_no_args());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CHANGES_IN_RESOLVE, cc.warn_changes_in_resolve());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CLASS_IS_SEALED, cc.warn_class_is_sealed());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONST_NOT_INITIALIZED, cc.warn_const_not_initialized());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONSTRUCTOR_RETURNS_VALUE, cc.warn_constructor_returns_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_EVENT_HANDLER_ERROR,\n                                       cc.warn_deprecated_event_handler_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_FUNCTION_ERROR, cc.warn_deprecated_function_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_PROPERTY_ERROR, cc.warn_deprecated_property_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_ARGUMENT_NAMES, cc.warn_duplicate_argument_names());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_VARIABLE_DEF, cc.warn_duplicate_variable_def());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_FOR_VAR_IN_CHANGES, cc.warn_for_var_in_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_IMPORT_HIDES_CLASS, cc.warn_import_hides_class());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INSTANCEOF_CHANGES, cc.warn_instance_of_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INTERNAL_ERROR, cc.warn_internal_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_LEVEL_NOT_SUPPORTED, cc.warn_level_not_supported());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_MISSING_NAMESPACE_DECL, cc.warn_missing_namespace_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NEGATIVE_UINT_LITERAL, cc.warn_negative_uint_literal());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_CONSTRUCTOR, cc.warn_no_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_EXPLICIT_SUPER_CALL_IN_CONSTRUCTOR,\n                                       cc.warn_no_explicit_super_call_in_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_TYPE_DECL, cc.warn_no_type_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NUMBER_FROM_STRING_CHANGES,\n                                       cc.warn_number_from_string_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SCOPING_CHANGE_IN_THIS, cc.warn_scoping_change_in_this());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SLOW_TEXTFIELD_ADDITION, cc.warn_slow_text_field_addition());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_UNLIKELY_FUNCTION_VALUE, cc.warn_unlikely_function_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_XML_CLASS_HAS_CHANGED, cc.warn_xml_class_has_changed());\n\n    populateDefaults(oemConfig, cc.getFontsConfiguration());\n    populateDefaults(oemConfig, cc.getNamespacesConfiguration());\n  }","id":100048,"modified_method":"private static void populateDefaults(final flex2.tools.oem.Configuration oemConfig,\n                                       final ToolsConfiguration c,\n                                       final CompilerConfiguration cc) {\n    oemConfig.enableAccessibility(cc.accessible());\n    oemConfig.setActionScriptMetadata(cc.getKeepAs3Metadata());\n    oemConfig.setActionScriptFileEncoding(cc.getActionscriptFileEncoding());\n    oemConfig.allowSourcePathOverlap(cc.allowSourcePathOverlap());\n    oemConfig.useActionScript3(cc.dialect() == CompilerConfiguration.AS3Dialect);\n    oemConfig.setContextRoot(cc.getContextRoot());\n    oemConfig.enableDebugging(cc.debug(), c.debugPassword());  // CHANGES HERE\n\n    if (cc.getDefaultsCssUrl() != null) {\n      oemConfig.setDefaultCSS(FileUtil.openFile(cc.getDefaultsCssUrl().getName()));\n    }\n\n    oemConfig.useECMAScript(cc.dialect() == CompilerConfiguration.ESDialect);\n    oemConfig.setExternalLibraryPath(toFiles(cc.getExternalLibraryPath()));\n    oemConfig.useHeadlessServer(cc.headlessServer());\n    oemConfig.keepAllTypeSelectors(cc.keepAllTypeSelectors());\n    oemConfig.keepCompilerGeneratedActionScript(cc.keepGeneratedActionScript());\n    oemConfig.includeLibraries(toFiles(cc.getIncludeLibraries()));\n    oemConfig.setLibraryPath(toFiles(cc.getLibraryPath()));\n    oemConfig.setLocale(cc.getLocales());\n    oemConfig.optimize(cc.optimize());\n    oemConfig.setServiceConfiguration(toFile(cc.getServices()));\n    oemConfig.showActionScriptWarnings(cc.warnings());\n    oemConfig.showBindingWarnings(cc.showBindingWarnings());\n    oemConfig.showDeprecationWarnings(cc.showDeprecationWarnings());\n    oemConfig.showShadowedDeviceFontWarnings(cc.showShadowedDeviceFontWarnings());\n    oemConfig.showUnusedTypeSelectorWarnings(cc.showUnusedTypeSelectorWarnings());\n    oemConfig.setSourcePath(FlexCompilerUtil.getPathsWithLocaleToken(cc.getUnexpandedSourcePath(), toFiles(cc.getSourcePath()),\n                                                                     cc.getLocales()));      // CHANGES HERE\n    oemConfig.enableStrictChecking(cc.strict());\n    oemConfig.setTheme(toFiles(cc.getThemeFiles()));\n    oemConfig.useResourceBundleMetaData(cc.useResourceBundleMetadata());\n    oemConfig.enableVerboseStacktraces(cc.debug());\n    setDefineDirective(oemConfig, cc.getDefine());        // CHANGES HERE\n    oemConfig.setCompatibilityVersion(cc.getMxmlConfiguration().getMajorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getMinorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getRevisionCompatibilityVersion());\n\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ARRAY_TOSTRING_CHANGES, cc.warn_array_tostring_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ASSIGNMENT_WITHIN_CONDITIONAL,\n                                       cc.warn_assignment_within_conditional());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ARRAY_CAST, cc.warn_bad_array_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_BOOLEAN_ASSIGNMENT, cc.warn_bad_bool_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_DATE_CAST, cc.warn_bad_date_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_METHOD, cc.warn_bad_es3_type_method());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_PROP, cc.warn_bad_es3_type_prop());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NAN_COMPARISON, cc.warn_bad_nan_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_ASSIGNMENT, cc.warn_bad_null_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_COMPARISON, cc.warn_bad_null_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_UNDEFINED_COMPARISON, cc.warn_bad_undefined_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BOOLEAN_CONSTRUCTOR_WITH_NO_ARGS,\n                                       cc.warn_boolean_constructor_with_no_args());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CHANGES_IN_RESOLVE, cc.warn_changes_in_resolve());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CLASS_IS_SEALED, cc.warn_class_is_sealed());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONST_NOT_INITIALIZED, cc.warn_const_not_initialized());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONSTRUCTOR_RETURNS_VALUE, cc.warn_constructor_returns_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_EVENT_HANDLER_ERROR,\n                                       cc.warn_deprecated_event_handler_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_FUNCTION_ERROR, cc.warn_deprecated_function_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_PROPERTY_ERROR, cc.warn_deprecated_property_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_ARGUMENT_NAMES, cc.warn_duplicate_argument_names());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_VARIABLE_DEF, cc.warn_duplicate_variable_def());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_FOR_VAR_IN_CHANGES, cc.warn_for_var_in_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_IMPORT_HIDES_CLASS, cc.warn_import_hides_class());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INSTANCEOF_CHANGES, cc.warn_instance_of_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INTERNAL_ERROR, cc.warn_internal_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_LEVEL_NOT_SUPPORTED, cc.warn_level_not_supported());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_MISSING_NAMESPACE_DECL, cc.warn_missing_namespace_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NEGATIVE_UINT_LITERAL, cc.warn_negative_uint_literal());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_CONSTRUCTOR, cc.warn_no_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_EXPLICIT_SUPER_CALL_IN_CONSTRUCTOR,\n                                       cc.warn_no_explicit_super_call_in_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_TYPE_DECL, cc.warn_no_type_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NUMBER_FROM_STRING_CHANGES,\n                                       cc.warn_number_from_string_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SCOPING_CHANGE_IN_THIS, cc.warn_scoping_change_in_this());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SLOW_TEXTFIELD_ADDITION, cc.warn_slow_text_field_addition());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_UNLIKELY_FUNCTION_VALUE, cc.warn_unlikely_function_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_XML_CLASS_HAS_CHANGED, cc.warn_xml_class_has_changed());\n\n    populateDefaults(oemConfig, cc.getFontsConfiguration());\n    populateDefaults(oemConfig, cc.getNamespacesConfiguration());\n  }","commit_id":"b28dc298f36b86bee27b35ec784652acf395c979","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static void populateDefaults(final flex2.tools.oem.Configuration oemConfig,\n                                       final ToolsConfiguration c,\n                                       final CompilerConfiguration cc) {\n    oemConfig.enableAccessibility(cc.accessible());\n    oemConfig.setActionScriptMetadata(cc.getKeepAs3Metadata());\n    oemConfig.setActionScriptFileEncoding(cc.getActionscriptFileEncoding());\n    oemConfig.allowSourcePathOverlap(cc.allowSourcePathOverlap());\n    oemConfig.useActionScript3(cc.dialect() == CompilerConfiguration.AS3Dialect);\n    oemConfig.setContextRoot(cc.getContextRoot());\n    oemConfig.enableDebugging(cc.debug(), c.debugPassword());  // CHANGES HERE\n\n    if (cc.getDefaultsCssUrl() != null) {\n      oemConfig.setDefaultCSS(FileUtil.openFile(cc.getDefaultsCssUrl().getName()));\n    }\n\n    oemConfig.useECMAScript(cc.dialect() == CompilerConfiguration.ESDialect);\n    oemConfig.setExternalLibraryPath(toFiles(cc.getExternalLibraryPath()));\n    oemConfig.useHeadlessServer(cc.headlessServer());\n    oemConfig.keepAllTypeSelectors(cc.keepAllTypeSelectors());\n    oemConfig.keepCompilerGeneratedActionScript(cc.keepGeneratedActionScript());\n    oemConfig.includeLibraries(toFiles(cc.getIncludeLibraries()));\n    oemConfig.setLibraryPath(toFiles(cc.getLibraryPath()));\n    oemConfig.setLocale(cc.getLocales());\n    oemConfig.optimize(cc.optimize());\n    oemConfig.setServiceConfiguration(toFile(cc.getServices()));\n    oemConfig.showActionScriptWarnings(cc.warnings());\n    oemConfig.showBindingWarnings(cc.showBindingWarnings());\n    oemConfig.showDeprecationWarnings(cc.showDeprecationWarnings());\n    oemConfig.showShadowedDeviceFontWarnings(cc.showShadowedDeviceFontWarnings());\n    oemConfig.showUnusedTypeSelectorWarnings(cc.showUnusedTypeSelectorWarnings());\n    oemConfig.setSourcePath(toFiles(cc.getSourcePath()));    // CHANGES HERE\n    oemConfig.enableStrictChecking(cc.strict());\n    oemConfig.setTheme(toFiles(cc.getThemeFiles()));\n    oemConfig.useResourceBundleMetaData(cc.useResourceBundleMetadata());\n    oemConfig.enableVerboseStacktraces(cc.debug());\n    setDefineDirective(oemConfig, cc.getDefine());        // CHANGES HERE\n    oemConfig.setCompatibilityVersion(cc.getMxmlConfiguration().getMajorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getMinorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getRevisionCompatibilityVersion());\n\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ARRAY_TOSTRING_CHANGES, cc.warn_array_tostring_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ASSIGNMENT_WITHIN_CONDITIONAL,\n                                       cc.warn_assignment_within_conditional());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ARRAY_CAST, cc.warn_bad_array_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_BOOLEAN_ASSIGNMENT, cc.warn_bad_bool_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_DATE_CAST, cc.warn_bad_date_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_METHOD, cc.warn_bad_es3_type_method());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_PROP, cc.warn_bad_es3_type_prop());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NAN_COMPARISON, cc.warn_bad_nan_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_ASSIGNMENT, cc.warn_bad_null_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_COMPARISON, cc.warn_bad_null_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_UNDEFINED_COMPARISON, cc.warn_bad_undefined_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BOOLEAN_CONSTRUCTOR_WITH_NO_ARGS,\n                                       cc.warn_boolean_constructor_with_no_args());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CHANGES_IN_RESOLVE, cc.warn_changes_in_resolve());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CLASS_IS_SEALED, cc.warn_class_is_sealed());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONST_NOT_INITIALIZED, cc.warn_const_not_initialized());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONSTRUCTOR_RETURNS_VALUE, cc.warn_constructor_returns_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_EVENT_HANDLER_ERROR,\n                                       cc.warn_deprecated_event_handler_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_FUNCTION_ERROR, cc.warn_deprecated_function_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_PROPERTY_ERROR, cc.warn_deprecated_property_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_ARGUMENT_NAMES, cc.warn_duplicate_argument_names());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_VARIABLE_DEF, cc.warn_duplicate_variable_def());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_FOR_VAR_IN_CHANGES, cc.warn_for_var_in_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_IMPORT_HIDES_CLASS, cc.warn_import_hides_class());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INSTANCEOF_CHANGES, cc.warn_instance_of_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INTERNAL_ERROR, cc.warn_internal_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_LEVEL_NOT_SUPPORTED, cc.warn_level_not_supported());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_MISSING_NAMESPACE_DECL, cc.warn_missing_namespace_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NEGATIVE_UINT_LITERAL, cc.warn_negative_uint_literal());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_CONSTRUCTOR, cc.warn_no_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_EXPLICIT_SUPER_CALL_IN_CONSTRUCTOR,\n                                       cc.warn_no_explicit_super_call_in_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_TYPE_DECL, cc.warn_no_type_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NUMBER_FROM_STRING_CHANGES,\n                                       cc.warn_number_from_string_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SCOPING_CHANGE_IN_THIS, cc.warn_scoping_change_in_this());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SLOW_TEXTFIELD_ADDITION, cc.warn_slow_text_field_addition());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_UNLIKELY_FUNCTION_VALUE, cc.warn_unlikely_function_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_XML_CLASS_HAS_CHANGED, cc.warn_xml_class_has_changed());\n\n    populateDefaults(oemConfig, cc.getFontsConfiguration());\n    populateDefaults(oemConfig, cc.getNamespacesConfiguration());\n  }","id":100049,"modified_method":"private static void populateDefaults(final flex2.tools.oem.Configuration oemConfig,\n                                       final ToolsConfiguration c,\n                                       final CompilerConfiguration cc) {\n    oemConfig.enableAccessibility(cc.accessible());\n    oemConfig.setActionScriptMetadata(cc.getKeepAs3Metadata());\n    oemConfig.setActionScriptFileEncoding(cc.getActionscriptFileEncoding());\n    oemConfig.allowSourcePathOverlap(cc.allowSourcePathOverlap());\n    oemConfig.useActionScript3(cc.dialect() == CompilerConfiguration.AS3Dialect);\n    oemConfig.setContextRoot(cc.getContextRoot());\n    oemConfig.enableDebugging(cc.debug(), c.debugPassword());  // CHANGES HERE\n\n    if (cc.getDefaultsCssUrl() != null) {\n      oemConfig.setDefaultCSS(FileUtil.openFile(cc.getDefaultsCssUrl().getName()));\n    }\n\n    oemConfig.useECMAScript(cc.dialect() == CompilerConfiguration.ESDialect);\n    oemConfig.setExternalLibraryPath(toFiles(cc.getExternalLibraryPath()));\n    oemConfig.useHeadlessServer(cc.headlessServer());\n    oemConfig.keepAllTypeSelectors(cc.keepAllTypeSelectors());\n    oemConfig.keepCompilerGeneratedActionScript(cc.keepGeneratedActionScript());\n    oemConfig.includeLibraries(toFiles(cc.getIncludeLibraries()));\n    oemConfig.setLibraryPath(toFiles(cc.getLibraryPath()));\n    oemConfig.setLocale(cc.getLocales());\n    oemConfig.optimize(cc.optimize());\n    oemConfig.setServiceConfiguration(toFile(cc.getServices()));\n    oemConfig.showActionScriptWarnings(cc.warnings());\n    oemConfig.showBindingWarnings(cc.showBindingWarnings());\n    oemConfig.showDeprecationWarnings(cc.showDeprecationWarnings());\n    oemConfig.showShadowedDeviceFontWarnings(cc.showShadowedDeviceFontWarnings());\n    oemConfig.showUnusedTypeSelectorWarnings(cc.showUnusedTypeSelectorWarnings());\n    oemConfig.setSourcePath(FlexCompilerUtil.getPathsWithLocaleToken(cc.getUnexpandedSourcePath(), toFiles(cc.getSourcePath()),\n                                                                     cc.getLocales()));      // CHANGES HERE\n    oemConfig.enableStrictChecking(cc.strict());\n    oemConfig.setTheme(toFiles(cc.getThemeFiles()));\n    oemConfig.useResourceBundleMetaData(cc.useResourceBundleMetadata());\n    oemConfig.enableVerboseStacktraces(cc.debug());\n    setDefineDirective(oemConfig, cc.getDefine());        // CHANGES HERE\n    oemConfig.setCompatibilityVersion(cc.getMxmlConfiguration().getMajorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getMinorCompatibilityVersion(),\n                                      cc.getMxmlConfiguration().getRevisionCompatibilityVersion());\n\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ARRAY_TOSTRING_CHANGES, cc.warn_array_tostring_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_ASSIGNMENT_WITHIN_CONDITIONAL,\n                                       cc.warn_assignment_within_conditional());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ARRAY_CAST, cc.warn_bad_array_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_BOOLEAN_ASSIGNMENT, cc.warn_bad_bool_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_DATE_CAST, cc.warn_bad_date_cast());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_METHOD, cc.warn_bad_es3_type_method());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_ES3_TYPE_PROP, cc.warn_bad_es3_type_prop());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NAN_COMPARISON, cc.warn_bad_nan_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_ASSIGNMENT, cc.warn_bad_null_assignment());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_NULL_COMPARISON, cc.warn_bad_null_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BAD_UNDEFINED_COMPARISON, cc.warn_bad_undefined_comparison());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_BOOLEAN_CONSTRUCTOR_WITH_NO_ARGS,\n                                       cc.warn_boolean_constructor_with_no_args());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CHANGES_IN_RESOLVE, cc.warn_changes_in_resolve());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CLASS_IS_SEALED, cc.warn_class_is_sealed());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONST_NOT_INITIALIZED, cc.warn_const_not_initialized());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_CONSTRUCTOR_RETURNS_VALUE, cc.warn_constructor_returns_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_EVENT_HANDLER_ERROR,\n                                       cc.warn_deprecated_event_handler_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_FUNCTION_ERROR, cc.warn_deprecated_function_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DEPRECATED_PROPERTY_ERROR, cc.warn_deprecated_property_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_ARGUMENT_NAMES, cc.warn_duplicate_argument_names());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_DUPLICATE_VARIABLE_DEF, cc.warn_duplicate_variable_def());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_FOR_VAR_IN_CHANGES, cc.warn_for_var_in_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_IMPORT_HIDES_CLASS, cc.warn_import_hides_class());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INSTANCEOF_CHANGES, cc.warn_instance_of_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_INTERNAL_ERROR, cc.warn_internal_error());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_LEVEL_NOT_SUPPORTED, cc.warn_level_not_supported());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_MISSING_NAMESPACE_DECL, cc.warn_missing_namespace_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NEGATIVE_UINT_LITERAL, cc.warn_negative_uint_literal());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_CONSTRUCTOR, cc.warn_no_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_EXPLICIT_SUPER_CALL_IN_CONSTRUCTOR,\n                                       cc.warn_no_explicit_super_call_in_constructor());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NO_TYPE_DECL, cc.warn_no_type_decl());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_NUMBER_FROM_STRING_CHANGES,\n                                       cc.warn_number_from_string_changes());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SCOPING_CHANGE_IN_THIS, cc.warn_scoping_change_in_this());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_SLOW_TEXTFIELD_ADDITION, cc.warn_slow_text_field_addition());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_UNLIKELY_FUNCTION_VALUE, cc.warn_unlikely_function_value());\n    oemConfig.checkActionScriptWarning(flex2.tools.oem.Configuration.WARN_XML_CLASS_HAS_CHANGED, cc.warn_xml_class_has_changed());\n\n    populateDefaults(oemConfig, cc.getFontsConfiguration());\n    populateDefaults(oemConfig, cc.getNamespacesConfiguration());\n  }","commit_id":"b28dc298f36b86bee27b35ec784652acf395c979","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public DefaultCellInfo(Element cellElement, IScope scope) {\n    Element nodeElement = cellElement.getChild(ComponentsUtil.NODE);\n    Element parentInfoElement = cellElement.getChild(ComponentsUtil.CELL_INFO);\n    String cellId = cellElement.getAttributeValue(ComponentsUtil.ID);\n    String cellNumber = cellElement.getAttributeValue(ComponentsUtil.NUMBER);\n    String isInList = cellElement.getAttributeValue(ComponentsUtil.IS_IN_LIST);\n    myNode = ComponentsUtil.nodeFromElement(nodeElement, scope);\n    myCellId = cellId;\n    if (parentInfoElement != null) {\n      if (cellNumber != null) {\n        myCellNumber = Integer.parseInt(cellNumber);\n      }\n      if (isInList != null) {\n        myIsInList = \"true\".equals(isInList);\n      }\n      myParentInfo = new DefaultCellInfo(parentInfoElement, scope);\n    }\n  }","id":100050,"modified_method":"public DefaultCellInfo(Element cellElement, IScope scope) {\n    Element nodeElement = cellElement.getChild(ComponentsUtil.NODE);\n    Element parentInfoElement = cellElement.getChild(ComponentsUtil.CELL_INFO);\n    String cellId = cellElement.getAttributeValue(ComponentsUtil.ID);\n    String cellNumber = cellElement.getAttributeValue(ComponentsUtil.NUMBER);\n    String isInList = cellElement.getAttributeValue(ComponentsUtil.IS_IN_LIST);\n    myNodePointer = new SNodePointer(ComponentsUtil.nodeFromElement(nodeElement, scope));\n    myCellId = cellId;\n    if (parentInfoElement != null) {\n      if (cellNumber != null) {\n        myCellNumber = Integer.parseInt(cellNumber);\n      }\n      if (isInList != null) {\n        myIsInList = \"true\".equals(isInList);\n      }\n      myParentInfo = new DefaultCellInfo(parentInfoElement, scope);\n    }\n  }","commit_id":"9f901b2379307429d5c848d0564cca2fc2a65956","url":"https://github.com/JetBrains/MPS"},{"original_method":"public int hashCode() {\n    return (myParentInfo == null ? 0 : myParentInfo.hashCode()) +\n        (myNode == null?0: myNode.hashCode()) + (myCellId == null?0:myCellId.hashCode()) + myCellNumber;\n  }","id":100051,"modified_method":"public int hashCode() {\n    return (myParentInfo == null ? 0 : myParentInfo.hashCode()) +\n        (myNodePointer == null?0: myNodePointer.hashCode()) + (myCellId == null?0:myCellId.hashCode()) + myCellNumber;\n  }","commit_id":"9f901b2379307429d5c848d0564cca2fc2a65956","url":"https://github.com/JetBrains/MPS"},{"original_method":"public DefaultCellInfo(EditorCell cell) {\n    myNode = cell.getSNode();\n    myCellId = cell.getCellId();\n\n    EditorCell_Collection parent = cell.getParent();\n    if (parent != null) {\n      myParentInfo = parent.getCellInfo();\n      myIsInList = parent.hasCellListHandler();\n      if (myIsInList || myCellId == null) {\n        myCellNumber = parent.getCellNumber(cell);\n      }\n    }\n  }","id":100052,"modified_method":"public DefaultCellInfo(EditorCell cell) {\n    myNodePointer = new SNodePointer(cell.getSNode());\n    myCellId = cell.getCellId();\n\n    EditorCell_Collection parent = cell.getParent();\n    if (parent != null) {\n      myParentInfo = parent.getCellInfo();\n      myIsInList = parent.hasCellListHandler();\n      if (myIsInList || myCellId == null) {\n        myCellNumber = parent.getCellNumber(cell);\n      }\n    }\n  }","commit_id":"9f901b2379307429d5c848d0564cca2fc2a65956","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell findCell(EditorComponent editorComponent) {\n    if (myNode == null) {\n      return null;\n    }\n    return editorComponent.findCellWithId(myNode, myCellId);\n  }","id":100053,"modified_method":"public EditorCell findCell(EditorComponent editorComponent) {\n    if (myNodePointer == null) {\n      return null;\n    }\n    return editorComponent.findCellWithId(myNodePointer.getNode(), myCellId);\n  }","commit_id":"9f901b2379307429d5c848d0564cca2fc2a65956","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean equals(Object o) {\n    if (!(o instanceof CellInfo)) return false;\n    DefaultCellInfo cellInfo = (DefaultCellInfo) o;\n    if (!EqualUtil.equals(cellInfo.myParentInfo, myParentInfo)) return false;\n    if (cellInfo.myNode == null) return false;\n    boolean idsBothNull = false;\n    if (cellInfo.myCellId == null && myCellId == null) idsBothNull = true;\n    return (cellInfo.myCellId == null ? idsBothNull : cellInfo.myCellId.equals(myCellId))\n            && (cellInfo.myNode.equals(myNode))\n            && cellInfo.myCellNumber == myCellNumber;\n  }","id":100054,"modified_method":"public boolean equals(Object o) {\n    if (!(o instanceof CellInfo)) return false;\n    DefaultCellInfo cellInfo = (DefaultCellInfo) o;\n    if (!EqualUtil.equals(cellInfo.myParentInfo, myParentInfo)) return false;\n    if (cellInfo.myNodePointer == null) return false;\n    boolean idsBothNull = false;\n    if (cellInfo.myCellId == null && myCellId == null) idsBothNull = true;\n    return (cellInfo.myCellId == null ? idsBothNull : cellInfo.myCellId.equals(myCellId))\n            && (cellInfo.myNodePointer.equals(myNodePointer))\n            && cellInfo.myCellNumber == myCellNumber;\n  }","commit_id":"9f901b2379307429d5c848d0564cca2fc2a65956","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void findNodes(SearchResults res, SNode node, String methodName) {\n    for (String value : node.getProperties().values()) {\n      if (methodName.endsWith(value)) {\n        res.getSearchResults().add(new SearchResult(node, \"Aspect methods\"));\n        break;\n      }\n    }\n\n    for (SNode child : node.getChildren()) {\n      findNodes(res, child, methodName);\n    }\n  }","id":100055,"modified_method":"private void findNodes(SearchResults res, SNode node, String methodName) {\n    for (String value : node.getProperties().values()) {\n      if (methodName.endsWith(value)) {\n        res.getSearchResults().add(new SearchResult(new SNodePointer(node), \"Aspect methods\"));\n        break;\n      }\n    }\n\n    for (SNode child : node.getChildren()) {\n      findNodes(res, child, methodName);\n    }\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public NodesFinder(Collection<SNode> nodes, String categoryName) {\n    for (SNode node : nodes) {\n      myResults.getSearchResults().add(new SearchResult(node, categoryName));\n    }\n  }","id":100056,"modified_method":"public NodesFinder(Collection<SNode> nodes, String categoryName) {\n    for (SNode node : nodes) {\n      myResults.getSearchResults().add(new SearchResult(new SNodePointer(node), categoryName));\n    }\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void write(Element element, MPSProject project) {\n    if (getNode() == null) {\n      return;\n    }\n\n    Element nodeXML = new Element(NODE);\n    nodeXML.addContent(ComponentsUtil.nodeToElement(getNode()));\n    element.addContent(nodeXML);\n\n    Element scopeXML = new Element(SCOPE);\n    if (myScope instanceof GlobalScope) {\n      scopeXML.setAttribute(SCOPE_TYPE, SCOPE_TYPE_GLOBAL);\n    } else if (myScope instanceof ProjectScope) {\n      scopeXML.setAttribute(SCOPE_TYPE, SCOPE_TYPE_PROJECT);\n    } else if (myScope instanceof MyScope) {\n      scopeXML.setAttribute(SCOPE_TYPE, SCOPE_TYPE_MODULE);\n      scopeXML.setAttribute(MODULE_ID, ((AbstractModule) ((MyScope) myScope).getModelOwner()).getModuleUID());\n    }\n    element.addContent(scopeXML);\n  }","id":100057,"modified_method":"public void write(Element element, MPSProject project) {\n    Element scopeXML = new Element(SCOPE);\n    if (myScope instanceof GlobalScope) {\n      scopeXML.setAttribute(SCOPE_TYPE, SCOPE_TYPE_GLOBAL);\n    } else if (myScope instanceof ProjectScope) {\n      scopeXML.setAttribute(SCOPE_TYPE, SCOPE_TYPE_PROJECT);\n    } else if (myScope instanceof MyScope) {\n      scopeXML.setAttribute(SCOPE_TYPE, SCOPE_TYPE_MODULE);\n      scopeXML.setAttribute(MODULE_ID, ((AbstractModule) ((MyScope) myScope).getModelOwner()).getModuleUID());\n    }\n    element.addContent(scopeXML);\n\n    if (myNodePointer.getNode() != null) {\n      Element nodeXML = new Element(NODE);\n      nodeXML.addContent(ComponentsUtil.nodeToElement(myNodePointer.getNode()));\n      element.addContent(nodeXML);\n    }\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getNode() {\n    return myNode;\n  }","id":100058,"modified_method":"public SNodePointer getNodePointer() {\n    return myNodePointer;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SearchQuery(SNode node, IScope scope) {\n    myNode = node;\n    myScope = scope;\n  }","id":100059,"modified_method":"public SearchQuery(SNodePointer nodePointer, IScope scope) {\n    myNodePointer = nodePointer;\n    myScope = scope;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void read(Element element, MPSProject project) {\n    //TODO: CRITICAL: rewrite using SNodePointer\n    try {\n      myNode = ComponentsUtil.nodeFromElement((Element) element.getChild(NODE).getChildren().get(0));\n\n      Element scopeXML = element.getChild(SCOPE);\n      String scopeType = scopeXML.getAttribute(SCOPE_TYPE).getValue();\n      if (scopeType.equals(SCOPE_TYPE_GLOBAL)) {\n        myScope = GlobalScope.getInstance();\n      } else if (scopeType.equals(SCOPE_TYPE_PROJECT)) {\n        myScope = project.getScope();\n      } else if (scopeType.equals(SCOPE_TYPE_MODULE)) {\n        String moduleUID = scopeXML.getAttribute(MODULE_ID).getValue();\n        myScope = null;\n        for (IModule module : project.getModules()) {\n          if (module.getModuleUID().equals(moduleUID)) {\n            myScope = module.getScope();\n          }\n        }\n        if (myScope == null) {\n          throw new ScopeNotFoundException();\n        }\n      }\n    } catch (NullPointerException e) {\n      myNode = null;\n      myScope = null;\n    }\n  }","id":100060,"modified_method":"public void read(Element element, MPSProject project) {\n    Element scopeXML = element.getChild(SCOPE);\n    String scopeType = scopeXML.getAttribute(SCOPE_TYPE).getValue();\n    if (scopeType.equals(SCOPE_TYPE_GLOBAL)) {\n      myScope = GlobalScope.getInstance();\n    } else if (scopeType.equals(SCOPE_TYPE_PROJECT)) {\n      myScope = project.getScope();\n    } else if (scopeType.equals(SCOPE_TYPE_MODULE)) {\n      String moduleUID = scopeXML.getAttribute(MODULE_ID).getValue();\n      myScope = null;\n      for (IModule module : project.getModules()) {\n        if (module.getModuleUID().equals(moduleUID)) {\n          myScope = module.getScope();\n        }\n      }\n      if (myScope == null) {\n        throw new ScopeNotFoundException();\n      }\n    }\n\n    Element nodeXML = element.getChild(NODE);\n    SNode node;\n    if (nodeXML == null) {\n      node = null;\n    } else {\n      node = ComponentsUtil.nodeFromElement((Element) nodeXML.getChildren().get(0));\n    }\n    myNodePointer = new SNodePointer(node);\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getNode() {\n    return myNode;\n  }","id":100061,"modified_method":"public SNodePointer getNodePointer() {\n    return myNodePointer;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void write(Element element, MPSProject project) {\n    Element attributesXML = new Element(ATTRIBUTES);\n    attributesXML.setAttribute(CATEGORY, myCategory);\n    element.addContent(attributesXML);\n\n    if (myNode != null) {\n      Element nodeXML = new Element(NODE);\n      nodeXML.addContent(ComponentsUtil.nodeToElement(myNode));\n      element.addContent(nodeXML);\n    }\n  }","id":100062,"modified_method":"public void write(Element element, MPSProject project) {\n    Element attributesXML = new Element(ATTRIBUTES);\n    attributesXML.setAttribute(CATEGORY, myCategory);\n    element.addContent(attributesXML);\n\n    if (myNodePointer.getNode() != null) {\n      Element nodeXML = new Element(NODE);\n      nodeXML.addContent(ComponentsUtil.nodeToElement(myNodePointer.getNode()));\n      element.addContent(nodeXML);\n    }\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void read(Element element, MPSProject project) {\n    Element attributesXML = element.getChild(ATTRIBUTES);\n    myCategory = attributesXML.getAttribute(CATEGORY).getValue();\n    Element nodeXML = element.getChild(NODE);\n    if (nodeXML == null) {\n      myNode = null;\n    } else {\n      myNode = ComponentsUtil.nodeFromElement((Element) nodeXML.getChildren().get(0));\n    }\n  }","id":100063,"modified_method":"public void read(Element element, MPSProject project) {\n    Element attributesXML = element.getChild(ATTRIBUTES);\n    myCategory = attributesXML.getAttribute(CATEGORY).getValue();\n\n    Element nodeXML = element.getChild(NODE);\n    if (nodeXML == null) {\n      myNodePointer = new SNodePointer((SNode) null);\n    } else {\n      myNodePointer = new SNodePointer(ComponentsUtil.nodeFromElement((Element) nodeXML.getChildren().get(0)));\n    }\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SearchResult(SNode node, String category) {\n    myNode = node;\n    myCategory = category;\n  }","id":100064,"modified_method":"public SearchResult(SNodePointer nodePointer, String category) {\n    myNodePointer = nodePointer;\n    myCategory = category;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<SearchResult> getAliveResults() {\n    List<SearchResult> alive = new ArrayList<SearchResult>();\n    for (SearchResult result : mySearchResults) {\n      if (result.getNode() != null) {\n        alive.add(result);\n      }\n    }\n    return alive;\n  }","id":100065,"modified_method":"public List<SearchResult> getAliveResults() {\n    List<SearchResult> alive = new ArrayList<SearchResult>();\n    for (SearchResult result : mySearchResults) {\n      if (result.getNodePointer().getNode() != null) {\n        alive.add(result);\n      }\n    }\n    return alive;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void write(Element element, MPSProject project) {\n    Element resultsXML = new Element(RESULTS);\n\n    for (SearchResult result : getAliveResults()) {\n      Element resultXML = new Element(RESULT);\n      result.write(resultXML, project);\n      resultsXML.addContent(resultXML);\n    }\n    element.addContent(resultsXML);\n\n    Element searchedNodesXML = new Element(SEARCHED_NODES);\n    for (SNode node : getAliveNodes()) {\n      Element nodeXML = new Element(NODE);\n      nodeXML.addContent(ComponentsUtil.nodeToElement(node));\n      searchedNodesXML.addContent(nodeXML);\n    }\n    element.addContent(searchedNodesXML);\n  }","id":100066,"modified_method":"public void write(Element element, MPSProject project) {\n    Element resultsXML = new Element(RESULTS);\n\n    for (SearchResult result : getAliveResults()) {\n      Element resultXML = new Element(RESULT);\n      result.write(resultXML, project);\n      resultsXML.addContent(resultXML);\n    }\n    element.addContent(resultsXML);\n\n    Element searchedNodesXML = new Element(SEARCHED_NODES);\n    for (SNodePointer nodePointer : getAliveNodePointers()) {\n      Element nodeXML = new Element(NODE);\n      nodeXML.addContent(ComponentsUtil.nodeToElement(nodePointer.getNode()));\n      searchedNodesXML.addContent(nodeXML);\n    }\n    element.addContent(searchedNodesXML);\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Set<SNode> getSearchedNodes() {\n    return mySearchedNodes;\n  }","id":100067,"modified_method":"public Set<SNodePointer> getSearchedNodePointers() {\n    return mySearchedNodePointers;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Set<SNode> getAliveNodes() {\n    Set<SNode> alive = new HashSet<SNode>();\n    for (SNode node : mySearchedNodes) {\n      if (node != null) {\n        alive.add(node);\n      }\n    }\n    return alive;\n  }","id":100068,"modified_method":"public Set<SNodePointer> getAliveNodePointers() {\n    Set<SNodePointer> alive = new HashSet<SNodePointer>();\n    for (SNodePointer nodePointer : mySearchedNodePointers) {\n      if (nodePointer.getNode() != null) {\n        alive.add(nodePointer);\n      }\n    }\n    return alive;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void read(Element element, MPSProject project) {\n    mySearchResults.clear();\n    Element resultsXML = element.getChild(RESULTS);\n    for (Element resultXML : (List<Element>) resultsXML.getChildren(RESULT)) {\n      SearchResult searchResult = new SearchResult();\n      searchResult.read(resultXML, project);\n      mySearchResults.add(searchResult);\n    }\n\n    mySearchResults = getAliveResults();\n\n    mySearchedNodes.clear();\n    Element searchedNodesXML = element.getChild(SEARCHED_NODES);\n    for (Element nodeXML : (List<Element>) searchedNodesXML.getChildren(NODE)) {\n      SNode node = ComponentsUtil.nodeFromElement((Element) nodeXML.getChildren().get(0));\n      mySearchedNodes.add(node);\n    }\n\n    mySearchedNodes = getAliveNodes();\n  }","id":100069,"modified_method":"public void read(Element element, MPSProject project) {\n    mySearchResults.clear();\n    Element resultsXML = element.getChild(RESULTS);\n    for (Element resultXML : (List<Element>) resultsXML.getChildren(RESULT)) {\n      SearchResult searchResult = new SearchResult();\n      searchResult.read(resultXML, project);\n      mySearchResults.add(searchResult);\n    }\n\n    mySearchResults = getAliveResults();\n\n    mySearchedNodePointers.clear();\n    Element searchedNodesXML = element.getChild(SEARCHED_NODES);\n    for (Element nodeXML : (List<Element>) searchedNodesXML.getChildren(NODE)) {\n      SNodePointer nodePointer = new SNodePointer(ComponentsUtil.nodeFromElement((Element) nodeXML.getChildren().get(0)));\n      mySearchedNodePointers.add(nodePointer);\n    }\n\n    mySearchedNodePointers = getAliveNodePointers();\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SearchResults getResults(SearchQuery query, IOperationContext context) {\n    SearchResults results = new SearchResults();\n    for (BaseLeaf child : myChildren) {\n      SearchResults childResults = child.getResults(query, context);\n      results.getSearchResults().addAll(childResults.getSearchResults());\n      results.getSearchedNodes().addAll(childResults.getSearchedNodes());\n    }\n    return results;\n  }","id":100070,"modified_method":"public SearchResults getResults(SearchQuery query, IOperationContext context) {\n    SearchResults results = new SearchResults();\n    for (BaseLeaf child : myChildren) {\n      SearchResults childResults = child.getResults(query, context);\n      results.getSearchResults().addAll(childResults.getSearchResults());\n      results.getSearchedNodePointers().addAll(childResults.getSearchedNodePointers());\n    }\n    return results;\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getCaption() {\n    if (mySearchQuery == null || mySearchQuery.getNode() == null) return \"<null>\";\n    return mySearchQuery.getNode().toString();\n  }","id":100071,"modified_method":"public String getCaption() {\n    if (mySearchQuery == null || mySearchQuery.getNodePointer() == null) return \"<null>\";\n    return mySearchQuery.getNodePointer().toString();\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void collectModels(List<SearchResult> results, Set<SModel> models) {\n    for (SearchResult res : results) {\n      models.add(res.getNode().getModel());\n    }\n  }","id":100072,"modified_method":"private void collectModels(List<SearchResult> results, Set<SModel> models) {\n    for (SearchResult res : results) {\n      SNode node = res.getNodePointer().getNode();\n      if (node != null) {\n        models.add(node.getModel());\n      }\n    }\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void rerun() {\n    if ((mySearchQuery.getScope() == null) && (mySearchQuery.getNode() == null)) return;\n    TreeBuilder.invalidateAll((BaseNode) myResultProvider);\n    run(mySearchQuery, myContext);\n  }","id":100073,"modified_method":"public void rerun() {\n    if ((mySearchQuery.getScope() == null) && (mySearchQuery.getNodePointer() == null)) return;\n    TreeBuilder.invalidateAll((BaseNode) myResultProvider);\n    run(mySearchQuery, myContext);\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Icon getIcon() {\n    if (mySearchQuery == null) return null;\n    SNode node = mySearchQuery.getNode();\n    if (node == null) {\n      return null;\n    }\n    return IconManager.getIconFor(node);\n  }","id":100074,"modified_method":"public Icon getIcon() {\n    if (mySearchQuery == null) return null;\n    SNode node = mySearchQuery.getNodePointer().getNode();\n    if (node == null) {\n      return null;\n    }\n    return IconManager.getIconFor(node);\n  }","commit_id":"50346b2633d4f5648114529614c01bec18295802","url":"https://github.com/JetBrains/MPS"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        cancel = new javax.swing.JToggleButton();\n        ok = new javax.swing.JToggleButton();\n        jTabbedPane1 = new javax.swing.JTabbedPane();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jTextField1 = new javax.swing.JTextField();\n        jTextField2 = new javax.swing.JTextField();\n        jComboBox1 = new javax.swing.JComboBox();\n        jComboBox2 = new javax.swing.JComboBox();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jTextField3 = new javax.swing.JTextField();\n        jTextField4 = new javax.swing.JTextField();\n        jLabel5 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jPanel3 = new javax.swing.JPanel();\n        jLabel8 = new javax.swing.JLabel();\n        jRadioButton1 = new javax.swing.JRadioButton();\n        jRadioButton2 = new javax.swing.JRadioButton();\n        jRadioButton3 = new javax.swing.JRadioButton();\n        jToggleButton1 = new javax.swing.JToggleButton();\n        jToggleButton2 = new javax.swing.JToggleButton();\n        jToggleButton3 = new javax.swing.JToggleButton();\n        jPanel4 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jLabel9 = new javax.swing.JLabel();\n        jLabel10 = new javax.swing.JLabel();\n        jLabel11 = new javax.swing.JLabel();\n        jPanel5 = new javax.swing.JPanel();\n        jPanel6 = new javax.swing.JPanel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setName(\"Form\"); // NOI18N\n\n        jPanel1.setName(\"jPanel1\"); // NOI18N\n\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(GeneralConfiguration.class);\n        cancel.setText(resourceMap.getString(\"cancel.text\")); // NOI18N\n        cancel.setName(\"cancel\"); // NOI18N\n\n        ok.setText(resourceMap.getString(\"ok.text\")); // NOI18N\n        ok.setName(\"ok\"); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                .addContainerGap(475, Short.MAX_VALUE)\n                .addComponent(ok)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cancel)\n                .addContainerGap())\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(cancel)\n                    .addComponent(ok))\n                .addContainerGap(14, Short.MAX_VALUE))\n        );\n\n        jTabbedPane1.setName(\"jTabbedPane1\"); // NOI18N\n\n        jPanel2.setName(\"jPanel2\"); // NOI18N\n        jPanel2.setLayout(null);\n\n        jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n        jLabel1.setName(\"jLabel1\"); // NOI18N\n        jPanel2.add(jLabel1);\n        jLabel1.setBounds(20, 20, 140, 30);\n\n        jLabel2.setText(resourceMap.getString(\"jLabel2.text\")); // NOI18N\n        jLabel2.setName(\"jLabel2\"); // NOI18N\n        jPanel2.add(jLabel2);\n        jLabel2.setBounds(20, 60, 140, 30);\n\n        jTextField1.setText(resourceMap.getString(\"jTextField1.text\")); // NOI18N\n        jTextField1.setName(\"jTextField1\"); // NOI18N\n        jPanel2.add(jTextField1);\n        jTextField1.setBounds(160, 20, 77, 27);\n\n        jTextField2.setText(resourceMap.getString(\"jTextField2.text\")); // NOI18N\n        jTextField2.setName(\"jTextField2\"); // NOI18N\n        jPanel2.add(jTextField2);\n        jTextField2.setBounds(160, 60, 77, 27);\n\n        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n        jComboBox1.setName(\"jComboBox1\"); // NOI18N\n        jPanel2.add(jComboBox1);\n        jComboBox1.setBounds(240, 20, 78, 27);\n\n        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n        jComboBox2.setName(\"jComboBox2\"); // NOI18N\n        jPanel2.add(jComboBox2);\n        jComboBox2.setBounds(240, 60, 78, 27);\n\n        jLabel3.setText(resourceMap.getString(\"jLabel3.text\")); // NOI18N\n        jLabel3.setName(\"jLabel3\"); // NOI18N\n        jPanel2.add(jLabel3);\n        jLabel3.setBounds(330, 20, 97, 30);\n\n        jLabel4.setText(resourceMap.getString(\"jLabel4.text\")); // NOI18N\n        jLabel4.setName(\"jLabel4\"); // NOI18N\n        jPanel2.add(jLabel4);\n        jLabel4.setBounds(330, 60, 97, 30);\n\n        jTextField3.setText(resourceMap.getString(\"jTextField3.text\")); // NOI18N\n        jTextField3.setName(\"jTextField3\"); // NOI18N\n        jPanel2.add(jTextField3);\n        jTextField3.setBounds(440, 20, 60, 27);\n\n        jTextField4.setText(resourceMap.getString(\"jTextField4.text\")); // NOI18N\n        jTextField4.setName(\"jTextField4\"); // NOI18N\n        jPanel2.add(jTextField4);\n        jTextField4.setBounds(440, 60, 60, 27);\n\n        jLabel5.setText(resourceMap.getString(\"jLabel5.text\")); // NOI18N\n        jLabel5.setName(\"jLabel5\"); // NOI18N\n        jPanel2.add(jLabel5);\n        jLabel5.setBounds(510, 20, 19, 30);\n\n        jLabel6.setText(resourceMap.getString(\"jLabel6.text\")); // NOI18N\n        jLabel6.setName(\"jLabel6\"); // NOI18N\n        jPanel2.add(jLabel6);\n        jLabel6.setBounds(510, 60, 19, 30);\n\n        jLabel7.setText(resourceMap.getString(\"jLabel7.text\")); // NOI18N\n        jLabel7.setName(\"jLabel7\"); // NOI18N\n        jPanel2.add(jLabel7);\n        jLabel7.setBounds(20, 100, 520, 70);\n\n        jTabbedPane1.addTab(resourceMap.getString(\"jPanel2.TabConstraints.tabTitle\"), jPanel2); // NOI18N\n\n        jPanel3.setName(\"jPanel3\"); // NOI18N\n\n        jLabel8.setText(resourceMap.getString(\"jLabel8.text\")); // NOI18N\n        jLabel8.setName(\"jLabel8\"); // NOI18N\n\n        jRadioButton1.setText(resourceMap.getString(\"jRadioButton1.text\")); // NOI18N\n        jRadioButton1.setName(\"jRadioButton1\"); // NOI18N\n\n        jRadioButton2.setText(resourceMap.getString(\"jRadioButton2.text\")); // NOI18N\n        jRadioButton2.setName(\"jRadioButton2\"); // NOI18N\n\n        jRadioButton3.setText(resourceMap.getString(\"jRadioButton3.text\")); // NOI18N\n        jRadioButton3.setName(\"jRadioButton3\"); // NOI18N\n\n        jToggleButton1.setText(resourceMap.getString(\"jToggleButton1.text\")); // NOI18N\n        jToggleButton1.setName(\"jToggleButton1\"); // NOI18N\n\n        jToggleButton2.setText(resourceMap.getString(\"jToggleButton2.text\")); // NOI18N\n        jToggleButton2.setName(\"jToggleButton2\"); // NOI18N\n\n        jToggleButton3.setText(resourceMap.getString(\"jToggleButton3.text\")); // NOI18N\n        jToggleButton3.setName(\"jToggleButton3\"); // NOI18N\n\n        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n        jPanel3.setLayout(jPanel3Layout);\n        jPanel3Layout.setHorizontalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel3Layout.createSequentialGroup()\n                        .addGap(20, 20, 20)\n                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel8)\n                            .addGroup(jPanel3Layout.createSequentialGroup()\n                                .addComponent(jToggleButton1)\n                                .addGap(18, 18, 18)\n                                .addComponent(jToggleButton2))))\n                    .addGroup(jPanel3Layout.createSequentialGroup()\n                        .addGap(40, 40, 40)\n                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jRadioButton2)\n                            .addComponent(jRadioButton1)\n                            .addComponent(jRadioButton3))))\n                .addGap(9, 9, 9))\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()\n                .addContainerGap(339, Short.MAX_VALUE)\n                .addComponent(jToggleButton3)\n                .addContainerGap())\n        );\n        jPanel3Layout.setVerticalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel8)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jRadioButton1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jRadioButton2)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jRadioButton3)\n                .addGap(18, 18, 18)\n                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jToggleButton1)\n                    .addComponent(jToggleButton2))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)\n                .addComponent(jToggleButton3)\n                .addContainerGap())\n        );\n\n        jTabbedPane1.addTab(resourceMap.getString(\"jPanel3.TabConstraints.tabTitle\"), jPanel3); // NOI18N\n\n        jPanel4.setName(\"jPanel4\"); // NOI18N\n\n        jScrollPane1.setName(\"jScrollPane1\"); // NOI18N\n\n        jScrollPane2.setName(\"jScrollPane2\"); // NOI18N\n\n        jLabel9.setText(resourceMap.getString(\"jLabel9.text\")); // NOI18N\n        jLabel9.setName(\"jLabel9\"); // NOI18N\n\n        jLabel10.setText(resourceMap.getString(\"jLabel10.text\")); // NOI18N\n        jLabel10.setName(\"jLabel10\"); // NOI18N\n\n        jLabel11.setText(resourceMap.getString(\"jLabel11.text\")); // NOI18N\n        jLabel11.setName(\"jLabel11\"); // NOI18N\n\n        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);\n        jPanel4.setLayout(jPanel4Layout);\n        jPanel4Layout.setHorizontalGroup(\n            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel4Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)\n                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)\n                    .addComponent(jLabel10)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)\n                    .addComponent(jLabel11))\n                .addContainerGap())\n        );\n        jPanel4Layout.setVerticalGroup(\n            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel4Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel10)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel11)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n\n        jTabbedPane1.addTab(resourceMap.getString(\"jPanel4.TabConstraints.tabTitle\"), jPanel4); // NOI18N\n\n        jPanel5.setName(\"jPanel5\"); // NOI18N\n\n        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);\n        jPanel5.setLayout(jPanel5Layout);\n        jPanel5Layout.setHorizontalGroup(\n            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 562, Short.MAX_VALUE)\n        );\n        jPanel5Layout.setVerticalGroup(\n            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 388, Short.MAX_VALUE)\n        );\n\n        jTabbedPane1.addTab(resourceMap.getString(\"jPanel5.TabConstraints.tabTitle\"), jPanel5); // NOI18N\n\n        jPanel6.setName(\"jPanel6\"); // NOI18N\n\n        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);\n        jPanel6.setLayout(jPanel6Layout);\n        jPanel6Layout.setHorizontalGroup(\n            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 562, Short.MAX_VALUE)\n        );\n        jPanel6Layout.setVerticalGroup(\n            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 388, Short.MAX_VALUE)\n        );\n\n        jTabbedPane1.addTab(resourceMap.getString(\"jPanel6.TabConstraints.tabTitle\"), jPanel6); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(12, 12, 12)\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(jTabbedPane1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n\n        pack();\n    }","id":100075,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        buttonGroup1 = new javax.swing.ButtonGroup();\n        applyPanel = new javax.swing.JPanel();\n        cancel = new javax.swing.JToggleButton();\n        ok = new javax.swing.JToggleButton();\n        settingsPanel = new javax.swing.JTabbedPane();\n        speedPanel = new javax.swing.JPanel();\n        uploadSpeedLabel = new javax.swing.JLabel();\n        downloadSpeedLabel = new javax.swing.JLabel();\n        uploadspeed = new javax.swing.JTextField();\n        downloadspeed = new javax.swing.JTextField();\n        uploadkbps = new javax.swing.JComboBox();\n        downloadkbps = new javax.swing.JComboBox();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        uploadgb = new javax.swing.JTextField();\n        downloadgb = new javax.swing.JTextField();\n        jLabel5 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        updatesPanel = new javax.swing.JPanel();\n        jLabel8 = new javax.swing.JLabel();\n        jRadioButton1 = new javax.swing.JRadioButton();\n        jRadioButton2 = new javax.swing.JRadioButton();\n        jRadioButton3 = new javax.swing.JRadioButton();\n        jToggleButton1 = new javax.swing.JToggleButton();\n        jToggleButton2 = new javax.swing.JToggleButton();\n        jToggleButton3 = new javax.swing.JToggleButton();\n        tunnelPanel = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jLabel9 = new javax.swing.JLabel();\n        jLabel10 = new javax.swing.JLabel();\n        jLabel11 = new javax.swing.JLabel();\n        networkPanel = new javax.swing.JPanel();\n        advancedPanel = new javax.swing.JPanel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(GeneralConfiguration.class);\n        setTitle(resourceMap.getString(\"Form.title\")); // NOI18N\n        setName(\"Form\"); // NOI18N\n\n        applyPanel.setName(\"applyPanel\"); // NOI18N\n\n        cancel.setText(resourceMap.getString(\"cancel.text\")); // NOI18N\n        cancel.setName(\"cancel\"); // NOI18N\n\n        ok.setText(resourceMap.getString(\"ok.text\")); // NOI18N\n        ok.setName(\"ok\"); // NOI18N\n\n        javax.swing.GroupLayout applyPanelLayout = new javax.swing.GroupLayout(applyPanel);\n        applyPanel.setLayout(applyPanelLayout);\n        applyPanelLayout.setHorizontalGroup(\n            applyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, applyPanelLayout.createSequentialGroup()\n                .addContainerGap(475, Short.MAX_VALUE)\n                .addComponent(ok)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cancel)\n                .addContainerGap())\n        );\n        applyPanelLayout.setVerticalGroup(\n            applyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(applyPanelLayout.createSequentialGroup()\n                .addGroup(applyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(cancel)\n                    .addComponent(ok))\n                .addContainerGap(14, Short.MAX_VALUE))\n        );\n\n        settingsPanel.setName(\"settingsPanel\"); // NOI18N\n\n        speedPanel.setName(\"speedPanel\"); // NOI18N\n        speedPanel.setLayout(null);\n\n        uploadSpeedLabel.setText(resourceMap.getString(\"uploadSpeedLabel.text\")); // NOI18N\n        uploadSpeedLabel.setName(\"uploadSpeedLabel\"); // NOI18N\n        speedPanel.add(uploadSpeedLabel);\n        uploadSpeedLabel.setBounds(20, 20, 140, 30);\n\n        downloadSpeedLabel.setText(resourceMap.getString(\"downloadSpeedLabel.text\")); // NOI18N\n        downloadSpeedLabel.setName(\"downloadSpeedLabel\"); // NOI18N\n        speedPanel.add(downloadSpeedLabel);\n        downloadSpeedLabel.setBounds(20, 60, 140, 30);\n\n        uploadspeed.setText(resourceMap.getString(\"uploadspeed.text\")); // NOI18N\n        uploadspeed.setName(\"uploadspeed\"); // NOI18N\n        uploadspeed.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                speedKeyTyped(evt);\n            }\n        });\n        speedPanel.add(uploadspeed);\n        uploadspeed.setBounds(160, 20, 77, 27);\n\n        downloadspeed.setText(resourceMap.getString(\"downloadspeed.text\")); // NOI18N\n        downloadspeed.setName(\"downloadspeed\"); // NOI18N\n        downloadspeed.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                speedKeyTyped(evt);\n            }\n        });\n        speedPanel.add(downloadspeed);\n        downloadspeed.setBounds(160, 60, 77, 27);\n\n        uploadkbps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        uploadkbps.setName(\"uploadkbps\"); // NOI18N\n        uploadkbps.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                uploadkbpsActionPerformed(evt);\n            }\n        });\n        speedPanel.add(uploadkbps);\n        uploadkbps.setBounds(240, 20, 68, 27);\n\n        downloadkbps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        downloadkbps.setName(\"downloadkbps\"); // NOI18N\n        downloadkbps.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                downloadkbpsActionPerformed(evt);\n            }\n        });\n        speedPanel.add(downloadkbps);\n        downloadkbps.setBounds(240, 60, 68, 27);\n\n        jLabel3.setText(resourceMap.getString(\"jLabel3.text\")); // NOI18N\n        jLabel3.setName(\"jLabel3\"); // NOI18N\n        speedPanel.add(jLabel3);\n        jLabel3.setBounds(330, 20, 97, 30);\n\n        jLabel4.setText(resourceMap.getString(\"jLabel4.text\")); // NOI18N\n        jLabel4.setName(\"jLabel4\"); // NOI18N\n        speedPanel.add(jLabel4);\n        jLabel4.setBounds(330, 60, 97, 30);\n\n        uploadgb.setText(resourceMap.getString(\"uploadgb.text\")); // NOI18N\n        uploadgb.setName(\"uploadgb\"); // NOI18N\n        uploadgb.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                uploadgbKeyTyped(evt);\n            }\n        });\n        speedPanel.add(uploadgb);\n        uploadgb.setBounds(440, 20, 60, 27);\n\n        downloadgb.setText(resourceMap.getString(\"downloadgb.text\")); // NOI18N\n        downloadgb.setName(\"downloadgb\"); // NOI18N\n        downloadgb.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                downloadgbKeyTyped(evt);\n            }\n        });\n        speedPanel.add(downloadgb);\n        downloadgb.setBounds(440, 60, 60, 27);\n\n        jLabel5.setText(resourceMap.getString(\"jLabel5.text\")); // NOI18N\n        jLabel5.setName(\"jLabel5\"); // NOI18N\n        speedPanel.add(jLabel5);\n        jLabel5.setBounds(510, 20, 19, 30);\n\n        jLabel6.setText(resourceMap.getString(\"jLabel6.text\")); // NOI18N\n        jLabel6.setName(\"jLabel6\"); // NOI18N\n        speedPanel.add(jLabel6);\n        jLabel6.setBounds(510, 60, 19, 30);\n\n        jLabel7.setText(resourceMap.getString(\"jLabel7.text\")); // NOI18N\n        jLabel7.setName(\"jLabel7\"); // NOI18N\n        speedPanel.add(jLabel7);\n        jLabel7.setBounds(20, 100, 520, 70);\n\n        settingsPanel.addTab(resourceMap.getString(\"speedPanel.TabConstraints.tabTitle\"), speedPanel); // NOI18N\n\n        updatesPanel.setName(\"updatesPanel\"); // NOI18N\n\n        jLabel8.setText(resourceMap.getString(\"jLabel8.text\")); // NOI18N\n        jLabel8.setName(\"jLabel8\"); // NOI18N\n\n        buttonGroup1.add(jRadioButton1);\n        jRadioButton1.setText(resourceMap.getString(\"jRadioButton1.text\")); // NOI18N\n        jRadioButton1.setName(\"jRadioButton1\"); // NOI18N\n\n        buttonGroup1.add(jRadioButton2);\n        jRadioButton2.setText(resourceMap.getString(\"jRadioButton2.text\")); // NOI18N\n        jRadioButton2.setName(\"jRadioButton2\"); // NOI18N\n\n        buttonGroup1.add(jRadioButton3);\n        jRadioButton3.setText(resourceMap.getString(\"jRadioButton3.text\")); // NOI18N\n        jRadioButton3.setName(\"jRadioButton3\"); // NOI18N\n\n        jToggleButton1.setText(resourceMap.getString(\"jToggleButton1.text\")); // NOI18N\n        jToggleButton1.setName(\"jToggleButton1\"); // NOI18N\n\n        jToggleButton2.setText(resourceMap.getString(\"jToggleButton2.text\")); // NOI18N\n        jToggleButton2.setName(\"jToggleButton2\"); // NOI18N\n\n        jToggleButton3.setText(resourceMap.getString(\"jToggleButton3.text\")); // NOI18N\n        jToggleButton3.setName(\"jToggleButton3\"); // NOI18N\n\n        javax.swing.GroupLayout updatesPanelLayout = new javax.swing.GroupLayout(updatesPanel);\n        updatesPanel.setLayout(updatesPanelLayout);\n        updatesPanelLayout.setHorizontalGroup(\n            updatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(updatesPanelLayout.createSequentialGroup()\n                .addGroup(updatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(updatesPanelLayout.createSequentialGroup()\n                        .addGap(20, 20, 20)\n                        .addGroup(updatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel8)\n                            .addGroup(updatesPanelLayout.createSequentialGroup()\n                                .addComponent(jToggleButton1)\n                                .addGap(18, 18, 18)\n                                .addComponent(jToggleButton2))))\n                    .addGroup(updatesPanelLayout.createSequentialGroup()\n                        .addGap(40, 40, 40)\n                        .addGroup(updatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jRadioButton2)\n                            .addComponent(jRadioButton1)\n                            .addComponent(jRadioButton3))))\n                .addGap(9, 9, 9))\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatesPanelLayout.createSequentialGroup()\n                .addContainerGap(339, Short.MAX_VALUE)\n                .addComponent(jToggleButton3)\n                .addContainerGap())\n        );\n        updatesPanelLayout.setVerticalGroup(\n            updatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(updatesPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel8)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jRadioButton1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jRadioButton2)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jRadioButton3)\n                .addGap(18, 18, 18)\n                .addGroup(updatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jToggleButton1)\n                    .addComponent(jToggleButton2))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)\n                .addComponent(jToggleButton3)\n                .addContainerGap())\n        );\n\n        settingsPanel.addTab(resourceMap.getString(\"updatesPanel.TabConstraints.tabTitle\"), updatesPanel); // NOI18N\n\n        tunnelPanel.setName(\"tunnelPanel\"); // NOI18N\n\n        jScrollPane1.setName(\"jScrollPane1\"); // NOI18N\n\n        jScrollPane2.setName(\"jScrollPane2\"); // NOI18N\n\n        jLabel9.setText(resourceMap.getString(\"jLabel9.text\")); // NOI18N\n        jLabel9.setName(\"jLabel9\"); // NOI18N\n\n        jLabel10.setText(resourceMap.getString(\"jLabel10.text\")); // NOI18N\n        jLabel10.setName(\"jLabel10\"); // NOI18N\n\n        jLabel11.setText(resourceMap.getString(\"jLabel11.text\")); // NOI18N\n        jLabel11.setName(\"jLabel11\"); // NOI18N\n\n        javax.swing.GroupLayout tunnelPanelLayout = new javax.swing.GroupLayout(tunnelPanel);\n        tunnelPanel.setLayout(tunnelPanelLayout);\n        tunnelPanelLayout.setHorizontalGroup(\n            tunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tunnelPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)\n                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)\n                    .addComponent(jLabel10)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)\n                    .addComponent(jLabel11))\n                .addContainerGap())\n        );\n        tunnelPanelLayout.setVerticalGroup(\n            tunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tunnelPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel10)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel11)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n\n        settingsPanel.addTab(resourceMap.getString(\"tunnelPanel.TabConstraints.tabTitle\"), tunnelPanel); // NOI18N\n\n        networkPanel.setName(\"networkPanel\"); // NOI18N\n\n        javax.swing.GroupLayout networkPanelLayout = new javax.swing.GroupLayout(networkPanel);\n        networkPanel.setLayout(networkPanelLayout);\n        networkPanelLayout.setHorizontalGroup(\n            networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 562, Short.MAX_VALUE)\n        );\n        networkPanelLayout.setVerticalGroup(\n            networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 388, Short.MAX_VALUE)\n        );\n\n        settingsPanel.addTab(resourceMap.getString(\"networkPanel.TabConstraints.tabTitle\"), networkPanel); // NOI18N\n\n        advancedPanel.setName(\"advancedPanel\"); // NOI18N\n\n        javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);\n        advancedPanel.setLayout(advancedPanelLayout);\n        advancedPanelLayout.setHorizontalGroup(\n            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 562, Short.MAX_VALUE)\n        );\n        advancedPanelLayout.setVerticalGroup(\n            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 388, Short.MAX_VALUE)\n        );\n\n        settingsPanel.addTab(resourceMap.getString(\"advancedPanel.TabConstraints.tabTitle\"), advancedPanel); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(applyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(12, 12, 12)\n                .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(settingsPanel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(applyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n\n        pack();\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/** Creates new form GeneralConfiguration */\n    public GeneralConfiguration() {\n        initComponents();\n        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        this.setVisible(true);\n    }","id":100076,"modified_method":"/** Creates new form GeneralConfiguration */\n    public GeneralConfiguration() {\n        initComponents();\n        extraInitComponents();\n        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        this.setVisible(true);\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private final void showJPopupMenu(MouseEvent e) {\n        if(e.isPopupTrigger() && menu != null) {\n            if (window == null) {\n\n                if(IS_WINDOWS) {\n                    window = new JDialog((Frame)null);\n                    ((JDialog)window).setUndecorated(true);\n                }else{\n                    window = new JWindow((Frame)null);\n                }\n                window.setAlwaysOnTop(true);\n                Dimension size = menu.getPreferredSize();\n\n                Point centerPoint = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();\n                if(e.getY() > centerPoint.getY())\n                    window.setLocation(e.getX(), e.getY() - size.height);\n                else\n                    window.setLocation(e.getX(), e.getY());\n\n                window.setVisible(true);\n                \n                menu.show(((RootPaneContainer)window).getContentPane(), 0, 0);\n\n                // popup works only for focused windows\n                window.toFront();\n\n            }\n        }\n    }","id":100077,"modified_method":"private final void showJPopupMenu(MouseEvent e, MouseEvent previous) {\n        if((e.isPopupTrigger() || previous.isPopupTrigger()) && (time.getTime() - previousTime.getTime() < 1000) && menu != null) {\n            if (window == null) {\n\n                if(IS_WINDOWS) {\n                    window = new JDialog((Frame)null);\n                    ((JDialog)window).setUndecorated(true);\n                }else{\n                    window = new JWindow((Frame)null);\n                }\n                window.setAlwaysOnTop(true);\n                Dimension size = menu.getPreferredSize();\n\n                Point centerPoint = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();\n                if(e.getY() > centerPoint.getY())\n                    window.setLocation(e.getX(), e.getY() - size.height);\n                else\n                    window.setLocation(e.getX(), e.getY());\n\n                window.setVisible(true);\n                \n                menu.show(((RootPaneContainer)window).getContentPane(), 0, 0);\n\n                // popup works only for focused windows\n                window.toFront();\n\n            }\n        }\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private final void init() {\n\n\n        popupListener = new PopupMenuListener() {\n\n            @Override\n            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n//                System.out.println(\"popupMenuWillBecomeVisible\");\n            }\n\n            @Override\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n//                System.out.println(\"popupMenuWillBecomeInvisible\");\n                if(window != null) {\n                    window.dispose();\n                    window = null;\n                }\n            }\n\n            @Override\n            public void popupMenuCanceled(PopupMenuEvent e) {\n//                System.out.println(\"popupMenuCanceled\");\n                if(window != null) {\n                    window.dispose();\n                    window = null;\n                }\n            }\n        };\n\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n//                System.out.println(e.getPoint());\n                showJPopupMenu(e);\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent e) {\n//                System.out.println(e.getPoint());\n                showJPopupMenu(e);\n            }\n        });\n\n    }","id":100078,"modified_method":"private final void init() {\n\n\n        popupListener = new PopupMenuListener() {\n\n            @Override\n            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n                //System.out.println(\"popupMenuWillBecomeVisible\");\n            }\n\n            @Override\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n                //System.out.println(\"popupMenuWillBecomeInvisible\");\n                if(window != null) {\n                    window.dispose();\n                    window = null;\n                }\n            }\n\n            @Override\n            public void popupMenuCanceled(PopupMenuEvent e) {\n//                System.out.println(\"popupMenuCanceled\");\n                if(window != null) {\n                    window.dispose();\n                    window = null;\n                }\n            }\n        };\n\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                //System.out.println(\"Pressed \" + e.getPoint());\n                showJPopupMenu(e, previous);\n                previous = e;\n                previousTime = time;\n                time = new Date();\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent e) {\n                //System.out.println(\"Released \" + e.getPoint());\n                showJPopupMenu(e, previous);\n                previous = e;\n                previousTime = time;\n                time = new Date();\n            }\n        });\n\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        textScroll = new javax.swing.JScrollPane();\n        logText = new javax.swing.JTextArea();\n        explanationText = new javax.swing.JLabel();\n        refreshButton = new javax.swing.JButton();\n        clearButton = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setName(\"Form\"); // NOI18N\n\n        textScroll.setName(\"textScroll\"); // NOI18N\n\n        logText.setColumns(20);\n        logText.setRows(5);\n        logText.setName(\"logText\"); // NOI18N\n        textScroll.setViewportView(logText);\n\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(LogViewer.class);\n        explanationText.setText(resourceMap.getString(\"explanationText.text\")); // NOI18N\n        explanationText.setName(\"explanationText\"); // NOI18N\n\n        refreshButton.setText(resourceMap.getString(\"refreshButton.text\")); // NOI18N\n        refreshButton.setName(\"refreshButton\"); // NOI18N\n        refreshButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                refreshButtonActionPerformed(evt);\n            }\n        });\n\n        clearButton.setText(resourceMap.getString(\"clearButton.text\")); // NOI18N\n        clearButton.setName(\"clearButton\"); // NOI18N\n        clearButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                clearButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(12, 12, 12)\n                .addComponent(explanationText, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n            .addComponent(textScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(refreshButton)\n                .addGap(18, 18, 18)\n                .addComponent(clearButton)\n                .addContainerGap(587, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(explanationText, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(refreshButton)\n                    .addComponent(clearButton))\n                .addGap(14, 14, 14)\n                .addComponent(textScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))\n        );\n\n        pack();\n    }","id":100079,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        textScroll = new javax.swing.JScrollPane();\n        logText = new javax.swing.JTextArea();\n        explanationText = new javax.swing.JLabel();\n        refreshButton = new javax.swing.JButton();\n        clearButton = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(LogViewer.class);\n        setTitle(resourceMap.getString(\"Form.title\")); // NOI18N\n        setName(\"Form\"); // NOI18N\n\n        textScroll.setName(\"textScroll\"); // NOI18N\n\n        logText.setColumns(20);\n        logText.setRows(5);\n        logText.setName(\"logText\"); // NOI18N\n        textScroll.setViewportView(logText);\n\n        explanationText.setText(resourceMap.getString(\"explanationText.text\")); // NOI18N\n        explanationText.setName(\"explanationText\"); // NOI18N\n\n        refreshButton.setText(resourceMap.getString(\"refreshButton.text\")); // NOI18N\n        refreshButton.setName(\"refreshButton\"); // NOI18N\n        refreshButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                refreshButtonActionPerformed(evt);\n            }\n        });\n\n        clearButton.setText(resourceMap.getString(\"clearButton.text\")); // NOI18N\n        clearButton.setName(\"clearButton\"); // NOI18N\n        clearButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                clearButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(12, 12, 12)\n                .addComponent(explanationText, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n            .addComponent(textScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(refreshButton)\n                .addGap(18, 18, 18)\n                .addComponent(clearButton)\n                .addContainerGap(587, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(explanationText, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(refreshButton)\n                    .addComponent(clearButton))\n                .addGap(14, 14, 14)\n                .addComponent(textScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))\n        );\n\n        pack();\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        finishButton = new javax.swing.JButton();\n        previousButton = new javax.swing.JButton();\n        settingsInfo = new javax.swing.JLabel();\n        uploadLabel = new javax.swing.JLabel();\n        downloadLabel = new javax.swing.JLabel();\n        uploadBurstLabel = new javax.swing.JLabel();\n        downloadBurstLabel = new javax.swing.JLabel();\n        uploadUsageLabel = new javax.swing.JLabel();\n        downloadUsageLabel = new javax.swing.JLabel();\n        uploadField = new javax.swing.JTextField();\n        uploadBurstField = new javax.swing.JTextField();\n        downloadField = new javax.swing.JTextField();\n        downloadBurstField = new javax.swing.JTextField();\n        kbpsBurstDownload = new javax.swing.JComboBox();\n        kbpsUpload = new javax.swing.JComboBox();\n        kbpsBurstUpload = new javax.swing.JComboBox();\n        kbpsDownload = new javax.swing.JComboBox();\n        uploadGB = new javax.swing.JLabel();\n        uploadMonth = new javax.swing.JTextField();\n        downloadMonth = new javax.swing.JTextField();\n        downloadGB = new javax.swing.JLabel();\n        explanation = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(SpeedSelector3.class);\n        setTitle(resourceMap.getString(\"Form.title\")); // NOI18N\n        setMinimumSize(new java.awt.Dimension(670, 330));\n        setName(\"Form\"); // NOI18N\n        setResizable(false);\n        getContentPane().setLayout(null);\n\n        finishButton.setText(resourceMap.getString(\"finishButton.text\")); // NOI18N\n        finishButton.setName(\"finishButton\"); // NOI18N\n        finishButton.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                finishButtonMouseClicked(evt);\n            }\n        });\n        getContentPane().add(finishButton);\n        finishButton.setBounds(440, 250, 90, 29);\n\n        previousButton.setText(resourceMap.getString(\"previousButton.text\")); // NOI18N\n        previousButton.setName(\"previousButton\"); // NOI18N\n        previousButton.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                previousButtonMouseClicked(evt);\n            }\n        });\n        getContentPane().add(previousButton);\n        previousButton.setBounds(336, 250, 90, 29);\n\n        settingsInfo.setText(resourceMap.getString(\"settingsInfo.text\")); // NOI18N\n        settingsInfo.setName(\"settingsInfo\"); // NOI18N\n        getContentPane().add(settingsInfo);\n        settingsInfo.setBounds(20, 30, 532, 17);\n\n        uploadLabel.setText(resourceMap.getString(\"uploadLabel.text\")); // NOI18N\n        uploadLabel.setName(\"uploadLabel\"); // NOI18N\n        getContentPane().add(uploadLabel);\n        uploadLabel.setBounds(20, 70, 140, 30);\n\n        downloadLabel.setText(resourceMap.getString(\"downloadLabel.text\")); // NOI18N\n        downloadLabel.setName(\"downloadLabel\"); // NOI18N\n        getContentPane().add(downloadLabel);\n        downloadLabel.setBounds(340, 70, 160, 30);\n\n        uploadBurstLabel.setText(resourceMap.getString(\"uploadBurstLabel.text\")); // NOI18N\n        uploadBurstLabel.setName(\"uploadBurstLabel\"); // NOI18N\n        getContentPane().add(uploadBurstLabel);\n        uploadBurstLabel.setBounds(20, 110, 140, 30);\n\n        downloadBurstLabel.setText(resourceMap.getString(\"downloadBurstLabel.text\")); // NOI18N\n        downloadBurstLabel.setName(\"downloadBurstLabel\"); // NOI18N\n        getContentPane().add(downloadBurstLabel);\n        downloadBurstLabel.setBounds(340, 110, 160, 30);\n\n        uploadUsageLabel.setText(resourceMap.getString(\"uploadUsageLabel.text\")); // NOI18N\n        uploadUsageLabel.setName(\"uploadUsageLabel\"); // NOI18N\n        getContentPane().add(uploadUsageLabel);\n        uploadUsageLabel.setBounds(20, 150, 140, 30);\n\n        downloadUsageLabel.setText(resourceMap.getString(\"downloadUsageLabel.text\")); // NOI18N\n        downloadUsageLabel.setName(\"downloadUsageLabel\"); // NOI18N\n        getContentPane().add(downloadUsageLabel);\n        downloadUsageLabel.setBounds(340, 150, 160, 30);\n\n        uploadField.setText(resourceMap.getString(\"uploadField.text\")); // NOI18N\n        uploadField.setMinimumSize(new java.awt.Dimension(77, 27));\n        uploadField.setName(\"uploadField\"); // NOI18N\n        uploadField.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                speedFieldKeyReleased(evt);\n            }\n        });\n        getContentPane().add(uploadField);\n        uploadField.setBounds(160, 70, 77, 27);\n\n        uploadBurstField.setText(resourceMap.getString(\"uploadBurstField.text\")); // NOI18N\n        uploadBurstField.setMinimumSize(new java.awt.Dimension(77, 27));\n        uploadBurstField.setName(\"uploadBurstField\"); // NOI18N\n        getContentPane().add(uploadBurstField);\n        uploadBurstField.setBounds(160, 110, 77, 27);\n\n        downloadField.setText(resourceMap.getString(\"downloadField.text\")); // NOI18N\n        downloadField.setMinimumSize(new java.awt.Dimension(77, 27));\n        downloadField.setName(\"downloadField\"); // NOI18N\n        downloadField.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                speedFieldKeyReleased(evt);\n            }\n        });\n        getContentPane().add(downloadField);\n        downloadField.setBounds(500, 70, 77, 27);\n\n        downloadBurstField.setText(resourceMap.getString(\"downloadBurstField.text\")); // NOI18N\n        downloadBurstField.setMinimumSize(new java.awt.Dimension(77, 27));\n        downloadBurstField.setName(\"downloadBurstField\"); // NOI18N\n        getContentPane().add(downloadBurstField);\n        downloadBurstField.setBounds(500, 110, 77, 27);\n\n        kbpsBurstDownload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsBurstDownload.setName(\"kbpsBurstDownload\"); // NOI18N\n        kbpsBurstDownload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsBurstDownloadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsBurstDownload);\n        kbpsBurstDownload.setBounds(580, 110, 68, 27);\n\n        kbpsUpload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsUpload.setName(\"kbpsUpload\"); // NOI18N\n        kbpsUpload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsUploadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsUpload);\n        kbpsUpload.setBounds(240, 70, 68, 27);\n\n        kbpsBurstUpload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsBurstUpload.setName(\"kbpsBurstUpload\"); // NOI18N\n        kbpsBurstUpload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsBurstUploadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsBurstUpload);\n        kbpsBurstUpload.setBounds(240, 110, 68, 27);\n\n        kbpsDownload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsDownload.setName(\"kbpsDownload\"); // NOI18N\n        kbpsDownload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsDownloadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsDownload);\n        kbpsDownload.setBounds(580, 70, 68, 27);\n\n        uploadGB.setText(resourceMap.getString(\"uploadUsageLabel.text\")); // NOI18N\n        uploadGB.setName(\"uploadUsageLabel\"); // NOI18N\n        getContentPane().add(uploadGB);\n        uploadGB.setBounds(240, 150, 45, 30);\n\n        uploadMonth.setText(resourceMap.getString(\"uploadMonth.text\")); // NOI18N\n        uploadMonth.setName(\"uploadMonth\"); // NOI18N\n        uploadMonth.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                monthKeyReleased(evt);\n            }\n        });\n        getContentPane().add(uploadMonth);\n        uploadMonth.setBounds(160, 150, 77, 27);\n\n        downloadMonth.setText(resourceMap.getString(\"downloadMonth.text\")); // NOI18N\n        downloadMonth.setName(\"downloadMonth\"); // NOI18N\n        downloadMonth.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                monthKeyReleased(evt);\n            }\n        });\n        getContentPane().add(downloadMonth);\n        downloadMonth.setBounds(500, 150, 77, 27);\n\n        downloadGB.setText(resourceMap.getString(\"downloadUsageLabel.text\")); // NOI18N\n        downloadGB.setName(\"downloadUsageLabel\"); // NOI18N\n        getContentPane().add(downloadGB);\n        downloadGB.setBounds(580, 150, 19, 30);\n\n        explanation.setText(resourceMap.getString(\"explanation.text\")); // NOI18N\n        explanation.setName(\"explanation\"); // NOI18N\n        getContentPane().add(explanation);\n        explanation.setBounds(20, 180, 600, 70);\n\n        pack();\n    }","id":100080,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        finishButton = new javax.swing.JButton();\n        previousButton = new javax.swing.JButton();\n        settingsInfo = new javax.swing.JLabel();\n        uploadLabel = new javax.swing.JLabel();\n        downloadLabel = new javax.swing.JLabel();\n        uploadBurstLabel = new javax.swing.JLabel();\n        downloadBurstLabel = new javax.swing.JLabel();\n        uploadUsageLabel = new javax.swing.JLabel();\n        downloadUsageLabel = new javax.swing.JLabel();\n        uploadField = new javax.swing.JTextField();\n        uploadBurstField = new javax.swing.JTextField();\n        downloadField = new javax.swing.JTextField();\n        downloadBurstField = new javax.swing.JTextField();\n        kbpsBurstDownload = new javax.swing.JComboBox();\n        kbpsUpload = new javax.swing.JComboBox();\n        kbpsBurstUpload = new javax.swing.JComboBox();\n        kbpsDownload = new javax.swing.JComboBox();\n        uploadGB = new javax.swing.JLabel();\n        uploadMonth = new javax.swing.JTextField();\n        downloadMonth = new javax.swing.JTextField();\n        downloadGB = new javax.swing.JLabel();\n        explanation = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(SpeedSelector3.class);\n        setTitle(resourceMap.getString(\"Form.title\")); // NOI18N\n        setMinimumSize(new java.awt.Dimension(670, 330));\n        setName(\"Form\"); // NOI18N\n        setResizable(false);\n        getContentPane().setLayout(null);\n\n        finishButton.setText(resourceMap.getString(\"finishButton.text\")); // NOI18N\n        finishButton.setName(\"finishButton\"); // NOI18N\n        finishButton.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                finishButtonMouseClicked(evt);\n            }\n        });\n        getContentPane().add(finishButton);\n        finishButton.setBounds(440, 250, 90, 29);\n\n        previousButton.setText(resourceMap.getString(\"previousButton.text\")); // NOI18N\n        previousButton.setName(\"previousButton\"); // NOI18N\n        previousButton.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                previousButtonMouseClicked(evt);\n            }\n        });\n        getContentPane().add(previousButton);\n        previousButton.setBounds(336, 250, 90, 29);\n\n        settingsInfo.setText(resourceMap.getString(\"settingsInfo.text\")); // NOI18N\n        settingsInfo.setName(\"settingsInfo\"); // NOI18N\n        getContentPane().add(settingsInfo);\n        settingsInfo.setBounds(20, 30, 532, 17);\n\n        uploadLabel.setText(resourceMap.getString(\"uploadLabel.text\")); // NOI18N\n        uploadLabel.setName(\"uploadLabel\"); // NOI18N\n        getContentPane().add(uploadLabel);\n        uploadLabel.setBounds(20, 70, 140, 30);\n\n        downloadLabel.setText(resourceMap.getString(\"downloadLabel.text\")); // NOI18N\n        downloadLabel.setName(\"downloadLabel\"); // NOI18N\n        getContentPane().add(downloadLabel);\n        downloadLabel.setBounds(340, 70, 160, 30);\n\n        uploadBurstLabel.setText(resourceMap.getString(\"uploadBurstLabel.text\")); // NOI18N\n        uploadBurstLabel.setName(\"uploadBurstLabel\"); // NOI18N\n        getContentPane().add(uploadBurstLabel);\n        uploadBurstLabel.setBounds(20, 110, 140, 30);\n\n        downloadBurstLabel.setText(resourceMap.getString(\"downloadBurstLabel.text\")); // NOI18N\n        downloadBurstLabel.setName(\"downloadBurstLabel\"); // NOI18N\n        getContentPane().add(downloadBurstLabel);\n        downloadBurstLabel.setBounds(340, 110, 160, 30);\n\n        uploadUsageLabel.setText(resourceMap.getString(\"uploadUsageLabel.text\")); // NOI18N\n        uploadUsageLabel.setName(\"uploadUsageLabel\"); // NOI18N\n        getContentPane().add(uploadUsageLabel);\n        uploadUsageLabel.setBounds(20, 150, 140, 30);\n\n        downloadUsageLabel.setText(resourceMap.getString(\"downloadUsageLabel.text\")); // NOI18N\n        downloadUsageLabel.setName(\"downloadUsageLabel\"); // NOI18N\n        getContentPane().add(downloadUsageLabel);\n        downloadUsageLabel.setBounds(340, 150, 160, 30);\n\n        uploadField.setText(resourceMap.getString(\"uploadField.text\")); // NOI18N\n        uploadField.setMinimumSize(new java.awt.Dimension(77, 27));\n        uploadField.setName(\"uploadField\"); // NOI18N\n        uploadField.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                speedFieldKeyReleased(evt);\n            }\n        });\n        getContentPane().add(uploadField);\n        uploadField.setBounds(160, 70, 77, 27);\n\n        uploadBurstField.setText(resourceMap.getString(\"uploadBurstField.text\")); // NOI18N\n        uploadBurstField.setMinimumSize(new java.awt.Dimension(77, 27));\n        uploadBurstField.setName(\"uploadBurstField\"); // NOI18N\n        getContentPane().add(uploadBurstField);\n        uploadBurstField.setBounds(160, 110, 77, 27);\n\n        downloadField.setText(resourceMap.getString(\"downloadField.text\")); // NOI18N\n        downloadField.setMinimumSize(new java.awt.Dimension(77, 27));\n        downloadField.setName(\"downloadField\"); // NOI18N\n        downloadField.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                speedFieldKeyReleased(evt);\n            }\n        });\n        getContentPane().add(downloadField);\n        downloadField.setBounds(500, 70, 77, 27);\n\n        downloadBurstField.setText(resourceMap.getString(\"downloadBurstField.text\")); // NOI18N\n        downloadBurstField.setMinimumSize(new java.awt.Dimension(77, 27));\n        downloadBurstField.setName(\"downloadBurstField\"); // NOI18N\n        getContentPane().add(downloadBurstField);\n        downloadBurstField.setBounds(500, 110, 77, 27);\n\n        kbpsBurstDownload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsBurstDownload.setName(\"kbpsBurstDownload\"); // NOI18N\n        kbpsBurstDownload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsBurstDownloadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsBurstDownload);\n        kbpsBurstDownload.setBounds(580, 110, 68, 27);\n\n        kbpsUpload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsUpload.setName(\"kbpsUpload\"); // NOI18N\n        kbpsUpload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsUploadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsUpload);\n        kbpsUpload.setBounds(240, 70, 68, 27);\n\n        kbpsBurstUpload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsBurstUpload.setName(\"kbpsBurstUpload\"); // NOI18N\n        kbpsBurstUpload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsBurstUploadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsBurstUpload);\n        kbpsBurstUpload.setBounds(240, 110, 68, 27);\n\n        kbpsDownload.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"kbps\", \"kBps\" }));\n        kbpsDownload.setName(\"kbpsDownload\"); // NOI18N\n        kbpsDownload.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                kbpsDownloadActionPerformed(evt);\n            }\n        });\n        getContentPane().add(kbpsDownload);\n        kbpsDownload.setBounds(580, 70, 68, 27);\n\n        uploadGB.setText(resourceMap.getString(\"uploadUsageLabel.text\")); // NOI18N\n        uploadGB.setName(\"uploadUsageLabel\"); // NOI18N\n        getContentPane().add(uploadGB);\n        uploadGB.setBounds(240, 150, 45, 30);\n\n        uploadMonth.setText(resourceMap.getString(\"uploadMonth.text\")); // NOI18N\n        uploadMonth.setName(\"uploadMonth\"); // NOI18N\n        uploadMonth.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                monthKeyReleased(evt);\n            }\n        });\n        getContentPane().add(uploadMonth);\n        uploadMonth.setBounds(160, 150, 77, 27);\n\n        downloadMonth.setText(resourceMap.getString(\"downloadMonth.text\")); // NOI18N\n        downloadMonth.setName(\"downloadMonth\"); // NOI18N\n        downloadMonth.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                monthKeyReleased(evt);\n            }\n        });\n        getContentPane().add(downloadMonth);\n        downloadMonth.setBounds(500, 150, 77, 27);\n\n        downloadGB.setText(resourceMap.getString(\"downloadUsageLabel.text\")); // NOI18N\n        downloadGB.setName(\"downloadUsageLabel\"); // NOI18N\n        getContentPane().add(downloadGB);\n        downloadGB.setBounds(580, 150, 40, 30);\n\n        explanation.setText(resourceMap.getString(\"explanation.text\")); // NOI18N\n        explanation.setName(\"explanation\"); // NOI18N\n        getContentPane().add(explanation);\n        explanation.setBounds(20, 180, 600, 70);\n\n        pack();\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        okButton = new javax.swing.JButton();\n        I2Plabel = new javax.swing.JLabel();\n        GUILabel = new javax.swing.JLabel();\n        I2PVersion = new javax.swing.JLabel();\n        GUIVersion = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        setName(\"Form\"); // NOI18N\n\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(Version.class);\n        okButton.setText(resourceMap.getString(\"okButton.text\")); // NOI18N\n        okButton.setName(\"okButton\"); // NOI18N\n        okButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                okButtonActionPerformed(evt);\n            }\n        });\n\n        I2Plabel.setText(resourceMap.getString(\"I2Plabel.text\")); // NOI18N\n        I2Plabel.setName(\"I2Plabel\"); // NOI18N\n\n        GUILabel.setText(resourceMap.getString(\"GUILabel.text\")); // NOI18N\n        GUILabel.setName(\"GUILabel\"); // NOI18N\n\n        I2PVersion.setText(resourceMap.getString(\"I2PVersion.text\")); // NOI18N\n        I2PVersion.setName(\"I2PVersion\"); // NOI18N\n\n        GUIVersion.setText(resourceMap.getString(\"GUIVersion.text\")); // NOI18N\n        GUIVersion.setName(\"GUIVersion\"); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(I2Plabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(GUILabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(I2PVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)\n                    .addComponent(GUIVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))\n                .addContainerGap())\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(294, Short.MAX_VALUE)\n                .addComponent(okButton)\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(I2Plabel)\n                    .addComponent(I2PVersion))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(GUILabel)\n                    .addComponent(GUIVersion))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(okButton)\n                .addContainerGap())\n        );\n\n        pack();\n    }","id":100081,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        okButton = new javax.swing.JButton();\n        I2Plabel = new javax.swing.JLabel();\n        GUILabel = new javax.swing.JLabel();\n        I2PVersion = new javax.swing.JLabel();\n        GUIVersion = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopgui.Main.class).getContext().getResourceMap(Version.class);\n        setTitle(resourceMap.getString(\"Form.title\")); // NOI18N\n        setName(\"Form\"); // NOI18N\n\n        okButton.setText(resourceMap.getString(\"okButton.text\")); // NOI18N\n        okButton.setName(\"okButton\"); // NOI18N\n        okButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                okButtonActionPerformed(evt);\n            }\n        });\n\n        I2Plabel.setText(resourceMap.getString(\"I2Plabel.text\")); // NOI18N\n        I2Plabel.setName(\"I2Plabel\"); // NOI18N\n\n        GUILabel.setText(resourceMap.getString(\"GUILabel.text\")); // NOI18N\n        GUILabel.setName(\"GUILabel\"); // NOI18N\n\n        I2PVersion.setText(resourceMap.getString(\"I2PVersion.text\")); // NOI18N\n        I2PVersion.setName(\"I2PVersion\"); // NOI18N\n\n        GUIVersion.setText(resourceMap.getString(\"GUIVersion.text\")); // NOI18N\n        GUIVersion.setName(\"GUIVersion\"); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                            .addComponent(I2Plabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addComponent(GUILabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                        .addGap(18, 18, 18)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(I2PVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)\n                            .addComponent(GUIVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)))\n                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(I2Plabel)\n                    .addComponent(I2PVersion))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(GUILabel)\n                    .addComponent(GUIVersion))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(okButton)\n                .addContainerGap())\n        );\n\n        pack();\n    }","commit_id":"a516d6474e21bdcd3e515c350ea8a6b858891505","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        titleLabel = new javax.swing.JLabel();\n        subtitleLabel = new javax.swing.JLabel();\n        configPanel = new javax.swing.JPanel();\n\n        titleLabel.setFont(new java.awt.Font(\"Tahoma\", 1, 14)); // NOI18N\n        titleLabel.setText(org.openide.util.NbBundle.getMessage(AddImageVisualPanel3.class, \"AddImageVisualPanel3.titleLabel.text\")); // NOI18N\n\n        subtitleLabel.setText(org.openide.util.NbBundle.getMessage(AddImageVisualPanel3.class, \"AddImageVisualPanel3.subtitleLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);\n        configPanel.setLayout(configPanelLayout);\n        configPanelLayout.setHorizontalGroup(\n            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 623, Short.MAX_VALUE)\n        );\n        configPanelLayout.setVerticalGroup(\n            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 300, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(titleLabel)\n                .addContainerGap())\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(subtitleLabel)\n                .addContainerGap(186, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(titleLabel)\n                .addGap(5, 5, 5)\n                .addComponent(subtitleLabel)\n                .addGap(18, 18, 18)\n                .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":100082,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        titleLabel = new javax.swing.JLabel();\n        subtitleLabel = new javax.swing.JLabel();\n        configPanel = new javax.swing.JPanel();\n\n        setPreferredSize(new java.awt.Dimension(569, 300));\n\n        titleLabel.setFont(new java.awt.Font(\"Tahoma\", 1, 14)); // NOI18N\n        titleLabel.setText(org.openide.util.NbBundle.getMessage(AddImageVisualPanel3.class, \"AddImageVisualPanel3.titleLabel.text\")); // NOI18N\n\n        subtitleLabel.setText(org.openide.util.NbBundle.getMessage(AddImageVisualPanel3.class, \"AddImageVisualPanel3.subtitleLabel.text\")); // NOI18N\n\n        configPanel.setPreferredSize(new java.awt.Dimension(569, 255));\n\n        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);\n        configPanel.setLayout(configPanelLayout);\n        configPanelLayout.setHorizontalGroup(\n            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 596, Short.MAX_VALUE)\n        );\n        configPanelLayout.setVerticalGroup(\n            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 266, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(titleLabel)\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(subtitleLabel)))\n                .addContainerGap(159, Short.MAX_VALUE))\n            .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(titleLabel)\n                .addGap(5, 5, 5)\n                .addComponent(subtitleLabel)\n                .addGap(18, 18, 18)\n                .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))\n        );\n    }","commit_id":"eaa8431b22256203bebd7be66081c398b5b83fdb","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n   * Stop the quartz scheduler service.\n   */\n  protected final void stopScheduler() {\n    try {\n      timeScheduler.stop();\n      streamSizeScheduler.stop();\n      LOG.info(\"Stopped scheduler\");\n    } catch (SchedulerException e) {\n      LOG.error(\"Error stopping scheduler {}\", e.getCause(), e);\n      throw Throwables.propagate(e);\n    }\n  }","id":100083,"modified_method":"/**\n   * Stop the quartz scheduler service.\n   */\n  protected final void stopScheduler() {\n    streamSizeScheduler.stop();\n    LOG.info(\"Stopped stram size scheduler\");\n\n    try {\n      timeScheduler.stop();\n      LOG.info(\"Stopped time scheduler\");\n    } catch (SchedulerException e) {\n      LOG.error(\"Error stopping time scheduler {}\", e.getCause(), e);\n      throw Throwables.propagate(e);\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public ScheduleState scheduleState (Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    ScheduleType type = getScheduleType(program, programType, scheduleName);\n    if (type == null) {\n      throw new UnsupportedOperationException(\"Schedule could not be found in application specification\");\n    }\n    switch (type) {\n      case STREAM:\n        return streamSizeScheduler.scheduleState(program, programType, scheduleName);\n      case TIME:\n        return timeScheduler.scheduleState(program, programType, scheduleName);\n    }\n    throw new IllegalStateException(\"Unhandled type of schedule: \" + type);\n  }","id":100084,"modified_method":"@Override\n  public ScheduleState scheduleState (Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    try {\n      Scheduler scheduler = getSchedulerForSchedule(program, programType, scheduleName);\n      return scheduler.scheduleState(program, programType, scheduleName);\n    } catch (NotFoundException e) {\n      return ScheduleState.NOT_FOUND;\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void suspendSchedule(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    ScheduleType type = getScheduleType(program, programType, scheduleName);\n    if (type == null) {\n      return;\n    }\n    switch (type) {\n      case TIME:\n        timeScheduler.suspendSchedule(program, programType, scheduleName);\n        break;\n      case STREAM:\n        streamSizeScheduler.suspendSchedule(program, programType, scheduleName);\n        break;\n    }\n  }","id":100085,"modified_method":"@Override\n  public void suspendSchedule(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    try {\n      Scheduler scheduler = getSchedulerForSchedule(program, programType, scheduleName);\n      scheduler.suspendSchedule(program, programType, scheduleName);\n    } catch (NotFoundException e) {\n      LOG.trace(\"Could not suspend schedule\", e);\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void deleteSchedule(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    ScheduleType type = getScheduleType(program, programType, scheduleName);\n    if (type == null) {\n      return;\n    }\n    switch (type) {\n      case TIME:\n        timeScheduler.deleteSchedule(program, programType, scheduleName);\n        break;\n      case STREAM:\n        streamSizeScheduler.deleteSchedule(program, programType, scheduleName);\n        break;\n    }\n  }","id":100086,"modified_method":"@Override\n  public void deleteSchedule(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    try {\n      Scheduler scheduler = getSchedulerForSchedule(program, programType, scheduleName);\n      scheduler.deleteSchedule(program, programType, scheduleName);\n    } catch (NotFoundException e) {\n      LOG.trace(\"Could not delete schedule\", e);\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void resumeSchedule(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    ScheduleType type = getScheduleType(program, programType, scheduleName);\n    if (type == null) {\n      return;\n    }\n    switch (type) {\n      case TIME:\n        timeScheduler.resumeSchedule(program, programType, scheduleName);\n        break;\n      case STREAM:\n        streamSizeScheduler.resumeSchedule(program, programType, scheduleName);\n        break;\n    }\n  }","id":100087,"modified_method":"@Override\n  public void resumeSchedule(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    try {\n      Scheduler scheduler = getSchedulerForSchedule(program, programType, scheduleName);\n      scheduler.resumeSchedule(program, programType, scheduleName);\n    } catch (NotFoundException e) {\n      LOG.trace(\"Could not resume schedule\", e);\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void schedule(Id.Program programId, SchedulableProgramType programType, Schedule schedule) {\n    if (schedule instanceof TimeSchedule) {\n      timeScheduler.schedule(programId, programType, schedule);\n    } else if (schedule instanceof StreamSizeSchedule) {\n      streamSizeScheduler.schedule(programId, programType, schedule);\n    } else {\n      throw new IllegalStateException(\"Unhandled type of schedule: \" + schedule.getClass());\n    }\n  }","id":100088,"modified_method":"@Override\n  public void schedule(Id.Program programId, SchedulableProgramType programType, Schedule schedule) {\n    if (schedule instanceof TimeSchedule) {\n      timeScheduler.schedule(programId, programType, schedule);\n    } else if (schedule instanceof StreamSizeSchedule) {\n      streamSizeScheduler.schedule(programId, programType, schedule);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled type of schedule: \" + schedule.getClass());\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Start the quartz scheduler service.\n   */\n  protected final void startScheduler() {\n    try {\n      timeScheduler.start();\n      streamSizeScheduler.start();\n      LOG.info(\"Started scheduler\");\n    } catch (SchedulerException e) {\n      LOG.error(\"Error starting scheduler {}\", e.getCause(), e);\n      throw Throwables.propagate(e);\n    }\n  }","id":100089,"modified_method":"/**\n   * Start the quartz scheduler service.\n   */\n  protected final void startScheduler() {\n    try {\n      timeScheduler.start();\n      LOG.info(\"Started time scheduler\");\n    } catch (SchedulerException e) {\n      LOG.error(\"Error starting time scheduler {}\", e.getCause(), e);\n      throw Throwables.propagate(e);\n    }\n\n    streamSizeScheduler.start();\n    LOG.info(\"Started stream size scheduler\");\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void schedule(Id.Program programId, SchedulableProgramType programType, Iterable<Schedule> schedules) {\n    Set<Schedule> timeSchedules = Sets.newHashSet();\n    Set<Schedule> streamSizeSchedules = Sets.newHashSet();\n    for (Schedule schedule : schedules) {\n      if (schedule instanceof TimeSchedule) {\n        timeSchedules.add(schedule);\n      } else if (schedule instanceof StreamSizeSchedule) {\n        streamSizeSchedules.add(schedule);\n      } else {\n        throw new IllegalStateException(\"Unhandled type of schedule: \" + schedule.getClass());\n      }\n    }\n    if (!timeSchedules.isEmpty()) {\n      timeScheduler.schedule(programId, programType, timeSchedules);\n    }\n    if (!streamSizeSchedules.isEmpty()) {\n      streamSizeScheduler.schedule(programId, programType, streamSizeSchedules);\n    }\n  }","id":100090,"modified_method":"@Override\n  public void schedule(Id.Program programId, SchedulableProgramType programType, Iterable<Schedule> schedules) {\n    Set<Schedule> timeSchedules = Sets.newHashSet();\n    Set<Schedule> streamSizeSchedules = Sets.newHashSet();\n    for (Schedule schedule : schedules) {\n      if (schedule instanceof TimeSchedule) {\n        timeSchedules.add(schedule);\n      } else if (schedule instanceof StreamSizeSchedule) {\n        streamSizeSchedules.add(schedule);\n      } else {\n        throw new IllegalArgumentException(\"Unhandled type of schedule: \" + schedule.getClass());\n      }\n    }\n    if (!timeSchedules.isEmpty()) {\n      timeScheduler.schedule(programId, programType, timeSchedules);\n    }\n    if (!streamSizeSchedules.isEmpty()) {\n      streamSizeScheduler.schedule(programId, programType, streamSizeSchedules);\n    }\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"private ScheduleType getScheduleType(Id.Program program, SchedulableProgramType programType, String scheduleName) {\n    ApplicationSpecification appSpec = getStore().getApplication(program.getApplication());\n    if (appSpec == null) {\n      return null;\n    }\n\n    Map<String, ScheduleSpecification> schedules = appSpec.getSchedules();\n    if (schedules == null || !schedules.containsKey(scheduleName)) {\n      return null;\n    }\n\n    ScheduleSpecification scheduleSpec = schedules.get(scheduleName);\n    Schedule schedule = scheduleSpec.getSchedule();\n    if (schedule instanceof TimeSchedule) {\n      return ScheduleType.TIME;\n    } else if (schedule instanceof StreamSizeSchedule) {\n      return ScheduleType.STREAM;\n    }\n    throw new IllegalStateException(\"Unhandled type of schedule: \" + schedule.getClass());\n  }","id":100091,"modified_method":"private Scheduler getSchedulerForSchedule(Id.Program program, SchedulableProgramType programType,\n                                               String scheduleName) throws NotFoundException {\n    ApplicationSpecification appSpec = getStore().getApplication(program.getApplication());\n    if (appSpec == null) {\n      throw new NotFoundException(\"application\", program.getApplicationId());\n    }\n\n    Map<String, ScheduleSpecification> schedules = appSpec.getSchedules();\n    if (schedules == null || !schedules.containsKey(scheduleName)) {\n      throw new NotFoundException(\"schedule\", scheduleName);\n    }\n\n    ScheduleSpecification scheduleSpec = schedules.get(scheduleName);\n    Schedule schedule = scheduleSpec.getSchedule();\n    if (schedule instanceof TimeSchedule) {\n      return timeScheduler;\n    } else if (schedule instanceof StreamSizeSchedule) {\n      return streamSizeScheduler;\n    }\n    throw new IllegalArgumentException(\"Unhandled type of schedule: \" + schedule.getClass());\n  }","commit_id":"fa1d12fd6dbbad2eb7ff014c96e109d38c662a7a","url":"https://github.com/caskdata/cdap"},{"original_method":"public static SNode getSourceNodeQuery(SNode node) {\n    if (node == null) {\n      return null;\n    }\n    String conceptFqName = node.getConcept().getQualifiedName();\n    if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.CopySrcNodeMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, \"jetbrains.mps.lang.generator.structure.CopySrcNodeMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, 0x10ff3aea96eL, \"sourceNodeQuery\"));\n    } else if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.MapSrcNodeMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, \"jetbrains.mps.lang.generator.structure.MapSrcNodeMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, 0x11003064fa9L, \"sourceNodeQuery\"));\n    } else if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.SwitchMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, \"jetbrains.mps.lang.generator.structure.SwitchMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, 0x11008e5fed8L, \"sourceNodeQuery\"));\n    } else if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.IncludeMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, \"jetbrains.mps.lang.generator.structure.IncludeMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, 0x11621abebb5L, \"sourceNodeQuery\"));\n    } else if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.TemplateCallMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, \"jetbrains.mps.lang.generator.structure.TemplateCallMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, 0x14f7f8a311b93f35L, \"sourceNodeQuery\"));\n    } else if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.TraceMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, \"jetbrains.mps.lang.generator.structure.TraceMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, 0x2b456582595e73d1L, \"sourceNodeQuery\"));\n    } else if (conceptFqName.equals(\"jetbrains.mps.lang.generator.structure.TemplateSwitchMacro\")) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, \"jetbrains.mps.lang.generator.structure.TemplateSwitchMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, 0xda3dc6e5174759eL, \"sourceNodeQuery\"));\n    }\n    return null;\n  }","id":100092,"modified_method":"public static SNode getSourceNodeQuery(SNode node) {\n    if (node == null) {\n      return null;\n    }\n    SAbstractConcept concept = node.getConcept();\n    if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, \"jetbrains.mps.lang.generator.structure.CopySrcNodeMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, \"jetbrains.mps.lang.generator.structure.CopySrcNodeMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, 0x10ff3aea96eL, \"sourceNodeQuery\"));\n    } else if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, \"jetbrains.mps.lang.generator.structure.MapSrcNodeMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, \"jetbrains.mps.lang.generator.structure.MapSrcNodeMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, 0x11003064fa9L, \"sourceNodeQuery\"));\n    } else if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, \"jetbrains.mps.lang.generator.structure.SwitchMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, \"jetbrains.mps.lang.generator.structure.SwitchMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, 0x11008e5fed8L, \"sourceNodeQuery\"));\n    } else if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, \"jetbrains.mps.lang.generator.structure.IncludeMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, \"jetbrains.mps.lang.generator.structure.IncludeMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, 0x11621abebb5L, \"sourceNodeQuery\"));\n    } else if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, \"jetbrains.mps.lang.generator.structure.TemplateCallMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, \"jetbrains.mps.lang.generator.structure.TemplateCallMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, 0x14f7f8a311b93f35L, \"sourceNodeQuery\"));\n    } else if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, \"jetbrains.mps.lang.generator.structure.TraceMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, \"jetbrains.mps.lang.generator.structure.TraceMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, 0x2b456582595e73d1L, \"sourceNodeQuery\"));\n    } else if (concept.equals(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, \"jetbrains.mps.lang.generator.structure.TemplateSwitchMacro\"))) {\n      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, \"jetbrains.mps.lang.generator.structure.TemplateSwitchMacro\")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, 0xda3dc6e5174759eL, \"sourceNodeQuery\"));\n    }\n    return null;\n  }","commit_id":"fc5b048709454c004cba1a53b0791ec2f5fdbe0a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  //todo remove body after 3.3, needed for compatibility only\n  public SAbstractConcept getApplicableConcept2() {\n    return MetaAdapterFactoryByName.getConcept(getApplicableConceptFQName2());\n  }","id":100093,"modified_method":"@Override\n  //todo remove body after 3.3, needed for compatibility only\n  public SAbstractConcept getApplicableConcept2() {\n    return MetaAdapterFactoryByName.getTypedConcept_DoNotUse(getApplicableConceptFQName2());\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  //todo remove body after 3.3, needed for compatibility only\n  public SAbstractConcept getApplicableConcept1() {\n    return MetaAdapterFactoryByName.getConcept(getApplicableConceptFQName1());\n  }","id":100094,"modified_method":"@Override\n  //todo remove body after 3.3, needed for compatibility only\n  public SAbstractConcept getApplicableConcept1() {\n    return MetaAdapterFactoryByName.getTypedConcept_DoNotUse(getApplicableConceptFQName1());\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void unloadConcept(ConceptDescriptor concept) {\n    List<SConceptId> pids = concept.getParentsIds();\n    List<String> pnames = concept.getParentsNames();\n    assert pids.size() == pnames.size() : pids.size() + \"/\" + pnames.size();\n\n    Iterator<SConceptId> pi = pids.iterator();\n    Iterator<String> ni = pnames.iterator();\n\n    while (pi.hasNext()) {\n      SAbstractConcept parentConcept = MetaAdapterFactory.getConcept(pi.next(), ni.next());\n      Set<SAbstractConcept> descendants = new HashSet<SAbstractConcept>(getDirectDescendants(parentConcept));\n      descendants.remove(MetaAdapterFactory.getAbstractConcept(concept));\n      myDescendantsCache.put(parentConcept, Collections.unmodifiableSet(descendants));\n    }\n  }","id":100095,"modified_method":"private void unloadConcept(ConceptDescriptor concept) {\n    List<SConceptId> pids = concept.getParentsIds();\n    List<String> pnames = concept.getParentsNames();\n    assert pids.size() == pnames.size() : pids.size() + \"/\" + pnames.size();\n\n    for(SConceptId id:pids) {\n      SAbstractConcept parentConcept = MetaAdapterFactory.getAbstractConcept(ConceptRegistry.getInstance().getConceptDescriptor(id));\n      Set<SAbstractConcept> descendants = new HashSet<SAbstractConcept>(getDirectDescendants(parentConcept));\n      descendants.remove(MetaAdapterFactory.getAbstractConcept(concept));\n      myDescendantsCache.put(parentConcept, Collections.unmodifiableSet(descendants));\n    }\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Deprecated\n  @ToRemove(version = 3.3)\n  public Set<String> getDirectDescendants(String conceptFqName) {\n    myModuleRepository.getModelAccess().checkReadAccess();\n    Set<SAbstractConcept> fromCache = myDescendantsCache.get(MetaAdapterFactoryByName.getConcept(conceptFqName));\n    if (fromCache==null) return Collections.emptySet();\n\n    Set<String> result = new HashSet<String>();\n    for (SAbstractConcept cd : fromCache) {\n      result.add(cd.getQualifiedName());\n    }\n    return result;\n  }","id":100096,"modified_method":"@Deprecated\n  @ToRemove(version = 3.3)\n  public Set<String> getDirectDescendants(String conceptFqName) {\n    myModuleRepository.getModelAccess().checkReadAccess();\n    Set<SAbstractConcept> fromCache = myDescendantsCache.get(MetaAdapterFactoryByName.getTypedConcept_DoNotUse(conceptFqName));\n    if (fromCache==null) return Collections.emptySet();\n\n    Set<String> result = new HashSet<String>();\n    for (SAbstractConcept cd : fromCache) {\n      result.add(cd.getQualifiedName());\n    }\n    return result;\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void loadConcept(ConceptDescriptor concept) {\n    List<SConceptId> pids = concept.getParentsIds();\n    List<String> pnames = concept.getParentsNames();\n    assert pids.size() == pnames.size() : pids.size() + \"/\" + pnames.size();\n\n    Iterator<SConceptId> pi = pids.iterator();\n    Iterator<String> ni = pnames.iterator();\n\n    while (pi.hasNext()) {\n      SAbstractConcept parentConcept = MetaAdapterFactory.getConcept(pi.next(), ni.next());\n      Set<SAbstractConcept> descendants = new HashSet<SAbstractConcept>(getDirectDescendants(parentConcept));\n      descendants.add(MetaAdapterFactory.getAbstractConcept(concept));\n      myDescendantsCache.put(parentConcept, Collections.unmodifiableSet(descendants));\n    }\n  }","id":100097,"modified_method":"private void loadConcept(ConceptDescriptor concept) {\n    List<SConceptId> pids = concept.getParentsIds();\n    List<String> pnames = concept.getParentsNames();\n    assert pids.size() == pnames.size() : pids.size() + \"/\" + pnames.size();\n\n    for(SConceptId id:pids) {\n      SAbstractConcept parentConcept = MetaAdapterFactory.getAbstractConcept(ConceptRegistry.getInstance().getConceptDescriptor(id));\n      Set<SAbstractConcept> descendants = new HashSet<SAbstractConcept>(getDirectDescendants(parentConcept));\n      descendants.add(MetaAdapterFactory.getAbstractConcept(concept));\n      myDescendantsCache.put(parentConcept, Collections.unmodifiableSet(descendants));\n    }\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SAbstractConcept getApplicableSupertypeConcept(){\n    return MetaAdapterFactoryByName.getConcept(getApplicableSupertypeConceptFQName());\n  }","id":100098,"modified_method":"public SAbstractConcept getApplicableSupertypeConcept(){\n    return MetaAdapterFactoryByName.getTypedConcept_DoNotUse(getApplicableSupertypeConceptFQName());\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SAbstractConcept getApplicableSubtypeConcept(){\n     return MetaAdapterFactoryByName.getConcept(getApplicableSubtypeConceptFQName());\n  }","id":100099,"modified_method":"public SAbstractConcept getApplicableSubtypeConcept(){\n     return MetaAdapterFactoryByName.getTypedConcept_DoNotUse(getApplicableSubtypeConceptFQName());\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * \n   * @deprecated use concept/../ variant, remove after 3.3\n   */\n  @Deprecated\n  public ModelsScope(Iterable<SModel> models, boolean rootsOnly, String targetConcept) {\n    myModels = SetSequence.fromSetWithValues(new HashSet<SModel>(), models);\n    myRootsOnly = rootsOnly;\n    ConceptDescriptor cd = ConceptRegistryUtil.getConceptDescriptor(targetConcept);\n    if (cd == null) {\n      myTargetConcept = MetaAdapterFactoryByName.getConcept(targetConcept);\n    } else {\n      myTargetConcept = (cd.isInterfaceConcept() ? MetaAdapterFactoryByName.getInterfaceConcept(targetConcept) : MetaAdapterFactoryByName.getConcept(targetConcept));\n    }\n  }","id":100100,"modified_method":"/**\n   * \n   * @deprecated use concept/../ variant, remove after 3.3\n   */\n  @Deprecated\n  public ModelsScope(Iterable<SModel> models, boolean rootsOnly, String targetConcept) {\n    myModels = SetSequence.fromSetWithValues(new HashSet<SModel>(), models);\n    myRootsOnly = rootsOnly;\n    myTargetConcept=MetaAdapterFactoryByName.getTypedConcept_DoNotUse(targetConcept);\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public String getApplicableConceptFQName() {\n    return myOperationConceptFQName;\n  }","id":100101,"modified_method":"@Override\n  @Deprecated\n  @ToRemove(version = 3.3)\n  public String getApplicableConceptFQName() {\n    if (myOperationConcept != null) return myOperationConcept.getQualifiedName();\n    return myOperationConceptFQName;\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void reportConflict(IRuleConflictWarningProducer warningProducer) {\n    Logger.wrap(LogManager.getLogger(myOperationConceptFQName)).warning(\"conflicting rules for overloaded operation type detected \" + String.valueOf(myLeftOperandType) + \" and \" + String.valueOf(myRightOperandType));\n  }","id":100102,"modified_method":"@Override\n  public void reportConflict(IRuleConflictWarningProducer warningProducer) {\n    Logger.wrap(LogManager.getLogger(getApplicableConcept().getQualifiedName())).warning(\n        \"conflicting rules for overloaded operation type detected \" + String.valueOf(myLeftOperandType) + \" and \" + String.valueOf(myRightOperandType));\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public String getApplicableConceptFQName() {\n    return myOperationConceptFQName;\n  }","id":100103,"modified_method":"@Override\n  @Deprecated\n  @ToRemove(version = 3.3)\n  public String getApplicableConceptFQName() {\n    if (myOperationConcept != null) return myOperationConcept.getQualifiedName();\n    return myOperationConceptFQName;\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void reportConflict(IRuleConflictWarningProducer warningProducer) {\n    Logger.wrap(LogManager.getLogger(myOperationConceptFQName)).warning(\"conflicting rules for overloaded operation type detected \" + String.valueOf(myOperandType));\n  }","id":100104,"modified_method":"@Override\n  public void reportConflict(IRuleConflictWarningProducer warningProducer) {\n    Logger.wrap(LogManager.getLogger(getApplicableConcept().getQualifiedName())).warning(\"conflicting rules for overloaded operation type detected \" + String.valueOf(myOperandType));\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Iterable<T> getAllApplicableTo(String conceptFQName, LanguageScope scope) {\n    if (!myRules.containsKey(conceptFQName)) return Collections.emptyList();\n\n    List<T> result = new ArrayList<T>(4);\n    Set<T> rules = myRules.get(conceptFQName);\n    synchronized (rules) {\n      for (T rule: rules) {\n        if (scope.containsNamespace(getNamespace(rule))) {\n          result.add(rule);\n        }\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }","id":100105,"modified_method":"private Iterable<T> getAllApplicableTo(SAbstractConcept concept, LanguageScope scope) {\n    if (!myRules.containsKey(concept)) return Collections.emptyList();\n\n    List<T> result = new ArrayList<T>(4);\n    Set<T> rules = myRules.get(concept);\n    synchronized (rules) {\n      for (T rule : rules) {\n        if (scope.containsNamespace(getNamespace(rule))) {\n          result.add(rule);\n        }\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addRule_internal(T rule) {\n    String concept = rule.getApplicableConceptFQName();\n    Set<T> existingRules = myRules.get(concept);\n    while (existingRules == null) {\n      myRules.putIfAbsent(concept, Collections.synchronizedSet(new THashSet<T>(2)));\n      existingRules = myRules.get(concept);\n    }\n    existingRules.add(rule);\n  }","id":100106,"modified_method":"private void addRule_internal(T rule) {\n    SAbstractConcept concept = rule.getApplicableConcept();\n    Set<T> existingRules = myRules.get(concept);\n    while (existingRules == null) {\n      myRules.putIfAbsent(concept, Collections.synchronizedSet(new THashSet<T>(2)));\n      existingRules = myRules.get(concept);\n    }\n    existingRules.add(rule);\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"abstract protected Iterable<K> allForConcept(String conceptFQName, LanguageScope scope);","id":100107,"modified_method":"abstract protected Iterable<K> allForConcept(SAbstractConcept concept, LanguageScope scope);","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Set<K> lookupRules(SNode term) {\n    final LanguageScope langScope = LanguageScope.getCurrent();\n\n    final String conceptFQName = term.getConcept().getQualifiedName();\n    final Object compoundKey = new Pair<Object, String>(langScope, conceptFQName);\n\n    Set<K> cachedRules = myCachedRules.get(compoundKey);\n    if (cachedRules != null) {\n      return cachedRules;\n    }\n    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<K>>() {\n      @Override\n      public Set<K> compute() {\n        Set<K> computedRules = computeRules(conceptFQName, langScope);\n        myCachedRules.put(compoundKey, computedRules);\n\n        return computedRules;\n      }\n    });\n  }","id":100108,"modified_method":"public Set<K> lookupRules(SNode term) {\n    final LanguageScope langScope = LanguageScope.getCurrent();\n\n    final SAbstractConcept concept = term.getConcept();\n    final Object compoundKey = new Pair<Object, SAbstractConcept>(langScope, concept);\n\n    Set<K> cachedRules = myCachedRules.get(compoundKey);\n    if (cachedRules != null) {\n      return cachedRules;\n    }\n    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<K>>() {\n      @Override\n      public Set<K> compute() {\n        Set<K> computedRules = computeRules(concept, langScope);\n        myCachedRules.put(compoundKey, computedRules);\n\n        return computedRules;\n      }\n    });\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Set<K> computeRules(String conceptFQName, LanguageScope langScope) {\n    THashSet<K> result = new THashSet<K>();\n\n    LinkedList<String> queue = new LinkedList<String>();\n    queue.add(conceptFQName);\n\n    while (!queue.isEmpty()) {\n      String nextConceptFQName = queue.remove();\n      boolean overriding = false;\n      for (K applicableRule : allForConcept(nextConceptFQName, langScope)) {\n        overriding |= isOverriding(applicableRule);\n        result.add(applicableRule);\n      }\n      if (!overriding) {\n        queue.addAll(getParents(nextConceptFQName));\n      }\n    }\n\n    return Collections.unmodifiableSet(result);\n  }","id":100109,"modified_method":"private Set<K> computeRules(SAbstractConcept concept, LanguageScope langScope) {\n    THashSet<K> result = new THashSet<K>();\n\n    LinkedList<SAbstractConcept> queue = new LinkedList<SAbstractConcept>();\n    queue.add(concept);\n\n    while (!queue.isEmpty()) {\n      SAbstractConcept nextConceptFQName = queue.remove();\n      boolean overriding = false;\n      for (K applicableRule : allForConcept(nextConceptFQName, langScope)) {\n        overriding |= isOverriding(applicableRule);\n        result.add(applicableRule);\n      }\n      if (!overriding) {\n        queue.addAll(getParents(nextConceptFQName));\n      }\n    }\n\n    return Collections.unmodifiableSet(result);\n  }","commit_id":"199ca4e59019df4572190f32b03ca709274ced7c","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Property or reference attributes can wrap some particular cells of the main node editor into attribute node editor cells.\n   * Such \"wrapping\" cells when should be inserted into the main node editor instead of original property/reference cells.\n   * <p/>\n   * It can happen that  main node editor contains only one property/reference cell. In such case if corresponding property/reference\n   * attribute is attached to the main node then the \"main\" cell will be wrapped into a property/reference attribute node editor cell(s)\n   * and returned from EditorCellFactory.createEditorCell() method execution.\n   * <p/>\n   * To properly handle such situations we should \"unwrap\" returned cell to get direct access to the big cell representing original main node.\n   * This method was created to handle such situations.\n   *\n   * @param cell EditorCell created by EditorCellFactory.createEditorCell() method\n   * @param node main node used as a parameter while creating this cell\n   * @return \"big\" cell representing main node. It will be either cell or it's child cell.\n   */\n  private EditorCell getUnwrappedNodeBigCell(EditorCell cell, SNode node) {\n    SNode cellNode = cell.getSNode();\n    if (cellNode == node) {\n      return cell;\n    }\n    String cellNodeConcept = cellNode.getConcept().getQualifiedName();\n    if (!SModelUtil.isAssignableConcept(cellNodeConcept, \"jetbrains.mps.lang.core.structure.PropertyAttribute\") &&\n        !SModelUtil.isAssignableConcept(cellNodeConcept, \"jetbrains.mps.lang.core.structure.LinkAttribute\")) {\n      // the only known possibility to get \"wrapped\" cell is when the cell is wrapped into a PropertyAttribute or LinkAttribute.\n      return cell;\n    }\n\n    Queue<EditorCell> cells = new LinkedList<EditorCell>();\n    cells.add(cell);\n    while (!cells.isEmpty()) {\n      EditorCell nextCell = cells.remove();\n      if (nextCell.getSNode() == node && !(nextCell instanceof EditorCell_STHint)) {\n        if (!nextCell.isBig()) {\n          // trying to avoid calling cell.getSNode().toString() for each node...\n          assert false :\n              \"\\\"Not big\\\" cell found. Original cell: \" + cell.getCellId() + \", node: \" + cell.getSNode() + \", concept: \" +\n                  cell.getSNode().getConcept().getQualifiedName() + \". Found cell: \" + nextCell.getCellId() + \", node: \" +\n                  node + \", concept: \" + node.getConcept().getQualifiedName();\n        }\n        return nextCell;\n      }\n      if (nextCell instanceof EditorCell_Collection) {\n        for (EditorCell childCell : (EditorCell_Collection) nextCell) {\n          cells.add(childCell);\n        }\n      }\n    }\n    LOG.error(\"Editor cell created for the node: \" + node + \" does not contain any cell associated with this node. Following node was used instead: \" +\n        cell.getSNode(), cell.getSNode());\n    return null;\n  }","id":100110,"modified_method":"/**\n   * Property or reference attributes can wrap some particular cells of the main node editor into attribute node editor cells.\n   * Such \"wrapping\" cells when should be inserted into the main node editor instead of original property/reference cells.\n   * <p/>\n   * It can happen that  main node editor contains only one property/reference cell. In such case if corresponding property/reference\n   * attribute is attached to the main node then the \"main\" cell will be wrapped into a property/reference attribute node editor cell(s)\n   * and returned from EditorCellFactory.createEditorCell() method execution.\n   * <p/>\n   * To properly handle such situations we should \"unwrap\" returned cell to get direct access to the big cell representing original main node.\n   * This method was created to handle such situations.\n   *\n   * @param cell EditorCell created by EditorCellFactory.createEditorCell() method\n   * @param node main node used as a parameter while creating this cell\n   * @return \"big\" cell representing main node. It will be either cell or it's child cell.\n   */\n  private EditorCell getUnwrappedNodeBigCell(EditorCell cell, SNode node) {\n    SNode cellNode = cell.getSNode();\n    if (cellNode == node) {\n      return cell;\n    }\n    SConcept nodeConcept = cellNode.getConcept();\n    if (!nodeConcept.isSubConceptOf(SNodeUtil.concept_PropertyAttribute) &&\n        !nodeConcept.isSubConceptOf(SNodeUtil.concept_LinkAttribute)) {\n      // the only known possibility to get \"wrapped\" cell is when the cell is wrapped into a PropertyAttribute or LinkAttribute.\n      return cell;\n    }\n\n    Queue<EditorCell> cells = new LinkedList<EditorCell>();\n    cells.add(cell);\n    while (!cells.isEmpty()) {\n      EditorCell nextCell = cells.remove();\n      if (nextCell.getSNode() == node && !(nextCell instanceof EditorCell_STHint)) {\n        if (!nextCell.isBig()) {\n          // trying to avoid calling cell.getSNode().toString() for each node...\n          assert false :\n              \"\\\"Not big\\\" cell found. Original cell: \" + cell.getCellId() + \", node: \" + cell.getSNode() + \", concept: \" +\n                  cell.getSNode().getConcept().getQualifiedName() + \". Found cell: \" + nextCell.getCellId() + \", node: \" +\n                  node + \", concept: \" + node.getConcept().getQualifiedName();\n        }\n        return nextCell;\n      }\n      if (nextCell instanceof EditorCell_Collection) {\n        for (EditorCell childCell : (EditorCell_Collection) nextCell) {\n          cells.add(childCell);\n        }\n      }\n    }\n    LOG.error(\"Editor cell created for the node: \" + node + \" does not contain any cell associated with this node. Following node was used instead: \" +\n        cell.getSNode(), cell.getSNode());\n    return null;\n  }","commit_id":"8f9cc8eed14870eeadb3b5725ee7f6e829e170bf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  private List<SNode> getNodesImpl(SAbstractConcept concept, boolean includeInherited) {\n    if (includeInherited) {\n      Set<SAbstractConcept> allDescendantsOfConcept = ConceptDescendantsCache.getInstance().getDescendants(concept);\n      final ArrayList<List<SNode>> nodesOfConcept = new ArrayList<List<SNode>>(allDescendantsOfConcept.size());\n      int cnt = 0;\n      synchronized (myNodeMap) { // utilize the fact values in map are immutable\n        for (SAbstractConcept d : allDescendantsOfConcept) {\n          List<SNode> n = myNodeMap.get(d.getQualifiedName());\n          nodesOfConcept.add(n);\n          cnt += n.size();\n        }\n      }\n      final ArrayList<SNode> result = new ArrayList<SNode>(cnt);\n      for (List<SNode> l : nodesOfConcept) {\n        result.addAll(l);\n      }\n      return result;\n    } else {\n      synchronized (myNodeMap) {\n        return myNodeMap.get(concept.getQualifiedName());\n      }\n    }\n  }","id":100111,"modified_method":"@NotNull\n  private List<SNode> getNodesImpl(SAbstractConcept concept, boolean includeInherited) {\n    if (includeInherited) {\n      Set<SAbstractConcept> allDescendantsOfConcept = ConceptDescendantsCache.getInstance().getDescendants(concept);\n      final ArrayList<List<SNode>> nodesOfConcept = new ArrayList<List<SNode>>(allDescendantsOfConcept.size());\n      int cnt = 0;\n      synchronized (myNodeMap) { // utilize the fact values in map are immutable\n        for (SAbstractConcept d : allDescendantsOfConcept) {\n          List<SNode> n = myNodeMap.get(d);\n          nodesOfConcept.add(n);\n          cnt += n.size();\n        }\n      }\n      final ArrayList<SNode> result = new ArrayList<SNode>(cnt);\n      for (List<SNode> l : nodesOfConcept) {\n        result.addAll(l);\n      }\n      return result;\n    } else {\n      synchronized (myNodeMap) {\n        return myNodeMap.get(concept);\n      }\n    }\n  }","commit_id":"9e65a5d30f67403fb0ad6623d921b6e0e28b2f50","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * this method doesn't expect root to be added twice to the same map (to keep impl simple)\n     */\n    public void add(SNode root) {\n      String conceptFqName = root.getConcept().getQualifiedName();\n      ArrayList<SNode> set = myNodes.get(conceptFqName);\n      if (set == null) {\n        myNodes.put(conceptFqName, set = new ArrayList<SNode>());\n      }\n      set.add(root);\n    }","id":100112,"modified_method":"/**\n     * this method doesn't expect root to be added twice to the same map (to keep impl simple)\n     */\n    public void add(SNode root) {\n      SConcept concept = root.getConcept();\n      ArrayList<SNode> set = myNodes.get(concept);\n      if (set == null) {\n        myNodes.put(concept, set = new ArrayList<SNode>());\n      }\n      set.add(root);\n    }","commit_id":"9e65a5d30f67403fb0ad6623d921b6e0e28b2f50","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void forget(ConceptInstanceMap other) {\n      for (String cn : other.myNodes.keySet()) {\n        assert myNodes.containsKey(cn); // other shall be subset of this map\n        List<SNode> nodes = myNodes.get(cn);\n        LinkedHashSet<SNode> newNodes = new LinkedHashSet<SNode>(nodes);\n        newNodes.removeAll(other.myNodes.get(cn));\n        if (newNodes.isEmpty()) {\n          myNodes.remove(cn);\n        } else {\n          myNodes.put(cn, new ArrayList<SNode>(newNodes));\n        }\n      }\n    }","id":100113,"modified_method":"public void forget(ConceptInstanceMap other) {\n      for (SAbstractConcept cn : other.myNodes.keySet()) {\n        assert myNodes.containsKey(cn); // other shall be subset of this map\n        List<SNode> nodes = myNodes.get(cn);\n        LinkedHashSet<SNode> newNodes = new LinkedHashSet<SNode>(nodes);\n        newNodes.removeAll(other.myNodes.get(cn));\n        if (newNodes.isEmpty()) {\n          myNodes.remove(cn);\n        } else {\n          myNodes.put(cn, new ArrayList<SNode>(newNodes));\n        }\n      }\n    }","commit_id":"9e65a5d30f67403fb0ad6623d921b6e0e28b2f50","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void merge(ConceptInstanceMap other) {\n      for (String cn : other.myNodes.keySet()) {\n        List<SNode> nodes = myNodes.get(cn);\n        if (nodes == null) {\n          myNodes.put(cn, other.myNodes.get(cn));\n        } else {\n          LinkedHashSet<SNode> newNodes = new LinkedHashSet<SNode>(nodes);\n          newNodes.addAll(other.myNodes.get(cn));\n          myNodes.put(cn, new ArrayList<SNode>(newNodes));\n        }\n      }\n    }","id":100114,"modified_method":"public void merge(ConceptInstanceMap other) {\n      for (SAbstractConcept cn : other.myNodes.keySet()) {\n        List<SNode> nodes = myNodes.get(cn);\n        if (nodes == null) {\n          myNodes.put(cn, other.myNodes.get(cn));\n        } else {\n          LinkedHashSet<SNode> newNodes = new LinkedHashSet<SNode>(nodes);\n          newNodes.addAll(other.myNodes.get(cn));\n          myNodes.put(cn, new ArrayList<SNode>(newNodes));\n        }\n      }\n    }","commit_id":"9e65a5d30f67403fb0ad6623d921b6e0e28b2f50","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Iterable<T> getAllApplicableTo(String leftConceptFQName, String rightConceptFQName, LanguageScope scope) {\n    Pair<String, String> conceptPair = new Pair<String, String>(leftConceptFQName, rightConceptFQName);\n    if (!myRules.containsKey(conceptPair)) return Collections.emptyList();\n\n    List<T> result = new ArrayList<T>(4);\n    Set<T> rules = myRules.get(conceptPair);\n    synchronized (rules) {\n      for (T rule : rules) {\n        if (scope.containsNamespace(getNamespace(rule))) {\n          result.add(rule);\n        }\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }","id":100115,"modified_method":"private Iterable<T> getAllApplicableTo(SAbstractConcept leftConcept, SAbstractConcept rightConcept, LanguageScope scope) {\n    Pair<SAbstractConcept, SAbstractConcept> conceptPair = new Pair<SAbstractConcept, SAbstractConcept>(leftConcept, rightConcept);\n    if (!myRules.containsKey(conceptPair)) return Collections.emptyList();\n\n    List<T> result = new ArrayList<T>(4);\n    Set<T> rules = myRules.get(conceptPair);\n    synchronized (rules) {\n      for (T rule : rules) {\n        if (scope.containsNamespace(getNamespace(rule))) {\n          result.add(rule);\n        }\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void addRuleSetItem(Set<T> rules) {\n    for (T rule : rules) {\n      String concept1 = rule.getApplicableConceptFQName1();\n      String concept2 = rule.getApplicableConceptFQName2();\n      Pair<String, String> pair = new Pair<String, String>(concept1, concept2);\n      Set<T> existingRules = myRules.get(pair);\n      while (existingRules == null) {\n        myRules.putIfAbsent(pair, Collections.synchronizedSet(new HashSet<T>(1)));\n        existingRules = myRules.get(pair);\n      }\n      existingRules.add(rule);\n    }\n    myDoubleTermRules.purgeCache();\n  }","id":100116,"modified_method":"public void addRuleSetItem(Set<T> rules) {\n    for (T rule : rules) {\n      SAbstractConcept concept1 = rule.getApplicableConcept1();\n      SAbstractConcept concept2 = rule.getApplicableConcept2();\n      Pair<SAbstractConcept, SAbstractConcept> pair = new Pair<SAbstractConcept, SAbstractConcept>(concept1, concept2);\n      Set<T> existingRules = myRules.get(pair);\n      while (existingRules == null) {\n        myRules.putIfAbsent(pair, Collections.synchronizedSet(new HashSet<T>(1)));\n        existingRules = myRules.get(pair);\n      }\n      existingRules.add(rule);\n    }\n    myDoubleTermRules.purgeCache();\n  }","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"abstract protected Iterable<K> allForConceptPair(String leftConceptFQName, String rightConceptFQName, LanguageScope langScope);","id":100117,"modified_method":"abstract protected Iterable<K> allForConceptPair(SAbstractConcept leftConcept, SAbstractConcept rightConcept, LanguageScope langScope);","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Set<K> computeRules(String leftConceptFQName, String rightConceptFQName, LanguageScope langScope) {\n    THashSet<K> result = new THashSet<K>();\n\n    LinkedList<Pair<String, String>> queue = new LinkedList<Pair<String, String>>();\n    queue.add(new Pair<String, String>(leftConceptFQName, rightConceptFQName));\n    for (String leftSuperConcept : allSuperConcepts(leftConceptFQName)) {\n      queue.add(new Pair<String, String>(leftSuperConcept, rightConceptFQName));\n    }\n\n    while (!queue.isEmpty()) {\n      Pair<String, String> nextConceptPair = queue.remove();\n      for (K applicableRule : allForConceptPair(nextConceptPair.o1, nextConceptPair.o2, langScope)) {\n        result.add(applicableRule);\n      }\n\n      for (String rightSuperConcept : allSuperConcepts(nextConceptPair.o2)) {\n        queue.add(new Pair<String, String>(nextConceptPair.o1, rightSuperConcept));\n      }\n    }\n\n    return Collections.unmodifiableSet(result);\n  }","id":100118,"modified_method":"private Set<K> computeRules(SAbstractConcept leftConcept, SAbstractConcept rightConcept, LanguageScope langScope) {\n    THashSet<K> result = new THashSet<K>();\n\n    LinkedList<Pair<SAbstractConcept, SAbstractConcept>> queue = new LinkedList<Pair<SAbstractConcept, SAbstractConcept>>();\n    queue.add(new Pair<SAbstractConcept, SAbstractConcept>(leftConcept, rightConcept));\n    for (SAbstractConcept leftSuperConcept : allSuperConcepts(leftConcept)) {\n      queue.add(new Pair<SAbstractConcept, SAbstractConcept>(leftSuperConcept, rightConcept));\n    }\n\n    while (!queue.isEmpty()) {\n      Pair<SAbstractConcept, SAbstractConcept> nextConceptPair = queue.remove();\n      for (K applicableRule : allForConceptPair(nextConceptPair.o1, nextConceptPair.o2, langScope)) {\n        result.add(applicableRule);\n      }\n\n      for (SAbstractConcept rightSuperConcept : allSuperConcepts(nextConceptPair.o2)) {\n        queue.add(new Pair<SAbstractConcept, SAbstractConcept>(nextConceptPair.o1, rightSuperConcept));\n      }\n    }\n\n    return Collections.unmodifiableSet(result);\n  }","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"abstract protected Iterable<String> allSuperConcepts(String conceptFQName);","id":100119,"modified_method":"abstract protected Iterable<SAbstractConcept> allSuperConcepts(SAbstractConcept conceptFQName);","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Set<K> lookupRules(SNode leftTerm, SNode rightTerm) {\n\n    final LanguageScope langScope = LanguageScope.getCurrent();\n\n    final String leftConceptFQName = leftTerm.getConcept().getQualifiedName();\n    final String rightConceptFQName = rightTerm.getConcept().getQualifiedName();\n\n    final Object compoundKey = new Triplet<Object, String, String>(langScope, leftConceptFQName, rightConceptFQName);\n\n    Set<K> cachedRules = myCachedRules.get(compoundKey);\n    if (cachedRules != null) {\n      return cachedRules;\n    }\n    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<K>>() {\n      @Override\n      public Set<K> compute() {\n        Set<K> computedRules = computeRules(leftConceptFQName, rightConceptFQName, langScope);\n        myCachedRules.put(compoundKey, computedRules);\n\n        return computedRules;\n      }\n    });\n  }","id":100120,"modified_method":"public Set<K> lookupRules(SNode leftTerm, SNode rightTerm) {\n\n    final LanguageScope langScope = LanguageScope.getCurrent();\n\n    final SAbstractConcept leftConcept = leftTerm.getConcept();\n    final SAbstractConcept rightConcept = rightTerm.getConcept();\n\n    final Object compoundKey = new Triplet<Object, SAbstractConcept, SAbstractConcept>(langScope, leftConcept, rightConcept);\n\n    Set<K> cachedRules = myCachedRules.get(compoundKey);\n    if (cachedRules != null) return cachedRules;\n\n    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<K>>() {\n      @Override\n      public Set<K> compute() {\n        Set<K> computedRules = computeRules(leftConcept, rightConcept, langScope);\n        myCachedRules.put(compoundKey, computedRules);\n\n        return computedRules;\n      }\n    });\n  }","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"public abstract String getApplicableSupertypeConceptFQName();","id":100121,"modified_method":"@Deprecated\n  @ToRemove(version = 3.3)\n  public String getApplicableSupertypeConceptFQName(){\n    return null;\n  }","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"public abstract String getApplicableSubtypeConceptFQName();","id":100122,"modified_method":"@Deprecated\n  @ToRemove(version = 3.3)\n  public String getApplicableSubtypeConceptFQName(){\n    return null;\n  }","commit_id":"a0a62dab53db35102edd38ca41c3b7c9c5087032","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Note that the SubjectBean parameter should be null for SAML2.0\n     */\n    protected void createAndSetStatement(SubjectBean subjectBean, SAMLCallback callback) {\n        if (statement == Statement.AUTHN) {\n            AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n            if (subjectBean != null) {\n                authBean.setSubject(subjectBean);\n            }\n            authBean.setAuthenticationMethod(\"Password\");\n            callback.setAuthenticationStatementData(Collections.singletonList(authBean));\n        } else if (statement == Statement.ATTR) {\n            AttributeStatementBean attrBean = new AttributeStatementBean();\n            if (subjectBean != null) {\n                attrBean.setSubject(subjectBean);\n            }\n            AttributeBean attributeBean = new AttributeBean();\n            attributeBean.setSimpleName(\"role\");\n            attributeBean.setAttributeValues(Collections.singletonList(\"user\"));\n            attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n            callback.setAttributeStatementData(Collections.singletonList(attrBean));\n        } else {\n            AuthDecisionStatementBean authzBean = new AuthDecisionStatementBean();\n            if (subjectBean != null) {\n                authzBean.setSubject(subjectBean);\n            }\n            ActionBean actionBean = new ActionBean();\n            actionBean.setContents(\"Read\");\n            authzBean.setActions(Collections.singletonList(actionBean));\n            authzBean.setResource(\"endpoint\");\n            authzBean.setDecision(AuthDecisionStatementBean.Decision.PERMIT);\n            callback.setAuthDecisionStatementData(Collections.singletonList(authzBean));\n        }\n    }","id":100123,"modified_method":"/**\n     * Note that the SubjectBean parameter should be null for SAML2.0\n     */\n    protected void createAndSetStatement(SubjectBean subjectBean, SAMLCallback callback) {\n        if (statement == Statement.AUTHN) {\n            AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n            if (subjectBean != null) {\n                authBean.setSubject(subjectBean);\n            }\n            authBean.setAuthenticationMethod(\"Password\");\n            callback.setAuthenticationStatementData(Collections.singletonList(authBean));\n        } else if (statement == Statement.ATTR) {\n            AttributeStatementBean attrBean = new AttributeStatementBean();\n            AttributeBean attributeBean = new AttributeBean();\n            if (subjectBean != null) {\n                attrBean.setSubject(subjectBean);\n                attributeBean.setSimpleName(\"role\");\n                attributeBean.setQualifiedName(\"http://custom-ns\");\n            } else {\n                attributeBean.setQualifiedName(\"role\");\n            }\n            attributeBean.setAttributeValues(Collections.singletonList(\"user\"));\n            attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n            callback.setAttributeStatementData(Collections.singletonList(attrBean));\n        } else {\n            AuthDecisionStatementBean authzBean = new AuthDecisionStatementBean();\n            if (subjectBean != null) {\n                authzBean.setSubject(subjectBean);\n            }\n            ActionBean actionBean = new ActionBean();\n            actionBean.setContents(\"Read\");\n            authzBean.setActions(Collections.singletonList(actionBean));\n            authzBean.setResource(\"endpoint\");\n            authzBean.setDecision(AuthDecisionStatementBean.Decision.PERMIT);\n            callback.setAuthDecisionStatementData(Collections.singletonList(authzBean));\n        }\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Validate a Token using the given TokenValidatorParameters.\n     */\n    public TokenValidatorResponse validateToken(TokenValidatorParameters tokenParameters) {\n        LOG.fine(\"Validating SAML Token\");\n        TokenRequirements tokenRequirements = tokenParameters.getTokenRequirements();\n        ReceivedToken validateTarget = tokenRequirements.getValidateTarget();\n        STSPropertiesMBean stsProperties = tokenParameters.getStsProperties();\n        Crypto sigCrypto = stsProperties.getSignatureCrypto();\n        CallbackHandler callbackHandler = stsProperties.getCallbackHandler();\n        \n        TokenValidatorResponse response = new TokenValidatorResponse();\n        response.setValid(false);\n        \n        if (validateTarget == null || !validateTarget.isDOMElement()) {\n            return response;\n        }\n        \n        try {\n            Element validateTargetElement = (Element)validateTarget.getToken();\n            AssertionWrapper assertion = new AssertionWrapper(validateTargetElement);\n            \n            SAMLTokenPrincipal samlPrincipal = new SAMLTokenPrincipal(assertion);\n            response.setPrincipal(samlPrincipal);\n            \n            SecurityToken secToken = null;\n            if (tokenParameters.getTokenStore() != null) {\n                int hash = 0;\n                byte[] signatureValue = assertion.getSignatureValue();\n                if (signatureValue != null && signatureValue.length > 0) {\n                    hash = Arrays.hashCode(signatureValue);\n                    secToken = tokenParameters.getTokenStore().getTokenByAssociatedHash(hash);\n                }\n            }\n            if (secToken == null) {\n                if (!assertion.isSigned()) {\n                    LOG.log(Level.WARNING, \"The received assertion is not signed, and therefore not trusted\");\n                    return response;\n                }\n                \n                RequestData requestData = new RequestData();\n                requestData.setSigCrypto(sigCrypto);\n                WSSConfig wssConfig = WSSConfig.getNewInstance();\n                requestData.setWssConfig(wssConfig);\n                requestData.setCallbackHandler(callbackHandler);\n                \n                // Verify the signature\n                assertion.verifySignature(\n                    requestData, new WSDocInfo(validateTargetElement.getOwnerDocument())\n                );\n\n                // Now verify trust on the signature\n                Credential trustCredential = new Credential();\n                SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n                trustCredential.setPublicKey(samlKeyInfo.getPublicKey());\n                trustCredential.setCertificates(samlKeyInfo.getCerts());\n    \n                validator.validate(trustCredential, requestData);\n\n                // Finally check that subject DN of the signing certificate matches a known constraint\n                X509Certificate cert = null;\n                if (trustCredential.getCertificates() != null) {\n                    cert = trustCredential.getCertificates()[0];\n                }\n                \n                if (!certConstraints.matches(cert)) {\n                    return response;\n                }\n            }\n           \n            DateTime validFrom = null;\n            DateTime validTill = null;\n            if (assertion.getSamlVersion().equals(SAMLVersion.VERSION_20)) {\n                validFrom = assertion.getSaml2().getConditions().getNotBefore();\n                validTill = assertion.getSaml2().getConditions().getNotOnOrAfter();\n            } else {\n                validFrom = assertion.getSaml1().getConditions().getNotBefore();\n                validTill = assertion.getSaml1().getConditions().getNotOnOrAfter();\n            }\n            if (validFrom.isAfterNow() || validTill.isBeforeNow()) {\n                LOG.log(Level.WARNING, \"SAML Token condition not met\");\n                if (secToken != null) {\n                    tokenParameters.getTokenStore().remove(secToken);\n                }\n                return response;\n            }\n            \n            // Get the realm of the SAML token\n            String tokenRealm = null;\n            if (samlRealmCodec != null) {\n                tokenRealm = samlRealmCodec.getRealmFromToken(assertion);\n                // verify the realm against the cached token\n                if (secToken != null) {\n                    Properties props = secToken.getProperties();\n                    if (props != null) {\n                        String cachedRealm = props.getProperty(STSConstants.TOKEN_REALM);\n                        if (!tokenRealm.equals(cachedRealm)) {\n                            return response;\n                        }\n                    }\n                }\n            }\n            \n            response.setTokenRealm(tokenRealm);\n            response.setValid(true);\n        } catch (WSSecurityException ex) {\n            LOG.log(Level.WARNING, \"\", ex);\n        }\n\n        return response;\n    }","id":100124,"modified_method":"/**\n     * Validate a Token using the given TokenValidatorParameters.\n     */\n    public TokenValidatorResponse validateToken(TokenValidatorParameters tokenParameters) {\n        LOG.fine(\"Validating SAML Token\");\n        TokenRequirements tokenRequirements = tokenParameters.getTokenRequirements();\n        ReceivedToken validateTarget = tokenRequirements.getValidateTarget();\n        STSPropertiesMBean stsProperties = tokenParameters.getStsProperties();\n        Crypto sigCrypto = stsProperties.getSignatureCrypto();\n        CallbackHandler callbackHandler = stsProperties.getCallbackHandler();\n        \n        TokenValidatorResponse response = new TokenValidatorResponse();\n        response.setValid(false);\n        \n        if (validateTarget == null || !validateTarget.isDOMElement()) {\n            return response;\n        }\n        \n        try {\n            Element validateTargetElement = (Element)validateTarget.getToken();\n            AssertionWrapper assertion = new AssertionWrapper(validateTargetElement);\n            \n            SAMLTokenPrincipal samlPrincipal = new SAMLTokenPrincipal(assertion);\n            response.setPrincipal(samlPrincipal);\n            \n            SecurityToken secToken = null;\n            if (tokenParameters.getTokenStore() != null) {\n                int hash = 0;\n                byte[] signatureValue = assertion.getSignatureValue();\n                if (signatureValue != null && signatureValue.length > 0) {\n                    hash = Arrays.hashCode(signatureValue);\n                    secToken = tokenParameters.getTokenStore().getTokenByAssociatedHash(hash);\n                }\n            }\n            if (secToken == null) {\n                if (!assertion.isSigned()) {\n                    LOG.log(Level.WARNING, \"The received assertion is not signed, and therefore not trusted\");\n                    return response;\n                }\n                \n                RequestData requestData = new RequestData();\n                requestData.setSigCrypto(sigCrypto);\n                WSSConfig wssConfig = WSSConfig.getNewInstance();\n                requestData.setWssConfig(wssConfig);\n                requestData.setCallbackHandler(callbackHandler);\n                \n                // Verify the signature\n                assertion.verifySignature(\n                    requestData, new WSDocInfo(validateTargetElement.getOwnerDocument())\n                );\n                \n                // Validate the assertion against schemas/profiles\n                validateAssertion(assertion);\n\n                // Now verify trust on the signature\n                Credential trustCredential = new Credential();\n                SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n                trustCredential.setPublicKey(samlKeyInfo.getPublicKey());\n                trustCredential.setCertificates(samlKeyInfo.getCerts());\n    \n                validator.validate(trustCredential, requestData);\n\n                // Finally check that subject DN of the signing certificate matches a known constraint\n                X509Certificate cert = null;\n                if (trustCredential.getCertificates() != null) {\n                    cert = trustCredential.getCertificates()[0];\n                }\n                \n                if (!certConstraints.matches(cert)) {\n                    return response;\n                }\n            }\n           \n            DateTime validFrom = null;\n            DateTime validTill = null;\n            if (assertion.getSamlVersion().equals(SAMLVersion.VERSION_20)) {\n                validFrom = assertion.getSaml2().getConditions().getNotBefore();\n                validTill = assertion.getSaml2().getConditions().getNotOnOrAfter();\n            } else {\n                validFrom = assertion.getSaml1().getConditions().getNotBefore();\n                validTill = assertion.getSaml1().getConditions().getNotOnOrAfter();\n            }\n            if (validFrom.isAfterNow() || validTill.isBeforeNow()) {\n                LOG.log(Level.WARNING, \"SAML Token condition not met\");\n                if (secToken != null) {\n                    tokenParameters.getTokenStore().remove(secToken);\n                }\n                return response;\n            }\n            \n            // Get the realm of the SAML token\n            String tokenRealm = null;\n            if (samlRealmCodec != null) {\n                tokenRealm = samlRealmCodec.getRealmFromToken(assertion);\n                // verify the realm against the cached token\n                if (secToken != null) {\n                    Properties props = secToken.getProperties();\n                    if (props != null) {\n                        String cachedRealm = props.getProperty(STSConstants.TOKEN_REALM);\n                        if (!tokenRealm.equals(cachedRealm)) {\n                            return response;\n                        }\n                    }\n                }\n            }\n            \n            response.setTokenRealm(tokenRealm);\n            response.setValid(true);\n        } catch (WSSecurityException ex) {\n            LOG.log(Level.WARNING, \"\", ex);\n        }\n\n        return response;\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                \n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                callback.setSamlVersion(SAMLVersion.VERSION_20);\n                \n                callback.setIssuer(\"intermediary\");\n                String subjectName = \"uid=\" + principal.getName();\n                String confirmationMethod = SAML2Constants.CONF_SENDER_VOUCHES;\n\n                SubjectBean subjectBean = \n                    new SubjectBean(subjectName, null, confirmationMethod);\n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                if (subjectBean != null) {\n                    attrBean.setSubject(subjectBean);\n                }\n                AttributeBean attributeBean = new AttributeBean();\n                attributeBean.setSimpleName(\"role\");\n                attributeBean.setAttributeValues(Collections.singletonList(\"user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","id":100125,"modified_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                \n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                callback.setSamlVersion(SAMLVersion.VERSION_20);\n                \n                callback.setIssuer(\"intermediary\");\n                String subjectName = \"uid=\" + principal.getName();\n                String confirmationMethod = SAML2Constants.CONF_SENDER_VOUCHES;\n\n                SubjectBean subjectBean = \n                    new SubjectBean(subjectName, null, confirmationMethod);\n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                if (subjectBean != null) {\n                    attrBean.setSubject(subjectBean);\n                }\n                AttributeBean attributeBean = new AttributeBean();\n                attributeBean.setQualifiedName(\"role\");\n                attributeBean.setAttributeValues(Collections.singletonList(\"user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                \n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                callback.setSamlVersion(SAMLVersion.VERSION_20);\n                \n                callback.setIssuer(\"sts\");\n                String subjectName = \"uid=alice\";\n                String confirmationMethod = SAML2Constants.CONF_BEARER;\n\n                SubjectBean subjectBean = \n                    new SubjectBean(subjectName, null, confirmationMethod);\n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                if (subjectBean != null) {\n                    attrBean.setSubject(subjectBean);\n                }\n                AttributeBean attributeBean = new AttributeBean();\n                attributeBean.setSimpleName(\"role\");\n                attributeBean.setAttributeValues(Collections.singletonList(\"user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","id":100126,"modified_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                \n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                callback.setSamlVersion(SAMLVersion.VERSION_20);\n                \n                callback.setIssuer(\"sts\");\n                String subjectName = \"uid=alice\";\n                String confirmationMethod = SAML2Constants.CONF_BEARER;\n\n                SubjectBean subjectBean = \n                    new SubjectBean(subjectName, null, confirmationMethod);\n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                if (subjectBean != null) {\n                    attrBean.setSubject(subjectBean);\n                }\n                AttributeBean attributeBean = new AttributeBean();\n                attributeBean.setQualifiedName(\"role\");\n                attributeBean.setAttributeValues(Collections.singletonList(\"user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                if (saml2) {\n                    callback.setSamlVersion(SAMLVersion.VERSION_20);\n                }\n                callback.setIssuer(\"sts\");\n                String subjectName = \"uid=sts-client,o=mock-sts.com\";\n                String subjectQualifier = \"www.mock-sts.com\";\n                \n                SubjectBean subjectBean = \n                    new SubjectBean(\n                        subjectName, subjectQualifier, confirmationMethod\n                    );\n                if (SAML2Constants.CONF_HOLDER_KEY.equals(confirmationMethod)\n                    || SAML1Constants.CONF_HOLDER_KEY.equals(confirmationMethod)) {\n                    try {\n                        KeyInfoBean keyInfo = createKeyInfo();\n                        subjectBean.setKeyInfo(keyInfo);\n                    } catch (Exception ex) {\n                        throw new IOException(\"Problem creating KeyInfo: \" +  ex.getMessage());\n                    }\n                }\n                \n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                attrBean.setSubject(subjectBean);\n                \n                AttributeBean attributeBean = new AttributeBean();\n                attributeBean.setSimpleName(\"subject-role\");\n                attributeBean.setAttributeValues(Collections.singletonList(\"system-user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","id":100127,"modified_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                if (saml2) {\n                    callback.setSamlVersion(SAMLVersion.VERSION_20);\n                }\n                callback.setIssuer(\"sts\");\n                String subjectName = \"uid=sts-client,o=mock-sts.com\";\n                String subjectQualifier = \"www.mock-sts.com\";\n                \n                SubjectBean subjectBean = \n                    new SubjectBean(\n                        subjectName, subjectQualifier, confirmationMethod\n                    );\n                if (SAML2Constants.CONF_HOLDER_KEY.equals(confirmationMethod)\n                    || SAML1Constants.CONF_HOLDER_KEY.equals(confirmationMethod)) {\n                    try {\n                        KeyInfoBean keyInfo = createKeyInfo();\n                        subjectBean.setKeyInfo(keyInfo);\n                    } catch (Exception ex) {\n                        throw new IOException(\"Problem creating KeyInfo: \" +  ex.getMessage());\n                    }\n                }\n                \n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                attrBean.setSubject(subjectBean);\n                \n                AttributeBean attributeBean = new AttributeBean();\n                if (saml2) {\n                    attributeBean.setQualifiedName(\"subject-role\");\n                } else {\n                    attributeBean.setSimpleName(\"subject-role\");\n                    attributeBean.setQualifiedName(\"http://custom-ns\");\n                }\n                attributeBean.setAttributeValues(Collections.singletonList(\"system-user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        \n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                if (saml2) {\n                    callback.setSamlVersion(SAMLVersion.VERSION_20);\n                } else {\n                    callback.setSamlVersion(SAMLVersion.VERSION_11);\n                }\n                callback.setIssuer(\"https://idp.example.org/SAML2\");\n                \n                String subjectName = (String)m.getContextualProperty(\"saml.subject.name\");\n                if (subjectName == null) {\n                    subjectName = \"uid=sts-client,o=mock-sts.com\";\n                }\n                String subjectQualifier = \"www.mock-sts.com\";\n                if (!saml2 && SAML2Constants.CONF_SENDER_VOUCHES.equals(confirmationMethod)) {\n                    confirmationMethod = SAML1Constants.CONF_SENDER_VOUCHES;\n                }\n                SubjectBean subjectBean = \n                    new SubjectBean(\n                        subjectName, subjectQualifier, confirmationMethod\n                    );\n                if (SAML2Constants.CONF_HOLDER_KEY.equals(confirmationMethod)) {\n                    \n                    try {\n                        CryptoLoader loader = new CryptoLoader();\n                        Crypto crypto = loader.getCrypto(m, \n                                                         SecurityConstants.SIGNATURE_CRYPTO,\n                                                         SecurityConstants.SIGNATURE_PROPERTIES);\n                        X509Certificate cert = \n                            SecurityUtils.getCertificates(crypto, \n                                SecurityUtils.getUserName(m, crypto, \"ws-security.signature.username\"))[0];\n                        \n                        KeyInfoBean keyInfo = new KeyInfoBean();\n                        keyInfo.setCertificate(cert);\n                        subjectBean.setKeyInfo(keyInfo);\n                    } catch (Exception ex) {\n                        throw new RuntimeException(ex);\n                    }\n                }\n                callback.setSubject(subjectBean);\n                \n                ConditionsBean conditions = new ConditionsBean();\n                conditions.setAudienceURI(\"https://sp.example.com/SAML2\");\n                callback.setConditions(conditions);\n                \n                AuthDecisionStatementBean authDecBean = new AuthDecisionStatementBean();\n                authDecBean.setDecision(Decision.INDETERMINATE);\n                callback.setAuthDecisionStatementData(Collections.singletonList(authDecBean));\n                \n                AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n                authBean.setSubject(subjectBean);\n                authBean.setAuthenticationInstant(new DateTime());\n                authBean.setSessionIndex(\"123456\");\n                // AuthnContextClassRef is not set\n                authBean.setAuthenticationMethod(\n                        \"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\");\n                callback.setAuthenticationStatementData(\n                    Collections.singletonList(authBean));\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                attrBean.setSubject(subjectBean);\n                \n                List<String> roles = CastUtils.cast((List<?>)m.getContextualProperty(\"saml.roles\"));\n                if (roles == null) {\n                    roles = Collections.singletonList(\"user\");\n                }\n                List<AttributeBean> claims = new ArrayList<AttributeBean>();\n                AttributeBean roleClaim = new AttributeBean();\n                roleClaim.setSimpleName(\"subject-role\");\n                roleClaim.setQualifiedName(Claim.DEFAULT_ROLE_NAME);\n                roleClaim.setNameFormat(Claim.DEFAULT_NAME_FORMAT);\n                roleClaim.setAttributeValues(roles);\n                claims.add(roleClaim);\n                \n                List<String> authMethods = CastUtils.cast((List<?>)m.getContextualProperty(\"saml.auth\"));\n                if (authMethods == null) {\n                    authMethods = Collections.singletonList(\"password\");\n                }\n                \n                AttributeBean authClaim = new AttributeBean();\n                authClaim.setQualifiedName(\"http://claims/authentication\");\n                authClaim.setNameFormat(\"http://claims/authentication-format\");\n                authClaim.setAttributeValues(authMethods);\n                claims.add(authClaim);\n                \n                attrBean.setSamlAttributes(claims);\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","id":100128,"modified_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        Message m = PhaseInterceptorChain.getCurrentMessage();\n        \n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                if (saml2) {\n                    callback.setSamlVersion(SAMLVersion.VERSION_20);\n                } else {\n                    callback.setSamlVersion(SAMLVersion.VERSION_11);\n                }\n                callback.setIssuer(\"https://idp.example.org/SAML2\");\n                \n                String subjectName = (String)m.getContextualProperty(\"saml.subject.name\");\n                if (subjectName == null) {\n                    subjectName = \"uid=sts-client,o=mock-sts.com\";\n                }\n                String subjectQualifier = \"www.mock-sts.com\";\n                if (!saml2 && SAML2Constants.CONF_SENDER_VOUCHES.equals(confirmationMethod)) {\n                    confirmationMethod = SAML1Constants.CONF_SENDER_VOUCHES;\n                }\n                SubjectBean subjectBean = \n                    new SubjectBean(\n                        subjectName, subjectQualifier, confirmationMethod\n                    );\n                if (SAML2Constants.CONF_HOLDER_KEY.equals(confirmationMethod)) {\n                    \n                    try {\n                        CryptoLoader loader = new CryptoLoader();\n                        Crypto crypto = loader.getCrypto(m, \n                                                         SecurityConstants.SIGNATURE_CRYPTO,\n                                                         SecurityConstants.SIGNATURE_PROPERTIES);\n                        X509Certificate cert = \n                            SecurityUtils.getCertificates(crypto, \n                                SecurityUtils.getUserName(m, crypto, \"ws-security.signature.username\"))[0];\n                        \n                        KeyInfoBean keyInfo = new KeyInfoBean();\n                        keyInfo.setCertificate(cert);\n                        subjectBean.setKeyInfo(keyInfo);\n                    } catch (Exception ex) {\n                        throw new RuntimeException(ex);\n                    }\n                }\n                callback.setSubject(subjectBean);\n                \n                ConditionsBean conditions = new ConditionsBean();\n                conditions.setAudienceURI(\"https://sp.example.com/SAML2\");\n                callback.setConditions(conditions);\n                \n                AuthDecisionStatementBean authDecBean = new AuthDecisionStatementBean();\n                authDecBean.setDecision(Decision.INDETERMINATE);\n                authDecBean.setResource(\"https://sp.example.com/SAML2\");\n                ActionBean actionBean = new ActionBean();\n                actionBean.setContents(\"Read\");\n                authDecBean.setActions(Collections.singletonList(actionBean));\n                callback.setAuthDecisionStatementData(Collections.singletonList(authDecBean));\n                \n                AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n                authBean.setSubject(subjectBean);\n                authBean.setAuthenticationInstant(new DateTime());\n                authBean.setSessionIndex(\"123456\");\n                // AuthnContextClassRef is not set\n                authBean.setAuthenticationMethod(\n                        \"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\");\n                callback.setAuthenticationStatementData(\n                    Collections.singletonList(authBean));\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                attrBean.setSubject(subjectBean);\n                \n                List<String> roles = CastUtils.cast((List<?>)m.getContextualProperty(\"saml.roles\"));\n                if (roles == null) {\n                    roles = Collections.singletonList(\"user\");\n                }\n                List<AttributeBean> claims = new ArrayList<AttributeBean>();\n                AttributeBean roleClaim = new AttributeBean();\n                roleClaim.setSimpleName(\"subject-role\");\n                roleClaim.setQualifiedName(Claim.DEFAULT_ROLE_NAME);\n                roleClaim.setNameFormat(Claim.DEFAULT_NAME_FORMAT);\n                roleClaim.setAttributeValues(roles);\n                claims.add(roleClaim);\n                \n                List<String> authMethods = CastUtils.cast((List<?>)m.getContextualProperty(\"saml.auth\"));\n                if (authMethods == null) {\n                    authMethods = Collections.singletonList(\"password\");\n                }\n                \n                AttributeBean authClaim = new AttributeBean();\n                authClaim.setSimpleName(\"http://claims/authentication\");\n                authClaim.setQualifiedName(\"http://claims/authentication\");\n                authClaim.setNameFormat(\"http://claims/authentication-format\");\n                authClaim.setAttributeValues(authMethods);\n                claims.add(authClaim);\n                \n                attrBean.setSamlAttributes(claims);\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                if (saml2) {\n                    callback.setSamlVersion(SAMLVersion.VERSION_20);\n                } else {\n                    callback.setSamlVersion(SAMLVersion.VERSION_11);\n                }\n                callback.setIssuer(\"sts\");\n                String subjectName = \"uid=sts-client,o=mock-sts.com\";\n                String subjectQualifier = \"www.mock-sts.com\";\n                if (!saml2 && SAML2Constants.CONF_SENDER_VOUCHES.equals(confirmationMethod)) {\n                    confirmationMethod = SAML1Constants.CONF_SENDER_VOUCHES;\n                }\n                SubjectBean subjectBean = \n                    new SubjectBean(\n                        subjectName, subjectQualifier, confirmationMethod\n                    );\n                if (SAML2Constants.CONF_HOLDER_KEY.equals(confirmationMethod)\n                    || SAML1Constants.CONF_HOLDER_KEY.equals(confirmationMethod)) {\n                    try {\n                        KeyInfoBean keyInfo = createKeyInfo();\n                        subjectBean.setKeyInfo(keyInfo);\n                    } catch (Exception ex) {\n                        throw new IOException(\"Problem creating KeyInfo: \" +  ex.getMessage());\n                    }\n                }\n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                attrBean.setSubject(subjectBean);\n                \n                AttributeBean attributeBean = new AttributeBean();\n                attributeBean.setSimpleName(\"subject-role\");\n                attributeBean.setAttributeValues(Collections.singletonList(\"system-user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","id":100129,"modified_method":"public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof SAMLCallback) {\n                SAMLCallback callback = (SAMLCallback) callbacks[i];\n                if (saml2) {\n                    callback.setSamlVersion(SAMLVersion.VERSION_20);\n                } else {\n                    callback.setSamlVersion(SAMLVersion.VERSION_11);\n                }\n                callback.setIssuer(\"sts\");\n                String subjectName = \"uid=sts-client,o=mock-sts.com\";\n                String subjectQualifier = \"www.mock-sts.com\";\n                if (!saml2 && SAML2Constants.CONF_SENDER_VOUCHES.equals(confirmationMethod)) {\n                    confirmationMethod = SAML1Constants.CONF_SENDER_VOUCHES;\n                }\n                SubjectBean subjectBean = \n                    new SubjectBean(\n                        subjectName, subjectQualifier, confirmationMethod\n                    );\n                if (SAML2Constants.CONF_HOLDER_KEY.equals(confirmationMethod)\n                    || SAML1Constants.CONF_HOLDER_KEY.equals(confirmationMethod)) {\n                    try {\n                        KeyInfoBean keyInfo = createKeyInfo();\n                        subjectBean.setKeyInfo(keyInfo);\n                    } catch (Exception ex) {\n                        throw new IOException(\"Problem creating KeyInfo: \" +  ex.getMessage());\n                    }\n                }\n                callback.setSubject(subjectBean);\n                \n                AttributeStatementBean attrBean = new AttributeStatementBean();\n                attrBean.setSubject(subjectBean);\n                \n                AttributeBean attributeBean = new AttributeBean();\n                if (saml2) {\n                    attributeBean.setQualifiedName(\"subject-role\");\n                } else {\n                    attributeBean.setSimpleName(\"subject-role\");\n                    attributeBean.setQualifiedName(\"http://custom-ns\");\n                }\n                attributeBean.setAttributeValues(Collections.singletonList(\"system-user\"));\n                attrBean.setSamlAttributes(Collections.singletonList(attributeBean));\n                callback.setAttributeStatementData(Collections.singletonList(attrBean));\n            }\n        }\n    }","commit_id":"7adda64131a95601705f790532f4289666c31b22","url":"https://github.com/apache/cxf"},{"original_method":"public static String getLabel(int state) {\n\t\tif (state == ACTIVE) {\n\t\t\treturn ACTIVE_LABEL;\n\t\t}\n\t\telse if (state == INSTALLED) {\n\t\t\treturn INSTALLED_LABEL;\n\t\t}\n\t\telse if (state == RESOLVED) {\n\t\t\treturn RESOLVED_LABEL;\n\t\t}\n\t\telse if (state == UNINSTALLED) {\n\t\t\treturn UNINSTALLED_LABEL;\n\t\t}\n\t\telse {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t}","id":100130,"modified_method":"public static String getLabel(int state) {\n\t\tif (state == ACTIVE) {\n\t\t\treturn ACTIVE_LABEL;\n\t\t}\n\t\telse if (state == INSTALLED) {\n\t\t\treturn INSTALLED_LABEL;\n\t\t}\n\t\telse if (state == RESOLVED) {\n\t\t\treturn RESOLVED_LABEL;\n\t\t}\n\t\telse if (state == UNINSTALLED) {\n\t\t\treturn UNINSTALLED_LABEL;\n\t\t}\n\t\telse {\n\t\t\treturn ANY_LABEL;\n\t\t}\n\t}","commit_id":"457eb3558b0dfbdd13f79a51b71bc5a1b72a466d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static int getState(String label) {\n\t\tif (label.equals(ACTIVE_LABEL)) {\n\t\t\treturn ACTIVE;\n\t\t}\n\t\telse if (label.equals(INSTALLED_LABEL)) {\n\t\t\treturn INSTALLED;\n\t\t}\n\t\telse if (label.equals(RESOLVED_LABEL)) {\n\t\t\treturn RESOLVED;\n\t\t}\n\t\telse if (label.equals(UNINSTALLED_LABEL)) {\n\t\t\treturn UNINSTALLED;\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\t}\n\t}","id":100131,"modified_method":"public static int getState(String label) {\n\t\tif (label.equals(ACTIVE_LABEL)) {\n\t\t\treturn ACTIVE;\n\t\t}\n\t\telse if (label.equals(INSTALLED_LABEL)) {\n\t\t\treturn INSTALLED;\n\t\t}\n\t\telse if (label.equals(RESOLVED_LABEL)) {\n\t\t\treturn RESOLVED;\n\t\t}\n\t\telse if (label.equals(UNINSTALLED_LABEL)) {\n\t\t\treturn UNINSTALLED;\n\t\t}\n\t\telse {\n\t\t\treturn ANY;\n\t\t}\n\t}","commit_id":"457eb3558b0dfbdd13f79a51b71bc5a1b72a466d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic List<ResultRowSplitterEntry> split(List<ResultRow> resultRows) {\n\t\tList<ResultRowSplitterEntry> resultRowSplitterEntries =\n\t\t\tnew ArrayList<>();\n\n\t\tList<ResultRow> suiteAppDisplayResultRows = new ArrayList<>();\n\t\tList<ResultRow> appDisplayResultRows = new ArrayList<>();\n\n\t\tfor (ResultRow resultRow : resultRows) {\n\t\t\tAppDisplay appDisplay = (AppDisplay)resultRow.getObject();\n\n\t\t\tif (appDisplay.hasModuleGroups()) {\n\t\t\t\tsuiteAppDisplayResultRows.add(resultRow);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tappDisplayResultRows.add(resultRow);\n\t\t\t}\n\t\t}\n\n\t\tif (!suiteAppDisplayResultRows.isEmpty()) {\n\t\t\tresultRowSplitterEntries.add(\n\t\t\t\tnew ResultRowSplitterEntry(\n\t\t\t\t\t\"app-suites\", suiteAppDisplayResultRows));\n\t\t}\n\n\t\tif (!appDisplayResultRows.isEmpty()) {\n\t\t\tresultRowSplitterEntries.add(\n\t\t\t\tnew ResultRowSplitterEntry(\"apps\", appDisplayResultRows));\n\t\t}\n\n\t\treturn resultRowSplitterEntries;\n\t}","id":100132,"modified_method":"@Override\n\tpublic List<ResultRowSplitterEntry> split(List<ResultRow> resultRows) {\n\t\tList<ResultRowSplitterEntry> resultRowSplitterEntries =\n\t\t\tnew ArrayList<>();\n\n\t\tList<ResultRow> appSuiteResultRows = new ArrayList<>();\n\t\tList<ResultRow> appResultRows = new ArrayList<>();\n\t\tList<ResultRow> moduleResultRows = new ArrayList<>();\n\n\t\tfor (ResultRow resultRow : resultRows) {\n\t\t\tObject object = resultRow.getObject();\n\n\t\t\tif (object instanceof AppDisplay) {\n\t\t\t\tAppDisplay appDisplay = (AppDisplay)object;\n\n\t\t\t\tif (appDisplay.hasModuleGroups()) {\n\t\t\t\t\tappSuiteResultRows.add(resultRow);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tappResultRows.add(resultRow);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (object instanceof ModuleGroupDisplay) {\n\t\t\t\tappResultRows.add(resultRow);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmoduleResultRows.add(resultRow);\n\t\t\t}\n\t\t}\n\n\t\tif (!appSuiteResultRows.isEmpty()) {\n\t\t\tresultRowSplitterEntries.add(\n\t\t\t\tnew ResultRowSplitterEntry(\"app-suites\", appSuiteResultRows));\n\t\t}\n\n\t\tif (!appResultRows.isEmpty()) {\n\t\t\tresultRowSplitterEntries.add(\n\t\t\t\tnew ResultRowSplitterEntry(\"apps\", appResultRows));\n\t\t}\n\n\t\tif (!moduleResultRows.isEmpty()) {\n\t\t\tresultRowSplitterEntries.add(\n\t\t\t\tnew ResultRowSplitterEntry(\"modules\", moduleResultRows));\n\t\t}\n\n\t\treturn resultRowSplitterEntries;\n\t}","commit_id":"457eb3558b0dfbdd13f79a51b71bc5a1b72a466d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Configure the repositories for our class loader, based on the\n     * associated Context.\n     */\n    private void setRepositories() {\n\n        if (!(container instanceof Context))\n            return;\n        ServletContext servletContext =\n            ((Context) container).getServletContext();\n        if (servletContext == null)\n            return;\n\n        loaderRepositories=new ArrayList();\n        // Loading the work directory\n        File workDir =\n            (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);\n        if (workDir == null) {\n            log.info(\"No work dir for \" + servletContext);\n        }\n\n        if( log.isDebugEnabled()) \n            log.debug(sm.getString(\"webappLoader.deploy\", workDir.getAbsolutePath()));\n\n        classLoader.setWorkDir(workDir);\n\n        DirContext resources = container.getResources();\n\n        // Setting up the class repository (/WEB-INF/classes), if it exists\n\n        String classesPath = \"/WEB-INF/classes\";\n        DirContext classes = null;\n\n        try {\n            Object object = resources.lookup(classesPath);\n            if (object instanceof DirContext) {\n                classes = (DirContext) object;\n            }\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/classes collection\n            // exists\n        }\n\n        if (classes != null) {\n\n            File classRepository = null;\n\n            String absoluteClassesPath =\n                servletContext.getRealPath(classesPath);\n\n            if (absoluteClassesPath != null) {\n\n                classRepository = new File(absoluteClassesPath);\n\n            } else {\n\n                classRepository = new File(workDir, classesPath);\n                classRepository.mkdirs();\n                copyDir(classes, classRepository);\n\n            }\n\n            if(log.isDebugEnabled())\n                log.debug(sm.getString(\"webappLoader.classDeploy\", classesPath,\n                             classRepository.getAbsolutePath()));\n\n\n            // Adding the repository to the class loader\n            classLoader.addRepository(classesPath + \"/\", classRepository);\n            loaderRepositories.add(classesPath + \"/\" );\n\n        }\n\n        // Setting up the JAR repository (/WEB-INF/lib), if it exists\n\n        String libPath = \"/WEB-INF/lib\";\n\n        classLoader.setJarPath(libPath);\n\n        DirContext libDir = null;\n        // Looking up directory /WEB-INF/lib in the context\n        try {\n            Object object = resources.lookup(libPath);\n            if (object instanceof DirContext)\n                libDir = (DirContext) object;\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/lib collection\n            // exists\n        }\n\n        if (libDir != null) {\n\n            boolean copyJars = false;\n            String absoluteLibPath = servletContext.getRealPath(libPath);\n\n            File destDir = null;\n\n            if (absoluteLibPath != null) {\n                destDir = new File(absoluteLibPath);\n            } else {\n                copyJars = true;\n                destDir = new File(workDir, libPath);\n                destDir.mkdirs();\n            }\n\n            // Looking up directory /WEB-INF/lib in the context\n            try {\n                NamingEnumeration enumeration = resources.listBindings(libPath);\n                while (enumeration.hasMoreElements()) {\n\n                    Binding binding = (Binding) enumeration.nextElement();\n                    String filename = libPath + \"/\" + binding.getName();\n                    if (!filename.endsWith(\".jar\"))\n                        continue;\n\n                    // Copy JAR in the work directory, always (the JAR file\n                    // would get locked otherwise, which would make it\n                    // impossible to update it or remove it at runtime)\n                    File destFile = new File(destDir, binding.getName());\n\n                    // Ignore directories named xxx.jar\n                    if (destFile.isDirectory())\n                        continue;\n\n                    if( log.isDebugEnabled())\n                    log.debug(sm.getString(\"webappLoader.jarDeploy\", filename,\n                                     destFile.getAbsolutePath()));\n\n                    Resource jarResource = (Resource) binding.getObject();\n                    if (copyJars) {\n                        if (!copy(jarResource.streamContent(),\n                                  new FileOutputStream(destFile)))\n                            continue;\n                    }\n\n                    try {\n                        JarFile jarFile = new JarFile(destFile);\n                        classLoader.addJar(filename, jarFile, destFile);\n                    } catch (Exception ex) {\n                        // Catch the exception if there is an empty jar file\n                        // Should ignore and continute loading other jar files \n                        // in the dir\n                    }\n                    \n                    loaderRepositories.add( filename );\n\n                }\n            } catch (NamingException e) {\n                // Silent catch: it's valid that no /WEB-INF/lib directory\n                // exists\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n    }","id":100133,"modified_method":"/**\n     * Configure the repositories for our class loader, based on the\n     * associated Context.\n     */\n    private void setRepositories() {\n\n        if (!(container instanceof Context))\n            return;\n        ServletContext servletContext =\n            ((Context) container).getServletContext();\n        if (servletContext == null)\n            return;\n\n        loaderRepositories=new ArrayList();\n        // Loading the work directory\n        File workDir =\n            (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);\n        if (workDir == null) {\n            log.info(\"No work dir for \" + servletContext);\n        }\n\n        if( log.isDebugEnabled()) \n            log.debug(sm.getString(\"webappLoader.deploy\", workDir.getAbsolutePath()));\n\n        classLoader.setWorkDir(workDir);\n\n        DirContext resources = container.getResources();\n\n        // Setting up the class repository (/WEB-INF/classes), if it exists\n\n        String classesPath = \"/WEB-INF/classes\";\n        DirContext classes = null;\n\n        try {\n            Object object = resources.lookup(classesPath);\n            if (object instanceof DirContext) {\n                classes = (DirContext) object;\n            }\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/classes collection\n            // exists\n        }\n\n        if (classes != null) {\n\n            File classRepository = null;\n\n            String absoluteClassesPath =\n                servletContext.getRealPath(classesPath);\n\n            if (absoluteClassesPath != null) {\n\n                classRepository = new File(absoluteClassesPath);\n\n            } else {\n\n                classRepository = new File(workDir, classesPath);\n                classRepository.mkdirs();\n                copyDir(classes, classRepository);\n\n            }\n\n            if(log.isDebugEnabled())\n                log.debug(sm.getString(\"webappLoader.classDeploy\", classesPath,\n                             classRepository.getAbsolutePath()));\n\n\n            // Adding the repository to the class loader\n            classLoader.addRepository(classesPath + \"/\", classRepository);\n            loaderRepositories.add(classesPath + \"/\" );\n\n        }\n\n        // Setting up the JAR repository (/WEB-INF/lib), if it exists\n\n        String libPath = \"/WEB-INF/lib\";\n\n        classLoader.setJarPath(libPath);\n\n        DirContext libDir = null;\n        // Looking up directory /WEB-INF/lib in the context\n        try {\n            Object object = resources.lookup(libPath);\n            if (object instanceof DirContext)\n                libDir = (DirContext) object;\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/lib collection\n            // exists\n        }\n\n        if (libDir != null) {\n\n            boolean copyJars = false;\n            String absoluteLibPath = servletContext.getRealPath(libPath);\n\n            File destDir = null;\n\n            if (absoluteLibPath != null) {\n                destDir = new File(absoluteLibPath);\n            } else {\n                copyJars = true;\n                destDir = new File(workDir, libPath);\n                destDir.mkdirs();\n            }\n\n            // Looking up directory /WEB-INF/lib in the context\n            try {\n                NamingEnumeration enumeration = resources.listBindings(libPath);\n                while (enumeration.hasMoreElements()) {\n\n                    Binding binding = (Binding) enumeration.nextElement();\n                    String filename = libPath + \"/\" + binding.getName();\n                    if (!filename.endsWith(\".jar\"))\n                        continue;\n\n                    // Copy JAR in the work directory, always (the JAR file\n                    // would get locked otherwise, which would make it\n                    // impossible to update it or remove it at runtime)\n                    File destFile = new File(destDir, binding.getName());\n\n                    if( log.isDebugEnabled())\n                    log.debug(sm.getString(\"webappLoader.jarDeploy\", filename,\n                                     destFile.getAbsolutePath()));\n\n                    Object obj = binding.getObject();\n                    \n                    if (!(obj instanceof Resource))\n                        continue;\n                    \n                    Resource jarResource = (Resource) obj;\n                    \n                    if (copyJars) {\n                        if (!copy(jarResource.streamContent(),\n                                  new FileOutputStream(destFile)))\n                            continue;\n                    }\n\n                    try {\n                        JarFile jarFile = new JarFile(destFile);\n                        classLoader.addJar(filename, jarFile, destFile);\n                    } catch (Exception ex) {\n                        // Catch the exception if there is an empty jar file\n                        // Should ignore and continute loading other jar files \n                        // in the dir\n                    }\n                    \n                    loaderRepositories.add( filename );\n\n                }\n            } catch (NamingException e) {\n                // Silent catch: it's valid that no /WEB-INF/lib directory\n                // exists\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n    }","commit_id":"d8a569bc65d4839d615ed33a9c56d937a8206c14","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n    {\n        try\n        {\n            final Continuation continuation = ContinuationSupport.getContinuation(request, mutex);\n            synchronized (mutex)\n            {\n                MessageReceiver receiver = getReceiverForURI(request);\n\n                MuleMessage requestMessage = receiver.createMuleMessage(request);\n                requestMessage.setOutboundProperty(HttpConnector.HTTP_METHOD_PROPERTY, request.getMethod());\n\n                //This will allow Mule to continue the response once the service has do its processing\n                requestMessage.setReplyTo(continuation);\n                setupRequestMessage(request, requestMessage, receiver);\n\n                //we force asynchronous in the {@link #routeMessage} method\n                routeMessage(receiver, requestMessage, request);\n\n                continuation.suspend(10000);\n            }\n\n            writeResponse(response, (MuleMessage) continuation.getObject());\n        }\n        catch (Exception e)\n        {\n            throw new ServletException(e);\n        }\n    }","id":100134,"modified_method":"@Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n    {\n        try\n        {\n            MuleMessage responseMessage = null;\n            \n            synchronized (mutex)\n            {\n                Continuation continuation = ContinuationSupport.getContinuation(request, mutex);\n                \n                if (!continuation.isPending())\n                {\n                    // case where we are processing this request for the first time (suspend has not been called)\n                    \n                    MessageReceiver receiver = getReceiverForURI(request);\n                    \n                    MuleMessage requestMessage = receiver.createMuleMessage(request);\n                    requestMessage.setOutboundProperty(HttpConnector.HTTP_METHOD_PROPERTY, request.getMethod());\n    \n                    ContinuationsReplyTo continuationsReplyTo = new ContinuationsReplyTo(continuation, mutex);\n                    //This will allow Mule to continue the response once the service has do its processing\n                    requestMessage.setReplyTo(continuationsReplyTo);\n                    setupRequestMessage(request, requestMessage, receiver);\n                    \n                    if (receiver instanceof JettyHttpMessageReceiver)\n                    {\n                        //we force asynchronous in the {@link #routeMessage} method\n                        JettyHttpMessageReceiver jettyReceiver = (JettyHttpMessageReceiver) receiver;\n                        jettyReceiver.routeMessageAsync(requestMessage, continuationsReplyTo);\n                        \n                        // suspend indefinitely\n                        //TODO: perhaps we can make this configurable just like Http's keepSocketAlive is\n                        continuation.suspend(0L);\n                    }\n                    else\n                    {\n                        responseMessage = receiver.routeMessage(requestMessage).getMessage();\n                        writeResponse(response, responseMessage);\n                    }\n                }\n                else\n                {\n                    // case where we are processing this request for the second time. \n                    if (continuation.isResumed())\n                    {\n                        // the continuation was resumed so the response should be there\n                        Object r = continuation.getObject();\n                        // response object is either a MuleMessage of an Exception if there was an error\n                        if (r instanceof MuleMessage)\n                        {\n                            responseMessage = (MuleMessage) r;\n                            // clear the object because jetty reuses continuations for the same connection\n                            continuation.setObject(null);\n                            \n                            writeResponse(response, responseMessage);\n                        }\n                        else if (r instanceof Exception)\n                        {\n                            if (r instanceof MessagingException)\n                            {\n                                // Reset access control on the MuleEvent because its message's owner is a different thread\n                                // Otherwise when the message is modified during exception handling, it will fail\n                                MessagingException me = (MessagingException) r;\n                                MuleEvent event = me.getEvent();\n                                if (event instanceof DefaultMuleEvent)\n                                {\n                                    ((DefaultMuleEvent) event).resetAccessControl();\n                                }\n                            }\n                            throw (Exception) r;\n                        }\n                    }\n                }\n            }\n        }\n        catch (RuntimeException e)\n        {\n            // Jetty continuations throw a subclass of RuntimeException when suspend is don't treat them as errors\n            throw new ServletException(e);\n        }\n        catch (Exception e)\n        {\n            String message = e.getMessage();\n            handleException(e, message, response);\n        }\n    }","commit_id":"3e31fa505ed172af644c74a2ca0a6498bf24f0fe","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public void processReplyTo(MuleEvent event, MuleMessage returnMessage, Object replyTo) throws MuleException\n    {\n        Continuation continuation = (Continuation)replyTo;\n        continuation.setObject(returnMessage);\n        continuation.resume();\n    }","id":100135,"modified_method":"@Override\n    public void processReplyTo(MuleEvent event, MuleMessage returnMessage, Object replyTo) throws MuleException\n    {\n        ContinuationsReplyTo continuationReplyTo = (ContinuationsReplyTo) replyTo;\n        continuationReplyTo.setAndResume(returnMessage);\n    }","commit_id":"3e31fa505ed172af644c74a2ca0a6498bf24f0fe","url":"https://github.com/mulesoft/mule"},{"original_method":"public void handleInsert(InsertionContext context, LookupElementDecorator<LookupItem> item) {\n    final Editor editor = context.getEditor();\n    final Document document = editor.getDocument();\n\n    @SuppressWarnings({\"unchecked\"}) final LookupItem<PsiClass> delegate = item.getDelegate();\n    delegate.handleInsert(context);\n\n    PsiDocumentManager.getInstance(context.getProject()).doPostponedOperationsAndUnblockDocument(document);\n\n    final PsiFile file = context.getFile();\n    final PsiElement place = file.findElementAt(context.getStartOffset());\n    final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();\n    assert place != null;\n    boolean hasParams = false;\n    for (PsiMethod constructor : delegate.getObject().getConstructors()) {\n      if (!resolveHelper.isAccessible(constructor, place, null)) continue;\n      if (constructor.getParameterList().getParametersCount() > 0) {\n        hasParams = true;\n        break;\n      }\n    }\n\n    PsiMethodInsertHandler.insertParentheses(context, delegate, false, hasParams);\n\n    final PsiElement position = SmartCompletionDecorator.getPosition(context, delegate);\n\n    final PsiExpression enclosing = PsiTreeUtil.getContextOfType(position, PsiExpression.class, true);\n    if (item.getUserData(LookupItem.BRACKETS_COUNT_ATTR) == null) {\n      final PsiAnonymousClass anonymousClass = PsiTreeUtil.getParentOfType(position, PsiAnonymousClass.class);\n      if (anonymousClass == null || anonymousClass.getParent() != enclosing) {\n\n        final PsiClass psiClass = (PsiClass)item.getObject();\n\n        if (psiClass.hasModifierProperty(PsiModifier.ABSTRACT) || psiClass.isInterface()) {\n          FeatureUsageTracker.getInstance().triggerFeatureUsed(\"editing.completion.smarttype.anonymous\");\n\n          document.insertString(editor.getCaretModel().getOffset(), \" {}\");\n          editor.getCaretModel().moveToOffset(editor.getCaretModel().getOffset() + 2);\n          context.setLaterRunnable(generateAnonymousBody(editor, file));\n\n        }\n        else {\n          FeatureUsageTracker.getInstance().triggerFeatureUsed(\"editing.completion.smarttype.afternew\");\n        }\n      }\n    }\n  }","id":100136,"modified_method":"public void handleInsert(InsertionContext context, LookupElementDecorator<LookupItem> item) {\n    @SuppressWarnings({\"unchecked\"}) final LookupItem<PsiClass> delegate = item.getDelegate();\n    delegate.handleInsert(context);\n\n    insertParentheses(context, delegate, delegate.getObject());\n\n    final PsiElement position = SmartCompletionDecorator.getPosition(context, delegate);\n\n    final PsiExpression enclosing = PsiTreeUtil.getContextOfType(position, PsiExpression.class, true);\n    if (item.getUserData(LookupItem.BRACKETS_COUNT_ATTR) == null) {\n      final PsiAnonymousClass anonymousClass = PsiTreeUtil.getParentOfType(position, PsiAnonymousClass.class);\n      if (anonymousClass == null || anonymousClass.getParent() != enclosing) {\n\n        final PsiClass psiClass = (PsiClass)item.getObject();\n\n        if (psiClass.hasModifierProperty(PsiModifier.ABSTRACT) || psiClass.isInterface()) {\n          FeatureUsageTracker.getInstance().triggerFeatureUsed(\"editing.completion.smarttype.anonymous\");\n\n          final Editor editor = context.getEditor();\n          editor.getDocument().insertString(editor.getCaretModel().getOffset(), \" {}\");\n          editor.getCaretModel().moveToOffset(editor.getCaretModel().getOffset() + 2);\n          context.setLaterRunnable(generateAnonymousBody(editor, context.getFile()));\n        }\n        else {\n          FeatureUsageTracker.getInstance().triggerFeatureUsed(\"editing.completion.smarttype.afternew\");\n        }\n      }\n    }\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean isToInsertParenth(){\n    boolean needParens = false;\n    if (myLookupItem.getAttribute(LookupItem.NEW_OBJECT_ATTR) != null){\n      PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);\n      needParens = true;\n      final PsiClass aClass = (PsiClass)myLookupItem.getObject();\n\n      PsiElement place = myFile.findElementAt(myContext.getStartOffset());\n\n      if(myLookupItem.getAttribute(LookupItem.DONT_CHECK_FOR_INNERS) == null){\n        PsiClass[] classes = aClass.getInnerClasses();\n        for (PsiClass inner : classes) {\n          if (!inner.hasModifierProperty(PsiModifier.STATIC)) continue;\n          if (!JavaPsiFacade.getInstance(inner.getProject()).getResolveHelper().isAccessible(inner, place, null)) continue;\n          needParens = false;\n          break;\n        }\n      }\n    } else if (insertingAnnotationWithParameters()) {\n      needParens = true;\n    }\n    return needParens;\n  }","id":100137,"modified_method":"private boolean isToInsertParenth(){\n    return insertingAnnotationWithParameters();\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected TailType getTailType(final char completionChar){\n    switch(completionChar){\n      case '.': return TailType.DOT;\n      case ',': return TailType.COMMA;\n      case ';': return TailType.SEMICOLON;\n      case '=': return TailType.EQ;\n      case ' ': return TailType.SPACE;\n      case ':': return TailType.CASE_COLON; //?\n      case '(': return TailTypeEx.SMART_LPARENTH;\n      case '<':\n      case '>':\n      case '#':\n      case '\\\"':\n      case '[': return TailType.createSimpleTailType(completionChar);\n      //case '!': if (!(myLookupItem.getObject() instanceof PsiVariable)) return TailType.EXCLAMATION;\n    }\n    final TailType attr = myLookupItem.getTailType();\n    return attr == TailType.UNKNOWN ? TailType.NONE : attr;\n  }","id":100138,"modified_method":"protected TailType getTailType(final char completionChar){\n    switch(completionChar){\n      case '.': return TailType.DOT;\n      case ',': return TailType.COMMA;\n      case ';': return TailType.SEMICOLON;\n      case '=': return TailType.EQ;\n      case ' ': return TailType.SPACE;\n      case ':': return TailType.CASE_COLON; //?\n      case '<':\n      case '>':\n      case '#':\n      case '\\\"':\n      case '[': return TailType.createSimpleTailType(completionChar);\n    }\n    final TailType attr = myLookupItem.getTailType();\n    return attr == TailType.UNKNOWN ? TailType.NONE : attr;\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void handleInsertInner(InsertionContext context, LookupItem item, final char completionChar) {\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    PsiDocumentManager.getInstance(context.getProject()).commitDocument(context.getEditor().getDocument());\n    myContext = context;\n    myLookupItem = item;\n\n    myProject = myContext.getProject();\n    myFile = myContext.getFile();\n    myEditor = myContext.getEditor();\n    myDocument = myEditor.getDocument();\n\n    TailType tailType = getTailType(completionChar);\n    if (completionChar == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) {\n      //tailType = TailType.SMART_COMPLETION;\n    }\n    if (myLookupItem.getAttribute(LookupItem.NEW_OBJECT_ATTR) != null && completionChar == '(') {\n      tailType = TailType.NONE;\n    }\n\n    myState = new InsertHandlerState(myContext.getSelectionEndOffset(), myContext.getSelectionEndOffset());\n\n    final boolean needLeftParenth = isToInsertParenth();\n    final boolean hasParams = needLeftParenth && hasParams();\n\n    if (CompletionUtil.isOverwrite(item, completionChar))\n      removeEndOfIdentifier(needLeftParenth && hasParams);\n    else if(myContext.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET) != myContext.getSelectionEndOffset())\n      JavaCompletionUtil.resetParensInfo(context.getOffsetMap());\n\n    handleParenses(hasParams, needLeftParenth, tailType);\n    handleBrackets();\n\n    if (myLookupItem.getObject() instanceof PsiVariable) {\n      if (completionChar == '!' && PsiType.BOOLEAN.isAssignableFrom(((PsiVariable) myLookupItem.getObject()).getType())) {\n        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);\n        final PsiReferenceExpression ref =\n            PsiTreeUtil.findElementOfClassAtOffset(myFile, myState.tailOffset - 1, PsiReferenceExpression.class, false);\n        if (ref != null) {\n          FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);\n          myDocument.insertString(ref.getTextRange().getStartOffset(), \"!\");\n          myState.caretOffset++;\n          myState.tailOffset++;\n        }\n      }\n    }\n\n    RangeMarker saveMaker = null;\n    final boolean generateAnonymousBody = myLookupItem.getAttribute(LookupItem.GENERATE_ANONYMOUS_BODY_ATTR) != null;\n    if (generateAnonymousBody){\n      saveMaker = myDocument.createRangeMarker(myState.caretOffset, myState.caretOffset);\n      myDocument.insertString(myState.tailOffset, \"{}\");\n      myState.caretOffset = myState.tailOffset + 1;\n      myState.tailOffset += 2;\n    }\n\n    myContext.setTailOffset(myState.tailOffset);\n    myState.caretOffset = processTail(tailType, myState.caretOffset, myState.tailOffset);\n    myEditor.getSelectionModel().removeSelection();\n\n    qualifyIfNeeded();\n\n\n    if (needLeftParenth && hasParams){\n      // Invoke parameters popup\n      AutoPopupController.getInstance(myProject).autoPopupParameterInfo(myEditor, null);\n    }\n\n    if (tailType == TailType.DOT){\n      AutoPopupController.getInstance(myProject).autoPopupMemberLookup(myEditor, null);\n    }\n\n    if (generateAnonymousBody) {\n      if (hasParams) {\n        int offset = saveMaker.getStartOffset();\n        myEditor.getCaretModel().moveToOffset(offset);\n        myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n        myEditor.getSelectionModel().removeSelection();\n      }\n      return;\n    }\n\n    if (completionChar == '#') {\n      context.setLaterRunnable(new Runnable() {\n        public void run() {\n           new CodeCompletionHandlerBase(CompletionType.BASIC) {\n           }.invoke(myProject, myEditor, myFile);\n        }\n      });\n    }\n\n    if (insertingAnnotation()) {\n      // Check if someone inserts annotation class that require @\n      PsiElement elementAt = myFile.findElementAt(myContext.getStartOffset());\n      final PsiElement parentElement = elementAt != null ? elementAt.getParent():null;\n\n      if (elementAt instanceof PsiIdentifier &&\n          (PsiTreeUtil.getParentOfType(elementAt, PsiAnnotationParameterList.class) != null ||\n           parentElement instanceof PsiErrorElement && parentElement.getParent() instanceof PsiJavaFile // top level annotation without @\n          )\n          && isAtTokenNeeded()) {\n        int expectedOffsetForAtToken = elementAt.getTextRange().getStartOffset();\n        myDocument.insertString(expectedOffsetForAtToken, \"@\");\n      }\n    }\n  }","id":100139,"modified_method":"private void handleInsertInner(InsertionContext context, LookupItem item, final char completionChar) {\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    PsiDocumentManager.getInstance(context.getProject()).commitDocument(context.getEditor().getDocument());\n    myContext = context;\n    myLookupItem = item;\n\n    myProject = myContext.getProject();\n    myFile = myContext.getFile();\n    myEditor = myContext.getEditor();\n    myDocument = myEditor.getDocument();\n\n    TailType tailType = getTailType(completionChar);\n\n    myState = new InsertHandlerState(myContext.getSelectionEndOffset(), myContext.getSelectionEndOffset());\n\n    final boolean needLeftParenth = isToInsertParenth();\n    final boolean hasParams = needLeftParenth && hasParams();\n\n    if (CompletionUtil.isOverwrite(item, completionChar))\n      removeEndOfIdentifier(needLeftParenth && hasParams);\n    else if(myContext.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET) != myContext.getSelectionEndOffset())\n      JavaCompletionUtil.resetParensInfo(context.getOffsetMap());\n\n    handleParenses(hasParams, needLeftParenth, tailType);\n    handleBrackets();\n\n    if (myLookupItem.getObject() instanceof PsiVariable) {\n      if (completionChar == '!' && PsiType.BOOLEAN.isAssignableFrom(((PsiVariable) myLookupItem.getObject()).getType())) {\n        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);\n        final PsiReferenceExpression ref =\n            PsiTreeUtil.findElementOfClassAtOffset(myFile, myState.tailOffset - 1, PsiReferenceExpression.class, false);\n        if (ref != null) {\n          FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);\n          myDocument.insertString(ref.getTextRange().getStartOffset(), \"!\");\n          myState.caretOffset++;\n          myState.tailOffset++;\n        }\n      }\n    }\n\n    myContext.setTailOffset(myState.tailOffset);\n    myState.caretOffset = processTail(tailType, myState.caretOffset, myState.tailOffset);\n    myEditor.getSelectionModel().removeSelection();\n\n    qualifyIfNeeded();\n\n\n    if (needLeftParenth && hasParams){\n      // Invoke parameters popup\n      AutoPopupController.getInstance(myProject).autoPopupParameterInfo(myEditor, null);\n    }\n\n    if (tailType == TailType.DOT){\n      AutoPopupController.getInstance(myProject).autoPopupMemberLookup(myEditor, null);\n    }\n\n    if (completionChar == '#') {\n      context.setLaterRunnable(new Runnable() {\n        public void run() {\n           new CodeCompletionHandlerBase(CompletionType.BASIC) {\n           }.invoke(myProject, myEditor, myFile);\n        }\n      });\n    }\n\n    if (insertingAnnotation()) {\n      // Check if someone inserts annotation class that require @\n      PsiElement elementAt = myFile.findElementAt(myContext.getStartOffset());\n      final PsiElement parentElement = elementAt != null ? elementAt.getParent():null;\n\n      if (elementAt instanceof PsiIdentifier &&\n          (PsiTreeUtil.getParentOfType(elementAt, PsiAnnotationParameterList.class) != null ||\n           parentElement instanceof PsiErrorElement && parentElement.getParent() instanceof PsiJavaFile // top level annotation without @\n          )\n          && isAtTokenNeeded()) {\n        int expectedOffsetForAtToken = elementAt.getTextRange().getStartOffset();\n        myDocument.insertString(expectedOffsetForAtToken, \"@\");\n      }\n    }\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean hasParams(){\n    boolean hasParms = false;\n    if (myLookupItem.getAttribute(LookupItem.NEW_OBJECT_ATTR) != null){\n      PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);\n      final PsiClass aClass = (PsiClass)myLookupItem.getObject();\n\n      final PsiElement place = myFile.findElementAt(myContext.getStartOffset());\n\n      final PsiMethod[] constructors = aClass.getConstructors();\n      for (PsiMethod constructor : constructors) {\n        if (!JavaPsiFacade.getInstance(aClass.getProject()).getResolveHelper().isAccessible(constructor, place, null)) continue;\n        if (constructor.getParameterList().getParametersCount() > 0) {\n          hasParms = true;\n          break;\n        }\n      }\n    }\n    else {\n      final String lookupString = myLookupItem.getLookupString();\n      if (PsiKeyword.SYNCHRONIZED.equals(lookupString)) {\n        final PsiElement place = myFile.findElementAt(myContext.getStartOffset());\n        hasParms = PsiTreeUtil.getParentOfType(place, PsiMember.class, PsiCodeBlock.class) instanceof PsiCodeBlock;\n      }\n      else if(PsiKeyword.CATCH.equals(lookupString) ||\n              PsiKeyword.SWITCH.equals(lookupString) ||\n              PsiKeyword.WHILE.equals(lookupString) ||\n              PsiKeyword.FOR.equals(lookupString))\n        hasParms = true;\n      else if (insertingAnnotationWithParameters()) {\n        hasParms = true;\n      }\n    }\n    return hasParms;\n  }","id":100140,"modified_method":"private boolean hasParams(){\n    final String lookupString = myLookupItem.getLookupString();\n    if (PsiKeyword.SYNCHRONIZED.equals(lookupString)) {\n      final PsiElement place = myFile.findElementAt(myContext.getStartOffset());\n      return PsiTreeUtil.getParentOfType(place, PsiMember.class, PsiCodeBlock.class) instanceof PsiCodeBlock;\n    }\n    else if(PsiKeyword.CATCH.equals(lookupString) ||\n            PsiKeyword.SWITCH.equals(lookupString) ||\n            PsiKeyword.WHILE.equals(lookupString) ||\n            PsiKeyword.FOR.equals(lookupString))\n      return true;\n    else if (insertingAnnotationWithParameters()) {\n      return true;\n    }\n    return false;\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void handleParenses(final boolean hasParams, final boolean needParenth, TailType tailType){\n    final boolean generateAnonymousBody = myLookupItem.getAttribute(LookupItem.GENERATE_ANONYMOUS_BODY_ATTR) != null;\n    boolean insertRightParenth = tailType != TailType.SMART_COMPLETION;\n\n    if (needParenth){\n      if (myContext.getOffsetMap().getOffset(JavaCompletionUtil.LPAREN_OFFSET) >= 0 && myContext.getOffsetMap().getOffset(JavaCompletionUtil.ARG_LIST_END_OFFSET) >= 0){\n        myState.tailOffset = myContext.getOffsetMap().getOffset(JavaCompletionUtil.ARG_LIST_END_OFFSET);\n        if (myContext.getOffsetMap().getOffset(JavaCompletionUtil.RPAREN_OFFSET) < 0 && insertRightParenth){\n          myDocument.insertString(myState.tailOffset, \")\");\n          myState.tailOffset += 1;\n        }\n        if (hasParams){\n          myState.caretOffset = myContext.getOffsetMap().getOffset(JavaCompletionUtil.LPAREN_OFFSET) + 1;\n        }\n        else{\n          myState.caretOffset = myContext.getOffsetMap().getOffset(JavaCompletionUtil.ARG_LIST_END_OFFSET);\n        }\n      }\n      else{\n        final CodeStyleSettings styleSettings = CodeStyleSettingsManager.getSettings(myProject);\n        myState.tailOffset = myContext.getSelectionEndOffset();\n        myState.caretOffset = myContext.getSelectionEndOffset();\n\n        if(styleSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES){\n          myDocument.insertString(myState.tailOffset++, \" \");\n          myState.caretOffset ++;\n        }\n        if (insertRightParenth) {\n          final CharSequence charsSequence = myDocument.getCharsSequence();\n          if (charsSequence.length() <= myState.tailOffset || charsSequence.charAt(myState.tailOffset) != '(') {\n            myDocument.insertString(myState.tailOffset, \"(\");\n          }\n\n          myDocument.insertString(myState.tailOffset + 1, \")\");\n          if (hasParams){\n            myState.tailOffset += 2;\n            myState.caretOffset++;\n          }\n          else{\n            if (tailType != TailTypes.CALL_RPARENTH || generateAnonymousBody) {\n              myState.tailOffset += 2;\n              myState.caretOffset += 2;\n            }\n            else {\n              myState.tailOffset++;\n              myState.caretOffset++;\n            }\n          }\n        }\n        else{\n          myDocument.insertString(myState.tailOffset++, \"(\");\n          myState.caretOffset ++;\n        }\n\n        if(hasParams && styleSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES){\n          myDocument.insertString(myState.caretOffset++, \" \");\n          myState.tailOffset++;\n        }\n      }\n    }\n  }","id":100141,"modified_method":"private void handleParenses(final boolean hasParams, final boolean needParenth, TailType tailType){\n    boolean insertRightParenth = tailType != TailType.SMART_COMPLETION;\n\n    if (needParenth){\n      if (myContext.getOffsetMap().getOffset(JavaCompletionUtil.LPAREN_OFFSET) >= 0 && myContext.getOffsetMap().getOffset(JavaCompletionUtil.ARG_LIST_END_OFFSET) >= 0){\n        myState.tailOffset = myContext.getOffsetMap().getOffset(JavaCompletionUtil.ARG_LIST_END_OFFSET);\n        if (myContext.getOffsetMap().getOffset(JavaCompletionUtil.RPAREN_OFFSET) < 0 && insertRightParenth){\n          myDocument.insertString(myState.tailOffset, \")\");\n          myState.tailOffset += 1;\n        }\n        if (hasParams){\n          myState.caretOffset = myContext.getOffsetMap().getOffset(JavaCompletionUtil.LPAREN_OFFSET) + 1;\n        }\n        else{\n          myState.caretOffset = myContext.getOffsetMap().getOffset(JavaCompletionUtil.ARG_LIST_END_OFFSET);\n        }\n      }\n      else{\n        final CodeStyleSettings styleSettings = CodeStyleSettingsManager.getSettings(myProject);\n        myState.tailOffset = myContext.getSelectionEndOffset();\n        myState.caretOffset = myContext.getSelectionEndOffset();\n\n        if(styleSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES){\n          myDocument.insertString(myState.tailOffset++, \" \");\n          myState.caretOffset ++;\n        }\n        if (insertRightParenth) {\n          final CharSequence charsSequence = myDocument.getCharsSequence();\n          if (charsSequence.length() <= myState.tailOffset || charsSequence.charAt(myState.tailOffset) != '(') {\n            myDocument.insertString(myState.tailOffset, \"(\");\n          }\n\n          myDocument.insertString(myState.tailOffset + 1, \")\");\n          if (hasParams){\n            myState.tailOffset += 2;\n            myState.caretOffset++;\n          }\n          else{\n            if (tailType != TailTypes.CALL_RPARENTH) {\n              myState.tailOffset += 2;\n              myState.caretOffset += 2;\n            }\n            else {\n              myState.tailOffset++;\n              myState.caretOffset++;\n            }\n          }\n        }\n        else{\n          myDocument.insertString(myState.tailOffset++, \"(\");\n          myState.caretOffset ++;\n        }\n\n        if(hasParams && styleSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES){\n          myDocument.insertString(myState.caretOffset++, \" \");\n          myState.tailOffset++;\n        }\n      }\n    }\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GroovyCompletionContributor() {\n    extend(CompletionType.BASIC, psiElement(PsiElement.class), new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull final CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        final PsiElement reference = position.getParent();\n        if (reference == null) return;\n        if (isReferenceInNewExpression(reference)) {\n          //reference in new Expression\n          ((GrCodeReferenceElement)reference).processVariants(new Consumer<Object>() {\n            public void consume(Object element) {\n              if (element instanceof PsiClass) {\n                final PsiClass clazz = (PsiClass)element;\n                final MutableLookupElement<PsiClass> lookupElement = LookupElementFactory.getInstance().createLookupElement(clazz);\n                result.addElement(GroovyCompletionUtil.setTailTypeForConstructor(clazz, lookupElement));\n              }\n              else {\n                result.addElement(LookupItemUtil.objectToLookupItem(element));\n              }\n            }\n          });\n\n        }\n        else if (reference instanceof GrReferenceElement) {\n//          final boolean addGDKMethods = parameters.getInvocationCount() > 1;\n          ((GrReferenceElement)reference).processVariants(new Consumer<Object>() {\n            public void consume(Object element) {\n              LookupElement lookupElement = LookupItemUtil.objectToLookupItem(element);\n//              if (lookupElement.getObject() instanceof GrGdkMethod && !addGDKMethods) return;\n              if (lookupElement instanceof LookupItem) {\n                lookupElement = ((LookupItem)lookupElement).setInsertHandler(new GroovyInsertHandlerAdapter());\n              }\n              result.addElement(lookupElement);\n            }\n          });\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, AFTER_NEW, new CompletionProvider<CompletionParameters>(false) {\n      public void addCompletions(@NotNull final CompletionParameters parameters,\n                                 final ProcessingContext matchingContext,\n                                 @NotNull final CompletionResultSet result) {\n        final PsiElement identifierCopy = parameters.getPosition();\n        final PsiFile file = parameters.getOriginalFile();\n\n        final List<PsiClassType> expectedClassTypes = new SmartList<PsiClassType>();\n        final List<PsiArrayType> expectedArrayTypes = new ArrayList<PsiArrayType>();\n\n        ApplicationManager.getApplication().runReadAction(new Runnable() {\n          public void run() {\n            PsiType psiType = ((GrVariable)identifierCopy.getParent().getParent().getParent()).getTypeGroovy();\n            if (psiType instanceof PsiClassType) {\n              PsiType type = JavaCompletionUtil.eliminateWildcards(JavaCompletionUtil.originalize(psiType));\n              final PsiClassType classType = (PsiClassType)type;\n              if (classType.resolve() != null) {\n                expectedClassTypes.add(classType);\n              }\n            }\n            else if (psiType instanceof PsiArrayType) {\n              expectedArrayTypes.add((PsiArrayType)psiType);\n            }\n          }\n        });\n\n        for (final PsiArrayType type : expectedArrayTypes) {\n          ApplicationManager.getApplication().runReadAction(new Runnable() {\n            public void run() {\n              final LookupItem item = (LookupItem)LookupItemUtil.objectToLookupItem(JavaCompletionUtil.eliminateWildcards(type));\n              item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS, \"\");\n              if (item.getObject() instanceof PsiClass) {\n                JavaCompletionUtil.setShowFQN(item);\n              }\n              item.setInsertHandler(new ArrayInsertHandler());\n              result.addElement(item);\n            }\n          });\n        }\n\n        JavaSmartCompletionContributor.processInheritors(parameters, identifierCopy, file, expectedClassTypes, new Consumer<PsiType>() {\n          public void consume(final PsiType type) {\n            addExpectedType(result, type, identifierCopy);\n          }\n        }, result.getPrefixMatcher());\n      }\n    });\n\n    //provide 'this' and 'super' completions in ClassName.<caret>\n    extend(CompletionType.BASIC, AFTER_DOT, new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n\n        assert position.getParent() instanceof GrReferenceExpression;\n        final GrReferenceExpression refExpr = ((GrReferenceExpression)position.getParent());\n        final GrExpression qualifier = refExpr.getQualifierExpression();\n        if (!(qualifier instanceof GrReferenceExpression)) return;\n\n        GrReferenceExpression referenceExpression = (GrReferenceExpression)qualifier;\n        final PsiElement resolved = referenceExpression.resolve();\n        if (!(resolved instanceof PsiClass)) return;\n        if (!org.jetbrains.plugins.groovy.lang.psi.util.PsiUtil.hasEnclosingInstanceInScope((PsiClass)resolved, position, false)) return;\n\n        for (String keyword : THIS_SUPER) {\n          final LookupItem item = (LookupItem)LookupItemUtil.objectToLookupItem(keyword);\n          item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS, \"\");\n          result.addElement(item);\n        }\n      }\n    });\n\n    extend(CompletionType.BASIC, TYPE_IN_VARIABLE_DECLARATION_AFTER_MODIFIER, new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        if (!GroovyCompletionUtil.isFirstElementAfterModifiersInVariableDeclaration(position, true)) return;\n\n        for (Object variant : new ClassesGetter().get(parameters.getPosition(), null)) {\n          final String lookupString;\n          if (variant instanceof PsiElement) {\n            lookupString = PsiUtilBase.getName(((PsiElement)variant));\n          }\n          else {\n            lookupString = variant.toString();\n          }\n          if (lookupString == null) continue;\n\n          LookupElementBuilder builder = LookupElementBuilder.create(variant, lookupString);\n          if (variant instanceof Iconable) {\n            builder = builder.setIcon(((Iconable)variant).getIcon(Iconable.ICON_FLAG_VISIBILITY));\n          }\n\n          if (variant instanceof PsiClass) {\n            String packageName = PsiFormatUtil.getPackageDisplayName((PsiClass)variant);\n            builder = builder.setTailText(\" (\" + packageName + \")\", true);\n          }\n          builder.setInsertHandler(new GroovyInsertHandler());\n          result.addElement(builder);\n        }\n      }\n    });\n  }","id":100142,"modified_method":"public GroovyCompletionContributor() {\n    extend(CompletionType.BASIC, psiElement(PsiElement.class), new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull final CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        final PsiElement reference = position.getParent();\n        if (reference == null) return;\n        if (isReferenceInNewExpression(reference)) {\n          //reference in new Expression\n          ((GrCodeReferenceElement)reference).processVariants(new Consumer<Object>() {\n            public void consume(Object element) {\n              if (element instanceof PsiClass) {\n                final PsiClass clazz = (PsiClass)element;\n                final MutableLookupElement<PsiClass> lookupElement = LookupElementFactory.getInstance().createLookupElement(clazz);\n                result.addElement(GroovyCompletionUtil.setTailTypeForConstructor(clazz, lookupElement));\n              }\n              else {\n                result.addElement(LookupItemUtil.objectToLookupItem(element));\n              }\n            }\n          });\n\n        }\n        else if (reference instanceof GrReferenceElement) {\n//          final boolean addGDKMethods = parameters.getInvocationCount() > 1;\n          ((GrReferenceElement)reference).processVariants(new Consumer<Object>() {\n            public void consume(Object element) {\n              LookupElement lookupElement = LookupItemUtil.objectToLookupItem(element);\n//              if (lookupElement.getObject() instanceof GrGdkMethod && !addGDKMethods) return;\n              if (lookupElement instanceof LookupItem) {\n                lookupElement = ((LookupItem)lookupElement).setInsertHandler(new GroovyInsertHandlerAdapter());\n              }\n              result.addElement(lookupElement);\n            }\n          });\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, AFTER_NEW, new CompletionProvider<CompletionParameters>(false) {\n      public void addCompletions(@NotNull final CompletionParameters parameters,\n                                 final ProcessingContext matchingContext,\n                                 @NotNull final CompletionResultSet result) {\n        final PsiElement identifierCopy = parameters.getPosition();\n        final PsiFile file = parameters.getOriginalFile();\n\n        final List<PsiClassType> expectedClassTypes = new SmartList<PsiClassType>();\n        final List<PsiArrayType> expectedArrayTypes = new ArrayList<PsiArrayType>();\n\n        ApplicationManager.getApplication().runReadAction(new Runnable() {\n          public void run() {\n            PsiType psiType = ((GrVariable)identifierCopy.getParent().getParent().getParent()).getTypeGroovy();\n            if (psiType instanceof PsiClassType) {\n              PsiType type = JavaCompletionUtil.eliminateWildcards(JavaCompletionUtil.originalize(psiType));\n              final PsiClassType classType = (PsiClassType)type;\n              if (classType.resolve() != null) {\n                expectedClassTypes.add(classType);\n              }\n            }\n            else if (psiType instanceof PsiArrayType) {\n              expectedArrayTypes.add((PsiArrayType)psiType);\n            }\n          }\n        });\n\n        for (final PsiArrayType type : expectedArrayTypes) {\n          ApplicationManager.getApplication().runReadAction(new Runnable() {\n            public void run() {\n              final LookupItem item = PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type), identifierCopy);\n              if (item.getObject() instanceof PsiClass) {\n                JavaCompletionUtil.setShowFQN(item);\n              }\n              item.setInsertHandler(new ArrayInsertHandler());\n              result.addElement(item);\n            }\n          });\n        }\n\n        JavaSmartCompletionContributor.processInheritors(parameters, identifierCopy, file, expectedClassTypes, new Consumer<PsiType>() {\n          public void consume(final PsiType type) {\n            addExpectedType(result, type, identifierCopy);\n          }\n        }, result.getPrefixMatcher());\n      }\n    });\n\n    //provide 'this' and 'super' completions in ClassName.<caret>\n    extend(CompletionType.BASIC, AFTER_DOT, new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n\n        assert position.getParent() instanceof GrReferenceExpression;\n        final GrReferenceExpression refExpr = ((GrReferenceExpression)position.getParent());\n        final GrExpression qualifier = refExpr.getQualifierExpression();\n        if (!(qualifier instanceof GrReferenceExpression)) return;\n\n        GrReferenceExpression referenceExpression = (GrReferenceExpression)qualifier;\n        final PsiElement resolved = referenceExpression.resolve();\n        if (!(resolved instanceof PsiClass)) return;\n        if (!org.jetbrains.plugins.groovy.lang.psi.util.PsiUtil.hasEnclosingInstanceInScope((PsiClass)resolved, position, false)) return;\n\n        for (String keyword : THIS_SUPER) {\n          result.addElement(LookupElementBuilder.create(keyword));\n        }\n      }\n    });\n\n    extend(CompletionType.BASIC, TYPE_IN_VARIABLE_DECLARATION_AFTER_MODIFIER, new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        if (!GroovyCompletionUtil.isFirstElementAfterModifiersInVariableDeclaration(position, true)) return;\n\n        for (Object variant : new ClassesGetter().get(parameters.getPosition(), null)) {\n          final String lookupString;\n          if (variant instanceof PsiElement) {\n            lookupString = PsiUtilBase.getName(((PsiElement)variant));\n          }\n          else {\n            lookupString = variant.toString();\n          }\n          if (lookupString == null) continue;\n\n          LookupElementBuilder builder = LookupElementBuilder.create(variant, lookupString);\n          if (variant instanceof Iconable) {\n            builder = builder.setIcon(((Iconable)variant).getIcon(Iconable.ICON_FLAG_VISIBILITY));\n          }\n\n          if (variant instanceof PsiClass) {\n            String packageName = PsiFormatUtil.getPackageDisplayName((PsiClass)variant);\n            builder = builder.setTailText(\" (\" + packageName + \")\", true);\n          }\n          builder.setInsertHandler(new GroovyInsertHandler());\n          result.addElement(builder);\n        }\n      }\n    });\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addExpectedType(final CompletionResultSet result, final PsiType type, final PsiElement place) {\n    if (!JavaCompletionUtil.hasAccessibleConstructor(type)) return;\n\n    final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n    if (psiClass == null) return;\n\n    if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) return;\n    if (!checkForInnerClass(psiClass, place)) return;\n\n    final LookupItem item = (LookupItem)LookupItemUtil.objectToLookupItem(JavaCompletionUtil.eliminateWildcards(type));\n    item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS, \"\");\n    JavaCompletionUtil.setShowFQN(item);\n    item.setInsertHandler(new AfterNewClassInsertHandler((PsiClassType)type, place));\n    result.addElement(item);\n  }","id":100143,"modified_method":"private static void addExpectedType(final CompletionResultSet result, final PsiType type, final PsiElement place) {\n    if (!JavaCompletionUtil.hasAccessibleConstructor(type)) return;\n\n    final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n    if (psiClass == null) return;\n\n    if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) return;\n    if (!checkForInnerClass(psiClass, place)) return;\n\n    final LookupItem item = PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type), place);\n    JavaCompletionUtil.setShowFQN(item);\n    item.setInsertHandler(new AfterNewClassInsertHandler((PsiClassType)type, place));\n    result.addElement(item);\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addExpectedType(final CompletionResultSet result, final PsiType type, final CompletionParameters parameters, Collection<ExpectedTypeInfo> infos) {\n    if (!JavaCompletionUtil.hasAccessibleConstructor(type)) return;\n\n    final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n    if (psiClass == null) return;\n\n    final PsiClass parentClass = psiClass.getContainingClass();\n    if (parentClass != null && !psiClass.hasModifierProperty(PsiModifier.STATIC) &&\n        !PsiTreeUtil.isAncestor(parentClass, parameters.getPosition(), false) &&\n        !(parentClass.getContainingFile().equals(parameters.getOriginalFile()) &&\n          parentClass.getTextRange().contains(parameters.getOffset()))) {\n      return;\n    }\n\n    final LookupItem item = PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type), parameters.getPosition());\n    JavaCompletionUtil.setShowFQN(item);\n\n    if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n      item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);\n      item.setAttribute(LookupItem.INDICATE_ANONYMOUS, \"\");\n    }\n\n    item.setInsertHandler(NO_TAIL_HANDLER);\n    result.addElement(decorate(type instanceof PsiClassType ? LookupElementDecorator.withInsertHandler(item, ConstructorInsertHandler.INSTANCE) : item, infos));\n  }","id":100144,"modified_method":"private static void addExpectedType(final CompletionResultSet result, final PsiType type, final CompletionParameters parameters, Collection<ExpectedTypeInfo> infos) {\n    if (!JavaCompletionUtil.hasAccessibleConstructor(type)) return;\n\n    final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n    if (psiClass == null) return;\n\n    final PsiClass parentClass = psiClass.getContainingClass();\n    if (parentClass != null && !psiClass.hasModifierProperty(PsiModifier.STATIC) &&\n        !PsiTreeUtil.isAncestor(parentClass, parameters.getPosition(), false) &&\n        !(parentClass.getContainingFile().equals(parameters.getOriginalFile()) &&\n          parentClass.getTextRange().contains(parameters.getOffset()))) {\n      return;\n    }\n\n    final LookupItem item = PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type), parameters.getPosition());\n    JavaCompletionUtil.setShowFQN(item);\n\n    if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n      item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);\n      item.setAttribute(LookupItem.INDICATE_ANONYMOUS, \"\");\n    }\n\n    item.setInsertHandler(DefaultInsertHandler.NO_TAIL_HANDLER);\n    result.addElement(decorate(type instanceof PsiClassType ? LookupElementDecorator.withInsertHandler(item, ConstructorInsertHandler.INSTANCE) : item, infos));\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public JavaSmartCompletionContributor() {\n    extend(CompletionType.SMART, SmartCastProvider.INSIDE_TYPECAST_TYPE, new SmartCastProvider());\n\n    extend(CompletionType.SMART,\n           psiElement().beforeLeaf(psiElement(JavaTokenType.RPARENTH)).afterLeaf(\"(\").withParent(\n             psiElement(PsiReferenceExpression.class).withParent(\n               psiElement(PsiExpressionList.class).withParent(PsiMethodCallExpression.class))), new SameSignatureCallParametersProvider());\n\n    extend(CompletionType.SMART, psiElement().afterLeaf(PsiKeyword.INSTANCEOF), new CompletionProvider<CompletionParameters>(false) {\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        final PsiType[] leftTypes = ApplicationManager.getApplication().runReadAction(new Computable<PsiType[]>() {\n          public PsiType[] compute() {\n            return InstanceOfLeftPartTypeGetter.getLeftTypes(position);\n          }\n        });\n        final Set<PsiClassType> expectedClassTypes = new LinkedHashSet<PsiClassType>();\n        final Set<PsiClass> parameterizedTypes = new THashSet<PsiClass>();\n        for (final PsiType type : leftTypes) {\n          if (type instanceof PsiClassType) {\n            final PsiClassType classType = (PsiClassType)type;\n            if (!classType.isRaw()) {\n              ContainerUtil.addIfNotNull(classType.resolve(), parameterizedTypes);\n            }\n\n            expectedClassTypes.add(classType.rawType());\n          }\n        }\n\n        processInheritors(parameters, position, position.getContainingFile(), expectedClassTypes, new Consumer<PsiType>() {\n          public void consume(PsiType type) {\n            final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n            if (psiClass == null) return;\n\n            if (expectedClassTypes.contains(type)) return;\n\n            result.addElement(createInstanceofLookupElement(psiClass, parameterizedTypes));\n          }\n        }, result.getPrefixMatcher());\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement(), new CompletionProvider<CompletionParameters>() {\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final PsiReference reference = element.getContainingFile().findReferenceAt(parameters.getOffset());\n        if (reference != null) {\n          final ElementFilter filter = getReferenceFilter(element);\n          if (filter != null) {\n            final List<ExpectedTypeInfo> infos = Arrays.asList(getExpectedTypes(parameters));\n            for (final LookupElement item : completeReference(element, reference, filter, true, parameters)) {\n              if (item.getObject() instanceof PsiClass) {\n                if (AFTER_THROW_NEW.accepts(element)) {\n                  //((LookupItem)item).setAttribute(LookupItem.DONT_CHECK_FOR_INNERS, \"\");\n                  JavaCompletionUtil.setShowFQN((LookupItem)item);\n                } else {\n                }\n                ((LookupItem) item).setInsertHandler(NO_TAIL_HANDLER);\n                result.addElement(decorate(LookupElementDecorator.withInsertHandler((LookupItem)item, ConstructorInsertHandler.INSTANCE), infos));\n              }\n            }\n          }\n          else if (INSIDE_TYPECAST_EXPRESSION.accepts(element)) {\n            for (final LookupElement item : completeReference(element, reference, new GeneratorFilter(AssignableToFilter.class, new CastTypeGetter()), false, parameters)) {\n              result.addElement(item);\n            }\n          }\n\n        }\n      }\n    });\n\n    //method throws clause\n    extend(CompletionType.SMART, psiElement().inside(\n      psiElement(PsiReferenceList.class).save(\"refList\").withParent(\n        psiMethod().withThrowsList(get(\"refList\")))), new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final PsiReference reference = element.getContainingFile().findReferenceAt(parameters.getOffset());\n        assert reference != null;\n        for (final LookupElement item : completeReference(element, reference, THROWABLES_FILTER, true, parameters)) {\n          result.addElement(item);\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, INSIDE_EXPRESSION, new ExpectedTypeBasedCompletionProvider() {\n      protected void addCompletions(final CompletionParameters params, final CompletionResultSet result, final Collection<ExpectedTypeInfo> _infos) {\n        final Set<ExpectedTypeInfo> infos = ApplicationManager.getApplication().runReadAction(new Computable<Set<ExpectedTypeInfo>>() {\n          public Set<ExpectedTypeInfo> compute() {\n            return new THashSet<ExpectedTypeInfo>(_infos, EXPECTED_TYPE_INFO_STRATEGY);\n          }\n        });\n        for (final ExpectedTypeInfo info : infos) {\n          final JavaSmartCompletionParameters parameters = new JavaSmartCompletionParameters(params, info);\n          final PsiType type = info.getType();\n\n          final CompletionService service = CompletionService.getCompletionService();\n          new BasicExpressionCompletionContributor().fillCompletionVariants(parameters, service.createResultSet(parameters, new Consumer<LookupElement>() {\n            public void consume(final LookupElement lookupElement) {\n              final TypedLookupItem typed = lookupElement.as(TypedLookupItem.class);\n              if (typed != null) {\n                final PsiType psiType = typed.getType();\n                if (psiType != null && type.isAssignableFrom(psiType)) {\n                  result.addElement(decorate(lookupElement, _infos));\n                }\n              }\n            }\n          }, JavaSmartCompletionContributor.this));\n          ReferenceExpressionCompletionContributor.fillCompletionVariants(parameters, service.createResultSet(parameters, new Consumer<LookupElement>() {\n            public void consume(final LookupElement lookupElement) {\n              result.addElement(decorate(lookupElement, _infos));\n            }\n          }, JavaSmartCompletionContributor.this));\n\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, or(\n        PsiJavaPatterns.psiElement().withParent(PsiNameValuePair.class),\n        PsiJavaPatterns.psiElement().withSuperParent(2, PsiNameValuePair.class)), new CompletionProvider<CompletionParameters>() {\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final ElementPattern<? extends PsiElement> leftNeighbor = PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText(\".\"));\n        final boolean needQualify = leftNeighbor.accepts(element);\n\n        for (final PsiType type : ExpectedTypesGetter.getExpectedTypes(element, false)) {\n          final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n          if (psiClass != null && psiClass.isAnnotationType()) {\n            final LookupItem item = new JavaPsiClassReferenceElement(psiClass).setTailType(TailType.NONE);\n            if (needQualify) JavaCompletionUtil.qualify(item);\n            result.addElement(item);\n          }\n        }\n\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement().inside(\n        psiElement(PsiDocTag.class).withName(\n            string().oneOf(PsiKeyword.THROWS, EXCEPTION_TAG))), new CompletionProvider<CompletionParameters>() {\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final Set<PsiClass> throwsSet = new HashSet<PsiClass>();\n        final PsiMethod method = PsiTreeUtil.getContextOfType(element, PsiMethod.class, true);\n        if(method != null){\n          for (PsiClassType ref : method.getThrowsList().getReferencedTypes()) {\n            final PsiClass exception = ref.resolve();\n            if (exception != null && throwsSet.add(exception)) {\n              result.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(exception).setInsertHandler(new DefaultInsertHandler()), TailType.SPACE));\n            }\n          }\n        }\n\n      }\n    });\n\n    final Key<PsiTryStatement> tryKey = Key.create(\"try\");\n    extend(CompletionType.SMART, psiElement().afterLeaf(\n        psiElement().withText(\"(\"))\n        .withSuperParent(3, psiElement(PsiCatchSection.class).withParent(\n        psiElement(PsiTryStatement.class).save(tryKey))), new CompletionProvider<CompletionParameters>() {\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiCodeBlock tryBlock = context.get(tryKey).getTryBlock();\n        if (tryBlock == null) return;\n\n        for (final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {\n          result.addElement(TailTypeDecorator.withTail(PsiTypeLookupItem.createLookupItem(type, tryBlock).setInsertHandler(new DefaultInsertHandler()), TailType.SPACE));\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement().inside(psiElement(PsiReferenceParameterList.class)),\n           new CompletionProvider<CompletionParameters>() {\n\n             protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext processingContext, @NotNull final CompletionResultSet resultSet) {\n               final PsiElement context = parameters.getPosition();\n\n               final Pair<PsiClass, Integer> pair = getTypeParameterInfo(context);\n               if (pair == null) return;\n\n               final PsiClass referencedClass = pair.first;\n               final int parameterIndex = pair.second.intValue();\n               final PsiTypeParameter[] typeParameters = referencedClass.getTypeParameters();\n               final PsiTypeParameter targetParameter = typeParameters[parameterIndex];\n\n               boolean isLast = parameterIndex == typeParameters.length - 1;\n               final TailType tail = isLast ? new CharTailType('>') : TailType.COMMA;\n\n               boolean hasExpected = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() {\n                 public Boolean compute() {\n                   PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();\n                   final PsiType[] psiTypes = ExpectedTypesGetter.getExpectedTypes(context, false);\n                   if (psiTypes.length == 0) return false;\n\n                   for (PsiType type : psiTypes) {\n                     if (!(type instanceof PsiClassType)) continue;\n                     final PsiClassType.ClassResolveResult result = ((PsiClassType)type).resolveGenerics();\n                     final PsiClass typeClass = result.getElement();\n                     final PsiSubstitutor substitutor = result.getSubstitutor();\n\n                     if (!InheritanceUtil.isInheritorOrSelf(referencedClass, typeClass, true)) continue;\n\n                     final PsiSubstitutor currentSubstitutor =\n                         TypeConversionUtil.getClassSubstitutor(typeClass, referencedClass, PsiSubstitutor.EMPTY);\n                     for (PsiTypeParameter parameter : PsiUtil.typeParametersIterable(typeClass)) {\n                       final PsiType argSubstitution = substitutor.substitute(parameter);\n                       final PsiType paramSubstitution = currentSubstitutor.substitute(parameter);\n                       final PsiType substitution = resolveHelper\n                           .getSubstitutionForTypeParameter(targetParameter, paramSubstitution, argSubstitution, false,\n                                                            PsiUtil.getLanguageLevel(context));\n                       if (substitution != null && substitution != PsiType.NULL) {\n                         final LookupItem item = PsiTypeLookupItem.createLookupItem(substitution, context);\n                         resultSet.addElement(TailTypeDecorator.withTail(item.setInsertHandler(new DefaultInsertHandler()), tail));\n                       }\n                     }\n                   }\n                   return true;\n                 }\n               }).booleanValue();\n\n\n               if (!hasExpected) {\n                 final List<PsiClassType> typeList = Collections.singletonList((PsiClassType)TypeConversionUtil.typeParameterErasure(targetParameter));\n                 processInheritors(parameters, context, parameters.getOriginalFile(), typeList, new Consumer<PsiType>() {\n                   public void consume(final PsiType type) {\n                     final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n                     if (psiClass == null) return;\n\n                     resultSet.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(psiClass).setInsertHandler(new DefaultInsertHandler()), tail));\n                   }\n                 }, resultSet.getPrefixMatcher());\n\n               }\n             }\n           });\n\n\n    extend(CompletionType.SMART, AFTER_NEW, new CompletionProvider<CompletionParameters>(false) {\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext matchingContext, @NotNull final CompletionResultSet result) {\n        final PsiElement identifierCopy = parameters.getPosition();\n        final PsiFile file = parameters.getOriginalFile();\n\n        final List<PsiClassType> expectedClassTypes = new SmartList<PsiClassType>();\n        final List<PsiArrayType> expectedArrayTypes = new SmartList<PsiArrayType>();\n        final List<ExpectedTypeInfo> infos = new SmartList<ExpectedTypeInfo>();\n\n        ApplicationManager.getApplication().runReadAction(new Runnable() {\n          public void run() {\n            infos.addAll(Arrays.asList(getExpectedTypes(parameters)));\n            for (PsiType type : ExpectedTypesGetter.getExpectedTypes(identifierCopy, true)) {\n              if (type instanceof PsiClassType) {\n                final PsiClassType classType = (PsiClassType)type;\n                if (classType.resolve() != null) {\n                  expectedClassTypes.add(classType);\n                }\n              }\n              else if (type instanceof PsiArrayType) {\n                expectedArrayTypes.add((PsiArrayType)type);\n              }\n            }\n          }\n        });\n\n\n        for (final PsiArrayType type : expectedArrayTypes) {\n          ApplicationManager.getApplication().runReadAction(new Runnable() {\n            public void run() {\n              final LookupItem item = PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type), identifierCopy);\n              item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS, \"\");\n              if (item.getObject() instanceof PsiClass) {\n                JavaCompletionUtil.setShowFQN(item);\n              }\n              item.setInsertHandler(new DefaultInsertHandler()); //braces & shortening\n              result.addElement(decorate(item, infos));\n            }\n          });\n        }\n        \n        processInheritors(parameters, identifierCopy, file, expectedClassTypes, new Consumer<PsiType>() {\n          public void consume(final PsiType type) {\n            addExpectedType(result, type, parameters, infos);\n          }\n        }, result.getPrefixMatcher());\n      }\n    });\n  }","id":100145,"modified_method":"public JavaSmartCompletionContributor() {\n    extend(CompletionType.SMART, SmartCastProvider.INSIDE_TYPECAST_TYPE, new SmartCastProvider());\n\n    extend(CompletionType.SMART,\n           psiElement().beforeLeaf(psiElement(JavaTokenType.RPARENTH)).afterLeaf(\"(\").withParent(\n             psiElement(PsiReferenceExpression.class).withParent(\n               psiElement(PsiExpressionList.class).withParent(PsiMethodCallExpression.class))), new SameSignatureCallParametersProvider());\n\n    extend(CompletionType.SMART, psiElement().afterLeaf(PsiKeyword.INSTANCEOF), new CompletionProvider<CompletionParameters>(false) {\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        final PsiType[] leftTypes = ApplicationManager.getApplication().runReadAction(new Computable<PsiType[]>() {\n          public PsiType[] compute() {\n            return InstanceOfLeftPartTypeGetter.getLeftTypes(position);\n          }\n        });\n        final Set<PsiClassType> expectedClassTypes = new LinkedHashSet<PsiClassType>();\n        final Set<PsiClass> parameterizedTypes = new THashSet<PsiClass>();\n        for (final PsiType type : leftTypes) {\n          if (type instanceof PsiClassType) {\n            final PsiClassType classType = (PsiClassType)type;\n            if (!classType.isRaw()) {\n              ContainerUtil.addIfNotNull(classType.resolve(), parameterizedTypes);\n            }\n\n            expectedClassTypes.add(classType.rawType());\n          }\n        }\n\n        processInheritors(parameters, position, position.getContainingFile(), expectedClassTypes, new Consumer<PsiType>() {\n          public void consume(PsiType type) {\n            final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n            if (psiClass == null) return;\n\n            if (expectedClassTypes.contains(type)) return;\n\n            result.addElement(createInstanceofLookupElement(psiClass, parameterizedTypes));\n          }\n        }, result.getPrefixMatcher());\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement(), new CompletionProvider<CompletionParameters>() {\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final PsiReference reference = element.getContainingFile().findReferenceAt(parameters.getOffset());\n        if (reference != null) {\n          final ElementFilter filter = getReferenceFilter(element);\n          if (filter != null) {\n            final List<ExpectedTypeInfo> infos = Arrays.asList(getExpectedTypes(parameters));\n            for (final LookupElement item : completeReference(element, reference, filter, true, parameters)) {\n              if (item.getObject() instanceof PsiClass) {\n                if (AFTER_THROW_NEW.accepts(element)) {\n                  //((LookupItem)item).setAttribute(LookupItem.DONT_CHECK_FOR_INNERS, \"\");\n                  JavaCompletionUtil.setShowFQN((LookupItem)item);\n                } else {\n                }\n                ((LookupItem) item).setInsertHandler(DefaultInsertHandler.NO_TAIL_HANDLER);\n                result.addElement(decorate(LookupElementDecorator.withInsertHandler((LookupItem)item, ConstructorInsertHandler.INSTANCE), infos));\n              }\n            }\n          }\n          else if (INSIDE_TYPECAST_EXPRESSION.accepts(element)) {\n            for (final LookupElement item : completeReference(element, reference, new GeneratorFilter(AssignableToFilter.class, new CastTypeGetter()), false, parameters)) {\n              result.addElement(item);\n            }\n          }\n\n        }\n      }\n    });\n\n    //method throws clause\n    extend(CompletionType.SMART, psiElement().inside(\n      psiElement(PsiReferenceList.class).save(\"refList\").withParent(\n        psiMethod().withThrowsList(get(\"refList\")))), new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull CompletionParameters parameters,\n                                    ProcessingContext context,\n                                    @NotNull CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final PsiReference reference = element.getContainingFile().findReferenceAt(parameters.getOffset());\n        assert reference != null;\n        for (final LookupElement item : completeReference(element, reference, THROWABLES_FILTER, true, parameters)) {\n          result.addElement(item);\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, INSIDE_EXPRESSION, new ExpectedTypeBasedCompletionProvider() {\n      protected void addCompletions(final CompletionParameters params, final CompletionResultSet result, final Collection<ExpectedTypeInfo> _infos) {\n        final Set<ExpectedTypeInfo> infos = ApplicationManager.getApplication().runReadAction(new Computable<Set<ExpectedTypeInfo>>() {\n          public Set<ExpectedTypeInfo> compute() {\n            return new THashSet<ExpectedTypeInfo>(_infos, EXPECTED_TYPE_INFO_STRATEGY);\n          }\n        });\n        for (final ExpectedTypeInfo info : infos) {\n          final JavaSmartCompletionParameters parameters = new JavaSmartCompletionParameters(params, info);\n          final PsiType type = info.getType();\n\n          final CompletionService service = CompletionService.getCompletionService();\n          new BasicExpressionCompletionContributor().fillCompletionVariants(parameters, service.createResultSet(parameters, new Consumer<LookupElement>() {\n            public void consume(final LookupElement lookupElement) {\n              final TypedLookupItem typed = lookupElement.as(TypedLookupItem.class);\n              if (typed != null) {\n                final PsiType psiType = typed.getType();\n                if (psiType != null && type.isAssignableFrom(psiType)) {\n                  result.addElement(decorate(lookupElement, _infos));\n                }\n              }\n            }\n          }, JavaSmartCompletionContributor.this));\n          ReferenceExpressionCompletionContributor.fillCompletionVariants(parameters, service.createResultSet(parameters, new Consumer<LookupElement>() {\n            public void consume(final LookupElement lookupElement) {\n              result.addElement(decorate(lookupElement, _infos));\n            }\n          }, JavaSmartCompletionContributor.this));\n\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, or(\n        PsiJavaPatterns.psiElement().withParent(PsiNameValuePair.class),\n        PsiJavaPatterns.psiElement().withSuperParent(2, PsiNameValuePair.class)), new CompletionProvider<CompletionParameters>() {\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final ElementPattern<? extends PsiElement> leftNeighbor = PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText(\".\"));\n        final boolean needQualify = leftNeighbor.accepts(element);\n\n        for (final PsiType type : ExpectedTypesGetter.getExpectedTypes(element, false)) {\n          final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n          if (psiClass != null && psiClass.isAnnotationType()) {\n            final LookupItem item = new JavaPsiClassReferenceElement(psiClass).setTailType(TailType.NONE);\n            if (needQualify) JavaCompletionUtil.qualify(item);\n            result.addElement(item);\n          }\n        }\n\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement().inside(\n        psiElement(PsiDocTag.class).withName(\n            string().oneOf(PsiKeyword.THROWS, EXCEPTION_TAG))), new CompletionProvider<CompletionParameters>() {\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final Set<PsiClass> throwsSet = new HashSet<PsiClass>();\n        final PsiMethod method = PsiTreeUtil.getContextOfType(element, PsiMethod.class, true);\n        if(method != null){\n          for (PsiClassType ref : method.getThrowsList().getReferencedTypes()) {\n            final PsiClass exception = ref.resolve();\n            if (exception != null && throwsSet.add(exception)) {\n              result.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(exception).setInsertHandler(new DefaultInsertHandler()), TailType.SPACE));\n            }\n          }\n        }\n\n      }\n    });\n\n    final Key<PsiTryStatement> tryKey = Key.create(\"try\");\n    extend(CompletionType.SMART, psiElement().afterLeaf(\n        psiElement().withText(\"(\"))\n        .withSuperParent(3, psiElement(PsiCatchSection.class).withParent(\n        psiElement(PsiTryStatement.class).save(tryKey))), new CompletionProvider<CompletionParameters>() {\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiCodeBlock tryBlock = context.get(tryKey).getTryBlock();\n        if (tryBlock == null) return;\n\n        for (final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {\n          result.addElement(TailTypeDecorator.withTail(PsiTypeLookupItem.createLookupItem(type, tryBlock).setInsertHandler(new DefaultInsertHandler()), TailType.SPACE));\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement().inside(psiElement(PsiReferenceParameterList.class)),\n           new CompletionProvider<CompletionParameters>() {\n\n             protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext processingContext, @NotNull final CompletionResultSet resultSet) {\n               final PsiElement context = parameters.getPosition();\n\n               final Pair<PsiClass, Integer> pair = getTypeParameterInfo(context);\n               if (pair == null) return;\n\n               final PsiClass referencedClass = pair.first;\n               final int parameterIndex = pair.second.intValue();\n               final PsiTypeParameter[] typeParameters = referencedClass.getTypeParameters();\n               final PsiTypeParameter targetParameter = typeParameters[parameterIndex];\n\n               boolean isLast = parameterIndex == typeParameters.length - 1;\n               final TailType tail = isLast ? new CharTailType('>') : TailType.COMMA;\n\n               boolean hasExpected = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() {\n                 public Boolean compute() {\n                   PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();\n                   final PsiType[] psiTypes = ExpectedTypesGetter.getExpectedTypes(context, false);\n                   if (psiTypes.length == 0) return false;\n\n                   for (PsiType type : psiTypes) {\n                     if (!(type instanceof PsiClassType)) continue;\n                     final PsiClassType.ClassResolveResult result = ((PsiClassType)type).resolveGenerics();\n                     final PsiClass typeClass = result.getElement();\n                     final PsiSubstitutor substitutor = result.getSubstitutor();\n\n                     if (!InheritanceUtil.isInheritorOrSelf(referencedClass, typeClass, true)) continue;\n\n                     final PsiSubstitutor currentSubstitutor =\n                         TypeConversionUtil.getClassSubstitutor(typeClass, referencedClass, PsiSubstitutor.EMPTY);\n                     for (PsiTypeParameter parameter : PsiUtil.typeParametersIterable(typeClass)) {\n                       final PsiType argSubstitution = substitutor.substitute(parameter);\n                       final PsiType paramSubstitution = currentSubstitutor.substitute(parameter);\n                       final PsiType substitution = resolveHelper\n                           .getSubstitutionForTypeParameter(targetParameter, paramSubstitution, argSubstitution, false,\n                                                            PsiUtil.getLanguageLevel(context));\n                       if (substitution != null && substitution != PsiType.NULL) {\n                         final LookupItem item = PsiTypeLookupItem.createLookupItem(substitution, context);\n                         resultSet.addElement(TailTypeDecorator.withTail(item.setInsertHandler(new DefaultInsertHandler()), tail));\n                       }\n                     }\n                   }\n                   return true;\n                 }\n               }).booleanValue();\n\n\n               if (!hasExpected) {\n                 final List<PsiClassType> typeList = Collections.singletonList((PsiClassType)TypeConversionUtil.typeParameterErasure(targetParameter));\n                 processInheritors(parameters, context, parameters.getOriginalFile(), typeList, new Consumer<PsiType>() {\n                   public void consume(final PsiType type) {\n                     final PsiClass psiClass = PsiUtil.resolveClassInType(type);\n                     if (psiClass == null) return;\n\n                     resultSet.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(psiClass).setInsertHandler(new DefaultInsertHandler()), tail));\n                   }\n                 }, resultSet.getPrefixMatcher());\n\n               }\n             }\n           });\n\n\n    extend(CompletionType.SMART, AFTER_NEW, new CompletionProvider<CompletionParameters>(false) {\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext matchingContext, @NotNull final CompletionResultSet result) {\n        final PsiElement identifierCopy = parameters.getPosition();\n        final PsiFile file = parameters.getOriginalFile();\n\n        final List<PsiClassType> expectedClassTypes = new SmartList<PsiClassType>();\n        final List<PsiArrayType> expectedArrayTypes = new SmartList<PsiArrayType>();\n        final List<ExpectedTypeInfo> infos = new SmartList<ExpectedTypeInfo>();\n\n        ApplicationManager.getApplication().runReadAction(new Runnable() {\n          public void run() {\n            infos.addAll(Arrays.asList(getExpectedTypes(parameters)));\n            for (PsiType type : ExpectedTypesGetter.getExpectedTypes(identifierCopy, true)) {\n              if (type instanceof PsiClassType) {\n                final PsiClassType classType = (PsiClassType)type;\n                if (classType.resolve() != null) {\n                  expectedClassTypes.add(classType);\n                }\n              }\n              else if (type instanceof PsiArrayType) {\n                expectedArrayTypes.add((PsiArrayType)type);\n              }\n            }\n          }\n        });\n\n\n        for (final PsiArrayType type : expectedArrayTypes) {\n          ApplicationManager.getApplication().runReadAction(new Runnable() {\n            public void run() {\n              final LookupItem item = PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type), identifierCopy);\n              if (item.getObject() instanceof PsiClass) {\n                JavaCompletionUtil.setShowFQN(item);\n              }\n              item.setInsertHandler(new DefaultInsertHandler()); //braces & shortening\n              result.addElement(decorate(item, infos));\n            }\n          });\n        }\n        \n        processInheritors(parameters, identifierCopy, file, expectedClassTypes, new Consumer<PsiType>() {\n          public void consume(final PsiType type) {\n            addExpectedType(result, type, parameters, infos);\n          }\n        }, result.getPrefixMatcher());\n      }\n    });\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static SmartCompletionDecorator decorate(LookupElement lookupElement, Collection<ExpectedTypeInfo> infos) {\n    if (lookupElement instanceof LookupItem) {\n      final LookupItem lookupItem = (LookupItem)lookupElement;\n      if (lookupItem.getInsertHandler() == null) {\n        lookupItem.setInsertHandler(NO_TAIL_HANDLER);\n      }\n    }\n\n    return new SmartCompletionDecorator(lookupElement, infos);\n  }","id":100146,"modified_method":"public static SmartCompletionDecorator decorate(LookupElement lookupElement, Collection<ExpectedTypeInfo> infos) {\n    if (lookupElement instanceof LookupItem) {\n      final LookupItem lookupItem = (LookupItem)lookupElement;\n      if (lookupItem.getInsertHandler() == null) {\n        lookupItem.setInsertHandler(DefaultInsertHandler.NO_TAIL_HANDLER);\n      }\n    }\n\n    return new SmartCompletionDecorator(lookupElement, infos);\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static TailType getTailType(final LookupItem item, InsertionContext context) {\n    final char completionChar = context.getCompletionChar();\n    if (completionChar == '!') return item.getTailType();\n    if (completionChar == '(') {\n      final PsiMethod psiMethod = (PsiMethod)item.getObject();\n      return psiMethod.getParameterList().getParameters().length > 0 || psiMethod.getReturnType() != PsiType.VOID\n             ? TailType.NONE : TailType.SEMICOLON;\n    }\n    if (completionChar == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) return TailType.SMART_COMPLETION;\n    if (!context.shouldAddCompletionChar()) {\n      return TailType.NONE;\n    }\n\n    return LookupItem.handleCompletionChar(context.getEditor(), item, completionChar);\n  }","id":100147,"modified_method":"@NotNull\n  private static TailType getTailType(final LookupItem item, InsertionContext context) {\n    final char completionChar = context.getCompletionChar();\n    if (completionChar == '!') return item.getTailType();\n    if (completionChar == '(') {\n      final Object o = item.getObject();\n      if (o instanceof PsiMethod) {\n        final PsiMethod psiMethod = (PsiMethod)o;\n        return psiMethod.getParameterList().getParameters().length > 0 || psiMethod.getReturnType() != PsiType.VOID\n               ? TailType.NONE : TailType.SEMICOLON;\n      } else if (o instanceof PsiClass) { // it may be a constructor\n        return TailType.NONE;\n      }\n    }\n    if (completionChar == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) return TailType.SMART_COMPLETION;\n    if (!context.shouldAddCompletionChar()) {\n      return TailType.NONE;\n    }\n\n    return LookupItem.handleCompletionChar(context.getEditor(), item, completionChar);\n  }","commit_id":"4c2859da099d5c616a3d98f0055d770688cb028b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Spell sourceSpell = (Spell) game.getObject(source.getId());\n        if (sourceSpell != null && sourceSpell.isCopiedSpell()) {\n            return false;\n        } else {\n            StackObject sourceCard = (StackObject) game.getObject(source.getSourceId());\n            ReboundEffectCastFromExileDelayedTrigger trigger = new ReboundEffectCastFromExileDelayedTrigger(sourceCard.getSourceId(), sourceCard.getSourceId());\n            trigger.setControllerId(source.getControllerId());\n            game.addDelayedTriggeredAbility(trigger);\n\n            game.getContinuousEffects().addEffect(new ReboundCastFromHandReplacementEffect(source.getSourceId()), source);\n            return true;\n        }\n    }","id":100148,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Spell sourceSpell = (Spell) game.getObject(source.getId());\n        if (sourceSpell == null || !sourceSpell.isCopiedSpell()) {\n            MageObject mageObject = game.getObject(source.getSourceId());\n            if (mageObject instanceof StackObject) {\n                StackObject sourceCard = (StackObject) mageObject;\n                ReboundEffectCastFromExileDelayedTrigger trigger = new ReboundEffectCastFromExileDelayedTrigger(sourceCard.getSourceId(), sourceCard.getSourceId());\n                trigger.setControllerId(source.getControllerId());\n                game.addDelayedTriggeredAbility(trigger);\n\n                game.getContinuousEffects().addEffect(new ReboundCastFromHandReplacementEffect(source.getSourceId()), source);\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"5a45c597bc55bd51f8b58da2219c1e5b05c953c2","url":"https://github.com/magefree/mage"},{"original_method":"public void init()\n    {\n        registerStandardTransportEndpoints(ImapConnector.IMAP, URIBuilder.USERHOST_ATTRIBUTES);\n        registerConnectorDefinitionParser(ImapConnector.class);\n    }","id":100149,"modified_method":"public void init()\n    {\n        registerStandardTransportEndpoints(ImapConnector.IMAP, URIBuilder.USERHOST_ATTRIBUTES);\n\n        MuleDefinitionParserConfiguration parser = registerConnectorDefinitionParser(ImapConnector.class);\n        parser.addMapping(\"defaultProcessMessageAction\", EmailNamespaceHandler.DEFAULT_PROCESS_MESSAGE_ACTION);\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testConfig() throws Exception\n    {\n        ImapConnector c = (ImapConnector)muleContext.getRegistry().lookupConnector(\"imapConnector\");\n        assertNotNull(c);\n\n        assertTrue(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n    }","id":100150,"modified_method":"public void testConfig() throws Exception\n    {\n        ImapConnector c = (ImapConnector)muleContext.getRegistry().lookupConnector(\"imapConnector\");\n        assertNotNull(c);\n\n        assertTrue(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n        \n        assertEquals(Flags.Flag.SEEN, c.getDefaultProcessMessageAction());\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testSecureConfig() throws Exception\n    {\n        ImapsConnector c = (ImapsConnector)muleContext.getRegistry().lookupConnector(\"imapsConnector\");\n        assertNotNull(c);\n\n        assertFalse(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getClientKeyStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getClientKeyStorePassword());\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getTrustStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getTrustStorePassword());\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n    }","id":100151,"modified_method":"public void testSecureConfig() throws Exception\n    {\n        ImapsConnector c = (ImapsConnector)muleContext.getRegistry().lookupConnector(\"imapsConnector\");\n        assertNotNull(c);\n\n        assertFalse(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getClientKeyStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getClientKeyStorePassword());\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getTrustStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getTrustStorePassword());\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n        \n        assertNull(c.getDefaultProcessMessageAction());\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void init()\n    {\n        registerStandardTransportEndpoints(ImapsConnector.IMAPS, URIBuilder.USERHOST_ATTRIBUTES);\n        registerConnectorDefinitionParser(ImapsConnector.class);\n        registerBeanDefinitionParser(\"tls-trust-store\", new TrustStoreDefinitionParser());\n        registerBeanDefinitionParser(\"tls-client\", new ClientKeyStoreDefinitionParser());\n    }","id":100152,"modified_method":"public void init()\n    {\n        registerStandardTransportEndpoints(ImapsConnector.IMAPS, URIBuilder.USERHOST_ATTRIBUTES);\n\n        MuleDefinitionParserConfiguration parser = registerConnectorDefinitionParser(ImapsConnector.class);\n        parser.addMapping(\"defaultProcessMessageAction\", EmailNamespaceHandler.DEFAULT_PROCESS_MESSAGE_ACTION);\n\n        registerBeanDefinitionParser(\"tls-trust-store\", new TrustStoreDefinitionParser());\n        registerBeanDefinitionParser(\"tls-client\", new ClientKeyStoreDefinitionParser());\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void init()\n    {\n        registerStandardTransportEndpoints(Pop3Connector.POP3, URIBuilder.USERHOST_ATTRIBUTES);\n        registerConnectorDefinitionParser(Pop3Connector.class);\n    }","id":100153,"modified_method":"public void init()\n    {\n        registerStandardTransportEndpoints(Pop3Connector.POP3, URIBuilder.USERHOST_ATTRIBUTES);\n\n        MuleDefinitionParserConfiguration parser = registerConnectorDefinitionParser(Pop3Connector.class);\n        parser.addMapping(\"defaultProcessMessageAction\", EmailNamespaceHandler.DEFAULT_PROCESS_MESSAGE_ACTION);\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testSecureConfig() throws Exception\n    {\n        Pop3sConnector c = (Pop3sConnector)muleContext.getRegistry().lookupConnector(\"pop3sConnector\");\n        assertNotNull(c);\n\n        assertTrue(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getClientKeyStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getClientKeyStorePassword());\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getTrustStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getTrustStorePassword());\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n    }","id":100154,"modified_method":"public void testSecureConfig() throws Exception\n    {\n        Pop3sConnector c = (Pop3sConnector)muleContext.getRegistry().lookupConnector(\"pop3sConnector\");\n        assertNotNull(c);\n\n        assertTrue(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getClientKeyStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getClientKeyStorePassword());\n        //The full path gets resolved, we're just checkng that the property got set\n        assertTrue(c.getTrustStore().endsWith(\"/empty.jks\"));\n        assertEquals(\"password\", c.getTrustStorePassword());\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n        \n        assertEquals(Flags.Flag.ANSWERED, c.getDefaultProcessMessageAction());\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testConfig() throws Exception\n    {\n        Pop3Connector c = (Pop3Connector)muleContext.getRegistry().lookupConnector(\"pop3Connector\");\n        assertNotNull(c);\n\n        assertTrue(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n\n    }","id":100155,"modified_method":"public void testConfig() throws Exception\n    {\n        Pop3Connector c = (Pop3Connector)muleContext.getRegistry().lookupConnector(\"pop3Connector\");\n        assertNotNull(c);\n\n        assertTrue(c.isBackupEnabled());\n        assertEquals(\"newBackup\", c.getBackupFolder());\n        assertEquals(1234, c.getCheckFrequency());\n        assertEquals(\"newMailbox\", c.getMailboxFolder());\n        assertEquals(false, c.isDeleteReadMessages());\n\n        // authenticator?\n\n        assertTrue(c.isConnected());\n        assertTrue(c.isStarted());\n\n        assertEquals(Flags.Flag.SEEN, c.getDefaultProcessMessageAction());\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void init()\n    {\n        registerStandardTransportEndpoints(Pop3sConnector.POP3S, URIBuilder.USERHOST_ATTRIBUTES);\n        registerConnectorDefinitionParser(Pop3sConnector.class);\n        registerBeanDefinitionParser(\"tls-trust-store\", new TrustStoreDefinitionParser());\n        registerBeanDefinitionParser(\"tls-client\", new ClientKeyStoreDefinitionParser());\n    }","id":100156,"modified_method":"public void init()\n    {\n        registerStandardTransportEndpoints(Pop3sConnector.POP3S, URIBuilder.USERHOST_ATTRIBUTES);\n\n        MuleDefinitionParserConfiguration parser = registerConnectorDefinitionParser(Pop3sConnector.class);\n        parser.addMapping(\"defaultProcessMessageAction\", EmailNamespaceHandler.DEFAULT_PROCESS_MESSAGE_ACTION);\n\n        registerBeanDefinitionParser(\"tls-trust-store\", new TrustStoreDefinitionParser());\n        registerBeanDefinitionParser(\"tls-client\", new ClientKeyStoreDefinitionParser());\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public void messagesAdded(MessageCountEvent event)\n    {\n        Message messages[] = event.getMessages();\n        if (messages != null)\n        {\n            MuleMessage message = null;\n            for (int i = 0; i < messages.length; i++)\n            {\n                try\n                {\n                    if (!messages[i].getFlags().contains(Flags.Flag.DELETED)\n                        && !messages[i].getFlags().contains(Flags.Flag.SEEN))\n                    {\n                        MimeMessage mimeMessage = new MimeMessage((MimeMessage) messages[i]);\n                        storeMessage(mimeMessage);\n                        message = createMuleMessage(mimeMessage, endpoint.getEncoding());\n\n                        if (castConnector().isDeleteReadMessages())\n                        {\n                            // Mark as deleted\n                            messages[i].setFlag(Flags.Flag.DELETED, true);\n                        }\n                        else\n                        {\n                            messages[i].setFlag(Flags.Flag.SEEN, true);\n                        }\n                        routeMessage(message);\n                    }\n                }\n                catch (MuleException e)\n                {\n                    getConnector().getMuleContext().getExceptionListener().handleException(e);\n                }\n                catch (Exception e)\n                {\n                    Exception forwarded;\n\n                    if (message != null)\n                    {\n                        forwarded = new org.mule.api.MessagingException(EmailMessages.routingError(), message, e);\n                    }\n                    else\n                    {\n                        forwarded = new ReceiveException(endpoint, -1, e);\n                    }\n\n                    getConnector().getMuleContext().getExceptionListener().handleException(forwarded);\n                }\n            }\n            // Lets move all messages in one go\n            if (moveToFolder != null)\n            {\n                try\n                {\n                    folder.copyMessages(messages, moveToFolder);\n                }\n                catch (MessagingException e)\n                {\n                    getConnector().getMuleContext().getExceptionListener().handleException(e);\n                }\n            }\n        }\n    }","id":100157,"modified_method":"public void messagesAdded(MessageCountEvent event)\n    {\n        Message messages[] = event.getMessages();\n        if (messages != null)\n        {\n            MuleMessage message = null;\n            for (int i = 0; i < messages.length; i++)\n            {\n                try\n                {\n                    if (!messages[i].getFlags().contains(Flags.Flag.DELETED)\n                        && !messages[i].getFlags().contains(Flags.Flag.SEEN))\n                    {\n                        MimeMessage mimeMessage = new MimeMessage((MimeMessage) messages[i]);\n                        storeMessage(mimeMessage);\n                        message = createMuleMessage(mimeMessage, endpoint.getEncoding());\n\n                        if (castConnector().isDeleteReadMessages())\n                        {\n                            // Mark as deleted\n                            messages[i].setFlag(Flags.Flag.DELETED, true);\n                        }\n                        else\n                        {\n                            if (this.getEndpoint().getFilter().accept(message))\n                            {\n                                Flags.Flag flag = castConnector().getDefaultProcessMessageAction();\n                                if (flag != null)\n                                {\n                                    messages[i].setFlag(flag, true);\n                                }\n                            }\n                            else\n                            {\n                                messages[i].setFlag(Flags.Flag.SEEN, false);\n                            }\n                       }\n                        routeMessage(message);\n                    }\n                }\n                catch (MuleException e)\n                {\n                    getConnector().getMuleContext().getExceptionListener().handleException(e);\n                }\n                catch (Exception e)\n                {\n                    Exception forwarded;\n\n                    if (message != null)\n                    {\n                        forwarded = new org.mule.api.MessagingException(EmailMessages.routingError(), message, e);\n                    }\n                    else\n                    {\n                        forwarded = new ReceiveException(endpoint, -1, e);\n                    }\n\n                    getConnector().getMuleContext().getExceptionListener().handleException(forwarded);\n                }\n            }\n            // Lets move all messages in one go\n            if (moveToFolder != null)\n            {\n                try\n                {\n                    folder.copyMessages(messages, moveToFolder);\n                }\n                catch (MessagingException e)\n                {\n                    getConnector().getMuleContext().getExceptionListener().handleException(e);\n                }\n            }\n        }\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object translateValue(String name, String value)\n    {\n        Object intermediate = delegate.translateValue(name, value);\n        if (intermediate.equals(value))\n        {\n            return extra.translateValue(name, value);\n        }\n        else\n        {\n            return intermediate;\n        }\n    }","id":100158,"modified_method":"public Object translateValue(String name, String value)\n    {\n        Object intermediate = delegate.translateValue(name, value);\n        if (intermediate != null && intermediate.equals(value))\n        {\n            return extra.translateValue(name, value);\n        }\n        else\n        {\n            return intermediate;\n        }\n    }","commit_id":"76d881dc42d198cc6f49212d638550f531463817","url":"https://github.com/mulesoft/mule"},{"original_method":"void process(EventPacket eventPacket) {\n            Object eventObject = eventPacket.event;\n            if (eventObject instanceof Data) {\n                eventObject = nodeEngine.toObject(eventObject);\n            }\n            final String serviceName = eventPacket.serviceName;\n            EventPublishingService<Object, Object> service = nodeEngine.getService(serviceName);\n            if (service == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"There is no service named: \" + serviceName);\n                }\n                return;\n            }\n            EventServiceSegment segment = getSegment(serviceName, false);\n            if (segment == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No service registration found for \" + serviceName);\n                }\n                return;\n            }\n            Registration registration = segment.registrationIdMap.get(eventPacket.id);\n            if (registration == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No registration found for \" + serviceName + \" / \" + eventPacket.id);\n                }\n                return;\n            }\n            if (!registration.isLocal()) {\n                if (nodeEngine.getThisAddress().equals(registration.getSubscriber())) {\n                    logger.warning(\"Something seems wrong! Subscriber is local but listener instance is null! \" + registration);\n                } else {\n                    logger.warning(\"Invalid target for  \" + registration);\n                }\n                return;\n            }\n            service.dispatchEvent(eventObject, registration.listener);\n        }","id":100159,"modified_method":"void process(EventPacket eventPacket) {\n            Object eventObject = eventPacket.event;\n            if (eventObject instanceof Data) {\n                eventObject = nodeEngine.toObject(eventObject);\n            }\n            final String serviceName = eventPacket.serviceName;\n            EventPublishingService<Object, Object> service = nodeEngine.getService(serviceName);\n            if (service == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"There is no service named: \" + serviceName);\n                }\n                return;\n            }\n            EventServiceSegment segment = getSegment(serviceName, false);\n            if (segment == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No service registration found for \" + serviceName);\n                }\n                return;\n            }\n            Registration registration = segment.registrationIdMap.get(eventPacket.id);\n            if (registration == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No registration found for \" + serviceName + \" / \" + eventPacket.id);\n                }\n                return;\n            }\n            if (!isLocal(registration)) {\n                logger.severe(\"Invalid target for  \" + registration);\n                return;\n            }\n            if (registration.listener == null) {\n                logger.warning(\"Something seems wrong! Subscriber is local but listener instance is null! -> \" + registration);\n                return;\n            }\n            service.dispatchEvent(eventObject, registration.listener);\n        }","commit_id":"240164f36328ae6112107dd6cd2db8243e5d5e92","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void publishEvent(String serviceName, EventRegistration registration, Object event, int orderKey) {\n        if (!(registration instanceof Registration)) {\n            throw new IllegalArgumentException();\n        }\n        final Registration reg = (Registration) registration;\n        if (reg.isLocal()) {\n            executeLocal(serviceName, event, reg, orderKey);\n        } else {\n            final Address subscriber = registration.getSubscriber();\n            sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, event), orderKey);\n        }\n    }","id":100160,"modified_method":"public void publishEvent(String serviceName, EventRegistration registration, Object event, int orderKey) {\n        if (!(registration instanceof Registration)) {\n            throw new IllegalArgumentException();\n        }\n        final Registration reg = (Registration) registration;\n        if (isLocal(reg)) {\n            executeLocal(serviceName, event, reg, orderKey);\n        } else {\n            final Address subscriber = registration.getSubscriber();\n            sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, event), orderKey);\n        }\n    }","commit_id":"240164f36328ae6112107dd6cd2db8243e5d5e92","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void executeLocal(String serviceName, Object event, Registration reg, int orderKey) {\n        if (nodeEngine.isActive()) {\n            try {\n                eventExecutor.execute(new LocalEventDispatcher(serviceName, event, reg.listener, orderKey, eventQueueTimeoutMs));\n            } catch (RejectedExecutionException e) {\n                if (eventExecutor.isLive()) {\n                    logger.warning(\"EventQueue overloaded! \" + event + \" failed to publish to \" + reg.serviceName + \":\" + reg.topic);\n                }\n            }\n        }\n    }","id":100161,"modified_method":"private void executeLocal(String serviceName, Object event, Registration reg, int orderKey) {\n        if (nodeEngine.isActive()) {\n            try {\n                if (reg.listener != null) {\n                    eventExecutor.execute(new LocalEventDispatcher(serviceName, event, reg.listener, orderKey, eventQueueTimeoutMs));\n                } else {\n                    logger.warning(\"Something seems wrong! Listener instance is null! -> \" + reg);\n                }\n            } catch (RejectedExecutionException e) {\n                if (eventExecutor.isLive()) {\n                    logger.warning(\"EventQueue overloaded! \" + event + \" failed to publish to \" + reg.serviceName + \":\" + reg.topic);\n                }\n            }\n        }\n    }","commit_id":"240164f36328ae6112107dd6cd2db8243e5d5e92","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void publishEvent(String serviceName, Collection<EventRegistration> registrations, Object event, int orderKey) {\n        final Iterator<EventRegistration> iter = registrations.iterator();\n        Data eventData = null;\n        while (iter.hasNext()) {\n            EventRegistration registration = iter.next();\n            if (!(registration instanceof Registration)) {\n                throw new IllegalArgumentException();\n            }\n            final Registration reg = (Registration) registration;\n            if (reg.isLocal()) {\n                executeLocal(serviceName, event, reg, orderKey);\n            } else {\n                if (eventData == null) {\n                    eventData = nodeEngine.toData(event);\n                }\n                final Address subscriber = registration.getSubscriber();\n                sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, eventData), orderKey);\n            }\n        }\n    }","id":100162,"modified_method":"public void publishEvent(String serviceName, Collection<EventRegistration> registrations, Object event, int orderKey) {\n        final Iterator<EventRegistration> iter = registrations.iterator();\n        Data eventData = null;\n        while (iter.hasNext()) {\n            EventRegistration registration = iter.next();\n            if (!(registration instanceof Registration)) {\n                throw new IllegalArgumentException();\n            }\n            final Registration reg = (Registration) registration;\n            if (isLocal(reg)) {\n                executeLocal(serviceName, event, reg, orderKey);\n            } else {\n                if (eventData == null) {\n                    eventData = nodeEngine.toData(event);\n                }\n                final Address subscriber = registration.getSubscriber();\n                sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, eventData), orderKey);\n            }\n        }\n    }","commit_id":"240164f36328ae6112107dd6cd2db8243e5d5e92","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void executeLocal(String serviceName, Object event, Registration reg, int orderKey) {\n        if (nodeEngine.isActive()) {\n            try {\n                eventExecutor.execute(new LocalEventDispatcher(serviceName, event, reg.listener, orderKey, eventQueueTimeoutMs));\n            } catch (RejectedExecutionException e) {\n                if (eventExecutor.isLive()) {\n                    logger.warning(\"EventQueue overloaded! \" + event + \" failed to publish to \" + reg.serviceName + \":\" + reg.topic);\n                }\n            }\n        }\n    }","id":100163,"modified_method":"private void executeLocal(String serviceName, Object event, Registration reg, int orderKey) {\n        if (nodeEngine.isActive()) {\n            try {\n                if (reg.listener != null) {\n                    eventExecutor.execute(new LocalEventDispatcher(serviceName, event, reg.listener, orderKey, eventQueueTimeoutMs));\n                } else {\n                    logger.warning(\"Something seems wrong! Listener instance is null! -> \" + reg);\n                }\n            } catch (RejectedExecutionException e) {\n                if (eventExecutor.isLive()) {\n                    logger.warning(\"EventQueue overloaded! \" + event + \" failed to publish to \" + reg.serviceName + \":\" + reg.topic);\n                }\n            }\n        }\n    }","commit_id":"21b1946e97715ecb9b071ac6ebe64868a7055eda","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"void process(EventPacket eventPacket) {\n            Object eventObject = eventPacket.event;\n            if (eventObject instanceof Data) {\n                eventObject = nodeEngine.toObject(eventObject);\n            }\n            final String serviceName = eventPacket.serviceName;\n            EventPublishingService<Object, Object> service = nodeEngine.getService(serviceName);\n            if (service == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"There is no service named: \" + serviceName);\n                }\n                return;\n            }\n            EventServiceSegment segment = getSegment(serviceName, false);\n            if (segment == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No service registration found for \" + serviceName);\n                }\n                return;\n            }\n            Registration registration = segment.registrationIdMap.get(eventPacket.id);\n            if (registration == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No registration found for \" + serviceName + \" / \" + eventPacket.id);\n                }\n                return;\n            }\n            if (!registration.isLocal()) {\n                if (nodeEngine.getThisAddress().equals(registration.getSubscriber())) {\n                    logger.warning(\"Something seems wrong! Subscriber is local but listener instance is null! \" + registration);\n                } else {\n                    logger.warning(\"Invalid target for  \" + registration);\n                }\n                return;\n            }\n            service.dispatchEvent(eventObject, registration.listener);\n        }","id":100164,"modified_method":"void process(EventPacket eventPacket) {\n            Object eventObject = eventPacket.event;\n            if (eventObject instanceof Data) {\n                eventObject = nodeEngine.toObject(eventObject);\n            }\n            final String serviceName = eventPacket.serviceName;\n            EventPublishingService<Object, Object> service = nodeEngine.getService(serviceName);\n            if (service == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"There is no service named: \" + serviceName);\n                }\n                return;\n            }\n            EventServiceSegment segment = getSegment(serviceName, false);\n            if (segment == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No service registration found for \" + serviceName);\n                }\n                return;\n            }\n            Registration registration = segment.registrationIdMap.get(eventPacket.id);\n            if (registration == null) {\n                if (nodeEngine.isActive()) {\n                    logger.warning(\"No registration found for \" + serviceName + \" / \" + eventPacket.id);\n                }\n                return;\n            }\n            if (!isLocal(registration)) {\n                logger.severe(\"Invalid target for  \" + registration);\n                return;\n            }\n            if (registration.listener == null) {\n                logger.warning(\"Something seems wrong! Subscriber is local but listener instance is null! -> \" + registration);\n                return;\n            }\n            service.dispatchEvent(eventObject, registration.listener);\n        }","commit_id":"21b1946e97715ecb9b071ac6ebe64868a7055eda","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void publishEvent(String serviceName, EventRegistration registration, Object event, int orderKey) {\n        if (!(registration instanceof Registration)) {\n            throw new IllegalArgumentException();\n        }\n        final Registration reg = (Registration) registration;\n        if (reg.isLocal()) {\n            executeLocal(serviceName, event, reg, orderKey);\n        } else {\n            final Address subscriber = registration.getSubscriber();\n            sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, event), orderKey);\n        }\n    }","id":100165,"modified_method":"public void publishEvent(String serviceName, EventRegistration registration, Object event, int orderKey) {\n        if (!(registration instanceof Registration)) {\n            throw new IllegalArgumentException();\n        }\n        final Registration reg = (Registration) registration;\n        if (isLocal(reg)) {\n            executeLocal(serviceName, event, reg, orderKey);\n        } else {\n            final Address subscriber = registration.getSubscriber();\n            sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, event), orderKey);\n        }\n    }","commit_id":"21b1946e97715ecb9b071ac6ebe64868a7055eda","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void publishEvent(String serviceName, Collection<EventRegistration> registrations, Object event, int orderKey) {\n        final Iterator<EventRegistration> iter = registrations.iterator();\n        Data eventData = null;\n        while (iter.hasNext()) {\n            EventRegistration registration = iter.next();\n            if (!(registration instanceof Registration)) {\n                throw new IllegalArgumentException();\n            }\n            final Registration reg = (Registration) registration;\n            if (reg.isLocal()) {\n                executeLocal(serviceName, event, reg, orderKey);\n            } else {\n                if (eventData == null) {\n                    eventData = nodeEngine.toData(event);\n                }\n                final Address subscriber = registration.getSubscriber();\n                sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, eventData), orderKey);\n            }\n        }\n    }","id":100166,"modified_method":"public void publishEvent(String serviceName, Collection<EventRegistration> registrations, Object event, int orderKey) {\n        final Iterator<EventRegistration> iter = registrations.iterator();\n        Data eventData = null;\n        while (iter.hasNext()) {\n            EventRegistration registration = iter.next();\n            if (!(registration instanceof Registration)) {\n                throw new IllegalArgumentException();\n            }\n            final Registration reg = (Registration) registration;\n            if (isLocal(reg)) {\n                executeLocal(serviceName, event, reg, orderKey);\n            } else {\n                if (eventData == null) {\n                    eventData = nodeEngine.toData(event);\n                }\n                final Address subscriber = registration.getSubscriber();\n                sendEventPacket(subscriber, new EventPacket(registration.getId(), serviceName, eventData), orderKey);\n            }\n        }\n    }","commit_id":"21b1946e97715ecb9b071ac6ebe64868a7055eda","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void handle(HttpPostCommand command) {\n        try {\n            String uri = command.getURI();\n            if (uri.startsWith(URI_MAPS)) {\n                int indexEnd = uri.indexOf('/', URI_MAPS.length());\n                String mapName = uri.substring(URI_MAPS.length(), indexEnd);\n                String key = uri.substring(indexEnd + 1);\n                byte[] data = command.getData();\n                textCommandService.put(mapName, key, new RestValue(data, command.getContentType()), 0);\n                command.setResponse(HttpCommand.RES_204);\n            } else if (uri.startsWith(URI_MANCENTER_CHANGE_URL)) {\n                if (textCommandService.getNode().getGroupProperties().MC_URL_CHANGE_ENABLED.getBoolean()) {\n                    byte[] res = HttpCommand.RES_204;\n                    byte[] data = command.getData();\n                    String[] strList = new String(data).split(\"&\");\n                    String cluster = URLDecoder.decode(strList[0], \"UTF-8\");\n                    String pass = URLDecoder.decode(strList[1], \"UTF-8\");\n                    String url = URLDecoder.decode(strList[2], \"UTF-8\");\n\n                    ManagementCenterService managementCenterService = textCommandService.getNode().getManagementCenterService();\n                    if (managementCenterService != null) {\n                        res = managementCenterService.changeWebServerUrlOverCluster(cluster, pass, url);\n                    }\n                    command.setResponse(res);\n                }\n                else {\n                    command.setResponse(HttpCommand.RES_503);\n                }\n            } else if (uri.startsWith(URI_QUEUES)) {\n                String queueName = null;\n                String simpleValue = null;\n                String suffix;\n                if (uri.endsWith(\"/\")) {\n                    suffix = uri.substring(URI_QUEUES.length(), uri.length() - 1);\n                } else {\n                    suffix = uri.substring(URI_QUEUES.length(), uri.length());\n                }\n                int indexSlash = suffix.lastIndexOf(\"/\");\n                if (indexSlash == -1) {\n                    queueName = suffix;\n                } else {\n                    queueName = suffix.substring(0, indexSlash);\n                    simpleValue = suffix.substring(indexSlash + 1, suffix.length());\n                }\n                byte[] data;\n                byte[] contentType;\n                if (simpleValue == null) {\n                    data = command.getData();\n                    contentType = command.getContentType();\n                } else {\n                    data = simpleValue.getBytes();\n                    contentType = QUEUE_SIMPLE_VALUE_CONTENT_TYPE;\n                }\n                boolean offerResult = textCommandService.offer(queueName, new RestValue(data, contentType));\n                if (offerResult) {\n                    command.setResponse(HttpCommand.RES_204);\n                } else {\n                    command.setResponse(HttpCommand.RES_503);\n                }\n            } else {\n                command.setResponse(HttpCommand.RES_400);\n            }\n        } catch (Exception e) {\n            command.setResponse(HttpCommand.RES_500);\n        }\n        textCommandService.sendResponse(command);\n    }","id":100167,"modified_method":"public void handle(HttpPostCommand command) {\n        try {\n            String uri = command.getURI();\n            if (uri.startsWith(URI_MAPS)) {\n                handleMap(command, uri);\n            } else if (uri.startsWith(URI_MANCENTER_CHANGE_URL)) {\n                handleManagementCenterUrlChange(command);\n            } else if (uri.startsWith(URI_QUEUES)) {\n                handleQueue(command, uri);\n            } else {\n                command.setResponse(HttpCommand.RES_400);\n            }\n        } catch (Exception e) {\n            command.setResponse(HttpCommand.RES_500);\n        }\n        textCommandService.sendResponse(command);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void send(Address address, Operation operation) {\n        instance.node.nodeEngine.getOperationService().createInvocationBuilder(MapService.SERVICE_NAME, operation, address).invoke();\n    }","id":100168,"modified_method":"public void send(Address address, Operation operation) {\n        //todo: clean up needed.\n        OperationService operationService = instance.node.nodeEngine.getOperationService();\n\n        operationService.createInvocationBuilder(MapService.SERVICE_NAME, operation, address).invoke();\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void shutdown() {\n        if (running.compareAndSet(true, false)) {\n            logger.info(\"Shutting down Hazelcast Management Center\");\n            try {\n                interruptThread(stateSender);\n                interruptThread(taskPoller);\n            } catch (Throwable ignored) {\n            }\n        }\n    }","id":100169,"modified_method":"public void shutdown() {\n        if (!isRunning.compareAndSet(true, false)) {\n            //it is already shutdown.\n            return;\n        }\n\n        logger.info(\"Shutting down Hazelcast Management Center Service\");\n        try {\n            interruptThread(stateSendThread);\n            interruptThread(taskPollThread);\n        } catch (Throwable ignored) {\n        }\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Object callOnMember(Member member, Operation operation) {\n        Future future = instance.node.nodeEngine.getOperationService()\n                .createInvocationBuilder(MapService.SERVICE_NAME, operation, ((MemberImpl) member).getAddress()).invoke();\n        try {\n            return future.get();\n        } catch (Throwable t) {\n            StringWriter s = new StringWriter();\n            t.printStackTrace(new PrintWriter(s));\n            return s.toString();\n        }\n    }","id":100170,"modified_method":"public Object callOnMember(Member member, Operation operation) {\n        Address address = ((MemberImpl) member).getAddress();\n        return callOnAddress(address, operation);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ManagementCenterService(HazelcastInstanceImpl instance) {\n        this.instance = instance;\n        logger = this.instance.node.getLogger(ManagementCenterService.class.getName());\n        managementCenterConfig = this.instance.node.config.getManagementCenterConfig();\n        if (managementCenterConfig == null) {\n            throw new IllegalStateException(\"ManagementCenterConfig should not be null!\");\n        }\n        this.securityToken = managementCenterConfig.getSecurityToken();\n\n        String clusterId = managementCenterConfig.getClusterId();\n\n        String url = managementCenterConfig.getUrl();\n\n        boolean hostedManCenterEnabled = instance.node.getGroupProperties().HOSTED_MANAGEMENT_ENABLED.getBoolean();\n\n        if(hostedManCenterEnabled && managementCenterConfig.isEnabled() && url==null){\n            String hostedManCenterUrl = instance.node.getGroupProperties().HOSTED_MANAGEMENT_URL.getString();\n\n            //if the url is not set, but the management center is enabled, we are going to point him to the hosted management solution.\n            //if the url is set, he is running his own management center instance and we are not going to bother him with the\n            //hosted management solution.\n\n            if(managementCenterConfig.getSecurityToken() == null){\n\n                //so the user has not provided a security token, so need to tell him that he can create one at\n                //our registration page.\n\n                //we only want to display the page for hosted management registration once. We don't want to pollute\n                //the logfile.\n                if(DISPLAYED_HOSTED_MANAGEMENT_CENTER_INFO.compareAndSet(false,true)){\n                    logger.info(\"======================================================\");\n                    logger.info(\"Manage your Hazelcast cluster with the Management Center SaaS Application\");\n                    logger.info(hostedManCenterUrl+\"/register.jsp\");\n                    logger.info(\"======================================================\");\n                }\n            }else{\n                url = hostedManCenterUrl;\n                //the user has provided a security token.\n\n                if (clusterId == null) {\n                    //the user has not provided a clusterId, so lets generate one for him.\n                    IAtomicReference<String> clusterIdAtomicLong = instance.getAtomicReference(\"___clusterIdGenerator\");\n                    String id = clusterIdAtomicLong.get();\n                    if (id == null) {\n                        id = \"\" + Math.abs(new Random().nextLong());\n                        if (!clusterIdAtomicLong.compareAndSet(null, id)) {\n                            id = clusterIdAtomicLong.get();\n                        }\n                    }\n                    clusterId = \"\" + id;\n                }\n\n                logger.info(\"======================================================\");\n                logger.info(\"You can access your Hazelcast instance at:\");\n                logger.info(url + \"/start.do?clusterid=\" + clusterId);\n                logger.info(\"======================================================\");\n            }\n        }\n        this.clusterId = clusterId;\n\n        this.instance.getLifecycleService().addLifecycleListener(this);\n        this.instance.getCluster().addMembershipListener(this);\n        maxVisibleInstanceCount = this.instance.node.groupProperties.MC_MAX_INSTANCE_COUNT.getInteger();\n        commandHandler = new ConsoleCommandHandler(this.instance);\n\n        webServerUrl = url != null ?\n                (!url.endsWith(\"/\") ? url + '/' : url) : null;\n        updateIntervalMs = (managementCenterConfig.getUpdateInterval() > 0)\n                ? managementCenterConfig.getUpdateInterval() * 1000 : 5000;\n        taskPoller = new TaskPoller();\n        stateSender = new StateSender();\n        serializationService = instance.node.getSerializationService();\n        final Address address = instance.node.address;\n        identifier = new ManagementCenterIdentifier(instance.node.getBuildInfo().getVersion(),\n                instance.getConfig().getGroupConfig().getName(), address.getHost() + \":\" + address.getPort());\n    }","id":100171,"modified_method":"public ManagementCenterService(HazelcastInstanceImpl instance) {\n        this.instance = instance;\n        logger = instance.node.getLogger(ManagementCenterService.class);\n        managementCenterConfig = getManagementCenterConfig();\n        securityToken = managementCenterConfig.getSecurityToken();\n        managementCenterUrl = getManagementCenterUrl();\n        clusterId = getClusterId();\n        commandHandler = new ConsoleCommandHandler(instance);\n        taskPollThread = new TaskPollThread();\n        stateSendThread = new StateSendThread();\n        serializationService = instance.node.getSerializationService();\n        identifier = newManagementCenterIdentifier();\n        registerListeners();\n        logHostedManagementCenterMessages();\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Object callOnAddress(Address address, Operation operation) {\n        Future future = instance.node.nodeEngine.getOperationService().createInvocationBuilder(MapService.SERVICE_NAME, operation, address).invoke();\n        try {\n            return future.get();\n        } catch (Throwable t) {\n            StringWriter s = new StringWriter();\n            t.printStackTrace(new PrintWriter(s));\n            return s.toString();\n        }\n    }","id":100172,"modified_method":"public Object callOnAddress(Address address, Operation operation) {\n        //todo: why are we always executing on the mapservice??\n        OperationService operationService = instance.node.nodeEngine.getOperationService();\n        Future future = operationService.invokeOnTarget(MapService.SERVICE_NAME, operation, address);\n        try {\n            return future.get();\n        } catch (Throwable t) {\n            StringWriter s = new StringWriter();\n            t.printStackTrace(new PrintWriter(s));\n            return s.toString();\n        }\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void setVersionMismatch(boolean mismatch) {\n        versionMismatch = mismatch;\n    }","id":100173,"modified_method":"private void sleepOnVersionMismatch() throws InterruptedException {\n        if (versionMismatch) {\n            Thread.sleep(1000 * 60);\n            versionMismatch = false;\n        }\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void start() {\n        if (running.compareAndSet(false, true)) {\n            if (webServerUrl != null) {\n                taskPoller.start();\n                stateSender.start();\n                logger.info(\"Hazelcast will connect to Management Center on address: \" + webServerUrl);\n            } else {\n                logger.warning(\"Hazelcast Management Center web-server URL is null!\");\n            }\n        }\n    }","id":100174,"modified_method":"public void start() {\n        if (managementCenterUrl == null) {\n            logger.warning(\"Can't start Hazelcast Management Center Service: web-server URL is null!\");\n            return;\n        }\n\n        if (!isRunning.compareAndSet(false, true)) {\n            //it is already started\n            return;\n        }\n\n        taskPollThread.start();\n        stateSendThread.start();\n        logger.info(\"Hazelcast will connect to Hazelcast Management Center on address: \\n\" + managementCenterUrl);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     *\n     * HC specific settings, operands etc. use this method.\n     *\n     * */\n    public static String lowerCaseInternal(String str) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        return str.toLowerCase(LOCALE_INTERNAL);\n    }","id":100175,"modified_method":"/**\n     * HC specific settings, operands etc. use this method.\n     */\n    public static String lowerCaseInternal(String s) {\n        if (isNullOrEmpty(s)) {\n            return s;\n        }\n        return s.toLowerCase(LOCALE_INTERNAL);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     *\n     * HC specific settings, operands etc. use this method.\n     *\n     * */\n    public static String upperCaseInternal(String str) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        return str.toUpperCase(LOCALE_INTERNAL);\n    }","id":100176,"modified_method":"/**\n     * HC specific settings, operands etc. use this method.\n     */\n    public static String upperCaseInternal(String s) {\n        if (isNullOrEmpty(s)) {\n            return s;\n        }\n        return s.toUpperCase(LOCALE_INTERNAL);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public static Node getNode(HazelcastInstance hz) {\n        HazelcastInstanceImpl impl = null;\n        if (hz instanceof HazelcastInstanceProxy) {\n            impl = ((HazelcastInstanceProxy) hz).original;\n        } else if (hz instanceof HazelcastInstanceImpl) {\n            impl = (HazelcastInstanceImpl) hz;\n        }\n        return impl != null ? impl.node : null;\n    }","id":100177,"modified_method":"public static Node getNode(HazelcastInstance hz) {\n        HazelcastInstanceImpl impl = getHazelcastInstanceImpl(hz);\n        return impl != null ? impl.node : null;\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testSerialization() throws InterruptedException {\n        HazelcastInstance hz = createHazelcastInstanceFactory(1).newHazelcastInstance();\n        SerializationService serializationService = getNode(hz).getSerializationService();\n\n        TimedMemberState state =getNode(hz).getManagementCenterService().getTimedMemberState();\n\n        Data data = serializationService.toData(state);\n        TimedMemberState result = (TimedMemberState) serializationService.toObject(data);\n        assertNotNull(result);\n    }","id":100178,"modified_method":"@Test\n    public void testSerialization() throws InterruptedException {\n        HazelcastInstance hz = createHazelcastInstanceFactory(1).newHazelcastInstance();\n        SerializationService serializationService = getNode(hz).getSerializationService();\n        TimedMemberStateFactory timedMemberStateFactory = new TimedMemberStateFactory(getHazelcastInstanceImpl(hz));\n\n        TimedMemberState state = timedMemberStateFactory.createTimedMemberState();\n\n        Data data = serializationService.toData(state);\n        TimedMemberState result = serializationService.toObject(data);\n        assertNotNull(result);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testComplexObject() throws Exception {\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(1);\n        HazelcastInstance hz = factory.newHazelcastInstance();\n        Field original = HazelcastInstanceProxy.class.getDeclaredField(\"original\");\n        original.setAccessible(true);\n\n        HazelcastInstanceImpl impl = (HazelcastInstanceImpl) original.get(hz);\n        ManagementCenterService mcs = impl.node.getManagementCenterService();\n        Method getTimedMemberState = ManagementCenterService.class.getDeclaredMethod(\"getTimedMemberState\");\n        getTimedMemberState.setAccessible(true);\n        TimedMemberState memberState = (TimedMemberState) getTimedMemberState.invoke(mcs);\n\n        SerializationService ss = impl.node.getSerializationService();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);\n        ObjectDataOutput out = ss.createObjectDataOutputStream(baos);\n        out.writeObject(memberState);\n\n        ObjectDataInput in = ss.createObjectDataInput(baos.toByteArray());\n        TimedMemberState result = in.readObject();\n\n        assertEquals(memberState, result);\n    }","id":100179,"modified_method":"@Test\n    public void testComplexObject() throws Exception {\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(1);\n        HazelcastInstance hz = factory.newHazelcastInstance();\n        Field original = HazelcastInstanceProxy.class.getDeclaredField(\"original\");\n        original.setAccessible(true);\n\n        HazelcastInstanceImpl impl = (HazelcastInstanceImpl) original.get(hz);\n        TimedMemberStateFactory timedMemberStateFactory = new TimedMemberStateFactory(impl);\n        TimedMemberState memberState = timedMemberStateFactory.createTimedMemberState();\n\n        SerializationService ss = impl.node.getSerializationService();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);\n        ObjectDataOutput out = ss.createObjectDataOutputStream(baos);\n        out.writeObject(memberState);\n\n        ObjectDataInput in = ss.createObjectDataInput(baos.toByteArray());\n        TimedMemberState result = in.readObject();\n\n        assertEquals(memberState, result);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Override\n    public void writeResponse(ManagementCenterService managementCenterService, ObjectDataOutput dos) throws Exception {\n        managementCenterService.setVersionMismatch(true);\n        ILogger logger = managementCenterService.getHazelcastInstance().node.getLogger(VersionMismatchLogRequest.class);\n        //todo: does this message make sense because to the user it just displays version information we already know.\n        //he has no clue that the management version is not matching with his own.\n        logger.severe(\"The version of the management center is \" + manCenterVersion);\n    }","id":100180,"modified_method":"@Override\n    public void writeResponse(ManagementCenterService managementCenterService, ObjectDataOutput dos) throws Exception {\n        managementCenterService.signalVersionMismatch();\n        ILogger logger = managementCenterService.getHazelcastInstance().node.getLogger(VersionMismatchLogRequest.class);\n        //todo: does this message make sense because to the user it just displays version information we already know.\n        //he has no clue that the management version is not matching with his own.\n        logger.severe(\"The version of the management center is \" + manCenterVersion);\n    }","commit_id":"394b518e9b94ba5dd8c835211857d025bde448e9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void shouldPutDatabaseDirectoriesIntoDataDatabases()\n    {\n        Config config = new Config( stringMap( DatabaseManagementSystemSettings.data_directory.name(), \"the-data-directory\" ) );\n        assertThat( config.get( DatabaseManagementSystemSettings.database_path ),\n                equalTo( new File( \"the-data-directory/databases/graph.db\" ) ) );\n    }","id":100181,"modified_method":"@Test\n    public void shouldPutDatabaseDirectoriesIntoDataDatabases()\n    {\n        Config config = new Config( stringMap( DatabaseManagementSystemSettings.data_directory.name(), \"the-data-directory\" ) );\n        assertThat( config.get( DatabaseManagementSystemSettings.database_path ),\n                equalTo( new File( System.getProperty(\"user.dir\") + \"/the-data-directory/databases/graph.db\" ) ) );\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldWriteDebugToInternalDiagnosticsLogForEnabledContexts() throws Exception\n    {\n        // Given\n        GraphDatabaseService db = new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder( testDir.graphDbDir() )\n                .setConfig( GraphDatabaseSettings.store_internal_debug_contexts, getClass().getName() + \",java.io\" )\n                .newGraphDatabase();\n\n        // When\n        LogService logService = ((GraphDatabaseAPI) db).getDependencyResolver().resolveDependency( LogService.class );\n        logService.getInternalLog( getClass() ).debug( \"A debug entry\" );\n        logService.getInternalLog( GraphDatabaseService.class ).debug( \"A GDS debug entry\" );\n        logService.getInternalLog( StringWriter.class ).debug( \"A SW debug entry\" );\n\n        db.shutdown();\n        File internalLog = new File( testDir.graphDbDir(), StoreLogService.INTERNAL_LOG_NAME );\n\n        // Then\n        assertThat( internalLog.isFile(), is( true ) );\n        assertThat( internalLog.length(), greaterThan( 0L ) );\n\n        assertEquals( 1, countOccurrences( internalLog, \"A debug entry\" ) );\n        assertEquals( 0, countOccurrences( internalLog, \"A GDS debug entry\" ) );\n        assertEquals( 1, countOccurrences( internalLog, \"A SW debug entry\" ) );\n    }","id":100182,"modified_method":"@Test\n    public void shouldWriteDebugToInternalDiagnosticsLogForEnabledContexts() throws Exception\n    {\n        // Given\n        GraphDatabaseService db = new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder( testDir.graphDbDir() )\n                .setConfig( GraphDatabaseSettings.store_internal_debug_contexts, getClass().getName() + \",java.io\" )\n                .setConfig( GraphDatabaseSettings.logs_directory, testDir.directory(\"logs\").getAbsolutePath() )\n                .newGraphDatabase();\n\n        // When\n        LogService logService = ((GraphDatabaseAPI) db).getDependencyResolver().resolveDependency( LogService.class );\n        logService.getInternalLog( getClass() ).debug( \"A debug entry\" );\n        logService.getInternalLog( GraphDatabaseService.class ).debug( \"A GDS debug entry\" );\n        logService.getInternalLog( StringWriter.class ).debug( \"A SW debug entry\" );\n\n        db.shutdown();\n        File internalLog = new File( testDir.directory( \"logs\" ), StoreLogService.INTERNAL_LOG_NAME );\n\n        // Then\n        assertThat( internalLog.isFile(), is( true ) );\n        assertThat( internalLog.length(), greaterThan( 0L ) );\n\n        assertEquals( 1, countOccurrences( internalLog, \"A debug entry\" ) );\n        assertEquals( 0, countOccurrences( internalLog, \"A GDS debug entry\" ) );\n        assertEquals( 1, countOccurrences( internalLog, \"A SW debug entry\" ) );\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldWriteToInternalDiagnosticsLog() throws Exception\n    {\n        // Given\n        new TestGraphDatabaseFactory().newEmbeddedDatabase( testDir.graphDbDir() ).shutdown();\n        File internalLog = new File( testDir.graphDbDir(), StoreLogService.INTERNAL_LOG_NAME );\n\n        // Then\n        assertThat( internalLog.isFile(), is( true ) );\n        assertThat( internalLog.length(), greaterThan( 0L ) );\n\n        assertEquals( 1, countOccurrences( internalLog, \"Database is now ready\" ) );\n        assertEquals( 1, countOccurrences( internalLog, \"Database is now unavailable\" ) );\n    }","id":100183,"modified_method":"@Test\n    public void shouldWriteToInternalDiagnosticsLog() throws Exception\n    {\n        // Given\n        new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder( testDir.graphDbDir() )\n                .setConfig( GraphDatabaseSettings.logs_directory, testDir.directory(\"logs\").getAbsolutePath() )\n                .newGraphDatabase().shutdown();\n        File internalLog = new File( testDir.directory( \"logs\" ), StoreLogService.INTERNAL_LOG_NAME );\n\n        // Then\n        assertThat( internalLog.isFile(), is( true ) );\n        assertThat( internalLog.length(), greaterThan( 0L ) );\n\n        assertEquals( 1, countOccurrences( internalLog, \"Database is now ready\" ) );\n        assertEquals( 1, countOccurrences( internalLog, \"Database is now unavailable\" ) );\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldNotWriteDebugToInternalDiagnosticsLogByDefault() throws Exception\n    {\n        // Given\n        GraphDatabaseService db = new TestGraphDatabaseFactory().newEmbeddedDatabase( testDir.graphDbDir() );\n\n        // When\n        LogService logService = ((GraphDatabaseAPI) db).getDependencyResolver().resolveDependency( LogService.class );\n        logService.getInternalLog( getClass() ).debug( \"A debug entry\" );\n\n        db.shutdown();\n        File internalLog = new File( testDir.graphDbDir(), StoreLogService.INTERNAL_LOG_NAME );\n\n        // Then\n        assertThat( internalLog.isFile(), is( true ) );\n        assertThat( internalLog.length(), greaterThan( 0L ) );\n\n        assertEquals( 0, countOccurrences( internalLog, \"A debug entry\" ) );\n    }","id":100184,"modified_method":"@Test\n    public void shouldNotWriteDebugToInternalDiagnosticsLogByDefault() throws Exception\n    {\n        // Given\n        GraphDatabaseService db = new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder( testDir.graphDbDir() )\n                .setConfig( GraphDatabaseSettings.logs_directory, testDir.directory(\"logs\").getAbsolutePath() )\n                .newGraphDatabase();\n\n        // When\n        LogService logService = ((GraphDatabaseAPI) db).getDependencyResolver().resolveDependency( LogService.class );\n        logService.getInternalLog( getClass() ).debug( \"A debug entry\" );\n\n        db.shutdown();\n        File internalLog = new File( testDir.directory( \"logs\" ), StoreLogService.INTERNAL_LOG_NAME );\n\n        // Then\n        assertThat( internalLog.isFile(), is( true ) );\n        assertThat( internalLog.length(), greaterThan( 0L ) );\n\n        assertEquals( 0, countOccurrences( internalLog, \"A debug entry\" ) );\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Before\n    public void setup() throws Exception\n    {\n        cluster = clusterRule\n                .withProvider( clusterWithAdditionalClients( 2, 1 ) )\n                .withAvailabilityChecks( masterAvailable(), masterSeesMembers( 3 ), allSeesAllAsJoined() )\n                .startCluster();\n    }","id":100185,"modified_method":"@Before\n    public void setup() throws Exception\n    {\n        cluster = clusterRule\n                .withProvider( clusterWithAdditionalClients( 2, 1 ) )\n                .withAvailabilityChecks( masterAvailable(), masterSeesMembers( 3 ), allSeesAllAsJoined() )\n                .withSharedSetting( logs_directory, clusterRule.directory( \"logs\" ).getAbsolutePath() )\n                .startCluster();\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"private long countLoggingLines( HighlyAvailableGraphDatabase db, String suffix ) throws IOException\n    {\n        Path logFile = Paths.get( cluster.getStoreDir( db ).getAbsolutePath(), StoreLogService.INTERNAL_LOG_NAME );\n        try ( Stream<String> lines = Files.lines( logFile ) )\n        {\n            return lines.filter( line -> line.endsWith( suffix ) ).count();\n        }\n    }","id":100186,"modified_method":"private long countLoggingLines( HighlyAvailableGraphDatabase db, String suffix ) throws IOException\n    {\n        Path logFile = Paths.get( clusterRule.directory( \"logs\" ).getAbsolutePath(), StoreLogService.INTERNAL_LOG_NAME );\n        try ( Stream<String> lines = Files.lines( logFile ) )\n        {\n            return lines.filter( line -> line.endsWith( suffix ) ).count();\n        }\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected LogService createLogService( LogProvider userLogProvider )\n    {\n        long internalLogRotationThreshold = config.get( GraphDatabaseSettings.store_internal_log_rotation_threshold );\n        long internalLogRotationDelay = config.get( GraphDatabaseSettings.store_internal_log_rotation_delay );\n        int internalLogMaxArchives = config.get( GraphDatabaseSettings.store_internal_log_max_archives );\n\n        final StoreLogService.Builder builder =\n                StoreLogService.withRotation( internalLogRotationThreshold, internalLogRotationDelay,\n                        internalLogMaxArchives, jobScheduler );\n\n        if ( userLogProvider != null )\n        {\n            builder.withUserLogProvider( userLogProvider );\n        }\n\n        builder.withRotationListener(\n                logProvider -> diagnosticsManager.dumpAll( logProvider.getLog( DiagnosticsManager.class ) ) );\n\n        for ( String debugContext : config.get( GraphDatabaseSettings.store_internal_debug_contexts ) )\n        {\n            builder.withLevel( debugContext, Level.DEBUG );\n        }\n        builder.withDefaultLevel( config.get( GraphDatabaseSettings.store_internal_log_level ) );\n\n        File internalLog = config.get( GraphDatabaseSettings.logs_directory );\n        StoreLogService logService;\n        try\n        {\n            if ( internalLog == null )\n            {\n                logService = builder.inStoreDirectory( fileSystem, storeDir );\n            }\n            else\n            {\n                logService = builder.toFile( fileSystem, internalLog );\n            }\n        }\n        catch ( IOException ex )\n        {\n            throw new RuntimeException( ex );\n        }\n        return life.add( logService );\n    }","id":100187,"modified_method":"protected LogService createLogService( LogProvider userLogProvider )\n    {\n        long internalLogRotationThreshold = config.get( GraphDatabaseSettings.store_internal_log_rotation_threshold );\n        long internalLogRotationDelay = config.get( GraphDatabaseSettings.store_internal_log_rotation_delay );\n        int internalLogMaxArchives = config.get( GraphDatabaseSettings.store_internal_log_max_archives );\n\n        final StoreLogService.Builder builder =\n                StoreLogService.withRotation( internalLogRotationThreshold, internalLogRotationDelay,\n                        internalLogMaxArchives, jobScheduler );\n\n        if ( userLogProvider != null )\n        {\n            builder.withUserLogProvider( userLogProvider );\n        }\n\n        builder.withRotationListener(\n                logProvider -> diagnosticsManager.dumpAll( logProvider.getLog( DiagnosticsManager.class ) ) );\n\n        for ( String debugContext : config.get( GraphDatabaseSettings.store_internal_debug_contexts ) )\n        {\n            builder.withLevel( debugContext, Level.DEBUG );\n        }\n        builder.withDefaultLevel( config.get( GraphDatabaseSettings.store_internal_log_level ) );\n\n        File internalLog = config.get( GraphDatabaseSettings.logs_directory );\n        StoreLogService logService;\n        try\n        {\n            if ( internalLog == null )\n            {\n                logService = builder.inStoreDirectory( fileSystem, storeDir );\n            }\n            else\n            {\n                logService = builder.toFile( fileSystem, new File(internalLog, StoreLogService.INTERNAL_LOG_NAME ) );\n            }\n        }\n        catch ( IOException ex )\n        {\n            throw new RuntimeException( ex );\n        }\n        return life.add( logService );\n    }","commit_id":"17ac2a446f04a48db957afac2d1b3b7feec92f90","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void testNonBlockingWrite() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n        // Must have a real docBase - just use temp\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBWriteServlet servlet = new NBWriteServlet();\n        String servletName = NBWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n        tomcat.getConnector().setProperty(\"socket.txBufSize\", \"1024\");\n        tomcat.start();\n\n        SocketFactory factory = SocketFactory.getDefault();\n        Socket s = factory.createSocket(\"localhost\", getPort());\n\n        ByteChunk result = new ByteChunk();\n        OutputStream os = s.getOutputStream();\n        os.write((\"GET / HTTP/1.1\\r\\n\" +\n                \"Host: localhost:\" + getPort() + \"\\r\\n\" +\n                \"Connection: close\\r\\n\" +\n                \"\\r\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        os.flush();\n\n        InputStream is = s.getInputStream();\n        byte[] buffer = new byte[8192];\n\n        int read = 0;\n        int readSinceLastPause = 0;\n        while (read != -1) {\n            read = is.read(buffer);\n            if (read > 0) {\n                result.append(buffer, 0, read);\n            }\n            readSinceLastPause += read;\n            if (readSinceLastPause > WRITE_SIZE / 16) {\n                readSinceLastPause = 0;\n                Thread.sleep(500);\n            }\n        }\n\n        os.close();\n        is.close();\n        s.close();\n\n        // Validate the result.\n        // Response line\n        String resultString = result.toString();\n        log.info(\"Client read \" + resultString.length() + \" bytes\");\n        int lineStart = 0;\n        int lineEnd = resultString.indexOf('\\n', 0);\n        String line = resultString.substring(lineStart, lineEnd + 1);\n        Assert.assertEquals(\"HTTP/1.1 200 OK\\r\\n\", line);\n\n        // Check headers - looking to see if response is chunked (it should be)\n        boolean chunked = false;\n        while (line.length() > 2) {\n            lineStart = lineEnd + 1;\n            lineEnd = resultString.indexOf('\\n', lineStart);\n            line = resultString.substring(lineStart, lineEnd + 1);\n            if (line.startsWith(\"Transfer-Encoding:\")) {\n                Assert.assertEquals(\"Transfer-Encoding: chunked\\r\\n\", line);\n                chunked = true;\n            }\n        }\n        Assert.assertTrue(chunked);\n\n        // Now check body size\n        int totalBodyRead = 0;\n        int chunkSize = -1;\n\n        while (chunkSize != 0) {\n            // Chunk size in hex\n            lineStart = lineEnd + 1;\n            lineEnd = resultString.indexOf('\\n', lineStart);\n            line = resultString.substring(lineStart, lineEnd + 1);\n            Assert.assertTrue(line.endsWith(\"\\r\\n\"));\n            line = line.substring(0, line.length() - 2);\n            log.info(\"[\" + line + \"]\");\n            chunkSize = Integer.parseInt(line, 16);\n\n            // Read the chunk\n            lineStart = lineEnd + 1;\n            lineEnd = resultString.indexOf('\\n', lineStart);\n            log.info(\"Start : \"  + lineStart + \", End: \" + lineEnd);\n            if (lineEnd > lineStart) {\n                line = resultString.substring(lineStart, lineEnd + 1);\n            } else {\n                line = resultString.substring(lineStart);\n            }\n            if (line.length() > 40) {\n                log.info(line.substring(0, 32));\n            } else {\n                log.info(line);\n            }\n            if (chunkSize + 2 != line.length()) {\n                log.error(\"Chunk wrong length. Was \" + line.length() +\n                        \" Expected \" + (chunkSize + 2));\n\n                byte[] resultBytes = resultString.getBytes();\n\n                // Find error\n                boolean found = false;\n                for (int i = totalBodyRead; i < (totalBodyRead + line.length()); i++) {\n                    if (DATA[i] != resultBytes[lineStart + i - totalBodyRead]) {\n                        int dataStart = i - 16;\n                        if (dataStart < 0) {\n                            dataStart = 0;\n                        }\n                        int dataEnd = i + 16;\n                        if (dataEnd > DATA.length) {\n                            dataEnd = DATA.length;\n                        }\n                        int resultStart = lineStart + i - totalBodyRead - 16;\n                        if (resultStart < 0) {\n                            resultStart = 0;\n                        }\n                        int resultEnd = lineStart + i - totalBodyRead + 16;\n                        if (resultEnd > resultString.length()) {\n                            resultEnd = resultString.length();\n                        }\n                        log.error(\"Mis-match tx: \" + new String(\n                                DATA, dataStart, dataEnd - dataStart));\n                        log.error(\"Mis-match rx: \" +\n                                resultString.substring(resultStart, resultEnd));\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    log.error(\"No mismatch. Data truncated\");\n                }\n            }\n\n            Assert.assertTrue(line.endsWith(\"\\r\\n\"));\n            Assert.assertEquals(chunkSize + 2, line.length());\n\n            totalBodyRead += chunkSize;\n        }\n\n        Assert.assertEquals(WRITE_SIZE, totalBodyRead);\n    }","id":100188,"modified_method":"@Test\n    public void testNonBlockingWrite() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n        // No file system docBase required\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBWriteServlet servlet = new NBWriteServlet();\n        String servletName = NBWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n        tomcat.getConnector().setProperty(\"socket.txBufSize\", \"1024\");\n        tomcat.start();\n\n        SocketFactory factory = SocketFactory.getDefault();\n        Socket s = factory.createSocket(\"localhost\", getPort());\n\n        ByteChunk result = new ByteChunk();\n        OutputStream os = s.getOutputStream();\n        os.write((\"GET / HTTP/1.1\\r\\n\" +\n                \"Host: localhost:\" + getPort() + \"\\r\\n\" +\n                \"Connection: close\\r\\n\" +\n                \"\\r\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        os.flush();\n\n        InputStream is = s.getInputStream();\n        byte[] buffer = new byte[8192];\n\n        int read = 0;\n        int readSinceLastPause = 0;\n        while (read != -1) {\n            read = is.read(buffer);\n            if (read > 0) {\n                result.append(buffer, 0, read);\n            }\n            readSinceLastPause += read;\n            if (readSinceLastPause > WRITE_SIZE / 16) {\n                readSinceLastPause = 0;\n                Thread.sleep(500);\n            }\n        }\n\n        os.close();\n        is.close();\n        s.close();\n\n        // Validate the result.\n        // Response line\n        String resultString = result.toString();\n        log.info(\"Client read \" + resultString.length() + \" bytes\");\n        int lineStart = 0;\n        int lineEnd = resultString.indexOf('\\n', 0);\n        String line = resultString.substring(lineStart, lineEnd + 1);\n        Assert.assertEquals(\"HTTP/1.1 200 OK\\r\\n\", line);\n\n        // Check headers - looking to see if response is chunked (it should be)\n        boolean chunked = false;\n        while (line.length() > 2) {\n            lineStart = lineEnd + 1;\n            lineEnd = resultString.indexOf('\\n', lineStart);\n            line = resultString.substring(lineStart, lineEnd + 1);\n            if (line.startsWith(\"Transfer-Encoding:\")) {\n                Assert.assertEquals(\"Transfer-Encoding: chunked\\r\\n\", line);\n                chunked = true;\n            }\n        }\n        Assert.assertTrue(chunked);\n\n        // Now check body size\n        int totalBodyRead = 0;\n        int chunkSize = -1;\n\n        while (chunkSize != 0) {\n            // Chunk size in hex\n            lineStart = lineEnd + 1;\n            lineEnd = resultString.indexOf('\\n', lineStart);\n            line = resultString.substring(lineStart, lineEnd + 1);\n            Assert.assertTrue(line.endsWith(\"\\r\\n\"));\n            line = line.substring(0, line.length() - 2);\n            log.info(\"[\" + line + \"]\");\n            chunkSize = Integer.parseInt(line, 16);\n\n            // Read the chunk\n            lineStart = lineEnd + 1;\n            lineEnd = resultString.indexOf('\\n', lineStart);\n            log.info(\"Start : \"  + lineStart + \", End: \" + lineEnd);\n            if (lineEnd > lineStart) {\n                line = resultString.substring(lineStart, lineEnd + 1);\n            } else {\n                line = resultString.substring(lineStart);\n            }\n            if (line.length() > 40) {\n                log.info(line.substring(0, 32));\n            } else {\n                log.info(line);\n            }\n            if (chunkSize + 2 != line.length()) {\n                log.error(\"Chunk wrong length. Was \" + line.length() +\n                        \" Expected \" + (chunkSize + 2));\n\n                byte[] resultBytes = resultString.getBytes();\n\n                // Find error\n                boolean found = false;\n                for (int i = totalBodyRead; i < (totalBodyRead + line.length()); i++) {\n                    if (DATA[i] != resultBytes[lineStart + i - totalBodyRead]) {\n                        int dataStart = i - 16;\n                        if (dataStart < 0) {\n                            dataStart = 0;\n                        }\n                        int dataEnd = i + 16;\n                        if (dataEnd > DATA.length) {\n                            dataEnd = DATA.length;\n                        }\n                        int resultStart = lineStart + i - totalBodyRead - 16;\n                        if (resultStart < 0) {\n                            resultStart = 0;\n                        }\n                        int resultEnd = lineStart + i - totalBodyRead + 16;\n                        if (resultEnd > resultString.length()) {\n                            resultEnd = resultString.length();\n                        }\n                        log.error(\"Mis-match tx: \" + new String(\n                                DATA, dataStart, dataEnd - dataStart));\n                        log.error(\"Mis-match rx: \" +\n                                resultString.substring(resultStart, resultEnd));\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    log.error(\"No mismatch. Data truncated\");\n                }\n            }\n\n            Assert.assertTrue(line.endsWith(\"\\r\\n\"));\n            Assert.assertEquals(chunkSize + 2, line.length());\n\n            totalBodyRead += chunkSize;\n        }\n\n        Assert.assertEquals(WRITE_SIZE, totalBodyRead);\n    }","commit_id":"d183dfbbe20804a7523cafa957461da1b9afd8a6","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        // Must have a real docBase - just use temp\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }","id":100189,"modified_method":"@Test\n    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        // No file system docBase required\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }","commit_id":"d183dfbbe20804a7523cafa957461da1b9afd8a6","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testNonBlockingWriteError() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        // Must have a real docBase - just use temp\n        StandardContext ctx = (StandardContext) tomcat.addContext(\n                \"\", System.getProperty(\"java.io.tmpdir\"));\n\n        TesterAccessLogValve alv = new TesterAccessLogValve();\n        ctx.getPipeline().addValve(alv);\n\n        NBWriteServlet servlet = new NBWriteServlet();\n        String servletName = NBWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n        tomcat.getConnector().setProperty(\"socket.txBufSize\", \"1024\");\n        tomcat.start();\n\n        SocketFactory factory = SocketFactory.getDefault();\n        Socket s = factory.createSocket(\"localhost\", getPort());\n\n        ByteChunk result = new ByteChunk();\n        OutputStream os = s.getOutputStream();\n        os.write((\"GET / HTTP/1.1\\r\\n\" +\n                \"Host: localhost:\" + getPort() + \"\\r\\n\" +\n                \"Connection: close\\r\\n\" +\n                \"\\r\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        os.flush();\n\n        InputStream is = s.getInputStream();\n        byte[] buffer = new byte[8192];\n\n        int read = 0;\n        int readSinceLastPause = 0;\n        int readTotal = 0;\n        while (read != -1 && readTotal < WRITE_SIZE / 32) {\n            long start = System.currentTimeMillis();\n            read = is.read(buffer);\n            long end = System.currentTimeMillis();\n            log.info(\"Client read [\" + read + \"] bytes in [\" + (end - start) +\n                    \"] ms\");\n            if (read > 0) {\n                result.append(buffer, 0, read);\n            }\n            readSinceLastPause += read;\n            readTotal += read;\n            if (readSinceLastPause > WRITE_SIZE / 64) {\n                readSinceLastPause = 0;\n                Thread.sleep(WRITE_PAUSE_MS);\n            }\n        }\n\n        os.close();\n        is.close();\n        s.close();\n\n        String resultString = result.toString();\n        log.info(\"Client read \" + resultString.length() + \" bytes\");\n        int lineStart = 0;\n        int lineEnd = resultString.indexOf('\\n', 0);\n        String line = resultString.substring(lineStart, lineEnd + 1);\n        Assert.assertEquals(\"HTTP/1.1 200 OK\\r\\n\", line);\n\n        // Listeners are invoked and access valve entries created on a different\n        // thread so give that thread a chance to complete its work.\n        int count = 0;\n        while (count < 100 &&\n                !(servlet.wlistener.onErrorInvoked || servlet.rlistener.onErrorInvoked)) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        while (count < 100 && alv.getEntryCount() < 1) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        Assert.assertTrue(\"Error listener should have been invoked.\",\n                servlet.wlistener.onErrorInvoked || servlet.rlistener.onErrorInvoked);\n\n        // TODO Figure out why non-blocking writes with the NIO connector appear\n        // to be slower on Linux\n        alv.validateAccessLog(1, 500, WRITE_PAUSE_MS,\n                WRITE_PAUSE_MS + 30 * 1000);\n    }","id":100190,"modified_method":"@Test\n    public void testNonBlockingWriteError() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        // No file system docBase required\n        Context ctx = tomcat.addContext(\"\", null);\n\n        TesterAccessLogValve alv = new TesterAccessLogValve();\n        ctx.getPipeline().addValve(alv);\n\n        NBWriteServlet servlet = new NBWriteServlet();\n        String servletName = NBWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n        tomcat.getConnector().setProperty(\"socket.txBufSize\", \"1024\");\n        tomcat.start();\n\n        SocketFactory factory = SocketFactory.getDefault();\n        Socket s = factory.createSocket(\"localhost\", getPort());\n\n        ByteChunk result = new ByteChunk();\n        OutputStream os = s.getOutputStream();\n        os.write((\"GET / HTTP/1.1\\r\\n\" +\n                \"Host: localhost:\" + getPort() + \"\\r\\n\" +\n                \"Connection: close\\r\\n\" +\n                \"\\r\\n\").getBytes(StandardCharsets.ISO_8859_1));\n        os.flush();\n\n        InputStream is = s.getInputStream();\n        byte[] buffer = new byte[8192];\n\n        int read = 0;\n        int readSinceLastPause = 0;\n        int readTotal = 0;\n        while (read != -1 && readTotal < WRITE_SIZE / 32) {\n            long start = System.currentTimeMillis();\n            read = is.read(buffer);\n            long end = System.currentTimeMillis();\n            log.info(\"Client read [\" + read + \"] bytes in [\" + (end - start) +\n                    \"] ms\");\n            if (read > 0) {\n                result.append(buffer, 0, read);\n            }\n            readSinceLastPause += read;\n            readTotal += read;\n            if (readSinceLastPause > WRITE_SIZE / 64) {\n                readSinceLastPause = 0;\n                Thread.sleep(WRITE_PAUSE_MS);\n            }\n        }\n\n        os.close();\n        is.close();\n        s.close();\n\n        String resultString = result.toString();\n        log.info(\"Client read \" + resultString.length() + \" bytes\");\n        int lineStart = 0;\n        int lineEnd = resultString.indexOf('\\n', 0);\n        String line = resultString.substring(lineStart, lineEnd + 1);\n        Assert.assertEquals(\"HTTP/1.1 200 OK\\r\\n\", line);\n\n        // Listeners are invoked and access valve entries created on a different\n        // thread so give that thread a chance to complete its work.\n        int count = 0;\n        while (count < 100 &&\n                !(servlet.wlistener.onErrorInvoked || servlet.rlistener.onErrorInvoked)) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        while (count < 100 && alv.getEntryCount() < 1) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        Assert.assertTrue(\"Error listener should have been invoked.\",\n                servlet.wlistener.onErrorInvoked || servlet.rlistener.onErrorInvoked);\n\n        // TODO Figure out why non-blocking writes with the NIO connector appear\n        // to be slower on Linux\n        alv.validateAccessLog(1, 500, WRITE_PAUSE_MS,\n                WRITE_PAUSE_MS + 30 * 1000);\n    }","commit_id":"d183dfbbe20804a7523cafa957461da1b9afd8a6","url":"https://github.com/apache/tomcat"},{"original_method":"public Summary2(Vec vec, String name, double finite_min, double finite_max) {\n    this.colname = name;\n    this._type = vec.isEnum()?2:vec.isInt()?1:0;\n    this.nacnt = vec.naCnt();\n    this._domain = vec.isEnum() ? vec.domain() : null;\n    this._nrow = vec.length() - vec.naCnt();\n    double sigma = Double.isNaN(vec.sigma()) ? 0 : vec.sigma(); \n    if ( _type != T_ENUM ) {\n      this._mins = MemoryManager.malloc8d((int)Math.min(vec.length(),NMAX));\n      this._maxs = MemoryManager.malloc8d((int)Math.min(vec.length(),NMAX));\n      Arrays.fill(_mins, Double.NaN);\n      Arrays.fill(_maxs, Double.NaN);\n    } else {\n      _mins = MemoryManager.malloc8d(Math.min(_domain.length,NMAX));\n      _maxs = MemoryManager.malloc8d(Math.min(_domain.length,NMAX));\n    }\n    _min = vec.min();_max = vec.max();\n    double span = finite_max - finite_min + 1;\n    if( vec.isEnum() && span < MAX_HIST_SZ ) {\n      _start = finite_min;\n      _binsz = 1;\n      hcnt = new long[(int)span];\n    } else if (!Double.isNaN(finite_min)) {\n      // guard against improper parse (date type) or zero c._sigma\n      double b = Math.max(1e-4,3.5 * sigma/ Math.cbrt(_nrow));\n      double d = Math.pow(10, Math.floor(Math.log10(b)));\n      if (b > 20*d/3)\n        d *= 10;\n      else if (b > 5*d/3)\n        d *= 5;\n\n      // tweak for integers\n      if (d < 1. && vec.isInt()) d = 1.;\n      _binsz = d;\n      _start = _binsz * Math.floor(finite_min/_binsz);\n      int nbin = (int)(Math.round((finite_max + (vec.isInt()?.5:0) - _start)*1000000.0/_binsz)/1000000L) + 1;\n      assert nbin > 0;\n      hcnt = new long[nbin];\n    } else { // vec does not contain finite numbers\n      _start = vec.min();\n      _binsz = Double.POSITIVE_INFINITY;\n      hcnt = new long[1];\n    }\n  }","id":100191,"modified_method":"public Summary2(Vec vec, String name, double finite_min, double finite_max) {\n    this.colname = name;\n    this._type = vec.isEnum()?2:vec.isInt()?1:0;\n    this.nacnt = vec.naCnt();\n    this._domain = vec.isEnum() ? vec.domain() : null;\n    this._nrow = vec.length() - vec.naCnt();\n    double sigma = Double.isNaN(vec.sigma()) ? 0 : vec.sigma(); \n    if ( _type != T_ENUM ) {\n      this._mins = MemoryManager.malloc8d((int)Math.min(vec.length(),NMAX));\n      this._maxs = MemoryManager.malloc8d((int)Math.min(vec.length(),NMAX));\n      Arrays.fill(_mins, Double.NaN);\n      Arrays.fill(_maxs, Double.NaN);\n    } else {\n      _mins = MemoryManager.malloc8d(Math.min(_domain.length,NMAX));\n      _maxs = MemoryManager.malloc8d(Math.min(_domain.length,NMAX));\n    }\n    _min = vec.min();_max = vec.max();\n    double span = finite_max - finite_min + 1;\n    if( vec.isEnum() && _domain.length < MAX_HIST_SZ ) {\n      _start = 0;\n      _binsz = 1;\n      hcnt = new long[_domain.length];\n    } else if (!Double.isNaN(finite_min)) {\n      // guard against improper parse (date type) or zero c._sigma\n      double b = Math.max(1e-4,3.5 * sigma/ Math.cbrt(_nrow));\n      double d = Math.pow(10, Math.floor(Math.log10(b)));\n      if (b > 20*d/3)\n        d *= 10;\n      else if (b > 5*d/3)\n        d *= 5;\n\n      // tweak for integers\n      if (d < 1. && vec.isInt()) d = 1.;\n      _binsz = d;\n      _start = _binsz * Math.floor(finite_min/_binsz);\n      int nbin = (int)(Math.round((finite_max + (vec.isInt()?.5:0) - _start)*1000000.0/_binsz)/1000000L) + 1;\n      assert nbin > 0;\n      hcnt = new long[nbin];\n    } else { // vec does not contain finite numbers\n      _start = vec.min();\n      _binsz = Double.POSITIVE_INFINITY;\n      hcnt = new long[1];\n    }\n  }","commit_id":"0b1664dde22e55234f67b5f5809d5a120b7f2505","url":"https://github.com/h2oai/h2o-2"},{"original_method":"@Override public void reduce(BasicSummaryTask other){\n      for (int c = 0; c < _finite_min.length; c++) {\n        double min = _finite_min[c];\n        double max = _finite_max[c];\n        _finite_min[c] = Double.isNaN(min) ? other._finite_min[c] : Math.min(min, other._finite_min[c]);\n        _finite_max[c] = Double.isNaN(max) ? other._finite_max[c] : Math.max(max, other._finite_max[c]);\n      }\n    }","id":100192,"modified_method":"@Override public void reduce(BasicSummaryTask other){\n      for (int c = 0; c < _finite_min.length; c++) {\n        double min1 = _finite_min[c];\n        double max1 = _finite_max[c];\n        double min2 = other._finite_min[c];\n        double max2 = other._finite_max[c];\n        if (Double.isNaN(min1))\n          _finite_min[c] = min2;\n        else if (!Double.isNaN(min2))\n          _finite_min[c] = Math.min(min1, min2);\n        if (Double.isNaN(max1))\n          _finite_max[c] = max2;\n        else if (!Double.isNaN(max2))\n          _finite_max[c] = Math.max(max1, max2);\n      }\n    }","commit_id":"0b1664dde22e55234f67b5f5809d5a120b7f2505","url":"https://github.com/h2oai/h2o-2"},{"original_method":"public void add(double val) {\n    if( Double.isNaN(val) ) return;\n    assert val >= _min : \"ERROR: ON COLUMN \" + colname + \"   VALUE \" + val + \" < VEC.MIN \" + _min;\n    assert val <= _max : \"ERROR: ON COLUMN \" + colname + \"   VALUE \" + val + \" > VEC.MAX \" + _max;\n    if ( _type != T_ENUM ) {\n      if (val == 0.) _zeros++;\n      int index;\n      // update min/max\n      if (Double.isNaN(_mins[_mins.length-1])) {\n        index = Arrays.binarySearch(_mins, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = _mins.length -1; j > index; j--)\n            _mins[j] = _mins[j-1];\n          _mins[index] = val;\n        }\n      }\n      if (val < _mins[_mins.length-1]) {\n        index = Arrays.binarySearch(_mins, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = _mins.length-1; j > index; j--) _mins[j] = _mins[j-1];\n          _mins[index] = val;\n        }\n      }\n      if (Double.isNaN(_maxs[_maxs.length-1])) {\n        index = Arrays.binarySearch(_maxs, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = _maxs.length -1; j > index; j--)\n            _maxs[j] = _maxs[j-1];\n          _maxs[index] = val;\n        }\n      }\n      else if (val > _maxs[0]) {\n        index = Arrays.binarySearch(_maxs, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = 0; j < index-1; j++) _maxs[j] = _maxs[j+1];\n          _maxs[index-1] = val;\n        }\n      }\n    }\n    // update histogram\n    long binIdx = val == Double.NEGATIVE_INFINITY ? 0\n            : val == Double.POSITIVE_INFINITY ? hcnt.length-1\n            : Math.round((val-_start)*1000000.0/_binsz)/1000000;\n    ++hcnt[(int)binIdx];\n    ++_rows;\n  }","id":100193,"modified_method":"public void add(double val) {\n    if( Double.isNaN(val) ) return;\n    assert val >= _min : \"ERROR: ON COLUMN \" + colname + \"   VALUE \" + val + \" < VEC.MIN \" + _min;\n    assert val <= _max : \"ERROR: ON COLUMN \" + colname + \"   VALUE \" + val + \" > VEC.MAX \" + _max;\n    if ( _type != T_ENUM ) {\n      if (val == 0.) _zeros++;\n      int index;\n      // update min/max\n      if (Double.isNaN(_mins[_mins.length-1])) {\n        index = Arrays.binarySearch(_mins, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = _mins.length -1; j > index; j--)\n            _mins[j] = _mins[j-1];\n          _mins[index] = val;\n        }\n      }\n      if (val < _mins[_mins.length-1]) {\n        index = Arrays.binarySearch(_mins, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = _mins.length-1; j > index; j--) _mins[j] = _mins[j-1];\n          _mins[index] = val;\n        }\n      }\n      if (Double.isNaN(_maxs[_maxs.length-1])) {\n        index = Arrays.binarySearch(_maxs, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = _maxs.length -1; j > index; j--)\n            _maxs[j] = _maxs[j-1];\n          _maxs[index] = val;\n        }\n      }\n      else if (val > _maxs[0]) {\n        index = Arrays.binarySearch(_maxs, val);\n        if (index < 0) {\n          index = -(index + 1);\n          for (int j = 0; j < index-1; j++) _maxs[j] = _maxs[j+1];\n          _maxs[index-1] = val;\n        }\n      }\n    }\n    // update histogram\n    long binIdx = val == Double.NEGATIVE_INFINITY ? 0\n            : val == Double.POSITIVE_INFINITY ? hcnt.length-1\n            : Math.round((val-_start)*1000000.0/_binsz)/1000000;\n    if ((int)binIdx >= hcnt.length) {\n      assert false;\n    }\n    ++hcnt[(int)binIdx];\n    ++_rows;\n  }","commit_id":"0b1664dde22e55234f67b5f5809d5a120b7f2505","url":"https://github.com/h2oai/h2o-2"},{"original_method":"public void computeMajorities() {\n    if ( _type != T_ENUM ) return;\n    for (int i = 0; i < _mins.length; i++) _mins[i] = i;\n    for (int i = 0; i < _maxs.length; i++) _maxs[i] = i;\n    int mini = 0, maxi = 0;\n    for( int i = 0; i < hcnt.length; i++ ) {\n      if (hcnt[i] < hcnt[(int)_mins[mini]]) {\n        _mins[mini] = i;\n        for (int j = 0; j < _mins.length; j++)\n          if (hcnt[(int)_mins[j]] > hcnt[(int)_mins[mini]]) mini = j;\n      }\n      if (hcnt[i] > hcnt[(int)_maxs[maxi]]) {\n        _maxs[maxi] = i;\n        for (int j = 0; j < _maxs.length; j++)\n          if (hcnt[(int)_maxs[j]] < hcnt[(int)_maxs[maxi]]) maxi = j;\n      }\n    }\n    for (int i = 0; i < _mins.length - 1; i++)\n      for (int j = 0; j < i; j++)\n        if (hcnt[(int)_mins[j]] > hcnt[(int)_mins[j+1]]) {\n          double t = _mins[j]; _mins[j] = _mins[j+1]; _mins[j+1] = t;\n        }\n    for (int i = 0; i < _maxs.length - 1; i++)\n      for (int j = 0; j < i; j++)\n        if (hcnt[(int)_maxs[j]] < hcnt[(int)_maxs[j+1]]) {\n          double t = _maxs[j]; _maxs[j] = _maxs[j+1]; _maxs[j+1] = t;\n        }\n  }","id":100194,"modified_method":"public void computeMajorities() {\n    if ( _type != T_ENUM ) return;\n    for (int i = 0; i < _mins.length; i++) _mins[i] = i;\n    for (int i = 0; i < _maxs.length; i++) _maxs[i] = i;\n    int mini = 0, maxi = 0;\n    for( int i = 0; i < hcnt.length; i++ ) {\n      if (hcnt[i] < hcnt[(int)_mins[mini]]) {\n        _mins[mini] = i;\n        for (int j = 0; j < _mins.length; j++)\n          if (hcnt[(int)_mins[j]] > hcnt[(int)_mins[mini]]) mini = j;\n      }\n      if (hcnt[i] > hcnt[(int)_maxs[maxi]]) {\n        _maxs[maxi] = i;\n        for (int j = 0; j < _maxs.length; j++)\n          if (hcnt[(int)_maxs[j]] < hcnt[(int)_maxs[maxi]]) maxi = j;\n      }\n    }\n    for (int i = 0; i < _mins.length - 1; i++)\n      for (int j = 0; j < i; j++) {\n        if ((int)_mins[j] >= hcnt.length) {\n          System.out.println();\n        }\n        if ((int)_mins[j+1] >= hcnt.length) {\n          System.out.println();\n        }\n        if (hcnt[(int)_mins[j]] > hcnt[(int)_mins[j+1]]) {\n          double t = _mins[j]; _mins[j] = _mins[j+1]; _mins[j+1] = t;\n        }\n      }\n    for (int i = 0; i < _maxs.length - 1; i++)\n      for (int j = 0; j < i; j++)\n        if (hcnt[(int)_maxs[j]] < hcnt[(int)_maxs[j+1]]) {\n          double t = _maxs[j]; _maxs[j] = _maxs[j+1]; _maxs[j+1] = t;\n        }\n  }","commit_id":"0b1664dde22e55234f67b5f5809d5a120b7f2505","url":"https://github.com/h2oai/h2o-2"},{"original_method":"private static void extractExif(ImageEntry e) {\n\n        int deg;\n        double min, sec;\n        double lon, lat;\n        Metadata metadata = null;\n        Directory dir = null;\n\n        try {\n            metadata = JpegMetadataReader.readMetadata(e.getFile());\n            dir = metadata.getDirectory(GpsDirectory.class);\n        } catch (CompoundException p) {\n            e.setExifCoor(null);\n            e.setPos(null);\n            return;\n        }\n\n        try {\n            // longitude\n\n            Rational[] components = dir.getRationalArray(GpsDirectory.TAG_GPS_LONGITUDE);\n\n            deg = components[0].intValue();\n            min = components[1].floatValue();\n            sec = components[2].floatValue();\n\n            lon = (deg + (min / 60) + (sec / 3600));\n\n            if (Double.isNaN(lon))\n                throw new IllegalArgumentException();\n\n            if (dir.getString(GpsDirectory.TAG_GPS_LONGITUDE_REF).charAt(0) == 'W') {\n                lon = -lon;\n            }\n\n            // latitude\n\n            components = dir.getRationalArray(GpsDirectory.TAG_GPS_LATITUDE);\n\n            deg = components[0].intValue();\n            min = components[1].floatValue();\n            sec = components[2].floatValue();\n\n            lat = (deg + (min / 60) + (sec / 3600));\n\n            if (Double.isNaN(lat))\n                throw new IllegalArgumentException();\n\n            if (dir.getString(GpsDirectory.TAG_GPS_LATITUDE_REF).charAt(0) == 'S') {\n                lat = -lat;\n            }\n\n            // Store values\n\n            e.setExifCoor(new LatLon(lat, lon));\n            e.setPos(e.getExifCoor());\n\n        } catch (CompoundException p) {\n            // Try to read lon/lat as double value (Nonstandard, created by some cameras -> #5220)\n            try {\n                Double longitude = dir.getDouble(GpsDirectory.TAG_GPS_LONGITUDE);\n                Double latitude = dir.getDouble(GpsDirectory.TAG_GPS_LATITUDE);\n                if (longitude == null || latitude == null)\n                    throw new CompoundException(\"\");\n\n                // Store values\n\n                e.setExifCoor(new LatLon(latitude, longitude));\n                e.setPos(e.getExifCoor());\n            } catch (CompoundException ex) {\n                e.setExifCoor(null);\n                e.setPos(null);\n            }\n        } catch (Exception ex) { // (other exceptions, e.g. #5271)\n            System.err.println(\"Error when reading EXIF from file: \"+ex);\n            e.setExifCoor(null);\n            e.setPos(null);\n        }\n\n        // compass direction value\n\n        Rational direction = null;\n\n        try {\n            direction = dir.getRational(GpsDirectory.TAG_GPS_IMG_DIRECTION);\n            if (direction != null) {\n                e.setExifImgDir(direction.doubleValue());\n            }\n        } catch (Exception ex) { // (CompoundException and other exceptions, e.g. #5271)\n            // Do nothing\n        }\n    }","id":100195,"modified_method":"private static void extractExif(ImageEntry e) {\n\n        double deg;\n        double min, sec;\n        double lon, lat;\n        Metadata metadata = null;\n        Directory dir = null;\n\n        try {\n            metadata = JpegMetadataReader.readMetadata(e.getFile());\n            dir = metadata.getDirectory(GpsDirectory.class);\n        } catch (CompoundException p) {\n            e.setExifCoor(null);\n            e.setPos(null);\n            return;\n        }\n\n        try {\n            // longitude\n\n            Rational[] components = dir.getRationalArray(GpsDirectory.TAG_GPS_LONGITUDE);\n\n            deg = components[0].doubleValue();\n            min = components[1].doubleValue();\n            sec = components[2].doubleValue();\n\n            if (Double.isNaN(deg) && Double.isNaN(min) && Double.isNaN(sec))\n                throw new IllegalArgumentException();\n\n            lon = (Double.isNaN(deg) ? 0 : deg + (Double.isNaN(min) ? 0 : (min / 60)) + (Double.isNaN(sec) ? 0 : (sec / 3600)));\n\n            if (dir.getString(GpsDirectory.TAG_GPS_LONGITUDE_REF).charAt(0) == 'W') {\n                lon = -lon;\n            }\n\n            // latitude\n\n            components = dir.getRationalArray(GpsDirectory.TAG_GPS_LATITUDE);\n\n            deg = components[0].doubleValue();\n            min = components[1].doubleValue();\n            sec = components[2].doubleValue();\n\n            if (Double.isNaN(deg) && Double.isNaN(min) && Double.isNaN(sec))\n                throw new IllegalArgumentException();\n\n            lat = (Double.isNaN(deg) ? 0 : deg + (Double.isNaN(min) ? 0 : (min / 60)) + (Double.isNaN(sec) ? 0 : (sec / 3600)));\n\n            if (Double.isNaN(lat))\n                throw new IllegalArgumentException();\n\n            if (dir.getString(GpsDirectory.TAG_GPS_LATITUDE_REF).charAt(0) == 'S') {\n                lat = -lat;\n            }\n\n            // Store values\n\n            e.setExifCoor(new LatLon(lat, lon));\n            e.setPos(e.getExifCoor());\n\n        } catch (CompoundException p) {\n            // Try to read lon/lat as double value (Nonstandard, created by some cameras -> #5220)\n            try {\n                Double longitude = dir.getDouble(GpsDirectory.TAG_GPS_LONGITUDE);\n                Double latitude = dir.getDouble(GpsDirectory.TAG_GPS_LATITUDE);\n                if (longitude == null || latitude == null)\n                    throw new CompoundException(\"\");\n\n                // Store values\n\n                e.setExifCoor(new LatLon(latitude, longitude));\n                e.setPos(e.getExifCoor());\n            } catch (CompoundException ex) {\n                e.setExifCoor(null);\n                e.setPos(null);\n            }\n        } catch (Exception ex) { // (other exceptions, e.g. #5271)\n            System.err.println(\"Error when reading EXIF from file: \"+ex);\n            e.setExifCoor(null);\n            e.setPos(null);\n        }\n\n        // compass direction value\n\n        Rational direction = null;\n\n        try {\n            direction = dir.getRational(GpsDirectory.TAG_GPS_IMG_DIRECTION);\n            if (direction != null) {\n                e.setExifImgDir(direction.doubleValue());\n            }\n        } catch (Exception ex) { // (CompoundException and other exceptions, e.g. #5271)\n            // Do nothing\n        }\n    }","commit_id":"ad32167b8345f97fc44e4630eba1ab5e874ff7af","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Runtime validation of a Web Applicaiton.\n     *\n     * This method uses JNDI to look up the resources located under a \n     * <code>DirContext<\/code>. It locates Web Application MANIFEST.MF \n     * file in the /META-INF/ directory of the application and all \n     * MANIFEST.MF files in each JAR file located in the WEB-INF/lib \n     * directory and creates an <code>ArrayList<\/code> of \n     * <code>ManifestResorce<code> objects. These objects are then passed \n     * to the validateManifestResources method for validation.\n     *\n     * @param dirContext The JNDI root of the Web Application\n     * @param context The context from which the Logger and path to the\n     *                application\n     *\n     * @return true if all required extensions satisfied\n     */\n    public static synchronized boolean validateApplication(\n                                           DirContext dirContext, \n                                           StandardContext context)\n                    throws IOException {\n\n        String appName = context.getPath();\n        ArrayList<ManifestResource> appManifestResources =\n            new ArrayList<ManifestResource>();\n        // If the application context is null it does not exist and \n        // therefore is not valid\n        if (dirContext == null) return false;\n        // Find the Manifest for the Web Applicaiton\n        InputStream inputStream = null;\n        try {\n            NamingEnumeration<Binding> wne =\n                dirContext.listBindings(\"/META-INF/\");\n            Binding binding = wne.nextElement();\n            if (binding.getName().toUpperCase().equals(\"MANIFEST.MF\")) {\n                Resource resource = (Resource)dirContext.lookup\n                                    (\"/META-INF/\" + binding.getName());\n                inputStream = resource.streamContent();\n                Manifest manifest = new Manifest(inputStream);\n                inputStream.close();\n                inputStream = null;\n                ManifestResource mre = new ManifestResource\n                    (sm.getString(\"extensionValidator.web-application-manifest\"),\n                    manifest, ManifestResource.WAR);\n                appManifestResources.add(mre);\n            } \n        } catch (NamingException nex) {\n            // Application does not contain a MANIFEST.MF file\n        } catch (NoSuchElementException nse) {\n            // Application does not contain a MANIFEST.MF file\n        } finally {\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (Throwable t) {\n                    // Ignore\n                }\n            }\n        }\n\n        // Locate the Manifests for all bundled JARs\n        NamingEnumeration<Binding> ne = null;\n        try {\n            ne = dirContext.listBindings(\"WEB-INF/lib/\");\n            while ((ne != null) && ne.hasMoreElements()) {\n                Binding binding = ne.nextElement();\n                if (!binding.getName().toLowerCase().endsWith(\".jar\")) {\n                    continue;\n                }\n                Resource resource = (Resource)dirContext.lookup\n                                        (\"/WEB-INF/lib/\" + binding.getName());\n                Manifest jmanifest = getManifest(resource.streamContent());\n                if (jmanifest != null) {\n                    ManifestResource mre = new ManifestResource(\n                                                binding.getName(),\n                                                jmanifest, \n                                                ManifestResource.APPLICATION);\n                    appManifestResources.add(mre);\n                }\n            }\n        } catch (NamingException nex) {\n            // Jump out of the check for this application because it \n            // has no resources\n        }\n\n        return validateManifestResources(appName, appManifestResources);\n    }","id":100196,"modified_method":"/**\n     * Runtime validation of a Web Applicaiton.\n     *\n     * This method uses JNDI to look up the resources located under a \n     * <code>DirContext<\/code>. It locates Web Application MANIFEST.MF \n     * file in the /META-INF/ directory of the application and all \n     * MANIFEST.MF files in each JAR file located in the WEB-INF/lib \n     * directory and creates an <code>ArrayList<\/code> of \n     * <code>ManifestResorce<code> objects. These objects are then passed \n     * to the validateManifestResources method for validation.\n     *\n     * @param dirContext The JNDI root of the Web Application\n     * @param context The context from which the Logger and path to the\n     *                application\n     *\n     * @return true if all required extensions satisfied\n     */\n    public static synchronized boolean validateApplication(\n                                           DirContext dirContext, \n                                           StandardContext context)\n                    throws IOException {\n\n        String appName = context.getPath();\n        ArrayList<ManifestResource> appManifestResources =\n            new ArrayList<ManifestResource>();\n        // If the application context is null it does not exist and \n        // therefore is not valid\n        if (dirContext == null) return false;\n        // Find the Manifest for the Web Applicaiton\n        InputStream inputStream = null;\n        try {\n            NamingEnumeration<Binding> wne =\n                dirContext.listBindings(\"/META-INF/\");\n            Binding binding = wne.nextElement();\n            if (binding.getName().toUpperCase().equals(\"MANIFEST.MF\")) {\n                Resource resource = (Resource)dirContext.lookup\n                                    (\"/META-INF/\" + binding.getName());\n                inputStream = resource.streamContent();\n                Manifest manifest = new Manifest(inputStream);\n                inputStream.close();\n                inputStream = null;\n                ManifestResource mre = new ManifestResource\n                    (sm.getString(\"extensionValidator.web-application-manifest\"),\n                    manifest, ManifestResource.WAR);\n                appManifestResources.add(mre);\n            } \n        } catch (NamingException nex) {\n            // Application does not contain a MANIFEST.MF file\n        } catch (NoSuchElementException nse) {\n            // Application does not contain a MANIFEST.MF file\n        } finally {\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (Throwable t) {\n                    // Ignore\n                }\n            }\n        }\n\n        // Locate the Manifests for all bundled JARs\n        NamingEnumeration<Binding> ne = null;\n        try {\n            ne = dirContext.listBindings(\"WEB-INF/lib/\");\n            while ((ne != null) && ne.hasMoreElements()) {\n                Binding binding = ne.nextElement();\n                if (!binding.getName().toLowerCase().endsWith(\".jar\")) {\n                    continue;\n                }\n                Object obj =\n                    dirContext.lookup(\"/WEB-INF/lib/\" + binding.getName());\n                if (!(obj instanceof Resource)) {\n                    // Probably a directory named xxx.jar - ignore it\n                    continue;\n                }\n                Resource resource = (Resource) obj;\n                Manifest jmanifest = getManifest(resource.streamContent());\n                if (jmanifest != null) {\n                    ManifestResource mre = new ManifestResource(\n                                                binding.getName(),\n                                                jmanifest, \n                                                ManifestResource.APPLICATION);\n                    appManifestResources.add(mre);\n                }\n            }\n        } catch (NamingException nex) {\n            // Jump out of the check for this application because it \n            // has no resources\n        }\n\n        return validateManifestResources(appName, appManifestResources);\n    }","commit_id":"15b77ca71752d48cec648aede8e2844771bdcba9","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Configure the repositories for our class loader, based on the\n     * associated Context.\n     */\n    private void setRepositories() {\n\n        if (!(container instanceof Context))\n            return;\n        ServletContext servletContext =\n            ((Context) container).getServletContext();\n        if (servletContext == null)\n            return;\n\n        loaderRepositories=new ArrayList();\n        // Loading the work directory\n        File workDir =\n            (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);\n        if (workDir == null) {\n            log.info(\"No work dir for \" + servletContext);\n        }\n\n        if( log.isDebugEnabled()) \n            log.debug(sm.getString(\"webappLoader.deploy\", workDir.getAbsolutePath()));\n\n        classLoader.setWorkDir(workDir);\n\n        DirContext resources = container.getResources();\n\n        // Setting up the class repository (/WEB-INF/classes), if it exists\n\n        String classesPath = \"/WEB-INF/classes\";\n        DirContext classes = null;\n\n        try {\n            Object object = resources.lookup(classesPath);\n            if (object instanceof DirContext) {\n                classes = (DirContext) object;\n            }\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/classes collection\n            // exists\n        }\n\n        if (classes != null) {\n\n            File classRepository = null;\n\n            String absoluteClassesPath =\n                servletContext.getRealPath(classesPath);\n\n            if (absoluteClassesPath != null) {\n\n                classRepository = new File(absoluteClassesPath);\n\n            } else {\n\n                classRepository = new File(workDir, classesPath);\n                classRepository.mkdirs();\n                copyDir(classes, classRepository);\n\n            }\n\n            if(log.isDebugEnabled())\n                log.debug(sm.getString(\"webappLoader.classDeploy\", classesPath,\n                             classRepository.getAbsolutePath()));\n\n\n            // Adding the repository to the class loader\n            classLoader.addRepository(classesPath + \"/\", classRepository);\n            loaderRepositories.add(classesPath + \"/\" );\n\n        }\n\n        // Setting up the JAR repository (/WEB-INF/lib), if it exists\n\n        String libPath = \"/WEB-INF/lib\";\n\n        classLoader.setJarPath(libPath);\n\n        DirContext libDir = null;\n        // Looking up directory /WEB-INF/lib in the context\n        try {\n            Object object = resources.lookup(libPath);\n            if (object instanceof DirContext)\n                libDir = (DirContext) object;\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/lib collection\n            // exists\n        }\n\n        if (libDir != null) {\n\n            boolean copyJars = false;\n            String absoluteLibPath = servletContext.getRealPath(libPath);\n\n            File destDir = null;\n\n            if (absoluteLibPath != null) {\n                destDir = new File(absoluteLibPath);\n            } else {\n                copyJars = true;\n                destDir = new File(workDir, libPath);\n                destDir.mkdirs();\n            }\n\n            // Looking up directory /WEB-INF/lib in the context\n            try {\n                NamingEnumeration enumeration = resources.listBindings(libPath);\n                while (enumeration.hasMoreElements()) {\n\n                    Binding binding = (Binding) enumeration.nextElement();\n                    String filename = libPath + \"/\" + binding.getName();\n                    if (!filename.endsWith(\".jar\"))\n                        continue;\n\n                    // Copy JAR in the work directory, always (the JAR file\n                    // would get locked otherwise, which would make it\n                    // impossible to update it or remove it at runtime)\n                    File destFile = new File(destDir, binding.getName());\n\n                    if( log.isDebugEnabled())\n                    log.debug(sm.getString(\"webappLoader.jarDeploy\", filename,\n                                     destFile.getAbsolutePath()));\n\n                    Resource jarResource = (Resource) binding.getObject();\n                    if (copyJars) {\n                        if (!copy(jarResource.streamContent(),\n                                  new FileOutputStream(destFile)))\n                            continue;\n                    }\n\n                    try {\n                        JarFile jarFile = new JarFile(destFile);\n                        classLoader.addJar(filename, jarFile, destFile);\n                    } catch (Exception ex) {\n                        // Catch the exception if there is an empty jar file\n                        // Should ignore and continute loading other jar files \n                        // in the dir\n                    }\n                    \n                    loaderRepositories.add( filename );\n\n                }\n            } catch (NamingException e) {\n                // Silent catch: it's valid that no /WEB-INF/lib directory\n                // exists\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n    }","id":100197,"modified_method":"/**\n     * Configure the repositories for our class loader, based on the\n     * associated Context.\n     */\n    private void setRepositories() {\n\n        if (!(container instanceof Context))\n            return;\n        ServletContext servletContext =\n            ((Context) container).getServletContext();\n        if (servletContext == null)\n            return;\n\n        loaderRepositories=new ArrayList();\n        // Loading the work directory\n        File workDir =\n            (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);\n        if (workDir == null) {\n            log.info(\"No work dir for \" + servletContext);\n        }\n\n        if( log.isDebugEnabled()) \n            log.debug(sm.getString(\"webappLoader.deploy\", workDir.getAbsolutePath()));\n\n        classLoader.setWorkDir(workDir);\n\n        DirContext resources = container.getResources();\n\n        // Setting up the class repository (/WEB-INF/classes), if it exists\n\n        String classesPath = \"/WEB-INF/classes\";\n        DirContext classes = null;\n\n        try {\n            Object object = resources.lookup(classesPath);\n            if (object instanceof DirContext) {\n                classes = (DirContext) object;\n            }\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/classes collection\n            // exists\n        }\n\n        if (classes != null) {\n\n            File classRepository = null;\n\n            String absoluteClassesPath =\n                servletContext.getRealPath(classesPath);\n\n            if (absoluteClassesPath != null) {\n\n                classRepository = new File(absoluteClassesPath);\n\n            } else {\n\n                classRepository = new File(workDir, classesPath);\n                classRepository.mkdirs();\n                copyDir(classes, classRepository);\n\n            }\n\n            if(log.isDebugEnabled())\n                log.debug(sm.getString(\"webappLoader.classDeploy\", classesPath,\n                             classRepository.getAbsolutePath()));\n\n\n            // Adding the repository to the class loader\n            classLoader.addRepository(classesPath + \"/\", classRepository);\n            loaderRepositories.add(classesPath + \"/\" );\n\n        }\n\n        // Setting up the JAR repository (/WEB-INF/lib), if it exists\n\n        String libPath = \"/WEB-INF/lib\";\n\n        classLoader.setJarPath(libPath);\n\n        DirContext libDir = null;\n        // Looking up directory /WEB-INF/lib in the context\n        try {\n            Object object = resources.lookup(libPath);\n            if (object instanceof DirContext)\n                libDir = (DirContext) object;\n        } catch(NamingException e) {\n            // Silent catch: it's valid that no /WEB-INF/lib collection\n            // exists\n        }\n\n        if (libDir != null) {\n\n            boolean copyJars = false;\n            String absoluteLibPath = servletContext.getRealPath(libPath);\n\n            File destDir = null;\n\n            if (absoluteLibPath != null) {\n                destDir = new File(absoluteLibPath);\n            } else {\n                copyJars = true;\n                destDir = new File(workDir, libPath);\n                destDir.mkdirs();\n            }\n\n            // Looking up directory /WEB-INF/lib in the context\n            try {\n                NamingEnumeration enumeration = resources.listBindings(libPath);\n                while (enumeration.hasMoreElements()) {\n\n                    Binding binding = (Binding) enumeration.nextElement();\n                    String filename = libPath + \"/\" + binding.getName();\n                    if (!filename.endsWith(\".jar\"))\n                        continue;\n\n                    // Copy JAR in the work directory, always (the JAR file\n                    // would get locked otherwise, which would make it\n                    // impossible to update it or remove it at runtime)\n                    File destFile = new File(destDir, binding.getName());\n\n                    // Ignore directories named xxx.jar\n                    if (destFile.isDirectory())\n                        continue;\n\n                    if( log.isDebugEnabled())\n                    log.debug(sm.getString(\"webappLoader.jarDeploy\", filename,\n                                     destFile.getAbsolutePath()));\n\n                    Resource jarResource = (Resource) binding.getObject();\n                    if (copyJars) {\n                        if (!copy(jarResource.streamContent(),\n                                  new FileOutputStream(destFile)))\n                            continue;\n                    }\n\n                    try {\n                        JarFile jarFile = new JarFile(destFile);\n                        classLoader.addJar(filename, jarFile, destFile);\n                    } catch (Exception ex) {\n                        // Catch the exception if there is an empty jar file\n                        // Should ignore and continute loading other jar files \n                        // in the dir\n                    }\n                    \n                    loaderRepositories.add( filename );\n\n                }\n            } catch (NamingException e) {\n                // Silent catch: it's valid that no /WEB-INF/lib directory\n                // exists\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n    }","commit_id":"15b77ca71752d48cec648aede8e2844771bdcba9","url":"https://github.com/apache/tomcat"},{"original_method":"private void onAborted(int reason, String description) {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting on \"+this);\n\t\tboolean callFailCallback;\n\t\tboolean sendAbort;\n\t\tsynchronized(_senderThread) {\n\t\t\ttimeAllSent = -1;\n\t\t\t_failed = true;\n\t\t\t_senderThread.notifyAll();\n\t\t\tcallFailCallback = maybeFail();\n\t\t\tsendAbort = prepareSendAbort();\n\t\t}\n\t\tif(sendAbort) {\n\t\t\ttry {\n\t\t\t\tinnerSendAborted(reason, description);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tif(callFailCallback) callCallback(false);\n\t\tcancelItemsPending();\n\t}","id":100198,"modified_method":"private void onAborted(int reason, String description) {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting on \"+this);\n\t\tFuture fail;\n\t\tsynchronized(_senderThread) {\n\t\t\ttimeAllSent = -1;\n\t\t\t_failed = true;\n\t\t\t_senderThread.notifyAll();\n\t\t\tfail = maybeFail(reason, description);\n\t\t}\n\t\tfail.execute();\n\t\tcancelItemsPending();\n\t}","commit_id":"711c993202aae87863ab31e8abf51e376e73cdf2","url":"https://github.com/freenet/fred"},{"original_method":"/** Abort the send, and then send the sendAborted message. Don't do anything if the\n\t * send has already been aborted. */\n\tpublic void abortSend(int reason, String desc) throws NotConnectedException {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting send on \"+this);\n\t\tboolean callFail = false;\n\t\tboolean sendAbort = false;\n\t\tsynchronized(_senderThread) {\n\t\t\t_failed = true;\n\t\t\tcallFail = maybeFail();\n\t\t\tsendAbort = prepareSendAbort();\n\t\t}\n\t\tif(callFail) callCallback(false);\n\t\tif(sendAbort)\n\t\t\tinnerSendAborted(reason, desc);\n\t\tcancelItemsPending();\n\t}","id":100199,"modified_method":"/** Abort the send, and then send the sendAborted message. Don't do anything if the\n\t * send has already been aborted. */\n\tpublic void abortSend(int reason, String desc) throws NotConnectedException {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting send on \"+this);\n\t\tFuture fail;\n\t\tsynchronized(_senderThread) {\n\t\t\t_failed = true;\n\t\t\tfail = maybeFail(reason, desc);\n\t\t}\n\t\tfail.execute();\n\t\tcancelItemsPending();\n\t}","commit_id":"711c993202aae87863ab31e8abf51e376e73cdf2","url":"https://github.com/freenet/fred"},{"original_method":"public void scheduleTimeoutAfterBlockSends() {\n\t\tsynchronized(_senderThread) {\n\t\t\tif(_receivedSendCompletion) return;\n\t\t\tif(timeoutJob != null) return;\n\t\t\tif(logMINOR) Logger.minor(this, \"Scheduling timeout on \"+this);\n\t\t\ttimeoutJob = new PrioRunnable() {\n\t\t\t\t\n\t\t\t\tpublic void run() {\n\t\t\t\t\tboolean callFail;\n\t\t\t\t\tString timeString;\n\t\t\t\t\tString abortReason;\n\t\t\t\t\tboolean sendAborted;\n\t\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\t\tif(_completed) return;\n\t\t\t\t\t\tif(!_receivedSendCompletion) {\n\t\t\t\t\t\t\t_receivedSendCompletion = true;\n\t\t\t\t\t\t\t_receivedSendSuccess = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//SEND_TIMEOUT (one minute) after all packets have been transmitted, terminate the send.\n\t\t\t\t\t\tif(_failed) {\n\t\t\t\t\t\t\t// Already failed, we were just waiting for the acknowledgement sendAborted.\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send after failure on \"+this);\n\t\t\t\t\t\t\tabortReason = \"Already failed and no acknowledgement\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttimeString=TimeUtil.formatTime((System.currentTimeMillis() - timeAllSent), 2, true);\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" as we haven't heard from receiver in \"+timeString+ '.');\n\t\t\t\t\t\t\tabortReason = \"Haven't heard from you (receiver) in \"+timeString;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallFail = maybeFail();\n\t\t\t\t\t\tsendAborted = prepareSendAbort();\n\t\t\t\t\t}\n\t\t\t\t\tif(sendAborted) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinnerSendAborted(RetrievalException.RECEIVER_DIED, abortReason);\n\t\t\t\t\t\t} catch (NotConnectedException e) {\n\t\t\t\t\t\t\t// Ignore, it still failed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(callFail) {\n\t\t\t\t\t\tcallCallback(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int getPriority() {\n\t\t\t\t\treturn NativeThread.NORM_PRIORITY;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t_ticker.queueTimedJob(timeoutJob, \"Timeout for \"+this, SEND_TIMEOUT, false, false);\n\t\t}\n\t}","id":100200,"modified_method":"public void scheduleTimeoutAfterBlockSends() {\n\t\tsynchronized(_senderThread) {\n\t\t\tif(_receivedSendCompletion) return;\n\t\t\tif(timeoutJob != null) return;\n\t\t\tif(logMINOR) Logger.minor(this, \"Scheduling timeout on \"+this);\n\t\t\ttimeoutJob = new PrioRunnable() {\n\t\t\t\t\n\t\t\t\tpublic void run() {\n\t\t\t\t\tString timeString;\n\t\t\t\t\tString abortReason;\n\t\t\t\t\tFuture fail;\n\t\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\t\tif(_completed) return;\n\t\t\t\t\t\tif(!_receivedSendCompletion) {\n\t\t\t\t\t\t\t_receivedSendCompletion = true;\n\t\t\t\t\t\t\t_receivedSendSuccess = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//SEND_TIMEOUT (one minute) after all packets have been transmitted, terminate the send.\n\t\t\t\t\t\tif(_failed) {\n\t\t\t\t\t\t\t// Already failed, we were just waiting for the acknowledgement sendAborted.\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send after failure on \"+this);\n\t\t\t\t\t\t\tabortReason = \"Already failed and no acknowledgement\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttimeString=TimeUtil.formatTime((System.currentTimeMillis() - timeAllSent), 2, true);\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" as we haven't heard from receiver in \"+timeString+ '.');\n\t\t\t\t\t\t\tabortReason = \"Haven't heard from you (receiver) in \"+timeString;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfail = maybeFail(RetrievalException.RECEIVER_DIED, abortReason);\n\t\t\t\t\t}\n\t\t\t\t\tfail.execute();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int getPriority() {\n\t\t\t\t\treturn NativeThread.NORM_PRIORITY;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t_ticker.queueTimedJob(timeoutJob, \"Timeout for \"+this, SEND_TIMEOUT, false, false);\n\t\t}\n\t}","commit_id":"711c993202aae87863ab31e8abf51e376e73cdf2","url":"https://github.com/freenet/fred"},{"original_method":"/** @return True . */\n\t\tprivate boolean innerRun(int packetNo) {\n\t\t\ttry {\n\t\t\t\tMessageItem item = _destination.sendThrottledMessage(DMT.createPacketTransmit(_uid, packetNo, _sentPackets, _prb.getPacket(packetNo)), _prb._packetSize, _ctr, SEND_TIMEOUT, false, new MyAsyncMessageCallback());\n\t\t\t\tsynchronized(itemsPending) {\n\t\t\t\t\titemsPending.add(item);\n\t\t\t\t}\n\t\t\t} catch (PeerRestartedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (AbortedException e) {\n\t\t\t\tLogger.normal(this, \"Terminating send due to abort: \"+e);\n\t\t\t\t// The PRB callback will deal with this.\n\t\t\t\treturn false;\n\t\t\t} catch (WaitedTooLongException e) {\n\t\t\t\tLogger.normal(this, \"Waited too long to send packet, aborting on \"+BlockTransmitter.this);\n\t\t\t\tboolean callFail = false;\n\t\t\t\tboolean sendAborted;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tcallFail = maybeFail();\n\t\t\t\t\tsendAborted = prepareSendAbort();\n\t\t\t\t}\n\t\t\t\tif(sendAborted) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tinnerSendAborted(RetrievalException.TIMED_OUT, \"Sender unable to send packets quickly enough\");\n\t\t\t\t\t} catch (NotConnectedException e1) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(callFail) {\n\t\t\t\t\tcallCallback(false);\n\t\t\t\t}\n\t\t\t\tcancelItemsPending();\n\t\t\t\treturn false;\n\t\t\t} catch (SyncSendWaitedTooLongException e) {\n\t\t\t\t// Impossible, but lets cancel it anyway\n\t\t\t\tboolean callFail = false;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tcallFail = maybeFail();\n\t\t\t\t}\n\t\t\t\tLogger.error(this, \"Impossible: Caught \"+e+\" on \"+BlockTransmitter.this, e);\n\t\t\t\tif(callFail) {\n\t\t\t\t\tcallCallback(false);\n\t\t\t\t\tcleanup();\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tboolean success = false;\n\t\t\tboolean complete = false;\n\t\t\tsynchronized (_senderThread) {\n\t\t\t\t_sentPackets.setBit(packetNo, true);\n\t\t\t\tif(_unsent.size() == 0 && getNumSent() == _prb._packets) {\n\t\t\t\t\t//No unsent packets, no unreceived packets\n\t\t\t\t\tsendAllSentNotification();\n\t\t\t\t\tif(maybeAllSent()) {\n\t\t\t\t\t\tif(maybeComplete()) {\n\t\t\t\t\t\t\tcomplete = true;\n\t\t\t\t\t\t\tsuccess = _receivedSendSuccess;\n\t\t\t\t\t\t} else return false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(complete) {\n\t\t\t\tcallCallback(success);\n\t\t\t\tcleanup();\n\t\t\t\treturn false; // No more blocks to send.\n\t\t\t}\n\t\t\treturn true; // More blocks to send.\n\t\t}","id":100201,"modified_method":"/** @return True . */\n\t\tprivate boolean innerRun(int packetNo) {\n\t\t\ttry {\n\t\t\t\tMessageItem item = _destination.sendThrottledMessage(DMT.createPacketTransmit(_uid, packetNo, _sentPackets, _prb.getPacket(packetNo)), _prb._packetSize, _ctr, SEND_TIMEOUT, false, new MyAsyncMessageCallback());\n\t\t\t\tsynchronized(itemsPending) {\n\t\t\t\t\titemsPending.add(item);\n\t\t\t\t}\n\t\t\t} catch (PeerRestartedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (AbortedException e) {\n\t\t\t\tLogger.normal(this, \"Terminating send due to abort: \"+e);\n\t\t\t\t// The PRB callback will deal with this.\n\t\t\t\treturn false;\n\t\t\t} catch (WaitedTooLongException e) {\n\t\t\t\tLogger.normal(this, \"Waited too long to send packet, aborting on \"+BlockTransmitter.this);\n\t\t\t\tFuture fail;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tfail = maybeFail(RetrievalException.TIMED_OUT, \"Sender unable to send packets quickly enough\");\n\t\t\t\t}\n\t\t\t\tfail.execute();\n\t\t\t\tcancelItemsPending();\n\t\t\t\treturn false;\n\t\t\t} catch (SyncSendWaitedTooLongException e) {\n\t\t\t\t// Impossible, but lets cancel it anyway\n\t\t\t\tFuture fail;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tfail = maybeFail(RetrievalException.UNKNOWN, \"Impossible: SyncSendWaitedTooLong\");\n\t\t\t\t}\n\t\t\t\tLogger.error(this, \"Impossible: Caught \"+e+\" on \"+BlockTransmitter.this, e);\n\t\t\t\tfail.execute();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tboolean success = false;\n\t\t\tboolean complete = false;\n\t\t\tsynchronized (_senderThread) {\n\t\t\t\t_sentPackets.setBit(packetNo, true);\n\t\t\t\tif(_unsent.size() == 0 && getNumSent() == _prb._packets) {\n\t\t\t\t\t//No unsent packets, no unreceived packets\n\t\t\t\t\tsendAllSentNotification();\n\t\t\t\t\tif(maybeAllSent()) {\n\t\t\t\t\t\tif(maybeComplete()) {\n\t\t\t\t\t\t\tcomplete = true;\n\t\t\t\t\t\t\tsuccess = _receivedSendSuccess;\n\t\t\t\t\t\t} else return false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(complete) {\n\t\t\t\tcallCallback(success);\n\t\t\t\tcleanup();\n\t\t\t\treturn false; // No more blocks to send.\n\t\t\t}\n\t\t\treturn true; // More blocks to send.\n\t\t}","commit_id":"711c993202aae87863ab31e8abf51e376e73cdf2","url":"https://github.com/freenet/fred"},{"original_method":"private void onDisconnect() {\n\t\tthrottle.maybeDisconnected();\n\t\tLogger.normal(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" because node disconnected while waiting\");\n\t\t//They disconnected, can't send an abort to them then can we?\n\t\tsynchronized(_senderThread) {\n\t\t\t_receivedSendCompletion = true; // effectively\n\t\t\tif(!maybeFail()) return;\n\t\t}\n\t\tcallCallback(false);\n\t\t// All MessageItems will already have been unqueued, no need to call cancelItemsPending().\n\t}","id":100202,"modified_method":"private void onDisconnect() {\n\t\tthrottle.maybeDisconnected();\n\t\tLogger.normal(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" because node disconnected while waiting\");\n\t\t//They disconnected, can't send an abort to them then can we?\n\t\tFuture fail;\n\t\tsynchronized(_senderThread) {\n\t\t\t_receivedSendCompletion = true; // effectively\n\t\t\tfail = maybeFail(RetrievalException.SENDER_DISCONNECTED, \"Sender disconnected\");\n\t\t}\n\t\tfail.execute();\n\t}","commit_id":"711c993202aae87863ab31e8abf51e376e73cdf2","url":"https://github.com/freenet/fred"},{"original_method":"/** Only fail once. Called on a drastic failure e.g. disconnection. Unless we are sure\n\t * that we don't need to (e.g. on disconnection), the caller must call prepareSendAborted\n\t * afterwards, and if that returns true, send the sendAborted via innerSendAborted.\n\t * Caller must call the callback then call cleanup() outside the lock if this returns true. */\n\tpublic boolean maybeFail() {\n\t\tif(_completed) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() already completed on \"+this);\n\t\t\treturn false;\n\t\t}\n\t\t_failed = true;\n\t\tif(!_receivedSendCompletion) {\n\t\t\t// Don't actually timeout until after we have an acknowledgment of the transfer cancel.\n\t\t\t// This is important for keeping track of how many transfers are actually running, which will be important for load management later on.\n\t\t\t// The caller will immediately call prepareSendAbort() then innerSendAborted().\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for acknowledgement on \"+this);\n\t\t\tscheduleTimeoutAfterBlockSends();\n\t\t\treturn false;\n\t\t}\n\t\tif(blockSendsPending != 0) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for \"+blockSendsPending+\" block sends on \"+this);\n\t\t\treturn false;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"maybeFail() completing on \"+this);\n\t\t_completed = true;\n\t\tdecRunningBlockTransmits();\n\t\treturn true;\n\t}","id":100203,"modified_method":"/** Only fail once. Called on a drastic failure e.g. disconnection. Unless we are sure\n\t * that we don't need to (e.g. on disconnection), the caller must call prepareSendAborted\n\t * afterwards, and if that returns true, send the sendAborted via innerSendAborted.\n\t * LOCKING: Must be called inside the _senderThread lock.\n\t * @return A Future which the caller must execute() outside the lock. */\n\tpublic Future maybeFail(final int reason, final String description) {\n\t\tif(_completed) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() already completed on \"+this);\n\t\t\treturn nullFuture;\n\t\t}\n\t\t_failed = true;\n\t\tif(!_receivedSendCompletion) {\n\t\t\t// Don't actually timeout until after we have an acknowledgment of the transfer cancel.\n\t\t\t// This is important for keeping track of how many transfers are actually running, which will be important for load management later on.\n\t\t\t// The caller will immediately call prepareSendAbort() then innerSendAborted().\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for acknowledgement on \"+this);\n\t\t\tif(_sentSendAborted) {\n\t\t\t\tscheduleTimeoutAfterBlockSends();\n\t\t\t\treturn nullFuture; // Do nothing, waiting for timeout.\n\t\t\t} else {\n\t\t\t\t_sentSendAborted = true;\n\t\t\t\t// Send the aborted, then wait.\n\t\t\t\treturn new Future() {\n\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinnerSendAborted(reason, description);\n\t\t\t\t\t\t\tscheduleTimeoutAfterBlockSends();\n\t\t\t\t\t\t} catch (NotConnectedException e) {\n\t\t\t\t\t\t\tonDisconnect();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tif(blockSendsPending != 0) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for \"+blockSendsPending+\" block sends on \"+this);\n\t\t\treturn nullFuture; // Wait for blockSendsPending to reach 0\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"maybeFail() completing on \"+this);\n\t\t_completed = true;\n\t\tdecRunningBlockTransmits();\n\t\treturn new Future() {\n\n\t\t\tpublic void execute() {\n\t\t\t\tcallCallback(false);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}","commit_id":"711c993202aae87863ab31e8abf51e376e73cdf2","url":"https://github.com/freenet/fred"},{"original_method":"/** Abort the send, and then send the sendAborted message. Don't do anything if the\n\t * send has already been aborted. */\n\tpublic void abortSend(int reason, String desc) throws NotConnectedException {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting send on \"+this);\n\t\tboolean callFail = false;\n\t\tboolean sendAbort = false;\n\t\tsynchronized(_senderThread) {\n\t\t\t_failed = true;\n\t\t\tcallFail = maybeFail();\n\t\t\tsendAbort = prepareSendAbort();\n\t\t}\n\t\tif(callFail) callCallback(false);\n\t\tif(sendAbort)\n\t\t\tinnerSendAborted(reason, desc);\n\t\tcancelItemsPending();\n\t}","id":100204,"modified_method":"/** Abort the send, and then send the sendAborted message. Don't do anything if the\n\t * send has already been aborted. */\n\tpublic void abortSend(int reason, String desc) throws NotConnectedException {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting send on \"+this);\n\t\tFuture fail;\n\t\tsynchronized(_senderThread) {\n\t\t\t_failed = true;\n\t\t\tfail = maybeFail(reason, desc);\n\t\t}\n\t\tfail.execute();\n\t\tcancelItemsPending();\n\t}","commit_id":"933efde020ec9bf8a85a0548342069788b158655","url":"https://github.com/freenet/fred"},{"original_method":"/** Only fail once. Called on a drastic failure e.g. disconnection. Unless we are sure\n\t * that we don't need to (e.g. on disconnection), the caller must call prepareSendAborted\n\t * afterwards, and if that returns true, send the sendAborted via innerSendAborted.\n\t * Caller must call the callback then call cleanup() outside the lock if this returns true. */\n\tpublic boolean maybeFail() {\n\t\tif(_completed) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() already completed on \"+this);\n\t\t\treturn false;\n\t\t}\n\t\t_failed = true;\n\t\tif(!_receivedSendCompletion) {\n\t\t\t// Don't actually timeout until after we have an acknowledgment of the transfer cancel.\n\t\t\t// This is important for keeping track of how many transfers are actually running, which will be important for load management later on.\n\t\t\t// The caller will immediately call prepareSendAbort() then innerSendAborted().\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for acknowledgement on \"+this);\n\t\t\tscheduleTimeoutAfterBlockSends();\n\t\t\treturn false;\n\t\t}\n\t\tif(blockSendsPending != 0) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for \"+blockSendsPending+\" block sends on \"+this);\n\t\t\treturn false;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"maybeFail() completing on \"+this);\n\t\t_completed = true;\n\t\tdecRunningBlockTransmits();\n\t\treturn true;\n\t}","id":100205,"modified_method":"/** Only fail once. Called on a drastic failure e.g. disconnection. Unless we are sure\n\t * that we don't need to (e.g. on disconnection), the caller must call prepareSendAborted\n\t * afterwards, and if that returns true, send the sendAborted via innerSendAborted.\n\t * LOCKING: Must be called inside the _senderThread lock.\n\t * @return A Future which the caller must execute() outside the lock. */\n\tpublic Future maybeFail(final int reason, final String description) {\n\t\tif(_completed) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() already completed on \"+this);\n\t\t\treturn nullFuture;\n\t\t}\n\t\t_failed = true;\n\t\tif(!_receivedSendCompletion) {\n\t\t\t// Don't actually timeout until after we have an acknowledgment of the transfer cancel.\n\t\t\t// This is important for keeping track of how many transfers are actually running, which will be important for load management later on.\n\t\t\t// The caller will immediately call prepareSendAbort() then innerSendAborted().\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for acknowledgement on \"+this);\n\t\t\tif(_sentSendAborted) {\n\t\t\t\tscheduleTimeoutAfterBlockSends();\n\t\t\t\treturn nullFuture; // Do nothing, waiting for timeout.\n\t\t\t} else {\n\t\t\t\t_sentSendAborted = true;\n\t\t\t\t// Send the aborted, then wait.\n\t\t\t\treturn new Future() {\n\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinnerSendAborted(reason, description);\n\t\t\t\t\t\t\tscheduleTimeoutAfterBlockSends();\n\t\t\t\t\t\t} catch (NotConnectedException e) {\n\t\t\t\t\t\t\tonDisconnect();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tif(blockSendsPending != 0) {\n\t\t\tif(logMINOR) Logger.minor(this, \"maybeFail() waiting for \"+blockSendsPending+\" block sends on \"+this);\n\t\t\treturn nullFuture; // Wait for blockSendsPending to reach 0\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"maybeFail() completing on \"+this);\n\t\t_completed = true;\n\t\tdecRunningBlockTransmits();\n\t\treturn new Future() {\n\n\t\t\tpublic void execute() {\n\t\t\t\tcallCallback(false);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}","commit_id":"933efde020ec9bf8a85a0548342069788b158655","url":"https://github.com/freenet/fred"},{"original_method":"private void onDisconnect() {\n\t\tthrottle.maybeDisconnected();\n\t\tLogger.normal(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" because node disconnected while waiting\");\n\t\t//They disconnected, can't send an abort to them then can we?\n\t\tsynchronized(_senderThread) {\n\t\t\t_receivedSendCompletion = true; // effectively\n\t\t\tif(!maybeFail()) return;\n\t\t}\n\t\tcallCallback(false);\n\t\t// All MessageItems will already have been unqueued, no need to call cancelItemsPending().\n\t}","id":100206,"modified_method":"private void onDisconnect() {\n\t\tthrottle.maybeDisconnected();\n\t\tLogger.normal(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" because node disconnected while waiting\");\n\t\t//They disconnected, can't send an abort to them then can we?\n\t\tFuture fail;\n\t\tsynchronized(_senderThread) {\n\t\t\t_receivedSendCompletion = true; // effectively\n\t\t\tfail = maybeFail(RetrievalException.SENDER_DISCONNECTED, \"Sender disconnected\");\n\t\t}\n\t\tfail.execute();\n\t}","commit_id":"933efde020ec9bf8a85a0548342069788b158655","url":"https://github.com/freenet/fred"},{"original_method":"/** @return True . */\n\t\tprivate boolean innerRun(int packetNo) {\n\t\t\ttry {\n\t\t\t\tMessageItem item = _destination.sendThrottledMessage(DMT.createPacketTransmit(_uid, packetNo, _sentPackets, _prb.getPacket(packetNo)), _prb._packetSize, _ctr, SEND_TIMEOUT, false, new MyAsyncMessageCallback());\n\t\t\t\tsynchronized(itemsPending) {\n\t\t\t\t\titemsPending.add(item);\n\t\t\t\t}\n\t\t\t} catch (PeerRestartedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (AbortedException e) {\n\t\t\t\tLogger.normal(this, \"Terminating send due to abort: \"+e);\n\t\t\t\t// The PRB callback will deal with this.\n\t\t\t\treturn false;\n\t\t\t} catch (WaitedTooLongException e) {\n\t\t\t\tLogger.normal(this, \"Waited too long to send packet, aborting on \"+BlockTransmitter.this);\n\t\t\t\tboolean callFail = false;\n\t\t\t\tboolean sendAborted;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tcallFail = maybeFail();\n\t\t\t\t\tsendAborted = prepareSendAbort();\n\t\t\t\t}\n\t\t\t\tif(sendAborted) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tinnerSendAborted(RetrievalException.TIMED_OUT, \"Sender unable to send packets quickly enough\");\n\t\t\t\t\t} catch (NotConnectedException e1) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(callFail) {\n\t\t\t\t\tcallCallback(false);\n\t\t\t\t}\n\t\t\t\tcancelItemsPending();\n\t\t\t\treturn false;\n\t\t\t} catch (SyncSendWaitedTooLongException e) {\n\t\t\t\t// Impossible, but lets cancel it anyway\n\t\t\t\tboolean callFail = false;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tcallFail = maybeFail();\n\t\t\t\t}\n\t\t\t\tLogger.error(this, \"Impossible: Caught \"+e+\" on \"+BlockTransmitter.this, e);\n\t\t\t\tif(callFail) {\n\t\t\t\t\tcallCallback(false);\n\t\t\t\t\tcleanup();\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tboolean success = false;\n\t\t\tboolean complete = false;\n\t\t\tsynchronized (_senderThread) {\n\t\t\t\t_sentPackets.setBit(packetNo, true);\n\t\t\t\tif(_unsent.size() == 0 && getNumSent() == _prb._packets) {\n\t\t\t\t\t//No unsent packets, no unreceived packets\n\t\t\t\t\tsendAllSentNotification();\n\t\t\t\t\tif(maybeAllSent()) {\n\t\t\t\t\t\tif(maybeComplete()) {\n\t\t\t\t\t\t\tcomplete = true;\n\t\t\t\t\t\t\tsuccess = _receivedSendSuccess;\n\t\t\t\t\t\t} else return false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(complete) {\n\t\t\t\tcallCallback(success);\n\t\t\t\tcleanup();\n\t\t\t\treturn false; // No more blocks to send.\n\t\t\t}\n\t\t\treturn true; // More blocks to send.\n\t\t}","id":100207,"modified_method":"/** @return True . */\n\t\tprivate boolean innerRun(int packetNo) {\n\t\t\ttry {\n\t\t\t\tMessageItem item = _destination.sendThrottledMessage(DMT.createPacketTransmit(_uid, packetNo, _sentPackets, _prb.getPacket(packetNo)), _prb._packetSize, _ctr, SEND_TIMEOUT, false, new MyAsyncMessageCallback());\n\t\t\t\tsynchronized(itemsPending) {\n\t\t\t\t\titemsPending.add(item);\n\t\t\t\t}\n\t\t\t} catch (PeerRestartedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tonDisconnect();\n\t\t\t\treturn false;\n\t\t\t} catch (AbortedException e) {\n\t\t\t\tLogger.normal(this, \"Terminating send due to abort: \"+e);\n\t\t\t\t// The PRB callback will deal with this.\n\t\t\t\treturn false;\n\t\t\t} catch (WaitedTooLongException e) {\n\t\t\t\tLogger.normal(this, \"Waited too long to send packet, aborting on \"+BlockTransmitter.this);\n\t\t\t\tFuture fail;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tfail = maybeFail(RetrievalException.TIMED_OUT, \"Sender unable to send packets quickly enough\");\n\t\t\t\t}\n\t\t\t\tfail.execute();\n\t\t\t\tcancelItemsPending();\n\t\t\t\treturn false;\n\t\t\t} catch (SyncSendWaitedTooLongException e) {\n\t\t\t\t// Impossible, but lets cancel it anyway\n\t\t\t\tFuture fail;\n\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\tfail = maybeFail(RetrievalException.UNKNOWN, \"Impossible: SyncSendWaitedTooLong\");\n\t\t\t\t}\n\t\t\t\tLogger.error(this, \"Impossible: Caught \"+e+\" on \"+BlockTransmitter.this, e);\n\t\t\t\tfail.execute();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tboolean success = false;\n\t\t\tboolean complete = false;\n\t\t\tsynchronized (_senderThread) {\n\t\t\t\t_sentPackets.setBit(packetNo, true);\n\t\t\t\tif(_unsent.size() == 0 && getNumSent() == _prb._packets) {\n\t\t\t\t\t//No unsent packets, no unreceived packets\n\t\t\t\t\tsendAllSentNotification();\n\t\t\t\t\tif(maybeAllSent()) {\n\t\t\t\t\t\tif(maybeComplete()) {\n\t\t\t\t\t\t\tcomplete = true;\n\t\t\t\t\t\t\tsuccess = _receivedSendSuccess;\n\t\t\t\t\t\t} else return false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(complete) {\n\t\t\t\tcallCallback(success);\n\t\t\t\tcleanup();\n\t\t\t\treturn false; // No more blocks to send.\n\t\t\t}\n\t\t\treturn true; // More blocks to send.\n\t\t}","commit_id":"933efde020ec9bf8a85a0548342069788b158655","url":"https://github.com/freenet/fred"},{"original_method":"public void scheduleTimeoutAfterBlockSends() {\n\t\tsynchronized(_senderThread) {\n\t\t\tif(_receivedSendCompletion) return;\n\t\t\tif(timeoutJob != null) return;\n\t\t\tif(logMINOR) Logger.minor(this, \"Scheduling timeout on \"+this);\n\t\t\ttimeoutJob = new PrioRunnable() {\n\t\t\t\t\n\t\t\t\tpublic void run() {\n\t\t\t\t\tboolean callFail;\n\t\t\t\t\tString timeString;\n\t\t\t\t\tString abortReason;\n\t\t\t\t\tboolean sendAborted;\n\t\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\t\tif(_completed) return;\n\t\t\t\t\t\tif(!_receivedSendCompletion) {\n\t\t\t\t\t\t\t_receivedSendCompletion = true;\n\t\t\t\t\t\t\t_receivedSendSuccess = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//SEND_TIMEOUT (one minute) after all packets have been transmitted, terminate the send.\n\t\t\t\t\t\tif(_failed) {\n\t\t\t\t\t\t\t// Already failed, we were just waiting for the acknowledgement sendAborted.\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send after failure on \"+this);\n\t\t\t\t\t\t\tabortReason = \"Already failed and no acknowledgement\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttimeString=TimeUtil.formatTime((System.currentTimeMillis() - timeAllSent), 2, true);\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" as we haven't heard from receiver in \"+timeString+ '.');\n\t\t\t\t\t\t\tabortReason = \"Haven't heard from you (receiver) in \"+timeString;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallFail = maybeFail();\n\t\t\t\t\t\tsendAborted = prepareSendAbort();\n\t\t\t\t\t}\n\t\t\t\t\tif(sendAborted) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinnerSendAborted(RetrievalException.RECEIVER_DIED, abortReason);\n\t\t\t\t\t\t} catch (NotConnectedException e) {\n\t\t\t\t\t\t\t// Ignore, it still failed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(callFail) {\n\t\t\t\t\t\tcallCallback(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int getPriority() {\n\t\t\t\t\treturn NativeThread.NORM_PRIORITY;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t_ticker.queueTimedJob(timeoutJob, \"Timeout for \"+this, SEND_TIMEOUT, false, false);\n\t\t}\n\t}","id":100208,"modified_method":"public void scheduleTimeoutAfterBlockSends() {\n\t\tsynchronized(_senderThread) {\n\t\t\tif(_receivedSendCompletion) return;\n\t\t\tif(timeoutJob != null) return;\n\t\t\tif(logMINOR) Logger.minor(this, \"Scheduling timeout on \"+this);\n\t\t\ttimeoutJob = new PrioRunnable() {\n\t\t\t\t\n\t\t\t\tpublic void run() {\n\t\t\t\t\tString timeString;\n\t\t\t\t\tString abortReason;\n\t\t\t\t\tFuture fail;\n\t\t\t\t\tsynchronized(_senderThread) {\n\t\t\t\t\t\tif(_completed) return;\n\t\t\t\t\t\tif(!_receivedSendCompletion) {\n\t\t\t\t\t\t\t_receivedSendCompletion = true;\n\t\t\t\t\t\t\t_receivedSendSuccess = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//SEND_TIMEOUT (one minute) after all packets have been transmitted, terminate the send.\n\t\t\t\t\t\tif(_failed) {\n\t\t\t\t\t\t\t// Already failed, we were just waiting for the acknowledgement sendAborted.\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send after failure on \"+this);\n\t\t\t\t\t\t\tabortReason = \"Already failed and no acknowledgement\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttimeString=TimeUtil.formatTime((System.currentTimeMillis() - timeAllSent), 2, true);\n\t\t\t\t\t\t\tLogger.error(this, \"Terminating send \"+_uid+\" to \"+_destination+\" from \"+_destination.getSocketHandler()+\" as we haven't heard from receiver in \"+timeString+ '.');\n\t\t\t\t\t\t\tabortReason = \"Haven't heard from you (receiver) in \"+timeString;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfail = maybeFail(RetrievalException.RECEIVER_DIED, abortReason);\n\t\t\t\t\t}\n\t\t\t\t\tfail.execute();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int getPriority() {\n\t\t\t\t\treturn NativeThread.NORM_PRIORITY;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t_ticker.queueTimedJob(timeoutJob, \"Timeout for \"+this, SEND_TIMEOUT, false, false);\n\t\t}\n\t}","commit_id":"933efde020ec9bf8a85a0548342069788b158655","url":"https://github.com/freenet/fred"},{"original_method":"private void onAborted(int reason, String description) {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting on \"+this);\n\t\tboolean callFailCallback;\n\t\tboolean sendAbort;\n\t\tsynchronized(_senderThread) {\n\t\t\ttimeAllSent = -1;\n\t\t\t_failed = true;\n\t\t\t_senderThread.notifyAll();\n\t\t\tcallFailCallback = maybeFail();\n\t\t\tsendAbort = prepareSendAbort();\n\t\t}\n\t\tif(sendAbort) {\n\t\t\ttry {\n\t\t\t\tinnerSendAborted(reason, description);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tif(callFailCallback) callCallback(false);\n\t\tcancelItemsPending();\n\t}","id":100209,"modified_method":"private void onAborted(int reason, String description) {\n\t\tif(logMINOR) Logger.minor(this, \"Aborting on \"+this);\n\t\tFuture fail;\n\t\tsynchronized(_senderThread) {\n\t\t\ttimeAllSent = -1;\n\t\t\t_failed = true;\n\t\t\t_senderThread.notifyAll();\n\t\t\tfail = maybeFail(reason, description);\n\t\t}\n\t\tfail.execute();\n\t\tcancelItemsPending();\n\t}","commit_id":"933efde020ec9bf8a85a0548342069788b158655","url":"https://github.com/freenet/fred"},{"original_method":"public SNode convertClass(PsiClass x) {\n\n    final Wrappers._T<SNode> classifier = new Wrappers._T<SNode>();\n\n    if (x.isAnnotationType()) {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Annotation\", null);\n    } else if (x.isEnum()) {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumClass\", null);\n    } else if (x.isInterface()) {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Interface\", null);\n    } else {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", null);\n    }\n\n    final SNode ourConcept = SNodeOperations.getConceptDeclaration(classifier.value);\n\n    SPropertyOperations.set(classifier.value, \"name\", x.getName());\n    SLinkOperations.setTarget(classifier.value, \"visibility\", getVisibility(x), true);\n    addAnnotations(x, classifier.value);\n\n\n    if (needToSetId() && isNotEmpty_rbndtb_a0a21a61(SPropertyOperations.getString(classifier.value, \"name\"))) {\n      ((jetbrains.mps.smodel.SNode) classifier.value).setId(JavaForeignIdBuilder.computeNodeId(x));\n    }\n\n    // class's super types and implemented ifaces \n    {\n      SNode reallyClass = classifier.value;\n      if (SNodeOperations.isInstanceOf(reallyClass, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n        if (x.getSuperTypes().length > 0) {\n          SLinkOperations.setTarget(reallyClass, \"superclass\", resolveClass(x.getSuperTypes()[0]), true);\n        }\n        ListSequence.fromList(SLinkOperations.getTargets(reallyClass, \"implementedInterface\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getImplementsListTypes())).select(new ISelector<PsiClassType, SNode>() {\n          public SNode select(PsiClassType it) {\n            return resolveClass(it);\n          }\n        }));\n\n        SPropertyOperations.set(reallyClass, \"isFinal\", \"\" + (isFinal(x)));\n        SPropertyOperations.set(reallyClass, \"isStatic\", \"\" + (isStatic(x)));\n      }\n    }\n\n    // interface's super intefaces \n    {\n      SNode iface = classifier.value;\n      if (SNodeOperations.isInstanceOf(iface, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n        ListSequence.fromList(SLinkOperations.getTargets(iface, \"extendedInterface\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getSuperTypes())).select(new ISelector<PsiClassType, SNode>() {\n          public SNode select(PsiClassType it) {\n            return resolveClass(it);\n          }\n        }));\n      }\n    }\n\n    final ASTConverter currConverter = addTypeParams(x, classifier.value);\n\n    Sequence.fromIterable(Sequence.fromArray(x.getFields())).visitAll(new IVisitor<PsiField>() {\n      public void visit(PsiField it) {\n        if (it instanceof PsiEnumConstant) {\n          // in BL it's not a field, it's a separate thing \n          if (!(SNodeOperations.isInstanceOf(classifier.value, \"jetbrains.mps.baseLanguage.structure.EnumClass\"))) {\n            return;\n          }\n          SNode cnst = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration\", null);\n          SPropertyOperations.set(cnst, \"name\", it.getName());\n          if (needToSetId() && SPropertyOperations.getString(cnst, \"name\") != null) {\n            ((jetbrains.mps.smodel.SNode) cnst).setId(JavaForeignIdBuilder.computeNodeId(it));\n          }\n          // TODO maybe we must not touch expressions here (they may be not in the psi index) \n          // <node> \n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.EnumClass\"), \"enumConstant\", true)).addElement(cnst);\n        }\n\n        // normal field \n        SNode node = currConverter.convertField(it, ourConcept);\n\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(classifier.value, \"staticField\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\"));\n        } else if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"field\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"));\n        }\n      }\n    });\n\n    Sequence.fromIterable(Sequence.fromArray(x.getMethods())).visitAll(new IVisitor<PsiMethod>() {\n      public void visit(PsiMethod it) {\n        SNode node = currConverter.convertMethod(it, ourConcept);\n\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(classifier.value, \"method\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"));\n        } else if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"staticMethod\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\"));\n        } else if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"constructor\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n        }\n\n      }\n    });\n\n    ListSequence.fromList(SLinkOperations.getTargets(classifier.value, \"staticInnerClassifiers\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getInnerClasses())).select(new ISelector<PsiClass, SNode>() {\n      public SNode select(PsiClass it) {\n        return currConverter.convertClass(it);\n      }\n    }));\n\n    if (myMps2PsiMapper != null) {\n      myMps2PsiMapper.consume(new Pair<SNode, PsiElement>(classifier.value, x));\n    }\n\n    return classifier.value;\n  }","id":100210,"modified_method":"public SNode convertClass(PsiClass x) {\n\n    final Wrappers._T<SNode> classifier = new Wrappers._T<SNode>();\n\n    if (x.isAnnotationType()) {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Annotation\", null);\n    } else if (x.isEnum()) {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumClass\", null);\n    } else if (x.isInterface()) {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Interface\", null);\n    } else {\n      classifier.value = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", null);\n    }\n\n    final SNode ourConcept = SNodeOperations.getConceptDeclaration(classifier.value);\n\n    SPropertyOperations.set(classifier.value, \"name\", \"\" + (x.getName()));\n    SLinkOperations.setTarget(classifier.value, \"visibility\", getVisibility(x), true);\n    addAnnotations(x, classifier.value);\n\n\n    if (needToSetId() && isNotEmpty_rbndtb_a0a21a61(SPropertyOperations.getString(classifier.value, \"name\"))) {\n      ((jetbrains.mps.smodel.SNode) classifier.value).setId(JavaForeignIdBuilder.computeNodeId(x));\n    }\n\n    // class's super types and implemented ifaces \n    {\n      SNode reallyClass = classifier.value;\n      if (SNodeOperations.isInstanceOf(reallyClass, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n        if (x.getSuperTypes().length > 0) {\n          SLinkOperations.setTarget(reallyClass, \"superclass\", resolveClass(x.getSuperTypes()[0]), true);\n        }\n        ListSequence.fromList(SLinkOperations.getTargets(reallyClass, \"implementedInterface\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getImplementsListTypes())).select(new ISelector<PsiClassType, SNode>() {\n          public SNode select(PsiClassType it) {\n            return resolveClass(it);\n          }\n        }));\n\n        SPropertyOperations.set(reallyClass, \"isFinal\", \"\" + (isFinal(x)));\n        SPropertyOperations.set(reallyClass, \"isStatic\", \"\" + (isStatic(x)));\n      }\n    }\n\n    // interface's super intefaces \n    {\n      SNode iface = classifier.value;\n      if (SNodeOperations.isInstanceOf(iface, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n        ListSequence.fromList(SLinkOperations.getTargets(iface, \"extendedInterface\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getSuperTypes())).select(new ISelector<PsiClassType, SNode>() {\n          public SNode select(PsiClassType it) {\n            return resolveClass(it);\n          }\n        }));\n      }\n    }\n\n    final ASTConverter currConverter = addTypeParams(x, classifier.value);\n\n    Sequence.fromIterable(Sequence.fromArray(x.getFields())).visitAll(new IVisitor<PsiField>() {\n      public void visit(PsiField it) {\n        if (it instanceof PsiEnumConstant) {\n          // in BL it's not a field, it's a separate thing \n          if (!(SNodeOperations.isInstanceOf(classifier.value, \"jetbrains.mps.baseLanguage.structure.EnumClass\"))) {\n            return;\n          }\n          SNode cnst = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration\", null);\n          SPropertyOperations.set(cnst, \"name\", \"\" + (it.getName()));\n          if (needToSetId() && SPropertyOperations.getString(cnst, \"name\") != null) {\n            ((jetbrains.mps.smodel.SNode) cnst).setId(JavaForeignIdBuilder.computeNodeId(it));\n          }\n          // TODO maybe we must not touch expressions here (they may be not in the psi index) \n          // <node> \n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.EnumClass\"), \"enumConstant\", true)).addElement(cnst);\n        }\n\n        // normal field \n        SNode node = currConverter.convertField(it, ourConcept);\n\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(classifier.value, \"staticField\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\"));\n        } else if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"field\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"));\n        }\n      }\n    });\n\n    Sequence.fromIterable(Sequence.fromArray(x.getMethods())).visitAll(new IVisitor<PsiMethod>() {\n      public void visit(PsiMethod it) {\n        SNode node = currConverter.convertMethod(it, ourConcept);\n\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(classifier.value, \"method\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"));\n        } else if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"staticMethod\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\"));\n        } else if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\")) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"constructor\", true)).addElement(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n        }\n\n      }\n    });\n\n    ListSequence.fromList(SLinkOperations.getTargets(classifier.value, \"staticInnerClassifiers\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getInnerClasses())).select(new ISelector<PsiClass, SNode>() {\n      public SNode select(PsiClass it) {\n        return currConverter.convertClass(it);\n      }\n    }));\n\n    if (myMps2PsiMapper != null) {\n      myMps2PsiMapper.consume(new Pair<SNode, PsiElement>(classifier.value, x));\n    }\n\n    return classifier.value;\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode convertMethod(PsiMethod x, SNode parentConcept) {\n    SNode method;\n\n    if (x.isConstructor()) {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\", null);\n\n    } else if (x instanceof PsiAnnotationMethod && SConceptOperations.isSubConceptOf(parentConcept, \"jetbrains.mps.baseLanguage.structure.Annotation\")) {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration\", null);\n\n      if (((PsiAnnotationMethod) x).getDefaultValue() != null) {\n        SNode str = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null);\n        SPropertyOperations.set(str, \"value\", \"TODO: SUPPORT EXPRESSIONS IN PSI STUBS?\");\n        SLinkOperations.setTarget(SNodeOperations.cast(method, \"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration\"), \"defaultValue\", str, true);\n      }\n\n    } else if (!(isStatic(x)) || SConceptOperations.isSubConceptOf(parentConcept, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", null);\n\n    } else {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", null);\n    }\n\n    SPropertyOperations.set(method, \"name\", x.getName());\n    SLinkOperations.setTarget(SNodeOperations.cast(method, \"jetbrains.mps.baseLanguage.structure.ClassifierMember\"), \"visibility\", getVisibility(x), true);\n    SPropertyOperations.set(method, \"isFinal\", \"\" + (isFinal(x)));\n    SPropertyOperations.set(method, \"isSynchronized\", \"\" + (x.hasModifierProperty(PsiModifier.SYNCHRONIZED)));\n\n    ListSequence.fromList(SLinkOperations.getTargets(method, \"throwsItem\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getThrowsList().getReferencedTypes())).select(new ISelector<PsiClassType, SNode>() {\n      public SNode select(PsiClassType it) {\n        SNode typ = resolveClass(it);\n        return typ;\n      }\n    }));\n\n    final ASTConverter currConverter = addTypeParams(x, method);\n\n    SLinkOperations.setTarget(method, \"returnType\", currConverter.convertType(x.getReturnTypeNoResolve()), true);\n    ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getParameterList().getParameters())).select(new ISelector<PsiParameter, SNode>() {\n      public SNode select(PsiParameter it) {\n        SNode param = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\", null);\n        SPropertyOperations.set(param, \"name\", it.getName());\n        SLinkOperations.setTarget(param, \"type\", currConverter.convertType(it.getType()), true);\n        SPropertyOperations.set(param, \"isFinal\", \"\" + (isFinal(it)));\n\n        currConverter.addAnnotations(it, param);\n\n        return param;\n      }\n    }));\n\n    // not strictly necessary \n    if (1 > 0) {\n      SLinkOperations.setTarget(method, \"body\", SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null), true);\n    } else {\n      SLinkOperations.setTarget(method, \"body\", SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StatementList\", null), true);\n    }\n\n    if (needToSetId()) {\n      SNodeId.Foreign nodeId = JavaForeignIdBuilder.computeNodeId(x);\n      if (nodeId != null) {\n        ((jetbrains.mps.smodel.SNode) method).setId(nodeId);\n      }\n    }\n\n    if (myMps2PsiMapper != null) {\n      myMps2PsiMapper.consume(new Pair<SNode, PsiElement>(method, x));\n    }\n\n    return method;\n  }","id":100211,"modified_method":"public SNode convertMethod(PsiMethod x, SNode parentConcept) {\n    SNode method;\n\n    if (x.isConstructor()) {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\", null);\n\n    } else if (x instanceof PsiAnnotationMethod && SConceptOperations.isSubConceptOf(parentConcept, \"jetbrains.mps.baseLanguage.structure.Annotation\")) {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration\", null);\n\n      if (((PsiAnnotationMethod) x).getDefaultValue() != null) {\n        SNode str = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null);\n        SPropertyOperations.set(str, \"value\", \"TODO: SUPPORT EXPRESSIONS IN PSI STUBS?\");\n        SLinkOperations.setTarget(SNodeOperations.cast(method, \"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration\"), \"defaultValue\", str, true);\n      }\n\n    } else if (!(isStatic(x)) || SConceptOperations.isSubConceptOf(parentConcept, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", null);\n\n    } else {\n      method = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", null);\n    }\n\n    SPropertyOperations.set(method, \"name\", \"\" + (x.getName()));\n    SLinkOperations.setTarget(SNodeOperations.cast(method, \"jetbrains.mps.baseLanguage.structure.ClassifierMember\"), \"visibility\", getVisibility(x), true);\n    SPropertyOperations.set(method, \"isFinal\", \"\" + (isFinal(x)));\n    SPropertyOperations.set(method, \"isSynchronized\", \"\" + (x.hasModifierProperty(PsiModifier.SYNCHRONIZED)));\n\n    ListSequence.fromList(SLinkOperations.getTargets(method, \"throwsItem\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getThrowsList().getReferencedTypes())).select(new ISelector<PsiClassType, SNode>() {\n      public SNode select(PsiClassType it) {\n        SNode typ = resolveClass(it);\n        return typ;\n      }\n    }));\n\n    final ASTConverter currConverter = addTypeParams(x, method);\n\n    SLinkOperations.setTarget(method, \"returnType\", currConverter.convertType(x.getReturnTypeNoResolve()), true);\n    ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getParameterList().getParameters())).select(new ISelector<PsiParameter, SNode>() {\n      public SNode select(PsiParameter it) {\n        SNode param = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\", null);\n        SPropertyOperations.set(param, \"name\", \"\" + (it.getName()));\n        SLinkOperations.setTarget(param, \"type\", currConverter.convertType(it.getType()), true);\n        SPropertyOperations.set(param, \"isFinal\", \"\" + (isFinal(it)));\n\n        currConverter.addAnnotations(it, param);\n\n        return param;\n      }\n    }));\n\n    // not strictly necessary \n    if (1 > 0) {\n      SLinkOperations.setTarget(method, \"body\", SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null), true);\n    } else {\n      SLinkOperations.setTarget(method, \"body\", SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StatementList\", null), true);\n    }\n\n    if (needToSetId()) {\n      SNodeId.Foreign nodeId = JavaForeignIdBuilder.computeNodeId(x);\n      if (nodeId != null) {\n        ((jetbrains.mps.smodel.SNode) method).setId(nodeId);\n      }\n    }\n\n    if (myMps2PsiMapper != null) {\n      myMps2PsiMapper.consume(new Pair<SNode, PsiElement>(method, x));\n    }\n\n    return method;\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode convertField(PsiField x, SNode parentConcept) {\n    SNode field;\n    if (isStatic(x) || SConceptOperations.isSubConceptOf(parentConcept, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      field = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\", null);\n    } else {\n      field = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.FieldDeclaration\", null);\n      SPropertyOperations.set(SNodeOperations.cast(field, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"), \"isVolatile\", \"\" + (x.hasModifierProperty(PsiModifier.VOLATILE)));\n      SPropertyOperations.set(SNodeOperations.cast(field, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"), \"isTransient\", \"\" + (x.hasModifierProperty(PsiModifier.TRANSIENT)));\n    }\n\n    SPropertyOperations.set(field, \"name\", x.getName());\n    SLinkOperations.setTarget(SNodeOperations.cast(field, \"jetbrains.mps.baseLanguage.structure.ClassifierMember\"), \"visibility\", getVisibility(x), true);\n    SPropertyOperations.set(field, \"isFinal\", \"\" + (isFinal(x)));\n    SLinkOperations.setTarget(field, \"type\", convertType(x.getType()), true);\n    addAnnotations(x, field);\n\n    if (needToSetId() && SPropertyOperations.getString(field, \"name\") != null) {\n      ((jetbrains.mps.smodel.SNode) field).setId(JavaForeignIdBuilder.computeNodeId(x));\n    }\n\n    if (myMps2PsiMapper != null) {\n      myMps2PsiMapper.consume(new Pair<SNode, PsiElement>(field, x));\n    }\n\n    return field;\n  }","id":100212,"modified_method":"public SNode convertField(PsiField x, SNode parentConcept) {\n    SNode field;\n    if (isStatic(x) || SConceptOperations.isSubConceptOf(parentConcept, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      field = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\", null);\n    } else {\n      field = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.FieldDeclaration\", null);\n      SPropertyOperations.set(SNodeOperations.cast(field, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"), \"isVolatile\", \"\" + (x.hasModifierProperty(PsiModifier.VOLATILE)));\n      SPropertyOperations.set(SNodeOperations.cast(field, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"), \"isTransient\", \"\" + (x.hasModifierProperty(PsiModifier.TRANSIENT)));\n    }\n\n    SPropertyOperations.set(field, \"name\", \"\" + (x.getName()));\n    SLinkOperations.setTarget(SNodeOperations.cast(field, \"jetbrains.mps.baseLanguage.structure.ClassifierMember\"), \"visibility\", getVisibility(x), true);\n    SPropertyOperations.set(field, \"isFinal\", \"\" + (isFinal(x)));\n    SLinkOperations.setTarget(field, \"type\", convertType(x.getType()), true);\n    addAnnotations(x, field);\n\n    if (needToSetId() && SPropertyOperations.getString(field, \"name\") != null) {\n      ((jetbrains.mps.smodel.SNode) field).setId(JavaForeignIdBuilder.computeNodeId(x));\n    }\n\n    if (myMps2PsiMapper != null) {\n      myMps2PsiMapper.consume(new Pair<SNode, PsiElement>(field, x));\n    }\n\n    return field;\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode convertTypeParameter(PsiTypeParameter x) {\n    SNode typeVar = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration\", null);\n    SPropertyOperations.set(typeVar, \"name\", x.getName());\n\n    if (x.getExtendsListTypes().length > 0) {\n      Iterable<PsiClassType> extend = Sequence.fromArray(x.getExtendsListTypes());\n      SLinkOperations.setTarget(typeVar, \"bound\", resolveClass(Sequence.fromIterable(extend).first()), true);\n      ListSequence.fromList(SLinkOperations.getTargets(typeVar, \"auxBounds\", true)).addSequence(Sequence.fromIterable(extend).skip(1).select(new ISelector<PsiClassType, SNode>() {\n        public SNode select(PsiClassType it) {\n          return resolveClass(it);\n        }\n      }));\n    }\n\n    return typeVar;\n  }","id":100213,"modified_method":"public SNode convertTypeParameter(PsiTypeParameter x) {\n    SNode typeVar = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration\", null);\n    SPropertyOperations.set(typeVar, \"name\", \"\" + (x.getName()));\n\n    if (x.getExtendsListTypes().length > 0) {\n      Iterable<PsiClassType> extend = Sequence.fromArray(x.getExtendsListTypes());\n      SLinkOperations.setTarget(typeVar, \"bound\", resolveClass(Sequence.fromIterable(extend).first()), true);\n      ListSequence.fromList(SLinkOperations.getTargets(typeVar, \"auxBounds\", true)).addSequence(Sequence.fromIterable(extend).skip(1).select(new ISelector<PsiClassType, SNode>() {\n        public SNode select(PsiClassType it) {\n          return resolveClass(it);\n        }\n      }));\n    }\n\n    return typeVar;\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void psiChanged(PsiListener.PsiEvent event) {\n      String path = getFolder().getPath();\n      final Set<String> changedItems = SetSequence.fromSet(new HashSet<String>());\n      SetSequence.fromSet(changedItems).addSequence(SetSequence.fromSet(handleFsItems(path, event.getCreated())));\n      SetSequence.fromSet(changedItems).addSequence(SetSequence.fromSet(handleFsItems(path, event.getRemoved())));\n      // not pretty \n      Set<PsiFileSystemItem> files = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());\n      for (PsiFile f : SetSequence.fromSet(event.getChanged().keySet())) {\n        SetSequence.fromSet(files).addElement(f);\n      }\n      SetSequence.fromSet(changedItems).addSequence(SetSequence.fromSet(handleFsItems(path, files)));\n\n      synchronized (LOCK) {\n        ModelAccess.instance().runCommandInEDT(new Runnable() {\n          public void run() {\n            for (MultiStreamDataSourceListener listener : SetSequence.fromSet(myListeners)) {\n              listener.changed(_this, changedItems);\n            }\n          }\n        }, myFakeMpsProject);\n      }\n    }","id":100214,"modified_method":"@Override\n    public void psiChanged(PsiListener.PsiEvent event) {\n      String path = getFolder().getPath();\n      final Set<String> changedItems = SetSequence.fromSet(new HashSet<String>());\n      SetSequence.fromSet(changedItems).addSequence(SetSequence.fromSet(handleFsItems(path, event.getCreated())));\n      SetSequence.fromSet(changedItems).addSequence(SetSequence.fromSet(handleFsItems(path, event.getRemoved())));\n      // not pretty \n      Set<PsiFileSystemItem> files = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());\n      for (PsiFile f : event.getChanged().keySet()) {\n        SetSequence.fromSet(files).addElement(f);\n      }\n      SetSequence.fromSet(changedItems).addSequence(SetSequence.fromSet(handleFsItems(path, files)));\n\n      synchronized (LOCK) {\n        ModelAccess.instance().runCommandInEDT(new Runnable() {\n          public void run() {\n            for (MultiStreamDataSourceListener listener : SetSequence.fromSet(myListeners)) {\n              listener.changed(_this, changedItems);\n            }\n          }\n        }, myFakeMpsProject);\n      }\n    }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void findTargets(NavigationParticipant.TargetKind kind, Collection<SModel> collection, Consumer<NavigationParticipant.NavigationTarget> consumer, Consumer<SModel> processedConsumer) {\n    for (SModel model : CollectionSequence.fromCollection(collection)) {\n      if (!(model instanceof PsiJavaStubModelDescriptor)) {\n        continue;\n      }\n\n      for (PsiJavaFile javaFile : Sequence.fromIterable(((PsiJavaStubModelDescriptor) model).getSource().getJavaFiles())) {\n        for (PsiClass psiClass : javaFile.getClasses()) {\n\n          final PsiClass psiClaz = psiClass;\n          final String name = psiClaz.getName();\n          if (name == null || name.trim().equals(\"\")) {\n            continue;\n          }\n\n          consumer.consume(new NavigationParticipant.NavigationTarget() {\n            public String getPresentation() {\n              return name;\n            }\n\n            public SConcept getConcept() {\n              if (psiClaz.isAnnotationType()) {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_Annotation);\n              } else if (psiClaz.isInterface()) {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_Interface);\n              } else if (psiClaz.isEnum()) {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_EnumClass);\n              } else {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_ClassConcept);\n              }\n            }\n\n            public SNodeReference getNodeReference() {\n              return JavaForeignIdBuilder.computeNodePtr(psiClaz).toSNodeReference();\n            }\n          });\n        }\n      }\n\n      processedConsumer.consume(model);\n    }\n  }","id":100215,"modified_method":"public void findTargets(NavigationParticipant.TargetKind kind, Collection<SModel> collection, Consumer<NavigationParticipant.NavigationTarget> consumer, Consumer<SModel> processedConsumer) {\n    for (SModel model : CollectionSequence.fromCollection(collection)) {\n      if (!(model instanceof PsiJavaStubModelDescriptor)) {\n        continue;\n      }\n\n      for (PsiJavaFile javaFile : ((PsiJavaStubModelDescriptor) model).getSource().getJavaFiles()) {\n        for (PsiClass psiClass : javaFile.getClasses()) {\n\n          final PsiClass psiClaz = psiClass;\n          final String name = psiClaz.getName();\n          if (name == null || name.trim().equals(\"\")) {\n            continue;\n          }\n\n          consumer.consume(new NavigationParticipant.NavigationTarget() {\n            public String getPresentation() {\n              return name;\n            }\n\n            public SConcept getConcept() {\n              if (psiClaz.isAnnotationType()) {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_Annotation);\n              } else if (psiClaz.isInterface()) {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_Interface);\n              } else if (psiClaz.isEnum()) {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_EnumClass);\n              } else {\n                return (SConcept) SConceptRepository.getInstance().getConcept(BootstrapLanguages.concept_baseLanguage_ClassConcept);\n              }\n            }\n\n            public SNodeReference getNodeReference() {\n              return JavaForeignIdBuilder.computeNodePtr(psiClaz).toSNodeReference();\n            }\n          });\n        }\n      }\n\n      processedConsumer.consume(model);\n    }\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void psiChanged(final PsiListener.PsiEvent event) {\n    org.jetbrains.mps.openapi.model.SModel ourModel = this;\n\n    // already attached, but not createModel'd yet? \n    if (ourModel == null) {\n      return;\n    }\n\n    // TODO Order can be important, be careful with class name changes (how to find old root node?) \n\n    // I do madeUpEvent for now to simplify the event that comes in: it only has removed and created \n    // and nothing changed. This is to ensure validity for now while I work on refactorings etc. \n\n    PsiListener.PsiEvent madeUpEvent = new PsiListener.PsiEvent() {\n      public Iterable<PsiFileSystemItem> getCreated() {\n        Set<PsiFileSystemItem> result = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());\n        SetSequence.fromSet(result).addSequence(Sequence.fromIterable(event.getCreated()));\n        SetSequence.fromSet(result).addSequence(SetSequence.fromSet(event.getChanged().keySet()));\n        return result;\n      }\n\n      public Iterable<PsiFileSystemItem> getRemoved() {\n        Set<PsiFileSystemItem> result = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());\n        SetSequence.fromSet(result).addSequence(Sequence.fromIterable(event.getRemoved()));\n        SetSequence.fromSet(result).addSequence(SetSequence.fromSet(event.getChanged().keySet()));\n        return result;\n      }\n\n      public Iterable<PsiListener.FSMove> getMoved() {\n        return null;\n      }\n\n      public Map<PsiFile, Set<PsiElement>> getChanged() {\n        return new HashMap<PsiFile, Set<PsiElement>>();\n      }\n    };\n\n    for (PsiFileSystemItem file : Sequence.fromIterable(madeUpEvent.getRemoved())) {\n      assert file instanceof PsiJavaFile;\n      PsiJavaFile javaFile = (PsiJavaFile) file;\n\n      SetSequence.fromSet(MapSequence.fromMap(myRootsPerFile).get(javaFile.getName())).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode it) {\n          SNodeOperations.deleteNode(it);\n        }\n      });\n      MapSequence.fromMap(myRootsPerFile).removeKey(javaFile.getName());\n      myMps2PsiMapper.clearFile(javaFile);\n    }\n\n    for (PsiFileSystemItem file : Sequence.fromIterable(madeUpEvent.getCreated())) {\n\n      assert file instanceof PsiJavaFile;\n      PsiJavaFile javaFile = (PsiJavaFile) file;\n\n      if (!(javaFile.isValid())) {\n        String name = javaFile.getName();\n        for (PsiFile f : javaFile.getParent().getFiles()) {\n          if (name.equals(f.getName()) && f instanceof PsiJavaFile) {\n            javaFile = (PsiJavaFile) f;\n            break;\n          }\n        }\n      }\n      if (!(javaFile.isValid())) {\n        continue;\n      }\n\n      SNode javaImports = getImports(javaFile.getImportList().getAllImportStatements());\n      ASTConverter converter = new ASTConverter(myMps2PsiMapper);\n\n      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());\n\n      for (PsiClass cls : javaFile.getClasses()) {\n        SNode node = converter.convertClass(cls);\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n          AttributeOperations.setAttribute(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.JavaImports\")), javaImports);\n        }\n        SModelOperations.addRootNode(ourModel, node);\n        SetSequence.fromSet(roots).addElement(node);\n      }\n\n      if (SetSequence.fromSet(roots).isNotEmpty()) {\n        MapSequence.fromMap(myRootsPerFile).put(javaFile.getName(), roots);\n      }\n    }\n\n    for (PsiFile file : SetSequence.fromSet(madeUpEvent.getChanged().keySet())) {\n\n      ASTConverter converter = new ASTConverter();\n\n      for (PsiElement elem : SetSequence.fromSet(madeUpEvent.getChanged().get(file))) {\n        if (elem instanceof PsiFile) {\n          continue;\n        }\n        // going up to one of top-level classes \n        PsiElement e = elem;\n        do {\n          e = e.getParent();\n        } while (e != null && !(e instanceof PsiClass && e.getParent() instanceof PsiFile));\n\n        if (e != null) {\n\n          SNode node = converter.convertClass((PsiClass) e);\n          SNodeId id = node.getNodeId();\n          SNode oldNode = ourModel.getNode(id);\n\n          if ((oldNode != null)) {\n            SNodeOperations.replaceWithAnother(oldNode, node);\n          } else {\n            SModelOperations.addRootNode(ourModel, node);\n          }\n        }\n      }\n    }\n  }","id":100216,"modified_method":"public void psiChanged(final PsiListener.PsiEvent event) {\n    org.jetbrains.mps.openapi.model.SModel ourModel = this;\n\n    // already attached, but not createModel'd yet? \n    if (ourModel == null) {\n      return;\n    }\n\n    // TODO Order can be important, be careful with class name changes (how to find old root node?) \n\n    // I do madeUpEvent for now to simplify the event that comes in: it only has removed and created \n    // and nothing changed. This is to ensure validity for now while I work on refactorings etc. \n\n    PsiListener.PsiEvent madeUpEvent = new PsiListener.PsiEvent() {\n      public Iterable<PsiFileSystemItem> getCreated() {\n        Set<PsiFileSystemItem> result = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());\n        SetSequence.fromSet(result).addSequence(Sequence.fromIterable((Iterable<PsiFileSystemItem>) event.getCreated()));\n        SetSequence.fromSet(result).addSequence(SetSequence.fromSet(event.getChanged().keySet()));\n        return result;\n      }\n\n      public Iterable<PsiFileSystemItem> getRemoved() {\n        Set<PsiFileSystemItem> result = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());\n        SetSequence.fromSet(result).addSequence(Sequence.fromIterable((Iterable<PsiFileSystemItem>) event.getRemoved()));\n        SetSequence.fromSet(result).addSequence(SetSequence.fromSet(event.getChanged().keySet()));\n        return result;\n      }\n\n      public Iterable<PsiListener.FSMove> getMoved() {\n        return null;\n      }\n\n      public Map<PsiFile, Set<PsiElement>> getChanged() {\n        return new HashMap<PsiFile, Set<PsiElement>>();\n      }\n    };\n\n    for (PsiFileSystemItem file : madeUpEvent.getRemoved()) {\n      assert file instanceof PsiJavaFile;\n      PsiJavaFile javaFile = (PsiJavaFile) file;\n\n      SetSequence.fromSet(MapSequence.fromMap(myRootsPerFile).get(javaFile.getName())).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode it) {\n          SNodeOperations.deleteNode(it);\n        }\n      });\n      MapSequence.fromMap(myRootsPerFile).removeKey(javaFile.getName());\n      myMps2PsiMapper.clearFile(javaFile);\n    }\n\n    for (PsiFileSystemItem file : madeUpEvent.getCreated()) {\n\n      assert file instanceof PsiJavaFile;\n      PsiJavaFile javaFile = (PsiJavaFile) file;\n\n      if (!(javaFile.isValid())) {\n        String name = javaFile.getName();\n        for (PsiFile f : javaFile.getParent().getFiles()) {\n          if (name.equals(f.getName()) && f instanceof PsiJavaFile) {\n            javaFile = (PsiJavaFile) f;\n            break;\n          }\n        }\n      }\n      if (!(javaFile.isValid())) {\n        continue;\n      }\n\n      SNode javaImports = getImports(javaFile.getImportList().getAllImportStatements());\n      ASTConverter converter = new ASTConverter(myMps2PsiMapper);\n\n      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());\n\n      for (PsiClass cls : javaFile.getClasses()) {\n        SNode node = converter.convertClass(cls);\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n          AttributeOperations.setAttribute(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.JavaImports\")), javaImports);\n        }\n        SModelOperations.addRootNode(ourModel, node);\n        SetSequence.fromSet(roots).addElement(node);\n      }\n\n      if (SetSequence.fromSet(roots).isNotEmpty()) {\n        MapSequence.fromMap(myRootsPerFile).put(javaFile.getName(), roots);\n      }\n    }\n\n    for (PsiFile file : madeUpEvent.getChanged().keySet()) {\n\n      ASTConverter converter = new ASTConverter();\n\n      for (PsiElement elem : madeUpEvent.getChanged().get(file)) {\n        if (elem instanceof PsiFile) {\n          continue;\n        }\n        // going up to one of top-level classes \n        PsiElement e = elem;\n        do {\n          e = e.getParent();\n        } while (e != null && !(e instanceof PsiClass && e.getParent() instanceof PsiFile));\n\n        if (e != null) {\n\n          SNode node = converter.convertClass((PsiClass) e);\n          SNodeId id = node.getNodeId();\n          SNode oldNode = ourModel.getNode(id);\n\n          if ((oldNode != null)) {\n            SNodeOperations.replaceWithAnother(oldNode, node);\n          } else {\n            SModelOperations.addRootNode(ourModel, node);\n          }\n        }\n      }\n    }\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"void clearFile(PsiFile file) {\n      BiMap<SNode, PsiElement> mapForFile = MapSequence.fromMap(myMps2PsiMappings).get(file.getName());\n      MapSequence.fromMap(myMps2PsiMappings).removeKey(file.getName());\n      for (SNode node : SetSequence.fromSet(mapForFile.keySet())) {\n        MapSequence.fromMap(myGlobalMps2PsiMapping).removeKey(node);\n      }\n    }","id":100217,"modified_method":"void clearFile(PsiFile file) {\n      BiMap<SNode, PsiElement> mapForFile = MapSequence.fromMap(myMps2PsiMappings).get(file.getName());\n      MapSequence.fromMap(myMps2PsiMappings).removeKey(file.getName());\n      for (SNode node : mapForFile.keySet()) {\n        MapSequence.fromMap(myGlobalMps2PsiMapping).removeKey(node);\n      }\n    }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected SModel createModel() {\n\n    SModel ourModel = new SModel(myModelRef);\n\n    for (PsiJavaFile jf : Sequence.fromIterable(myDataSource.getJavaFiles())) {\n      SNode javaImports = getImports(jf.getImportList().getAllImportStatements());\n\n      ASTConverter converter = new ASTConverter(myMps2PsiMapper);\n      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());\n\n      for (PsiClass cls : jf.getClasses()) {\n        SNode node = converter.convertClass(cls);\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n          AttributeOperations.setAttribute(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.JavaImports\")), javaImports);\n        }\n        // TODO check for duplicate ids (in java sources there may be 2 classes with the same name \n        //  which is an error but none the less) \n        ourModel.addRootNode(node);\n        SetSequence.fromSet(roots).addElement(node);\n        MapSequence.fromMap(myRootsById).put(node.getNodeId(), node);\n      }\n\n      if (SetSequence.fromSet(roots).isNotEmpty()) {\n        MapSequence.fromMap(myRootsPerFile).put(jf.getName(), roots);\n      }\n    }\n\n    return ourModel;\n  }","id":100218,"modified_method":"@Override\n  protected SModel createModel() {\n\n    SModel ourModel = new SModel(myModelRef);\n\n    for (PsiJavaFile jf : myDataSource.getJavaFiles()) {\n      SNode javaImports = getImports(jf.getImportList().getAllImportStatements());\n\n      ASTConverter converter = new ASTConverter(myMps2PsiMapper);\n      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());\n\n      for (PsiClass cls : jf.getClasses()) {\n        SNode node = converter.convertClass(cls);\n        if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n          AttributeOperations.setAttribute(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.Classifier\"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.JavaImports\")), javaImports);\n        }\n        // TODO check for duplicate ids (in java sources there may be 2 classes with the same name \n        //  which is an error but none the less) \n        ourModel.addRootNode(node);\n        SetSequence.fromSet(roots).addElement(node);\n        MapSequence.fromMap(myRootsById).put(node.getNodeId(), node);\n      }\n\n      if (SetSequence.fromSet(roots).isNotEmpty()) {\n        MapSequence.fromMap(myRootsPerFile).put(jf.getName(), roots);\n      }\n    }\n\n    return ourModel;\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Map<PsiFile, Set<PsiElement>> getChanged() {\n      Map<PsiFile, Set<PsiElement>> origMap = event.getChanged();\n      for (PsiFileSystemItem fsItem : Sequence.fromIterable(getCreated())) {\n        if (fsItem instanceof PsiFile) {\n          MapSequence.fromMap(origMap).removeKey((PsiFile) fsItem);\n        }\n      }\n      for (PsiFileSystemItem fsItem : Sequence.fromIterable(getRemoved())) {\n        if (fsItem instanceof PsiFile) {\n          MapSequence.fromMap(origMap).removeKey((PsiFile) fsItem);\n        }\n      }\n      for (PsiListener.FSMove move : Sequence.fromIterable(getMoved())) {\n        if (move.moved instanceof PsiFile) {\n          MapSequence.fromMap(origMap).removeKey((PsiFile) move.moved);\n        }\n      }\n      return origMap;\n    }","id":100219,"modified_method":"public Map<PsiFile, Set<PsiElement>> getChanged() {\n      Map<PsiFile, Set<PsiElement>> origMap = event.getChanged();\n      for (PsiFileSystemItem fsItem : getCreated()) {\n        if (fsItem instanceof PsiFile) {\n          MapSequence.fromMap(origMap).removeKey((PsiFile) fsItem);\n        }\n      }\n      for (PsiFileSystemItem fsItem : getRemoved()) {\n        if (fsItem instanceof PsiFile) {\n          MapSequence.fromMap(origMap).removeKey((PsiFile) fsItem);\n        }\n      }\n      for (PsiListener.FSMove move : getMoved()) {\n        if (move.moved instanceof PsiFile) {\n          MapSequence.fromMap(origMap).removeKey((PsiFile) move.moved);\n        }\n      }\n      return origMap;\n    }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void update() {\n    ModelAccess.assertLegalWrite();\n\n    Map<PsiJavaStubDataSource, SModel> oldModelMap = new HashMap<PsiJavaStubDataSource, SModel>(myModels);\n    Map<PsiJavaStubDataSource, SModel> newModelMap = getModelMap();\n\n    for (IMapping<PsiJavaStubDataSource, SModel> pair : MapSequence.fromMap(oldModelMap)) {\n      if (MapSequence.fromMap(newModelMap).containsKey(pair.key())) {\n        continue;\n      }\n      unregister(pair.value());\n    }\n\n    for (SModel model : Sequence.fromIterable(MapSequence.fromMap(newModelMap).values())) {\n      register(model);\n    }\n\n    myModels = newModelMap;\n    syncDirectoryMap();\n  }","id":100220,"modified_method":"@Override\n  public void update() {\n    ModelAccess.assertLegalWrite();\n\n    Map<PsiJavaStubDataSource, SModel> oldModelMap = new HashMap<PsiJavaStubDataSource, SModel>(myModels);\n    Map<PsiJavaStubDataSource, SModel> newModelMap = getModelMap();\n\n    for (IMapping<PsiJavaStubDataSource, SModel> pair : MapSequence.fromMap(oldModelMap).mappingsSet()) {\n      if (MapSequence.fromMap(newModelMap).containsKey(pair.key())) {\n        continue;\n      }\n      unregister(pair.value());\n    }\n\n    for (SModel model : MapSequence.fromMap(newModelMap).values()) {\n      register(model);\n    }\n\n    myModels = newModelMap;\n    syncDirectoryMap();\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public Iterable<SModel> loadModels() {\n    myModels = getModelMap();\n    for (SModel model : Sequence.fromIterable(MapSequence.fromMap(myModels).values())) {\n      register(model);\n    }\n    syncDirectoryMap();\n    return MapSequence.fromMap(myModels).values();\n  }","id":100221,"modified_method":"@Override\n  public Iterable<SModel> loadModels() {\n    myModels = getModelMap();\n    for (SModel model : MapSequence.fromMap(myModels).values()) {\n      register(model);\n    }\n    syncDirectoryMap();\n    return MapSequence.fromMap(myModels).values();\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void psiChanged(PsiListener.PsiEvent event) {\n\n    event = new PsiJavaStubModelRoot.NormalizedEvent(event);\n\n    // For each data source (isomorphic to model,package) make an event that contains \n    // only files under its PsiDirectory \n    // Filter it so that only java stub related things are left: non java files are ignored, \n    // stuff inside method bodies is ignored \n\n    // Also separate directory creates/deletes into other sets \n    Set<PsiDirectory> newDirs = SetSequence.fromSet(new HashSet<PsiDirectory>());\n    Set<PsiDirectory> deletedDirs = SetSequence.fromSet(new HashSet<PsiDirectory>());\n    Map<PsiJavaStubDataSource, PsiJavaStubModelRoot.PsiChange> changes = MapSequence.fromMap(new HashMap<PsiJavaStubDataSource, PsiJavaStubModelRoot.PsiChange>());\n\n    boolean modelSetChanged = false;\n\n    // TODO check carefully how they interact in different (refactoring) scenarios \n\n    for (PsiFileSystemItem item : Sequence.fromIterable(event.getCreated())) {\n\n      if (item instanceof PsiDirectory) {\n        // it's not interesting per se (while it's empty) \n        continue;\n      }\n\n      if (!(item instanceof PsiJavaFile)) {\n        continue;\n      }\n\n      handleFileCreate((PsiFile) item, null, newDirs, changes);\n    }\n\n    for (PsiListener.FSMove move : Sequence.fromIterable(event.getMoved())) {\n      // recording 2 changes: delete and create \n      if (move.from instanceof PsiDirectory) {\n        handleFileDelete((PsiFile) move.moved, (PsiDirectory) move.from, deletedDirs, changes);\n      }\n      if (move.to instanceof PsiDirectory) {\n        handleFileCreate((PsiFile) move.moved, (PsiDirectory) move.to, newDirs, changes);\n      }\n    }\n\n    for (PsiFileSystemItem item : Sequence.fromIterable(event.getRemoved())) {\n\n      if (item instanceof PsiDirectory) {\n        if (MapSequence.fromMap(myDataSources).containsKey((PsiDirectory) item)) {\n          SetSequence.fromSet(deletedDirs).addElement((PsiDirectory) item);\n        }\n        continue;\n      }\n\n      if (!(item instanceof PsiJavaFile)) {\n        continue;\n      }\n\n      handleFileDelete((PsiFile) item, null, deletedDirs, changes);\n    }\n\n    for (PsiFile file : SetSequence.fromSet(event.getChanged().keySet())) {\n\n      if (!(file instanceof PsiJavaFile)) {\n        continue;\n      }\n\n      PsiDirectory parent = file.getParent();\n      PsiJavaStubDataSource dataSource = MapSequence.fromMap(myDataSources).get(parent);\n      if (dataSource == null) {\n        continue;\n      }\n\n      Set<PsiElement> changeSet = SetSequence.fromSet(new HashSet<PsiElement>());\n      for (PsiElement elem : SetSequence.fromSet(event.getChanged().get(file))) {\n        if (!(filter(elem))) {\n          continue;\n        }\n        SetSequence.fromSet(changeSet).addElement(elem);\n      }\n\n      PsiJavaStubModelRoot.PsiChange change = MapSequence.fromMap(changes).get(dataSource);\n      if (change == null) {\n        change = new PsiJavaStubModelRoot.PsiChange();\n        MapSequence.fromMap(changes).put(dataSource, change);\n      }\n      MapSequence.fromMap(change.changed).put(file, changeSet);\n    }\n\n    // delete models corresponding to directories \n    for (PsiDirectory dir : SetSequence.fromSet(deletedDirs)) {\n\n      PsiJavaStubDataSource ds = MapSequence.fromMap(myDataSources).get(dir);\n      if (ds == null) {\n        // just in case \n        continue;\n      }\n\n      MapSequence.fromMap(myDataSources).removeKey(dir);\n      SModel model = MapSequence.fromMap(myModels).get(ds);\n      MapSequence.fromMap(myModels).removeKey(ds);\n      unregister(model);\n    }\n\n    // create models for new directories \n    for (PsiDirectory dir : SetSequence.fromSet(newDirs)) {\n      PsiDirectory ourSourceRoot = findOurSourceRoot(dir);\n\n      PsiJavaStubModelDescriptor model = makeModelDescriptor(makeModelReference(ourSourceRoot, dir), dir);\n      PsiJavaStubDataSource ds = model.getSource();\n      MapSequence.fromMap(myDataSources).put(dir, ds);\n      MapSequence.fromMap(myModels).put(ds, model);\n      register(model);\n    }\n\n    // notify data sources \n    for (IMapping<PsiJavaStubDataSource, PsiJavaStubModelRoot.PsiChange> notification : SetSequence.fromSet(MapSequence.fromMap(changes).mappingsSet())) {\n      PsiJavaStubDataSource ds = notification.key();\n      PsiJavaStubModelRoot.PsiChange change = notification.value();\n      if (!(change.isEmpty())) {\n        ds.dispatchEvent(change);\n      }\n    }\n  }","id":100222,"modified_method":"@Override\n  public void psiChanged(PsiListener.PsiEvent event) {\n\n    event = new PsiJavaStubModelRoot.NormalizedEvent(event);\n\n    // For each data source (isomorphic to model,package) make an event that contains \n    // only files under its PsiDirectory \n    // Filter it so that only java stub related things are left: non java files are ignored, \n    // stuff inside method bodies is ignored \n\n    // Also separate directory creates/deletes into other sets \n    Set<PsiDirectory> newDirs = SetSequence.fromSet(new HashSet<PsiDirectory>());\n    Set<PsiDirectory> deletedDirs = SetSequence.fromSet(new HashSet<PsiDirectory>());\n    Map<PsiJavaStubDataSource, PsiJavaStubModelRoot.PsiChange> changes = MapSequence.fromMap(new HashMap<PsiJavaStubDataSource, PsiJavaStubModelRoot.PsiChange>());\n\n    boolean modelSetChanged = false;\n\n    // TODO check carefully how they interact in different (refactoring) scenarios \n\n    for (PsiFileSystemItem item : event.getCreated()) {\n\n      if (item instanceof PsiDirectory) {\n        // it's not interesting per se (while it's empty) \n        continue;\n      }\n\n      if (!(item instanceof PsiJavaFile)) {\n        continue;\n      }\n\n      handleFileCreate((PsiFile) item, null, newDirs, changes);\n    }\n\n    for (PsiListener.FSMove move : event.getMoved()) {\n      // recording 2 changes: delete and create \n      if (move.from instanceof PsiDirectory) {\n        handleFileDelete((PsiFile) move.moved, (PsiDirectory) move.from, deletedDirs, changes);\n      }\n      if (move.to instanceof PsiDirectory) {\n        handleFileCreate((PsiFile) move.moved, (PsiDirectory) move.to, newDirs, changes);\n      }\n    }\n\n    for (PsiFileSystemItem item : event.getRemoved()) {\n\n      if (item instanceof PsiDirectory) {\n        if (MapSequence.fromMap(myDataSources).containsKey((PsiDirectory) item)) {\n          SetSequence.fromSet(deletedDirs).addElement((PsiDirectory) item);\n        }\n        continue;\n      }\n\n      if (!(item instanceof PsiJavaFile)) {\n        continue;\n      }\n\n      handleFileDelete((PsiFile) item, null, deletedDirs, changes);\n    }\n\n    for (PsiFile file : event.getChanged().keySet()) {\n\n      if (!(file instanceof PsiJavaFile)) {\n        continue;\n      }\n\n      PsiDirectory parent = file.getParent();\n      PsiJavaStubDataSource dataSource = MapSequence.fromMap(myDataSources).get(parent);\n      if (dataSource == null) {\n        continue;\n      }\n\n      Set<PsiElement> changeSet = SetSequence.fromSet(new HashSet<PsiElement>());\n      for (PsiElement elem : event.getChanged().get(file)) {\n        if (!(filter(elem))) {\n          continue;\n        }\n        SetSequence.fromSet(changeSet).addElement(elem);\n      }\n\n      PsiJavaStubModelRoot.PsiChange change = MapSequence.fromMap(changes).get(dataSource);\n      if (change == null) {\n        change = new PsiJavaStubModelRoot.PsiChange();\n        MapSequence.fromMap(changes).put(dataSource, change);\n      }\n      MapSequence.fromMap(change.changed).put(file, changeSet);\n    }\n\n    // delete models corresponding to directories \n    for (PsiDirectory dir : deletedDirs) {\n\n      PsiJavaStubDataSource ds = MapSequence.fromMap(myDataSources).get(dir);\n      if (ds == null) {\n        // just in case \n        continue;\n      }\n\n      MapSequence.fromMap(myDataSources).removeKey(dir);\n      SModel model = MapSequence.fromMap(myModels).get(ds);\n      MapSequence.fromMap(myModels).removeKey(ds);\n      unregister(model);\n    }\n\n    // create models for new directories \n    for (PsiDirectory dir : newDirs) {\n      PsiDirectory ourSourceRoot = findOurSourceRoot(dir);\n\n      PsiJavaStubModelDescriptor model = makeModelDescriptor(makeModelReference(ourSourceRoot, dir), dir);\n      PsiJavaStubDataSource ds = model.getSource();\n      MapSequence.fromMap(myDataSources).put(dir, ds);\n      MapSequence.fromMap(myModels).put(ds, model);\n      register(model);\n    }\n\n    // notify data sources \n    for (IMapping<PsiJavaStubDataSource, PsiJavaStubModelRoot.PsiChange> notification : MapSequence.fromMap(changes).mappingsSet()) {\n      PsiJavaStubDataSource ds = notification.key();\n      PsiJavaStubModelRoot.PsiChange change = notification.value();\n      if (!(change.isEmpty())) {\n        ds.dispatchEvent(change);\n      }\n    }\n  }","commit_id":"e94ad816614f0c873430def4034b0a7c36b0f32a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_n78otj_b1a(EditorContext editorContext, SNode node) {\n    SingleRoleCellProvider provider = new BuildCompositePath_Editor.tailSingleRoleHandler_n78otj_b1a(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x779c6e65c01467f1L, 0x779c6e65c01467f2L, \"tail\"), editorContext);\n    return provider.createCell();\n  }","id":100223,"modified_method":"private EditorCell createRefNode_n78otj_c0(EditorContext editorContext, SNode node) {\n    SingleRoleCellProvider provider = new BuildCompositePath_Editor.tailSingleRoleHandler_n78otj_c0(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x779c6e65c01467f1L, 0x779c6e65c01467f2L, \"tail\"), editorContext);\n    return provider.createCell();\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_n78otj_b0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_n78otj_b0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.addEditorCell(this.createConstant_n78otj_a1a(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_n78otj_b1a(editorContext, node));\n    return editorCell;\n  }","id":100224,"modified_method":"private static boolean renderingCondition_n78otj_a2a(SNode node, EditorContext editorContext) {\n    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x779c6e65c01467f1L, 0x779c6e65c01467f2L, \"tail\"))).isNotEmpty();\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_n78otj_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_n78otj_a\");\n    editorCell.setBig(true);\n    editorCell.addEditorCell(this.createProperty_n78otj_a0(editorContext, node));\n    if (renderingCondition_n78otj_a1a(node, editorContext)) {\n      editorCell.addEditorCell(this.createCollection_n78otj_b0(editorContext, node));\n    }\n    return editorCell;\n  }","id":100225,"modified_method":"private EditorCell createCollection_n78otj_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_n78otj_a\");\n    editorCell.setBig(true);\n    editorCell.addEditorCell(this.createProperty_n78otj_a0(editorContext, node));\n    if (renderingCondition_n78otj_a1a(node, editorContext)) {\n      editorCell.addEditorCell(this.createConstant_n78otj_b0(editorContext, node));\n    }\n    if (renderingCondition_n78otj_a2a(node, editorContext)) {\n      editorCell.addEditorCell(this.createRefNode_n78otj_c0(editorContext, node));\n    }\n    return editorCell;\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean renderingCondition_n78otj_a1a(SNode node, EditorContext editorContext) {\n    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x779c6e65c01467f1L, 0x779c6e65c01467f2L, \"tail\"))).isNotEmpty();\n  }","id":100226,"modified_method":"private static boolean renderingCondition_n78otj_a1a(SNode node, EditorContext editorContext) {\n    return (SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x779c6e65c01467f1L, 0x779c6e65c01467f2L, \"tail\")) != null);\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_n78otj_a1a(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/\");\n    editorCell.setCellId(\"Constant_n78otj_a1a\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.SELECTABLE, 0, false);\n    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);\n    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    BuildCompositePath_Actions.setCellActions(editorCell, node, editorContext);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":100227,"modified_method":"private EditorCell createConstant_n78otj_b0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/\");\n    editorCell.setCellId(\"Constant_n78otj_b0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.SELECTABLE, 0, false);\n    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);\n    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    BuildCompositePath_Actions.setCellActions(editorCell, node, editorContext);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_3is4rg_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_3is4rg_a\");\n    editorCell.setBig(true);\n    editorCell.addEditorCell(this.createConstant_3is4rg_a0(editorContext, node));\n    editorCell.addEditorCell(this.createRefCell_3is4rg_b0(editorContext, node));\n    if (renderingCondition_3is4rg_a2a(node, editorContext)) {\n      editorCell.addEditorCell(this.createCollection_3is4rg_c0(editorContext, node));\n    }\n    return editorCell;\n  }","id":100228,"modified_method":"private EditorCell createCollection_3is4rg_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_3is4rg_a\");\n    editorCell.setBig(true);\n    editorCell.addEditorCell(this.createConstant_3is4rg_a0(editorContext, node));\n    editorCell.addEditorCell(this.createRefCell_3is4rg_b0(editorContext, node));\n    if (renderingCondition_3is4rg_a2a(node, editorContext)) {\n      editorCell.addEditorCell(this.createConstant_3is4rg_c0(editorContext, node));\n    }\n    if (renderingCondition_3is4rg_a3a(node, editorContext)) {\n      editorCell.addEditorCell(this.createRefNode_3is4rg_d0(editorContext, node));\n    }\n    return editorCell;\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean renderingCondition_3is4rg_a2a(SNode node, EditorContext editorContext) {\n    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"))).isNotEmpty();\n  }","id":100229,"modified_method":"private static boolean renderingCondition_3is4rg_a2a(SNode node, EditorContext editorContext) {\n    return (SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\")) != null);\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_3is4rg_b2a(EditorContext editorContext, SNode node) {\n    SingleRoleCellProvider provider = new BuildSourceMacroRelativePath_Editor.compositePartSingleRoleHandler_3is4rg_b2a(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"), editorContext);\n    return provider.createCell();\n  }","id":100230,"modified_method":"private EditorCell createRefNode_3is4rg_d0(EditorContext editorContext, SNode node) {\n    SingleRoleCellProvider provider = new BuildSourceMacroRelativePath_Editor.compositePartSingleRoleHandler_3is4rg_d0(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"), editorContext);\n    return provider.createCell();\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_3is4rg_a2a(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/\");\n    editorCell.setCellId(\"Constant_3is4rg_a2a\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);\n    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":100231,"modified_method":"private EditorCell createConstant_3is4rg_c0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/\");\n    editorCell.setCellId(\"Constant_3is4rg_c0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);\n    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_3is4rg_c0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_3is4rg_c0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.SELECTABLE, 0, false);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.addEditorCell(this.createConstant_3is4rg_a2a(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_3is4rg_b2a(editorContext, node));\n    return editorCell;\n  }","id":100232,"modified_method":"private static boolean renderingCondition_3is4rg_a3a(SNode node, EditorContext editorContext) {\n    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"))).isNotEmpty();\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_698n2d_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_698n2d_a\");\n    editorCell.setBig(true);\n    editorCell.addEditorCell(this.createConstant_698n2d_a0(editorContext, node));\n    if (renderingCondition_698n2d_a1a(node, editorContext)) {\n      editorCell.addEditorCell(this.createCollection_698n2d_b0(editorContext, node));\n    }\n    return editorCell;\n  }","id":100233,"modified_method":"private EditorCell createCollection_698n2d_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_698n2d_a\");\n    editorCell.setBig(true);\n    editorCell.addEditorCell(this.createConstant_698n2d_a0(editorContext, node));\n    if (renderingCondition_698n2d_a1a(node, editorContext)) {\n      editorCell.addEditorCell(this.createConstant_698n2d_b0(editorContext, node));\n    }\n    if (renderingCondition_698n2d_a2a(node, editorContext)) {\n      editorCell.addEditorCell(this.createRefNode_698n2d_c0(editorContext, node));\n    }\n    return editorCell;\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_698n2d_a1a(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/\");\n    editorCell.setCellId(\"Constant_698n2d_a1a\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);\n    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":100234,"modified_method":"private EditorCell createConstant_698n2d_b0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/\");\n    editorCell.setCellId(\"Constant_698n2d_b0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);\n    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean renderingCondition_698n2d_a1a(SNode node, EditorContext editorContext) {\n    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"))).isNotEmpty();\n  }","id":100235,"modified_method":"private static boolean renderingCondition_698n2d_a1a(SNode node, EditorContext editorContext) {\n    return (SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\")) != null);\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_698n2d_b0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_698n2d_b0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.SELECTABLE, 0, false);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.addEditorCell(this.createConstant_698n2d_a1a(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_698n2d_b1a(editorContext, node));\n    return editorCell;\n  }","id":100236,"modified_method":"private static boolean renderingCondition_698n2d_a2a(SNode node, EditorContext editorContext) {\n    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"))).isNotEmpty();\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_698n2d_b1a(EditorContext editorContext, SNode node) {\n    SingleRoleCellProvider provider = new BuildSourceProjectRelativePath_Editor.compositePartSingleRoleHandler_698n2d_b1a(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"), editorContext);\n    return provider.createCell();\n  }","id":100237,"modified_method":"private EditorCell createRefNode_698n2d_c0(EditorContext editorContext, SNode node) {\n    SingleRoleCellProvider provider = new BuildSourceProjectRelativePath_Editor.compositePartSingleRoleHandler_698n2d_c0(node, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, 0x65997a65772aebcbL, \"compositePart\"), editorContext);\n    return provider.createCell();\n  }","commit_id":"34abda8b79617ba6773af5cc4acee59f7b40ff01","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Test\n  public void sticky_facets() {\n\n    Integer numberOfSystemTags = 2;\n    dao.insert(dbSession,\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S001\")).setLanguage(\"java\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S002\")).setLanguage(\"java\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S003\")).setLanguage(\"java\").setTags(ImmutableSet.<String>of(\"T1\", \"T2\")),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S011\")).setLanguage(\"cobol\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S012\")).setLanguage(\"cobol\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S013\")).setLanguage(\"cobol\").setTags(ImmutableSet.<String>of(\"T3\", \"T4\")),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S111\")).setLanguage(\"cpp\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S112\")).setLanguage(\"cpp\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S113\")).setLanguage(\"cpp\").setTags(ImmutableSet.<String>of(\"T2\", \"T3\")));\n    dbSession.commit();\n\n    // 0 assert Base\n    assertThat(index.countAll()).isEqualTo(9);\n    assertThat(index.search(new RuleQuery(), new QueryContext()).getHits()).hasSize(9);\n\n    // 1 Facet with no filters at all\n    Map<String, Collection<FacetValue>> facets = index.search(new RuleQuery(), new QueryContext().setFacet(true)).getFacets();\n    assertThat(facets.keySet()).hasSize(3);\n    assertThat(facets.get(RuleIndex.FACET_LANGUAGES)).hasSize(3);\n    assertThat(facets.get(RuleIndex.FACET_REPOSITORIES)).hasSize(2);\n    assertThat(facets.get(RuleIndex.FACET_TAGS)).hasSize(4 + numberOfSystemTags);\n\n    // 2 Facet with a language filter\n    // -- lang facet should still have all language\n    Result<Rule> result = index.search(new RuleQuery()\n      .setLanguages(ImmutableList.<String>of(\"cpp\"))\n      , new QueryContext().setFacet(true));\n    assertThat(result.getHits()).hasSize(3);\n    assertThat(result.getFacets()).hasSize(3);\n    assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).hasSize(3);\n\n    // 3 facet with 2 filters\n    // -- lang facet for tag T2\n    // -- tag facet for lang cpp\n    // -- repository for cpp & T2\n    result = index.search(new RuleQuery()\n      .setLanguages(ImmutableList.<String>of(\"cpp\"))\n      .setTags(ImmutableList.<String>of(\"T2\"))\n      , new QueryContext().setFacet(true));\n    assertThat(result.getHits()).hasSize(1);\n    assertThat(result.getFacets().keySet()).hasSize(3);\n    assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).hasSize(2); // java & cpp\n    assertThat(result.getFacets().get(RuleIndex.FACET_REPOSITORIES)).hasSize(1); // foo\n    assertThat(result.getFacets().get(RuleIndex.FACET_TAGS)).hasSize(2 + numberOfSystemTags); // T2 & T3 + SystemTags\n\n    // 4 facet with 2 filters\n    // -- lang facet for tag T2\n    // -- tag facet for lang cpp & java\n    // -- repository for (cpp || java) & T2\n    result = index.search(new RuleQuery()\n      .setLanguages(ImmutableList.<String>of(\"cpp\", \"java\"))\n      .setTags(ImmutableList.<String>of(\"T2\"))\n      , new QueryContext().setFacet(true));\n    assertThat(result.getHits()).hasSize(2);\n    assertThat(result.getFacets().keySet()).hasSize(3);\n    assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).hasSize(2); // java & cpp\n    assertThat(result.getFacets().get(RuleIndex.FACET_REPOSITORIES)).hasSize(2); // foo & xoo\n    assertThat(result.getFacets().get(RuleIndex.FACET_TAGS)).hasSize(3 + numberOfSystemTags); // T1 & T2 & T3 + SystemTags\n  }","id":100238,"modified_method":"@Test\n  public void sticky_facets() {\n\n    Integer numberOfSystemTags = 2;\n    dao.insert(dbSession,\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S001\")).setLanguage(\"java\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S002\")).setLanguage(\"java\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S003\")).setLanguage(\"java\").setTags(ImmutableSet.<String>of(\"T1\", \"T2\")),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S011\")).setLanguage(\"cobol\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"xoo\", \"S012\")).setLanguage(\"cobol\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S013\")).setLanguage(\"cobol\").setTags(ImmutableSet.<String>of(\"T3\", \"T4\")),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S111\")).setLanguage(\"cpp\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S112\")).setLanguage(\"cpp\").setTags(ImmutableSet.<String>of()),\n      RuleTesting.newDto(RuleKey.of(\"foo\", \"S113\")).setLanguage(\"cpp\").setTags(ImmutableSet.<String>of(\"T2\", \"T3\")));\n    dbSession.commit();\n\n    // 0 assert Base\n    assertThat(index.countAll()).isEqualTo(9);\n    assertThat(index.search(new RuleQuery(), new QueryContext()).getHits()).hasSize(9);\n\n    // 1 Facet with no filters at all\n    Map<String, Collection<FacetValue>> facets = index.search(new RuleQuery(), new QueryContext().setFacet(true)).getFacets();\n    assertThat(facets.keySet()).hasSize(3);\n    assertThat(facets.get(RuleIndex.FACET_LANGUAGES)).onProperty(\"key\").containsOnly(\"cpp\", \"java\", \"cobol\");\n    assertThat(facets.get(RuleIndex.FACET_REPOSITORIES)).onProperty(\"key\").containsOnly(\"xoo\", \"foo\");\n    assertThat(facets.get(RuleIndex.FACET_TAGS)).onProperty(\"key\").containsOnly(\"systag1\", \"systag2\", \"T1\", \"T2\", \"T3\", \"T4\");\n\n    // 2 Facet with a language filter\n    // -- lang facet should still have all language\n    Result<Rule> result = index.search(new RuleQuery()\n      .setLanguages(ImmutableList.<String>of(\"cpp\"))\n      , new QueryContext().setFacet(true));\n    assertThat(result.getHits()).hasSize(3);\n    assertThat(result.getFacets()).hasSize(3);\n    assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).onProperty(\"key\").containsOnly(\"cpp\", \"java\", \"cobol\");\n\n    // 3 facet with 2 filters\n    // -- lang facet for tag T2\n    // -- tag facet for lang cpp\n    // -- repository for cpp & T2\n    result = index.search(new RuleQuery()\n      .setLanguages(ImmutableList.<String>of(\"cpp\"))\n      .setTags(ImmutableList.<String>of(\"T2\"))\n      , new QueryContext().setFacet(true));\n    assertThat(result.getHits()).hasSize(1);\n    assertThat(result.getFacets().keySet()).hasSize(3);\n    assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).onProperty(\"key\").containsOnly(\"cpp\", \"java\");\n    assertThat(result.getFacets().get(RuleIndex.FACET_REPOSITORIES)).onProperty(\"key\").containsOnly(\"foo\");\n    assertThat(result.getFacets().get(RuleIndex.FACET_TAGS)).onProperty(\"key\").containsOnly(\"systag1\", \"systag2\", \"T2\", \"T3\");\n\n    // 4 facet with 2 filters\n    // -- lang facet for tag T2\n    // -- tag facet for lang cpp & java\n    // -- repository for (cpp || java) & T2\n    result = index.search(new RuleQuery()\n      .setLanguages(ImmutableList.<String>of(\"cpp\", \"java\"))\n      .setTags(ImmutableList.<String>of(\"T2\"))\n      , new QueryContext().setFacet(true));\n    assertThat(result.getHits()).hasSize(2);\n    assertThat(result.getFacets().keySet()).hasSize(3);\n    assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).onProperty(\"key\").containsOnly(\"cpp\", \"java\");\n    assertThat(result.getFacets().get(RuleIndex.FACET_REPOSITORIES)).onProperty(\"key\").containsOnly(\"foo\", \"xoo\");\n    assertThat(result.getFacets().get(RuleIndex.FACET_TAGS)).onProperty(\"key\").containsOnly(\"systag1\", \"systag2\", \"T1\", \"T2\", \"T3\");\n  }","commit_id":"4d098ebe31e142626a4a48c3d253ebd656293834","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"protected TailType computeTailType(InsertionContext context) {\n    if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) {\n      return TailType.SMART_COMPLETION;\n    }\n\n    if (LookupItem.getDefaultTailType(context.getCompletionChar()) != null) {\n      return null;\n    }\n\n    LookupElement delegate = getDelegate();\n    LookupItem item = as(LookupItem.CLASS_CONDITION_KEY);\n    Object object = delegate.getObject();\n    if (!CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET && (object instanceof PsiMethod || object instanceof PsiClass)) {\n      return TailType.NONE;\n    }\n\n    final PsiExpression enclosing = PsiTreeUtil.getContextOfType(myPosition, PsiExpression.class, true);\n\n    if (enclosing != null && object instanceof PsiElement) {\n      final PsiType type = JavaCompletionUtil.getLookupElementType(delegate);\n      final TailType itemType = item != null ? item.getTailType() : TailType.NONE;\n      TailType cached = itemType;\n      int cachedPrior = 0;\n      if (type != null && type.isValid()) {\n        for (ExpectedTypeInfo info : myExpectedTypeInfos) {\n          final PsiType infoType = info.getType();\n          if (PsiType.VOID.equals(infoType)) {\n            cached = info.getTailType();\n            continue;\n          }\n\n          if (infoType.equals(type) && cachedPrior < 2) {\n            cachedPrior = 2;\n            cached = info.getTailType();\n          }\n          else if (cachedPrior == 2 && cached != info.getTailType()) {\n            cachedPrior = 3;\n            cached = itemType;\n          }\n          else if (((infoType.isAssignableFrom(type) && info.getKind() == ExpectedTypeInfo.TYPE_OR_SUBTYPE)\n                    || (type.isAssignableFrom(infoType) && info.getKind() == ExpectedTypeInfo.TYPE_OR_SUPERTYPE))\n                   && cachedPrior < 1) {\n            cachedPrior = 1;\n            cached = info.getTailType();\n          }\n          else if (cachedPrior == 1 && cached != info.getTailType()) {\n            cached = itemType;\n          }\n        }\n      }\n      else {\n        if (myExpectedTypeInfos.size() == 1) {\n          cached = myExpectedTypeInfos.iterator().next().getTailType();\n        }\n      }\n      return cached;\n    }\n    return null;\n  }","id":100239,"modified_method":"protected TailType computeTailType(InsertionContext context) {\n    if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) {\n      return TailType.SMART_COMPLETION;\n    }\n\n    if (LookupItem.getDefaultTailType(context.getCompletionChar()) != null) {\n      return null;\n    }\n\n    LookupElement delegate = getDelegate();\n    LookupItem item = as(LookupItem.CLASS_CONDITION_KEY);\n    Object object = delegate.getObject();\n    if (!CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET && (object instanceof PsiMethod || object instanceof PsiClass)) {\n      return TailType.NONE;\n    }\n\n    final PsiExpression enclosing = PsiTreeUtil.getContextOfType(myPosition, PsiExpression.class, true);\n\n    if (enclosing != null && object instanceof PsiElement) {\n      final PsiType type = JavaCompletionUtil.getLookupElementType(delegate);\n      final TailType itemType = item != null ? item.getTailType() : TailType.NONE;\n      if (type != null && type.isValid()) {\n        Set<TailType> voidTyped = new HashSet<TailType>();\n        Set<TailType> sameTyped = new HashSet<TailType>();\n        Set<TailType> assignableTyped = new HashSet<TailType>();\n        for (ExpectedTypeInfo info : myExpectedTypeInfos) {\n          final PsiType infoType = info.getType();\n          if (PsiType.VOID.equals(infoType)) {\n            voidTyped.add(info.getTailType());\n          } else if (infoType.equals(type)) {\n            sameTyped.add(info.getTailType());\n          } else if ((infoType.isAssignableFrom(type) && info.getKind() == ExpectedTypeInfo.TYPE_OR_SUBTYPE) ||\n                     (type.isAssignableFrom(infoType) && info.getKind() == ExpectedTypeInfo.TYPE_OR_SUPERTYPE)) {\n            assignableTyped.add(info.getTailType());\n          }\n        }\n\n        if (!sameTyped.isEmpty()) {\n          return sameTyped.size() == 1 ? sameTyped.iterator().next() : itemType;\n        }\n        if (!assignableTyped.isEmpty()) {\n          return assignableTyped.size() == 1 ? assignableTyped.iterator().next() : itemType;\n        }\n        if (!voidTyped.isEmpty()) {\n          return voidTyped.size() == 1 ? voidTyped.iterator().next() : itemType;\n        }\n\n      }\n      else {\n        if (myExpectedTypeInfos.size() == 1) {\n          return myExpectedTypeInfos.iterator().next().getTailType();\n        }\n      }\n      return itemType;\n    }\n    return null;\n  }","commit_id":"ceae90f78068f7a11ed546f1fd23ada51466ac6f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected int addActions(SimulationNode2 node, FilterAbility filter, int depth, int alpha, int beta) {\n\t\tlogger.fine(\"addActions: \" + depth + \", alpha=\" + alpha + \", beta=\" + beta);\n\t\tGame game = node.getGame();\n\t\tint val;\n\t\tif (Thread.interrupted()) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tlogger.info(\"interrupted\");\n\t\t\tval = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\treturn val;\n\t\t}\n\t\tif (depth <= 0 || SimulationNode2.nodeCount > maxNodes || game.isGameOver()) {\n\t\t\tlogger.fine(\"simulating -- reached end state, node count=\" + SimulationNode2.nodeCount + \", depth=\" + depth);\n\t\t\tval = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\treturn val;\n\t\t}\n\t\telse if (node.getChildren().size() > 0) {\n\t\t\tlogger.fine(\"simulating -- somthing added children:\" + node.getChildren().size());\n\t\t\tval = minimaxAB(node, filter, depth-1, alpha, beta);\n\t\t\treturn val;\n\t\t}\n\t\telse {\n\t\t\tif (logger.isLoggable(Level.FINE))\n\t\t\t\tlogger.fine(\"simulating -- alpha: \" + alpha + \" beta: \" + beta + \" depth:\" + depth + \" step:\" + game.getTurn().getStepType() + \" for player:\" + (node.getPlayerId().equals(playerId) ? \"yes\" : \"no\"));\n\t\t\tif (allPassed(game)) {\n\t\t\t\tif (!game.getStack().isEmpty()) {\n\t\t\t\t\tresolve(node, depth, game);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgame.getPlayers().resetPassed();\n\t\t\t\t\tplayNext(game, game.getActivePlayerId(), node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (game.isGameOver()) {\n\t\t\t\tval = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\t}\n\t\t\telse if (node.getChildren().size() > 0) {\n\t\t\t\t//declared attackers or blockers or triggered abilities\n\t\t\t\tlogger.fine(\"simulating -- attack/block/trigger added children:\" + node.getChildren().size());\n\t\t\t\tval = minimaxAB(node, filter, depth-1, alpha, beta);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tval = simulatePriority(node, game, filter, depth, alpha, beta);\n\t\t\t}\n\t\t}\n\n\t\tif (logger.isLoggable(Level.FINE))\n\t\t\tlogger.fine(\"returning -- score: \" + val + \" depth:\" + depth + \" step:\" + game.getTurn().getStepType() + \" for player:\" + game.getPlayer(node.getPlayerId()).getName());\n\t\treturn val;\n\n\t}","id":100240,"modified_method":"protected int addActions(SimulationNode2 node, FilterAbility filter, int depth, int alpha, int beta) {\n\t\tlogger.debug(\"addActions: \" + depth + \", alpha=\" + alpha + \", beta=\" + beta);\n\t\tGame game = node.getGame();\n\t\tint val;\n\t\tif (Thread.interrupted()) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tval = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\tlogger.info(\"interrupted - \" + val);\n\t\t\treturn val;\n\t\t}\n\t\tif (depth <= 0 || SimulationNode2.nodeCount > maxNodes || game.isGameOver()) {\n\t\t\tlogger.debug(\"simulating -- reached end state, node count=\" + SimulationNode2.nodeCount + \", depth=\" + depth);\n\t\t\tval = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\tUUID currentPlayerId = node.getGame().getPlayerList().get();\n\t\t\t//logger.info(\"reached - \" + val + \", playerId=\" + playerId + \", node.pid=\"+currentPlayerId);\n\t\t\treturn val;\n\t\t}\n\t\telse if (node.getChildren().size() > 0) {\n\t\t\tlogger.debug(\"simulating -- somthing added children:\" + node.getChildren().size());\n\t\t\tval = minimaxAB(node, filter, depth-1, alpha, beta);\n\t\t\treturn val;\n\t\t}\n\t\telse {\n\t\t\tlogger.debug(\"simulating -- alpha: \" + alpha + \" beta: \" + beta + \" depth:\" + depth + \" step:\" + game.getTurn().getStepType() + \" for player:\" + (node.getPlayerId().equals(playerId) ? \"yes\" : \"no\"));\n\t\t\tif (allPassed(game)) {\n\t\t\t\tif (!game.getStack().isEmpty()) {\n\t\t\t\t\tresolve(node, depth, game);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgame.getPlayers().resetPassed();\n\t\t\t\t\tplayNext(game, game.getActivePlayerId(), node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (game.isGameOver()) {\n\t\t\t\tval = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\t} else if (node.getChildren().size() > 0) {\n\t\t\t\t//declared attackers or blockers or triggered abilities\n\t\t\t\tlogger.debug(\"simulating -- attack/block/trigger added children:\" + node.getChildren().size());\n\t\t\t\tval = minimaxAB(node, filter, depth-1, alpha, beta);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tval = simulatePriority(node, game, filter, depth, alpha, beta);\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(\"returning -- score: \" + val + \" depth:\" + depth + \" step:\" + game.getTurn().getStepType() + \" for player:\" + game.getPlayer(node.getPlayerId()).getName());\n\t\treturn val;\n\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected void calculateActions(Game game) {\n\t\tcurrentScore = GameStateEvaluator2.evaluate(playerId, game);\n\t\tif (!getNextAction(game)) {\n\t\t\tGame sim = createSimulation(game);\n\t\t\tSimulationNode2.resetCount();\n\t\t\troot = new SimulationNode2(null, sim, maxDepth, playerId);\n\t\t\tlogger.info(\"simulating actions\");\n\t\t\t//int bestScore = addActionsTimed(new FilterAbility());\n\t\t\taddActionsTimed(new FilterAbility());\n\t\t\tif (root.children.size() > 0) {\n\t\t\t\troot = root.children.get(0);\n\t\t\t\t//GameStateEvaluator2.evaluate(playerId, root.getGame());\n\t\t\t\tint bestScore = root.getScore();\n\t\t\t\tif (bestScore > currentScore) {\n\t\t\t\t\tactions = new LinkedList<Ability>(root.abilities);\n\t\t\t\t\tcombat = root.combat;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":100241,"modified_method":"protected void calculateActions(Game game) {\n\t\tif (!getNextAction(game)) {\n\t\t\tGame sim = createSimulation(game);\n\t\t\tSimulationNode2.resetCount();\n\t\t\troot = new SimulationNode2(null, sim, maxDepth, playerId);\n\t\t\tlogger.info(\"simulating actions\");\n\t\t\t//int bestScore = addActionsTimed(new FilterAbility());\n\t\t\tcurrentScore = GameStateEvaluator2.evaluate(playerId, game);\n\t\t\taddActionsTimed(new FilterAbility());\n\t\t\tif (root.children.size() > 0) {\n\t\t\t\troot = root.children.get(0);\n\t\t\t\t//GameStateEvaluator2.evaluate(playerId, root.getGame());\n\t\t\t\tint bestScore = root.getScore();\n\t\t\t\tif (bestScore > currentScore) {\n\t\t\t\t\tactions = new LinkedList<Ability>(root.abilities);\n\t\t\t\t\tcombat = root.combat;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic void selectAttackers(Game game) {\n\t\tlogger.info(\"selectAttackers\");\n\t\tif (combat != null) {\n\t\t\tUUID opponentId = game.getCombat().getDefenders().iterator().next();\n\t\t\tfor (UUID attackerId: combat.getAttackers()) {\n\t\t\t\tlogger.info(\"declare attacker: \" + game.getCard(attackerId).getName());\n\t\t\t\tthis.declareAttacker(attackerId, opponentId, game);\n\t\t\t}\n\t\t}\n\t}","id":100242,"modified_method":"@Override\n\tpublic void selectAttackers(Game game) {\n\t\tlogger.debug(\"selectAttackers\");\n\t\tif (combat != null) {\n\t\t\tUUID opponentId = game.getCombat().getDefenders().iterator().next();\n\t\t\tfor (UUID attackerId: combat.getAttackers()) {\n\t\t\t\tlogger.debug(\"declare attacker: \" + game.getCard(attackerId).getName());\n\t\t\t\tthis.declareAttacker(attackerId, opponentId, game);\n\t\t\t}\n\t\t}\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"public void playNext(Game game, UUID activePlayerId, SimulationNode2 node) {\n\t\tboolean skip = false;\n\t\twhile (true) {\n\t\t\tPhase currentPhase = game.getPhase();\n\t\t\tif (!skip)\n\t\t\t\tcurrentPhase.getStep().endStep(game, activePlayerId);\n\t\t\tgame.applyEffects();\n\t\t\tswitch (currentPhase.getStep().getType()) {\n\t\t\t\tcase UNTAP:\n\t\t\t\t\tgame.getPhase().setStep(new UpkeepStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase UPKEEP:\n\t\t\t\t\tgame.getPhase().setStep(new DrawStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase DRAW:\n\t\t\t\t\tgame.getTurn().setPhase(new PreCombatMainPhase());\n\t\t\t\t\tgame.getPhase().setStep(new PreCombatMainStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase PRECOMBAT_MAIN:\n\t\t\t\t\tgame.getTurn().setPhase(new CombatPhase());\n\t\t\t\t\tgame.getPhase().setStep(new BeginCombatStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase BEGIN_COMBAT:\n\t\t\t\t\tgame.getPhase().setStep(new DeclareAttackersStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase DECLARE_ATTACKERS:\n\t\t\t\t\tgame.getPhase().setStep(new DeclareBlockersStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase DECLARE_BLOCKERS:\n\t\t\t\t\tgame.getPhase().setStep(new CombatDamageStep(true));\n\t\t\t\t\tbreak;\n\t\t\t\tcase COMBAT_DAMAGE:\n\t\t\t\t\tif (((CombatDamageStep)currentPhase.getStep()).getFirst())\n\t\t\t\t\t\tgame.getPhase().setStep(new CombatDamageStep(false));\n\t\t\t\t\telse\n\t\t\t\t\t\tgame.getPhase().setStep(new EndOfCombatStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase END_COMBAT:\n\t\t\t\t\tgame.getTurn().setPhase(new PostCombatMainPhase());\n\t\t\t\t\tgame.getPhase().setStep(new PostCombatMainStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase POSTCOMBAT_MAIN:\n\t\t\t\t\tgame.getTurn().setPhase(new EndPhase());\n\t\t\t\t\tgame.getPhase().setStep(new EndStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase END_TURN:\n\t\t\t\t\tgame.getPhase().setStep(new CleanupStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLEANUP:\n\t\t\t\t\tgame.getPhase().getStep().beginStep(game, activePlayerId);\n\t\t\t\t\tif (!game.checkStateAndTriggered() && !game.isGameOver()) {\n\t\t\t\t\t\tgame.getState().setActivePlayerId(game.getState().getPlayerList(game.getActivePlayerId()).getNext());\n\t\t\t\t\t\tgame.getTurn().setPhase(new BeginningPhase());\n\t\t\t\t\t\tgame.getPhase().setStep(new UntapStep());\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tif (!game.getStep().skipStep(game, game.getActivePlayerId())) {\n\t\t\t\tif (game.getTurn().getStepType() == PhaseStep.DECLARE_ATTACKERS) {\n\t\t\t\t\tgame.fireEvent(new GameEvent(GameEvent.EventType.DECLARE_ATTACKERS_STEP_PRE, null, null, activePlayerId));\n\t\t\t\t\tif (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS, activePlayerId, activePlayerId))) {\n\t\t\t\t\t\tfor (Combat engagement: ((SimulatedPlayer2)game.getPlayer(activePlayerId)).addAttackers(game)) {\n\t\t\t\t\t\t\tGame sim = game.copy();\n\t\t\t\t\t\t\tUUID defenderId = game.getOpponents(playerId).iterator().next();\n\t\t\t\t\t\t\tfor (CombatGroup group: engagement.getGroups()) {\n\t\t\t\t\t\t\t\tfor (UUID attackerId: group.getAttackers()) {\n\t\t\t\t\t\t\t\t\tsim.getPlayer(activePlayerId).declareAttacker(attackerId, defenderId, sim);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_ATTACKERS, playerId, playerId));\n\t\t\t\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, node.getDepth()-1, activePlayerId);\n\t\t\t\t\t\t\tlogger.info(\"simulating -- node #:\" + SimulationNode2.getCount() + \" declare attakers\");\n\t\t\t\t\t\t\tnewNode.setCombat(sim.getCombat());\n\t\t\t\t\t\t\tnode.children.add(newNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (game.getTurn().getStepType() == PhaseStep.DECLARE_BLOCKERS) {\n\t\t\t\t\tgame.fireEvent(new GameEvent(GameEvent.EventType.DECLARE_BLOCKERS_STEP_PRE, null, null, activePlayerId));\n\t\t\t\t\tif (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_BLOCKERS, activePlayerId, activePlayerId))) {\n\t\t\t\t\t\tfor (UUID defenderId: game.getCombat().getDefenders()) {\n\t\t\t\t\t\t\t//check if defender is being attacked\n\t\t\t\t\t\t\tif (game.getCombat().isAttacked(defenderId, game)) {\n\t\t\t\t\t\t\t\tfor (Combat engagement: ((SimulatedPlayer2)game.getPlayer(defenderId)).addBlockers(game)) {\n\t\t\t\t\t\t\t\t\tGame sim = game.copy();\n\t\t\t\t\t\t\t\t\tfor (CombatGroup group: engagement.getGroups()) {\n\t\t\t\t\t\t\t\t\t\tList<UUID> blockers = new ArrayList<UUID>();\n\t\t\t\t\t\t\t\t\t\tblockers.addAll(group.getBlockers());\n\t\t\t\t\t\t\t\t\t\tfor (UUID blockerId: blockers) {\n\t\t\t\t\t\t\t\t\t\t\tgroup.addBlocker(blockerId, defenderId, sim);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tblockers = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_BLOCKERS, playerId, playerId));\n\t\t\t\t\t\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, node.getDepth()-1, defenderId);\n\t\t\t\t\t\t\t\t\tlogger.info(\"simulating -- node #:\" + SimulationNode2.getCount() + \" declare blockers\");\n\t\t\t\t\t\t\t\t\tnewNode.setCombat(sim.getCombat());\n\t\t\t\t\t\t\t\t\tnode.children.add(newNode);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgame.getStep().beginStep(game, activePlayerId);\n\t\t\t\t}\n\t\t\t\tif (game.getStep().getHasPriority())\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tskip = true;\n\t\t\t}\n\t\t}\n\t\tgame.checkStateAndTriggered();\n\t}","id":100243,"modified_method":"public void playNext(Game game, UUID activePlayerId, SimulationNode2 node) {\n\t\tboolean skip = false;\n\t\twhile (true) {\n\t\t\tPhase currentPhase = game.getPhase();\n\t\t\tif (!skip)\n\t\t\t\tcurrentPhase.getStep().endStep(game, activePlayerId);\n\t\t\tgame.applyEffects();\n\t\t\tswitch (currentPhase.getStep().getType()) {\n\t\t\t\tcase UNTAP:\n\t\t\t\t\tgame.getPhase().setStep(new UpkeepStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase UPKEEP:\n\t\t\t\t\tgame.getPhase().setStep(new DrawStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase DRAW:\n\t\t\t\t\tgame.getTurn().setPhase(new PreCombatMainPhase());\n\t\t\t\t\tgame.getPhase().setStep(new PreCombatMainStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase PRECOMBAT_MAIN:\n\t\t\t\t\tgame.getTurn().setPhase(new CombatPhase());\n\t\t\t\t\tgame.getPhase().setStep(new BeginCombatStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase BEGIN_COMBAT:\n\t\t\t\t\tgame.getPhase().setStep(new DeclareAttackersStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase DECLARE_ATTACKERS:\n\t\t\t\t\tgame.getPhase().setStep(new DeclareBlockersStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase DECLARE_BLOCKERS:\n\t\t\t\t\tgame.getPhase().setStep(new CombatDamageStep(true));\n\t\t\t\t\tbreak;\n\t\t\t\tcase COMBAT_DAMAGE:\n\t\t\t\t\tif (((CombatDamageStep)currentPhase.getStep()).getFirst())\n\t\t\t\t\t\tgame.getPhase().setStep(new CombatDamageStep(false));\n\t\t\t\t\telse\n\t\t\t\t\t\tgame.getPhase().setStep(new EndOfCombatStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase END_COMBAT:\n\t\t\t\t\tgame.getTurn().setPhase(new PostCombatMainPhase());\n\t\t\t\t\tgame.getPhase().setStep(new PostCombatMainStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase POSTCOMBAT_MAIN:\n\t\t\t\t\tgame.getTurn().setPhase(new EndPhase());\n\t\t\t\t\tgame.getPhase().setStep(new EndStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase END_TURN:\n\t\t\t\t\tgame.getPhase().setStep(new CleanupStep());\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLEANUP:\n\t\t\t\t\tgame.getPhase().getStep().beginStep(game, activePlayerId);\n\t\t\t\t\tif (!game.checkStateAndTriggered() && !game.isGameOver()) {\n\t\t\t\t\t\tgame.getState().setActivePlayerId(game.getState().getPlayerList(game.getActivePlayerId()).getNext());\n\t\t\t\t\t\tgame.getTurn().setPhase(new BeginningPhase());\n\t\t\t\t\t\tgame.getPhase().setStep(new UntapStep());\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tif (!game.getStep().skipStep(game, game.getActivePlayerId())) {\n\t\t\t\tif (game.getTurn().getStepType() == PhaseStep.DECLARE_ATTACKERS) {\n\t\t\t\t\tgame.fireEvent(new GameEvent(GameEvent.EventType.DECLARE_ATTACKERS_STEP_PRE, null, null, activePlayerId));\n\t\t\t\t\tif (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS, activePlayerId, activePlayerId))) {\n\t\t\t\t\t\tfor (Combat engagement: ((SimulatedPlayer2)game.getPlayer(activePlayerId)).addAttackers(game)) {\n\t\t\t\t\t\t\tGame sim = game.copy();\n\t\t\t\t\t\t\tUUID defenderId = game.getOpponents(playerId).iterator().next();\n\t\t\t\t\t\t\tfor (CombatGroup group: engagement.getGroups()) {\n\t\t\t\t\t\t\t\tfor (UUID attackerId: group.getAttackers()) {\n\t\t\t\t\t\t\t\t\tsim.getPlayer(activePlayerId).declareAttacker(attackerId, defenderId, sim);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_ATTACKERS, playerId, playerId));\n\t\t\t\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, node.getDepth()-1, activePlayerId);\n\t\t\t\t\t\t\tlogger.debug(\"simulating -- node #:\" + SimulationNode2.getCount() + \" declare attakers\");\n\t\t\t\t\t\t\tnewNode.setCombat(sim.getCombat());\n\t\t\t\t\t\t\tnode.children.add(newNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (game.getTurn().getStepType() == PhaseStep.DECLARE_BLOCKERS) {\n\t\t\t\t\tgame.fireEvent(new GameEvent(GameEvent.EventType.DECLARE_BLOCKERS_STEP_PRE, null, null, activePlayerId));\n\t\t\t\t\tif (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_BLOCKERS, activePlayerId, activePlayerId))) {\n\t\t\t\t\t\tfor (UUID defenderId: game.getCombat().getDefenders()) {\n\t\t\t\t\t\t\t//check if defender is being attacked\n\t\t\t\t\t\t\tif (game.getCombat().isAttacked(defenderId, game)) {\n\t\t\t\t\t\t\t\tfor (Combat engagement: ((SimulatedPlayer2)game.getPlayer(defenderId)).addBlockers(game)) {\n\t\t\t\t\t\t\t\t\tGame sim = game.copy();\n\t\t\t\t\t\t\t\t\tfor (CombatGroup group: engagement.getGroups()) {\n\t\t\t\t\t\t\t\t\t\tList<UUID> blockers = new ArrayList<UUID>();\n\t\t\t\t\t\t\t\t\t\tblockers.addAll(group.getBlockers());\n\t\t\t\t\t\t\t\t\t\tfor (UUID blockerId: blockers) {\n\t\t\t\t\t\t\t\t\t\t\tgroup.addBlocker(blockerId, defenderId, sim);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tblockers = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_BLOCKERS, playerId, playerId));\n\t\t\t\t\t\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, node.getDepth()-1, defenderId);\n\t\t\t\t\t\t\t\t\tlogger.debug(\"simulating -- node #:\" + SimulationNode2.getCount() + \" declare blockers\");\n\t\t\t\t\t\t\t\t\tnewNode.setCombat(sim.getCombat());\n\t\t\t\t\t\t\t\t\tnode.children.add(newNode);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgame.getStep().beginStep(game, activePlayerId);\n\t\t\t\t}\n\t\t\t\tif (game.getStep().getHasPriority())\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tskip = true;\n\t\t\t}\n\t\t}\n\t\tgame.checkStateAndTriggered();\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic void priority(Game game) {\n\t\tlogState(game);\n\t\tgame.firePriorityEvent(playerId);\n\t\tswitch (game.getTurn().getStepType()) {\n\t\t\tcase UPKEEP:\n\t\t\tcase DRAW:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t\tcase PRECOMBAT_MAIN:\n\t\t\tcase DECLARE_BLOCKERS:\n\t\t\tcase POSTCOMBAT_MAIN:\n\t\t\t\tif (game.getActivePlayerId().equals(playerId)) {\n\t\t\t\t\tprintOutState(game, playerId);\n\t\t\t\t\tif (actions.size() == 0) {\n\t\t\t\t\t\tcalculateActions(game);\n\t\t\t\t\t}\n\t\t\t\t\tact(game);\n\t\t\t\t} else {\n\t\t\t\t\tpass();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase BEGIN_COMBAT:\n\t\t\tcase COMBAT_DAMAGE:\n\t\t\tcase END_COMBAT:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t\tcase DECLARE_ATTACKERS:\n\t\t\t\tif (!game.getActivePlayerId().equals(playerId)) {\n\t\t\t\t\tprintOutState(game, playerId);\n\t\t\t\t\tprintOutState(game, game.getOpponents(playerId).iterator().next());\n\t\t\t\t\tif (actions.size() == 0) {\n\t\t\t\t\t\tcalculateActions(game);\n\t\t\t\t\t}\n\t\t\t\t\tact(game);\n\t\t\t\t\tprintOutState(game, playerId);\n\t\t\t\t} else {\n\t\t\t\t\tpass();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase END_TURN:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t\tcase CLEANUP:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t}\n\t}","id":100244,"modified_method":"@Override\n\tpublic void priority(Game game) {\n\t\tlogState(game);\n\t\tgame.firePriorityEvent(playerId);\n\t\tswitch (game.getTurn().getStepType()) {\n\t\t\tcase UPKEEP:\n\t\t\tcase DRAW:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t\tcase PRECOMBAT_MAIN:\n\t\t\tcase DECLARE_BLOCKERS:\n\t\t\tcase POSTCOMBAT_MAIN:\n\t\t\t\tif (game.getActivePlayerId().equals(playerId)) {\n\t\t\t\t\tprintOutState(game, playerId);\n\t\t\t\t\tprintOutState(game, game.getOpponents(playerId).iterator().next());\n\t\t\t\t\tif (actions.size() == 0) {\n\t\t\t\t\t\tcalculateActions(game);\n\t\t\t\t\t}\n\t\t\t\t\tact(game);\n\t\t\t\t} else {\n\t\t\t\t\tpass();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase BEGIN_COMBAT:\n\t\t\tcase COMBAT_DAMAGE:\n\t\t\tcase END_COMBAT:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t\tcase DECLARE_ATTACKERS:\n\t\t\t\tif (!game.getActivePlayerId().equals(playerId)) {\n\t\t\t\t\tprintOutState(game, playerId);\n\t\t\t\t\tprintOutState(game, game.getOpponents(playerId).iterator().next());\n\t\t\t\t\tif (actions.size() == 0) {\n\t\t\t\t\t\tcalculateActions(game);\n\t\t\t\t\t}\n\t\t\t\t\tact(game);\n\t\t\t\t\t//printOutState(game, playerId);\n\t\t\t\t} else {\n\t\t\t\t\tpass();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase END_TURN:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t\tcase CLEANUP:\n\t\t\t\tpass();\n\t\t\t\tbreak;\n\t\t}\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected void resolve(SimulationNode2 node, int depth, Game game) {\n\t\tStackObject ability = game.getStack().pop();\n\t\tif (ability instanceof StackAbility) {\n\t\t\tSearchEffect effect = getSearchEffect((StackAbility) ability);\n\t\t\tif (effect != null && ability.getControllerId().equals(playerId)) {\n\t\t\t\tTarget target = effect.getTarget();\n\t\t\t\tif (!target.doneChosing()) {\n\t\t\t\t\tfor (UUID targetId: target.possibleTargets(ability.getSourceId(), ability.getControllerId(), game)) {\n\t\t\t\t\t\tGame sim = game.copy();\n\t\t\t\t\t\tStackAbility newAbility = (StackAbility) ability.copy();\n\t\t\t\t\t\tSearchEffect newEffect = getSearchEffect((StackAbility) newAbility);\n\t\t\t\t\t\tnewEffect.getTarget().addTarget(targetId, newAbility, sim);\n\t\t\t\t\t\tsim.getStack().push(newAbility);\n\t\t\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, depth, ability.getControllerId());\n\t\t\t\t\t\tnode.children.add(newNode);\n\t\t\t\t\t\tnewNode.getTargets().add(targetId);\n\t\t\t\t\t\tlogger.fine(\"simulating search -- node#: \" + SimulationNode2.getCount() + \"for player: \" + sim.getPlayer(ability.getControllerId()).getName());\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//logger.info(\"simulating resolve \");\n\t\tability.resolve(game);\n\t\tgame.applyEffects();\n\t\tgame.getPlayers().resetPassed();\n\t\tgame.getPlayerList().setCurrent(game.getActivePlayerId());\n\t}","id":100245,"modified_method":"protected void resolve(SimulationNode2 node, int depth, Game game) {\n\t\tStackObject ability = game.getStack().pop();\n\t\tif (ability instanceof StackAbility) {\n\t\t\tSearchEffect effect = getSearchEffect((StackAbility) ability);\n\t\t\tif (effect != null && ability.getControllerId().equals(playerId)) {\n\t\t\t\tTarget target = effect.getTarget();\n\t\t\t\tif (!target.doneChosing()) {\n\t\t\t\t\tfor (UUID targetId: target.possibleTargets(ability.getSourceId(), ability.getControllerId(), game)) {\n\t\t\t\t\t\tGame sim = game.copy();\n\t\t\t\t\t\tStackAbility newAbility = (StackAbility) ability.copy();\n\t\t\t\t\t\tSearchEffect newEffect = getSearchEffect((StackAbility) newAbility);\n\t\t\t\t\t\tnewEffect.getTarget().addTarget(targetId, newAbility, sim);\n\t\t\t\t\t\tsim.getStack().push(newAbility);\n\t\t\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, depth, ability.getControllerId());\n\t\t\t\t\t\tnode.children.add(newNode);\n\t\t\t\t\t\tnewNode.getTargets().add(targetId);\n\t\t\t\t\t\tlogger.debug(\"simulating search -- node#: \" + SimulationNode2.getCount() + \"for player: \" + sim.getPlayer(ability.getControllerId()).getName());\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//logger.info(\"simulating resolve \");\n\t\tability.resolve(game);\n\t\tgame.applyEffects();\n\t\tgame.getPlayers().resetPassed();\n\t\tgame.getPlayerList().setCurrent(game.getActivePlayerId());\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected int simulatePriority(SimulationNode2 node, Game game, FilterAbility filter, int depth, int alpha, int beta) {\n\t\tif (Thread.interrupted()) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tlogger.info(\"interrupted\");\n\t\t\treturn GameStateEvaluator2.evaluate(playerId, game);\n\t\t}\n\t\tnode.setGameValue(game.getState().getValue());\n\t\tSimulatedPlayer2 currentPlayer = (SimulatedPlayer2) game.getPlayer(game.getPlayerList().get());\n\t\t//logger.info(\"simulating -- player \" + currentPlayer.getName());\n\t\tSimulationNode2 bestNode = null;\n\t\tList<Ability> allActions = currentPlayer.simulatePriority(game, filter);\n\t\tif (logger.isLoggable(Level.FINE))\n\t\t\tlogger.fine(\"simulating -- adding \" + allActions.size() + \" children:\" + allActions);\n\t\tfor (Ability action: allActions) {\n\t\t\tGame sim = game.copy();\n\t\t\tif (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility) action.copy(), sim)) {\n\t\t\t\tsim.applyEffects();\n\t\t\t\tif (checkForRepeatedAction(sim, node, action, currentPlayer.getId()))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (!sim.isGameOver() && action.isUsesStack()) {\n\t\t\t\t\t// only pass if the last action uses the stack\n\t\t\t\t\tsim.getPlayer(currentPlayer.getId()).pass();\n\t\t\t\t\tsim.getPlayerList().getNext();\n\t\t\t\t}\n\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, action, depth, currentPlayer.getId());\n\t\t\t\tif (logger.isLoggable(Level.FINE))\n\t\t\t\t\tlogger.fine(\"simulating -- node #:\" + SimulationNode2.getCount() + \" actions:\" + action);\n\t\t\t\tsim.checkStateAndTriggered();\n\t\t\t\tint val = addActions(newNode, filter, depth-1, alpha, beta);\n\t\t\t\tif (!currentPlayer.getId().equals(playerId)) {\n\t\t\t\t\tif (val < beta) {\n\t\t\t\t\t\tbeta = val;\n\t\t\t\t\t\tbestNode = newNode;\n\t\t\t\t\t\tbestNode.setScore(val);\n\t\t\t\t\t\tnode.setCombat(newNode.getCombat());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (val > alpha) {\n\t\t\t\t\t\talpha = val;\n\t\t\t\t\t\tbestNode = newNode;\n\t\t\t\t\t\tbestNode.setScore(val);\n\t\t\t\t\t\tnode.setCombat(newNode.getCombat());\n\t\t\t\t\t\tif (node.getTargets().size() > 0)\n\t\t\t\t\t\t\ttargets = node.getTargets();\n\t\t\t\t\t\tif (node.getChoices().size() > 0)\n\t\t\t\t\t\t\tchoices = node.getChoices();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (alpha >= beta) {\n\t\t\t\t\t//logger.info(\"simulating -- pruning\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (SimulationNode2.nodeCount > maxNodes) {\n\t\t\t\t\tlogger.fine(\"simulating -- reached end-state\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (bestNode != null) {\n\t\t\tnode.children.clear();\n\t\t\tnode.children.add(bestNode);\n\t\t\tnode.setScore(bestNode.getScore());\n\t\t}\n\t\tif (!currentPlayer.getId().equals(playerId)) {\n\t\t\t//logger.info(\"returning priority beta: \" + beta);\n\t\t\treturn beta;\n\t\t}\n\t\telse {\n\t\t\t//logger.info(\"returning priority alpha: \" + alpha);\n\t\t\treturn alpha;\n\t\t}\n\t}","id":100246,"modified_method":"protected int simulatePriority(SimulationNode2 node, Game game, FilterAbility filter, int depth, int alpha, int beta) {\n\t\tif (Thread.interrupted()) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tlogger.info(\"interrupted\");\n\t\t\treturn GameStateEvaluator2.evaluate(playerId, game);\n\t\t}\n\t\tnode.setGameValue(game.getState().getValue());\n\t\tSimulatedPlayer2 currentPlayer = (SimulatedPlayer2) game.getPlayer(game.getPlayerList().get());\n\t\t//logger.info(\"simulating -- player \" + currentPlayer.getName());\n\t\tSimulationNode2 bestNode = null;\n\t\tList<Ability> allActions = currentPlayer.simulatePriority(game, filter);\n\t\tlogger.debug(\"simulating -- adding \" + allActions.size() + \" children:\" + allActions);\n\t\tfor (Ability action: allActions) {\n\t\t\tGame sim = game.copy();\n\t\t\tif (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility) action.copy(), sim)) {\n\t\t\t\tsim.applyEffects();\n\t\t\t\tif (checkForRepeatedAction(sim, node, action, currentPlayer.getId()))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (!sim.isGameOver() && action.isUsesStack()) {\n\t\t\t\t\t// only pass if the last action uses the stack\n\t\t\t\t\tsim.getPlayer(currentPlayer.getId()).pass();\n\t\t\t\t\tsim.getPlayerList().getNext();\n\t\t\t\t}\n\t\t\t\tSimulationNode2 newNode = new SimulationNode2(node, sim, action, depth, currentPlayer.getId());\n\t\t\t\tlogger.debug(\"simulating -- node #:\" + SimulationNode2.getCount() + \" actions:\" + action);\n\t\t\t\tsim.checkStateAndTriggered();\n\t\t\t\tif (depth == 20) {\n\t\t\t\t\tlogger.info(\"*** Action *** \" + action.toString());\n\t\t\t\t}\n\t\t\t\tint val = addActions(newNode, filter, depth-1, alpha, beta);\n\t\t\t\tif (depth == 20) {\n\t\t\t\t\tlogger.info(\"*** Value *** \" + val);\n\t\t\t\t}\n\t\t\t\tif (!currentPlayer.getId().equals(playerId)) {\n\t\t\t\t\tif (val < beta) {\n\t\t\t\t\t\tbeta = val;\n\t\t\t\t\t\tbestNode = newNode;\n\t\t\t\t\t\tbestNode.setScore(val);\n\t\t\t\t\t\tnode.setCombat(newNode.getCombat());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (val > alpha) {\n\t\t\t\t\t\talpha = val;\n\t\t\t\t\t\tbestNode = newNode;\n\t\t\t\t\t\tbestNode.setScore(val);\n\t\t\t\t\t\tnode.setCombat(newNode.getCombat());\n\t\t\t\t\t\tif (node.getTargets().size() > 0)\n\t\t\t\t\t\t\ttargets = node.getTargets();\n\t\t\t\t\t\tif (node.getChoices().size() > 0)\n\t\t\t\t\t\t\tchoices = node.getChoices();\n\t\t\t\t\t\tif (depth == 20) {\n\t\t\t\t\t\t\tlogger.info(\"saved\");\n\t\t\t\t\t\t\tnode.children.clear();\n\t\t\t\t\t\t\tnode.children.add(bestNode);\n\t\t\t\t\t\t\tnode.setScore(bestNode.getScore());\n                        }\n\t\t\t\t\t}\n\n\t\t\t\t\t// no need to check other actions\n\t\t\t\t\tif (val == GameStateEvaluator2.WIN_GAME_SCORE) {\n\t\t\t\t\t\tlogger.info(\"win - break\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (alpha >= beta) {\n\t\t\t\t\t//logger.info(\"simulating -- pruning\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (SimulationNode2.nodeCount > maxNodes) {\n\t\t\t\t\tlogger.debug(\"simulating -- reached end-state\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (bestNode != null) {\n\t\t\tnode.children.clear();\n\t\t\tnode.children.add(bestNode);\n\t\t\tnode.setScore(bestNode.getScore());\n\t\t}\n\t\tif (!currentPlayer.getId().equals(playerId)) {\n\t\t\t//logger.info(\"returning priority beta: \" + beta);\n\t\t\treturn beta;\n\t\t}\n\t\telse {\n\t\t\t//logger.info(\"returning priority alpha: \" + alpha);\n\t\t\treturn alpha;\n\t\t}\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected Integer addActionsTimed(final FilterAbility filter) {\n\t\tFutureTask<Integer> task = new FutureTask<Integer>(new Callable<Integer>() {\n\t\t\tpublic Integer call() throws Exception\n\t\t\t{\n\t\t\t\treturn addActions(root, filter, maxDepth, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\t\t\t}\n\t\t});\n\t\tpool.execute(task);\n\t\ttry {\n\t\t\treturn task.get(Config2.maxThinkSeconds, TimeUnit.MINUTES);\n\t\t} catch (TimeoutException e) {\n\t\t\tlogger.info(\"simulating - timed out\");\n\t\t\ttask.cancel(true);\n\t\t} catch (ExecutionException e) {\n\t\t\te.printStackTrace();\n\t\t\ttask.cancel(true);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t\ttask.cancel(true);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\ttask.cancel(true);\n\t\t}\n\t\t//TODO: timeout handling\n\t\treturn 0;\n\t}","id":100247,"modified_method":"protected Integer addActionsTimed(final FilterAbility filter) {\n\t\tFutureTask<Integer> task = new FutureTask<Integer>(new Callable<Integer>() {\n\t\t\tpublic Integer call() throws Exception\n\t\t\t{\n\t\t\t\treturn addActions(root, filter, maxDepth, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\t\t\t}\n\t\t});\n\t\tpool.execute(task);\n\t\ttry {\n\t\t\treturn task.get(Config2.maxThinkSeconds, TimeUnit.SECONDS);\n\t\t} catch (TimeoutException e) {\n\t\t\tlogger.info(\"simulating - timed out\");\n\t\t\ttask.cancel(true);\n\t\t} catch (ExecutionException e) {\n\t\t\te.printStackTrace();\n\t\t\ttask.cancel(true);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t\ttask.cancel(true);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\ttask.cancel(true);\n\t\t}\n\t\t//TODO: timeout handling\n\t\treturn 0;\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic void selectBlockers(Game game) {\n\t\tlogger.info(\"selectBlockers\");\n\t\tif (combat != null && combat.getGroups().size() > 0) {\n\t\t\tList<CombatGroup> groups = game.getCombat().getGroups();\n\t\t\tfor (int i = 0; i < groups.size(); i++) {\n\t\t\t\tif (i < combat.getGroups().size()) {\n\t\t\t\t\tfor (UUID blockerId: combat.getGroups().get(i).getBlockers()) {\n\t\t\t\t\t\tthis.declareBlocker(blockerId, groups.get(i).getAttackers().get(0), game);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":100248,"modified_method":"@Override\n\tpublic void selectBlockers(Game game) {\n\t\tlogger.debug(\"selectBlockers\");\n\t\tif (combat != null && combat.getGroups().size() > 0) {\n\t\t\tList<CombatGroup> groups = game.getCombat().getGroups();\n\t\t\tfor (int i = 0; i < groups.size(); i++) {\n\t\t\t\tif (i < combat.getGroups().size()) {\n\t\t\t\t\tfor (UUID blockerId: combat.getGroups().get(i).getBlockers()) {\n\t\t\t\t\t\tthis.declareBlocker(blockerId, groups.get(i).getAttackers().get(0), game);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"@Test\r\n\tpublic void playOneGame() throws GameException, FileNotFoundException, IllegalArgumentException {\r\n\t\tGame game = new TwoPlayerDuel(Constants.MultiplayerAttackOption.LEFT, Constants.RangeOfInfluence.ALL);\r\n\r\n\t\tPlayer computerA = createPlayer(\"ComputerA\", \"Computer - mad\");\r\n\t\tDeck deck = Deck.load(Sets.loadDeck(\"RB Aggro.dck\"));\r\n\r\n\t\tif (deck.getCards().size() < 40) {\r\n\t\t\tthrow new IllegalArgumentException(\"Couldn't load deck, deck side=\" + deck.getCards().size());\r\n\t\t}\r\n\t\tgame.addPlayer(computerA, deck);\r\n\t\tgame.loadCards(deck.getCards(), computerA.getId());\r\n\r\n\t\tPlayer computerB = createPlayer(\"ComputerB\", \"Computer - mad\");\r\n\t\tDeck deck2 = Deck.load(Sets.loadDeck(\"RB Aggro.dck\"));\r\n\t\tif (deck2.getCards().size() < 40) {\r\n\t\t\tthrow new IllegalArgumentException(\"Couldn't load deck, deck side=\" + deck2.getCards().size());\r\n\t\t}\r\n\t\tgame.addPlayer(computerB, deck2);\r\n\t\tgame.loadCards(deck2.getCards(), computerB.getId());\r\n\r\n\t\tparseScenario(\"scenario5.txt\");\r\n\t\tgame.cheat(computerA.getId(), commandsA);\r\n\t\tgame.cheat(computerA.getId(), libraryCardsA, handCardsA, battlefieldCardsA, graveyardCardsA);\r\n\t\tgame.cheat(computerB.getId(), commandsB);\r\n\t\tgame.cheat(computerB.getId(), libraryCardsB, handCardsB, battlefieldCardsB, graveyardCardsB);\r\n\r\n\t\tlong t1 = System.nanoTime();\r\n\t\tgame.start(computerA.getId(), true);\r\n\t\tlong t2 = System.nanoTime();\r\n\r\n\t\tlogger.info(\"Winner: \" + game.getWinner());\r\n\t\tlogger.info(\"Time: \" + (t2 - t1) / 1000000 + \" ms\");\r\n\t}","id":100249,"modified_method":"@Test\r\n\tpublic void playOneGame() throws GameException, FileNotFoundException, IllegalArgumentException {\r\n\t\tGame game = new TwoPlayerDuel(Constants.MultiplayerAttackOption.LEFT, Constants.RangeOfInfluence.ALL);\r\n\r\n\t\tPlayer computerA = createPlayer(\"ComputerA\", \"Computer - mad\");\r\n\t\tDeck deck = Deck.load(Sets.loadDeck(\"RB Aggro.dck\"));\r\n\r\n\t\tif (deck.getCards().size() < 40) {\r\n\t\t\tthrow new IllegalArgumentException(\"Couldn't load deck, deck size=\" + deck.getCards().size());\r\n\t\t}\r\n\t\tgame.addPlayer(computerA, deck);\r\n\t\tgame.loadCards(deck.getCards(), computerA.getId());\r\n\r\n\t\tPlayer computerB = createPlayer(\"ComputerB\", \"Computer - minimax hybrid\");\r\n\t\tDeck deck2 = Deck.load(Sets.loadDeck(\"RB Aggro.dck\"));\r\n\t\tif (deck2.getCards().size() < 40) {\r\n\t\t\tthrow new IllegalArgumentException(\"Couldn't load deck, deck size=\" + deck2.getCards().size());\r\n\t\t}\r\n\t\tgame.addPlayer(computerB, deck2);\r\n\t\tgame.loadCards(deck2.getCards(), computerB.getId());\r\n\r\n\t\t/*parseScenario(\"scenario7.txt\");\r\n\t\tgame.cheat(computerA.getId(), commandsA);\r\n\t\tgame.cheat(computerA.getId(), libraryCardsA, handCardsA, battlefieldCardsA, graveyardCardsA);\r\n\t\tgame.cheat(computerB.getId(), commandsB);\r\n\t\tgame.cheat(computerB.getId(), libraryCardsB, handCardsB, battlefieldCardsB, graveyardCardsB);\r\n\t\t*/\r\n\r\n\t\tlong t1 = System.nanoTime();\r\n\t\tgame.start(computerA.getId(), false);\r\n\t\tlong t2 = System.nanoTime();\r\n\r\n\t\tlogger.info(\"Winner: \" + game.getWinner());\r\n\t\tlogger.info(\"Time: \" + (t2 - t1) / 1000000 + \" ms\");\r\n\t\t/*if (!game.getWinner().equals(\"Player ComputerA is the winner\")) {\r\n\t\t\tthrow new RuntimeException(\"Lost :(\");\r\n\t\t}*/\r\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"public List<Combat> addAttackers(Game game) {\n\t\tMap<Integer, Combat> engagements = new HashMap<Integer, Combat>();\n\t\t//useful only for two player games - will only attack first opponent\n\t\tUUID defenderId = game.getOpponents(playerId).iterator().next();\n\t\tList<Permanent> attackersList = super.getAvailableAttackers(game);\n\t\t//use binary digits to calculate powerset of attackers\n\t\tint powerElements = (int) Math.pow(2, attackersList.size());\n\t\tStringBuilder binary = new StringBuilder();\n\t\tfor (int i = powerElements - 1; i >= 0; i--) {\n\t\t\tGame sim = game.copy();\n\t\t\tbinary.setLength(0);\n\t\t\tbinary.append(Integer.toBinaryString(i));\n\t\t\twhile (binary.length() < attackersList.size()) {\n\t\t\t\tbinary.insert(0, \"0\");\n\t\t\t}\n\t\t\tfor (int j = 0; j < attackersList.size(); j++) {\n\t\t\t\tif (binary.charAt(j) == '1')\n\t\t\t\t\tsim.getCombat().declareAttacker(attackersList.get(j).getId(), defenderId, sim);\n\t\t\t}\n\t\t\tif (engagements.put(sim.getCombat().getValue(sim), sim.getCombat()) != null) {\n\t\t\t\tlogger.fine(\"simulating -- found redundant attack combination\");\n\t\t\t}\n\t\t\telse if (logger.isLoggable(Level.FINE)) {\n\t\t\t\tlogger.fine(\"simulating -- attack:\" + sim.getCombat().getGroups().size());\n\t\t\t}\n\t\t}\n\t\treturn new ArrayList<Combat>(engagements.values());\n\t}","id":100250,"modified_method":"public List<Combat> addAttackers(Game game) {\n\t\tMap<Integer, Combat> engagements = new HashMap<Integer, Combat>();\n\t\t//useful only for two player games - will only attack first opponent\n\t\tUUID defenderId = game.getOpponents(playerId).iterator().next();\n\t\tList<Permanent> attackersList = super.getAvailableAttackers(game);\n\t\t//use binary digits to calculate powerset of attackers\n\t\tint powerElements = (int) Math.pow(2, attackersList.size());\n\t\tStringBuilder binary = new StringBuilder();\n\t\tfor (int i = powerElements - 1; i >= 0; i--) {\n\t\t\tGame sim = game.copy();\n\t\t\tbinary.setLength(0);\n\t\t\tbinary.append(Integer.toBinaryString(i));\n\t\t\twhile (binary.length() < attackersList.size()) {\n\t\t\t\tbinary.insert(0, \"0\");\n\t\t\t}\n\t\t\tfor (int j = 0; j < attackersList.size(); j++) {\n\t\t\t\tif (binary.charAt(j) == '1')\n\t\t\t\t\tsim.getCombat().declareAttacker(attackersList.get(j).getId(), defenderId, sim);\n\t\t\t}\n\t\t\tif (engagements.put(sim.getCombat().getValue(sim), sim.getCombat()) != null) {\n\t\t\t\tlogger.debug(\"simulating -- found redundant attack combination\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.debug(\"simulating -- attack:\" + sim.getCombat().getGroups().size());\n\t\t\t}\n\t\t}\n\t\treturn new ArrayList<Combat>(engagements.values());\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected void simulateOptions(Game game, Ability previousActions) {\n\t\tallActions.add(previousActions);\n\t\tManaOptions available = getManaAvailable(game);\n\t\tavailable.addMana(manaPool.getMana());\n\t\tList<Ability> playables = game.getPlayer(playerId).getPlayable(game, filter, available, isSimulatedPlayer);\n\t\tfor (Ability ability: playables) {\n\t\t\tList<Ability> options = game.getPlayer(playerId).getPlayableOptions(ability, game);\n\t\t\tif (options.size() == 0) {\n\t\t\t\tallActions.add(ability);\n//\t\t\t\tsimulateAction(game, previousActions, ability);\n\t\t\t}\n\t\t\telse {\n//\t\t\t\tExecutorService simulationExecutor = Executors.newFixedThreadPool(4);\n\t\t\t\tfor (Ability option: options) {\n\t\t\t\t\tallActions.add(option);\n//\t\t\t\t\tSimulationWorker worker = new SimulationWorker(game, this, previousActions, option);\n//\t\t\t\t\tsimulationExecutor.submit(worker);\n\t\t\t\t}\n//\t\t\t\tsimulationExecutor.shutdown();\n//\t\t\t\twhile(!simulationExecutor.isTerminated()) {}\n\t\t\t}\n\t\t}\n\t}","id":100251,"modified_method":"protected void simulateOptions(Game game, Ability previousActions) {\n\t\tallActions.add(previousActions);\n\t\tManaOptions available = getManaAvailable(game);\n\t\tavailable.addMana(manaPool.getMana());\n\t\tList<Ability> playables = game.getPlayer(playerId).getPlayable(game, filter, available, isSimulatedPlayer);\n\t\tfor (Ability ability: playables) {\n\t\t\tList<Ability> options = game.getPlayer(playerId).getPlayableOptions(ability, game);\n\t\t\tif (options.size() == 0) {\n\t\t\t\tif (ability.getManaCosts().getVariableCosts().size() > 0) {\n\t\t\t\t\tsimulateVariableCosts(ability, game);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tallActions.add(ability);\n\t\t\t\t}\n//\t\t\t\tsimulateAction(game, previousActions, ability);\n\t\t\t}\n\t\t\telse {\n//\t\t\t\tExecutorService simulationExecutor = Executors.newFixedThreadPool(4);\n\t\t\t\tfor (Ability option: options) {\n\t\t\t\t\tif (ability.getManaCosts().getVariableCosts().size() > 0) {\n\t\t\t\t\t\tsimulateVariableCosts(option, game);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tallActions.add(option);\n\t\t\t\t\t}\n//\t\t\t\t\tSimulationWorker worker = new SimulationWorker(game, this, previousActions, option);\n//\t\t\t\t\tsimulationExecutor.submit(worker);\n\t\t\t\t}\n//\t\t\t\tsimulationExecutor.shutdown();\n//\t\t\t\twhile(!simulationExecutor.isTerminated()) {}\n\t\t\t}\n\t\t}\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected void addAbilityNode(SimulationNode2 parent, Ability ability, int depth, Game game) {\n\t\tGame sim = game.copy();\n\t\tsim.getStack().push(new StackAbility(ability, playerId));\n\t\tability.activate(sim, false);\n\t\tsim.applyEffects();\n\t\tSimulationNode2 newNode = new SimulationNode2(parent, sim, depth, playerId);\n\t\tlogger.fine(\"simulating -- node #:\" + SimulationNode2.getCount() + \" triggered ability option\");\n\t\tfor (Target target: ability.getTargets()) {\n\t\t\tfor (UUID targetId: target.getTargets()) {\n\t\t\t\tnewNode.getTargets().add(targetId);\n\t\t\t}\n\t\t}\n\t\tfor (Choice choice: ability.getChoices()) {\n\t\t\tnewNode.getChoices().add(choice.getChoice());\n\t\t}\n\t\tparent.children.add(newNode);\n\t}","id":100252,"modified_method":"protected void addAbilityNode(SimulationNode2 parent, Ability ability, int depth, Game game) {\n\t\tGame sim = game.copy();\n\t\tsim.getStack().push(new StackAbility(ability, playerId));\n\t\tability.activate(sim, false);\n\t\tsim.applyEffects();\n\t\tSimulationNode2 newNode = new SimulationNode2(parent, sim, depth, playerId);\n\t\tlogger.debug(\"simulating -- node #:\" + SimulationNode2.getCount() + \" triggered ability option\");\n\t\tfor (Target target: ability.getTargets()) {\n\t\t\tfor (UUID targetId: target.getTargets()) {\n\t\t\t\tnewNode.getTargets().add(targetId);\n\t\t\t}\n\t\t}\n\t\tfor (Choice choice: ability.getChoices()) {\n\t\t\tnewNode.getChoices().add(choice.getChoice());\n\t\t}\n\t\tparent.children.add(newNode);\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean triggerAbility(TriggeredAbility source, Game game) {\n\t\tAbility ability = source.copy();\n\t\tList<Ability> options = getPlayableOptions(ability, game);\n\t\tif (options.size() == 0) {\n\t\t\tif (logger.isLoggable(Level.FINE))\n\t\t\t\tlogger.fine(\"simulating -- triggered ability:\" + ability);\n\t\t\tgame.getStack().push(new StackAbility(ability, playerId));\n\t\t\tability.activate(game, false);\n\t\t\tgame.applyEffects();\n\t\t\tgame.getPlayers().resetPassed();\n\t\t}\n\t\telse {\n\t\t\tSimulationNode2 parent = (SimulationNode2) game.getCustomData();\n\t\t\tint depth = parent.getDepth() - 1;\n\t\t\tif (depth == 0) return true;\n\t\t\tlogger.fine(\"simulating -- triggered ability - adding children:\" + options.size());\n\t\t\tfor (Ability option: options) {\n\t\t\t\taddAbilityNode(parent, option, depth, game);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}","id":100253,"modified_method":"@Override\n\tpublic boolean triggerAbility(TriggeredAbility source, Game game) {\n\t\tAbility ability = source.copy();\n\t\tList<Ability> options = getPlayableOptions(ability, game);\n\t\tif (options.size() == 0) {\n\t\t\tlogger.debug(\"simulating -- triggered ability:\" + ability);\n\t\t\tgame.getStack().push(new StackAbility(ability, playerId));\n\t\t\tability.activate(game, false);\n\t\t\tgame.applyEffects();\n\t\t\tgame.getPlayers().resetPassed();\n\t\t}\n\t\telse {\n\t\t\tSimulationNode2 parent = (SimulationNode2) game.getCustomData();\n\t\t\tint depth = parent.getDepth() - 1;\n\t\t\tif (depth == 0) return true;\n\t\t\tlogger.debug(\"simulating -- triggered ability - adding children:\" + options.size());\n\t\t\tfor (Ability option: options) {\n\t\t\t\taddAbilityNode(parent, option, depth, game);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"protected void addBlocker(Game game, List<Permanent> blockers, Map<Integer, Combat> engagements) {\n\t\tif (blockers.size() == 0)\n\t\t\treturn;\n\t\tint numGroups = game.getCombat().getGroups().size();\n\t\t//try to block each attacker with each potential blocker\n\t\tPermanent blocker = blockers.get(0);\n\t\tif (logger.isLoggable(Level.FINE))\n\t\t\tlogger.fine(\"simulating -- block:\" + blocker);\n\t\tList<Permanent> remaining = remove(blockers, blocker);\n\t\tfor (int i = 0; i < numGroups; i++) {\n\t\t\tif (game.getCombat().getGroups().get(i).canBlock(blocker, game)) {\n\t\t\t\tGame sim = game.copy();\n\t\t\t\tsim.getCombat().getGroups().get(i).addBlocker(blocker.getId(), playerId, sim);\n\t\t\t\tif (engagements.put(sim.getCombat().getValue(sim), sim.getCombat()) != null)\n\t\t\t\t\tlogger.fine(\"simulating -- found redundant block combination\");\n\t\t\t\taddBlocker(sim, remaining, engagements);  // and recurse minus the used blocker\n\t\t\t}\n\t\t}\n\t\taddBlocker(game, remaining, engagements);\n\t}","id":100254,"modified_method":"protected void addBlocker(Game game, List<Permanent> blockers, Map<Integer, Combat> engagements) {\n\t\tif (blockers.size() == 0)\n\t\t\treturn;\n\t\tint numGroups = game.getCombat().getGroups().size();\n\t\t//try to block each attacker with each potential blocker\n\t\tPermanent blocker = blockers.get(0);\n\t\tlogger.debug(\"simulating -- block:\" + blocker);\n\t\tList<Permanent> remaining = remove(blockers, blocker);\n\t\tfor (int i = 0; i < numGroups; i++) {\n\t\t\tif (game.getCombat().getGroups().get(i).canBlock(blocker, game)) {\n\t\t\t\tGame sim = game.copy();\n\t\t\t\tsim.getCombat().getGroups().get(i).addBlocker(blocker.getId(), playerId, sim);\n\t\t\t\tif (engagements.put(sim.getCombat().getValue(sim), sim.getCombat()) != null)\n\t\t\t\t\tlogger.debug(\"simulating -- found redundant block combination\");\n\t\t\t\taddBlocker(sim, remaining, engagements);  // and recurse minus the used blocker\n\t\t\t}\n\t\t}\n\t\taddBlocker(game, remaining, engagements);\n\t}","commit_id":"e9c2decd3c720d714956f656df0bb15c2faee2d4","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        // Only send an event if the bot is connected and the Event has a source being a XWikiDocument.\n        if (this.bot.isConnected() && source instanceof XWikiDocument) {\n            XWikiDocument document = (XWikiDocument) source;\n            DocumentReference reference = document.getDocumentReference();\n            String referenceAsString = this.serializer.serialize(reference);\n\n            try {\n                // Send notification to the IRC channel if we're allowed.\n                if (shouldSendNotification(referenceAsString)) {\n                    String message = String.format(\"%s was modified by %s %s - %s\",\n                        referenceAsString,\n                        getNotificationAuthor(event, document),\n                        getNotificationComment(event, document),\n                        getNotificationURL(event, document));\n                    this.bot.sendMessage(this.bot.getChannelsNames().iterator().next(), message);\n                }\n            } catch (IRCBotException e) {\n                // Failed to handle the event, log an error\n                this.logger.error(\"Failed to send IRC notification for document [{}]\", reference, e);\n            }\n        }\n    }","id":100255,"modified_method":"@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        // Only send an event if the bot is connected and the Event has a source being a XWikiDocument.\n        if (this.bot.isConnected() && source instanceof XWikiDocument) {\n            XWikiDocument document = (XWikiDocument) source;\n            DocumentReference reference = document.getDocumentReference();\n            String referenceAsString = this.serializer.serialize(reference);\n\n            try {\n                // Send notification to the IRC channel if we're allowed.\n                if (shouldSendNotification(referenceAsString)) {\n                    String message = String.format(\"%s was modified by %s %s - %s\",\n                        referenceAsString,\n                        getNotificationAuthor(event, document),\n                        getNotificationComment(event, document),\n                        getNotificationURL(event, document));\n\n                    // Get the channel to which to send to. If there's no channel name it means the Bot hasn't joined\n                    // any channel yet so don't do anything!\n                    Iterator<String> channelNameItator = this.bot.getChannelsNames().iterator();\n                    if (channelNameItator.hasNext()) {\n                        this.bot.sendMessage(channelNameItator.next(), message);\n                    }\n                }\n            } catch (IRCBotException e) {\n                // Failed to handle the event, log an error\n                this.logger.error(\"Failed to send IRC notification for document [{}]\", reference, e);\n            }\n        }\n    }","commit_id":"00db11775780414175a02dd534f4725121e6ef77","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        if (this.bot.isConnected() && this.configuration.isActive()) {\n            Map<String, Object> brokenLinkData = (Map<String, Object>) source;\n\n            // Make sure we don't save duplicates (this is because every time a page with a broken link is rendered\n            // an event is sent so we can receive several events for the same broken link\n            String linkURL = (String) brokenLinkData.get(URL);\n            removeDuplicateLinkData(linkURL);\n\n            // Save the broken link data for later retrieval by the Broken Links Bot Listener.\n            this.lastBrokenLinks.add(brokenLinkData);\n\n            String linkSource = (String) brokenLinkData.get(\"source\");\n            LinkState linkState = (LinkState) brokenLinkData.get(\"state\");\n            int responseCode = linkState.getResponseCode();\n\n            // Get Link extra data and serialize them\n            String dataString = getSerializedLinkData((Map<String, Object>) brokenLinkData.get(\"contextData\"));\n\n            String message;\n            if (dataString.length() > 0) {\n                message = String.format(\"Invalid link %s on page %s (code = %s, %s)\", linkURL, linkSource,\n                    responseCode, dataString);\n            } else {\n                message = String.format(\"Invalid link %s on page %s (code = %s)\", linkURL, linkSource, responseCode);\n            }\n\n            this.bot.sendMessage(this.bot.getChannelsNames().iterator().next(), message);\n        }\n    }","id":100256,"modified_method":"@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        if (this.bot.isConnected() && this.configuration.isActive()) {\n            Map<String, Object> brokenLinkData = (Map<String, Object>) source;\n\n            // Make sure we don't save duplicates (this is because every time a page with a broken link is rendered\n            // an event is sent so we can receive several events for the same broken link\n            String linkURL = (String) brokenLinkData.get(URL);\n            removeDuplicateLinkData(linkURL);\n\n            // Save the broken link data for later retrieval by the Broken Links Bot Listener.\n            this.lastBrokenLinks.add(brokenLinkData);\n\n            String linkSource = (String) brokenLinkData.get(\"source\");\n            LinkState linkState = (LinkState) brokenLinkData.get(\"state\");\n            int responseCode = linkState.getResponseCode();\n\n            // Get Link extra data and serialize them\n            String dataString = getSerializedLinkData((Map<String, Object>) brokenLinkData.get(\"contextData\"));\n\n            String message;\n            if (dataString.length() > 0) {\n                message = String.format(\"Invalid link %s on page %s (code = %s, %s)\", linkURL, linkSource,\n                    responseCode, dataString);\n            } else {\n                message = String.format(\"Invalid link %s on page %s (code = %s)\", linkURL, linkSource, responseCode);\n            }\n\n            // Get the channel to which to send to. If there's no channel name it means the Bot hasn't joined\n            // any channel yet so don't do anything!\n            Iterator<String> channelNameItator = this.bot.getChannelsNames().iterator();\n            if (channelNameItator.hasNext()) {\n                this.bot.sendMessage(channelNameItator.next(), message);\n            }\n        }\n    }","commit_id":"ed82e01e04caac656136771483ce555d2852bc57","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void processFile(String filename, File srcFile, boolean isAbsolute) throws IOException {\n        String src = DefaultGroovyMethods.getText(srcFile);\n        String packagePath = isAbsolute ? \"DefaultPackage\" : tool.getPath(filename).replace('\\\\', FS);\n        String file = tool.getFile(filename);\n        SimpleGroovyPackageDoc packageDoc = null;\n        if (!isAbsolute) {\n            packageDoc = (SimpleGroovyPackageDoc) rootDoc.packageNamed(packagePath);\n        }\n        // todo: this might not work correctly for absolute paths\n        if (filename.endsWith(\"package.html\") || filename.endsWith(\"package-info.java\") || filename.endsWith(\"package-info.groovy\")) {\n            if (packageDoc == null) {\n                packageDoc = new SimpleGroovyPackageDoc(packagePath);\n            }\n            processPackageInfo(src, filename, packageDoc);\n            rootDoc.put(packagePath, packageDoc);\n            return;\n        }\n        try {\n            Map<String, GroovyClassDoc> classDocs = getClassDocsFromSingleSource(packagePath, file, src);\n            rootDoc.putAllClasses(classDocs);\n            if (isAbsolute) {\n                final Map.Entry<String, GroovyClassDoc> docEntry = classDocs.entrySet().iterator().next();\n                String fullPath = docEntry.getValue().getFullPathName();\n                int slash = fullPath.lastIndexOf(FS);\n                if (slash > 0) packagePath = fullPath.substring(0, slash);\n                packageDoc = (SimpleGroovyPackageDoc) rootDoc.packageNamed(packagePath);\n            }\n            if (packageDoc == null) {\n                packageDoc = new SimpleGroovyPackageDoc(packagePath);\n            }\n            packageDoc.putAll(classDocs);\n            rootDoc.put(packagePath, packageDoc);\n        } catch (RecognitionException e) {\n            System.err.println(\"ignored due to RecognitionException: \" + filename + \" [\" + e.getMessage() + \"]\");\n        } catch (TokenStreamException e) {\n            System.err.println(\"ignored due to TokenStreamException: \" + filename + \" [\" + e.getMessage() + \"]\");\n        }\n    }","id":100257,"modified_method":"private void processFile(String filename, File srcFile, boolean isAbsolute) throws IOException {\n        String src = DefaultGroovyMethods.getText(srcFile);\n        String packagePath = isAbsolute ? \"DefaultPackage\" : tool.getPath(filename).replace('\\\\', FS);\n        String file = tool.getFile(filename);\n        SimpleGroovyPackageDoc packageDoc = null;\n        if (!isAbsolute) {\n            packageDoc = (SimpleGroovyPackageDoc) rootDoc.packageNamed(packagePath);\n        }\n        // todo: this might not work correctly for absolute paths\n        if (filename.endsWith(\"package.html\") || filename.endsWith(\"package-info.java\") || filename.endsWith(\"package-info.groovy\")) {\n            if (packageDoc == null) {\n                packageDoc = new SimpleGroovyPackageDoc(packagePath);\n            }\n            processPackageInfo(src, filename, packageDoc);\n            rootDoc.put(packagePath, packageDoc);\n            return;\n        }\n        try {\n            Map<String, GroovyClassDoc> classDocs = getClassDocsFromSingleSource(packagePath, file, src);\n            rootDoc.putAllClasses(classDocs);\n            if (isAbsolute) {\n                Iterator<Map.Entry<String, GroovyClassDoc>> iterator = classDocs.entrySet().iterator();\n                if (iterator.hasNext()) {\n                    final Map.Entry<String, GroovyClassDoc> docEntry = iterator.next();\n                    String fullPath = docEntry.getValue().getFullPathName();\n                    int slash = fullPath.lastIndexOf(FS);\n                    if (slash > 0) packagePath = fullPath.substring(0, slash);\n                    packageDoc = (SimpleGroovyPackageDoc) rootDoc.packageNamed(packagePath);\n                }\n            }\n            if (packageDoc == null) {\n                packageDoc = new SimpleGroovyPackageDoc(packagePath);\n            }\n            packageDoc.putAll(classDocs);\n            rootDoc.put(packagePath, packageDoc);\n        } catch (RecognitionException e) {\n            System.err.println(\"ignored due to RecognitionException: \" + filename + \" [\" + e.getMessage() + \"]\");\n        } catch (TokenStreamException e) {\n            System.err.println(\"ignored due to TokenStreamException: \" + filename + \" [\" + e.getMessage() + \"]\");\n        }\n    }","commit_id":"d4f5f4b8bb2a5f3bf77daa55fa1e52065d538f4e","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n  public void save(SModel model, StreamDataSource dataSource) throws ModelSaveException {\n    // TODO implement\n  }","id":100258,"modified_method":"@Override\n  public void save(SModel model, StreamDataSource dataSource) throws ModelSaveException {\n    BinaryPersistence.writeModel(((SModelBase) model).getSModelInternal(), dataSource);\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected boolean saveModel() {\n    SModel smodel = getSModelInternal();\n    if (smodel instanceof InvalidSModel) {\n      // we do not save stub model to not overwrite the real model\n      return false;\n    }\n    try {\n      myPersistence.writeModel(smodel, getSource());\n    } catch (IOException e) {\n      // TODO report ...\n    } catch (ModelSaveException e) {\n      // TODO report, save in default persistence, etc.\n    }\n    return false;\n  }","id":100259,"modified_method":"@Override\n  protected boolean saveModel() {\n    SModel smodel = getSModelInternal();\n    if (smodel instanceof InvalidSModel) {\n      // we do not save stub model to not overwrite the real model\n      return false;\n    }\n    try {\n      myPersistence.writeModel(smodel, getSource());\n      IFile brokenFile = getBackupFile(true);\n      if (brokenFile != null) {\n        brokenFile.delete();\n      }\n    } catch (IOException e) {\n      // TODO report ...\n    } catch (ModelSaveException e) {\n      IFile brokenFile = getBackupFile(false);\n      try {\n        PersistenceFacade.getInstance().getDefaultModelFactory().save(this, new FileDataSource(brokenFile, null));\n      } catch (ModelSaveException ignore) {\n      } catch (IOException ignore) {\n      }\n      // TODO report\n    }\n    return false;\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SNode getRoot() {\n    return getRootNodes().iterator().next();\n  }","id":100260,"modified_method":"@Override\n  public SNode getRoot() {\n    Iterator<SNode> iterator = getRootNodes().iterator();\n    return iterator.hasNext() ? iterator.next() : null;\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void reloadContents() {\n    updateTimestamp();\n\n    if (!isLoaded()) return;\n\n    final SModel newModel = loadSModel();\n    setChanged(false);\n    super.replaceModel(new Runnable() {\n      @Override\n      public void run() {\n        myModel = newModel;\n      }\n    });\n  }","id":100261,"modified_method":"@Override\n  protected void reloadContents() {\n    ModelAccess.assertLegalWrite();\n\n    updateTimestamp();\n\n    if (!isLoaded()) return;\n\n    final SModel newModel = loadSModel();\n    setChanged(false);\n    super.replaceModel(new Runnable() {\n      @Override\n      public void run() {\n        myModel = newModel;\n      }\n    });\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private SModel loadSModel() {\n    try {\n      return (SModel) myPersistence.readModel(getReference(), getSource());\n    } catch (IOException e) {\n      return new StubModel(getReference(), e);\n    }\n  }","id":100262,"modified_method":"private SModel loadSModel() {\n    try {\n      IFile brokenFile = getBackupFile(true);\n      if (brokenFile != null) {\n        long l = ((FileDataSource) getSource()).getFile().lastModified();\n        if (l > 0 && brokenFile.lastModified() > l) {\n          SModelBase brokenModel = (SModelBase) PersistenceFacade.getInstance().getDefaultModelFactory().load(\n              new FileDataSource(brokenFile, null), Collections.<String, String>emptyMap());\n          brokenModel.load();\n          return brokenModel.getSModelInternal();\n        }\n      }\n      return (SModel) myPersistence.readModel(getReference(), getSource());\n    } catch (IOException e) {\n      return new StubModel(getReference(), e);\n    }\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public CustomPersistenceSModel(@NotNull SModelReference modelReference, @NotNull StreamDataSource source, @NotNull SModelPersistence persistence) {\n    super(modelReference, source);\n    myPersistence = persistence;\n  }","id":100263,"modified_method":"public CustomPersistenceSModel(@NotNull SModelReference modelReference, @NotNull StreamDataSource source, @NotNull SModelPersistence persistence) {\n    super(modelReference, source instanceof FileDataSource ? FileWithBackupDataSource.create((FileDataSource) source) : source);\n    myPersistence = persistence;\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void save(SModel model, StreamDataSource dataSource) throws ModelSaveException {\n    // TODO implement\n    //BinaryPersistence.writeModel(model, dataSource);\n  }","id":100264,"modified_method":"@Override\n  public void save(SModel model, StreamDataSource dataSource) {\n    ModelPersistence.saveModel(((SModelBase)model).getSModelInternal(), dataSource);\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void fireChanged(ProgressMonitor monitor) {\n    List<DataSourceListener> listeners;\n    synchronized (LOCK) {\n      listeners = new ArrayList<DataSourceListener>(myListeners);\n    }\n    monitor.start(\"Reloading\", listeners.size());\n    try {\n      for (DataSourceListener l : listeners) {\n        l.changed(this);\n        monitor.advance(1);\n      }\n    } finally {\n      monitor.done();\n    }\n  }","id":100265,"modified_method":"protected void fireChanged(ProgressMonitor monitor) {\n    List<DataSourceListener> listeners;\n    synchronized (LOCK) {\n      listeners = new ArrayList<DataSourceListener>(myListeners);\n    }\n    monitor.start(\"Reloading\", listeners.size());\n    try {\n      for (DataSourceListener l : listeners) {\n        l.changed(this);\n        monitor.advance(1);\n      }\n    } finally {\n      monitor.done();\n    }\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void removeListener(DataSourceListener listener) {\n    synchronized (LOCK) {\n      myListeners.remove(listener);\n      if (myListeners.isEmpty()) {\n        FileSystem.getInstance().removeListener(this);\n      }\n    }\n  }","id":100266,"modified_method":"@Override\n  public final void removeListener(DataSourceListener listener) {\n    synchronized (LOCK) {\n      myListeners.remove(listener);\n      if (myListeners.isEmpty()) {\n        stopListening();\n      }\n    }\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void setFile(@NotNull IFile file) {\n    ModelAccess.assertLegalWrite();\n\n    myFile = file;\n    synchronized (LOCK) {\n      if (!(myListeners.isEmpty())) {\n        FileSystem.getInstance().removeListener(this);\n        FileSystem.getInstance().addListener(this);\n      }\n    }\n  }","id":100267,"modified_method":"public void setFile(@NotNull IFile file) {\n    ModelAccess.assertLegalWrite();\n\n    myFile = file;\n    synchronized (LOCK) {\n      if (!(myListeners.isEmpty())) {\n        stopListening();\n        startListening();\n      }\n    }\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public Iterable<FileSystemListener> getListenerDependencies() {\n    if (myModelRoot instanceof FileSystemListener) {\n      return Collections.singleton((FileSystemListener) myModelRoot);\n    }\n    if (myModelRoot != null && myModelRoot.getModule() instanceof FileSystemListener) {\n      return Collections.singleton((FileSystemListener) myModelRoot.getModule());\n    }\n    return null;\n  }","id":100268,"modified_method":"@Override\n  public Iterable<FileSystemListener> getListenerDependencies() {\n    FileSystemListener parentListener = getParentListener();\n    if (parentListener != null) {\n      return Collections.singleton(parentListener);\n    }\n    return null;\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void addListener(DataSourceListener listener) {\n    synchronized (LOCK) {\n      if (myListeners.isEmpty()) {\n        FileSystem.getInstance().addListener(this);\n      }\n      myListeners.add(listener);\n    }\n  }","id":100269,"modified_method":"@Override\n  public final void addListener(DataSourceListener listener) {\n    synchronized (LOCK) {\n      if (myListeners.isEmpty()) {\n        startListening();\n      }\n      myListeners.add(listener);\n    }\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SModel loadModel(final byte[] content, String extension) {\n    ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(extension);\n    if (factory == null || !factory.isBinary()) {\n      return null;\n    }\n    SModel model = factory.load(new StreamDataSourceBase() {\n      @Override\n      public InputStream openInputStream() throws IOException {\n        return new ByteArrayInputStream(content);\n      }\n    }, null);\n    model.load();\n    return model;\n  }","id":100270,"modified_method":"public static SModel loadModel(final byte[] content, String extension) {\n    ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(extension);\n    if (factory == null || !factory.isBinary()) {\n      return null;\n    }\n    SModel model = factory.load(new StreamDataSourceBase() {\n      @Override\n      public InputStream openInputStream() throws IOException {\n        return new ByteArrayInputStream(content);\n      }\n    }, Collections.<String, String>emptyMap());\n    model.load();\n    return model;\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SModel loadModel(final String content, String extension) {\n    ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(extension);\n    if (factory == null || factory.isBinary()) {\n      return null;\n    }\n    SModel model = factory.load(new StreamDataSourceBase() {\n      @Override\n      public InputStream openInputStream() throws IOException {\n        byte[] bytes = content.getBytes(FileUtil.DEFAULT_CHARSET);\n        return new ByteArrayInputStream(bytes);\n      }\n    }, null);\n    model.load();\n    return model;\n  }","id":100271,"modified_method":"public static SModel loadModel(final String content, String extension) {\n    ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(extension);\n    if (factory == null || factory.isBinary()) {\n      return null;\n    }\n    SModel model = factory.load(new StreamDataSourceBase() {\n      @Override\n      public InputStream openInputStream() throws IOException {\n        byte[] bytes = content.getBytes(FileUtil.DEFAULT_CHARSET);\n        return new ByteArrayInputStream(bytes);\n      }\n    }, Collections.<String, String>emptyMap());\n    model.load();\n    return model;\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void writeModel(SModelData model, StreamDataSource source) throws IOException, ModelSaveException {\n    SNode root = model.getRootNodes().iterator().next();\n    if (root == null) {\n      throw new ModelSaveException(\"cannot save empty model\",\n          Collections.<Problem>singletonList(new PersistenceProblem(\"cannot save empty model\", null, true)));\n    }\n\n    // TODO check concepts\n\n    TextGenerationResult result = TextGen.generateText(root);\n    if (result.hasErrors()) {\n      throw new ModelSaveException(\"cannot save xml root\", PersistenceProblem.fromIMessages(result.problems()));\n    }\n\n    String content = (String) result.getResult();\n\n    OutputStream stream = new BufferedOutputStream(source.openOutputStream());\n    try {\n      OutputStreamWriter writer = new OutputStreamWriter(stream, FileUtil.DEFAULT_CHARSET);\n      writer.write(content);\n      writer.flush();\n    } finally {\n      FileUtil.closeFileSafe(stream);\n    }\n  }","id":100272,"modified_method":"@Override\n  public void writeModel(SModelData model, StreamDataSource source) throws IOException, ModelSaveException {\n    Iterator<SNode> iterator = model.getRootNodes().iterator();\n    SNode root = iterator.hasNext() ? iterator.next() : null;\n    if (root == null) {\n      throw new ModelSaveException(\"cannot save empty model\",\n          Collections.<Problem>singletonList(new PersistenceProblem(\"cannot save empty model\", null, true)));\n    }\n\n    // TODO check concepts\n\n    TextGenerationResult result = TextGen.generateText(root);\n    if (result.hasErrors()) {\n      throw new ModelSaveException(\"cannot save xml root\", PersistenceProblem.fromIMessages(result.problems()));\n    }\n\n    String content = (String) result.getResult();\n\n    OutputStream stream = new BufferedOutputStream(source.openOutputStream());\n    try {\n      OutputStreamWriter writer = new OutputStreamWriter(stream, FileUtil.DEFAULT_CHARSET);\n      writer.write(content);\n      writer.flush();\n    } finally {\n      FileUtil.closeFileSafe(stream);\n    }\n  }","commit_id":"e9a08225a3951f5530c609aa8f498f994e15f51a","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n         * Sends our list of differences to the remote endpoint using the\n         * Streaming API.\n         */\n        void performStreamingRepair() throws IOException\n        {\n            logger.info(\"Performing streaming repair of \" + differences.size() + \" ranges for \" + request);\n            ColumnFamilyStore cfstore = Table.open(request.cf.left).getColumnFamilyStore(request.cf.right);\n            try\n            {\n                final List<Range> ranges = new ArrayList<Range>(differences);\n                final Collection<SSTableReader> sstables = cfstore.getSSTables();\n                // send ranges to the remote node\n                Future f = StageManager.getStage(Stage.STREAM).submit(new WrappedRunnable()\n                {\n                    protected void runMayThrow() throws Exception\n                    {\n                        StreamOutSession session = StreamOutSession.create(request.cf.left, request.endpoint, null);\n                        StreamOut.transferSSTables(session, sstables, ranges);\n                        session.close();\n                    }\n                });\n                // request ranges from the remote node\n                // FIXME: no way to block for the 'requestRanges' call to complete, or to request a\n                // particular cf: see CASSANDRA-1189\n                StreamIn.requestRanges(request.endpoint, request.cf.left, ranges);\n                \n                // wait until streaming has completed\n                f.get();\n            }\n            catch(Exception e)\n            {\n                throw new IOException(\"Streaming repair failed.\", e);\n            }\n            logger.info(\"Finished streaming repair for \" + request);\n        }","id":100273,"modified_method":"/**\n         * Sends our list of differences to the remote endpoint using the\n         * Streaming API.\n         */\n        void performStreamingRepair() throws IOException\n        {\n            logger.info(\"Performing streaming repair of \" + differences.size() + \" ranges for \" + request);\n            ColumnFamilyStore cfstore = Table.open(request.cf.left).getColumnFamilyStore(request.cf.right);\n            try\n            {\n                final List<Range> ranges = new ArrayList<Range>(differences);\n                final Collection<SSTableReader> sstables = cfstore.getSSTables();\n                // send ranges to the remote node\n                Future f = StageManager.getStage(Stage.STREAM).submit(new WrappedRunnable()\n                {\n                    protected void runMayThrow() throws Exception\n                    {\n                        StreamOutSession session = StreamOutSession.create(request.cf.left, request.endpoint, null);\n                        StreamOut.transferSSTables(session, sstables, ranges);\n                    }\n                });\n                // request ranges from the remote node\n                // FIXME: no way to block for the 'requestRanges' call to complete, or to request a\n                // particular cf: see CASSANDRA-1189\n                StreamIn.requestRanges(request.endpoint, request.cf.left, ranges);\n                \n                // wait until streaming has completed\n                f.get();\n            }\n            catch(Exception e)\n            {\n                throw new IOException(\"Streaming repair failed.\", e);\n            }\n            logger.info(\"Finished streaming repair for \" + request);\n        }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"private void readFile() throws IOException\n    {\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Receiving stream\");\n            logger.debug(\"Creating file for {}\", localFile.getFilename());\n        }\n        FileOutputStream fos = new FileOutputStream(localFile.getFilename(), true);\n        FileChannel fc = fos.getChannel();\n\n        long offset = 0;\n        try\n        {\n            for (Pair<Long, Long> section : localFile.sections)\n            {\n                long length = section.right - section.left;\n                long bytesRead = 0;\n                while (bytesRead < length)\n                    bytesRead += fc.transferFrom(socketChannel, offset + bytesRead, length - bytesRead);\n                offset += length;\n            }\n        }\n        catch (IOException ex)\n        {\n            /* Ask the source node to re-stream this file. */\n            StreamReply reply = new StreamReply(remoteFile.getFilename(), session.getSessionId(), StreamReply.Status.FILE_RETRY);\n            logger.info(\"Streaming of file {} from {} failed: requesting a retry.\", remoteFile, session);\n            MessagingService.instance.sendOneWay(reply.createMessage(), session.getHost());\n\n            /* Delete the orphaned file. */\n            FileUtils.deleteWithConfirm(new File(localFile.getFilename()));\n            throw ex;\n        }\n        finally\n        {\n            fc.close();\n        }\n\n        if (logger.isDebugEnabled())\n            logger.debug(\"Removing stream context {}\", remoteFile);\n\n        StreamReply reply = new StreamReply(remoteFile.getFilename(), session.getSessionId(), StreamReply.Status.FILE_FINISHED);\n        addSSTable(localFile);\n        session.remove(remoteFile);\n        // send a StreamStatus message telling the source node it can delete this file\n        if (logger.isDebugEnabled())\n            logger.debug(\"Sending a streaming finished message for {} to {}\", remoteFile, session);\n        MessagingService.instance.sendOneWay(reply.createMessage(), session.getHost());\n    }","id":100274,"modified_method":"private void readFile() throws IOException\n    {\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Receiving stream\");\n            logger.debug(\"Creating file for {}\", localFile.getFilename());\n        }\n        FileOutputStream fos = new FileOutputStream(localFile.getFilename(), true);\n        FileChannel fc = fos.getChannel();\n\n        long offset = 0;\n        try\n        {\n            for (Pair<Long, Long> section : localFile.sections)\n            {\n                long length = section.right - section.left;\n                long bytesRead = 0;\n                while (bytesRead < length)\n                    bytesRead += fc.transferFrom(socketChannel, offset + bytesRead, length - bytesRead);\n                offset += length;\n            }\n        }\n        catch (IOException ex)\n        {\n            /* Ask the source node to re-stream this file. */\n            session.retry(remoteFile);\n\n            /* Delete the orphaned file. */\n            FileUtils.deleteWithConfirm(new File(localFile.getFilename()));\n            throw ex;\n        }\n        finally\n        {\n            fc.close();\n        }\n\n        addSSTable(localFile);\n        session.finished(remoteFile);\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"public void remove(PendingFile file)\n    {\n        files.remove(file);\n    }","id":100275,"modified_method":"public void retry(PendingFile remoteFile) throws IOException\n    {\n        StreamReply reply = new StreamReply(remoteFile.getFilename(), getSessionId(), StreamReply.Status.FILE_RETRY);\n        logger.info(\"Streaming of file {} from {} failed: requesting a retry.\", remoteFile, this);\n        MessagingService.instance.sendOneWay(reply.createMessage(), getHost());\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"public void closeIfFinished()\n    {\n        if (files.isEmpty())\n        {\n            if (callback != null)\n                callback.run();\n            sessions.remove(context);\n        }\n    }","id":100276,"modified_method":"public void closeIfFinished() throws IOException\n    {\n        if (files.isEmpty())\n        {\n            StreamReply reply = new StreamReply(\"\", getSessionId(), StreamReply.Status.SESSION_FINISHED);\n            logger.info(\"Finished streaming session {} from {}\", getSessionId(), getHost());\n            MessagingService.instance.sendOneWay(reply.createMessage(), getHost());\n\n            if (callback != null)\n                callback.run();\n            sessions.remove(context);\n        }\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Split out files for all tables on disk locally for each range and then stream them to the target endpoint.\n    */\n    public static void transferRanges(InetAddress target, String tableName, Collection<Range> ranges, Runnable callback)\n    {\n        assert ranges.size() > 0;\n        \n        // this is so that this target shows up as a destination while anticompaction is happening.\n        StreamOutSession session = StreamOutSession.create(tableName, target, callback);\n\n        logger.info(\"Beginning transfer process to {} for ranges {}\", target, StringUtils.join(ranges, \", \"));\n\n        try\n        {\n            Table table = flushSSTable(tableName);\n            // send the matching portion of every sstable in the keyspace\n            transferSSTables(session, table.getAllSSTables(), ranges);\n        }\n        catch (IOException e)\n        {\n            throw new IOError(e);\n        }\n        finally\n        {\n            session.close();\n        }\n    }","id":100277,"modified_method":"/**\n     * Split out files for all tables on disk locally for each range and then stream them to the target endpoint.\n    */\n    public static void transferRanges(InetAddress target, String tableName, Collection<Range> ranges, Runnable callback)\n    {\n        assert ranges.size() > 0;\n        \n        // this is so that this target shows up as a destination while anticompaction is happening.\n        StreamOutSession session = StreamOutSession.create(tableName, target, callback);\n\n        logger.info(\"Beginning transfer process to {} for ranges {}\", target, StringUtils.join(ranges, \", \"));\n\n        try\n        {\n            Table table = flushSSTable(tableName);\n            // send the matching portion of every sstable in the keyspace\n            transferSSTables(session, table.getAllSSTables(), ranges);\n        }\n        catch (IOException e)\n        {\n            throw new IOError(e);\n        }\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Transfers matching portions of a group of sstables from a single table to the target endpoint.\n     */\n    public static void transferSSTables(StreamOutSession session, Collection<SSTableReader> sstables, Collection<Range> ranges) throws IOException\n    {\n        List<PendingFile> pending = createPendingFiles(sstables, ranges);\n\n        if (pending.size() > 0)\n        {\n            session.addFilesToStream(pending);\n            session.begin();\n\n            logger.info(\"Waiting for transfer to {} to complete\", session.getHost());\n            session.waitForStreamCompletion();\n            logger.info(\"Done with transfer to {}\", session.getHost());\n        }\n    }","id":100278,"modified_method":"/**\n     * Transfers matching portions of a group of sstables from a single table to the target endpoint.\n     */\n    public static void transferSSTables(StreamOutSession session, Collection<SSTableReader> sstables, Collection<Range> ranges) throws IOException\n    {\n        List<PendingFile> pending = createPendingFiles(sstables, ranges);\n\n        if (pending.size() > 0)\n        {\n            session.addFilesToStream(pending);\n            session.begin();\n        }\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"public void addFilesToStream(List<PendingFile> pendingFiles)\n    {\n        // reset the condition in case this SOM is getting reused before it can be removed.\n        condition.reset();\n        for (PendingFile pendingFile : pendingFiles)\n        {\n            if (logger.isDebugEnabled())\n                logger.debug(\"Adding file {} to be streamed.\", pendingFile.getFilename());\n            files.put(pendingFile.getFilename(), pendingFile);\n        }\n    }","id":100279,"modified_method":"public void addFilesToStream(List<PendingFile> pendingFiles)\n    {\n        for (PendingFile pendingFile : pendingFiles)\n        {\n            if (logger.isDebugEnabled())\n                logger.debug(\"Adding file {} to be streamed.\", pendingFile.getFilename());\n            files.put(pendingFile.getFilename(), pendingFile);\n        }\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"public void startNext() throws IOException\n    {\n        files.remove(currentFile);\n        \n        if (files.isEmpty())\n        {\n            if (logger.isDebugEnabled())\n                logger.debug(\"Signalling that streaming is done for {} session {}\", getHost(), getSessionId());\n            close();\n            condition.signalAll();\n        }\n        else\n        {\n            streamFile(files.values().iterator().next());\n        }\n    }","id":100280,"modified_method":"public void startNext() throws IOException\n    {\n        assert files.containsKey(currentFile);\n        files.remove(currentFile);\n        Iterator<PendingFile> iter = files.values().iterator();\n        if (iter.hasNext())\n            streamFile(iter.next());\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"public void doVerb(Message message)\n    {\n        byte[] body = message.getMessageBody();\n        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);\n\n        try\n        {\n            StreamReply reply = StreamReply.serializer.deserialize(new DataInputStream(bufIn));\n            StreamOutSession session = StreamOutSession.get(message.getFrom(), reply.sessionId);\n            session.validateCurrentFile(reply.file);\n\n            switch (reply.action)\n            {\n                case FILE_FINISHED:\n                    session.startNext();\n                    break;\n                case FILE_RETRY:\n                    logger.warn(\"Need to re-stream file {} to {}\", reply.file, message.getFrom());\n                    session.retry();\n                    break;\n                default:\n                    throw new RuntimeException(\"Cannot handle FileStatus.Action: \" + reply.action);\n            }\n        }\n        catch (IOException ex)\n        {\n            throw new IOError(ex);\n        }\n    }","id":100281,"modified_method":"public void doVerb(Message message)\n    {\n        byte[] body = message.getMessageBody();\n        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);\n\n        try\n        {\n            StreamReply reply = StreamReply.serializer.deserialize(new DataInputStream(bufIn));\n            logger.debug(\"Received StreamReply {}\", reply);\n            StreamOutSession session = StreamOutSession.get(message.getFrom(), reply.sessionId);\n\n            switch (reply.action)\n            {\n                case FILE_FINISHED:\n                    session.validateCurrentFile(reply.file);\n                    session.startNext();\n                    break;\n                case FILE_RETRY:\n                    session.validateCurrentFile(reply.file);\n                    logger.info(\"Need to re-stream file {} to {}\", reply.file, message.getFrom());\n                    session.retry();\n                    break;\n                case SESSION_FINISHED:\n                    session.close();\n                    break;\n                default:\n                    throw new RuntimeException(\"Cannot handle FileStatus.Action: \" + reply.action);\n            }\n        }\n        catch (IOException ex)\n        {\n            throw new IOError(ex);\n        }\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testTransferTableMultiple() throws Exception\n    {\n        // write a temporary SSTable, but don't register it\n        Set<String> content = new HashSet<String>();\n        content.add(\"transfer1\");\n        content.add(\"transfer2\");\n        content.add(\"transfer3\");\n        SSTableReader sstable = SSTableUtils.writeSSTable(content);\n        String tablename = sstable.getTableName();\n        String cfname = sstable.getColumnFamilyName();\n\n        Set<String> content2 = new HashSet<String>();\n        content2.add(\"test\");\n        content2.add(\"test2\");\n        content2.add(\"test3\");\n        SSTableReader sstable2 = SSTableUtils.writeSSTable(content2);\n\n        // transfer the first and last key\n        IPartitioner p = StorageService.getPartitioner();\n        List<Range> ranges = new ArrayList<Range>();\n        ranges.add(new Range(p.getMinimumToken(), p.getToken(\"transfer1\".getBytes())));\n        ranges.add(new Range(p.getToken(\"test2\".getBytes()), p.getMinimumToken()));\n        StreamOut.transferSSTables(StreamOutSession.create(tablename, LOCAL, null), Arrays.asList(sstable, sstable2), ranges);\n\n        // confirm that the SSTable was transferred and registered\n        ColumnFamilyStore cfstore = Table.open(tablename).getColumnFamilyStore(cfname);\n        List<Row> rows = Util.getRangeSlice(cfstore);\n        assertEquals(8, rows.size());\n        assert Arrays.equals(rows.get(0).key.key, \"key\".getBytes());\n        assert Arrays.equals(rows.get(2).key.key, \"test\".getBytes());\n        assert Arrays.equals(rows.get(5).key.key, \"transfer1\".getBytes());\n        assert rows.get(0).cf.getColumnsMap().size() == 1;\n        assert rows.get(2).cf.getColumnsMap().size() == 1;\n        assert rows.get(5).cf.getColumnsMap().size() == 1;\n        assert rows.get(0).cf.getColumn(\"key\".getBytes()) != null;\n        \n        // these keys fall outside of the ranges and should not be transferred.\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"transfer2\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"transfer3\"), new QueryPath(\"Standard1\")));\n        \n        // and that the index and filter were properly recovered\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"key\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"test\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"transfer1\"), new QueryPath(\"Standard1\")));\n    }","id":100282,"modified_method":"@Test\n    public void testTransferTableMultiple() throws Exception\n    {\n        // write a temporary SSTable, but don't register it\n        Set<String> content = new HashSet<String>();\n        content.add(\"transfer1\");\n        content.add(\"transfer2\");\n        content.add(\"transfer3\");\n        SSTableReader sstable = SSTableUtils.writeSSTable(content);\n        String tablename = sstable.getTableName();\n        String cfname = sstable.getColumnFamilyName();\n\n        Set<String> content2 = new HashSet<String>();\n        content2.add(\"test\");\n        content2.add(\"test2\");\n        content2.add(\"test3\");\n        SSTableReader sstable2 = SSTableUtils.writeSSTable(content2);\n\n        // transfer the first and last key\n        IPartitioner p = StorageService.getPartitioner();\n        List<Range> ranges = new ArrayList<Range>();\n        ranges.add(new Range(p.getMinimumToken(), p.getToken(\"transfer1\".getBytes())));\n        ranges.add(new Range(p.getToken(\"test2\".getBytes()), p.getMinimumToken()));\n        StreamOutSession session = StreamOutSession.create(tablename, LOCAL, null);\n        StreamOut.transferSSTables(session, Arrays.asList(sstable, sstable2), ranges);\n        session.await();\n\n        // confirm that the SSTable was transferred and registered\n        ColumnFamilyStore cfstore = Table.open(tablename).getColumnFamilyStore(cfname);\n        List<Row> rows = Util.getRangeSlice(cfstore);\n        assertEquals(8, rows.size());\n        assert Arrays.equals(rows.get(0).key.key, \"key\".getBytes());\n        assert Arrays.equals(rows.get(2).key.key, \"test\".getBytes());\n        assert Arrays.equals(rows.get(5).key.key, \"transfer1\".getBytes());\n        assert rows.get(0).cf.getColumnsMap().size() == 1;\n        assert rows.get(2).cf.getColumnsMap().size() == 1;\n        assert rows.get(5).cf.getColumnsMap().size() == 1;\n        assert rows.get(0).cf.getColumn(\"key\".getBytes()) != null;\n        \n        // these keys fall outside of the ranges and should not be transferred.\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"transfer2\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"transfer3\"), new QueryPath(\"Standard1\")));\n        \n        // and that the index and filter were properly recovered\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"key\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"test\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"transfer1\"), new QueryPath(\"Standard1\")));\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testTransferTable() throws Exception\n    {\n        // write a temporary SSTable, but don't register it\n        Set<String> content = new HashSet<String>();\n        content.add(\"key\");\n        content.add(\"key2\");\n        content.add(\"key3\");\n        SSTableReader sstable = SSTableUtils.writeSSTable(content);\n        String tablename = sstable.getTableName();\n        String cfname = sstable.getColumnFamilyName();\n\n        // transfer the first and last key\n        IPartitioner p = StorageService.getPartitioner();\n        List<Range> ranges = new ArrayList<Range>();\n        ranges.add(new Range(p.getMinimumToken(), p.getToken(\"key\".getBytes())));\n        ranges.add(new Range(p.getToken(\"key2\".getBytes()), p.getMinimumToken()));\n        StreamOut.transferSSTables(StreamOutSession.create(tablename, LOCAL, null), Arrays.asList(sstable), ranges);\n\n        // confirm that the SSTable was transferred and registered\n        ColumnFamilyStore cfstore = Table.open(tablename).getColumnFamilyStore(cfname);\n        List<Row> rows = Util.getRangeSlice(cfstore);\n        assertEquals(2, rows.size());\n        assert Arrays.equals(rows.get(0).key.key, \"key\".getBytes());\n        assert Arrays.equals(rows.get(1).key.key, \"key3\".getBytes());\n        assert rows.get(0).cf.getColumnsMap().size() == 1;\n        assert rows.get(1).cf.getColumnsMap().size() == 1;\n        assert rows.get(1).cf.getColumn(\"key3\".getBytes()) != null;\n\n        // and that the index and filter were properly recovered\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"key\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"key3\"), new QueryPath(\"Standard1\")));\n    }","id":100283,"modified_method":"@Test\n    public void testTransferTable() throws Exception\n    {\n        // write a temporary SSTable, but don't register it\n        Set<String> content = new HashSet<String>();\n        content.add(\"key\");\n        content.add(\"key2\");\n        content.add(\"key3\");\n        SSTableReader sstable = SSTableUtils.writeSSTable(content);\n        String tablename = sstable.getTableName();\n        String cfname = sstable.getColumnFamilyName();\n\n        // transfer the first and last key\n        IPartitioner p = StorageService.getPartitioner();\n        List<Range> ranges = new ArrayList<Range>();\n        ranges.add(new Range(p.getMinimumToken(), p.getToken(\"key\".getBytes())));\n        ranges.add(new Range(p.getToken(\"key2\".getBytes()), p.getMinimumToken()));\n        StreamOutSession session = StreamOutSession.create(tablename, LOCAL, null);\n        StreamOut.transferSSTables(session, Arrays.asList(sstable), ranges);\n        session.await();\n\n        // confirm that the SSTable was transferred and registered\n        ColumnFamilyStore cfstore = Table.open(tablename).getColumnFamilyStore(cfname);\n        List<Row> rows = Util.getRangeSlice(cfstore);\n        assertEquals(2, rows.size());\n        assert Arrays.equals(rows.get(0).key.key, \"key\".getBytes());\n        assert Arrays.equals(rows.get(1).key.key, \"key3\".getBytes());\n        assert rows.get(0).cf.getColumnsMap().size() == 1;\n        assert rows.get(1).cf.getColumnsMap().size() == 1;\n        assert rows.get(1).cf.getColumn(\"key3\".getBytes()) != null;\n\n        // and that the index and filter were properly recovered\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"key\"), new QueryPath(\"Standard1\")));\n        assert null != cfstore.getColumnFamily(QueryFilter.getIdentityFilter(Util.dk(\"key3\"), new QueryPath(\"Standard1\")));\n    }","commit_id":"1176b61250e397a71b37f3789e5b6f600d12cd34","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n    public Command fixError(TestError testError) {\n        if (isFixable(testError)) {\n            Way way = (Way) testError.getPrimitives().iterator().next();\n            Way newWay = new Way(way);\n\n            List<Node> nodesCopy = newWay.getNodes();\n            Collections.reverse(nodesCopy);\n            newWay.setNodes(nodesCopy);\n\n            return new ChangeCommand(way, newWay);\n        }\n        return null;\n    }","id":100284,"modified_method":"@Override\n    public Command fixError(TestError testError) {\n        if (isFixable(testError)) {\n            // primitives list can be empty if all primitives have been purged\n            Iterator<? extends OsmPrimitive> it = testError.getPrimitives().iterator();\n            if (it.hasNext()) {\n                Way way = (Way) it.next();\n                Way newWay = new Way(way);\n\n                List<Node> nodesCopy = newWay.getNodes();\n                Collections.reverse(nodesCopy);\n                newWay.setNodes(nodesCopy);\n\n                return new ChangeCommand(way, newWay);\n            }\n        }\n        return null;\n    }","commit_id":"c07c94431cd6ecfaa4a7c657d05360939d46e993","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override public Command fixError(TestError testError) {\n        Way w = (Way) testError.getPrimitives().iterator().next();\n        Way wnew = new Way(w);\n        wnew.setNodes(null);\n        Node lastN = null;\n        for (Node n : w.getNodes()) {\n            if (lastN == null) {\n                wnew.addNode(n);\n            } else if (n == lastN) {\n                // Skip this node\n            } else {\n                wnew.addNode(n);\n            }\n            lastN = n;\n        }\n        if (wnew.getNodesCount() < 2)\n            // Empty way, delete\n            return deletePrimitivesIfNeeded(Collections.singleton(w));\n        else\n            return new ChangeCommand(w, wnew);\n    }","id":100285,"modified_method":"@Override\n    public Command fixError(TestError testError) {\n        // primitives list can be empty if all primitives have been purged\n        Iterator<? extends OsmPrimitive> it = testError.getPrimitives().iterator();\n        if (it.hasNext()) {\n            Way w = (Way) it.next();\n            Way wnew = new Way(w);\n            wnew.setNodes(null);\n            Node lastN = null;\n            for (Node n : w.getNodes()) {\n                if (lastN == null) {\n                    wnew.addNode(n);\n                } else if (n == lastN) {\n                    // Skip this node\n                } else {\n                    wnew.addNode(n);\n                }\n                lastN = n;\n            }\n            if (wnew.getNodesCount() < 2)\n                // Empty way, delete\n                return deletePrimitivesIfNeeded(Collections.singleton(w));\n            else\n                return new ChangeCommand(w, wnew);\n        }\n        return null;\n    }","commit_id":"c07c94431cd6ecfaa4a7c657d05360939d46e993","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\r\n    public Command fixError(TestError testError) {\r\n        if (testError instanceof WrongRoundaboutHighway) {\r\n            return new ChangePropertyCommand(testError.getPrimitives().iterator().next(), \r\n                    \"highway\", ((WrongRoundaboutHighway) testError).correctValue);\r\n        }\r\n        return null;\r\n    }","id":100286,"modified_method":"@Override\r\n    public Command fixError(TestError testError) {\r\n        if (testError instanceof WrongRoundaboutHighway) {\r\n            // primitives list can be empty if all primitives have been purged\r\n            Iterator<? extends OsmPrimitive> it = testError.getPrimitives().iterator();\r\n            if (it.hasNext()) {\r\n                return new ChangePropertyCommand(it.next(),\r\n                        \"highway\", ((WrongRoundaboutHighway) testError).correctValue);\r\n            }\r\n        }\r\n        return null;\r\n    }","commit_id":"c07c94431cd6ecfaa4a7c657d05360939d46e993","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\r\n    public void endTest() {\r\n        for (PowerLineError e : potentialErrors) {\r\n            if (!isInPowerStation(e.getNode())) {\r\n                errors.add(e);\r\n            }\r\n        }\r\n        super.endTest();\r\n    }","id":100287,"modified_method":"@Override\r\n    public void endTest() {\r\n        for (PowerLineError e : potentialErrors) {\r\n            Node n = e.getNode();\r\n            if (n != null && !isInPowerStation(n)) {\r\n                errors.add(e);\r\n            }\r\n        }\r\n        super.endTest();\r\n    }","commit_id":"c07c94431cd6ecfaa4a7c657d05360939d46e993","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\r\n    public Command fixError(TestError testError) {\r\n        if (testError instanceof PowerLineError && isFixable(testError)) {\r\n            return new ChangePropertyCommand(\r\n                    testError.getPrimitives().iterator().next(), \r\n                    \"power\", towerPoleTagMap.get(((PowerLineError)testError).line));\r\n        }\r\n        return null;\r\n    }","id":100288,"modified_method":"@Override\r\n    public Command fixError(TestError testError) {\r\n        if (testError instanceof PowerLineError && isFixable(testError)) {\r\n            // primitives list can be empty if all primitives have been purged\r\n            Iterator<? extends OsmPrimitive> it = testError.getPrimitives().iterator();\r\n            if (it.hasNext()) {\r\n                return new ChangePropertyCommand(it.next(),\r\n                        \"power\", towerPoleTagMap.get(((PowerLineError)testError).line));\r\n            }\r\n        }\r\n        return null;\r\n    }","commit_id":"c07c94431cd6ecfaa4a7c657d05360939d46e993","url":"https://github.com/openstreetmap/josm"},{"original_method":"public final Node getNode() {\r\n            return (Node) getPrimitives().iterator().next();\r\n        }","id":100289,"modified_method":"public final Node getNode() {\r\n            // primitives list can be empty if all primitives have been purged\r\n            Iterator<? extends OsmPrimitive> it = getPrimitives().iterator();\r\n            return it.hasNext() ? (Node) it.next() : null;\r\n        }","commit_id":"c07c94431cd6ecfaa4a7c657d05360939d46e993","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Nullable\n  private static PsiExpression extractAccumulator(PsiAssignmentExpression assignment) {\n      if(JavaTokenType.PLUSEQ.equals(assignment.getOperationTokenType())) {\n        return assignment.getLExpression();\n      } else if(JavaTokenType.EQ.equals(assignment.getOperationTokenType())) {\n        if (assignment.getRExpression() instanceof PsiBinaryExpression) {\n          PsiBinaryExpression binOp = (PsiBinaryExpression)assignment.getRExpression();\n          if(JavaTokenType.PLUS.equals(binOp.getOperationTokenType()) && binOp.getROperand() != null) {\n            if (binOp.getLOperand().getText().equals(assignment.getLExpression().getText()) ||\n                binOp.getROperand().getText().equals(assignment.getLExpression().getText())) {\n              return assignment.getLExpression();\n            }\n          }\n        }\n      }\n      return null;\n  }","id":100290,"modified_method":"@Nullable\n  private static PsiLocalVariable extractAccumulator(PsiAssignmentExpression assignment) {\n    if(!(assignment.getLExpression() instanceof PsiReferenceExpression)) return null;\n    PsiReferenceExpression lExpr = (PsiReferenceExpression)assignment.getLExpression();\n    PsiElement accumulator = lExpr.resolve();\n    if(!(accumulator instanceof PsiLocalVariable)) return null;\n    PsiLocalVariable var = (PsiLocalVariable)accumulator;\n    if(JavaTokenType.PLUSEQ.equals(assignment.getOperationTokenType())) {\n      return var;\n    } else if(JavaTokenType.EQ.equals(assignment.getOperationTokenType())) {\n      if (assignment.getRExpression() instanceof PsiBinaryExpression) {\n        PsiBinaryExpression binOp = (PsiBinaryExpression)assignment.getRExpression();\n        if(JavaTokenType.PLUS.equals(binOp.getOperationTokenType())) {\n          PsiExpression left = binOp.getLOperand();\n          PsiExpression right = binOp.getROperand();\n          if (sameReference(left, lExpr) || sameReference(right, lExpr)) {\n            return var;\n          }\n        }\n      }\n    }\n    return null;\n  }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static String compoundLambdaOrMethodReference(PsiVariable variable,\n                                                PsiExpression expression,\n                                                String samQualifiedName,\n                                                PsiType[] samParamTypes) {\n    String result = \"\";\n    final Project project = variable.getProject();\n    final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project);\n    final PsiClass functionClass = psiFacade.findClass(samQualifiedName, GlobalSearchScope.allScope(project));\n    for (int i = 0; i < samParamTypes.length; i++) {\n      if (samParamTypes[i] instanceof PsiPrimitiveType) {\n        samParamTypes[i] = ((PsiPrimitiveType)samParamTypes[i]).getBoxedType(expression);\n      }\n    }\n    final PsiClassType functionalInterfaceType = functionClass != null ? psiFacade.getElementFactory().createType(functionClass, samParamTypes) : null;\n    final PsiVariable[] parameters = {variable};\n    String methodReferenceText = LambdaCanBeMethodReferenceInspection.convertToMethodReference(expression, parameters, functionalInterfaceType, null);\n    if (methodReferenceText != null) {\n      LOG.assertTrue(functionalInterfaceType != null);\n      result += \"(\" + functionalInterfaceType.getCanonicalText() + \")\" + methodReferenceText;\n    } else {\n      result += variable.getName() + \" -> \" + expression.getText();\n    }\n    return result;\n  }","id":100291,"modified_method":"static String compoundLambdaOrMethodReference(PsiVariable variable,\n                                                PsiExpression expression,\n                                                String samQualifiedName,\n                                                PsiType[] samParamTypes) {\n    String result = \"\";\n    final Project project = variable.getProject();\n    final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project);\n    final PsiClass functionClass = psiFacade.findClass(samQualifiedName, expression.getResolveScope());\n    for (int i = 0; i < samParamTypes.length; i++) {\n      if (samParamTypes[i] instanceof PsiPrimitiveType) {\n        samParamTypes[i] = ((PsiPrimitiveType)samParamTypes[i]).getBoxedType(expression);\n      }\n    }\n    final PsiClassType functionalInterfaceType = functionClass != null ? psiFacade.getElementFactory().createType(functionClass, samParamTypes) : null;\n    final PsiVariable[] parameters = {variable};\n    String methodReferenceText = LambdaCanBeMethodReferenceInspection.convertToMethodReference(expression, parameters, functionalInterfaceType, null);\n    if (methodReferenceText != null) {\n      LOG.assertTrue(functionalInterfaceType != null);\n      result += \"(\" + functionalInterfaceType.getCanonicalText() + \")\" + methodReferenceText;\n    } else {\n      result += variable.getName() + \" -> \" + expression.getText();\n    }\n    return result;\n  }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static void replaceWithNumericAddition(@NotNull Project project,\n                                                   PsiForeachStatement foreachStatement,\n                                                   PsiLocalVariable var,\n                                                   StringBuilder builder,\n                                                   String expressionType) {\n      PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(project);\n      restoreComments(foreachStatement, foreachStatement.getBody());\n      if (isDeclarationJustBefore(var, foreachStatement)) {\n        PsiExpression initializer = var.getInitializer();\n        if (isZero(initializer)) {\n          String typeStr = var.getType().getCanonicalText();\n          String replacement = (typeStr.equals(expressionType) ? \"\" : \"(\" + typeStr + \") \") + builder;\n          initializer.replace(elementFactory.createExpressionFromText(replacement, foreachStatement));\n          foreachStatement.delete();\n          simplifyAndFormat(project, var);\n          return;\n        }\n      }\n      PsiElement result =\n        foreachStatement.replace(elementFactory.createStatementFromText(var.getName() + \"+=\" + builder + \";\", foreachStatement));\n      simplifyAndFormat(project, result);\n    }","id":100292,"modified_method":"static void replaceWithNumericAddition(@NotNull Project project,\n                                                   PsiForeachStatement foreachStatement,\n                                                   PsiLocalVariable var,\n                                                   StringBuilder builder,\n                                                   String expressionType) {\n      PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(project);\n      restoreComments(foreachStatement, foreachStatement.getBody());\n      if (isDeclarationJustBefore(var, foreachStatement)) {\n        PsiExpression initializer = var.getInitializer();\n        if (ExpressionUtils.isZero(initializer)) {\n          String typeStr = var.getType().getCanonicalText();\n          String replacement = (typeStr.equals(expressionType) ? \"\" : \"(\" + typeStr + \") \") + builder;\n          initializer.replace(elementFactory.createExpressionFromText(replacement, foreachStatement));\n          foreachStatement.delete();\n          simplifyAndFormat(project, var);\n          return;\n        }\n      }\n      PsiElement result =\n        foreachStatement.replace(elementFactory.createStatementFromText(var.getName() + \"+=\" + builder + \";\", foreachStatement));\n      simplifyAndFormat(project, result);\n    }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static PsiExpression extractAddend(PsiAssignmentExpression assignment) {\n      if(JavaTokenType.PLUSEQ.equals(assignment.getOperationTokenType())) {\n        return assignment.getRExpression();\n      } else if(JavaTokenType.EQ.equals(assignment.getOperationTokenType())) {\n        if (assignment.getRExpression() instanceof PsiBinaryExpression) {\n          PsiBinaryExpression binOp = (PsiBinaryExpression)assignment.getRExpression();\n          if(JavaTokenType.PLUS.equals(binOp.getOperationTokenType()) && binOp.getROperand() != null) {\n            if(binOp.getLOperand().getText().equals(assignment.getLExpression().getText())) {\n              return binOp.getROperand();\n            }\n            if(binOp.getROperand().getText().equals(assignment.getLExpression().getText())) {\n              return binOp.getLOperand();\n            }\n          }\n        }\n      }\n      return null;\n  }","id":100293,"modified_method":"@Nullable\n  private static PsiExpression extractAddend(PsiAssignmentExpression assignment) {\n      if(JavaTokenType.PLUSEQ.equals(assignment.getOperationTokenType())) {\n        return assignment.getRExpression();\n      } else if(JavaTokenType.EQ.equals(assignment.getOperationTokenType())) {\n        if (assignment.getRExpression() instanceof PsiBinaryExpression) {\n          PsiBinaryExpression binOp = (PsiBinaryExpression)assignment.getRExpression();\n          if(JavaTokenType.PLUS.equals(binOp.getOperationTokenType())) {\n            if(sameReference(binOp.getLOperand(), assignment.getLExpression())) {\n              return binOp.getROperand();\n            }\n            if(sameReference(binOp.getROperand(), assignment.getLExpression())) {\n              return binOp.getLOperand();\n            }\n          }\n        }\n      }\n      return null;\n  }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    void migrate(@NotNull Project project,\n                 @NotNull ProblemDescriptor descriptor,\n                 @NotNull PsiForeachStatement foreachStatement,\n                 @NotNull PsiExpression iteratedValue,\n                 @NotNull PsiStatement body,\n                 @NotNull TerminalBlock tb,\n                 @NotNull List<String> intermediateOps) {\n      PsiAssignmentExpression assignment = tb.getSingleExpression(PsiAssignmentExpression.class);\n      if (assignment == null) return;\n      PsiExpression operand = extractAccumulator(assignment);\n      if (!(operand instanceof PsiReferenceExpression)) return;\n      PsiElement element = ((PsiReferenceExpression)operand).resolve();\n      if (!(element instanceof PsiLocalVariable)) return;\n      PsiLocalVariable var = (PsiLocalVariable)element;\n\n      PsiExpression addend = extractAddend(assignment);\n      if (addend == null) return;\n      PsiType type = var.getType();\n      if (!(type instanceof PsiPrimitiveType)) return;\n      PsiPrimitiveType primitiveType = (PsiPrimitiveType)type;\n      if (primitiveType.equalsToText(\"float\")) return;\n      String typeName;\n      if (primitiveType.equalsToText(\"double\")) {\n        typeName = \"Double\";\n      }\n      else if (primitiveType.equalsToText(\"long\")) {\n        typeName = \"Long\";\n      }\n      else {\n        typeName = \"Int\";\n      }\n      intermediateOps.add(\".mapTo\" + typeName + \"(\" +\n                          compoundLambdaOrMethodReference(tb.getVariable(), addend, \"java.util.function.To\" + typeName + \"Function\",\n                                                     new PsiType[]{tb.getVariable().getType()})+\")\");\n      final StringBuilder builder = generateStream(iteratedValue, intermediateOps);\n      builder.append(\".sum()\");\n      replaceWithNumericAddition(project, foreachStatement, var, builder, typeName.toLowerCase(Locale.ENGLISH));\n    }","id":100294,"modified_method":"@Override\n    void migrate(@NotNull Project project,\n                 @NotNull ProblemDescriptor descriptor,\n                 @NotNull PsiForeachStatement foreachStatement,\n                 @NotNull PsiExpression iteratedValue,\n                 @NotNull PsiStatement body,\n                 @NotNull TerminalBlock tb,\n                 @NotNull List<String> intermediateOps) {\n      PsiAssignmentExpression assignment = tb.getSingleExpression(PsiAssignmentExpression.class);\n      if (assignment == null) return;\n      PsiLocalVariable var = extractAccumulator(assignment);\n      if (var == null) return;\n\n      PsiExpression addend = extractAddend(assignment);\n      if (addend == null) return;\n      PsiType type = var.getType();\n      if (!(type instanceof PsiPrimitiveType)) return;\n      PsiPrimitiveType primitiveType = (PsiPrimitiveType)type;\n      if (primitiveType.equalsToText(\"float\")) return;\n      String typeName;\n      if (primitiveType.equalsToText(\"double\")) {\n        typeName = \"Double\";\n      }\n      else if (primitiveType.equalsToText(\"long\")) {\n        typeName = \"Long\";\n      }\n      else {\n        typeName = \"Int\";\n      }\n      intermediateOps.add(\".mapTo\" + typeName + \"(\" +\n                          compoundLambdaOrMethodReference(tb.getVariable(), addend, \"java.util.function.To\" + typeName + \"Function\",\n                                                     new PsiType[]{tb.getVariable().getType()})+\")\");\n      final StringBuilder builder = generateStream(iteratedValue, intermediateOps);\n      builder.append(\".sum()\");\n      replaceWithNumericAddition(project, foreachStatement, var, builder, typeName.toLowerCase(Locale.ENGLISH));\n    }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder, boolean isOnTheFly) {\n    return new JavaElementVisitor() {\n      @Override\n      public void visitForeachStatement(PsiForeachStatement statement) {\n        super.visitForeachStatement(statement);\n        if (PsiUtil.getLanguageLevel(statement).isAtLeast(LanguageLevel.JDK_1_8)) {\n          final PsiExpression iteratedValue = statement.getIteratedValue();\n          final PsiStatement body = statement.getBody();\n          if (iteratedValue != null && body != null) {\n            final PsiType iteratedValueType = iteratedValue.getType();\n            final PsiClass iteratorClass = PsiUtil.resolveClassInClassTypeOnly(iteratedValueType);\n            PsiClass collectionClass = null;\n            final boolean isArray;\n            if(iteratedValueType instanceof PsiArrayType) {\n              // Do not handle primitive types now\n              if(((PsiArrayType)iteratedValueType).getComponentType() instanceof PsiPrimitiveType) return;\n              isArray = true;\n            } else {\n              collectionClass = JavaPsiFacade.getInstance(body.getProject()).findClass(CommonClassNames.JAVA_UTIL_COLLECTION, statement.getResolveScope());\n              if (collectionClass != null && InheritanceUtil.isInheritorOrSelf(iteratorClass, collectionClass, true)) {\n                isArray = false;\n              } else return;\n            }\n            try {\n              if (ExceptionUtil.getThrownCheckedExceptions(new PsiElement[]{body}).isEmpty()) {\n                TerminalBlock tb = TerminalBlock.from(statement.getIterationParameter(), body);\n                List<Operation> operations = tb.extractOperations();\n\n                if(tb.isEmpty()) return;\n\n                final ControlFlow controlFlow = ControlFlowFactory.getInstance(holder.getProject())\n                  .getControlFlow(body, LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());\n                final Collection<PsiStatement> exitPoints = ControlFlowUtil\n                  .findExitPointsAndStatements(controlFlow, tb.getStartOffset(controlFlow), tb.getEndOffset(controlFlow),\n                                               new IntArrayList(), PsiContinueStatement.class,\n                                               PsiBreakStatement.class, PsiReturnStatement.class, PsiThrowStatement.class);\n                if (exitPoints.isEmpty()) {\n\n                  int startOffset = controlFlow.getStartOffset(body);\n                  int endOffset = controlFlow.getEndOffset(body);\n                  final List<PsiVariable> nonFinalVariables = ControlFlowUtil.getUsedVariables(controlFlow, startOffset, endOffset)\n                    .stream().filter(variable -> !HighlightControlFlowUtil.isEffectivelyFinal(variable, body, null))\n                    .collect(Collectors.toList());\n\n                  if(getIncrementedVariable(tb, operations, nonFinalVariables) != null) {\n                    holder.registerProblem(iteratedValue, \"Can be replaced with count() call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           new ReplaceWithCountFix());\n                  }\n                  if(getAccumulatedVariable(tb, operations, nonFinalVariables) != null) {\n                    holder.registerProblem(iteratedValue, \"Can be replaced with sum() call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           new ReplaceWithSumFix());\n                  }\n                  if(!nonFinalVariables.isEmpty()) {\n                    return;\n                  }\n                  if ((isArray || !isRawSubstitution(iteratedValueType, collectionClass)) && isCollectCall(tb, operations)) {\n                    boolean addAll = operations.isEmpty() && isAddAllCall(tb);\n                    String methodName;\n                    if(addAll) {\n                      methodName = \"addAll\";\n                    } else {\n                      PsiMethodCallExpression methodCallExpression = tb.getSingleMethodCall();\n                      if(methodCallExpression != null && extractReplaceableCollectionInitializer(\n                        methodCallExpression.getMethodExpression().getQualifierExpression(), statement) != null) {\n                        methodName = \"collect\";\n                      } else {\n                        methodName = \"forEach\";\n                      }\n                    }\n                    holder.registerProblem(iteratedValue, \"Can be replaced with \" + methodName + \" call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           new ReplaceWithCollectFix(methodName));\n                  }\n                  // do not replace for(T e : arr) {} with Arrays.stream(arr).forEach(e -> {}) even if flag is set\n                  else if (!operations.isEmpty() ||\n                           (!isArray && (REPLACE_TRIVIAL_FOREACH || !isTrivial(body, statement.getIterationParameter())))) {\n                    final List<LocalQuickFix> fixes = new ArrayList<>();\n                    fixes.add(new ReplaceWithForeachCallFix(\"forEach\"));\n                    if (!operations.isEmpty()) {\n                      //for .stream()\n                      fixes.add(new ReplaceWithForeachCallFix(\"forEachOrdered\"));\n                    }\n                    holder.registerProblem(iteratedValue, \"Can be replaced with forEach call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           fixes.toArray(new LocalQuickFix[fixes.size()]));\n                  }\n                } else {\n                  if(tb.getSingleStatement() instanceof PsiReturnStatement) {\n                    PsiReturnStatement returnStatement = (PsiReturnStatement)tb.getSingleStatement();\n                    PsiExpression value = returnStatement.getReturnValue();\n                    if(isLiteral(value, Boolean.TRUE) || isLiteral(value, Boolean.FALSE)) {\n                      boolean foundResult = (boolean)((PsiLiteralExpression)value).getValue();\n                      PsiElement nextStatement = PsiTreeUtil.skipSiblingsForward(statement, PsiWhiteSpace.class, PsiComment.class);\n                      if(nextStatement instanceof PsiReturnStatement) {\n                        PsiReturnStatement nextReturnStatement = (PsiReturnStatement)nextStatement;\n                        if(isLiteral(nextReturnStatement.getReturnValue(), !foundResult)) {\n                          String methodName = foundResult ? \"anyMatch\" : \"noneMatch\";\n                          holder.registerProblem(iteratedValue, \"Can be replaced with \"+methodName+\"() call\",\n                                                 ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                                 new ReplaceWithMatchFix(methodName));\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            catch (AnalysisCanceledException ignored) {\n            }\n          }\n        }\n      }\n\n      private boolean isRawSubstitution(PsiType iteratedValueType, PsiClass collectionClass) {\n        return iteratedValueType instanceof PsiClassType && PsiUtil\n          .isRawSubstitutor(collectionClass, TypeConversionUtil.getSuperClassSubstitutor(collectionClass, (PsiClassType)iteratedValueType));\n      }\n    };\n  }","id":100295,"modified_method":"@NotNull\n  @Override\n  public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder, boolean isOnTheFly) {\n    return new JavaElementVisitor() {\n      @Override\n      public void visitForeachStatement(PsiForeachStatement statement) {\n        super.visitForeachStatement(statement);\n        if (PsiUtil.getLanguageLevel(statement).isAtLeast(LanguageLevel.JDK_1_8)) {\n          final PsiExpression iteratedValue = statement.getIteratedValue();\n          final PsiStatement body = statement.getBody();\n          if (iteratedValue != null && body != null) {\n            final PsiType iteratedValueType = iteratedValue.getType();\n            final PsiClass iteratorClass = PsiUtil.resolveClassInClassTypeOnly(iteratedValueType);\n            PsiClass collectionClass = null;\n            final boolean isArray;\n            if(iteratedValueType instanceof PsiArrayType) {\n              // Do not handle primitive types now\n              if(((PsiArrayType)iteratedValueType).getComponentType() instanceof PsiPrimitiveType) return;\n              isArray = true;\n            } else {\n              collectionClass = JavaPsiFacade.getInstance(body.getProject()).findClass(CommonClassNames.JAVA_UTIL_COLLECTION, statement.getResolveScope());\n              if (collectionClass != null && InheritanceUtil.isInheritorOrSelf(iteratorClass, collectionClass, true)) {\n                isArray = false;\n              } else return;\n            }\n            try {\n              if (ExceptionUtil.getThrownCheckedExceptions(new PsiElement[]{body}).isEmpty()) {\n                TerminalBlock tb = TerminalBlock.from(statement.getIterationParameter(), body);\n                List<Operation> operations = tb.extractOperations();\n\n                if(tb.isEmpty()) return;\n\n                final ControlFlow controlFlow = ControlFlowFactory.getInstance(holder.getProject())\n                  .getControlFlow(body, LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());\n                final Collection<PsiStatement> exitPoints = ControlFlowUtil\n                  .findExitPointsAndStatements(controlFlow, tb.getStartOffset(controlFlow), tb.getEndOffset(controlFlow),\n                                               new IntArrayList(), PsiContinueStatement.class,\n                                               PsiBreakStatement.class, PsiReturnStatement.class, PsiThrowStatement.class);\n                if (exitPoints.isEmpty()) {\n\n                  int startOffset = controlFlow.getStartOffset(body);\n                  int endOffset = controlFlow.getEndOffset(body);\n                  final List<PsiVariable> nonFinalVariables = StreamEx\n                    .of(ControlFlowUtil.getUsedVariables(controlFlow, startOffset, endOffset))\n                    .remove(variable -> HighlightControlFlowUtil.isEffectivelyFinal(variable, body, null))\n                    .toList();\n\n                  if(getIncrementedVariable(tb, operations, nonFinalVariables) != null) {\n                    holder.registerProblem(iteratedValue, \"Can be replaced with count() call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           new ReplaceWithCountFix());\n                  }\n                  if(getAccumulatedVariable(tb, operations, nonFinalVariables) != null) {\n                    holder.registerProblem(iteratedValue, \"Can be replaced with sum() call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           new ReplaceWithSumFix());\n                  }\n                  if(!nonFinalVariables.isEmpty()) {\n                    return;\n                  }\n                  if ((isArray || !isRawSubstitution(iteratedValueType, collectionClass)) && isCollectCall(tb, operations)) {\n                    boolean addAll = operations.isEmpty() && isAddAllCall(tb);\n                    String methodName;\n                    if(addAll) {\n                      methodName = \"addAll\";\n                    } else {\n                      PsiMethodCallExpression methodCallExpression = tb.getSingleMethodCall();\n                      if(methodCallExpression != null && extractReplaceableCollectionInitializer(\n                        methodCallExpression.getMethodExpression().getQualifierExpression(), statement) != null) {\n                        methodName = \"collect\";\n                      } else {\n                        methodName = \"forEach\";\n                      }\n                    }\n                    holder.registerProblem(iteratedValue, \"Can be replaced with \" + methodName + \" call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           new ReplaceWithCollectFix(methodName));\n                  }\n                  // do not replace for(T e : arr) {} with Arrays.stream(arr).forEach(e -> {}) even if flag is set\n                  else if (!operations.isEmpty() ||\n                           (!isArray && (REPLACE_TRIVIAL_FOREACH || !isTrivial(body, statement.getIterationParameter())))) {\n                    final List<LocalQuickFix> fixes = new ArrayList<>();\n                    fixes.add(new ReplaceWithForeachCallFix(\"forEach\"));\n                    if (!operations.isEmpty()) {\n                      //for .stream()\n                      fixes.add(new ReplaceWithForeachCallFix(\"forEachOrdered\"));\n                    }\n                    holder.registerProblem(iteratedValue, \"Can be replaced with forEach call\",\n                                           ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                           fixes.toArray(new LocalQuickFix[fixes.size()]));\n                  }\n                } else {\n                  if(tb.getSingleStatement() instanceof PsiReturnStatement) {\n                    PsiReturnStatement returnStatement = (PsiReturnStatement)tb.getSingleStatement();\n                    PsiExpression value = returnStatement.getReturnValue();\n                    if(isLiteral(value, Boolean.TRUE) || isLiteral(value, Boolean.FALSE)) {\n                      boolean foundResult = (boolean)((PsiLiteralExpression)value).getValue();\n                      PsiElement nextStatement = PsiTreeUtil.skipSiblingsForward(statement, PsiWhiteSpace.class, PsiComment.class);\n                      if(nextStatement instanceof PsiReturnStatement) {\n                        PsiReturnStatement nextReturnStatement = (PsiReturnStatement)nextStatement;\n                        if(isLiteral(nextReturnStatement.getReturnValue(), !foundResult)) {\n                          String methodName = foundResult ? \"anyMatch\" : \"noneMatch\";\n                          holder.registerProblem(iteratedValue, \"Can be replaced with \"+methodName+\"() call\",\n                                                 ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                                                 new ReplaceWithMatchFix(methodName));\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            catch (AnalysisCanceledException ignored) {\n            }\n          }\n        }\n      }\n\n      private boolean isRawSubstitution(PsiType iteratedValueType, PsiClass collectionClass) {\n        return iteratedValueType instanceof PsiClassType && PsiUtil\n          .isRawSubstitutor(collectionClass, TypeConversionUtil.getSuperClassSubstitutor(collectionClass, (PsiClassType)iteratedValueType));\n      }\n    };\n  }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static PsiLocalVariable getAccumulatedVariable(TerminalBlock tb,\n                                                         List<Operation> operations,\n                                                         List<PsiVariable> variables) {\n    // have only one non-final variable\n    if(variables.size() != 1) return null;\n\n    PsiAssignmentExpression assignment = tb.getSingleExpression(PsiAssignmentExpression.class);\n    if(assignment == null) return null;\n    PsiExpression operand = extractAccumulator(assignment);\n    if(!(operand instanceof PsiReferenceExpression)) return null;\n    PsiElement element = ((PsiReferenceExpression)operand).resolve();\n\n    // the referred variable is the same as non-final variable\n    if(!(element instanceof PsiLocalVariable) || !variables.contains(element)) return null;\n    PsiLocalVariable var = (PsiLocalVariable)element;\n    if (!(var.getType() instanceof PsiPrimitiveType) || var.getType().equalsToText(\"float\")) return null;\n\n    // the referred variable is not used in intermediate operations\n    for(Operation operation : operations) {\n      if(ReferencesSearch.search(var, new LocalSearchScope(operation.getExpression())).findFirst() != null) return null;\n    }\n    PsiExpression addend = extractAddend(assignment);\n    LOG.assertTrue(addend != null);\n    if(ReferencesSearch.search(var, new LocalSearchScope(addend)).findFirst() != null) return null;\n    return var;\n  }","id":100296,"modified_method":"@Nullable\n  private static PsiLocalVariable getAccumulatedVariable(TerminalBlock tb,\n                                                         List<Operation> operations,\n                                                         List<PsiVariable> variables) {\n    // have only one non-final variable\n    if(variables.size() != 1) return null;\n\n    PsiAssignmentExpression assignment = tb.getSingleExpression(PsiAssignmentExpression.class);\n    if(assignment == null) return null;\n    PsiLocalVariable var = extractAccumulator(assignment);\n\n    // the referred variable is the same as non-final variable\n    if(var == null || !variables.contains(var)) return null;\n    if (!(var.getType() instanceof PsiPrimitiveType) || var.getType().equalsToText(\"float\")) return null;\n\n    // the referred variable is not used in intermediate operations\n    for(Operation operation : operations) {\n      if(ReferencesSearch.search(var, new LocalSearchScope(operation.getExpression())).findFirst() != null) return null;\n    }\n    PsiExpression addend = extractAddend(assignment);\n    LOG.assertTrue(addend != null);\n    if(ReferencesSearch.search(var, new LocalSearchScope(addend)).findFirst() != null) return null;\n    return var;\n  }","commit_id":"cb3b76a74800fd130511317af1be7e8007e71987","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean startIpythonServer(@NotNull final String url, @NotNull final IpnbFileEditor fileEditor) {\n    final Module module = ProjectFileIndex.SERVICE.getInstance(myProject).getModuleForFile(fileEditor.getVirtualFile());\n    if (module == null) return false;\n    final Sdk sdk = PythonSdkType.findPythonSdk(module);\n    if (sdk == null) {\n      showWarning(fileEditor, \"Please check Python Interpreter in Settings->Python Interpreter\", null);\n      return false;\n    }\n    try {\n      final PyPackage ipythonPackage = PyPackageManager.getInstance(sdk).findPackage(\"ipython\", false);\n      if (ipythonPackage == null) {\n        showWarning(fileEditor, \"Add IPython to the interpreter of the current project.\", null);\n        return false;\n      }\n    }\n    catch (ExecutionException ignored) {\n    }\n    final Map<String, String> env = ImmutableMap.of(\"PYCHARM_EP_DIST\", \"ipython\", \"PYCHARM_EP_NAME\", \"ipython\");\n\n    final Pair<String, String> hostPort = getHostPortFromUrl(url);\n    if (hostPort == null) {\n      showWarning(fileEditor, \"Please, check IPython Notebook URL in <a href=\\\"\\\">Settings->Tools->IPython Notebook<\/a>\",\n                  new IpnbSettingsAdapter());\n      return false;\n    }\n    final String ipython = PythonHelpersLocator.getHelperPath(\"pycharm/pycharm_load_entry_point.py\");\n    final ArrayList<String> parameters = Lists.newArrayList(sdk.getHomePath(), ipython, \"notebook\", \"--no-browser\");\n    if (hostPort.getFirst() != null) {\n      parameters.add(\"--ip\");\n      parameters.add(hostPort.getFirst());\n    }\n    if (hostPort.getSecond() != null) {\n      parameters.add(\"--port\");\n      parameters.add(hostPort.getSecond());\n    }\n    final GeneralCommandLine commandLine = new GeneralCommandLine(parameters).withWorkDirectory(myProject.getBasePath()).\n      withEnvironment(env);\n\n    try {\n      final KillableColoredProcessHandler processHandler = new KillableColoredProcessHandler(commandLine) {\n        @Override\n        protected void doDestroyProcess() {\n          super.doDestroyProcess();\n          UnixProcessManager.sendSigIntToProcessTree(getProcess());\n        }\n\n        @Override\n        public boolean isSilentlyDestroyOnClose() {\n          return true;\n        }\n      };\n      processHandler.setShouldDestroyProcessRecursively(true);\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          new RunContentExecutor(myProject, processHandler)\n            .withTitle(\"IPython Notebook\")\n            .withStop(new Runnable() {\n              @Override\n              public void run() {\n                processHandler.destroyProcess();\n                UnixProcessManager.sendSigIntToProcessTree(processHandler.getProcess());\n              }\n            }, new Computable<Boolean>() {\n              @Override\n              public Boolean compute() {\n                return !processHandler.isProcessTerminated();\n              }\n            })\n            .withRerun(new Runnable() {\n              @Override\n              public void run() {\n                startIpythonServer(url, fileEditor);\n              }\n            })\n            .run();\n        }\n      });\n      return true;\n    }\n    catch (ExecutionException e) {\n      return false;\n    }\n  }","id":100297,"modified_method":"private boolean startIpythonServer(@NotNull final String url, @NotNull final IpnbFileEditor fileEditor) {\n    final Module module = ProjectFileIndex.SERVICE.getInstance(myProject).getModuleForFile(fileEditor.getVirtualFile());\n    if (module == null) return false;\n    final Sdk sdk = PythonSdkType.findPythonSdk(module);\n    if (sdk == null) {\n      showWarning(fileEditor, \"Please check Python Interpreter in Settings->Python Interpreter\", null);\n      return false;\n    }\n    try {\n      final PyPackage ipythonPackage = PyPackageManager.getInstance(sdk).findPackage(\"ipython\", false);\n      if (ipythonPackage == null) {\n        showWarning(fileEditor, \"Add IPython to the interpreter of the current project.\", null);\n        return false;\n      }\n    }\n    catch (ExecutionException ignored) {\n    }\n\n    final Pair<String, String> hostPort = getHostPortFromUrl(url);\n    if (hostPort == null) {\n      showWarning(fileEditor, \"Please, check IPython Notebook URL in <a href=\\\"\\\">Settings->Tools->IPython Notebook<\/a>\",\n                  new IpnbSettingsAdapter());\n      return false;\n    }\n    final String homePath = sdk.getHomePath();\n    if (homePath == null) return false;\n    final String ipython = PythonSdkType.getExecutablePath(homePath, \"ipython\");\n    final ArrayList<String> parameters = Lists.newArrayList(homePath, ipython, \"notebook\", \"--no-browser\");\n    if (hostPort.getFirst() != null) {\n      parameters.add(\"--ip\");\n      parameters.add(hostPort.getFirst());\n    }\n    if (hostPort.getSecond() != null) {\n      parameters.add(\"--port\");\n      parameters.add(hostPort.getSecond());\n    }\n    final GeneralCommandLine commandLine = new GeneralCommandLine(parameters).withWorkDirectory(myProject.getBasePath());\n\n    try {\n      final KillableColoredProcessHandler processHandler = new KillableColoredProcessHandler(commandLine) {\n        @Override\n        protected void doDestroyProcess() {\n          super.doDestroyProcess();\n          UnixProcessManager.sendSigIntToProcessTree(getProcess());\n        }\n\n        @Override\n        public boolean isSilentlyDestroyOnClose() {\n          return true;\n        }\n      };\n      processHandler.setShouldDestroyProcessRecursively(true);\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          new RunContentExecutor(myProject, processHandler)\n            .withTitle(\"IPython Notebook\")\n            .withStop(new Runnable() {\n              @Override\n              public void run() {\n                processHandler.destroyProcess();\n                UnixProcessManager.sendSigIntToProcessTree(processHandler.getProcess());\n              }\n            }, new Computable<Boolean>() {\n              @Override\n              public Boolean compute() {\n                return !processHandler.isProcessTerminated();\n              }\n            })\n            .withRerun(new Runnable() {\n              @Override\n              public void run() {\n                startIpythonServer(url, fileEditor);\n              }\n            })\n            .run();\n        }\n      });\n      return true;\n    }\n    catch (ExecutionException e) {\n      return false;\n    }\n  }","commit_id":"52d340082c6f91d94fafe6cafa3ec4cdddfb6a50","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void setupSdkPaths(final SdkModificator sdkModificator, final String sdkHome, final Sdk internalJava) {\n    //roots from internal jre\n    addClasses(sdkModificator, internalJava);\n    addDocs(sdkModificator, internalJava);\n    addSources(sdkModificator, internalJava);\n    //roots for openapi and other libs\n    if (isFromIDEAProject(sdkHome)) {\n      LocalFileSystem fileSystem = LocalFileSystem.getInstance();\n      for (String prefix : new String[]{\"community\", \"\"}) {\n        for (String path : new String[]{\"lib\", \"build/kotlinc/lib/kotlin-runtime.jar\"}) {\n          VirtualFile libDir = fileSystem.refreshAndFindFileByPath(sdkHome + \"/\" + prefix + \"/\" + path);\n          if (libDir == null) continue;\n          for (VirtualFile file : libDir.isDirectory() ? libDir.getChildren() : new VirtualFile[]{libDir}) {\n            if (file.isDirectory()) continue;\n            if (!StringUtil.equalsIgnoreCase(file.getExtension(), \"jar\")) continue;\n            sdkModificator.addRoot(file, OrderRootType.CLASSES);\n          }\n        }\n      }\n      VirtualFile out = fileSystem.refreshAndFindFileByPath(sdkHome + \"/out/classes/production\");\n      if (out != null) {\n        for (VirtualFile dir : out.getChildren()) {\n          if (!dir.isDirectory()) continue;\n          sdkModificator.addRoot(dir, OrderRootType.CLASSES);\n        }\n      }\n    }\n    else  {\n      VirtualFile[] ideaLib = getIdeaLibrary(sdkHome);\n      for (VirtualFile aIdeaLib : ideaLib) {\n        sdkModificator.addRoot(aIdeaLib, OrderRootType.CLASSES);\n      }\n      addSources(new File(sdkHome), sdkModificator);\n    }\n  }","id":100298,"modified_method":"public static void setupSdkPaths(final SdkModificator sdkModificator, final String sdkHome, final Sdk internalJava) {\n    //roots from internal jre\n    addClasses(sdkModificator, internalJava);\n    addDocs(sdkModificator, internalJava);\n    addSources(sdkModificator, internalJava);\n    //roots for openapi and other libs\n    if (isFromIDEAProject(sdkHome)) {\n      JarFileSystem jarFileSystem = JarFileSystem.getInstance();\n      for (String prefix : new String[]{\"community\", \"\"}) {\n        for (String path : new String[]{\"lib\", \"build/kotlinc/lib/kotlin-runtime.jar\"}) {\n          File libDir = new File(sdkHome, FileUtil.toSystemDependentName(prefix + \"/\" + path));\n          if (!libDir.exists()) continue;\n          for (File file : JBIterable.of(libDir.listFiles()).append(libDir)) {\n            if (file.isDirectory()) continue;\n            if (!StringUtil.endsWithIgnoreCase(file.getName(), \".jar\")) continue;\n            String jarPath = FileUtil.toSystemIndependentName(file.getPath()) + JarFileSystem.JAR_SEPARATOR;\n            VirtualFile jar = jarFileSystem.findFileByPath(jarPath);\n            if (jar == null) continue;\n            sdkModificator.addRoot(jar, OrderRootType.CLASSES);\n          }\n        }\n      }\n      LocalFileSystem localFileSystem = LocalFileSystem.getInstance();\n      VirtualFile out = localFileSystem.refreshAndFindFileByPath(sdkHome + \"/out/classes/production\");\n      if (out != null) {\n        for (VirtualFile dir : out.getChildren()) {\n          if (!dir.isDirectory()) continue;\n          sdkModificator.addRoot(dir, OrderRootType.CLASSES);\n        }\n      }\n    }\n    else  {\n      VirtualFile[] ideaLib = getIdeaLibrary(sdkHome);\n      for (VirtualFile aIdeaLib : ideaLib) {\n        sdkModificator.addRoot(aIdeaLib, OrderRootType.CLASSES);\n      }\n      addSources(new File(sdkHome), sdkModificator);\n    }\n  }","commit_id":"1b8787ee28f66043ac0c01a8b24c926c97d5bf2f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addSources(SdkModificator sdkModificator, final Sdk javaSdk) {\n    if (javaSdk != null) {\n      if (!addOrderEntries(OrderRootType.SOURCES, javaSdk, sdkModificator)){\n        if (SystemInfo.isMac) {\n          Sdk[] jdks = ProjectJdkTable.getInstance().getAllJdks();\n          for (Sdk jdk : jdks) {\n            if (jdk.getSdkType() instanceof JavaSdk) {\n              addOrderEntries(OrderRootType.SOURCES, jdk, sdkModificator);\n              break;\n            }\n          }\n        }\n        else {\n          final File jdkHome = new File(javaSdk.getHomePath()).getParentFile();\n          @NonNls final String srcZip = \"src.zip\";\n          final File jarFile = new File(jdkHome, srcZip);\n          if (jarFile.exists()){\n            JarFileSystem jarFileSystem = JarFileSystem.getInstance();\n            String path = jarFile.getAbsolutePath().replace(File.separatorChar, '/') + JarFileSystem.JAR_SEPARATOR;\n            jarFileSystem.setNoCopyJarForPath(path);\n            sdkModificator.addRoot(jarFileSystem.findFileByPath(path), OrderRootType.SOURCES);\n          }\n        }\n      }\n    }\n  }","id":100299,"modified_method":"private static void addSources(SdkModificator sdkModificator, final Sdk javaSdk) {\n    if (javaSdk != null) {\n      if (!addOrderEntries(OrderRootType.SOURCES, javaSdk, sdkModificator)){\n        if (SystemInfo.isMac) {\n          Sdk[] jdks = ProjectJdkTable.getInstance().getAllJdks();\n          for (Sdk jdk : jdks) {\n            if (jdk.getSdkType() instanceof JavaSdk) {\n              addOrderEntries(OrderRootType.SOURCES, jdk, sdkModificator);\n              break;\n            }\n          }\n        }\n        else {\n          String homePath = javaSdk.getHomePath();\n          if (homePath == null) return;\n          final File jdkHome = new File(homePath).getParentFile();\n          @NonNls final String srcZip = \"src.zip\";\n          final File jarFile = new File(jdkHome, srcZip);\n          if (jarFile.exists()){\n            JarFileSystem jarFileSystem = JarFileSystem.getInstance();\n            String path = jarFile.getAbsolutePath().replace(File.separatorChar, '/') + JarFileSystem.JAR_SEPARATOR;\n            jarFileSystem.setNoCopyJarForPath(path);\n            sdkModificator.addRoot(jarFileSystem.findFileByPath(path), OrderRootType.SOURCES);\n          }\n        }\n      }\n    }\n  }","commit_id":"1b8787ee28f66043ac0c01a8b24c926c97d5bf2f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isValidSdkHome(String path) {\n    if (isFromIDEAProject(path)) {\n      return true;\n    }\n    File home = new File(path);\n    if (!home.exists()) {\n      return false;\n    }\n    @NonNls final String openapiJar = \"openapi.jar\";\n    if (getBuildNumber(path) == null || !new File(new File(home, LIB_DIR_NAME), openapiJar).exists()) {\n      return false;\n    }\n    return true;\n  }","id":100300,"modified_method":"public boolean isValidSdkHome(String path) {\n    if (isFromIDEAProject(path)) {\n      return true;\n    }\n    File home = new File(path);\n    if (!home.exists()) {\n      return false;\n    }\n    if (getBuildNumber(path) == null || getOpenApiJar(path) == null) {\n      return false;\n    }\n    return true;\n  }","commit_id":"04c0c29bd14295250765fbf1db02c14672613c8b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int getIdeaClassFileVersion(final Sdk ideaSdk) {\n    int result = -1;\n    final VirtualFile mainClassFile =\n      JarFileSystem.getInstance().findFileByPath(ideaSdk.getHomePath() + \"/lib/openapi.jar!/com/intellij/psi/PsiManager.class\");\n    if (mainClassFile != null) {\n      final BytePointer ptr;\n      try {\n        ptr = new BytePointer(mainClassFile.contentsToByteArray(), 6);\n        result = ClsUtil.readU2(ptr);\n      }\n      catch (IOException e) {\n        // ignore\n      }\n      catch (ClsFormatException e) {\n        // ignore\n      }\n    }\n    return result;\n  }","id":100301,"modified_method":"private static int getIdeaClassFileVersion(final Sdk ideaSdk) {\n    int result = -1;\n    File apiJar = getOpenApiJar(ideaSdk.getHomePath());\n    if (apiJar == null) return -1;\n    final VirtualFile mainClassFile = JarFileSystem.getInstance().findFileByPath(FileUtil.toSystemIndependentName(apiJar.getPath()) +\n                                                                                 \"!/com/intellij/psi/PsiManager.class\");\n    if (mainClassFile != null) {\n      final BytePointer ptr;\n      try {\n        ptr = new BytePointer(mainClassFile.contentsToByteArray(), 6);\n        result = ClsUtil.readU2(ptr);\n      }\n      catch (IOException e) {\n        // ignore\n      }\n      catch (ClsFormatException e) {\n        // ignore\n      }\n    }\n    return result;\n  }","commit_id":"04c0c29bd14295250765fbf1db02c14672613c8b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String suggestSdkName(String currentSdkName, String sdkHome) {\n    @NonNls final String idea = \"IDEA \";\n    String buildNumber = getBuildNumber(sdkHome);\n    return idea + (buildNumber != null ? buildNumber : \"\");\n  }","id":100302,"modified_method":"public String suggestSdkName(String currentSdkName, String sdkHome) {\n    @NonNls final String productName;\n    if (new File(sdkHome, \"lib/rubymine.jar\").exists()) {\n      productName = \"RubyMine \";\n    }\n    else {\n      productName = \"IDEA \";\n\n    }\n    String buildNumber = getBuildNumber(sdkHome);\n    return productName + (buildNumber != null ? buildNumber : \"\");\n  }","commit_id":"04c0c29bd14295250765fbf1db02c14672613c8b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Theory\n    public void invalidEmailRejection(InvalidEmailAddressRFC2822 emailAddress) {\n        String errorMsg = \"not a well-formed email address\";\n        RegisterPage registerPage =\n                new BasicWorkFlow().goToHome().goToRegistration();\n        registerPage =\n                registerPage.enterEmail(emailAddress.toString()).clickTerms();\n        assertThat(\"Email validation errors are not shown\",\n                registerPage.waitForErrors(), Matchers.hasItem(errorMsg));\n    }","id":100303,"modified_method":"@Theory\n    public void invalidEmailRejection(InvalidEmailAddressRFC2822 emailAddress) {\n        String errorMsg = \"not a well-formed email address\";\n        RegisterPage registerPage =\n                new BasicWorkFlow().goToHome().goToRegistration();\n        registerPage = registerPage.enterEmail(emailAddress.toString());\n        registerPage.defocus();\n\n        assertThat(\"Email validation errors are not shown\",\n                registerPage.waitForFieldErrors(), Matchers.hasItem(errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void doSignIn(String username, String password) {\n        BasePage basePage = new BasePage(driver);\n        basePage.deleteCookiesAndRefresh();\n        SignInPage signInPage = basePage.clickSignInLink();\n        log.info(\"log in as username: {}\", username);\n        signInPage.enterUsername(username);\n        signInPage.enterPassword(password);\n        signInPage.clickSignIn();\n        signInPage.waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver driver) {\n                List<WebElement> messages =\n                        driver.findElements(By.id(\"messages\"));\n                if (messages.size() > 0\n                        && messages.get(0).getText().contains(\"Login failed\")) {\n                    throw new IllegalAccessError(\"Login failed\");\n                }\n                List<WebElement> signIn = driver.findElements(By.id(\"Sign_in\"));\n                return signIn.size() == 0;\n            }\n        });\n    }","id":100304,"modified_method":"private void doSignIn(String username, String password) {\n        BasePage basePage = new BasePage(driver);\n        basePage.deleteCookiesAndRefresh();\n        SignInPage signInPage = basePage.clickSignInLink();\n        log.info(\"log in as username: {}\", username);\n        signInPage.enterUsername(username);\n        signInPage.enterPassword(password);\n        signInPage.clickSignIn();\n        signInPage.waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver driver) {\n                List<WebElement> messages =\n                        driver.findElements(By.className(\"message--danger\"));\n                if (messages.size() > 0 && messages.get(0)\n                        .getText().contains(\" Login failed \")) {\n                    throw new IllegalAccessError(\"Login failed\");\n                }\n                List<WebElement> signIn = driver.findElements(By.id(\"Sign_in\"));\n                return signIn.size() == 0;\n            }\n        });\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"public <P extends AbstractPage> P signInAndGoToPage(String username,\n            String password, Class<P> pageClass) {\n        try {\n            doSignIn(username, password);\n        } catch (IllegalAccessError iae) {\n            log.warn(\"Login failed. May due to some weird issue. Will Try again.\");\n            doSignIn(username, password);\n        } catch (TimeoutException e) {\n            log.error(\"timeout on login. If you are running tests manually with cargo.wait, you probably forget to create the user admin/admin. See ManualRunHelper.\");\n            throw e;\n        }\n        return PageFactory.initElements(driver, pageClass);\n    }","id":100305,"modified_method":"public <P extends AbstractPage> P signInAndGoToPage(String username,\n            String password, Class<P> pageClass) {\n        try {\n            doSignIn(username, password);\n        } catch (IllegalAccessError iae) {\n            log.warn(\"Login failed. May due to some weird issue. Will Try again.\");\n            doSignIn(username, password);\n        } catch (TimeoutException e) {\n            log.error(\"timeout on login. If you are running tests manually\"+\n                    \" with cargo.wait, you probably forget to create the user\"+\n                    \" admin/admin. See ManualRunHelper.\");\n            throw e;\n        }\n        return PageFactory.initElements(driver, pageClass);\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"public SignInPage signInFailure(String username, String password) {\n        SignInPage signInPage = new BasePage(driver).clickSignInLink();\n        log.info(\"log in as username: {}\", username);\n        signInPage.enterUsername(username);\n        signInPage.enterPassword(password);\n        signInPage.clickSignIn();\n        signInPage.waitForTenSec().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver driver) {\n                List<WebElement> messages =\n                        driver.findElements(By.id(\"messages\"));\n                return messages.size() > 0\n                        && messages.get(0).getText().contains(\"Login failed\");\n            }\n        });\n        return new SignInPage(driver);\n    }","id":100306,"modified_method":"public SignInPage signInFailure(String username, String password) {\n        SignInPage signInPage = new BasePage(driver).clickSignInLink();\n        log.info(\"log in as username: {}\", username);\n        signInPage.enterUsername(username);\n        signInPage.enterPassword(password);\n        signInPage.clickSignInExpectError();\n        return new SignInPage(driver);\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"public RegisterPage setFields(Map<String, String> fields) {\n        clearFields();\n        enterName(fields.get(\"name\"));\n        enterEmail(fields.get(\"email\"));\n        enterUserName(fields.get(\"username\"));\n        enterPassword(fields.get(\"password\"));\n        enterConfirmPassword(fields.get(\"confirmpassword\"));\n        enterCaptcha(fields.get(\"captcha\"));\n        return new RegisterPage(getDriver());\n    }","id":100307,"modified_method":"public RegisterPage setFields(Map<String, String> fields) {\n        clearFields();\n        enterName(fields.get(\"name\"));\n        enterEmail(fields.get(\"email\"));\n        enterUserName(fields.get(\"username\"));\n        enterPassword(fields.get(\"password\"));\n        return new RegisterPage(getDriver());\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"public RegisterPage(WebDriver driver) {\n        super(driver);\n        List<By> elementBys =\n                ImmutableList\n                        .<By> builder()\n                        .add(By.id(\"registerForm:nameField:name\"))\n                        .add(By.id(\"registerForm:emailField:email\"))\n                        .add(By.id(\"registerForm:usernameField:username\"))\n                        .add(By.id(\"registerForm:passwordField:password\"))\n                        .add(By.id(\"registerForm:passwordConfirmField:passwordConfirm\"))\n                        .add(By.id(\"registerForm:captcha:verifyCaptcha\"))\n                        .add(By.id(\"registerForm:agreedToTerms:agreedToTerms\"))\n                        .add(By.id(\"registerForm:registerButton\")).build();\n        waitForPage(elementBys);\n    }","id":100308,"modified_method":"public RegisterPage(WebDriver driver) {\n        super(driver);\n        List<By> elementBys = ImmutableList.<By> builder()\n                .add(By.id(\"loginForm:name\"))\n                .add(By.id(\"loginForm:emailField:email\"))\n                .add(By.id(\"loginForm:usernameField:username\"))\n                .add(By.id(\"loginForm:passwordField:password\"))\n                .add(By.xpath(\"//input[@value='Sign Up']\")).build();\n        waitForPage(elementBys);\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"public RegisterPage clearFields() {\n        nameField.clear();\n        emailField.clear();\n        usernameField.clear();\n        passwordField.clear();\n        confirmPasswordField.clear();\n        captchaField.clear();\n        return new RegisterPage(getDriver());\n    }","id":100309,"modified_method":"public RegisterPage clearFields() {\n        nameField.clear();\n        emailField.clear();\n        usernameField.clear();\n        passwordField.clear();\n        return new RegisterPage(getDriver());\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(expected = AssertionError.class)\n    public void bug981498_underscoreRules() {\n        String errorMsg =\n                \"lowercase letters and digits (regex \\\"^[a-z\\\\d_]{3,20}$\\\")\";\n        fields.put(\"email\", \"bug981498test@example.com\");\n        fields.put(\"username\", \"______\");\n        RegisterPage registerPage =\n                homePage.goToRegistration().setFields(fields);\n        assertThat(\"A username of all underscores is not valid\",\n                registerPage.getErrors(), Matchers.hasItem(errorMsg));\n    }","id":100310,"modified_method":"@Test(expected = AssertionError.class)\n    public void bug981498_underscoreRules() {\n        String errorMsg =\n                \"lowercase letters and digits (regex \\\"^[a-z\\\\d_]{3,20}$\\\")\";\n        fields.put(\"email\", \"bug981498test@example.com\");\n        fields.put(\"username\", \"______\");\n        RegisterPage registerPage =\n                homePage.goToRegistration().setFields(fields);\n        assertThat(\"A username of all underscores is not valid\",\n                registerPage.getFieldErrors(), Matchers.hasItem(errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Before\n    public void before() {\n        // fields contains a set of data that can be successfully registered\n        fields = new HashMap<String, String>();\n\n        // Conflicting fields - must be set for each test function to avoid\n        // \"not available\" errors\n        fields.put(\"email\", \"test@test.com\");\n        fields.put(\"username\", \"testusername\");\n\n        fields.put(\"name\", \"test\");\n        fields.put(\"password\", \"testpassword\");\n        fields.put(\"confirmpassword\", \"testpassword\");\n        fields.put(\"captcha\", \"555\"); // TODO: Expect captcha error, fix\n        homePage = new BasicWorkFlow().goToHome();\n        homePage.deleteCookiesAndRefresh();\n    }","id":100311,"modified_method":"@Before\n    public void before() {\n        // fields contains a set of data that can be successfully registered\n        fields = new HashMap<String, String>();\n\n        // Conflicting fields - must be set for each test function to avoid\n        // \"not available\" errors\n        fields.put(\"email\", \"test@test.com\");\n        fields.put(\"username\", \"testusername\");\n        fields.put(\"name\", \"test\");\n        fields.put(\"password\", \"testpassword\");\n        homePage = new BasicWorkFlow().goToHome();\n        homePage.deleteCookiesAndRefresh();\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    @Category(BasicAcceptanceTest.class)\n    @Ignore(\"Captcha prevents test completion\")\n    public void registerSuccessful() {\n        String successMessage =\n                \"You will soon receive an email with a link to activate your account.\";\n        RegisterPage registerPage =\n                homePage.goToRegistration().setFields(fields);\n        assertThat(\"No errors are shown\", registerPage.getErrors().size(),\n                Matchers.equalTo(0));\n        homePage = registerPage.register();\n        assertThat(\"Signup is successful\", homePage.getNotificationMessage(),\n                Matchers.equalTo(successMessage));\n    }","id":100312,"modified_method":"@Test\n    @Category(BasicAcceptanceTest.class)\n    public void registerSuccessful() {\n        String successMessage = \"You will soon receive an email with a link \"+\n                \"to activate your account.\";\n        RegisterPage registerPage = homePage\n                .goToRegistration()\n                .setFields(fields);\n\n        assertThat(\"No errors are shown\", registerPage.getFieldErrors().size(),\n                Matchers.equalTo(0));\n\n        homePage = registerPage.register();\n\n        assertThat(\"Signup is successful\", homePage.getNotificationMessage(),\n                Matchers.equalTo(successMessage));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    @Ignore(\"Captcha prevents test completion\")\n    public void usernamePreExisting() {\n        String errorMsg = \"This username is not available\";\n        RegisterPage registerPage =\n                homePage.goToRegistration().enterUserName(\"admin\");\n        assertThat(\"Username not available message is shown\",\n                registerPage.waitForErrors(), Matchers.hasItem(errorMsg));\n    }","id":100313,"modified_method":"@Test\n    public void usernamePreExisting() {\n        String errorMsg = \"This username is not available\";\n        RegisterPage registerPage = homePage\n                .goToRegistration()\n                .enterUserName(\"admin\");\n        registerPage.defocus();\n\n        assertThat(\"Username not available message is shown\",\n                registerPage.waitForFieldErrors(), Matchers.hasItem(errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void requiredFields() {\n        String errorMsg = \"value is required\";\n        fields.put(\"name\", \"\");\n        fields.put(\"username\", \"\");\n        fields.put(\"email\", \"\");\n        fields.put(\"password\", \"\");\n        fields.put(\"confirmpassword\", \"\");\n\n        RegisterPage registerPage =\n                homePage.goToRegistration().setFields(fields);\n        assertThat(\"Value is required shows for all fields\",\n                registerPage.getErrors(), Matchers.contains(errorMsg, errorMsg,\n                        errorMsg, errorMsg, errorMsg));\n    }","id":100314,"modified_method":"@Test\n    @Ignore(\"RHBZ-1024150\")\n    public void requiredFields() {\n        String errorMsg = \"value is required\";\n        String emailErrorMsg =\n                \"lowercase letters and digits (regex \\\"^[a-z\\\\d_]{3,20}$\\\")\";\n        fields.put(\"name\", \"\");\n        fields.put(\"username\", \"\");\n        fields.put(\"email\", \"\");\n        fields.put(\"password\", \"\");\n\n        RegisterPage registerPage =\n                homePage.goToRegistration().setFields(fields);\n        assertThat(\"Value is required shows for all fields\",\n                registerPage.waitForFieldErrors(),\n                Matchers.contains(errorMsg, emailErrorMsg, errorMsg, errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void emailValidation() {\n        String errorMsg = \"not a well-formed email address\";\n        fields.put(\"email\", InvalidEmailAddressRFC2822.PLAIN_ADDRESS.toString());\n        fields.put(\"username\", \"emailvalidation\");\n        RegisterPage registerPage =\n                homePage.goToRegistration().setFields(fields);\n        assertThat(\"Email validation errors are shown\",\n                registerPage.getErrors(), Matchers.hasItem(errorMsg));\n    }","id":100315,"modified_method":"@Test\n    public void emailValidation() {\n        String errorMsg = \"not a well-formed email address\";\n        fields.put(\"email\",\n                InvalidEmailAddressRFC2822.PLAIN_ADDRESS.toString());\n        fields.put(\"username\", \"emailvalidation\");\n        RegisterPage registerPage = homePage\n                .goToRegistration()\n                .setFields(fields);\n\n        assertThat(\"Email validation errors are shown\",\n                registerPage.getFieldErrors(), Matchers.hasItem(errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    @Ignore(\"Unstable length matching \")\n    public void usernameLengthValidation() {\n        String errorMsg = \"size must be between 3 and 20\";\n        fields.put(\"email\", \"length.test@test.com\");\n        RegisterPage registerPage = homePage.goToRegistration();\n\n        fields.put(\"username\", \"bo\");\n        registerPage = registerPage.setFields(fields);\n        assertThat(\"Size errors are shown for string too short\",\n                registerPage.getErrors(), Matchers.hasItem(errorMsg));\n\n        fields.put(\"username\", \"testusername\");\n        registerPage = registerPage.setFields(fields);\n        assertThat(\"Size errors are not shown\", registerPage.getErrors(),\n                Matchers.not(Matchers.hasItem(errorMsg)));\n\n        fields.put(\"username\", \"12345678901234567890a\");\n        registerPage = registerPage.setFields(fields);\n        assertThat(\"Size errors are shown for string too long\",\n                registerPage.getErrors(), Matchers.hasItem(errorMsg));\n    }","id":100316,"modified_method":"@Test\n    public void usernameLengthValidation() {\n        fields.put(\"email\", \"length.test@test.com\");\n        RegisterPage registerPage = homePage.goToRegistration();\n\n        fields.put(\"username\", \"bo\");\n        registerPage = registerPage.setFields(fields);\n        assertThat(\"Size errors are shown for string too short\",\n                containsUsernameError(registerPage.getFieldErrors()));\n\n        fields.put(\"username\", \"testusername\");\n        registerPage = registerPage.setFields(fields);\n        assertThat(\"Size errors are not shown\",\n                !containsUsernameError(registerPage.getFieldErrors()));\n\n        fields.put(\"username\", \"12345678901234567890a\");\n        registerPage = registerPage.setFields(fields);\n        assertThat(\"Size errors are shown for string too long\",\n                containsUsernameError(registerPage.getFieldErrors()));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    public void signInFailure() {\n        SignInPage signInPage =\n                new LoginWorkFlow().signInFailure(\"nosuchuser\", \"password\");\n        assertThat(\"Error message is shown\",\n                signInPage.getNotificationMessage(), equalTo(\"Login failed\"));\n        assertThat(\"User has failed to log in\", !signInPage.hasLoggedIn());\n    }","id":100317,"modified_method":"@Test\n    public void signInFailure() {\n        SignInPage signInPage =\n                new LoginWorkFlow().signInFailure(\"nosuchuser\", \"password\");\n\n        assertThat(\"Error message is shown\",\n                signInPage.waitForFieldErrors(),\n                Matchers.hasItem(\"Login failed\"));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Theory\n    public void usernameCharacterValidation(String username) {\n        String errorMsg =\n                \"lowercase letters and digits (regex \\\"^[a-z\\\\d_]{3,20}$\\\")\";\n        RegisterPage registerPage =\n                new BasicWorkFlow().goToHome().goToRegistration();\n        registerPage = registerPage.enterUserName(username).clickTerms();\n        assertThat(\"Validation errors are shown\", registerPage.getErrors(),\n                Matchers.hasItem(errorMsg));\n    }","id":100318,"modified_method":"@Theory\n    public void usernameCharacterValidation(String username) {\n        String errorMsg =\n                \"lowercase letters and digits (regex \\\"^[a-z\\\\d_]{3,20}$\\\")\";\n        RegisterPage registerPage =\n                new BasicWorkFlow().goToHome().goToRegistration();\n        registerPage = registerPage.enterUserName(username);\n        registerPage.defocus();\n\n        assertThat(\"Validation errors are shown\",\n                registerPage.waitForFieldErrors(),\n                Matchers.hasItem(errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Theory\n    public void validEmailAcceptance(ValidEmailAddressRFC2822 emailAddress) {\n        String errorMsg = \"not a well-formed email address\";\n        RegisterPage registerPage =\n                new BasicWorkFlow().goToHome().goToRegistration();\n        registerPage =\n                registerPage.enterEmail(emailAddress.toString()).clickTerms();\n        assertThat(\"Email validation errors are not shown\",\n                registerPage.getErrors(),\n                Matchers.not(Matchers.hasItem(errorMsg)));\n\n    }","id":100319,"modified_method":"@Theory\n    public void validEmailAcceptance(ValidEmailAddressRFC2822 emailAddress) {\n        String errorMsg = \"not a well-formed email address\";\n        RegisterPage registerPage =\n                new BasicWorkFlow().goToHome().goToRegistration();\n        registerPage = registerPage.enterEmail(emailAddress.toString());\n        registerPage.defocus();\n\n        assertThat(\"Email validation errors are not shown\",\n                registerPage.getFieldErrors(),\n                Matchers.not(Matchers.hasItem(errorMsg)));\n\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Theory\n    public void inputValidationForID(String inputText) {\n        String errorMsg =\n                \"must start and end with letter or number, and contain only letters, numbers, underscores and hyphens.\";\n        // Yes reassign groupPage is necessary since JSF re-renders itself after\n        // each field input and selenium is not happy with it\n        groupPage =\n                groupPage.clearFields().inputGroupId(inputText)\n                        .inputGroupName(inputText).selectStatus(\"OBSOLETE\")\n                        .selectStatus(\"ACTIVE\") // this is to avoid\n                                                // ConcurrentModificationException\n                                                // thanks to JSF!!\n                        .saveGroupFailure();\n        assertThat(\"Validation error is displayed for input:\" + inputText,\n                groupPage.getErrors(1), Matchers.contains(errorMsg));\n    }","id":100320,"modified_method":"@Theory\n    public void inputValidationForID(String inputText) {\n        String errorMsg = \"must start and end with letter or number, and \"+\n                \"contain only letters, numbers, underscores and hyphens.\";\n\n        // Yes reassign groupPage is necessary since JSF re-renders itself after\n        // each field input and selenium is not happy with it\n        groupPage = groupPage\n                .clearFields()\n                .inputGroupId(inputText)\n                .inputGroupName(inputText)\n                .selectStatus(\"OBSOLETE\")\n                .selectStatus(\"ACTIVE\") // this is to avoid\n                                        // ConcurrentModificationException\n                                        // thanks to JSF!!\n                .saveGroupFailure();\n\n        assertThat(\"Validation error is displayed for input:\" + inputText,\n                groupPage.getErrors(1), Matchers.contains(errorMsg));\n    }","commit_id":"b0ef3bb12841850f5a8eccf24f870489f20b9b59","url":"https://github.com/zanata/zanata-server"},{"original_method":"public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tCollection<?> sourceCollection = (Collection<?>) source;\n\t\tif (sourceCollection.size() == 0) {\n\t\t\tif (targetType.typeEquals(String.class)) {\n\t\t\t\treturn \"\";\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tif (targetType.typeEquals(String.class)) {\n\t\t\t\tTypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();\n\t\t\t\tif (sourceElementType == TypeDescriptor.NULL) {\n\t\t\t\t\tsourceElementType = getElementType(sourceCollection);\n\t\t\t\t}\n\t\t\t\tif (sourceElementType == TypeDescriptor.NULL || sourceElementType.isAssignableTo(targetType)) {\n\t\t\t\t\tStringBuilder string = new StringBuilder();\n\t\t\t\t\tint i = 0;\n\t\t\t\t\tfor (Object element : sourceCollection) {\n\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\tstring.append(DELIMITER);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstring.append(element);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn string.toString();\n\t\t\t\t} else {\n\t\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceElementType, targetType);\n\t\t\t\t\tif (converter == null) {\n\t\t\t\t\t\tthrow new ConverterNotFoundException(sourceElementType, targetType);\n\t\t\t\t\t}\n\t\t\t\t\tStringBuilder string = new StringBuilder();\n\t\t\t\t\tint i = 0;\n\t\t\t\t\tfor (Object sourceElement : sourceCollection) {\n\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\tstring.append(DELIMITER);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tObject targetElement = invokeConverter(converter, sourceElement, sourceElementType, targetType);\n\t\t\t\t\t\tstring.append(targetElement);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn string.toString();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tObject firstElement = sourceCollection.iterator().next();\n\t\t\t\tTypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();\n\t\t\t\tif (sourceElementType == TypeDescriptor.NULL && firstElement != null) {\n\t\t\t\t\tsourceElementType = TypeDescriptor.valueOf(firstElement.getClass());\n\t\t\t\t}\n\t\t\t\tif (sourceElementType == TypeDescriptor.NULL || sourceElementType.isAssignableTo(targetType)) {\n\t\t\t\t\treturn firstElement;\n\t\t\t\t} else {\n\t\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceElementType, targetType);\n\t\t\t\t\tif (converter == null) {\n\t\t\t\t\t\tthrow new ConverterNotFoundException(sourceElementType, targetType);\n\t\t\t\t\t}\n\t\t\t\t\treturn invokeConverter(converter, firstElement, sourceElementType, targetType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":100321,"modified_method":"public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tCollection<?> sourceCollection = (Collection<?>) source;\n\t\tif (sourceCollection.size() == 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tObject firstElement = sourceCollection.iterator().next();\n\t\t\tTypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();\n\t\t\tif (sourceElementType == TypeDescriptor.NULL && firstElement != null) {\n\t\t\t\tsourceElementType = TypeDescriptor.valueOf(firstElement.getClass());\n\t\t\t}\n\t\t\tif (sourceElementType == TypeDescriptor.NULL || sourceElementType.isAssignableTo(targetType)) {\n\t\t\t\treturn firstElement;\n\t\t\t} else {\n\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceElementType, targetType);\n\t\t\t\tif (converter == null) {\n\t\t\t\t\tthrow new ConverterNotFoundException(sourceElementType, targetType);\n\t\t\t\t}\n\t\t\t\treturn invokeConverter(converter, firstElement, sourceElementType, targetType);\n\t\t\t}\n\t\t}\n\t}","commit_id":"5ce16e01eb7dd2b7ee8318ffb971e64682eb0275","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Populate the given ConversionService instance with all applicable default converters.\n\t */\n\tpublic static void addDefaultConverters(GenericConversionService conversionService) {\n\t\tconversionService.addGenericConverter(new ArrayToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToObjectConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToObjectConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToObjectConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ObjectToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ObjectToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ObjectToMapConverter(conversionService));\n\t\tconversionService.addConverter(new ObjectToStringConverter());\n\t\tconversionService.addConverter(new StringToBooleanConverter());\n\t\tconversionService.addConverter(new StringToCharacterConverter());\n\t\tconversionService.addConverter(new StringToLocaleConverter());\n\t\tconversionService.addConverter(new NumberToCharacterConverter());\n\t\tconversionService.addConverterFactory(new StringToNumberConverterFactory());\n\t\tconversionService.addConverterFactory(new StringToEnumConverterFactory());\n\t\tconversionService.addConverterFactory(new NumberToNumberConverterFactory());\n\t\tconversionService.addConverterFactory(new CharacterToNumberFactory());\n\t\tconversionService.addGenericConverter(new ObjectToObjectGenericConverter());\n\t\tconversionService.addGenericConverter(new IdToEntityConverter(conversionService));\n\t}","id":100322,"modified_method":"/**\n\t * Populate the given ConversionService instance with all applicable default converters.\n\t */\n\tpublic static void addDefaultConverters(GenericConversionService conversionService) {\n\t\tconversionService.addGenericConverter(new ArrayToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToStringConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ArrayToObjectConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToStringConverter(conversionService));\n\t\tconversionService.addGenericConverter(new CollectionToObjectConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToStringConverter(conversionService));\n\t\tconversionService.addGenericConverter(new MapToObjectConverter(conversionService));\n\t\tconversionService.addGenericConverter(new StringToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new StringToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new StringToMapConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ObjectToArrayConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ObjectToCollectionConverter(conversionService));\n\t\tconversionService.addGenericConverter(new ObjectToMapConverter(conversionService));\n\t\tconversionService.addConverterFactory(new CharacterToNumberFactory());\n\t\tconversionService.addConverter(new NumberToCharacterConverter());\n\t\tconversionService.addConverterFactory(new NumberToNumberConverterFactory());\n\t\tconversionService.addConverter(new StringToBooleanConverter());\n\t\tconversionService.addConverter(new StringToCharacterConverter());\n\t\tconversionService.addConverterFactory(new StringToEnumConverterFactory());\n\t\tconversionService.addConverter(new StringToLocaleConverter());\n\t\tconversionService.addConverterFactory(new StringToNumberConverterFactory());\t\n\t\tconversionService.addConverter(new ObjectToStringConverter());\n\t\tconversionService.addGenericConverter(new ObjectToObjectGenericConverter());\n\t\tconversionService.addGenericConverter(new IdToEntityConverter(conversionService));\n\t}","commit_id":"5ce16e01eb7dd2b7ee8318ffb971e64682eb0275","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\t\t\n\t\tTypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\n\t\tif (sourceType.typeEquals(String.class)) {\n\t\t\tString string = (String) source;\n\t\t\tString[] fields = StringUtils.commaDelimitedListToStringArray(string);\n\t\t\tif (sourceType.isAssignableTo(targetElementType)) {\n\t\t\t\treturn fields;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject target = Array.newInstance(targetElementType.getType(), fields.length);\n\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceType, targetElementType);\n\t\t\t\tif (converter == null) {\n\t\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetElementType);\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\t\t\tArray.set(target, i, invokeConverter(converter, fields[i], sourceType, targetElementType));\n\t\t\t\t}\n\t\t\t\treturn target;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tObject target = Array.newInstance(targetElementType.getType(), 1);\n\t\t\tif (sourceType.isAssignableTo(targetElementType)) {\n\t\t\t\tArray.set(target, 0, source);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceType, targetElementType);\n\t\t\t\tif (converter == null) {\n\t\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetElementType);\n\t\t\t\t}\n\t\t\t\tArray.set(target, 0, invokeConverter(converter, source, sourceType, targetElementType));\n\t\t\t}\n\t\t\treturn target;\n\t\t}\n\t}","id":100323,"modified_method":"public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tTypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\n\t\tObject target = Array.newInstance(targetElementType.getType(), 1);\n\t\tif (sourceType.isAssignableTo(targetElementType)) {\n\t\t\tArray.set(target, 0, source);\n\t\t} else {\n\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceType, targetElementType);\n\t\t\tif (converter == null) {\n\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetElementType);\n\t\t\t}\n\t\t\tArray.set(target, 0, invokeConverter(converter, source, sourceType, targetElementType));\n\t\t}\n\t\treturn target;\n\t}","commit_id":"5ce16e01eb7dd2b7ee8318ffb971e64682eb0275","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@SuppressWarnings(\"unchecked\")\n\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\t\t\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tTypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\n\t\tif (sourceType.typeEquals(String.class)) {\n\t\t\tString string = (String) source;\n\t\t\tString[] fields = StringUtils.commaDelimitedListToStringArray(string);\n\t\t\tCollection target = CollectionFactory.createCollection(targetType.getType(), fields.length);\n\t\t\tif (targetElementType == TypeDescriptor.NULL || sourceType.isAssignableTo(targetElementType)) {\n\t\t\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\t\t\ttarget.add(fields[i]);\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceType, targetElementType);\n\t\t\t\tif (converter == null) {\n\t\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetElementType);\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\t\t\tString sourceElement = fields[i];\n\t\t\t\t\tObject targetElement = invokeConverter(converter, sourceElement, sourceType, targetElementType);\n\t\t\t\t\ttarget.add(targetElement);\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn target;\n\n\t\t}\n\t\telse {\n\t\t\tCollection target = CollectionFactory.createCollection(targetType.getType(), 1);\t\t\t\n\t\t\tif (targetElementType == TypeDescriptor.NULL || sourceType.isAssignableTo(targetElementType)) {\n\t\t\t\ttarget.add(source);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceType, targetElementType);\n\t\t\t\tif (converter == null) {\n\t\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetElementType);\n\t\t\t\t}\n\t\t\t\ttarget.add(invokeConverter(converter, source, sourceType, targetElementType));\n\t\t\t}\n\t\t\treturn target;\n\t\t}\n\t}","id":100324,"modified_method":"@SuppressWarnings(\"unchecked\")\n\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tCollection target = CollectionFactory.createCollection(targetType.getType(), 1);\n\t\tTypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\n\t\tif (targetElementType == TypeDescriptor.NULL || sourceType.isAssignableTo(targetElementType)) {\n\t\t\ttarget.add(source);\n\t\t} else {\n\t\t\tGenericConverter converter = this.conversionService.getConverter(sourceType, targetElementType);\n\t\t\tif (converter == null) {\n\t\t\t\tthrow new ConverterNotFoundException(sourceType, targetElementType);\n\t\t\t}\n\t\t\ttarget.add(invokeConverter(converter, source, sourceType, targetElementType));\n\t\t}\n\t\treturn target;\n\t}","commit_id":"5ce16e01eb7dd2b7ee8318ffb971e64682eb0275","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@SuppressWarnings(\"unchecked\")\n\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tif (sourceType.typeEquals(String.class)) {\n\t\t\tString string = (String) source;\n\t\t\treturn this.conversionService.convert(loadProperties(string), TypeDescriptor.valueOf(Properties.class), targetType);\n\t\t} else {\n\t\t\tMap target = CollectionFactory.createMap(targetType.getType(), 1);\n\t\t\tTypeDescriptor targetKeyType = targetType.getMapKeyTypeDescriptor();\n\t\t\tTypeDescriptor targetValueType = targetType.getMapValueTypeDescriptor();\n\t\t\tboolean keysCompatible = false;\n\t\t\tif (sourceType != TypeDescriptor.NULL && sourceType.isAssignableTo(targetKeyType)) {\n\t\t\t\tkeysCompatible = true;\n\t\t\t}\n\t\t\tboolean valuesCompatible = false;\n\t\t\tif (sourceType != TypeDescriptor.NULL && sourceType.isAssignableTo(targetValueType)) {\n\t\t\t\tvaluesCompatible = true;\n\t\t\t}\n\t\t\tif (keysCompatible && valuesCompatible) {\n\t\t\t\ttarget.put(source, source);\n\t\t\t} else {\n\t\t\t\tMapEntryConverter converter = new MapEntryConverter(sourceType, sourceType, targetKeyType,\n\t\t\t\t\t\ttargetValueType, keysCompatible, valuesCompatible, this.conversionService);\n\t\t\t\tObject key = converter.convertKey(source);\n\t\t\t\tObject value = converter.convertValue(source);\n\t\t\t\ttarget.put(key, value);\n\t\t\t}\n\t\t\treturn target;\n\t\t}\n\t}","id":100325,"modified_method":"@SuppressWarnings(\"unchecked\")\n\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn this.conversionService.convertNullSource(sourceType, targetType);\n\t\t}\n\t\tMap target = CollectionFactory.createMap(targetType.getType(), 1);\n\t\tTypeDescriptor targetKeyType = targetType.getMapKeyTypeDescriptor();\n\t\tTypeDescriptor targetValueType = targetType.getMapValueTypeDescriptor();\n\t\tboolean keysCompatible = false;\n\t\tif (sourceType != TypeDescriptor.NULL && sourceType.isAssignableTo(targetKeyType)) {\n\t\t\tkeysCompatible = true;\n\t\t}\n\t\tboolean valuesCompatible = false;\n\t\tif (sourceType != TypeDescriptor.NULL && sourceType.isAssignableTo(targetValueType)) {\n\t\t\tvaluesCompatible = true;\n\t\t}\n\t\tif (keysCompatible && valuesCompatible) {\n\t\t\ttarget.put(source, source);\n\t\t} else {\n\t\t\tMapEntryConverter converter = new MapEntryConverter(sourceType, sourceType, targetKeyType, targetValueType,\n\t\t\t\t\tkeysCompatible, valuesCompatible, this.conversionService);\n\t\t\tObject key = converter.convertKey(source);\n\t\t\tObject value = converter.convertValue(source);\n\t\t\ttarget.put(key, value);\n\t\t}\n\t\treturn target;\n\t}","commit_id":"5ce16e01eb7dd2b7ee8318ffb971e64682eb0275","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public XFormsModel(XBLContainer container, String effectiveId, Model staticModel) {\n\n        // Remember static model\n        this.staticModel = staticModel;\n\n        // Set container\n        this.container = container;\n        this.containingDocument = container.getContainingDocument();\n\n        this.indentedLogger = containingDocument.getIndentedLogger(LOGGING_CATEGORY);\n\n        this.effectiveId = effectiveId;\n\n        // Extract list of instances ids\n        {\n            final Collection<Instance> staticInstances = staticModel.instancesMap().values();\n            if (staticInstances.isEmpty()) {\n                // No instance in this model\n                instanceIds = Collections.emptyList();\n                instances = Collections.emptyList();\n                instancesMap = Collections.emptyMap();\n            } else {\n                // At least one instance in this model\n                instanceIds = new ArrayList<String>(staticInstances.size());\n                for (final Instance instance : staticInstances)\n                    instanceIds.add(instance.staticId());\n                instances = Arrays.asList(new XFormsInstance[staticInstances.size()]);\n                instancesMap = new HashMap<String, XFormsInstance>(staticInstances.size());\n            }\n        }\n\n        // Get submissions\n        {\n            final List<Submission> staticSubmissions = staticModel.jSubmissions();\n            if (staticSubmissions.isEmpty()) {\n                // No submission in this model\n                submissions = Collections.emptyMap();\n            } else {\n                // At least one submission in this model\n                submissions = new HashMap<String, XFormsModelSubmission>();\n                for (final Submission staticSubmission : staticSubmissions)\n                    submissions.put(staticSubmission.staticId(), new XFormsModelSubmission(this.container, staticSubmission, this));\n            }\n        }\n\n        // Get all event handlers\n        for (final EventHandlerImpl staticEventHandler : staticModel.jEventHandlers()) {\n            final ElementAnalysis staticParent = staticEventHandler.parent().get();\n\n            final XFormsEventObserver parent;\n            if (staticParent instanceof Submission) {\n                parent = submissions.get(staticParent.staticId());\n            } else {\n                parent = XFormsModel.this;\n            }\n\n            actions.put(staticEventHandler.staticId(), new XFormsModelAction(parent, staticEventHandler));\n        }\n\n        // Create binds object\n        binds = XFormsModelBinds.create(this);\n        mustBindValidate = binds != null;\n\n        // Create context stack\n        this.contextStack = new XFormsContextStack(container());\n\n        // Temporarily initialize the evaluation context to an empty context, so that handlers upon xforms-model-construct can work\n        this.defaultEvaluationContext = XFormsContextStack.defaultContext(null, container, this);\n    }","id":100326,"modified_method":"public XFormsModel(XBLContainer container, String effectiveId, Model staticModel) {\n        super(container, effectiveId, staticModel);\n\n        // Remember static model\n        this.staticModel = staticModel;\n\n        // Set container\n        this.container = container;\n\n        this.effectiveId = effectiveId;\n\n        // Extract list of instances ids\n        {\n            final Collection<Instance> staticInstances = staticModel.instancesMap().values();\n            if (staticInstances.isEmpty()) {\n                // No instance in this model\n                instanceIds = Collections.emptyList();\n                instances = Collections.emptyList();\n                instancesMap = Collections.emptyMap();\n            } else {\n                // At least one instance in this model\n                instanceIds = new ArrayList<String>(staticInstances.size());\n                for (final Instance instance : staticInstances)\n                    instanceIds.add(instance.staticId());\n                instances = Arrays.asList(new XFormsInstance[staticInstances.size()]);\n                instancesMap = new HashMap<String, XFormsInstance>(staticInstances.size());\n            }\n        }\n\n        // Get submissions\n        {\n            final List<Submission> staticSubmissions = staticModel.jSubmissions();\n            if (staticSubmissions.isEmpty()) {\n                // No submission in this model\n                submissions = Collections.emptyMap();\n            } else {\n                // At least one submission in this model\n                submissions = new HashMap<String, XFormsModelSubmission>();\n                for (final Submission staticSubmission : staticSubmissions)\n                    submissions.put(staticSubmission.staticId(), new XFormsModelSubmission(this.container, staticSubmission, this));\n            }\n        }\n\n        // Get all event handlers\n        for (final EventHandlerImpl staticEventHandler : staticModel.jEventHandlers()) {\n            final ElementAnalysis staticParent = staticEventHandler.parent().get();\n\n            final XFormsEventObserver parent;\n            if (staticParent instanceof Submission) {\n                parent = submissions.get(staticParent.staticId());\n            } else {\n                parent = XFormsModel.this;\n            }\n\n            actions.put(staticEventHandler.staticId(), new XFormsModelAction(parent, staticEventHandler));\n        }\n\n        // Create binds object\n        _binds = XFormsModelBinds.create(this);\n        _mustBindValidate = _binds != null;\n\n        // Create context stack\n        this.contextStack = new XFormsContextStack(container());\n\n        // Temporarily initialize the evaluation context to an empty context, so that handlers upon xforms-model-construct can work\n        this.defaultEvaluationContext = XFormsContextStack.defaultContext(null, container, this);\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void loadInitialExternalInstanceFromCacheIfNeeded(Instance instance) {\n        final String instanceResource = instance.instanceSource().get();\n        try {\n            if (instance.cache() && ! ProcessorImpl.isProcessorInputScheme(instanceResource)) {\n                // Instance 1) has cache hint and 2) is not input:*, so it can be cached\n                // NOTE: We don't allow sharing for input:* URLs as the data will likely differ per request\n\n                // TODO: This doesn't handle optimized submissions.\n\n                // NOTE: No XInclude supported to read instances with @src for now\n                final InstanceCaching caching = InstanceCaching.fromInstance(instance, resolveInstanceURL(instance), null);\n                final DocumentInfo documentInfo =\n                    XFormsServerSharedInstancesCache.findContentOrLoad(\n                            indentedLogger,\n                            instance,\n                            caching,\n                            instance.readonly(),\n                            INSTANCE_LOADER);\n\n                indexInstance(\n                    new XFormsInstance(\n                        this,\n                        instance,\n                        Option.<InstanceCaching>apply(caching),\n                        documentInfo,\n                        instance.readonly(),\n                        false,\n                        true));\n            } else {\n                // Instance cannot be cached\n\n                // NOTE: Optimizing with include() for servlets has limitations, in particular\n                // the proper split between servlet path and path info is not done.\n\n                // TODO: Temporary. Use XFormsModelSubmission to load instances instead\n                if (!NetUtils.urlHasProtocol(instanceResource) && containingDocument.getContainerType().equals(\"portlet\"))\n                    throw new UnsupportedOperationException(\"<xf:instance src=\\\"\\\"> with relative path within a portlet\");\n\n                // Use full resolved resource URL\n                // - absolute URL, e.g. http://example.org/instance.xml\n                // - absolute path relative to server root, e.g. /orbeon/foo/bar/instance.xml\n                loadNonCachedExternalInstance(instance);\n            }\n        } catch (Exception e) {\n            final ValidationException validationException\n                = OrbeonLocationException.wrapException(e, new ExtendedLocationData(instance.locationData(), \"reading external instance\", instance.element()));\n            Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, instanceResource, validationException));\n        }\n    }","id":100327,"modified_method":"private void loadInitialExternalInstanceFromCacheIfNeeded(Instance instance) {\n        final String instanceResource = instance.instanceSource().get();\n        try {\n            if (instance.cache() && ! ProcessorImpl.isProcessorInputScheme(instanceResource)) {\n                // Instance 1) has cache hint and 2) is not input:*, so it can be cached\n                // NOTE: We don't allow sharing for input:* URLs as the data will likely differ per request\n\n                // TODO: This doesn't handle optimized submissions.\n\n                // NOTE: No XInclude supported to read instances with @src for now\n                final InstanceCaching caching = InstanceCaching.fromInstance(instance, resolveInstanceURL(instance), null);\n                final DocumentInfo documentInfo =\n                    XFormsServerSharedInstancesCache.findContentOrLoad(\n                            indentedLogger(),\n                            instance,\n                            caching,\n                            instance.readonly(),\n                            INSTANCE_LOADER);\n\n                indexInstance(\n                    new XFormsInstance(\n                        this,\n                        instance,\n                        Option.apply(caching),\n                        documentInfo,\n                        instance.readonly(),\n                        false,\n                        true));\n            } else {\n                // Instance cannot be cached\n\n                // NOTE: Optimizing with include() for servlets has limitations, in particular\n                // the proper split between servlet path and path info is not done.\n\n                // TODO: Temporary. Use XFormsModelSubmission to load instances instead\n                if (!NetUtils.urlHasProtocol(instanceResource) && containingDocument().getContainerType().equals(\"portlet\"))\n                    throw new UnsupportedOperationException(\"<xf:instance src=\\\"\\\"> with relative path within a portlet\");\n\n                // Use full resolved resource URL\n                // - absolute URL, e.g. http://example.org/instance.xml\n                // - absolute path relative to server root, e.g. /orbeon/foo/bar/instance.xml\n                loadNonCachedExternalInstance(instance);\n            }\n        } catch (Exception e) {\n            final ValidationException validationException\n                = OrbeonLocationException.wrapException(e, new ExtendedLocationData(instance.locationData(), \"reading external instance\", instance.element()));\n            Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, instanceResource, validationException));\n        }\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void rebuildRecalculateRevalidateIfNeeded() {\n        // Process deferred behavior\n        final DeferredActionContext currentDeferredActionContext = deferredActionContext;\n        // NOTE: We used to clear deferredActionContext , but this caused events to be dispatched in a different\n        // order. So we are now leaving the flag as is, and waiting until they clear themselves.\n\n        if (currentDeferredActionContext.rebuild) {\n            containingDocument.startOutermostActionHandler();\n            Dispatch.dispatchEvent(new XFormsRebuildEvent(this));\n            containingDocument.endOutermostActionHandler();\n        }\n        if (currentDeferredActionContext.recalculate) {\n            containingDocument.startOutermostActionHandler();\n            Dispatch.dispatchEvent(new XFormsRecalculateEvent(this));\n            containingDocument.endOutermostActionHandler();\n        }\n        if (currentDeferredActionContext.revalidate) {\n            containingDocument.startOutermostActionHandler();\n            Dispatch.dispatchEvent(new XFormsRevalidateEvent(this));\n            containingDocument.endOutermostActionHandler();\n        }\n    }","id":100328,"modified_method":"public void rebuildRecalculateRevalidateIfNeeded() {\n        // Process deferred behavior\n        final DeferredActionContext currentDeferredActionContext = deferredActionContext();\n        // NOTE: We used to clear deferredActionContext , but this caused events to be dispatched in a different\n        // order. So we are now leaving the flag as is, and waiting until they clear themselves.\n\n        if (currentDeferredActionContext.rebuild()) {\n            containingDocument().startOutermostActionHandler();\n            Dispatch.dispatchEvent(new XFormsRebuildEvent(this));\n            containingDocument().endOutermostActionHandler();\n        }\n        if (currentDeferredActionContext.recalculateRevalidate()) {\n            containingDocument().startOutermostActionHandler();\n            Dispatch.dispatchEvent(new XFormsRecalculateEvent(this));// xxx REVALIDATE\n            containingDocument().endOutermostActionHandler();\n        }\n        if (currentDeferredActionContext.revalidate()) {\n            containingDocument().startOutermostActionHandler();\n            Dispatch.dispatchEvent(new XFormsRevalidateEvent(this));\n            containingDocument().endOutermostActionHandler();\n        }\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public IndentedLogger getIndentedLogger() {\n        return indentedLogger;\n    }","id":100329,"modified_method":"public IndentedLogger getIndentedLogger() {\n        return indentedLogger();\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public XFormsModelBinds getBinds() {\n        return binds;\n    }","id":100330,"modified_method":"public XFormsModelBinds getBinds() {\n        return _binds;\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void doModelConstruct(boolean rrr) {\n        final Element modelElement = staticModel.element();\n\n        // 1. All XML Schema loaded (throws xforms-link-exception)\n\n        try {\n            loadSchemasIfNeeded();\n        } catch (Exception e) {\n            final String schemaAttribute = modelElement.attributeValue(XFormsConstants.SCHEMA_QNAME);\n            Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, schemaAttribute, e));\n        }\n\n        // 2. Create XPath data model from instance (inline or external) (throws xforms-link-exception)\n        //    Instance may not be specified.\n\n        {\n            // Build initial instance documents\n\n            // Iterate through all instances\n            int instancePosition = 0;\n            for (final Instance instance : staticModel.instancesMap().values()) {\n                // Skip processing in case somebody has already set this particular instance\n                // FIXME: can this ever happen?\n                if (instances.get(instancePosition++) == null) {\n                    // Load instance. This might throw an exception event (and therefore a Java exception) in case of fatal problem.\n                    loadInitialInstance(instance);\n                }\n            }\n        }\n\n        // 3. P3P (N/A)\n\n        // 4. Instance data is constructed. Evaluate binds:\n        //    a. Evaluate nodeset\n        //    b. Apply model item properties on nodes\n        //    c. Throws xforms-binding-exception if the node has already model item property with same name\n        // TODO: a, b, c\n\n        // 5. xforms-rebuild, xforms-recalculate, xforms-revalidate\n        deferredActionContext.markStructuralChange();\n\n        if (rrr) {\n            doRebuild();\n            doRecalculate(false);\n            doRevalidate();\n        }\n    }","id":100331,"modified_method":"private void doModelConstruct(boolean rrr) {\n        final Element modelElement = staticModel.element();\n\n        // 1. All XML Schema loaded (throws xforms-link-exception)\n\n        try {\n            schemaValidator();\n        } catch (Exception e) {\n            final String schemaAttribute = modelElement.attributeValue(XFormsConstants.SCHEMA_QNAME);\n            Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, schemaAttribute, e));\n        }\n\n        // 2. Create XPath data model from instance (inline or external) (throws xforms-link-exception)\n        //    Instance may not be specified.\n\n        {\n            // Build initial instance documents\n\n            // Iterate through all instances\n            int instancePosition = 0;\n            for (final Instance instance : staticModel.instancesMap().values()) {\n                // Skip processing in case somebody has already set this particular instance\n                // FIXME: can this ever happen?\n                if (instances.get(instancePosition++) == null) {\n                    // Load instance. This might throw an exception event (and therefore a Java exception) in case of fatal problem.\n                    loadInitialInstance(instance);\n                }\n            }\n        }\n\n        // 3. P3P (N/A)\n\n        // 4. Instance data is constructed. Evaluate binds:\n        //    a. Evaluate nodeset\n        //    b. Apply model item properties on nodes\n        //    c. Throws xforms-binding-exception if the node has already model item property with same name\n        // TODO: a, b, c\n\n        // 5. xforms-rebuild, xforms-recalculate, xforms-revalidate\n        deferredActionContext().markStructuralChange();\n\n        if (rrr) {\n            doRebuild();\n            doRecalculate(false);\n            doRevalidate();\n        }\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void doRefresh() {\n        // This is called in response to dispatching xforms-refresh to this model, whether using the xf:refresh\n        // action or by dispatching the event by hand.\n\n        // NOTE: If the refresh flag is not set, we do not call synchronizeAndRefresh() because that would only have the\n        // side effect of performing RRR on models, but  but not update the UI, which wouldn't make sense for xforms-refresh.\n        // This said, is unlikely (impossible?) that the RRR flags would be set but not the refresh flag.\n        // FIXME: See https://github.com/orbeon/orbeon-forms/issues/1533\n        if (containingDocument.getControls().isRequireRefresh()) {\n            container().synchronizeAndRefresh();\n        }\n    }","id":100332,"modified_method":"private void doRefresh() {\n        // This is called in response to dispatching xforms-refresh to this model, whether using the xf:refresh\n        // action or by dispatching the event by hand.\n\n        // NOTE: If the refresh flag is not set, we do not call synchronizeAndRefresh() because that would only have the\n        // side effect of performing RRR on models, but  but not update the UI, which wouldn't make sense for xforms-refresh.\n        // This said, is unlikely (impossible?) that the RRR flags would be set but not the refresh flag.\n        // FIXME: See https://github.com/orbeon/orbeon-forms/issues/1533\n        if (containingDocument().getControls().isRequireRefresh()) {\n            container().synchronizeAndRefresh();\n        }\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Restore all the instances serialized as children of the given container element.\n     */\n    public void restoreInstances() {\n\n        // Find serialized instances from context\n        final List<InstanceState> instanceStates = Controls.restoringInstancesJava();\n\n        // Get instances from dynamic state first\n        if (instanceStates != null) {\n            for (final InstanceState state : instanceStates) {\n                // Check that the instance belongs to this model\n                if (effectiveId.equals(state.modelEffectiveId())) {\n                    // NOTE: Here instance must contain document\n                    XFormsInstance.restoreInstanceFromState(this, state, INSTANCE_LOADER);\n                    indentedLogger.logDebug(\"restore\", \"restoring instance from dynamic state\", \"model effective id\", effectiveId, \"instance effective id\", state.effectiveId());\n                }\n            }\n        }\n\n        // Then get missing instances from static state if necessary\n        // This can happen if the instance is not replaced, readonly and inline\n        for (final Instance instance : container().getPartAnalysis().getInstances(getPrefixedId()))\n            if (instancesMap.get(instance.staticId()) == null)\n                setInlineInstance(instance);\n    }","id":100333,"modified_method":"/**\n     * Restore all the instances serialized as children of the given container element.\n     */\n    public void restoreInstances() {\n\n        // Find serialized instances from context\n        final List<InstanceState> instanceStates = Controls.restoringInstancesJava();\n\n        // Get instances from dynamic state first\n        if (instanceStates != null) {\n            for (final InstanceState state : instanceStates) {\n                // Check that the instance belongs to this model\n                if (effectiveId.equals(state.modelEffectiveId())) {\n                    // NOTE: Here instance must contain document\n                    XFormsInstance.restoreInstanceFromState(this, state, INSTANCE_LOADER);\n                    indentedLogger().logDebug(\"restore\", \"restoring instance from dynamic state\", \"model effective id\", effectiveId, \"instance effective id\", state.effectiveId());\n                }\n            }\n        }\n\n        // Then get missing instances from static state if necessary\n        // This can happen if the instance is not replaced, readonly and inline\n        for (final Instance instance : container().getPartAnalysis().getInstances(getPrefixedId()))\n            if (instancesMap.get(instance.staticId()) == null)\n                setInlineInstance(instance);\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void loadNonCachedExternalInstance(Instance instance) {\n\n        final String absoluteURLString = resolveInstanceURL(instance);\n\n        // Connect using external protocol\n\n        final Object instanceDocument;// Document or DocumentInfo\n        if (containingDocument.getURIResolver() == null) {\n            // Connect directly if there is no resolver or if the instance is globally cached\n            // NOTE: If there is no resolver, URLs of the form input:* are not allowed\n\n            assert ! ProcessorImpl.isProcessorInputScheme(absoluteURLString);\n\n            if (indentedLogger.isDebugEnabled())\n                indentedLogger.logDebug(\"load\", \"getting document from URI\", \"URI\", absoluteURLString);\n\n            final URL absoluteResolvedURL = URLFactory.createURL(absoluteURLString);\n\n            final scala.collection.immutable.Map<String, String[]> headers =\n                Connection.jBuildConnectionHeaders(absoluteResolvedURL.getProtocol(), instance.credentialsOrNull(), null,\n                        XFormsProperties.getForwardSubmissionHeaders(containingDocument), indentedLogger);\n\n            final ConnectionResult connectionResult = Connection.jApply(\n                \"GET\", absoluteResolvedURL, instance.credentialsOrNull(), null,\n                headers, true, BaseSubmission.isLogBody(), indentedLogger).connect(true);\n\n            try {\n                // Handle connection errors\n                if (connectionResult.statusCode() != 200) {\n                    throw new OXFException(\"Got invalid return code while loading instance: \" + absoluteURLString + \", \" + connectionResult.statusCode());\n                }\n\n                // TODO: Handle validating and XInclude!\n\n                // Read result as XML\n                // TODO: use submission code\n                if (!instance.readonly()) {\n                    instanceDocument = TransformerUtils.readDom4j(connectionResult.getResponseInputStream(), connectionResult.resourceURI(), false, true);\n                } else {\n                    instanceDocument = TransformerUtils.readTinyTree(XPath.GlobalConfiguration(),\n                            connectionResult.getResponseInputStream(), connectionResult.resourceURI(), false, true);\n                }\n            } finally {\n                // Clean-up\n                connectionResult.close();\n            }\n\n        } else {\n            // Optimized case that uses the provided resolver\n            if (indentedLogger.isDebugEnabled())\n                indentedLogger.logDebug(\"load\", \"getting document from resolver\", \"URI\", absoluteURLString);\n\n            // TODO: Handle validating and handleXInclude!\n\n            if (!instance.readonly()) {\n                instanceDocument = containingDocument.getURIResolver().readAsDom4j(\n                        absoluteURLString, instance.credentialsOrNull(),\n                        XFormsProperties.getForwardSubmissionHeaders(containingDocument));\n            } else {\n                instanceDocument = containingDocument.getURIResolver().readAsTinyTree(XPath.GlobalConfiguration(),\n                        absoluteURLString, instance.credentialsOrNull(),\n                        XFormsProperties.getForwardSubmissionHeaders(containingDocument));\n            }\n        }\n\n        // Set instance and associated information if everything went well\n        // NOTE: No XInclude supported to read instances with @src for now\n        final DocumentInfo documentInfo = XFormsInstance.createDocumentInfo(instanceDocument, instance.exposeXPathTypes());\n        indexInstance(XFormsInstance.apply(this, instance, documentInfo));\n    }","id":100334,"modified_method":"private void loadNonCachedExternalInstance(Instance instance) {\n\n        final String absoluteURLString = resolveInstanceURL(instance);\n\n        // Connect using external protocol\n\n        final Object instanceDocument;// Document or DocumentInfo\n        if (containingDocument().getURIResolver() == null) {\n            // Connect directly if there is no resolver or if the instance is globally cached\n            // NOTE: If there is no resolver, URLs of the form input:* are not allowed\n\n            assert ! ProcessorImpl.isProcessorInputScheme(absoluteURLString);\n\n            if (indentedLogger().isDebugEnabled())\n                indentedLogger().logDebug(\"load\", \"getting document from URI\", \"URI\", absoluteURLString);\n\n            final URL absoluteResolvedURL = URLFactory.createURL(absoluteURLString);\n\n            final scala.collection.immutable.Map<String, String[]> headers =\n                Connection.jBuildConnectionHeaders(absoluteResolvedURL.getProtocol(), instance.credentialsOrNull(), null,\n                        XFormsProperties.getForwardSubmissionHeaders(containingDocument()), indentedLogger());\n\n            final ConnectionResult connectionResult = Connection.jApply(\n                \"GET\", absoluteResolvedURL, instance.credentialsOrNull(), null,\n                headers, true, BaseSubmission.isLogBody(), indentedLogger()).connect(true);\n\n            try {\n                // Handle connection errors\n                if (connectionResult.statusCode() != 200) {\n                    throw new OXFException(\"Got invalid return code while loading instance: \" + absoluteURLString + \", \" + connectionResult.statusCode());\n                }\n\n                // TODO: Handle validating and XInclude!\n\n                // Read result as XML\n                // TODO: use submission code\n                if (!instance.readonly()) {\n                    instanceDocument = TransformerUtils.readDom4j(connectionResult.getResponseInputStream(), connectionResult.resourceURI(), false, true);\n                } else {\n                    instanceDocument = TransformerUtils.readTinyTree(XPath.GlobalConfiguration(),\n                            connectionResult.getResponseInputStream(), connectionResult.resourceURI(), false, true);\n                }\n            } finally {\n                // Clean-up\n                connectionResult.close();\n            }\n\n        } else {\n            // Optimized case that uses the provided resolver\n            if (indentedLogger().isDebugEnabled())\n                indentedLogger().logDebug(\"load\", \"getting document from resolver\", \"URI\", absoluteURLString);\n\n            // TODO: Handle validating and handleXInclude!\n\n            if (!instance.readonly()) {\n                instanceDocument = containingDocument().getURIResolver().readAsDom4j(\n                        absoluteURLString, instance.credentialsOrNull(),\n                        XFormsProperties.getForwardSubmissionHeaders(containingDocument()));\n            } else {\n                instanceDocument = containingDocument().getURIResolver().readAsTinyTree(XPath.GlobalConfiguration(),\n                        absoluteURLString, instance.credentialsOrNull(),\n                        XFormsProperties.getForwardSubmissionHeaders(containingDocument()));\n            }\n        }\n\n        // Set instance and associated information if everything went well\n        // NOTE: No XInclude supported to read instances with @src for now\n        final DocumentInfo documentInfo = XFormsInstance.createDocumentInfo(instanceDocument, instance.exposeXPathTypes());\n        indexInstance(XFormsInstance.apply(this, instance, documentInfo));\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Resolve an object. This optionally depends on a source, and involves resolving whether the source is within a\n     * repeat or a component.\n     *\n     * @param sourceEffectiveId  effective id of the source, or null\n     * @param targetStaticId     static id of the target\n     * @param contextItem        context item, or null (used for bind resolution only)\n     * @return                   object, or null if not found\n     */\n    public XFormsObject resolveObjectById(String sourceEffectiveId, String targetStaticId, Item contextItem) {\n\n        if (XFormsUtils.isEffectiveId(targetStaticId) || XFormsUtils.isAbsoluteId(targetStaticId))\n            throw new OXFException(\"Target id must be static id: \" + targetStaticId);\n\n        // Check this id\n        if (targetStaticId.equals(getId()))\n            return this;\n\n        // Search instances\n        final XFormsInstance instance = instancesMap.get(targetStaticId);\n        if (instance != null)\n            return instance;\n\n        // Search submissions\n        if (submissions != null) {\n            final XFormsModelSubmission resultSubmission = submissions.get(targetStaticId);\n            if (resultSubmission != null)\n                return resultSubmission;\n        }\n\n        // Search actions\n        {\n            final XFormsModelAction action = actions.get(targetStaticId);\n            if (action != null)\n                return action;\n        }\n\n        // Search binds\n        if (binds != null) {\n            final RuntimeBind bind = binds.resolveBind(targetStaticId, contextItem);\n            if (bind != null)\n                return bind;\n        }\n\n        return null;\n    }","id":100335,"modified_method":"/**\n     * Resolve an object. This optionally depends on a source, and involves resolving whether the source is within a\n     * repeat or a component.\n     *\n     * @param sourceEffectiveId  effective id of the source, or null\n     * @param targetStaticId     static id of the target\n     * @param contextItem        context item, or null (used for bind resolution only)\n     * @return                   object, or null if not found\n     */\n    public XFormsObject resolveObjectById(String sourceEffectiveId, String targetStaticId, Item contextItem) {\n\n        if (XFormsUtils.isEffectiveId(targetStaticId) || XFormsUtils.isAbsoluteId(targetStaticId))\n            throw new OXFException(\"Target id must be static id: \" + targetStaticId);\n\n        // Check this id\n        if (targetStaticId.equals(getId()))\n            return this;\n\n        // Search instances\n        final XFormsInstance instance = instancesMap.get(targetStaticId);\n        if (instance != null)\n            return instance;\n\n        // Search submissions\n        if (submissions != null) {\n            final XFormsModelSubmission resultSubmission = submissions.get(targetStaticId);\n            if (resultSubmission != null)\n                return resultSubmission;\n        }\n\n        // Search actions\n        {\n            final XFormsModelAction action = actions.get(targetStaticId);\n            if (action != null)\n                return action;\n        }\n\n        // Search binds\n        if (_binds != null) {\n            final RuntimeBind bind = _binds.resolveBind(targetStaticId, contextItem);\n            if (bind != null)\n                return bind;\n        }\n\n        return null;\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void loadInitialInstance(Instance instance) {\n\n        indentedLogger.startHandleOperation(\"load\", \"loading instance\", \"instance id\", instance.staticId());\n        {\n            if (instance.useExternalContent()) {\n                // Load from @src or @resource\n                loadInitialExternalInstanceFromCacheIfNeeded(instance);\n            } else if (instance.useInlineContent()) {\n                // Load from inline content\n                try {\n                    setInlineInstance(instance);\n                } catch (Exception e) {\n                    final LocationData extendedLocationData = new ExtendedLocationData(instance.locationData(), \"processing XForms instance\", instance.element());\n                    final Throwable throwable = new ValidationException(\"Error extracting or setting inline instance\", extendedLocationData);\n                    Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, null, throwable));\n                }\n            } else {\n                // Everything missing\n                final LocationData extendedLocationData = new ExtendedLocationData(instance.locationData(), \"processing XForms instance\", instance.element());\n                final Throwable throwable = new ValidationException(\"Required @src attribute, @resource attribute, or inline content for instance: \" + instance.staticId(), extendedLocationData);\n                Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, \"\", throwable));\n            }\n        }\n        indentedLogger.endHandleOperation();\n    }","id":100336,"modified_method":"private void loadInitialInstance(Instance instance) {\n\n        indentedLogger().startHandleOperation(\"load\", \"loading instance\", \"instance id\", instance.staticId());\n        {\n            if (instance.useExternalContent()) {\n                // Load from @src or @resource\n                loadInitialExternalInstanceFromCacheIfNeeded(instance);\n            } else if (instance.useInlineContent()) {\n                // Load from inline content\n                try {\n                    setInlineInstance(instance);\n                } catch (Exception e) {\n                    final LocationData extendedLocationData = new ExtendedLocationData(instance.locationData(), \"processing XForms instance\", instance.element());\n                    final Throwable throwable = new ValidationException(\"Error extracting or setting inline instance\", extendedLocationData);\n                    Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, null, throwable));\n                }\n            } else {\n                // Everything missing\n                final LocationData extendedLocationData = new ExtendedLocationData(instance.locationData(), \"processing XForms instance\", instance.element());\n                final Throwable throwable = new ValidationException(\"Required @src attribute, @resource attribute, or inline content for instance: \" + instance.staticId(), extendedLocationData);\n                Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, \"\", throwable));\n            }\n        }\n        indentedLogger().endHandleOperation();\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void markStructuralChange(XFormsInstance instance) {\n        // Set the flags\n        deferredActionContext.markStructuralChange();\n\n        // Notify dependencies of the change\n        containingDocument.getXPathDependencies().markStructuralChange(this, instance);\n    }","id":100337,"modified_method":"public void markStructuralChange(XFormsInstance instance) {\n        // Set the flags\n        deferredActionContext().markStructuralChange();\n\n        // Notify dependencies of the change\n        containingDocument().getXPathDependencies().markStructuralChange(this, instance);\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Restore the state of the model when the model object was just recreated.\n     */\n    public void restoreState() {\n        // Ensure schema are loaded\n        loadSchemasIfNeeded();\n\n        // Refresh binds, but do not recalculate (only evaluate \"computed expression binds\")\n        deferredActionContext.rebuild = true;\n        deferredActionContext.revalidate = true;\n\n        doRebuild();\n        if (binds != null)\n            binds.applyComputedExpressionBinds();\n        doRevalidate();\n    }","id":100338,"modified_method":"/**\n     * Restore the state of the model when the model object was just recreated.\n     */\n    public void restoreState() {\n        // Ensure schema are loaded\n        schemaValidator();\n\n        // Refresh binds, but do not recalculate (only evaluate \"computed expression binds\")\n        deferredActionContext().markRebuild();\n        deferredActionContext().markRevalidate(); // xxx REVALIDATE\n\n        doRebuild();\n        if (_binds != null)\n            _binds.applyComputedExpressionBinds();\n        doRevalidate();\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void doRebuild() {\n\n        // Rebuild bind tree only if needed\n        if (deferredActionContext.rebuild) {\n            // Re-evaluate top-level variables if needed\n            resetAndEvaluateVariables();\n\n            if (hasInstancesAndBinds()) {\n                // NOTE: contextStack.resetBindingContext(this) called in evaluateVariables()\n                binds.rebuild();\n\n                // Controls may have @bind or bind() references, so we need to mark them as dirty. Will need dependencies for controls to fix this.\n                // TODO: Handle XPathDependencies\n                container().requireRefresh();\n            }\n\n            // \"Actions that directly invoke rebuild, recalculate, revalidate, or refresh always\n            // have an immediate effect, and clear the corresponding flag.\"\n            deferredActionContext.rebuild = false;\n        }\n\n        // Notify dependencies\n        containingDocument.getXPathDependencies().rebuildDone(staticModel);\n    }","id":100339,"modified_method":"public void doRebuild() {\n\n        // Rebuild bind tree only if needed\n        if (deferredActionContext().rebuild()) {\n            // Re-evaluate top-level variables if needed\n            resetAndEvaluateVariables();\n\n            if (hasInstancesAndBinds()) {\n                // NOTE: contextStack.resetBindingContext(this) called in evaluateVariables()\n                _binds.rebuild();\n\n                // Controls may have @bind or bind() references, so we need to mark them as dirty. Will need dependencies for controls to fix this.\n                // TODO: Handle XPathDependencies\n                container().requireRefresh();\n            }\n\n            // \"Actions that directly invoke rebuild, recalculate, revalidate, or refresh always\n            // have an immediate effect, and clear the corresponding flag.\"\n            deferredActionContext().clearRebuild();\n        }\n\n        // Notify dependencies\n        containingDocument().getXPathDependencies().rebuildDone(staticModel);\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void markValueChange(NodeInfo nodeInfo, boolean isCalculate) {\n        // Set the flags\n        deferredActionContext.markValueChange(isCalculate);\n\n        // Notify dependencies of the change\n        if (nodeInfo != null)\n            containingDocument.getXPathDependencies().markValueChanged(this, nodeInfo);\n    }","id":100340,"modified_method":"public void markValueChange(NodeInfo nodeInfo, boolean isCalculate) {\n        // Set the flags\n        deferredActionContext().markValueChange(isCalculate);\n\n        // Notify dependencies of the change\n        if (nodeInfo != null)\n            containingDocument().getXPathDependencies().markValueChanged(this, nodeInfo);\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private String resolveInstanceURL(Instance instance) {\n        return XFormsUtils.resolveServiceURL(\n            containingDocument,\n            instance.element(),\n            instance.instanceSource().get(),\n            ExternalContext.Response.REWRITE_MODE_ABSOLUTE);\n    }","id":100341,"modified_method":"private String resolveInstanceURL(Instance instance) {\n        return XFormsUtils.resolveServiceURL(\n            containingDocument(),\n            instance.element(),\n            instance.instanceSource().get(),\n            ExternalContext.Response.REWRITE_MODE_ABSOLUTE);\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private XFormsModelBinds(XFormsModel model) {\n        super(model);\n        this.model = model;\n\n        this.indentedLogger = model.getIndentedLogger();\n        this.containingDocument = model.containingDocument;\n        this.dependencies = this.containingDocument.getXPathDependencies();\n\n        this.staticModel = model.getStaticModel();\n        this.isFirstCalculate = containingDocument.isInitializing();\n    }","id":100342,"modified_method":"private XFormsModelBinds(XFormsModel model) {\n        super(model);\n        this.model = model;\n\n        this.indentedLogger = model.getIndentedLogger();\n        this.containingDocument = model.containingDocument();\n        this.dependencies = this.containingDocument.getXPathDependencies();\n\n        this.staticModel = model.getStaticModel();\n        this.isFirstCalculate = containingDocument.isInitializing();\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private boolean validateType(RuntimeBind bind, NodeInfo currentNodeInfo, boolean required) {\n\n        final StaticBind staticBind = bind.staticBind();\n\n        final boolean typeValid;\n        {\n            // NOTE: xf:bind/@type is a literal type value, and it is the same that applies to all nodes pointed to by xf:bind/@ref\n            final QName typeQName = staticBind.dataType().get();\n\n            final String typeNamespaceURI = typeQName.getNamespaceURI();\n            final String typeLocalname = typeQName.getName();\n\n            // Get value to validate if not already computed above\n\n            final String nodeValue = DataModel.getValue(currentNodeInfo);\n\n            // TODO: \"[...] these datatypes can be used in the type model item property without the addition of the\n            // XForms namespace qualifier if the namespace context has the XForms namespace as the default\n            // namespace.\"\n\n            final boolean isBuiltInSchemaType = XMLConstants.XSD_URI.equals(typeNamespaceURI);\n            final boolean isBuiltInXFormsType = XFormsConstants.XFORMS_NAMESPACE_URI.equals(typeNamespaceURI);\n            final boolean isBuiltInXXFormsType = XFormsConstants.XXFORMS_NAMESPACE_URI.equals(typeNamespaceURI);\n\n            if (isBuiltInXFormsType && Model.jXFormsSchemaTypeNames().contains(typeLocalname)) {\n                // xf:dayTimeDuration, xf:yearMonthDuration, xf:email, xf:card-number\n                if (xformsValidator == null) {\n                    xformsValidator = new XFormsModelSchemaValidator(\"oxf:/org/orbeon/oxf/xforms/xforms-types.xsd\");\n                    xformsValidator.loadSchemas(containingDocument);\n                }\n\n                final String validationError =\n                    xformsValidator.validateDatatype(nodeValue, typeNamespaceURI, typeLocalname, typeQName.getQualifiedName(),\n                            staticBind.locationData());\n\n                typeValid = validationError == null;\n\n            } else if (isBuiltInXFormsType && nodeValue.length() == 0) {\n                // Don't consider the node invalid if the string is empty with xf:* types\n                typeValid = true;\n            } else if (isBuiltInSchemaType || isBuiltInXFormsType) {\n                // Built-in schema or XForms type\n\n                // Use XML Schema namespace URI as Saxon doesn't know anything about XForms types\n                final String newTypeNamespaceURI = XMLConstants.XSD_URI;\n\n                // Get type information\n                final int requiredTypeFingerprint = StandardNames.getFingerprint(newTypeNamespaceURI, typeLocalname);\n                if (requiredTypeFingerprint == -1) {\n                    throw new ValidationException(\"Invalid schema type '\" + staticBind.dataTypeOrNull() + \"'\", staticBind.locationData());\n\n                    // TODO: xxx check what XForms event must be dispatched\n                }\n\n                // Need an evaluator to check and convert type below\n                final XPathEvaluator xpathEvaluator;\n                try {\n                    xpathEvaluator = new XPathEvaluator();\n                    // NOTE: Not sure declaring namespaces here is necessary just to perform the cast\n                    final IndependentContext context = (IndependentContext) xpathEvaluator.getStaticContext();\n                    for (final Map.Entry<String, String> entry : staticBind.namespaceMapping().mapping.entrySet()) {\n                        context.declareNamespace(entry.getKey(), entry.getValue());\n                    }\n                } catch (Exception e) {\n                    throw OrbeonLocationException.wrapException(e, staticBind.locationData());\n\n                    // TODO: xxx check what XForms event must be dispatched\n                }\n\n                // Try to perform casting\n                // TODO: Should we actually perform casting? This for example removes leading and trailing space around tokens. Is that expected?\n                final StringValue stringValue = new StringValue(nodeValue);\n                final XPathContext xpContext = new XPathContextMajor(stringValue, xpathEvaluator.getExecutable());\n                final ConversionResult result = stringValue.convertPrimitive((BuiltInAtomicType) BuiltInType.getSchemaType(requiredTypeFingerprint), true, xpContext);\n\n                // Set error on node if necessary\n                typeValid = !(result instanceof ValidationFailure);\n            } else if (isBuiltInXXFormsType) {\n                // Built-in extension types\n                final boolean isOptionalAndEmpty = !required && \"\".equals(nodeValue);\n                if (typeLocalname.equals(\"xml\")) {\n                    // xxf:xml type\n                    typeValid = isOptionalAndEmpty || XMLUtils.isWellFormedXML(nodeValue);\n                } else if (typeLocalname.equals(\"xpath2\")) {\n                    // xxf:xpath2 type\n\n                    // Find element which scopes namespaces\n                    final NodeInfo namespaceNodeInfo;\n                    if (currentNodeInfo.getNodeKind() == Node.ELEMENT_NODE)\n                        namespaceNodeInfo = currentNodeInfo;\n                    else\n                        namespaceNodeInfo = currentNodeInfo.getParent();\n\n                    if (namespaceNodeInfo != null && namespaceNodeInfo.getNodeKind() == Node.ELEMENT_NODE) {\n                        // ASSUMPTION: Binding to dom4j-backed node (which InstanceData assumes too)\n                        final Element namespaceElement = XML.unwrapElement(namespaceNodeInfo);\n                        final NamespaceMapping namespaceMapping = new NamespaceMapping(Dom4jUtils.getNamespaceContextNoDefault(namespaceElement));\n                        typeValid = isOptionalAndEmpty || XPath.isXPath2Expression(nodeValue, namespaceMapping, staticBind.locationData(), indentedLogger);\n                    } else {\n                        // This means that we are bound to a node which is not an element and which does not have a\n                        // parent element. This could be a detached attribute, or an element node, etc. Unsure if we\n                        // would have made it this far anyway! We can't validate the expression so we only consider\n                        // the \"optional-and-empty\" case.\n                        typeValid = isOptionalAndEmpty;\n                    }\n                } else {\n                    throw new ValidationException(\"Invalid schema type '\" + staticBind.dataTypeOrNull() + \"'\", staticBind.locationData());\n\n                    // TODO: xxx check what XForms event must be dispatched\n                }\n\n            } else if (model.hasSchema()) {\n                // Other type and there is a schema\n\n                // There are possibly types defined in the schema\n                final String validationError\n                        = model.getSchemaValidator().validateDatatype(nodeValue, typeNamespaceURI, typeLocalname, typeQName.getQualifiedName(), staticBind.locationData());\n\n                typeValid = validationError == null;\n            } else {\n                throw new ValidationException(\"Invalid schema type '\" + staticBind.dataTypeOrNull() + \"'\", staticBind.locationData());\n\n                // TODO: xxx check what XForms event must be dispatched\n            }\n        }\n        return typeValid;\n    }","id":100343,"modified_method":"private boolean validateType(RuntimeBind bind, NodeInfo currentNodeInfo, boolean required) {\n\n        final StaticBind staticBind = bind.staticBind();\n\n        final boolean typeValid;\n        {\n            // NOTE: xf:bind/@type is a literal type value, and it is the same that applies to all nodes pointed to by xf:bind/@ref\n            final QName typeQName = staticBind.dataType().get();\n\n            final String typeNamespaceURI = typeQName.getNamespaceURI();\n            final String typeLocalname = typeQName.getName();\n\n            // Get value to validate if not already computed above\n\n            final String nodeValue = DataModel.getValue(currentNodeInfo);\n\n            // TODO: \"[...] these datatypes can be used in the type model item property without the addition of the\n            // XForms namespace qualifier if the namespace context has the XForms namespace as the default\n            // namespace.\"\n\n            final boolean isBuiltInSchemaType = XMLConstants.XSD_URI.equals(typeNamespaceURI);\n            final boolean isBuiltInXFormsType = XFormsConstants.XFORMS_NAMESPACE_URI.equals(typeNamespaceURI);\n            final boolean isBuiltInXXFormsType = XFormsConstants.XXFORMS_NAMESPACE_URI.equals(typeNamespaceURI);\n\n            if (isBuiltInXFormsType && Model.jXFormsSchemaTypeNames().contains(typeLocalname)) {\n                // xf:dayTimeDuration, xf:yearMonthDuration, xf:email, xf:card-number\n                if (xformsValidator == null) {\n                    xformsValidator = new XFormsModelSchemaValidator(\"oxf:/org/orbeon/oxf/xforms/xforms-types.xsd\");\n                    xformsValidator.loadSchemas(containingDocument);\n                }\n\n                final String validationError =\n                    xformsValidator.validateDatatype(nodeValue, typeNamespaceURI, typeLocalname, typeQName.getQualifiedName(),\n                            staticBind.locationData());\n\n                typeValid = validationError == null;\n\n            } else if (isBuiltInXFormsType && nodeValue.length() == 0) {\n                // Don't consider the node invalid if the string is empty with xf:* types\n                typeValid = true;\n            } else if (isBuiltInSchemaType || isBuiltInXFormsType) {\n                // Built-in schema or XForms type\n\n                // Use XML Schema namespace URI as Saxon doesn't know anything about XForms types\n                final String newTypeNamespaceURI = XMLConstants.XSD_URI;\n\n                // Get type information\n                final int requiredTypeFingerprint = StandardNames.getFingerprint(newTypeNamespaceURI, typeLocalname);\n                if (requiredTypeFingerprint == -1) {\n                    throw new ValidationException(\"Invalid schema type '\" + staticBind.dataTypeOrNull() + \"'\", staticBind.locationData());\n\n                    // TODO: xxx check what XForms event must be dispatched\n                }\n\n                // Need an evaluator to check and convert type below\n                final XPathEvaluator xpathEvaluator;\n                try {\n                    xpathEvaluator = new XPathEvaluator();\n                    // NOTE: Not sure declaring namespaces here is necessary just to perform the cast\n                    final IndependentContext context = (IndependentContext) xpathEvaluator.getStaticContext();\n                    for (final Map.Entry<String, String> entry : staticBind.namespaceMapping().mapping.entrySet()) {\n                        context.declareNamespace(entry.getKey(), entry.getValue());\n                    }\n                } catch (Exception e) {\n                    throw OrbeonLocationException.wrapException(e, staticBind.locationData());\n\n                    // TODO: xxx check what XForms event must be dispatched\n                }\n\n                // Try to perform casting\n                // TODO: Should we actually perform casting? This for example removes leading and trailing space around tokens. Is that expected?\n                final StringValue stringValue = new StringValue(nodeValue);\n                final XPathContext xpContext = new XPathContextMajor(stringValue, xpathEvaluator.getExecutable());\n                final ConversionResult result = stringValue.convertPrimitive((BuiltInAtomicType) BuiltInType.getSchemaType(requiredTypeFingerprint), true, xpContext);\n\n                // Set error on node if necessary\n                typeValid = !(result instanceof ValidationFailure);\n            } else if (isBuiltInXXFormsType) {\n                // Built-in extension types\n                final boolean isOptionalAndEmpty = !required && \"\".equals(nodeValue);\n                if (typeLocalname.equals(\"xml\")) {\n                    // xxf:xml type\n                    typeValid = isOptionalAndEmpty || XMLUtils.isWellFormedXML(nodeValue);\n                } else if (typeLocalname.equals(\"xpath2\")) {\n                    // xxf:xpath2 type\n\n                    // Find element which scopes namespaces\n                    final NodeInfo namespaceNodeInfo;\n                    if (currentNodeInfo.getNodeKind() == Node.ELEMENT_NODE)\n                        namespaceNodeInfo = currentNodeInfo;\n                    else\n                        namespaceNodeInfo = currentNodeInfo.getParent();\n\n                    if (namespaceNodeInfo != null && namespaceNodeInfo.getNodeKind() == Node.ELEMENT_NODE) {\n                        // ASSUMPTION: Binding to dom4j-backed node (which InstanceData assumes too)\n                        final Element namespaceElement = XML.unwrapElement(namespaceNodeInfo);\n                        final NamespaceMapping namespaceMapping = new NamespaceMapping(Dom4jUtils.getNamespaceContextNoDefault(namespaceElement));\n                        typeValid = isOptionalAndEmpty || XPath.isXPath2Expression(nodeValue, namespaceMapping, staticBind.locationData(), indentedLogger);\n                    } else {\n                        // This means that we are bound to a node which is not an element and which does not have a\n                        // parent element. This could be a detached attribute, or an element node, etc. Unsure if we\n                        // would have made it this far anyway! We can't validate the expression so we only consider\n                        // the \"optional-and-empty\" case.\n                        typeValid = isOptionalAndEmpty;\n                    }\n                } else {\n                    throw new ValidationException(\"Invalid schema type '\" + staticBind.dataTypeOrNull() + \"'\", staticBind.locationData());\n\n                    // TODO: xxx check what XForms event must be dispatched\n                }\n\n            } else if (model.hasSchema()) {\n                // Other type and there is a schema\n\n                // There are possibly types defined in the schema\n                final String validationError\n                        = model.schemaValidator().validateDatatype(nodeValue, typeNamespaceURI, typeLocalname, typeQName.getQualifiedName(), staticBind.locationData());\n\n                typeValid = validationError == null;\n            } else {\n                throw new ValidationException(\"Invalid schema type '\" + staticBind.dataTypeOrNull() + \"'\", staticBind.locationData());\n\n                // TODO: xxx check what XForms event must be dispatched\n            }\n        }\n        return typeValid;\n    }","commit_id":"e72384b7382dc06810dda5a556b41c71fd06924f","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"protected void getSuperClass() {\n        superClass = \"java/lang/Object\";\n        superClassType = null;\n\n        List<JetDelegationSpecifier> delegationSpecifiers = myClass.getDelegationSpecifiers();\n\n        if (myClass instanceof JetClass && ((JetClass) myClass).isTrait()) {\n            return;\n        }\n\n        if (kind != OwnerKind.IMPLEMENTATION) {\n            throw new IllegalStateException(\"must be impl to reach this code: \" + kind);\n        }\n\n        for (JetDelegationSpecifier specifier : delegationSpecifiers) {\n            if (specifier instanceof JetDelegatorToSuperClass || specifier instanceof JetDelegatorToSuperCall) {\n                JetType superType = bindingContext.get(BindingContext.TYPE, specifier.getTypeReference());\n                assert superType != null;\n                ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n                assert superClassDescriptor != null;\n                if (!isInterface(superClassDescriptor)) {\n                    superClassType = superType;\n                    superClass = typeMapper.mapType(superClassDescriptor.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName();\n                    superCall = specifier;\n                }\n            }\n        }\n\n        if (superClassType == null) {\n            if (descriptor.getKind() == ClassKind.ENUM_CLASS) {\n                superClassType = JetStandardLibrary.getInstance().getEnumType(descriptor.getDefaultType());\n                superClass = typeMapper.mapType(superClassType).getInternalName();\n            }\n            if (descriptor.getKind() == ClassKind.ENUM_ENTRY) {\n                superClassType = descriptor.getTypeConstructor().getSupertypes().iterator().next();\n                superClass = typeMapper.mapType(superClassType).getInternalName();\n            }\n        }\n    }","id":100344,"modified_method":"protected void getSuperClass() {\n        superClassAsmType = AsmTypeConstants.OBJECT_TYPE;\n        superClassType = null;\n\n        List<JetDelegationSpecifier> delegationSpecifiers = myClass.getDelegationSpecifiers();\n\n        if (myClass instanceof JetClass && ((JetClass) myClass).isTrait()) {\n            return;\n        }\n\n        if (kind != OwnerKind.IMPLEMENTATION) {\n            throw new IllegalStateException(\"must be impl to reach this code: \" + kind);\n        }\n\n        for (JetDelegationSpecifier specifier : delegationSpecifiers) {\n            if (specifier instanceof JetDelegatorToSuperClass || specifier instanceof JetDelegatorToSuperCall) {\n                JetType superType = bindingContext.get(BindingContext.TYPE, specifier.getTypeReference());\n                assert superType != null;\n                ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n                assert superClassDescriptor != null;\n                if (!isInterface(superClassDescriptor)) {\n                    superClassType = superType;\n                    superClassAsmType = typeMapper.mapType(superClassDescriptor.getDefaultType(), JetTypeMapperMode.IMPL);\n                    superCall = specifier;\n                }\n            }\n        }\n\n        if (superClassType == null) {\n            if (descriptor.getKind() == ClassKind.ENUM_CLASS) {\n                superClassType = JetStandardLibrary.getInstance().getEnumType(descriptor.getDefaultType());\n                superClassAsmType = typeMapper.mapType(superClassType);\n            }\n            if (descriptor.getKind() == ClassKind.ENUM_ENTRY) {\n                superClassType = descriptor.getTypeConstructor().getSupertypes().iterator().next();\n                superClassAsmType = typeMapper.mapType(superClassType);\n            }\n        }\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private JvmClassSignature signature() {\n        List<String> superInterfaces;\n\n        LinkedHashSet<String> superInterfacesLinkedHashSet = new LinkedHashSet<String>();\n\n        // TODO: generics signature is not always needed\n        BothSignatureWriter signatureVisitor = new BothSignatureWriter(BothSignatureWriter.Mode.CLASS, true);\n\n\n        {   // type parameters\n            List<TypeParameterDescriptor> typeParameters = descriptor.getTypeConstructor().getParameters();\n            typeMapper.writeFormalTypeParameters(typeParameters, signatureVisitor);\n        }\n\n        signatureVisitor.writeSupersStart();\n\n        {   // superclass\n            signatureVisitor.writeSuperclass();\n            if (superClassType == null) {\n                signatureVisitor.writeClassBegin(superClass, false, false);\n                signatureVisitor.writeClassEnd();\n            }\n            else {\n                typeMapper.mapType(superClassType, signatureVisitor, JetTypeMapperMode.TYPE_PARAMETER);\n            }\n            signatureVisitor.writeSuperclassEnd();\n        }\n\n\n        {   // superinterfaces\n            superInterfacesLinkedHashSet.add(JvmStdlibNames.JET_OBJECT.getInternalName());\n\n            for (JetDelegationSpecifier specifier : myClass.getDelegationSpecifiers()) {\n                JetType superType = bindingContext.get(BindingContext.TYPE, specifier.getTypeReference());\n                assert superType != null;\n                ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n                if (isInterface(superClassDescriptor)) {\n                    signatureVisitor.writeInterface();\n                    Type jvmName = typeMapper.mapType(superType, signatureVisitor, JetTypeMapperMode.TYPE_PARAMETER);\n                    signatureVisitor.writeInterfaceEnd();\n                    superInterfacesLinkedHashSet.add(jvmName.getInternalName());\n                }\n            }\n\n            superInterfaces = new ArrayList<String>(superInterfacesLinkedHashSet);\n        }\n\n        signatureVisitor.writeSupersEnd();\n\n        return new JvmClassSignature(jvmName(), superClass, superInterfaces, signatureVisitor.makeJavaString(),\n                                     signatureVisitor.makeKotlinClassSignature());\n    }","id":100345,"modified_method":"private JvmClassSignature signature() {\n        List<String> superInterfaces;\n\n        LinkedHashSet<String> superInterfacesLinkedHashSet = new LinkedHashSet<String>();\n\n        // TODO: generics signature is not always needed\n        BothSignatureWriter signatureVisitor = new BothSignatureWriter(BothSignatureWriter.Mode.CLASS, true);\n\n\n        {   // type parameters\n            List<TypeParameterDescriptor> typeParameters = descriptor.getTypeConstructor().getParameters();\n            typeMapper.writeFormalTypeParameters(typeParameters, signatureVisitor);\n        }\n\n        signatureVisitor.writeSupersStart();\n\n        {   // superclass\n            signatureVisitor.writeSuperclass();\n            if (superClassType == null) {\n                signatureVisitor.writeClassBegin(superClassAsmType.getInternalName(), false, false);\n                signatureVisitor.writeClassEnd();\n            }\n            else {\n                typeMapper.mapType(superClassType, signatureVisitor, JetTypeMapperMode.TYPE_PARAMETER);\n            }\n            signatureVisitor.writeSuperclassEnd();\n        }\n\n\n        {   // superinterfaces\n            superInterfacesLinkedHashSet.add(JvmStdlibNames.JET_OBJECT.getInternalName());\n\n            for (JetDelegationSpecifier specifier : myClass.getDelegationSpecifiers()) {\n                JetType superType = bindingContext.get(BindingContext.TYPE, specifier.getTypeReference());\n                assert superType != null;\n                ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n                if (isInterface(superClassDescriptor)) {\n                    signatureVisitor.writeInterface();\n                    Type jvmName = typeMapper.mapType(superType, signatureVisitor, JetTypeMapperMode.TYPE_PARAMETER);\n                    signatureVisitor.writeInterfaceEnd();\n                    superInterfacesLinkedHashSet.add(jvmName.getInternalName());\n                }\n            }\n\n            superInterfaces = new ArrayList<String>(superInterfacesLinkedHashSet);\n        }\n\n        signatureVisitor.writeSupersEnd();\n\n        return new JvmClassSignature(jvmName(), superClassAsmType.getInternalName(), superInterfaces, signatureVisitor.makeJavaString(),\n                                     signatureVisitor.makeKotlinClassSignature());\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private String jvmName() {\n        if (kind != OwnerKind.IMPLEMENTATION) {\n            throw new IllegalStateException(\"must not call this method with kind \" + kind);\n        }\n        return typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName();\n    }","id":100346,"modified_method":"private String jvmName() {\n        if (kind != OwnerKind.IMPLEMENTATION) {\n            throw new IllegalStateException(\"must not call this method with kind \" + kind);\n        }\n        return classAsmType.getInternalName();\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void genCallToDelegatorByExpressionSpecifier(\n            InstructionAdapter iv,\n            ExpressionCodegen codegen,\n            Type classType,\n            JvmClassName classname,\n            int n,\n            JetDelegationSpecifier specifier\n    ) {\n        final JetExpression expression = ((JetDelegatorByExpressionSpecifier) specifier).getDelegateExpression();\n        PropertyDescriptor propertyDescriptor = null;\n        if (expression instanceof JetSimpleNameExpression) {\n            final ResolvedCall<? extends CallableDescriptor> call = bindingContext.get(BindingContext.RESOLVED_CALL, expression);\n            if (call != null) {\n                final CallableDescriptor callResultingDescriptor = call.getResultingDescriptor();\n                if (callResultingDescriptor instanceof ValueParameterDescriptor) {\n                    final ValueParameterDescriptor valueParameterDescriptor = (ValueParameterDescriptor) callResultingDescriptor;\n                    // constructor parameter\n                    if (valueParameterDescriptor.getContainingDeclaration() instanceof ConstructorDescriptor) {\n                        // constructor of my class\n                        if (valueParameterDescriptor.getContainingDeclaration().getContainingDeclaration() == descriptor) {\n                            propertyDescriptor = bindingContext.get(BindingContext.VALUE_PARAMETER_AS_PROPERTY, valueParameterDescriptor);\n                        }\n                    }\n                }\n\n                // todo: when and if frontend will allow properties defined not as constructor parameters to be used in delegation specifier\n            }\n        }\n\n        JetType superType = bindingContext.get(BindingContext.TYPE, specifier.getTypeReference());\n        assert superType != null;\n\n        ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n        assert superClassDescriptor != null;\n\n        final Type superTypeAsmType = typeMapper.mapType(superType, JetTypeMapperMode.IMPL);\n\n        StackValue field;\n        if (propertyDescriptor != null &&\n            !propertyDescriptor.isVar() &&\n            Boolean.TRUE.equals(bindingContext.get(BindingContext.BACKING_FIELD_REQUIRED, propertyDescriptor))) {\n            // final property with backing field\n            field = StackValue.field(typeMapper.mapType(propertyDescriptor.getType()), classname,\n                                     propertyDescriptor.getName().getName(), false);\n        }\n        else {\n            iv.load(0, classType);\n            codegen.genToJVMStack(expression);\n\n            String delegateField = \"$delegate_\" + n;\n            Type fieldType = typeMapper.mapType(superClassDescriptor.getDefaultType());\n            String fieldDesc = fieldType.getDescriptor();\n\n            v.newField(specifier, ACC_PRIVATE|ACC_FINAL|ACC_SYNTHETIC, delegateField, fieldDesc, /*TODO*/null, null);\n\n            field = StackValue.field(fieldType, classname, delegateField, false);\n            field.store(fieldType, iv);\n        }\n\n        final CodegenContext delegateContext = context.intoClass(superClassDescriptor,\n                                                                 new OwnerKind.DelegateKind(field, superTypeAsmType.getInternalName()),\n                                                                 state);\n        generateDelegates(superClassDescriptor, delegateContext, field);\n    }","id":100347,"modified_method":"private void genCallToDelegatorByExpressionSpecifier(\n            InstructionAdapter iv,\n            ExpressionCodegen codegen,\n            Type classType,\n            JvmClassName classname,\n            int n,\n            JetDelegationSpecifier specifier\n    ) {\n        final JetExpression expression = ((JetDelegatorByExpressionSpecifier) specifier).getDelegateExpression();\n        PropertyDescriptor propertyDescriptor = null;\n        if (expression instanceof JetSimpleNameExpression) {\n            final ResolvedCall<? extends CallableDescriptor> call = bindingContext.get(BindingContext.RESOLVED_CALL, expression);\n            if (call != null) {\n                final CallableDescriptor callResultingDescriptor = call.getResultingDescriptor();\n                if (callResultingDescriptor instanceof ValueParameterDescriptor) {\n                    final ValueParameterDescriptor valueParameterDescriptor = (ValueParameterDescriptor) callResultingDescriptor;\n                    // constructor parameter\n                    if (valueParameterDescriptor.getContainingDeclaration() instanceof ConstructorDescriptor) {\n                        // constructor of my class\n                        if (valueParameterDescriptor.getContainingDeclaration().getContainingDeclaration() == descriptor) {\n                            propertyDescriptor = bindingContext.get(BindingContext.VALUE_PARAMETER_AS_PROPERTY, valueParameterDescriptor);\n                        }\n                    }\n                }\n\n                // todo: when and if frontend will allow properties defined not as constructor parameters to be used in delegation specifier\n            }\n        }\n\n        JetType superType = bindingContext.get(BindingContext.TYPE, specifier.getTypeReference());\n        assert superType != null;\n\n        ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n        assert superClassDescriptor != null;\n\n        final Type superTypeAsmType = typeMapper.mapType(superType, JetTypeMapperMode.IMPL);\n\n        StackValue field;\n        if (propertyDescriptor != null &&\n            !propertyDescriptor.isVar() &&\n            Boolean.TRUE.equals(bindingContext.get(BindingContext.BACKING_FIELD_REQUIRED, propertyDescriptor))) {\n            // final property with backing field\n            field = StackValue.field(typeMapper.mapType(propertyDescriptor.getType()), classname,\n                                     propertyDescriptor.getName().getName(), false);\n        }\n        else {\n            iv.load(0, classType);\n            codegen.genToJVMStack(expression);\n\n            String delegateField = \"$delegate_\" + n;\n            Type fieldType = typeMapper.mapType(superClassDescriptor);\n            String fieldDesc = fieldType.getDescriptor();\n\n            v.newField(specifier, ACC_PRIVATE|ACC_FINAL|ACC_SYNTHETIC, delegateField, fieldDesc, /*TODO*/null, null);\n\n            field = StackValue.field(fieldType, classname, delegateField, false);\n            field.store(fieldType, iv);\n        }\n\n        final CodegenContext delegateContext = context.intoClass(superClassDescriptor,\n                                                                 new OwnerKind.DelegateKind(field, superTypeAsmType.getInternalName()),\n                                                                 state);\n        generateDelegates(superClassDescriptor, delegateContext, field);\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void writeInnerOuterClasses() {\n        ClassDescriptor container = getContainingClassDescriptor(descriptor);\n        if (container != null) {\n            v.visitOuterClass(typeMapper.mapType(container.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName(), null, null);\n        }\n\n        for (DeclarationDescriptor declarationDescriptor : descriptor.getUnsubstitutedInnerClassesScope().getAllDescriptors()) {\n            assert declarationDescriptor instanceof ClassDescriptor;\n            ClassDescriptor innerClass = (ClassDescriptor) declarationDescriptor;\n            // TODO: proper access\n            int innerClassAccess = ACC_PUBLIC;\n            if (innerClass.getModality() == Modality.FINAL) {\n                innerClassAccess |= ACC_FINAL;\n            }\n            else if (innerClass.getModality() == Modality.ABSTRACT) {\n                innerClassAccess |= ACC_ABSTRACT;\n            }\n\n            if (innerClass.getKind() == ClassKind.TRAIT) {\n                innerClassAccess |= ACC_INTERFACE;\n            }\n\n            // TODO: cache internal names\n            String outerClassInernalName = typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName();\n            String innerClassInternalName = typeMapper.mapType(innerClass.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName();\n            v.visitInnerClass(innerClassInternalName, outerClassInernalName, innerClass.getName().getName(), innerClassAccess);\n        }\n\n        if (descriptor.getClassObjectDescriptor() != null) {\n            int innerClassAccess = ACC_PUBLIC | ACC_FINAL | ACC_STATIC;\n            String outerClassInernalName = typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName();\n            v.visitInnerClass(outerClassInernalName + JvmAbi.CLASS_OBJECT_SUFFIX, outerClassInernalName, JvmAbi.CLASS_OBJECT_CLASS_NAME,\n                              innerClassAccess);\n        }\n    }","id":100348,"modified_method":"private void writeInnerOuterClasses() {\n        ClassDescriptor container = getContainingClassDescriptor(descriptor);\n        if (container != null) {\n            v.visitOuterClass(typeMapper.mapType(container.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName(), null, null);\n        }\n\n        for (DeclarationDescriptor declarationDescriptor : descriptor.getUnsubstitutedInnerClassesScope().getAllDescriptors()) {\n            assert declarationDescriptor instanceof ClassDescriptor;\n            ClassDescriptor innerClass = (ClassDescriptor) declarationDescriptor;\n            // TODO: proper access\n            int innerClassAccess = ACC_PUBLIC;\n            if (innerClass.getModality() == Modality.FINAL) {\n                innerClassAccess |= ACC_FINAL;\n            }\n            else if (innerClass.getModality() == Modality.ABSTRACT) {\n                innerClassAccess |= ACC_ABSTRACT;\n            }\n\n            if (innerClass.getKind() == ClassKind.TRAIT) {\n                innerClassAccess |= ACC_INTERFACE;\n            }\n\n            // TODO: cache internal names\n            String outerClassInernalName = classAsmType.getInternalName();\n            String innerClassInternalName = typeMapper.mapType(innerClass.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName();\n            v.visitInnerClass(innerClassInternalName, outerClassInernalName, innerClass.getName().getName(), innerClassAccess);\n        }\n\n        if (descriptor.getClassObjectDescriptor() != null) {\n            int innerClassAccess = ACC_PUBLIC | ACC_FINAL | ACC_STATIC;\n            v.visitInnerClass(classAsmType.getInternalName() + JvmAbi.CLASS_OBJECT_SUFFIX, classAsmType.getInternalName(), JvmAbi.CLASS_OBJECT_CLASS_NAME,\n                              innerClassAccess);\n        }\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public ImplementationBodyCodegen(JetClassOrObject aClass, CodegenContext context, ClassBuilder v, GenerationState state) {\n        super(aClass, context, v, state);\n    }","id":100349,"modified_method":"public ImplementationBodyCodegen(JetClassOrObject aClass, CodegenContext context, ClassBuilder v, GenerationState state) {\n        super(aClass, context, v, state);\n        classAsmType = typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL);\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void genSimpleSuperCall(InstructionAdapter iv) {\n        iv.load(0, Type.getType(\"L\" + superClass + \";\"));\n        if (descriptor.getKind() == ClassKind.ENUM_CLASS || descriptor.getKind() == ClassKind.ENUM_ENTRY) {\n            iv.load(1, AsmTypeConstants.JAVA_STRING_TYPE);\n            iv.load(2, Type.INT_TYPE);\n            iv.invokespecial(superClass, \"<init>\", \"(Ljava/lang/String;I)V\");\n        }\n        else {\n            iv.invokespecial(superClass, \"<init>\", \"()V\");\n        }\n    }","id":100350,"modified_method":"private void genSimpleSuperCall(InstructionAdapter iv) {\n        iv.load(0, superClassAsmType);\n        if (descriptor.getKind() == ClassKind.ENUM_CLASS || descriptor.getKind() == ClassKind.ENUM_ENTRY) {\n            iv.load(1, AsmTypeConstants.JAVA_STRING_TYPE);\n            iv.load(2, Type.INT_TYPE);\n            iv.invokespecial(superClassAsmType.getInternalName(), \"<init>\", \"(Ljava/lang/String;I)V\");\n        }\n        else {\n            iv.invokespecial(superClassAsmType.getInternalName(), \"<init>\", \"()V\");\n        }\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void generateEnumMethods() {\n        if (myEnumConstants.size() > 0) {\n            {\n                Type type =\n                        typeMapper.mapType(JetStandardLibrary.getInstance().getArrayType(descriptor.getDefaultType()),\n                                           JetTypeMapperMode.IMPL);\n\n                MethodVisitor mv =\n                        v.newMethod(myClass, ACC_PUBLIC | ACC_STATIC, \"values\", \"()\" + type.getDescriptor(), null, null);\n                mv.visitCode();\n                mv.visitFieldInsn(GETSTATIC, typeMapper.mapType(descriptor).getInternalName(),\n                                  VALUES,\n                                  type.getDescriptor());\n                mv.visitMethodInsn(INVOKEVIRTUAL, type.getInternalName(), \"clone\", \"()Ljava/lang/Object;\");\n                mv.visitTypeInsn(CHECKCAST, type.getInternalName());\n                mv.visitInsn(ARETURN);\n                FunctionCodegen.endVisit(mv, \"values()\", myClass);\n            }\n            {\n                Type type = typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL);\n\n                MethodVisitor mv =\n                        v.newMethod(myClass, ACC_PUBLIC | ACC_STATIC, \"valueOf\", \"(Ljava/lang/String;)\" + type.getDescriptor(), null, null);\n                mv.visitCode();\n                mv.visitLdcInsn(type);\n                mv.visitVarInsn(ALOAD, 0);\n                mv.visitMethodInsn(INVOKESTATIC, \"java/lang/Enum\", \"valueOf\", \"(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\");\n                mv.visitTypeInsn(CHECKCAST, type.getInternalName());\n                mv.visitInsn(ARETURN);\n                FunctionCodegen.endVisit(mv, \"values()\", myClass);\n            }\n        }\n    }","id":100351,"modified_method":"private void generateEnumMethods() {\n        if (myEnumConstants.size() > 0) {\n            {\n                Type type =\n                        typeMapper.mapType(JetStandardLibrary.getInstance().getArrayType(descriptor.getDefaultType()),\n                                           JetTypeMapperMode.IMPL);\n\n                MethodVisitor mv =\n                        v.newMethod(myClass, ACC_PUBLIC | ACC_STATIC, \"values\", \"()\" + type.getDescriptor(), null, null);\n                mv.visitCode();\n                mv.visitFieldInsn(GETSTATIC, typeMapper.mapType(descriptor).getInternalName(),\n                                  VALUES,\n                                  type.getDescriptor());\n                mv.visitMethodInsn(INVOKEVIRTUAL, type.getInternalName(), \"clone\", \"()Ljava/lang/Object;\");\n                mv.visitTypeInsn(CHECKCAST, type.getInternalName());\n                mv.visitInsn(ARETURN);\n                FunctionCodegen.endVisit(mv, \"values()\", myClass);\n            }\n            {\n\n                MethodVisitor mv =\n                        v.newMethod(myClass, ACC_PUBLIC | ACC_STATIC, \"valueOf\", \"(Ljava/lang/String;)\" + classAsmType.getDescriptor(), null,\n                                    null);\n                mv.visitCode();\n                mv.visitLdcInsn(classAsmType);\n                mv.visitVarInsn(ALOAD, 0);\n                mv.visitMethodInsn(INVOKESTATIC, \"java/lang/Enum\", \"valueOf\", \"(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\");\n                mv.visitTypeInsn(CHECKCAST, classAsmType.getInternalName());\n                mv.visitInsn(ARETURN);\n                FunctionCodegen.endVisit(mv, \"values()\", myClass);\n            }\n        }\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void generateComponentFunction(@NotNull FunctionDescriptor function, @NotNull ValueParameterDescriptor parameter) {\n        JetType returnType = function.getReturnType();\n        assert returnType != null : \"Return type of component function should not be null: \" + function;\n        Type componentType = typeMapper.mapReturnType(returnType);\n\n        MethodVisitor mv = v.newMethod(myClass,\n                                       ACC_FINAL | getVisibilityAccessFlag(function),\n                                       function.getName().getName(),\n                                       \"()\" + componentType.getDescriptor(),\n                                       null, null);\n\n        JetMethodAnnotationWriter aw = JetMethodAnnotationWriter.visitAnnotation(mv);\n        BitSet kotlinFlags = getFlagsForVisibility(function.getVisibility());\n        aw.writeFlags(kotlinFlags);\n        aw.writeKind(DescriptorKindUtils.kindToInt(function.getKind()));\n        aw.writeNullableReturnType(returnType.isNullable());\n        JvmMethodSignature jvmMethodSignature = typeMapper.mapToCallableMethod(function, false, kind).getSignature();\n        aw.writeReturnType(jvmMethodSignature.getKotlinReturnType());\n        aw.visitEnd();\n\n        mv.visitCode();\n        InstructionAdapter iv = new InstructionAdapter(mv);\n        if (!componentType.equals(Type.VOID_TYPE)) {\n            Type classType = typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL);\n            iv.load(0, classType);\n            iv.getfield(classType.getInternalName(), parameter.getName().getName(), componentType.getDescriptor());\n        }\n        iv.areturn(componentType);\n\n        FunctionCodegen.endVisit(mv, function.getName().getName(), myClass);\n    }","id":100352,"modified_method":"private void generateComponentFunction(@NotNull FunctionDescriptor function, @NotNull ValueParameterDescriptor parameter) {\n        JetType returnType = function.getReturnType();\n        assert returnType != null : \"Return type of component function should not be null: \" + function;\n        Type componentType = typeMapper.mapReturnType(returnType);\n\n        MethodVisitor mv = v.newMethod(myClass,\n                                       ACC_FINAL | getVisibilityAccessFlag(function),\n                                       function.getName().getName(),\n                                       \"()\" + componentType.getDescriptor(),\n                                       null, null);\n\n        JetMethodAnnotationWriter aw = JetMethodAnnotationWriter.visitAnnotation(mv);\n        BitSet kotlinFlags = getFlagsForVisibility(function.getVisibility());\n        aw.writeFlags(kotlinFlags);\n        aw.writeKind(DescriptorKindUtils.kindToInt(function.getKind()));\n        aw.writeNullableReturnType(returnType.isNullable());\n        JvmMethodSignature jvmMethodSignature = typeMapper.mapToCallableMethod(function, false, kind).getSignature();\n        aw.writeReturnType(jvmMethodSignature.getKotlinReturnType());\n        aw.visitEnd();\n\n        mv.visitCode();\n        InstructionAdapter iv = new InstructionAdapter(mv);\n        if (!componentType.equals(Type.VOID_TYPE)) {\n            iv.load(0, classAsmType);\n            iv.getfield(classAsmType.getInternalName(), parameter.getName().getName(), componentType.getDescriptor());\n        }\n        iv.areturn(componentType);\n\n        FunctionCodegen.endVisit(mv, function.getName().getName(), myClass);\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    protected void generateDeclaration(PropertyCodegen propertyCodegen, JetDeclaration declaration, FunctionCodegen functionCodegen) {\n        if (declaration instanceof JetClassObject || declaration instanceof JetObjectDeclaration) {\n            // done earlier in order to have accessors\n        }\n        else if (declaration instanceof JetEnumEntry) {\n            String name = declaration.getName();\n            final String desc = \"L\" + typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL).getInternalName() + \";\";\n            v.newField(declaration, ACC_PUBLIC | ACC_ENUM | ACC_STATIC | ACC_FINAL, name, desc, null, null);\n            if (myEnumConstants.isEmpty()) {\n                staticInitializerChunks.add(new CodeChunk() {\n                    @Override\n                    public void generate(InstructionAdapter v) {\n                        initializeEnumConstants(v);\n                    }\n                });\n            }\n            myEnumConstants.add((JetEnumEntry) declaration);\n        }\n        else {\n            super.generateDeclaration(propertyCodegen, declaration, functionCodegen);\n        }\n    }","id":100353,"modified_method":"@Override\n    protected void generateDeclaration(PropertyCodegen propertyCodegen, JetDeclaration declaration, FunctionCodegen functionCodegen) {\n        if (declaration instanceof JetClassObject || declaration instanceof JetObjectDeclaration) {\n            // done earlier in order to have accessors\n        }\n        else if (declaration instanceof JetEnumEntry) {\n            String name = declaration.getName();\n            final String desc = \"L\" + classAsmType.getInternalName() + \";\";\n            v.newField(declaration, ACC_PUBLIC | ACC_ENUM | ACC_STATIC | ACC_FINAL, name, desc, null, null);\n            if (myEnumConstants.isEmpty()) {\n                staticInitializerChunks.add(new CodeChunk() {\n                    @Override\n                    public void generate(InstructionAdapter v) {\n                        initializeEnumConstants(v);\n                    }\n                });\n            }\n            myEnumConstants.add((JetEnumEntry) declaration);\n        }\n        else {\n            super.generateDeclaration(propertyCodegen, declaration, functionCodegen);\n        }\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void genSuperCallToDelegatorToSuperClass(InstructionAdapter iv) {\n        iv.load(0, Type.getType(\"L\" + superClass + \";\"));\n        JetType superType = bindingContext.get(BindingContext.TYPE, superCall.getTypeReference());\n        List<Type> parameterTypes = new ArrayList<Type>();\n        assert superType != null;\n        ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n        if (CodegenBinding.hasThis0(bindingContext, superClassDescriptor)) {\n            iv.load(1, OBJECT_TYPE);\n            parameterTypes.add(typeMapper.mapType(\n                    enclosingClassDescriptor(bindingContext, descriptor)));\n        }\n        Method superCallMethod = new Method(\"<init>\", Type.VOID_TYPE, parameterTypes.toArray(new Type[parameterTypes.size()]));\n        //noinspection ConstantConditions\n        iv.invokespecial(typeMapper.mapType(superClassDescriptor).getInternalName(), \"<init>\",\n                         superCallMethod.getDescriptor());\n    }","id":100354,"modified_method":"private void genSuperCallToDelegatorToSuperClass(InstructionAdapter iv) {\n        iv.load(0, superClassAsmType);\n        JetType superType = bindingContext.get(BindingContext.TYPE, superCall.getTypeReference());\n        List<Type> parameterTypes = new ArrayList<Type>();\n        assert superType != null;\n        ClassDescriptor superClassDescriptor = (ClassDescriptor) superType.getConstructor().getDeclarationDescriptor();\n        if (CodegenBinding.hasThis0(bindingContext, superClassDescriptor)) {\n            iv.load(1, OBJECT_TYPE);\n            parameterTypes.add(typeMapper.mapType(\n                    enclosingClassDescriptor(bindingContext, descriptor)));\n        }\n        Method superCallMethod = new Method(\"<init>\", Type.VOID_TYPE, parameterTypes.toArray(new Type[parameterTypes.size()]));\n        //noinspection ConstantConditions\n        iv.invokespecial(typeMapper.mapType(superClassDescriptor).getInternalName(), \"<init>\",\n                         superCallMethod.getDescriptor());\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void generatePrimiryConstructorImpl(\n            ConstructorDescriptor constructorDescriptor,\n            ConstructorContext constructorContext,\n            JvmMethodSignature constructorMethod,\n            CallableMethod callableMethod,\n            boolean hasThis0,\n            MutableClosure closure,\n            MethodVisitor mv\n    ) {\n        mv.visitCode();\n\n        List<ValueParameterDescriptor> paramDescrs = constructorDescriptor != null\n                                                     ? constructorDescriptor.getValueParameters()\n                                                     : Collections.<ValueParameterDescriptor>emptyList();\n\n        ConstructorFrameMap frameMap = new ConstructorFrameMap(callableMethod, constructorDescriptor);\n\n        final InstructionAdapter iv = new InstructionAdapter(mv);\n        ExpressionCodegen codegen = new ExpressionCodegen(mv, frameMap, Type.VOID_TYPE, constructorContext, state);\n\n        Type classType = typeMapper.mapType(descriptor.getDefaultType(), JetTypeMapperMode.IMPL);\n        JvmClassName classname = JvmClassName.byType(classType);\n\n        if (superCall == null) {\n            genSimpleSuperCall(iv);\n        }\n        else if (superCall instanceof JetDelegatorToSuperClass) {\n            genSuperCallToDelegatorToSuperClass(iv);\n        }\n        else {\n            generateDelegatorToConstructorCall(iv, codegen, constructorDescriptor, frameMap);\n        }\n\n        if (hasThis0) {\n            final Type type = typeMapper\n                    .mapType(enclosingClassDescriptor(bindingContext, descriptor));\n            String interfaceDesc = type.getDescriptor();\n            iv.load(0, classType);\n            iv.load(frameMap.getOuterThisIndex(), type);\n            iv.putfield(classname.getInternalName(), THIS$0, interfaceDesc);\n        }\n\n        if (closure != null) {\n            int k = hasThis0 ? 2 : 1;\n            final String internalName = typeMapper.mapType(descriptor).getInternalName();\n            final ClassifierDescriptor captureReceiver = closure.getCaptureReceiver();\n            if (captureReceiver != null) {\n                iv.load(0, OBJECT_TYPE);\n                final Type asmType = typeMapper.mapType(captureReceiver.getDefaultType(), JetTypeMapperMode.IMPL);\n                iv.load(1, asmType);\n                iv.putfield(internalName, RECEIVER$0, asmType.getDescriptor());\n                k += asmType.getSize();\n            }\n\n            for (DeclarationDescriptor varDescr : closure.getCaptureVariables().keySet()) {\n                if (varDescr instanceof VariableDescriptor && !(varDescr instanceof PropertyDescriptor)) {\n                    Type sharedVarType = typeMapper.getSharedVarType(varDescr);\n                    if (sharedVarType == null) {\n                        sharedVarType = typeMapper.mapType((VariableDescriptor) varDescr);\n                    }\n                    iv.load(0, OBJECT_TYPE);\n                    iv.load(k, StackValue.refType(sharedVarType));\n                    k += StackValue.refType(sharedVarType).getSize();\n                    iv.putfield(internalName,\n                                \"$\" + varDescr.getName(), sharedVarType.getDescriptor());\n                }\n            }\n        }\n\n        int n = 0;\n        for (JetDelegationSpecifier specifier : myClass.getDelegationSpecifiers()) {\n            if (specifier == superCall) {\n                continue;\n            }\n\n            if (specifier instanceof JetDelegatorByExpressionSpecifier) {\n                genCallToDelegatorByExpressionSpecifier(iv, codegen, classType, classname, n++, specifier);\n            }\n        }\n\n        int curParam = 0;\n        List<JetParameter> constructorParameters = getPrimaryConstructorParameters();\n        for (JetParameter parameter : constructorParameters) {\n            if (parameter.getValOrVarNode() != null) {\n                VariableDescriptor descriptor = paramDescrs.get(curParam);\n                Type type = typeMapper.mapType(descriptor);\n                iv.load(0, classType);\n                iv.load(frameMap.getIndex(descriptor), type);\n                iv.putfield(classname.getInternalName(), descriptor.getName().getName(), type.getDescriptor());\n            }\n            curParam++;\n        }\n\n        generateInitializers(codegen, iv, myClass.getDeclarations(), bindingContext, typeMapper);\n\n        mv.visitInsn(RETURN);\n        FunctionCodegen.endVisit(mv, \"constructor\", myClass);\n\n        assert constructorDescriptor != null;\n        FunctionCodegen.generateDefaultIfNeeded(constructorContext, state, v, constructorMethod.getAsmMethod(), constructorDescriptor,\n                                                OwnerKind.IMPLEMENTATION);\n    }","id":100355,"modified_method":"private void generatePrimiryConstructorImpl(\n            ConstructorDescriptor constructorDescriptor,\n            ConstructorContext constructorContext,\n            JvmMethodSignature constructorMethod,\n            CallableMethod callableMethod,\n            boolean hasThis0,\n            MutableClosure closure,\n            MethodVisitor mv\n    ) {\n        mv.visitCode();\n\n        List<ValueParameterDescriptor> paramDescrs = constructorDescriptor != null\n                                                     ? constructorDescriptor.getValueParameters()\n                                                     : Collections.<ValueParameterDescriptor>emptyList();\n\n        ConstructorFrameMap frameMap = new ConstructorFrameMap(callableMethod, constructorDescriptor);\n\n        final InstructionAdapter iv = new InstructionAdapter(mv);\n        ExpressionCodegen codegen = new ExpressionCodegen(mv, frameMap, Type.VOID_TYPE, constructorContext, state);\n\n        JvmClassName classname = JvmClassName.byType(classAsmType);\n\n        if (superCall == null) {\n            genSimpleSuperCall(iv);\n        }\n        else if (superCall instanceof JetDelegatorToSuperClass) {\n            genSuperCallToDelegatorToSuperClass(iv);\n        }\n        else {\n            generateDelegatorToConstructorCall(iv, codegen, constructorDescriptor, frameMap);\n        }\n\n        if (hasThis0) {\n            final Type type = typeMapper\n                    .mapType(enclosingClassDescriptor(bindingContext, descriptor));\n            String interfaceDesc = type.getDescriptor();\n            iv.load(0, classAsmType);\n            iv.load(frameMap.getOuterThisIndex(), type);\n            iv.putfield(classname.getInternalName(), THIS$0, interfaceDesc);\n        }\n\n        if (closure != null) {\n            int k = hasThis0 ? 2 : 1;\n            final String internalName = typeMapper.mapType(descriptor).getInternalName();\n            final ClassifierDescriptor captureReceiver = closure.getCaptureReceiver();\n            if (captureReceiver != null) {\n                iv.load(0, OBJECT_TYPE);\n                final Type asmType = typeMapper.mapType(captureReceiver.getDefaultType(), JetTypeMapperMode.IMPL);\n                iv.load(1, asmType);\n                iv.putfield(internalName, RECEIVER$0, asmType.getDescriptor());\n                k += asmType.getSize();\n            }\n\n            for (DeclarationDescriptor varDescr : closure.getCaptureVariables().keySet()) {\n                if (varDescr instanceof VariableDescriptor && !(varDescr instanceof PropertyDescriptor)) {\n                    Type sharedVarType = typeMapper.getSharedVarType(varDescr);\n                    if (sharedVarType == null) {\n                        sharedVarType = typeMapper.mapType((VariableDescriptor) varDescr);\n                    }\n                    iv.load(0, OBJECT_TYPE);\n                    iv.load(k, StackValue.refType(sharedVarType));\n                    k += StackValue.refType(sharedVarType).getSize();\n                    iv.putfield(internalName,\n                                \"$\" + varDescr.getName(), sharedVarType.getDescriptor());\n                }\n            }\n        }\n\n        int n = 0;\n        for (JetDelegationSpecifier specifier : myClass.getDelegationSpecifiers()) {\n            if (specifier == superCall) {\n                continue;\n            }\n\n            if (specifier instanceof JetDelegatorByExpressionSpecifier) {\n                genCallToDelegatorByExpressionSpecifier(iv, codegen, classAsmType, classname, n++, specifier);\n            }\n        }\n\n        int curParam = 0;\n        List<JetParameter> constructorParameters = getPrimaryConstructorParameters();\n        for (JetParameter parameter : constructorParameters) {\n            if (parameter.getValOrVarNode() != null) {\n                VariableDescriptor descriptor = paramDescrs.get(curParam);\n                Type type = typeMapper.mapType(descriptor);\n                iv.load(0, classAsmType);\n                iv.load(frameMap.getIndex(descriptor), type);\n                iv.putfield(classAsmType.getInternalName(), descriptor.getName().getName(), type.getDescriptor());\n            }\n            curParam++;\n        }\n\n        generateInitializers(codegen, iv, myClass.getDeclarations(), bindingContext, typeMapper);\n\n        mv.visitInsn(RETURN);\n        FunctionCodegen.endVisit(mv, \"constructor\", myClass);\n\n        assert constructorDescriptor != null;\n        FunctionCodegen.generateDefaultIfNeeded(constructorContext, state, v, constructorMethod.getAsmMethod(), constructorDescriptor,\n                                                OwnerKind.IMPLEMENTATION);\n    }","commit_id":"104f2a08d31f5e8b807756285b3796b632398c01","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public Thread newThread(ThreadGroup group, Runnable r, String name) {\n            Thread newThread = f.newThread(group, r, name);\n            if(pattern!=null)\n                pattern.renameThread(newThread);\n                \n            return newThread;\n        }","id":100356,"modified_method":"public Thread newThread(ThreadGroup group, Runnable r, String name) {\n            Thread newThread = f.newThread(group, r, name);\n            renameThread(newThread);\n            return newThread;\n        }","commit_id":"d97572773325ad1a814ac0c140db2fcf81ec106d","url":"https://github.com/belaban/JGroups"},{"original_method":"public ProtocolStack(ThreadFactory factory, JChannel channel, String setup_string) throws ChannelException {\n        this.thread_factory=new PatternedThreadFactory(factory,null);\n        this.setup_string=setup_string;\n        this.channel=channel;\n        // ClassConfigurator.getInstance(true); // will create the singleton\n\n        Class tmp=ClassConfigurator.class; // load this class, trigger init()\n        try {\n            tmp.newInstance();\n        }\n        catch(Exception e) {\n            throw new ChannelException(\"failed initializing ClassConfigurator\", e);\n        }\n\n        this.timer_thread_factory=new PatternedThreadFactory(\n                newThreadFactory(new ThreadGroup(Util.getGlobalThreadGroup(), \"Timers\"), \"Timer\", true),\n                null);\n        timer= new TimeScheduler(timer_thread_factory);\n    }","id":100357,"modified_method":"public ProtocolStack(ThreadFactory factory, JChannel channel, String setup_string) throws ChannelException {\n        this.thread_factory=new PatternedThreadFactory(factory,null);\n        this.setup_string=setup_string;\n        this.channel=channel;\n        // ClassConfigurator.getInstance(true); // will create the singleton\n\n        Class tmp=ClassConfigurator.class; // load this class, trigger init()\n        try {\n            tmp.newInstance();\n        }\n        catch(Exception e) {\n            throw new ChannelException(\"failed initializing ClassConfigurator\", e);\n        }\n\n        this.timer_thread_factory=new IdThreadFactory(\n                newThreadFactory(new ThreadGroup(Util.getGlobalThreadGroup(), \"Timers\"), \"Timer\", true),\n                null);\n        timer= new TimeScheduler(timer_thread_factory);\n    }","commit_id":"d97572773325ad1a814ac0c140db2fcf81ec106d","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r) {\n            Thread newThread = f.newThread(r);\n            if(pattern!=null)\n                pattern.renameThread(newThread);\n                \n            return newThread;\n        }","id":100358,"modified_method":"public Thread newThread(Runnable r) {\n            Thread newThread = f.newThread(r);\n            renameThread(newThread);\n            return newThread;\n        }","commit_id":"d97572773325ad1a814ac0c140db2fcf81ec106d","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r, String name) {\n            Thread newThread = f.newThread(r, name);\n            if(pattern!=null)\n                pattern.renameThread(newThread);\n                \n            return newThread;\n        }","id":100359,"modified_method":"public Thread newThread(Runnable r, String name) {\n            Thread newThread = f.newThread(r, name);\n            renameThread(newThread);\n            return newThread;\n        }","commit_id":"d97572773325ad1a814ac0c140db2fcf81ec106d","url":"https://github.com/belaban/JGroups"},{"original_method":"public ProtocolStack(ThreadFactory factory, JChannel channel, String setup_string) throws ChannelException {\n        this.thread_factory=new PatternedThreadFactory(factory,null);\n        this.setup_string=setup_string;\n        this.channel=channel;\n        // ClassConfigurator.getInstance(true); // will create the singleton\n\n        Class tmp=ClassConfigurator.class; // load this class, trigger init()\n        try {\n            tmp.newInstance();\n        }\n        catch(Exception e) {\n            throw new ChannelException(\"failed initializing ClassConfigurator\", e);\n        }\n\n        this.timer_thread_factory=new PatternedThreadFactory(\n                newThreadFactory(new ThreadGroup(Util.getGlobalThreadGroup(), \"Timers\"), \"Timer\", true),\n                null);\n        timer= new TimeScheduler(timer_thread_factory);\n    }","id":100360,"modified_method":"public ProtocolStack(ThreadFactory factory, JChannel channel, String setup_string) throws ChannelException {\n        this.thread_factory=new PatternedThreadFactory(factory,null);\n        this.setup_string=setup_string;\n        this.channel=channel;\n        // ClassConfigurator.getInstance(true); // will create the singleton\n\n        Class tmp=ClassConfigurator.class; // load this class, trigger init()\n        try {\n            tmp.newInstance();\n        }\n        catch(Exception e) {\n            throw new ChannelException(\"failed initializing ClassConfigurator\", e);\n        }\n\n        this.timer_thread_factory=new IdThreadFactory(\n                newThreadFactory(new ThreadGroup(Util.getGlobalThreadGroup(), \"Timers\"), \"Timer\", true),\n                null);\n        timer= new TimeScheduler(timer_thread_factory);\n    }","commit_id":"dc80f427d711f768685757f66dab22f7a83fd1f3","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r) {\n            Thread newThread = f.newThread(r);\n            if(pattern!=null)\n                pattern.renameThread(newThread);\n                \n            return newThread;\n        }","id":100361,"modified_method":"public Thread newThread(Runnable r) {\n            Thread newThread = f.newThread(r);\n            renameThread(newThread);\n            return newThread;\n        }","commit_id":"dc80f427d711f768685757f66dab22f7a83fd1f3","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(ThreadGroup group, Runnable r, String name) {\n            Thread newThread = f.newThread(group, r, name);\n            if(pattern!=null)\n                pattern.renameThread(newThread);\n                \n            return newThread;\n        }","id":100362,"modified_method":"public Thread newThread(ThreadGroup group, Runnable r, String name) {\n            Thread newThread = f.newThread(group, r, name);\n            renameThread(newThread);\n            return newThread;\n        }","commit_id":"dc80f427d711f768685757f66dab22f7a83fd1f3","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r, String name) {\n            Thread newThread = f.newThread(r, name);\n            if(pattern!=null)\n                pattern.renameThread(newThread);\n                \n            return newThread;\n        }","id":100363,"modified_method":"public Thread newThread(Runnable r, String name) {\n            Thread newThread = f.newThread(r, name);\n            renameThread(newThread);\n            return newThread;\n        }","commit_id":"dc80f427d711f768685757f66dab22f7a83fd1f3","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Instantiates a new event panel.\n     *\n     * @param eventConfDao the OpenNMS Events Configuration DAO\n     * @param eventProxy the OpenNMS Events Proxy\n     * @param fileName the MIB's file name\n     * @param events the OpenNMS events object\n     * @param logger the logger object\n     */\n    public EventPanel(final EventConfDao eventConfDao, final EventProxy eventProxy, final String fileName, final Events events, final Logger logger) {\n\n        if (eventProxy == null)\n            throw new RuntimeException(\"eventProxy cannot be null.\");\n        if (eventConfDao == null)\n            throw new RuntimeException(\"eventConfDao cannot be null.\");\n\n        this.eventConfDao = eventConfDao;\n        this.eventProxy = eventProxy;\n        this.fileName = fileName;\n\n        setCaption(\"Events\");\n        addStyleName(Runo.PANEL_LIGHT);\n\n        VerticalLayout mainLayout = new VerticalLayout();\n        mainLayout.setSpacing(true);\n        mainLayout.setMargin(true);\n\n        HorizontalLayout toolbar = new HorizontalLayout();\n        toolbar.addComponent(new Button(\"Save Events File\", new Button.ClickListener() {\n            public void buttonClick(ClickEvent event) {\n                events.setEvent(eventTable.getOnmsEvents());\n                logger.info(\"The events have been saved.\");\n                processEvents(events, logger);\n            }\n        }));\n        toolbar.addComponent(new Button(\"Cancel\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                logger.info(\"Event processing has been canceled\");\n                cancel();\n            }\n        }));\n        mainLayout.addComponent(toolbar);\n        mainLayout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        eventTable = new EventTable(events) {\n            public void updateExternalSource(org.opennms.netmgt.xml.eventconf.Event event) {\n                eventForm.setEventDataSource(event);\n                eventForm.setVisible(true);\n                eventForm.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n        mainLayout.addComponent(eventTable);\n\n        add = new Button(\"Add Event\");\n        add.addListener(new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                org.opennms.netmgt.xml.eventconf.Event e = new org.opennms.netmgt.xml.eventconf.Event();\n                e.setUei(\"uei.opennms.org/newEvent\");\n                e.setEventLabel(\"New Event\");\n                e.setDescr(\"New Event Description\");\n                e.setLogmsg(new Logmsg());\n                e.getLogmsg().setContent(\"New Event Log Message\");\n                e.getLogmsg().setDest(\"logndisplay\");\n                e.setSeverity(\"Indeterminate\");\n                e.setMask(new Mask());\n                e.setAlarmData(new AlarmData());\n                eventTable.updateExternalSource(e);\n                eventForm.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n        mainLayout.addComponent(add);\n        mainLayout.setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n\n        eventForm = new EventForm() {\n            public void saveEvent(org.opennms.netmgt.xml.eventconf.Event event) {\n                if (isNew) {\n                    eventTable.addEvent(event);\n                    logger.info(\"Event \" + event.getUei() + \" has been created.\");\n                } else {\n                    logger.info(\"Event \" + event.getUei() + \" has been updated.\");\n                }\n                eventTable.refreshRowCache();\n            }\n            public void deleteEvent(org.opennms.netmgt.xml.eventconf.Event event) {\n                logger.info(\"Event \" + event.getUei() + \" has been removed.\");\n                eventTable.select(null);\n                eventTable.removeItem(event.getUei());\n                eventTable.refreshRowCache();\n            }\n        };\n        mainLayout.addComponent(eventForm);\n\n        setContent(mainLayout);\n    }","id":100364,"modified_method":"/**\n     * Instantiates a new event panel.\n     *\n     * @param eventConfDao the OpenNMS Events Configuration DAO\n     * @param eventProxy the OpenNMS Events Proxy\n     * @param fileName the MIB's file name\n     * @param events the OpenNMS events object\n     * @param logger the logger object\n     */\n    public EventPanel(final EventConfDao eventConfDao, final EventProxy eventProxy, final String fileName, final Events events, final Logger logger) {\n\n        if (eventProxy == null)\n            throw new RuntimeException(\"eventProxy cannot be null.\");\n        if (eventConfDao == null)\n            throw new RuntimeException(\"eventConfDao cannot be null.\");\n\n        this.eventConfDao = eventConfDao;\n        this.eventProxy = eventProxy;\n        this.fileName = fileName;\n\n        setCaption(\"Events\");\n        addStyleName(Runo.PANEL_LIGHT);\n\n        VerticalLayout mainLayout = new VerticalLayout();\n        mainLayout.setSpacing(true);\n        mainLayout.setMargin(true);\n\n        HorizontalLayout toolbar = new HorizontalLayout();\n        toolbar.addComponent(new Button(\"Save Events File\", new Button.ClickListener() {\n            public void buttonClick(ClickEvent event) {\n                events.setEvent(eventTable.getOnmsEvents());\n                logger.info(\"The events have been saved.\");\n                processEvents(events, logger);\n            }\n        }));\n        toolbar.addComponent(new Button(\"Cancel\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                logger.info(\"Event processing has been canceled\");\n                cancel();\n            }\n        }));\n        mainLayout.addComponent(toolbar);\n        mainLayout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        eventTable = new EventTable(events) {\n            public void updateExternalSource(org.opennms.netmgt.xml.eventconf.Event event) {\n                eventForm.setEventDataSource(event);\n                eventForm.setVisible(true);\n                eventForm.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n        mainLayout.addComponent(eventTable);\n\n        add = new Button(\"Add Event\");\n        add.addListener(new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                org.opennms.netmgt.xml.eventconf.Event e = new org.opennms.netmgt.xml.eventconf.Event();\n                e.setUei(\"uei.opennms.org/newEvent\");\n                e.setEventLabel(\"New Event\");\n                e.setDescr(\"New Event Description\");\n                e.setLogmsg(new Logmsg());\n                e.getLogmsg().setContent(\"New Event Log Message\");\n                e.getLogmsg().setDest(\"logndisplay\");\n                e.setSeverity(\"Indeterminate\");\n                e.setMask(new Mask());\n                e.setAlarmData(new AlarmData());\n                eventTable.updateExternalSource(e);\n                eventForm.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n        mainLayout.addComponent(add);\n        mainLayout.setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n\n        eventForm = new EventForm() {\n            public void saveEvent(org.opennms.netmgt.xml.eventconf.Event event) {\n                if (isNew) {\n                    eventTable.addEvent(event);\n                    logger.info(\"Event \" + event.getUei() + \" has been created.\");\n                } else {\n                    logger.info(\"Event \" + event.getUei() + \" has been updated.\");\n                }\n                eventTable.refreshRowCache();\n            }\n            public void deleteEvent(org.opennms.netmgt.xml.eventconf.Event event) {\n                logger.info(\"Event \" + event.getUei() + \" has been removed.\");\n                Object itemId = eventTable.getValue();\n                if (itemId != null) {\n                    eventTable.select(null);\n                    eventTable.removeItem(itemId);\n                    eventTable.refreshRowCache();\n                }\n            }\n        };\n        mainLayout.addComponent(eventForm);\n\n        setContent(mainLayout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new event table.\n     *\n     * @param events the OpenNMS events\n     */\n    public EventTable(final Events events) {\n        container = new BeanContainer<String, org.opennms.netmgt.xml.eventconf.Event>(org.opennms.netmgt.xml.eventconf.Event.class);\n        container.setBeanIdProperty(\"uei\");\n        container.addAll(events.getEventCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addListener(new Property.ValueChangeListener() {\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    updateExternalSource(getEvent(getValue()));\n                }\n            }\n        });\n    }","id":100365,"modified_method":"/**\n     * Instantiates a new event table.\n     *\n     * @param events the OpenNMS events\n     */\n    public EventTable(final Events events) {\n        container.addAll(events.getEventCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addListener(new Property.ValueChangeListener() {\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    updateExternalSource(getEvent(getValue()));\n                }\n            }\n        });\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Gets all the OpenNMS events.\n     *\n     * @return the OpenNMS events\n     */\n    public List<org.opennms.netmgt.xml.eventconf.Event> getOnmsEvents() {\n        List<org.opennms.netmgt.xml.eventconf.Event> events = new ArrayList<org.opennms.netmgt.xml.eventconf.Event>();\n        for (String itemId : container.getItemIds()) {\n            org.opennms.netmgt.xml.eventconf.Event e = getEvent(itemId);\n            // It doesn't make any sense an alarmData without reductionKey\n            AlarmData a = e.getAlarmData();\n            if (a != null && (a.getReductionKey() == null || a.getReductionKey().trim().equals(\"\")))\n                e.setAlarmData(null);\n            // It doesn't make any sense an mask without mask elements.\n            Mask m = e.getMask();\n            if (m != null && m.getMaskelementCollection().isEmpty())\n                e.setMask(null);\n            events.add(e);\n        }\n        return events;\n    }","id":100366,"modified_method":"/**\n     * Gets all the OpenNMS events.\n     *\n     * @return the OpenNMS events\n     */\n    public List<org.opennms.netmgt.xml.eventconf.Event> getOnmsEvents() {\n        List<org.opennms.netmgt.xml.eventconf.Event> events = new ArrayList<org.opennms.netmgt.xml.eventconf.Event>();\n        for (Object itemId : container.getItemIds()) {\n            org.opennms.netmgt.xml.eventconf.Event e = getEvent(itemId);\n            // It doesn't make any sense an alarmData without reductionKey\n            AlarmData a = e.getAlarmData();\n            if (a != null && (a.getReductionKey() == null || a.getReductionKey().trim().equals(\"\")))\n                e.setAlarmData(null);\n            // It doesn't make any sense an mask without mask elements.\n            Mask m = e.getMask();\n            if (m != null && m.getMaskelementCollection().isEmpty())\n                e.setMask(null);\n            events.add(e);\n        }\n        return events;\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds an event.\n     *\n     * @param event the new event\n     */\n    public void addEvent(org.opennms.netmgt.xml.eventconf.Event event) {\n        container.addBean(event);\n    }","id":100367,"modified_method":"/**\n     * Adds an event.\n     *\n     * @param event the new event\n     */\n    public void addEvent(org.opennms.netmgt.xml.eventconf.Event event) {\n        container.addOnmsBean(event);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new group panel.\n     *\n     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO\n     * @param source the OpenNMS Data Collection Group object\n     * @param logger the logger object\n     */\n    public GroupPanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new GroupForm(dataCollectionConfigDao, source) {\n            @Override\n            public void saveGroup(Group group) {\n                if (isNew) {\n                    table.addGroup(group);\n                    logger.info(\"MIB Group \" + group.getName() + \" has been created.\");\n                } else {\n                    logger.info(\"MIB Group \" + group.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n            }\n            @Override\n            public void deleteGroup(Group group) {\n                logger.info(\"MIB Group \" + group.getName() + \" has been updated.\");\n                table.removeItem(group.getName());\n                table.refreshRowCache();\n            }\n        };\n\n        table = new GroupTable(source) {\n            @Override\n            public void updateExternalSource(BeanItem<Group> item) {\n                form.setItemDataSource(item, Arrays.asList(GroupForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        add = new Button(\"Add Group\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                Group group = new Group();\n                group.setName(\"New Group\");\n                group.setIfType(\"ignore\");\n                table.updateExternalSource(new BeanItem<Group>(group));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        addComponent(add);\n        addComponent(form);\n\n        setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n    }","id":100368,"modified_method":"/**\n     * Instantiates a new group panel.\n     *\n     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO\n     * @param source the OpenNMS Data Collection Group object\n     * @param logger the logger object\n     */\n    public GroupPanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new GroupForm(dataCollectionConfigDao, source) {\n            @Override\n            public void saveGroup(Group group) {\n                if (isNew) {\n                    table.addGroup(group);\n                    logger.info(\"MIB Group \" + group.getName() + \" has been created.\");\n                } else {\n                    logger.info(\"MIB Group \" + group.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n            }\n            @Override\n            public void deleteGroup(Group group) {\n                logger.info(\"MIB Group \" + group.getName() + \" has been updated.\");\n                Object itemId = table.getValue();\n                if (itemId != null) {\n                    table.select(null);\n                    table.removeItem(itemId);\n                    table.refreshRowCache();\n                }\n            }\n        };\n\n        table = new GroupTable(source) {\n            @Override\n            public void updateExternalSource(BeanItem<Group> item) {\n                form.setItemDataSource(item, Arrays.asList(GroupForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        add = new Button(\"Add Group\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                Group group = new Group();\n                group.setName(\"New Group\");\n                group.setIfType(\"ignore\");\n                table.updateExternalSource(new BeanItem<Group>(group));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        addComponent(add);\n        addComponent(form);\n\n        setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a group.\n     *\n     * @param group the group\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addGroup(Group group) {\n        ((BeanContainer<String,Group>) getContainerDataSource()).addBean(group);\n    }","id":100369,"modified_method":"/**\n     * Adds a group.\n     *\n     * @param group the group\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addGroup(Group group) {\n        ((OnmsBeanContainer<Group>) getContainerDataSource()).addOnmsBean(group);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new group table.\n     *\n     * @param source the OpenNMS Data Collection Group\n     */\n    public GroupTable(final DatacollectionGroup source) {\n        BeanContainer<String,Group> container = new BeanContainer<String,Group>(Group.class);\n        container.setBeanIdProperty(\"name\");\n        container.addAll(source.getGroupCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addGeneratedColumn(\"count\", new ColumnGenerator() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Object generateCell(Table source, Object itemId, Object columnId) {\n                BeanItem<Group> item = (BeanItem<Group>) source.getContainerDataSource().getItem(itemId);\n                return item.getBean().getMibObjCount();\n            }\n        });\n        addListener(new Property.ValueChangeListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    BeanItem<Group> item = (BeanItem<Group>) getContainerDataSource().getItem(getValue());\n                    updateExternalSource(item);\n                }\n            }\n        });\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n    }","id":100370,"modified_method":"/**\n     * Instantiates a new group table.\n     *\n     * @param source the OpenNMS Data Collection Group\n     */\n    public GroupTable(final DatacollectionGroup source) {\n        OnmsBeanContainer<Group> container = new OnmsBeanContainer<Group>(Group.class);\n        container.setBeanIdProperty(\"name\");\n        container.addAll(source.getGroupCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addGeneratedColumn(\"count\", new ColumnGenerator() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Object generateCell(Table source, Object itemId, Object columnId) {\n                BeanItem<Group> item = (BeanItem<Group>) source.getContainerDataSource().getItem(itemId);\n                return item.getBean().getMibObjCount();\n            }\n        });\n        addListener(new Property.ValueChangeListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    BeanItem<Group> item = (BeanItem<Group>) getContainerDataSource().getItem(getValue());\n                    updateExternalSource(item);\n                }\n            }\n        });\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new include collection field.\n     * \n     * @param dataCollectionConfigDao the data collection configuration DAO\n     */\n    public IncludeCollectionField(final DataCollectionConfigDao dataCollectionConfigDao) {\n        table.setCaption(\"Includes List\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"type\", \"value\"});\n        table.setColumnHeaders(new String[]{\"Type\", \"Value\"});\n        table.setSelectable(true);\n        table.setImmediate(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        add = new Button(\"Add\", new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                final IncludeCollectionWrapper obj = new IncludeCollectionWrapper();\n                IncludeCollectionWindow w = new IncludeCollectionWindow(dataCollectionConfigDao, container, obj) {\n                    @Override\n                    public void fieldChanged() {\n                        container.addBean(obj);\n                        table.select(obj);\n                    }\n                };\n                getApplication().getMainWindow().addWindow(w);\n            }\n        });\n        edit = new Button(\"Edit\", new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                final Object value = table.getValue();\n                if (value == null) {\n                    getApplication().getMainWindow().showNotification(\"Please select a IncludeCollection from the table.\");\n                    return;\n                }\n                IncludeCollectionWindow w = new IncludeCollectionWindow(dataCollectionConfigDao, container, (IncludeCollectionWrapper) value) {\n                    @Override\n                    public void fieldChanged() {\n                        table.refreshRowCache();\n                    }\n                };\n                getApplication().getMainWindow().addWindow(w);\n            }\n        });\n        delete = new Button(\"Delete\", new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                deleteHandler();\n            }\n        });\n\n        toolbar.addComponent(add);\n        toolbar.addComponent(edit);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setCompositionRoot(layout);\n    }","id":100371,"modified_method":"/**\n     * Instantiates a new include collection field.\n     * \n     * @param dataCollectionConfigDao the data collection configuration DAO\n     */\n    public IncludeCollectionField(final DataCollectionConfigDao dataCollectionConfigDao) {\n        table.setCaption(\"Includes List\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"type\", \"value\"});\n        table.setColumnHeaders(new String[]{\"Type\", \"Value\"});\n        table.setSelectable(true);\n        table.setImmediate(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        add = new Button(\"Add\", new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                final IncludeCollectionWrapper obj = new IncludeCollectionWrapper();\n                IncludeCollectionWindow w = new IncludeCollectionWindow(dataCollectionConfigDao, container, obj) {\n                    @Override\n                    public void fieldChanged() {\n                        table.select(container.addOnmsBean(obj));\n                    }\n                };\n                getApplication().getMainWindow().addWindow(w);\n            }\n        });\n        edit = new Button(\"Edit\", new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                final Object value = table.getValue();\n                if (value == null) {\n                    getApplication().getMainWindow().showNotification(\"Please select a IncludeCollection from the table.\");\n                    return;\n                }\n                IncludeCollectionWindow w = new IncludeCollectionWindow(dataCollectionConfigDao, container, (IncludeCollectionWrapper) value) {\n                    @Override\n                    public void fieldChanged() {\n                        table.refreshRowCache();\n                    }\n                };\n                getApplication().getMainWindow().addWindow(w);\n            }\n        });\n        delete = new Button(\"Delete\", new Button.ClickListener() {\n            @Override\n            public void buttonClick(ClickEvent event) {\n                deleteHandler();\n            }\n        });\n\n        toolbar.addComponent(add);\n        toolbar.addComponent(edit);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new include collection window.\n     * \n     * @param dataCollectionConfigDao the data collection configuration DAO\n     * @param container the source list of elements\n     * @param wrapper the current selected value\n     */\n    public IncludeCollectionWindow(final DataCollectionConfigDao dataCollectionConfigDao,\n            final BeanItemContainer<IncludeCollectionWrapper> container,\n            final IncludeCollectionWrapper wrapper) {\n\n        setCaption(\"Include SystemDef/DataCollectionGroup\");\n        setModal(true);\n        setWidth(\"400px\");\n        setHeight(\"180px\");\n        setResizable(false);\n        setClosable(false);\n        addStyleName(Runo.WINDOW_DIALOG);\n\n        form.setImmediate(true);\n        form.setWidth(\"100%\");\n        form.setWriteThrough(false);\n        form.getLayout().setMargin(true);\n\n        final ComboBox valueField = new ComboBox(\"Value\");\n        valueField.setEnabled(false);\n        valueField.setRequired(true);\n        valueField.setImmediate(true);\n        valueField.setNewItemsAllowed(false);\n        valueField.setNullSelectionAllowed(false);\n\n        final ComboBox typeField = new ComboBox(\"Type\");\n        typeField.setRequired(true);\n        typeField.setImmediate(true);\n        typeField.setNewItemsAllowed(false);\n        typeField.setNullSelectionAllowed(false);\n        typeField.addItem(IncludeCollectionWrapper.DC_GROUP);\n        typeField.addItem(IncludeCollectionWrapper.SYSTEM_DEF);\n        typeField.addListener(new Property.ValueChangeListener() {\n            @Override\n            public void valueChange(Property.ValueChangeEvent event) {\n                String selected = (String) typeField.getValue();\n                if (selected == null) {\n                    return;\n                }\n                // Get available fields.\n                // FIXME If a new dcGroup is added, DataCollectionConfigDao is not able to reach it.\n                List<String> values = selected.equals(IncludeCollectionWrapper.SYSTEM_DEF) ? dataCollectionConfigDao.getAvailableSystemDefs()\n                    : dataCollectionConfigDao.getAvailableDataCollectionGroups();\n                // Remove already selected\n                for (IncludeCollectionWrapper obj : container.getItemIds()) {\n                    if (obj.getType().equals(selected)) {\n                        values.remove(obj.getValue());\n                    }\n                }\n                // Updating combo-box\n                valueField.removeAllItems();\n                for (String v : values) {\n                    valueField.addItem(v);\n                }\n                if (wrapper.getValue() != null) {\n                    valueField.addItem(wrapper.getValue());\n                }\n                valueField.setEnabled(valueField.getItemIds().size() > 1);\n            }\n        });\n\n        form.setFormFieldFactory(new FormFieldFactory() {\n            @Override\n            public Field createField(Item item, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"type\"))\n                    return typeField;\n                if (propertyId.equals(\"value\"))\n                    return valueField;\n                return null;\n            }\n        });\n\n        okButton = new Button(\"Update\");\n        okButton.addListener(this);\n\n        cancelButton = new Button(\"Cancel\");\n        cancelButton.addListener(this);\n\n        HorizontalLayout toolbar = new HorizontalLayout();\n        toolbar.addComponent(okButton);\n        toolbar.addComponent(cancelButton);\n\n        addComponent(form);\n        addComponent(toolbar);\n\n        ((VerticalLayout) getContent()).setComponentAlignment(toolbar, Alignment.BOTTOM_RIGHT);\n\n        form.setItemDataSource(new BeanItem<IncludeCollectionWrapper>(wrapper));\n    }","id":100372,"modified_method":"/**\n     * Instantiates a new include collection window.\n     * \n     * @param dataCollectionConfigDao the data collection configuration DAO\n     * @param container the source list of elements\n     * @param wrapper the current selected value\n     */\n    public IncludeCollectionWindow(final DataCollectionConfigDao dataCollectionConfigDao,\n            final OnmsBeanContainer<IncludeCollectionWrapper> container,\n            final IncludeCollectionWrapper wrapper) {\n\n        setCaption(\"Include SystemDef/DataCollectionGroup\");\n        setModal(true);\n        setWidth(\"400px\");\n        setHeight(\"180px\");\n        setResizable(false);\n        setClosable(false);\n        addStyleName(Runo.WINDOW_DIALOG);\n\n        form.setImmediate(true);\n        form.setWidth(\"100%\");\n        form.setWriteThrough(false);\n        form.getLayout().setMargin(true);\n\n        final ComboBox valueField = new ComboBox(\"Value\");\n        valueField.setEnabled(false);\n        valueField.setRequired(true);\n        valueField.setImmediate(true);\n        valueField.setNewItemsAllowed(false);\n        valueField.setNullSelectionAllowed(false);\n\n        final ComboBox typeField = new ComboBox(\"Type\");\n        typeField.setRequired(true);\n        typeField.setImmediate(true);\n        typeField.setNewItemsAllowed(false);\n        typeField.setNullSelectionAllowed(false);\n        typeField.addItem(IncludeCollectionWrapper.DC_GROUP);\n        typeField.addItem(IncludeCollectionWrapper.SYSTEM_DEF);\n        typeField.addListener(new Property.ValueChangeListener() {\n            @Override\n            public void valueChange(Property.ValueChangeEvent event) {\n                String selected = (String) typeField.getValue();\n                if (selected == null) {\n                    return;\n                }\n                // Get available fields.\n                // FIXME If a new dcGroup is added, DataCollectionConfigDao is not able to reach it.\n                List<String> values = selected.equals(IncludeCollectionWrapper.SYSTEM_DEF) ? dataCollectionConfigDao.getAvailableSystemDefs()\n                    : dataCollectionConfigDao.getAvailableDataCollectionGroups();\n                // Remove already selected\n                for (Object itemId : container.getItemIds()) {\n                    IncludeCollectionWrapper obj = container.getItem(itemId).getBean();\n                    if (obj.getType().equals(selected)) {\n                        values.remove(obj.getValue());\n                    }\n                }\n                // Updating combo-box\n                valueField.removeAllItems();\n                for (String v : values) {\n                    valueField.addItem(v);\n                }\n                if (wrapper.getValue() != null) {\n                    valueField.addItem(wrapper.getValue());\n                }\n                valueField.setEnabled(valueField.getItemIds().size() > 1);\n            }\n        });\n\n        form.setFormFieldFactory(new FormFieldFactory() {\n            @Override\n            public Field createField(Item item, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"type\"))\n                    return typeField;\n                if (propertyId.equals(\"value\"))\n                    return valueField;\n                return null;\n            }\n        });\n\n        okButton = new Button(\"Update\");\n        okButton.addListener(this);\n\n        cancelButton = new Button(\"Cancel\");\n        cancelButton.addListener(this);\n\n        HorizontalLayout toolbar = new HorizontalLayout();\n        toolbar.addComponent(okButton);\n        toolbar.addComponent(cancelButton);\n\n        addComponent(form);\n        addComponent(toolbar);\n\n        ((VerticalLayout) getContent()).setComponentAlignment(toolbar, Alignment.BOTTOM_RIGHT);\n\n        form.setItemDataSource(new BeanItem<IncludeCollectionWrapper>(wrapper));\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new mask element field.\n     */\n    public MaskElementField() {\n        container.setBeanIdProperty(\"mename\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"mename\", \"mevalueCollection\"});\n        table.setColumnHeader(\"mename\", \"Element Name\");\n        table.setColumnHeader(\"mevalueCollection\", \"Element Values\");\n        table.setColumnExpandRatio(\"mevalueCollection\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"mevalueCollection\")) {\n                    return new CsvListFieldWrapper();\n                }\n                return super.createField(container, itemId, propertyId, uiContext);\n            }\n        });\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n        setCompositionRoot(layout);\n    }","id":100373,"modified_method":"/**\n     * Instantiates a new mask element field.\n     */\n    public MaskElementField() {\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"mename\", \"mevalueCollection\"});\n        table.setColumnHeader(\"mename\", \"Element Name\");\n        table.setColumnHeader(\"mevalueCollection\", \"Element Values\");\n        table.setColumnExpandRatio(\"mevalueCollection\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"mevalueCollection\")) {\n                    return new CsvListFieldWrapper();\n                }\n                return super.createField(container, itemId, propertyId, uiContext);\n            }\n        });\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Maskelement e = new Maskelement();\n        e.setMename(\"??\"); // A non null value is required here.\n        container.addBean(e);\n    }","id":100374,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Maskelement e = new Maskelement();\n        e.setMename(\"??\"); // A non null value is required here.\n        container.addOnmsBean(e);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Varbind v = new Varbind();\n        v.setVbnumber(1); // A non null value is required here.\n        container.addBean(v);\n    }","id":100375,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Varbind v = new Varbind();\n        v.setVbnumber(1); // A non null value is required here.\n        container.addOnmsBean(v);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new mask varbind field.\n     */\n    public MaskVarbindField() {\n        container.setBeanIdProperty(\"vbnumber\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"vbnumber\", \"vbvalueCollection\"});\n        table.setColumnHeader(\"vbnumber\", \"Varbind Number\");\n        table.setColumnHeader(\"vbvalueCollection\", \"Varbind Values\");\n        table.setColumnExpandRatio(\"vbvalueCollection\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"vbvalueCollection\")) {\n                    return new CsvListFieldWrapper();\n                }\n                return super.createField(container, itemId, propertyId, uiContext);\n            }\n        });\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n        setCompositionRoot(layout);\n    }","id":100376,"modified_method":"/**\n     * Instantiates a new mask varbind field.\n     */\n    public MaskVarbindField() {\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"vbnumber\", \"vbvalueCollection\"});\n        table.setColumnHeader(\"vbnumber\", \"Varbind Number\");\n        table.setColumnHeader(\"vbvalueCollection\", \"Varbind Values\");\n        table.setColumnExpandRatio(\"vbvalueCollection\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"vbvalueCollection\")) {\n                    return new CsvListFieldWrapper();\n                }\n                return super.createField(container, itemId, propertyId, uiContext);\n            }\n        });\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        MibObj obj = new MibObj();\n        obj.setOid(\"1.1.1.1\");\n        container.addBean(obj);\n    }","id":100377,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        MibObj obj = new MibObj();\n        obj.setOid(\".1.1.1.1\");\n        obj.setInstance(\"0\");\n        obj.setType(\"gauge\");\n        obj.setAlias(\"testVar\");\n        container.addOnmsBean(obj);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new MIB object field.\n     *\n     * @param resourceTypes the available resource types\n     */\n    public MibObjField(final List<String> resourceTypes) {\n        container.setBeanIdProperty(\"oid\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"oid\", \"instance\", \"alias\", \"type\"});\n        table.setColumnHeader(\"oid\", \"OID\");\n        table.setColumnHeader(\"instance\", \"Instance\");\n        table.setColumnHeader(\"alias\", \"Alias\");\n        table.setColumnHeader(\"type\", \"Type\");\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"250px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new MibObjFieldFactory(resourceTypes));\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setValidationVisible(true);\n        setCompositionRoot(layout);\n    }","id":100378,"modified_method":"/**\n     * Instantiates a new MIB object field.\n     *\n     * @param resourceTypes the available resource types\n     */\n    public MibObjField(final List<String> resourceTypes) {\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"oid\", \"instance\", \"alias\", \"type\"});\n        table.setColumnHeader(\"oid\", \"OID\");\n        table.setColumnHeader(\"instance\", \"Instance\");\n        table.setColumnHeader(\"alias\", \"Alias\");\n        table.setColumnHeader(\"type\", \"Type\");\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"250px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new MibObjFieldFactory(resourceTypes));\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setValidationVisible(true);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Parameter p = new Parameter();\n        p.setKey(\"New Parameter\");\n        container.addBean(p);\n    }","id":100379,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Parameter p = new Parameter();\n        p.setKey(\"New Parameter\");\n        p.setValue(\"New Value\");\n        container.addOnmsBean(p);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public Object getValue() {\n        PersistenceSelectorStrategy dto = new PersistenceSelectorStrategy();\n        dto.setClazz((String) combo.getValue());\n        for (Object itemId: container.getItemIds()) {\n            dto.getParameterCollection().add(container.getItem(itemId).getBean());\n        }\n        return dto;\n    }","id":100380,"modified_method":"@Override\n    public Object getValue() {\n        PersistenceSelectorStrategy dto = new PersistenceSelectorStrategy();\n        if (combo.getValue() != null) {\n            dto.setClazz((String) combo.getValue());\n        }\n        for (Object itemId: container.getItemIds()) {\n            dto.getParameterCollection().add(container.getItem(itemId).getBean());\n        }\n        return dto;\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void setPropertyDataSource(Property newDataSource) {\n        Object value = newDataSource.getValue();\n        if (value instanceof PersistenceSelectorStrategy) {\n            PersistenceSelectorStrategy dto = (PersistenceSelectorStrategy) value;\n            combo.setValue(dto.getClazz());\n            container.removeAllItems();\n            container.addAll(dto.getParameterCollection());\n            table.setPageLength(dto.getParameterCollection() == null ? 0 : dto.getParameterCollection().size());\n        } else {\n            throw new ConversionException(\"Invalid type\");\n        }\n        super.setPropertyDataSource(newDataSource);\n    }","id":100381,"modified_method":"@Override\n    public void setPropertyDataSource(Property newDataSource) {\n        Object value = newDataSource.getValue();\n        if (value instanceof PersistenceSelectorStrategy) {\n            PersistenceSelectorStrategy dto = (PersistenceSelectorStrategy) value;\n            if (!combo.containsId(dto.getClazz())) {\n                combo.addItem(dto.getClazz());\n                combo.setValue(dto.getClazz());\n            }\n            container.removeAllItems();\n            container.addAll(dto.getParameterCollection());\n            table.setPageLength(dto.getParameterCollection() == null ? 0 : dto.getParameterCollection().size());\n        } else {\n            throw new ConversionException(\"Invalid type\");\n        }\n        super.setPropertyDataSource(newDataSource);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new persist selector strategy field.\n     */\n    public PersistSelectorStrategyField() {\n        combo.setCaption(\"Class Name\");\n        combo.addItem(\"org.opennms.netmgt.collectd.PersistAllSelectorStrategy\"); // To avoid requires opennms-services\n        combo.addItem(\"org.opennms.netmgt.collectd.PersistRegexSelectorStrategy\"); // To avoid requires opennms-services\n        combo.setNullSelectionAllowed(false);\n        combo.setRequired(true);\n        combo.setImmediate(true);\n        combo.setNewItemsAllowed(true);\n        combo.setNewItemHandler(new NewItemHandler() {\n            public void addNewItem(String newItemCaption) {\n                if (!combo.containsId(newItemCaption)) {\n                    combo.addItem(newItemCaption);\n                    combo.setValue(newItemCaption);\n                }\n            }\n        });\n\n        container.setBeanIdProperty(\"key\");\n        table.setCaption(\"Parameters\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"key\", \"value\"});\n        table.setColumnHeader(\"key\", \"Parameter Name\");\n        table.setColumnHeader(\"value\", \"Parameter Value\");\n        table.setColumnExpandRatio(\"value\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(combo);\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setCompositionRoot(layout);\n    }","id":100382,"modified_method":"/**\n     * Instantiates a new persist selector strategy field.\n     */\n    public PersistSelectorStrategyField() {\n        combo.setCaption(\"Class Name\");\n        combo.addItem(\"org.opennms.netmgt.collectd.PersistAllSelectorStrategy\"); // To avoid requires opennms-services\n        combo.addItem(\"org.opennms.netmgt.collectd.PersistRegexSelectorStrategy\"); // To avoid requires opennms-services\n        combo.setNullSelectionAllowed(false);\n        combo.setRequired(true);\n        combo.setImmediate(true);\n        combo.setNewItemsAllowed(true);\n        combo.setNewItemHandler(new NewItemHandler() {\n            public void addNewItem(String newItemCaption) {\n                if (!combo.containsId(newItemCaption)) {\n                    combo.addItem(newItemCaption);\n                    combo.setValue(newItemCaption);\n                }\n            }\n        });\n\n        table.setCaption(\"Parameters\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"key\", \"value\"});\n        table.setColumnHeader(\"key\", \"Parameter Name\");\n        table.setColumnHeader(\"value\", \"Parameter Value\");\n        table.setColumnExpandRatio(\"value\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(combo);\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new resource type panel.\n     *\n     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO\n     * @param source the OpenNMS Data Collection Group object\n     * @param logger the logger object\n     */\n    public ResourceTypePanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new ResourceTypeForm() {\n            @Override\n            public void saveResourceType(ResourceType resourceType) {\n                if (isNew) {\n                    table.addResourceType(resourceType);\n                    logger.info(\"Resource type \" + resourceType.getName() + \" has been created.\");\n                } else {\n                    logger.info(\"Resource type \" + resourceType.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n            }\n            @Override\n            public void deleteResourceType(ResourceType resourceType) {\n                logger.info(\"Resource type \" + resourceType.getName() + \" has been removed.\");\n                table.removeItem(resourceType.getName());\n                table.refreshRowCache();\n            }\n        };\n\n        table = new ResourceTypeTable(source) {\n            @Override\n            public void updateExternalSource(BeanItem<ResourceType> item) {\n                form.setItemDataSource(item, Arrays.asList(ResourceTypeForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        add = new Button(\"Add Resource Type\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                ResourceType rt = new ResourceType();\n                rt.setName(\"New Resource Type\");\n                rt.setLabel(\"New Resource Type\");\n                rt.setResourceLabel(\"{index}\");\n                PersistenceSelectorStrategy persistence = new PersistenceSelectorStrategy();\n                persistence.setClazz(\"org.opennms.netmgt.collectd.PersistAllSelectorStrategy\"); // To avoid requires opennms-services\n                rt.setPersistenceSelectorStrategy(persistence);\n                StorageStrategy storage = new StorageStrategy();\n                storage.setClazz(IndexStorageStrategy.class.getName());\n                rt.setStorageStrategy(storage);\n                table.updateExternalSource(new BeanItem<ResourceType>(rt));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        addComponent(add);\n        addComponent(form);\n\n        setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n    }","id":100383,"modified_method":"/**\n     * Instantiates a new resource type panel.\n     *\n     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO\n     * @param source the OpenNMS Data Collection Group object\n     * @param logger the logger object\n     */\n    public ResourceTypePanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new ResourceTypeForm() {\n            @Override\n            public void saveResourceType(ResourceType resourceType) {\n                if (isNew) {\n                    table.addResourceType(resourceType);\n                    logger.info(\"Resource type \" + resourceType.getName() + \" has been created.\");\n                } else {\n                    logger.info(\"Resource type \" + resourceType.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n            }\n            @Override\n            public void deleteResourceType(ResourceType resourceType) {\n                logger.info(\"Resource type \" + resourceType.getName() + \" has been removed.\");\n                Object itemId = table.getValue();\n                if (itemId != null) {\n                    table.select(null);\n                    table.removeItem(itemId);\n                    table.refreshRowCache();\n                }\n            }\n        };\n\n        table = new ResourceTypeTable(source) {\n            @Override\n            public void updateExternalSource(BeanItem<ResourceType> item) {\n                form.setItemDataSource(item, Arrays.asList(ResourceTypeForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        add = new Button(\"Add Resource Type\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                ResourceType rt = new ResourceType();\n                rt.setName(\"New Resource Type\");\n                rt.setLabel(\"New Resource Type\");\n                rt.setResourceLabel(\"{index}\");\n                PersistenceSelectorStrategy persistence = new PersistenceSelectorStrategy();\n                persistence.setClazz(\"org.opennms.netmgt.collectd.PersistAllSelectorStrategy\"); // To avoid requires opennms-services\n                rt.setPersistenceSelectorStrategy(persistence);\n                StorageStrategy storage = new StorageStrategy();\n                storage.setClazz(IndexStorageStrategy.class.getName());\n                rt.setStorageStrategy(storage);\n                table.updateExternalSource(new BeanItem<ResourceType>(rt));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        addComponent(add);\n        addComponent(form);\n\n        setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a resource type.\n     *\n     * @param resourceType the resource type\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addResourceType(ResourceType resourceType) {\n        ((BeanContainer<String,ResourceType>) getContainerDataSource()).addBean(resourceType);\n    }","id":100384,"modified_method":"/**\n     * Adds a resource type.\n     *\n     * @param resourceType the resource type\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addResourceType(ResourceType resourceType) {\n        ((OnmsBeanContainer<ResourceType>) getContainerDataSource()).addOnmsBean(resourceType);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new resource type table.\n     *\n     * @param group the OpenNMS Data Collection Group\n     */\n    public ResourceTypeTable(final DatacollectionGroup group) {\n        BeanContainer<String,ResourceType> container = new BeanContainer<String,ResourceType>(ResourceType.class);\n        container.setBeanIdProperty(\"name\");\n        container.addAll(group.getResourceTypeCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addListener(new Property.ValueChangeListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    BeanItem<ResourceType> item = (BeanItem<ResourceType>) getContainerDataSource().getItem(getValue());\n                    updateExternalSource(item);\n                }\n            }\n        });\n    }","id":100385,"modified_method":"/**\n     * Instantiates a new resource type table.\n     *\n     * @param group the OpenNMS Data Collection Group\n     */\n    public ResourceTypeTable(final DatacollectionGroup group) {\n        OnmsBeanContainer<ResourceType> container = new OnmsBeanContainer<ResourceType>(ResourceType.class);\n        container.addAll(group.getResourceTypeCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addListener(new Property.ValueChangeListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    BeanItem<ResourceType> item = (BeanItem<ResourceType>) getContainerDataSource().getItem(getValue());\n                    updateExternalSource(item);\n                }\n            }\n        });\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new RRD field.\n     */\n    public RrdField() {\n        step.setCaption(\"RRD Step (in seconds)\");\n        step.setRequired(true);\n        step.setImmediate(true);\n        step.setValidationVisible(true);\n        step.setNullSettingAllowed(false);\n        step.addValidator(new IntegerValidator(\"Invalid integer {0}\"));\n\n        table.setCaption(\"RRA List\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"cf\", \"xff\", \"steps\", \"rows\"});\n        table.setColumnHeaders(new String[]{\"Consolidation Function\", \"XFF\", \"Steps\", \"Rows\"});\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setImmediate(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"cf\")) {\n                    final ComboBox field = new ComboBox();\n                    field.setImmediate(true);\n                    field.setRequired(true);\n                    field.setNullSelectionAllowed(false);\n                    field.addItem(\"AVERAGE\");\n                    field.addItem(\"MIN\");\n                    field.addItem(\"MAX\");\n                    field.addItem(\"LAST\");\n                    return field;\n                }\n                if (propertyId.equals(\"steps\") || propertyId.equals(\"rows\")) {\n                    final TextField field = new TextField();\n                    field.setImmediate(true);\n                    field.setRequired(true);\n                    field.setNullSettingAllowed(false);\n                    field.addValidator(new IntegerValidator(\"Invalid integer {0}\"));\n                    return field;\n                }\n                if (propertyId.equals(\"xff\")) {\n                    final TextField field = new TextField();\n                    field.setImmediate(true);\n                    field.setRequired(true);\n                    field.setNullSettingAllowed(false);\n                    field.addValidator(new DoubleValidator(\"Invalid double {0}\"));\n                    return field;\n                }\n                return null;\n            }\n        });\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(step);\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setCompositionRoot(layout);\n    }","id":100386,"modified_method":"/**\n     * Instantiates a new RRD field.\n     */\n    public RrdField() {\n        step.setCaption(\"RRD Step (in seconds)\");\n        step.setRequired(true);\n        step.setImmediate(true);\n        step.setValidationVisible(true);\n        step.setNullSettingAllowed(false);\n        step.addValidator(new IntegerValidator(\"Invalid integer {0}\"));\n\n        table.setCaption(\"RRA List\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"cf\", \"xff\", \"steps\", \"rows\"});\n        table.setColumnHeaders(new String[]{\"Consolidation Function\", \"XFF\", \"Steps\", \"Rows\"});\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setImmediate(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"cf\")) {\n                    final ComboBox field = new ComboBox();\n                    field.setImmediate(true);\n                    field.setRequired(true);\n                    field.setNullSelectionAllowed(false);\n                    field.addItem(\"AVERAGE\");\n                    field.addItem(\"MIN\");\n                    field.addItem(\"MAX\");\n                    field.addItem(\"LAST\");\n                    return field;\n                }\n                if (propertyId.equals(\"steps\") || propertyId.equals(\"rows\")) {\n                    final TextField field = new TextField();\n                    field.setImmediate(true);\n                    field.setRequired(true);\n                    field.setNullRepresentation(\"\");\n                    field.setNullSettingAllowed(false);\n                    field.addValidator(new IntegerValidator(\"Invalid integer {0}\"));\n                    return field;\n                }\n                if (propertyId.equals(\"xff\")) {\n                    final TextField field = new TextField();\n                    field.setImmediate(true);\n                    field.setRequired(true);\n                    field.setNullRepresentation(\"\");\n                    field.setNullSettingAllowed(false);\n                    field.addValidator(new DoubleValidator(\"Invalid double {0}\"));\n                    return field;\n                }\n                return null;\n            }\n        });\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(step);\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        container.addBean(new RRA());\n    }","id":100387,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        RRA rra = new RRA();\n        rra.setCf(\"AVERAGE\");\n        rra.setXff(0.5);\n        rra.setSteps(0);\n        rra.setRows(0);\n        container.addOnmsBean(rra);\n        table.setCurrentPageFirstItemIndex(container.size());\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void setPropertyDataSource(Property newDataSource) {\n        Object value = newDataSource.getValue();\n        if (value instanceof Rrd) {\n            Rrd dto = (Rrd) value;\n            step.setValue(dto.getStep().toString());\n            container.removeAllItems();\n            List<RRA> rras = new ArrayList<RRA>();\n            for (String rra : dto.getRraCollection()) {\n                rras.add(new RRA(rra));\n            }\n            container.addAll(rras);\n            table.setPageLength(dto.getRraCount());\n        } else {\n            throw new ConversionException(\"Invalid type\");\n        }\n        super.setPropertyDataSource(newDataSource);\n    }","id":100388,"modified_method":"@Override\n    public void setPropertyDataSource(Property newDataSource) {\n        Object value = newDataSource.getValue();\n        if (value instanceof Rrd) {\n            Rrd dto = (Rrd) value;\n            step.setValue(dto.getStep().toString());\n            container.removeAllItems();\n            List<RRA> rras = new ArrayList<RRA>();\n            for (String rra : dto.getRraCollection()) {\n                try {\n                    rras.add(new RRA(rra));\n                } catch (Exception e) {} // Silently discard any bad RRAs.\n            }\n            container.addAll(rras);\n            table.setPageLength(dto.getRraCount());\n        } else {\n            throw new ConversionException(\"Invalid type\");\n        }\n        super.setPropertyDataSource(newDataSource);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new SNMP collection panel.\n     *\n     * @param dataCollectionConfigDao the data collection configuration DAO\n     * @param logger the logger\n     */\n    public SnmpCollectionPanel(final DataCollectionConfigDao dataCollectionConfigDao, final Logger logger) {\n        setCaption(\"SNMP Collections\");\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new SnmpCollectionForm(dataCollectionConfigDao) {\n            @Override\n            public void saveSnmpCollection(SnmpCollection snmpCollection) {\n                if (isNew) {\n                    table.addSnmpCollection(snmpCollection);\n                    logger.info(\"SNMP Collection \" + snmpCollection.getName() + \" has been created.\");\n                } else {\n                    logger.info(\"SNMP Collection \" + snmpCollection.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n                saveSnmpCollections(dataCollectionConfigDao, logger);\n            }\n            @Override\n            public void deleteSnmpCollection(SnmpCollection snmpCollection) {\n                logger.info(\"SNMP Collection \" + snmpCollection.getName() + \" has been removed.\");\n                table.removeItem(snmpCollection.getName());\n                table.refreshRowCache();\n                saveSnmpCollections(dataCollectionConfigDao, logger);\n            }\n        };\n\n        table = new SnmpCollectionTable(dataCollectionConfigDao) {\n            @Override\n            public void updateExternalSource(BeanItem<SnmpCollection> item) {\n                form.setItemDataSource(item, Arrays.asList(SnmpCollectionForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        final Button add = new Button(\"Add SNMP Collection\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                SnmpCollection collection = new SnmpCollection();\n                collection.setName(\"New Collection\");\n                collection.setSnmpStorageFlag(\"select\");\n                Rrd rrd = new Rrd();\n                rrd.setStep(300);\n                rrd.addRra(\"RRA:AVERAGE:0.5:1:2016\");\n                rrd.addRra(\"RRA:AVERAGE:0.5:12:1488\");\n                rrd.addRra(\"RRA:AVERAGE:0.5:288:366\");\n                rrd.addRra(\"RRA:MAX:0.5:288:366\");\n                rrd.addRra(\"RRA:MIN:0.5:288:366\");\n                collection.setRrd(rrd);\n                table.updateExternalSource(new BeanItem<SnmpCollection>(collection));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        final Button refresh = new Button(\"Refresh SNMP Collections\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                MessageBox mb = new MessageBox(getApplication().getMainWindow(),\n                                               \"Are you sure?\",\n                                               MessageBox.Icon.QUESTION,\n                                               \"By doing this all unsafed changes in SNMP collection will be lost.\",\n                                               new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, \"Yes\"),\n                                               new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, \"No\"));\n                mb.addStyleName(Runo.WINDOW_DIALOG);\n                mb.show(new EventListener() {\n                    public void buttonClicked(ButtonType buttonType) {\n                        if (buttonType == MessageBox.ButtonType.YES) {\n                            table.refreshSnmpCollections();\n                            table.select(null);\n                            form.setVisible(false);\n\n                        }\n                    }\n                });\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        final HorizontalLayout toolbar = new HorizontalLayout();\n        toolbar.addComponent(add);\n        toolbar.addComponent(refresh);\n        addComponent(toolbar);\n        addComponent(form);\n\n        setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n    }","id":100389,"modified_method":"/**\n     * Instantiates a new SNMP collection panel.\n     *\n     * @param dataCollectionConfigDao the data collection configuration DAO\n     * @param logger the logger\n     */\n    public SnmpCollectionPanel(final DataCollectionConfigDao dataCollectionConfigDao, final Logger logger) {\n        setCaption(\"SNMP Collections\");\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new SnmpCollectionForm(dataCollectionConfigDao) {\n            @Override\n            public void saveSnmpCollection(SnmpCollection snmpCollection) {\n                if (isNew) {\n                    table.addSnmpCollection(snmpCollection);\n                    logger.info(\"SNMP Collection \" + snmpCollection.getName() + \" has been created.\");\n                } else {\n                    logger.info(\"SNMP Collection \" + snmpCollection.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n                saveSnmpCollections(dataCollectionConfigDao, logger);\n            }\n            @Override\n            public void deleteSnmpCollection(SnmpCollection snmpCollection) {\n                logger.info(\"SNMP Collection \" + snmpCollection.getName() + \" has been removed.\");\n                Object itemId = table.getValue();\n                if (itemId != null) {\n                    table.select(null);\n                    table.removeItem(itemId);\n                    table.refreshRowCache();\n                    saveSnmpCollections(dataCollectionConfigDao, logger);\n                }\n            }\n        };\n\n        table = new SnmpCollectionTable(dataCollectionConfigDao) {\n            @Override\n            public void updateExternalSource(BeanItem<SnmpCollection> item) {\n                form.setItemDataSource(item, Arrays.asList(SnmpCollectionForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        final Button add = new Button(\"Add SNMP Collection\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                SnmpCollection collection = new SnmpCollection();\n                collection.setName(\"New Collection\");\n                collection.setSnmpStorageFlag(\"select\");\n                Rrd rrd = new Rrd();\n                rrd.setStep(300);\n                rrd.addRra(\"RRA:AVERAGE:0.5:1:2016\");\n                rrd.addRra(\"RRA:AVERAGE:0.5:12:1488\");\n                rrd.addRra(\"RRA:AVERAGE:0.5:288:366\");\n                rrd.addRra(\"RRA:MAX:0.5:288:366\");\n                rrd.addRra(\"RRA:MIN:0.5:288:366\");\n                collection.setRrd(rrd);\n                table.updateExternalSource(new BeanItem<SnmpCollection>(collection));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        final Button refresh = new Button(\"Refresh SNMP Collections\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                MessageBox mb = new MessageBox(getApplication().getMainWindow(),\n                                               \"Are you sure?\",\n                                               MessageBox.Icon.QUESTION,\n                                               \"By doing this all unsafed changes in SNMP collection will be lost.\",\n                                               new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, \"Yes\"),\n                                               new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, \"No\"));\n                mb.addStyleName(Runo.WINDOW_DIALOG);\n                mb.show(new EventListener() {\n                    public void buttonClicked(ButtonType buttonType) {\n                        if (buttonType == MessageBox.ButtonType.YES) {\n                            table.refreshSnmpCollections();\n                            table.select(null);\n                            form.setVisible(false);\n\n                        }\n                    }\n                });\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        final HorizontalLayout toolbar = new HorizontalLayout();\n        toolbar.addComponent(add);\n        toolbar.addComponent(refresh);\n        addComponent(toolbar);\n        addComponent(form);\n\n        setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the SNMP collection.\n     *\n     * @param snmpCollection the SNMP collection\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addSnmpCollection(SnmpCollection snmpCollection) {\n        ((BeanContainer<String,SnmpCollection>) getContainerDataSource()).addBean(snmpCollection);\n    }","id":100390,"modified_method":"/**\n     * Adds the SNMP collection.\n     *\n     * @param snmpCollection the SNMP collection\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addSnmpCollection(SnmpCollection snmpCollection) {\n        ((OnmsBeanContainer<SnmpCollection>) getContainerDataSource()).addOnmsBean(snmpCollection);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Refresh SNMP collections.\n     */\n    public void refreshSnmpCollections() {\n        final DatacollectionConfig dataCollectionConfig = dataCollectionConfigDao.getRootDataCollection();\n        container.removeAllItems();\n        container.addAll(dataCollectionConfig.getSnmpCollectionCollection());\n        container.removeItem(\"__resource_type_collection\"); // This is a protected collection and should not be edited.\n    }","id":100391,"modified_method":"/**\n     * Refresh SNMP collections.\n     */\n    public void refreshSnmpCollections() {\n        final DatacollectionConfig dataCollectionConfig = dataCollectionConfigDao.getRootDataCollection();\n        container.removeAllItems();\n        for (SnmpCollection sc : dataCollectionConfig.getSnmpCollectionCollection()) {\n            // Ignoring an internal collection created to handle resource types only if exist\n            if (!sc.getName().equals(\"__resource_type_collection\")) {\n                container.addOnmsBean(sc);\n            }\n        }\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new storage strategy field.\n     */\n    public StorageStrategyField() {\n        combo.setCaption(\"Class Name\");\n        combo.addItem(IndexStorageStrategy.class.getName());\n        combo.addItem(SiblingColumnStorageStrategy.class.getName());\n        combo.setNullSelectionAllowed(false);\n        combo.setRequired(true);\n        combo.setNewItemsAllowed(true);\n        combo.setNewItemHandler(new NewItemHandler() {\n            public void addNewItem(String newItemCaption) {\n                if (!combo.containsId(newItemCaption)) {\n                    combo.addItem(newItemCaption);\n                    combo.setValue(newItemCaption);\n                }\n            }\n        });\n\n        container.setBeanIdProperty(\"key\");\n        table.setCaption(\"Parameters\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"key\", \"value\"});\n        table.setColumnHeader(\"key\", \"Parameter Name\");\n        table.setColumnHeader(\"value\", \"Parameter Value\");\n        table.setColumnExpandRatio(\"value\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(combo);\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setCompositionRoot(layout);\n    }","id":100392,"modified_method":"/**\n     * Instantiates a new storage strategy field.\n     */\n    public StorageStrategyField() {\n        combo.setCaption(\"Class Name\");\n        combo.addItem(IndexStorageStrategy.class.getName());\n        combo.addItem(SiblingColumnStorageStrategy.class.getName());\n        combo.setNullSelectionAllowed(false);\n        combo.setRequired(true);\n        combo.setNewItemsAllowed(true);\n        combo.setNewItemHandler(new NewItemHandler() {\n            public void addNewItem(String newItemCaption) {\n                if (!combo.containsId(newItemCaption)) {\n                    combo.addItem(newItemCaption);\n                    combo.setValue(newItemCaption);\n                }\n            }\n        });\n\n        table.setCaption(\"Parameters\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"key\", \"value\"});\n        table.setColumnHeader(\"key\", \"Parameter Name\");\n        table.setColumnHeader(\"value\", \"Parameter Value\");\n        table.setColumnExpandRatio(\"value\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(combo);\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n\n        setWriteThrough(false);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void setPropertyDataSource(Property newDataSource) {\n        Object value = newDataSource.getValue();\n        if (value instanceof StorageStrategy) {\n            StorageStrategy dto = (StorageStrategy) value;\n            combo.setValue(dto.getClazz());\n            container.removeAllItems();\n            container.addAll(dto.getParameterCollection());\n            table.setPageLength(dto.getParameterCollection() == null ? 0 : dto.getParameterCollection().size());\n        } else {\n            throw new ConversionException(\"Invalid type\");\n        }\n        super.setPropertyDataSource(newDataSource);\n    }","id":100393,"modified_method":"@Override\n    public void setPropertyDataSource(Property newDataSource) {\n        Object value = newDataSource.getValue();\n        if (value instanceof StorageStrategy) {\n            StorageStrategy dto = (StorageStrategy) value;\n            if (!combo.containsId(dto.getClazz())) {\n                combo.addItem(dto.getClazz());\n                combo.setValue(dto.getClazz());\n            }\n            container.removeAllItems();\n            container.addAll(dto.getParameterCollection());\n            table.setPageLength(dto.getParameterCollection() == null ? 0 : dto.getParameterCollection().size());\n        } else {\n            throw new ConversionException(\"Invalid type\");\n        }\n        super.setPropertyDataSource(newDataSource);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public Object getValue() {\n        StorageStrategy dto = new StorageStrategy();\n        dto.setClazz((String) combo.getValue());\n        for (Object itemId: container.getItemIds()) {\n            dto.getParameterCollection().add(container.getItem(itemId).getBean());\n        }\n        return dto;\n    }","id":100394,"modified_method":"@Override\n    public Object getValue() {\n        StorageStrategy dto = new StorageStrategy();\n        if (combo.getValue() != null) {\n            dto.setClazz((String) combo.getValue());\n        }\n        for (Object itemId: container.getItemIds()) {\n            dto.getParameterCollection().add(container.getItem(itemId).getBean());\n        }\n        return dto;\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Parameter p = new Parameter();\n        p.setKey(\"New Parameter\");\n        container.addBean(p);\n    }","id":100395,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Parameter p = new Parameter();\n        p.setKey(\"New Parameter\");\n        p.setValue(\"New Value\");\n        container.addOnmsBean(p);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new system definition panel.\n     *\n     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO\n     * @param source the OpenNMS Data Collection Group object\n     * @param logger the logger object\n     */\n    public SystemDefPanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new SystemDefForm(dataCollectionConfigDao, source) {\n            @Override\n            public void saveSystemDef(SystemDef systemDef) {\n                if (isNew) {\n                    table.addSystemDef(systemDef);\n                    logger.info(\"System Definition \" + systemDef.getName() + \" has been added.\");\n                } else {\n                    logger.info(\"System Definition \" + systemDef.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n            }\n            @Override\n            public void deleteSystemDef(SystemDef systemDef) {\n                logger.info(\"System Definition \" + systemDef.getName() + \" has been removed.\");\n                table.removeItem(systemDef.getName());\n                table.refreshRowCache();\n            }\n        };\n\n        table = new SystemDefTable(source) {\n            @Override\n            public void updateExternalSource(BeanItem<SystemDef> item) {\n                form.setItemDataSource(item, Arrays.asList(SystemDefForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        add = new Button(\"Add System Definition\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                SystemDef sysDef = new SystemDef();\n                sysDef.setName(\"New System Definition\");\n                sysDef.setSysoidMask(\".1.3.6.1.4.1.\");\n                sysDef.setCollect(new Collect());\n                table.updateExternalSource(new BeanItem<SystemDef>(sysDef));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        addComponent(add);\n        addComponent(form);\n\n        setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n    }","id":100396,"modified_method":"/**\n     * Instantiates a new system definition panel.\n     *\n     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO\n     * @param source the OpenNMS Data Collection Group object\n     * @param logger the logger object\n     */\n    public SystemDefPanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {\n        addStyleName(Runo.PANEL_LIGHT);\n\n        form = new SystemDefForm(dataCollectionConfigDao, source) {\n            @Override\n            public void saveSystemDef(SystemDef systemDef) {\n                if (isNew) {\n                    table.addSystemDef(systemDef);\n                    logger.info(\"System Definition \" + systemDef.getName() + \" has been added.\");\n                } else {\n                    logger.info(\"System Definition \" + systemDef.getName() + \" has been updated.\");\n                }\n                table.refreshRowCache();\n            }\n            @Override\n            public void deleteSystemDef(SystemDef systemDef) {\n                logger.info(\"System Definition \" + systemDef.getName() + \" has been removed.\");\n                Object itemId = table.getValue();\n                if (itemId != null) {\n                    table.select(null);\n                    table.removeItem(itemId);\n                    table.refreshRowCache();\n                }\n            }\n        };\n\n        table = new SystemDefTable(source) {\n            @Override\n            public void updateExternalSource(BeanItem<SystemDef> item) {\n                form.setItemDataSource(item, Arrays.asList(SystemDefForm.FORM_ITEMS));\n                form.setVisible(true);\n                form.setReadOnly(true);\n                setIsNew(false);\n            }\n        };\n\n        add = new Button(\"Add System Definition\", new Button.ClickListener() {\n            public void buttonClick(Button.ClickEvent event) {\n                SystemDef sysDef = new SystemDef();\n                sysDef.setName(\"New System Definition\");\n                sysDef.setSysoidMask(\".1.3.6.1.4.1.\");\n                sysDef.setCollect(new Collect());\n                table.updateExternalSource(new BeanItem<SystemDef>(sysDef));\n                form.setReadOnly(false);\n                setIsNew(true);\n            }\n        });\n\n        setSpacing(true);\n        setMargin(true);\n        addComponent(table);\n        addComponent(add);\n        addComponent(form);\n\n        setComponentAlignment(add, Alignment.MIDDLE_RIGHT);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new system definition table.\n     *\n     * @param group the OpenNMS Data Collection Group\n     */\n    public SystemDefTable(final DatacollectionGroup group) {\n        BeanContainer<String,SystemDef> container = new BeanContainer<String,SystemDef>(SystemDef.class);\n        container.setBeanIdProperty(\"name\");\n        container.addAll(group.getSystemDefCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addGeneratedColumn(\"count\", new ColumnGenerator() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Object generateCell(Table source, Object itemId, Object columnId) {\n                BeanItem<SystemDef> item = (BeanItem<SystemDef>) getContainerDataSource().getItem(itemId);\n                return item.getBean().getCollect() == null ? 0 : item.getBean().getCollect().getIncludeGroupCount();\n            }\n        });\n        addGeneratedColumn(\"oid\", new ColumnGenerator() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Object generateCell(Table source, Object itemId, Object columnId) {\n                BeanItem<SystemDef> item = (BeanItem<SystemDef>) getContainerDataSource().getItem(itemId);\n                final SystemDef s = item.getBean();\n                final String value = s.getSysoid() == null ? s.getSysoidMask() : s.getSysoid();\n                return value == null ? \"N/A\" : value;\n            }\n        });\n        addListener(new Property.ValueChangeListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    BeanItem<SystemDef> item = (BeanItem<SystemDef>) getContainerDataSource().getItem(getValue());\n                    updateExternalSource(item);\n                }\n            }\n        });\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n    }","id":100397,"modified_method":"/**\n     * Instantiates a new system definition table.\n     *\n     * @param group the OpenNMS Data Collection Group\n     */\n    public SystemDefTable(final DatacollectionGroup group) {\n        OnmsBeanContainer<SystemDef> container = new OnmsBeanContainer<SystemDef>(SystemDef.class);\n        container.addAll(group.getSystemDefCollection());\n        setContainerDataSource(container);\n        setStyleName(Runo.TABLE_SMALL);\n        setImmediate(true);\n        setSelectable(true);\n        setWidth(\"100%\");\n        setHeight(\"250px\");\n        addGeneratedColumn(\"count\", new ColumnGenerator() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Object generateCell(Table source, Object itemId, Object columnId) {\n                BeanItem<SystemDef> item = (BeanItem<SystemDef>) getContainerDataSource().getItem(itemId);\n                return item.getBean().getCollect() == null ? 0 : item.getBean().getCollect().getIncludeGroupCount();\n            }\n        });\n        addGeneratedColumn(\"oid\", new ColumnGenerator() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Object generateCell(Table source, Object itemId, Object columnId) {\n                BeanItem<SystemDef> item = (BeanItem<SystemDef>) getContainerDataSource().getItem(itemId);\n                final SystemDef s = item.getBean();\n                final String value = s.getSysoid() == null ? s.getSysoidMask() : s.getSysoid();\n                return value == null ? \"N/A\" : value;\n            }\n        });\n        addListener(new Property.ValueChangeListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void valueChange(Property.ValueChangeEvent event) {\n                if (getValue() != null) {\n                    BeanItem<SystemDef> item = (BeanItem<SystemDef>) getContainerDataSource().getItem(getValue());\n                    updateExternalSource(item);\n                }\n            }\n        });\n        setVisibleColumns(COLUMN_NAMES);\n        setColumnHeaders(COLUMN_LABELS);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a system definition.\n     *\n     * @param systemDef the system definition\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addSystemDef(SystemDef systemDef) {\n        ((BeanContainer<String,SystemDef>) getContainerDataSource()).addBean(systemDef);\n    }","id":100398,"modified_method":"/**\n     * Adds a system definition.\n     *\n     * @param systemDef the system definition\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void addSystemDef(SystemDef systemDef) {\n        ((OnmsBeanContainer<SystemDef>) getContainerDataSource()).addOnmsBean(systemDef);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Instantiates a new varbinds decode field.\n     */\n    public VarbindsDecodeField() {\n        container.setBeanIdProperty(\"parmid\");\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"parmid\", \"decodeCollection\"});\n        table.setColumnHeader(\"parmid\", \"Parameter ID\");\n        table.setColumnHeader(\"decodeCollection\", \"Decode Values\");\n        table.setColumnExpandRatio(\"decodeCollection\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"decodeCollection\")) {\n                    return new DecodeListFieldWrapper();\n                }\n                return super.createField(container, itemId, propertyId, uiContext);\n            }\n        });\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n        setCompositionRoot(layout);\n    }","id":100399,"modified_method":"/**\n     * Instantiates a new varbinds decode field.\n     */\n    public VarbindsDecodeField() {\n        table.setContainerDataSource(container);\n        table.setStyleName(Runo.TABLE_SMALL);\n        table.setVisibleColumns(new Object[]{\"parmid\", \"decodeCollection\"});\n        table.setColumnHeader(\"parmid\", \"Parameter ID\");\n        table.setColumnHeader(\"decodeCollection\", \"Decode Values\");\n        table.setColumnExpandRatio(\"decodeCollection\", 1);\n        table.setEditable(!isReadOnly());\n        table.setSelectable(true);\n        table.setHeight(\"125px\");\n        table.setWidth(\"100%\");\n        table.setTableFieldFactory(new DefaultFieldFactory() {\n            @Override\n            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {\n                if (propertyId.equals(\"decodeCollection\")) {\n                    return new DecodeListFieldWrapper();\n                }\n                return super.createField(container, itemId, propertyId, uiContext);\n            }\n        });\n        add = new Button(\"Add\", (Button.ClickListener) this);\n        delete = new Button(\"Delete\", (Button.ClickListener) this);\n        toolbar.addComponent(add);\n        toolbar.addComponent(delete);\n        toolbar.setVisible(table.isEditable());\n        VerticalLayout layout = new VerticalLayout();\n        layout.addComponent(table);\n        layout.addComponent(toolbar);\n        layout.setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);\n        setCompositionRoot(layout);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Varbindsdecode v = new Varbindsdecode();\n        v.setParmid(\"??\"); // A non null value is required here.\n        container.addBean(v);\n    }","id":100400,"modified_method":"/**\n     * Adds the handler.\n     */\n    private void addHandler() {\n        Varbindsdecode v = new Varbindsdecode();\n        v.setParmid(\"??\"); // A non null value is required here.\n        container.addOnmsBean(v);\n    }","commit_id":"95b21e2e8c1a141ac799b20223d4baf9208c00c2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean openNewFile()\r\n\t{\r\n\t\tboolean retval=false;\r\n\t\tdata.writer=null;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n            if (meta.isFileAsCommand())\r\n            {\r\n            \tlogDebug(\"Spawning external process\");\r\n            \tif (data.cmdProc != null)\r\n            \t{\r\n            \t\tlogError(\"Previous command not correctly terminated\");\r\n            \t\tsetErrors(1);\r\n            \t}\r\n            \tString cmdstr = StringUtil.environmentSubstitute(meta.getFileName());\r\n            \tif (Const.getOS().equals(\"Windows 95\"))\r\n                {\r\n            \t\tcmdstr = \"command.com /C \" + cmdstr;\r\n                }\r\n            \telse\r\n                {\r\n                    if (Const.getOS().startsWith(\"Windows\"))\r\n                    {\r\n                        cmdstr = \"cmd.exe /C \" + cmdstr;\r\n                    }\r\n                }\r\n            \tlogDetailed(\"Starting: \" + cmdstr);\r\n            \tRuntime r = Runtime.getRuntime();\r\n            \tdata.cmdProc = r.exec(cmdstr, EnvUtil.getEnvironmentVariablesForRuntimeExec());\r\n            \tdata.writer = new OutputStreamWriter(data.cmdProc.getOutputStream());\r\n            \tStreamLogger stdoutLogger = new StreamLogger(\r\n            \t\t\tdata.cmdProc.getInputStream(), \"(stdout)\");\r\n            \tStreamLogger stderrLogger = new StreamLogger(\r\n            \t\t\tdata.cmdProc.getErrorStream(), \"(stderr)\");\r\n            \tnew Thread(stdoutLogger).start();\r\n            \tnew Thread(stderrLogger).start();\r\n            \tretval = true;\r\n            }\r\n            else\r\n            {\r\n                String filename = buildFilename(true);\r\n                File file = new File(filename);\r\n\r\n\t\t\t\t// Add this to the result file names...\r\n\t\t\t\tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_GENERAL, file, getTransMeta().getName(), getStepname());\r\n\t\t\t\tresultFile.setComment(\"This file was created with a text file output step\");\r\n\t            addResultFile(resultFile);\r\n\t\r\n\t            OutputStream outputStream;\r\n                \r\n                if (!Const.isEmpty(meta.getFileCompression()) && !meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_NONE))\r\n                {\r\n    \t\t\t\tif (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_ZIP))\r\n    \t\t\t\t{\r\n    \t\t            log.logDetailed(toString(), \"Opening output stream in zipped mode\");\r\n    \t\t\t\t\tFileOutputStream fos = new FileOutputStream(file, meta.isFileAppended());\r\n    \t\t\t\t\tdata.zip = new ZipOutputStream(fos);\r\n    \t\t\t\t\tFile entry = new File(buildFilename(false));\r\n    \t\t\t\t\tZipEntry zipentry = new ZipEntry(entry.getName());\r\n    \t\t\t\t\tzipentry.setComment(\"Compressed by Kettle\");\r\n    \t\t\t\t\tdata.zip.putNextEntry(zipentry);\r\n    \t\t\t\t\toutputStream=data.zip;\r\n    \t\t\t\t}\r\n    \t\t\t\telse if (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_GZIP))\r\n    \t\t\t\t{\r\n    \t\t            log.logDetailed(toString(), \"Opening output stream in gzipped mode\");\r\n    \t\t\t\t\tFileOutputStream fos = new FileOutputStream(file, meta.isFileAppended());\r\n    \t\t\t\t\tdata.gzip = new GZIPOutputStream(fos);\r\n    \t\t\t\t\toutputStream=data.gzip;\r\n    \t\t\t\t}\r\n                    else\r\n                    {\r\n                        throw new KettleFileException(\"No compression method specified!\");\r\n                    }\r\n                }\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t            log.logDetailed(toString(), \"Opening output stream in nocompress mode\");\r\n\t\t\t\t\tFileOutputStream fos=new FileOutputStream(file, meta.isFileAppended());\r\n\t\t\t\t\toutputStream=fos;\r\n\t\t\t\t}\r\n                \r\n\t            if (!Const.isEmpty(meta.getEncoding()))\r\n\t            {\r\n\t                log.logBasic(toString(), \"Opening output stream in encoding: \"+meta.getEncoding());\r\n\t                data.writer = new OutputStreamWriter(new BufferedOutputStream(outputStream, 5000), meta.getEncoding());\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t                log.logBasic(toString(), \"Opening output stream in default encoding\");\r\n\t                data.writer = new OutputStreamWriter(new BufferedOutputStream(outputStream, 5000));\r\n\t            }\r\n\t\r\n\t            logDetailed(\"Opened new file with name [\"+filename+\"]\");\r\n\t\t\t\t\r\n\t\t\t\tretval=true;\r\n            }\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tlogError(\"Error opening new file : \"+e.toString());\r\n\t\t}\r\n\t\t// System.out.println(\"end of newFile(), splitnr=\"+splitnr);\r\n\r\n\t\tdata.splitnr++;\r\n\r\n\t\treturn retval;\r\n\t}","id":100401,"modified_method":"public boolean openNewFile()\r\n\t{\r\n\t\tboolean retval=false;\r\n\t\tdata.writer=null;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n            if (meta.isFileAsCommand())\r\n            {\r\n            \tlogDebug(\"Spawning external process\");\r\n            \tif (data.cmdProc != null)\r\n            \t{\r\n            \t\tlogError(\"Previous command not correctly terminated\");\r\n            \t\tsetErrors(1);\r\n            \t}\r\n            \tString cmdstr = StringUtil.environmentSubstitute(meta.getFileName());\r\n            \tif (Const.getOS().equals(\"Windows 95\"))\r\n                {\r\n            \t\tcmdstr = \"command.com /C \" + cmdstr;\r\n                }\r\n            \telse\r\n                {\r\n                    if (Const.getOS().startsWith(\"Windows\"))\r\n                    {\r\n                        cmdstr = \"cmd.exe /C \" + cmdstr;\r\n                    }\r\n                }\r\n            \tlogDetailed(\"Starting: \" + cmdstr);\r\n            \tRuntime r = Runtime.getRuntime();\r\n            \tdata.cmdProc = r.exec(cmdstr, EnvUtil.getEnvironmentVariablesForRuntimeExec());\r\n            \tdata.writer = new OutputStreamWriter(data.cmdProc.getOutputStream());\r\n            \tStreamLogger stdoutLogger = new StreamLogger(\r\n            \t\t\tdata.cmdProc.getInputStream(), \"(stdout)\");\r\n            \tStreamLogger stderrLogger = new StreamLogger(\r\n            \t\t\tdata.cmdProc.getErrorStream(), \"(stderr)\");\r\n            \tnew Thread(stdoutLogger).start();\r\n            \tnew Thread(stderrLogger).start();\r\n            \tretval = true;\r\n            }\r\n            else\r\n            {\r\n                String filename = buildFilename(true);\r\n                File file = new File(filename);\r\n\r\n\t\t\t\t// Add this to the result file names...\r\n\t\t\t\tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_GENERAL, file, getTransMeta().getName(), getStepname());\r\n\t\t\t\tresultFile.setComment(\"This file was created with a text file output step\");\r\n\t            addResultFile(resultFile);\r\n\t\r\n\t            OutputStream outputStream;\r\n                \r\n                if (!Const.isEmpty(meta.getFileCompression()) && !meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_NONE))\r\n                {\r\n    \t\t\t\tif (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_ZIP))\r\n    \t\t\t\t{\r\n    \t\t            log.logDetailed(toString(), \"Opening output stream in zipped mode\");\r\n                        \r\n                        OutputStream fos = KettleVFS.getOutputStream(filename, meta.isFileAppended());\r\n                        data.zip = new ZipOutputStream(fos);\r\n    \t\t\t\t\tFile entry = new File(buildFilename(false));\r\n    \t\t\t\t\tZipEntry zipentry = new ZipEntry(entry.getName());\r\n    \t\t\t\t\tzipentry.setComment(\"Compressed by Kettle\");\r\n    \t\t\t\t\tdata.zip.putNextEntry(zipentry);\r\n    \t\t\t\t\toutputStream=data.zip;\r\n    \t\t\t\t}\r\n    \t\t\t\telse if (meta.getFileCompression().equals(FILE_COMPRESSION_TYPE_GZIP))\r\n    \t\t\t\t{\r\n    \t\t            log.logDetailed(toString(), \"Opening output stream in gzipped mode\");\r\n                        OutputStream fos = KettleVFS.getOutputStream(filename, meta.isFileAppended());\r\n                        data.gzip = new GZIPOutputStream(fos);\r\n    \t\t\t\t\toutputStream=data.gzip;\r\n    \t\t\t\t}\r\n                    else\r\n                    {\r\n                        throw new KettleFileException(\"No compression method specified!\");\r\n                    }\r\n                }\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t            log.logDetailed(toString(), \"Opening output stream in nocompress mode\");\r\n                    OutputStream fos = KettleVFS.getOutputStream(filename, meta.isFileAppended());\r\n                    outputStream=fos;\r\n\t\t\t\t}\r\n                \r\n\t            if (!Const.isEmpty(meta.getEncoding()))\r\n\t            {\r\n\t                log.logBasic(toString(), \"Opening output stream in encoding: \"+meta.getEncoding());\r\n\t                data.writer = new OutputStreamWriter(new BufferedOutputStream(outputStream, 5000), meta.getEncoding());\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t                log.logBasic(toString(), \"Opening output stream in default encoding\");\r\n\t                data.writer = new OutputStreamWriter(new BufferedOutputStream(outputStream, 5000));\r\n\t            }\r\n\t\r\n\t            logDetailed(\"Opened new file with name [\"+filename+\"]\");\r\n\t\t\t\t\r\n\t\t\t\tretval=true;\r\n            }\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tlogError(\"Error opening new file : \"+e.toString());\r\n\t\t}\r\n\t\t// System.out.println(\"end of newFile(), splitnr=\"+splitnr);\r\n\r\n\t\tdata.splitnr++;\r\n\r\n\t\treturn retval;\r\n\t}","commit_id":"87c007fb24ddefe2d6a87005a3feef1f56728359","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Connector createConnector() throws TransportServiceException\n    {\n        Connector newConnector;\n        // if there is a factory, use it\n        try\n        {\n            if (connector != null)\n            {\n                newConnector = (Connector) ClassUtils.loadClass(connector, classLoader)\n                        .newInstance();\n            }\n            else\n            {\n                throw new TransportServiceException(CoreMessages.objectNotSetInService(\"Connector\", getService()));\n            }\n        }\n        catch (TransportServiceException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new TransportServiceException(CoreMessages.failedToCreateObjectWith(\"Connector\", connector), e);\n        }\n\n        if (newConnector.getName() == null)\n        {\n            newConnector.setName(\"_\" + newConnector.getProtocol() + \"Connector#\" + connector.hashCode());\n        }\n        return newConnector;\n    }","id":100402,"modified_method":"public Connector createConnector() throws TransportServiceException\n    {\n        Connector newConnector;\n        // if there is a factory, use it\n        try\n        {\n            if (connector != null)\n            {\n                Class connectorClass;\n                if (classLoader != null)\n                {\n                    connectorClass = ClassUtils.loadClass(connector, classLoader);\n                }\n                else\n                {\n                    connectorClass = ClassUtils.loadClass(connector, getClass());\n                }\n                newConnector = (Connector) connectorClass.newInstance();\n            }\n            else\n            {\n                throw new TransportServiceException(CoreMessages.objectNotSetInService(\"Connector\", getService()));\n            }\n        }\n        catch (TransportServiceException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new TransportServiceException(CoreMessages.failedToCreateObjectWith(\"Connector\", connector), e);\n        }\n\n        if (newConnector.getName() == null)\n        {\n            newConnector.setName(\"_\" + newConnector.getProtocol() + \"Connector#\" + connector.hashCode());\n        }\n        return newConnector;\n    }","commit_id":"c0b8b6a9f07456ec74697a856b879e61b10bdc36","url":"https://github.com/mulesoft/mule"},{"original_method":"@Test\n    public void testAliases() throws Exception {\n        // Some sample text\n        String foxText = \"The quick brown fox jumps over the lazy dog\";\n        String loremIpsum = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n\n        // Set up a temporary docBase and some alternates that we can\n        // set up as aliases.\n        File tmpDir = new File(getTemporaryDirectory(),\n                               \"tomcat-unit-test.\" + TestNamingContext.class.getName());\n\n        // Make sure we've got a clean slate\n        ExpandWar.delete(tmpDir);\n\n        File docBase = new File(tmpDir, \"docBase\");\n        File alternate1 = new File(tmpDir, \"alternate1\");\n        File alternate2 = new File(tmpDir, \"alternate2\");\n\n        // Register for clean-up\n        addDeleteOnTearDown(tmpDir);\n\n        if(!tmpDir.mkdirs())\n            throw new IOException(\"Could not create temp directory \" + tmpDir);\n        if(!docBase.mkdir())\n            throw new IOException(\"Could not create temp directory \" + docBase);\n        if(!alternate1.mkdir())\n            throw new IOException(\"Could not create temp directory \" + alternate1);\n        if(!alternate2.mkdir())\n            throw new IOException(\"Could not create temp directory \" + alternate2);\n\n        // Create a file in each alternate directory that we can attempt to access\n        FileOutputStream fos = new FileOutputStream(new File(alternate1, \"test1.txt\"));\n        try {\n            fos.write(foxText.getBytes(\"UTF-8\"));\n            fos.flush();\n        } finally {\n            fos.close();\n        }\n\n        fos = new FileOutputStream(new File(alternate2, \"test2.txt\"));\n        try {\n            fos.write(loremIpsum.getBytes(\"UTF-8\"));\n            fos.flush();\n        } finally {\n            fos.close();\n        }\n\n        // Finally, create the Context\n        FileDirContext ctx = new FileDirContext();\n        ctx.setDocBase(docBase.getCanonicalPath());\n        ctx.setAliases(\"/a1=\" + alternate1.getCanonicalPath()\n                       +\",/a2=\" + alternate2.getCanonicalPath());\n\n        // Check first alias\n        Object file = ctx.lookup(\"/a1/test1.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        byte[] buffer = new byte[4096];\n        Resource res = (Resource)file;\n\n        int len = res.streamContent().read(buffer);\n        String contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(foxText, contents);\n\n        // Check second alias\n        file = ctx.lookup(\"/a2/test2.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        res = (Resource)file;\n        len = res.streamContent().read(buffer);\n        contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(loremIpsum, contents);\n\n        // Test aliases with spaces around the separators\n        ctx.setAliases(\"   /a1= \" + alternate1.getCanonicalPath()\n                       + \"\\n\\n\"\n                       +\", /a2 =\\n\" + alternate2.getCanonicalPath()\n                       + \",\");\n\n        // Check first alias\n        file = ctx.lookup(\"/a1/test1.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        res = (Resource)file;\n        len = res.streamContent().read(buffer);\n        contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(foxText, contents);\n\n        // Check second alias\n        file = ctx.lookup(\"/a2/test2.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        res = (Resource)file;\n        len = res.streamContent().read(buffer);\n        contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(loremIpsum, contents);\n    }","id":100403,"modified_method":"@Test\n    public void testAliases() throws Exception {\n        // Some sample text\n        String foxText = \"The quick brown fox jumps over the lazy dog\";\n        String loremIpsum = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n\n        // Set up a temporary docBase and some alternates that we can\n        // set up as aliases.\n        File tmpDir = new File(getTemporaryDirectory(),\n                               \"tomcat-unit-test.\" + TestNamingContext.class.getName());\n\n        // Make sure we've got a clean slate\n        ExpandWar.delete(tmpDir);\n\n        File docBase = new File(tmpDir, \"docBase\");\n        File alternate1 = new File(tmpDir, \"alternate1\");\n        File alternate2 = new File(tmpDir, \"alternate2\");\n\n        // Register for clean-up\n        addDeleteOnTearDown(tmpDir);\n\n        if(!tmpDir.mkdirs())\n            throw new IOException(\"Could not create temp directory \" + tmpDir);\n        if(!docBase.mkdir())\n            throw new IOException(\"Could not create temp directory \" + docBase);\n        if(!alternate1.mkdir())\n            throw new IOException(\"Could not create temp directory \" + alternate1);\n        if(!alternate2.mkdir())\n            throw new IOException(\"Could not create temp directory \" + alternate2);\n\n        // Create a file in each alternate directory that we can attempt to access\n        FileOutputStream fos = new FileOutputStream(new File(alternate1, \"test1.txt\"));\n        try {\n            fos.write(foxText.getBytes(\"UTF-8\"));\n            fos.flush();\n        } finally {\n            fos.close();\n        }\n\n        fos = new FileOutputStream(new File(alternate2, \"test2.txt\"));\n        try {\n            fos.write(loremIpsum.getBytes(\"UTF-8\"));\n            fos.flush();\n        } finally {\n            fos.close();\n        }\n\n        // Finally, create the Context\n        FileDirContext ctx = new FileDirContext();\n        ctx.setDocBase(docBase.getCanonicalPath());\n        ctx.setAliases(\"/a1=\" + alternate1.getCanonicalPath()\n                       +\",/a2=\" + alternate2.getCanonicalPath());\n\n        // Check first alias\n        Object file = ctx.lookup(\"/a1/test1.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        byte[] buffer = new byte[4096];\n        Resource res = (Resource)file;\n\n        InputStream is = res.streamContent();\n        int len;\n        try {\n            len = is.read(buffer);\n        } finally {\n            is.close();\n        }\n        String contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(foxText, contents);\n\n        // Check second alias\n        file = ctx.lookup(\"/a2/test2.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        res = (Resource)file;\n        is = res.streamContent();\n        try {\n            len = is.read(buffer);\n        } finally {\n            is.close();\n        }\n        contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(loremIpsum, contents);\n\n        // Test aliases with spaces around the separators\n        ctx.setAliases(\"   /a1= \" + alternate1.getCanonicalPath()\n                       + \"\\n\\n\"\n                       +\", /a2 =\\n\" + alternate2.getCanonicalPath()\n                       + \",\");\n\n        // Check first alias\n        file = ctx.lookup(\"/a1/test1.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        res = (Resource)file;\n        is = res.streamContent();\n        try {\n            len = is.read(buffer);\n        } finally {\n            is.close();\n        }\n        contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(foxText, contents);\n\n        // Check second alias\n        file = ctx.lookup(\"/a2/test2.txt\");\n\n        Assert.assertNotNull(file);\n        Assert.assertTrue(file instanceof Resource);\n\n        res = (Resource)file;\n        is = res.streamContent();\n        try {\n            len = is.read(buffer);\n        } finally {\n            is.close();\n        }\n        contents = new String(buffer, 0, len, \"UTF-8\");\n\n        assertEquals(loremIpsum, contents);\n    }","commit_id":"80554c9f51ecc3b41583e96daea04a9bb4bec467","url":"https://github.com/apache/tomcat"},{"original_method":"public VariablesScope(final SNode kind, Iterable<SNode> vars, @Nullable Scope parentScope) {\n    // behavior: hide parent elements by name \n    // hide all BaseVariableDeclaration nodes in parent scope by vars \n    // parent scope should be with equal kind \n    this.vars = ListSequence.fromListWithValues(new ArrayList(), Sequence.fromIterable(vars).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (it != null) && SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(kind));\n      }\n    }));\n    this.parentScope = parentScope;\n    this.kind = kind;\n    this.names = SetSequence.fromSetWithValues(new HashSet(), Sequence.fromIterable(vars).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (it != null);\n      }\n    }).select(new ISelector<SNode, String>() {\n      public String select(SNode it) {\n        return SPropertyOperations.getString(it, \"name\");\n      }\n    }));\n  }","id":100404,"modified_method":"public VariablesScope(SNode kind, Iterable<SNode> vars, @Nullable Scope parentScope) {\n    // behavior: hide parent elements by name \n    // hide all BaseVariableDeclaration nodes in parent scope by vars \n    // parent scope should be with equal kind \n    this.vars = SortedMapSequence.fromMap(new TreeMap<String, SNode>());\n    this.names = SetSequence.fromSet(new HashSet());\n    for (SNode node : Sequence.fromIterable(vars)) {\n      if ((node != null)) {\n        SetSequence.fromSet(this.names).addElement(SPropertyOperations.getString(node, \"name\"));\n        if (SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(kind))) {\n          MapSequence.fromMap(this.vars).put(SPropertyOperations.getString(node, \"name\"), node);\n        }\n      }\n    }\n    this.parentScope = parentScope;\n    this.kind = kind;\n  }","commit_id":"0686f858ecb0e9fe00630ff21c7abe9c9ebe2d20","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  public SNode resolve(SNode contextNode, @NotNull final String refText) {\n    if (SetSequence.fromSet(names).contains(refText)) {\n      Iterable<SNode> element = ListSequence.fromList(vars).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return SPropertyOperations.getString(it, \"name\").equals(refText);\n        }\n      });\n      return (Sequence.fromIterable(element).isNotEmpty() ?\n        Sequence.fromIterable(element).first() :\n        null\n      );\n    } else {\n      return (parentScope != null ?\n        parentScope.resolve(contextNode, refText) :\n        null\n      );\n    }\n  }","id":100405,"modified_method":"@Nullable\n  public SNode resolve(SNode contextNode, @NotNull String refText) {\n    if (SetSequence.fromSet(names).contains(refText)) {\n      return MapSequence.fromMap(vars).get(refText);\n    } else {\n      return (parentScope != null ?\n        parentScope.resolve(contextNode, refText) :\n        null\n      );\n    }\n  }","commit_id":"0686f858ecb0e9fe00630ff21c7abe9c9ebe2d20","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public boolean contains(SNode node) {\n    if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\")) {\n      if (SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\"), \"name\"))) {\n        return ListSequence.fromList(vars).contains(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\"));\n      } else {\n        return (parentScope != null ?\n          parentScope.contains(node) :\n          false\n        );\n      }\n    } else {\n      return (parentScope != null ?\n        parentScope.contains(node) :\n        false\n      );\n    }\n  }","id":100406,"modified_method":"@Override\n  public boolean contains(SNode node) {\n    if (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\")) {\n      String name = SPropertyOperations.getString(SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\"), \"name\");\n      if (MapSequence.fromMap(vars).containsKey(name)) {\n        return MapSequence.fromMap(vars).get(name) == node;\n      } else {\n        return (parentScope != null ?\n          parentScope.contains(node) :\n          false\n        );\n      }\n    } else {\n      return (parentScope != null ?\n        parentScope.contains(node) :\n        false\n      );\n    }\n  }","commit_id":"0686f858ecb0e9fe00630ff21c7abe9c9ebe2d20","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<SNode> getAvailableElements(@Nullable final String prefix) {\n    List<SNode> result = ListSequence.fromList(new ArrayList());\n    ListSequence.fromList(result).addSequence(ListSequence.fromList(vars).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return prefix == null || SPropertyOperations.getString(it, \"name\").startsWith(prefix);\n      }\n    }));\n    if (parentScope != null) {\n      ListSequence.fromList(result).addSequence(ListSequence.fromList(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return !(SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\")) || !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\"), \"name\")));\n        }\n      }));\n    }\n    return result;\n  }","id":100407,"modified_method":"public List<SNode> getAvailableElements(@Nullable final String prefix) {\n    List<SNode> result = ListSequence.fromList(new ArrayList());\n    if (prefix == null) {\n      ListSequence.fromList(result).addSequence(Sequence.fromIterable(MapSequence.fromMap(vars).values()));\n    } else {\n      ListSequence.fromList(result).addSequence(SetSequence.fromSet(MapSequence.fromMap(vars).keySet()).where(new IWhereFilter<String>() {\n        public boolean accept(String it) {\n          return it.startsWith(prefix);\n        }\n      }).select(new ISelector<String, SNode>() {\n        public SNode select(String it) {\n          return MapSequence.fromMap(vars).get(it);\n        }\n      }));\n    }\n    if (parentScope != null) {\n      ListSequence.fromList(result).addSequence(ListSequence.fromList(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return !(SNodeOperations.isInstanceOf(it, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\")) || !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it, \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\"), \"name\")));\n        }\n      }));\n    }\n    return result;\n  }","commit_id":"0686f858ecb0e9fe00630ff21c7abe9c9ebe2d20","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n\tpublic void deleteKBArticle(KBArticle kbArticle)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Child kb articles\n\n\t\tList<KBArticle> siblingKBArticles = getSiblingKBArticles(\n\t\t\tkbArticle.getGroupId(), kbArticle.getResourcePrimKey(),\n\t\t\tWorkflowConstants.STATUS_ANY, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew KBArticlePriorityComparator());\n\n\t\tfor (KBArticle siblingKBArticle : siblingKBArticles) {\n\t\t\tdeleteKBArticle(siblingKBArticle);\n\t\t}\n\n\t\t// Resources\n\n\t\tresourceLocalService.deleteResource(\n\t\t\tkbArticle.getCompanyId(), KBArticle.class.getName(),\n\t\t\tResourceConstants.SCOPE_INDIVIDUAL, kbArticle.getResourcePrimKey());\n\n\t\t// KB articles\n\n\t\tkbArticlePersistence.removeByResourcePrimKey(\n\t\t\tkbArticle.getResourcePrimKey());\n\n\t\t// KB comments\n\n\t\tkbCommentLocalService.deleteKBComments(\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\n\t\t// Asset\n\n\t\tdeleteAssets(kbArticle);\n\n\t\t// Ratings\n\n\t\tratingsStatsLocalService.deleteStats(\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(KBArticle.class);\n\n\t\tindexer.delete(kbArticle);\n\n\t\t// Attachments\n\n\t\tdeleteKBArticleAttachments(kbArticle);\n\n\t\t// Subscriptions\n\n\t\tdeleteSubscriptions(kbArticle);\n\n\t\t// Workflow\n\n\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(\n\t\t\tkbArticle.getCompanyId(), kbArticle.getGroupId(),\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\t}","id":100408,"modified_method":"@Override\n\tpublic void deleteKBArticle(KBArticle kbArticle)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Child kb articles\n\n\t\tList<KBArticle> siblingKBArticles = getSiblingKBArticles(\n\t\t\tkbArticle.getGroupId(), kbArticle.getResourcePrimKey(),\n\t\t\tWorkflowConstants.STATUS_ANY, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew KBArticlePriorityComparator());\n\n\t\tfor (KBArticle siblingKBArticle : siblingKBArticles) {\n\t\t\tdeleteKBArticle(siblingKBArticle);\n\t\t}\n\n\t\t// Resources\n\n\t\tresourceLocalService.deleteResource(\n\t\t\tkbArticle.getCompanyId(), KBArticle.class.getName(),\n\t\t\tResourceConstants.SCOPE_INDIVIDUAL, kbArticle.getResourcePrimKey());\n\n\t\t// KB articles\n\n\t\tkbArticlePersistence.removeByResourcePrimKey(\n\t\t\tkbArticle.getResourcePrimKey());\n\n\t\t// KB comments\n\n\t\tkbCommentLocalService.deleteKBComments(\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\n\t\t// Asset\n\n\t\tdeleteAssets(kbArticle);\n\n\t\t// Ratings\n\n\t\tratingsStatsLocalService.deleteStats(\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\n\t\t// Social\n\n\t\tsocialActivityLocalService.deleteActivities(\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(KBArticle.class);\n\n\t\tindexer.delete(kbArticle);\n\n\t\t// Attachments\n\n\t\tdeleteKBArticleAttachments(kbArticle);\n\n\t\t// Subscriptions\n\n\t\tdeleteSubscriptions(kbArticle);\n\n\t\t// Workflow\n\n\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(\n\t\t\tkbArticle.getCompanyId(), kbArticle.getGroupId(),\n\t\t\tKBArticle.class.getName(), kbArticle.getResourcePrimKey());\n\t}","commit_id":"ea0709b587ed86e957131b485eb88c806900194e","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n\tpublic void deleteKBComment(KBComment kbComment)\n\t\tthrows PortalException, SystemException {\n\n\t\t// KB comment\n\n\t\tkbCommentPersistence.remove(kbComment);\n\n\t\t// Social\n\n\t\tAssetEntry assetEntry = assetEntryLocalService.getEntry(\n\t\t\tKBComment.class.getName(), kbComment.getKbCommentId());\n\n\t\tsocialActivityLocalService.deleteActivities(assetEntry);\n\t}","id":100409,"modified_method":"@Override\n\tpublic void deleteKBComment(KBComment kbComment) throws SystemException {\n\n\t\t// KB comment\n\n\t\tkbCommentPersistence.remove(kbComment);\n\n\t\t// Social\n\n\t\tsocialActivityLocalService.deleteActivities(\n\t\t\tKBComment.class.getName(), kbComment.getKbCommentId());\n\t}","commit_id":"ea0709b587ed86e957131b485eb88c806900194e","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n\tpublic void deleteKBTemplate(KBTemplate kbTemplate)\n\t\tthrows PortalException, SystemException {\n\n\t\t// KB template\n\n\t\tkbTemplatePersistence.remove(kbTemplate);\n\n\t\t// Resources\n\n\t\tresourceLocalService.deleteResource(\n\t\t\tkbTemplate.getCompanyId(), KBTemplate.class.getName(),\n\t\t\tResourceConstants.SCOPE_INDIVIDUAL, kbTemplate.getKbTemplateId());\n\n\t\t// KB Comments\n\n\t\tkbCommentLocalService.deleteKBComments(\n\t\t\tKBTemplate.class.getName(), kbTemplate.getKbTemplateId());\n\n\t\t// Social\n\n\t\tAssetEntry assetEntry = assetEntryLocalService.getEntry(\n\t\t\tKBTemplate.class.getName(), kbTemplate.getKbTemplateId());\n\n\t\tsocialActivityLocalService.deleteActivities(assetEntry);\n\t}","id":100410,"modified_method":"@Override\n\tpublic void deleteKBTemplate(KBTemplate kbTemplate)\n\t\tthrows PortalException, SystemException {\n\n\t\t// KB template\n\n\t\tkbTemplatePersistence.remove(kbTemplate);\n\n\t\t// Resources\n\n\t\tresourceLocalService.deleteResource(\n\t\t\tkbTemplate.getCompanyId(), KBTemplate.class.getName(),\n\t\t\tResourceConstants.SCOPE_INDIVIDUAL, kbTemplate.getKbTemplateId());\n\n\t\t// KB Comments\n\n\t\tkbCommentLocalService.deleteKBComments(\n\t\t\tKBTemplate.class.getName(), kbTemplate.getKbTemplateId());\n\n\t\t// Social\n\n\t\tsocialActivityLocalService.deleteActivities(\n\t\t\tKBTemplate.class.getName(), kbTemplate.getKbTemplateId());\n\t}","commit_id":"ea0709b587ed86e957131b485eb88c806900194e","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n\tpublic void deleteTasksEntry(TasksEntry tasksEntry)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Tasks entry\n\n\t\ttasksEntryPersistence.remove(tasksEntry);\n\n\t\t// Asset\n\n\t\tAssetEntryLocalServiceUtil.deleteEntry(\n\t\t\tTasksEntry.class.getName(), tasksEntry.getTasksEntryId());\n\n\t\t// Message boards\n\n\t\tMBMessageLocalServiceUtil.deleteDiscussionMessages(\n\t\t\tTasksEntry.class.getName(), tasksEntry.getTasksEntryId());\n\n\t\t// Social\n\n\t\tAssetEntry assetEntry = AssetEntryLocalServiceUtil.getEntry(\n\t\t\tTasksEntry.class.getName(), tasksEntry.getTasksEntryId());\n\n\t\tSocialActivityLocalServiceUtil.deleteActivities(assetEntry);\n\t}","id":100411,"modified_method":"@Override\n\tpublic void deleteTasksEntry(TasksEntry tasksEntry)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Tasks entry\n\n\t\ttasksEntryPersistence.remove(tasksEntry);\n\n\t\t// Asset\n\n\t\tAssetEntryLocalServiceUtil.deleteEntry(\n\t\t\tTasksEntry.class.getName(), tasksEntry.getTasksEntryId());\n\n\t\t// Message boards\n\n\t\tMBMessageLocalServiceUtil.deleteDiscussionMessages(\n\t\t\tTasksEntry.class.getName(), tasksEntry.getTasksEntryId());\n\n\t\t// Social\n\n\t\tSocialActivityLocalServiceUtil.deleteActivities(\n\t\t\tTasksEntry.class.getName(), tasksEntry.getTasksEntryId());\n\t}","commit_id":"ea0709b587ed86e957131b485eb88c806900194e","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n\tpublic void deleteWallEntry(WallEntry wallEntry)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Social\n\n\t\tAssetEntry assetEntry = assetEntryLocalService.getEntry(\n\t\t\tWallEntry.class.getName(), wallEntry.getWallEntryId());\n\n\t\tSocialActivityLocalServiceUtil.deleteActivities(assetEntry);\n\n\t\t// Entry\n\n\t\twallEntryPersistence.remove(wallEntry);\n\t}","id":100412,"modified_method":"@Override\n\tpublic void deleteWallEntry(WallEntry wallEntry) throws SystemException {\n\n\t\t// Social\n\n\t\tSocialActivityLocalServiceUtil.deleteActivities(\n\t\t\tWallEntry.class.getName(), wallEntry.getWallEntryId());\n\n\t\t// Entry\n\n\t\twallEntryPersistence.remove(wallEntry);\n\t}","commit_id":"ce261a4b125ebaa5a9daa11ab14fcbaf54fa88ea","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public List<AnalyzedTokenReadings> tag(final List<String> sentenceTokens) throws IOException {\n\n    lazyInit();\n\n    Matcher matcher;\n\n    final List<AnalyzedTokenReadings> tokenReadings = \n      new ArrayList<AnalyzedTokenReadings>();\n    int pos = 0;\n    for (String word : sentenceTokens) {\n      final List<AnalyzedToken> l = new ArrayList<AnalyzedToken>();\n      final String lWord = word.toLowerCase();\n\n      if (lWord.equals(\".\")) {\n        l.add(new AnalyzedToken(word, \"M fino\", lWord));\n\n      } else if (lWord.equals(\"?\")) {\n        l.add(new AnalyzedToken(word, \"M fino dem\", lWord));\n\n      } else if (lWord.equals(\"!\")) {\n        l.add(new AnalyzedToken(word, \"M fino kri\", lWord));\n\n      } else if (lWord.equals(\"la\")) {\n        l.add(new AnalyzedToken(word, \"D\", lWord));\n\n      } else if (setAdverbs.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"E nak\", lWord));\n\n      } else if (setWordsNotTagged.contains(lWord)) {\n        l.add(new AnalyzedToken(word, null, lWord));\n\n      // Pronouns.\n      } else if (lWord.equals(\"mi\") || lWord.equals(\"ci\")\n              || lWord.equals(\"li\") || lWord.equals(\"ŝi\")\n              || lWord.equals(\"ĝi\") || lWord.equals(\"si\")\n              || lWord.equals(\"oni\")) {\n        l.add(new AnalyzedToken(word, \"R nak np\", lWord));\n      } else if (lWord.equals(\"min\") || lWord.equals(\"cin\")\n              || lWord.equals(\"lin\") || lWord.equals(\"ŝin\") \n              || lWord.equals(\"ĝin\") || lWord.equals(\"sin\")) {\n        l.add(new AnalyzedToken(word, \"R akz np\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.equals(\"ni\") || lWord.equals(\"ili\")) {\n        l.add(new AnalyzedToken(word, \"R nak pl\", lWord));\n      } else if (lWord.equals(\"nin\") || lWord.equals(\"ilin\")) {\n        l.add(new AnalyzedToken(word, \"R akz pl\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.equals(\"vi\")) {\n        l.add(new AnalyzedToken(word, \"R nak pn\", lWord));\n      } else if (lWord.equals(\"vin\")) {\n        l.add(new AnalyzedToken(word, \"R akz pn\", lWord.substring(0, lWord.length() - 1)));\n\n      // Conjunctions (kaj, sed, ...)\n      } else if (setConjunctions.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"K\", lWord));\n  \n      // Prepositions.\n      } else if (setPrepositionsNoAccusative.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"P sak\", lWord));\n      } else if (setPrepositionsAccusative.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"P kak\", lWord));\n\n      // Numbers.\n      } else if (setNumbers.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"N\", lWord));\n\n      // Tiu, kiu (tabelvortoj).\n      } else if ((matcher = patternTabelvorto.matcher(lWord)).find()) {\n        final String type1Group = matcher.group(1).substring(0, 1).toLowerCase();\n        final String type2Group = matcher.group(4);\n        final String plGroup    = matcher.group(5);\n        final String accGroup   = matcher.group(6);\n        final String type3Group = matcher.group(7);\n        final String type;\n        final String plural;\n        final String accusative;\n\n        if (accGroup == null) {\n          accusative = \"xxx\";\n        } else {\n          accusative = accGroup.toLowerCase().equals(\"n\") ? \"akz\" : \"nak\";\n        }\n        if (plGroup == null) {\n          plural = \" pn \";\n        } else {\n          plural = plGroup.toLowerCase().equals(\"j\") ? \" pl \" : \" np \";\n        }\n        type = ((type2Group == null) ? type3Group : type2Group).toLowerCase();\n\n        l.add(new AnalyzedToken(word, \"T \" + \n          accusative + plural + type1Group + \" \" + type, null));\n\n        if ((matcher = patternTabelvortoAdverb.matcher(lWord)).find()) {\n          l.add(new AnalyzedToken(word, \"E nak\", lWord));\n        }\n\n      // Words ending in .*oj?n? are nouns.\n      } else if (lWord.endsWith(\"o\")) {\n        l.add(new AnalyzedToken(word, \"O nak np\", lWord));\n      } else if (lWord.endsWith(\"oj\")) {\n        l.add(new AnalyzedToken(word, \"O nak pl\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"on\")) {\n        l.add(new AnalyzedToken(word, \"O akz np\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"ojn\")) {\n        l.add(new AnalyzedToken(word, \"O akz pl\", lWord.substring(0, lWord.length() - 2)));\n\n      // Words ending in .*aj?n? are nouns.\n      } else if (lWord.endsWith(\"a\")) {\n        l.add(new AnalyzedToken(word, \"A nak np\", lWord));\n      } else if (lWord.endsWith(\"aj\")) {\n        l.add(new AnalyzedToken(word, \"A nak pl\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"an\")) {\n        l.add(new AnalyzedToken(word, \"A akz np\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"ajn\")) {\n        l.add(new AnalyzedToken(word, \"A akz pl\", lWord.substring(0, lWord.length() - 2)));\n\n      // Words ending in .*en? are adverbs.\n      } else if (lWord.endsWith(\"e\")) {\n        l.add(new AnalyzedToken(word, \"E nak\", lWord));\n      } else if (lWord.endsWith(\"en\")) {\n        l.add(new AnalyzedToken(word, \"E akz\", lWord.substring(0, lWord.length() - 1)));\n\n      // Verbs.\n      } else if ((matcher = patternVerb.matcher(lWord)).find()) {\n        final String verb = matcher.group(1) + \"i\";\n        final String tense = matcher.group(2);\n        final String transitive = findTransitivity(verb);\n\n        l.add(new AnalyzedToken(word, \"V \" + transitive + \" \" + tense, verb));\n\n      // Irregular word (no tag).\n      } else {\n        l.add(new AnalyzedToken(word, null, null));\n      }\n\n      // Participle (can be combined with other tags).\n      if ((matcher = patternParticiple.matcher(lWord)).find()) {\n        final String verb = matcher.group(1) + \"i\";\n        final String aio = matcher.group(2);\n        final String antAt = matcher.group(3).equals(\"n\") ? \"n\" : \"-\";\n        final String aoe = matcher.group(4);\n        final String plural = matcher.group(5).equals(\"j\") ? \"pl\" : \"np\";\n        final String accusative = matcher.group(6).equals(\"n\") ? \"akz\" : \"nak\";\n        final String transitive = findTransitivity(verb);\n\n        l.add(new AnalyzedToken(word, \"C \" + accusative + \" \" + plural + \" \" +\n                                transitive + \" \" + aio + \" \" + antAt + \" \" + aoe,\n                                verb));\n      }\n\n      pos += word.length();\n      tokenReadings.add(new AnalyzedTokenReadings(\n        l.toArray(new AnalyzedToken[0]), 0));\n    }\n    return tokenReadings;\n  }","id":100413,"modified_method":"public List<AnalyzedTokenReadings> tag(final List<String> sentenceTokens) throws IOException {\n\n    lazyInit();\n\n    Matcher matcher;\n\n    final List<AnalyzedTokenReadings> tokenReadings = \n      new ArrayList<AnalyzedTokenReadings>();\n    int pos = 0;\n    for (String word : sentenceTokens) {\n      final List<AnalyzedToken> l = new ArrayList<AnalyzedToken>();\n      final String lWord = word.toLowerCase();\n\n      if (lWord.equals(\".\")) {\n        l.add(new AnalyzedToken(word, \"M fino\", lWord));\n\n      } else if (lWord.equals(\"?\")) {\n        l.add(new AnalyzedToken(word, \"M fino dem\", lWord));\n\n      } else if (lWord.equals(\"!\")) {\n        l.add(new AnalyzedToken(word, \"M fino kri\", lWord));\n\n      } else if (lWord.equals(\"la\")) {\n        l.add(new AnalyzedToken(word, \"D\", lWord));\n\n      } else if (setAdverbs.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"E nak\", lWord));\n\n      } else if (setWordsNotTagged.contains(lWord)) {\n        l.add(new AnalyzedToken(word, null, lWord));\n\n      // Pronouns.\n      } else if (lWord.equals(\"mi\") || lWord.equals(\"ci\")\n              || lWord.equals(\"li\") || lWord.equals(\"ŝi\")\n              || lWord.equals(\"ĝi\") || lWord.equals(\"si\")\n              || lWord.equals(\"oni\")) {\n        l.add(new AnalyzedToken(word, \"R nak np\", lWord));\n      } else if (lWord.equals(\"min\") || lWord.equals(\"cin\")\n              || lWord.equals(\"lin\") || lWord.equals(\"ŝin\") \n              || lWord.equals(\"ĝin\") || lWord.equals(\"sin\")) {\n        l.add(new AnalyzedToken(word, \"R akz np\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.equals(\"ni\") || lWord.equals(\"ili\")) {\n        l.add(new AnalyzedToken(word, \"R nak pl\", lWord));\n      } else if (lWord.equals(\"nin\") || lWord.equals(\"ilin\")) {\n        l.add(new AnalyzedToken(word, \"R akz pl\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.equals(\"vi\")) {\n        l.add(new AnalyzedToken(word, \"R nak pn\", lWord));\n      } else if (lWord.equals(\"vin\")) {\n        l.add(new AnalyzedToken(word, \"R akz pn\", lWord.substring(0, lWord.length() - 1)));\n\n      // Conjunctions (kaj, sed, ...)\n      } else if (setConjunctions.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"K\", lWord));\n  \n      // Prepositions.\n      } else if (setPrepositionsNoAccusative.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"P sak\", lWord));\n      } else if (setPrepositionsAccusative.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"P kak\", lWord));\n\n      // Numbers.\n      } else if (setNumbers.contains(lWord)) {\n        l.add(new AnalyzedToken(word, \"N\", lWord));\n\n      // Tiu, kiu (tabelvortoj).\n      } else if ((matcher = patternTabelvorto.matcher(lWord)).find()) {\n        final String type1Group = matcher.group(1).substring(0, 1).toLowerCase();\n        final String type2Group = matcher.group(4);\n        final String plGroup    = matcher.group(5);\n        final String accGroup   = matcher.group(6);\n        final String type3Group = matcher.group(7);\n        final String type;\n        final String plural;\n        final String accusative;\n\n        if (accGroup == null) {\n          accusative = \"xxx\";\n        } else {\n          accusative = accGroup.toLowerCase().equals(\"n\") ? \"akz\" : \"nak\";\n        }\n        if (plGroup == null) {\n          plural = \" pn \";\n        } else {\n          plural = plGroup.toLowerCase().equals(\"j\") ? \" pl \" : \" np \";\n        }\n        type = ((type2Group == null) ? type3Group : type2Group).toLowerCase();\n\n        l.add(new AnalyzedToken(word, \"T \" + \n          accusative + plural + type1Group + \" \" + type, null));\n\n        if ((matcher = patternTabelvortoAdverb.matcher(lWord)).find()) {\n          l.add(new AnalyzedToken(word, \"E nak\", lWord));\n        }\n\n      // Words ending in .*oj?n? are nouns.\n      } else if (lWord.endsWith(\"o\")) {\n        l.add(new AnalyzedToken(word, \"O nak np\", lWord));\n      } else if (lWord.endsWith(\"oj\")) {\n        l.add(new AnalyzedToken(word, \"O nak pl\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"on\")) {\n        l.add(new AnalyzedToken(word, \"O akz np\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"ojn\")) {\n        l.add(new AnalyzedToken(word, \"O akz pl\", lWord.substring(0, lWord.length() - 2)));\n\n      // Words ending in .*aj?n? are nouns.\n      } else if (lWord.endsWith(\"a\")) {\n        l.add(new AnalyzedToken(word, \"A nak np\", lWord));\n      } else if (lWord.endsWith(\"aj\")) {\n        l.add(new AnalyzedToken(word, \"A nak pl\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"an\")) {\n        l.add(new AnalyzedToken(word, \"A akz np\", lWord.substring(0, lWord.length() - 1)));\n      } else if (lWord.endsWith(\"ajn\")) {\n        l.add(new AnalyzedToken(word, \"A akz pl\", lWord.substring(0, lWord.length() - 2)));\n\n      // Words ending in .*en? are adverbs.\n      } else if (lWord.endsWith(\"e\")) {\n        l.add(new AnalyzedToken(word, \"E nak\", lWord));\n      } else if (lWord.endsWith(\"en\")) {\n        l.add(new AnalyzedToken(word, \"E akz\", lWord.substring(0, lWord.length() - 1)));\n\n      // Verbs.\n      } else if ((matcher = patternVerb.matcher(lWord)).find()) {\n        final String verb = matcher.group(1) + \"i\";\n        final String tense = matcher.group(2);\n        final String transitive = findTransitivity(verb);\n\n        l.add(new AnalyzedToken(word, \"V \" + transitive + \" \" + tense, verb));\n\n      // Irregular word (no tag).\n      } else {\n        l.add(new AnalyzedToken(word, null, null));\n      }\n\n      // Participle (can be combined with other tags).\n      if ((matcher = patternParticiple.matcher(lWord)).find()) {\n        if (!setNonParticiple.contains(matcher.group(1))) {\n          final String verb = matcher.group(2) + \"i\";\n          final String aio = matcher.group(3);\n          final String antAt = matcher.group(4).equals(\"n\") ? \"n\" : \"-\";\n          final String aoe = matcher.group(5);\n          final String plural = matcher.group(6).equals(\"j\") ? \"pl\" : \"np\";\n          final String accusative = matcher.group(7).equals(\"n\") ? \"akz\" : \"nak\";\n          final String transitive = findTransitivity(verb);\n\n          l.add(new AnalyzedToken(word, \"C \" + accusative + \" \" + plural + \" \" +\n                                  transitive + \" \" + aio + \" \" + antAt + \" \" + aoe,\n                                  verb));\n        }\n      }\n\n      pos += word.length();\n      tokenReadings.add(new AnalyzedTokenReadings(\n        l.toArray(new AnalyzedToken[0]), 0));\n    }\n    return tokenReadings;\n  }","commit_id":"eb83c20e8330f65f8207aa464163fd07f3924401","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n     * Tries to parse product version from it's string representation. Will return {@link #VERSION_UNKNOWN}\n     * if string does not conform to version format.\n     *\n     * @param verStr String representation of version.\n     * @return Product version.\n     */\n    @SuppressWarnings({\"MagicConstant\", \"TypeMayBeWeakened\"})\n    public static GridProductVersion fromString(String verStr) {\n        assert verStr != null;\n\n        if (verStr.endsWith(\"-DEV\"))\n            return VERSION_DEV;\n\n        Matcher match = VER_PATTERN.matcher(verStr);\n\n        if (match.matches()) {\n            try {\n                byte major = Byte.parseByte(match.group(1));\n                byte minor = Byte.parseByte(match.group(2));\n                byte maintenance = Byte.parseByte(match.group(3));\n\n                long revTs = 0;\n\n                if (match.group(6) != null)\n                    revTs = Long.parseLong(match.group(7));\n\n                byte[] revHash = null;\n\n                if (match.group(8) != null)\n                    revHash = U.decodeHex(match.group(9).toCharArray());\n\n                return new GridProductVersion(major, minor, maintenance, revTs, revHash);\n            }\n            catch (IllegalStateException | IndexOutOfBoundsException ignored) {\n                return VERSION_UNKNOWN;\n            }\n            catch (NumberFormatException | GridException ignored) {\n                // Safety, should never happen.\n                return VERSION_UNKNOWN;\n            }\n        }\n        else\n            return VERSION_UNKNOWN;\n    }","id":100414,"modified_method":"/**\n     * Tries to parse product version from it's string representation. Will return {@link #VERSION_UNKNOWN}\n     * if string does not conform to version format.\n     *\n     * @param verStr String representation of version.\n     * @return Product version.\n     */\n    @SuppressWarnings({\"MagicConstant\", \"TypeMayBeWeakened\"})\n    public static GridProductVersion fromString(String verStr) {\n        assert verStr != null;\n\n        if (verStr.endsWith(\"-DEV\"))\n            return VERSION_DEV;\n\n        Matcher match = VER_PATTERN.matcher(verStr);\n\n        if (match.matches()) {\n            try {\n                byte major = Byte.parseByte(match.group(1));\n                byte minor = Byte.parseByte(match.group(2));\n                byte maintenance = Byte.parseByte(match.group(3));\n\n                String stage = \"\";\n\n                if (match.group(4) != null)\n                    stage = match.group(5);\n\n                long revTs = 0;\n\n                if (match.group(8) != null)\n                    revTs = Long.parseLong(match.group(9));\n\n                byte[] revHash = null;\n\n                if (match.group(10) != null)\n                    revHash = U.decodeHex(match.group(11).toCharArray());\n\n                return new GridProductVersion(major, minor, maintenance, stage, revTs, revHash);\n            }\n            catch (IllegalStateException | IndexOutOfBoundsException ignored) {\n                return VERSION_UNKNOWN;\n            }\n            catch (NumberFormatException | GridException ignored) {\n                // Safety, should never happen.\n                return VERSION_UNKNOWN;\n            }\n        }\n        else\n            return VERSION_UNKNOWN;\n    }","commit_id":"beedbe223da3bcf83eee9c863ff79bdec7b77abb","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @param major Major version number.\n     * @param minor Minor version number.\n     * @param maintenance Maintenance version number.\n     * @param revTs Revision timestamp.\n     * @param revHash Revision hash.\n     */\n    public GridProductVersion(byte major, byte minor, byte maintenance, long revTs, byte[] revHash) {\n        if (revHash != null && revHash.length != 20)\n            throw new IllegalArgumentException(\"Invalid length for SHA1 hash (must be 20): \" + revHash.length);\n\n        this.major = major;\n        this.minor = minor;\n        this.maintenance = maintenance;\n        this.revTs = revTs;\n        this.revHash = revHash != null ? revHash : new byte[20];\n    }","id":100415,"modified_method":"/**\n     * @param major Major version number.\n     * @param minor Minor version number.\n     * @param maintenance Maintenance version number.\n     * @param revTs Revision timestamp.\n     * @param revHash Revision hash.\n     */\n    public GridProductVersion(byte major, byte minor, byte maintenance, long revTs, byte[] revHash) {\n        this(major, minor, maintenance, \"\", revTs, revHash);\n    }","commit_id":"beedbe223da3bcf83eee9c863ff79bdec7b77abb","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testFromString() throws Exception {\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-ent-0-DEV\"));\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-os-0-DEV\"));\n\n        GridProductVersion ver = GridProductVersion.fromString(\"1.2.3\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(0, ver.revisionTimestamp());\n        assertArrayEquals(new byte[20], ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-ent\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(0, ver.revisionTimestamp());\n        assertArrayEquals(new byte[20], ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-ent-4\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(4, ver.revisionTimestamp());\n        assertArrayEquals(new byte[20], ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-ent-4-18e5a7ec9e3202126a69bc231a6b965bc1d73dee\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(4, ver.revisionTimestamp());\n        assertArrayEquals(new byte[] {24,-27,-89,-20,-98,50,2,18,106,105,-68,35,26,107,-106,91,-63,-41,61,-18},\n            ver.revisionHash());\n    }","id":100416,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testFromString() throws Exception {\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-ent-0-DEV\"));\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-os-0-DEV\"));\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-RC1-0-DEV\"));\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-ga1-0-DEV\"));\n        assertEquals(GridProductVersion.VERSION_DEV, GridProductVersion.fromString(\"1.2.3-M1-0-DEV\"));\n\n        GridProductVersion ver = GridProductVersion.fromString(\"1.2.3\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(0, ver.revisionTimestamp());\n        assertArrayEquals(new byte[20], ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-ent\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(0, ver.revisionTimestamp());\n        assertArrayEquals(new byte[20], ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-ent-4\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(4, ver.revisionTimestamp());\n        assertArrayEquals(new byte[20], ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-ent-4-18e5a7ec9e3202126a69bc231a6b965bc1d73dee\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(4, ver.revisionTimestamp());\n        assertArrayEquals(new byte[] {24,-27,-89,-20,-98,50,2,18,106,105,-68,35,26,107,-106,91,-63,-41,61,-18},\n            ver.revisionHash());\n\n        ver = GridProductVersion.fromString(\"1.2.3-rc1-ent-4-18e5a7ec9e3202126a69bc231a6b965bc1d73dee\");\n\n        assertEquals(1, ver.major());\n        assertEquals(2, ver.minor());\n        assertEquals(3, ver.maintenance());\n        assertEquals(4, ver.revisionTimestamp());\n        assertArrayEquals(new byte[] {24,-27,-89,-20,-98,50,2,18,106,105,-68,35,26,107,-106,91,-63,-41,61,-18},\n            ver.revisionHash());\n\n        GridProductVersion.fromString(VER + '-' + \"ent\" + '-' + BUILD_TSTAMP + '-' + REV_HASH);\n\n        GridProductVersion.fromString(VER + '-' + \"os\" + '-' + BUILD_TSTAMP + '-' + REV_HASH);\n    }","commit_id":"beedbe223da3bcf83eee9c863ff79bdec7b77abb","url":"https://github.com/apache/ignite"},{"original_method":"private void assignContent() {\n\t\tif (content.length() == 0) {\n\t\t\tString baseurl = Main.pref.get(\"help.baseurl\", \"http://josm.openstreetmap.de\");\n\t\t\tWikiReader wr = new WikiReader(baseurl);\n\t\t\tString motdcontent = \"\";\n\t\t\ttry {\n\t\t\t\tmotdcontent = wr.read(baseurl + \"/wiki/MessageOfTheDay\");\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tmotdcontent = tr(\"<html>\\n<h1>JOSM, the Java OpenStreetMap editor<\/h1>\\n<h2>(Message of the day not available)<\/h2>\");\t\t\t\n\t\t\t}\n\n\t\t\tint myVersion;\n\t\t\ttry {\n\t\t\t\tmyVersion = Integer.parseInt(AboutAction.getVersion());\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tmyVersion = 0;\n\t\t\t}\n\n\t\t\tPattern commentPattern = Pattern.compile(\"\\\\<p\\\\>\\\\s*\\\\/\\\\*[^\\\\*]*\\\\*\\\\/\\\\s*\\\\<\\\\/p\\\\>\", Pattern.CASE_INSENSITIVE|Pattern.DOTALL|Pattern.MULTILINE);\n\t\t\tMatcher matcherComment = commentPattern.matcher(motdcontent);\n\t\t\tmotdcontent = matcherComment.replaceAll(\"\");\n\n\t\t\t/* look for hrefs of the form wiki/MessageOfTheDay>123 where > can also be <,<=,>= and the number is the revision number */\n\t\t\tint start = 0;\n\t\t\tboolean nothingIncluded = true;\n\t\t\tPattern versionPattern = Pattern.compile(\"\\\\<a[^\\\\>]*href\\\\=\\\\\\\"([^\\\\\\\"]*\\\\/wiki\\\\/MessageOfTheDay(\\\\%3E%3D|%3C%3D|\\\\%3E|\\\\%3C)([0-9]+))\\\\\\\"[^\\\\>]*\\\\>[^\\\\<]*\\\\<\\\\/a\\\\>\", Pattern.CASE_INSENSITIVE|Pattern.DOTALL|Pattern.MULTILINE);\n\t\t\tMatcher matcher = versionPattern.matcher(motdcontent);\n\t\t\tmatcher.reset();\n\t\t\twhile (matcher.find()) {\n\t\t\t\tint targetVersion = Integer.parseInt(matcher.group(3));\n\t\t\t\tString condition = matcher.group(2);\n\t\t\t\tboolean included = false;\n\t\t\t\tif (condition.equals(\"%3E\")) {\n\t\t\t\t\tif ((myVersion == 0 || myVersion > targetVersion) && ! Main.pref.getBoolean(\"motd.gt.\"+targetVersion)) {\n\t\t\t\t\t\tMain.pref.put(\"motd.gt.\"+targetVersion, true);\n\t\t\t\t\t\tincluded = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (condition.equals(\"%3E%3D\")) {\n\t\t\t\t\tif ((myVersion == 0 || myVersion >= targetVersion) && ! Main.pref.getBoolean(\"motd.ge.\"+targetVersion)) {\n\t\t\t\t\t\tMain.pref.put(\"motd.ge.\"+targetVersion, true);\n\t\t\t\t\t\tincluded = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (condition.equals(\"%3C\")) {\n\t\t\t\t\tincluded = myVersion < targetVersion;\n\t\t\t\t} else {\n\t\t\t\t\t included = myVersion <= targetVersion;\n\t\t\t\t}\n\t\t\t\tif (matcher.start() > start) {\n\t\t\t\t\tcontent += motdcontent.substring(start, matcher.start() - 1);\n\t\t\t\t}\n\t\t\t\tstart = matcher.end();\n\t\t\t\tif (included) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcontent += wr.read(matcher.group(1)).replace(\"<html>\", \"\").replace(\"<\/html>\", \"\").replace(\"<div id=\\\"searchable\\\">\", \"\").replace(\"<\/div>\", \"\");\n\t\t\t\t\t\tnothingIncluded = false;\n\t\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t}\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (nothingIncluded) {\n\t\t\t\tcontent += \"<div align=\\\"center\\\">Watch this space for announcements<\/div>\";\n\t\t\t\tcontent += \"<div align=\\\"center\\\" style=\\\"font-weight: normal\\\">(remove the \\\"motd\\\" entries in Advanced Preferences to see any available announcements next time)<\/div>\";\n\t\t\t}\n\t\t\tcontent += motdcontent.substring(start);\n\t\t\tcontent = content.replace(\"<html>\", \"<html><style>\\nbody { font-family: sans-serif; font-weight: bold; }\\n<\/style>\");\n\t\t\tcontent = content.replace(\"<h1\", \"<h1 align=\\\"center\\\"\");\n\t\t}\n\n\t}","id":100417,"modified_method":"private void assignContent() {\n        if (content.length() == 0) {\n            String baseurl = Main.pref.get(\"help.baseurl\", \"http://josm.openstreetmap.de\");\n            WikiReader wr = new WikiReader(baseurl);\n            String motdcontent = \"\";\n            try {\n                motdcontent = wr.read(baseurl + \"/wiki/MessageOfTheDay\");\n            } catch (IOException ioe) {\n                motdcontent = tr(\"<html>\\n<h1>JOSM, the Java OpenStreetMap editor<\/h1>\\n<h2>(Message of the day not available)<\/h2>\");            \n            }\n\n            int myVersion;\n            try {\n                myVersion = Integer.parseInt(AboutAction.getVersion());\n            } catch (NumberFormatException e) {\n                myVersion = 0;\n            }\n\n            Pattern commentPattern = Pattern.compile(\"\\\\<p\\\\>\\\\s*\\\\/\\\\*[^\\\\*]*\\\\*\\\\/\\\\s*\\\\<\\\\/p\\\\>\", Pattern.CASE_INSENSITIVE|Pattern.DOTALL|Pattern.MULTILINE);\n            Matcher matcherComment = commentPattern.matcher(motdcontent);\n            motdcontent = matcherComment.replaceAll(\"\");\n\n            /* look for hrefs of the form wiki/MessageOfTheDay>123 where > can also be <,<=,>= and the number is the revision number */\n            int start = 0;\n            boolean nothingIncluded = true;\n            Pattern versionPattern = Pattern.compile(\"\\\\<a[^\\\\>]*href\\\\=\\\\\\\"([^\\\\\\\"]*\\\\/wiki\\\\/)(MessageOfTheDay(\\\\%3E%3D|%3C%3D|\\\\%3E|\\\\%3C)([0-9]+))\\\\\\\"[^\\\\>]*\\\\>[^\\\\<]*\\\\<\\\\/a\\\\>\", Pattern.CASE_INSENSITIVE|Pattern.DOTALL|Pattern.MULTILINE);\n            Matcher matcher = versionPattern.matcher(motdcontent);\n            matcher.reset();\n            while (matcher.find()) {\n                int targetVersion = Integer.parseInt(matcher.group(4));\n                String condition = matcher.group(3);\n                boolean included = false;\n                if (condition.equals(\"%3E\")) {\n                    if ((myVersion == 0 || myVersion > targetVersion) \n                        /* && ! Main.pref.getBoolean(\"motd.gt.\"+targetVersion) */) {\n                        /* Main.pref.put(\"motd.gt.\"+targetVersion, true); */\n                        included = true;\n                    }\n                } else if (condition.equals(\"%3E%3D\")) {\n                    if ((myVersion == 0 || myVersion >= targetVersion) \n                        /* && ! Main.pref.getBoolean(\"motd.ge.\"+targetVersion) */) {\n                        /* Main.pref.put(\"motd.ge.\"+targetVersion, true); */\n                        included = true;\n                    }\n                } else if (condition.equals(\"%3C\")) {\n                    included = myVersion < targetVersion;\n                } else {\n                     included = myVersion <= targetVersion;\n                }\n                if (matcher.start() > start) {\n                    content += motdcontent.substring(start, matcher.start() - 1);\n                }\n                start = matcher.end();\n                if (included) {\n                    // translators: set this to a suitable language code to\n                    // be able to provide translations in the Wiki.\n                    String languageCode = tr(\"En:\");\n                    String url = matcher.group(1) + languageCode + matcher.group(2);\n                    try {\n                        content += wr.read(url).replace(\"<html>\", \"\").replace(\"<\/html>\", \"\").replace(\"<div id=\\\"searchable\\\">\", \"\").replace(\"<\/div>\", \"\");\n                        nothingIncluded = false;\n                    } catch (IOException ioe) {\n                        url = matcher.group(1) + matcher.group(2);\n                        try {\n                            content += wr.read(url).replace(\"<html>\", \"\").replace(\"<\/html>\", \"\").replace(\"<div id=\\\"searchable\\\">\", \"\").replace(\"<\/div>\", \"\");\n                            nothingIncluded = false;\n                        } catch (IOException ioe2) {\n                        }            \n                    }            \n                }\n            }\n            if (nothingIncluded) {\n                content += \"<div align=\\\"center\\\">Watch this space for announcements<\/div>\";\n                content += \"<div align=\\\"center\\\" style=\\\"font-weight: normal\\\">(remove the \\\"motd\\\" entries in Advanced Preferences to see any available announcements next time)<\/div>\";\n            }\n            content += motdcontent.substring(start);\n            content = content.replace(\"<html>\", \"<html><style>\\nbody { font-family: sans-serif; font-weight: bold; }\\n<\/style>\");\n            content = content.replace(\"<h1\", \"<h1 align=\\\"center\\\"\");\n        }\n\n    }","commit_id":"55c838e321d31b734b00b5ed7c31bc5e5cbc3544","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Test\n    public void testInvokeMethod() throws Exception {\n        TestProxy proxy = new TestProxy();\n        assertEquals(\"sayHi()\", \"Hello!\", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI, Collections.<String, Object>emptyMap()));\n\n        final HashMap<String, Object> properties = new HashMap<String, Object>();\n        properties.put(\"name\", \"Dave\");\n\n        assertEquals(\"sayHi(name)\", \"Hello Dave\", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI_1, properties));\n        assertEquals(\"greetMe(name)\", \"Greetings Dave\", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETME, properties));\n\n        properties.clear();\n        properties.put(\"name1\", \"Dave\");\n        properties.put(\"name2\", \"Frank\");\n        assertEquals(\"greetUs(name1, name2)\", \"Greetings Dave, Frank\", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETUS, properties));\n\n        properties.clear();\n        properties.put(\"names\", new String[] {\"Dave\", \"Frank\"});\n        assertEquals(\"greetAll(names)\", \"Greetings Dave, Frank\", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETALL, properties));\n\n        // test with a derived proxy\n        proxy = new TestProxy() {\n            @Override\n            public String sayHi(String name) {\n                return \"Howdy \" + name;\n            }\n        };\n        properties.clear();\n        properties.put(\"name\", \"Dave\");\n        assertEquals(\"Derived sayHi(name)\", \"Howdy Dave\", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI_1, properties));\n    }","id":100418,"modified_method":"@Test\n    public void testInvokeMethod() throws Exception {\n        TestProxy proxy = new TestProxy();\n        assertEquals(\"sayHi()\", \"Hello!\", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI, Collections.<String, Object>emptyMap()));\n\n        final HashMap<String, Object> properties = new HashMap<String, Object>();\n        properties.put(\"name\", \"Dave\");\n\n        assertEquals(\"sayHi(name)\", \"Hello Dave\", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI_1, properties));\n        assertEquals(\"greetMe(name)\", \"Greetings Dave\", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETME, properties));\n\n        properties.clear();\n        properties.put(\"name1\", \"Dave\");\n        properties.put(\"name2\", \"Frank\");\n        assertEquals(\"greetUs(name1, name2)\", \"Greetings Dave, Frank\", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETUS, properties));\n\n        properties.clear();\n        properties.put(\"names\", new String[] {\"Dave\", \"Frank\"});\n        assertEquals(\"greetAll(names)\", \"Greetings Dave, Frank\", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETALL, properties));\n\n        properties.clear();\n        Map<String, String> nameMap = new HashMap<String, String>();\n        nameMap.put(\"Dave\", \"Hello\");\n        nameMap.put(\"Frank\", \"Goodbye\");\n        properties.put(\"nameMap\", nameMap);\n        final Map<String, String> result = (Map<String, String>) ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETALL_2, properties);\n        assertNotNull(\"greetAll(nameMap)\", result);\n        for (Map.Entry<String, String> entry : result.entrySet()) {\n            assertTrue(\"greetAll(nameMap)\", entry.getValue().endsWith(entry.getKey()));\n        }\n\n        // test with a derived proxy\n        proxy = new TestProxy() {\n            @Override\n            public String sayHi(String name) {\n                return \"Howdy \" + name;\n            }\n        };\n        properties.clear();\n        properties.put(\"name\", \"Dave\");\n        assertEquals(\"Derived sayHi(name)\", \"Howdy Dave\", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI_1, properties));\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testGetArguments() {\n        assertEquals(\"GetArguments failed for hi\", 2, apiMethodHelper.getArguments(\"hi\").size());\n        assertEquals(\"GetArguments failed for greetMe\", 2, apiMethodHelper.getArguments(\"greetMe\").size());\n        assertEquals(\"GetArguments failed for greetUs\", 4, apiMethodHelper.getArguments(\"greetUs\").size());\n    }","id":100419,"modified_method":"@Test\n    public void testGetArguments() {\n        assertEquals(\"GetArguments failed for hi\", 2, apiMethodHelper.getArguments(\"hi\").size());\n        assertEquals(\"GetArguments failed for greetMe\", 2, apiMethodHelper.getArguments(\"greetMe\").size());\n        assertEquals(\"GetArguments failed for greetUs\", 4, apiMethodHelper.getArguments(\"greetUs\").size());\n        assertEquals(\"GetArguments failed for greetAll\", 6, apiMethodHelper.getArguments(\"greetAll\").size());\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testAllArguments() throws Exception {\n        assertEquals(\"Get all arguments\", 6, apiMethodHelper.allArguments().size());\n    }","id":100420,"modified_method":"@Test\n    public void testAllArguments() throws Exception {\n        assertEquals(\"Get all arguments\", 7, apiMethodHelper.allArguments().size());\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testGetType() throws Exception {\n        assertEquals(\"Get type name\", String.class, apiMethodHelper.getType(\"name\"));\n        assertEquals(\"Get type name1\", String.class, apiMethodHelper.getType(\"name1\"));\n        assertEquals(\"Get type name2\", String.class, apiMethodHelper.getType(\"name2\"));\n    }","id":100421,"modified_method":"@Test\n    public void testGetType() throws Exception {\n        assertEquals(\"Get type name\", String.class, apiMethodHelper.getType(\"name\"));\n        assertEquals(\"Get type name1\", String.class, apiMethodHelper.getType(\"name1\"));\n        assertEquals(\"Get type name2\", String.class, apiMethodHelper.getType(\"name2\"));\n        assertEquals(\"Get type nameMap\", Map.class, apiMethodHelper.getType(\"nameMap\"));\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testGetCandidateMethods() {\n        List<ApiMethod> methods = apiMethodHelper.getCandidateMethods(\"sayHi\");\n        assertEquals(\"Can't find sayHi(*)\", 2, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"hi\");\n        assertEquals(\"Can't find sayHi(name)\", 2, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"hi\", \"name\");\n        assertEquals(\"Can't find sayHi(name)\", 1, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"greetMe\");\n        assertEquals(\"Can't find greetMe(name)\", 1, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"greetUs\", \"name1\");\n        assertEquals(\"Can't find greetUs(name1, name2)\", 1, methods.size());\n    }","id":100422,"modified_method":"@Test\n    public void testGetCandidateMethods() {\n        List<ApiMethod> methods = apiMethodHelper.getCandidateMethods(\"sayHi\");\n        assertEquals(\"Can't find sayHi(*)\", 2, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"hi\");\n        assertEquals(\"Can't find sayHi(name)\", 2, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"hi\", \"name\");\n        assertEquals(\"Can't find sayHi(name)\", 1, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"greetMe\");\n        assertEquals(\"Can't find greetMe(name)\", 1, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"greetUs\", \"name1\");\n        assertEquals(\"Can't find greetUs(name1, name2)\", 1, methods.size());\n\n        methods = apiMethodHelper.getCandidateMethods(\"greetAll\", \"nameMap\");\n        assertEquals(\"Can't find greetAll(nameMap)\", 1, methods.size());\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Parses the method signatures from {@code getSignatures()}.\n     * @return list of Api methods as {@link ApiMethodModel}\n     */\n    public final List<ApiMethodModel> parse() {\n        // parse sorted signatures and generate descriptions\n        List<ApiMethodModel> result = new ArrayList<ApiMethodModel>();\n        for (String signature: signatures) {\n\n            // remove all modifiers and type parameters for method\n            signature = signature.replaceAll(METHOD_PREFIX, \"$4 $5(\");\n            // remove all final modifiers for arguments\n            signature = signature.replaceAll(\"(\\\\(|,\\\\s*)final\\\\s+\", \"$1\");\n            // remove all redundant spaces in generic parameters\n            signature = signature.replaceAll(\"\\\\s*<\\\\s*\", \"<\").replaceAll(\"\\\\s*>\", \">\");\n\n            log.debug(\"Processing \" + signature);\n\n            final Matcher methodMatcher = METHOD_PATTERN.matcher(signature);\n            if (!methodMatcher.matches()) {\n                throw new IllegalArgumentException(\"Invalid method signature \" + signature);\n            }\n\n            // drop any generic type parameters in result, if any\n            final String resultTypeWithArgs = methodMatcher.group(1);\n            final Matcher resultMatcher = GENERIC_ARG_PATTERN.matcher(resultTypeWithArgs);\n            final Class<?> resultType = (resultMatcher.matches()) ?\n                forName(resultMatcher.group(1)) : forName(resultTypeWithArgs);\n\n            final String name = methodMatcher.group(2);\n            final String argSignature = methodMatcher.group(3);\n\n            final List<Argument> arguments = new ArrayList<Argument>();\n\n            List<Class<?>> argTypes = new ArrayList<Class<?>>();\n            final Matcher argsMatcher = ARGS_PATTERN.matcher(argSignature);\n            while (argsMatcher.find()) {\n                final String argTypeWithParams = argsMatcher.group(1);\n                final Matcher genericMatcher = GENERIC_ARG_PATTERN.matcher(argTypeWithParams);\n                Class<?> type;\n                String typeArgs = null;\n                if (genericMatcher.matches()) {\n                    type = forName(genericMatcher.group(1));\n                    typeArgs = genericMatcher.group(2);\n                } else {\n                    type = forName(argTypeWithParams);\n                }\n                arguments.add(new Argument(argsMatcher.group(2), type, typeArgs));\n                argTypes.add(type);\n            }\n\n            Method method;\n            try {\n                method = proxyType.getMethod(name, argTypes.toArray(new Class<?>[argTypes.size()]));\n            } catch (NoSuchMethodException e) {\n                throw new IllegalArgumentException(\"Method not found [\" + signature + \"] in type \" + proxyType.getName());\n            }\n            result.add(new ApiMethodModel(name, resultType, arguments, method));\n        }\n\n        // allow derived classes to post process\n        result = processResults(result);\n\n        // check that argument names have the same type across methods\n        Map<String, Class<?>> allArguments = new HashMap<String, Class<?>>();\n        for (ApiMethodModel model : result) {\n            for (Argument argument : model.getArguments()) {\n                String name = argument.getName();\n                Class<?> argClass = allArguments.get(name);\n                Class<?> type = argument.getType();\n                if (argClass == null) {\n                    allArguments.put(name, type);\n                } else {\n                    if (argClass != type) {\n                        throw new IllegalArgumentException(\"Argument [\" + name \n                                + \"] is used in multiple methods with different types \" \n                                + argClass.getCanonicalName() + \", \" + type.getCanonicalName());\n                    }\n                }\n            }\n        }\n        allArguments.clear();\n\n        Collections.sort(result, new Comparator<ApiMethodModel>() {\n            @Override\n            public int compare(ApiMethodModel model1, ApiMethodModel model2) {\n                final int nameCompare = model1.name.compareTo(model2.name);\n                if (nameCompare != 0) {\n                    return nameCompare;\n                } else {\n\n                    final int nArgs1 = model1.arguments.size();\n                    final int nArgsCompare = nArgs1 - model2.arguments.size();\n                    if (nArgsCompare != 0) {\n                        return nArgsCompare;\n                    } else {\n                        // same number of args, compare arg names, kinda arbitrary to use alphabetized order\n                        for (int i = 0; i < nArgs1; i++) {\n                            final int argCompare = model1.arguments.get(i).name.compareTo(model2.arguments.get(i).name);\n                            if (argCompare != 0) {\n                                return argCompare;\n                            }\n                        }\n                        // duplicate methods???\n                        log.warn(\"Duplicate methods found [\" + model1 + \"], [\" + model2 + \"]\");\n                        return 0;\n                    }\n                }\n            }\n        });\n\n        // assign unique names to every method model\n        final Map<String, Integer> dups = new HashMap<String, Integer>();\n        for (ApiMethodModel model : result) {\n            // locale independent upper case conversion\n            final String name = model.getName();\n            final char[] upperCase = new char[name.length()];\n            final char[] lowerCase = name.toCharArray();\n            for (int i = 0; i < upperCase.length; i++) {\n                upperCase[i] = Character.toUpperCase(lowerCase[i]);\n            }\n            String uniqueName = new String(upperCase);\n\n            Integer suffix = dups.get(uniqueName);\n            if (suffix == null) {\n                dups.put(uniqueName, 1);\n            } else {\n                dups.put(uniqueName, suffix + 1);\n                StringBuilder builder = new StringBuilder(uniqueName);\n                builder.append(\"_\").append(suffix);\n                uniqueName = builder.toString();\n            }\n            model.uniqueName = uniqueName;\n        }\n        return result;\n    }","id":100423,"modified_method":"/**\n     * Parses the method signatures from {@code getSignatures()}.\n     * @return list of Api methods as {@link ApiMethodModel}\n     */\n    public final List<ApiMethodModel> parse() {\n        // parse sorted signatures and generate descriptions\n        List<ApiMethodModel> result = new ArrayList<ApiMethodModel>();\n        for (String signature: signatures) {\n\n            // remove all modifiers and type parameters for method\n            signature = signature.replaceAll(METHOD_PREFIX, \"$4 $5(\");\n            // remove all final modifiers for arguments\n            signature = signature.replaceAll(\"(\\\\(|,\\\\s*)final\\\\s+\", \"$1\");\n            // remove all redundant spaces in generic parameters\n            signature = signature.replaceAll(\"\\\\s*<\\\\s*\", \"<\").replaceAll(\"\\\\s*>\", \">\");\n\n            log.debug(\"Processing \" + signature);\n\n            final Matcher methodMatcher = METHOD_PATTERN.matcher(signature);\n            if (!methodMatcher.matches()) {\n                throw new IllegalArgumentException(\"Invalid method signature \" + signature);\n            }\n\n            // ignore generic type parameters in result, if any\n            final Class<?> resultType = forName(methodMatcher.group(1));\n            final String name = methodMatcher.group(3);\n            final String argSignature = methodMatcher.group(4);\n\n            final List<Argument> arguments = new ArrayList<Argument>();\n            final List<Class<?>> argTypes = new ArrayList<Class<?>>();\n\n            final Matcher argsMatcher = ARGS_PATTERN.matcher(argSignature);\n            while (argsMatcher.find()) {\n\n                final Class<?> type = forName(argsMatcher.group(1));\n                argTypes.add(type);\n\n                final String typeArgs = argsMatcher.group(2) != null ? argsMatcher.group(2).replaceAll(\" \", \"\") : null;\n                arguments.add(new Argument(argsMatcher.group(3), type, typeArgs));\n            }\n\n            Method method;\n            try {\n                method = proxyType.getMethod(name, argTypes.toArray(new Class<?>[argTypes.size()]));\n            } catch (NoSuchMethodException e) {\n                throw new IllegalArgumentException(\"Method not found [\" + signature + \"] in type \" + proxyType.getName());\n            }\n            result.add(new ApiMethodModel(name, resultType, arguments, method));\n        }\n\n        // allow derived classes to post process\n        result = processResults(result);\n\n        // check that argument names have the same type across methods\n        Map<String, Class<?>> allArguments = new HashMap<String, Class<?>>();\n        for (ApiMethodModel model : result) {\n            for (Argument argument : model.getArguments()) {\n                String name = argument.getName();\n                Class<?> argClass = allArguments.get(name);\n                Class<?> type = argument.getType();\n                if (argClass == null) {\n                    allArguments.put(name, type);\n                } else {\n                    if (argClass != type) {\n                        throw new IllegalArgumentException(\"Argument [\" + name \n                                + \"] is used in multiple methods with different types \" \n                                + argClass.getCanonicalName() + \", \" + type.getCanonicalName());\n                    }\n                }\n            }\n        }\n        allArguments.clear();\n\n        Collections.sort(result, new Comparator<ApiMethodModel>() {\n            @Override\n            public int compare(ApiMethodModel model1, ApiMethodModel model2) {\n                final int nameCompare = model1.name.compareTo(model2.name);\n                if (nameCompare != 0) {\n                    return nameCompare;\n                } else {\n\n                    final int nArgs1 = model1.arguments.size();\n                    final int nArgsCompare = nArgs1 - model2.arguments.size();\n                    if (nArgsCompare != 0) {\n                        return nArgsCompare;\n                    } else {\n                        // same number of args, compare arg names, kinda arbitrary to use alphabetized order\n                        for (int i = 0; i < nArgs1; i++) {\n                            final int argCompare = model1.arguments.get(i).name.compareTo(model2.arguments.get(i).name);\n                            if (argCompare != 0) {\n                                return argCompare;\n                            }\n                        }\n                        // duplicate methods???\n                        log.warn(\"Duplicate methods found [\" + model1 + \"], [\" + model2 + \"]\");\n                        return 0;\n                    }\n                }\n            }\n        });\n\n        // assign unique names to every method model\n        final Map<String, Integer> dups = new HashMap<String, Integer>();\n        for (ApiMethodModel model : result) {\n            // locale independent upper case conversion\n            final String name = model.getName();\n            final char[] upperCase = new char[name.length()];\n            final char[] lowerCase = name.toCharArray();\n            for (int i = 0; i < upperCase.length; i++) {\n                upperCase[i] = Character.toUpperCase(lowerCase[i]);\n            }\n            String uniqueName = new String(upperCase);\n\n            Integer suffix = dups.get(uniqueName);\n            if (suffix == null) {\n                dups.put(uniqueName, 1);\n            } else {\n                dups.put(uniqueName, suffix + 1);\n                StringBuilder builder = new StringBuilder(uniqueName);\n                builder.append(\"_\").append(suffix);\n                uniqueName = builder.toString();\n            }\n            model.uniqueName = uniqueName;\n        }\n        return result;\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testParse() throws Exception {\n\n        final Substitution[] adapters = new Substitution[4];\n        adapters[0] = new Substitution(\".+\", \"name\", PERSON);\n        adapters[1] = new Substitution(\"greet.+\", \"person([0-9]+)\", \"astronaut$1\");\n        adapters[2] = new Substitution(\".+\", \"(.+)\", \"java.util.List\", \"$1List\");\n        adapters[3] = new Substitution(\".+\", \"(.+)\", \".*?(\\\\w++)\\\\[\\\\]\", \"$1Array\", true);\n\n        final ApiMethodParser<TestProxy> parser = new ArgumentSubstitutionParser<TestProxy>(TestProxy.class, adapters);\n\n        final ArrayList<String> signatures = new ArrayList<String>();\n        signatures.add(\"public String sayHi();\");\n        signatures.add(\"public String sayHi(final String name);\");\n        signatures.add(\"public final String greetMe(final String name);\");\n        signatures.add(\"public final String greetUs(final String name1, String name2);\");\n        signatures.add(\"public final String greetAll(String[] names);\");\n        signatures.add(\"public final String greetAll(java.util.List<String> names);\");\n        signatures.add(\"public final String[] greetTimes(String name, int times);\");\n        parser.setSignatures(signatures);\n\n        final List<ApiMethodParser.ApiMethodModel> methodModels = parser.parse();\n        assertEquals(7, methodModels.size());\n\n        final ApiMethodParser.ApiMethodModel sayHi1 = methodModels.get(6);\n        assertEquals(PERSON, sayHi1.getArguments().get(0).getName());\n        assertEquals(\"SAYHI_1\", sayHi1.getUniqueName());\n\n        final ApiMethodParser.ApiMethodModel greetMe = methodModels.get(2);\n        assertEquals(PERSON, greetMe.getArguments().get(0).getName());\n\n        final ApiMethodParser.ApiMethodModel greetUs = methodModels.get(4);\n        assertEquals(\"astronaut1\", greetUs.getArguments().get(0).getName());\n        assertEquals(\"astronaut2\", greetUs.getArguments().get(1).getName());\n\n        final ApiMethodParser.ApiMethodModel greetAll = methodModels.get(0);\n        assertEquals(\"personsList\", greetAll.getArguments().get(0).getName());\n\n        final ApiMethodParser.ApiMethodModel greetAll1 = methodModels.get(1);\n        assertEquals(\"stringArray\", greetAll1.getArguments().get(0).getName());\n    }","id":100424,"modified_method":"@Test\n    public void testParse() throws Exception {\n\n        final Substitution[] adapters = new Substitution[4];\n        adapters[0] = new Substitution(\".+\", \"name\", PERSON);\n        adapters[1] = new Substitution(\"greet.+\", \"person([0-9]+)\", \"astronaut$1\");\n        adapters[2] = new Substitution(\".+\", \"(.+)\", \"java.util.List\", \"$1List\");\n        adapters[3] = new Substitution(\".+\", \"(.+)\", \".*?(\\\\w++)\\\\[\\\\]\", \"$1Array\", true);\n\n        final ApiMethodParser<TestProxy> parser = new ArgumentSubstitutionParser<TestProxy>(TestProxy.class, adapters);\n\n        final ArrayList<String> signatures = new ArrayList<String>();\n        signatures.add(\"public String sayHi();\");\n        signatures.add(\"public String sayHi(final String name);\");\n        signatures.add(\"public final String greetMe(final String name);\");\n        signatures.add(\"public final String greetUs(final String name1, String name2);\");\n        signatures.add(\"public final String greetAll(String[] names);\");\n        signatures.add(\"public final String greetAll(java.util.List<String> names);\");\n        signatures.add(\"public final java.util.Map<String, String> greetAll(java.util.Map<String> nameMap);\");\n        signatures.add(\"public final String[] greetTimes(String name, int times);\");\n        parser.setSignatures(signatures);\n\n        final List<ApiMethodParser.ApiMethodModel> methodModels = parser.parse();\n        assertEquals(8, methodModels.size());\n\n        final ApiMethodParser.ApiMethodModel sayHi1 = methodModels.get(7);\n        assertEquals(PERSON, sayHi1.getArguments().get(0).getName());\n        assertEquals(\"SAYHI_1\", sayHi1.getUniqueName());\n\n        final ApiMethodParser.ApiMethodModel greetMe = methodModels.get(3);\n        assertEquals(PERSON, greetMe.getArguments().get(0).getName());\n\n        final ApiMethodParser.ApiMethodModel greetUs = methodModels.get(5);\n        assertEquals(\"astronaut1\", greetUs.getArguments().get(0).getName());\n        assertEquals(\"astronaut2\", greetUs.getArguments().get(1).getName());\n\n        final ApiMethodParser.ApiMethodModel greetAll = methodModels.get(0);\n        assertEquals(\"personMap\", greetAll.getArguments().get(0).getName());\n\n        final ApiMethodParser.ApiMethodModel greetAll1 = methodModels.get(1);\n        assertEquals(\"personsList\", greetAll1.getArguments().get(0).getName());\n\n        final ApiMethodParser.ApiMethodModel greetAll2 = methodModels.get(2);\n        assertEquals(\"stringArray\", greetAll2.getArguments().get(0).getName());\n    }","commit_id":"909077a133eff456355aad8fc73283d62cb2060c","url":"https://github.com/apache/camel"},{"original_method":"/**\n   * Setups {@link Editor#getSoftWrapModel() soft wraps model} of the {@link #getEditor() current editor} according to the given text\n   * that is expected to contain information obtained from the {@link CachingSoftWrapDataMapper#toString()}.\n   *\n   * @param data  string representation of the target soft wraps cache\n   */\n  @SuppressWarnings(\"UnusedDeclaration\")\n  protected static void setupSoftWraps(@NotNull String data) {\n    Scanner scanner = new Scanner(data);\n    Pattern generalPattern =\n      Pattern.compile(\"visual line: (\\\\d+), offsets: (\\\\d+)-(\\\\d+), fold regions: \\\\[([^\\\\]]*)\\\\], tab data: \\\\[([^\\\\]]*)\\\\]\");\n    Pattern foldPattern = Pattern.compile(\"width in columns: (-?\\\\d+), start X: (-?\\\\d+), fold region: FoldRegion [-+]\\\\((\\\\d+):(\\\\d+)\");\n    Pattern tabPattern = Pattern.compile(\"\\\\[(\\\\d+), width: (\\\\d+)\");\n    final SoftWrapModelImpl softWrapModel = (SoftWrapModelImpl)myEditor.getSoftWrapModel();\n    final CachingSoftWrapDataMapper mapper = softWrapModel.getDataMapper();\n    mapper.release();\n    final FoldingModelEx foldingModel = (FoldingModelEx)myEditor.getFoldingModel();\n    while (scanner.findInLine(generalPattern) != null) {\n      final MatchResult generalMatch = scanner.match();\n      int visualLine = Integer.parseInt(generalMatch.group(1));\n      int startOffset = Integer.parseInt(generalMatch.group(2));\n      int endOffset = Integer.parseInt(generalMatch.group(3));\n      \n      List<Trinity<Integer, Integer, FoldRegion>> foldRegions = new ArrayList<Trinity<Integer, Integer, FoldRegion>>();\n      Scanner foldScanner = new Scanner(generalMatch.group(4));\n      while (foldScanner.findInLine(foldPattern) != null) {\n        final MatchResult foldMatch = foldScanner.match();\n        int widthInColumns = Integer.parseInt(foldMatch.group(1));\n        int startX = Integer.parseInt(foldMatch.group(2));\n        int foldStartOffset = Integer.parseInt(foldMatch.group(3));\n        int foldEndOffset = Integer.parseInt(foldMatch.group(4));\n        FoldRegion region = null;\n        for (FoldRegion candidate : foldingModel.getAllFoldRegions()) {\n          if (candidate.getStartOffset() == foldStartOffset && candidate.getEndOffset() == foldEndOffset) {\n            region = candidate;\n            break;\n          }\n        }\n        foldRegions.add(new Trinity<Integer, Integer, FoldRegion>(widthInColumns, startX, region));\n      }\n      \n      List<Pair<Integer, Integer>> tabData = new ArrayList<Pair<Integer, Integer>>();\n      Scanner tabScanner = new Scanner(generalMatch.group(5));\n      while (tabScanner.findInLine(tabPattern) != null) {\n        final MatchResult tabMatch = tabScanner.match();\n        int offset = Integer.parseInt(tabMatch.group(1));\n        int widthInColumns = Integer.parseInt(tabMatch.group(2));\n        tabData.add(new Pair<Integer, Integer>(offset, widthInColumns));\n      }\n      \n      mapper.rawAdd(visualLine, startOffset, endOffset, foldRegions, tabData);\n    }\n  }","id":100425,"modified_method":"/**\n   * Setups {@link Editor#getSoftWrapModel() soft wraps model} of the {@link #getEditor() current editor} according to the given text\n   * that is expected to contain information obtained from the {@link CachingSoftWrapDataMapper#toString()}.\n   *\n   * @param data  string representation of the target soft wraps cache\n   */\n  @SuppressWarnings(\"UnusedDeclaration\")\n  protected static void setupSoftWraps(@NotNull String data) {\n    Scanner scanner = new Scanner(data);\n    Pattern generalPattern =\n      Pattern.compile(\"visual line: (\\\\d+), offsets: (\\\\d+)-(\\\\d+), logical lines: (\\\\d+)-(\\\\d+), logical columns: (\\\\d+)-(\\\\d+), \"\n                      + \"end visual column: (\\\\d+), fold regions: \\\\[([^\\\\]]*)\\\\], tab data: \\\\[([^\\\\]]*)\\\\]\");\n    Pattern foldPattern = Pattern.compile(\"width in columns: (-?\\\\d+), start X: (-?\\\\d+), fold region: FoldRegion [-+]\\\\((\\\\d+):(\\\\d+)\");\n    Pattern tabPattern = Pattern.compile(\"\\\\[(\\\\d+), width: (\\\\d+)\");\n    final SoftWrapModelImpl softWrapModel = (SoftWrapModelImpl)myEditor.getSoftWrapModel();\n    final CachingSoftWrapDataMapper mapper = softWrapModel.getDataMapper();\n    mapper.release();\n    final FoldingModelEx foldingModel = (FoldingModelEx)myEditor.getFoldingModel();\n    while (scanner.findInLine(generalPattern) != null) {\n      final MatchResult generalMatch = scanner.match();\n      int visualLine = Integer.parseInt(generalMatch.group(1));\n      int startOffset = Integer.parseInt(generalMatch.group(2));\n      int endOffset = Integer.parseInt(generalMatch.group(3));\n      int startLogicalLine = Integer.parseInt(generalMatch.group(4));\n      int endLogicalLine = Integer.parseInt(generalMatch.group(5));\n      int startLogicalColumn = Integer.parseInt(generalMatch.group(6));\n      int endLogicalColumn = Integer.parseInt(generalMatch.group(7));\n      int endVisualColumn = Integer.parseInt(generalMatch.group(8));\n      \n      List<Trinity<Integer, Integer, FoldRegion>> foldRegions = new ArrayList<Trinity<Integer, Integer, FoldRegion>>();\n      Scanner foldScanner = new Scanner(generalMatch.group(9));\n      while (foldScanner.findInLine(foldPattern) != null) {\n        final MatchResult foldMatch = foldScanner.match();\n        int widthInColumns = Integer.parseInt(foldMatch.group(1));\n        int startX = Integer.parseInt(foldMatch.group(2));\n        int foldStartOffset = Integer.parseInt(foldMatch.group(3));\n        int foldEndOffset = Integer.parseInt(foldMatch.group(4));\n        FoldRegion region = null;\n        for (FoldRegion candidate : foldingModel.getAllFoldRegions()) {\n          if (candidate.getStartOffset() == foldStartOffset && candidate.getEndOffset() == foldEndOffset) {\n            region = candidate;\n            break;\n          }\n        }\n        foldRegions.add(new Trinity<Integer, Integer, FoldRegion>(widthInColumns, startX, region));\n      }\n      \n      List<Pair<Integer, Integer>> tabData = new ArrayList<Pair<Integer, Integer>>();\n      Scanner tabScanner = new Scanner(generalMatch.group(10));\n      while (tabScanner.findInLine(tabPattern) != null) {\n        final MatchResult tabMatch = tabScanner.match();\n        int offset = Integer.parseInt(tabMatch.group(1));\n        int widthInColumns = Integer.parseInt(tabMatch.group(2));\n        tabData.add(new Pair<Integer, Integer>(offset, widthInColumns));\n      }\n      \n      mapper.rawAdd(visualLine, startOffset, endOffset, startLogicalLine, startLogicalColumn, endLogicalLine, endLogicalColumn, endVisualColumn, foldRegions, tabData);\n    }\n  }","commit_id":"b43bae19e12fca2ba919bef8dee5ad3e12c65263","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Allows to register new entry with the given data at the soft wraps cache.\n   * <p/>\n   * One entry is expected to contain information about single visual lines (what logical lines are mapped to it, what fold\n   * regions and tabulations are located there etc).\n   * \n   * @param visualLine   target entry's visual line\n   * @param startOffset  target entry's start offset\n   * @param endOffset    target entry's end offset\n   * @param foldRegions  target entry's fold regions\n   * @param tabData      target entry's tab data\n   */\n  public void rawAdd(int visualLine,\n                     int startOffset,\n                     int endOffset,\n                     @NotNull List<Trinity<Integer, Integer, FoldRegion>> foldRegions,\n                     @NotNull List<Pair<Integer, Integer>> tabData)\n  {\n    final CacheEntry entry = new CacheEntry(visualLine, myEditor, myRepresentationHelper);\n    entry.startOffset = startOffset;\n    entry.endOffset = endOffset;\n    entry.startLogicalLine = myEditor.getDocument().getLineNumber(startOffset);\n    entry.endLogicalLine = myEditor.getDocument().getLineNumber(endOffset);\n    for (Trinity<Integer, Integer, FoldRegion> region : foldRegions) {\n      final FoldingData foldData = new FoldingData(region.third, region.second, myRepresentationHelper, myEditor);\n      foldData.widthInColumns = region.first;\n      entry.store(foldData, region.third.getStartOffset());\n    }\n    for (Pair<Integer, Integer> pair : tabData) {\n      entry.storeTabData(new TabData(pair.second, pair.first));\n    }\n    myCache.add(entry);\n  }","id":100426,"modified_method":"/**\n   * Allows to register new entry with the given data at the soft wraps cache.\n   * <p/>\n   * One entry is expected to contain information about single visual lines (what logical lines are mapped to it, what fold\n   * regions and tabulations are located there etc).\n   * \n   * @param visualLine   target entry's visual line\n   * @param startOffset  target entry's start offset\n   * @param endOffset    target entry's end offset\n   * @param foldRegions  target entry's fold regions\n   * @param tabData      target entry's tab data\n   */\n  public void rawAdd(int visualLine,\n                     int startOffset,\n                     int endOffset,\n                     int startLogicalLine,\n                     int startLogicalColumn,\n                     int endLogicalLine,\n                     int endLogicalColumn,\n                     int endVisualColumn,\n                     @NotNull List<Trinity<Integer, Integer, FoldRegion>> foldRegions,\n                     @NotNull List<Pair<Integer, Integer>> tabData)\n  {\n    final CacheEntry entry = new CacheEntry(visualLine, myEditor, myRepresentationHelper);\n    entry.startOffset = startOffset;\n    entry.endOffset = endOffset;\n    entry.startLogicalLine = startLogicalLine;\n    assert startLogicalLine == myEditor.getDocument().getLineNumber(startOffset);\n    entry.startLogicalColumn = startLogicalColumn;\n    entry.endLogicalLine = endLogicalLine;\n    assert endLogicalLine == myEditor.getDocument().getLineNumber(endOffset);\n    entry.endLogicalColumn = endLogicalColumn;\n    entry.endVisualColumn = endVisualColumn;\n    for (Trinity<Integer, Integer, FoldRegion> region : foldRegions) {\n      final FoldingData foldData = new FoldingData(region.third, region.second, myRepresentationHelper, myEditor);\n      foldData.widthInColumns = region.first;\n      entry.store(foldData, region.third.getStartOffset());\n    }\n    for (Pair<Integer, Integer> pair : tabData) {\n      entry.storeTabData(new TabData(pair.second, pair.first));\n    }\n    myCache.add(entry);\n  }","commit_id":"b43bae19e12fca2ba919bef8dee5ad3e12c65263","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void onRecalculationEnd(@NotNull IncrementalCacheUpdateEvent event, boolean normal) {\n    if (DEBUG_SOFT_WRAP_PROCESSING) {\n      log(String.format(\n        \"xxxxxxxxxxxx CachingSoftWrapDataMapper.onRecalculationEnd(%s, %b). Current cache size: %d\", event, normal, myCache.size()\n      ));\n      if (myCache.size() < 10) {\n        log(\"\\tCurrent cache:\");\n        for (CacheEntry cacheEntry : myCache) {\n          log(\"\\t\\t\" + cacheEntry);\n        }\n      }\n    }\n\n    int exactOffsetsDiff = event.getExactOffsetsDiff();\n    if (normal) {\n      myAfterChangeState.updateByDocumentOffsets(event.getNewStartOffset(), event.getNewEndOffset(), event.getNewLogicalLinesDiff());\n      myCache.addAll(myNotAffectedByUpdateTailCacheEntries);\n    }\n    else {\n      myAfterChangeState.logicalLines = event.getNewLogicalLinesDiff();\n      myAfterChangeState.visualLines = event.getNewLogicalLinesDiff();\n      myAfterChangeState.softWrapLines = 0;\n      myAfterChangeState.foldedLines = 0;\n      myCache.addAll(myNotAffectedByUpdateTailCacheEntries);\n    }\n    applyStateChange(exactOffsetsDiff);\n    \n    myAffectedByUpdateCacheEntries.clear();\n    myNotAffectedByUpdateTailCacheEntries.clear();\n\n    if (DEBUG_SOFT_WRAP_PROCESSING) {\n      log(\"After Applying state change\");\n      dumpCache();\n    }\n\n    myBeforeChangeState.cacheShouldBeUpdated = false;\n  }","id":100427,"modified_method":"@Override\n  public void onRecalculationEnd(@NotNull IncrementalCacheUpdateEvent event, boolean normal) {\n    if (DEBUG_SOFT_WRAP_PROCESSING) {\n      log(String.format(\n        \"xxxxxxxxxxxx CachingSoftWrapDataMapper.onRecalculationEnd(%s, %b). Current cache size: %d\", event, normal, myCache.size()\n      ));\n      if (myCache.size() < 10) {\n        log(\"\\tCurrent cache:\");\n        for (CacheEntry cacheEntry : myCache) {\n          log(\"\\t\\t\" + cacheEntry);\n        }\n      }\n    }\n\n    int exactOffsetsDiff = event.getExactOffsetsDiff();\n    if (normal) {\n      myAfterChangeState.updateByDocumentOffsets(event.getNewStartOffset(), event.getNewEndOffset(), event.getNewLogicalLinesDiff());\n      myCache.addAll(myNotAffectedByUpdateTailCacheEntries);\n    }\n    else {\n      myAfterChangeState.logicalLines = event.getNewLogicalLinesDiff();\n      myAfterChangeState.visualLines = event.getNewLogicalLinesDiff();\n      myAfterChangeState.softWrapLines = 0;\n      myAfterChangeState.foldedLines = 0;\n      myCache.addAll(myNotAffectedByUpdateTailCacheEntries);\n    }\n    applyStateChange(exactOffsetsDiff);\n\n    // TODO den remove before v.12 release\n    if (myCache.size() > 1) {\n      CacheEntry beforeLast = myCache.get(myCache.size() - 2);\n      CacheEntry last = myCache.get(myCache.size() - 1);\n      if (beforeLast.visualLine == last.visualLine\n          || (beforeLast.visualLine + 1 == last.visualLine && last.startOffset - beforeLast.endOffset > 1)\n          || last.startOffset > myEditor.getDocument().getTextLength())\n      {\n        CharSequence editorState = \"\";\n        if (myEditor instanceof EditorImpl) {\n          editorState = ((EditorImpl)myEditor).dumpState();\n        }\n        LOG.error(\n          \"Detected invalid soft wraps cache update\",\n          String.format(\n            \"Event: %s, normal: %b.%n%nTail cache entries: %s%n%nAffected by change cache entries: %s%n%nBefore change state: %s%n%n\"\n            + \"After change state: %s%n%nEditor state: %s\",\n            event, normal, myNotAffectedByUpdateTailCacheEntries, myAffectedByUpdateCacheEntries,\n            myBeforeChangeState, myAfterChangeState, editorState\n          )\n        );\n      }\n    }\n    \n    myAffectedByUpdateCacheEntries.clear();\n    myNotAffectedByUpdateTailCacheEntries.clear();\n\n    if (DEBUG_SOFT_WRAP_PROCESSING) {\n      log(\"After Applying state change\");\n      dumpCache();\n    }\n\n    myBeforeChangeState.cacheShouldBeUpdated = false;\n  }","commit_id":"b43bae19e12fca2ba919bef8dee5ad3e12c65263","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos,\n                                             boolean locateBeforeSoftWrap,\n                                             @Nullable StringBuilder debugBuffer,\n                                             boolean delayListenersNotification)\n  {\n    assertIsDispatchThread();\n    if (debugBuffer != null) {\n      debugBuffer.append(String.format(\n        \"Start moveToLogicalPosition(). Locate before soft wrap: %b, position: %s%n\", locateBeforeSoftWrap, pos\n      ));\n    }\n    myDesiredX = -1;\n    validateCallContext();\n    int column = pos.column;\n    int line = pos.line;\n    int softWrapLinesBefore = pos.softWrapLinesBeforeCurrentLogicalLine;\n    int softWrapLinesCurrent = pos.softWrapLinesOnCurrentLogicalLine;\n    int softWrapColumns = pos.softWrapColumnDiff;\n\n    Document doc = myEditor.getDocument();\n\n    if (column < 0) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Resetting target logical column to zero as it is negative (\" + column + \")\\n\");\n      }\n      column = 0;\n      softWrapColumns = 0;\n    }\n    if (line < 0) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Resetting target logical line to zero as it is negative (\" + line + \")\\n\");\n      }\n      line = 0;\n      softWrapLinesBefore = 0;\n      softWrapLinesCurrent = 0;\n    }\n\n    int lineCount = doc.getLineCount();\n    if (lineCount == 0) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Resetting target logical line to zero as the document is empty\\n\");\n      }\n      line = 0;\n    }\n    else if (line > lineCount - 1) {\n      if (debugBuffer != null) {\n        debugBuffer.append(String.format(\n          \"Resetting target logical line (%d) to %d as it is greater than total document lines number%n\", line, lineCount - 1\n        ));\n      }\n      line = lineCount - 1;\n      softWrapLinesBefore = 0;\n      softWrapLinesCurrent = 0;\n    }\n\n    EditorSettings editorSettings = myEditor.getSettings();\n\n    if (!editorSettings.isVirtualSpace() && line < lineCount && !myEditor.getSelectionModel().hasBlockSelection()) {\n      int lineEndOffset = doc.getLineEndOffset(line);\n      final LogicalPosition endLinePosition = myEditor.offsetToLogicalPosition(lineEndOffset);\n      int lineEndColumnNumber = endLinePosition.column;\n      if (column > lineEndColumnNumber) {\n        int oldColumn = column;\n        column = lineEndColumnNumber;\n        if (softWrapColumns != 0) {\n          softWrapColumns -= column - lineEndColumnNumber;\n        }\n        if (debugBuffer != null) {\n          debugBuffer.append(String.format(\n            \"Resetting target logical column (%d) to %d because caret is not allowed to be located after line end (offset: %d, \"\n            + \"logical position: %s). Current soft wrap columns value: %d%n\",\n            oldColumn, lineEndColumnNumber, lineEndOffset, endLinePosition, softWrapColumns\n          ));\n        }\n      }\n    }\n\n    ((FoldingModelImpl)myEditor.getFoldingModel()).flushCaretPosition();\n\n    VerticalInfo oldInfo = myCaretInfo;\n    LogicalPosition oldCaretPosition = myLogicalCaret;\n\n    LogicalPosition logicalPositionToUse;\n    if (pos.visualPositionAware) {\n      logicalPositionToUse = new LogicalPosition(\n        line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff\n      );\n    }\n    else {\n      logicalPositionToUse = new LogicalPosition(line, column);\n    }\n    setCurrentLogicalCaret(logicalPositionToUse);\n    final int offset = myEditor.logicalPositionToOffset(myLogicalCaret);\n    if (debugBuffer != null) {\n      debugBuffer.append(String.format(\"Resulting logical position to use: %s. It's mapped to offset %d%n\", myLogicalCaret, offset));\n    }\n\n    FoldRegion collapsedAt = myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset);\n\n    if (collapsedAt != null && offset > collapsedAt.getStartOffset()) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Scheduling expansion of fold region \").append(collapsedAt).append(\"\\n\");\n      }\n      Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n          FoldRegion[] allCollapsedAt = ((FoldingModelImpl)myEditor.getFoldingModel()).fetchCollapsedAt(offset);\n          for (FoldRegion foldRange : allCollapsedAt) {\n            foldRange.setExpanded(true);\n          }\n        }\n      };\n\n      myEditor.getFoldingModel().runBatchFoldingOperation(runnable, false);\n    }\n\n    myEditor.setLastColumnNumber(myLogicalCaret.column);\n    myVisibleCaret = myEditor.logicalToVisualPosition(myLogicalCaret);\n\n    myOffset = myEditor.logicalPositionToOffset(myLogicalCaret);\n    if (debugBuffer != null) {\n      debugBuffer.append(String.format(\"Storing offset %d (mapped from logical position %s)%n\", myOffset, myLogicalCaret));\n    }\n    LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength());\n\n    myVisualLineStart = myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line, 0)));\n    myVisualLineEnd = myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line + 1, 0)));\n\n    myEditor.updateCaretCursor();\n    requestRepaint(oldInfo);\n\n    if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(myEditor)) {\n      int lineToUse = myVisibleCaret.line - 1;\n      if (lineToUse >= 0) {\n        final VisualPosition visualPosition = new VisualPosition(lineToUse, EditorUtil.getLastVisualLineColumnNumber(myEditor, lineToUse));\n        if (debugBuffer != null) {\n          debugBuffer.append(String.format(\n            \"Adjusting caret position by moving it before soft wrap. Moving to visual position %s%n\", visualPosition\n          ));\n        }\n        final LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(visualPosition);\n        final int tmpOffset = myEditor.logicalPositionToOffset(logicalPosition);\n        if (tmpOffset == myOffset) {\n          boolean restore = myReportCaretMoves;\n          myReportCaretMoves = false;\n          try {\n            moveToVisualPosition(visualPosition);\n            return null;\n          }\n          finally {\n            myReportCaretMoves = restore;\n          }\n        }\n        else {\n          LogMessageEx.error(LOG, \"Invalid editor dimension mapping\", String.format(\n            \"Expected to map visual position '%s' to offset %d but got the following: -> logical position '%s'; -> offset %d. \"\n            + \"State: %s\", visualPosition, myOffset, logicalPosition, tmpOffset, myEditor.dumpState()\n          ));\n        }\n        \n      }\n    }\n\n    if (!oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) {\n      CaretEvent event = new CaretEvent(myEditor, oldCaretPosition, myLogicalCaret);\n      if (delayListenersNotification) {\n        return event;\n      }\n      else {\n        for (CaretListener listener : myCaretListeners) {\n          listener.caretPositionChanged(event);\n        }\n      }\n    }\n    return null;\n  }","id":100428,"modified_method":"private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos,\n                                             boolean locateBeforeSoftWrap,\n                                             @Nullable StringBuilder debugBuffer,\n                                             boolean delayListenersNotification)\n  {\n    assertIsDispatchThread();\n    if (debugBuffer != null) {\n      debugBuffer.append(String.format(\n        \"Start moveToLogicalPosition(). Locate before soft wrap: %b, position: %s%n\", locateBeforeSoftWrap, pos\n      ));\n    }\n    myDesiredX = -1;\n    validateCallContext();\n    int column = pos.column;\n    int line = pos.line;\n    int softWrapLinesBefore = pos.softWrapLinesBeforeCurrentLogicalLine;\n    int softWrapLinesCurrent = pos.softWrapLinesOnCurrentLogicalLine;\n    int softWrapColumns = pos.softWrapColumnDiff;\n\n    Document doc = myEditor.getDocument();\n\n    if (column < 0) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Resetting target logical column to zero as it is negative (\").append(column).append(\")\\n\");\n      }\n      column = 0;\n      softWrapColumns = 0;\n    }\n    if (line < 0) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Resetting target logical line to zero as it is negative (\").append(line).append(\")\\n\");\n      }\n      line = 0;\n      softWrapLinesBefore = 0;\n      softWrapLinesCurrent = 0;\n    }\n\n    int lineCount = doc.getLineCount();\n    if (lineCount == 0) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Resetting target logical line to zero as the document is empty\\n\");\n      }\n      line = 0;\n    }\n    else if (line > lineCount - 1) {\n      if (debugBuffer != null) {\n        debugBuffer.append(String.format(\n          \"Resetting target logical line (%d) to %d as it is greater than total document lines number%n\", line, lineCount - 1\n        ));\n      }\n      line = lineCount - 1;\n      softWrapLinesBefore = 0;\n      softWrapLinesCurrent = 0;\n    }\n\n    EditorSettings editorSettings = myEditor.getSettings();\n\n    if (!editorSettings.isVirtualSpace() && line < lineCount && !myEditor.getSelectionModel().hasBlockSelection()) {\n      int lineEndOffset = doc.getLineEndOffset(line);\n      final LogicalPosition endLinePosition = myEditor.offsetToLogicalPosition(lineEndOffset);\n      int lineEndColumnNumber = endLinePosition.column;\n      if (column > lineEndColumnNumber) {\n        int oldColumn = column;\n        column = lineEndColumnNumber;\n        if (softWrapColumns != 0) {\n          softWrapColumns -= column - lineEndColumnNumber;\n        }\n        if (debugBuffer != null) {\n          debugBuffer.append(String.format(\n            \"Resetting target logical column (%d) to %d because caret is not allowed to be located after line end (offset: %d, \"\n            + \"logical position: %s). Current soft wrap columns value: %d%n\",\n            oldColumn, lineEndColumnNumber, lineEndOffset, endLinePosition, softWrapColumns\n          ));\n        }\n      }\n    }\n\n    ((FoldingModelImpl)myEditor.getFoldingModel()).flushCaretPosition();\n\n    VerticalInfo oldInfo = myCaretInfo;\n    LogicalPosition oldCaretPosition = myLogicalCaret;\n\n    LogicalPosition logicalPositionToUse;\n    if (pos.visualPositionAware) {\n      logicalPositionToUse = new LogicalPosition(\n        line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff\n      );\n    }\n    else {\n      logicalPositionToUse = new LogicalPosition(line, column);\n    }\n    setCurrentLogicalCaret(logicalPositionToUse);\n    final int offset = myEditor.logicalPositionToOffset(myLogicalCaret);\n    if (debugBuffer != null) {\n      debugBuffer.append(String.format(\"Resulting logical position to use: %s. It's mapped to offset %d%n\", myLogicalCaret, offset));\n    }\n\n    FoldRegion collapsedAt = myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset);\n\n    if (collapsedAt != null && offset > collapsedAt.getStartOffset()) {\n      if (debugBuffer != null) {\n        debugBuffer.append(\"Scheduling expansion of fold region \").append(collapsedAt).append(\"\\n\");\n      }\n      Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n          FoldRegion[] allCollapsedAt = ((FoldingModelImpl)myEditor.getFoldingModel()).fetchCollapsedAt(offset);\n          for (FoldRegion foldRange : allCollapsedAt) {\n            foldRange.setExpanded(true);\n          }\n        }\n      };\n\n      myEditor.getFoldingModel().runBatchFoldingOperation(runnable, false);\n    }\n\n    myEditor.setLastColumnNumber(myLogicalCaret.column);\n    myVisibleCaret = myEditor.logicalToVisualPosition(myLogicalCaret);\n\n    myOffset = myEditor.logicalPositionToOffset(myLogicalCaret);\n    if (debugBuffer != null) {\n      debugBuffer.append(String.format(\"Storing offset %d (mapped from logical position %s)%n\", myOffset, myLogicalCaret));\n    }\n    LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength());\n\n    myVisualLineStart = myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line, 0)));\n    myVisualLineEnd = myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line + 1, 0)));\n\n    myEditor.updateCaretCursor();\n    requestRepaint(oldInfo);\n\n    if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(myEditor)) {\n      int lineToUse = myVisibleCaret.line - 1;\n      if (lineToUse >= 0) {\n        final VisualPosition visualPosition = new VisualPosition(lineToUse, EditorUtil.getLastVisualLineColumnNumber(myEditor, lineToUse));\n        if (debugBuffer != null) {\n          debugBuffer.append(String.format(\n            \"Adjusting caret position by moving it before soft wrap. Moving to visual position %s%n\", visualPosition\n          ));\n        }\n        final LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(visualPosition);\n        final int tmpOffset = myEditor.logicalPositionToOffset(logicalPosition);\n        if (tmpOffset == myOffset) {\n          boolean restore = myReportCaretMoves;\n          myReportCaretMoves = false;\n          try {\n            moveToVisualPosition(visualPosition);\n            return null;\n          }\n          finally {\n            myReportCaretMoves = restore;\n          }\n        }\n        else {\n          LogMessageEx.error(LOG, \"Invalid editor dimension mapping\", String.format(\n            \"Expected to map visual position '%s' to offset %d but got the following: -> logical position '%s'; -> offset %d. \"\n            + \"State: %s\", visualPosition, myOffset, logicalPosition, tmpOffset, myEditor.dumpState()\n          ));\n        }\n        \n      }\n    }\n\n    if (!oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) {\n      CaretEvent event = new CaretEvent(myEditor, oldCaretPosition, myLogicalCaret);\n      if (delayListenersNotification) {\n        return event;\n      }\n      else {\n        for (CaretListener listener : myCaretListeners) {\n          listener.caretPositionChanged(event);\n        }\n      }\n    }\n    return null;\n  }","commit_id":"b43bae19e12fca2ba919bef8dee5ad3e12c65263","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected CustomSyslogParser(final String text) throws SyslogParserException {\n        super(text);\n        if (m_forwardingPattern == null) {\n            final SyslogdConfig config = SyslogdConfigFactory.getInstance();\n            final String forwardingRegexp = config.getForwardingRegexp();\n            if (forwardingRegexp == null || forwardingRegexp.length() == 0) {\n                throw new SyslogParserException(\"no forwarding regular expression defined\");\n            }\n            m_forwardingPattern = Pattern.compile(forwardingRegexp, Pattern.MULTILINE);\n            m_matchingGroupHost = config.getMatchingGroupHost();\n            m_matchingGroupMessage = config.getMatchingGroupMessage();\n        }\n    }","id":100429,"modified_method":"protected CustomSyslogParser(final String text) throws SyslogParserException {\n        super(text);\n\n        final SyslogdConfig config = SyslogdConfigFactory.getInstance();\n        final String forwardingRegexp = config.getForwardingRegexp();\n        if (forwardingRegexp == null || forwardingRegexp.length() == 0) {\n            throw new SyslogParserException(\"no forwarding regular expression defined\");\n        }\n        m_forwardingPattern = Pattern.compile(forwardingRegexp, Pattern.MULTILINE);\n        m_matchingGroupHost = config.getMatchingGroupHost();\n        m_matchingGroupMessage = config.getMatchingGroupMessage();\n    }","commit_id":"d60d13147a2ab4367b541c18c48f766d1104ed0c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyslogMessage parse() throws SyslogParserException {\n        if (!this.find()) {\n            if (traceEnabled()) {\n                LogUtils.tracef(this, \"'%s' did not match '%s'\", m_forwardingPattern, getText());\n            }\n            return null;\n        }\n\n        final Matcher forwardingMatcher = getMatcher();\n\n        final SyslogMessage message = new SyslogMessage();\n\n        final Matcher syslogMatcher = m_syslogPattern.matcher(getText());\n        if (syslogMatcher.matches()) {\n            try {\n                int priorityField = Integer.parseInt(syslogMatcher.group(1));\n                message.setFacility(getFacility(priorityField));\n                message.setSeverity(getSeverity(priorityField));\n            } catch (final NumberFormatException e) {\n                LogUtils.debugf(this, e, \"Unable to parse priority field '%s' from text: %s\", syslogMatcher.group(1), getText());\n            }\n\n            final String version = syslogMatcher.group(2);\n            if (version != null && version.length() > 0) {\n                try {\n                    message.setVersion(Integer.parseInt(version));\n                } catch (final NumberFormatException e) {\n                    LogUtils.debugf(this, e, \"Unable to parse version field '%s' from text: %s\", version, getText());\n                }\n            }\n\n            message.setMessageID(syslogMatcher.group(3));\n            \n            try {\n                final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n                df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n                message.setDate(df.parse(syslogMatcher.group(4)));\n            } catch (final Exception e) {\n                LogUtils.debugf(this, e, \"Unable to parse date '%s' from text: %s\", syslogMatcher.group(4), getText());\n            }\n\n            message.setHostName(syslogMatcher.group(5));\n\n            message.setProcessName(syslogMatcher.group(6));\n            if (syslogMatcher.group(7) != null) {\n                try {\n                    final Integer pid = Integer.parseInt(syslogMatcher.group(7));\n                    message.setProcessId(pid);\n                } catch (final NumberFormatException nfe) {\n                    LogUtils.debugf(this, nfe, \"Unable to parse '%s' as a process ID.\", syslogMatcher.group(7));\n                }\n            }\n            message.setMessage(syslogMatcher.group(8));\n        }\n\n        if (message.getDate() == null) {\n            message.setDate(new Date());\n        }\n        if (message.getHostName() == null) {\n            message.setHostName(forwardingMatcher.group(m_matchingGroupHost));\n        }\n        if (message.getMessage() == null) {\n            message.setMessage(forwardingMatcher.group(m_matchingGroupMessage));\n        }\n\n        return message;\n    }","id":100430,"modified_method":"public SyslogMessage parse() throws SyslogParserException {\n        final SyslogMessage syslogMessage = new SyslogMessage();\n\n        String message = getText();\n\n        int lbIdx = message.indexOf('<');\n        int rbIdx = message.indexOf('>');\n\n        if (lbIdx < 0 || rbIdx < 0 || lbIdx >= (rbIdx - 1)) {\n            LogUtils.warnf(this, \"Syslogd received an unparsable message!\");\n        }\n\n        int priCode = 0;\n        String priStr = message.substring(lbIdx + 1, rbIdx);\n\n        try {\n            priCode = Integer.parseInt(priStr);\n        } catch (final NumberFormatException ex) {\n            LogUtils.debugf(this, \"ERROR Bad priority code '%s'\", priStr);\n\n        }\n\n        LogUtils.tracef(this, \"priority code = %d\", priCode);\n\n        syslogMessage.setFacility(SyslogDefs.extractFacility(priCode));\n        syslogMessage.setSeverity(SyslogDefs.extractPriority(priCode));\n\n        message = message.substring(rbIdx + 1, message.length());\n\n        final Matcher idMatcher = m_messageIdPattern.matcher(message);\n        if (idMatcher.find()) {\n            final String messageId = idMatcher.group(2);\n            LogUtils.tracef(this, \"found message ID '%s'\", messageId);\n            syslogMessage.setMessageID(messageId);\n            message = message.substring(idMatcher.group(1).length() - 1);\n        }\n\n        // Check to see if message looks non-standard.\n        // In this case, it means that there is not a standard\n        // date in the front of the message text.\n        boolean stdMsg = true;\n\n        LogUtils.tracef(this, \"message = %s\", message);\n        if (message.length() < 16) {\n            stdMsg = false;\n        } else if (message.charAt(3) != ' ' || message.charAt(6) != ' '\n                || message.charAt(9) != ':' || message.charAt(12) != ':'\n                || message.charAt(15) != ' ') {\n            stdMsg = false;\n        }\n        LogUtils.tracef(this, \"stdMsg = %s\", Boolean.toString(stdMsg));\n        \n        if (!this.find()) {\n            if (traceEnabled()) {\n                LogUtils.tracef(this, \"Lenient Syslog pattern '%s' did not match '%s'\", getPattern(), getText());\n            }\n            return null;\n        }\n\n        String timestamp;\n\n        if (!stdMsg) {\n            final Matcher stampMatcher = m_datePattern.matcher(message);\n            if (stampMatcher.find()) {\n                timestamp = stampMatcher.group(2);\n                LogUtils.tracef(this, \"found timestamp '%s'\", timestamp);\n//                message = message.substring(stampMatcher.group(1).length());\n            } else {\n                try {\n                    timestamp = SyslogTimeStamp.getInstance().format(new Date());\n                } catch (IllegalArgumentException ex) {\n                    LogUtils.debugf(this, \"ERROR INTERNAL DATE ERROR!\");\n                    timestamp = \"\";\n                }\n            }\n        } else {\n            timestamp = message.substring(0, 15);\n            message = message.substring(16);\n        }\n\n        LogUtils.tracef(this, \"Timestamp = %s\", timestamp);\n        syslogMessage.setDate(parseDate(timestamp));\n        \n        // These 2 debugs will aid in analyzing the regexes as syslog seems\n        // to differ a lot depending on implementation or message structure.\n\n        if (LogUtils.isTraceEnabled(this)) {\n            LogUtils.tracef(this, \"message = %s\", message);\n            LogUtils.tracef(this, \"pattern = %s\", m_forwardingPattern);\n            LogUtils.tracef(this, \"host group = %d\", m_matchingGroupHost);\n            LogUtils.tracef(this, \"message group = %d\", m_matchingGroupMessage);\n        }\n\n        // We will also here find out if, the host needs to\n        // be replaced, the message matched to a UEI, and\n        // last if we need to actually hide the message.\n        // this being potentially helpful in avoiding showing\n        // operator a password or other data that should be\n        // confidential.\n\n        final Pattern pattern = m_forwardingPattern;\n        final Matcher m = pattern.matcher(message);\n\n        /*\n        * We matched on a regexp for host/message pair.\n        * This can be a forwarded message as in BSD Style\n        * or syslog-ng.\n        * We assume that the host is given to us\n        * as an IP/Hostname and that the resolver\n        * on the ONMS host actually can resolve the\n        * node to match against nodeId.\n         */\n\n        if (m.matches()) {\n\n            final String matchedMessage = m.group(m_matchingGroupMessage);\n\n            if (LogUtils.isTraceEnabled(this)) {\n                LogUtils.tracef(this, \"Syslog message '%s' matched regexp '%s'\", message, m_forwardingPattern);\n                LogUtils.tracef(this, \"Found host '%s'\", m.group(m_matchingGroupHost));\n                LogUtils.tracef(this, \"Found message '%s'\", matchedMessage);\n            }\n\n            syslogMessage.setHostName(m.group(m_matchingGroupHost));\n            \n            message = matchedMessage;\n        } else {\n            LogUtils.debugf(this, \"Regexp not matched: %s\", message);            \n            return null;\n        }\n\n        lbIdx = message.indexOf('[');\n        rbIdx = message.indexOf(']');\n        final int colonIdx = message.indexOf(':');\n        final int spaceIdx = message.indexOf(' ');\n\n        int processId = 0;\n        String processName = \"\";\n        String processIdStr = \"\";\n\n        if (lbIdx < (rbIdx - 1) && colonIdx == (rbIdx + 1) && spaceIdx == (colonIdx + 1)) {\n            processName = message.substring(0, lbIdx);\n            processIdStr = message.substring(lbIdx + 1, rbIdx);\n            message = message.substring(colonIdx + 2);\n\n            try {\n                processId = Integer.parseInt(processIdStr);\n            } catch (NumberFormatException ex) {\n                LogUtils.debugf(this, \"Bad process id '%s'\", processIdStr);\n                processId = 0;\n            }\n        } else if (lbIdx < 0 && rbIdx < 0 && colonIdx > 0 && spaceIdx == (colonIdx + 1)) {\n            processName = message.substring(0, colonIdx);\n            message = message.substring(colonIdx + 2);\n        }\n\n        syslogMessage.setProcessId(processId);\n        syslogMessage.setProcessName(processName);\n        syslogMessage.setMessage(message);\n\n        return syslogMessage;\n    }","commit_id":"d60d13147a2ab4367b541c18c48f766d1104ed0c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private Date parseDate(final String dateString) {\n        if (dateString.endsWith(\"Z\")) {\n            try {\n                final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n                df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n                return df.parse(dateString);\n            } catch (final Exception e) {\n                // try again with optional decimals\n                try {\n                    final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\");\n                    df.setLenient(true);\n                    df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n                    return df.parse(dateString);\n                } catch (final Exception pe) {\n                    LogUtils.debugf(this, pe, \"Unable to parse date string '%s'.\", dateString);\n                }\n            }\n        } else {\n            final String first = dateString.substring(0, dateString.lastIndexOf('-'));\n            final String last = dateString.substring(dateString.lastIndexOf('-'));\n            final String newString = first + last.replace(\":\", \"\");\n            try {\n                final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n                return df.parse(newString);\n            } catch (final Exception e) {\n                // try again with optional decimals\n                try {\n                    final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ\");\n                    df.setLenient(true);\n                    return df.parse(newString);\n                } catch (final Exception pe) {\n                    LogUtils.debugf(this, pe, \"Unable to parse date string '%s'.\", newString);\n                }\n            }\n        }\n        return null;\n    }","id":100431,"modified_method":"@Override\n    protected Date parseDate(final String dateString) {\n        if (dateString.endsWith(\"Z\")) {\n            try {\n                final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n                df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n                return df.parse(dateString);\n            } catch (final Exception e) {\n                // try again with optional decimals\n                try {\n                    final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\");\n                    df.setLenient(true);\n                    df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n                    return df.parse(dateString);\n                } catch (final Exception pe) {\n                    LogUtils.debugf(this, pe, \"Unable to parse date string '%s'.\", dateString);\n                }\n            }\n        } else {\n            final String first = dateString.substring(0, dateString.lastIndexOf('-'));\n            final String last = dateString.substring(dateString.lastIndexOf('-'));\n            final String newString = first + last.replace(\":\", \"\");\n            try {\n                final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n                return df.parse(newString);\n            } catch (final Exception e) {\n                // try again with optional decimals\n                try {\n                    final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ\");\n                    df.setLenient(true);\n                    return df.parse(newString);\n                } catch (final Exception pe) {\n                    LogUtils.debugf(this, pe, \"Unable to parse date string '%s'.\", newString);\n                }\n            }\n        }\n        return null;\n    }","commit_id":"d60d13147a2ab4367b541c18c48f766d1104ed0c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testCustomParserWithProcess() throws Exception {\n        SyslogParser parser = CustomSyslogParser.getParser(\"<6>test: 2007-01-01 127.0.0.1 OpenNMS[1234]: A SyslogNG style message\");\n        assertTrue(parser.find());\n        SyslogMessage message = parser.parse();\n        final Date date = new Date(1167609600000L);\n\n        assertEquals(0, message.getFacility());\n        assertEquals(6, message.getSeverity());\n        assertEquals(\"test\", message.getMessageID());\n        assertEquals(date, message.getDate());\n        assertEquals(\"127.0.0.1\", message.getHostName());\n        assertEquals(\"OpenNMS\", message.getProcessName());\n        assertEquals(1234, message.getProcessId().intValue());\n        assertEquals(\"A SyslogNG style message\", message.getMessage());\n    }","id":100432,"modified_method":"@Test\n    public void testCustomParserWithProcess() throws Exception {\n        SyslogParser parser = CustomSyslogParser.getParser(\"<6>test: 2007-01-01 127.0.0.1 OpenNMS[1234]: A SyslogNG style message\");\n        assertTrue(parser.find());\n        final SyslogMessage message = parser.parse();\n\n        assertEquals(0, message.getFacility());\n        assertEquals(6, message.getSeverity());\n        assertEquals(\"test\", message.getMessageID());\n        assertEquals(\"127.0.0.1\", message.getHostName());\n        assertEquals(\"OpenNMS\", message.getProcessName());\n        assertEquals(1234, message.getProcessId().intValue());\n        assertEquals(\"A SyslogNG style message\", message.getMessage());\n    }","commit_id":"d60d13147a2ab4367b541c18c48f766d1104ed0c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyslogMessage parse() throws SyslogParserException {\n        if (!this.find()) {\n            if (traceEnabled()) {\n                LogUtils.tracef(this, \"'%s' did not match '%s'\", m_syslogNGPattern, getText());\n            }\n            return null;\n        }\n\n        final Matcher matcher = getMatcher();\n        final SyslogMessage message = new SyslogMessage();\n        try {\n            int priorityField = Integer.parseInt(matcher.group(1));\n            message.setFacility(getFacility(priorityField));\n            message.setSeverity(getSeverity(priorityField));\n        } catch (final NumberFormatException e) {\n            LogUtils.debugf(this, e, \"Unable to parse priority field '%s'\", matcher.group(1));\n        }\n        message.setMessageID(matcher.group(2));\n        try {\n            final DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n            df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n            message.setDate(df.parse(matcher.group(3)));\n        } catch (final Exception e) {\n            LogUtils.debugf(this, e, \"Unable to parse date '%s'\", matcher.group(3));\n        }\n\n        message.setHostName(matcher.group(4));\n        message.setProcessName(matcher.group(5));\n        if (matcher.group(6) != null) {\n            try {\n                final Integer pid = Integer.parseInt(matcher.group(6));\n                message.setProcessId(pid);\n            } catch (final NumberFormatException nfe) {\n                LogUtils.debugf(this, nfe, \"Unable to parse '%s' as a process ID.\", matcher.group(6));\n            }\n        }\n        message.setMessage(matcher.group(7));\n\n        return message;\n    }","id":100433,"modified_method":"public SyslogMessage parse() throws SyslogParserException {\n        if (!this.find()) {\n            if (traceEnabled()) {\n                LogUtils.tracef(this, \"'%s' did not match '%s'\", m_syslogNGPattern, getText());\n            }\n            return null;\n        }\n\n        final Matcher matcher = getMatcher();\n        final SyslogMessage message = new SyslogMessage();\n        try {\n            int priorityField = Integer.parseInt(matcher.group(1));\n            message.setFacility(getFacility(priorityField));\n            message.setSeverity(getSeverity(priorityField));\n        } catch (final NumberFormatException e) {\n            LogUtils.debugf(this, e, \"Unable to parse priority field '%s'\", matcher.group(1));\n        }\n        if (matcher.group(2) != null && !matcher.group(2).isEmpty()) {\n            message.setMessageID(matcher.group(2));\n        }\n\n        Date date = parseDate(matcher.group(3));\n        if (date == null) date = new Date();\n        message.setDate(date);\n\n        message.setHostName(matcher.group(4));\n        message.setProcessName(matcher.group(5));\n        if (matcher.group(6) != null) {\n            try {\n                final Integer pid = Integer.parseInt(matcher.group(6));\n                message.setProcessId(pid);\n            } catch (final NumberFormatException nfe) {\n                LogUtils.debugf(this, nfe, \"Unable to parse '%s' as a process ID.\", matcher.group(6));\n            }\n        }\n        message.setMessage(matcher.group(7));\n\n        return message;\n    }","commit_id":"d60d13147a2ab4367b541c18c48f766d1104ed0c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Parse import-file tags and add all uei-matchs and hide-messages.\n     * \n     * @throws IOException\n     * @throws MarshalException\n     * @throws ValidationException\n     */\n    private void parseIncludedFiles() throws IOException, MarshalException, ValidationException {\n        File configDir = ConfigFileConstants.getFile(ConfigFileConstants.SYSLOGD_CONFIG_FILE_NAME).getParentFile();\n        for (String fileName : m_config.getImportFileCollection()) {\n            File configFile = new File(configDir, fileName);\n            SyslogdConfigurationGroup includeCfg = CastorUtils.unmarshal(SyslogdConfigurationGroup.class, new FileSystemResource(configFile));\n            if (includeCfg.getUeiList() != null) {\n                for (UeiMatch ueiMatch : includeCfg.getUeiList().getUeiMatchCollection())  {\n                    if (m_config.getUeiList() == null)\n                        m_config.setUeiList(new UeiList());\n                    m_config.getUeiList().addUeiMatch(ueiMatch);\n                }\n            }\n            if (includeCfg.getHideMessage() != null) {\n                for (HideMatch hideMatch : includeCfg.getHideMessage().getHideMatchCollection()) {\n                    if (m_config.getHideMessage() == null)\n                        m_config.setHideMessage(new HideMessage());\n                    m_config.getHideMessage().addHideMatch(hideMatch);\n                }\n            }\n        }\n    }","id":100434,"modified_method":"/**\n     * Parse import-file tags and add all uei-matchs and hide-messages.\n     * \n     * @throws IOException\n     * @throws MarshalException\n     * @throws ValidationException\n     */\n    private void parseIncludedFiles() throws IOException, MarshalException, ValidationException {\n        final File configDir;\n        try {\n            configDir = ConfigFileConstants.getFile(ConfigFileConstants.SYSLOGD_CONFIG_FILE_NAME).getParentFile();\n        } catch (final Throwable t) {\n            LogUtils.warnf(this, \"Error getting default syslogd configuration location. <import-file> directives will be ignored.  This should really only happen in unit tests.\");\n            return;\n        }\n        for (final String fileName : m_config.getImportFileCollection()) {\n            final File configFile = new File(configDir, fileName);\n            final SyslogdConfigurationGroup includeCfg = CastorUtils.unmarshal(SyslogdConfigurationGroup.class, new FileSystemResource(configFile));\n            if (includeCfg.getUeiList() != null) {\n                for (final UeiMatch ueiMatch : includeCfg.getUeiList().getUeiMatchCollection())  {\n                    if (m_config.getUeiList() == null)\n                        m_config.setUeiList(new UeiList());\n                    m_config.getUeiList().addUeiMatch(ueiMatch);\n                }\n            }\n            if (includeCfg.getHideMessage() != null) {\n                for (final HideMatch hideMatch : includeCfg.getHideMessage().getHideMatchCollection()) {\n                    if (m_config.getHideMessage() == null)\n                        m_config.setHideMessage(new HideMessage());\n                    m_config.getHideMessage().addHideMatch(hideMatch);\n                }\n            }\n        }\n    }","commit_id":"d60d13147a2ab4367b541c18c48f766d1104ed0c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public AddFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n\n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n        \n        //window setup\n\t\twindow.setTitle(new StringResourceModel(\"title.friend.add\", null, new Object[]{ friendName } )); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tadd(new ProfileImageRenderer(\"image\", userY, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.add\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.add\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//friend?\n\t\t\t\tif(connectionsLogic.isUserXFriendOfUserY(userX, userY)) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.already.confirmed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//has a friend request already been made to this person?\n\t\t\t\tif(connectionsLogic.isFriendRequestPending(userX, userY)) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.already.pending\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//has a friend request been made from this person to the current user?\n\t\t\t\tif(connectionsLogic.isFriendRequestPending(userY, userX)) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.already.pending\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//if ok, request friend\n\t\t\t\tif(connectionsLogic.requestFriend(userX, userY)) {\n\t\t\t\t\tfriendActionModel.setRequested(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_REQUEST, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.add.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.add\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setRequested(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n    }","id":100435,"modified_method":"public AddFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n\n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n        \n        //window setup\n\t\twindow.setTitle(new StringResourceModel(\"title.friend.add\", null, new Object[]{ friendName } )); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tProfileImage image = new ProfileImage(\"image\", new Model<String>(userY));\n\t\timage.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\tadd(image);\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.add\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.add\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//friend?\n\t\t\t\tif(connectionsLogic.isUserXFriendOfUserY(userX, userY)) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.already.confirmed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//has a friend request already been made to this person?\n\t\t\t\tif(connectionsLogic.isFriendRequestPending(userX, userY)) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.already.pending\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//has a friend request been made from this person to the current user?\n\t\t\t\tif(connectionsLogic.isFriendRequestPending(userY, userX)) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.already.pending\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//if ok, request friend\n\t\t\t\tif(connectionsLogic.requestFriend(userX, userY)) {\n\t\t\t\t\tfriendActionModel.setRequested(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_REQUEST, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.add.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.add\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setRequested(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n    }","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ConfirmFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n\n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n                \n        //window setup\n\t\twindow.setTitle(new StringResourceModel(\"title.friend.confirm\", null, new Object[]{ friendName } )); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tadd(new ProfileImageRenderer(\"image\", userY, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.confirm\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.confirm\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//must exist a pending friend request FROM userY to userX in order to confirm it\n\t\t\t\tboolean friendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userY, userX);\n\t\t\t\t\n\t\t\t\tif(!friendRequestFromThisPerson) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.not.pending.confirm\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//if ok, request friend\n\t\t\t\tif(connectionsLogic.confirmFriendRequest(userY, userX)) {\n\t\t\t\t\tfriendActionModel.setConfirmed(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_CONFIRM, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.confirm.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.confirm\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setConfirmed(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n        \n    }","id":100436,"modified_method":"public ConfirmFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n\n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n                \n        //window setup\n\t\twindow.setTitle(new StringResourceModel(\"title.friend.confirm\", null, new Object[]{ friendName } )); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tProfileImage image = new ProfileImage(\"image\", new Model<String>(userY));\n\t\timage.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\tadd(image);\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.confirm\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.confirm\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//must exist a pending friend request FROM userY to userX in order to confirm it\n\t\t\t\tboolean friendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userY, userX);\n\t\t\t\t\n\t\t\t\tif(!friendRequestFromThisPerson) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.not.pending.confirm\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//if ok, request friend\n\t\t\t\tif(connectionsLogic.confirmFriendRequest(userY, userX)) {\n\t\t\t\t\tfriendActionModel.setConfirmed(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_CONFIRM, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.confirm.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.confirm\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setConfirmed(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n        \n    }","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ConfirmedFriends(final String id, final String userUuid) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"ConfirmedFriends()\");\n\t\t\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\t\n\t\t//get info for user viewing this page (will be the same if user is viewing own list, different if viewing someone else's)\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t//User currentUser = sakaiProxy.getUserQuietly(currentUserUuid);\n\t\t//final String currentUserType = currentUser.getType(); //to be used for checking if connection between users is allowed, when this is added\n\t\t\n\t\t//if viewing own friends, you can manage them.\n\t\tif(userUuid.equals(currentUserUuid)) {\n\t\t\townList = true;\n\t\t}\n\t\t\n\t\t//get our list of confirmed friends as an IDataProvider\n\t\tConfirmedFriendsDataProvider provider = new ConfirmedFriendsDataProvider(userUuid);\n\t\t\n\t\t//init number of friends\n\t\tnumConfirmedFriends = provider.size();\n\t\t\n\t\t//model so we can update the number of friends\n\t\tIModel<Integer> numConfirmedFriendsModel = new Model<Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tpublic Integer getObject() {\n\t\t\t\treturn numConfirmedFriends;\n\t\t\t} \n\t\t};\n\t\t\n\t\t//heading\n\t\tfinal WebMarkupContainer confirmedFriendsHeading = new WebMarkupContainer(\"confirmedFriendsHeading\");\n\t\tLabel confirmedFriendsLabel = new Label(\"confirmedFriendsLabel\");\n\t\t//if viewing own list, \"my friends\", else, \"their name's friends\"\n\t\tif(ownList) {\n\t\t\tconfirmedFriendsLabel.setDefaultModel(new ResourceModel(\"heading.friends.my\"));\n\t\t} else {\n\t\t\tString displayName = sakaiProxy.getUserDisplayName(userUuid);\n\t\t\tconfirmedFriendsLabel.setDefaultModel(new StringResourceModel(\"heading.friends.view\", null, new Object[]{ displayName } ));\n\t\t}\n\t\tconfirmedFriendsHeading.add(confirmedFriendsLabel);\n\t\tconfirmedFriendsHeading.add(new Label(\"confirmedFriendsNumber\", numConfirmedFriendsModel));\n\t\tconfirmedFriendsHeading.setOutputMarkupId(true);\n\t\tadd(confirmedFriendsHeading);\n\t\t\n\t\t// actions\n\t\tForm<Void> confirmedFriendsButtonForm = new Form<Void>(\"confirmedFriendsButtonForm\");\n\t\tadd(confirmedFriendsButtonForm);\n\t\t\n\t\t//create worksite panel\n\t\tfinal CreateWorksitePanel createWorksitePanel = \n\t\t\tnew CreateWorksitePanel(\"createWorksitePanel\", connectionsLogic.getConnectionsForUser(userUuid));\n\t\t//create placeholder and set invisible initially\n\t\tcreateWorksitePanel.setOutputMarkupPlaceholderTag(true);\n\t\tcreateWorksitePanel.setVisible(false);\n\t\t\t\t\n\t\tconfirmedFriendsButtonForm.add(createWorksitePanel);\n\t\t\n\t\tfinal AjaxButton createWorksiteButton = new AjaxButton(\"createWorksiteButton\", confirmedFriendsButtonForm) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\tcreateWorksitePanel.setVisible(true);\n\t\t\t\ttarget.addComponent(createWorksitePanel);\n\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\");\n\t\t\t}\n\n\t\t};\n\t\tcreateWorksiteButton.setModel(new ResourceModel(\"link.worksite.create\"));\n\t\tcreateWorksiteButton.add(new AttributeModifier(\"title\", true, new ResourceModel(\"link.title.worksite.create\")));\n\t\tcreateWorksiteButton.setVisible(sakaiProxy.isUserAllowedAddSite(userUuid));\n\t\tconfirmedFriendsButtonForm.add(createWorksiteButton);\n\t\t\n\t\t//search for connections\n\t\tAjaxButton searchConnectionsButton = new AjaxButton(\"searchConnectionsButton\", confirmedFriendsButtonForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\tsetResponsePage(new MySearch());\n\t\t\t}\n    \t};\n\t\tsearchConnectionsButton.setModel(new ResourceModel(\"link.my.friends.search\"));    \t\n\t\tconfirmedFriendsButtonForm.add(searchConnectionsButton);\n\t\t\n\t\t//container which wraps list\n\t\tfinal WebMarkupContainer confirmedFriendsContainer = new WebMarkupContainer(\"confirmedFriendsContainer\");\n\t\tconfirmedFriendsContainer.setOutputMarkupId(true);\n\t\t\n\t\t//connection window\n\t\tfinal ModalWindow connectionWindow = new ModalWindow(\"connectionWindow\");\n\n\t\t//results\n\t\tDataView<Person> confirmedFriendsDataView = new DataView<Person>(\"connections\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<Person> item) {\n\t\t        \n\t\t\t\tPerson person = (Person)item.getDefaultModelObject();\n\t\t\t\tfinal String personUuid = person.getUuid();\n\t\t    \t\t\t    \t\n\t\t    \t//setup values\n\t\t    \tString displayName = person.getDisplayName();\n\t\t    \tboolean friend;\n\t\t    \t\n\t\t    \t//get friend status\n\t\t    \tif(ownList) {\n\t\t    \t\tfriend = true; //viewing own page of conenctions, must be friend!\n\t\t    \t} else {\n\t\t    \t\tfriend = connectionsLogic.isUserXFriendOfUserY(userUuid, personUuid); //other person viewing, check if they are friends\n\t\t    \t}\n\t\t    \t\n\t\t\t\t//get other objects\n\t\t\t\tProfilePrivacy privacy = person.getPrivacy();\n\t\t\t\tProfilePreferences prefs = person.getPreferences();\n\t\t\t\t\n\t\t\t\t//image wrapper, links to profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"connectionPhotoWrap\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//image\n\t\t\t\tfriendItem.add(new ProfileImageRenderer(\"connectionPhoto\", personUuid, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, true));\n\t\t\t\titem.add(friendItem);\n\t\t\t\t\n\t\t    \t//name and link to profile\n\t\t    \tLink<String> profileLink = new Link<String>(\"connectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tprofileLink.add(new Label(\"connectionName\", displayName));\n\t\t    \titem.add(profileLink);\n\t\t    \t\n\t\t    \t//status component\n\t\t\t\tProfileStatusRenderer status = new ProfileStatusRenderer(\"connectionStatus\", person, \"connection-status-msg\", \"connection-status-date\");\n\t\t\t\tstatus.setOutputMarkupId(true);\n\t\t\t\titem.add(status);\n\t\t    \t\n\t\t    \t\n\t\t    \t/* ACTIONS */\n\t\t    \t\n\t\t\t\tWebMarkupContainer c1 = new WebMarkupContainer(\"removeConnectionContainer\");\n\t\t\t\tc1.setOutputMarkupId(true);\n\t\t\t\t\n\t\t\t\t//REMOVE FRIEND LINK AND WINDOW\n\t\t    \tfinal AjaxLink<String> removeConnectionLink = new AjaxLink<String>(\"removeConnectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get this item, and set content for modalwindow\n\t\t\t\t    \tString friendUuid = getModelObject();\t\t\t\t    \t\n\t\t\t\t\t\tconnectionWindow.setContent(new RemoveFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, userUuid, friendUuid)); \n\t\t\t\t\t\t\n\t\t\t\t\t\t//modalwindow handler \n\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t\t\t\tif(friendActionModel.isRemoved()) { \n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//decrement number of friends\n\t\t\t\t            \t\tnumConfirmedFriends--;\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//remove friend item from display\n\t\t\t\t            \t\ttarget.appendJavascript(\"$('#\" + item.getMarkupId() + \"').slideUp();\");\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//update label\n\t\t\t\t            \t\ttarget.addComponent(confirmedFriendsHeading);\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//if none left, hide whole thing\n\t\t\t\t            \t\tif(numConfirmedFriends==0) {\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + confirmedFriendsContainer.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t}\n\t\t\t\t            \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t        });\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//ContextImage removeConnectionIcon = new ContextImage(\"removeConnectionIcon\",new Model<String>(ProfileConstants.DELETE_IMG));\n\t\t\t\tremoveConnectionLink.add(new AttributeModifier(\"alt\", true, new StringResourceModel(\"accessibility.connection.remove\", null, new Object[]{ displayName } )));\n\t\t\t\t//removeConnectionLink.add(removeConnectionIcon);\n\t\t\t\tremoveConnectionLink.add(new AttributeModifier(\"title\", true,new ResourceModel(\"link.title.removefriend\")));\n\t\t\t\tremoveConnectionLink.add(new Label(\"removeConnectionLabel\", new ResourceModel(\"button.friend.remove\")).setOutputMarkupId(true));\n\t\t\t\tc1.add(removeConnectionLink);\n\t\t\t\titem.add(c1);\n\t\t\t\t\n\t\t\t\t//can only delete if own connections\n\t\t\t\tif(!ownList) {\n\t\t\t\t\tremoveConnectionLink.setEnabled(false);\n\t\t\t\t\tremoveConnectionLink.setVisible(false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c2 = new WebMarkupContainer(\"viewFriendsContainer\");\n\t\t    \tc2.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tfinal AjaxLink<String> viewFriendsLink = new AjaxLink<String>(\"viewFriendsLink\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t// always ViewFriends because a user isn't connected to himself\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(personUuid));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal Label viewFriendsLabel = new Label(\"viewFriendsLabel\", new ResourceModel(\"link.view.friends\"));\n\t\t\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\t\t\t\n\t\t\t\t//hide if not allowed\n\t\t\t\tif(!privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS)) {\n\t\t\t\t\tviewFriendsLink.setEnabled(false);\n\t\t\t\t\tc2.setVisible(false);\n\t\t\t\t}\n\t\t\t\tviewFriendsLink.setOutputMarkupId(true);\n\t\t\t\tc2.add(viewFriendsLink);\n\t\t\t\titem.add(c2);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c3 = new WebMarkupContainer(\"emailContainer\");\n\t\t    \tc3.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tExternalLink emailLink = new ExternalLink(\"emailLink\",\n\t\t\t\t\t\t\"mailto:\" + person.getProfile().getEmail(),\n\t\t\t\t\t\tnew ResourceModel(\"profile.email\").getObject());\n\t\t    \t\n\t\t\t\tc3.add(emailLink);\n\t\t\t\t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getEmail()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc3.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c3);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c4 = new WebMarkupContainer(\"websiteContainer\");\n\t\t    \tc4.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \t// TODO home page, university profile URL or academic/research URL (see PRFL-35)\n\t\t    \tExternalLink websiteLink = new ExternalLink(\"websiteLink\", person.getProfile()\n\t\t\t\t\t\t.getHomepage(), new ResourceModel(\n\t\t\t\t\t\t\"profile.homepage\").getObject()).setPopupSettings(new PopupSettings());\n\t\t    \t\n\t\t    \tc4.add(websiteLink);\n\t\t    \t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getHomepage()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc4.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c4);\n\t\t\t\t\n\t\t\t\t// basic info can be set to 'only me' so still need to check\n\t\t\t\tif (true == privacyLogic.isActionAllowed(\n\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_BASICINFO)) {\n\t\t\t\t\t\n\t\t\t\t\titem.add(new Label(\"connectionSummary\",\n\t\t\t\t\t\t\tStringUtils.abbreviate(ProfileUtils.stripHtml(\n\t\t\t\t\t\t\t\t\tperson.getProfile().getPersonalSummary()), 200)));\n\t\t\t\t} else {\n\t\t\t\t\titem.add(new Label(\"connectionSummary\", \"\"));\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t    }\n\t\t\t\n\t\t};\n\t\tconfirmedFriendsDataView.setOutputMarkupId(true);\n\t\tconfirmedFriendsDataView.setItemsPerPage(ProfileConstants.MAX_CONNECTIONS_PER_PAGE);\n\t\t\n\t\tconfirmedFriendsContainer.add(confirmedFriendsDataView);\n\n\t\t//add results container\n\t\tadd(confirmedFriendsContainer);\n\t\t\n\t\t//add window\n\t\tadd(connectionWindow);\n\t\t\n\t\t//add pager\n\t\tAjaxPagingNavigator pager = new AjaxPagingNavigator(\"navigator\", confirmedFriendsDataView);\n\t\tadd(pager);\n\n\t\t//initially, if no friends, hide container and pager\n\t\tif(numConfirmedFriends == 0) {\n\t\t\tconfirmedFriendsContainer.setVisible(false);\n\t\t\tpager.setVisible(false);\n\t\t}\n\t\t\n\t\t//also, if num less than num required for pager, hide it\n\t\tif(numConfirmedFriends <= ProfileConstants.MAX_CONNECTIONS_PER_PAGE) {\n\t\t\tpager.setVisible(false);\n\t\t}\n\t\t\n\t}","id":100437,"modified_method":"public ConfirmedFriends(final String id, final String userUuid) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"ConfirmedFriends()\");\n\t\t\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\t\n\t\t//get info for user viewing this page (will be the same if user is viewing own list, different if viewing someone else's)\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t//User currentUser = sakaiProxy.getUserQuietly(currentUserUuid);\n\t\t//final String currentUserType = currentUser.getType(); //to be used for checking if connection between users is allowed, when this is added\n\t\t\n\t\t//if viewing own friends, you can manage them.\n\t\tif(userUuid.equals(currentUserUuid)) {\n\t\t\townList = true;\n\t\t}\n\t\t\n\t\t//get our list of confirmed friends as an IDataProvider\n\t\tConfirmedFriendsDataProvider provider = new ConfirmedFriendsDataProvider(userUuid);\n\t\t\n\t\t//init number of friends\n\t\tnumConfirmedFriends = provider.size();\n\t\t\n\t\t//model so we can update the number of friends\n\t\tIModel<Integer> numConfirmedFriendsModel = new Model<Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tpublic Integer getObject() {\n\t\t\t\treturn numConfirmedFriends;\n\t\t\t} \n\t\t};\n\t\t\n\t\t//heading\n\t\tfinal WebMarkupContainer confirmedFriendsHeading = new WebMarkupContainer(\"confirmedFriendsHeading\");\n\t\tLabel confirmedFriendsLabel = new Label(\"confirmedFriendsLabel\");\n\t\t//if viewing own list, \"my friends\", else, \"their name's friends\"\n\t\tif(ownList) {\n\t\t\tconfirmedFriendsLabel.setDefaultModel(new ResourceModel(\"heading.friends.my\"));\n\t\t} else {\n\t\t\tString displayName = sakaiProxy.getUserDisplayName(userUuid);\n\t\t\tconfirmedFriendsLabel.setDefaultModel(new StringResourceModel(\"heading.friends.view\", null, new Object[]{ displayName } ));\n\t\t}\n\t\tconfirmedFriendsHeading.add(confirmedFriendsLabel);\n\t\tconfirmedFriendsHeading.add(new Label(\"confirmedFriendsNumber\", numConfirmedFriendsModel));\n\t\tconfirmedFriendsHeading.setOutputMarkupId(true);\n\t\tadd(confirmedFriendsHeading);\n\t\t\n\t\t// actions\n\t\tForm<Void> confirmedFriendsButtonForm = new Form<Void>(\"confirmedFriendsButtonForm\");\n\t\tadd(confirmedFriendsButtonForm);\n\t\t\n\t\t//create worksite panel\n\t\tfinal CreateWorksitePanel createWorksitePanel = \n\t\t\tnew CreateWorksitePanel(\"createWorksitePanel\", connectionsLogic.getConnectionsForUser(userUuid));\n\t\t//create placeholder and set invisible initially\n\t\tcreateWorksitePanel.setOutputMarkupPlaceholderTag(true);\n\t\tcreateWorksitePanel.setVisible(false);\n\t\t\t\t\n\t\tconfirmedFriendsButtonForm.add(createWorksitePanel);\n\t\t\n\t\tfinal AjaxButton createWorksiteButton = new AjaxButton(\"createWorksiteButton\", confirmedFriendsButtonForm) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\tcreateWorksitePanel.setVisible(true);\n\t\t\t\ttarget.addComponent(createWorksitePanel);\n\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\");\n\t\t\t}\n\n\t\t};\n\t\tcreateWorksiteButton.setModel(new ResourceModel(\"link.worksite.create\"));\n\t\tcreateWorksiteButton.add(new AttributeModifier(\"title\", true, new ResourceModel(\"link.title.worksite.create\")));\n\t\tcreateWorksiteButton.setVisible(sakaiProxy.isUserAllowedAddSite(userUuid));\n\t\tconfirmedFriendsButtonForm.add(createWorksiteButton);\n\t\t\n\t\t//search for connections\n\t\tAjaxButton searchConnectionsButton = new AjaxButton(\"searchConnectionsButton\", confirmedFriendsButtonForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\tsetResponsePage(new MySearch());\n\t\t\t}\n    \t};\n\t\tsearchConnectionsButton.setModel(new ResourceModel(\"link.my.friends.search\"));    \t\n\t\tconfirmedFriendsButtonForm.add(searchConnectionsButton);\n\t\t\n\t\t//container which wraps list\n\t\tfinal WebMarkupContainer confirmedFriendsContainer = new WebMarkupContainer(\"confirmedFriendsContainer\");\n\t\tconfirmedFriendsContainer.setOutputMarkupId(true);\n\t\t\n\t\t//connection window\n\t\tfinal ModalWindow connectionWindow = new ModalWindow(\"connectionWindow\");\n\n\t\t//results\n\t\tDataView<Person> confirmedFriendsDataView = new DataView<Person>(\"connections\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<Person> item) {\n\t\t        \n\t\t\t\tPerson person = (Person)item.getDefaultModelObject();\n\t\t\t\tfinal String personUuid = person.getUuid();\n\t\t    \t\t\t    \t\n\t\t    \t//setup values\n\t\t    \tString displayName = person.getDisplayName();\n\t\t    \tboolean friend;\n\t\t    \t\n\t\t    \t//get friend status\n\t\t    \tif(ownList) {\n\t\t    \t\tfriend = true; //viewing own page of conenctions, must be friend!\n\t\t    \t} else {\n\t\t    \t\tfriend = connectionsLogic.isUserXFriendOfUserY(userUuid, personUuid); //other person viewing, check if they are friends\n\t\t    \t}\n\t\t    \t\n\t\t\t\t//get other objects\n\t\t\t\tProfilePrivacy privacy = person.getPrivacy();\n\t\t\t\tProfilePreferences prefs = person.getPreferences();\n\t\t\t\t\n\t\t\t\t//image wrapper, links to profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"connectionPhotoWrap\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//image\t\t\t\t\n\t\t\t\tProfileImage connectionPhoto = new ProfileImage(\"connectionPhoto\", new Model<String>(personUuid));\n\t\t\t\tconnectionPhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tfriendItem.add(connectionPhoto);\n\n\t\t\t\titem.add(friendItem);\n\t\t\t\t\n\t\t    \t//name and link to profile\n\t\t    \tLink<String> profileLink = new Link<String>(\"connectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tprofileLink.add(new Label(\"connectionName\", displayName));\n\t\t    \titem.add(profileLink);\n\t\t    \t\n\t\t    \t//status component\n\t\t\t\tProfileStatusRenderer status = new ProfileStatusRenderer(\"connectionStatus\", person, \"connection-status-msg\", \"connection-status-date\");\n\t\t\t\tstatus.setOutputMarkupId(true);\n\t\t\t\titem.add(status);\n\t\t    \t\n\t\t    \t\n\t\t    \t/* ACTIONS */\n\t\t    \t\n\t\t\t\tWebMarkupContainer c1 = new WebMarkupContainer(\"removeConnectionContainer\");\n\t\t\t\tc1.setOutputMarkupId(true);\n\t\t\t\t\n\t\t\t\t//REMOVE FRIEND LINK AND WINDOW\n\t\t    \tfinal AjaxLink<String> removeConnectionLink = new AjaxLink<String>(\"removeConnectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get this item, and set content for modalwindow\n\t\t\t\t    \tString friendUuid = getModelObject();\t\t\t\t    \t\n\t\t\t\t\t\tconnectionWindow.setContent(new RemoveFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, userUuid, friendUuid)); \n\t\t\t\t\t\t\n\t\t\t\t\t\t//modalwindow handler \n\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t\t\t\tif(friendActionModel.isRemoved()) { \n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//decrement number of friends\n\t\t\t\t            \t\tnumConfirmedFriends--;\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//remove friend item from display\n\t\t\t\t            \t\ttarget.appendJavascript(\"$('#\" + item.getMarkupId() + \"').slideUp();\");\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//update label\n\t\t\t\t            \t\ttarget.addComponent(confirmedFriendsHeading);\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//if none left, hide whole thing\n\t\t\t\t            \t\tif(numConfirmedFriends==0) {\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + confirmedFriendsContainer.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t}\n\t\t\t\t            \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t        });\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//ContextImage removeConnectionIcon = new ContextImage(\"removeConnectionIcon\",new Model<String>(ProfileConstants.DELETE_IMG));\n\t\t\t\tremoveConnectionLink.add(new AttributeModifier(\"alt\", true, new StringResourceModel(\"accessibility.connection.remove\", null, new Object[]{ displayName } )));\n\t\t\t\t//removeConnectionLink.add(removeConnectionIcon);\n\t\t\t\tremoveConnectionLink.add(new AttributeModifier(\"title\", true,new ResourceModel(\"link.title.removefriend\")));\n\t\t\t\tremoveConnectionLink.add(new Label(\"removeConnectionLabel\", new ResourceModel(\"button.friend.remove\")).setOutputMarkupId(true));\n\t\t\t\tc1.add(removeConnectionLink);\n\t\t\t\titem.add(c1);\n\t\t\t\t\n\t\t\t\t//can only delete if own connections\n\t\t\t\tif(!ownList) {\n\t\t\t\t\tremoveConnectionLink.setEnabled(false);\n\t\t\t\t\tremoveConnectionLink.setVisible(false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c2 = new WebMarkupContainer(\"viewFriendsContainer\");\n\t\t    \tc2.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tfinal AjaxLink<String> viewFriendsLink = new AjaxLink<String>(\"viewFriendsLink\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t// always ViewFriends because a user isn't connected to himself\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(personUuid));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal Label viewFriendsLabel = new Label(\"viewFriendsLabel\", new ResourceModel(\"link.view.friends\"));\n\t\t\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\t\t\t\n\t\t\t\t//hide if not allowed\n\t\t\t\tif(!privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS)) {\n\t\t\t\t\tviewFriendsLink.setEnabled(false);\n\t\t\t\t\tc2.setVisible(false);\n\t\t\t\t}\n\t\t\t\tviewFriendsLink.setOutputMarkupId(true);\n\t\t\t\tc2.add(viewFriendsLink);\n\t\t\t\titem.add(c2);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c3 = new WebMarkupContainer(\"emailContainer\");\n\t\t    \tc3.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tExternalLink emailLink = new ExternalLink(\"emailLink\",\n\t\t\t\t\t\t\"mailto:\" + person.getProfile().getEmail(),\n\t\t\t\t\t\tnew ResourceModel(\"profile.email\").getObject());\n\t\t    \t\n\t\t\t\tc3.add(emailLink);\n\t\t\t\t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getEmail()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc3.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c3);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c4 = new WebMarkupContainer(\"websiteContainer\");\n\t\t    \tc4.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \t// TODO home page, university profile URL or academic/research URL (see PRFL-35)\n\t\t    \tExternalLink websiteLink = new ExternalLink(\"websiteLink\", person.getProfile()\n\t\t\t\t\t\t.getHomepage(), new ResourceModel(\n\t\t\t\t\t\t\"profile.homepage\").getObject()).setPopupSettings(new PopupSettings());\n\t\t    \t\n\t\t    \tc4.add(websiteLink);\n\t\t    \t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getHomepage()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc4.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c4);\n\t\t\t\t\n\t\t\t\t// basic info can be set to 'only me' so still need to check\n\t\t\t\tif (true == privacyLogic.isActionAllowed(\n\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_BASICINFO)) {\n\t\t\t\t\t\n\t\t\t\t\titem.add(new Label(\"connectionSummary\",\n\t\t\t\t\t\t\tStringUtils.abbreviate(ProfileUtils.stripHtml(\n\t\t\t\t\t\t\t\t\tperson.getProfile().getPersonalSummary()), 200)));\n\t\t\t\t} else {\n\t\t\t\t\titem.add(new Label(\"connectionSummary\", \"\"));\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t    }\n\t\t\t\n\t\t};\n\t\tconfirmedFriendsDataView.setOutputMarkupId(true);\n\t\tconfirmedFriendsDataView.setItemsPerPage(ProfileConstants.MAX_CONNECTIONS_PER_PAGE);\n\t\t\n\t\tconfirmedFriendsContainer.add(confirmedFriendsDataView);\n\n\t\t//add results container\n\t\tadd(confirmedFriendsContainer);\n\t\t\n\t\t//add window\n\t\tadd(connectionWindow);\n\t\t\n\t\t//add pager\n\t\tAjaxPagingNavigator pager = new AjaxPagingNavigator(\"navigator\", confirmedFriendsDataView);\n\t\tadd(pager);\n\n\t\t//initially, if no friends, hide container and pager\n\t\tif(numConfirmedFriends == 0) {\n\t\t\tconfirmedFriendsContainer.setVisible(false);\n\t\t\tpager.setVisible(false);\n\t\t}\n\t\t\n\t\t//also, if num less than num required for pager, hide it\n\t\tif(numConfirmedFriends <= ProfileConstants.MAX_CONNECTIONS_PER_PAGE) {\n\t\t\tpager.setVisible(false);\n\t\t}\n\t\t\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public FriendsFeed(String id, final String ownerUserId, final String viewingUserId) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"FriendsFeed()\");\n\t\t\n\t\t//heading\t\n\t\tLabel heading = new Label(\"heading\");\n\t\t\n\t\tif(viewingUserId.equals(ownerUserId)) {\n\t\t\theading.setDefaultModel(new ResourceModel(\"heading.widget.my.friends\"));\n\t\t} else {\n\t\t\tString displayName = sakaiProxy.getUserDisplayName(ownerUserId);\n\t\t\theading.setDefaultModel(new StringResourceModel(\"heading.widget.view.friends\", null, new Object[]{ displayName } ));\n\t\t}\n\t\tadd(heading);\n\t\t\n\t\t\n\t\t//get our list of friends as an IDataProvider\n\t\t//the FriendDataProvider takes care of the privacy associated with the associated list\n\t\t//so what it returns will always be clean\n\t\tFriendsFeedDataProvider provider = new FriendsFeedDataProvider(ownerUserId);\n\t\t\n\t\tGridView<Person> dataView = new GridView<Person>(\"rows\", provider) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateEmptyItem(Item<Person> item)\n\t\t\t{\n\t\t\t\tLink friendItem = new Link(\"friendsFeedItem\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tfriendItem.add(new ProfileImageRenderer(\"friendPhoto\", null, null, null, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, true));\n\n\t\t\t\tfriendItem.add(new Label(\"friendName\",\"empty\"));\n\t\t\t\titem.add(friendItem);\n\t\t\t\tfriendItem.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tprotected void populateItem(Item<Person> item)\n\t\t\t{\n\t\t\t\tfinal Person person = (Person)item.getDefaultModelObject();\n\t\t\t\tfinal String friendId = person.getUuid();\n\t\t\t\t\n\t\t\t\t//setup info\n\t\t\t\tString displayName = person.getDisplayName();\n\t\t    \tboolean friend;\n\t\t    \t\n\t\t    \t\n\t\t    \t//get friend status\n\t\t    \tif(ownerUserId.equals(viewingUserId)) {\n\t\t    \t\tfriend = true; //viewing own list of friends so must be a friend\n\t\t    \t} else {\n\t\t    \t\tfriend = connectionsLogic.isUserXFriendOfUserY(viewingUserId, friendId); //other person viewing, check if they are friends\n\t\t    \t}\n\t    \t\t\n\t\t    \t//link to their profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"friendsFeedItem\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\t//link to own profile if link will point to self\n\t\t    \t\t\tif(viewingUserId.equals(friendId)) {\n\t\t\t\t\t\t\tsetResponsePage(new MyProfile());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetResponsePage(new ViewProfile(friendId));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t/* IMAGE */\n\t\t\t\tfriendItem.add(new ProfileImageRenderer(\"friendPhoto\", friendId, person.getPreferences(), person.getPrivacy(), ProfileConstants.PROFILE_IMAGE_THUMBNAIL, true));\n\t\t\t\t\n\t\t\t\t//name (will be linked also)\n\t\t    \tLabel friendLinkLabel = new Label(\"friendName\", displayName);\n\t\t    \tfriendItem.add(friendLinkLabel);\n\t\t\n\t\t    \titem.add(friendItem);\n\t\t    \t\n\t\t\t}\n\t\t};\n\t\t\n\t\tdataView.setColumns(3);\n\t\tadd(dataView);\n\t\t\n\t\t/* NUM FRIENDS LABEL (can't just use provider as it only ever returns the number in the grid */\n\t\tfinal int numFriends = connectionsLogic.getConnectionsForUserCount(ownerUserId);\n\t\tLabel numFriendsLabel = new Label(\"numFriendsLabel\");\n\t\tadd(numFriendsLabel);\n\t\t\n\t\t\n\t\t/* VIEW ALL FRIENDS LINK */\n    \tLink<String> viewFriendsLink = new Link<String>(\"viewFriendsLink\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\t//this could come from a bookmarkablelink, but this works for now\n\t\t\t\tif(numFriends == 0) {\n\t\t\t\t\tsetResponsePage(new MySearch());\n\t\t\t\t} else {\n\t\t\t\t\t//if own FriendsFeed, link to own MyFriends, otherwise link to ViewFriends\n\t\t\t\t\tif (sakaiProxy.isSuperUserAndProxiedToUser(ownerUserId)) {\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(ownerUserId));\n\t\t\t\t\t} else if (viewingUserId.equals(ownerUserId)) {\n\t\t\t\t\t\tsetResponsePage(new MyFriends());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(ownerUserId));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tLabel viewFriendsLabel = new Label(\"viewFriendsLabel\");\n\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\tadd(viewFriendsLink);\n\n\t\t\n\t\t/* TESTS FOR THE ABOVE to change labels and links */\n\t\tif(numFriends == 0) {\n\t\t\tnumFriendsLabel.setDefaultModel(new ResourceModel(\"text.friend.feed.num.none\"));\n\t\t\t//numFriendsLabel.setVisible(false);\n\t\t\t//if own FriendsFeed, show search link, otherwise hide\n\t\t\tif(viewingUserId.equals(ownerUserId)) {\n\t\t\t\tviewFriendsLabel.setDefaultModel(new ResourceModel(\"link.friend.feed.search\"));\n\t\t\t} else {\n\t\t\t\tviewFriendsLink.setVisible(false);\n\t\t\t}\n\t\t} else if (numFriends == 1) {\n\t\t\tnumFriendsLabel.setDefaultModel(new ResourceModel(\"text.friend.feed.num.one\"));\n\t\t\tviewFriendsLink.setVisible(false);\n\t\t} else {\n\t\t\tnumFriendsLabel.setDefaultModel(new StringResourceModel(\"text.friend.feed.num.many\", null, new Object[]{ numFriends }));\n\t\t\tviewFriendsLabel.setDefaultModel(new ResourceModel(\"link.friend.feed.view\"));\n\t\t}\n\t\n\t}","id":100438,"modified_method":"public FriendsFeed(String id, final String ownerUserId, final String viewingUserId) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"FriendsFeed()\");\n\t\t\n\t\t//heading\t\n\t\tLabel heading = new Label(\"heading\");\n\t\t\n\t\tif(viewingUserId.equals(ownerUserId)) {\n\t\t\theading.setDefaultModel(new ResourceModel(\"heading.widget.my.friends\"));\n\t\t} else {\n\t\t\tString displayName = sakaiProxy.getUserDisplayName(ownerUserId);\n\t\t\theading.setDefaultModel(new StringResourceModel(\"heading.widget.view.friends\", null, new Object[]{ displayName } ));\n\t\t}\n\t\tadd(heading);\n\t\t\n\t\t\n\t\t//get our list of friends as an IDataProvider\n\t\t//the FriendDataProvider takes care of the privacy associated with the associated list\n\t\t//so what it returns will always be clean\n\t\tFriendsFeedDataProvider provider = new FriendsFeedDataProvider(ownerUserId);\n\t\t\n\t\tGridView<Person> dataView = new GridView<Person>(\"rows\", provider) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateEmptyItem(Item<Person> item)\n\t\t\t{\n\t\t\t\tLink friendItem = new Link(\"friendsFeedItem\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tProfileImage friendPhoto = new ProfileImage(\"friendPhoto\", new Model<String>(null));\n\t\t\t\tfriendPhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tfriendItem.add(friendPhoto);\n\n\t\t\t\tfriendItem.add(new Label(\"friendName\",\"empty\"));\n\t\t\t\titem.add(friendItem);\n\t\t\t\tfriendItem.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tprotected void populateItem(Item<Person> item)\n\t\t\t{\n\t\t\t\tfinal Person person = (Person)item.getDefaultModelObject();\n\t\t\t\tfinal String friendId = person.getUuid();\n\t\t\t\t\n\t\t\t\t//setup info\n\t\t\t\tString displayName = person.getDisplayName();\n\t\t    \tboolean friend;\n\t\t    \t\n\t\t    \t\n\t\t    \t//get friend status\n\t\t    \tif(ownerUserId.equals(viewingUserId)) {\n\t\t    \t\tfriend = true; //viewing own list of friends so must be a friend\n\t\t    \t} else {\n\t\t    \t\tfriend = connectionsLogic.isUserXFriendOfUserY(viewingUserId, friendId); //other person viewing, check if they are friends\n\t\t    \t}\n\t    \t\t\n\t\t    \t//link to their profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"friendsFeedItem\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\t//link to own profile if link will point to self\n\t\t    \t\t\tif(viewingUserId.equals(friendId)) {\n\t\t\t\t\t\t\tsetResponsePage(new MyProfile());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetResponsePage(new ViewProfile(friendId));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t/* IMAGE */\n\t\t\t\tProfileImage friendPhoto = new ProfileImage(\"friendPhoto\", new Model<String>(friendId));\n\t\t\t\tfriendPhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tfriendItem.add(friendPhoto);\n\t\t\t\t\n\t\t\t\t//name (will be linked also)\n\t\t    \tLabel friendLinkLabel = new Label(\"friendName\", displayName);\n\t\t    \tfriendItem.add(friendLinkLabel);\n\t\t\n\t\t    \titem.add(friendItem);\n\t\t    \t\n\t\t\t}\n\t\t};\n\t\t\n\t\tdataView.setColumns(3);\n\t\tadd(dataView);\n\t\t\n\t\t/* NUM FRIENDS LABEL (can't just use provider as it only ever returns the number in the grid */\n\t\tfinal int numFriends = connectionsLogic.getConnectionsForUserCount(ownerUserId);\n\t\tLabel numFriendsLabel = new Label(\"numFriendsLabel\");\n\t\tadd(numFriendsLabel);\n\t\t\n\t\t\n\t\t/* VIEW ALL FRIENDS LINK */\n    \tLink<String> viewFriendsLink = new Link<String>(\"viewFriendsLink\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\t//this could come from a bookmarkablelink, but this works for now\n\t\t\t\tif(numFriends == 0) {\n\t\t\t\t\tsetResponsePage(new MySearch());\n\t\t\t\t} else {\n\t\t\t\t\t//if own FriendsFeed, link to own MyFriends, otherwise link to ViewFriends\n\t\t\t\t\tif (sakaiProxy.isSuperUserAndProxiedToUser(ownerUserId)) {\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(ownerUserId));\n\t\t\t\t\t} else if (viewingUserId.equals(ownerUserId)) {\n\t\t\t\t\t\tsetResponsePage(new MyFriends());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(ownerUserId));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tLabel viewFriendsLabel = new Label(\"viewFriendsLabel\");\n\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\tadd(viewFriendsLink);\n\n\t\t\n\t\t/* TESTS FOR THE ABOVE to change labels and links */\n\t\tif(numFriends == 0) {\n\t\t\tnumFriendsLabel.setDefaultModel(new ResourceModel(\"text.friend.feed.num.none\"));\n\t\t\t//numFriendsLabel.setVisible(false);\n\t\t\t//if own FriendsFeed, show search link, otherwise hide\n\t\t\tif(viewingUserId.equals(ownerUserId)) {\n\t\t\t\tviewFriendsLabel.setDefaultModel(new ResourceModel(\"link.friend.feed.search\"));\n\t\t\t} else {\n\t\t\t\tviewFriendsLink.setVisible(false);\n\t\t\t}\n\t\t} else if (numFriends == 1) {\n\t\t\tnumFriendsLabel.setDefaultModel(new ResourceModel(\"text.friend.feed.num.one\"));\n\t\t\tviewFriendsLink.setVisible(false);\n\t\t} else {\n\t\t\tnumFriendsLabel.setDefaultModel(new StringResourceModel(\"text.friend.feed.num.many\", null, new Object[]{ numFriends }));\n\t\t\tviewFriendsLabel.setDefaultModel(new ResourceModel(\"link.friend.feed.view\"));\n\t\t}\n\t\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public IgnoreFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n\n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n                \n        //window setup\n\t\twindow.setTitle(new ResourceModel(\"title.friend.ignore\")); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tadd(new ProfileImageRenderer(\"image\", userY, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.ignore\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.ignore\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//must exist a pending friend request FROM userY to userX in order to ignore it\n\t\t\t\tboolean friendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userY, userX);\n\t\t\t\t\n\t\t\t\tif(!friendRequestFromThisPerson) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.not.pending.ignore\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//if ok, ignore friend request\n\t\t\t\tif(connectionsLogic.ignoreFriendRequest(userY, userX)) {\n\t\t\t\t\tfriendActionModel.setIgnored(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_IGNORE, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.ignore.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.ignore\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setIgnored(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n        \n    }","id":100439,"modified_method":"public IgnoreFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n\n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n                \n        //window setup\n\t\twindow.setTitle(new ResourceModel(\"title.friend.ignore\")); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tProfileImage image = new ProfileImage(\"image\", new Model<String>(userY));\n\t\timage.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\tadd(image);\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.ignore\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.ignore\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//must exist a pending friend request FROM userY to userX in order to ignore it\n\t\t\t\tboolean friendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userY, userX);\n\t\t\t\t\n\t\t\t\tif(!friendRequestFromThisPerson) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.not.pending.ignore\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//if ok, ignore friend request\n\t\t\t\tif(connectionsLogic.ignoreFriendRequest(userY, userX)) {\n\t\t\t\t\tfriendActionModel.setIgnored(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_IGNORE, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.ignore.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.ignore\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setIgnored(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n        \n    }","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public MessageThreadsView(final String id) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"MessageThreads()\");\n\t\t\n\t\t//get current user\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t\n\t\t//heading\n\t\t/*\n\t\tLabel heading = new Label(\"messageThreadListHeading\", new ResourceModel(\"heading.messages\"));\n\t\tadd(heading);\n\t\t*/\n\t\t\n\t\t//no messages label\n\t\tLabel noMessagesLabel = new Label(\"noMessagesLabel\");\n\t\tnoMessagesLabel.setOutputMarkupPlaceholderTag(true);\n\t\tadd(noMessagesLabel);\n\t\t\n\t\t//container which wraps list\n\t\tfinal WebMarkupContainer messageThreadListContainer = new WebMarkupContainer(\"messageThreadListContainer\");\n\t\tmessageThreadListContainer.setOutputMarkupId(true);\n\t\t\n\t\t//get our list of messages\n\t\tfinal MessageThreadsDataProvider provider = new MessageThreadsDataProvider(currentUserUuid);\n\t\tint numMessages = provider.size();\n\t\t\n\t\t//message list\n\t\tDataView<MessageThread> messageThreadList = new DataView<MessageThread>(\"messageThreadList\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<MessageThread> item) {\n\t\t        \n\t\t\t\tfinal MessageThread thread = (MessageThread)item.getDefaultModelObject();\n\t\t\t\tMessage message = thread.getMostRecentMessage();\n\t\t\t\tString messageFromUuid = message.getFrom();\n\t\t\t\t\n\t\t\t\t//we need to know if this message has been read or not so we can style it accordingly\n\t\t\t\t//we only need this if we didn't send the message\n\t\t\t\tMessageParticipant participant = null;\n\t\t\t\t\n\t\t\t\tboolean messageOwner = false;\n\t\t\t\tif(StringUtils.equals(messageFromUuid, currentUserUuid)) {\n\t\t\t\t\tmessageOwner = true;\n\t\t\t\t}\n\t\t\t\tif(!messageOwner) {\n\t\t\t\t\tparticipant = messagingLogic.getMessageParticipant(message.getId(), currentUserUuid);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//prefs and privacy\n\t\t\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(messageFromUuid);\n\t\t\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(messageFromUuid);\n\t\t\t\t\n\t\t\t\t//photo link\n\t\t\t\tAjaxLink<String> photoLink = new AjaxLink<String>(\"photoLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//photo\n\t\t\t\tphotoLink.add(new ProfileImageRenderer(\"messagePhoto\", messageFromUuid, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\t\titem.add(photoLink);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//name link\n\t\t\t\tAjaxLink<String> messageFromLink = new AjaxLink<String>(\"messageFromLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tmessageFromLink.add(new Label(\"messageFromName\", new Model<String>(sakaiProxy.getUserDisplayName(messageFromUuid))));\n\t\t\t\titem.add(messageFromLink);\n\t\t\t\n\t\t\t\t//date\n\t\t\t\titem.add(new Label(\"messageDate\", ProfileUtils.convertDateToString(message.getDatePosted(), ProfileConstants.MESSAGE_DISPLAY_DATE_FORMAT)));\n\t\t\t\t\n\t\t\t\t//subject link\n\t\t\t\tAjaxLink<MessageThread> messageSubjectLink = new AjaxLink<MessageThread>(\"messageSubjectLink\", new Model<MessageThread>(thread)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t//load messageview panel\n\t\t\t\t\t\t//setResponsePage(new MyMessageView(id, currentUserUuid, getModelObject().getId(), getModelObject().getSubject()));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//load MyMessages with some params that will then load a diff tab panel and show this message panel.\n\t\t\t\t\t\tsetResponsePage(new MyMessages(thread.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tmessageSubjectLink.add(new Label(\"messageSubject\", new Model<String>(thread.getSubject())));\n\t\t\t\titem.add(messageSubjectLink);\n\t\t\t\t\n\t\t\t\t//message body\n\t\t\t\titem.add(new Label(\"messageBody\", new Model<String>(StringUtils.abbreviate(message.getMessage(), ProfileConstants.MESSAGE_PREVIEW_MAX_LENGTH))));\n\t\t\t\t\n\t\t\t\t//unread notice for accessibility, off unless its new.\n\t\t\t\tLabel messageUnreadNotice = new Label(\"messageUnreadNotice\", new ResourceModel(\"accessibility.messages.unread\"));\n\t\t\t\tmessageUnreadNotice.setVisible(false);\n\t\t\t\titem.add(messageUnreadNotice);\n\t\t\t\t\n\t\t\t\t//highlight if new, also render accessibility notice\n\t\t\t\tif(!messageOwner && !participant.isRead()) {\n\t\t\t\t\titem.add(new AttributeAppender(\"class\", true, new Model<String>(\"unread-message\"), \" \"));\n\t\t\t\t\tmessageUnreadNotice.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t    }\n\t\t\t\n\t\t};\n\t\tmessageThreadList.setOutputMarkupId(true);\n\t\tmessageThreadList.setItemsPerPage(ProfileConstants.MAX_MESSAGES_PER_PAGE);\n\t\tmessageThreadListContainer.add(messageThreadList);\n\t\tadd(messageThreadListContainer);\n\t\t\n\t\t//pager\n\t\tAjaxPagingNavigator pager = new AjaxPagingNavigator(\"navigator\", messageThreadList);\n\t\tadd(pager);\n\t\n\t\t//initially, if no message threads to show, hide container and pager, set and show label\n\t\tif(numMessages == 0) {\n\t\t\tmessageThreadListContainer.setVisible(false);\n\t\t\tpager.setVisible(false);\n\t\t\t\n\t\t\tnoMessagesLabel.setDefaultModel(new ResourceModel(\"text.messages.none\"));\n\t\t\tnoMessagesLabel.setVisible(true);\n\t\t}\n\t\t\n\t\t//also, if num less than num required for pager, hide it\n\t\tif(numMessages <= ProfileConstants.MAX_MESSAGES_PER_PAGE) {\n\t\t\tpager.setVisible(false);\n\t\t}\n\t}","id":100440,"modified_method":"public MessageThreadsView(final String id) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"MessageThreads()\");\n\t\t\n\t\t//get current user\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t\n\t\t//heading\n\t\t/*\n\t\tLabel heading = new Label(\"messageThreadListHeading\", new ResourceModel(\"heading.messages\"));\n\t\tadd(heading);\n\t\t*/\n\t\t\n\t\t//no messages label\n\t\tLabel noMessagesLabel = new Label(\"noMessagesLabel\");\n\t\tnoMessagesLabel.setOutputMarkupPlaceholderTag(true);\n\t\tadd(noMessagesLabel);\n\t\t\n\t\t//container which wraps list\n\t\tfinal WebMarkupContainer messageThreadListContainer = new WebMarkupContainer(\"messageThreadListContainer\");\n\t\tmessageThreadListContainer.setOutputMarkupId(true);\n\t\t\n\t\t//get our list of messages\n\t\tfinal MessageThreadsDataProvider provider = new MessageThreadsDataProvider(currentUserUuid);\n\t\tint numMessages = provider.size();\n\t\t\n\t\t//message list\n\t\tDataView<MessageThread> messageThreadList = new DataView<MessageThread>(\"messageThreadList\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<MessageThread> item) {\n\t\t        \n\t\t\t\tfinal MessageThread thread = (MessageThread)item.getDefaultModelObject();\n\t\t\t\tMessage message = thread.getMostRecentMessage();\n\t\t\t\tString messageFromUuid = message.getFrom();\n\t\t\t\t\n\t\t\t\t//we need to know if this message has been read or not so we can style it accordingly\n\t\t\t\t//we only need this if we didn't send the message\n\t\t\t\tMessageParticipant participant = null;\n\t\t\t\t\n\t\t\t\tboolean messageOwner = false;\n\t\t\t\tif(StringUtils.equals(messageFromUuid, currentUserUuid)) {\n\t\t\t\t\tmessageOwner = true;\n\t\t\t\t}\n\t\t\t\tif(!messageOwner) {\n\t\t\t\t\tparticipant = messagingLogic.getMessageParticipant(message.getId(), currentUserUuid);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//prefs and privacy\n\t\t\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(messageFromUuid);\n\t\t\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(messageFromUuid);\n\t\t\t\t\n\t\t\t\t//photo link\n\t\t\t\tAjaxLink<String> photoLink = new AjaxLink<String>(\"photoLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//photo\n\t\t\t\tProfileImage messagePhoto = new ProfileImage(\"messagePhoto\", new Model<String>(messageFromUuid));\n\t\t\t\tmessagePhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tphotoLink.add(messagePhoto);\n\t\t\t\titem.add(photoLink);\n\t\t\t\t\n\t\t\t\t//name link\n\t\t\t\tAjaxLink<String> messageFromLink = new AjaxLink<String>(\"messageFromLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tmessageFromLink.add(new Label(\"messageFromName\", new Model<String>(sakaiProxy.getUserDisplayName(messageFromUuid))));\n\t\t\t\titem.add(messageFromLink);\n\t\t\t\n\t\t\t\t//date\n\t\t\t\titem.add(new Label(\"messageDate\", ProfileUtils.convertDateToString(message.getDatePosted(), ProfileConstants.MESSAGE_DISPLAY_DATE_FORMAT)));\n\t\t\t\t\n\t\t\t\t//subject link\n\t\t\t\tAjaxLink<MessageThread> messageSubjectLink = new AjaxLink<MessageThread>(\"messageSubjectLink\", new Model<MessageThread>(thread)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t//load messageview panel\n\t\t\t\t\t\t//setResponsePage(new MyMessageView(id, currentUserUuid, getModelObject().getId(), getModelObject().getSubject()));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//load MyMessages with some params that will then load a diff tab panel and show this message panel.\n\t\t\t\t\t\tsetResponsePage(new MyMessages(thread.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tmessageSubjectLink.add(new Label(\"messageSubject\", new Model<String>(thread.getSubject())));\n\t\t\t\titem.add(messageSubjectLink);\n\t\t\t\t\n\t\t\t\t//message body\n\t\t\t\titem.add(new Label(\"messageBody\", new Model<String>(StringUtils.abbreviate(message.getMessage(), ProfileConstants.MESSAGE_PREVIEW_MAX_LENGTH))));\n\t\t\t\t\n\t\t\t\t//unread notice for accessibility, off unless its new.\n\t\t\t\tLabel messageUnreadNotice = new Label(\"messageUnreadNotice\", new ResourceModel(\"accessibility.messages.unread\"));\n\t\t\t\tmessageUnreadNotice.setVisible(false);\n\t\t\t\titem.add(messageUnreadNotice);\n\t\t\t\t\n\t\t\t\t//highlight if new, also render accessibility notice\n\t\t\t\tif(!messageOwner && !participant.isRead()) {\n\t\t\t\t\titem.add(new AttributeAppender(\"class\", true, new Model<String>(\"unread-message\"), \" \"));\n\t\t\t\t\tmessageUnreadNotice.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t    }\n\t\t\t\n\t\t};\n\t\tmessageThreadList.setOutputMarkupId(true);\n\t\tmessageThreadList.setItemsPerPage(ProfileConstants.MAX_MESSAGES_PER_PAGE);\n\t\tmessageThreadListContainer.add(messageThreadList);\n\t\tadd(messageThreadListContainer);\n\t\t\n\t\t//pager\n\t\tAjaxPagingNavigator pager = new AjaxPagingNavigator(\"navigator\", messageThreadList);\n\t\tadd(pager);\n\t\n\t\t//initially, if no message threads to show, hide container and pager, set and show label\n\t\tif(numMessages == 0) {\n\t\t\tmessageThreadListContainer.setVisible(false);\n\t\t\tpager.setVisible(false);\n\t\t\t\n\t\t\tnoMessagesLabel.setDefaultModel(new ResourceModel(\"text.messages.none\"));\n\t\t\tnoMessagesLabel.setVisible(true);\n\t\t}\n\t\t\n\t\t//also, if num less than num required for pager, hide it\n\t\tif(numMessages <= ProfileConstants.MAX_MESSAGES_PER_PAGE) {\n\t\t\tpager.setVisible(false);\n\t\t}\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Does the actual rendering of the page\n\t * @param currentUserUuid\n\t * @param threadId\n\t * @param threadSubject\n\t */\n\tprivate void renderMyMessagesView(final String currentUserUuid, final String threadId, final String threadSubject) {\n\t\t\t\t\n\t\t//details container\n\t\tWebMarkupContainer messageDetailsContainer = new WebMarkupContainer(\"messageDetailsContainer\");\n\t\tmessageDetailsContainer.setOutputMarkupId(true);\n\t\t\n\t\t//thread subject\n\t\tLabel threadSubjectLabel = new Label(\"threadSubject\", new Model<String>(threadSubject));\n\t\tmessageDetailsContainer.add(threadSubjectLabel);\n\t\t\n\t\tadd(messageDetailsContainer);\n\t\t\n\t\t//list container\n\t\tmessageListContainer = new WebMarkupContainer(\"messageListContainer\");\n\t\tmessageListContainer.setOutputMarkupId(true);\n\t\t\n\t\t//get our list of messages\n\t\tfinal MessagesDataProvider provider = new MessagesDataProvider(threadId);\n\t\t\n\t\t\n\t\tmessageList = new DataView<Message>(\"messageList\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<Message> item) {\n\t\t        \n\t\t\t\tfinal Message message = (Message)item.getDefaultModelObject();\n\t\t\t\tfinal String messageFromUuid = message.getFrom();\n\t\t\t\t\n\t\t\t\t//we need to know if this message has been read or not so we can style it accordingly\n\t\t\t\t//we only need this if we didn't send the message\n\t\t\t\tMessageParticipant participant = null;\n\t\t\t\t\n\t\t\t\tboolean messageOwner = false;\n\t\t\t\tif(StringUtils.equals(messageFromUuid, currentUserUuid)) {\n\t\t\t\t\tmessageOwner = true;\n\t\t\t\t}\n\t\t\t\tif(!messageOwner) {\n\t\t\t\t\tparticipant = messagingLogic.getMessageParticipant(message.getId(), currentUserUuid);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//prefs and privacy\n\t\t\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(messageFromUuid);\n\t\t\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(messageFromUuid);\n\t\t\t\t\n\t\t\t\t//photo link\n\t\t\t\tAjaxLink<String> photoLink = new AjaxLink<String>(\"photoLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//photo\n\t\t\t\tphotoLink.add(new ProfileImageRenderer(\"messagePhoto\", messageFromUuid, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\t\titem.add(photoLink);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//name link\n\t\t\t\tAjaxLink<String> messageFromLink = new AjaxLink<String>(\"messageFromLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tmessageFromLink.add(new Label(\"messageFromName\", new Model<String>(sakaiProxy.getUserDisplayName(messageFromUuid))));\n\t\t\t\titem.add(messageFromLink);\n\t\t\t\n\t\t\t\t//date\n\t\t\t\titem.add(new Label(\"messageDate\", ProfileUtils.convertDateToString(message.getDatePosted(), ProfileConstants.MESSAGE_DISPLAY_DATE_FORMAT)));\n\t\t\t\t\n\t\t\t\t//message body\n\t\t\t\titem.add(new Label(\"messageBody\", new Model<String>(message.getMessage())));\n\t\t\t\t\n\t\t\t\t//highlight if new, then mark it as read\n\t\t\t\tif(!messageOwner && !participant.isRead()) {\n\t\t\t\t\titem.add(new AttributeAppender(\"class\", true, new Model<String>(\"unread-message\"), \" \"));\n\t\t\t\t\tmessagingLogic.toggleMessageRead(participant, true);\n\t\t\t\t\t\n\t\t\t\t\t//set param for first unread message in the thread\n\t\t\t\t\tif(!lastUnreadSet) {\n\t\t\t\t\t\tlastUnreadSet=true;\n\t\t\t\t\t\titem.add(new AttributeModifier(\"rel\", true, new Model<String>(\"lastUnread\")));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t\t\t\n\t\t    }\n\t\t\t\n\t\t};\n\t\tmessageList.setOutputMarkupId(true);\n\t\tmessageListContainer.add(messageList);\n\t\tadd(messageListContainer);\n\t\t\n\t\t\n\t\t//reply form\n\t\tStringModel stringModel = new StringModel();\n\t\tForm<StringModel> replyForm = new Form<StringModel>(\"replyForm\", new Model<StringModel>(stringModel));\n\t\t\n\t\t//form feedback\n\t\tfinal Label formFeedback = new Label(\"formFeedback\");\n\t\tformFeedback.setOutputMarkupPlaceholderTag(true);\n\t\tadd(formFeedback);\n\t\t\n\t\t//reply field\n\t\treplyForm.add(new Label(\"replyLabel\", new ResourceModel(\"message.reply\")));\n\t\tfinal TextArea<StringModel> replyField = new TextArea<StringModel>(\"replyField\", new PropertyModel<StringModel>(stringModel, \"string\"));\n\t\treplyField.setRequired(true);\n\t\treplyField.setOutputMarkupId(true);\n\t\treplyForm.add(replyField);\n\t\t\n\t\t//reply button\n\t\tIndicatingAjaxButton replyButton = new IndicatingAjaxButton(\"replyButton\", replyForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n        \t\tStringModel stringModel = (StringModel) form.getModelObject();\n        \t\tString reply = stringModel.getString();\n\t\t\t\t\n        \t\t//create a direct link to view this message thread\n\t\t        //String messageLink = sakaiProxy.getDirectUrlToUserProfile(newMessage.getTo(), urlFor(MyMessageView.class, new PageParameters(\"thread=\" + threadId)).toString());\n        \t\t\n        \t\t//send it, get Message back so we can add it to the list\n        \t\tMessage message = messagingLogic.replyToThread(threadId, reply, currentUserUuid);\n        \t\tif(message != null) {\n        \t\t\t//clear this field\n        \t\t\treplyField.setModelObject(null);\n        \t\t\ttarget.addComponent(replyField);\n        \t\t\t\n        \t\t\t//create new item and add it to the list\n        \t\t\t//do we need to register this with the listview?\n        \t\t\tComponent item = buildItem(message);\n        \t\t\ttarget.prependJavascript(String.format(\n                                    \"var item=document.createElement('%s');item.id='%s';Wicket.$('%s').appendChild(item);\",\n                                    \"tr\", item.getMarkupId(), messageListContainer.getMarkupId()));\n        \t\t\ttarget.addComponent(item);\n\n        \t\t\t//repaint the list of messages in this thread\n        \t\t\t//target.addComponent(messageListContainer);\n        \t\t\t\n        \t\t\t//resize\n    \t\t\t\ttarget.appendJavascript(\"setMainFrameHeight(window.name);\");\n        \t\t}\n        \t\t\n            }\n\t\t\t\n\t\t\tprotected void onError(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t//validate\n\t\t\t\tif(!replyField.isValid()) {\n\t\t\t\t\tformFeedback.setDefaultModel(new ResourceModel(\"error.message.required.body\"));\n\t\t\t\t}\n\t\t\t\tformFeedback.add(new AttributeModifier(\"class\", true, new Model<String>(\"alertMessage\")));\t\n\t\t\t\ttarget.addComponent(formFeedback);\n\t\t\t}\n\t\t};\n\t\treplyForm.add(replyButton);\n\t\treplyButton.setModel(new ResourceModel(\"button.message.send\"));\n\t\t\n\t\tadd(replyForm);\n\n\t\t\n\t\t\n\t\t\n\t}","id":100441,"modified_method":"/**\n\t * Does the actual rendering of the page\n\t * @param currentUserUuid\n\t * @param threadId\n\t * @param threadSubject\n\t */\n\tprivate void renderMyMessagesView(final String currentUserUuid, final String threadId, final String threadSubject) {\n\t\t\t\t\n\t\t//details container\n\t\tWebMarkupContainer messageDetailsContainer = new WebMarkupContainer(\"messageDetailsContainer\");\n\t\tmessageDetailsContainer.setOutputMarkupId(true);\n\t\t\n\t\t//thread subject\n\t\tLabel threadSubjectLabel = new Label(\"threadSubject\", new Model<String>(threadSubject));\n\t\tmessageDetailsContainer.add(threadSubjectLabel);\n\t\t\n\t\tadd(messageDetailsContainer);\n\t\t\n\t\t//list container\n\t\tmessageListContainer = new WebMarkupContainer(\"messageListContainer\");\n\t\tmessageListContainer.setOutputMarkupId(true);\n\t\t\n\t\t//get our list of messages\n\t\tfinal MessagesDataProvider provider = new MessagesDataProvider(threadId);\n\t\t\n\t\t\n\t\tmessageList = new DataView<Message>(\"messageList\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<Message> item) {\n\t\t        \n\t\t\t\tfinal Message message = (Message)item.getDefaultModelObject();\n\t\t\t\tfinal String messageFromUuid = message.getFrom();\n\t\t\t\t\n\t\t\t\t//we need to know if this message has been read or not so we can style it accordingly\n\t\t\t\t//we only need this if we didn't send the message\n\t\t\t\tMessageParticipant participant = null;\n\t\t\t\t\n\t\t\t\tboolean messageOwner = false;\n\t\t\t\tif(StringUtils.equals(messageFromUuid, currentUserUuid)) {\n\t\t\t\t\tmessageOwner = true;\n\t\t\t\t}\n\t\t\t\tif(!messageOwner) {\n\t\t\t\t\tparticipant = messagingLogic.getMessageParticipant(message.getId(), currentUserUuid);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//prefs and privacy\n\t\t\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(messageFromUuid);\n\t\t\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(messageFromUuid);\n\t\t\t\t\n\t\t\t\t//photo link\n\t\t\t\tAjaxLink<String> photoLink = new AjaxLink<String>(\"photoLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//photo\n\t\t\t\tProfileImage messagePhoto = new ProfileImage(\"messagePhoto\", new Model<String>(messageFromUuid));\n\t\t\t\tmessagePhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tphotoLink.add(messagePhoto);\n\t\t\t\titem.add(photoLink);\t\t\t\t\n\t\t\t\t\n\t\t\t\t//name link\n\t\t\t\tAjaxLink<String> messageFromLink = new AjaxLink<String>(\"messageFromLink\", new Model<String>(messageFromUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tmessageFromLink.add(new Label(\"messageFromName\", new Model<String>(sakaiProxy.getUserDisplayName(messageFromUuid))));\n\t\t\t\titem.add(messageFromLink);\n\t\t\t\n\t\t\t\t//date\n\t\t\t\titem.add(new Label(\"messageDate\", ProfileUtils.convertDateToString(message.getDatePosted(), ProfileConstants.MESSAGE_DISPLAY_DATE_FORMAT)));\n\t\t\t\t\n\t\t\t\t//message body\n\t\t\t\titem.add(new Label(\"messageBody\", new Model<String>(message.getMessage())));\n\t\t\t\t\n\t\t\t\t//highlight if new, then mark it as read\n\t\t\t\tif(!messageOwner && !participant.isRead()) {\n\t\t\t\t\titem.add(new AttributeAppender(\"class\", true, new Model<String>(\"unread-message\"), \" \"));\n\t\t\t\t\tmessagingLogic.toggleMessageRead(participant, true);\n\t\t\t\t\t\n\t\t\t\t\t//set param for first unread message in the thread\n\t\t\t\t\tif(!lastUnreadSet) {\n\t\t\t\t\t\tlastUnreadSet=true;\n\t\t\t\t\t\titem.add(new AttributeModifier(\"rel\", true, new Model<String>(\"lastUnread\")));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t\t\t\n\t\t    }\n\t\t\t\n\t\t};\n\t\tmessageList.setOutputMarkupId(true);\n\t\tmessageListContainer.add(messageList);\n\t\tadd(messageListContainer);\n\t\t\n\t\t\n\t\t//reply form\n\t\tStringModel stringModel = new StringModel();\n\t\tForm<StringModel> replyForm = new Form<StringModel>(\"replyForm\", new Model<StringModel>(stringModel));\n\t\t\n\t\t//form feedback\n\t\tfinal Label formFeedback = new Label(\"formFeedback\");\n\t\tformFeedback.setOutputMarkupPlaceholderTag(true);\n\t\tadd(formFeedback);\n\t\t\n\t\t//reply field\n\t\treplyForm.add(new Label(\"replyLabel\", new ResourceModel(\"message.reply\")));\n\t\tfinal TextArea<StringModel> replyField = new TextArea<StringModel>(\"replyField\", new PropertyModel<StringModel>(stringModel, \"string\"));\n\t\treplyField.setRequired(true);\n\t\treplyField.setOutputMarkupId(true);\n\t\treplyForm.add(replyField);\n\t\t\n\t\t//reply button\n\t\tIndicatingAjaxButton replyButton = new IndicatingAjaxButton(\"replyButton\", replyForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n        \t\tStringModel stringModel = (StringModel) form.getModelObject();\n        \t\tString reply = stringModel.getString();\n\t\t\t\t\n        \t\t//create a direct link to view this message thread\n\t\t        //String messageLink = sakaiProxy.getDirectUrlToUserProfile(newMessage.getTo(), urlFor(MyMessageView.class, new PageParameters(\"thread=\" + threadId)).toString());\n        \t\t\n        \t\t//send it, get Message back so we can add it to the list\n        \t\tMessage message = messagingLogic.replyToThread(threadId, reply, currentUserUuid);\n        \t\tif(message != null) {\n        \t\t\t//clear this field\n        \t\t\treplyField.setModelObject(null);\n        \t\t\ttarget.addComponent(replyField);\n        \t\t\t\n        \t\t\t//create new item and add it to the list\n        \t\t\t//do we need to register this with the listview?\n        \t\t\tComponent item = buildItem(message);\n        \t\t\ttarget.prependJavascript(String.format(\n                                    \"var item=document.createElement('%s');item.id='%s';Wicket.$('%s').appendChild(item);\",\n                                    \"tr\", item.getMarkupId(), messageListContainer.getMarkupId()));\n        \t\t\ttarget.addComponent(item);\n\n        \t\t\t//repaint the list of messages in this thread\n        \t\t\t//target.addComponent(messageListContainer);\n        \t\t\t\n        \t\t\t//resize\n    \t\t\t\ttarget.appendJavascript(\"setMainFrameHeight(window.name);\");\n        \t\t}\n        \t\t\n            }\n\t\t\t\n\t\t\tprotected void onError(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t//validate\n\t\t\t\tif(!replyField.isValid()) {\n\t\t\t\t\tformFeedback.setDefaultModel(new ResourceModel(\"error.message.required.body\"));\n\t\t\t\t}\n\t\t\t\tformFeedback.add(new AttributeModifier(\"class\", true, new Model<String>(\"alertMessage\")));\t\n\t\t\t\ttarget.addComponent(formFeedback);\n\t\t\t}\n\t\t};\n\t\treplyForm.add(replyButton);\n\t\treplyButton.setModel(new ResourceModel(\"button.message.send\"));\n\t\t\n\t\tadd(replyForm);\n\n\t\t\n\t\t\n\t\t\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private Component buildItem(Message message){\n        WebMarkupContainer item = new WebMarkupContainer(messageList.newChildId());\n        item.setOutputMarkupId(true);\n        messageList.add(item);\n       \n        ProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(message.getFrom());\n        \n        //photo and link\n\t\titem.add(new AjaxLink<String>(\"photoLink\", new Model<String>(message.getFrom())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t\t\n\t\t}.add(new ProfileImageRenderer(\"messagePhoto\", message.getFrom(), prefs, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false)));\n\t\t\n\t\t//name link\n\t\titem.add(new AjaxLink<String>(\"messageFromLink\", new Model<String>(message.getFrom())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t}.add(new Label(\"messageFromName\", new Model<String>(sakaiProxy.getUserDisplayName(message.getFrom())))));\n\t\n\t\t//date\n\t\titem.add(new Label(\"messageDate\", ProfileUtils.convertDateToString(message.getDatePosted(), ProfileConstants.MESSAGE_DISPLAY_DATE_FORMAT)));\n\t\t\n\t\t//message body\n\t\titem.add(new Label(\"messageBody\", new Model<String>(message.getMessage())));\n\t\t\n        return item;\n    }","id":100442,"modified_method":"private Component buildItem(Message message){\n        WebMarkupContainer item = new WebMarkupContainer(messageList.newChildId());\n        item.setOutputMarkupId(true);\n        messageList.add(item);\n       \n        ProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(message.getFrom());\n        \n        //photo and link\n\t\titem.add(new AjaxLink<String>(\"photoLink\", new Model<String>(message.getFrom())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\t//image\n\t\tProfileImage messagePhoto = new ProfileImage(\"messagePhoto\", new Model<String>(message.getFrom()));\n\t\tmessagePhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\titem.add(messagePhoto);\n\t\t\n\t\t//name link\n\t\titem.add(new AjaxLink<String>(\"messageFromLink\", new Model<String>(message.getFrom())) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t}.add(new Label(\"messageFromName\", new Model<String>(sakaiProxy.getUserDisplayName(message.getFrom())))));\n\t\n\t\t//date\n\t\titem.add(new Label(\"messageDate\", ProfileUtils.convertDateToString(message.getDatePosted(), ProfileConstants.MESSAGE_DISPLAY_DATE_FORMAT)));\n\t\t\n\t\t//message body\n\t\titem.add(new Label(\"messageBody\", new Model<String>(message.getMessage())));\n\t\t\n        return item;\n    }","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Does the actual rendering of the page\n\t * @param userUuid\n\t */\n\tprivate void renderMyProfile(final String userUuid) {\n\t\t\n\t\t//don't do this for super users viewing other people's profiles as otherwise there is no way back to own profile\n\t\tif(!sakaiProxy.isSuperUserAndProxiedToUser(userUuid)) {\n\t\t\tdisableLink(myProfileLink);\n\t\t}\n\t\t\n\t\t//add the feedback panel for any error messages\n\t\tFeedbackPanel feedbackPanel = new FeedbackPanel(\"feedbackPanel\");\n\t\tadd(feedbackPanel);\n\t\tfeedbackPanel.setVisible(false); //hide by default\n\t\t\n\t\t//get the prefs record, or a default if none exists yet\n\t\tfinal ProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userUuid);\n\t\t\n\t\t//if null, throw exception\n\t\tif(prefs == null) {\n\t\t\tthrow new ProfilePreferencesNotDefinedException(\"Couldn't create default preferences record for \" + userUuid);\n\t\t}\n\t\t\n\t\t//get SakaiPerson for this user\n\t\tSakaiPerson sakaiPerson = sakaiProxy.getSakaiPerson(userUuid);\n\t\t//if null, create one \n\t\tif(sakaiPerson == null) {\n\t\t\tlog.warn(\"No SakaiPerson for \" + userUuid + \". Creating one.\");\n\t\t\tsakaiPerson = sakaiProxy.createSakaiPerson(userUuid);\n\t\t\t//if its still null, throw exception\n\t\t\tif(sakaiPerson == null) {\n\t\t\t\tthrow new ProfileNotDefinedException(\"Couldn't create a SakaiPerson for \" + userUuid);\n\t\t\t}\n\t\t\t//post create event\n\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_PROFILE_NEW, userUuid, true);\n\t\t} \n\t\t\n\t\t//post view event\n\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_PROFILE_VIEW_OWN, \"/profile/\"+userUuid, false);\n\n\t\t//get some values from SakaiPerson or SakaiProxy if empty\n\t\t//SakaiPerson returns NULL strings if value is not set, not blank ones\n\t\n\t\t//these must come from Account to keep it all in sync\n\t\t//we *could* get a User object here and get the values.\n\t\tString userDisplayName = sakaiProxy.getUserDisplayName(userUuid);\n\t\t/*\n\t\tString userFirstName = sakaiProxy.getUserFirstName(userId);\n\t\tString userLastName = sakaiProxy.getUserLastName(userId);\n\t\t*/\n\n\t\tString userEmail = sakaiProxy.getUserEmail(userUuid);\n\t\t\n\t\t//create instance of the UserProfile class\n\t\t//we then pass the userProfile in the constructor to the child panels\n\t\tfinal UserProfile userProfile = new UserProfile();\n\t\t\t\t\n\t\t//get rest of values from SakaiPerson and setup UserProfile\n\t\tuserProfile.setUserUuid(userUuid);\n\t\t\n\t\tuserProfile.setNickname(sakaiPerson.getNickname());\n\t\tuserProfile.setDateOfBirth(sakaiPerson.getDateOfBirth());\n\t\tuserProfile.setDisplayName(userDisplayName);\n\t\t//userProfile.setFirstName(userFirstName);\n\t\t//userProfile.setLastName(userLastName);\n\t\t//userProfile.setMiddleName(sakaiPerson.getInitials());\n\t\t\n\t\tuserProfile.setEmail(userEmail);\n\t\tuserProfile.setHomepage(sakaiPerson.getLabeledURI());\n\t\tuserProfile.setHomephone(sakaiPerson.getHomePhone());\n\t\tuserProfile.setWorkphone(sakaiPerson.getTelephoneNumber());\n\t\tuserProfile.setMobilephone(sakaiPerson.getMobile());\n\t\tuserProfile.setFacsimile(sakaiPerson.getFacsimileTelephoneNumber());\n\t\t\n\t\tuserProfile.setDepartment(sakaiPerson.getOrganizationalUnit());\n\t\tuserProfile.setPosition(sakaiPerson.getTitle());\n\t\tuserProfile.setSchool(sakaiPerson.getCampus());\n\t\tuserProfile.setRoom(sakaiPerson.getRoomNumber());\n\t\t\n\t\tuserProfile.setCourse(sakaiPerson.getEducationCourse());\n\t\tuserProfile.setSubjects(sakaiPerson.getEducationSubjects());\n\t\t\n\t\tuserProfile.setStaffProfile(sakaiPerson.getStaffProfile());\n\t\tuserProfile.setAcademicProfileUrl(sakaiPerson.getAcademicProfileUrl());\n\t\tuserProfile.setUniversityProfileUrl(sakaiPerson.getUniversityProfileUrl());\n\t\tuserProfile.setPublications(sakaiPerson.getPublications());\n\t\t\n\t\t// business fields\n\t\tuserProfile.setBusinessBiography(sakaiPerson.getBusinessBiography());\n\t\tuserProfile.setCompanyProfiles(profileLogic.getCompanyProfiles(userUuid));\n\t\t\n\t\tuserProfile.setFavouriteBooks(sakaiPerson.getFavouriteBooks());\n\t\tuserProfile.setFavouriteTvShows(sakaiPerson.getFavouriteTvShows());\n\t\tuserProfile.setFavouriteMovies(sakaiPerson.getFavouriteMovies());\n\t\tuserProfile.setFavouriteQuotes(sakaiPerson.getFavouriteQuotes());\n\t\tuserProfile.setPersonalSummary(sakaiPerson.getNotes());\n\t\t\n\t\t// social networking fields\n\t\tSocialNetworkingInfo socialInfo = profileLogic.getSocialNetworkingInfo(userProfile.getUserUuid());\n\t\tif(socialInfo == null){\n\t\t\tsocialInfo = new SocialNetworkingInfo();\n\t\t}\n\t\tuserProfile.setSocialInfo(socialInfo);\n\t\t\n\t\t//PRFL-97 workaround. SakaiPerson table needs to be upgraded so locked is not null, but this handles it if not upgraded.\n\t\tif(sakaiPerson.getLocked() == null) {\n\t\t\tuserProfile.setLocked(false);\n\t\t\tthis.setLocked(false);\n\t\t} else {\n\t\t\tthis.setLocked(sakaiPerson.getLocked());\n\t\t\tuserProfile.setLocked(this.isLocked());\n\t\t}\n\t\t\n\t\n\t\t//what type of picture changing method do we use?\n\t\tint profilePictureType = sakaiProxy.getProfilePictureType();\n\t\t\n\t\t//change picture panel (upload or url depending on property)\n\t\tfinal Panel changePicture;\n\t\t\n\t\t//render appropriate panel with appropriate constructor ie if superUser etc\n\t\tif(profilePictureType == ProfileConstants.PICTURE_SETTING_UPLOAD) {\n\t\t\t\n\t\t\tif(sakaiProxy.isSuperUserAndProxiedToUser(userUuid)){\n\t\t\t\tchangePicture = new ChangeProfilePictureUpload(\"changePicture\", userUuid);\n\t\t\t} else {\n\t\t\t\tchangePicture = new ChangeProfilePictureUpload(\"changePicture\");\n\t\t\t}\n\t\t} else if (profilePictureType == ProfileConstants.PICTURE_SETTING_URL) {\n\t\t\tif(sakaiProxy.isSuperUserAndProxiedToUser(userUuid)){\n\t\t\t\tchangePicture = new ChangeProfilePictureUrl(\"changePicture\", userUuid);\n\t\t\t} else {\n\t\t\t\tchangePicture = new ChangeProfilePictureUrl(\"changePicture\");\n\t\t\t}\n\t\t} else if (profilePictureType == ProfileConstants.PICTURE_SETTING_OFFICIAL) {\n\t\t\t//cannot edit anything if using official images\n\t\t\tchangePicture = new EmptyPanel(\"changePicture\");\n\t\t} else {\t\n\t\t\t//no valid option for changing picture was returned from the Profile2 API.\n\t\t\tlog.error(\"Invalid picture type returned: \" + profilePictureType);\n\t\t\tchangePicture = new EmptyPanel(\"changePicture\");\n\t\t}\n\t\tchangePicture.setOutputMarkupPlaceholderTag(true);\n\t\tchangePicture.setVisible(false);\n\t\tadd(changePicture);\n\t\t\n\t\t//add the current picture\n\t\tadd(new ProfileImageRenderer(\"photo\", userUuid, prefs));\n\t\t\n\t\t//change profile image button\n\t\tAjaxLink<Void> changePictureLink = new AjaxLink<Void>(\"changePictureLink\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\n\t\t\t\t//show the panel\n\t\t\t\tchangePicture.setVisible(true);\n\t\t\t\ttarget.addComponent(changePicture);\n\t\t\t\t\n\t\t\t\t//resize iframe to fit it\n\t\t\t\ttarget.appendJavascript(\"resizeFrame('grow');\");\n\t\t\t}\n\t\t\t\t\t\t\n\t\t};\n\t\tchangePictureLink.add(new Label(\"changePictureLabel\", new ResourceModel(\"link.change.profile.picture\")));\n\t\t\n\t\t//is picture changing disabled? (property, or locked)\n\t\tif((!sakaiProxy.isProfilePictureChangeEnabled() || userProfile.isLocked()) && !sakaiProxy.isSuperUser()) {\n\t\t\tchangePictureLink.setEnabled(false);\n\t\t\tchangePictureLink.setVisible(false);\n\t\t}\n\t\t\n\t\t//if using official images, is the user allowed to select an alternate?\n\t\t//or have they specified the official image in their preferences.\n\t\tif(sakaiProxy.isOfficialImageEnabledGlobally() && (!sakaiProxy.isUsingOfficialImageButAlternateSelectionEnabled() || prefs.isUseOfficialImage())) {\n\t\t\tchangePictureLink.setEnabled(false);\n\t\t\tchangePictureLink.setVisible(false);\n\t\t}\n\t\t\n\t\t\n\t\tadd(changePictureLink);\n\t\t\n\t\t\n\t\t/* SIDELINKS */\n\t\tWebMarkupContainer sideLinks = new WebMarkupContainer(\"sideLinks\");\n\t\tint visibleSideLinksCount = 0;\n\t\t\n\t\t//ADMIN: ADD AS CONNECTION\n\t\tif(sakaiProxy.isSuperUserAndProxiedToUser(userUuid)) {\n\t\t\t\n\t\t\t//init\n\t\t\tboolean friend = false;\n\t\t\tboolean friendRequestToThisPerson = false;\n\t\t\tboolean friendRequestFromThisPerson = false;\n\t\t\tString currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t\tString nickname = userProfile.getNickname();\n\t\t\tif(StringUtils.isBlank(nickname)) {\n\t\t\t\tnickname=\"\";\n\t\t\t}\n\n\t\t\t//setup model to store the actions in the modal windows\n\t\t\tfinal FriendAction friendActionModel = new FriendAction();\n\n\t\t\t//setup friend status\n\t\t\tfriend = connectionsLogic.isUserXFriendOfUserY(userUuid, currentUserUuid);\n\t\t\tif(!friend) {\n\t\t\t\tfriendRequestToThisPerson = connectionsLogic.isFriendRequestPending(currentUserUuid, userUuid);\n\t\t\t}\n\t\t\tif(!friend && !friendRequestToThisPerson) {\n\t\t\t\tfriendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userUuid, currentUserUuid);\n\t\t\t}\n\t\t\t\n\t\t\tWebMarkupContainer addFriendContainer = new WebMarkupContainer(\"addFriendContainer\");\n\t\t\tfinal ModalWindow addFriendWindow = new ModalWindow(\"addFriendWindow\");\n\n\t\t\t//link\n\t\t\tfinal AjaxLink<Void> addFriendLink = new AjaxLink<Void>(\"addFriendLink\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t    \t\t\taddFriendWindow.show(target);\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal Label addFriendLabel = new Label(\"addFriendLabel\");\n\t\t\taddFriendLink.add(addFriendLabel);\n\t\t\taddFriendContainer.add(addFriendLink);\n\t\t\t\n\t\t\t//setup link/label and windows\n\t\t\tif(friend) {\n\t\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.confirmed\"));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-confirmed\")));\n\t\t\t\taddFriendLink.setEnabled(false);\n\t\t\t} else if (friendRequestToThisPerson) {\n\t\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\taddFriendLink.setEnabled(false);\n\t\t\t} else if (friendRequestFromThisPerson) {\n\t\t\t\t//TODO (confirm pending friend request link)\n\t\t\t\t//could be done by setting the content off the addFriendWindow.\n\t\t\t\t//will need to rename some links to make more generic and set the onClick and setContent in here for link and window\n\t\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.pending\"));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\taddFriendLink.setEnabled(false);\n\t\t\t}  else {\n\t\t\t\taddFriendLabel.setDefaultModel(new StringResourceModel(\"link.friend.add.name\", null, new Object[]{ nickname } ));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"icon connection-add\")));\n\t\t\t\taddFriendWindow.setContent(new AddFriend(addFriendWindow.getContentId(), addFriendWindow, friendActionModel, currentUserUuid, userUuid)); \n\t\t\t}\n\t\t\t\n\t\t\tsideLinks.add(addFriendContainer);\n\t\t\n\t\t\t//ADD FRIEND MODAL WINDOW HANDLER \n\t\t\taddFriendWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t            \tif(friendActionModel.isRequested()) { \n\t            \t\t//friend was successfully requested, update label and link\n\t            \t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t            \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction\")));\n\t            \t\taddFriendLink.setEnabled(false);\n\t            \t\ttarget.addComponent(addFriendLink);\n\t            \t}\n\t            }\n\t        });\n\t\t\t\n\t\t\tadd(addFriendWindow);\n\t\t\n\t\t\tvisibleSideLinksCount++;\n\t\t\t\n\t\t\t\n\t\t\t//ADMIN: LOCK/UNLOCK A PROFILE\n\t\t\tWebMarkupContainer lockProfileContainer = new WebMarkupContainer(\"lockProfileContainer\");\n\t\t\tfinal Label lockProfileLabel = new Label(\"lockProfileLabel\");\n\t\t\t\n\t\t\tfinal AjaxLink<Void> lockProfileLink = new AjaxLink<Void>(\"lockProfileLink\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t//toggle it to be opposite of what it currently is, update labels and icons\n\t\t\t\t\tboolean locked = isLocked();\n\t    \t\t\tif(sakaiProxy.toggleProfileLocked(userUuid, !locked)) {\n\t    \t\t\t\tsetLocked(!locked);\n\t    \t\t\t\tlog.info(\"MyProfile(): SuperUser toggled lock status of profile for \" + userUuid + \" to \" + !locked);\n\t    \t\t\t\tlockProfileLabel.setDefaultModel(new ResourceModel(\"link.profile.locked.\" + isLocked()));\n\t    \t\t\t\tadd(new AttributeModifier(\"title\", true, new ResourceModel(\"text.profile.locked.\" + isLocked())));\n\t    \t\t\t\tif(isLocked()){\n\t    \t\t\t\t\tadd(new AttributeModifier(\"class\", true, new Model<String>(\"icon locked\")));\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\tadd(new AttributeModifier(\"class\", true, new Model<String>(\"icon unlocked\")));\n\t    \t\t\t\t}\n\t    \t\t\t\ttarget.addComponent(this);\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t//set init icon for locked\n\t\t\tif(isLocked()){\n\t\t\t\tlockProfileLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"icon locked\")));\n\t\t\t} else {\n\t\t\t\tlockProfileLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"icon unlocked\")));\n\t\t\t}\n\t\t\t\n\t\t\tlockProfileLink.add(lockProfileLabel);\n\t\t\t\t\t\n\t\t\t//setup link/label and windows with special property based on locked status\n\t\t\tlockProfileLabel.setDefaultModel(new ResourceModel(\"link.profile.locked.\" + isLocked()));\n\t\t\tlockProfileLink.add(new AttributeModifier(\"title\", true, new ResourceModel(\"text.profile.locked.\" + isLocked())));\n\t\t\t\n\t\t\tlockProfileContainer.add(lockProfileLink);\n\t\t\t\n\t\t\tsideLinks.add(lockProfileContainer);\n\t\t\t\n\t\t\tvisibleSideLinksCount++;\n\n\t\t\t\n\t\t} else {\n\t\t\t//blank components\n\t\t\tWebMarkupContainer addFriendContainer = new WebMarkupContainer(\"addFriendContainer\");\n\t\t\taddFriendContainer.add(new AjaxLink(\"addFriendLink\") {\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {}\n\t\t\t}).add(new Label(\"addFriendLabel\"));\n\t\t\tsideLinks.add(addFriendContainer);\n\t\t\tadd(new WebMarkupContainer(\"addFriendWindow\"));\n\t\t\t\n\t\t\tWebMarkupContainer lockProfileContainer = new WebMarkupContainer(\"lockProfileContainer\");\n\t\t\tlockProfileContainer.add(new AjaxLink(\"lockProfileLink\") {\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {}\n\t\t\t}).add(new Label(\"lockProfileLabel\"));\n\t\t\tsideLinks.add(lockProfileContainer);\n\t\t}\n\t\t\n\t\t\n\t\t//hide entire list if no links to show\n\t\tif(visibleSideLinksCount == 0) {\n\t\t\tsideLinks.setVisible(false);\n\t\t}\n\t\t\n\t\tadd(sideLinks);\n\t\t\n\t\t\n\t\t//status panel\n\t\tPanel myStatusPanel = new MyStatusPanel(\"myStatusPanel\", userProfile);\n\t\tadd(myStatusPanel);\n\t\t\n\t\tList<ITab> tabs = new ArrayList<ITab>();\n\t\t\n\t\tAjaxTabbedPanel tabbedPanel = new AjaxTabbedPanel(\"myProfileTabs\", tabs) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t// overridden so we can add tooltips to tabs\n\t\t\t@Override\n\t\t\tprotected WebMarkupContainer newLink(String linkId, final int index) {\n\t\t\t\tWebMarkupContainer link = super.newLink(linkId, index);\n\t\t\t\t\n\t\t\t\tif (ProfileConstants.TAB_INDEX_PROFILE == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.profile.tooltip\")));\n\t\t\t\t\t\n\t\t\t\t} else if (ProfileConstants.TAB_INDEX_WALL == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.wall.tooltip\")));\t\n\t\t\t\t}\n\t\t\t\treturn link;\n\t\t\t}\n\t\t};\n\t\t\n\t\tCookie tabCookie = getWebRequestCycle().getWebRequest().getCookie(ProfileConstants.TAB_COOKIE);\n\t\t\n\t\tif (sakaiProxy.isProfileFieldsEnabled()) {\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.profile\")) {\n\t\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\t\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_PROFILE);\n\t\t\t\t\tMyProfilePanelState panelState = new MyProfilePanelState();\n\t\t\t\t\tpanelState.showBusinessDisplay = sakaiProxy.isBusinessProfileEnabled();\n\t\t\t\t\tpanelState.showSocialNetworkingDisplay = sakaiProxy.isSocialProfileEnabled();\n\t\t\t\t\tpanelState.showInterestsDisplay = sakaiProxy.isInterestsProfileEnabled();\n\t\t\t\t\tpanelState.showStaffDisplay = sakaiProxy.isStaffProfileEnabled();\n\t\t\t\t\tpanelState.showStudentDisplay = sakaiProxy.isStudentProfileEnabled();\n\t\t\t\t\treturn new MyProfilePanel(panelId, userProfile,panelState);\n\t\t\t\t}\n\t\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (true == sakaiProxy.isWallEnabledGlobally()) {\n\t\t\t\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.wall\")) {\n\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t\t\tif (true == sakaiProxy.isSuperUser()) {\n\t\t\t\t\t\treturn new MyWallPanel(panelId, userUuid);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new MyWallPanel(panelId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (true == sakaiProxy.isWallDefaultProfilePage() && null == tabCookie) {\n\t\t\t\t\n\t\t\t\ttabbedPanel.setSelectedTab(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != tabCookie) {\n\t\t\ttry {\n\t\t\t\ttabbedPanel.setSelectedTab(Integer.parseInt(tabCookie.getValue()));\n\t\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t\t//do nothing. This will be thrown if the cookie contains a value > the number of tabs but thats ok.\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd(tabbedPanel);\n\t\t\n\t\t//kudos panel\n\t\tadd(new AjaxLazyLoadPanel(\"myKudos\"){\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\tif(prefs.isShowKudos()){\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tint score = kudosLogic.getKudos(userUuid);\n\t\t\t\t\tif(score > 0) {\n\t\t\t\t\t\treturn new KudosPanel(markupId, userUuid, userUuid, score);\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\treturn new EmptyPanel(markupId);\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t//friends feed panel for self - lazy loaded\n\t\tadd(new NotifyingAjaxLazyLoadPanel(\"friendsFeed\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n            public Component getLazyLoadComponent(String markupId) {\n            \treturn new FriendsFeed(markupId, userUuid, userUuid);\n            }\n\n\t\t\t@Override\n\t\t\tpublic void renderHead(IHeaderResponse response) {\n\t\t\t\tresponse.renderOnDomReadyJavascript(\"resizeFrame('grow');\");\n\t\t\t}\n        });\n        \t\n        \t\n\t\t//gallery feed panel\n\t\tadd(new NotifyingAjaxLazyLoadPanel(\"galleryFeed\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\tif (sakaiProxy.isProfileGalleryEnabledGlobally() && prefs.isShowGalleryFeed()) {\n\t\t\t\t\treturn new GalleryFeed(markupId, userUuid, userUuid)\n\t\t\t\t\t\t\t.setOutputMarkupId(true);\n\t\t\t\t} else {\n\t\t\t\t\treturn new EmptyPanel(markupId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void renderHead(IHeaderResponse response) {\n\t\t\t\tresponse.renderOnDomReadyJavascript(\"resizeFrame('grow');\");\n\t\t\t}\n\t\t\t\n\t\t});\n\t}","id":100443,"modified_method":"/**\n\t * Does the actual rendering of the page\n\t * @param userUuid\n\t */\n\tprivate void renderMyProfile(final String userUuid) {\n\t\t\n\t\t//don't do this for super users viewing other people's profiles as otherwise there is no way back to own profile\n\t\tif(!sakaiProxy.isSuperUserAndProxiedToUser(userUuid)) {\n\t\t\tdisableLink(myProfileLink);\n\t\t}\n\t\t\n\t\t//add the feedback panel for any error messages\n\t\tFeedbackPanel feedbackPanel = new FeedbackPanel(\"feedbackPanel\");\n\t\tadd(feedbackPanel);\n\t\tfeedbackPanel.setVisible(false); //hide by default\n\t\t\n\t\t//get the prefs record, or a default if none exists yet\n\t\tfinal ProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userUuid);\n\t\t\n\t\t//if null, throw exception\n\t\tif(prefs == null) {\n\t\t\tthrow new ProfilePreferencesNotDefinedException(\"Couldn't create default preferences record for \" + userUuid);\n\t\t}\n\t\t\n\t\t//get SakaiPerson for this user\n\t\tSakaiPerson sakaiPerson = sakaiProxy.getSakaiPerson(userUuid);\n\t\t//if null, create one \n\t\tif(sakaiPerson == null) {\n\t\t\tlog.warn(\"No SakaiPerson for \" + userUuid + \". Creating one.\");\n\t\t\tsakaiPerson = sakaiProxy.createSakaiPerson(userUuid);\n\t\t\t//if its still null, throw exception\n\t\t\tif(sakaiPerson == null) {\n\t\t\t\tthrow new ProfileNotDefinedException(\"Couldn't create a SakaiPerson for \" + userUuid);\n\t\t\t}\n\t\t\t//post create event\n\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_PROFILE_NEW, userUuid, true);\n\t\t} \n\t\t\n\t\t//post view event\n\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_PROFILE_VIEW_OWN, \"/profile/\"+userUuid, false);\n\n\t\t//get some values from SakaiPerson or SakaiProxy if empty\n\t\t//SakaiPerson returns NULL strings if value is not set, not blank ones\n\t\n\t\t//these must come from Account to keep it all in sync\n\t\t//we *could* get a User object here and get the values.\n\t\tString userDisplayName = sakaiProxy.getUserDisplayName(userUuid);\n\t\t/*\n\t\tString userFirstName = sakaiProxy.getUserFirstName(userId);\n\t\tString userLastName = sakaiProxy.getUserLastName(userId);\n\t\t*/\n\n\t\tString userEmail = sakaiProxy.getUserEmail(userUuid);\n\t\t\n\t\t//create instance of the UserProfile class\n\t\t//we then pass the userProfile in the constructor to the child panels\n\t\tfinal UserProfile userProfile = new UserProfile();\n\t\t\t\t\n\t\t//get rest of values from SakaiPerson and setup UserProfile\n\t\tuserProfile.setUserUuid(userUuid);\n\t\t\n\t\tuserProfile.setNickname(sakaiPerson.getNickname());\n\t\tuserProfile.setDateOfBirth(sakaiPerson.getDateOfBirth());\n\t\tuserProfile.setDisplayName(userDisplayName);\n\t\t//userProfile.setFirstName(userFirstName);\n\t\t//userProfile.setLastName(userLastName);\n\t\t//userProfile.setMiddleName(sakaiPerson.getInitials());\n\t\t\n\t\tuserProfile.setEmail(userEmail);\n\t\tuserProfile.setHomepage(sakaiPerson.getLabeledURI());\n\t\tuserProfile.setHomephone(sakaiPerson.getHomePhone());\n\t\tuserProfile.setWorkphone(sakaiPerson.getTelephoneNumber());\n\t\tuserProfile.setMobilephone(sakaiPerson.getMobile());\n\t\tuserProfile.setFacsimile(sakaiPerson.getFacsimileTelephoneNumber());\n\t\t\n\t\tuserProfile.setDepartment(sakaiPerson.getOrganizationalUnit());\n\t\tuserProfile.setPosition(sakaiPerson.getTitle());\n\t\tuserProfile.setSchool(sakaiPerson.getCampus());\n\t\tuserProfile.setRoom(sakaiPerson.getRoomNumber());\n\t\t\n\t\tuserProfile.setCourse(sakaiPerson.getEducationCourse());\n\t\tuserProfile.setSubjects(sakaiPerson.getEducationSubjects());\n\t\t\n\t\tuserProfile.setStaffProfile(sakaiPerson.getStaffProfile());\n\t\tuserProfile.setAcademicProfileUrl(sakaiPerson.getAcademicProfileUrl());\n\t\tuserProfile.setUniversityProfileUrl(sakaiPerson.getUniversityProfileUrl());\n\t\tuserProfile.setPublications(sakaiPerson.getPublications());\n\t\t\n\t\t// business fields\n\t\tuserProfile.setBusinessBiography(sakaiPerson.getBusinessBiography());\n\t\tuserProfile.setCompanyProfiles(profileLogic.getCompanyProfiles(userUuid));\n\t\t\n\t\tuserProfile.setFavouriteBooks(sakaiPerson.getFavouriteBooks());\n\t\tuserProfile.setFavouriteTvShows(sakaiPerson.getFavouriteTvShows());\n\t\tuserProfile.setFavouriteMovies(sakaiPerson.getFavouriteMovies());\n\t\tuserProfile.setFavouriteQuotes(sakaiPerson.getFavouriteQuotes());\n\t\tuserProfile.setPersonalSummary(sakaiPerson.getNotes());\n\t\t\n\t\t// social networking fields\n\t\tSocialNetworkingInfo socialInfo = profileLogic.getSocialNetworkingInfo(userProfile.getUserUuid());\n\t\tif(socialInfo == null){\n\t\t\tsocialInfo = new SocialNetworkingInfo();\n\t\t}\n\t\tuserProfile.setSocialInfo(socialInfo);\n\t\t\n\t\t//PRFL-97 workaround. SakaiPerson table needs to be upgraded so locked is not null, but this handles it if not upgraded.\n\t\tif(sakaiPerson.getLocked() == null) {\n\t\t\tuserProfile.setLocked(false);\n\t\t\tthis.setLocked(false);\n\t\t} else {\n\t\t\tthis.setLocked(sakaiPerson.getLocked());\n\t\t\tuserProfile.setLocked(this.isLocked());\n\t\t}\n\t\t\n\t\n\t\t//what type of picture changing method do we use?\n\t\tint profilePictureType = sakaiProxy.getProfilePictureType();\n\t\t\n\t\t//change picture panel (upload or url depending on property)\n\t\tfinal Panel changePicture;\n\t\t\n\t\t//render appropriate panel with appropriate constructor ie if superUser etc\n\t\tif(profilePictureType == ProfileConstants.PICTURE_SETTING_UPLOAD) {\n\t\t\t\n\t\t\tif(sakaiProxy.isSuperUserAndProxiedToUser(userUuid)){\n\t\t\t\tchangePicture = new ChangeProfilePictureUpload(\"changePicture\", userUuid);\n\t\t\t} else {\n\t\t\t\tchangePicture = new ChangeProfilePictureUpload(\"changePicture\");\n\t\t\t}\n\t\t} else if (profilePictureType == ProfileConstants.PICTURE_SETTING_URL) {\n\t\t\tif(sakaiProxy.isSuperUserAndProxiedToUser(userUuid)){\n\t\t\t\tchangePicture = new ChangeProfilePictureUrl(\"changePicture\", userUuid);\n\t\t\t} else {\n\t\t\t\tchangePicture = new ChangeProfilePictureUrl(\"changePicture\");\n\t\t\t}\n\t\t} else if (profilePictureType == ProfileConstants.PICTURE_SETTING_OFFICIAL) {\n\t\t\t//cannot edit anything if using official images\n\t\t\tchangePicture = new EmptyPanel(\"changePicture\");\n\t\t} else {\t\n\t\t\t//no valid option for changing picture was returned from the Profile2 API.\n\t\t\tlog.error(\"Invalid picture type returned: \" + profilePictureType);\n\t\t\tchangePicture = new EmptyPanel(\"changePicture\");\n\t\t}\n\t\tchangePicture.setOutputMarkupPlaceholderTag(true);\n\t\tchangePicture.setVisible(false);\n\t\tadd(changePicture);\n\t\t\n\t\t//add the current picture\n\t\tadd(new ProfileImage(\"photo\", new Model<String>(userUuid)));\n\t\t\n\t\t//change profile image button\n\t\tAjaxLink<Void> changePictureLink = new AjaxLink<Void>(\"changePictureLink\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\n\t\t\t\t//show the panel\n\t\t\t\tchangePicture.setVisible(true);\n\t\t\t\ttarget.addComponent(changePicture);\n\t\t\t\t\n\t\t\t\t//resize iframe to fit it\n\t\t\t\ttarget.appendJavascript(\"resizeFrame('grow');\");\n\t\t\t}\n\t\t\t\t\t\t\n\t\t};\n\t\tchangePictureLink.add(new Label(\"changePictureLabel\", new ResourceModel(\"link.change.profile.picture\")));\n\t\t\n\t\t//is picture changing disabled? (property, or locked)\n\t\tif((!sakaiProxy.isProfilePictureChangeEnabled() || userProfile.isLocked()) && !sakaiProxy.isSuperUser()) {\n\t\t\tchangePictureLink.setEnabled(false);\n\t\t\tchangePictureLink.setVisible(false);\n\t\t}\n\t\t\n\t\t//if using official images, is the user allowed to select an alternate?\n\t\t//or have they specified the official image in their preferences.\n\t\tif(sakaiProxy.isOfficialImageEnabledGlobally() && (!sakaiProxy.isUsingOfficialImageButAlternateSelectionEnabled() || prefs.isUseOfficialImage())) {\n\t\t\tchangePictureLink.setEnabled(false);\n\t\t\tchangePictureLink.setVisible(false);\n\t\t}\n\t\t\n\t\t\n\t\tadd(changePictureLink);\n\t\t\n\t\t\n\t\t/* SIDELINKS */\n\t\tWebMarkupContainer sideLinks = new WebMarkupContainer(\"sideLinks\");\n\t\tint visibleSideLinksCount = 0;\n\t\t\n\t\t//ADMIN: ADD AS CONNECTION\n\t\tif(sakaiProxy.isSuperUserAndProxiedToUser(userUuid)) {\n\t\t\t\n\t\t\t//init\n\t\t\tboolean friend = false;\n\t\t\tboolean friendRequestToThisPerson = false;\n\t\t\tboolean friendRequestFromThisPerson = false;\n\t\t\tString currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t\tString nickname = userProfile.getNickname();\n\t\t\tif(StringUtils.isBlank(nickname)) {\n\t\t\t\tnickname=\"\";\n\t\t\t}\n\n\t\t\t//setup model to store the actions in the modal windows\n\t\t\tfinal FriendAction friendActionModel = new FriendAction();\n\n\t\t\t//setup friend status\n\t\t\tfriend = connectionsLogic.isUserXFriendOfUserY(userUuid, currentUserUuid);\n\t\t\tif(!friend) {\n\t\t\t\tfriendRequestToThisPerson = connectionsLogic.isFriendRequestPending(currentUserUuid, userUuid);\n\t\t\t}\n\t\t\tif(!friend && !friendRequestToThisPerson) {\n\t\t\t\tfriendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userUuid, currentUserUuid);\n\t\t\t}\n\t\t\t\n\t\t\tWebMarkupContainer addFriendContainer = new WebMarkupContainer(\"addFriendContainer\");\n\t\t\tfinal ModalWindow addFriendWindow = new ModalWindow(\"addFriendWindow\");\n\n\t\t\t//link\n\t\t\tfinal AjaxLink<Void> addFriendLink = new AjaxLink<Void>(\"addFriendLink\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t    \t\t\taddFriendWindow.show(target);\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal Label addFriendLabel = new Label(\"addFriendLabel\");\n\t\t\taddFriendLink.add(addFriendLabel);\n\t\t\taddFriendContainer.add(addFriendLink);\n\t\t\t\n\t\t\t//setup link/label and windows\n\t\t\tif(friend) {\n\t\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.confirmed\"));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-confirmed\")));\n\t\t\t\taddFriendLink.setEnabled(false);\n\t\t\t} else if (friendRequestToThisPerson) {\n\t\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\taddFriendLink.setEnabled(false);\n\t\t\t} else if (friendRequestFromThisPerson) {\n\t\t\t\t//TODO (confirm pending friend request link)\n\t\t\t\t//could be done by setting the content off the addFriendWindow.\n\t\t\t\t//will need to rename some links to make more generic and set the onClick and setContent in here for link and window\n\t\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.pending\"));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\taddFriendLink.setEnabled(false);\n\t\t\t}  else {\n\t\t\t\taddFriendLabel.setDefaultModel(new StringResourceModel(\"link.friend.add.name\", null, new Object[]{ nickname } ));\n\t    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"icon connection-add\")));\n\t\t\t\taddFriendWindow.setContent(new AddFriend(addFriendWindow.getContentId(), addFriendWindow, friendActionModel, currentUserUuid, userUuid)); \n\t\t\t}\n\t\t\t\n\t\t\tsideLinks.add(addFriendContainer);\n\t\t\n\t\t\t//ADD FRIEND MODAL WINDOW HANDLER \n\t\t\taddFriendWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t            \tif(friendActionModel.isRequested()) { \n\t            \t\t//friend was successfully requested, update label and link\n\t            \t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t            \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction\")));\n\t            \t\taddFriendLink.setEnabled(false);\n\t            \t\ttarget.addComponent(addFriendLink);\n\t            \t}\n\t            }\n\t        });\n\t\t\t\n\t\t\tadd(addFriendWindow);\n\t\t\n\t\t\tvisibleSideLinksCount++;\n\t\t\t\n\t\t\t\n\t\t\t//ADMIN: LOCK/UNLOCK A PROFILE\n\t\t\tWebMarkupContainer lockProfileContainer = new WebMarkupContainer(\"lockProfileContainer\");\n\t\t\tfinal Label lockProfileLabel = new Label(\"lockProfileLabel\");\n\t\t\t\n\t\t\tfinal AjaxLink<Void> lockProfileLink = new AjaxLink<Void>(\"lockProfileLink\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t//toggle it to be opposite of what it currently is, update labels and icons\n\t\t\t\t\tboolean locked = isLocked();\n\t    \t\t\tif(sakaiProxy.toggleProfileLocked(userUuid, !locked)) {\n\t    \t\t\t\tsetLocked(!locked);\n\t    \t\t\t\tlog.info(\"MyProfile(): SuperUser toggled lock status of profile for \" + userUuid + \" to \" + !locked);\n\t    \t\t\t\tlockProfileLabel.setDefaultModel(new ResourceModel(\"link.profile.locked.\" + isLocked()));\n\t    \t\t\t\tadd(new AttributeModifier(\"title\", true, new ResourceModel(\"text.profile.locked.\" + isLocked())));\n\t    \t\t\t\tif(isLocked()){\n\t    \t\t\t\t\tadd(new AttributeModifier(\"class\", true, new Model<String>(\"icon locked\")));\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\tadd(new AttributeModifier(\"class\", true, new Model<String>(\"icon unlocked\")));\n\t    \t\t\t\t}\n\t    \t\t\t\ttarget.addComponent(this);\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t//set init icon for locked\n\t\t\tif(isLocked()){\n\t\t\t\tlockProfileLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"icon locked\")));\n\t\t\t} else {\n\t\t\t\tlockProfileLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"icon unlocked\")));\n\t\t\t}\n\t\t\t\n\t\t\tlockProfileLink.add(lockProfileLabel);\n\t\t\t\t\t\n\t\t\t//setup link/label and windows with special property based on locked status\n\t\t\tlockProfileLabel.setDefaultModel(new ResourceModel(\"link.profile.locked.\" + isLocked()));\n\t\t\tlockProfileLink.add(new AttributeModifier(\"title\", true, new ResourceModel(\"text.profile.locked.\" + isLocked())));\n\t\t\t\n\t\t\tlockProfileContainer.add(lockProfileLink);\n\t\t\t\n\t\t\tsideLinks.add(lockProfileContainer);\n\t\t\t\n\t\t\tvisibleSideLinksCount++;\n\n\t\t\t\n\t\t} else {\n\t\t\t//blank components\n\t\t\tWebMarkupContainer addFriendContainer = new WebMarkupContainer(\"addFriendContainer\");\n\t\t\taddFriendContainer.add(new AjaxLink(\"addFriendLink\") {\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {}\n\t\t\t}).add(new Label(\"addFriendLabel\"));\n\t\t\tsideLinks.add(addFriendContainer);\n\t\t\tadd(new WebMarkupContainer(\"addFriendWindow\"));\n\t\t\t\n\t\t\tWebMarkupContainer lockProfileContainer = new WebMarkupContainer(\"lockProfileContainer\");\n\t\t\tlockProfileContainer.add(new AjaxLink(\"lockProfileLink\") {\n\t\t\t\tpublic void onClick(AjaxRequestTarget target) {}\n\t\t\t}).add(new Label(\"lockProfileLabel\"));\n\t\t\tsideLinks.add(lockProfileContainer);\n\t\t}\n\t\t\n\t\t\n\t\t//hide entire list if no links to show\n\t\tif(visibleSideLinksCount == 0) {\n\t\t\tsideLinks.setVisible(false);\n\t\t}\n\t\t\n\t\tadd(sideLinks);\n\t\t\n\t\t\n\t\t//status panel\n\t\tPanel myStatusPanel = new MyStatusPanel(\"myStatusPanel\", userProfile);\n\t\tadd(myStatusPanel);\n\t\t\n\t\tList<ITab> tabs = new ArrayList<ITab>();\n\t\t\n\t\tAjaxTabbedPanel tabbedPanel = new AjaxTabbedPanel(\"myProfileTabs\", tabs) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t// overridden so we can add tooltips to tabs\n\t\t\t@Override\n\t\t\tprotected WebMarkupContainer newLink(String linkId, final int index) {\n\t\t\t\tWebMarkupContainer link = super.newLink(linkId, index);\n\t\t\t\t\n\t\t\t\tif (ProfileConstants.TAB_INDEX_PROFILE == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.profile.tooltip\")));\n\t\t\t\t\t\n\t\t\t\t} else if (ProfileConstants.TAB_INDEX_WALL == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.wall.tooltip\")));\t\n\t\t\t\t}\n\t\t\t\treturn link;\n\t\t\t}\n\t\t};\n\t\t\n\t\tCookie tabCookie = getWebRequestCycle().getWebRequest().getCookie(ProfileConstants.TAB_COOKIE);\n\t\t\n\t\tif (sakaiProxy.isProfileFieldsEnabled()) {\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.profile\")) {\n\t\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\t\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_PROFILE);\n\t\t\t\t\tMyProfilePanelState panelState = new MyProfilePanelState();\n\t\t\t\t\tpanelState.showBusinessDisplay = sakaiProxy.isBusinessProfileEnabled();\n\t\t\t\t\tpanelState.showSocialNetworkingDisplay = sakaiProxy.isSocialProfileEnabled();\n\t\t\t\t\tpanelState.showInterestsDisplay = sakaiProxy.isInterestsProfileEnabled();\n\t\t\t\t\tpanelState.showStaffDisplay = sakaiProxy.isStaffProfileEnabled();\n\t\t\t\t\tpanelState.showStudentDisplay = sakaiProxy.isStudentProfileEnabled();\n\t\t\t\t\treturn new MyProfilePanel(panelId, userProfile,panelState);\n\t\t\t\t}\n\t\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (true == sakaiProxy.isWallEnabledGlobally()) {\n\t\t\t\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.wall\")) {\n\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t\t\tif (true == sakaiProxy.isSuperUser()) {\n\t\t\t\t\t\treturn new MyWallPanel(panelId, userUuid);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new MyWallPanel(panelId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (true == sakaiProxy.isWallDefaultProfilePage() && null == tabCookie) {\n\t\t\t\t\n\t\t\t\ttabbedPanel.setSelectedTab(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != tabCookie) {\n\t\t\ttry {\n\t\t\t\ttabbedPanel.setSelectedTab(Integer.parseInt(tabCookie.getValue()));\n\t\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t\t//do nothing. This will be thrown if the cookie contains a value > the number of tabs but thats ok.\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd(tabbedPanel);\n\t\t\n\t\t//kudos panel\n\t\tadd(new AjaxLazyLoadPanel(\"myKudos\"){\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\tif(prefs.isShowKudos()){\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tint score = kudosLogic.getKudos(userUuid);\n\t\t\t\t\tif(score > 0) {\n\t\t\t\t\t\treturn new KudosPanel(markupId, userUuid, userUuid, score);\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\treturn new EmptyPanel(markupId);\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t//friends feed panel for self - lazy loaded\n\t\tadd(new NotifyingAjaxLazyLoadPanel(\"friendsFeed\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n            public Component getLazyLoadComponent(String markupId) {\n            \treturn new FriendsFeed(markupId, userUuid, userUuid);\n            }\n\n\t\t\t@Override\n\t\t\tpublic void renderHead(IHeaderResponse response) {\n\t\t\t\tresponse.renderOnDomReadyJavascript(\"resizeFrame('grow');\");\n\t\t\t}\n        });\n        \t\n        \t\n\t\t//gallery feed panel\n\t\tadd(new NotifyingAjaxLazyLoadPanel(\"galleryFeed\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\tif (sakaiProxy.isProfileGalleryEnabledGlobally() && prefs.isShowGalleryFeed()) {\n\t\t\t\t\treturn new GalleryFeed(markupId, userUuid, userUuid)\n\t\t\t\t\t\t\t.setOutputMarkupId(true);\n\t\t\t\t} else {\n\t\t\t\t\treturn new EmptyPanel(markupId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void renderHead(IHeaderResponse response) {\n\t\t\t\tresponse.renderOnDomReadyJavascript(\"resizeFrame('grow');\");\n\t\t\t}\n\t\t\t\n\t\t});\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public MySearch() {\n\t\t\n\t\tlog.debug(\"MySearch()\");\n\t\t\n\t\tdisableLink(searchLink);\n\t\t\n\t\t//check for current search cookie\t \n\t\tsearchCookie = getWebRequestCycle().getWebRequest().getCookie(ProfileConstants.SEARCH_COOKIE);\n\t\t\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\t\n\t\t//get current user info\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\tfinal String currentUserType = sakaiProxy.getUserType(currentUserUuid);\n\t\t\n\t\t/*\n\t\t * Combined search form \n\t\t */\n\t\t\n\t\t//heading\n\t\tLabel searchHeading = new Label(\"searchHeading\", new ResourceModel(\"heading.search\"));\n\t\tadd(searchHeading);\n\t\t\n\t\t//setup form\n        final StringModel searchStringModel = new StringModel();        \n        Form<StringModel> searchForm = new Form<StringModel>(\"searchForm\", new Model<StringModel>(searchStringModel));\n        searchForm.setOutputMarkupId(true);\n        \n        //search field\n        searchForm.add(new Label(\"searchLabel\", new ResourceModel(\"text.search.terms.label\")));\n        searchField = new TextField<String>(\"searchField\", new PropertyModel<String>(searchStringModel, \"string\"));\n        searchField.setRequired(true);\n        searchField.setMarkupId(\"searchinput\");\n        searchField.setOutputMarkupId(true);\n        searchForm.add(searchField);\n        searchForm.add(new IconWithClueTip(\"searchToolTip\", ProfileConstants.INFO_IMAGE, new ResourceModel(\"text.search.terms.tooltip\")));\n\t\t\n        //by name or by interest radio group        \n\t\tsearchTypeRadioGroup = new RadioGroup<String>(\"searchTypeRadioGroup\");\n\t\t// so we can repaint after clicking on search history links\n\t\tsearchTypeRadioGroup.setOutputMarkupId(true);\n\t\tsearchTypeRadioGroup.setRenderBodyOnly(false);\n\t\tRadio<String> searchTypeRadioName = new Radio<String>(\"searchTypeName\", new Model<String>(ProfileConstants.SEARCH_TYPE_NAME));\n\t\tsearchTypeRadioName.setMarkupId(\"searchtypenameinput\");\n        searchTypeRadioName.setOutputMarkupId(true);\n\t\tsearchTypeRadioName.add(new AttributeModifier(\"title\", true, new ResourceModel(\"text.search.byname.tooltip\")));\n\t\tsearchTypeRadioGroup.add(searchTypeRadioName);\n\t\tRadio<String> searchTypeRadioInterest = new Radio<String>(\"searchTypeInterest\", new Model<String>(ProfileConstants.SEARCH_TYPE_INTEREST));\n\t\tsearchTypeRadioInterest.setMarkupId(\"searchtypeinterestinput\");\n        searchTypeRadioInterest.setOutputMarkupId(true);\n\t\tsearchTypeRadioInterest.add(new AttributeModifier(\"title\", true, new ResourceModel(\"text.search.byinterest.tooltip\")));\n\t\tsearchTypeRadioGroup.add(searchTypeRadioInterest);\n\t\tsearchTypeRadioGroup.add(new Label(\"searchTypeNameLabel\", new ResourceModel(\"text.search.byname.label\")));\n\t\tsearchTypeRadioGroup.add(new Label(\"searchTypeInterestLabel\", new ResourceModel(\"text.search.byinterest.label\")));\n\t\tsearchForm.add(searchTypeRadioGroup);\n\t\t\n\t\tsearchForm.add(new Label(\"connectionsLabel\", new ResourceModel(\"text.search.include.connections\")));\n\t\t// model is true (include connections by default)\n\t\tconnectionsCheckBox = new CheckBox(\"connectionsCheckBox\", new Model<Boolean>(true));\n\t\tconnectionsCheckBox.setMarkupId(\"includeconnectionsinput\");\n\t\tconnectionsCheckBox.setOutputMarkupId(true);\n\t\tsearchForm.add(connectionsCheckBox);\n\t\t\t\t\n\t\tfinal List<Site> worksites = sakaiProxy.getUserSites();\n\t\tfinal boolean hasWorksites = worksites.size() > 0;\n\t\t\n\t\tsearchForm.add(new Label(\"worksiteLabel\", new ResourceModel(\"text.search.include.worksite\")));\n\t\t// model is false (include all worksites by default)\n\t\tworksiteCheckBox = new CheckBox(\"worksiteCheckBox\", new Model<Boolean>(false));\n\t\tworksiteCheckBox.setMarkupId(\"limittositeinput\");\n\t\tworksiteCheckBox.setOutputMarkupId(true);\n\t\tworksiteCheckBox.setEnabled(hasWorksites);\n\t\tsearchForm.add(worksiteCheckBox);\n\t\t\n\t\tfinal IModel<String> defaultWorksiteIdModel;\n\t\tif (hasWorksites) {\n\t\t\tdefaultWorksiteIdModel = new Model<String>(worksites.get(0).getId());\n\t\t} else {\n\t\t\tdefaultWorksiteIdModel = new ResourceModel(\"text.search.no.worksite\");\n\t\t}\n\t\t\n\t\tfinal LinkedHashMap<String, String> worksiteMap = new LinkedHashMap<String, String>();\n\t\t\n\t\tif (hasWorksites) {\n\t\t\tfor (Site worksite : worksites) {\n\t\t\t\tworksiteMap.put(worksite.getId(), worksite.getTitle());\n\t\t\t}\n\t\t} else {\n\t\t\tworksiteMap.put(defaultWorksiteIdModel.getObject(), defaultWorksiteIdModel.getObject());\n\t\t}\n\t\t\n\t\tIModel worksitesModel = new Model() {\n\n\t\t\tpublic ArrayList<String> getObject() {\n\t\t\t\treturn new ArrayList<String>(worksiteMap.keySet());\n\t\t\t}\n\t\t};\n\t\t\n\t\tworksiteChoice = new DropDownChoice(\"worksiteChoice\", defaultWorksiteIdModel, worksitesModel, new HashMapChoiceRenderer(worksiteMap));\n\t\tworksiteChoice.setMarkupId(\"worksiteselect\");\n\t\tworksiteChoice.setOutputMarkupId(true);\n\t\tworksiteChoice.setNullValid(false);\n\t\tworksiteChoice.setEnabled(hasWorksites);\n\t\tsearchForm.add(worksiteChoice);\n\t\t\n\t\t/* \n\t\t * \n\t\t * RESULTS\n\t\t * \n\t\t */\n\t\t\n\t\t//search results label/container\n\t\tnumSearchResultsContainer = new WebMarkupContainer(\"numSearchResultsContainer\");\n\t\tnumSearchResultsContainer.setOutputMarkupPlaceholderTag(true);\n\t\tnumSearchResults = new Label(\"numSearchResults\");\n\t\tnumSearchResults.setOutputMarkupId(true);\n\t\tnumSearchResults.setEscapeModelStrings(false);\n\t\tnumSearchResultsContainer.add(numSearchResults);\n\t\t\n\t\t//clear results button\n\t\tForm<Void> clearResultsForm = new Form<Void>(\"clearResults\");\n\t\tclearResultsForm.setOutputMarkupPlaceholderTag(true);\n\n\t\tclearButton = new AjaxButton(\"clearButton\", clearResultsForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\t\n\t\t\t\t// clear cookie if present\t \n                if (null != searchCookie) {\t \n                        getWebRequestCycle().getWebResponse().clearCookie(searchCookie);\t \n                }\n                \n\t\t\t\t//clear the fields, hide self, then repaint\n                searchField.clearInput();\n                searchField.updateModel();\n                \t\t\t\t\n\t\t\t\tnumSearchResultsContainer.setVisible(false);\n\t\t\t\tresultsContainer.setVisible(false);\n\t\t\t\tclearButton.setVisible(false);\n\t\t\t\t\n\t\t\t\ttarget.addComponent(searchField);\n\t\t\t\ttarget.addComponent(numSearchResultsContainer);\n\t\t\t\ttarget.addComponent(resultsContainer);\n\t\t\t\ttarget.addComponent(this);\n\t\t\t}\t\t\t\t\n\t\t};\n\t\tclearButton.setOutputMarkupPlaceholderTag(true);\n\t\tif (null == searchCookie) {\n\t\t\tclearButton.setVisible(false); //invisible until we have something to clear\n\t\t}\n\t\tclearButton.setModel(new ResourceModel(\"button.search.clear\"));\n\t\tclearResultsForm.add(clearButton);\n\t\tnumSearchResultsContainer.add(clearResultsForm);\n\t\t\n\t\tadd(numSearchResultsContainer);\n\t\t\n\t\t// model to wrap search results\n\t\tLoadableDetachableModel<List<Person>> resultsModel = new LoadableDetachableModel<List<Person>>(){\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected List<Person> load() {\n\t\t\t\treturn results;\n\t\t\t}\n\t\t};\t\n\t\t\t\t\n\t\t//container which wraps list\n\t\tresultsContainer = new WebMarkupContainer(\"searchResultsContainer\");\n\t\tresultsContainer.setOutputMarkupPlaceholderTag(true);\n\t\tif (null == searchCookie) {\n\t\t\tresultsContainer.setVisible(false); //hide initially\n\t\t}\n\t\t\n\t\t//connection window\n\t\tfinal ModalWindow connectionWindow = new ModalWindow(\"connectionWindow\");\n\t\t\n\t\t//search results\n\t\tfinal PageableListView<Person> resultsListView = new PageableListView<Person>(\"searchResults\",\n\t\t\t\tresultsModel, sakaiProxy.getMaxSearchResultsPerPage()) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final ListItem<Person> item) {\n\t\t        \n\t\t    \tPerson person = (Person)item.getModelObject();\n\t\t    \t\n\t\t    \t//get basic values\n\t\t    \tfinal String userUuid = person.getUuid();\n\t\t    \tfinal String displayName = person.getDisplayName();\n\t\t    \tfinal String userType = person.getType();\n\n\t\t    \t//get connection status\n\t\t    \tint connectionStatus = connectionsLogic.getConnectionStatus(currentUserUuid, userUuid);\n\t\t    \tboolean friend = (connectionStatus == ProfileConstants.CONNECTION_CONFIRMED) ? true : false;\n\t\t    \t\n\t\t    \t//image wrapper, links to profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"searchResultPhotoWrap\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(userUuid));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//image\n\t\t\t\tfriendItem.add(new ProfileImageRenderer(\"searchResultPhoto\", person, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\t\titem.add(friendItem);\n\t\t    \t\n\t\t    \t//name and link to profile (if allowed or no link)\n\t\t    \tLink<String> profileLink = new Link<String>(\"searchResultProfileLink\", new Model<String>(userUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\t//if user found themself, go to own profile, else show other profile\n\t\t\t\t\t\tif(userUuid.equals(currentUserUuid)) {\n\t\t\t\t\t\t\tsetResponsePage(new MyProfile());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//gets userUuid of other user from the link's model\n\t\t\t\t\t\t\tsetResponsePage(new ViewProfile((String)getModelObject()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tprofileLink.add(new Label(\"searchResultName\", displayName));\n\t\t    \titem.add(profileLink);\n\t\t    \t\n\t\t    \t//status component\n\t\t    \tProfileStatusRenderer status = new ProfileStatusRenderer(\"searchResultStatus\", person, \"search-result-status-msg\", \"search-result-status-date\") {\n\t\t    \t\t@Override\n\t\t\t\t\tpublic boolean isVisible(){\n\t\t\t\t\t   return sakaiProxy.isProfileStatusEnabled();\n\t\t\t\t\t}\n\t\t    \t};\n\t\t\t\tstatus.setOutputMarkupId(true);\n\t\t\t\titem.add(status);\n\t\t    \t\n\t\t    \t\n\t\t    \t/* ACTIONS */\n\t\t\t\tboolean isFriendsListVisible = privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS);\n\t\t\t\tboolean isConnectionAllowed = sakaiProxy.isConnectionAllowedBetweenUserTypes(userType, currentUserType);\n\t\t    \t\n\n\t\t    \t//ADD CONNECTION LINK\n\t\t    \tfinal WebMarkupContainer c1 = new WebMarkupContainer(\"connectionContainer\");\n\t\t    \tc1.setOutputMarkupId(true);\n\n\t\t\t\tif(!isConnectionAllowed){\n\t\t\t\t\t//add blank components - TODO turn this into an EmptyLink component\n\t\t\t\t\tAjaxLink<Void> emptyLink = new AjaxLink<Void>(\"connectionLink\"){\n\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {}\n\t\t\t\t\t};\n\t\t\t\t\temptyLink.add(new Label(\"connectionLabel\"));\n\t\t\t\t\tc1.add(emptyLink);\n\t\t\t\t\tc1.setVisible(false);\n\t\t\t\t} else {\n\t\t\t\t\t//render the link\n\t\t\t    \tfinal Label connectionLabel = new Label(\"connectionLabel\");\n\t\t\t\t\tconnectionLabel.setOutputMarkupId(true);\n\t\t\t\t\t\n\t\t\t    \tfinal AjaxLink<String> connectionLink = new AjaxLink<String>(\"connectionLink\", new Model<String>(userUuid)) {\n\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get this item, reinit some values and set content for modal\n\t\t\t\t\t    \tfinal String userUuid = (String)getModelObject();\n\t\t\t\t\t    \tconnectionWindow.setContent(new AddFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, currentUserUuid, userUuid)); \n\t\t\t\t\t\t\t\n\t\t\t\t\t    \t// connection modal window handler \n\t\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t            \tif(friendActionModel.isRequested()) { \n\t\t\t\t\t            \t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t\t\t\t\t\t\t\t\t\tadd(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\t\t            \t\tsetEnabled(false);\n\t\t\t\t\t            \t\ttarget.addComponent(c1);\n\t\t\t\t\t            \t}\n\t\t\t\t\t            }\n\t\t\t\t\t        });\t\t\t\t\t\t\n\t\t\t\t\t\t\t//in preparation for the window being closed, update the text. this will only\n\t\t\t\t\t\t\t//be put into effect if its a successful model update from the window close\n\t\t\t\t\t    \t//connectionLabel.setModel(new ResourceModel(\"text.friend.requested\"));\n\t\t\t\t\t\t\t//this.add(new AttributeModifier(\"class\", true, new Model(\"instruction\")));\n\t\t\t\t\t\t\t//this.setEnabled(false);\n\t\t\t\t\t\t\t//friendActionModel.setUpdateThisComponentOnSuccess(this);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t            \t\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tconnectionLink.add(connectionLabel);\n\t\t\t\t\t\n\t\t\t\t\t//setup 'add connection' link\n\t\t\t\t\tif(StringUtils.equals(userUuid, currentUserUuid)) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.self\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon profile\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\n\t\t\t\t\t} else if(friend) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.confirmed\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-confirmed\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\n\t\t\t\t\t} else if (connectionStatus == ProfileConstants.CONNECTION_REQUESTED) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\t\t\t\t\t\n\t\t\t\t\t} else if (connectionStatus == ProfileConstants.CONNECTION_INCOMING) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.pending\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"link.friend.add\"));\n\t\t\t\t\t}\n\t\t\t\t\tconnectionLink.setOutputMarkupId(true);\n\t\t\t\t\tc1.add(connectionLink);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.add(c1);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//VIEW FRIENDS LINK\n\t\t\t\tWebMarkupContainer c2 = new WebMarkupContainer(\"viewFriendsContainer\");\n\t\t    \tc2.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tfinal AjaxLink<String> viewFriendsLink = new AjaxLink<String>(\"viewFriendsLink\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t//if user found themself, go to MyFriends, else, ViewFriends\n\t\t\t\t\t\tif(userUuid.equals(currentUserUuid)) {\n\t\t\t\t\t\t\tsetResponsePage(new MyFriends());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetResponsePage(new ViewFriends(userUuid));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal Label viewFriendsLabel = new Label(\"viewFriendsLabel\", new ResourceModel(\"link.view.friends\"));\n\t\t\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\t\t\t\n\t\t\t\t//hide if not allowed\n\t\t\t\tif(!isFriendsListVisible) {\n\t\t\t\t\tviewFriendsLink.setEnabled(false);\n\t\t\t\t\tc2.setVisible(false);\n\t\t\t\t}\n\t\t\t\tviewFriendsLink.setOutputMarkupId(true);\n\t\t\t\tc2.add(viewFriendsLink);\n\t\t\t\titem.add(c2);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c3 = new WebMarkupContainer(\"emailContainer\");\n\t\t    \tc3.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tExternalLink emailLink = new ExternalLink(\"emailLink\",\n\t\t\t\t\t\t\"mailto:\" + person.getProfile().getEmail(),\n\t\t\t\t\t\tnew ResourceModel(\"profile.email\").getObject());\n\t\t    \t\n\t\t\t\tc3.add(emailLink);\n\t\t\t\t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getEmail()) ||\n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(person.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\tc3.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c3);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c4 = new WebMarkupContainer(\"websiteContainer\");\n\t\t    \tc4.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \t// TODO home page, university profile URL or academic/research URL (see PRFL-35)\n\t\t    \tExternalLink websiteLink = new ExternalLink(\"websiteLink\", person.getProfile()\n\t\t\t\t\t\t.getHomepage(), new ResourceModel(\n\t\t\t\t\t\t\"profile.homepage\").getObject()).setPopupSettings(new PopupSettings());\n\t\t    \t\n\t\t    \tc4.add(websiteLink);\n\t\t    \t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getHomepage()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(person.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc4.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c4);\n\t\t\t\t\n\t\t\t\t// TODO personal, academic or business (see PRFL-35)\n\t\t\t\t\n\t\t\t\tif (true == privacyLogic.isActionAllowed(\n\t\t\t\t\t\tperson.getUuid(), currentUserUuid,  PrivacyType.PRIVACY_OPTION_BASICINFO)) {\n\t\t\t\t\t\n\t\t\t\t\titem.add(new Label(\"searchResultSummary\",\n\t\t\t\t\t\t\tStringUtils.abbreviate(ProfileUtils.stripHtml(\n\t\t\t\t\t\t\t\t\tperson.getProfile().getPersonalSummary()), 200)));\n\t\t\t\t} else {\n\t\t\t\t\titem.add(new Label(\"searchResultSummary\", \"\"));\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tresultsListView.add(new MySearchCookieBehavior(resultsListView));\n\t\tresultsContainer.add(resultsListView);\n\n\t\tfinal PagingNavigator searchResultsNavigator = new PagingNavigator(\"searchResultsNavigator\", resultsListView);\n\t\tsearchResultsNavigator.setOutputMarkupId(true);\n\t\tsearchResultsNavigator.setVisible(false);\n\n\t\tresultsContainer.add(searchResultsNavigator);\n\n\t\tadd(connectionWindow);\n\t\t\n\t\t//add results container\n\t\tadd(resultsContainer);\n\t\t\n\t\t/*\n\t\t * SEARCH HISTORY\n\t\t */\n\t\t\n\t\tfinal WebMarkupContainer searchHistoryContainer = new WebMarkupContainer(\"searchHistoryContainer\");\n\t\tsearchHistoryContainer.setOutputMarkupPlaceholderTag(true);\n\t\t\n\t\tLabel searchHistoryLabel = new Label(\"searchHistoryLabel\", new ResourceModel(\"text.search.history\"));\n\t\tsearchHistoryContainer.add(searchHistoryLabel);\n\t\t\n\t\tIModel<List<ProfileSearchTerm>> searchHistoryModel =  new LoadableDetachableModel<List<ProfileSearchTerm>>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected List<ProfileSearchTerm> load() {\n\t\t\t\tList<ProfileSearchTerm> searchHistory = searchLogic.getSearchHistory(currentUserUuid);\n\t\t\t\tif (null == searchHistory) {\n\t\t\t\t\treturn new ArrayList<ProfileSearchTerm>();\n\t\t\t\t} else {\n\t\t\t\t\treturn searchHistory;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t};\n\t\tListView<ProfileSearchTerm> searchHistoryList = new ListView<ProfileSearchTerm>(\"searchHistoryList\", searchHistoryModel) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateItem(final ListItem<ProfileSearchTerm> item) {\n\n\t\t\t\tAjaxLink<String> link = new AjaxLink<String>(\"previousSearchLink\") {\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tif (null != target) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// post view event\n\t\t\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_SEARCH_BY_NAME, \"/profile/\"+currentUserUuid, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tProfileSearchTerm searchTerm = item.getModelObject();\n\t\t\t\t\t\t\t// this will update its position in list\n\t\t\t\t\t\t\tsearchLogic.addSearchTermToHistory(currentUserUuid, searchTerm);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsearchStringModel.setString(searchTerm.getSearchTerm());\n\t\t\t\t\t\t\tsearchTypeRadioGroup.setModel(new Model<String>(searchTerm.getSearchType()));\n\t\t\t\t\t\t\tconnectionsCheckBox.setModel(new Model<Boolean>(searchTerm.isConnections()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (null == searchTerm.getWorksite()) {\n\t\t\t\t\t\t\t\tworksiteCheckBox.setModel(new Model<Boolean>(false));\n\t\t\t\t\t\t\t\tworksiteChoice.setModel(new Model(defaultWorksiteIdModel));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tworksiteCheckBox.setModel(new Model<Boolean>(true));\n\t\t\t\t\t\t\t\tworksiteChoice.setModel(new Model(searchTerm.getWorksite()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetSearchCookie(searchTerm.getSearchType(), searchTerm.getSearchTerm(), searchTerm.getSearchPageNumber(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (ProfileConstants.SEARCH_TYPE_NAME.equals(searchTerm.getSearchType())) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tsearchByName(resultsListView, searchResultsNavigator,\n\t\t\t\t\t\t\t\t\t\tsearchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} else if (ProfileConstants.SEARCH_TYPE_INTEREST.equals(searchTerm.getSearchType())) {\n\n\t\t\t\t\t\t\t\tsearchByInterest(resultsListView, searchResultsNavigator,\n\t\t\t\t\t\t\t\t\t\tsearchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tlink.add(new Label(\"previousSearchLabel\", item.getModelObject().getSearchTerm()));\n\t\t\t\titem.add(link);\n\t\t\t}\n\t\t};\n\t\t\n\t\tsearchHistoryContainer.add(searchHistoryList);\n\t\tadd(searchHistoryContainer);\n\t\t\n\t\tif (null == searchLogic.getSearchHistory(currentUserUuid)) {\n\t\t\tsearchHistoryContainer.setVisible(false);\n\t\t}\n\t\t\n\t\t//clear button\n\t\tForm<Void> clearHistoryForm = new Form<Void>(\"clearHistory\");\n\t\tclearHistoryForm.setOutputMarkupPlaceholderTag(true);\n\n\t\tclearHistoryButton = new AjaxButton(\"clearHistoryButton\", clearHistoryForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\t\n\t\t\t\tsearchLogic.clearSearchHistory(currentUserUuid);\n\t\t\t\t\n\t\t\t\t//clear the fields, hide self, then repaint\n\t\t\t\tsearchField.clearInput();\n\t\t\t\tsearchField.updateModel();\n\t\t\t\t\t\t\t\t\n\t\t\t\tsearchHistoryContainer.setVisible(false);\n\t\t\t\tclearHistoryButton.setVisible(false);\n\t\t\t\t\n\t\t\t\ttarget.addComponent(searchField);\n\t\t\t\ttarget.addComponent(searchHistoryContainer);\n\t\t\t\ttarget.addComponent(this);\n\t\t\t}\t\t\t\t\n\t\t};\n\t\tclearHistoryButton.setOutputMarkupPlaceholderTag(true);\n\n\t\tif (null == searchLogic.getSearchHistory(currentUserUuid)) {\n\t\t\tclearHistoryButton.setVisible(false); //invisible until we have something to clear\n\t\t}\n\t\tclearHistoryButton.setModel(new ResourceModel(\"button.search.history.clear\"));\n\t\tclearHistoryForm.add(clearHistoryButton);\n\t\tsearchHistoryContainer.add(clearHistoryForm);\n\t\t\n\t\t/*\n\t\t * Combined search submit\n\t\t */\n\t\tIndicatingAjaxButton searchSubmitButton = new IndicatingAjaxButton(\"searchSubmit\", searchForm) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\t\n\t\t\t\tif(target != null) {\n\t\t\t\t\t//get the model and text entered\n\t\t\t\t\tStringModel model = (StringModel) form.getModelObject();\n\t\t\t\t\t//PRFL-811 - dont strip this down, we will lose i18n chars.\n\t\t\t\t\t//And there is no XSS risk since its only for the current user.\n\t\t\t\t\tString searchText = model.getString();\n\t\t\t\t\t\n\t\t\t\t\t//get search type\n\t\t\t\t\tString searchType = searchTypeRadioGroup.getModelObject();\n\t\t\t\t\t\n\t\t\t\t\tlog.debug(\"MySearch search by \" + searchType + \": \" + searchText);\n\t\t\t\t\t\n\t\t\t\t\tif(StringUtils.isBlank(searchText)){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// save search terms\n\t\t\t\t\tProfileSearchTerm searchTerm = new ProfileSearchTerm();\n\t\t\t\t\tsearchTerm.setUserUuid(currentUserUuid);\n\t\t\t\t\tsearchTerm.setSearchType(searchType);\n\t\t\t\t\tsearchTerm.setSearchTerm(searchText);\n\t\t\t\t\tsearchTerm.setSearchPageNumber(0);\n\t\t\t\t\tsearchTerm.setSearchDate(new Date());\n\t\t\t\t\tsearchTerm.setConnections(connectionsCheckBox.getModelObject());\n\t\t\t\t\t// set to worksite or empty depending on value of checkbox\n\t\t\t\t\tsearchTerm.setWorksite((worksiteCheckBox.getModelObject() == true) ? worksiteChoice.getValue() : null);\n\t\t\t\t\t\n\t\t\t\t\tsearchLogic.addSearchTermToHistory(currentUserUuid, searchTerm);\n\t\t\t\t\t\n\t\t\t\t\t// set cookie for current search (page 0 when submitting new search)\n\t\t\t\t\tsetSearchCookie(searchTerm.getSearchType(), URLEncoder.encode(searchTerm.getSearchTerm()), searchTerm.getSearchPageNumber(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\n\t\t\t\t\tif (ProfileConstants.SEARCH_TYPE_NAME.equals(searchType)) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tsearchByName(resultsListView, searchResultsNavigator, searchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\n\t\t\t\t\t\t//post view event\n\t\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_SEARCH_BY_NAME, \"/profile/\"+currentUserUuid, false);\n\t\t\t\t\t} else if (ProfileConstants.SEARCH_TYPE_INTEREST.equals(searchType)) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tsearchByInterest(resultsListView, searchResultsNavigator, searchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\n\t\t\t\t\t\t//post view event\n\t\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_SEARCH_BY_INTEREST, \"/profile/\"+currentUserUuid, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tsearchSubmitButton.setModel(new ResourceModel(\"button.search.generic\"));\n\t\tsearchForm.add(searchSubmitButton);\n        add(searchForm);\n\t\t                \n        if (null != searchCookie) {\n        \t\n        \tString searchString = getCookieSearchString(searchCookie.getValue());\n        \tsearchStringModel.setString(searchString);\n        \t\n        \tBoolean filterConnections = getCookieFilterConnections(searchCookie.getValue());\n        \tString worksiteId = getCookieFilterWorksite(searchCookie.getValue());\n        \tBoolean filterWorksite = (null == worksiteId) ? false : true;\n        \t\n    \t\tconnectionsCheckBox.setModel(new Model<Boolean>(filterConnections));\n    \t\tworksiteCheckBox.setModel(new Model<Boolean>(filterWorksite));\n    \t\tworksiteChoice.setModel(new Model((null == worksiteId) ? defaultWorksiteIdModel : worksiteId));\n    \t\t\n        \tif (searchCookie.getValue().startsWith(ProfileConstants.SEARCH_TYPE_NAME)) {\n        \t\tsearchTypeRadioGroup.setModel(new Model<String>(ProfileConstants.SEARCH_TYPE_NAME));\n\t\t\t\tsearchByName(resultsListView, searchResultsNavigator, searchHistoryContainer, null, searchString, filterConnections, worksiteId);\n\n        \t} else if (searchCookie.getValue().startsWith(ProfileConstants.SEARCH_TYPE_INTEREST)) {\n        \t\tsearchTypeRadioGroup.setModel(new Model<String>(ProfileConstants.SEARCH_TYPE_INTEREST));\n        \t\tsearchByInterest(resultsListView, searchResultsNavigator, searchHistoryContainer, null, searchString, filterConnections, worksiteId);\n        \t}\n        } else {\n        \t// default search type is name\n        \tsearchTypeRadioGroup.setModel(new Model<String>(ProfileConstants.SEARCH_TYPE_NAME));\n        }\n\t}","id":100444,"modified_method":"public MySearch() {\n\t\t\n\t\tlog.debug(\"MySearch()\");\n\t\t\n\t\tdisableLink(searchLink);\n\t\t\n\t\t//check for current search cookie\t \n\t\tsearchCookie = getWebRequestCycle().getWebRequest().getCookie(ProfileConstants.SEARCH_COOKIE);\n\t\t\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\t\n\t\t//get current user info\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\tfinal String currentUserType = sakaiProxy.getUserType(currentUserUuid);\n\t\t\n\t\t/*\n\t\t * Combined search form \n\t\t */\n\t\t\n\t\t//heading\n\t\tLabel searchHeading = new Label(\"searchHeading\", new ResourceModel(\"heading.search\"));\n\t\tadd(searchHeading);\n\t\t\n\t\t//setup form\n        final StringModel searchStringModel = new StringModel();        \n        Form<StringModel> searchForm = new Form<StringModel>(\"searchForm\", new Model<StringModel>(searchStringModel));\n        searchForm.setOutputMarkupId(true);\n        \n        //search field\n        searchForm.add(new Label(\"searchLabel\", new ResourceModel(\"text.search.terms.label\")));\n        searchField = new TextField<String>(\"searchField\", new PropertyModel<String>(searchStringModel, \"string\"));\n        searchField.setRequired(true);\n        searchField.setMarkupId(\"searchinput\");\n        searchField.setOutputMarkupId(true);\n        searchForm.add(searchField);\n        searchForm.add(new IconWithClueTip(\"searchToolTip\", ProfileConstants.INFO_IMAGE, new ResourceModel(\"text.search.terms.tooltip\")));\n\t\t\n        //by name or by interest radio group        \n\t\tsearchTypeRadioGroup = new RadioGroup<String>(\"searchTypeRadioGroup\");\n\t\t// so we can repaint after clicking on search history links\n\t\tsearchTypeRadioGroup.setOutputMarkupId(true);\n\t\tsearchTypeRadioGroup.setRenderBodyOnly(false);\n\t\tRadio<String> searchTypeRadioName = new Radio<String>(\"searchTypeName\", new Model<String>(ProfileConstants.SEARCH_TYPE_NAME));\n\t\tsearchTypeRadioName.setMarkupId(\"searchtypenameinput\");\n        searchTypeRadioName.setOutputMarkupId(true);\n\t\tsearchTypeRadioName.add(new AttributeModifier(\"title\", true, new ResourceModel(\"text.search.byname.tooltip\")));\n\t\tsearchTypeRadioGroup.add(searchTypeRadioName);\n\t\tRadio<String> searchTypeRadioInterest = new Radio<String>(\"searchTypeInterest\", new Model<String>(ProfileConstants.SEARCH_TYPE_INTEREST));\n\t\tsearchTypeRadioInterest.setMarkupId(\"searchtypeinterestinput\");\n        searchTypeRadioInterest.setOutputMarkupId(true);\n\t\tsearchTypeRadioInterest.add(new AttributeModifier(\"title\", true, new ResourceModel(\"text.search.byinterest.tooltip\")));\n\t\tsearchTypeRadioGroup.add(searchTypeRadioInterest);\n\t\tsearchTypeRadioGroup.add(new Label(\"searchTypeNameLabel\", new ResourceModel(\"text.search.byname.label\")));\n\t\tsearchTypeRadioGroup.add(new Label(\"searchTypeInterestLabel\", new ResourceModel(\"text.search.byinterest.label\")));\n\t\tsearchForm.add(searchTypeRadioGroup);\n\t\t\n\t\tsearchForm.add(new Label(\"connectionsLabel\", new ResourceModel(\"text.search.include.connections\")));\n\t\t// model is true (include connections by default)\n\t\tconnectionsCheckBox = new CheckBox(\"connectionsCheckBox\", new Model<Boolean>(true));\n\t\tconnectionsCheckBox.setMarkupId(\"includeconnectionsinput\");\n\t\tconnectionsCheckBox.setOutputMarkupId(true);\n\t\tsearchForm.add(connectionsCheckBox);\n\t\t\t\t\n\t\tfinal List<Site> worksites = sakaiProxy.getUserSites();\n\t\tfinal boolean hasWorksites = worksites.size() > 0;\n\t\t\n\t\tsearchForm.add(new Label(\"worksiteLabel\", new ResourceModel(\"text.search.include.worksite\")));\n\t\t// model is false (include all worksites by default)\n\t\tworksiteCheckBox = new CheckBox(\"worksiteCheckBox\", new Model<Boolean>(false));\n\t\tworksiteCheckBox.setMarkupId(\"limittositeinput\");\n\t\tworksiteCheckBox.setOutputMarkupId(true);\n\t\tworksiteCheckBox.setEnabled(hasWorksites);\n\t\tsearchForm.add(worksiteCheckBox);\n\t\t\n\t\tfinal IModel<String> defaultWorksiteIdModel;\n\t\tif (hasWorksites) {\n\t\t\tdefaultWorksiteIdModel = new Model<String>(worksites.get(0).getId());\n\t\t} else {\n\t\t\tdefaultWorksiteIdModel = new ResourceModel(\"text.search.no.worksite\");\n\t\t}\n\t\t\n\t\tfinal LinkedHashMap<String, String> worksiteMap = new LinkedHashMap<String, String>();\n\t\t\n\t\tif (hasWorksites) {\n\t\t\tfor (Site worksite : worksites) {\n\t\t\t\tworksiteMap.put(worksite.getId(), worksite.getTitle());\n\t\t\t}\n\t\t} else {\n\t\t\tworksiteMap.put(defaultWorksiteIdModel.getObject(), defaultWorksiteIdModel.getObject());\n\t\t}\n\t\t\n\t\tIModel worksitesModel = new Model() {\n\n\t\t\tpublic ArrayList<String> getObject() {\n\t\t\t\treturn new ArrayList<String>(worksiteMap.keySet());\n\t\t\t}\n\t\t};\n\t\t\n\t\tworksiteChoice = new DropDownChoice(\"worksiteChoice\", defaultWorksiteIdModel, worksitesModel, new HashMapChoiceRenderer(worksiteMap));\n\t\tworksiteChoice.setMarkupId(\"worksiteselect\");\n\t\tworksiteChoice.setOutputMarkupId(true);\n\t\tworksiteChoice.setNullValid(false);\n\t\tworksiteChoice.setEnabled(hasWorksites);\n\t\tsearchForm.add(worksiteChoice);\n\t\t\n\t\t/* \n\t\t * \n\t\t * RESULTS\n\t\t * \n\t\t */\n\t\t\n\t\t//search results label/container\n\t\tnumSearchResultsContainer = new WebMarkupContainer(\"numSearchResultsContainer\");\n\t\tnumSearchResultsContainer.setOutputMarkupPlaceholderTag(true);\n\t\tnumSearchResults = new Label(\"numSearchResults\");\n\t\tnumSearchResults.setOutputMarkupId(true);\n\t\tnumSearchResults.setEscapeModelStrings(false);\n\t\tnumSearchResultsContainer.add(numSearchResults);\n\t\t\n\t\t//clear results button\n\t\tForm<Void> clearResultsForm = new Form<Void>(\"clearResults\");\n\t\tclearResultsForm.setOutputMarkupPlaceholderTag(true);\n\n\t\tclearButton = new AjaxButton(\"clearButton\", clearResultsForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\t\n\t\t\t\t// clear cookie if present\t \n                if (null != searchCookie) {\t \n                        getWebRequestCycle().getWebResponse().clearCookie(searchCookie);\t \n                }\n                \n\t\t\t\t//clear the fields, hide self, then repaint\n                searchField.clearInput();\n                searchField.updateModel();\n                \t\t\t\t\n\t\t\t\tnumSearchResultsContainer.setVisible(false);\n\t\t\t\tresultsContainer.setVisible(false);\n\t\t\t\tclearButton.setVisible(false);\n\t\t\t\t\n\t\t\t\ttarget.addComponent(searchField);\n\t\t\t\ttarget.addComponent(numSearchResultsContainer);\n\t\t\t\ttarget.addComponent(resultsContainer);\n\t\t\t\ttarget.addComponent(this);\n\t\t\t}\t\t\t\t\n\t\t};\n\t\tclearButton.setOutputMarkupPlaceholderTag(true);\n\t\tif (null == searchCookie) {\n\t\t\tclearButton.setVisible(false); //invisible until we have something to clear\n\t\t}\n\t\tclearButton.setModel(new ResourceModel(\"button.search.clear\"));\n\t\tclearResultsForm.add(clearButton);\n\t\tnumSearchResultsContainer.add(clearResultsForm);\n\t\t\n\t\tadd(numSearchResultsContainer);\n\t\t\n\t\t// model to wrap search results\n\t\tLoadableDetachableModel<List<Person>> resultsModel = new LoadableDetachableModel<List<Person>>(){\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected List<Person> load() {\n\t\t\t\treturn results;\n\t\t\t}\n\t\t};\t\n\t\t\t\t\n\t\t//container which wraps list\n\t\tresultsContainer = new WebMarkupContainer(\"searchResultsContainer\");\n\t\tresultsContainer.setOutputMarkupPlaceholderTag(true);\n\t\tif (null == searchCookie) {\n\t\t\tresultsContainer.setVisible(false); //hide initially\n\t\t}\n\t\t\n\t\t//connection window\n\t\tfinal ModalWindow connectionWindow = new ModalWindow(\"connectionWindow\");\n\t\t\n\t\t//search results\n\t\tfinal PageableListView<Person> resultsListView = new PageableListView<Person>(\"searchResults\",\n\t\t\t\tresultsModel, sakaiProxy.getMaxSearchResultsPerPage()) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final ListItem<Person> item) {\n\t\t        \n\t\t    \tPerson person = (Person)item.getModelObject();\n\t\t    \t\n\t\t    \t//get basic values\n\t\t    \tfinal String userUuid = person.getUuid();\n\t\t    \tfinal String displayName = person.getDisplayName();\n\t\t    \tfinal String userType = person.getType();\n\n\t\t    \t//get connection status\n\t\t    \tint connectionStatus = connectionsLogic.getConnectionStatus(currentUserUuid, userUuid);\n\t\t    \tboolean friend = (connectionStatus == ProfileConstants.CONNECTION_CONFIRMED) ? true : false;\n\t\t    \t\n\t\t    \t//image wrapper, links to profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"searchResultPhotoWrap\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(userUuid));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//image\n\t\t\t\tProfileImage searchResultPhoto = new ProfileImage(\"searchResultPhoto\", new Model<String>(userUuid));\n\t\t\t\tsearchResultPhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tfriendItem.add(searchResultPhoto);\n\t\t\t\t\n\t\t\t\titem.add(friendItem);\n\t\t    \t\n\t\t    \t//name and link to profile (if allowed or no link)\n\t\t    \tLink<String> profileLink = new Link<String>(\"searchResultProfileLink\", new Model<String>(userUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\t//if user found themself, go to own profile, else show other profile\n\t\t\t\t\t\tif(userUuid.equals(currentUserUuid)) {\n\t\t\t\t\t\t\tsetResponsePage(new MyProfile());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//gets userUuid of other user from the link's model\n\t\t\t\t\t\t\tsetResponsePage(new ViewProfile((String)getModelObject()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tprofileLink.add(new Label(\"searchResultName\", displayName));\n\t\t    \titem.add(profileLink);\n\t\t    \t\n\t\t    \t//status component\n\t\t    \tProfileStatusRenderer status = new ProfileStatusRenderer(\"searchResultStatus\", person, \"search-result-status-msg\", \"search-result-status-date\") {\n\t\t    \t\t@Override\n\t\t\t\t\tpublic boolean isVisible(){\n\t\t\t\t\t   return sakaiProxy.isProfileStatusEnabled();\n\t\t\t\t\t}\n\t\t    \t};\n\t\t\t\tstatus.setOutputMarkupId(true);\n\t\t\t\titem.add(status);\n\t\t    \t\n\t\t    \t\n\t\t    \t/* ACTIONS */\n\t\t\t\tboolean isFriendsListVisible = privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS);\n\t\t\t\tboolean isConnectionAllowed = sakaiProxy.isConnectionAllowedBetweenUserTypes(userType, currentUserType);\n\t\t    \t\n\n\t\t    \t//ADD CONNECTION LINK\n\t\t    \tfinal WebMarkupContainer c1 = new WebMarkupContainer(\"connectionContainer\");\n\t\t    \tc1.setOutputMarkupId(true);\n\n\t\t\t\tif(!isConnectionAllowed){\n\t\t\t\t\t//add blank components - TODO turn this into an EmptyLink component\n\t\t\t\t\tAjaxLink<Void> emptyLink = new AjaxLink<Void>(\"connectionLink\"){\n\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {}\n\t\t\t\t\t};\n\t\t\t\t\temptyLink.add(new Label(\"connectionLabel\"));\n\t\t\t\t\tc1.add(emptyLink);\n\t\t\t\t\tc1.setVisible(false);\n\t\t\t\t} else {\n\t\t\t\t\t//render the link\n\t\t\t    \tfinal Label connectionLabel = new Label(\"connectionLabel\");\n\t\t\t\t\tconnectionLabel.setOutputMarkupId(true);\n\t\t\t\t\t\n\t\t\t    \tfinal AjaxLink<String> connectionLink = new AjaxLink<String>(\"connectionLink\", new Model<String>(userUuid)) {\n\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get this item, reinit some values and set content for modal\n\t\t\t\t\t    \tfinal String userUuid = (String)getModelObject();\n\t\t\t\t\t    \tconnectionWindow.setContent(new AddFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, currentUserUuid, userUuid)); \n\t\t\t\t\t\t\t\n\t\t\t\t\t    \t// connection modal window handler \n\t\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t            \tif(friendActionModel.isRequested()) { \n\t\t\t\t\t            \t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t\t\t\t\t\t\t\t\t\tadd(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\t\t            \t\tsetEnabled(false);\n\t\t\t\t\t            \t\ttarget.addComponent(c1);\n\t\t\t\t\t            \t}\n\t\t\t\t\t            }\n\t\t\t\t\t        });\t\t\t\t\t\t\n\t\t\t\t\t\t\t//in preparation for the window being closed, update the text. this will only\n\t\t\t\t\t\t\t//be put into effect if its a successful model update from the window close\n\t\t\t\t\t    \t//connectionLabel.setModel(new ResourceModel(\"text.friend.requested\"));\n\t\t\t\t\t\t\t//this.add(new AttributeModifier(\"class\", true, new Model(\"instruction\")));\n\t\t\t\t\t\t\t//this.setEnabled(false);\n\t\t\t\t\t\t\t//friendActionModel.setUpdateThisComponentOnSuccess(this);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t            \t\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tconnectionLink.add(connectionLabel);\n\t\t\t\t\t\n\t\t\t\t\t//setup 'add connection' link\n\t\t\t\t\tif(StringUtils.equals(userUuid, currentUserUuid)) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.self\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon profile\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\n\t\t\t\t\t} else if(friend) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.confirmed\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-confirmed\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\n\t\t\t\t\t} else if (connectionStatus == ProfileConstants.CONNECTION_REQUESTED) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\t\t\t\t\t\n\t\t\t\t\t} else if (connectionStatus == ProfileConstants.CONNECTION_INCOMING) {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"text.friend.pending\"));\n\t\t\t\t\t\tconnectionLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\t\t\t\tconnectionLink.setEnabled(false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectionLabel.setDefaultModel(new ResourceModel(\"link.friend.add\"));\n\t\t\t\t\t}\n\t\t\t\t\tconnectionLink.setOutputMarkupId(true);\n\t\t\t\t\tc1.add(connectionLink);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.add(c1);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//VIEW FRIENDS LINK\n\t\t\t\tWebMarkupContainer c2 = new WebMarkupContainer(\"viewFriendsContainer\");\n\t\t    \tc2.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tfinal AjaxLink<String> viewFriendsLink = new AjaxLink<String>(\"viewFriendsLink\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t//if user found themself, go to MyFriends, else, ViewFriends\n\t\t\t\t\t\tif(userUuid.equals(currentUserUuid)) {\n\t\t\t\t\t\t\tsetResponsePage(new MyFriends());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetResponsePage(new ViewFriends(userUuid));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal Label viewFriendsLabel = new Label(\"viewFriendsLabel\", new ResourceModel(\"link.view.friends\"));\n\t\t\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\t\t\t\n\t\t\t\t//hide if not allowed\n\t\t\t\tif(!isFriendsListVisible) {\n\t\t\t\t\tviewFriendsLink.setEnabled(false);\n\t\t\t\t\tc2.setVisible(false);\n\t\t\t\t}\n\t\t\t\tviewFriendsLink.setOutputMarkupId(true);\n\t\t\t\tc2.add(viewFriendsLink);\n\t\t\t\titem.add(c2);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c3 = new WebMarkupContainer(\"emailContainer\");\n\t\t    \tc3.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tExternalLink emailLink = new ExternalLink(\"emailLink\",\n\t\t\t\t\t\t\"mailto:\" + person.getProfile().getEmail(),\n\t\t\t\t\t\tnew ResourceModel(\"profile.email\").getObject());\n\t\t    \t\n\t\t\t\tc3.add(emailLink);\n\t\t\t\t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getEmail()) ||\n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(person.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\tc3.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c3);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c4 = new WebMarkupContainer(\"websiteContainer\");\n\t\t    \tc4.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \t// TODO home page, university profile URL or academic/research URL (see PRFL-35)\n\t\t    \tExternalLink websiteLink = new ExternalLink(\"websiteLink\", person.getProfile()\n\t\t\t\t\t\t.getHomepage(), new ResourceModel(\n\t\t\t\t\t\t\"profile.homepage\").getObject()).setPopupSettings(new PopupSettings());\n\t\t    \t\n\t\t    \tc4.add(websiteLink);\n\t\t    \t\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getHomepage()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(person.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc4.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c4);\n\t\t\t\t\n\t\t\t\t// TODO personal, academic or business (see PRFL-35)\n\t\t\t\t\n\t\t\t\tif (true == privacyLogic.isActionAllowed(\n\t\t\t\t\t\tperson.getUuid(), currentUserUuid,  PrivacyType.PRIVACY_OPTION_BASICINFO)) {\n\t\t\t\t\t\n\t\t\t\t\titem.add(new Label(\"searchResultSummary\",\n\t\t\t\t\t\t\tStringUtils.abbreviate(ProfileUtils.stripHtml(\n\t\t\t\t\t\t\t\t\tperson.getProfile().getPersonalSummary()), 200)));\n\t\t\t\t} else {\n\t\t\t\t\titem.add(new Label(\"searchResultSummary\", \"\"));\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tresultsListView.add(new MySearchCookieBehavior(resultsListView));\n\t\tresultsContainer.add(resultsListView);\n\n\t\tfinal PagingNavigator searchResultsNavigator = new PagingNavigator(\"searchResultsNavigator\", resultsListView);\n\t\tsearchResultsNavigator.setOutputMarkupId(true);\n\t\tsearchResultsNavigator.setVisible(false);\n\n\t\tresultsContainer.add(searchResultsNavigator);\n\n\t\tadd(connectionWindow);\n\t\t\n\t\t//add results container\n\t\tadd(resultsContainer);\n\t\t\n\t\t/*\n\t\t * SEARCH HISTORY\n\t\t */\n\t\t\n\t\tfinal WebMarkupContainer searchHistoryContainer = new WebMarkupContainer(\"searchHistoryContainer\");\n\t\tsearchHistoryContainer.setOutputMarkupPlaceholderTag(true);\n\t\t\n\t\tLabel searchHistoryLabel = new Label(\"searchHistoryLabel\", new ResourceModel(\"text.search.history\"));\n\t\tsearchHistoryContainer.add(searchHistoryLabel);\n\t\t\n\t\tIModel<List<ProfileSearchTerm>> searchHistoryModel =  new LoadableDetachableModel<List<ProfileSearchTerm>>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected List<ProfileSearchTerm> load() {\n\t\t\t\tList<ProfileSearchTerm> searchHistory = searchLogic.getSearchHistory(currentUserUuid);\n\t\t\t\tif (null == searchHistory) {\n\t\t\t\t\treturn new ArrayList<ProfileSearchTerm>();\n\t\t\t\t} else {\n\t\t\t\t\treturn searchHistory;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t};\n\t\tListView<ProfileSearchTerm> searchHistoryList = new ListView<ProfileSearchTerm>(\"searchHistoryList\", searchHistoryModel) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void populateItem(final ListItem<ProfileSearchTerm> item) {\n\n\t\t\t\tAjaxLink<String> link = new AjaxLink<String>(\"previousSearchLink\") {\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\tif (null != target) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// post view event\n\t\t\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_SEARCH_BY_NAME, \"/profile/\"+currentUserUuid, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tProfileSearchTerm searchTerm = item.getModelObject();\n\t\t\t\t\t\t\t// this will update its position in list\n\t\t\t\t\t\t\tsearchLogic.addSearchTermToHistory(currentUserUuid, searchTerm);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsearchStringModel.setString(searchTerm.getSearchTerm());\n\t\t\t\t\t\t\tsearchTypeRadioGroup.setModel(new Model<String>(searchTerm.getSearchType()));\n\t\t\t\t\t\t\tconnectionsCheckBox.setModel(new Model<Boolean>(searchTerm.isConnections()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (null == searchTerm.getWorksite()) {\n\t\t\t\t\t\t\t\tworksiteCheckBox.setModel(new Model<Boolean>(false));\n\t\t\t\t\t\t\t\tworksiteChoice.setModel(new Model(defaultWorksiteIdModel));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tworksiteCheckBox.setModel(new Model<Boolean>(true));\n\t\t\t\t\t\t\t\tworksiteChoice.setModel(new Model(searchTerm.getWorksite()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetSearchCookie(searchTerm.getSearchType(), searchTerm.getSearchTerm(), searchTerm.getSearchPageNumber(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (ProfileConstants.SEARCH_TYPE_NAME.equals(searchTerm.getSearchType())) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tsearchByName(resultsListView, searchResultsNavigator,\n\t\t\t\t\t\t\t\t\t\tsearchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} else if (ProfileConstants.SEARCH_TYPE_INTEREST.equals(searchTerm.getSearchType())) {\n\n\t\t\t\t\t\t\t\tsearchByInterest(resultsListView, searchResultsNavigator,\n\t\t\t\t\t\t\t\t\t\tsearchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tlink.add(new Label(\"previousSearchLabel\", item.getModelObject().getSearchTerm()));\n\t\t\t\titem.add(link);\n\t\t\t}\n\t\t};\n\t\t\n\t\tsearchHistoryContainer.add(searchHistoryList);\n\t\tadd(searchHistoryContainer);\n\t\t\n\t\tif (null == searchLogic.getSearchHistory(currentUserUuid)) {\n\t\t\tsearchHistoryContainer.setVisible(false);\n\t\t}\n\t\t\n\t\t//clear button\n\t\tForm<Void> clearHistoryForm = new Form<Void>(\"clearHistory\");\n\t\tclearHistoryForm.setOutputMarkupPlaceholderTag(true);\n\n\t\tclearHistoryButton = new AjaxButton(\"clearHistoryButton\", clearHistoryForm) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\t\n\t\t\t\tsearchLogic.clearSearchHistory(currentUserUuid);\n\t\t\t\t\n\t\t\t\t//clear the fields, hide self, then repaint\n\t\t\t\tsearchField.clearInput();\n\t\t\t\tsearchField.updateModel();\n\t\t\t\t\t\t\t\t\n\t\t\t\tsearchHistoryContainer.setVisible(false);\n\t\t\t\tclearHistoryButton.setVisible(false);\n\t\t\t\t\n\t\t\t\ttarget.addComponent(searchField);\n\t\t\t\ttarget.addComponent(searchHistoryContainer);\n\t\t\t\ttarget.addComponent(this);\n\t\t\t}\t\t\t\t\n\t\t};\n\t\tclearHistoryButton.setOutputMarkupPlaceholderTag(true);\n\n\t\tif (null == searchLogic.getSearchHistory(currentUserUuid)) {\n\t\t\tclearHistoryButton.setVisible(false); //invisible until we have something to clear\n\t\t}\n\t\tclearHistoryButton.setModel(new ResourceModel(\"button.search.history.clear\"));\n\t\tclearHistoryForm.add(clearHistoryButton);\n\t\tsearchHistoryContainer.add(clearHistoryForm);\n\t\t\n\t\t/*\n\t\t * Combined search submit\n\t\t */\n\t\tIndicatingAjaxButton searchSubmitButton = new IndicatingAjaxButton(\"searchSubmit\", searchForm) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\t\n\t\t\t\tif(target != null) {\n\t\t\t\t\t//get the model and text entered\n\t\t\t\t\tStringModel model = (StringModel) form.getModelObject();\n\t\t\t\t\t//PRFL-811 - dont strip this down, we will lose i18n chars.\n\t\t\t\t\t//And there is no XSS risk since its only for the current user.\n\t\t\t\t\tString searchText = model.getString();\n\t\t\t\t\t\n\t\t\t\t\t//get search type\n\t\t\t\t\tString searchType = searchTypeRadioGroup.getModelObject();\n\t\t\t\t\t\n\t\t\t\t\tlog.debug(\"MySearch search by \" + searchType + \": \" + searchText);\n\t\t\t\t\t\n\t\t\t\t\tif(StringUtils.isBlank(searchText)){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// save search terms\n\t\t\t\t\tProfileSearchTerm searchTerm = new ProfileSearchTerm();\n\t\t\t\t\tsearchTerm.setUserUuid(currentUserUuid);\n\t\t\t\t\tsearchTerm.setSearchType(searchType);\n\t\t\t\t\tsearchTerm.setSearchTerm(searchText);\n\t\t\t\t\tsearchTerm.setSearchPageNumber(0);\n\t\t\t\t\tsearchTerm.setSearchDate(new Date());\n\t\t\t\t\tsearchTerm.setConnections(connectionsCheckBox.getModelObject());\n\t\t\t\t\t// set to worksite or empty depending on value of checkbox\n\t\t\t\t\tsearchTerm.setWorksite((worksiteCheckBox.getModelObject() == true) ? worksiteChoice.getValue() : null);\n\t\t\t\t\t\n\t\t\t\t\tsearchLogic.addSearchTermToHistory(currentUserUuid, searchTerm);\n\t\t\t\t\t\n\t\t\t\t\t// set cookie for current search (page 0 when submitting new search)\n\t\t\t\t\tsetSearchCookie(searchTerm.getSearchType(), URLEncoder.encode(searchTerm.getSearchTerm()), searchTerm.getSearchPageNumber(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\n\t\t\t\t\tif (ProfileConstants.SEARCH_TYPE_NAME.equals(searchType)) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tsearchByName(resultsListView, searchResultsNavigator, searchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\n\t\t\t\t\t\t//post view event\n\t\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_SEARCH_BY_NAME, \"/profile/\"+currentUserUuid, false);\n\t\t\t\t\t} else if (ProfileConstants.SEARCH_TYPE_INTEREST.equals(searchType)) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tsearchByInterest(resultsListView, searchResultsNavigator, searchHistoryContainer, target, searchTerm.getSearchTerm(), searchTerm.isConnections(), searchTerm.getWorksite());\n\t\t\t\t\t\t\n\t\t\t\t\t\t//post view event\n\t\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_SEARCH_BY_INTEREST, \"/profile/\"+currentUserUuid, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tsearchSubmitButton.setModel(new ResourceModel(\"button.search.generic\"));\n\t\tsearchForm.add(searchSubmitButton);\n        add(searchForm);\n\t\t                \n        if (null != searchCookie) {\n        \t\n        \tString searchString = getCookieSearchString(searchCookie.getValue());\n        \tsearchStringModel.setString(searchString);\n        \t\n        \tBoolean filterConnections = getCookieFilterConnections(searchCookie.getValue());\n        \tString worksiteId = getCookieFilterWorksite(searchCookie.getValue());\n        \tBoolean filterWorksite = (null == worksiteId) ? false : true;\n        \t\n    \t\tconnectionsCheckBox.setModel(new Model<Boolean>(filterConnections));\n    \t\tworksiteCheckBox.setModel(new Model<Boolean>(filterWorksite));\n    \t\tworksiteChoice.setModel(new Model((null == worksiteId) ? defaultWorksiteIdModel : worksiteId));\n    \t\t\n        \tif (searchCookie.getValue().startsWith(ProfileConstants.SEARCH_TYPE_NAME)) {\n        \t\tsearchTypeRadioGroup.setModel(new Model<String>(ProfileConstants.SEARCH_TYPE_NAME));\n\t\t\t\tsearchByName(resultsListView, searchResultsNavigator, searchHistoryContainer, null, searchString, filterConnections, worksiteId);\n\n        \t} else if (searchCookie.getValue().startsWith(ProfileConstants.SEARCH_TYPE_INTEREST)) {\n        \t\tsearchTypeRadioGroup.setModel(new Model<String>(ProfileConstants.SEARCH_TYPE_INTEREST));\n        \t\tsearchByInterest(resultsListView, searchResultsNavigator, searchHistoryContainer, null, searchString, filterConnections, worksiteId);\n        \t}\n        } else {\n        \t// default search type is name\n        \tsearchTypeRadioGroup.setModel(new Model<String>(ProfileConstants.SEARCH_TYPE_NAME));\n        }\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public RemoveFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n      \n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n                \n        //window setup\n\t\twindow.setTitle(new ResourceModel(\"title.friend.remove\")); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tadd(new ProfileImageRenderer(\"image\", userY, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.remove\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.remove\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//must be friend in order to remove them\n\t\t\t\tboolean friend = connectionsLogic.isUserXFriendOfUserY(userX, userY);\n\t\t\t\t\n\t\t\t\tif(!friend) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.not.friend\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//if ok, remove friend\n\t\t\t\tif(connectionsLogic.removeFriend(userX, userY)) {\n\t\t\t\t\tfriendActionModel.setRemoved(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_REMOVE, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.remove.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.remove\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setRemoved(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n        \n    }","id":100445,"modified_method":"public RemoveFriend(String id, final ModalWindow window, final FriendAction friendActionModel, final String userX, final String userY){\n        super(id);\n      \n        //get friendName\n        final String friendName = FormattedText.processFormattedText(sakaiProxy.getUserDisplayName(userY), new StringBuffer());\n                \n        //window setup\n\t\twindow.setTitle(new ResourceModel(\"title.friend.remove\")); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t//prefs and privacy\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userY);\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userY);\n\t\t\n\t\t//image\n\t\tProfileImage image = new ProfileImage(\"image\", new Model<String>(userY));\n\t\timage.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\tadd(image);\n\t\t\n        //text\n\t\tfinal Label text = new Label(\"text\", new StringResourceModel(\"text.friend.remove\", null, new Object[]{ friendName } ));\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n                   \n        //setup form\t\t\n\t\tForm form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\t//submit button\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.friend.remove\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\t/* double checking */\n\t\t\t\t\n\t\t\t\t//must be friend in order to remove them\n\t\t\t\tboolean friend = connectionsLogic.isUserXFriendOfUserY(userX, userY);\n\t\t\t\t\n\t\t\t\tif(!friend) {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.not.friend\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//if ok, remove friend\n\t\t\t\tif(connectionsLogic.removeFriend(userX, userY)) {\n\t\t\t\t\tfriendActionModel.setRemoved(true);\n\t\t\t\t\t\n\t\t\t\t\t//post event\n\t\t\t\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_FRIEND_REMOVE, \"/profile/\"+userY, true);\n\t\t\t\t\t\n\t\t\t\t\twindow.close(target);\n\t\t\t\t} else {\n\t\t\t\t\ttext.setDefaultModel(new StringResourceModel(\"error.friend.remove.failed\", null, new Object[]{ friendName } ));\n\t\t\t\t\tthis.setEnabled(false);\n\t\t\t\t\tthis.add(new AttributeModifier(\"class\", true, new Model(\"disabled\")));\n\t\t\t\t\ttarget.addComponent(text);\n\t\t\t\t\ttarget.addComponent(this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n            }\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\tsubmitButton.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"accessibility.connection.remove\", null, new Object[]{ friendName } )));\n\t\tform.add(submitButton);\n\t\t\n        \n\t\t//cancel button\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\tfriendActionModel.setRemoved(false);\n            \twindow.close(target);\n            }\n        };\n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        //add form\n        add(form);\n        \n    }","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public RemoveWallItem(String id, final ModalWindow window, final WallAction wallAction,\n\t\t\tfinal String userUuid, final WallItem wallItem) {\n\t\t\n\t\tsuper(id);\n\t\t\n\t\twindow.setTitle(new ResourceModel(\"title.wall.remove\")); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t// add profile image of wall post creator\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(wallItem.getCreatorUuid());\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(wallItem.getCreatorUuid());\n\t\t\n\t\tadd(new ProfileImageRenderer(\"image\", wallItem.getCreatorUuid(), prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, false));\n\t\t\n\t\tfinal Label text;\n\t\tif (false == wallItem.getCreatorUuid().equals(userUuid)) {\n\t\t\ttext = new Label(\"text\", new StringResourceModel(\n\t\t\t\t\t\"text.wall.remove.other\", null, new Object[]{ sakaiProxy.getUserDisplayName(wallItem.getCreatorUuid()) } ));\n\t\t} else {\n\t\t\ttext = new Label(\"text\", new StringResourceModel(\"text.wall.remove.mine\", null, new Object[]{ } ));\n\t\t}\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n        \n        Form form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.wall.remove\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\twallAction.setItemRemoved(wallLogic.removeWallItemFromWall(wallItem));\n\t\t\t\t\n            \twindow.close(target);\n\t\t\t}\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\t\n\t\tfinal AttributeModifier accessibilityLabel;\n\t\tif (false == wallItem.getCreatorUuid().equals(userUuid)) {\n\t\t\taccessibilityLabel = new AttributeModifier(\n\t\t\t\t\t\"title\", true, new StringResourceModel(\"accessibility.wall.remove.other\", null, new Object[]{ } ));\n\t\t} else {\n\t\t\taccessibilityLabel = new AttributeModifier(\n\t\t\t\t\t\"title\", true, new StringResourceModel(\"accessibility.wall.remove.mine\", null, new Object[]{ } ));\n\t\t}\n\t\tsubmitButton.add(accessibilityLabel);\n\t\tform.add(submitButton);\n\t\t\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\t\t\t\n            \twindow.close(target);\n            }\n        };\n        \n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        add(form);\n\t}","id":100446,"modified_method":"public RemoveWallItem(String id, final ModalWindow window, final WallAction wallAction,\n\t\t\tfinal String userUuid, final WallItem wallItem) {\n\t\t\n\t\tsuper(id);\n\t\t\n\t\twindow.setTitle(new ResourceModel(\"title.wall.remove\")); \n\t\twindow.setInitialHeight(150);\n\t\twindow.setInitialWidth(500);\n\t\twindow.setResizable(false);\n\t\t\n\t\t// add profile image of wall post creator\n\t\tProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(wallItem.getCreatorUuid());\n\t\tProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(wallItem.getCreatorUuid());\n\t\t\n\t\tProfileImage image = new ProfileImage(\"image\", new Model<String>(wallItem.getCreatorUuid()));\n\t\timage.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\tadd(image);\n\t\t\t\t\n\t\tfinal Label text;\n\t\tif (false == wallItem.getCreatorUuid().equals(userUuid)) {\n\t\t\ttext = new Label(\"text\", new StringResourceModel(\n\t\t\t\t\t\"text.wall.remove.other\", null, new Object[]{ sakaiProxy.getUserDisplayName(wallItem.getCreatorUuid()) } ));\n\t\t} else {\n\t\t\ttext = new Label(\"text\", new StringResourceModel(\"text.wall.remove.mine\", null, new Object[]{ } ));\n\t\t}\n        text.setEscapeModelStrings(false);\n        text.setOutputMarkupId(true);\n        add(text);\n        \n        Form form = new Form(\"form\");\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\tAjaxFallbackButton submitButton = new AjaxFallbackButton(\"submit\", new ResourceModel(\"button.wall.remove\"), form) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\n\t\t\t\t\n\t\t\t\twallAction.setItemRemoved(wallLogic.removeWallItemFromWall(wallItem));\n\t\t\t\t\n            \twindow.close(target);\n\t\t\t}\n\t\t};\n\t\tsubmitButton.add(new FocusOnLoadBehaviour());\n\t\t\n\t\tfinal AttributeModifier accessibilityLabel;\n\t\tif (false == wallItem.getCreatorUuid().equals(userUuid)) {\n\t\t\taccessibilityLabel = new AttributeModifier(\n\t\t\t\t\t\"title\", true, new StringResourceModel(\"accessibility.wall.remove.other\", null, new Object[]{ } ));\n\t\t} else {\n\t\t\taccessibilityLabel = new AttributeModifier(\n\t\t\t\t\t\"title\", true, new StringResourceModel(\"accessibility.wall.remove.mine\", null, new Object[]{ } ));\n\t\t}\n\t\tsubmitButton.add(accessibilityLabel);\n\t\tform.add(submitButton);\n\t\t\n\t\tAjaxFallbackButton cancelButton = new AjaxFallbackButton(\"cancel\", new ResourceModel(\"button.cancel\"), form) {\n            private static final long serialVersionUID = 1L;\n\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form form) {\t\t\t\n            \twindow.close(target);\n            }\n        };\n        \n        cancelButton.setDefaultFormProcessing(false);\n        form.add(cancelButton);\n        \n        add(form);\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public RequestedFriends(final String id, final String userUuid) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"RequestedFriends()\");\n\t\t\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\n\t\t//get our list of friend requests as an IDataProvider\n\t\tRequestedFriendsDataProvider provider = new RequestedFriendsDataProvider(userUuid);\n\t\t\n\t\t//init number of requests\n\t\tnumRequestedFriends = provider.size();\n\t\t\n\t\t//model so we can update the number of requests\n\t\tIModel<Integer> numRequestedFriendsModel = new Model<Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic Integer getObject() {\n\t\t\t\treturn numRequestedFriends;\n\t\t\t} \n\t\t};\n\t\t\n\t\t//heading\n\t\tfinal WebMarkupContainer requestedFriendsHeading = new WebMarkupContainer(\"requestedFriendsHeading\");\n\t\trequestedFriendsHeading.add(new Label(\"requestedFriendsLabel\", new ResourceModel(\"heading.friend.requests\")));\n\t\trequestedFriendsHeading.add(new Label(\"requestedFriendsNumber\", numRequestedFriendsModel));\n\t\trequestedFriendsHeading.setOutputMarkupId(true);\n\t\tadd(requestedFriendsHeading);\n\t\t\n\t\t//container which wraps list\n\t\tfinal WebMarkupContainer requestedFriendsContainer = new WebMarkupContainer(\"requestedFriendsContainer\");\n\t\trequestedFriendsContainer.setOutputMarkupId(true);\n\t\t\n\t\t//connection window\n\t\tfinal ModalWindow connectionWindow = new ModalWindow(\"connectionWindow\");\n\t\t\n\t\t//search results\n\t\tDataView<Person> requestedFriendsDataView = new DataView<Person>(\"connections\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<Person> item) {\n\t\t        \n\t\t\t\tPerson person = (Person)item.getDefaultModelObject();\n\t\t\t\tfinal String personUuid = person.getUuid();\n\t\t    \t\t\t    \t\n\t\t    \t//get name\n\t\t    \tString displayName = person.getDisplayName();\n\t\t    \t\n\t\t\t\t//get other objects\n\t\t\t\tProfilePrivacy privacy = person.getPrivacy();\n\t\t\t\tProfilePreferences prefs = person.getPreferences();\n\t\t    \t\n\t\t\t\t//image wrapper, links to profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"connectionPhotoWrap\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//image\n\t\t\t\tfriendItem.add(new ProfileImageRenderer(\"connectionPhoto\", personUuid, prefs, privacy, ProfileConstants.PROFILE_IMAGE_THUMBNAIL, true));\n\t\t\t\titem.add(friendItem);\n\t\t    \t\t\t    \t\n\t\t    \t//name and link to profile\n\t\t    \tLink<String> profileLink = new Link<String>(\"connectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tprofileLink.add(new Label(\"connectionName\", displayName));\n\t\t    \titem.add(profileLink);\n\t\t    \t\n\t\t    \t//status component\n\t\t\t\tProfileStatusRenderer status = new ProfileStatusRenderer(\"connectionStatus\", person, \"connection-status-msg\", \"connection-status-date\");\n\t\t\t\tstatus.setOutputMarkupId(true);\n\t\t\t\titem.add(status);\n\t\t\t\t\n\t\t\t\t//CONFIRM FRIEND LINK AND WINDOW\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c1 = new WebMarkupContainer(\"confirmConnectionContainer\");\n\t\t\t\tc1.setOutputMarkupId(true);\n\t\t\t\t\n\t\t    \tfinal AjaxLink<String> confirmConnectionLink = new AjaxLink<String>(\"confirmConnectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get this item, and set content for modalwindow\n\t\t\t\t    \tString personUuid = getModelObject();\n\t\t\t\t\t\tconnectionWindow.setContent(new ConfirmFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, userUuid, personUuid)); \n\n\t\t\t\t\t\t//modalwindow handler \n\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t\t\t\tif(friendActionModel.isConfirmed()) { \n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//decrement number of requests\n\t\t\t\t            \t\tnumRequestedFriends--;\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//remove friend item from display\n\t\t\t\t            \t\ttarget.appendJavascript(\"$('#\" + item.getMarkupId() + \"').slideUp();\");\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//update label\n\t\t\t\t            \t\ttarget.addComponent(requestedFriendsHeading);\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//get parent panel and repaint ConfirmedFriends panel via helper method in MyFriends \n\t\t\t\t            \t\tfindParent(MyFriends.class).updateConfirmedFriends(target, userUuid);\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//if none left, hide everything\n\t\t\t\t            \t\tif(numRequestedFriends==0) {\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsHeading.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsContainer.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t}\n\t\t\t\t            \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t        });\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//ContextImage confirmConnectionIcon = new ContextImage(\"confirmConnectionIcon\",new Model<String>(ProfileConstants.ACCEPT_IMG));\n\t\t\t\t//confirmConnectionLink.add(confirmConnectionIcon);\n\t\t\t\tconfirmConnectionLink.add(new AttributeModifier(\"title\", true,new ResourceModel(\"link.title.confirmfriend\")));\n\t\t\t\tconfirmConnectionLink.add(new AttributeModifier(\"alt\", true, new StringResourceModel(\"accessibility.connection.confirm\", null, new Object[]{ displayName } )));\n\t\t\t\tconfirmConnectionLink.add(new Label(\"confirmConnectionLabel\", new ResourceModel(\"link.friend.confirm\")).setOutputMarkupId(true));\n\t\t\t\tc1.add(confirmConnectionLink);\n\t\t\t\titem.add(c1);\n\t\t\t\t\n\t\t\t\t//IGNORE FRIEND LINK AND WINDOW\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c2 = new WebMarkupContainer(\"ignoreConnectionContainer\");\n\t\t\t\tc2.setOutputMarkupId(true);\n\t\t\t\t\n\t\t    \tfinal AjaxLink<String> ignoreConnectionLink = new AjaxLink<String>(\"ignoreConnectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get this item, and set content for modalwindow\n\t\t\t\t    \tString personUuid = getModelObject();\n\t\t\t\t\t\tconnectionWindow.setContent(new IgnoreFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, userUuid, personUuid)); \n\n\t\t\t\t\t\t//modalwindow handler \n\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t\t\t\tif(friendActionModel.isIgnored()) { \n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//decrement number of requests\n\t\t\t\t            \t\tnumRequestedFriends--;\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//remove friend item from display\n\t\t\t\t            \t\ttarget.appendJavascript(\"$('#\" + item.getMarkupId() + \"').slideUp();\");\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//update label\n\t\t\t\t            \t\ttarget.addComponent(requestedFriendsHeading);\n\t\t\t\t            \t\t\t\t            \t\t\n\t\t\t\t            \t\t//if none left, hide everything\n\t\t\t\t            \t\tif(numRequestedFriends==0) {\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsHeading.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsContainer.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t}\n\t\t\t\t            \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t        });\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//ContextImage ignoreConnectionIcon = new ContextImage(\"ignoreConnectionIcon\",new Model<String>(ProfileConstants.CANCEL_IMG));\n\t\t\t\t//ignoreConnectionLink.add(ignoreConnectionIcon);\n\t\t\t\tignoreConnectionLink.add(new AttributeModifier(\"title\", true,new ResourceModel(\"link.title.ignorefriend\")));\n\t\t\t\tignoreConnectionLink.add(new AttributeModifier(\"alt\", true, new StringResourceModel(\"accessibility.connection.ignore\", null, new Object[]{ displayName } )));\n\t\t\t\tignoreConnectionLink.add(new Label(\"ignoreConnectionLabel\", new ResourceModel(\"link.friend.ignore\")).setOutputMarkupId(true));\n\t\t\t\tc2.add(ignoreConnectionLink);\n\t\t\t\titem.add(c2);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c3 = new WebMarkupContainer(\"viewFriendsContainer\");\n\t\t    \tc3.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tfinal AjaxLink<String> viewFriendsLink = new AjaxLink<String>(\"viewFriendsLink\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t// always ViewFriends because a user isn't connected to himself\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(personUuid));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal Label viewFriendsLabel = new Label(\"viewFriendsLabel\", new ResourceModel(\"link.view.friends\"));\n\t\t\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\t\t\t\n\t\t\t\t//hide if not allowed\n\t\t\t\tif(!privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS)) {\n\t\t\t\t\tviewFriendsLink.setEnabled(false);\n\t\t\t\t\tc3.setVisible(false);\n\t\t\t\t}\n\t\t\t\tviewFriendsLink.setOutputMarkupId(true);\n\t\t\t\tc3.add(viewFriendsLink);\n\t\t\t\titem.add(c3);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c4 = new WebMarkupContainer(\"emailContainer\");\n\t\t    \tc4.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tExternalLink emailLink = new ExternalLink(\"emailLink\",\n\t\t\t\t\t\t\"mailto:\" + person.getProfile().getEmail(),\n\t\t\t\t\t\tnew ResourceModel(\"profile.email\").getObject());\n\t\t    \t\n\t\t\t\tc4.add(emailLink);\n\t\t\t\t\n\t\t\t\t// friend=false\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getEmail()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc4.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c4);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c5 = new WebMarkupContainer(\"websiteContainer\");\n\t\t    \tc5.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \t// TODO home page, university profile URL or academic/research URL (see PRFL-35)\n\t\t    \tExternalLink websiteLink = new ExternalLink(\"websiteLink\", person.getProfile()\n\t\t\t\t\t\t.getHomepage(), new ResourceModel(\n\t\t\t\t\t\t\"profile.homepage\").getObject()).setPopupSettings(new PopupSettings());\n\t\t    \t\n\t\t    \tc5.add(websiteLink);\n\n\t\t\t\t// friend=false\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getHomepage()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc5.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c5);\n\t\t\t\t\n\t\t\t\t// not a friend yet, so friend=false\n\t\t\t\tif (true == privacyLogic.isActionAllowed(\n\t\t\t\t\t\tperson.getUuid(), sakaiProxy.getCurrentUserId(), PrivacyType.PRIVACY_OPTION_BASICINFO)) {\n\t\t\t\t\t\n\t\t\t\t\titem.add(new Label(\"connectionSummary\",\n\t\t\t\t\t\t\tStringUtils.abbreviate(ProfileUtils.stripHtml(\n\t\t\t\t\t\t\t\t\tperson.getProfile().getPersonalSummary()), 200)));\n\t\t\t\t} else {\n\t\t\t\t\titem.add(new Label(\"connectionSummary\", \"\"));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t    }\n\t\t\t\n\t\t};\n\t\trequestedFriendsDataView.setOutputMarkupId(true);\n\t\trequestedFriendsContainer.add(requestedFriendsDataView);\n\n\t\t//add results container\n\t\tadd(requestedFriendsContainer);\n\t\t\n\t\t//add window\n\t\tadd(connectionWindow);\n\t\t\n\t\t//initially, if no requests, hide everything\n\t\tif(numRequestedFriends == 0) {\n\t\t\tthis.setVisible(false);\n\t\t}\n\t\t\n\t}","id":100447,"modified_method":"public RequestedFriends(final String id, final String userUuid) {\n\t\tsuper(id);\n\t\t\n\t\tlog.debug(\"RequestedFriends()\");\n\t\t\n\t\tfinal String currentUserUuid = sakaiProxy.getCurrentUserId();\n\t\t\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\n\t\t//get our list of friend requests as an IDataProvider\n\t\tRequestedFriendsDataProvider provider = new RequestedFriendsDataProvider(userUuid);\n\t\t\n\t\t//init number of requests\n\t\tnumRequestedFriends = provider.size();\n\t\t\n\t\t//model so we can update the number of requests\n\t\tIModel<Integer> numRequestedFriendsModel = new Model<Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic Integer getObject() {\n\t\t\t\treturn numRequestedFriends;\n\t\t\t} \n\t\t};\n\t\t\n\t\t//heading\n\t\tfinal WebMarkupContainer requestedFriendsHeading = new WebMarkupContainer(\"requestedFriendsHeading\");\n\t\trequestedFriendsHeading.add(new Label(\"requestedFriendsLabel\", new ResourceModel(\"heading.friend.requests\")));\n\t\trequestedFriendsHeading.add(new Label(\"requestedFriendsNumber\", numRequestedFriendsModel));\n\t\trequestedFriendsHeading.setOutputMarkupId(true);\n\t\tadd(requestedFriendsHeading);\n\t\t\n\t\t//container which wraps list\n\t\tfinal WebMarkupContainer requestedFriendsContainer = new WebMarkupContainer(\"requestedFriendsContainer\");\n\t\trequestedFriendsContainer.setOutputMarkupId(true);\n\t\t\n\t\t//connection window\n\t\tfinal ModalWindow connectionWindow = new ModalWindow(\"connectionWindow\");\n\t\t\n\t\t//search results\n\t\tDataView<Person> requestedFriendsDataView = new DataView<Person>(\"connections\", provider) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tprotected void populateItem(final Item<Person> item) {\n\t\t        \n\t\t\t\tPerson person = (Person)item.getDefaultModelObject();\n\t\t\t\tfinal String personUuid = person.getUuid();\n\t\t    \t\t\t    \t\n\t\t    \t//get name\n\t\t    \tString displayName = person.getDisplayName();\n\t\t    \t\n\t\t\t\t//get other objects\n\t\t\t\tProfilePrivacy privacy = person.getPrivacy();\n\t\t\t\tProfilePreferences prefs = person.getPreferences();\n\t\t    \t\n\t\t\t\t//image wrapper, links to profile\n\t\t    \tLink<String> friendItem = new Link<String>(\"connectionPhotoWrap\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//image\n\t\t\t\tProfileImage connectionPhoto = new ProfileImage(\"connectionPhoto\", new Model<String>(personUuid));\n\t\t\t\tconnectionPhoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\t\t\tfriendItem.add(connectionPhoto);\n\t\t\t\t\n\t\t\t\titem.add(friendItem);\n\t\t    \t\t\t    \t\n\t\t    \t//name and link to profile\n\t\t    \tLink<String> profileLink = new Link<String>(\"connectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick() {\n\t\t\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tprofileLink.add(new Label(\"connectionName\", displayName));\n\t\t    \titem.add(profileLink);\n\t\t    \t\n\t\t    \t//status component\n\t\t\t\tProfileStatusRenderer status = new ProfileStatusRenderer(\"connectionStatus\", person, \"connection-status-msg\", \"connection-status-date\");\n\t\t\t\tstatus.setOutputMarkupId(true);\n\t\t\t\titem.add(status);\n\t\t\t\t\n\t\t\t\t//CONFIRM FRIEND LINK AND WINDOW\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c1 = new WebMarkupContainer(\"confirmConnectionContainer\");\n\t\t\t\tc1.setOutputMarkupId(true);\n\t\t\t\t\n\t\t    \tfinal AjaxLink<String> confirmConnectionLink = new AjaxLink<String>(\"confirmConnectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get this item, and set content for modalwindow\n\t\t\t\t    \tString personUuid = getModelObject();\n\t\t\t\t\t\tconnectionWindow.setContent(new ConfirmFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, userUuid, personUuid)); \n\n\t\t\t\t\t\t//modalwindow handler \n\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t\t\t\tif(friendActionModel.isConfirmed()) { \n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//decrement number of requests\n\t\t\t\t            \t\tnumRequestedFriends--;\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//remove friend item from display\n\t\t\t\t            \t\ttarget.appendJavascript(\"$('#\" + item.getMarkupId() + \"').slideUp();\");\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//update label\n\t\t\t\t            \t\ttarget.addComponent(requestedFriendsHeading);\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//get parent panel and repaint ConfirmedFriends panel via helper method in MyFriends \n\t\t\t\t            \t\tfindParent(MyFriends.class).updateConfirmedFriends(target, userUuid);\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//if none left, hide everything\n\t\t\t\t            \t\tif(numRequestedFriends==0) {\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsHeading.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsContainer.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t}\n\t\t\t\t            \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t        });\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//ContextImage confirmConnectionIcon = new ContextImage(\"confirmConnectionIcon\",new Model<String>(ProfileConstants.ACCEPT_IMG));\n\t\t\t\t//confirmConnectionLink.add(confirmConnectionIcon);\n\t\t\t\tconfirmConnectionLink.add(new AttributeModifier(\"title\", true,new ResourceModel(\"link.title.confirmfriend\")));\n\t\t\t\tconfirmConnectionLink.add(new AttributeModifier(\"alt\", true, new StringResourceModel(\"accessibility.connection.confirm\", null, new Object[]{ displayName } )));\n\t\t\t\tconfirmConnectionLink.add(new Label(\"confirmConnectionLabel\", new ResourceModel(\"link.friend.confirm\")).setOutputMarkupId(true));\n\t\t\t\tc1.add(confirmConnectionLink);\n\t\t\t\titem.add(c1);\n\t\t\t\t\n\t\t\t\t//IGNORE FRIEND LINK AND WINDOW\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c2 = new WebMarkupContainer(\"ignoreConnectionContainer\");\n\t\t\t\tc2.setOutputMarkupId(true);\n\t\t\t\t\n\t\t    \tfinal AjaxLink<String> ignoreConnectionLink = new AjaxLink<String>(\"ignoreConnectionLink\", new Model<String>(personUuid)) {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//get this item, and set content for modalwindow\n\t\t\t\t    \tString personUuid = getModelObject();\n\t\t\t\t\t\tconnectionWindow.setContent(new IgnoreFriend(connectionWindow.getContentId(), connectionWindow, friendActionModel, userUuid, personUuid)); \n\n\t\t\t\t\t\t//modalwindow handler \n\t\t\t\t\t\tconnectionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\t\tpublic void onClose(AjaxRequestTarget target){\n\t\t\t\t\t\t\t\tif(friendActionModel.isIgnored()) { \n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//decrement number of requests\n\t\t\t\t            \t\tnumRequestedFriends--;\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//remove friend item from display\n\t\t\t\t            \t\ttarget.appendJavascript(\"$('#\" + item.getMarkupId() + \"').slideUp();\");\n\t\t\t\t            \t\t\n\t\t\t\t            \t\t//update label\n\t\t\t\t            \t\ttarget.addComponent(requestedFriendsHeading);\n\t\t\t\t            \t\t\t\t            \t\t\n\t\t\t\t            \t\t//if none left, hide everything\n\t\t\t\t            \t\tif(numRequestedFriends==0) {\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsHeading.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t\ttarget.appendJavascript(\"$('#\" + requestedFriendsContainer.getMarkupId() + \"').fadeOut();\");\n\t\t\t\t            \t\t}\n\t\t\t\t            \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t        });\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionWindow.show(target);\n\t\t\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//ContextImage ignoreConnectionIcon = new ContextImage(\"ignoreConnectionIcon\",new Model<String>(ProfileConstants.CANCEL_IMG));\n\t\t\t\t//ignoreConnectionLink.add(ignoreConnectionIcon);\n\t\t\t\tignoreConnectionLink.add(new AttributeModifier(\"title\", true,new ResourceModel(\"link.title.ignorefriend\")));\n\t\t\t\tignoreConnectionLink.add(new AttributeModifier(\"alt\", true, new StringResourceModel(\"accessibility.connection.ignore\", null, new Object[]{ displayName } )));\n\t\t\t\tignoreConnectionLink.add(new Label(\"ignoreConnectionLabel\", new ResourceModel(\"link.friend.ignore\")).setOutputMarkupId(true));\n\t\t\t\tc2.add(ignoreConnectionLink);\n\t\t\t\titem.add(c2);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c3 = new WebMarkupContainer(\"viewFriendsContainer\");\n\t\t    \tc3.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tfinal AjaxLink<String> viewFriendsLink = new AjaxLink<String>(\"viewFriendsLink\") {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t// always ViewFriends because a user isn't connected to himself\n\t\t\t\t\t\tsetResponsePage(new ViewFriends(personUuid));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal Label viewFriendsLabel = new Label(\"viewFriendsLabel\", new ResourceModel(\"link.view.friends\"));\n\t\t\t\tviewFriendsLink.add(viewFriendsLabel);\n\t\t\t\t\n\t\t\t\t//hide if not allowed\n\t\t\t\tif(!privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS)) {\n\t\t\t\t\tviewFriendsLink.setEnabled(false);\n\t\t\t\t\tc3.setVisible(false);\n\t\t\t\t}\n\t\t\t\tviewFriendsLink.setOutputMarkupId(true);\n\t\t\t\tc3.add(viewFriendsLink);\n\t\t\t\titem.add(c3);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c4 = new WebMarkupContainer(\"emailContainer\");\n\t\t    \tc4.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \tExternalLink emailLink = new ExternalLink(\"emailLink\",\n\t\t\t\t\t\t\"mailto:\" + person.getProfile().getEmail(),\n\t\t\t\t\t\tnew ResourceModel(\"profile.email\").getObject());\n\t\t    \t\n\t\t\t\tc4.add(emailLink);\n\t\t\t\t\n\t\t\t\t// friend=false\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getEmail()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc4.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c4);\n\t\t\t\t\n\t\t\t\tWebMarkupContainer c5 = new WebMarkupContainer(\"websiteContainer\");\n\t\t    \tc5.setOutputMarkupId(true);\n\t\t    \t\n\t\t    \t// TODO home page, university profile URL or academic/research URL (see PRFL-35)\n\t\t    \tExternalLink websiteLink = new ExternalLink(\"websiteLink\", person.getProfile()\n\t\t\t\t\t\t.getHomepage(), new ResourceModel(\n\t\t\t\t\t\t\"profile.homepage\").getObject()).setPopupSettings(new PopupSettings());\n\t\t    \t\n\t\t    \tc5.add(websiteLink);\n\n\t\t\t\t// friend=false\n\t\t\t\tif (StringUtils.isBlank(person.getProfile().getHomepage()) || \n\t\t\t\t\t\tfalse == privacyLogic.isActionAllowed(\n\t\t\t\t\t\t\t\tperson.getUuid(), currentUserUuid, PrivacyType.PRIVACY_OPTION_CONTACTINFO)) {\n\t\t\t\t\t\n\t\t\t\t\tc5.setVisible(false);\n\t\t\t\t}\n\t\t\t\titem.add(c5);\n\t\t\t\t\n\t\t\t\t// not a friend yet, so friend=false\n\t\t\t\tif (true == privacyLogic.isActionAllowed(\n\t\t\t\t\t\tperson.getUuid(), sakaiProxy.getCurrentUserId(), PrivacyType.PRIVACY_OPTION_BASICINFO)) {\n\t\t\t\t\t\n\t\t\t\t\titem.add(new Label(\"connectionSummary\",\n\t\t\t\t\t\t\tStringUtils.abbreviate(ProfileUtils.stripHtml(\n\t\t\t\t\t\t\t\t\tperson.getProfile().getPersonalSummary()), 200)));\n\t\t\t\t} else {\n\t\t\t\t\titem.add(new Label(\"connectionSummary\", \"\"));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.setOutputMarkupId(true);\n\t\t    }\n\t\t\t\n\t\t};\n\t\trequestedFriendsDataView.setOutputMarkupId(true);\n\t\trequestedFriendsContainer.add(requestedFriendsDataView);\n\n\t\t//add results container\n\t\tadd(requestedFriendsContainer);\n\t\t\n\t\t//add window\n\t\tadd(connectionWindow);\n\t\t\n\t\t//initially, if no requests, hide everything\n\t\tif(numRequestedFriends == 0) {\n\t\t\tthis.setVisible(false);\n\t\t}\n\t\t\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ViewProfile(final String userUuid, final String tab)   {\n\t\t\t\t\n\t\tlog.debug(\"ViewProfile()\");\n\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\t\n\t\t//get current user info\n\t\tUser currentUser = sakaiProxy.getUserQuietly(sakaiProxy.getCurrentUserId());\n\t\tfinal String currentUserId = currentUser.getId();\n\t\tString currentUserType = currentUser.getType();\n\t\t\n\t\t//double check, if somehow got to own ViewPage, redirect to MyProfile instead\n\t\tif(userUuid.equals(currentUserId)) {\n\t\t\tlog.warn(\"ViewProfile: user \" + userUuid + \" accessed ViewProfile for self. Redirecting...\");\n\t\t\tthrow new RestartResponseException(new MyProfile());\n\t\t}\n\t\t\n\t\t//check if super user, to grant editing rights to another user's profile\n\t\tif(sakaiProxy.isSuperUser()) {\n\t\t\tlog.warn(\"ViewProfile: superUser \" + currentUserId + \" accessed ViewProfile for \" + userUuid + \". Redirecting to allow edit.\");\n\t\t\tthrow new RestartResponseException(new MyProfile(userUuid));\n\t\t}\n\t\t\n\t\t//post view event\n\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_PROFILE_VIEW_OTHER, \"/profile/\"+userUuid, false);\n\t\t\n\t\t/* DEPRECATED via PRFL-24 when privacy was relaxed\n\t\tif(!isProfileAllowed) {\n\t\t\tthrow new ProfileIllegalAccessException(\"User: \" + currentUserId + \" is not allowed to view profile for: \" + userUuid);\n\t\t}\n\t\t*/\n\t\t\t\n\t\t//get some values from User\n\t\tUser user = sakaiProxy.getUserQuietly(userUuid);\n\t\tString userDisplayName = user.getDisplayName();\n\t\tString userType = user.getType();\n\t\t\n\t\t//init\n\t\tfinal boolean friend;\n\t\tboolean friendRequestToThisPerson = false;\n\t\tboolean friendRequestFromThisPerson = false;\n\n\t\t//friend?\n\t\tfriend = connectionsLogic.isUserXFriendOfUserY(userUuid, currentUserId);\n\n\t\t//if not friend, has a friend request already been made to this person?\n\t\tif(!friend) {\n\t\t\tfriendRequestToThisPerson = connectionsLogic.isFriendRequestPending(currentUserId, userUuid);\n\t\t}\n\t\t\n\t\t//if not friend and no friend request to this person, has a friend request been made from this person to the current user?\n\t\tif(!friend && !friendRequestToThisPerson) {\n\t\t\tfriendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userUuid, currentUserId);\n\t\t}\n\t\t\n\t\t//privacy checks\n\t\tfinal ProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userUuid);\n\t\t\n\t\tboolean isFriendsListVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_MYFRIENDS);\n\t\tboolean isKudosVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_MYKUDOS);\n\t\tboolean isGalleryVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_MYPICTURES);\n\t\tboolean isConnectionAllowed = sakaiProxy.isConnectionAllowedBetweenUserTypes(currentUserType, userType);\n\t\tboolean isOnlineStatusVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_ONLINESTATUS);\n\t\t\n\t\tfinal ProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userUuid);\n\n\t\t/* IMAGE */\n\t\tadd(new ProfileImageRenderer(\"photo\", userUuid, prefs, privacy, ProfileConstants.PROFILE_IMAGE_MAIN, true));\n\t\t\n\t\t/* NAME */\n\t\tLabel profileName = new Label(\"profileName\", userDisplayName);\n\t\tadd(profileName);\n\t\t\n\t\t/* ONLINE PRESENCE INDICATOR */\n\t\tif(prefs.isShowOnlineStatus() && isOnlineStatusVisible){\n\t\t\tadd(new OnlinePresenceIndicator(\"online\", userUuid));\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"online\"));\n\t\t}\n\t\t\n\t\t/*STATUS PANEL */\n\t\tif(sakaiProxy.isProfileStatusEnabled()) {\n\t\t\tadd(new ProfileStatusRenderer(\"status\", userUuid, privacy, null, \"tiny\"));\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"status\"));\n\t\t}\n\t\t\n\t\t/* TABS */\n\t\tList<ITab> tabs = new ArrayList<ITab>();\n\t\t\n\t\tAjaxTabbedPanel tabbedPanel = new AjaxTabbedPanel(\"viewProfileTabs\", tabs) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t// overridden so we can add tooltips to tabs\n\t\t\t@Override\n\t\t\tprotected WebMarkupContainer newLink(String linkId, final int index) {\n\t\t\t\tWebMarkupContainer link = super.newLink(linkId, index);\n\t\t\t\t\n\t\t\t\tif (ProfileConstants.TAB_INDEX_PROFILE == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.profile.tooltip\")));\n\t\t\t\t\t\n\t\t\t\t} else if (ProfileConstants.TAB_INDEX_WALL == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.wall.tooltip\")));\t\n\t\t\t\t}\n\t\t\t\treturn link;\n\t\t\t}\n\t\t};\n\t\t\n\t\tCookie tabCookie = getWebRequestCycle().getWebRequest().getCookie(ProfileConstants.TAB_COOKIE);\n\t\t\n\t\tif (sakaiProxy.isProfileFieldsEnabled()) {\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.profile\")) {\n\t\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\t\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_PROFILE);\n\t\t\t\t\treturn new ViewProfilePanel(panelId, userUuid, currentUserId,\n\t\t\t\t\t\t\tprivacy, friend);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (true == sakaiProxy.isWallEnabledGlobally()) {\n\t\t\t\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.wall\")) {\n\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t\t\treturn new ViewWallPanel(panelId, userUuid);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (true == sakaiProxy.isWallDefaultProfilePage() && null == tabCookie) {\n\t\t\t\t\n\t\t\t\ttabbedPanel.setSelectedTab(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif (null != tab) {\n\t\t\ttabbedPanel.setSelectedTab(Integer.parseInt(tab));\n\t\t} else if (null != tabCookie) {\n\t\t\ttry {\n\t\t\t\ttabbedPanel.setSelectedTab(Integer.parseInt(tabCookie.getValue()));\n\t\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t\t//do nothing. This will be thrown if the cookie contains a value > the number of tabs but thats ok.\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd(tabbedPanel);\n\t\t\n\t\t/* SIDELINKS */\n\t\tWebMarkupContainer sideLinks = new WebMarkupContainer(\"sideLinks\");\n\t\tint visibleSideLinksCount = 0;\n\t\t\n\t\tWebMarkupContainer addFriendContainer = new WebMarkupContainer(\"addFriendContainer\");\n\t\t\n\t\t//ADD FRIEND MODAL WINDOW\n\t\tfinal ModalWindow addFriendWindow = new ModalWindow(\"addFriendWindow\");\n\n\t\t//FRIEND LINK/STATUS\n\t\tfinal AjaxLink<Void> addFriendLink = new AjaxLink<Void>(\"addFriendLink\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n    \t\t\taddFriendWindow.show(target);\n\t\t\t}\n\t\t};\n\t\t\n\t\tfinal Label addFriendLabel = new Label(\"addFriendLabel\");\n\t\taddFriendLink.add(addFriendLabel);\n\t\t\n\t\taddFriendContainer.add(addFriendLink);\n\t\t\n\t\t//setup link/label and windows\n\t\tif(friend) {\n\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.confirmed\"));\n    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-confirmed\")));\n\t\t\taddFriendLink.setEnabled(false);\n\t\t} else if (friendRequestToThisPerson) {\n\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\taddFriendLink.setEnabled(false);\n\t\t} else if (friendRequestFromThisPerson) {\n\t\t\t//TODO (confirm pending friend request link)\n\t\t\t//could be done by setting the content off the addFriendWindow.\n\t\t\t//will need to rename some links to make more generic and set the onClick and setContent in here for link and window\n\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.pending\"));\n    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\taddFriendLink.setEnabled(false);\n\t\t}  else {\n\t\t\taddFriendLabel.setDefaultModel(new StringResourceModel(\"link.friend.add.name\", null, new Object[]{ user.getFirstName() } ));\n\t\t\taddFriendWindow.setContent(new AddFriend(addFriendWindow.getContentId(), addFriendWindow, friendActionModel, currentUserId, userUuid)); \n\t\t}\n\t\tsideLinks.add(addFriendContainer);\n\t\t\n\t\t\n\t\t//ADD FRIEND MODAL WINDOW HANDLER \n\t\taddFriendWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClose(AjaxRequestTarget target){\n            \tif(friendActionModel.isRequested()) { \n            \t\t//friend was successfully requested, update label and link\n            \t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n            \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n            \t\taddFriendLink.setEnabled(false);\n            \t\ttarget.addComponent(addFriendLink);\n            \t}\n            }\n        });\n\t\t\n\t\tadd(addFriendWindow);\n\t\t\n\t\t//hide connection link if not allowed\n\t\tif(!isConnectionAllowed) {\n\t\t\taddFriendContainer.setVisible(false);\n\t\t} else {\n\t\t\tvisibleSideLinksCount++;\n\t\t}\n\t\t\n\t\t//hide entire list if no links to show\n\t\tif(visibleSideLinksCount == 0) {\n\t\t\tsideLinks.setVisible(false);\n\t\t}\n\t\t\n\t\tadd(sideLinks);\n\t\t\n\t\t\n\t\t/* KUDOS PANEL */\n\t\tif(isKudosVisible) {\n\t\t\tadd(new AjaxLazyLoadPanel(\"myKudos\"){\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\t\tif(prefs.isShowKudos()){\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tint score = kudosLogic.getKudos(userUuid);\n\t\t\t\t\t\tif(score > 0) {\n\t\t\t\t\t\t\treturn new KudosPanel(markupId, userUuid, currentUserId, score);\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\treturn new EmptyPanel(markupId);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"myKudos\").setVisible(false));\n\t\t}\n\t\t\n\t\t\n\t\t/* FRIENDS FEED PANEL */\n\t\tif(isFriendsListVisible) {\n\t\t\tadd(new AjaxLazyLoadPanel(\"friendsFeed\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t            public Component getLazyLoadComponent(String markupId) {\n\t            \treturn new FriendsFeed(markupId, userUuid, currentUserId);\n\t            }\n\t\t\t\t\n\t        });\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"friendsFeed\").setVisible(false));\n\t\t}\n\t\t\n\t\t/* GALLERY FEED PANEL */\n\t\tif (sakaiProxy.isProfileGalleryEnabledGlobally() && isGalleryVisible && prefs.isShowGalleryFeed()) {\n\t\t\tadd(new AjaxLazyLoadPanel(\"galleryFeed\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\t\treturn new GalleryFeed(markupId, userUuid, currentUserId).setOutputMarkupId(true);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"galleryFeed\").setVisible(false));\n\t\t}\n\t}","id":100448,"modified_method":"public ViewProfile(final String userUuid, final String tab)   {\n\t\t\t\t\n\t\tlog.debug(\"ViewProfile()\");\n\n\t\t//setup model to store the actions in the modal windows\n\t\tfinal FriendAction friendActionModel = new FriendAction();\n\t\t\n\t\t//get current user info\n\t\tUser currentUser = sakaiProxy.getUserQuietly(sakaiProxy.getCurrentUserId());\n\t\tfinal String currentUserId = currentUser.getId();\n\t\tString currentUserType = currentUser.getType();\n\t\t\n\t\t//double check, if somehow got to own ViewPage, redirect to MyProfile instead\n\t\tif(userUuid.equals(currentUserId)) {\n\t\t\tlog.warn(\"ViewProfile: user \" + userUuid + \" accessed ViewProfile for self. Redirecting...\");\n\t\t\tthrow new RestartResponseException(new MyProfile());\n\t\t}\n\t\t\n\t\t//check if super user, to grant editing rights to another user's profile\n\t\tif(sakaiProxy.isSuperUser()) {\n\t\t\tlog.warn(\"ViewProfile: superUser \" + currentUserId + \" accessed ViewProfile for \" + userUuid + \". Redirecting to allow edit.\");\n\t\t\tthrow new RestartResponseException(new MyProfile(userUuid));\n\t\t}\n\t\t\n\t\t//post view event\n\t\tsakaiProxy.postEvent(ProfileConstants.EVENT_PROFILE_VIEW_OTHER, \"/profile/\"+userUuid, false);\n\t\t\n\t\t/* DEPRECATED via PRFL-24 when privacy was relaxed\n\t\tif(!isProfileAllowed) {\n\t\t\tthrow new ProfileIllegalAccessException(\"User: \" + currentUserId + \" is not allowed to view profile for: \" + userUuid);\n\t\t}\n\t\t*/\n\t\t\t\n\t\t//get some values from User\n\t\tUser user = sakaiProxy.getUserQuietly(userUuid);\n\t\tString userDisplayName = user.getDisplayName();\n\t\tString userType = user.getType();\n\t\t\n\t\t//init\n\t\tfinal boolean friend;\n\t\tboolean friendRequestToThisPerson = false;\n\t\tboolean friendRequestFromThisPerson = false;\n\n\t\t//friend?\n\t\tfriend = connectionsLogic.isUserXFriendOfUserY(userUuid, currentUserId);\n\n\t\t//if not friend, has a friend request already been made to this person?\n\t\tif(!friend) {\n\t\t\tfriendRequestToThisPerson = connectionsLogic.isFriendRequestPending(currentUserId, userUuid);\n\t\t}\n\t\t\n\t\t//if not friend and no friend request to this person, has a friend request been made from this person to the current user?\n\t\tif(!friend && !friendRequestToThisPerson) {\n\t\t\tfriendRequestFromThisPerson = connectionsLogic.isFriendRequestPending(userUuid, currentUserId);\n\t\t}\n\t\t\n\t\t//privacy checks\n\t\tfinal ProfilePrivacy privacy = privacyLogic.getPrivacyRecordForUser(userUuid);\n\t\t\n\t\tboolean isFriendsListVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_MYFRIENDS);\n\t\tboolean isKudosVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_MYKUDOS);\n\t\tboolean isGalleryVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_MYPICTURES);\n\t\tboolean isConnectionAllowed = sakaiProxy.isConnectionAllowedBetweenUserTypes(currentUserType, userType);\n\t\tboolean isOnlineStatusVisible = privacyLogic.isActionAllowed(userUuid, currentUserId, PrivacyType.PRIVACY_OPTION_ONLINESTATUS);\n\t\t\n\t\tfinal ProfilePreferences prefs = preferencesLogic.getPreferencesRecordForUser(userUuid);\n\n\t\t/* IMAGE */\n\t\tadd(new ProfileImage(\"photo\", new Model<String>(userUuid)));\n\t\t\n\t\t/* NAME */\n\t\tLabel profileName = new Label(\"profileName\", userDisplayName);\n\t\tadd(profileName);\n\t\t\n\t\t/* ONLINE PRESENCE INDICATOR */\n\t\tif(prefs.isShowOnlineStatus() && isOnlineStatusVisible){\n\t\t\tadd(new OnlinePresenceIndicator(\"online\", userUuid));\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"online\"));\n\t\t}\n\t\t\n\t\t/*STATUS PANEL */\n\t\tif(sakaiProxy.isProfileStatusEnabled()) {\n\t\t\tadd(new ProfileStatusRenderer(\"status\", userUuid, privacy, null, \"tiny\"));\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"status\"));\n\t\t}\n\t\t\n\t\t/* TABS */\n\t\tList<ITab> tabs = new ArrayList<ITab>();\n\t\t\n\t\tAjaxTabbedPanel tabbedPanel = new AjaxTabbedPanel(\"viewProfileTabs\", tabs) {\n\t\t\t\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t// overridden so we can add tooltips to tabs\n\t\t\t@Override\n\t\t\tprotected WebMarkupContainer newLink(String linkId, final int index) {\n\t\t\t\tWebMarkupContainer link = super.newLink(linkId, index);\n\t\t\t\t\n\t\t\t\tif (ProfileConstants.TAB_INDEX_PROFILE == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.profile.tooltip\")));\n\t\t\t\t\t\n\t\t\t\t} else if (ProfileConstants.TAB_INDEX_WALL == index) {\n\t\t\t\t\tlink.add(new AttributeModifier(\"title\", true,\n\t\t\t\t\t\t\tnew ResourceModel(\"link.tab.wall.tooltip\")));\t\n\t\t\t\t}\n\t\t\t\treturn link;\n\t\t\t}\n\t\t};\n\t\t\n\t\tCookie tabCookie = getWebRequestCycle().getWebRequest().getCookie(ProfileConstants.TAB_COOKIE);\n\t\t\n\t\tif (sakaiProxy.isProfileFieldsEnabled()) {\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.profile\")) {\n\t\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\t\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_PROFILE);\n\t\t\t\t\treturn new ViewProfilePanel(panelId, userUuid, currentUserId,\n\t\t\t\t\t\t\tprivacy, friend);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (true == sakaiProxy.isWallEnabledGlobally()) {\n\t\t\t\n\t\t\ttabs.add(new AbstractTab(new ResourceModel(\"link.tab.wall\")) {\n\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Panel getPanel(String panelId) {\n\n\t\t\t\t\tsetTabCookie(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t\t\treturn new ViewWallPanel(panelId, userUuid);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (true == sakaiProxy.isWallDefaultProfilePage() && null == tabCookie) {\n\t\t\t\t\n\t\t\t\ttabbedPanel.setSelectedTab(ProfileConstants.TAB_INDEX_WALL);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif (null != tab) {\n\t\t\ttabbedPanel.setSelectedTab(Integer.parseInt(tab));\n\t\t} else if (null != tabCookie) {\n\t\t\ttry {\n\t\t\t\ttabbedPanel.setSelectedTab(Integer.parseInt(tabCookie.getValue()));\n\t\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t\t//do nothing. This will be thrown if the cookie contains a value > the number of tabs but thats ok.\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd(tabbedPanel);\n\t\t\n\t\t/* SIDELINKS */\n\t\tWebMarkupContainer sideLinks = new WebMarkupContainer(\"sideLinks\");\n\t\tint visibleSideLinksCount = 0;\n\t\t\n\t\tWebMarkupContainer addFriendContainer = new WebMarkupContainer(\"addFriendContainer\");\n\t\t\n\t\t//ADD FRIEND MODAL WINDOW\n\t\tfinal ModalWindow addFriendWindow = new ModalWindow(\"addFriendWindow\");\n\n\t\t//FRIEND LINK/STATUS\n\t\tfinal AjaxLink<Void> addFriendLink = new AjaxLink<Void>(\"addFriendLink\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n    \t\t\taddFriendWindow.show(target);\n\t\t\t}\n\t\t};\n\t\t\n\t\tfinal Label addFriendLabel = new Label(\"addFriendLabel\");\n\t\taddFriendLink.add(addFriendLabel);\n\t\t\n\t\taddFriendContainer.add(addFriendLink);\n\t\t\n\t\t//setup link/label and windows\n\t\tif(friend) {\n\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.confirmed\"));\n    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-confirmed\")));\n\t\t\taddFriendLink.setEnabled(false);\n\t\t} else if (friendRequestToThisPerson) {\n\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\taddFriendLink.setEnabled(false);\n\t\t} else if (friendRequestFromThisPerson) {\n\t\t\t//TODO (confirm pending friend request link)\n\t\t\t//could be done by setting the content off the addFriendWindow.\n\t\t\t//will need to rename some links to make more generic and set the onClick and setContent in here for link and window\n\t\t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.pending\"));\n    \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n\t\t\taddFriendLink.setEnabled(false);\n\t\t}  else {\n\t\t\taddFriendLabel.setDefaultModel(new StringResourceModel(\"link.friend.add.name\", null, new Object[]{ user.getFirstName() } ));\n\t\t\taddFriendWindow.setContent(new AddFriend(addFriendWindow.getContentId(), addFriendWindow, friendActionModel, currentUserId, userUuid)); \n\t\t}\n\t\tsideLinks.add(addFriendContainer);\n\t\t\n\t\t\n\t\t//ADD FRIEND MODAL WINDOW HANDLER \n\t\taddFriendWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClose(AjaxRequestTarget target){\n            \tif(friendActionModel.isRequested()) { \n            \t\t//friend was successfully requested, update label and link\n            \t\taddFriendLabel.setDefaultModel(new ResourceModel(\"text.friend.requested\"));\n            \t\taddFriendLink.add(new AttributeModifier(\"class\", true, new Model<String>(\"instruction icon connection-request\")));\n            \t\taddFriendLink.setEnabled(false);\n            \t\ttarget.addComponent(addFriendLink);\n            \t}\n            }\n        });\n\t\t\n\t\tadd(addFriendWindow);\n\t\t\n\t\t//hide connection link if not allowed\n\t\tif(!isConnectionAllowed) {\n\t\t\taddFriendContainer.setVisible(false);\n\t\t} else {\n\t\t\tvisibleSideLinksCount++;\n\t\t}\n\t\t\n\t\t//hide entire list if no links to show\n\t\tif(visibleSideLinksCount == 0) {\n\t\t\tsideLinks.setVisible(false);\n\t\t}\n\t\t\n\t\tadd(sideLinks);\n\t\t\n\t\t\n\t\t/* KUDOS PANEL */\n\t\tif(isKudosVisible) {\n\t\t\tadd(new AjaxLazyLoadPanel(\"myKudos\"){\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\t\tif(prefs.isShowKudos()){\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tint score = kudosLogic.getKudos(userUuid);\n\t\t\t\t\t\tif(score > 0) {\n\t\t\t\t\t\t\treturn new KudosPanel(markupId, userUuid, currentUserId, score);\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\treturn new EmptyPanel(markupId);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"myKudos\").setVisible(false));\n\t\t}\n\t\t\n\t\t\n\t\t/* FRIENDS FEED PANEL */\n\t\tif(isFriendsListVisible) {\n\t\t\tadd(new AjaxLazyLoadPanel(\"friendsFeed\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@Override\n\t            public Component getLazyLoadComponent(String markupId) {\n\t            \treturn new FriendsFeed(markupId, userUuid, currentUserId);\n\t            }\n\t\t\t\t\n\t        });\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"friendsFeed\").setVisible(false));\n\t\t}\n\t\t\n\t\t/* GALLERY FEED PANEL */\n\t\tif (sakaiProxy.isProfileGalleryEnabledGlobally() && isGalleryVisible && prefs.isShowGalleryFeed()) {\n\t\t\tadd(new AjaxLazyLoadPanel(\"galleryFeed\") {\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic Component getLazyLoadComponent(String markupId) {\n\t\t\t\t\treturn new GalleryFeed(markupId, userUuid, currentUserId).setOutputMarkupId(true);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tadd(new EmptyPanel(\"galleryFeed\").setVisible(false));\n\t\t}\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public WallItemCommentPanel(String id, WallItemComment comment) {\n\t\tsuper(id);\n\t\t\n\t\tsetOutputMarkupId(true);\n\t\t\n\t\t// image wrapper, links to profile\n\t\tLink<String> wallItemPhoto = new Link<String>(\"wallItemPhotoWrap\",\n\t\t\t\tnew Model<String>(comment.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t};\n\n\t\t// image\n\t\twallItemPhoto.add(new ProfileImageRenderer(\"wallItemPhoto\", comment\n\t\t\t\t.getCreatorUuid()));\n\t\tadd(wallItemPhoto);\n\n\t\t// name and link to profile\n\t\tLink<String> wallItemProfileLink = new Link<String>(\n\t\t\t\t\"wallItemProfileLink\", new Model<String>(comment\n\t\t\t\t\t\t.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\n\t\t};\n\t\twallItemProfileLink.add(new Label(\"wallItemCommentName\", sakaiProxy\n\t\t\t\t.getUserDisplayName(comment.getCreatorUuid())));\n\t\tadd(wallItemProfileLink);\n\t\t\n\t\t// content of the comment\n\t\tadd(new Label(\"wallItemCommentText\", new ResourceModel(comment.getText())));\n\t\t\t\t\n\t\tadd(new Label(\"wallItemCommentDate\", ProfileUtils.convertDateToString(comment\n\t\t\t\t.getDate(), ProfileConstants.WALL_DISPLAY_DATE_FORMAT)));\n\t}","id":100449,"modified_method":"public WallItemCommentPanel(String id, WallItemComment comment) {\n\t\tsuper(id);\n\t\t\n\t\tsetOutputMarkupId(true);\n\t\t\n\t\t// image wrapper, links to profile\n\t\tLink<String> wallItemPhoto = new Link<String>(\"wallItemPhotoWrap\",\n\t\t\t\tnew Model<String>(comment.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t};\n\n\t\t// image\t\t\n\t\tProfileImage photo = new ProfileImage(\"wallItemPhoto\", new Model<String>(comment.getCreatorUuid()));\n\t\tphoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\twallItemPhoto.add(photo);\n\t\t\n\t\tadd(wallItemPhoto);\n\n\t\t// name and link to profile\n\t\tLink<String> wallItemProfileLink = new Link<String>(\n\t\t\t\t\"wallItemProfileLink\", new Model<String>(comment\n\t\t\t\t\t\t.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\n\t\t};\n\t\twallItemProfileLink.add(new Label(\"wallItemCommentName\", sakaiProxy\n\t\t\t\t.getUserDisplayName(comment.getCreatorUuid())));\n\t\tadd(wallItemProfileLink);\n\t\t\n\t\t// content of the comment\n\t\tadd(new Label(\"wallItemCommentText\", new ResourceModel(comment.getText())));\n\t\t\t\t\n\t\tadd(new Label(\"wallItemCommentDate\", ProfileUtils.convertDateToString(comment\n\t\t\t\t.getDate(), ProfileConstants.WALL_DISPLAY_DATE_FORMAT)));\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Creates a new instance of <code>WallItemPanel<\/code>.\n\t * \n\t * @param id\n\t * @param userUuid the id of the user whose wall this item panel is on.\n\t * @param wallItem\n\t * @param myWallPanel a reference to my wall panel for repainting.\n\t */\n\tpublic WallItemPanel(String id, final String userUuid, final WallItem wallItem, final MyWallPanel myWallPanel) {\n\t\tsuper(id);\n\n\t\tsetOutputMarkupId(true);\n\t\t\n\t\t// image wrapper, links to profile\n\t\tLink<String> wallItemPhoto = new Link<String>(\"wallItemPhotoWrap\",\n\t\t\t\tnew Model<String>(wallItem.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t};\n\n\t\t// image\n\t\twallItemPhoto.add(new ProfileImageRenderer(\"wallItemPhoto\", wallItem\n\t\t\t\t.getCreatorUuid()));\n\t\tadd(wallItemPhoto);\n\n\t\t// name and link to profile\n\t\tLink<String> wallItemProfileLink = new Link<String>(\n\t\t\t\t\"wallItemProfileLink\", new Model<String>(wallItem\n\t\t\t\t\t\t.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\n\t\t};\n\t\twallItemProfileLink.add(new Label(\"wallItemName\", sakaiProxy\n\t\t\t\t.getUserDisplayName(wallItem.getCreatorUuid())));\n\t\tadd(wallItemProfileLink);\n\n\t\tadd(new Label(\"wallItemDate\", ProfileUtils.convertDateToString(wallItem\n\t\t\t\t.getDate(), ProfileConstants.WALL_DISPLAY_DATE_FORMAT)));\n\t\t\n\t\t// ACTIONS\n\t\t\n\t\tfinal ModalWindow wallItemActionWindow = new ModalWindow(\"wallItemActionWindow\");\n\t\tadd(wallItemActionWindow);\n\t\t\n\t\tfinal WallAction wallAction = new WallAction();\n\t\t// delete link\n\t\tfinal AjaxLink<WallItem> removeItemLink = new AjaxLink<WallItem>(\n\t\t\t\t\"removeWallItemLink\", new Model<WallItem>(wallItem)) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\n\t\t\t\twallItemActionWindow.setContent(new RemoveWallItem(wallItemActionWindow.getContentId(),\n\t\t\t\t\t\twallItemActionWindow, wallAction, userUuid, this.getModelObject()));\n\n\t\t\t\twallItemActionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClose(AjaxRequestTarget target) {\n\t\t\t\t\t\tif (wallAction.isItemRemoved()) {\n\t\t\t\t\t\t\tmyWallPanel.replaceSelf(target, userUuid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\twallItemActionWindow.show(target);\n\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t}\n\t\t};\n\n\t\tremoveItemLink.add(new Label(\"removeWallItemLabel\", new ResourceModel(\"link.wall.item.remove\")));\n\t\tremoveItemLink.add(new AttributeModifier(\"title\", true, new ResourceModel(\"link.title.wall.remove\")));\n\n\t\t// not visible when viewing another user's wall\n\t\tif (false == sakaiProxy.getCurrentUserId().equals(userUuid)) {\n\t\t\tremoveItemLink.setVisible(false);\n\t\t}\n\t\t\n\t\tadd(removeItemLink);\n\t\t\n\t\t// panel for posting a comment that slides up/down\n\t\tfinal WallItemPostCommentPanel postCommentPanel = new WallItemPostCommentPanel(\"wallItemPostCommentPanel\", userUuid, wallItem, this, myWallPanel);\n\t\tpostCommentPanel.setOutputMarkupPlaceholderTag(true);\n\t\tpostCommentPanel.setVisible(false);\n\t\tadd(postCommentPanel);\n\t\t\n\t\tfinal AjaxLink<WallItem> commentItemLink = new AjaxLink<WallItem>(\n\t\t\t\t\"commentWallItemLink\", new Model<WallItem>(wallItem)) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\n\t\t\t\tpostCommentPanel.setVisible(true);\n\t\t\t\ttarget.addComponent(postCommentPanel);\n\t\t\t\ttarget.appendJavascript(\"$('#\" + postCommentPanel.getMarkupId() + \"').slideDown();\");\n\t\t\t}\n\t\t};\n\n\t\tcommentItemLink.add(new Label(\"commentWallItemLabel\", new ResourceModel(\"link.wall.item.comment\")));\n\t\tcommentItemLink.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"link.title.wall.comment\", null, new Object[] { sakaiProxy.getUserDisplayName(wallItem.getCreatorUuid()) })));\n\t\t\n\t\tadd(commentItemLink);\n\t\t\n\t\tif (ProfileConstants.WALL_ITEM_TYPE_EVENT == wallItem.getType()) {\n\t\t\tadd(new Label(\"wallItemText\", new ResourceModel(wallItem.getText())));\n\t\t\t\n\t\t} else if (ProfileConstants.WALL_ITEM_TYPE_POST == wallItem.getType()) {\n\t\t\tadd(new Label(\"wallItemText\", ProfileUtils.processHtml(wallItem\n\t\t\t\t\t.getText())).setEscapeModelStrings(false));\n\t\t\t\n\t\t} else if (ProfileConstants.WALL_ITEM_TYPE_STATUS == wallItem.getType()) {\n\t\t\tadd(new Label(\"wallItemText\", wallItem.getText()));\n\n\t\t}\n\t\t\t\t\n\t\t// COMMENTS\n\t\t\n\t\tListView<WallItemComment> wallItemCommentsListView = new ListView<WallItemComment>(\n\t\t\t\t\"wallItemComments\", wallItem.getComments()) {\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void populateItem(ListItem<WallItemComment> item) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tWallItemComment comment = (WallItemComment) item.getDefaultModelObject();\n\n\t\t\t\t\t\titem.add(new WallItemCommentPanel(\"wallItemCommentPanel\", comment));\n\t\t\t\t\t}\n\t\t\t\n\t\t};\n\t\twallItemCommentsListView.setOutputMarkupId(true);\n\t\tadd(wallItemCommentsListView);\n\t\t\n\t}","id":100450,"modified_method":"/**\n\t * Creates a new instance of <code>WallItemPanel<\/code>.\n\t * \n\t * @param id\n\t * @param userUuid the id of the user whose wall this item panel is on.\n\t * @param wallItem\n\t * @param myWallPanel a reference to my wall panel for repainting.\n\t */\n\tpublic WallItemPanel(String id, final String userUuid, final WallItem wallItem, final MyWallPanel myWallPanel) {\n\t\tsuper(id);\n\n\t\tsetOutputMarkupId(true);\n\t\t\n\t\t// image wrapper, links to profile\n\t\tLink<String> wallItemPhoto = new Link<String>(\"wallItemPhotoWrap\",\n\t\t\t\tnew Model<String>(wallItem.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\t\t};\n\n\t\t// image\n\t\tProfileImage photo = new ProfileImage(\"wallItemPhoto\", new Model<String>(wallItem.getCreatorUuid()));\n\t\tphoto.setSize(ProfileConstants.PROFILE_IMAGE_THUMBNAIL);\n\t\twallItemPhoto.add(photo);\n\t\t\n\t\tadd(wallItemPhoto);\n\n\t\t// name and link to profile\n\t\tLink<String> wallItemProfileLink = new Link<String>(\n\t\t\t\t\"wallItemProfileLink\", new Model<String>(wallItem\n\t\t\t\t\t\t.getCreatorUuid())) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(new ViewProfile(getModelObject()));\n\t\t\t}\n\n\t\t};\n\t\twallItemProfileLink.add(new Label(\"wallItemName\", sakaiProxy\n\t\t\t\t.getUserDisplayName(wallItem.getCreatorUuid())));\n\t\tadd(wallItemProfileLink);\n\n\t\tadd(new Label(\"wallItemDate\", ProfileUtils.convertDateToString(wallItem\n\t\t\t\t.getDate(), ProfileConstants.WALL_DISPLAY_DATE_FORMAT)));\n\t\t\n\t\t// ACTIONS\n\t\t\n\t\tfinal ModalWindow wallItemActionWindow = new ModalWindow(\"wallItemActionWindow\");\n\t\tadd(wallItemActionWindow);\n\t\t\n\t\tfinal WallAction wallAction = new WallAction();\n\t\t// delete link\n\t\tfinal AjaxLink<WallItem> removeItemLink = new AjaxLink<WallItem>(\n\t\t\t\t\"removeWallItemLink\", new Model<WallItem>(wallItem)) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\n\t\t\t\twallItemActionWindow.setContent(new RemoveWallItem(wallItemActionWindow.getContentId(),\n\t\t\t\t\t\twallItemActionWindow, wallAction, userUuid, this.getModelObject()));\n\n\t\t\t\twallItemActionWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClose(AjaxRequestTarget target) {\n\t\t\t\t\t\tif (wallAction.isItemRemoved()) {\n\t\t\t\t\t\t\tmyWallPanel.replaceSelf(target, userUuid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\twallItemActionWindow.show(target);\n\t\t\t\ttarget.appendJavascript(\"fixWindowVertical();\"); \n\t\t\t}\n\t\t};\n\n\t\tremoveItemLink.add(new Label(\"removeWallItemLabel\", new ResourceModel(\"link.wall.item.remove\")));\n\t\tremoveItemLink.add(new AttributeModifier(\"title\", true, new ResourceModel(\"link.title.wall.remove\")));\n\n\t\t// not visible when viewing another user's wall\n\t\tif (false == sakaiProxy.getCurrentUserId().equals(userUuid)) {\n\t\t\tremoveItemLink.setVisible(false);\n\t\t}\n\t\t\n\t\tadd(removeItemLink);\n\t\t\n\t\t// panel for posting a comment that slides up/down\n\t\tfinal WallItemPostCommentPanel postCommentPanel = new WallItemPostCommentPanel(\"wallItemPostCommentPanel\", userUuid, wallItem, this, myWallPanel);\n\t\tpostCommentPanel.setOutputMarkupPlaceholderTag(true);\n\t\tpostCommentPanel.setVisible(false);\n\t\tadd(postCommentPanel);\n\t\t\n\t\tfinal AjaxLink<WallItem> commentItemLink = new AjaxLink<WallItem>(\n\t\t\t\t\"commentWallItemLink\", new Model<WallItem>(wallItem)) {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\n\t\t\t\tpostCommentPanel.setVisible(true);\n\t\t\t\ttarget.addComponent(postCommentPanel);\n\t\t\t\ttarget.appendJavascript(\"$('#\" + postCommentPanel.getMarkupId() + \"').slideDown();\");\n\t\t\t}\n\t\t};\n\n\t\tcommentItemLink.add(new Label(\"commentWallItemLabel\", new ResourceModel(\"link.wall.item.comment\")));\n\t\tcommentItemLink.add(new AttributeModifier(\"title\", true, new StringResourceModel(\"link.title.wall.comment\", null, new Object[] { sakaiProxy.getUserDisplayName(wallItem.getCreatorUuid()) })));\n\t\t\n\t\tadd(commentItemLink);\n\t\t\n\t\tif (ProfileConstants.WALL_ITEM_TYPE_EVENT == wallItem.getType()) {\n\t\t\tadd(new Label(\"wallItemText\", new ResourceModel(wallItem.getText())));\n\t\t\t\n\t\t} else if (ProfileConstants.WALL_ITEM_TYPE_POST == wallItem.getType()) {\n\t\t\tadd(new Label(\"wallItemText\", ProfileUtils.processHtml(wallItem\n\t\t\t\t\t.getText())).setEscapeModelStrings(false));\n\t\t\t\n\t\t} else if (ProfileConstants.WALL_ITEM_TYPE_STATUS == wallItem.getType()) {\n\t\t\tadd(new Label(\"wallItemText\", wallItem.getText()));\n\n\t\t}\n\t\t\t\t\n\t\t// COMMENTS\n\t\t\n\t\tListView<WallItemComment> wallItemCommentsListView = new ListView<WallItemComment>(\n\t\t\t\t\"wallItemComments\", wallItem.getComments()) {\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void populateItem(ListItem<WallItemComment> item) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tWallItemComment comment = (WallItemComment) item.getDefaultModelObject();\n\n\t\t\t\t\t\titem.add(new WallItemCommentPanel(\"wallItemCommentPanel\", comment));\n\t\t\t\t\t}\n\t\t\t\n\t\t};\n\t\twallItemCommentsListView.setOutputMarkupId(true);\n\t\tadd(wallItemCommentsListView);\n\t\t\n\t}","commit_id":"f082d0177a15a01e468afd806d9ec88a6157c61a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tpublic Class<? extends IScopeProvider> bindIScopeProvider() {\n\t\treturn IndexBasedScopeProvider.class;\n\t}","id":100451,"modified_method":"@Override\n\tpublic Class<? extends IScopeProvider> bindIScopeProvider() {\n\t\treturn DomainmodelScopeProvider.class;\n\t}","commit_id":"2d1b94c8ddc306fdfcaa88adda197306d1249675","url":"https://github.com/eclipse/xtext"},{"original_method":"public IScope scope_Reference_opposite(Reference ref, EReference eRef) {\n\t\tList<Reference> typeSelect = typeSelect(((Entity) ref.getType().getReferenced()).getFeatures(), Reference.class);\n\t\treturn new SimpleScope(scopedElementsFor(typeSelect));\n\t}","id":100452,"modified_method":"public IScope scope_Reference_opposite(final Reference ref, EReference eRef) {\n\t\tEList<Feature> features = ((Entity) ref.getType().getReferenced()).getFeatures();\n\t\tIterable<Reference> references = Iterables.filter(features, Reference.class);\n\t\treferences = Iterables.filter(references, new Predicate<Reference>(){\n\t\t\tpublic boolean apply(Reference input) {\n\t\t\t\treturn ref.eContainer().equals(input.getType().getReferenced());\n\t\t\t}});\n\t\treturn scopeFor(references);\n\t}","commit_id":"2d1b94c8ddc306fdfcaa88adda197306d1249675","url":"https://github.com/eclipse/xtext"},{"original_method":"public CloseTaskDialog(Project project, LocalTask task) {\n    super(project, false);\n\n    setTitle(\"Close Task\");\n    myTaskLabel.setText(TaskUtil.getTrimmedSummary(task));\n    myTaskLabel.setIcon(task.getIcon());\n\n    TaskRepository repository = task.getRepository();\n    boolean visible = task.isIssue() && repository != null && repository.getRepositoryType().getPossibleTaskStates().contains(TaskState.RESOLVED);\n    myCloseIssue.setVisible(visible);\n\n    myTaskManager = (TaskManagerImpl)TaskManager.getManager(project);\n    myCloseIssue.setSelected(visible && myTaskManager.getState().closeIssue);\n\n    if (myTaskManager.isVcsEnabled()) {\n      myCommitChanges.setEnabled(!task.getChangeLists().isEmpty());\n      myCommitChanges.setSelected(myTaskManager.getState().commitChanges);\n      if (myTaskManager.getActiveVcs().getType() == VcsType.distributed) {\n        boolean enabled = !task.getBranches(true).isEmpty() && !task.getBranches(false).isEmpty();\n        myMergeBranches.setEnabled(enabled);\n        myMergeBranches.setSelected(enabled && myTaskManager.getState().mergeBranch);\n      }\n      else {\n        myMergeBranches.setVisible(false);\n      }\n    }\n    else {\n      myVcsPanel.setVisible(false);\n    }\n    init();\n  }","id":100453,"modified_method":"public CloseTaskDialog(Project project, LocalTask task) {\n    super(project, false);\n\n    setTitle(\"Close Task\");\n    myTaskLabel.setText(TaskUtil.getTrimmedSummary(task));\n    myTaskLabel.setIcon(task.getIcon());\n\n    TaskRepository repository = task.getRepository();\n    boolean visible = task.isIssue() && TaskUtil.isStateSupported(repository, TaskState.RESOLVED);\n    myCloseIssue.setVisible(visible);\n\n    myTaskManager = (TaskManagerImpl)TaskManager.getManager(project);\n    myCloseIssue.setSelected(visible && myTaskManager.getState().closeIssue);\n\n    if (myTaskManager.isVcsEnabled()) {\n      myCommitChanges.setEnabled(!task.getChangeLists().isEmpty());\n      myCommitChanges.setSelected(myTaskManager.getState().commitChanges);\n      if (myTaskManager.getActiveVcs().getType() == VcsType.distributed) {\n        boolean enabled = !task.getBranches(true).isEmpty() && !task.getBranches(false).isEmpty();\n        myMergeBranches.setEnabled(enabled);\n        myMergeBranches.setSelected(enabled && myTaskManager.getState().mergeBranch);\n      }\n      else {\n        myMergeBranches.setVisible(false);\n      }\n    }\n    else {\n      myVcsPanel.setVisible(false);\n    }\n    init();\n  }","commit_id":"8e9c74193b07ea1a8481d8fd61a92b2796346660","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void ensureApiVersionDiscovered() throws Exception {\n    if (myApiVersion == null || DEBUG_SOAP || REDISCOVER_API) {\n      myApiVersion = discoverApiVersion();\n    }\n  }","id":100454,"modified_method":"private void ensureApiVersionDiscovered() throws Exception {\n    if (myApiVersion == null || LEGACY_API_ONLY || REDISCOVER_API) {\n      myApiVersion = discoverApiVersion();\n    }\n  }","commit_id":"8e9c74193b07ea1a8481d8fd61a92b2796346660","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected int getFeatures() {\n    int features = super.getFeatures() | TIME_MANAGEMENT;\n    if (myApiVersion == null || myApiVersion.getType() == JiraRemoteApi.ApiType.SOAP) {\n      return features & ~NATIVE_SEARCH & ~STATE_UPDATING & ~TIME_MANAGEMENT;\n    }\n    return features;\n  }","id":100455,"modified_method":"@Override\n  protected int getFeatures() {\n    int features = super.getFeatures();\n    if (myApiVersion == null || myApiVersion.getType() == JiraRemoteApi.ApiType.SOAP) {\n      return features & ~NATIVE_SEARCH & ~STATE_UPDATING & ~TIME_MANAGEMENT;\n    } else {\n      return features | TIME_MANAGEMENT | STATE_UPDATING;\n    }\n  }","commit_id":"8e9c74193b07ea1a8481d8fd61a92b2796346660","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public JiraRemoteApi discoverApiVersion() throws Exception {\n    if (DEBUG_SOAP) {\n      return new JiraSoapApi(this);\n    }\n\n    String responseBody;\n    GetMethod method = new GetMethod(getRestUrl(\"serverInfo\"));\n    try {\n      responseBody = executeMethod(method);\n    }\n    catch (Exception e) {\n      // probably JIRA version prior 4.2\n      // without hasBeenUsed() check getStatusCode() might throw NPE, if connection was refused\n      if (method.hasBeenUsed() && method.getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n        return new JiraSoapApi(this);\n      }\n      else {\n        throw e;\n      }\n    }\n    JsonObject object = GSON.fromJson(responseBody, JsonObject.class);\n    // when JIRA 4.x support will be dropped 'versionNumber' array in response\n    // may be used instead version string parsing\n    JiraRestApi restApi = JiraRestApi.fromJiraVersion(object.get(\"version\").getAsString(), this);\n    if (restApi == null) {\n      throw new Exception(TaskBundle.message(\"jira.failure.no.REST\"));\n    }\n    return restApi;\n  }","id":100456,"modified_method":"@NotNull\n  public JiraRemoteApi discoverApiVersion() throws Exception {\n    if (LEGACY_API_ONLY) {\n      LOG.warn(\"Intentionally using only legacy JIRA API\");\n      return new JiraSoapApi(this);\n    }\n\n    String responseBody;\n    GetMethod method = new GetMethod(getRestUrl(\"serverInfo\"));\n    try {\n      responseBody = executeMethod(method);\n    }\n    catch (Exception e) {\n      // probably JIRA version prior 4.2\n      // without hasBeenUsed() check getStatusCode() might throw NPE, if connection was refused\n      if (method.hasBeenUsed() && method.getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n        return new JiraSoapApi(this);\n      }\n      else {\n        throw e;\n      }\n    }\n    JsonObject object = GSON.fromJson(responseBody, JsonObject.class);\n    // when JIRA 4.x support will be dropped 'versionNumber' array in response\n    // may be used instead version string parsing\n    JiraRestApi restApi = JiraRestApi.fromJiraVersion(object.get(\"version\").getAsString(), this);\n    if (restApi == null) {\n      throw new Exception(TaskBundle.message(\"jira.failure.no.REST\"));\n    }\n    return restApi;\n  }","commit_id":"8e9c74193b07ea1a8481d8fd61a92b2796346660","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public OpenTaskDialog(@NotNull final Project project, @NotNull final Task task) {\n    super(project, false);\n    myProject = project;\n    myTask = task;\n    TaskManagerImpl taskManager = (TaskManagerImpl)TaskManager.getManager(myProject);\n    setTitle(\"Open Task\");\n    myTaskNameLabel.setText(TaskUtil.getTrimmedSummary(task));\n    myTaskNameLabel.setIcon(task.getIcon());\n\n    TaskManagerImpl manager = (TaskManagerImpl)TaskManager.getManager(project);\n    ControlBinder binder = new ControlBinder(manager.getState());\n    binder.bindAnnotations(this);\n    binder.reset();\n\n    TaskRepository repository = task.getRepository();\n    myMarkAsInProgressBox.setSelected(manager.getState().markAsInProgress);\n    if (repository == null || !repository.getRepositoryType().getPossibleTaskStates().contains(TaskState.IN_PROGRESS)) {\n      myMarkAsInProgressBox.setVisible(false);\n    }\n\n    TaskManagerImpl.Config state = taskManager.getState();\n    myClearContext.setSelected(state.clearContext);\n\n    AbstractVcs vcs = manager.getActiveVcs();\n    if (vcs == null) {\n      myVcsPanel.setVisible(false);\n    }\n    else {\n      ActionListener listener = new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          updateFields();\n        }\n      };\n      myCreateChangelist.addActionListener(listener);\n      myCreateBranch.addActionListener(listener);\n      myCreateChangelist.setSelected(manager.getState().createChangelist);\n      myCreateBranch.setSelected(manager.getState().createBranch);\n\n      // In git 'master' branch appears (in .git/refs/heads/master) only after at least one commit was made in it.\n      // Before that feature branches can't be created normally.\n      if (vcs.getType() != VcsType.distributed || !branchesExist(project)) {\n        myCreateBranch.setSelected(false);\n        myCreateBranch.setVisible(false);\n        myBranchName.setVisible(false);\n        myFromLabel.setVisible(false);\n        myBranchFrom.setVisible(false);\n      }\n      else {\n        VcsTaskHandler[] handlers = VcsTaskHandler.getAllHandlers(project);\n        for (VcsTaskHandler handler : handlers) {\n          VcsTaskHandler.TaskInfo[] tasks = handler.getCurrentTasks();\n          if (tasks.length > 0) {\n            myVcsTaskHandler = handler;\n            myBranchFrom.setModel(new DefaultComboBoxModel(tasks));\n            final String startFrom = PropertiesComponent.getInstance(project).getValue(START_FROM_BRANCH);\n            VcsTaskHandler.TaskInfo info = null;\n            if (startFrom != null) {\n              info = ContainerUtil.find(tasks, new Condition<VcsTaskHandler.TaskInfo>() {\n                @Override\n                public boolean value(VcsTaskHandler.TaskInfo taskInfo) {\n                  return startFrom.equals(taskInfo.getName());\n                }\n              });\n            }\n            if (info == null) {\n              info = handler.getActiveTask();\n            }\n            myBranchFrom.setSelectedItem(info);\n            myBranchFrom.addActionListener(new ActionListener() {\n              @Override\n              public void actionPerformed(ActionEvent e) {\n                VcsTaskHandler.TaskInfo item = (VcsTaskHandler.TaskInfo)myBranchFrom.getSelectedItem();\n                if (item != null) {\n                  PropertiesComponent.getInstance(project).setValue(START_FROM_BRANCH, item.getName());\n                }\n              }\n            });\n            break;\n          }\n        }\n        myBranchFrom.setRenderer(new ColoredListCellRenderer<VcsTaskHandler.TaskInfo>() {\n          @Override\n          protected void customizeCellRenderer(JList list, VcsTaskHandler.TaskInfo value, int index, boolean selected, boolean hasFocus) {\n            append(value.getName());\n          }\n        });\n      }\n\n      myBranchName.setText(taskManager.suggestBranchName(task));\n      myChangelistName.setText(taskManager.getChangelistName(task));\n      updateFields();\n    }\n    init();\n  }","id":100457,"modified_method":"public OpenTaskDialog(@NotNull final Project project, @NotNull final Task task) {\n    super(project, false);\n    myProject = project;\n    myTask = task;\n    TaskManagerImpl taskManager = (TaskManagerImpl)TaskManager.getManager(myProject);\n    setTitle(\"Open Task\");\n    myTaskNameLabel.setText(TaskUtil.getTrimmedSummary(task));\n    myTaskNameLabel.setIcon(task.getIcon());\n\n    TaskManagerImpl manager = (TaskManagerImpl)TaskManager.getManager(project);\n    ControlBinder binder = new ControlBinder(manager.getState());\n    binder.bindAnnotations(this);\n    binder.reset();\n\n    TaskRepository repository = task.getRepository();\n    myMarkAsInProgressBox.setSelected(manager.getState().markAsInProgress);\n    if (!TaskUtil.isStateSupported(repository, TaskState.IN_PROGRESS)) {\n      myMarkAsInProgressBox.setVisible(false);\n    }\n\n    TaskManagerImpl.Config state = taskManager.getState();\n    myClearContext.setSelected(state.clearContext);\n\n    AbstractVcs vcs = manager.getActiveVcs();\n    if (vcs == null) {\n      myVcsPanel.setVisible(false);\n    }\n    else {\n      ActionListener listener = new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          updateFields();\n        }\n      };\n      myCreateChangelist.addActionListener(listener);\n      myCreateBranch.addActionListener(listener);\n      myCreateChangelist.setSelected(manager.getState().createChangelist);\n      myCreateBranch.setSelected(manager.getState().createBranch);\n\n      // In git 'master' branch appears (in .git/refs/heads/master) only after at least one commit was made in it.\n      // Before that feature branches can't be created normally.\n      if (vcs.getType() != VcsType.distributed || !branchesExist(project)) {\n        myCreateBranch.setSelected(false);\n        myCreateBranch.setVisible(false);\n        myBranchName.setVisible(false);\n        myFromLabel.setVisible(false);\n        myBranchFrom.setVisible(false);\n      }\n      else {\n        VcsTaskHandler[] handlers = VcsTaskHandler.getAllHandlers(project);\n        for (VcsTaskHandler handler : handlers) {\n          VcsTaskHandler.TaskInfo[] tasks = handler.getCurrentTasks();\n          if (tasks.length > 0) {\n            myVcsTaskHandler = handler;\n            myBranchFrom.setModel(new DefaultComboBoxModel(tasks));\n            final String startFrom = PropertiesComponent.getInstance(project).getValue(START_FROM_BRANCH);\n            VcsTaskHandler.TaskInfo info = null;\n            if (startFrom != null) {\n              info = ContainerUtil.find(tasks, new Condition<VcsTaskHandler.TaskInfo>() {\n                @Override\n                public boolean value(VcsTaskHandler.TaskInfo taskInfo) {\n                  return startFrom.equals(taskInfo.getName());\n                }\n              });\n            }\n            if (info == null) {\n              info = handler.getActiveTask();\n            }\n            myBranchFrom.setSelectedItem(info);\n            myBranchFrom.addActionListener(new ActionListener() {\n              @Override\n              public void actionPerformed(ActionEvent e) {\n                VcsTaskHandler.TaskInfo item = (VcsTaskHandler.TaskInfo)myBranchFrom.getSelectedItem();\n                if (item != null) {\n                  PropertiesComponent.getInstance(project).setValue(START_FROM_BRANCH, item.getName());\n                }\n              }\n            });\n            break;\n          }\n        }\n        myBranchFrom.setRenderer(new ColoredListCellRenderer<VcsTaskHandler.TaskInfo>() {\n          @Override\n          protected void customizeCellRenderer(JList list, VcsTaskHandler.TaskInfo value, int index, boolean selected, boolean hasFocus) {\n            append(value.getName());\n          }\n        });\n      }\n\n      myBranchName.setText(taskManager.suggestBranchName(task));\n      myChangelistName.setText(taskManager.getChangelistName(task));\n      updateFields();\n    }\n    init();\n  }","commit_id":"8e9c74193b07ea1a8481d8fd61a92b2796346660","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n\tpublic Class<? extends IScopeProvider> bindIScopeProvider() {\n\t\treturn IndexBasedScopeProvider.class;\n\t}","id":100458,"modified_method":"@Override\n\tpublic Class<? extends IScopeProvider> bindIScopeProvider() {\n\t\treturn DomainmodelScopeProvider.class;\n\t}","commit_id":"7b0e5320745724583292baede6881832a2e0df0a","url":"https://github.com/eclipse/xtext"},{"original_method":"public IScope scope_Reference_opposite(Reference ref, EReference eRef) {\n\t\tList<Reference> typeSelect = typeSelect(((Entity) ref.getType().getReferenced()).getFeatures(), Reference.class);\n\t\treturn new SimpleScope(scopedElementsFor(typeSelect));\n\t}","id":100459,"modified_method":"public IScope scope_Reference_opposite(final Reference ref, EReference eRef) {\n\t\tEList<Feature> features = ((Entity) ref.getType().getReferenced()).getFeatures();\n\t\tIterable<Reference> references = Iterables.filter(features, Reference.class);\n\t\treferences = Iterables.filter(references, new Predicate<Reference>(){\n\t\t\tpublic boolean apply(Reference input) {\n\t\t\t\treturn ref.eContainer().equals(input.getType().getReferenced());\n\t\t\t}});\n\t\treturn scopeFor(references);\n\t}","commit_id":"7b0e5320745724583292baede6881832a2e0df0a","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean send(Message<?> message) throws MessageRejectedException, MessageDeliveryException {\n        ExchangePattern pattern;\n        boolean result = false;\n        if (isExpectReply()) {\n            pattern = ExchangePattern.InOut;\n        } else {\n            pattern = ExchangePattern.InOnly;\n        }\n        Exchange inExchange = new SpringIntegrationExchange(getCamelContext(), pattern);\n        SpringIntegrationBinding.storeToCamelMessage(message, inExchange.getIn());\n        Exchange outExchange = getCamelTemplate().send(getCamelEndpointUri(), inExchange);\n        if (outExchange.getFault() != null) {\n            result = true;\n        }\n        Message response = null;\n        if (isExpectReply()) {\n            // TODO need to check the message header\n            response = SpringIntegrationBinding.storeToSpringIntegrationMessage(outExchange.getOut());\n            result = replyChannel.send(response);\n        }\n        return result;\n\n    }","id":100460,"modified_method":"public boolean send(Message<?> message) throws MessageRejectedException, MessageDeliveryException {\n        ExchangePattern pattern;\n        boolean result = false;\n        if (isExpectReply()) {\n            pattern = ExchangePattern.InOut;\n        } else {\n            pattern = ExchangePattern.InOnly;\n        }\n        Exchange inExchange = new SpringIntegrationExchange(getCamelContext(), pattern);\n        SpringIntegrationBinding.storeToCamelMessage(message, inExchange.getIn());\n        Exchange outExchange = getCamelTemplate().send(getCamelEndpointUri(), inExchange);\n        if (outExchange.getFault() != null) {\n            result = true;\n        }\n        Message response = null;\n        if (isExpectReply()) {\n            //Check the message header for the return address\n            response = SpringIntegrationBinding.storeToSpringIntegrationMessage(outExchange.getOut());\n            MessageChannel messageReplyChannel = (MessageChannel) message.getHeaders().get(MessageHeaders.RETURN_ADDRESS);\n            if (messageReplyChannel != null) {\n                result = messageReplyChannel.send(response);\n            } else {\n                result = replyChannel.send(response);\n            }\n        }\n        return result;\n\n    }","commit_id":"a102bec6a05674027a0ddc32c26b8ac47713dbcb","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    public Map<String, Object> getHeaders() {\n        if (siMessage != null) {\n            Map<String, Object> answer = new HashMap<String, Object>();\n            MessageHeaders header = siMessage.getHeaders();\n            for (String name : header.keySet()) {\n                answer.put(name, header.get(name));\n            }\n            return answer;\n        } else {\n            return super.getHeaders();\n        }\n    }","id":100461,"modified_method":"@Override\n    public Map<String, Object> getHeaders() {\n        if (siMessage != null) {\n            return siMessage.getHeaders();\n        } else {\n            return super.getHeaders();\n        }\n    }","commit_id":"a102bec6a05674027a0ddc32c26b8ac47713dbcb","url":"https://github.com/apache/camel"},{"original_method":"public void process(Exchange exchange) throws Exception {\n        Map<String, Object> headers = new HashMap<String, Object>();\n        if (exchange.getPattern().isInCapable()) {\n            headers.put(MessageHeaders.RETURN_ADDRESS , inputChannel);\n        }\n        org.springframework.integration.message.Message siOutmessage = SpringIntegrationBinding.createSpringIntegrationMessage(exchange);\n        if (exchange.getPattern().isInCapable()) {\n            //Set the return channel address\n\n            outputChannel.send(siOutmessage);\n            org.springframework.integration.message.Message siInMessage =\n                inputChannel.receive();\n            SpringIntegrationBinding.storeToCamelMessage(siInMessage, exchange.getOut());\n        } else {\n            outputChannel.send(siOutmessage);\n        }\n\n    }","id":100462,"modified_method":"public void process(Exchange exchange) throws Exception {\n        Map<String, Object> headers = new HashMap<String, Object>();\n        if (exchange.getPattern().isInCapable()) {\n            headers.put(MessageHeaders.RETURN_ADDRESS , inputChannel);\n        }\n        org.springframework.integration.message.Message siOutmessage = SpringIntegrationBinding.createSpringIntegrationMessage(exchange);\n\n        outputChannel.send(siOutmessage);\n        if (exchange.getPattern().isInCapable()) {\n            org.springframework.integration.message.Message siInMessage =\n            inputChannel.receive();\n            SpringIntegrationBinding.storeToCamelMessage(siInMessage, exchange.getOut());\n        }\n\n    }","commit_id":"a102bec6a05674027a0ddc32c26b8ac47713dbcb","url":"https://github.com/apache/camel"},{"original_method":"@Override\n\t\tprotected void prepareRequest(EnhancedMockHttpServletRequest request) {\n\t\t\tMultivaluedMap<String, String> headers = clientRequest.getHeaders();\n\t\t\tfor (String hVal : headers.keySet()) {\n\t\t\t\trequest.addHeader(hVal, StringUtils.join(headers.get(hVal),\n\t\t\t\t\t\t\" \"));\n\t\t\t}\n\t\n\t\t      if (clientRequest.getHeaders() != null)\n\t\t      {\n\t\t         for (Map.Entry<String, List<String>> header : clientRequest.getHeaders().entrySet())\n\t\t         {\n\t\t            List<String> values = header.getValue();\n\t\t            for (String value : values)\n\t\t            {\n\t\t               request.addHeader(header.getKey(), value);\n\t\t            }\n\t\t         }\n\t\t      }\n\t\t      if (clientRequest.getBody() != null && !clientRequest.getFormParameters().isEmpty())\n\t\t         throw new RuntimeException(\"You cannot send both form parameters and an entity body\");\n\n\t\t      if (!clientRequest.getFormParameters().isEmpty())\n\t\t      {\n\t\t         for (Map.Entry<String, List<String>> formParam : clientRequest.getFormParameters().entrySet())\n\t\t         {\n\t\t            List<String> values = formParam.getValue();\n\t\t            for (String value : values)\n\t\t            {\n\t\t               request.addParameter(formParam.getKey(), value);\n\t\t            }\n\t\t         }\n\t\t      }\n\t\t      if (clientRequest.getBody() != null)\n\t\t      {\n\t\t         if (clientRequest.getHttpMethod().equals(\"GET\")) \n\t\t        \t throw new RuntimeException(\"A GET request cannot have a body.\");\n\t\t      }\n\t\t\t\n\t\t}","id":100463,"modified_method":"@Override\n\t\tprotected void prepareRequest(EnhancedMockHttpServletRequest request) {\n\t\t      if (clientRequest.getHeaders() != null)\n\t\t      {\n\t\t         for (Map.Entry<String, List<String>> header : clientRequest.getHeaders().entrySet())\n\t\t         {\n\t\t        \t request.addHeader(header.getKey(), header.getValue());\n\t\t         }\n\t\t      }\n\t\t      if (clientRequest.getBody() != null && !clientRequest.getFormParameters().isEmpty())\n\t\t         throw new RuntimeException(\"You cannot send both form parameters and an entity body\");\n\n\t\t      if (!clientRequest.getFormParameters().isEmpty())\n\t\t      {\n\t\t         for (Map.Entry<String, List<String>> formParam : clientRequest.getFormParameters().entrySet())\n\t\t         {\n\t\t            List<String> values = formParam.getValue();\n\t\t            for (String value : values)\n\t\t            {\n\t\t               request.addParameter(formParam.getKey(), value);\n\t\t            }\n\t\t         }\n\t\t      }\n\t\t      if (clientRequest.getBody() != null)\n\t\t      {\n\t\t         if (clientRequest.getHttpMethod().equals(\"GET\")) \n\t\t        \t throw new RuntimeException(\"A GET request cannot have a body.\");\n\t\t         \n\t         \tByteArrayOutputStream bos = new ByteArrayOutputStream();\n\t         \ttry{\n\t         \t\tclientRequest.getProviderFactory().getMessageBodyWriter(\n\t         \t\t\tclientRequest.getBodyType(), \n\t         \t\t\tclientRequest.getBodyGenericType(), \n\t         \t\t\tclientRequest.getBodyAnnotations(), \n\t         \t\t\tclientRequest.getBodyContentType()).writeTo(\n\t         \t\t\t\t\tclientRequest.getBody(), \n\t         \t\t\t\t\tclientRequest.getBodyType(),\n\t         \t\t\t\t\tclientRequest.getBodyGenericType(),\n\t         \t\t\t\t\tclientRequest.getBodyAnnotations(),\n\t         \t\t\t\t\tclientRequest.getBodyContentType(),\n\t         \t\t\t\t\tclientRequest.getHeaders(), \n\t         \t\t\t\t\tbos);\n\t         \t\tbos.flush();\n\t         \t\trequest.setContent(bos.toByteArray() );\n\t         \t}\n\t         \tcatch(IOException e){\n\t         \t\tthrow new RuntimeException(e);\n\t         \t}\n\t\t         \t\n\t\t      }\n\t\t      if(clientRequest.getBodyContentType() != null){\n\t\t    \t  request.setContentType(clientRequest.getBodyContentType().toString());\n\t\t      }\n\n\t\t}","commit_id":"57347cc96668e3a46149401bfe731a9659870042","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n\t\tpublic byte[] getResult () {\n\t\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\n\t\t\tint nRead;\n\t\t\tbyte[] data = new byte[16384];\n\n\t\t\ttry {\n\t\t\t\twhile ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n\t\t\t\t\tbuffer.write(data, 0, nRead);\n\t\t\t\t}\n\t\t\t\tbuffer.flush();\n\t\t\t} catch (IOException e) {\n\t\t\t\treturn new byte[0];\n\t\t\t}\n\t\t\treturn buffer.toByteArray();\n\t\t}","id":100464,"modified_method":"@Override\n\t\tpublic byte[] getResult () {\n\t\t\ttry {\n\t\t\t\tint contentLength = connection.getContentLength();\n\t\t\t\tByteArrayOutputStream buffer;\n\t\t\t\tif (contentLength > 0)\n\t\t\t\t\tbuffer = new OptimizedByteArrayOutputStream(contentLength);\n\t\t\t\telse\n\t\t\t\t\tbuffer = new OptimizedByteArrayOutputStream();\n\t\t\t\tStreamUtils.copyStream(inputStream, buffer);\n\t\t\t\treturn buffer.toByteArray();\n\t\t\t} catch (IOException e) {\n\t\t\t\treturn StreamUtils.EMPTY_BYTES;\n\t\t\t}\n\t\t}","commit_id":"ce8e7434575e52cd6dbd1e1d0c059d46505206c9","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\n\t\tpublic String getResultAsString () {\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n\t\t\tString tmp, line = \"\";\n\t\t\ttry {\n\t\t\t\twhile ((tmp = reader.readLine()) != null)\n\t\t\t\t\tline += tmp;\n\t\t\t\treader.close();\n\t\t\t\treturn line;\n\t\t\t} catch (IOException e) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}","id":100465,"modified_method":"@Override\n\t\tpublic String getResultAsString () {\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n\t\t\ttry {\n\t\t\t\tint approxStringLength = connection.getContentLength();\n\t\t\t\tStringBuilder b;\n\t\t\t\tif (approxStringLength > 0)\n\t\t\t\t\tb = new StringBuilder(approxStringLength);\n\t\t\t\telse\n\t\t\t\t\tb = new StringBuilder();\n\t\t\t\tString line;\n\t\t\t\twhile ((line = reader.readLine()) != null)\n\t\t\t\t\tb.append(line);\n\t\t\t\treturn b.toString();\n\t\t\t} catch (IOException e) {\n\t\t\t\treturn \"\";\n\t\t\t} finally {\n\t\t\t\tStreamUtils.closeQuietly(reader);\n\t\t\t}\n\t\t}","commit_id":"ce8e7434575e52cd6dbd1e1d0c059d46505206c9","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void sendHttpRequest (final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) {\n\t\tif (httpRequest.getUrl() == null) {\n\t\t\thttpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tfinal String method = httpRequest.getMethod();\n\n\t\t\tURL url;\n\n\t\t\tif (method.equalsIgnoreCase(HttpMethods.GET)) {\n\t\t\t\tString queryString = \"\";\n\t\t\t\tString value = httpRequest.getContent();\n\t\t\t\tif (value != null && !\"\".equals(value)) queryString = \"?\" + value;\n\t\t\t\turl = new URL(httpRequest.getUrl() + queryString);\n\t\t\t} else {\n\t\t\t\turl = new URL(httpRequest.getUrl());\n\t\t\t}\n\n\t\t\tfinal HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n\t\t\t// should be enabled to upload data.\n\t\t\tfinal boolean doingOutPut = method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT); \n\t\t\tconnection.setDoOutput(doingOutPut);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setRequestMethod(method);\n\n\t\t\t// Headers get set regardless of the method\n\t\t\tMap<String, String> headers = httpRequest.getHeaders();\n\t\t\tSet<String> keySet = headers.keySet();\n\t\t\tfor (String name : keySet)\n\t\t\t\tconnection.addRequestProperty(name, headers.get(name));\n\n\t\t\t// Set Timeouts\n\t\t\tconnection.setConnectTimeout(httpRequest.getTimeOut());\n\t\t\tconnection.setReadTimeout(httpRequest.getTimeOut());\n\n\t\t\texecutorService.submit(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run () {\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\t// Set the content for POST and PUT (GET has the information embedded in the URL)\n\t\t\t\t\t\tif (doingOutPut) {\n\t\t\t\t\t\t\t// we probably need to use the content as stream here instead of using it as a string.\n\t\t\t\t\t\t\tString contentAsString = httpRequest.getContent();\n\t\t\t\t\t\t\tInputStream contentAsStream = httpRequest.getContentStream();\n\n\t\t\t\t\t\t\tOutputStream outputStream = connection.getOutputStream();\n\t\t\t\t\t\t\tif (contentAsString != null) {\n\t\t\t\t\t\t\t\tOutputStreamWriter writer = new OutputStreamWriter(outputStream);\n\t\t\t\t\t\t\t\twriter.write(contentAsString);\n\t\t\t\t\t\t\t\twriter.flush();\n\t\t\t\t\t\t\t\twriter.close();\n\t\t\t\t\t\t\t} else if (contentAsStream != null) {\n\t\t\t\t\t\t\t\tStreamUtils.copyStream(contentAsStream, outputStream);\n\t\t\t\t\t\t\t\toutputStream.flush();\n\t\t\t\t\t\t\t\toutputStream.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconnection.connect();\n\n\t\t\t\t\t\tfinal HttpClientResponse clientResponse = new HttpClientResponse(connection);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\thttpResponseListener.handleHttpResponse(clientResponse);\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\tconnection.disconnect();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\t\t\tconnection.disconnect();\n\t\t\t\t\t\t\t\thttpResponseListener.failed(e);\n\t\t\t\t\t}\n// finally {\n// connection.disconnect();\n// }\n\t\t\t\t}\n\t\t\t});\n\n\t\t} catch (Exception e) {\n\t\t\thttpResponseListener.failed(e);\n\t\t\treturn;\n\t\t}\n\t}","id":100466,"modified_method":"public void sendHttpRequest (final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) {\n\t\tif (httpRequest.getUrl() == null) {\n\t\t\thttpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tfinal String method = httpRequest.getMethod();\n\n\t\t\tURL url;\n\n\t\t\tif (method.equalsIgnoreCase(HttpMethods.GET)) {\n\t\t\t\tString queryString = \"\";\n\t\t\t\tString value = httpRequest.getContent();\n\t\t\t\tif (value != null && !\"\".equals(value)) queryString = \"?\" + value;\n\t\t\t\turl = new URL(httpRequest.getUrl() + queryString);\n\t\t\t} else {\n\t\t\t\turl = new URL(httpRequest.getUrl());\n\t\t\t}\n\n\t\t\tfinal HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n\t\t\t// should be enabled to upload data.\n\t\t\tfinal boolean doingOutPut = method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT);\n\t\t\tconnection.setDoOutput(doingOutPut);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setRequestMethod(method);\n\n\t\t\t// Headers get set regardless of the method\n\t\t\tfor (Map.Entry<String, String> header : httpRequest.getHeaders().entrySet())\n\t\t\t\tconnection.addRequestProperty(header.getKey(), header.getValue());\n\n\t\t\t// Set Timeouts\n\t\t\tconnection.setConnectTimeout(httpRequest.getTimeOut());\n\t\t\tconnection.setReadTimeout(httpRequest.getTimeOut());\n\n\t\t\texecutorService.submit(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run () {\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\t// Set the content for POST and PUT (GET has the information embedded in the URL)\n\t\t\t\t\t\tif (doingOutPut) {\n\t\t\t\t\t\t\t// we probably need to use the content as stream here instead of using it as a string.\n\t\t\t\t\t\t\tString contentAsString = httpRequest.getContent();\n\t\t\t\t\t\t\tInputStream contentAsStream = httpRequest.getContentStream();\n\n\t\t\t\t\t\t\tOutputStream outputStream = connection.getOutputStream();\n\t\t\t\t\t\t\tif (contentAsString != null) {\n\t\t\t\t\t\t\t\tOutputStreamWriter writer = new OutputStreamWriter(outputStream);\n\t\t\t\t\t\t\t\twriter.write(contentAsString);\n\t\t\t\t\t\t\t\twriter.flush();\n\t\t\t\t\t\t\t\twriter.close();\n\t\t\t\t\t\t\t} else if (contentAsStream != null) {\n\t\t\t\t\t\t\t\tStreamUtils.copyStream(contentAsStream, outputStream);\n\t\t\t\t\t\t\t\toutputStream.flush();\n\t\t\t\t\t\t\t\toutputStream.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconnection.connect();\n\n\t\t\t\t\t\tfinal HttpClientResponse clientResponse = new HttpClientResponse(connection);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\thttpResponseListener.handleHttpResponse(clientResponse);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tconnection.disconnect();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\t\tconnection.disconnect();\n\t\t\t\t\t\thttpResponseListener.failed(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t} catch (Exception e) {\n\t\t\thttpResponseListener.failed(e);\n\t\t\treturn;\n\t\t}\n\t}","commit_id":"ce8e7434575e52cd6dbd1e1d0c059d46505206c9","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void assembleModelInheritance( Model child, Model parent )\n    {\n        // Group id\n        if ( child.getGroupId() == null )\n        {\n            child.setGroupId( parent.getGroupId() );\n        }\n\n        // version\n        // TODO: I think according to the latest design docs, we don't want to inherit version at all\n        if ( child.getVersion() == null )\n        {\n            // The parent version may have resolved to something different, so we take what we asked for...\n            // instead of - child.setVersion( parent.getVersion() );\n            \n            if ( child.getParent() != null )\n            {\n                child.setVersion( child.getParent().getVersion() );\n            }\n        }\n\n        // inceptionYear\n        if ( child.getInceptionYear() == null )\n        {\n            child.setInceptionYear( parent.getInceptionYear() );\n        }\n\n        // url\n        if ( child.getUrl() == null )\n        {\n            if ( parent.getUrl() != null && parent.getUrl().endsWith( \"/\" ) )\n            {\n                child.setUrl( parent.getUrl() + child.getArtifactId() + \"/\" );\n            }\n            else\n            {\n                child.setUrl( parent.getUrl() );\n            }\n        }\n\n        // ----------------------------------------------------------------------\n        // Distribution\n        // ----------------------------------------------------------------------\n\n        assembleDistributionInheritence( child, parent );\n\n        // issueManagement\n        if ( child.getIssueManagement() == null )\n        {\n            child.setIssueManagement( parent.getIssueManagement() );\n        }\n\n        // description\n        if ( child.getDescription() == null )\n        {\n            child.setDescription( parent.getDescription() );\n        }\n\n        // Organization\n        if ( child.getOrganization() == null )\n        {\n            child.setOrganization( parent.getOrganization() );\n        }\n\n        // Scm\n        assembleScmInheritance( child, parent );\n\n        // ciManagement\n        if ( child.getCiManagement() == null )\n        {\n            child.setCiManagement( parent.getCiManagement() );\n        }\n\n        // developers\n        if ( child.getDevelopers().size() == 0 )\n        {\n            child.setDevelopers( parent.getDevelopers() );\n        }\n\n        // developers\n        if ( child.getContributors().size() == 0 )\n        {\n            child.setContributors( parent.getContributors() );\n        }\n\n        // mailingLists\n        if ( child.getMailingLists().size() == 0 )\n        {\n            child.setMailingLists( parent.getMailingLists() );\n        }\n\n        // Build\n        assembleBuildInheritance( child, parent );\n\n        // Dependencies :: aggregate\n        List dependencies = parent.getDependencies();\n\n        for ( Iterator iterator = dependencies.iterator(); iterator.hasNext(); )\n        {\n            Dependency dependency = (Dependency) iterator.next();\n\n            child.addDependency( dependency );\n\n        }\n\n        // Repositories :: aggregate\n        List parentRepositories = parent.getRepositories();\n\n        List childRepositories = child.getRepositories();\n\n        for ( Iterator iterator = parentRepositories.iterator(); iterator.hasNext(); )\n        {\n            Repository repository = (Repository) iterator.next();\n\n            if ( !childRepositories.contains( repository ) )\n            {\n                child.addRepository( repository );\n            }\n        }\n\n        // Mojo Repositories :: aggregate\n        List parentPluginRepositories = parent.getPluginRepositories();\n        List childPluginRepositories = child.getPluginRepositories();\n\n        for ( Iterator iterator = parentPluginRepositories.iterator(); iterator.hasNext(); )\n        {\n            Repository repository = (Repository) iterator.next();\n\n            if ( !childPluginRepositories.contains( repository ) )\n            {\n                child.addPluginRepository( repository );\n            }\n        }\n        \n        // Reports :: aggregate\n        if ( child.getReports() != null && parent.getReports() != null )\n        {\n            if ( child.getReports().getOutputDirectory() == null )\n            {\n                child.getReports().setOutputDirectory( parent.getReports().getOutputDirectory() );\n            }\n\n            List parentReports = parent.getReports().getPlugins();\n\n            List childReports = child.getReports().getPlugins();\n\n            for ( Iterator iterator = parentReports.iterator(); iterator.hasNext(); )\n            {\n                Plugin plugin = (Plugin) iterator.next();\n\n                if ( !childReports.contains( plugin ) )\n                {\n                    child.getReports().addPlugin( plugin );\n                }\n            }\n        }\n\n        assembleDependencyManagementInheritance( child, parent );\n    }","id":100467,"modified_method":"public void assembleModelInheritance( Model child, Model parent )\n    {\n        // Group id\n        if ( child.getGroupId() == null )\n        {\n            child.setGroupId( parent.getGroupId() );\n        }\n\n        // version\n        // TODO: I think according to the latest design docs, we don't want to inherit version at all\n        if ( child.getVersion() == null )\n        {\n            // The parent version may have resolved to something different, so we take what we asked for...\n            // instead of - child.setVersion( parent.getVersion() );\n            \n            if ( child.getParent() != null )\n            {\n                child.setVersion( child.getParent().getVersion() );\n            }\n        }\n\n        // inceptionYear\n        if ( child.getInceptionYear() == null )\n        {\n            child.setInceptionYear( parent.getInceptionYear() );\n        }\n\n        // url\n        if ( child.getUrl() == null )\n        {\n            if ( parent.getUrl() != null )\n            {\n                child.setUrl( appendPath( parent.getUrl(), child.getArtifactId() ) );\n            }\n            else\n            {\n                child.setUrl( parent.getUrl() );\n            }\n        }\n\n        // ----------------------------------------------------------------------\n        // Distribution\n        // ----------------------------------------------------------------------\n\n        assembleDistributionInheritence( child, parent );\n\n        // issueManagement\n        if ( child.getIssueManagement() == null )\n        {\n            child.setIssueManagement( parent.getIssueManagement() );\n        }\n\n        // description\n        if ( child.getDescription() == null )\n        {\n            child.setDescription( parent.getDescription() );\n        }\n\n        // Organization\n        if ( child.getOrganization() == null )\n        {\n            child.setOrganization( parent.getOrganization() );\n        }\n\n        // Scm\n        assembleScmInheritance( child, parent );\n\n        // ciManagement\n        if ( child.getCiManagement() == null )\n        {\n            child.setCiManagement( parent.getCiManagement() );\n        }\n\n        // developers\n        if ( child.getDevelopers().size() == 0 )\n        {\n            child.setDevelopers( parent.getDevelopers() );\n        }\n\n        // developers\n        if ( child.getContributors().size() == 0 )\n        {\n            child.setContributors( parent.getContributors() );\n        }\n\n        // mailingLists\n        if ( child.getMailingLists().size() == 0 )\n        {\n            child.setMailingLists( parent.getMailingLists() );\n        }\n\n        // Build\n        assembleBuildInheritance( child, parent );\n\n        // Dependencies :: aggregate\n        List dependencies = parent.getDependencies();\n\n        for ( Iterator iterator = dependencies.iterator(); iterator.hasNext(); )\n        {\n            Dependency dependency = (Dependency) iterator.next();\n\n            child.addDependency( dependency );\n\n        }\n\n        // Repositories :: aggregate\n        List parentRepositories = parent.getRepositories();\n\n        List childRepositories = child.getRepositories();\n\n        for ( Iterator iterator = parentRepositories.iterator(); iterator.hasNext(); )\n        {\n            Repository repository = (Repository) iterator.next();\n\n            if ( !childRepositories.contains( repository ) )\n            {\n                child.addRepository( repository );\n            }\n        }\n\n        // Mojo Repositories :: aggregate\n        List parentPluginRepositories = parent.getPluginRepositories();\n        List childPluginRepositories = child.getPluginRepositories();\n\n        for ( Iterator iterator = parentPluginRepositories.iterator(); iterator.hasNext(); )\n        {\n            Repository repository = (Repository) iterator.next();\n\n            if ( !childPluginRepositories.contains( repository ) )\n            {\n                child.addPluginRepository( repository );\n            }\n        }\n        \n        // Reports :: aggregate\n        if ( child.getReports() != null && parent.getReports() != null )\n        {\n            if ( child.getReports().getOutputDirectory() == null )\n            {\n                child.getReports().setOutputDirectory( parent.getReports().getOutputDirectory() );\n            }\n\n            List parentReports = parent.getReports().getPlugins();\n\n            List childReports = child.getReports().getPlugins();\n\n            for ( Iterator iterator = parentReports.iterator(); iterator.hasNext(); )\n            {\n                Plugin plugin = (Plugin) iterator.next();\n\n                if ( !childReports.contains( plugin ) )\n                {\n                    child.getReports().addPlugin( plugin );\n                }\n            }\n        }\n\n        assembleDependencyManagementInheritance( child, parent );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"private void assembleDistributionInheritence( Model child, Model parent )\n    {\n        if ( parent.getDistributionManagement() != null )\n        {\n            DistributionManagement parentDistMgmt = parent.getDistributionManagement();\n\n            DistributionManagement childDistMgmt = child.getDistributionManagement();\n\n            if ( childDistMgmt == null )\n            {\n                childDistMgmt = new DistributionManagement();\n\n                child.setDistributionManagement( childDistMgmt );\n            }\n\n            if ( childDistMgmt.getSite() == null )\n            {\n                if ( parentDistMgmt.getSite() != null )\n                {\n                    Site site = new Site();\n\n                    childDistMgmt.setSite( site );\n\n                    site.setId( parentDistMgmt.getSite().getId() );\n\n                    site.setName( parentDistMgmt.getSite().getName() );\n\n                    site.setUrl( parentDistMgmt.getSite().getUrl() );\n\n                    if ( site.getUrl() != null && site.getUrl().endsWith( \"/\" ) )\n                    {\n                        site.setUrl( site.getUrl() + child.getArtifactId() + \"/\" );\n                    }\n                }\n            }\n\n            if ( childDistMgmt.getRepository() == null )\n            {\n                if ( parentDistMgmt.getRepository() != null )\n                {\n                    Repository repository = new Repository();\n\n                    childDistMgmt.setRepository( repository );\n\n                    repository.setId( parentDistMgmt.getRepository().getId() );\n\n                    repository.setName( parentDistMgmt.getRepository().getName() );\n\n                    repository.setUrl( parentDistMgmt.getRepository().getUrl() );\n                }\n            }\n        }\n    }","id":100468,"modified_method":"private void assembleDistributionInheritence( Model child, Model parent )\n    {\n        if ( parent.getDistributionManagement() != null )\n        {\n            DistributionManagement parentDistMgmt = parent.getDistributionManagement();\n\n            DistributionManagement childDistMgmt = child.getDistributionManagement();\n\n            if ( childDistMgmt == null )\n            {\n                childDistMgmt = new DistributionManagement();\n\n                child.setDistributionManagement( childDistMgmt );\n            }\n\n            if ( childDistMgmt.getSite() == null )\n            {\n                if ( parentDistMgmt.getSite() != null )\n                {\n                    Site site = new Site();\n\n                    childDistMgmt.setSite( site );\n\n                    site.setId( parentDistMgmt.getSite().getId() );\n\n                    site.setName( parentDistMgmt.getSite().getName() );\n\n                    site.setUrl( parentDistMgmt.getSite().getUrl() );\n\n                    if ( site.getUrl() != null )\n                    {\n                        site.setUrl( appendPath( site.getUrl(), child.getArtifactId() ) );\n                    }\n                }\n            }\n\n            if ( childDistMgmt.getRepository() == null )\n            {\n                if ( parentDistMgmt.getRepository() != null )\n                {\n                    Repository repository = new Repository();\n\n                    childDistMgmt.setRepository( repository );\n\n                    repository.setId( parentDistMgmt.getRepository().getId() );\n\n                    repository.setName( parentDistMgmt.getRepository().getName() );\n\n                    repository.setUrl( parentDistMgmt.getRepository().getUrl() );\n                }\n            }\n        }\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"private void assembleScmInheritance( Model child, Model parent )\n    {\n        if ( parent.getScm() != null )\n        {\n            Scm parentScm = parent.getScm();\n\n            Scm childScm = child.getScm();\n\n            if ( childScm == null )\n            {\n                childScm = new Scm();\n\n                child.setScm( childScm );\n            }\n\n            if ( StringUtils.isEmpty( childScm.getConnection() ) && !StringUtils.isEmpty( parentScm.getConnection() ) )\n            {\n                if ( parentScm.getConnection().endsWith( \"/\" ) )\n                {\n                    childScm.setConnection( parentScm.getConnection() + child.getArtifactId() + \"/\" );\n                }\n                else\n                {\n                    childScm.setConnection( parentScm.getConnection() );\n                }\n            }\n\n            if ( StringUtils.isEmpty( childScm.getDeveloperConnection() ) &&\n                !StringUtils.isEmpty( parentScm.getDeveloperConnection() ) )\n            {\n                if ( parentScm.getDeveloperConnection().endsWith( \"/\" ) )\n                {\n                    childScm.setDeveloperConnection( parentScm.getDeveloperConnection() + child.getArtifactId() + \"/\" );\n                }\n                else\n                {\n                    childScm.setDeveloperConnection( parentScm.getDeveloperConnection() );\n                }\n            }\n\n            if ( StringUtils.isEmpty( childScm.getUrl() ) && !StringUtils.isEmpty( parentScm.getUrl() ) )\n            {\n                if ( parentScm.getUrl().endsWith( \"/\" ) )\n                {\n                    childScm.setUrl( parentScm.getUrl() + child.getArtifactId() + \"/\" );\n                }\n                else\n                {\n                    childScm.setUrl( parentScm.getUrl() );\n                }\n            }\n        }\n    }","id":100469,"modified_method":"private void assembleScmInheritance( Model child, Model parent )\n    {\n        if ( parent.getScm() != null )\n        {\n            Scm parentScm = parent.getScm();\n\n            Scm childScm = child.getScm();\n\n            if ( childScm == null )\n            {\n                childScm = new Scm();\n\n                child.setScm( childScm );\n            }\n\n            if ( StringUtils.isEmpty( childScm.getConnection() ) && !StringUtils.isEmpty( parentScm.getConnection() ) )\n            {\n                childScm.setConnection( appendPath( parentScm.getConnection(), child.getArtifactId() ) );\n            }\n\n            if ( StringUtils.isEmpty( childScm.getDeveloperConnection() ) &&\n                !StringUtils.isEmpty( parentScm.getDeveloperConnection() ) )\n            {\n                childScm.setDeveloperConnection( appendPath( parentScm.getDeveloperConnection(), child.getArtifactId() ) );\n            }\n\n            if ( StringUtils.isEmpty( childScm.getUrl() ) && !StringUtils.isEmpty( parentScm.getUrl() ) )\n            {\n                childScm.setUrl( appendPath( parentScm.getUrl(), child.getArtifactId() ) );\n            }\n        }\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"public void testScmInheritanceWhereParentHasUrlAndTheChildDoesnt()\n    {\n        Model parent = makeScmModel( \"parent\", null, null, \"http://foo/bar/\" );\n\n        Model child = makeScmModel( \"child\" );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( null, null, \"http://foo/bar/child/\", child.getScm() );\n    }","id":100470,"modified_method":"public void testScmInheritanceWhereParentHasUrlAndTheChildDoesnt()\n    {\n        Model parent = makeScmModel( \"parent\", null, null, \"http://foo/bar\" );\n\n        Model child = makeScmModel( \"child\" );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( null, null, \"http://foo/bar/child\", child.getScm() );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"public void testScmInheritanceWhereParentHasDeveloperConnectionAndTheChildDoesnt()\n    {\n        Model parent = makeScmModel( \"parent\", null, \"scm:foo:bar:/scm-dev-root/\", null );\n\n        Model child = makeScmModel( \"child\" );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( null, \"scm:foo:bar:/scm-dev-root/child/\", null, child.getScm() );\n    }","id":100471,"modified_method":"public void testScmInheritanceWhereParentHasDeveloperConnectionAndTheChildDoesnt()\n    {\n        Model parent = makeScmModel( \"parent\", null, \"scm:foo:bar:/scm-dev-root\", null );\n\n        Model child = makeScmModel( \"child\" );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( null, \"scm:foo:bar:/scm-dev-root/child\", null, child.getScm() );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"public void testScmInheritanceWhereParentHasConnectionAndTheChildDoesnt()\n    {\n        Model parent = makeScmModel( \"parent\", \"scm:foo:bar:/scm-root/\", null, null );\n\n        Model child = makeScmModel( \"child\" );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( \"scm:foo:bar:/scm-root/child/\", null, null, child.getScm() );\n    }","id":100472,"modified_method":"public void testScmInheritanceWhereParentHasConnectionAndTheChildDoesnt()\n    {\n        Model parent = makeScmModel( \"parent\", \"scm:foo:bar:/scm-root\", null, null );\n\n        Model child = makeScmModel( \"child\" );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( \"scm:foo:bar:/scm-root/child\", null, null, child.getScm() );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"/**\n     * <pre>\n     * root\n     *   |--artifact1\n     *   |         |\n     *   |         |--artifact1-1\n     *   |\n     *   |--artifact2 (in another directory called a2 so it has it's own scm section)\n     *             |\n     *             |--artifact2-1\n     * <\/pre>\n     */\n    public void testScmInheritance()\n        throws Exception\n    {\n        // Make the models\n        Model root = makeScmModel( \"root\", \"scm:foo:/scm-root/\", \"scm:foo:/scm-dev-root/\", null );\n\n        Model artifact1 = makeScmModel( \"artifact1\" );\n\n        Model artifact1_1 = makeScmModel( \"artifact1-1\" );\n\n        Model artifact2 = makeScmModel( \"artifact2\", \"scm:foo:/scm-root/yay-artifact2/\",\n                                        \"scm:foo:/scm-dev-root/yay-artifact2/\", null );\n\n        Model artifact2_1 = makeScmModel( \"artifact2-1\" );\n\n        // Assemble\n        assembler.assembleModelInheritance( artifact1, root );\n\n        assembler.assembleModelInheritance( artifact1_1, artifact1 );\n\n        assembler.assembleModelInheritance( artifact2, root );\n\n        assembler.assembleModelInheritance( artifact2_1, artifact2 );\n\n        // --- -- -\n\n        assertConnection( \"scm:foo:/scm-root/artifact1/\", \"scm:foo:/scm-dev-root/artifact1/\", artifact1 );\n\n        assertConnection( \"scm:foo:/scm-root/artifact1/artifact1-1/\", \"scm:foo:/scm-dev-root/artifact1/artifact1-1/\",\n                          artifact1_1 );\n\n        assertConnection( \"scm:foo:/scm-root/yay-artifact2/\", \"scm:foo:/scm-dev-root/yay-artifact2/\", artifact2 );\n\n        assertConnection( \"scm:foo:/scm-root/yay-artifact2/artifact2-1/\",\n                          \"scm:foo:/scm-dev-root/yay-artifact2/artifact2-1/\", artifact2_1 );\n    }","id":100473,"modified_method":"/**\n     * <pre>\n     * root\n     *   |--artifact1\n     *   |         |\n     *   |         |--artifact1-1\n     *   |\n     *   |--artifact2 (in another directory called a2 so it has it's own scm section)\n     *             |\n     *             |--artifact2-1\n     * <\/pre>\n     */\n    public void testScmInheritance()\n        throws Exception\n    {\n        // Make the models\n        Model root = makeScmModel( \"root\", \"scm:foo:/scm-root\", \"scm:foo:/scm-dev-root\", null );\n\n        Model artifact1 = makeScmModel( \"artifact1\" );\n\n        Model artifact1_1 = makeScmModel( \"artifact1-1\" );\n\n        Model artifact2 = makeScmModel( \"artifact2\", \"scm:foo:/scm-root/yay-artifact2\",\n                                        \"scm:foo:/scm-dev-root/yay-artifact2\", null );\n\n        Model artifact2_1 = makeScmModel( \"artifact2-1\" );\n\n        // Assemble\n        assembler.assembleModelInheritance( artifact1, root );\n\n        assembler.assembleModelInheritance( artifact1_1, artifact1 );\n\n        assembler.assembleModelInheritance( artifact2, root );\n\n        assembler.assembleModelInheritance( artifact2_1, artifact2 );\n\n        // --- -- -\n\n        assertConnection( \"scm:foo:/scm-root/artifact1\", \"scm:foo:/scm-dev-root/artifact1\", artifact1 );\n\n        assertConnection( \"scm:foo:/scm-root/artifact1/artifact1-1\", \"scm:foo:/scm-dev-root/artifact1/artifact1-1\",\n                          artifact1_1 );\n\n        assertConnection( \"scm:foo:/scm-root/yay-artifact2\", \"scm:foo:/scm-dev-root/yay-artifact2\", artifact2 );\n\n        assertConnection( \"scm:foo:/scm-root/yay-artifact2/artifact2-1\",\n                          \"scm:foo:/scm-dev-root/yay-artifact2/artifact2-1\", artifact2_1 );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"public void testScmInheritanceWhereParentHasConnectionAndTheChildDoes()\n    {\n        Model parent = makeScmModel( \"parent\", \"scm:foo:bar:/scm-root/\", null, null );\n\n        Model child = makeScmModel( \"child\", \"scm:foo:bar:/another-root/\", null, null );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( \"scm:foo:bar:/another-root/\", null, null, child.getScm() );\n    }","id":100474,"modified_method":"public void testScmInheritanceWhereParentHasConnectionAndTheChildDoes()\n    {\n        Model parent = makeScmModel( \"parent\", \"scm:foo:bar:/scm-root\", null, null );\n\n        Model child = makeScmModel( \"child\", \"scm:foo:bar:/another-root\", null, null );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( \"scm:foo:bar:/another-root\", null, null, child.getScm() );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"public void testScmInheritanceWhereParentHasDeveloperConnectionAndTheChildDoes()\n    {\n        Model parent = makeScmModel( \"parent\", null, \"scm:foo:bar:/scm-dev-root/\", null );\n\n        Model child = makeScmModel( \"child\", null, \"scm:foo:bar:/another-dev-root/\", null );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( null, \"scm:foo:bar:/another-dev-root/\", null, child.getScm() );\n    }","id":100475,"modified_method":"public void testScmInheritanceWhereParentHasDeveloperConnectionAndTheChildDoes()\n    {\n        Model parent = makeScmModel( \"parent\", null, \"scm:foo:bar:/scm-dev-root\", null );\n\n        Model child = makeScmModel( \"child\", null, \"scm:foo:bar:/another-dev-root\", null );\n\n        assembler.assembleModelInheritance( child, parent );\n\n        assertScm( null, \"scm:foo:bar:/another-dev-root\", null, child.getScm() );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"public void testProjectInheritance()\n        throws Exception\n    {\n        MavenProject p4 = getProject( projectFile( \"p4\" ) );\n\n        assertEquals( \"p4\", p4.getName() );\n\n        // ----------------------------------------------------------------------\n        // Value inherited from p3\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"2000\", p4.getInceptionYear() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from p2\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"mailing-list\", ( (MailingList) p4.getMailingLists().get( 0 ) ).getName() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from p1\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"scm-url\", p4.getScm().getUrl() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from p4\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"Codehaus\", p4.getOrganization().getName() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from super model\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"4.0.0\", p4.getModelVersion() );\n\n        assertEquals( \"4.0.0\", p4.getModelVersion() );\n    }","id":100476,"modified_method":"public void testProjectInheritance()\n        throws Exception\n    {\n        MavenProject p4 = getProject( projectFile( \"p4\" ) );\n\n        assertEquals( \"p4\", p4.getName() );\n\n        // ----------------------------------------------------------------------\n        // Value inherited from p3\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"2000\", p4.getInceptionYear() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from p2\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"mailing-list\", ( (MailingList) p4.getMailingLists().get( 0 ) ).getName() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from p1\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"scm-url/p2/p3/p4\", p4.getScm().getUrl() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from p4\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"Codehaus\", p4.getOrganization().getName() );\n\n        // ----------------------------------------------------------------------\n        // Value taken from super model\n        // ----------------------------------------------------------------------\n\n        assertEquals( \"4.0.0\", p4.getModelVersion() );\n\n        assertEquals( \"4.0.0\", p4.getModelVersion() );\n    }","commit_id":"b3702b24b53450fe9516e69e3d3f01fc07828e95","url":"https://github.com/apache/maven"},{"original_method":"/**A static method which displays a file chooser for the user to choose which file to open.\n       It returns the selected file or null if the process didn't complete\n    TODO BUG: do not allow more than one dialog open at a time -- two \"Ctrl-O\" in quick succession\n    will open two open file dialogs. */\n    public static File openFile(String title, String extension)\n    {\n        File file = null;\n        \n        JFileChooser chooser = new JFileChooser();\n        chooser.setDialogTitle(title);\n        chooser.setFileFilter(new VueFileFilter(extension));\n        \n        if (VueUtil.isCurrentDirectoryPathSet()) \n            chooser.setCurrentDirectory(new File(VueUtil.getCurrentDirectoryPath()));  \n        \n        int option = chooser.showDialog(tufts.vue.VUE.frame, \"Open\");\n        \n        if (option == JFileChooser.APPROVE_OPTION) \n        {\n            String fileName = chooser.getSelectedFile().getAbsolutePath();\n            \n            // if they type a file name w/out an extension\n            if (fileName.indexOf('.') < 0)\n                fileName += \".\" + extension;\n            \n            //if the file with the given name exists\n            if ((file = new File(fileName)).exists())\n            {\n                VueUtil.setCurrentDirectoryPath(chooser.getSelectedFile().getParent());\n            }\n            \n            else\n            {\n                System.err.println(\"File name '\"+fileName+\"' \" + file + \" can't  be found.\");\n                tufts.vue.VueUtil.alert(chooser,file + \" can't  be found.\", \"File Not Found\");\n                file = null;\n            }\n        }\n        \n        return file;\n    }","id":100477,"modified_method":"/**A static method which displays a file chooser for the user to choose which file to open.\n       It returns the selected file or null if the process didn't complete\n    TODO BUG: do not allow more than one dialog open at a time -- two \"Ctrl-O\" in quick succession\n    will open two open file dialogs. */\n    public static File openFile(String title, String extension)\n    {\n        File file = null;\n        \n        JFileChooser chooser = new JFileChooser();\n        chooser.setDialogTitle(title);\n        chooser.setFileFilter(new VueFileFilter(extension));\n        \n        if (VueUtil.isCurrentDirectoryPathSet()) \n            chooser.setCurrentDirectory(new File(VueUtil.getCurrentDirectoryPath()));  \n        \n        int option = chooser.showDialog(tufts.vue.VUE.frame, \"Open\");\n        \n        if (option == JFileChooser.APPROVE_OPTION) \n        {\n            File chooserFile = chooser.getSelectedFile();\n            if (chooserFile == null)\n                return null;\n            String fileName = chooserFile.getAbsolutePath();\n            \n            // if they type a file name w/out an extension\n            if (fileName.indexOf('.') < 0)\n                fileName += \".\" + extension;\n            \n            //if the file with the given name exists\n            if ((file = new File(fileName)).exists())\n            {\n                VueUtil.setCurrentDirectoryPath(chooser.getSelectedFile().getParent());\n            }\n            \n            else\n            {\n                System.err.println(\"File name '\"+fileName+\"' \" + file + \" can't  be found.\");\n                tufts.vue.VueUtil.alert(chooser,file + \" can't  be found.\", \"File Not Found\");\n                file = null;\n            }\n        }\n        \n        return file;\n    }","commit_id":"da113bc38e523eac66a24f063861c9eaef0463ec","url":"https://github.com/VUE/VUE"},{"original_method":"protected CvsHandler getCvsHandler(CvsContext context) {\n    VirtualFile selectedFile = context.getSelectedFile();\n    ImportWizard importWizard = new ImportWizard(context.getProject(), selectedFile);\n    importWizard.show();\n    if (!importWizard.isOK()) return CvsHandler.NULL;\n\n    myImportDetails = importWizard.createImportDetails();\n    return CommandCvsHandler.createImportHandler(myImportDetails);\n  }","id":100478,"modified_method":"protected CvsHandler getCvsHandler(CvsContext context) {\n    VirtualFile selectedFile = context.getSelectedFile();\n    ImportWizard importWizard = new ImportWizard(context.getProject(), selectedFile);\n    importWizard.show();\n    if (!importWizard.isOK()) return CvsHandler.NULL;\n\n    myImportDetails = importWizard.createImportDetails();\n    if (myImportDetails == null) return CvsHandler.NULL;\n    return CommandCvsHandler.createImportHandler(myImportDetails);\n  }","commit_id":"e3815ca6c1bc0669afb3071e6bb1a291107a4df7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ImportDetails createImportDetails() {\n    CvsElement module = mySelectCvsElementStep.getSelectedCvsElement();\n    String moduleName = mySettingsStep.getModuleName();\n    String importModuleName = module.getElementPath().equals(\".\") ? moduleName : module.getElementPath() + \"/\" + moduleName;\n\n    return new ImportDetails(mySelectImportLocationStep.getSelectedFile(),\n                             mySettingsStep.getVendor(),\n                             mySettingsStep.getReleaseTag(),\n                             mySettingsStep.getLogMessage(),\n                             importModuleName,\n                             mySelectCVSConfigurationStep.getSelectedConfiguration(),\n                             myKeywordSubstitutionStep.getFileExtensions(),\n                             mySelectImportLocationStep.getIgnoreFileFilter());\n  }","id":100479,"modified_method":"public ImportDetails createImportDetails() {\n    CvsElement module = mySelectCvsElementStep.getSelectedCvsElement();\n    String moduleName = mySettingsStep.getModuleName();\n    String importModuleName = module.getElementPath().equals(\".\") ? moduleName : module.getElementPath() + \"/\" + moduleName;\n\n    final File selectedFile = mySelectImportLocationStep.getSelectedFile();\n    if (selectedFile == null) return null;\n    return new ImportDetails(selectedFile,\n                             mySettingsStep.getVendor(),\n                             mySettingsStep.getReleaseTag(),\n                             mySettingsStep.getLogMessage(),\n                             importModuleName,\n                             mySelectCVSConfigurationStep.getSelectedConfiguration(),\n                             myKeywordSubstitutionStep.getFileExtensions(),\n                             mySelectImportLocationStep.getIgnoreFileFilter());\n  }","commit_id":"e3815ca6c1bc0669afb3071e6bb1a291107a4df7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void loadFile() {\n    JFileChooser jfc = new JFileChooser();\n    jfc.setFileFilter(new PlainTextFilter());\n    jfc.showOpenDialog(frame);\n    try {\n      String fileContents = StringTools.readFile(jfc.getSelectedFile().getAbsolutePath());\n      textArea.setText(fileContents);\n      JLanguageTool langTool = getCurrentLanguageTool();\n      checkTextAndDisplayResults(langTool, getCurrentLanguage().getName());\n    } catch (IOException e) {\n      JOptionPane.showMessageDialog(null, e.toString()); \n      e.printStackTrace();\n    }\n  }","id":100480,"modified_method":"void loadFile() {\n    JFileChooser jfc = new JFileChooser();\n    jfc.setFileFilter(new PlainTextFilter());\n    jfc.showOpenDialog(frame);\n    try {\n      File file = jfc.getSelectedFile();\n      if (file == null)   // user cancelled\n        return;\n      String fileContents = StringTools.readFile(file.getAbsolutePath());\n      textArea.setText(fileContents);\n      JLanguageTool langTool = getCurrentLanguageTool();\n      checkTextAndDisplayResults(langTool, getCurrentLanguage().getName());\n    } catch (IOException e) {\n      JOptionPane.showMessageDialog(null, e.toString()); \n      e.printStackTrace();\n    }\n  }","commit_id":"c6b9dcd5dcbc99eda91032d4abc4f258e0631fc5","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public boolean isSelected(AnActionEvent e) {\n    CvsContext cvsContext = CvsContextWrapper.createInstance(e);\n    if (!cvsContext.cvsIsActive()) return false;\n    CvsConnectionSettings settings = CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(cvsContext.getSelectedFile());\n    if (settings == null) return false;\n    return settings.isOffline();\n  }","id":100481,"modified_method":"public boolean isSelected(AnActionEvent e) {\n    CvsContext cvsContext = CvsContextWrapper.createInstance(e);\n    if (!cvsContext.cvsIsActive()) return false;\n    VirtualFile root = cvsContext.getSelectedFile();\n    if (root == null) return false;\n    CvsConnectionSettings settings = CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(root);\n    if (settings == null) return false;\n    return settings.isOffline();\n  }","commit_id":"268a5a0102fbc41d25b2854476c43d116c6749b0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\r\n        if (post == null || env == null) return null;\r\n        plasmaSwitchboard sb = (plasmaSwitchboard) env;\r\n        serverObjects prop = new serverObjects();\r\n\r\n        \r\n        String process   = post.get(\"process\", \"\");  // permission or store\r\n        //String key       = post.get(\"key\", \"\");      // a transmission key from the client\r\n        String otherpeer = post.get(\"iam\", \"\");      // identification of the client (a peer-hash)\r\n        String purpose   = post.get(\"purpose\", \"\");  // declares how the file shall be treated\r\n        String filename  = post.get(\"filename\", \"\"); // a name of a file without path\r\n        //long   filesize  = Long.parseLong((String) post.get(\"filesize\", \"\")); // the size of the file\r\n        \r\n        yacySeed otherseed = yacyCore.seedDB.get(otherpeer);\r\n        if (otherseed == null) {\r\n            // reject unknown peers\r\n            // this does not appear fair, but anonymous senders are dangerous\r\n            prop.put(\"process\", 0);\r\n            prop.put(\"response\", \"denied\");\r\n            prop.put(\"process_access\", \"\");\r\n            prop.put(\"process_address\", \"\");\r\n            prop.put(\"process_protocol\", \"\");\r\n            prop.put(\"process_path\", \"\");\r\n            prop.put(\"process_maxsize\", \"0\");\r\n            sb.getLog().logFine(\"RankingTransmission: rejected unknown peer '\" + otherpeer + \"'\");\r\n            return prop;\r\n        }\r\n        \r\n        String otherpeerName = otherseed.hash + \":\" + otherseed.getName();\r\n        \r\n        if (process.equals(\"permission\")) {\r\n            prop.put(\"process\", 0);\r\n            if (purpose.equals(\"crcon\")) {\r\n                // consolidation of cr files\r\n                //System.out.println(\"yacy/transfer:post=\" + post.toString());\r\n                //String cansendprotocol = (String) post.get(\"can-send-protocol\", \"http\");\r\n                String access = kelondroBase64Order.enhancedCoder.encode(serverCodings.encodeMD5Raw(otherpeer + \":\" + filename)) + \":\" + kelondroBase64Order.enhancedCoder.encode(serverCodings.encodeMD5Raw(\"\" + System.currentTimeMillis()));\r\n                prop.put(\"response\", \"ok\");\r\n                prop.put(\"process_access\", access);\r\n                prop.put(\"process_address\", yacyCore.seedDB.mySeed.getAddress());\r\n                prop.put(\"process_protocol\", \"http\");\r\n                prop.put(\"process_path\", \"\");  // currently empty; the store process will find a path\r\n                prop.put(\"process_maxsize\", \"-1\"); // if response is too big we return the size of the file\r\n                sb.rankingPermissions.put(serverCodings.encodeMD5Hex(kelondroBase64Order.standardCoder.encodeString(access)), filename);\r\n                sb.getLog().logFine(\"RankingTransmission: granted peer \" + otherpeerName + \" to send CR file \" + filename);\r\n            }\r\n            return prop;\r\n        }\r\n\r\n        if (process.equals(\"store\")) {\r\n            prop.put(\"process\", 1);\r\n            if (purpose.equals(\"crcon\")) {\r\n                byte[] filebytes = (byte[]) post.get(\"filename$file\");\r\n                String accesscode = post.get(\"access\", \"\");   // one-time authentication\r\n                String md5 = post.get(\"md5\", \"\");   // one-time authentication\r\n                //java.util.HashMap perm = sb.rankingPermissions;\r\n                //System.out.println(\"PERMISSIONDEBUG: accesscode=\" + accesscode + \", permissions=\" + perm.toString());\r\n                String grantedFile = (String) sb.rankingPermissions.get(accesscode);\r\n                prop.put(\"process_tt\", \"\");\r\n                if ((grantedFile == null) || (!(grantedFile.equals(filename)))) {\r\n                    // fraud-access of this interface\r\n                    prop.put(\"response\", \"denied\");\r\n                    sb.getLog().logFine(\"RankingTransmission: denied \" + otherpeerName + \" to send CR file \" + filename + \": wrong access code\");\r\n                } else {\r\n                    sb.rankingPermissions.remove(accesscode); // not needed any more\r\n                    File path = new File(sb.rankingPath, plasmaRankingDistribution.CR_OTHER);\r\n                    path.mkdirs();\r\n                    File file = new File(path, filename);\r\n                    try {\r\n                        if (file.getCanonicalPath().toString().startsWith(path.getCanonicalPath().toString())){\r\n                            serverFileUtils.write(filebytes, file);\r\n                            String md5t = serverCodings.encodeMD5Hex(file);\r\n                            if (md5t.equals(md5)) {\r\n                                prop.put(\"response\", \"ok\");\r\n                                sb.getLog().logFine(\"RankingTransmission: received from peer \" + otherpeerName + \" CR file \" + filename);\r\n                            } else {\r\n                                prop.put(\"response\", \"transfer failure\");\r\n                                sb.getLog().logFine(\"RankingTransmission: transfer failunre from peer \" + otherpeerName + \" for CR file \" + filename);\r\n                            }\r\n                        }else{\r\n                            //exploit?\r\n                            prop.put(\"response\", \"io error\");\r\n                            return prop;\r\n                        }\r\n                    } catch (IOException e) {\r\n                        prop.put(\"response\", \"io error\");\r\n                    }\r\n                }\r\n            }\r\n            return prop;\r\n        }\r\n        \r\n        // wrong access\r\n        prop.put(\"process\", 0);\r\n        prop.put(\"response\", \"denied\");\r\n        prop.put(\"process_access\", \"\");\r\n        prop.put(\"process_address\", \"\");\r\n        prop.put(\"process_protocol\", \"\");\r\n        prop.put(\"process_path\", \"\");\r\n        prop.put(\"process_maxsize\", \"0\");\r\n        sb.getLog().logFine(\"RankingTransmission: rejected unknown process \" + process + \":\" + purpose + \" from peer \" + otherpeerName);\r\n        return prop;\r\n    }","id":100482,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\r\n        if (post == null || env == null) return null;\r\n        plasmaSwitchboard sb = (plasmaSwitchboard) env;\r\n        serverObjects prop = new serverObjects();\r\n\r\n        \r\n        String process   = post.get(\"process\", \"\");  // permission or store\r\n        //String key       = post.get(\"key\", \"\");      // a transmission key from the client\r\n        String otherpeer = post.get(\"iam\", \"\");      // identification of the client (a peer-hash)\r\n        String purpose   = post.get(\"purpose\", \"\");  // declares how the file shall be treated\r\n        String filename  = post.get(\"filename\", \"\"); // a name of a file without path\r\n        //long   filesize  = Long.parseLong((String) post.get(\"filesize\", \"\")); // the size of the file\r\n        \r\n        yacySeed otherseed = yacyCore.seedDB.get(otherpeer);\r\n        if ((otherseed == null) || (filename.indexOf(\"..\") >= 0)) {\r\n            // reject unknown peers\r\n            // this does not appear fair, but anonymous senders are dangerous\r\n            prop.put(\"process\", 0);\r\n            prop.put(\"response\", \"denied\");\r\n            prop.put(\"process_access\", \"\");\r\n            prop.put(\"process_address\", \"\");\r\n            prop.put(\"process_protocol\", \"\");\r\n            prop.put(\"process_path\", \"\");\r\n            prop.put(\"process_maxsize\", \"0\");\r\n            if (otherseed == null) sb.getLog().logFine(\"RankingTransmission: rejected unknown peer '\" + otherpeer + \"'\");\r\n            if (filename.indexOf(\"..\") >= 0) sb.getLog().logFine(\"RankingTransmission: rejected wrong path '\" + filename + \"'\");\r\n            return prop;\r\n        }\r\n        \r\n        String otherpeerName = otherseed.hash + \":\" + otherseed.getName();\r\n        \r\n        if (process.equals(\"permission\")) {\r\n            prop.put(\"process\", 0);\r\n            if (purpose.equals(\"crcon\")) {\r\n                // consolidation of cr files\r\n                //System.out.println(\"yacy/transfer:post=\" + post.toString());\r\n                //String cansendprotocol = (String) post.get(\"can-send-protocol\", \"http\");\r\n                String access = kelondroBase64Order.enhancedCoder.encode(serverCodings.encodeMD5Raw(otherpeer + \":\" + filename)) + \":\" + kelondroBase64Order.enhancedCoder.encode(serverCodings.encodeMD5Raw(\"\" + System.currentTimeMillis()));\r\n                prop.put(\"response\", \"ok\");\r\n                prop.put(\"process_access\", access);\r\n                prop.put(\"process_address\", yacyCore.seedDB.mySeed.getAddress());\r\n                prop.put(\"process_protocol\", \"http\");\r\n                prop.put(\"process_path\", \"\");  // currently empty; the store process will find a path\r\n                prop.put(\"process_maxsize\", \"-1\"); // if response is too big we return the size of the file\r\n                sb.rankingPermissions.put(serverCodings.encodeMD5Hex(kelondroBase64Order.standardCoder.encodeString(access)), filename);\r\n                sb.getLog().logFine(\"RankingTransmission: granted peer \" + otherpeerName + \" to send CR file \" + filename);\r\n            }\r\n            return prop;\r\n        }\r\n\r\n        if (process.equals(\"store\")) {\r\n            prop.put(\"process\", 1);\r\n            if (purpose.equals(\"crcon\")) {\r\n                byte[] filebytes = (byte[]) post.get(\"filename$file\");\r\n                String accesscode = post.get(\"access\", \"\");   // one-time authentication\r\n                String md5 = post.get(\"md5\", \"\");   // one-time authentication\r\n                //java.util.HashMap perm = sb.rankingPermissions;\r\n                //System.out.println(\"PERMISSIONDEBUG: accesscode=\" + accesscode + \", permissions=\" + perm.toString());\r\n                String grantedFile = (String) sb.rankingPermissions.get(accesscode);\r\n                prop.put(\"process_tt\", \"\");\r\n                if ((grantedFile == null) || (!(grantedFile.equals(filename)))) {\r\n                    // fraud-access of this interface\r\n                    prop.put(\"response\", \"denied\");\r\n                    sb.getLog().logFine(\"RankingTransmission: denied \" + otherpeerName + \" to send CR file \" + filename + \": wrong access code\");\r\n                } else {\r\n                    sb.rankingPermissions.remove(accesscode); // not needed any more\r\n                    File path = new File(sb.rankingPath, plasmaRankingDistribution.CR_OTHER);\r\n                    path.mkdirs();\r\n                    File file = new File(path, filename);\r\n                    try {\r\n                        if (file.getCanonicalPath().toString().startsWith(path.getCanonicalPath().toString())){\r\n                            serverFileUtils.write(filebytes, file);\r\n                            String md5t = serverCodings.encodeMD5Hex(file);\r\n                            if (md5t.equals(md5)) {\r\n                                prop.put(\"response\", \"ok\");\r\n                                sb.getLog().logFine(\"RankingTransmission: received from peer \" + otherpeerName + \" CR file \" + filename);\r\n                            } else {\r\n                                prop.put(\"response\", \"transfer failure\");\r\n                                sb.getLog().logFine(\"RankingTransmission: transfer failunre from peer \" + otherpeerName + \" for CR file \" + filename);\r\n                            }\r\n                        }else{\r\n                            //exploit?\r\n                            prop.put(\"response\", \"io error\");\r\n                            return prop;\r\n                        }\r\n                    } catch (IOException e) {\r\n                        prop.put(\"response\", \"io error\");\r\n                    }\r\n                }\r\n            }\r\n            return prop;\r\n        }\r\n        \r\n        // wrong access\r\n        prop.put(\"process\", 0);\r\n        prop.put(\"response\", \"denied\");\r\n        prop.put(\"process_access\", \"\");\r\n        prop.put(\"process_address\", \"\");\r\n        prop.put(\"process_protocol\", \"\");\r\n        prop.put(\"process_path\", \"\");\r\n        prop.put(\"process_maxsize\", \"0\");\r\n        sb.getLog().logFine(\"RankingTransmission: rejected unknown process \" + process + \":\" + purpose + \" from peer \" + otherpeerName);\r\n        return prop;\r\n    }","commit_id":"423ce9bf59c6bf424ec40807e413d0ca8f4266f8","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private RuleQuery(Builder builder) {\n    this.key = builder.key;\n    this.query = builder.query;\n    this.language = builder.language;\n    this.repositories = defaultCollection(builder.repositories);\n    this.characteristic = builder.characteristic;\n    this.pageSize = builder.pageSize;\n    this.pageIndex = builder.pageIndex;\n  }","id":100483,"modified_method":"private RuleQuery(Builder builder) {\n    this.key = builder.key;\n    this.query = builder.query;\n    this.languages = defaultCollection(builder.languages);\n    this.repositories = defaultCollection(builder.repositories);\n    this.severities = defaultCollection(builder.severities);\n    this.statuses = defaultCollection(builder.statuses);\n    this.tags = defaultCollection(builder.tags);\n    this.debtCharacteristics = defaultCollection(builder.debtCharacteristics);\n    this.pageSize = builder.pageSize;\n    this.pageIndex = builder.pageIndex;\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  public String characteristic() {\n    return characteristic;\n  }","id":100484,"modified_method":"public Collection<String> debtCharacteristics() {\n    return debtCharacteristics;\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  public String language() {\n    return language;\n  }","id":100485,"modified_method":"public Collection<String> languages() {\n    return languages;\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public PagedResult<Rule> find(RuleQuery query) {\n    BoolFilterBuilder mainFilter = boolFilter().mustNot(termFilter(RuleDocument.FIELD_STATUS, STATUS_REMOVED));\n    if (StringUtils.isNotBlank(query.query())) {\n      mainFilter.must(FilterBuilders.queryFilter(\n        QueryBuilders.multiMatchQuery(query.query(), RuleDocument.FIELD_NAME + \".search\", RuleDocument.FIELD_KEY).operator(Operator.AND)));\n    }\n    if (query.characteristic() != null) {\n      mainFilter.must(FilterBuilders.queryFilter(\n          QueryBuilders.multiMatchQuery(query.characteristic(), RuleDocument.FIELD_CHARACTERISTIC_KEY, RuleDocument.FIELD_SUB_CHARACTERISTIC_KEY).operator(Operator.OR))\n      );\n    }\n    if (query.language() != null) {\n      mainFilter.must(termFilter(RuleDocument.FIELD_LANGUAGE, query.language()));\n    }\n    if (!query.repositories().isEmpty()) {\n      if (query.repositories().size() == 1) {\n        mainFilter.must(termFilter(RuleDocument.FIELD_REPOSITORY_KEY, query.repositories().iterator().next()));\n      } else {\n        mainFilter.must(termsFilter(RuleDocument.FIELD_REPOSITORY_KEY, query.repositories().toArray()));\n      }\n    }\n    Paging paging = Paging.create(query.pageSize(), query.pageIndex());\n    SearchHits hits = searchIndex.executeRequest(\n      searchIndex.client().prepareSearch(INDEX_RULES).setTypes(TYPE_RULE)\n        .setPostFilter(mainFilter)\n        .addSort(RuleDocument.FIELD_NAME, SortOrder.ASC)\n        .setSize(paging.pageSize())\n        .setFrom(paging.offset())\n    );\n\n    Builder<Rule> rulesBuilder = ImmutableList.builder();\n    for (SearchHit hit : hits.hits()) {\n      rulesBuilder.add(RuleDocumentParser.parse(hit.sourceAsMap()));\n    }\n    return new PagedResult<Rule>(rulesBuilder.build(), PagingResult.create(paging.pageSize(), paging.pageIndex(), hits.getTotalHits()));\n  }","id":100486,"modified_method":"public PagedResult<Rule> find(RuleQuery query) {\n    BoolFilterBuilder mainFilter = boolFilter().mustNot(termFilter(RuleDocument.FIELD_STATUS, STATUS_REMOVED));\n    if (StringUtils.isNotBlank(query.query())) {\n      mainFilter.must(FilterBuilders.queryFilter(\n        QueryBuilders.multiMatchQuery(query.query(), RuleDocument.FIELD_NAME + \".search\", RuleDocument.FIELD_KEY).operator(Operator.AND)));\n    }\n    addMustTermOrTerms(mainFilter, RuleDocument.FIELD_LANGUAGE, query.languages());\n    addMustTermOrTerms(mainFilter, RuleDocument.FIELD_REPOSITORY_KEY, query.repositories());\n    addMustTermOrTerms(mainFilter, RuleDocument.FIELD_SEVERITY, query.severities());\n    addMustTermOrTerms(mainFilter, RuleDocument.FIELD_STATUS, query.statuses());\n    if (!query.debtCharacteristics().isEmpty()) {\n      mainFilter.must(FilterBuilders.queryFilter(\n          QueryBuilders.multiMatchQuery(query.debtCharacteristics(), RuleDocument.FIELD_CHARACTERISTIC_KEY, RuleDocument.FIELD_SUB_CHARACTERISTIC_KEY).operator(Operator.OR))\n      );\n    }\n    if (!query.tags().isEmpty()) {\n      mainFilter.must(FilterBuilders.queryFilter(\n          QueryBuilders.multiMatchQuery(query.tags(), RuleDocument.FIELD_ADMIN_TAGS, RuleDocument.FIELD_SYSTEM_TAGS).operator(Operator.OR))\n      );\n    }\n\n    Paging paging = Paging.create(query.pageSize(), query.pageIndex());\n    SearchHits hits = searchIndex.executeRequest(\n      searchIndex.client().prepareSearch(INDEX_RULES).setTypes(TYPE_RULE)\n        .setPostFilter(mainFilter)\n        .addSort(RuleDocument.FIELD_NAME, SortOrder.ASC)\n        .setSize(paging.pageSize())\n        .setFrom(paging.offset())\n    );\n\n    Builder<Rule> rulesBuilder = ImmutableList.builder();\n    for (SearchHit hit : hits.hits()) {\n      rulesBuilder.add(RuleDocumentParser.parse(hit.sourceAsMap()));\n    }\n    return new PagedResult<Rule>(rulesBuilder.build(), PagingResult.create(paging.pageSize(), paging.pageIndex(), hits.getTotalHits()));\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void find_rules_by_rule_repositories() {\n    assertThat(registry.find(RuleQuery.builder().repositories(newArrayList(\"xoo\")).build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().repositories(newArrayList(\"xoo\", \"xoo2\")).build()).results()).hasSize(2);\n    assertThat(registry.find(RuleQuery.builder().repositories(newArrayList(\"unknown\")).build()).results()).isEmpty();\n  }","id":100487,"modified_method":"@Test\n  public void find_rules_by_repositories() {\n    assertThat(registry.find(RuleQuery.builder().repositories(newArrayList(\"xoo\")).build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().repositories(newArrayList(\"xoo\", \"xoo2\")).build()).results()).hasSize(2);\n    assertThat(registry.find(RuleQuery.builder().repositories(newArrayList(\"unknown\")).build()).results()).isEmpty();\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void find_rules_by_language() {\n    assertThat(registry.find(RuleQuery.builder().language(\"xoo\").build()).results()).hasSize(2);\n    assertThat(registry.find(RuleQuery.builder().language(\"unknown\").build()).results()).isEmpty();\n  }","id":100488,"modified_method":"@Test\n  public void find_rules_by_languages() {\n    assertThat(registry.find(RuleQuery.builder().languages(newArrayList(\"xoo\")).build()).results()).hasSize(2);\n    assertThat(registry.find(RuleQuery.builder().languages(newArrayList(\"unknown\")).build()).results()).isEmpty();\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void find_rules_by_characteristic_or_sub_characteristic() {\n    Map<Integer, CharacteristicDto> characteristics = newHashMap();\n    characteristics.put(10, new CharacteristicDto().setId(10).setKey(\"REUSABILITY\").setName(\"Reusability\"));\n    characteristics.put(11, new CharacteristicDto().setId(11).setKey(\"MODULARITY\").setName(\"Modularity\").setParentId(10));\n\n    List<RuleDto> rules = ImmutableList.of(new RuleDto().setId(10).setRepositoryKey(\"repo\").setRuleKey(\"key1\").setSeverity(Severity.MINOR)\n      .setDefaultSubCharacteristicId(11).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\"));\n\n    registry.bulkRegisterRules(rules, characteristics, ArrayListMultimap.<Integer, RuleParamDto>create(),\n      ArrayListMultimap.<Integer, RuleRuleTagDto>create());\n\n    assertThat(registry.find(RuleQuery.builder().characteristic(\"MODULARITY\").build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().characteristic(\"REUSABILITY\").build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().characteristic(\"Unknown\").build()).results()).isEmpty();\n  }","id":100489,"modified_method":"@Test\n  public void find_rules_by_characteristics() {\n    assertThat(registry.find(RuleQuery.builder().debtCharacteristics(newArrayList(\"MODULARITY\")).build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().debtCharacteristics(newArrayList(\"REUSABILITY\")).build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().debtCharacteristics(newArrayList(\"MODULARITY\", \"REUSABILITY\")).build()).results()).hasSize(1);\n    assertThat(registry.find(RuleQuery.builder().debtCharacteristics(newArrayList(\"unknown\")).build()).results()).isEmpty();\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void find_rules_by_name() {\n    // Removed rule should not appear\n    assertThat(registry.find(RuleQuery.builder().build()).results()).hasSize(2);\n\n    // Search is case insensitive\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"one issue per line\").build()).results()).hasSize(1);\n\n    // Search is ngram based\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"with param\").build()).results()).hasSize(1);\n\n    // Search works also with key\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"OneIssuePerLine\").build()).results()).hasSize(1);\n  }","id":100490,"modified_method":"@Test\n  public void find_rules_by_name() {\n    // Removed rule should not appear\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"Removed rule\").build()).results()).isEmpty();\n\n    // Search is case insensitive\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"one issue per line\").build()).results()).hasSize(1);\n\n    // Search is ngram based\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"with param\").build()).results()).hasSize(1);\n\n    // Search works also with key\n    assertThat(registry.find(RuleQuery.builder().searchQuery(\"OneIssuePerLine\").build()).results()).hasSize(1);\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void writeRule(Rule rule, JsonWriter json) {\n    String languageName = null;\n    String languageKey = rule.language();\n    if (languageKey != null) {\n      Language language = languages.get(languageKey);\n      if (language != null) {\n        languageName = language.getName();\n      } else {\n        languageName = languageKey;\n      }\n    }\n    json\n      .prop(\"key\", rule.ruleKey().toString())\n      .prop(\"name\", rule.name())\n      .prop(\"language\", languageName)\n    ;\n  }","id":100491,"modified_method":"private void writeRule(Rule rule, JsonWriter json) {\n    String languageName = null;\n    String languageKey = rule.language();\n    if (languageKey != null) {\n      Language language = languages.get(languageKey);\n      if (language != null) {\n        languageName = language.getName();\n      } else {\n        languageName = languageKey;\n      }\n    }\n    json\n      .prop(\"key\", rule.ruleKey().toString())\n      .prop(\"name\", rule.name())\n      .prop(\"language\", languageName)\n      .prop(\"status\", rule.status())\n    ;\n    DebtRemediationFunction function = rule.debtRemediationFunction();\n    if (function != null) {\n      json\n        .prop(\"debtCharacteristic\", rule.debtCharacteristicKey())\n        .prop(\"debtCharacteristicName\", rule.debtCharacteristicName())\n        .prop(\"debtSubCharacteristic\", rule.debtSubCharacteristicKey())\n        .prop(\"debtSubCharacteristicName\", rule.debtSubCharacteristicName())\n        .prop(\"debtRemediationFunction\", function.type().name())\n        .prop(\"debtRemediationCoefficient\", function.coefficient())\n        .prop(\"debtRemediationOffset\", function.offset())\n      ;\n    }\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void handle(Request request, Response response) {\n    final String ruleKeyParam = request.param(\"k\");\n    Collection<Rule> foundRules = Collections.emptyList();\n    boolean hasMore = false;\n    long total = 0L;\n    if (ruleKeyParam == null) {\n      PagedResult<Rule> searchResult = rules.find(RuleQuery.builder()\n        .searchQuery(request.param(\"s\"))\n        .language(request.param(\"language\"))\n        .characteristic(request.param(\"characteristic\"))\n        .pageSize(request.paramAsInt(\"ps\"))\n        .pageIndex(request.paramAsInt(\"p\"))\n        .build());\n      foundRules = searchResult.results();\n      hasMore = searchResult.paging().hasNextPage();\n      total = searchResult.paging().total();\n    } else {\n      RuleKey ruleKey = RuleKey.parse(ruleKeyParam);\n      Rule rule = findRule(ruleKey);\n      if (rule != null) {\n        foundRules = Collections.singleton(rule);\n        total = 1L;\n      }\n      hasMore = false;\n    }\n\n    JsonWriter json = response.newJsonWriter();\n    json.beginObject().name(\"results\").beginArray();\n    for (Rule rule : foundRules) {\n      json.beginObject();\n      writeRule(rule, json);\n      json.endObject();\n    }\n    json.endArray().prop(\"more\", hasMore).prop(\"total\", total).endObject().close();\n  }","id":100492,"modified_method":"@Override\n  public void handle(Request request, Response response) {\n    final String ruleKeyParam = request.param(\"k\");\n    Collection<Rule> foundRules = Collections.emptyList();\n    boolean hasMore = false;\n    long total = 0L;\n    if (ruleKeyParam == null) {\n      PagedResult<Rule> searchResult = rules.find(RuleQuery.builder()\n        .searchQuery(request.param(\"s\"))\n        .languages(RubyUtils.toStrings(request.param(\"languages\")))\n        .repositories(RubyUtils.toStrings(request.param(\"repositories\")))\n        .severities(RubyUtils.toStrings(request.param(\"severities\")))\n        .statuses(RubyUtils.toStrings(request.param(\"statuses\")))\n        .tags(RubyUtils.toStrings(request.param(\"tags\")))\n        .debtCharacteristics(RubyUtils.toStrings(request.param(\"debtCharacteristics\")))\n        .pageSize(request.paramAsInt(\"ps\"))\n        .pageIndex(request.paramAsInt(\"p\"))\n        .build());\n      foundRules = searchResult.results();\n      hasMore = searchResult.paging().hasNextPage();\n      total = searchResult.paging().total();\n    } else {\n      RuleKey ruleKey = RuleKey.parse(ruleKeyParam);\n      Rule rule = findRule(ruleKey);\n      if (rule != null) {\n        foundRules = Collections.singleton(rule);\n        total = 1L;\n      }\n      hasMore = false;\n    }\n\n    JsonWriter json = response.newJsonWriter();\n    json.beginObject().name(\"results\").beginArray();\n    for (Rule rule : foundRules) {\n      json.beginObject();\n      writeRule(rule, json);\n      json.endObject();\n    }\n    json.endArray().prop(\"more\", hasMore).prop(\"total\", total).endObject().close();\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void search_rules() throws Exception {\n    final int pageSize = 10;\n    final int pageIndex = 2;\n    Rule rule = ruleBuilder.build();\n\n    when(rules.find(any(RuleQuery.class))).thenReturn(\n      new PagedResult<Rule>(ImmutableList.of(rule), PagingResult.create(pageSize, pageIndex, 1)));\n    Language lang = mock(Language.class);\n    when(lang.getName()).thenReturn(\"Java\");\n    when(languages.get(\"java\")).thenReturn(lang);\n\n    MockUserSession.set();\n    WsTester.TestRequest request = tester.newRequest(\"list\").setParam(\"ps\", \"10\").setParam(\"p\", \"2\");\n    request.execute().assertJson(\"{'more':false,'total':1,'results':[\"\n      + \"{'key':'squid:AvoidCycle','name':'Avoid cycle','language':'Java'}\"\n      + \"]}\");\n  }","id":100493,"modified_method":"@Test\n  public void search_rules() throws Exception {\n    final int pageSize = 10;\n    final int pageIndex = 2;\n    Rule rule = ruleBuilder.build();\n\n    when(rules.find(any(RuleQuery.class))).thenReturn(\n      new PagedResult<Rule>(ImmutableList.of(rule), PagingResult.create(pageSize, pageIndex, 1)));\n    Language lang = mock(Language.class);\n    when(lang.getName()).thenReturn(\"Java\");\n    when(languages.get(\"java\")).thenReturn(lang);\n\n    MockUserSession.set();\n    WsTester.TestRequest request = tester.newRequest(\"list\").setParam(\"ps\", \"10\").setParam(\"p\", \"2\");\n    request.execute().assertJson(getClass(), \"search_rules.json\");\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void search_rule_by_key() throws Exception {\n    String ruleKey = \"squid:AvoidCycle\";\n    Rule rule = ruleBuilder.build();\n\n    when(rules.findByKey(RuleKey.parse(ruleKey))).thenReturn(rule);\n    Language lang = mock(Language.class);\n    when(lang.getName()).thenReturn(\"Java\");\n    when(languages.get(\"java\")).thenReturn(lang);\n\n    MockUserSession.set();\n    WsTester.TestRequest request = tester.newRequest(\"list\").setParam(\"k\", ruleKey);\n    request.execute().assertJson(\"{'more':false,'total':1,'results':[\"\n      + \"{'key':'squid:AvoidCycle','name':'Avoid cycle','language':'Java'}\"\n      + \"]}\");\n  }","id":100494,"modified_method":"@Test\n  public void search_rule_by_key() throws Exception {\n    String ruleKey = \"squid:AvoidCycle\";\n    Rule rule = ruleBuilder.build();\n\n    when(rules.findByKey(RuleKey.parse(ruleKey))).thenReturn(rule);\n    Language lang = mock(Language.class);\n    when(lang.getName()).thenReturn(\"Java\");\n    when(languages.get(\"java\")).thenReturn(lang);\n\n    MockUserSession.set();\n    WsTester.TestRequest request = tester.newRequest(\"list\").setParam(\"k\", ruleKey);\n    request.execute().assertJson(getClass(), \"search_rules.json\");\n  }","commit_id":"ac68715f45043ec0461e074569cbb902fed8031e","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void handle(Request request, Response response) {\n    final String ruleKeyParam = request.param(\"k\");\n    Collection<Rule> foundRules = Collections.emptyList();\n    boolean hasMore = false;\n    long total = 0L;\n    if (ruleKeyParam == null) {\n      final String ruleSearchParam = request.param(\"s\");\n      final int pageSize = request.paramAsInt(\"ps\", 25);\n      final int pageIndex = request.paramAsInt(\"p\", 1);\n      PagedResult<Rule> searchResult = rules.find(RuleQuery.builder()\n          .searchQuery(ruleSearchParam)\n          .pageSize(pageSize)\n          .pageIndex(pageIndex)\n          .build());\n      foundRules = searchResult.results();\n      hasMore = searchResult.paging().hasNextPage();\n      total = searchResult.paging().total();\n    } else {\n      RuleKey ruleKey = RuleKey.parse(ruleKeyParam);\n      Rule rule = findRule(ruleKey);\n      if (rule != null) {\n        foundRules = Collections.singleton(rule);\n        total = 1L;\n      }\n      hasMore = false;\n    }\n\n    JsonWriter json = response.newJsonWriter();\n    json.beginObject().name(\"results\").beginArray();\n    for(Rule rule: foundRules) {\n      json.beginObject();\n      writeRule(rule, json);\n      json.endObject();\n    }\n    json.endArray().prop(\"more\", hasMore).prop(\"total\", total).endObject().close();\n  }","id":100495,"modified_method":"@Override\n  public void handle(Request request, Response response) {\n    final String ruleKeyParam = request.param(\"k\");\n    Collection<Rule> foundRules = Collections.emptyList();\n    boolean hasMore = false;\n    long total = 0L;\n    if (ruleKeyParam == null) {\n      PagedResult<Rule> searchResult = rules.find(RuleQuery.builder()\n        .searchQuery(request.param(\"s\"))\n        .language(request.param(\"language\"))\n        .characteristic(request.param(\"characteristic\"))\n        .pageSize(request.paramAsInt(\"ps\"))\n        .pageIndex(request.paramAsInt(\"p\"))\n        .build());\n      foundRules = searchResult.results();\n      hasMore = searchResult.paging().hasNextPage();\n      total = searchResult.paging().total();\n    } else {\n      RuleKey ruleKey = RuleKey.parse(ruleKeyParam);\n      Rule rule = findRule(ruleKey);\n      if (rule != null) {\n        foundRules = Collections.singleton(rule);\n        total = 1L;\n      }\n      hasMore = false;\n    }\n\n    JsonWriter json = response.newJsonWriter();\n    json.beginObject().name(\"results\").beginArray();\n    for (Rule rule : foundRules) {\n      json.beginObject();\n      writeRule(rule, json);\n      json.endObject();\n    }\n    json.endArray().prop(\"more\", hasMore).prop(\"total\", total).endObject().close();\n  }","commit_id":"31c1d04b2a5a3d9128857392afa4d292d2a46b46","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n     * Demonstrates various JSON/flexible schema queries.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public void runQueries() throws Exception {\n\n        System.out.println();\n        System.out.println(\"Running Queries: \");\n        System.out.println();\n\n        // Select some sessions - see a portion of the full result set\n        System.out.println(\"Select a sample portion of the data:\");\n        String SQL = \"SELECT username, json_data FROM user_session_table ORDER BY username LIMIT 10\";\n        ClientResponse resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        printResults(resp.getResults()[0]);\n        System.out.println();\n\n        // Select some sessions that have logged into site VoltDB Forum\n        System.out.println(\"Select logins that have been made to the VoltDB Forum, limit results to 10:\");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(json_data, 'site')='VoltDB Forum' ORDER BY username LIMIT 10\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        printResults(resp.getResults()[0]);\n        System.out.println();\n\n        // Select VoltDB Forum sessions that are moderators\n        System.out.println(\"Select VoltDB Forum sessions that are moderators:\");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(json_data, 'site')='VoltDB Forum' AND field(json_data, 'moderator')='true' ORDER BY username LIMIT 10;\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        printResults(resp.getResults()[0]);\n        System.out.println();\n\n        // Nest field() functions to drill into the JSON\n        System.out.println(\"Look deep into the JSON data for all records of VoltDB Forum logins who have downloaded version v3.0 and have specified a client language of Java. \");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(field(json_data, 'props'), 'download_version')='v3.0' and field(field(json_data, 'props'), 'client_language')='Java' ORDER BY username LIMIT 10\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        printResults(resp.getResults()[0]);\n        System.out.println();\n\n        // Use LIKE to pattern match.a\n        System.out.println(\"User pattern matching (SQL LIKE) to look for all records of VoltDB Forum logins who have downloaded version v2.x. \");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(field(json_data, 'props'), 'download_version') LIKE 'v2%' ORDER BY username LIMIT 10\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        printResults(resp.getResults()[0]);\n        System.out.println();\n\n        // Display the results as JSON.\n        System.out.println(\"Retrieve the JSON data for a particular login.  Treat the whole result set as JSON:\");\n        SQL = \"SELECT json_data FROM user_session_table WHERE username='voltdb'\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toJSONString());\n        System.out.println();\n\n        // Display the results as JSON.\n        System.out.println(\"Retrieve the JSON data for a particular login. Just grab the JSON value from the result:\");\n        SQL = \"SELECT json_data FROM user_session_table WHERE username='voltdb'\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        VoltTable table = resp.getResults()[0];\n        table.advanceRow();\n        System.out.println(table.get(\"json_data\", VoltType.STRING));\n        System.out.println();\n    }","id":100496,"modified_method":"/**\n     * Demonstrates various JSON/flexible schema queries.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public void runQueries() throws Exception {\n\n        System.out.println();\n        System.out.println(\"Running Queries: \");\n        System.out.println();\n\n        // Select some sessions - see a portion of the full result set\n        System.out.println(\"Select a sample portion of the data:\");\n        String SQL = \"SELECT username, json_data FROM user_session_table ORDER BY username LIMIT 10\";\n        ClientResponse resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toFormattedString());\n        System.out.println();\n\n        // Select some sessions that have logged into site VoltDB Forum\n        System.out.println(\"Select logins that have been made to the VoltDB Forum, limit results to 10:\");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(json_data, 'site')='VoltDB Forum' ORDER BY username LIMIT 10\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toFormattedString());\n        System.out.println();\n\n        // Select VoltDB Forum sessions that are moderators\n        System.out.println(\"Select VoltDB Forum sessions that are moderators:\");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(json_data, 'site')='VoltDB Forum' AND field(json_data, 'moderator')='true' ORDER BY username LIMIT 10;\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toFormattedString());\n        System.out.println();\n\n        // Nest field() functions to drill into the JSON\n        System.out.println(\"Look deep into the JSON data for all records of VoltDB Forum logins who have downloaded version v3.0 and have specified a client language of Java. \");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(field(json_data, 'props'), 'download_version')='v3.0' and field(field(json_data, 'props'), 'client_language')='Java' ORDER BY username LIMIT 10\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toFormattedString());\n        System.out.println();\n\n        // Use LIKE to pattern match.a\n        System.out.println(\"User pattern matching (SQL LIKE) to look for all records of VoltDB Forum logins who have downloaded version v2.x. \");\n        SQL = \"SELECT username, json_data FROM user_session_table WHERE field(field(json_data, 'props'), 'download_version') LIKE 'v2%' ORDER BY username LIMIT 10\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toFormattedString());\n        System.out.println();\n\n        // Display the results as JSON.\n        System.out.println(\"Retrieve the JSON data for a particular login.  Treat the whole result set as JSON:\");\n        SQL = \"SELECT json_data FROM user_session_table WHERE username='voltdb'\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        System.out.println(resp.getResults()[0].toJSONString());\n        System.out.println();\n\n        // Display the results as JSON.\n        System.out.println(\"Retrieve the JSON data for a particular login. Just grab the JSON value from the result:\");\n        SQL = \"SELECT json_data FROM user_session_table WHERE username='voltdb'\";\n        resp = client.callProcedure(\"@AdHoc\", SQL);\n        System.out.println(\"SQL query: \" + SQL);\n        System.out.println();\n        VoltTable table = resp.getResults()[0];\n        table.advanceRow();\n        System.out.println(table.get(\"json_data\", VoltType.STRING));\n        System.out.println();\n    }","commit_id":"a68ba078e47323f93c22b0c23d17d70d9fb03a7a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static void printResponse(ClientResponse response) throws Exception\n    {\n        if (response.getStatus() != ClientResponse.SUCCESS)\n            throw new Exception(\"Execution Error: \" + response.getStatusString());\n        if (OutputFormat.equals(\"fixed\"))\n        {\n            for(VoltTable t : response.getResults())\n            {\n                if (isUpdateResult(t))\n                {\n                    if(OutputShowMetadata)\n                        System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.fetchRow(0).getLong(0));\n                    continue;\n                }\n                int columnCount = t.getColumnCount();\n                int[] padding = new int[columnCount];\n                String[] fmt = new String[columnCount];\n                for (int i = 0; i < columnCount; i++)\n                    padding[i] = OutputShowMetadata ? t.getColumnName(i).length() : 0;\n                t.resetRowPosition();\n                while(t.advanceRow())\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        Object v = t.get(i, t.getColumnType(i));\n                        if (t.wasNull())\n                            v = \"NULL\";\n                        int l = 0;  // length\n                        if (t.getColumnType(i) == VoltType.VARBINARY && !t.wasNull()) {\n                            l = ((byte[])v).length*2;\n                        }\n                        else {\n                            l= v.toString().length();\n                        }\n\n                        if (padding[i] < l)\n                            padding[i] = l;\n                    }\n                }\n                for (int i = 0; i < columnCount; i++)\n                {\n                    padding[i] += 1;\n                    fmt[i] = \"%1$\" +\n                        ((t.getColumnType(i) == VoltType.STRING ||\n                          t.getColumnType(i) == VoltType.TIMESTAMP ||\n                          t.getColumnType(i) == VoltType.VARBINARY) ? \"-\" : \"\")\n                        + padding[i] + \"s\";\n                }\n                if (OutputShowMetadata)\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        System.out.printf(\"%1$-\" + padding[i] + \"s\", t.getColumnName(i));\n                        if (i < columnCount - 1)\n                            System.out.print(\" \");\n                    }\n                    System.out.print(\"\\n\");\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        System.out.print(paddingString(\"\", padding[i], '-', false));\n                        if (i < columnCount - 1)\n                            System.out.print(\" \");\n                    }\n                    System.out.print(\"\\n\");\n                }\n                t.resetRowPosition();\n                while(t.advanceRow())\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        Object v = t.get(i, t.getColumnType(i));\n                        if (t.wasNull())\n                            v = \"NULL\";\n                        else if (t.getColumnType(i) == VoltType.VARBINARY)\n                            v = byteArrayToHexString((byte[])v);\n                        else\n                            v = v.toString();\n                        System.out.printf(fmt[i], v);\n                        if (i < columnCount - 1)\n                            System.out.print(\" \");\n                    }\n                    System.out.print(\"\\n\");\n                }\n                if (OutputShowMetadata)\n                    System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.getRowCount());\n            }\n        }\n        else\n        {\n            String separator = OutputFormat.equals(\"csv\") ? \",\" : \"\\t\";\n            for(VoltTable t : response.getResults())\n            {\n                if (isUpdateResult(t))\n                {\n                    if(OutputShowMetadata)\n                        System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.fetchRow(0).getLong(0));\n                    continue;\n                }\n                int columnCount = t.getColumnCount();\n                if (OutputShowMetadata)\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        if (i > 0) System.out.print(separator);\n                        System.out.print(t.getColumnName(i));\n                    }\n                    System.out.print(\"\\n\");\n                }\n                t.resetRowPosition();\n                while(t.advanceRow())\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        if (i > 0) System.out.print(separator);\n                        Object v = t.get(i, t.getColumnType(i));\n                        if (t.wasNull())\n                            v = \"NULL\";\n                        else if (t.getColumnType(i) == VoltType.VARBINARY)\n                            v = byteArrayToHexString((byte[])v);\n                        else\n                            v = v.toString();\n                        System.out.print(v);\n                    }\n                    System.out.print(\"\\n\");\n                }\n                if (OutputShowMetadata)\n                    System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.getRowCount());\n            }\n        }\n    }","id":100497,"modified_method":"private static void printResponse(ClientResponse response) throws Exception\n    {\n        if (response.getStatus() != ClientResponse.SUCCESS)\n            throw new Exception(\"Execution Error: \" + response.getStatusString());\n        if (OutputFormat.equals(\"fixed\"))\n        {\n            for(VoltTable t : response.getResults())\n            {\n                if (isUpdateResult(t))\n                {\n                    if(OutputShowMetadata)\n                        System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.fetchRow(0).getLong(0));\n                    continue;\n                }\n\n                // Use the VoltTable pretty printer to display formatted output.\n                System.out.println(t.toFormattedString());\n\n                if (OutputShowMetadata)\n                    System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.getRowCount());\n            }\n        }\n        else\n        {\n            String separator = OutputFormat.equals(\"csv\") ? \",\" : \"\\t\";\n            for(VoltTable t : response.getResults())\n            {\n                if (isUpdateResult(t))\n                {\n                    if(OutputShowMetadata)\n                        System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.fetchRow(0).getLong(0));\n                    continue;\n                }\n                int columnCount = t.getColumnCount();\n                if (OutputShowMetadata)\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        if (i > 0) System.out.print(separator);\n                        System.out.print(t.getColumnName(i));\n                    }\n                    System.out.print(\"\\n\");\n                }\n                t.resetRowPosition();\n                while(t.advanceRow())\n                {\n                    for (int i = 0; i < columnCount; i++)\n                    {\n                        if (i > 0) System.out.print(separator);\n                        Object v = t.get(i, t.getColumnType(i));\n                        if (t.wasNull())\n                            v = \"NULL\";\n                        else if (t.getColumnType(i) == VoltType.VARBINARY)\n                            v = byteArrayToHexString((byte[])v);\n                        else\n                            v = v.toString();\n                        System.out.print(v);\n                    }\n                    System.out.print(\"\\n\");\n                }\n                if (OutputShowMetadata)\n                    System.out.printf(\"\\n\\n(%d row(s) affected)\\n\", t.getRowCount());\n            }\n        }\n    }","commit_id":"a68ba078e47323f93c22b0c23d17d70d9fb03a7a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public boolean apply(@NotNull FunctionDescriptor functionDescriptor) {\n            if ((functionDescriptor.getReceiverParameter() == null) == receiverParameterExists) {\n                return false;\n            }\n\n            if (!(functionDescriptor.getContainingDeclaration() instanceof ClassDescriptor)) {\n                return matches(functionDescriptor);\n            }\n\n            for (CallableMemberDescriptor real : OverrideResolver.getOverriddenDeclarations(functionDescriptor)) {\n                if (matches(real)) {\n                    return true;\n                }\n            }\n\n            if (checkOverridden) {\n                for (CallableDescriptor overridden : OverrideResolver.getAllOverriddenDescriptors(functionDescriptor)) {\n                    if (matches(overridden)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }","id":100498,"modified_method":"@Override\n        public boolean apply(@NotNull FunctionDescriptor functionDescriptor) {\n            ReceiverParameterDescriptor actualReceiver = functionDescriptor.getReceiverParameter();\n            if (actualReceiver != null) {\n                if (receiverFqName == null) return false;\n\n                String actualReceiverFqName = TranslationUtils.getJetTypeFqName(actualReceiver.getType());\n\n                if (!actualReceiverFqName.equals(receiverFqName)) return false;\n            }\n\n            if (!(functionDescriptor.getContainingDeclaration() instanceof ClassDescriptor)) {\n                return matches(functionDescriptor);\n            }\n\n            for (CallableMemberDescriptor real : OverrideResolver.getOverriddenDeclarations(functionDescriptor)) {\n                if (matches(real)) {\n                    return true;\n                }\n            }\n\n            if (checkOverridden) {\n                for (CallableDescriptor overridden : OverrideResolver.getAllOverriddenDescriptors(functionDescriptor)) {\n                    if (matches(overridden)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }","commit_id":"516af6c908889c3824054dd1aa8a1ddf5223c005","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private StringOperationFIF() {\n        add(pattern(\"kotlin\", \"String\", \"get\"), new BuiltInFunctionIntrinsic(\"charAt\"));\n        add(pattern(\"js\", \"length\").receiverExists(), LENGTH_PROPERTY_INTRINSIC);\n        add(pattern(\"js\", \"isEmpty\").receiverExists(), IS_EMPTY_INTRINSIC);\n    }","id":100499,"modified_method":"private StringOperationFIF() {\n        add(pattern(\"kotlin\", \"String\", \"get\"), new BuiltInFunctionIntrinsic(\"charAt\"));\n        add(pattern(\"js\", \"length\").isExtensionOf(\"kotlin.CharSequence\"), LENGTH_PROPERTY_INTRINSIC);\n        add(pattern(\"js\", \"isEmpty\").isExtensionOf(\"kotlin.CharSequence\"), IS_EMPTY_INTRINSIC);\n    }","commit_id":"516af6c908889c3824054dd1aa8a1ddf5223c005","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private TopLevelFIF() {\n        add(EQUALS_IN_ANY, KOTLIN_EQUALS);\n        add(pattern(\"kotlin\", \"toString\").receiverExists(), TO_STRING);\n        add(pattern(\"kotlin\", \"equals\").receiverExists(), KOTLIN_EQUALS);\n        add(pattern(\"kotlin\", \"identityEquals\").receiverExists(), IDENTITY_EQUALS);\n        add(HASH_CODE_IN_ANY, KOTLIN_HASH_CODE);\n        add(pattern(NamePredicate.PRIMITIVE_NUMBERS, \"equals\"), KOTLIN_EQUALS);\n        add(pattern(\"String|Boolean|Char|Number.equals\"), KOTLIN_EQUALS);\n        add(pattern(\"kotlin\", \"arrayOfNulls\"), new KotlinFunctionIntrinsic(\"nullArray\"));\n        add(pattern(\"kotlin\", \"PropertyMetadataImpl\", \"<init>\"), PROPERTY_METADATA_IMPL);\n        add(pattern(\"kotlin\", \"iterator\").receiverExists(), RETURN_RECEIVER_INTRINSIC);\n\n        add(pattern(\"kotlin\", \"Map\", \"get\").checkOverridden(), NATIVE_MAP_GET);\n        add(pattern(\"js\", \"set\").receiverExists(), NATIVE_MAP_SET);\n\n        add(pattern(\"java.util\", \"HashMap\", \"<init>\"), new MapSelectImplementationIntrinsic(false));\n        add(pattern(\"java.util\", \"HashSet\", \"<init>\"), new MapSelectImplementationIntrinsic(true));\n\n        add(pattern(\"js\", \"Json\", \"get\"), ArrayFIF.GET_INTRINSIC);\n        add(pattern(\"js\", \"Json\", \"set\"), ArrayFIF.SET_INTRINSIC);\n    }","id":100500,"modified_method":"private TopLevelFIF() {\n        add(EQUALS_IN_ANY, KOTLIN_EQUALS);\n        add(pattern(\"kotlin\", \"toString\").isExtensionOf(\"kotlin.Any\"), TO_STRING);\n        add(pattern(\"kotlin\", \"equals\").isExtensionOf(\"kotlin.Any\"), KOTLIN_EQUALS);\n        add(pattern(\"kotlin\", \"identityEquals\").isExtensionOf(\"kotlin.Any\"), IDENTITY_EQUALS);\n        add(HASH_CODE_IN_ANY, KOTLIN_HASH_CODE);\n        add(pattern(NamePredicate.PRIMITIVE_NUMBERS, \"equals\"), KOTLIN_EQUALS);\n        add(pattern(\"String|Boolean|Char|Number.equals\"), KOTLIN_EQUALS);\n        add(pattern(\"kotlin\", \"arrayOfNulls\"), new KotlinFunctionIntrinsic(\"nullArray\"));\n        add(pattern(\"kotlin\", \"PropertyMetadataImpl\", \"<init>\"), PROPERTY_METADATA_IMPL);\n        add(pattern(\"kotlin\", \"iterator\").isExtensionOf(\"kotlin.Iterator\"), RETURN_RECEIVER_INTRINSIC);\n\n        add(pattern(\"kotlin\", \"Map\", \"get\").checkOverridden(), NATIVE_MAP_GET);\n        add(pattern(\"js\", \"set\").isExtensionOf(\"kotlin.MutableMap\"), NATIVE_MAP_SET);\n\n        add(pattern(\"java.util\", \"HashMap\", \"<init>\"), new MapSelectImplementationIntrinsic(false));\n        add(pattern(\"java.util\", \"HashSet\", \"<init>\"), new MapSelectImplementationIntrinsic(true));\n\n        add(pattern(\"js\", \"Json\", \"get\"), ArrayFIF.GET_INTRINSIC);\n        add(pattern(\"js\", \"Json\", \"set\"), ArrayFIF.SET_INTRINSIC);\n    }","commit_id":"516af6c908889c3824054dd1aa8a1ddf5223c005","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    private static String getJetTypeName(@NotNull JetType jetType) {\n        ClassifierDescriptor declaration = jetType.getConstructor().getDeclarationDescriptor();\n        assert declaration != null;\n\n        if (declaration instanceof TypeParameterDescriptor) {\n            return getJetTypeName(((TypeParameterDescriptor) declaration).getUpperBoundsAsType());\n        }\n\n        return getFqName(declaration).asString();\n    }","id":100501,"modified_method":"@NotNull\n    public static String getJetTypeFqName(@NotNull JetType jetType) {\n        ClassifierDescriptor declaration = jetType.getConstructor().getDeclarationDescriptor();\n        assert declaration != null;\n\n        if (declaration instanceof TypeParameterDescriptor) {\n            return getJetTypeFqName(((TypeParameterDescriptor) declaration).getUpperBoundsAsType());\n        }\n\n        return getFqName(declaration).asString();\n    }","commit_id":"516af6c908889c3824054dd1aa8a1ddf5223c005","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static String getArgumentTypesAsString(FunctionDescriptor descriptor) {\n        StringBuilder argTypes = new StringBuilder();\n\n        ReceiverParameterDescriptor receiverParameter = descriptor.getReceiverParameter();\n        if (receiverParameter != null) {\n            argTypes.append(getJetTypeName(receiverParameter.getType())).append(\".\");\n        }\n\n        argTypes.append(StringUtil.join(descriptor.getValueParameters(), new Function<ValueParameterDescriptor, String>() {\n            @Override\n            public String fun(ValueParameterDescriptor descriptor) {\n                return getJetTypeName(descriptor.getType());\n            }\n        }, \",\"));\n\n        return argTypes.toString();\n    }","id":100502,"modified_method":"private static String getArgumentTypesAsString(FunctionDescriptor descriptor) {\n        StringBuilder argTypes = new StringBuilder();\n\n        ReceiverParameterDescriptor receiverParameter = descriptor.getReceiverParameter();\n        if (receiverParameter != null) {\n            argTypes.append(getJetTypeFqName(receiverParameter.getType())).append(\".\");\n        }\n\n        argTypes.append(StringUtil.join(descriptor.getValueParameters(), new Function<ValueParameterDescriptor, String>() {\n            @Override\n            public String fun(ValueParameterDescriptor descriptor) {\n                return getJetTypeFqName(descriptor.getType());\n            }\n        }, \",\"));\n\n        return argTypes.toString();\n    }","commit_id":"516af6c908889c3824054dd1aa8a1ddf5223c005","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderProperty(PropertyDescriptor descriptor, StringBuilder builder) {\n        if (!startFromName) {\n            renderVisibility(descriptor.getVisibility(), builder);\n            renderModality(descriptor.getModality(), builder);\n        }\n        String typeString = renderPropertyPrefixAndComputeTypeString(\n                builder,\n                descriptor.isVar(),\n                descriptor.getTypeParameters(),\n                descriptor.getReceiverParameter(),\n                descriptor.getType());\n        renderName(descriptor, builder);\n        builder.append(\" : \").append(escape(typeString));\n    }","id":100503,"modified_method":"private void renderProperty(PropertyDescriptor descriptor, StringBuilder builder) {\n        if (!startFromName) {\n            renderVisibility(descriptor.getVisibility(), builder);\n            renderModality(descriptor.getModality(), builder);\n            renderValVarPrefix(descriptor, builder);\n        }\n\n        renderTypeParameters(descriptor.getTypeParameters(), builder);\n\n        ReceiverParameterDescriptor receiver = descriptor.getReceiverParameter();\n        if (receiver != null) {\n            builder.append(escape(renderType(receiver.getType()))).append(\".\");\n        }\n        renderName(descriptor, builder);\n        builder.append(\" : \").append(escape(renderType(descriptor.getType())));\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderVariable(VariableDescriptor descriptor, StringBuilder builder, boolean skipValVar) {\n        JetType type = descriptor.getType();\n        if (descriptor instanceof ValueParameterDescriptor) {\n            JetType varargElementType = ((ValueParameterDescriptor) descriptor).getVarargElementType();\n            if (varargElementType != null) {\n                builder.append(renderKeyword(\"vararg\")).append(\" \");\n                type = varargElementType;\n            }\n        }\n        String typeString = renderPropertyPrefixAndComputeTypeString(\n                builder,\n                skipValVar ? null : descriptor.isVar(),\n                Collections.<TypeParameterDescriptor>emptyList(),\n                ReceiverParameterDescriptor.NO_RECEIVER_PARAMETER,\n                type);\n        renderName(descriptor, builder);\n        builder.append(\" : \").append(escape(typeString));\n    }","id":100504,"modified_method":"private void renderVariable(VariableDescriptor descriptor, StringBuilder builder, boolean topLevel) {\n        JetType type = descriptor.getType();\n        if (descriptor instanceof ValueParameterDescriptor) {\n            JetType varargElementType = ((ValueParameterDescriptor) descriptor).getVarargElementType();\n            if (varargElementType != null) {\n                builder.append(renderKeyword(\"vararg\")).append(\" \");\n                type = varargElementType;\n            }\n        }\n\n        if (topLevel && !startFromName) {\n            renderValVarPrefix(descriptor, builder);\n        }\n\n        renderName(descriptor, builder);\n        builder.append(\" : \").append(escape(renderType(type)));\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderClass(ClassDescriptor descriptor, StringBuilder builder) {\n        String keyword;\n        switch (descriptor.getKind()) {\n            case TRAIT:\n                keyword = \"trait\";\n                break;\n            case ENUM_CLASS:\n                keyword = \"enum class\";\n                break;\n            case OBJECT:\n                keyword = \"object\";\n                break;\n            case ANNOTATION_CLASS:\n                keyword = \"annotation class\";\n                break;\n            case CLASS_OBJECT:\n                keyword = \"class object\";\n                break;\n            default:\n                keyword = \"class\";\n        }\n        renderClass(descriptor, builder, keyword);\n    }","id":100505,"modified_method":"private void renderClass(ClassDescriptor descriptor, StringBuilder builder) {\n        boolean isNotClassObject = descriptor.getKind() != ClassKind.CLASS_OBJECT;\n        if (!startFromName) {\n            if (isNotClassObject) {\n                renderVisibility(descriptor.getVisibility(), builder);\n                if (descriptor.getKind() != ClassKind.TRAIT && descriptor.getKind() != ClassKind.OBJECT) {\n                    renderModality(descriptor.getModality(), builder);\n                }\n            }\n            builder.append(renderKeyword(getClassKindPrefix(descriptor)));\n            if (isNotClassObject) {\n                builder.append(\" \");\n            }\n        }\n        if (isNotClassObject) {\n            renderName(descriptor, builder);\n            renderTypeParameters(descriptor.getTypeConstructor().getParameters(), builder);\n        }\n        if (!descriptor.equals(KotlinBuiltIns.getInstance().getNothing())) {\n            Collection<JetType> supertypes = descriptor.getTypeConstructor().getSupertypes();\n            if (supertypes.isEmpty() || supertypes.size() == 1 && KotlinBuiltIns.getInstance().isAny(supertypes.iterator().next())) {\n            }\n            else {\n                builder.append(\" : \");\n                for (Iterator<JetType> iterator = supertypes.iterator(); iterator.hasNext(); ) {\n                    JetType supertype = iterator.next();\n                    builder.append(renderType(supertype));\n                    if (iterator.hasNext()) {\n                        builder.append(\", \");\n                    }\n                }\n            }\n        }\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderTypeParameter(TypeParameterDescriptor descriptor, StringBuilder builder, boolean topLevel) {\n        if (!descriptor.isReified()) {\n            String variance = descriptor.getVariance().toString();\n            if (!variance.isEmpty()) {\n                builder.append(renderKeyword(variance)).append(\" \");\n            }\n        }\n        else {\n            builder.append(renderKeyword(\"reified\")).append(\" \");\n        }\n        renderName(descriptor, builder);\n        if (descriptor.getUpperBounds().size() == 1) {\n            JetType upperBound = descriptor.getUpperBounds().iterator().next();\n            if (!KotlinBuiltIns.getInstance().getDefaultBound().equals(upperBound)) {\n                builder.append(\" : \").append(renderType(upperBound));\n            }\n        }\n        else if (topLevel) {\n            boolean first = true;\n            for (JetType upperBound : descriptor.getUpperBounds()) {\n                if (upperBound.equals(KotlinBuiltIns.getInstance().getDefaultBound())) {\n                    continue;\n                }\n                if (first) {\n                    builder.append(\" : \");\n                }\n                else {\n                    builder.append(\" & \");\n                }\n                builder.append(renderType(upperBound));\n                first = false;\n            }\n        }\n        else {\n            // rendered with \"where\"\n        }\n    }","id":100506,"modified_method":"private void renderTypeParameter(TypeParameterDescriptor descriptor, StringBuilder builder, boolean topLevel) {\n        if (topLevel) {\n            builder.append(lt());\n        }\n\n        if (!descriptor.isReified()) {\n            String variance = descriptor.getVariance().toString();\n            if (!variance.isEmpty()) {\n                builder.append(renderKeyword(variance)).append(\" \");\n            }\n        }\n        else {\n            builder.append(renderKeyword(\"reified\")).append(\" \");\n        }\n        renderName(descriptor, builder);\n        if (descriptor.getUpperBounds().size() == 1) {\n            JetType upperBound = descriptor.getUpperBounds().iterator().next();\n            if (!KotlinBuiltIns.getInstance().getDefaultBound().equals(upperBound)) {\n                builder.append(\" : \").append(renderType(upperBound));\n            }\n        }\n        else if (topLevel) {\n            boolean first = true;\n            for (JetType upperBound : descriptor.getUpperBounds()) {\n                if (upperBound.equals(KotlinBuiltIns.getInstance().getDefaultBound())) {\n                    continue;\n                }\n                if (first) {\n                    builder.append(\" : \");\n                }\n                else {\n                    builder.append(\" & \");\n                }\n                builder.append(renderType(upperBound));\n                first = false;\n            }\n        }\n        else {\n            // rendered with \"where\"\n        }\n\n        if (topLevel) {\n            builder.append(\">\");\n        }\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderVariable(VariableDescriptor descriptor, StringBuilder builder) {\n        renderVariable(descriptor, builder, false);\n    }","id":100507,"modified_method":"private void renderValVarPrefix(VariableDescriptor descriptor, StringBuilder builder) {\n        builder.append(renderKeyword(descriptor.isVar() ? \"var\" : \"val\")).append(\" \");\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n        public Void visitVariableDescriptor(VariableDescriptor descriptor, StringBuilder builder) {\n            renderVariable(descriptor, builder);\n            return null;\n        }","id":100508,"modified_method":"@Override\n        public Void visitVariableDescriptor(VariableDescriptor descriptor, StringBuilder builder) {\n            renderVariable(descriptor, builder, true);\n            return null;\n        }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n        public Void visitTypeParameterDescriptor(TypeParameterDescriptor descriptor, StringBuilder builder) {\n            renderTypeParameter(descriptor, builder);\n            return null;\n        }","id":100509,"modified_method":"@Override\n        public Void visitTypeParameterDescriptor(TypeParameterDescriptor descriptor, StringBuilder builder) {\n            renderTypeParameter(descriptor, builder, true);\n            return null;\n        }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n        public Void visitValueParameterDescriptor(ValueParameterDescriptor descriptor, StringBuilder builder) {\n            renderValueParameter(descriptor, builder);\n            return null;\n        }","id":100510,"modified_method":"@Override\n        public Void visitValueParameterDescriptor(ValueParameterDescriptor descriptor, StringBuilder builder) {\n            renderValueParameter(descriptor, builder, true);\n            return null;\n        }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderValueParameters(FunctionDescriptor function, StringBuilder builder) {\n        if (handler != null) {\n            handler.appendBeforeValueParameters(function, builder);\n            for (ValueParameterDescriptor parameter : function.getValueParameters()) {\n                handler.appendBeforeValueParameter(parameter, builder);\n                renderValueParameterOfFunction(parameter, builder);\n                handler.appendAfterValueParameter(parameter, builder);\n            }\n            handler.appendAfterValueParameters(function, builder);\n        }\n        else {\n            builder.append(\"(\");\n            for (ValueParameterDescriptor parameter : function.getValueParameters()) {\n                renderValueParameterOfFunction(parameter, builder);\n                if (parameter.getIndex() != function.getValueParameters().size() - 1) {\n                    builder.append(\", \");\n                }\n            }\n            builder.append(\")\");\n        }\n    }","id":100511,"modified_method":"private void renderValueParameters(FunctionDescriptor function, StringBuilder builder) {\n        if (handler != null) {\n            handler.appendBeforeValueParameters(function, builder);\n            for (ValueParameterDescriptor parameter : function.getValueParameters()) {\n                handler.appendBeforeValueParameter(parameter, builder);\n                renderValueParameter(parameter, builder, false);\n                handler.appendAfterValueParameter(parameter, builder);\n            }\n            handler.appendAfterValueParameters(function, builder);\n        }\n        else {\n            builder.append(\"(\");\n            for (ValueParameterDescriptor parameter : function.getValueParameters()) {\n                renderValueParameter(parameter, builder, false);\n                if (parameter.getIndex() != function.getValueParameters().size() - 1) {\n                    builder.append(\", \");\n                }\n            }\n            builder.append(\")\");\n        }\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void renderValueParameter(ValueParameterDescriptor descriptor, StringBuilder builder) {\n        builder.append(renderKeyword(\"value-parameter\")).append(\" \");\n        renderVariable(descriptor, builder);\n    }","id":100512,"modified_method":"private void renderValueParameter(ValueParameterDescriptor descriptor, StringBuilder builder, boolean topLevel) {\n        if (topLevel) {\n            builder.append(renderKeyword(\"value-parameter\")).append(\" \");\n        }\n        renderVariable(descriptor, builder, topLevel);\n        boolean withDefaultValue = debugMode ? descriptor.declaresDefaultValue() : descriptor.hasDefaultValue();\n        if (withDefaultValue) {\n            builder.append(\" = ...\");\n        }\n    }","commit_id":"85b50aefda1d39214115bba1612520eb541cca4a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@BeforeClass\n  public static void startDatabase() {\n    Settings settings = new Settings().setProperties(Maps.fromProperties(System.getProperties()));\n\n    boolean hasDialect = settings.hasKey(\"sonar.jdbc.dialect\");\n    if (hasDialect) {\n      database = new DefaultDatabase(settings);\n    } else {\n      database = new H2Database(\"sonarMyBatis\");\n    }\n    database.start();\n\n    databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n    databaseTester = new DataSourceDatabaseTester(database.getDataSource());\n\n    myBatis = new MyBatis(database, settings, new Logback());\n    myBatis.start();\n  }","id":100513,"modified_method":"@Before\n  public void startDatabase() throws SQLException {\n    if (database == null) {\n      Settings settings = new Settings().setProperties(Maps.fromProperties(System.getProperties()));\n\n      boolean hasDialect = settings.hasKey(\"sonar.jdbc.dialect\");\n      if (hasDialect) {\n        database = new DefaultDatabase(settings);\n      } else {\n        database = new H2Database(\"sonarMyBatis\");\n      }\n      database.start();\n\n      databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n      databaseTester = new DataSourceDatabaseTester(database.getDataSource());\n\n      myBatis = new MyBatis(database, settings, new Logback());\n      myBatis.start();\n    }\n\n    databaseCommands.truncateDatabase(database.getDataSource().getConnection());\n  }","commit_id":"8b1a57036400e89b695a2a70626b43d94ec20ac4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@BeforeClass\n  public static void startDatabase() {\n    database = new H2Database(\"sonarHibernate\");\n    database.start();\n\n    dbConnector = new MemoryDatabaseConnector(database);\n    dbConnector.start();\n\n    databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n    databaseTester = new DataSourceDatabaseTester(database.getDataSource());\n\n    session = new JpaDatabaseSession(dbConnector);\n    session.start();\n  }","id":100514,"modified_method":"@Before\n  public void startDatabase() throws SQLException {\n    if (database == null) {\n      database = new H2Database(\"sonarHibernate\");\n      database.start();\n\n      databaseCommands = DatabaseCommands.forDialect(database.getDialect());\n      databaseTester = new DataSourceDatabaseTester(database.getDataSource());\n\n      DefaultDatabaseConnector dbConnector = new MemoryDatabaseConnector(database);\n      dbConnector.start();\n      session = new JpaDatabaseSession(dbConnector);\n      session.start();\n    }\n\n    databaseCommands.truncateDatabase(database.getDataSource().getConnection());\n  }","commit_id":"8b1a57036400e89b695a2a70626b43d94ec20ac4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void truncateDatabase(Connection connection) throws SQLException {\n    Statement statement = connection.createStatement();\n    for (String table : DatabaseUtils.TABLE_NAMES) {\n      // 1. truncate\n      String truncateCommand = truncate(table);\n      statement.executeUpdate(truncateCommand);\n      connection.commit();\n\n      // 2. reset primary keys\n      try {\n        for (String resetCommand : resetPrimaryKey(table)) {\n          statement.executeUpdate(resetCommand);\n        }\n        connection.commit();\n      } catch (Exception e) {\n        // this table has no primary key\n        connection.rollback();\n      }\n    }\n    statement.close();\n    connection.commit();\n    connection.close();\n  }","id":100515,"modified_method":"public void truncateDatabase(Connection connection) throws SQLException {\n    connection.setAutoCommit(false);\n\n    Statement statement = connection.createStatement();\n    for (String table : DatabaseUtils.TABLE_NAMES) {\n      // 1. truncate\n      String truncateCommand = truncate(table);\n      statement.executeUpdate(truncateCommand);\n      connection.commit();\n\n      // 2. reset primary keys\n      try {\n        for (String resetCommand : resetPrimaryKey(table)) {\n          statement.executeUpdate(resetCommand);\n        }\n        connection.commit();\n      } catch (Exception e) {\n        // this table has no primary key\n        connection.rollback();\n      }\n    }\n    statement.close();\n    connection.commit();\n    connection.close();\n  }","commit_id":"8b1a57036400e89b695a2a70626b43d94ec20ac4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void importXml(SonarConfig sonarConfig) {\n    LoggerFactory.getLogger(getClass()).info(\"Restore properties\");\n    clearProperties();\n\n    if (CollectionUtils.isNotEmpty(sonarConfig.getProperties())) {\n      for (Property xmlProperty : sonarConfig.getProperties()) {\n        String propKey = xmlProperty.getKey();\n        if (!CoreProperties.SERVER_ID.equals(propKey)) {\n          // \"sonar.core.id\" must never be restored, it is unique for a server and it created once at the 1rst server startup\n          databaseSession.save(new Property(propKey, xmlProperty.getValue()));\n        }\n      }\n    }\n  }","id":100516,"modified_method":"public void importXml(SonarConfig sonarConfig) {\n    LoggerFactory.getLogger(getClass()).info(\"Restore properties\");\n    clearProperties();\n\n    if (CollectionUtils.isNotEmpty(sonarConfig.getProperties())) {\n      for (Property xmlProperty : sonarConfig.getProperties()) {\n        String propKey = xmlProperty.getKey();\n        if (!CoreProperties.SERVER_ID.equals(propKey)) {\n          // \"sonar.core.id\" must never be restored, it is unique for a server and it created once at the 1rst server startup\n          databaseSession.save(new Property(propKey, xmlProperty.getValue()));\n        }\n      }\n    }\n    databaseSession.commit();\n  }","commit_id":"8b1a57036400e89b695a2a70626b43d94ec20ac4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldImportMultilineProperties() throws Exception {\n    setupData(\"shouldImportMultilineProperties\");\n\n    new Backup(getSession()).doImportXml(\n        FileUtils.readFileToString(\n            TestUtils.getResource(getClass(), \"backup-with-multiline-property.xml\"), CharEncoding.UTF_8));\n\n    getSession().commit();\n\n    Property property = getSession().getSingleResult(Property.class, \"key\", \"sonar.multiline.secured\");\n    assertThat(property.getValue(), startsWith(\"ONQwdcwcwwdadalkdmaiQGMqMVnhtAbhxwjjoVkHbWgx\"));\n    assertThat(property.getValue(), endsWith(\"mmmm\"));\n\n  }","id":100517,"modified_method":"@Test\n  public void shouldImportMultilineProperties() throws Exception {\n    setupData(\"shouldImportMultilineProperties\");\n\n    new Backup(getSession()).doImportXml(\n        FileUtils.readFileToString(\n            TestUtils.getResource(getClass(), \"backup-with-multiline-property.xml\"), CharEncoding.UTF_8));\n\n    Property property = getSession().getSingleResult(Property.class, \"key\", \"sonar.multiline.secured\");\n    assertThat(property.getValue(), startsWith(\"ONQwdcwcwwdadalkdmaiQGMqMVnhtAbhxwjjoVkHbWgx\"));\n    assertThat(property.getValue(), endsWith(\"mmmm\"));\n\n  }","commit_id":"8b1a57036400e89b695a2a70626b43d94ec20ac4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void assertAnalysis(int snapshotId, String fixture) {\n    setupData(\"sharedFixture\", fixture);\n    DatabaseSession session = getSession();\n    UpdateStatusJob sensor = new UpdateStatusJob(mock(ServerMetadata.class), session, new DefaultResourcePersister(session), loadSnapshot(snapshotId));\n    sensor.execute();\n\n    getSession().stop();\n    checkTables(fixture, \"snapshots\");\n  }","id":100518,"modified_method":"private void assertAnalysis(int snapshotId, String fixture) {\n    setupData(\"sharedFixture\", fixture);\n\n    DatabaseSession session = getSession();\n    UpdateStatusJob sensor = new UpdateStatusJob(mock(ServerMetadata.class), session, new DefaultResourcePersister(session), loadSnapshot(snapshotId));\n    sensor.execute();\n\n    checkTables(fixture, \"snapshots\");\n  }","commit_id":"8b1a57036400e89b695a2a70626b43d94ec20ac4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public String getFieldForPathRestriction(Filter.PathRestriction pathRestriction) {\n        String fieldName = null;\n        switch (pathRestriction) {\n            case ALL_CHILDREN: {\n                fieldName = SolrServerConfigurationDefaults.DESC_FIELD_NAME;\n                break;\n            }\n            case DIRECT_CHILDREN: {\n                fieldName = SolrServerConfigurationDefaults.CHILD_FIELD_NAME;\n                break;\n            }\n            case EXACT: {\n                fieldName = SolrServerConfigurationDefaults.PATH_FIELD_NAME;\n                break;\n            }\n            case PARENT: {\n                fieldName = SolrServerConfigurationDefaults.ANC_FIELD_NAME;\n                break;\n            }\n\n        }\n        return fieldName;\n    }","id":100519,"modified_method":"@Override\n    public String getFieldForPathRestriction(Filter.PathRestriction pathRestriction) {\n        String fieldName = null;\n        switch (pathRestriction) {\n            case ALL_CHILDREN: {\n                fieldName = SolrServerConfigurationDefaults.DESC_FIELD_NAME;\n                break;\n            }\n            case DIRECT_CHILDREN: {\n                fieldName = SolrServerConfigurationDefaults.CHILD_FIELD_NAME;\n                break;\n            }\n            case EXACT: {\n                fieldName = SolrServerConfigurationDefaults.PATH_FIELD_NAME;\n                break;\n            }\n            case PARENT: {\n                fieldName = SolrServerConfigurationDefaults.ANC_FIELD_NAME;\n                break;\n            }\n            case NO_RESTRICTION:\n                break;\n            default:\n                break;\n\n        }\n        return fieldName;\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public SolrServer getSolrServer() throws Exception {\n        if (solrServer == null) {\n            solrServer = createSolrServer();\n        }\n        return solrServer;\n    }","id":100520,"modified_method":"@Override\n    public SolrServer getSolrServer() throws Exception {\n        synchronized (this) {\n            if (solrServer == null) {\n                solrServer = createSolrServer();\n            }\n        }\n        return solrServer;\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void checkSolrConfiguration(String solrHomePath, String solrConfigPath, String coreName) throws IOException {\n\n        // check if solrHomePath exists\n        File solrHomePathFile = new File(solrHomePath);\n        if (!solrHomePathFile.exists()) {\n            if (!solrHomePathFile.mkdirs()) {\n                throw new IOException(\"could not create solrHomePath directory\");\n            } else {\n                // copy all the needed files to the just created directory\n                copy(\"/solr/solr.xml\", solrHomePath);\n                copy(\"/solr/zoo.cfg\", solrHomePath);\n                if (!new File(solrHomePath + \"/oak/conf\").mkdirs()) {\n                    throw new IOException(\"could not create nested core directory in solrHomePath\");\n                }\n                String coreDir = solrHomePath + \"/oak/conf/\";\n                copy(\"/solr/oak/conf/currency.xml\", coreDir);\n                copy(\"/solr/oak/conf/schema.xml\", coreDir);\n                copy(\"/solr/oak/conf/solrconfig.xml\", coreDir);\n            }\n        } else if (!solrHomePathFile.isDirectory()) {\n            throw new IOException(\"a non directory file with the specified name already exists for the given solrHomePath\");\n        }\n\n        File solrConfigPathFile = new File(solrConfigPath);\n        // check if solrConfigPath exists\n        if (!solrConfigPathFile.exists()) {\n            if (solrConfigPathFile.createNewFile()) {\n                copy(\"/solr/solr.xml\", solrConfigPathFile.getAbsolutePath());\n            }\n        }\n\n        // check if the a core with the given coreName exists\n        // TODO : improve this check\n        String[] files = new File(solrHomePath).list();\n        Arrays.sort(files);\n        if (Arrays.binarySearch(files, coreName) < 0) {\n            throw new IOException(\"could not find a directory with the given coreName in the solrHomePath\");\n        }\n\n\n    }","id":100521,"modified_method":"private void checkSolrConfiguration(String solrHomePath, String solrConfigPath, String coreName) throws IOException {\n\n        // check if solrHomePath exists\n        File solrHomePathFile = new File(solrHomePath);\n        if (!solrHomePathFile.exists()) {\n            if (!solrHomePathFile.mkdirs()) {\n                throw new IOException(\"could not create solrHomePath directory\");\n            } else {\n                // copy all the needed files to the just created directory\n                copy(\"/solr/solr.xml\", solrHomePath);\n                copy(\"/solr/zoo.cfg\", solrHomePath);\n                if (!new File(solrHomePath + \"/\" + coreName + \"/conf\").mkdirs()) {\n                    throw new IOException(\"could not create nested core directory in solrHomePath\");\n                }\n                String coreDir = solrHomePath + \"/\" + coreName + \"/conf/\";\n                copy(\"/solr/oak/conf/currency.xml\", coreDir);\n                copy(\"/solr/oak/conf/schema.xml\", coreDir);\n                copy(\"/solr/oak/conf/solrconfig.xml\", coreDir);\n            }\n        } else if (!solrHomePathFile.isDirectory()) {\n            throw new IOException(\"a non directory file with the specified name already exists for the given solrHomePath '\"+solrHomePath);\n        }\n\n        // TODO : improve this check\n        // check if solrConfigPath exists\n//        File solrConfigPathFile = new File(solrConfigPath);\n//        if (!solrConfigPathFile.exists()) {\n//            if (solrConfigPathFile.createNewFile()) {\n//                copy(\"/solr/solr.xml\", solrConfigPathFile.getAbsolutePath());\n//            }\n//        }\n\n        // check if the a core with the given coreName exists\n        // TODO : improve this check\n        String[] files = new File(solrHomePath).list();\n        Arrays.sort(files);\n        if (Arrays.binarySearch(files, coreName) < 0) {\n            throw new IOException(\"could not find a directory with the coreName '\" + coreName\n                    + \"' in the solrHomePath '\" + solrHomePath + \"'\");\n        }\n\n\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private SolrServer createSolrServer() throws Exception {\n\n        String solrHomePath = solrServerConfiguration.getSolrHomePath();\n        String coreName = solrServerConfiguration.getCoreName();\n        String solrConfigPath = solrServerConfiguration.getSolrConfigPath();\n        SolrServerConfiguration.HttpConfiguration httpConfiguration = solrServerConfiguration.getHttpConfiguration();\n\n\n        if (solrConfigPath != null && solrHomePath != null && coreName != null) {\n            checkSolrConfiguration(solrHomePath, solrConfigPath, coreName);\n            if (httpConfiguration != null) {\n                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(JettySolrRunner.class.getClassLoader());\n\n                Integer httpPort = httpConfiguration.getHttpPort();\n                String context = httpConfiguration.getContext();\n                try {\n                    JettySolrRunner jettySolrRunner = new JettySolrRunner(solrHomePath, context, httpPort, \"solrconfig.xml\", \"schema.xml\", true);\n                    jettySolrRunner.start(true);\n                } finally {\n                    Thread.currentThread().setContextClassLoader(classLoader);\n                }\n                HttpSolrServer httpSolrServer = new HttpSolrServer(new StringBuilder(SolrServerConfigurationDefaults.LOCAL_BASE_URL)\n                        .append(':').append(httpPort).append(coreName).toString());\n                if (OakSolrUtils.checkServerAlive(httpSolrServer)) {\n                    return httpSolrServer;\n                } else {\n                    throw new IOException(\"the spawn HTTP Solr server is not alive\");\n                }\n\n\n            } else {\n                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(CoreContainer.class.getClassLoader());\n\n                CoreContainer coreContainer = new CoreContainer(solrHomePath);\n                try {\n                    coreContainer.load(solrHomePath, new File(solrConfigPath));\n                } finally {\n                    Thread.currentThread().setContextClassLoader(classLoader);\n                }\n\n                EmbeddedSolrServer server = new EmbeddedSolrServer(coreContainer, coreName);\n                if (OakSolrUtils.checkServerAlive(server)) {\n                    return server;\n                } else {\n                    throw new IOException(\"the embedded Solr server is not alive\");\n                }\n            }\n        } else {\n            throw new Exception(\"SolrServer configuration proprties not set\");\n        }\n    }","id":100522,"modified_method":"private SolrServer createSolrServer() throws Exception {\n\n        String solrHomePath = solrServerConfiguration.getSolrHomePath();\n        String coreName = solrServerConfiguration.getCoreName();\n        String solrConfigPath = solrServerConfiguration.getSolrConfigPath();\n        SolrServerConfiguration.HttpConfiguration httpConfiguration = solrServerConfiguration.getHttpConfiguration();\n\n\n        if (solrConfigPath != null && solrHomePath != null && coreName != null) {\n            checkSolrConfiguration(solrHomePath, solrConfigPath, coreName);\n            if (httpConfiguration != null) {\n                if (log.isInfoEnabled()) {\n                    log.info(\"starting embedded Solr server with http bindings\");\n                }\n                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(JettySolrRunner.class.getClassLoader());\n\n                Integer httpPort = httpConfiguration.getHttpPort();\n                String context = httpConfiguration.getContext();\n                JettySolrRunner jettySolrRunner = null;\n                try {\n                    jettySolrRunner = new JettySolrRunner(solrHomePath, context, httpPort, \"solrconfig.xml\", \"schema.xml\", true);\n                    if (log.isInfoEnabled()) {\n                        log.info(\"Jetty runner instantiated\");\n                    }\n                    jettySolrRunner.start(true);\n                    if (log.isInfoEnabled()) {\n                        log.info(\"Jetty runner started\");\n                    }\n                } catch (Exception t) {\n                    if (log.isErrorEnabled()) {\n                        log.error(\"an error has occurred while starting Solr Jetty\", t);\n                    }\n                } finally {\n                    if (jettySolrRunner != null && !jettySolrRunner.isRunning()) {\n                        try {\n                            jettySolrRunner.stop();\n                            if (log.isInfoEnabled()) {\n                                log.info(\"Jetty runner stopped\");\n                            }\n                        } catch (Exception e) {\n                            if (log.isErrorEnabled()) {\n                                log.error(\"error while stopping the Jetty runner\", e);\n                            }\n                        }\n                    }\n                    Thread.currentThread().setContextClassLoader(classLoader);\n                }\n                if (log.isInfoEnabled()) {\n                    log.info(\"starting HTTP Solr server\");\n                }\n                HttpSolrServer httpSolrServer = new HttpSolrServer(new StringBuilder(\n                        SolrServerConfigurationDefaults.LOCAL_BASE_URL).append(':')\n                        .append(httpPort).append(context).append('/').append(coreName)\n                        .toString());\n                return httpSolrServer;\n            } else {\n                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(CoreContainer.class.getClassLoader());\n\n                CoreContainer coreContainer = new CoreContainer(solrHomePath);\n                try {\n                    coreContainer.load(solrHomePath, new File(solrConfigPath));\n                } finally {\n                    Thread.currentThread().setContextClassLoader(classLoader);\n                }\n\n                EmbeddedSolrServer server = new EmbeddedSolrServer(coreContainer, coreName);\n                if (server.ping().getStatus() == 0) {\n                    return server;\n                } else {\n                    throw new IOException(\"the embedded Solr server is not alive\");\n                }\n            }\n        } else {\n            throw new Exception(\"SolrServer configuration proprties not set\");\n        }\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public OakSolrConfiguration getConfiguration() {\n        if (oakSolrConfiguration == null) {\n            oakSolrConfiguration = new OakSolrConfiguration() {\n                @Override\n                public String getFieldNameFor(Type<?> propertyType) {\n                    if (Type.BINARIES.equals(propertyType) || Type.BINARY.equals(propertyType)) {\n                        // TODO : use Tika / SolrCell here\n                        return propertyType.toString()+\"_bin\";\n                    }\n                    return null;\n                }\n\n                @Override\n                public String getPathField() {\n                    return pathExactFieldName;\n                }\n\n                @Override\n                public String getFieldForPathRestriction(Filter.PathRestriction pathRestriction) {\n                    String fieldName = null;\n                    switch (pathRestriction) {\n                        case ALL_CHILDREN: {\n                            fieldName = pathDescendantsFieldName;\n                            break;\n                        }\n                        case DIRECT_CHILDREN: {\n                            fieldName = pathChildrenFieldName;\n                            break;\n                        }\n                        case EXACT: {\n                            fieldName = pathExactFieldName;\n                            break;\n                        }\n                        case PARENT: {\n                            fieldName = pathParentFieldName;\n                            break;\n                        }\n\n                    }\n                    return fieldName;\n                }\n\n                @Override\n                public String getFieldForPropertyRestriction(Filter.PropertyRestriction propertyRestriction) {\n                    return null;\n                }\n\n                @Override\n                public CommitPolicy getCommitPolicy() {\n                    return CommitPolicy.SOFT;\n                }\n\n            };\n        }\n        return oakSolrConfiguration;\n    }","id":100523,"modified_method":"@Override\n    public OakSolrConfiguration getConfiguration() {\n        if (oakSolrConfiguration == null) {\n            oakSolrConfiguration = new OakSolrConfiguration() {\n                @Override\n                public String getFieldNameFor(Type<?> propertyType) {\n                    if (Type.BINARIES.equals(propertyType) || Type.BINARY.equals(propertyType)) {\n                        // TODO : use Tika / SolrCell here\n                        return propertyType.toString()+\"_bin\";\n                    }\n                    return null;\n                }\n\n                @Override\n                public String getPathField() {\n                    return pathExactFieldName;\n                }\n\n                @Override\n                public String getFieldForPathRestriction(Filter.PathRestriction pathRestriction) {\n                    String fieldName = null;\n                    switch (pathRestriction) {\n                        case ALL_CHILDREN: {\n                            fieldName = pathDescendantsFieldName;\n                            break;\n                        }\n                        case DIRECT_CHILDREN: {\n                            fieldName = pathChildrenFieldName;\n                            break;\n                        }\n                        case EXACT: {\n                            fieldName = pathExactFieldName;\n                            break;\n                        }\n                        case PARENT: {\n                            fieldName = pathParentFieldName;\n                            break;\n                        }\n                        case NO_RESTRICTION:\n                            break;\n                        default:\n                            break;\n\n                    }\n                    return fieldName;\n                }\n\n                @Override\n                public String getFieldForPropertyRestriction(Filter.PropertyRestriction propertyRestriction) {\n                    return null;\n                }\n\n                @Override\n                public CommitPolicy getCommitPolicy() {\n                    return CommitPolicy.SOFT;\n                }\n\n            };\n        }\n        return oakSolrConfiguration;\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private SolrServer initializeWithCloudSolrServer() throws IOException, SolrServerException {\n        // try SolrCloud client\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(solrZkHost);\n        cloudSolrServer.connect();\n        cloudSolrServer.setDefaultCollection(\"collection1\"); // workaround for first request when the needed collection may not exist\n\n        // create specified collection if it doesn't exists\n        createCollectionIfNeeded(cloudSolrServer);\n\n        cloudSolrServer.setDefaultCollection(solrCollection);\n\n        // SolrCloud may need some time to sync on collection creation (to spread it over the shards / replicas)\n        int i = 0;\n        while (i < 3) {\n            try {\n                OakSolrUtils.checkServerAlive(cloudSolrServer);\n                return cloudSolrServer;\n            } catch (Exception e) {\n                // wait a bit\n                try {\n                    log.warn(\"wait a bit\", e);\n                    Thread.sleep(3000);\n                } catch (InterruptedException e1) {\n                    // do nothing\n                }\n            }\n            i++;\n        }\n        throw new IOException(\"the found SolrCloud server is not alive\");\n\n    }","id":100524,"modified_method":"private SolrServer initializeWithCloudSolrServer() throws IOException, SolrServerException {\n        // try SolrCloud client\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(solrZkHost);\n        cloudSolrServer.connect();\n        cloudSolrServer.setDefaultCollection(\"collection1\"); // workaround for first request when the needed collection may not exist\n\n        // create specified collection if it doesn't exists\n        createCollectionIfNeeded(cloudSolrServer);\n\n        cloudSolrServer.setDefaultCollection(solrCollection);\n\n        // SolrCloud may need some time to sync on collection creation (to spread it over the shards / replicas)\n        int i = 0;\n        while (i < 3) {\n            try {\n                OakSolrUtils.checkServerAlive(cloudSolrServer);\n                return cloudSolrServer;\n            } catch (Exception e) {\n                // wait a bit\n                try {\n                    if (log.isWarnEnabled()) {\n                        log.warn(\"wait a bit\", e);\n                    }\n                    Thread.sleep(3000);\n                } catch (InterruptedException e1) {\n                    // do nothing\n                }\n            }\n            i++;\n        }\n        throw new IOException(\"the found SolrCloud server is not alive\");\n\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private SolrQuery getQuery(Filter filter) {\n\n        SolrQuery solrQuery = new SolrQuery();\n        solrQuery.setParam(\"q.op\", \"AND\");\n\n        // TODO : change this to be not hard coded\n        solrQuery.setParam(\"df\", \"catch_all\");\n\n        // TODO : can we handle this better?\n        solrQuery.setParam(\"rows\", String.valueOf(Integer.MAX_VALUE));\n\n        StringBuilder queryBuilder = new StringBuilder();\n\n        // TODO : handle node type restriction\n\n        Filter.PathRestriction pathRestriction = filter.getPathRestriction();\n        if (pathRestriction != null) {\n            String path = purgePath(filter);\n            String fieldName = configuration.getFieldForPathRestriction(pathRestriction);\n            if (fieldName != null) {\n                queryBuilder.append(fieldName);\n                queryBuilder.append(':');\n                queryBuilder.append(path);\n                if (!path.equals(\"\\\\/\")) {\n                    queryBuilder.append(\"\\\\/\");\n                }\n                // TODO: Also handle other path restriction types\n                if (pathRestriction.equals(Filter.PathRestriction.ALL_CHILDREN)) {\n                    queryBuilder.append(\"*\");\n                }\n                queryBuilder.append(\" \");\n            }\n        }\n        Collection<Filter.PropertyRestriction> propertyRestrictions = filter.getPropertyRestrictions();\n        if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n            for (Filter.PropertyRestriction pr : propertyRestrictions) {\n            \tif (pr.propertyName.contains(\"/\")) {\n                    // lucene cannot handle child-level property restrictions\n                    continue;\n                }\n                String first = null;\n                if (pr.first != null) {\n                    first = partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n                }\n                String last = null;\n                if (pr.last != null) {\n                    last = partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n                }\n\n                String prField = configuration.getFieldForPropertyRestriction(pr);\n                CharSequence fieldName = partialEscape(prField != null ?\n                        prField : pr.propertyName);\n                if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n                    queryBuilder.append(configuration.getPathField());\n                    queryBuilder.append(':');\n                    queryBuilder.append(first);\n                    if (!first.equals(\"\\\\/\")) {\n                        queryBuilder.append(\"\\\\/\");\n                    }\n                } else {\n                    queryBuilder.append(fieldName).append(':');\n                    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n                        queryBuilder.append(first);\n                    } else if (pr.first == null && pr.last == null) {\n                        queryBuilder.append('*');\n                    } else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n                        // TODO : need to check if this works for all field types (most likely not!)\n                        queryBuilder.append(createRangeQuery(first, last, pr.firstIncluding, pr.lastIncluding));\n                    } else if (pr.isLike) {\n                        // TODO : the current parameter substitution is not expected to work well\n                        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%', '*').replace('_', '?')));\n                    } else {\n                        throw new RuntimeException(\"[unexpected!] not handled case\");\n                    }\n                }\n                queryBuilder.append(\" \");\n            }\n        }\n\n        Collection<String> fulltextConditions = filter.getFulltextConditions();\n        for (String fulltextCondition : fulltextConditions) {\n            queryBuilder.append(fulltextCondition).append(\" \");\n        }\n        if(queryBuilder.length() == 0) {\n            queryBuilder.append(\"*:*\");\n        }\n        String escapedQuery = queryBuilder.toString();\n        solrQuery.setQuery(escapedQuery);\n\n        if (log.isDebugEnabled()) {\n            log.debug(new StringBuilder(\"JCR query: \\n\" + filter.getQueryStatement() + \" \\nhas been converted to Solr query: \\n\").\n                    append(solrQuery.toString()).toString());\n        }\n\n        return solrQuery;\n    }","id":100525,"modified_method":"private SolrQuery getQuery(Filter filter) {\n\n        SolrQuery solrQuery = new SolrQuery();\n        setDefaults(solrQuery);\n\n        StringBuilder queryBuilder = new StringBuilder();\n\n        // TODO : handle node type restriction\n        Filter.PathRestriction pathRestriction = filter.getPathRestriction();\n        if (pathRestriction != null) {\n            String path = purgePath(filter);\n            String fieldName = configuration.getFieldForPathRestriction(pathRestriction);\n            if (fieldName != null) {\n                queryBuilder.append(fieldName);\n                queryBuilder.append(':');\n                queryBuilder.append(path);\n                if (!path.equals(\"\\\\/\")) {\n                    queryBuilder.append(\"\\\\/\");\n                }\n                // TODO: Also handle other path restriction types\n                if (pathRestriction.equals(Filter.PathRestriction.ALL_CHILDREN)) {\n                    queryBuilder.append(\"*\");\n                }\n                queryBuilder.append(\" \");\n            }\n        }\n        Collection<Filter.PropertyRestriction> propertyRestrictions = filter.getPropertyRestrictions();\n        if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n            for (Filter.PropertyRestriction pr : propertyRestrictions) {\n                if (pr.propertyName.contains(\"/\")) {\n                    // lucene cannot handle child-level property restrictions\n                    continue;\n                }\n                String first = null;\n                if (pr.first != null) {\n                    first = partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n                }\n                String last = null;\n                if (pr.last != null) {\n                    last = partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n                }\n\n                String prField = configuration.getFieldForPropertyRestriction(pr);\n                CharSequence fieldName = partialEscape(prField != null ?\n                        prField : pr.propertyName);\n                if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n                    queryBuilder.append(configuration.getPathField());\n                    queryBuilder.append(':');\n                    queryBuilder.append(first);\n                    if (first!= null && !\"\\\\/\".equals(first)) {\n                        queryBuilder.append(\"\\\\/\");\n                    }\n                } else {\n                    queryBuilder.append(fieldName).append(':');\n                    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n                        queryBuilder.append(first);\n                    } else if (pr.first == null && pr.last == null) {\n                        queryBuilder.append('*');\n                    } else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n                        // TODO : need to check if this works for all field types (most likely not!)\n                        queryBuilder.append(createRangeQuery(first, last, pr.firstIncluding, pr.lastIncluding));\n                    } else if (pr.isLike) {\n                        // TODO : the current parameter substitution is not expected to work well\n                        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%', '*').replace('_', '?')));\n                    } else {\n                        throw new RuntimeException(\"[unexpected!] not handled case\");\n                    }\n                }\n                queryBuilder.append(\" \");\n            }\n        }\n\n        Collection<String> fulltextConditions = filter.getFulltextConditions();\n        for (String fulltextCondition : fulltextConditions) {\n            queryBuilder.append(fulltextCondition).append(\" \");\n        }\n        if(queryBuilder.length() == 0) {\n            queryBuilder.append(\"*:*\");\n        }\n        String escapedQuery = queryBuilder.toString();\n        solrQuery.setQuery(escapedQuery);\n\n        if (log.isDebugEnabled()) {\n            log.debug(new StringBuilder(\"JCR query: \\n\" + filter.getQueryStatement() + \" \\nhas been converted to Solr query: \\n\").\n                    append(solrQuery.toString()).toString());\n        }\n\n        return solrQuery;\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public static OakSolrConfiguration getTestConfiguration() {\n        return new OakSolrConfiguration() {\n            @Override\n            public String getFieldNameFor(Type<?> propertyType) {\n                return null;\n            }\n\n            @Override\n            public String getPathField() {\n                return \"path_exact\";\n            }\n\n            @Override\n            public String getFieldForPathRestriction(Filter.PathRestriction pathRestriction) {\n                String fieldName = null;\n                switch (pathRestriction) {\n                    case ALL_CHILDREN: {\n                        fieldName = \"path_des\";\n                        break;\n                    }\n                    case DIRECT_CHILDREN: {\n                        fieldName = \"path_child\";\n                        break;\n                    }\n                    case EXACT: {\n                        fieldName = \"path_exact\";\n                        break;\n                    }\n                    case PARENT: {\n                        fieldName = \"path_anc\";\n                        break;\n                    }\n\n                }\n                return fieldName;\n            }\n\n            @Override\n            public String getFieldForPropertyRestriction(Filter.PropertyRestriction propertyRestriction) {\n                return null;\n            }\n\n            @Override\n            public CommitPolicy getCommitPolicy() {\n                return CommitPolicy.HARD;\n            }\n\n        };\n    }","id":100526,"modified_method":"public static OakSolrConfiguration getTestConfiguration() {\n        return new OakSolrConfiguration() {\n            @Override\n            public String getFieldNameFor(Type<?> propertyType) {\n                return null;\n            }\n\n            @Override\n            public String getPathField() {\n                return \"path_exact\";\n            }\n\n            @Override\n            public String getFieldForPathRestriction(Filter.PathRestriction pathRestriction) {\n                String fieldName = null;\n                switch (pathRestriction) {\n                    case ALL_CHILDREN: {\n                        fieldName = \"path_des\";\n                        break;\n                    }\n                    case DIRECT_CHILDREN: {\n                        fieldName = \"path_child\";\n                        break;\n                    }\n                    case EXACT: {\n                        fieldName = \"path_exact\";\n                        break;\n                    }\n                    case PARENT: {\n                        fieldName = \"path_anc\";\n                        break;\n                    }\n                    case NO_RESTRICTION:\n                        break;\n                    default:\n                        break;\n\n                }\n                return fieldName;\n            }\n\n            @Override\n            public String getFieldForPropertyRestriction(Filter.PropertyRestriction propertyRestriction) {\n                return null;\n            }\n\n            @Override\n            public CommitPolicy getCommitPolicy() {\n                return CommitPolicy.HARD;\n            }\n\n        };\n    }","commit_id":"c2dfcc516a982f7317c9fc90fb767583a36d8574","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Sets a correlationId for this message. The correlation Id can be used by\n     * components in the system to manage message relations <p/> transport protocol.\n     * As such not all messages will support the notion of a correlationId i.e. tcp\n     * or file. In this situation the correlation Id is set as a property of the\n     * message where it's up to developer to keep the association with the message.\n     * For example if the message is serialised to xml the correlationId will be\n     * available in the message.\n     *\n     * @param id the Id reference for this relationship\n     */\n    public void setCorrelationId(String id)\n    {\n        setProperty(JmsConstants.JMS_CORRELATION_ID, id);\n    }","id":100527,"modified_method":"/**\n     * Sets a correlationId for this message. The correlation Id can be used by\n     * components in the system to manage message relations <p/> transport protocol.\n     * As such not all messages will support the notion of a correlationId i.e. tcp\n     * or file. In this situation the correlation Id is set as a property of the\n     * message where it's up to developer to keep the association with the message.\n     * For example if the message is serialised to xml the correlationId will be\n     * available in the message.\n     *\n     * @param id the Id reference for this relationship\n     */\n    public void setCorrelationId(String id)\n    {\n        super.setCorrelationId(id);\n        setProperty(JmsConstants.JMS_CORRELATION_ID, id);\n    }","commit_id":"a1c5bc8b4d976738a3104c01fc68a1d33e7c4012","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @param message new value for the message\n     */\n    private void setMessage(Object message) throws MessagingException\n    {\n        if (message instanceof Message)\n        {\n            this.jmsMessage = (Message) message;\n        }\n        else\n        {\n            throw new MessageTypeNotSupportedException(message, getClass());\n        }\n\n        try\n        {\n            String value = this.jmsMessage.getJMSCorrelationID();\n            if (value != null)\n            {\n                setProperty(JmsConstants.JMS_CORRELATION_ID, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            int value = this.jmsMessage.getJMSDeliveryMode();\n            setProperty(JmsConstants.JMS_DELIVERY_MODE, new Integer(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            Destination value = this.jmsMessage.getJMSDestination();\n            if (value != null)\n            {\n                setProperty(JmsConstants.JMS_DESTINATION, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            long value = this.jmsMessage.getJMSExpiration();\n            setProperty(JmsConstants.JMS_EXPIRATION, new Long(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            String value = this.jmsMessage.getJMSMessageID();\n            if (value != null)\n            {\n                setProperty(JmsConstants.JMS_MESSAGE_ID, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            int value = this.jmsMessage.getJMSPriority();\n            setProperty(JmsConstants.JMS_PRIORITY, new Integer(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            boolean value = this.jmsMessage.getJMSRedelivered();\n            setProperty(JmsConstants.JMS_REDELIVERED, Boolean.valueOf(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            Destination value = this.jmsMessage.getJMSReplyTo();\n            if (value != null)\n            {\n                setProperty(JmsConstants.JMS_REPLY_TO, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            long value = this.jmsMessage.getJMSTimestamp();\n            setProperty(JmsConstants.JMS_TIMESTAMP, new Long(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            String value = this.jmsMessage.getJMSType();\n            if (value != null)\n            {\n                setProperty(JmsConstants.JMS_TYPE, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            Enumeration e = this.jmsMessage.getPropertyNames();\n            while (e.hasMoreElements())\n            {\n                String key = (String) e.nextElement();\n                try\n                {\n                    Object value = this.jmsMessage.getObjectProperty(key);\n                    if (value != null)\n                    {\n                        setProperty(key, value);\n                    }\n                }\n                catch (JMSException e1)\n                {\n                    // ignored\n                }\n            }\n        }\n        catch (JMSException e1)\n        {\n            // ignored\n        }\n    }","id":100528,"modified_method":"/**\n     * Decomposes the received message into a payload, properties (headers) and possibly attachements too.\n     * Important note: when adding properties you must assign them to the inbound scope.  this can be done in\n     * two ways-\n     * <ol>\n     * <li>use the method {@link #setProperty(String, Object, org.mule.api.transport.PropertyScope)} using the\n     * {@link org.mule.api.transport.PropertyScope.INBOUND}<\/li>\n     * <li>use the {@link #addInboundProperties(java.util.Map)} method to add all inbound properties at once.\n     * <\/ol>\n     * \n     * @param message the message received by the Mule endpoint in it's raw form.\n     */\n    private void setMessage(Object message) throws MessagingException\n    {\n        Map props = new HashMap();\n        if (message instanceof Message)\n        {\n            this.jmsMessage = (Message) message;\n        }\n        else\n        {\n            throw new MessageTypeNotSupportedException(message, getClass());\n        }\n\n        try\n        {\n            String value = this.jmsMessage.getJMSCorrelationID();\n            if (value != null)\n            {\n                props.put(JmsConstants.JMS_CORRELATION_ID, value);\n                //Map to the internal Mule property\n                props.put(MuleProperties.MULE_CORRELATION_ID_PROPERTY, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            int value = this.jmsMessage.getJMSDeliveryMode();\n            props.put(JmsConstants.JMS_DELIVERY_MODE, new Integer(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            Destination value = this.jmsMessage.getJMSDestination();\n            if (value != null)\n            {\n                props.put(JmsConstants.JMS_DESTINATION, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            long value = this.jmsMessage.getJMSExpiration();\n            props.put(JmsConstants.JMS_EXPIRATION, new Long(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            String value = this.jmsMessage.getJMSMessageID();\n            if (value != null)\n            {\n                props.put(JmsConstants.JMS_MESSAGE_ID, value);\n                props.put(MuleProperties.MULE_MESSAGE_ID_PROPERTY, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            int value = this.jmsMessage.getJMSPriority();\n            props.put(JmsConstants.JMS_PRIORITY, new Integer(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            boolean value = this.jmsMessage.getJMSRedelivered();\n            props.put(JmsConstants.JMS_REDELIVERED, Boolean.valueOf(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            Destination value = this.jmsMessage.getJMSReplyTo();\n            if (value != null)\n            {\n                props.put(JmsConstants.JMS_REPLY_TO, value);\n                props.put(MuleProperties.MULE_REPLY_TO_PROPERTY, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            long value = this.jmsMessage.getJMSTimestamp();\n            props.put(JmsConstants.JMS_TIMESTAMP, new Long(value));\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            String value = this.jmsMessage.getJMSType();\n            if (value != null)\n            {\n                props.put(JmsConstants.JMS_TYPE, value);\n            }\n        }\n        catch (JMSException e)\n        {\n            // ignored\n        }\n\n        try\n        {\n            Enumeration e = this.jmsMessage.getPropertyNames();\n            while (e.hasMoreElements())\n            {\n                String key = (String) e.nextElement();\n                try\n                {\n                    Object value = this.jmsMessage.getObjectProperty(key);\n                    if (value != null)\n                    {\n                        props.put(key, value);\n                    }\n                }\n                catch (JMSException e1)\n                {\n                    // ignored\n                }\n            }\n        }\n        catch (JMSException e1)\n        {\n            // ignored\n        }\n        addInboundProperties(props);\n    }","commit_id":"a1c5bc8b4d976738a3104c01fc68a1d33e7c4012","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Sets a replyTo address for this message. This is useful in an asynchronous\n     * environment where the caller doesn't wait for a response and the response\n     * needs to be routed somewhere for further processing. The value of this field\n     * can be any valid endpointUri url.\n     *\n     * @param replyTo the endpointUri url to reply to\n     */\n    public void setReplyTo(Object replyTo)\n    {\n        if (replyTo instanceof Destination)\n        {\n            setProperty(JmsConstants.JMS_REPLY_TO, replyTo);\n        }\n        else\n        {\n            super.setReplyTo(replyTo);\n        }\n    }","id":100529,"modified_method":"/**\n     * Sets a replyTo address for this message. This is useful in an asynchronous\n     * environment where the caller doesn't wait for a response and the response\n     * needs to be routed somewhere for further processing. The value of this field\n     * can be any valid endpointUri url.\n     *\n     * @param replyTo the endpointUri url to reply to\n     */\n    public void setReplyTo(Object replyTo)\n    {\n        if (replyTo instanceof Destination)\n        {\n            setProperty(JmsConstants.JMS_REPLY_TO, replyTo);\n        }\n        super.setReplyTo(replyTo);\n    }","commit_id":"a1c5bc8b4d976738a3104c01fc68a1d33e7c4012","url":"https://github.com/mulesoft/mule"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      GroovyElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n\n    PsiBuilder.Marker varDefMarker = builder.mark();\n\n    //typized var definition\n    //todo: check for upper case type specification \n    if (WRONGWAY.equals(TypeSpec.parse(builder))) {\n      varDefMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    GroovyElementType varDef = VariableDefinitions.parse(builder);\n    if (!WRONGWAY.equals(varDef)) {\n      varDefMarker.done(varDef);\n      return varDef;\n    }\n    varDefMarker.rollbackTo();\n\n    return WRONGWAY;\n  }","id":100530,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      GroovyElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n\n    PsiBuilder.Marker varDefMarker = builder.mark();\n\n    //typized var definition\n    //todo: check for upper case type specification \n    if (WRONGWAY.equals(TypeSpec.parse(builder))) {\n      varDefMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    GroovyElementType varDef = VariableDefinitions.parse(builder, true);\n    if (!WRONGWAY.equals(varDef)) {\n      varDefMarker.done(varDef);\n      return varDef;\n    }\n    varDefMarker.rollbackTo();\n\n    return WRONGWAY;\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //constructor\n    PsiBuilder.Marker constructorMarker = builder.mark();\n    ModifiersOptional.parse(builder);\n\n    GroovyElementType constructorDef = ConstructorDefinition.parse(builder);\n\n    if (WRONGWAY.equals(constructorDef)) {\n      constructorMarker.rollbackTo();\n    } else {\n      constructorMarker.done(constructorDef);\n      return constructorDef;\n    }\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    GroovyElementType declType = Declaration.parse(builder);\n    if (WRONGWAY.equals(declType)) {\n      declMarker.rollbackTo();\n    } else {\n      declMarker.drop();\n      return declType;\n    }\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        builder.error(GroovyBundle.message(\"type.definition.expected\"));\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        return STATIC_COMPOUND_STATEMENT;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return WRONGWAY;\n      }\n    }\n\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      return COMPOUND_STATEMENT;\n    }\n\n    return WRONGWAY;\n  }","id":100531,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //constructor\n    PsiBuilder.Marker constructorMarker = builder.mark();\n    ModifiersOptional.parse(builder);\n\n    GroovyElementType constructorDef = ConstructorDefinition.parse(builder);\n\n    if (WRONGWAY.equals(constructorDef)) {\n      constructorMarker.rollbackTo();\n    } else {\n      constructorMarker.done(constructorDef);\n      return constructorDef;\n    }\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    GroovyElementType declType = Declaration.parse(builder, true);\n    if (WRONGWAY.equals(declType)) {\n      declMarker.rollbackTo();\n    } else {\n      declMarker.drop();\n      return declType;\n    }\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        builder.error(GroovyBundle.message(\"type.definition.expected\"));\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        return STATIC_COMPOUND_STATEMENT;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return WRONGWAY;\n      }\n    }\n\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      return COMPOUND_STATEMENT;\n    }\n\n    return WRONGWAY;\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker declmMarker = builder.mark();\n    //allows error messages\n    IElementType modifiers = Modifiers.parse(builder);\n\n    if (!WRONGWAY.equals(modifiers)) {\n\n      PsiBuilder.Marker checkMarker = builder.mark(); //point to begin of type or variable\n\n      if (WRONGWAY.equals(TypeSpec.parse(builder, false))) { //if type wasn't recognized trying parse VaribleDeclaration\n        checkMarker.rollbackTo();\n\n        GroovyElementType varDecl = VariableDefinitions.parse(builder);\n        if (IDENTIFIER.equals(varDecl)) varDecl = VARIABLE_DEFINITION;\n\n//        if (METHOD_DEFINITION.equals(varDecl)) {\n//          declmMarker.done(CONSTRUCTOR_DEFINITION);\n//          return CONSTRUCTOR_DEFINITION;\n//        }\n\n        if (WRONGWAY.equals(varDecl)) {\n          builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n          declmMarker.rollbackTo();\n          return WRONGWAY;\n        } else {\n          declmMarker.done(varDecl);\n          return varDecl;\n        }\n\n      } else {  //type was recognezed\n        GroovyElementType varDeclarationTop = VariableDefinitions.parse(builder);\n        if (IDENTIFIER.equals(varDeclarationTop)) varDeclarationTop = VARIABLE_DEFINITION;\n\n        if (WRONGWAY.equals(varDeclarationTop)) {\n          checkMarker.rollbackTo();\n\n          GroovyElementType varDecl = VariableDefinitions.parse(builder);\n          if (IDENTIFIER.equals(varDeclarationTop)) varDecl = VARIABLE_DEFINITION;\n\n          if (WRONGWAY.equals(varDecl)) {\n            builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n            declmMarker.rollbackTo();\n            return WRONGWAY;\n          } else {\n            declmMarker.done(varDecl);\n            return varDecl;\n          }\n        } else {\n          checkMarker.drop();\n          declmMarker.done(varDeclarationTop);\n          return varDeclarationTop;\n        }\n      }\n    } else {\n\n      //if definition starts with lower case letter than it can be just call expression\n\n      if (!builder.eof()\n          && !TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType())\n          && builder.getTokenText() != null\n          && Character.isLowerCase(builder.getTokenText().charAt(0))) {\n        GroovyElementType exprType = ExpressionStatement.parse(builder);\n        if (CALL_EXPRESSION.equals(exprType)) {\n          declmMarker.drop();\n          return exprType;\n        } else {\n          declmMarker.drop();\n          return WRONGWAY;\n        }\n      }\n\n      if (!ParserUtils.lookAhead(builder, mIDENT, mLPAREN)) {\n        //type specification starts with upper case letter\n        if (WRONGWAY.equals(TypeSpec.parse(builder, true))) {\n          builder.error(GroovyBundle.message(\"type.specification.expected\"));\n          declmMarker.rollbackTo();\n          return WRONGWAY;\n        }\n      }\n\n      PsiBuilder.Marker varDefMarker = builder.mark();\n      GroovyElementType varDef = VariableDefinitions.parse(builder);\n      varDefMarker.rollbackTo();\n\n\n      PsiBuilder.Marker exprStmtMarker = builder.mark();\n      GroovyElementType exprType = ExpressionStatement.parse(builder); //todo: check it\n      exprStmtMarker.rollbackTo();\n\n      if (IDENTIFIER.equals(varDef) && REFERENCE_EXPRESSION.equals(exprType)) {\n        VariableDefinitions.parse(builder);\n        declmMarker.done(VARIABLE_DEFINITION);\n        return VARIABLE_DEFINITION;\n      }\n\n      //handle \"A a = \"\n      if (IDENTIFIER.equals(varDef) && ASSIGNMENT_EXPRESSION.equals(exprType)) {\n        VariableDefinitions.parse(builder);\n        declmMarker.done(VARIABLE_DEFINITION);\n        return VARIABLE_DEFINITION;\n      }\n\n//      if (TYPE_CAST.equals(exprType)) {\n//        ExpressionStatement.parse(builder);\n//        declmMarker.done(TYPE_CAST);\n//        return TYPE_CAST;\n//      }\n\n      if (!IDENTIFIER.equals(varDef) && !WRONGWAY.equals(varDef)) {\n        varDef = VariableDefinitions.parse(builder);\n        declmMarker.done(varDef);\n        return varDef;\n      }\n\n//      if (!IDENTIFIER.equals(exprType) && !WRONGWAY.equals(exprType)) {\n//        ExpressionStatement.parse(builder);\n//        declmMarker.drop();\n//        return REFERENCE_EXPRESSION;\n//      }\n      declmMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n//      if (VARIABLE_DEFINITION_OR_METHOD_CALL.equals(varDef)) {\n//        methCallMarker.rollbackTo();\n//\n//        GroovyElementType exprType = ExpressionStatement.parse(builder);\n//        if (!WRONGWAY.equals(exprType) && !IDENTIFIER.equals(exprType)) {\n//          declmMarker.done(CALL_EXPRESSION);\n//          return CALL_EXPRESSION;\n//        }\n//\n//        declmMarker.done(VARIABLE_DEFINITION_OR_METHOD_CALL);\n//        return VARIABLE_DEFINITION_OR_METHOD_CALL;\n//\n//      } else {\n//        methCallMarker.drop();\n//\n//        if (WRONGWAY.equals(varDef)) {\n//          builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n//          declmMarker.rollbackTo();\n//          return WRONGWAY;\n//        }\n//\n//        declmMarker.done(varDef);\n//        return varDef;\n//      }\n//    }\n  }","id":100532,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    return parse(builder, false);\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n    if (elem.equals(LABEL)) return new GrLabelImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST_OR_MAP)) return new GrListOrMapImpl(node);\n\n    if (elem.equals(MODIFIERS)) return new GrModifierListImpl(node);\n    if (elem.equals(ANNOTATION)) return new GrAnnotationImpl(node);\n    if (elem.equals(ANNOTATION_ARGUMENTS)) return new GrAnnotationArgumentsImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIR)) return new GrAnnotationMemberValuePairImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIRS)) return new GrAnnotationMemberValuePairsImpl(node);\n\n    //throws\n    if (elem.equals(THROW_CLAUSE)) return new GrThrowClauseImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(LABELED_STATEMENT)) return new GrLabeledStatementImpl(node);\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(FOR_IN_CLAUSE)) return new GrForInClauseImpl(node);\n    if (elem.equals(FOR_TRADITIONAL_CLAUSE)) return new GrTraditionalForClauseImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(TRY_BLOCK_STATEMENT)) return new GrTryCatchStmtImpl(node);\n    if (elem.equals(CATCH_CLAUSE)) return new GrCatchClauseImpl(node);\n    if (elem.equals(FINALLY_CLAUSE)) return new GrFinallyClauseImpl(node);\n    if (elem.equals(SYNCHRONIZED_STATEMENT)) return new GrSynchroStmtImpl(node);\n    if (elem.equals(USE_STATEMENT)) return new GrUseStatementImpl(node);\n    if (elem.equals(SWITCH_STATEMENT)) return new GrSwitchStatementImpl(node);\n    if (elem.equals(CASE_LABEL)) return new GrCaseLabelImpl(node);\n    if (elem.equals(CASE_BLOCK)) return new GrCaseBlockImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n    if (elem.equals(VARIABLE_DEFINITION) || elem.equals(VARIABLE_DEFINITION_ERROR))\n      return new GrVariableDeclarationsImpl(node);\n    if (elem.equals(VARIABLE)) return new GrVariableImpl(node);\n//    if (elem.equals(VARIABLE_DEFINITION_OR_METHOD_CALL)) return new GrVariableDefinitionsOrCallExpressionImpl(node);\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION) || elem.equals(CLASS_DEFINITION_ERROR)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION) || elem.equals(INTERFACE_DEFINITION_ERROR))\n      return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION) || elem.equals(ENUM_DEFINITION_ERROR)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION) || elem.equals(ANNOTATION_DEFINITION_ERROR))\n      return new GrAnnotationTypeDefinitionImpl(node);\n\n    if (elem.equals(REFERENCE_ELEMENT)) return new GrTypeOrPackageReferenceElementImpl(node);\n    if (elem.equals(CLASS_TYPE_ELEMENT)) return new GrClassTypeElementImpl(node);\n\n    //clauses\n    if (elem.equals(IMPLEMENTS_CLAUSE)) return new GrImplementsClauseImpl(node);\n    if (elem.equals(EXTENDS_CLAUSE)) return new GrExtendsClauseImpl(node);\n\n    //bodies\n    if (elem.equals(CLASS_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(OPEN_BLOCK)) return new GrOpenBlockImpl(node);\n    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n\n    //enum\n    if (elem.equals(ENUM_CONSTANTS)) return new GrEnumConstantsImpl(node);\n    if (elem.equals(ENUM_CONSTANT)) return new GrEnumConstantImpl(node);\n    if (elem.equals(ENUM_CONSTANT_BODY)) return new GrEnumConstantBodyImpl(node);\n    if (elem.equals(ENUM_CONSTANT_MEMBER)) return new GrEnumConstantMemberImpl(node);\n\n    //members\n//    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n//    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n//    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n//    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorDefinitionImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //type parameters\n    if (elem.equals(TYPE_ARGUMENT)) return new GrTypeArgumentImpl(node);\n    if (elem.equals(TYPE_ARGUMENTS)) return new GrTypeArgumentsImpl(node);\n\n    //Branch statements\n    if (elem.equals(RETURN_STATEMENT)) return new GrReturnStmtImpl(node);\n    if (elem.equals(THROW_STATEMENT)) return new GrThrowStmtImpl(node);\n    if (elem.equals(ASSERT_STATEMENT)) return new GrAssertStmtImpl(node);\n    if (elem.equals(BREAK_STATEMENT)) return new GrBreakStmtImpl(node);\n    if (elem.equals(CONTINUE_STATEMENT)) return new GrContinueStmtImpl(node);\n\n    //expressions\n    if (elem.equals(CALL_EXPRESSION)) return new GrApplicationExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgumentListImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExpressionImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(COMPOSITE_SHIFT_SIGN)) return new GrOperationSignImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExpressionImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeElementImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REGEX)) return new GrRegexImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExpressionImpl(node);\n    if (elem.equals(THIS_REFERENCE_EXPRESSION)) return new GrThisReferenceExpressionImpl(node);\n    if (elem.equals(SUPER_REFERENCE_EXPRESSION)) return new GrSuperReferenceExpressionImpl(node);\n    if (elem.equals(PARENTHSIZED_EXPRESSION)) return new GrParenthesizedExprImpl(node);\n    if (elem.equals(NEW_EXPRESSION)) return new GrNewExpressionImpl(node);\n    if (elem.equals(ARRAY_DECLARATOR)) return new GrArrayDeclarationImpl(node);\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentListImpl(node);\n    if (elem.equals(ARGUMENT)) return new GrNamedArgumentImpl(node);\n    if (elem.equals(ARGUMENT_LABEL)) return new GrArgumentLabelImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n//    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","id":100533,"modified_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n    if (elem.equals(LABEL)) return new GrLabelImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST_OR_MAP)) return new GrListOrMapImpl(node);\n\n    if (elem.equals(MODIFIERS)) return new GrModifierListImpl(node);\n    if (elem.equals(ANNOTATION)) return new GrAnnotationImpl(node);\n    if (elem.equals(ANNOTATION_ARGUMENTS)) return new GrAnnotationArgumentsImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIR)) return new GrAnnotationMemberValuePairImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIRS)) return new GrAnnotationMemberValuePairsImpl(node);\n\n    //throws\n    if (elem.equals(THROW_CLAUSE)) return new GrThrowClauseImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(LABELED_STATEMENT)) return new GrLabeledStatementImpl(node);\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(FOR_IN_CLAUSE)) return new GrForInClauseImpl(node);\n    if (elem.equals(FOR_TRADITIONAL_CLAUSE)) return new GrTraditionalForClauseImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(TRY_BLOCK_STATEMENT)) return new GrTryCatchStmtImpl(node);\n    if (elem.equals(CATCH_CLAUSE)) return new GrCatchClauseImpl(node);\n    if (elem.equals(FINALLY_CLAUSE)) return new GrFinallyClauseImpl(node);\n    if (elem.equals(SYNCHRONIZED_STATEMENT)) return new GrSynchroStmtImpl(node);\n    if (elem.equals(USE_STATEMENT)) return new GrUseStatementImpl(node);\n    if (elem.equals(SWITCH_STATEMENT)) return new GrSwitchStatementImpl(node);\n    if (elem.equals(CASE_LABEL)) return new GrCaseLabelImpl(node);\n    if (elem.equals(CASE_BLOCK)) return new GrCaseBlockImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n    if (elem.equals(VARIABLE_DEFINITION) || elem.equals(VARIABLE_DEFINITION_ERROR))\n      return new GrVariableDeclarationsImpl(node);\n    if (elem.equals(VARIABLE)) return new GrVariableImpl(node);\n\n    if (elem.equals(FIELD)) return new GrFieldImpl(node);\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION) || elem.equals(CLASS_DEFINITION_ERROR)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION) || elem.equals(INTERFACE_DEFINITION_ERROR))\n      return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION) || elem.equals(ENUM_DEFINITION_ERROR)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION) || elem.equals(ANNOTATION_DEFINITION_ERROR))\n      return new GrAnnotationTypeDefinitionImpl(node);\n\n    if (elem.equals(REFERENCE_ELEMENT)) return new GrTypeOrPackageReferenceElementImpl(node);\n    if (elem.equals(CLASS_TYPE_ELEMENT)) return new GrClassTypeElementImpl(node);\n\n    //clauses\n    if (elem.equals(IMPLEMENTS_CLAUSE)) return new GrImplementsClauseImpl(node);\n    if (elem.equals(EXTENDS_CLAUSE)) return new GrExtendsClauseImpl(node);\n\n    //bodies\n    if (elem.equals(CLASS_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(OPEN_BLOCK)) return new GrOpenBlockImpl(node);\n    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n\n    //enum\n    if (elem.equals(ENUM_CONSTANTS)) return new GrEnumConstantsImpl(node);\n    if (elem.equals(ENUM_CONSTANT)) return new GrEnumConstantImpl(node);\n    if (elem.equals(ENUM_CONSTANT_BODY)) return new GrEnumConstantBodyImpl(node);\n    if (elem.equals(ENUM_CONSTANT_MEMBER)) return new GrEnumConstantMemberImpl(node);\n\n    //members\n//    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n//    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n//    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n//    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorDefinitionImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //type parameters\n    if (elem.equals(TYPE_ARGUMENT)) return new GrTypeArgumentImpl(node);\n    if (elem.equals(TYPE_ARGUMENTS)) return new GrTypeArgumentsImpl(node);\n\n    //Branch statements\n    if (elem.equals(RETURN_STATEMENT)) return new GrReturnStmtImpl(node);\n    if (elem.equals(THROW_STATEMENT)) return new GrThrowStmtImpl(node);\n    if (elem.equals(ASSERT_STATEMENT)) return new GrAssertStmtImpl(node);\n    if (elem.equals(BREAK_STATEMENT)) return new GrBreakStmtImpl(node);\n    if (elem.equals(CONTINUE_STATEMENT)) return new GrContinueStmtImpl(node);\n\n    //expressions\n    if (elem.equals(CALL_EXPRESSION)) return new GrApplicationExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgumentListImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExpressionImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(COMPOSITE_SHIFT_SIGN)) return new GrOperationSignImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExpressionImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeElementImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REGEX)) return new GrRegexImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExpressionImpl(node);\n    if (elem.equals(THIS_REFERENCE_EXPRESSION)) return new GrThisReferenceExpressionImpl(node);\n    if (elem.equals(SUPER_REFERENCE_EXPRESSION)) return new GrSuperReferenceExpressionImpl(node);\n    if (elem.equals(PARENTHSIZED_EXPRESSION)) return new GrParenthesizedExprImpl(node);\n    if (elem.equals(NEW_EXPRESSION)) return new GrNewExpressionImpl(node);\n    if (elem.equals(ARRAY_DECLARATOR)) return new GrArrayDeclarationImpl(node);\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentListImpl(node);\n    if (elem.equals(ARGUMENT)) return new GrNamedArgumentImpl(node);\n    if (elem.equals(ARGUMENT_LABEL)) return new GrArgumentLabelImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n//    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //constructor\n    PsiBuilder.Marker constructorMarker = builder.mark();\n    ModifiersOptional.parse(builder);\n\n    GroovyElementType constructorDef = ConstructorDefinition.parse(builder);\n\n    if (WRONGWAY.equals(constructorDef)) {\n      constructorMarker.rollbackTo();\n    } else {\n      constructorMarker.done(constructorDef);\n      builder.error(GroovyBundle.message(\"interface.must.has.no.constructor\"));\n      return constructorDef;\n    }\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    GroovyElementType declType = Declaration.parse(builder);\n    if (WRONGWAY.equals(declType)) {\n      declMarker.rollbackTo();\n    } else {\n      declMarker.drop();\n      return declType;\n    }\n\n    //declaration\n//    PsiBuilder.Marker declMarker = builder.mark();\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n//    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        builder.error(GroovyBundle.message(\"interface.must.has.no.static.compound.statemenet\"));\n        return STATIC_COMPOUND_STATEMENT;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return WRONGWAY;\n      }\n    }\n\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      builder.error(GroovyBundle.message(\"interface.must.has.no.compound.statemenet\"));\n      return COMPOUND_STATEMENT;\n    }\n\n    return WRONGWAY;\n  }","id":100534,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //constructor\n    PsiBuilder.Marker constructorMarker = builder.mark();\n    ModifiersOptional.parse(builder);\n\n    GroovyElementType constructorDef = ConstructorDefinition.parse(builder);\n\n    if (WRONGWAY.equals(constructorDef)) {\n      constructorMarker.rollbackTo();\n    } else {\n      constructorMarker.done(constructorDef);\n      builder.error(GroovyBundle.message(\"interface.must.has.no.constructor\"));\n      return constructorDef;\n    }\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    GroovyElementType declType = Declaration.parse(builder, true);\n    if (WRONGWAY.equals(declType)) {\n      declMarker.rollbackTo();\n    } else {\n      declMarker.drop();\n      return declType;\n    }\n\n    //declaration\n//    PsiBuilder.Marker declMarker = builder.mark();\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n//    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        builder.error(GroovyBundle.message(\"interface.must.has.no.static.compound.statemenet\"));\n        return STATIC_COMPOUND_STATEMENT;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return WRONGWAY;\n      }\n    }\n\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      builder.error(GroovyBundle.message(\"interface.must.has.no.compound.statemenet\"));\n      return COMPOUND_STATEMENT;\n    }\n\n    return WRONGWAY;\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parseBlockBody(PsiBuilder builder) {\n    if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n      Separators.parse(builder);\n    }\n\n    GroovyElementType result = Statement.parse(builder);\n    while (!result.equals(WRONGWAY) &&\n            (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType()))) {\n      Separators.parse(builder);\n      result = Statement.parse(builder);\n      cleanAfterError(builder);\n    }\n    Separators.parse(builder);\n    return BLOCK_BODY;\n  }","id":100535,"modified_method":"public static GroovyElementType parseBlockBody(PsiBuilder builder) {\n    if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n      Separators.parse(builder);\n    }\n\n    GroovyElementType result = Statement.parse(builder, true);\n    while (!result.equals(WRONGWAY) &&\n            (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType()))) {\n      Separators.parse(builder);\n      result = Statement.parse(builder, true);\n      cleanAfterError(builder);\n    }\n    Separators.parse(builder);\n    return BLOCK_BODY;\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder, boolean isEnumConstantMember, boolean isAnnotationMember) {\n    if (!(ParserUtils.lookAhead(builder, mIDENT) || ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL))) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL);\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (!eaten) return WRONGWAY;\n\n    if (ParserUtils.getToken(builder, mLPAREN)) {\n      GroovyElementType paramDeclList = ParameterDeclarationList.parse(builder, mRPAREN);\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      if (isAnnotationMember && !NONE.equals(paramDeclList)) {\n        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n      }\n\n      boolean isEmptyParamDeclList = NONE.equals(paramDeclList);\n\n      ParserUtils.getToken(builder, mNLS);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        ThrowClause.parse(builder);\n        ParserUtils.waitNextRCurly(builder);\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n\n      //use for annotation definition\n//      if (!isStringName && isEmptyParamDeclList && ParserUtils.getToken(builder, kDEFAULT)) {\n//        ParserUtils.getToken(builder, mNLS);\n//\n//        if (parseAnnotationMemberValueInitializer(builder)) {\n//          varMarker.done(DEFAULT_ANNOTATION_MEMBER);\n//          return DEFAULT_ANNOTATION_MEMBER;\n//        }\n//      }\n\n      ThrowClause.parse(builder);\n\n      //if there is no OpenOrClosableBlock, nls haven'to be eaten\n      PsiBuilder.Marker nlsMarker = builder.mark();\n      if (mNLS.equals(NlsWarn.parse(builder)) && !ParserUtils.lookAhead(builder, mLPAREN)) {\n        nlsMarker.rollbackTo();\n      } else {\n        nlsMarker.drop();\n      }\n\n//      ParserUtils.getToken(builder, mNLS);\n\n      OpenOrClosableBlock.parseOpenBlock(builder);\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      PsiBuilder.Marker varAssMarker = builder.mark();\n      if (ParserUtils.getToken(builder, mIDENT)) {\n\n        if (parseAssignment(builder)) { // a = b, c = d\n          varAssMarker.done(VARIABLE);\n          while (ParserUtils.getToken(builder, mCOMMA)) {\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder))) return VARIABLE_DEFINITION_ERROR; //parse b = d\n          }\n          return VARIABLE_DEFINITION;\n        } else {\n          varAssMarker.done(VARIABLE);\n//          varAssMarker.drop();\n          boolean isManyDef = false;\n          while (ParserUtils.getToken(builder, mCOMMA)) {// a, b = d, c = d\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder))) return VARIABLE_DEFINITION_ERROR;\n            isManyDef = true;\n          }\n\n          return VARIABLE_DEFINITION;\n\n//          return VARIABLE_DEFINITION_OR_METHOD_CALL;\n        }\n      } else {\n        varAssMarker.drop();\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        return VARIABLE_DEFINITION_ERROR;\n      }\n\n    }\n  }","id":100536,"modified_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder, boolean isInClass, boolean isEnumConstantMember, boolean isAnnotationMember) {\n    if (!(ParserUtils.lookAhead(builder, mIDENT) || ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL))) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL);\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (!eaten) return WRONGWAY;\n\n    if (ParserUtils.getToken(builder, mLPAREN)) {\n      GroovyElementType paramDeclList = ParameterDeclarationList.parse(builder, mRPAREN);\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      if (isAnnotationMember && !NONE.equals(paramDeclList)) {\n        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n      }\n\n      boolean isEmptyParamDeclList = NONE.equals(paramDeclList);\n\n      ParserUtils.getToken(builder, mNLS);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        ThrowClause.parse(builder);\n        ParserUtils.waitNextRCurly(builder);\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n\n      //use for annotation definition\n//      if (!isStringName && isEmptyParamDeclList && ParserUtils.getToken(builder, kDEFAULT)) {\n//        ParserUtils.getToken(builder, mNLS);\n//\n//        if (parseAnnotationMemberValueInitializer(builder)) {\n//          varMarker.done(DEFAULT_ANNOTATION_MEMBER);\n//          return DEFAULT_ANNOTATION_MEMBER;\n//        }\n//      }\n\n      ThrowClause.parse(builder);\n\n      //if there is no OpenOrClosableBlock, nls haven'to be eaten\n      PsiBuilder.Marker nlsMarker = builder.mark();\n      if (mNLS.equals(NlsWarn.parse(builder)) && !ParserUtils.lookAhead(builder, mLPAREN)) {\n        nlsMarker.rollbackTo();\n      } else {\n        nlsMarker.drop();\n      }\n\n//      ParserUtils.getToken(builder, mNLS);\n\n      OpenOrClosableBlock.parseOpenBlock(builder);\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      PsiBuilder.Marker varAssMarker = builder.mark();\n      if (ParserUtils.getToken(builder, mIDENT)) {\n\n        if (parseAssignment(builder)) { // a = b, c = d\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n\n          while (ParserUtils.getToken(builder, mCOMMA)) {\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass)))\n              return VARIABLE_DEFINITION_ERROR; //parse b = d\n          }\n          return VARIABLE_DEFINITION;\n        } else {\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n//          varAssMarker.drop();\n          boolean isManyDef = false;\n          while (ParserUtils.getToken(builder, mCOMMA)) {// a, b = d, c = d\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass))) return VARIABLE_DEFINITION_ERROR;\n            isManyDef = true;\n          }\n\n          return VARIABLE_DEFINITION;\n\n//          return VARIABLE_DEFINITION_OR_METHOD_CALL;\n        }\n      } else {\n        varAssMarker.drop();\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        return VARIABLE_DEFINITION_ERROR;\n      }\n\n    }\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType parseVariableDeclarator(PsiBuilder builder) {\n    PsiBuilder.Marker varAssMarker = builder.mark();\n    if (ParserUtils.getToken(builder, mIDENT)) {\n      parseAssignment(builder);\n      varAssMarker.done(VARIABLE);\n      return VARIABLE;\n    } else {\n      varAssMarker.drop();\n      return WRONGWAY;\n    }\n  }","id":100537,"modified_method":"private static GroovyElementType parseVariableDeclarator(PsiBuilder builder, boolean isInClass) {\n    PsiBuilder.Marker varAssMarker = builder.mark();\n    if (ParserUtils.getToken(builder, mIDENT)) {\n      parseAssignment(builder);\n      if (isInClass) {\n        varAssMarker.done(VARIABLE);\n        return VARIABLE;\n      } else {\n        varAssMarker.done(FIELD);\n        return FIELD;\n      }\n    } else {\n      varAssMarker.drop();\n      return WRONGWAY;\n    }\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    return parseDefinitions(builder, false, false);\n  }","id":100538,"modified_method":"public static GroovyElementType parse(PsiBuilder builder, boolean isInClass) {\n    return parseDefinitions(builder, isInClass, false, false);\n  }","commit_id":"25f4c3aa7575312837b3169b009caec8daeff717","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiClass findPsiClass(final PsiManager psiManager, String externalName, PsiClass psiClass, boolean jvmCompatible) {\n    final int topIdx = externalName.indexOf('$');\n    if (topIdx > -1) {\n      if (psiClass == null) {\n        psiClass = JavaPsiFacade.getInstance(psiManager.getProject())\n          .findClass(externalName.substring(0, topIdx), GlobalSearchScope.allScope(psiManager.getProject()));\n      }\n      if (psiClass == null) return null;\n      externalName = externalName.substring(topIdx + 1);\n      return findSubclass(psiManager, externalName, psiClass, jvmCompatible);\n    } else {\n      return JavaPsiFacade.getInstance(psiManager.getProject()).findClass(externalName, GlobalSearchScope.allScope(psiManager.getProject()));\n    }\n  }","id":100539,"modified_method":"@Nullable\n  public static PsiClass findPsiClass(final PsiManager psiManager,\n                                      String externalName,\n                                      PsiClass psiClass,\n                                      boolean jvmCompatible) {\n    return findPsiClass(psiManager, externalName, psiClass, jvmCompatible, GlobalSearchScope.allScope(psiManager.getProject()));\n  }","commit_id":"f2283ab50dec04328717d97f577c80033f8fb9ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void fillTestObjects(final Map<PsiClass, Collection<PsiMethod>> classes)\n    throws CantRunException {\n    final TestData data = myConfig.getPersistantData();\n    final PsiManager psiManager = PsiManager.getInstance(myProject);\n    if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {\n      final String packageName = data.getPackageName();\n      PsiPackage psiPackage = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiPackage>() {\n          @Nullable\n          public PsiPackage compute() {\n            return JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(packageName);\n          }\n        }\n      );\n      if (psiPackage == null) {\n        throw CantRunException.packageNotFound(packageName);\n      }\n      else {\n        TestSearchScope scope = myConfig.getPersistantData().getScope();\n        //TODO we should narrow this down by module really, if that's what's specified\n        TestClassFilter projectFilter =\n          new TestClassFilter(scope.getSourceScope(myConfig).getGlobalSearchScope(), myProject, true, true);\n        TestClassFilter filter = projectFilter.intersectionWith(PackageScope.packageScope(psiPackage, true));\n        classes.putAll(calculateDependencies(null, TestNGUtil.getAllTestClasses(filter, false)));\n        if (classes.size() == 0) {\n          throw new CantRunException(\"No tests found in the package \\\"\" + packageName + '\\\"');\n        }\n      }\n    }\n    else if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {\n      //it's a class\n      final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiClass>() {\n          @Nullable\n          public PsiClass compute() {\n            return JavaPsiFacade.getInstance(psiManager.getProject()).findClass(data.getMainClassName(), getSearchScope());\n          }\n        }\n      );\n      if (psiClass == null) {\n        throw new CantRunException(\"No tests found in the class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      if (null == ApplicationManager.getApplication().runReadAction(new Computable<String>() {\n        @Nullable\n        public String compute() {\n          return psiClass.getQualifiedName();\n        }\n      })) {\n        throw new CantRunException(\"Cannot test anonymous or local class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      classes.putAll(calculateDependencies(null, psiClass));\n    }\n    else if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {\n      //it's a method\n      final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiClass>() {\n          @Nullable\n          public PsiClass compute() {\n            return JavaPsiFacade.getInstance(psiManager.getProject()).findClass(data.getMainClassName(), getSearchScope());\n          }\n        }\n      );\n      if (psiClass == null) {\n        throw new CantRunException(\"No tests found in the class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      if (null == ApplicationManager.getApplication().runReadAction(\n        new Computable<String>() {\n          @Nullable\n          public String compute() {\n            return psiClass.getQualifiedName();\n          }\n        }\n      )) {\n        throw new CantRunException(\"Cannot test anonymous or local class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      final PsiMethod[] methods = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiMethod[]>() {\n          public PsiMethod[] compute() {\n            return psiClass.findMethodsByName(data.getMethodName(), true);\n          }\n        }\n      );\n      classes.putAll(calculateDependencies(methods, psiClass));\n      Collection<PsiMethod> psiMethods = classes.get(psiClass);\n      if (psiMethods == null) {\n        psiMethods = new LinkedHashSet<PsiMethod>();\n        classes.put(psiClass, psiMethods);\n      }\n      ContainerUtil.addAll(psiMethods, methods);\n    }\n    else if (data.TEST_OBJECT.equals(TestType.GROUP.getType())) {\n      //for a group, we include all classes\n      PsiClass[] testClasses = TestNGUtil\n        .getAllTestClasses(new TestClassFilter(data.getScope().getSourceScope(myConfig).getGlobalSearchScope(), myProject, true, true), false);\n      if (testClasses != null) {\n        for (PsiClass c : testClasses) {\n          classes.put(c, new HashSet<PsiMethod>());\n        }\n      }\n    }\n  }","id":100540,"modified_method":"protected void fillTestObjects(final Map<PsiClass, Collection<PsiMethod>> classes)\n    throws CantRunException {\n    final TestData data = myConfig.getPersistantData();\n    final PsiManager psiManager = PsiManager.getInstance(myProject);\n    if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {\n      final String packageName = data.getPackageName();\n      PsiPackage psiPackage = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiPackage>() {\n          @Nullable\n          public PsiPackage compute() {\n            return JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(packageName);\n          }\n        }\n      );\n      if (psiPackage == null) {\n        throw CantRunException.packageNotFound(packageName);\n      }\n      else {\n        TestSearchScope scope = myConfig.getPersistantData().getScope();\n        //TODO we should narrow this down by module really, if that's what's specified\n        TestClassFilter projectFilter =\n          new TestClassFilter(scope.getSourceScope(myConfig).getGlobalSearchScope(), myProject, true, true);\n        TestClassFilter filter = projectFilter.intersectionWith(PackageScope.packageScope(psiPackage, true));\n        classes.putAll(calculateDependencies(null, TestNGUtil.getAllTestClasses(filter, false)));\n        if (classes.size() == 0) {\n          throw new CantRunException(\"No tests found in the package \\\"\" + packageName + '\\\"');\n        }\n      }\n    }\n    else if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {\n      //it's a class\n      final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiClass>() {\n          @Nullable\n          public PsiClass compute() {\n            return ClassUtil.findPsiClass(psiManager, data.getMainClassName().replace('/', '.'), null, true, getSearchScope());\n          }\n        }\n      );\n      if (psiClass == null) {\n        throw new CantRunException(\"No tests found in the class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      if (null == ApplicationManager.getApplication().runReadAction(new Computable<String>() {\n        @Nullable\n        public String compute() {\n          return psiClass.getQualifiedName();\n        }\n      })) {\n        throw new CantRunException(\"Cannot test anonymous or local class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      classes.putAll(calculateDependencies(null, psiClass));\n    }\n    else if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {\n      //it's a method\n      final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiClass>() {\n          @Nullable\n          public PsiClass compute() {\n            return ClassUtil.findPsiClass(psiManager, data.getMainClassName().replace('/', '.'), null, true, getSearchScope());\n          }\n        }\n      );\n      if (psiClass == null) {\n        throw new CantRunException(\"No tests found in the class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      if (null == ApplicationManager.getApplication().runReadAction(\n        new Computable<String>() {\n          @Nullable\n          public String compute() {\n            return psiClass.getQualifiedName();\n          }\n        }\n      )) {\n        throw new CantRunException(\"Cannot test anonymous or local class \\\"\" + data.getMainClassName() + '\\\"');\n      }\n      final PsiMethod[] methods = ApplicationManager.getApplication().runReadAction(\n        new Computable<PsiMethod[]>() {\n          public PsiMethod[] compute() {\n            return psiClass.findMethodsByName(data.getMethodName(), true);\n          }\n        }\n      );\n      classes.putAll(calculateDependencies(methods, psiClass));\n      Collection<PsiMethod> psiMethods = classes.get(psiClass);\n      if (psiMethods == null) {\n        psiMethods = new LinkedHashSet<PsiMethod>();\n        classes.put(psiClass, psiMethods);\n      }\n      ContainerUtil.addAll(psiMethods, methods);\n    }\n    else if (data.TEST_OBJECT.equals(TestType.GROUP.getType())) {\n      //for a group, we include all classes\n      PsiClass[] testClasses = TestNGUtil\n        .getAllTestClasses(new TestClassFilter(data.getScope().getSourceScope(myConfig).getGlobalSearchScope(), myProject, true, true), false);\n      if (testClasses != null) {\n        for (PsiClass c : testClasses) {\n          classes.put(c, new HashSet<PsiMethod>());\n        }\n      }\n    }\n  }","commit_id":"f2283ab50dec04328717d97f577c80033f8fb9ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void composeTestSuiteFromClasses() {\n    Map<String, Collection<String>> map = new HashMap<String, Collection<String>>();\n    for (final Map.Entry<PsiClass, Collection<PsiMethod>> entry : myClasses.entrySet()) {\n      Collection<String> methods = new HashSet<String>(entry.getValue().size());\n      for (PsiMethod method : entry.getValue()) {\n        methods.add(method.getName());\n      }\n      map.put(ApplicationManager.getApplication().runReadAction(\n        new Computable<String>() {\n          @Nullable\n          public String compute() {\n            return entry.getKey().getQualifiedName();\n          }\n        }\n      ), methods);\n    }\n    // We have groups we wish to limit to.\n    Collection<String> groupNames = null;\n    if (TestType.GROUP.getType().equals(myData.TEST_OBJECT)) {\n      String groupName = myData.getGroupName();\n      if (groupName != null && groupName.length() > 0) {\n        groupNames = new HashSet<String>(1);\n        groupNames.add(groupName);\n      }\n    }\n\n    Map<String, String> testParams = buildTestParameters();\n\n    int logLevel = 1;\n    try {\n      final Properties properties = new Properties();\n      properties.load(new ByteArrayInputStream(myConfig.getPersistantData().VM_PARAMETERS.getBytes()));\n      final String verbose = properties.getProperty(\"-Dtestng.verbose\");\n      if (verbose != null) {\n        logLevel = Integer.parseInt(verbose);\n      }\n    }\n    catch (Exception e) { //not a number\n      logLevel = 1;\n    }\n\n    LaunchSuite suite =\n      SuiteGenerator.createSuite(myProject.getName(), null, map, groupNames, testParams, AnnotationTypeEnum.JDK.getName(), logLevel);\n\n    File xmlFile = suite.save(new File(PathManager.getSystemPath()));\n    String path = xmlFile.getAbsolutePath() + \"\\n\";\n    try {\n      FileUtil.writeToFile(myTempFile, path.getBytes(), true);\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n  }","id":100541,"modified_method":"private void composeTestSuiteFromClasses() {\n    Map<String, Collection<String>> map = new HashMap<String, Collection<String>>();\n    for (final Map.Entry<PsiClass, Collection<PsiMethod>> entry : myClasses.entrySet()) {\n      Collection<String> methods = new HashSet<String>(entry.getValue().size());\n      for (PsiMethod method : entry.getValue()) {\n        methods.add(method.getName());\n      }\n      map.put(ApplicationManager.getApplication().runReadAction(\n        new Computable<String>() {\n          @Nullable\n          public String compute() {\n            return ClassUtil.getJVMClassName(entry.getKey());\n          }\n        }\n      ), methods);\n    }\n    // We have groups we wish to limit to.\n    Collection<String> groupNames = null;\n    if (TestType.GROUP.getType().equals(myData.TEST_OBJECT)) {\n      String groupName = myData.getGroupName();\n      if (groupName != null && groupName.length() > 0) {\n        groupNames = new HashSet<String>(1);\n        groupNames.add(groupName);\n      }\n    }\n\n    Map<String, String> testParams = buildTestParameters();\n\n    int logLevel = 1;\n    try {\n      final Properties properties = new Properties();\n      properties.load(new ByteArrayInputStream(myConfig.getPersistantData().VM_PARAMETERS.getBytes()));\n      final String verbose = properties.getProperty(\"-Dtestng.verbose\");\n      if (verbose != null) {\n        logLevel = Integer.parseInt(verbose);\n      }\n    }\n    catch (Exception e) { //not a number\n      logLevel = 1;\n    }\n\n    LaunchSuite suite =\n      SuiteGenerator.createSuite(myProject.getName(), null, map, groupNames, testParams, AnnotationTypeEnum.JDK.getName(), logLevel);\n\n    File xmlFile = suite.save(new File(PathManager.getSystemPath()));\n    String path = xmlFile.getAbsolutePath() + \"\\n\";\n    try {\n      FileUtil.writeToFile(myTempFile, path.getBytes(), true);\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"f2283ab50dec04328717d97f577c80033f8fb9ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public GlobalSearchScope getUseScope(@NotNull PsiElement element) {\n    VirtualFile vFile;\n    if (element instanceof PsiDirectory) {\n      vFile = ((PsiDirectory)element).getVirtualFile();\n    }\n    else {\n      final PsiFile containingFile = element.getContainingFile();\n      if (containingFile == null) return GlobalSearchScope.allScope(myManager.getProject());\n      final VirtualFile virtualFile = containingFile.getVirtualFile();\n      if (virtualFile == null) return GlobalSearchScope.allScope(myManager.getProject());\n      vFile = virtualFile.getParent();\n    }\n\n    if (vFile == null) return GlobalSearchScope.allScope(myManager.getProject());\n    ProjectFileIndex projectFileIndex = myProjectRootManager.getFileIndex();\n    Module module = projectFileIndex.getModuleForFile(vFile);\n    if (module != null) {\n      boolean isTest = projectFileIndex.isInTestSourceContent(vFile);\n      return isTest\n             ? GlobalSearchScope.moduleTestsWithDependentsScope(module)\n             : GlobalSearchScope.moduleWithDependentsScope(module);\n    }\n    else {\n      return GlobalSearchScope.allScope(myManager.getProject());\n    }\n  }","id":100542,"modified_method":"@NotNull\n  public GlobalSearchScope getUseScope(@NotNull PsiElement element) {\n    VirtualFile vFile;\n    final GlobalSearchScope allScope = GlobalSearchScope.allScope(myManager.getProject());\n    if (element instanceof PsiDirectory) {\n      vFile = ((PsiDirectory)element).getVirtualFile();\n    }\n    else {\n      final PsiFile containingFile = element.getContainingFile();\n      if (containingFile == null) return allScope;\n      final VirtualFile virtualFile = containingFile.getVirtualFile();\n      if (virtualFile == null) return allScope;\n      vFile = virtualFile.getParent();\n    }\n\n    if (vFile == null) return allScope;\n    ProjectFileIndex projectFileIndex = myProjectRootManager.getFileIndex();\n    Module module = projectFileIndex.getModuleForFile(vFile);\n    if (module != null) {\n      boolean isTest = projectFileIndex.isInTestSourceContent(vFile);\n      return isTest\n             ? GlobalSearchScope.moduleTestsWithDependentsScope(module)\n             : GlobalSearchScope.moduleWithDependentsScope(module);\n    }\n    else {\n      final PsiFile f = element.getContainingFile();\n      return allScope.contains(f.getVirtualFile()) ? allScope : GlobalSearchScope.fileScope(f).uniteWith(allScope);\n    }\n  }","commit_id":"6a5e73facbd38a14c8831b330649a72290520c52","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testAffinityDeploy() throws Exception {\n        Grid g = randomGrid();\n\n        final Integer affKey = 1;\n\n        // Store a cache key.\n        g.cache(CACHE_NAME).put(affKey, affKey.toString());\n\n        String name = \"serviceAffinity\";\n\n        GridServices svcs = g.services().enableAsync();\n\n        g.services().deployKeyAffinitySingleton(name, new AffinityService(affKey),\n            CACHE_NAME, affKey);\n\n        GridFuture<?> fut = svcs.future();\n\n        info(\"Deployed service: \" + name);\n\n        fut.get();\n\n        info(\"Finished waiting for service future: \" + name);\n\n        checkCount(name, g.services().deployedServices(), 1);\n    }","id":100543,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testAffinityDeploy() throws Exception {\n        Grid g = randomGrid();\n\n        final Integer affKey = 1;\n\n        // Store a cache key.\n        g.cache(CACHE_NAME).put(affKey, affKey.toString());\n\n        String name = \"serviceAffinity\";\n\n        GridServices svcs = g.services().enableAsync();\n\n        svcs.deployKeyAffinitySingleton(name, new AffinityService(affKey),\n                CACHE_NAME, affKey);\n\n        GridFuture<?> fut = svcs.future();\n\n        info(\"Deployed service: \" + name);\n\n        fut.get();\n\n        info(\"Finished waiting for service future: \" + name);\n\n        checkCount(name, g.services().deployedServices(), 1);\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testDifferentConfiguration() throws Exception {\n        String name = \"dupService\";\n\n        GridFuture<?> fut1 = randomGrid().services().deployClusterSingleton(name, new DummyService());\n        GridFuture<?> fut2 = randomGrid().services().deployNodeSingleton(name, new DummyService());\n\n        info(\"Deployed service: \" + name);\n\n        fut1.get();\n\n        info(\"Finished waiting for service future: \" + name);\n\n        try {\n            fut2.get();\n\n            fail(\"Failed to receive mismatching configuration exception.\");\n        }\n        catch (GridException e) {\n            info(\"Received mismatching configuration exception: \" + e.getMessage());\n        }\n    }","id":100544,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testDifferentConfiguration() throws Exception {\n        String name = \"dupService\";\n\n        GridServices svcs1 = randomGrid().services().enableAsync();\n        GridServices svcs2 = randomGrid().services().enableAsync();\n\n        svcs1.deployClusterSingleton(name, new DummyService());\n\n        GridFuture<?> fut1 = svcs1.future();\n\n        svcs2.deployNodeSingleton(name, new DummyService());\n\n        GridFuture<?> fut2 = svcs2.future();\n\n        info(\"Deployed service: \" + name);\n\n        fut1.get();\n\n        info(\"Finished waiting for service future: \" + name);\n\n        try {\n            fut2.get();\n\n            fail(\"Failed to receive mismatching configuration exception.\");\n        }\n        catch (GridException e) {\n            info(\"Received mismatching configuration exception: \" + e.getMessage());\n        }\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testMultiNodeProxy() throws Exception {\n        Grid grid = randomGrid();\n\n        int extras = 3;\n\n        startExtraNodes(extras);\n\n        String name = \"testMultiNodeProxy\";\n\n        grid.services().deployNodeSingleton(name, new CounterServiceImpl()).get();\n\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        for (int i = 0; i < extras; i++) {\n            svc.increment();\n\n            stopGrid(nodeCount() + i);\n        }\n\n        assertEquals(extras, svc.get());\n    }","id":100545,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testMultiNodeProxy() throws Exception {\n        Grid grid = randomGrid();\n\n        int extras = 3;\n\n        startExtraNodes(extras);\n\n        String name = \"testMultiNodeProxy\";\n\n        grid.services().deployNodeSingleton(name, new CounterServiceImpl());\n\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        for (int i = 0; i < extras; i++) {\n            svc.increment();\n\n            stopGrid(nodeCount() + i);\n        }\n\n        assertEquals(extras, svc.get());\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClusterSingletonProxy() throws Exception {\n        String name = \"testClusterSingletonProxy\";\n\n        Grid grid = randomGrid();\n\n        grid.services().deployClusterSingleton(name, new CounterServiceImpl()).get();\n\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, true);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n    }","id":100546,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClusterSingletonProxy() throws Exception {\n        String name = \"testClusterSingletonProxy\";\n\n        Grid grid = randomGrid();\n\n        grid.services().deployClusterSingleton(name, new CounterServiceImpl());\n\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, true);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testProxyInvocationFromSeveralNodes() throws Exception {\n        final String name = \"testProxyInvocationFromSeveralNodes\";\n\n        final Grid grid = randomGrid();\n\n        grid.forLocal().services().deployNodeSingleton(name, new CacheServiceImpl<String, Integer>()).get();\n\n        int counter = 1;\n        grid.forRemotes().services().serviceProxy(name, CacheService.class, false).put(counter++, \"executed\");\n\n        assertEquals(nodeCount() - 1, grid.services().serviceProxy(name, CacheService.class, false).size());\n    }","id":100547,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testProxyInvocationFromSeveralNodes() throws Exception {\n        final String name = \"testProxyInvocationFromSeveralNodes\";\n\n        final Grid grid = randomGrid();\n\n        grid.services(grid.cluster().forLocal()).deployNodeSingleton(name, new CacheServiceImpl<String, Integer>());\n\n        int counter = 1;\n\n        grid.services(grid.cluster().forRemotes()).serviceProxy(name, CacheService.class, false).\n                put(counter++, \"executed\");\n\n        assertEquals(nodeCount() - 1, grid.services().serviceProxy(name, CacheService.class, false).size());\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonRemoteNotStickyProxy() throws Exception {\n        String name = \"testNodeSingletonRemoteNotStickyProxy\";\n\n        Grid grid = randomGrid();\n\n        // Deploy only on remote nodes.\n        grid.forRemotes().services().deployNodeSingleton(name, new CounterServiceImpl()).get();\n\n        info(\"Deployed service: \" + name);\n\n        // Get local proxy.\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n\n        int total = 0;\n\n        for (GridNode n : grid.forRemotes().nodes()) {\n            CounterService rmtSvc = grid.forNode(n).services().serviceProxy(name, CounterService.class, false);\n\n            int cnt = rmtSvc.localIncrements();\n\n            // Since deployment is not stick, count on each node must be less than 10.\n            assertTrue(\"Invalid local increments: \" + cnt, cnt != 10);\n\n            total += cnt;\n        }\n\n        assertEquals(10, total);\n    }","id":100548,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonRemoteNotStickyProxy() throws Exception {\n        String name = \"testNodeSingletonRemoteNotStickyProxy\";\n\n        Grid grid = randomGrid();\n\n        // Deploy only on remote nodes.\n        grid.services(grid.cluster().forRemotes()).deployNodeSingleton(name, new CounterServiceImpl());\n\n        info(\"Deployed service: \" + name);\n\n        // Get local proxy.\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n\n        int total = 0;\n\n        for (GridNode n : grid.cluster().forRemotes().nodes()) {\n            CounterService rmtSvc =\n                    grid.services(grid.cluster().forNode(n)).serviceProxy(name, CounterService.class, false);\n\n            int cnt = rmtSvc.localIncrements();\n\n            // Since deployment is not stick, count on each node must be less than 10.\n            assertTrue(\"Invalid local increments: \" + cnt, cnt != 10);\n\n            total += cnt;\n        }\n\n        assertEquals(10, total);\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonRemoteStickyProxy() throws Exception {\n        String name = \"testNodeSingletonRemoteStickyProxy\";\n\n        Grid grid = randomGrid();\n\n        // Deploy only on remote nodes.\n        grid.forRemotes().services().deployNodeSingleton(name, new CounterServiceImpl()).get();\n\n        // Get local proxy.\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, true);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n\n        int total = 0;\n\n        for (GridNode n : grid.forRemotes().nodes()) {\n            CounterService rmtSvc = grid.forNode(n).services().serviceProxy(name, CounterService.class, false);\n\n            int cnt = rmtSvc.localIncrements();\n\n            assertTrue(\"Invalid local increments: \" + cnt, cnt == 10 || cnt == 0);\n\n            total += rmtSvc.localIncrements();\n        }\n\n        assertEquals(10, total);\n    }","id":100549,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonRemoteStickyProxy() throws Exception {\n        String name = \"testNodeSingletonRemoteStickyProxy\";\n\n        Grid grid = randomGrid();\n\n        // Deploy only on remote nodes.\n        grid.services(grid.cluster().forRemotes()).deployNodeSingleton(name, new CounterServiceImpl());\n\n        // Get local proxy.\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, true);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n\n        int total = 0;\n\n        for (GridNode n : grid.cluster().forRemotes().nodes()) {\n            CounterService rmtSvc =\n                    grid.services(grid.cluster().forNode(n)).serviceProxy(name, CounterService.class, false);\n\n            int cnt = rmtSvc.localIncrements();\n\n            assertTrue(\"Invalid local increments: \" + cnt, cnt == 10 || cnt == 0);\n\n            total += rmtSvc.localIncrements();\n        }\n\n        assertEquals(10, total);\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonProxy() throws Exception {\n        String name = \"testNodeSingletonProxy\";\n\n        Grid grid = randomGrid();\n\n        grid.services().deployNodeSingleton(name, new CounterServiceImpl()).get();\n\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n        assertEquals(10, svc.localIncrements());\n        assertEquals(10, grid.forLocal().services().serviceProxy(name, CounterService.class, false).localIncrements());\n\n        // Make sure that remote proxies were not called.\n        for (GridNode n : grid.forRemotes().nodes()) {\n            CounterService rmtSvc = grid.forNode(n).services().serviceProxy(name, CounterService.class, false);\n\n            assertEquals(0, rmtSvc.localIncrements());\n        }\n    }","id":100550,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonProxy() throws Exception {\n        String name = \"testNodeSingletonProxy\";\n\n        Grid grid = randomGrid();\n\n        grid.services().deployNodeSingleton(name, new CounterServiceImpl());\n\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        for (int i = 0; i < 10; i++)\n            svc.increment();\n\n        assertEquals(10, svc.get());\n        assertEquals(10, svc.localIncrements());\n        assertEquals(10, grid.services(grid.cluster().forLocal()).\n            serviceProxy(name, CounterService.class, false).localIncrements());\n\n        // Make sure that remote proxies were not called.\n        for (GridNode n : grid.cluster().forRemotes().nodes()) {\n            CounterService rmtSvc =\n                    grid.services(grid.cluster().forNode(n)).serviceProxy(name, CounterService.class, false);\n\n            assertEquals(0, rmtSvc.localIncrements());\n        }\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonNotDeployedProxy() throws Exception {\n        String name = \"testNodeSingletonNotDeployedProxy\";\n\n        Grid grid = randomGrid();\n\n        // Deploy only on remote nodes.\n        grid.forRemotes().services().deployNodeSingleton(name, new CounterServiceImpl()).get();\n\n        info(\"Deployed service: \" + name);\n\n        // Get local proxy.\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        try {\n            svc.increment();\n\n            fail(\"Should never reach here.\");\n        }\n        catch (GridRuntimeException e) {\n            info(\"Got expected exception: \" + e.getMessage());\n        }\n    }","id":100551,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testNodeSingletonNotDeployedProxy() throws Exception {\n        String name = \"testNodeSingletonNotDeployedProxy\";\n\n        Grid grid = randomGrid();\n\n        // Deploy only on remote nodes.\n        grid.services(grid.cluster().forRemotes()).deployNodeSingleton(name, new CounterServiceImpl());\n\n        info(\"Deployed service: \" + name);\n\n        // Get local proxy.\n        CounterService svc = grid.services().serviceProxy(name, CounterService.class, false);\n\n        try {\n            svc.increment();\n\n            fail(\"Should never reach here.\");\n        }\n        catch (GridRuntimeException e) {\n            info(\"Got expected exception: \" + e.getMessage());\n        }\n    }","commit_id":"b4766dbf548aa3b0e18d105a69e7b808a595be9b","url":"https://github.com/apache/ignite"},{"original_method":"public QuantizationInfo(final RecalibrationTables recalibrationTables, final int quantizationLevels) {\n        final Long [] qualHistogram = new Long[QualityUtils.MAX_QUAL_SCORE+1];                                          // create a histogram with the empirical quality distribution\n        for (int i = 0; i < qualHistogram.length; i++)\n            qualHistogram[i] = 0L;\n\n        final NestedIntegerArray<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE); // get the quality score table\n\n        for (final RecalDatum value : qualTable.getAllValues()) {\n            final RecalDatum datum = value;\n            final int empiricalQual = MathUtils.fastRound(datum.getEmpiricalQuality());                                 // convert the empirical quality to an integer ( it is already capped by MAX_QUAL )\n            qualHistogram[empiricalQual] += datum.getNumObservations();                                                      // add the number of observations for every key\n        }\n        empiricalQualCounts = Arrays.asList(qualHistogram);                                                             // histogram with the number of observations of the empirical qualities\n        quantizeQualityScores(quantizationLevels);\n\n        this.quantizationLevels = quantizationLevels;\n    }","id":100552,"modified_method":"public QuantizationInfo(final RecalibrationTables recalibrationTables, final int quantizationLevels) {\n        final Long [] qualHistogram = new Long[QualityUtils.MAX_QUAL_SCORE+1];                                          // create a histogram with the empirical quality distribution\n        for (int i = 0; i < qualHistogram.length; i++)\n            qualHistogram[i] = 0L;\n\n        final NestedIntegerArray<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE); // get the quality score table\n\n        for (final RecalDatum value : qualTable.getAllValues()) {\n            final RecalDatum datum = value;\n            final int empiricalQual = MathUtils.fastRound(datum.getEmpiricalQuality());                                 // convert the empirical quality to an integer ( it is already capped by MAX_QUAL )\n            qualHistogram[empiricalQual] += (long) datum.getNumObservations();                                                      // add the number of observations for every key\n        }\n        empiricalQualCounts = Arrays.asList(qualHistogram);                                                             // histogram with the number of observations of the empirical qualities\n        quantizeQualityScores(quantizationLevels);\n\n        this.quantizationLevels = quantizationLevels;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Requires({\"numMismatches >= 0\"})\n    public synchronized void setNumMismatches(final long numMismatches) {\n        if ( numMismatches < 0 ) throw new IllegalArgumentException(\"numMismatches < 0\");\n        this.numMismatches = numMismatches;\n        empiricalQuality = UNINITIALIZED;\n    }","id":100553,"modified_method":"@Requires({\"numMismatches >= 0\"})\n    public synchronized void setNumMismatches(final double numMismatches) {\n        if ( numMismatches < 0 ) throw new IllegalArgumentException(\"numMismatches < 0\");\n        this.numMismatches = numMismatches;\n        empiricalQuality = UNINITIALIZED;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Requires({\"by >= 0\"})\n    public synchronized void incrementNumMismatches(final long by) {\n        numMismatches += by;\n        empiricalQuality = UNINITIALIZED;\n    }","id":100554,"modified_method":"@Requires({\"by >= 0\"})\n    public synchronized void incrementNumMismatches(final double by) {\n        numMismatches += by;\n        empiricalQuality = UNINITIALIZED;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"public long getNumObservations() {\n        return numObservations;\n    }","id":100555,"modified_method":"public double getNumObservations() {\n        return numObservations;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Create a new RecalDatum with given observation and mismatch counts, and an reported quality\n     *\n     * @param _numObservations\n     * @param _numMismatches\n     * @param reportedQuality\n     */\n    public RecalDatum(final long _numObservations, final long _numMismatches, final byte reportedQuality) {\n        if ( _numObservations < 0 ) throw new IllegalArgumentException(\"numObservations < 0\");\n        if ( _numMismatches < 0 ) throw new IllegalArgumentException(\"numMismatches < 0\");\n        if ( reportedQuality < 0 ) throw new IllegalArgumentException(\"reportedQuality < 0\");\n\n        numObservations = _numObservations;\n        numMismatches = _numMismatches;\n        estimatedQReported = reportedQuality;\n        empiricalQuality = UNINITIALIZED;\n    }","id":100556,"modified_method":"/**\n     * Create a new RecalDatum with given observation and mismatch counts, and an reported quality\n     *\n     * @param _numObservations\n     * @param _numMismatches\n     * @param reportedQuality\n     */\n    public RecalDatum(final double _numObservations, final double _numMismatches, final byte reportedQuality) {\n        if ( _numObservations < 0 ) throw new IllegalArgumentException(\"numObservations < 0\");\n        if ( _numMismatches < 0 ) throw new IllegalArgumentException(\"numMismatches < 0\");\n        if ( reportedQuality < 0 ) throw new IllegalArgumentException(\"reportedQuality < 0\");\n\n        numObservations = _numObservations;\n        numMismatches = _numMismatches;\n        estimatedQReported = reportedQuality;\n        empiricalQuality = UNINITIALIZED;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Returns the error rate (in real space) of this interval, or 0 if there are no obserations\n     * @return the empirical error rate ~= N errors / N obs\n     */\n    @Ensures(\"result >= 0.0\")\n    public double getEmpiricalErrorRate() {\n        if ( numObservations == 0 )\n            return 0.0;\n        else {\n            // cache the value so we don't call log over and over again\n            final double doubleMismatches = (double) (numMismatches + SMOOTHING_CONSTANT);\n            // smoothing is one error and one non-error observation, for example\n            final double doubleObservations = (double) (numObservations + SMOOTHING_CONSTANT + SMOOTHING_CONSTANT);\n            return doubleMismatches / doubleObservations;\n        }\n    }","id":100557,"modified_method":"/**\n     * Returns the error rate (in real space) of this interval, or 0 if there are no obserations\n     * @return the empirical error rate ~= N errors / N obs\n     */\n    @Ensures(\"result >= 0.0\")\n    public double getEmpiricalErrorRate() {\n        if ( numObservations == 0 )\n            return 0.0;\n        else {\n            // cache the value so we don't call log over and over again\n            final double doubleMismatches = numMismatches + SMOOTHING_CONSTANT;\n            // smoothing is one error and one non-error observation, for example\n            final double doubleObservations = numObservations + SMOOTHING_CONSTANT + SMOOTHING_CONSTANT;\n            return doubleMismatches / doubleObservations;\n        }\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * calculate the expected number of errors given the estimated Q reported and the number of observations\n     * in this datum.\n     *\n     * @return a positive (potentially fractional) estimate of the number of errors\n     */\n    @Ensures(\"result >= 0.0\")\n    private double calcExpectedErrors() {\n        return (double) getNumObservations() * QualityUtils.qualToErrorProb(estimatedQReported);\n    }","id":100558,"modified_method":"/**\n     * calculate the expected number of errors given the estimated Q reported and the number of observations\n     * in this datum.\n     *\n     * @return a positive (potentially fractional) estimate of the number of errors\n     */\n    @Ensures(\"result >= 0.0\")\n    private double calcExpectedErrors() {\n        return getNumObservations() * QualityUtils.qualToErrorProb(estimatedQReported);\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Requires({\"by >= 0\"})\n    public synchronized void incrementNumObservations(final long by) {\n        numObservations += by;\n        empiricalQuality = UNINITIALIZED;\n    }","id":100559,"modified_method":"@Requires({\"by >= 0\"})\n    public synchronized void incrementNumObservations(final double by) {\n        numObservations += by;\n        empiricalQuality = UNINITIALIZED;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"public long getNumMismatches() {\n        return numMismatches;\n    }","id":100560,"modified_method":"public double getNumMismatches() {\n        return numMismatches;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n    public String toString() {\n        return String.format(\"%d,%d,%d\", getNumObservations(), getNumMismatches(), (byte) Math.floor(getEmpiricalQuality()));\n    }","id":100561,"modified_method":"@Override\n    public String toString() {\n        return String.format(\"%d,%d,%d\", Math.round(getNumObservations()), Math.round(getNumMismatches()), (byte) Math.floor(getEmpiricalQuality()));\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"public synchronized void setNumObservations(final long numObservations) {\n        if ( numObservations < 0 ) throw new IllegalArgumentException(\"numObservations < 0\");\n        this.numObservations = numObservations;\n        empiricalQuality = UNINITIALIZED;\n    }","id":100562,"modified_method":"public synchronized void setNumObservations(final double numObservations) {\n        if ( numObservations < 0 ) throw new IllegalArgumentException(\"numObservations < 0\");\n        this.numObservations = numObservations;\n        empiricalQuality = UNINITIALIZED;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Calculate the phred-scaled p-value for a chi^2 test for independent among subnodes of this node.\n     *\n     * The chi^2 value indicates the degree of independence of the implied error rates among the\n     * immediate subnodes\n     *\n     * @return the phred-scaled p-value for chi2 penalty, or 0.0 if it cannot be calculated\n     */\n    private double calcPenalty() {\n        if ( isLeaf() || freeToMerge() )\n            return 0.0;\n        else if ( subnodes.size() == 1 )\n            // only one value, so its free to merge away\n            return 0.0;\n        else {\n            final long[][] counts = new long[subnodes.size()][2];\n\n            int i = 0;\n            for ( final RecalDatumNode<T> subnode : subnodes ) {\n                // use the yates correction to help avoid all zeros => NaN\n                counts[i][0] = subnode.getRecalDatum().getNumMismatches() + 1;\n                counts[i][1] = subnode.getRecalDatum().getNumObservations() + 2;\n                i++;\n            }\n\n            try {\n                final double chi2PValue = new ChiSquareTestImpl().chiSquareTest(counts);\n                final double penalty = -10 * Math.log10(Math.max(chi2PValue, SMALLEST_CHI2_PVALUE));\n\n                // make sure things are reasonable and fail early if not\n                if (Double.isInfinite(penalty) || Double.isNaN(penalty))\n                    throw new ReviewedStingException(\"chi2 value is \" + chi2PValue + \" at \" + getRecalDatum());\n\n                return penalty;\n            } catch ( MathException e ) {\n                throw new ReviewedStingException(\"Failed in calculating chi2 value\", e);\n            }\n        }\n    }","id":100563,"modified_method":"/**\n     * Calculate the phred-scaled p-value for a chi^2 test for independent among subnodes of this node.\n     *\n     * The chi^2 value indicates the degree of independence of the implied error rates among the\n     * immediate subnodes\n     *\n     * @return the phred-scaled p-value for chi2 penalty, or 0.0 if it cannot be calculated\n     */\n    private double calcPenalty() {\n        if ( isLeaf() || freeToMerge() )\n            return 0.0;\n        else if ( subnodes.size() == 1 )\n            // only one value, so its free to merge away\n            return 0.0;\n        else {\n            final long[][] counts = new long[subnodes.size()][2];\n\n            int i = 0;\n            for ( final RecalDatumNode<T> subnode : subnodes ) {\n                // use the yates correction to help avoid all zeros => NaN\n                counts[i][0] = Math.round(subnode.getRecalDatum().getNumMismatches()) + 1L;\n                counts[i][1] = Math.round(subnode.getRecalDatum().getNumObservations()) + 2L;\n                i++;\n            }\n\n            try {\n                final double chi2PValue = new ChiSquareTestImpl().chiSquareTest(counts);\n                final double penalty = -10.0 * Math.log10(Math.max(chi2PValue, SMALLEST_CHI2_PVALUE));\n\n                // make sure things are reasonable and fail early if not\n                if (Double.isInfinite(penalty) || Double.isNaN(penalty))\n                    throw new ReviewedStingException(\"chi2 value is \" + chi2PValue + \" at \" + getRecalDatum());\n\n                return penalty;\n            } catch ( MathException e ) {\n                throw new ReviewedStingException(\"Failed in calculating chi2 value\", e);\n            }\n        }\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"private static List<GATKReportTable> generateReportTables(final RecalibrationTables recalibrationTables, final Covariate[] requestedCovariates) {\n        List<GATKReportTable> result = new LinkedList<GATKReportTable>();\n        int reportTableIndex = 0;\n        int rowIndex = 0;\n\n        final Map<Covariate, String> covariateNameMap = new HashMap<Covariate, String>(requestedCovariates.length);\n        for (final Covariate covariate : requestedCovariates)\n            covariateNameMap.put(covariate, parseCovariateName(covariate));\n\n        for (int tableIndex = 0; tableIndex < recalibrationTables.numTables(); tableIndex++) {\n\n            final ArrayList<Pair<String, String>> columnNames = new ArrayList<Pair<String, String>>();                                     // initialize the array to hold the column names\n            columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[0]), \"%s\"));              // save the required covariate name so we can reference it in the future\n            if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[1]), \"%s\"));          // save the required covariate name so we can reference it in the future\n                if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                    columnNames.add(covariateValue);\n                    columnNames.add(covariateName);\n                }\n            }\n\n            columnNames.add(eventType);                                                                                 // the order of these column names is important here\n            columnNames.add(empiricalQuality);\n            if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                columnNames.add(estimatedQReported);                                                                    // only the read group table needs the estimated Q reported\n            columnNames.add(nObservations);\n            columnNames.add(nErrors);\n\n            final GATKReportTable reportTable;\n            if (tableIndex <= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                reportTable = new GATKReportTable(\"RecalTable\" + reportTableIndex++, \"\", columnNames.size());\n                for (final Pair<String, String> columnName : columnNames)\n                    reportTable.addColumn(columnName.getFirst(), columnName.getSecond());\n                rowIndex = 0;                                                                                           // reset the row index since we're starting with a new table\n            } else {\n                reportTable = result.get(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index);\n            }\n\n            final NestedIntegerArray<RecalDatum> table = recalibrationTables.getTable(tableIndex);\n            for (final NestedIntegerArray.Leaf row : table.getAllLeaves()) {\n                final RecalDatum datum = (RecalDatum)row.value;\n                final int[] keys = row.keys;\n\n                int columnIndex = 0;\n                int keyIndex = 0;\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), requestedCovariates[0].formatKey(keys[keyIndex++]));\n                if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                    reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), requestedCovariates[1].formatKey(keys[keyIndex++]));\n                    if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                        final Covariate covariate = requestedCovariates[tableIndex];\n\n                        reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), covariate.formatKey(keys[keyIndex++]));\n                        reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), covariateNameMap.get(covariate));\n                    }\n                }\n\n                final EventType event = EventType.eventFrom(keys[keyIndex]);\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), event.toString());\n\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEmpiricalQuality());\n                if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                    reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEstimatedQReported());   // we only add the estimated Q reported in the RG table\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getNumObservations());\n                reportTable.set(rowIndex, columnNames.get(columnIndex).getFirst(), datum.getNumMismatches());\n\n                rowIndex++;\n            }\n            result.add(reportTable);\n        }\n\n        return result;\n    }","id":100564,"modified_method":"private static List<GATKReportTable> generateReportTables(final RecalibrationTables recalibrationTables, final Covariate[] requestedCovariates) {\n        List<GATKReportTable> result = new LinkedList<GATKReportTable>();\n        int reportTableIndex = 0;\n        int rowIndex = 0;\n\n        final Map<Covariate, String> covariateNameMap = new HashMap<Covariate, String>(requestedCovariates.length);\n        for (final Covariate covariate : requestedCovariates)\n            covariateNameMap.put(covariate, parseCovariateName(covariate));\n\n        for (int tableIndex = 0; tableIndex < recalibrationTables.numTables(); tableIndex++) {\n\n            final ArrayList<Pair<String, String>> columnNames = new ArrayList<Pair<String, String>>();                                     // initialize the array to hold the column names\n            columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[0]), \"%s\"));              // save the required covariate name so we can reference it in the future\n            if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[1]), \"%s\"));          // save the required covariate name so we can reference it in the future\n                if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                    columnNames.add(covariateValue);\n                    columnNames.add(covariateName);\n                }\n            }\n\n            columnNames.add(eventType);                                                                                 // the order of these column names is important here\n            columnNames.add(empiricalQuality);\n            if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                columnNames.add(estimatedQReported);                                                                    // only the read group table needs the estimated Q reported\n            columnNames.add(nObservations);\n            columnNames.add(nErrors);\n\n            final GATKReportTable reportTable;\n            if (tableIndex <= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                reportTable = new GATKReportTable(\"RecalTable\" + reportTableIndex++, \"\", columnNames.size());\n                for (final Pair<String, String> columnName : columnNames)\n                    reportTable.addColumn(columnName.getFirst(), columnName.getSecond());\n                rowIndex = 0;                                                                                           // reset the row index since we're starting with a new table\n            } else {\n                reportTable = result.get(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index);\n            }\n\n            final NestedIntegerArray<RecalDatum> table = recalibrationTables.getTable(tableIndex);\n            for (final NestedIntegerArray.Leaf row : table.getAllLeaves()) {\n                final RecalDatum datum = (RecalDatum)row.value;\n                final int[] keys = row.keys;\n\n                int columnIndex = 0;\n                int keyIndex = 0;\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), requestedCovariates[0].formatKey(keys[keyIndex++]));\n                if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                    reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), requestedCovariates[1].formatKey(keys[keyIndex++]));\n                    if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                        final Covariate covariate = requestedCovariates[tableIndex];\n\n                        reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), covariate.formatKey(keys[keyIndex++]));\n                        reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), covariateNameMap.get(covariate));\n                    }\n                }\n\n                final EventType event = EventType.eventFrom(keys[keyIndex]);\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), event.toString());\n\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEmpiricalQuality());\n                if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                    reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEstimatedQReported());   // we only add the estimated Q reported in the RG table\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), Math.round(datum.getNumObservations()));\n                reportTable.set(rowIndex, columnNames.get(columnIndex).getFirst(), Math.round(datum.getNumMismatches()));\n\n                rowIndex++;\n            }\n            result.add(reportTable);\n        }\n\n        return result;\n    }","commit_id":"bfa2c2f391b15d4bcaaba46479e584b86af4d5ad","url":"https://github.com/broadgsa/gatk"},{"original_method":"public EntryListenerConfigReadOnly(EntryListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setIncludeValue(config.isIncludeValue());\n        super.setLocal(config.isLocal());\n        super.setClassName(config.getClassName());\n    }","id":100565,"modified_method":"public EntryListenerConfigReadOnly(EntryListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setIncludeValue(config.isIncludeValue());\n        super.setLocal(config.isLocal());\n        if (config.getClassName() != null ) {\n            super.setClassName(config.getClassName());\n        }\n    }","commit_id":"8246bb53c19d399946a7d165021f3fc910a92914","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ItemListenerConfigReadOnly(ItemListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setClassName(config.getClassName());\n        super.setIncludeValue(config.isIncludeValue());\n    }","id":100566,"modified_method":"public ItemListenerConfigReadOnly(ItemListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setIncludeValue(config.isIncludeValue());\n        if (config.getClassName() != null) {\n            super.setClassName(config.getClassName());\n        }\n    }","commit_id":"8246bb53c19d399946a7d165021f3fc910a92914","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ListenerConfigReadOnly(ListenerConfig config) {\n        super.setClassName(config.getClassName());\n        super.setImplementation(config.getImplementation());\n    }","id":100567,"modified_method":"public ListenerConfigReadOnly(ListenerConfig config) {\n        if (config.getClassName() != null ) {\n            super.setClassName(config.getClassName());\n        }\n        super.setImplementation(config.getImplementation());\n    }","commit_id":"8246bb53c19d399946a7d165021f3fc910a92914","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public EntryListenerConfigReadOnly(EntryListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setIncludeValue(config.isIncludeValue());\n        super.setLocal(config.isLocal());\n        super.setClassName(config.getClassName());\n    }","id":100568,"modified_method":"public EntryListenerConfigReadOnly(EntryListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setIncludeValue(config.isIncludeValue());\n        super.setLocal(config.isLocal());\n        if (config.getClassName() != null ) {\n            super.setClassName(config.getClassName());\n        }\n    }","commit_id":"963c1c25de6bed8ca8ccf78a9748298f3ac25f2c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ItemListenerConfigReadOnly(ItemListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setClassName(config.getClassName());\n        super.setIncludeValue(config.isIncludeValue());\n    }","id":100569,"modified_method":"public ItemListenerConfigReadOnly(ItemListenerConfig config) {\n        super.setImplementation(config.getImplementation());\n        super.setIncludeValue(config.isIncludeValue());\n        if (config.getClassName() != null) {\n            super.setClassName(config.getClassName());\n        }\n    }","commit_id":"963c1c25de6bed8ca8ccf78a9748298f3ac25f2c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ListenerConfigReadOnly(ListenerConfig config) {\n        super.setClassName(config.getClassName());\n        super.setImplementation(config.getImplementation());\n    }","id":100570,"modified_method":"public ListenerConfigReadOnly(ListenerConfig config) {\n        if (config.getClassName() != null ) {\n            super.setClassName(config.getClassName());\n        }\n        super.setImplementation(config.getImplementation());\n    }","commit_id":"963c1c25de6bed8ca8ccf78a9748298f3ac25f2c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public static Bounds parse(String url) {\n        int i = url.indexOf('?');\n        if (i == -1)\n            return null;\n        String[] args = url.substring(i+1).split(\"&\");\n        HashMap<String, String> map = new HashMap<String, String>();\n        for (String arg : args) {\n            int eq = arg.indexOf('=');\n            if (eq != -1) {\n                map.put(arg.substring(0, eq), arg.substring(eq + 1));\n            }\n        }\n\n        Bounds b = null;\n        try {\n            if (map.containsKey(\"bbox\")) {\n                String bbox[] = map.get(\"bbox\").split(\",\");\n                b = new Bounds(\n                    new LatLon(Double.parseDouble(bbox[1]), Double.parseDouble(bbox[0])),\n                    new LatLon(Double.parseDouble(bbox[3]), Double.parseDouble(bbox[2])));\n            } else if (map.containsKey(\"minlat\")) {\n                String s = map.get(\"minlat\");\n                Double minlat = Double.parseDouble(s);\n                s = map.get(\"minlon\");\n                Double minlon = Double.parseDouble(s);\n                s = map.get(\"maxlat\");\n                Double maxlat = Double.parseDouble(s);\n                s = map.get(\"maxlon\");\n                Double maxlon = Double.parseDouble(s);\n                b = new Bounds(new LatLon(minlat, minlon), new LatLon(maxlat, maxlon));\n            } else {\n                double size = 180.0 / Math.pow(2, Integer.parseInt(map.get(\"zoom\")));\n                b = new Bounds(\n                    new LatLon(parseDouble(map, \"lat\") - size/2, parseDouble(map, \"lon\") - size),\n                    new LatLon(parseDouble(map, \"lat\") + size/2, parseDouble(map, \"lon\") + size));\n            }\n        } catch (NumberFormatException x) {\n        } catch (NullPointerException x) {\n        }\n        return b;\n    }","id":100571,"modified_method":"public static Bounds parse(String url) {\n        Bounds b = parseShortLink(url);\n        if (b != null)\n            return b;\n        int i = url.indexOf('?');\n        if (i == -1)\n            return null;\n        String[] args = url.substring(i+1).split(\"&\");\n        HashMap<String, String> map = new HashMap<String, String>();\n        for (String arg : args) {\n            int eq = arg.indexOf('=');\n            if (eq != -1) {\n                map.put(arg.substring(0, eq), arg.substring(eq + 1));\n            }\n        }\n\n        try {\n            if (map.containsKey(\"bbox\")) {\n                String bbox[] = map.get(\"bbox\").split(\",\");\n                b = new Bounds(\n                    new LatLon(Double.parseDouble(bbox[1]), Double.parseDouble(bbox[0])),\n                    new LatLon(Double.parseDouble(bbox[3]), Double.parseDouble(bbox[2])));\n            } else if (map.containsKey(\"minlat\")) {\n                String s = map.get(\"minlat\");\n                Double minlat = Double.parseDouble(s);\n                s = map.get(\"minlon\");\n                Double minlon = Double.parseDouble(s);\n                s = map.get(\"maxlat\");\n                Double maxlat = Double.parseDouble(s);\n                s = map.get(\"maxlon\");\n                Double maxlon = Double.parseDouble(s);\n                b = new Bounds(new LatLon(minlat, minlon), new LatLon(maxlat, maxlon));\n            } else {\n                b = positionToBounds(parseDouble(map, \"lat\"),\n                                     parseDouble(map, \"lon\"),\n                                     Integer.parseInt(map.get(\"zoom\")));\n            }\n        } catch (NumberFormatException x) {\n        } catch (NullPointerException x) {\n        }\n        return b;\n    }","commit_id":"f256a074507857572db4784a3e13653bd2e7bc89","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n    public double percentile(double percent) {\n        return result.estimate(percent);\n    }","id":100572,"modified_method":"@Override\n    public double percentile(double percent) {\n        return state.quantile(percent / 100);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public InternalPercentiles reduce(ReduceContext reduceContext) {\n        List<InternalAggregation> aggregations = reduceContext.aggregations();\n        InternalPercentiles first = (InternalPercentiles) aggregations.get(0);\n        if (aggregations.size() == 1) {\n            return first;\n        }\n        PercentilesEstimator.Result.Merger merger = first.result.merger(aggregations.size());\n        for (InternalAggregation aggregation : aggregations) {\n            merger.add(((InternalPercentiles) aggregation).result);\n        }\n        first.result = merger.merge();\n        return first;\n    }","id":100573,"modified_method":"@Override\n    public InternalPercentiles reduce(ReduceContext reduceContext) {\n        List<InternalAggregation> aggregations = reduceContext.aggregations();\n        InternalPercentiles merged = null;\n        for (InternalAggregation aggregation : aggregations) {\n            final InternalPercentiles percentiles = (InternalPercentiles) aggregation;\n            if (merged == null) {\n                merged = percentiles;\n            } else {\n                merged.state.add(percentiles.state);\n            }\n        }\n        return merged;\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public boolean hasNext() {\n            return i < result.percents.length;\n        }","id":100574,"modified_method":"@Override\n        public boolean hasNext() {\n            return i < percents.length;\n        }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void readFrom(StreamInput in) throws IOException {\n        name = in.readString();\n        valueFormatter = ValueFormatterStreams.readOptional(in);\n        result = PercentilesEstimator.Streams.read(in);\n        keyed = in.readBoolean();\n    }","id":100575,"modified_method":"@Override\n    public void readFrom(StreamInput in) throws IOException {\n        name = in.readString();\n        valueFormatter = ValueFormatterStreams.readOptional(in);\n        if (in.getVersion().before(Version.V_1_2_0)) {\n            final byte id = in.readByte();\n            if (id != 0) {\n                throw new ElasticsearchIllegalArgumentException(\"Unexpected percentiles aggregator id [\" + id + \"]\");\n            }\n        }\n        percents = new double[in.readInt()];\n        for (int i = 0; i < percents.length; ++i) {\n            percents[i] = in.readDouble();\n        }\n        state = TDigestState.read(in);\n        keyed = in.readBoolean();\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n        double[] percents = result.percents;\n        if (keyed) {\n            builder.startObject(name);\n            for(int i = 0; i < percents.length; ++i) {\n                String key = String.valueOf(percents[i]);\n                double value = result.estimate(i);\n                builder.field(key, value);\n                if (valueFormatter != null) {\n                    builder.field(key + \"_as_string\", valueFormatter.format(value));\n                }\n            }\n            builder.endObject();\n        } else {\n            builder.startArray(name);\n            for (int i = 0; i < percents.length; i++) {\n                double value = result.estimate(i);\n                builder.startObject();\n                builder.field(CommonFields.KEY, percents[i]);\n                builder.field(CommonFields.VALUE, value);\n                if (valueFormatter != null) {\n                    builder.field(CommonFields.VALUE_AS_STRING, valueFormatter.format(value));\n                }\n                builder.endObject();\n            }\n            builder.endArray();\n        }\n        return builder;\n    }","id":100576,"modified_method":"@Override\n    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n        if (keyed) {\n            builder.startObject(name);\n            for(int i = 0; i < percents.length; ++i) {\n                String key = String.valueOf(percents[i]);\n                double value = percentile(percents[i]);\n                builder.field(key, value);\n                if (valueFormatter != null) {\n                    builder.field(key + \"_as_string\", valueFormatter.format(value));\n                }\n            }\n            builder.endObject();\n        } else {\n            builder.startArray(name);\n            for (int i = 0; i < percents.length; i++) {\n                double value = percentile(percents[i]);\n                builder.startObject();\n                builder.field(CommonFields.KEY, percents[i]);\n                builder.field(CommonFields.VALUE, value);\n                if (valueFormatter != null) {\n                    builder.field(CommonFields.VALUE_AS_STRING, valueFormatter.format(value));\n                }\n                builder.endObject();\n            }\n            builder.endArray();\n        }\n        return builder;\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public Percentiles.Percentile next() {\n            final Percentiles.Percentile next = new InnerPercentile(result.percents[i], result.estimate(i));\n            ++i;\n            return next;\n        }","id":100577,"modified_method":"@Override\n        public Percentiles.Percentile next() {\n            final Percentiles.Percentile next = new InnerPercentile(percents[i], state.quantile(percents[i] / 100));\n            ++i;\n            return next;\n        }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public Iterator<Percentiles.Percentile> iterator() {\n        return new Iter(result);\n    }","id":100578,"modified_method":"@Override\n    public Iterator<Percentiles.Percentile> iterator() {\n        return new Iter(percents, state);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public double value(String name) {\n        return result.estimate(Double.valueOf(name));\n    }","id":100579,"modified_method":"@Override\n    public double value(String name) {\n        return percentile(Double.parseDouble(name));\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public InternalPercentiles(String name, PercentilesEstimator.Result result, boolean keyed) {\n        super(name);\n        this.result = result;\n        this.keyed = keyed;\n    }","id":100580,"modified_method":"public InternalPercentiles(String name, double[] percents, TDigestState state, boolean keyed) {\n        super(name);\n        this.percents = percents;\n        this.state = state;\n        this.keyed = keyed;\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        out.writeString(name);\n        ValueFormatterStreams.writeOptional(valueFormatter, out);\n        PercentilesEstimator.Streams.write(result, out);\n        out.writeBoolean(keyed);\n    }","id":100581,"modified_method":"@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        out.writeString(name);\n        ValueFormatterStreams.writeOptional(valueFormatter, out);\n        if (out.getVersion().before(Version.V_1_2_0)) {\n            out.writeByte((byte) 0);\n        }\n        out.writeInt(percents.length);\n        for (int i = 0 ; i < percents.length; ++i) {\n            out.writeDouble(percents[i]);\n        }\n        TDigestState.write(state, out);\n        out.writeBoolean(keyed);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void doClose() {\n        estimator.close();\n    }","id":100582,"modified_method":"@Override\n    protected void doClose() {\n        Releasables.close(states);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public InternalAggregation buildEmptyAggregation() {\n        return new InternalPercentiles(name, estimator.emptyResult(), keyed);\n    }","id":100583,"modified_method":"@Override\n    public InternalAggregation buildEmptyAggregation() {\n        return new InternalPercentiles(name, percents, new TDigestState(compression), keyed);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        protected Aggregator create(ValuesSource.Numeric valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {\n            PercentilesEstimator estimator = estimatorFactory.create(percents, expectedBucketsCount, aggregationContext);\n            return new PercentilesAggregator(name, expectedBucketsCount, valuesSource, aggregationContext, parent, estimator, keyed);\n        }","id":100584,"modified_method":"@Override\n        protected Aggregator create(ValuesSource.Numeric valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {\n            return new PercentilesAggregator(name, expectedBucketsCount, valuesSource, aggregationContext, parent, percents, compression, keyed);\n        }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Factory(String name, ValuesSourceConfig<ValuesSource.Numeric> valuesSourceConfig,\n                       double[] percents, PercentilesEstimator.Factory estimatorFactory, boolean keyed) {\n            super(name, InternalPercentiles.TYPE.name(), valuesSourceConfig);\n            this.estimatorFactory = estimatorFactory;\n            this.percents = percents;\n            this.keyed = keyed;\n        }","id":100585,"modified_method":"public Factory(String name, ValuesSourceConfig<ValuesSource.Numeric> valuesSourceConfig,\n                double[] percents, double compression, boolean keyed) {\n            super(name, InternalPercentiles.TYPE.name(), valuesSourceConfig);\n            this.percents = percents;\n            this.compression = compression;\n            this.keyed = keyed;\n        }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void collect(int doc, long owningBucketOrdinal) throws IOException {\n        final int valueCount = values.setDocument(doc);\n        for (int i = 0; i < valueCount; i++) {\n            estimator.offer(values.nextValue(), owningBucketOrdinal);\n        }\n    }","id":100586,"modified_method":"@Override\n    public void collect(int doc, long bucketOrd) throws IOException {\n        states = bigArrays.grow(states, bucketOrd + 1);\n\n        TDigestState state = states.get(bucketOrd);\n        if (state == null) {\n            state = new TDigestState(compression);\n            states.set(bucketOrd, state);\n        }\n\n        final int valueCount = values.setDocument(doc);\n        for (int i = 0; i < valueCount; i++) {\n            state.add(values.nextValue());\n        }\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public boolean hasMetric(String name) {\n        return PercentilesEstimator.indexOfPercent(estimator.percents, Double.parseDouble(name)) >= 0;\n    }","id":100587,"modified_method":"@Override\n    public boolean hasMetric(String name) {\n        return indexOfPercent(percents, Double.parseDouble(name)) >= 0;\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        protected Aggregator createUnmapped(AggregationContext aggregationContext, Aggregator parent) {\n            return new PercentilesAggregator(name, 0, null, aggregationContext, parent, estimatorFactory.create(percents, 0, aggregationContext), keyed);\n        }","id":100588,"modified_method":"@Override\n        protected Aggregator createUnmapped(AggregationContext aggregationContext, Aggregator parent) {\n            return new PercentilesAggregator(name, 0, null, aggregationContext, parent, percents, compression, keyed);\n        }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public double metric(String name, long owningBucketOrd) {\n        return estimator.result(owningBucketOrd).estimate(Double.parseDouble(name));\n    }","id":100589,"modified_method":"@Override\n    public double metric(String name, long bucketOrd) {\n        TDigestState state = getState(bucketOrd);\n        if (state == null) {\n            return Double.NaN;\n        } else {\n            return state.quantile(Double.parseDouble(name) / 100);\n        }\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public InternalAggregation buildAggregation(long owningBucketOrdinal) {\n        if (valuesSource == null) {\n            return buildEmptyAggregation();\n        }\n        return new InternalPercentiles(name, estimator.result(owningBucketOrdinal), keyed);\n    }","id":100590,"modified_method":"@Override\n    public InternalAggregation buildAggregation(long owningBucketOrdinal) {\n        TDigestState state = getState(owningBucketOrdinal);\n        if (state == null) {\n            return buildEmptyAggregation();\n        } else {\n            return new InternalPercentiles(name, percents, state, keyed);\n        }\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public PercentilesAggregator(String name, long estimatedBucketsCount, ValuesSource.Numeric valuesSource, AggregationContext context,\n                                 Aggregator parent, PercentilesEstimator estimator, boolean keyed) {\n        super(name, estimatedBucketsCount, context, parent);\n        this.valuesSource = valuesSource;\n        this.keyed = keyed;\n        this.estimator = estimator;\n    }","id":100591,"modified_method":"public PercentilesAggregator(String name, long estimatedBucketsCount, ValuesSource.Numeric valuesSource, AggregationContext context,\n                                 Aggregator parent, double[] percents, double compression, boolean keyed) {\n        super(name, estimatedBucketsCount, context, parent);\n        this.valuesSource = valuesSource;\n        this.keyed = keyed;\n        this.states = bigArrays.newObjectArray(estimatedBucketsCount);\n        this.percents = percents;\n        this.compression = compression;\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void internalXContent(XContentBuilder builder, Params params) throws IOException {\n        super.internalXContent(builder, params);\n\n        if (percentiles != null) {\n            builder.field(\"percents\", percentiles);\n        }\n\n        if (estimator != null) {\n            builder.field(\"estimator\", estimator.type());\n            estimator.paramsToXContent(builder);\n        }\n    }","id":100592,"modified_method":"@Override\n    protected void internalXContent(XContentBuilder builder, Params params) throws IOException {\n        super.internalXContent(builder, params);\n\n        if (percentiles != null) {\n            builder.field(\"percents\", percentiles);\n        }\n\n        if (compression != null) {\n            builder.field(\"compression\", compression);\n        }\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We must override the parse method because we need to allow custom parameters\n     * (execution_hint, etc) which is not possible otherwise\n     */\n    @Override\n    public AggregatorFactory parse(String aggregationName, XContentParser parser, SearchContext context) throws IOException {\n\n        ValuesSourceParser<ValuesSource.Numeric> vsParser = ValuesSourceParser.numeric(aggregationName, InternalPercentiles.TYPE, context)\n                .requiresSortedValues(true)\n                .build();\n\n        double[] percents = DEFAULT_PERCENTS;\n        boolean keyed = true;\n        Map<String, Object> settings = null;\n\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (vsParser.token(currentFieldName, token, parser)) {\n                continue;\n            } else if (token == XContentParser.Token.START_ARRAY) {\n                if (\"percents\".equals(currentFieldName)) {\n                    DoubleArrayList values = new DoubleArrayList(10);\n                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n                        double percent = parser.doubleValue();\n                        if (percent < 0 || percent > 100) {\n                            throw new SearchParseException(context, \"the percents in the percentiles aggregation [\" +\n                                    aggregationName + \"] must be in the [0, 100] range\");\n                        }\n                        values.add(percent);\n                    }\n                    percents = values.toArray();\n                    // Some impls rely on the fact that percents are sorted\n                    Arrays.sort(percents);\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + aggregationName + \"]: [\" + currentFieldName + \"].\");\n                }\n            } else if (token.isValue()) {\n                if (token == XContentParser.Token.VALUE_BOOLEAN && \"keyed\".equals(currentFieldName)) {\n                    keyed = parser.booleanValue();\n                } else {\n                    if (settings == null) {\n                        settings = new HashMap<>();\n                    }\n                    settings.put(currentFieldName, parser.objectText());\n                }\n            } else {\n                throw new SearchParseException(context, \"Unexpected token \" + token + \" in [\" + aggregationName + \"].\");\n            }\n        }\n\n        PercentilesEstimator.Factory estimatorFactory = EstimatorType.TDIGEST.estimatorFactory(settings);\n        return new PercentilesAggregator.Factory(aggregationName, vsParser.config(), percents, estimatorFactory, keyed);\n    }","id":100593,"modified_method":"/**\n     * We must override the parse method because we need to allow custom parameters\n     * (execution_hint, etc) which is not possible otherwise\n     */\n    @Override\n    public AggregatorFactory parse(String aggregationName, XContentParser parser, SearchContext context) throws IOException {\n\n        ValuesSourceParser<ValuesSource.Numeric> vsParser = ValuesSourceParser.numeric(aggregationName, InternalPercentiles.TYPE, context)\n                .requiresSortedValues(true)\n                .build();\n\n        double[] percents = DEFAULT_PERCENTS;\n        boolean keyed = true;\n        double compression = 100;\n\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (vsParser.token(currentFieldName, token, parser)) {\n                continue;\n            } else if (token == XContentParser.Token.START_ARRAY) {\n                if (\"percents\".equals(currentFieldName)) {\n                    DoubleArrayList values = new DoubleArrayList(10);\n                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n                        double percent = parser.doubleValue();\n                        if (percent < 0 || percent > 100) {\n                            throw new SearchParseException(context, \"the percents in the percentiles aggregation [\" +\n                                    aggregationName + \"] must be in the [0, 100] range\");\n                        }\n                        values.add(percent);\n                    }\n                    percents = values.toArray();\n                    // Some impls rely on the fact that percents are sorted\n                    Arrays.sort(percents);\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + aggregationName + \"]: [\" + currentFieldName + \"].\");\n                }\n            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {\n                if (\"keyed\".equals(currentFieldName)) {\n                    keyed = parser.booleanValue();\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + aggregationName + \"]: [\" + currentFieldName + \"].\");\n                }\n            } else if (token == XContentParser.Token.VALUE_NUMBER) {\n                if (\"compression\".equals(currentFieldName)) {\n                    compression = parser.doubleValue();\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + aggregationName + \"]: [\" + currentFieldName + \"].\");\n                }\n            } else {\n                throw new SearchParseException(context, \"Unexpected token \" + token + \" in [\" + aggregationName + \"].\");\n            }\n        }\n\n        return new PercentilesAggregator.Factory(aggregationName, vsParser.config(), percents, compression, keyed);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"values\").script(\"_value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);\n    }","id":100594,"modified_method":"@Test\n    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"values\").script(\"_value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"value\").script(\"_value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","id":100595,"modified_method":"@Test\n    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"value\").script(\"_value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScript_SingleValued() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .script(\"doc['value'].value\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue, maxValue);\n    }","id":100596,"modified_method":"@Test\n    public void testScript_SingleValued() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .script(\"doc['value'].value\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue, maxValue);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScript_ExplicitSingleValued_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .script(\"doc['value'].value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","id":100597,"modified_method":"@Test\n    public void testScript_ExplicitSingleValued_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .script(\"doc['value'].value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testEmptyAggregation() throws Exception {\n\n        SearchResponse searchResponse = client().prepareSearch(\"empty_bucket_idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(histogram(\"histo\").field(\"value\").interval(1l).minDocCount(0)\n                        .subAggregation(randomEstimator(percentiles(\"percentiles\"))\n                                .percentiles(10, 15)))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(2l));\n        Histogram histo = searchResponse.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        Histogram.Bucket bucket = histo.getBucketByKey(1l);\n        assertThat(bucket, notNullValue());\n\n        Percentiles percentiles = bucket.getAggregations().get(\"percentiles\");\n        assertThat(percentiles, notNullValue());\n        assertThat(percentiles.getName(), equalTo(\"percentiles\"));\n        assertThat(percentiles.percentile(10), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(15), equalTo(Double.NaN));\n    }","id":100598,"modified_method":"@Test\n    public void testEmptyAggregation() throws Exception {\n\n        SearchResponse searchResponse = client().prepareSearch(\"empty_bucket_idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(histogram(\"histo\").field(\"value\").interval(1l).minDocCount(0)\n                        .subAggregation(randomCompression(percentiles(\"percentiles\"))\n                                .percentiles(10, 15)))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(2l));\n        Histogram histo = searchResponse.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        Histogram.Bucket bucket = histo.getBucketByKey(1l);\n        assertThat(bucket, notNullValue());\n\n        Percentiles percentiles = bucket.getAggregations().get(\"percentiles\");\n        assertThat(percentiles, notNullValue());\n        assertThat(percentiles.getName(), equalTo(\"percentiles\"));\n        assertThat(percentiles.percentile(10), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(15), equalTo(Double.NaN));\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testMultiValuedField() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"values\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues, maxValues);\n    }","id":100599,"modified_method":"@Test\n    public void testMultiValuedField() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"values\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues, maxValues);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testMultiValuedField_WithValueScript() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"values\").script(\"_value - 1\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);\n    }","id":100600,"modified_method":"@Test\n    public void testMultiValuedField_WithValueScript() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"values\").script(\"_value - 1\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"values\").script(\"_value * -1\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, -maxValues, -minValues);\n    }","id":100601,"modified_method":"@Test\n    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"values\").script(\"_value * -1\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, -maxValues, -minValues);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testSingleValuedField() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"value\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue, maxValue);\n    }","id":100602,"modified_method":"@Test\n    public void testSingleValuedField() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"value\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue, maxValue);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScript_SingleValued_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .script(\"doc['value'].value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","id":100603,"modified_method":"@Test\n    public void testScript_SingleValued_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .script(\"doc['value'].value - dec\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private static PercentilesBuilder randomEstimator(PercentilesBuilder builder) {\n        if (randomBoolean()) {\n            TDigest estimator = TDigest.tDigest();\n            estimator.compression(randomIntBetween(20, 120) + randomDouble());\n            builder.estimator(estimator);\n        }\n        return builder;\n    }","id":100604,"modified_method":"private static PercentilesBuilder randomCompression(PercentilesBuilder builder) {\n        if (randomBoolean()) {\n            builder.compression(randomIntBetween(20, 120) + randomDouble());\n        }\n        return builder;\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testSingleValuedField_PartiallyUnmapped() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\", \"idx_unmapped\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"value\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue, maxValue);\n    }","id":100605,"modified_method":"@Test\n    public void testSingleValuedField_PartiallyUnmapped() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\", \"idx_unmapped\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"value\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue, maxValue);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testUnmapped() throws Exception {\n        SearchResponse searchResponse = client().prepareSearch(\"idx_unmapped\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"value\")\n                        .percentiles(0, 10, 15, 100))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(0l));\n\n        Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertThat(percentiles, notNullValue());\n        assertThat(percentiles.getName(), equalTo(\"percentiles\"));\n        assertThat(percentiles.percentile(0), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(10), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(15), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(100), equalTo(Double.NaN));\n    }","id":100606,"modified_method":"@Test\n    public void testUnmapped() throws Exception {\n        SearchResponse searchResponse = client().prepareSearch(\"idx_unmapped\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"value\")\n                        .percentiles(0, 10, 15, 100))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(0l));\n\n        Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertThat(percentiles, notNullValue());\n        assertThat(percentiles.getName(), equalTo(\"percentiles\"));\n        assertThat(percentiles.percentile(0), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(10), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(15), equalTo(Double.NaN));\n        assertThat(percentiles.percentile(100), equalTo(Double.NaN));\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScript_ExplicitMultiValued() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .script(\"doc['values'].values\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues, maxValues);\n    }","id":100607,"modified_method":"@Test\n    public void testScript_ExplicitMultiValued() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .script(\"doc['values'].values\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues, maxValues);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testOrderBySubAggregation() {\n        boolean asc = randomBoolean();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(\n                        histogram(\"histo\").field(\"value\").interval(2l)\n                            .subAggregation(randomEstimator(percentiles(\"percentiles\").percentiles(99)))\n                            .order(Order.aggregation(\"percentiles\", \"99\", asc)))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        Histogram histo = searchResponse.getAggregations().get(\"histo\");\n        double previous = asc ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            Percentiles percentiles = bucket.getAggregations().get(\"percentiles\");\n            double p99 = percentiles.percentile(99);\n            if (asc) {\n                assertThat(p99, greaterThanOrEqualTo(previous));\n            } else {\n                assertThat(p99, lessThanOrEqualTo(previous));\n            }\n            previous = p99;\n        }\n    }","id":100608,"modified_method":"@Test\n    public void testOrderBySubAggregation() {\n        boolean asc = randomBoolean();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(\n                        histogram(\"histo\").field(\"value\").interval(2l)\n                            .subAggregation(randomCompression(percentiles(\"percentiles\").percentiles(99)))\n                            .order(Order.aggregation(\"percentiles\", \"99\", asc)))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        Histogram histo = searchResponse.getAggregations().get(\"histo\");\n        double previous = asc ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            Percentiles percentiles = bucket.getAggregations().get(\"percentiles\");\n            double p99 = percentiles.percentile(99);\n            if (asc) {\n                assertThat(p99, greaterThanOrEqualTo(previous));\n            } else {\n                assertThat(p99, lessThanOrEqualTo(previous));\n            }\n            previous = p99;\n        }\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScript_MultiValued_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .script(\"List values = doc['values'].values; double[] res = new double[values.length]; for (int i = 0; i < res.length; i++) { res[i] = values.get(i) - dec; }; return res;\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);\n    }","id":100609,"modified_method":"@Test\n    public void testScript_MultiValued_WithParams() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .script(\"List values = doc['values'].values; double[] res = new double[values.length]; for (int i = 0; i < res.length; i++) { res[i] = values.get(i) - dec; }; return res;\").param(\"dec\", 1)\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScript_MultiValued() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .script(\"doc['values'].values\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues, maxValues);\n    }","id":100610,"modified_method":"@Test\n    public void testScript_MultiValued() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .script(\"doc['values'].values\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValues, maxValues);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testSingleValuedField_WithValueScript() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomEstimator(percentiles(\"percentiles\"))\n                        .field(\"value\").script(\"_value - 1\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","id":100611,"modified_method":"@Test\n    public void testSingleValuedField_WithValueScript() throws Exception {\n        final double[] pcts = randomPercentiles();\n        SearchResponse searchResponse = client().prepareSearch(\"idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(randomCompression(percentiles(\"percentiles\"))\n                        .field(\"value\").script(\"_value - 1\")\n                        .percentiles(pcts))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));\n\n        final Percentiles percentiles = searchResponse.getAggregations().get(\"percentiles\");\n        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);\n    }","commit_id":"cb8139a583724b26611bd4e7fe05112090ac2576","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Returns an array containing all operation sets supported by the current\n     * implementation. When querying this method users must be prepared to\n     * receive any subset of the OperationSet-s defined by this service. They\n     * MUST ignore any OperationSet-s that they are not aware of and that may be\n     * defined by future version of this service. Such \"unknown\" OperationSet-s\n     * though not encouraged, may also be defined by service implementors.\n     * \n     * @return a java.util.Map containing instance of all supported operation\n     *         sets mapped against their class names (e.g.\n     *         OperationSetPresence.class.getName()) .\n     */\n    public Map<String, OperationSet> getSupportedOperationSets()\n    {\n        Map<String, OperationSet> supportedOperationSets =\n            doGetSupportedOperationSets();\n\n        return new Hashtable<String, OperationSet>(supportedOperationSets);\n    }","id":100612,"modified_method":"/**\n     * Returns an array containing all operation sets supported by the current\n     * implementation. When querying this method users must be prepared to\n     * receive any subset of the OperationSet-s defined by this service. They\n     * MUST ignore any OperationSet-s that they are not aware of and that may be\n     * defined by future version of this service. Such \"unknown\" OperationSet-s\n     * though not encouraged, may also be defined by service implementors.\n     * \n     * @return a java.util.Map containing instance of all supported operation\n     *         sets mapped against their class names (e.g.\n     *         OperationSetPresence.class.getName()) .\n     */\n    public Map<String, OperationSet> getSupportedOperationSets()\n    {\n        return new Hashtable<String, OperationSet>(supportedOperationSets);\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Returns the operation set corresponding to the specified class or null if\n     * this operation set is not supported by the provider implementation.\n     * \n     * @param opsetClass the <tt>Class<\/tt> of the operation set that we're\n     * looking for.\n     * @return returns an <tt>OperationSet<\/tt> of the specified <tt>Class<\/tt>\n     * if the undelying implementation supports it; <tt>null<\/tt>, otherwise.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T extends OperationSet> T getOperationSet(Class<T> opsetClass)\n    {\n        return (T) doGetSupportedOperationSets().get(opsetClass.getName());\n    }","id":100613,"modified_method":"/**\n     * Returns the operation set corresponding to the specified class or null if\n     * this operation set is not supported by the provider implementation.\n     * \n     * @param opsetClass the <tt>Class<\/tt> of the operation set that we're\n     * looking for.\n     * @return returns an <tt>OperationSet<\/tt> of the specified <tt>Class<\/tt>\n     * if the undelying implementation supports it; <tt>null<\/tt>, otherwise.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T extends OperationSet> T getOperationSet(Class<T> opsetClass)\n    {\n        return (T) supportedOperationSets.get(opsetClass.getName());\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"protected Map<String, OperationSet> doGetSupportedOperationSets()\n    {\n        return supportedOperationSets;\n    }","id":100614,"modified_method":"/**\n     * Adds a specific <tt>OperationSet<\/tt> implementation to the set of\n     * supported <tt>OperationSet<\/tt>s of this instance. Serves as a type-safe\n     * wrapper around {@link #supportedOperationSets} and its\n     * {@link Hashtable#put(String, OperationSet)} and also shortens the code\n     * which performs such additions.\n     *\n     * @param <T> the exact type of the <tt>OperationSet<\/tt> implementation to\n     * be added\n     * @param opsetClass the <tt>Class<\/tt> of <tt>OperationSet<\/tt> under the\n     * name of which the specified implementation is to be added\n     * @param opset the <tt>OperationSet<\/tt> implementation to be added\n     */\n    protected <T extends OperationSet> void addSupportedOperationSet(\n            Class<T> opsetClass,\n            T opset)\n    {\n        supportedOperationSets.put(opsetClass.getName(), opset);\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n         * Received offline text message.\n         * \n         * @param body of message\n         * @param contentType of message\n         * @param encoding of message\n         * @param displayName\n         * @param from the user who sent this message\n         */\n        public void offlineMessageReceived(String body,\n                                           String contentType, \n                                           String encoding,\n                                           MsnContact contact)\n        {\n            Message newMessage =\n                createMessage(body, contentType, encoding, null);\n\n            Contact sourceContact = opSetPersPresence.\n                findContactByID(contact.getEmail().getEmailAddress());\n\n            if(sourceContact == null)\n            {\n                logger.debug(\"received a message from an unknown contact: \"\n                                   + contact);\n                //create the volatile contact\n                sourceContact = opSetPersPresence.\n                    createVolatileContact(contact);\n            }\n\n            MessageReceivedEvent msgReceivedEvt\n                = new MessageReceivedEvent(\n                    newMessage, sourceContact , System.currentTimeMillis() );\n\n            fireMessageEvent(msgReceivedEvt);\n        }","id":100615,"modified_method":"/**\n         * Received offline text message.\n         * \n         * @param body of message\n         * @param contentType of message\n         * @param encoding of message\n         * @param contact the user who sent this message\n         */\n        public void offlineMessageReceived(String body,\n                                           String contentType, \n                                           String encoding,\n                                           MsnContact contact)\n        {\n            Message newMessage =\n                createMessage(body, contentType, encoding, null);\n\n            Contact sourceContact = opSetPersPresence.\n                findContactByID(contact.getEmail().getEmailAddress());\n\n            if(sourceContact == null)\n            {\n                logger.debug(\"received a message from an unknown contact: \"\n                                   + contact);\n                //create the volatile contact\n                sourceContact = opSetPersPresence.\n                    createVolatileContact(contact);\n            }\n\n            MessageReceivedEvent msgReceivedEvt\n                = new MessageReceivedEvent(\n                    newMessage, sourceContact , System.currentTimeMillis() );\n\n            fireMessageEvent(msgReceivedEvt);\n        }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Determines whether the protocol supports the supplied content type\n     *\n     * @param contentType the type we want to check\n     * @return <tt>true<\/tt> if the protocol supports it and\n     * <tt>false<\/tt> otherwise.\n     */\n    public boolean isContentTypeSupported(String contentType)\n    {\n        if(contentType.equals(DEFAULT_MIME_TYPE))\n            return true;\n        else\n           return false;\n    }","id":100616,"modified_method":"/**\n     * Determines whether the protocol supports the supplied content type\n     *\n     * @param contentType the type we want to check\n     * @return <tt>true<\/tt> if the protocol supports it and\n     * <tt>false<\/tt> otherwise.\n     */\n    public boolean isContentTypeSupported(String contentType)\n    {\n        return DEFAULT_MIME_TYPE.equals(contentType);\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n         * The method is called by a ProtocolProvider implementation whenever\n         * a change in the registration state of the corresponding provider had\n         * occurred.\n         * @param evt ProviderStatusChangeEvent the event describing the status\n         * change.\n         */\n        public void registrationStateChanged(RegistrationStateChangeEvent evt)\n        {\n            logger.debug(\"The provider changed state from: \"\n                         + evt.getOldState()\n                         + \" to: \" + evt.getNewState());\n\n            if (evt.getNewState() == RegistrationState.REGISTERED)\n            {\n                opSetPersPresence =\n                    (OperationSetPersistentPresenceMsnImpl) msnProvider\n                        .getOperationSet(OperationSetPersistentPresence.class);\n\n                msnProvider.getMessenger().\n                    addMessageListener(new MsnMessageListener());\n                msnProvider.getMessenger().\n                    addEmailListener(new MsnMessageListener());\n            }\n        }","id":100617,"modified_method":"/**\n         * The method is called by a ProtocolProvider implementation whenever\n         * a change in the registration state of the corresponding provider had\n         * occurred.\n         * @param evt ProviderStatusChangeEvent the event describing the status\n         * change.\n         */\n        public void registrationStateChanged(RegistrationStateChangeEvent evt)\n        {\n            logger.debug(\"The provider changed state from: \"\n                         + evt.getOldState()\n                         + \" to: \" + evt.getNewState());\n\n            if (evt.getNewState() == RegistrationState.REGISTERED)\n            {\n                opSetPersPresence =\n                    (OperationSetPersistentPresenceMsnImpl) msnProvider\n                        .getOperationSet(OperationSetPersistentPresence.class);\n\n                MsnMessenger msnMessenger = msnProvider.getMessenger();\n\n                /*\n                 * FIXME What's the point of having to MsnMessageListener\n                 * instances?\n                 */\n                msnMessenger.addMessageListener(new MsnMessageListener());\n                msnMessenger.addEmailListener(new MsnMessageListener());\n            }\n        }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Sends the <tt>message<\/tt> to the destination indicated by the\n     * <tt>to<\/tt> contact.\n     *\n     * @param to the <tt>Contact<\/tt> to send <tt>message<\/tt> to\n     * @param message the <tt>Message<\/tt> to send.\n     * @throws java.lang.IllegalStateException if the underlying stack is\n     * not registered and initialized.\n     * @throws java.lang.IllegalArgumentException if <tt>to<\/tt> is not an\n     * instance of ContactImpl.\n     */\n    public void sendInstantMessage(Contact to, Message message)\n        throws IllegalStateException, IllegalArgumentException\n    {\n        assertConnected();\n\n        if( !(to instanceof ContactMsnImpl) )\n           throw new IllegalArgumentException(\n               \"The specified contact is not an MSN contact.\"\n               + to);\n\n        MessageDeliveredEvent msgDeliveryPendingEvt\n        = new MessageDeliveredEvent(\n                message, to, System.currentTimeMillis());\n\n        msgDeliveryPendingEvt = messageDeliveryPendingTransform(msgDeliveryPendingEvt);\n        \n        if (msgDeliveryPendingEvt == null)\n            return;\n        \n        msnProvider.getMessenger().\n            sendText(\n                ((ContactMsnImpl)to).getSourceContact().getEmail(),\n                msgDeliveryPendingEvt.getSourceMessage().getContent()\n            );\n        MessageDeliveredEvent msgDeliveredEvt\n            = new MessageDeliveredEvent(message, to, System.currentTimeMillis());\n\n\n        // msgDeliveredEvt = messageDeliveredTransform(msgDeliveredEvt);\n        \n        if (msgDeliveredEvt != null)\n            fireMessageEvent(msgDeliveredEvt);\n    }","id":100618,"modified_method":"/**\n     * Sends the <tt>message<\/tt> to the destination indicated by the\n     * <tt>to<\/tt> contact.\n     *\n     * @param to the <tt>Contact<\/tt> to send <tt>message<\/tt> to\n     * @param message the <tt>Message<\/tt> to send.\n     * @throws java.lang.IllegalStateException if the underlying stack is\n     * not registered and initialized.\n     * @throws java.lang.IllegalArgumentException if <tt>to<\/tt> is not an\n     * instance of ContactImpl.\n     */\n    public void sendInstantMessage(Contact to, Message message)\n        throws IllegalStateException, IllegalArgumentException\n    {\n        assertConnected();\n\n        if( !(to instanceof ContactMsnImpl) )\n           throw new IllegalArgumentException(\n               \"The specified contact is not an MSN contact.\"\n               + to);\n\n        MessageDeliveredEvent msgDeliveryPendingEvt\n            = new MessageDeliveredEvent(message, to);\n\n        msgDeliveryPendingEvt\n            = messageDeliveryPendingTransform(msgDeliveryPendingEvt);\n        \n        if (msgDeliveryPendingEvt == null)\n            return;\n        \n        msnProvider.getMessenger().\n            sendText(\n                ((ContactMsnImpl)to).getSourceContact().getEmail(),\n                msgDeliveryPendingEvt.getSourceMessage().getContent());\n\n        MessageDeliveredEvent msgDeliveredEvt\n            = new MessageDeliveredEvent(message, to);\n\n        // msgDeliveredEvt = messageDeliveredTransform(msgDeliveredEvt);\n        \n        if (msgDeliveredEvt != null)\n            fireMessageEvent(msgDeliveredEvt);\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initialized the service implementation, and puts it in a sate where it\n     * could interoperate with other services. It is strongly recomended that\n     * properties in this Map be mapped to property names as specified by\n     * <tt>AccountProperties<\/tt>.\n     *\n     * @param screenname the account id/uin/screenname of the account that\n     * we're about to create\n     * @param accountID the identifier of the account that this protocol\n     * provider represents.\n     *\n     * @see net.java.sip.communicator.service.protocol.AccountID\n     */\n    protected void initialize(String screenname,\n                              AccountID accountID)\n    {\n        synchronized(initializationLock)\n        {\n            this.accountID = accountID;\n\n            supportedOperationSets.put(\n                OperationSetInstantMessageTransform.class.getName(), \n                new OperationSetInstantMessageTransformImpl());\n\n            //initialize the presence operationset\n            persistentPresence = new OperationSetPersistentPresenceMsnImpl(this);\n\n            supportedOperationSets.put(\n                OperationSetPersistentPresence.class.getName(),\n                persistentPresence);\n\n            //register it once again for those that simply need presence\n            supportedOperationSets.put( OperationSetPresence.class.getName(),\n                                        persistentPresence);\n\n           OperationSetAdHocMultiUserChat adHocMultiUserChat = \n               new OperationSetAdHocMultiUserChatMsnImpl(this);\n\n           supportedOperationSets.put(OperationSetAdHocMultiUserChat.class\n                   .getName(), adHocMultiUserChat);\n\n           // initialize the IM operation set\n           OperationSetBasicInstantMessagingMsnImpl basicInstantMessaging\n               = new OperationSetBasicInstantMessagingMsnImpl(this);\n\n           supportedOperationSets.put(OperationSetBasicInstantMessaging.class\n                   .getName(), basicInstantMessaging);\n\n            //initialize the typing notifications operation set\n            typingNotifications =\n                new OperationSetTypingNotificationsMsnImpl(this);\n\n            supportedOperationSets.put(\n                OperationSetTypingNotifications.class.getName(),\n                typingNotifications);\n\n            OperationSetFileTransferMsnImpl fileTransferOpSet =\n                new OperationSetFileTransferMsnImpl(this);\n            supportedOperationSets.put(\n                OperationSetFileTransfer.class.getName(),\n                fileTransferOpSet);\n\n            isInitialized = true;\n        }\n    }","id":100619,"modified_method":"/**\n     * Initialized the service implementation, and puts it in a sate where it\n     * could interoperate with other services. It is strongly recomended that\n     * properties in this Map be mapped to property names as specified by\n     * <tt>AccountProperties<\/tt>.\n     *\n     * @param screenname the account id/uin/screenname of the account that\n     * we're about to create\n     * @param accountID the identifier of the account that this protocol\n     * provider represents.\n     *\n     * @see net.java.sip.communicator.service.protocol.AccountID\n     */\n    protected void initialize(String screenname, AccountID accountID)\n    {\n        synchronized(initializationLock)\n        {\n            this.accountID = accountID;\n\n            addSupportedOperationSet(\n                OperationSetInstantMessageTransform.class,\n                new OperationSetInstantMessageTransformImpl());\n\n            //initialize the presence operationset\n            persistentPresence = new OperationSetPersistentPresenceMsnImpl(this);\n            addSupportedOperationSet(\n                OperationSetPersistentPresence.class,\n                persistentPresence);\n            //register it once again for those that simply need presence\n            addSupportedOperationSet(\n                OperationSetPresence.class,\n                persistentPresence);\n\n            addSupportedOperationSet(\n                OperationSetAdHocMultiUserChat.class,\n                new OperationSetAdHocMultiUserChatMsnImpl(this));\n\n            // initialize the IM operation set\n            addSupportedOperationSet(\n                OperationSetBasicInstantMessaging.class,\n                new OperationSetBasicInstantMessagingMsnImpl(this));\n\n            //initialize the typing notifications operation set\n            typingNotifications\n                = new OperationSetTypingNotificationsMsnImpl(this);\n            addSupportedOperationSet(\n                OperationSetTypingNotifications.class,\n                typingNotifications);\n\n            addSupportedOperationSet(\n                OperationSetFileTransfer.class,\n                new OperationSetFileTransferMsnImpl(this));\n        }\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Connects and logins to the server\n     * @param authority SecurityAuthority\n     * @throws  OperationFailedException if login parameters\n     *          as server port are not correct\n     */\n    private void connectAndLogin(SecurityAuthority authority, int reasonCode)\n        throws OperationFailedException\n    {\n        synchronized(initializationLock)\n        {\n            //verify whether a password has already been stored for this account\n            String password = MsnActivator.\n                getProtocolProviderFactory().loadPassword(getAccountID());\n\n            //decode\n            if (password == null)\n            {\n                //create a default credentials object\n                UserCredentials credentials = new UserCredentials();\n                credentials.setUserName(getAccountID().getUserID());\n\n                //request a password from the user\n                credentials = authority.obtainCredentials(\n                        ProtocolNames.MSN,\n                        credentials,\n                        reasonCode);\n\n                // in case user has canceled the login window\n                if(credentials == null)\n                {\n                    fireRegistrationStateChanged(\n                        getRegistrationState(),\n                        RegistrationState.UNREGISTERED,\n                        RegistrationStateChangeEvent.REASON_USER_REQUEST, \"\");\n                    return;\n                }\n\n                //extract the password the user passed us.\n                char[] pass = credentials.getPassword();\n\n                // the user didn't provide us a password (canceled the operation)\n                if(pass == null)\n                {\n                    fireRegistrationStateChanged(\n                        getRegistrationState(),\n                        RegistrationState.UNREGISTERED,\n                        RegistrationStateChangeEvent.REASON_USER_REQUEST, \"\");\n                    return;\n                }\n                password = new String(pass);\n\n                if (credentials.isPasswordPersistent())\n                {\n                    MsnActivator.getProtocolProviderFactory()\n                        .storePassword(getAccountID(), password);\n                }\n            }\n\n            messenger = MsnMessengerFactory.createMsnMessenger(\n                getAccountID().getUserID(),\n                password);\n\n            messenger.addMessengerListener(new MsnConnectionListener());\n\n            persistentPresence.setMessenger(messenger);\n            typingNotifications.setMessenger(messenger);\n\n            try\n            {\n                messenger.login();\n            }\n            catch (UnresolvedAddressException ex)\n            {\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.CONNECTION_FAILED,\n                    RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND, null);\n            }\n        }\n    }","id":100620,"modified_method":"/**\n     * Connects and logins to the server\n     * @param authority SecurityAuthority\n     * @throws  OperationFailedException if login parameters\n     *          as server port are not correct\n     */\n    private void connectAndLogin(SecurityAuthority authority, int reasonCode)\n        throws OperationFailedException\n    {\n        synchronized(initializationLock)\n        {\n            //verify whether a password has already been stored for this account\n            ProtocolProviderFactory protocolProviderFactory\n                = MsnActivator.getProtocolProviderFactory();\n            AccountID accountID = getAccountID();\n            String password = protocolProviderFactory.loadPassword(accountID);\n\n            //decode\n            if (password == null)\n            {\n                //create a default credentials object\n                UserCredentials credentials = new UserCredentials();\n                credentials.setUserName(accountID.getUserID());\n\n                //request a password from the user\n                credentials\n                    = authority\n                        .obtainCredentials(\n                            ProtocolNames.MSN,\n                            credentials,\n                            reasonCode);\n\n                // in case user has canceled the login window\n                if(credentials == null)\n                {\n                    fireRegistrationStateChanged(\n                        getRegistrationState(),\n                        RegistrationState.UNREGISTERED,\n                        RegistrationStateChangeEvent.REASON_USER_REQUEST,\n                        \"\");\n                    return;\n                }\n\n                //extract the password the user passed us.\n                char[] pass = credentials.getPassword();\n\n                // the user didn't provide us a password (canceled the operation)\n                if(pass == null)\n                {\n                    fireRegistrationStateChanged(\n                        getRegistrationState(),\n                        RegistrationState.UNREGISTERED,\n                        RegistrationStateChangeEvent.REASON_USER_REQUEST,\n                        \"\");\n                    return;\n                }\n                password = new String(pass);\n\n                if (credentials.isPasswordPersistent())\n                    protocolProviderFactory.storePassword(accountID, password);\n            }\n\n            messenger\n                = MsnMessengerFactory\n                    .createMsnMessenger(accountID.getUserID(), password);\n\n            /*\n             * We've just created the messenger so we're sure we haven't\n             * received a logout for it.\n             */\n            logoutReceived = false;\n            messenger.addMessengerListener(new MsnConnectionListener());\n\n            persistentPresence.setMessenger(messenger);\n            typingNotifications.setMessenger(messenger);\n\n            try\n            {\n                messenger.login();\n            }\n            catch (UnresolvedAddressException ex)\n            {\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.CONNECTION_FAILED,\n                    RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,\n                    null);\n            }\n        }\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Makes the service implementation close all open sockets and release\n     * any resources that it might have taken and prepare for\n     * shutdown/garbage collection.\n     */\n    public void shutdown()\n    {\n        synchronized(initializationLock){\n            if (messenger != null)\n            {\n                messenger.logout();\n                messenger = null;\n            }\n            isInitialized = false;\n        }\n    }","id":100621,"modified_method":"/**\n     * Makes the service implementation close all open sockets and release\n     * any resources that it might have taken and prepare for\n     * shutdown/garbage collection.\n     */\n    public void shutdown()\n    {\n        synchronized(initializationLock)\n        {\n            unregister(false);\n            messenger = null;\n        }\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Unregister and fire the event if requested\n     * @param fireEvent boolean\n     */\n    void unregister(boolean fireEvent)\n    {\n        RegistrationState currRegState = getRegistrationState();\n\n        if(messenger != null)\n            messenger.logout();\n\n        if(fireEvent)\n        {\n            fireRegistrationStateChanged(\n                currRegState,\n                RegistrationState.UNREGISTERED,\n                RegistrationStateChangeEvent.REASON_USER_REQUEST, null);\n        }\n    }","id":100622,"modified_method":"/**\n     * Unregister and fire the event if requested\n     * @param fireEvent boolean\n     */\n    void unregister(boolean fireEvent)\n    {\n        RegistrationState currRegState = getRegistrationState();\n\n        // The synchronization is for logoutReceived at least.\n        synchronized (initializationLock)\n        {\n            if((messenger != null) && !logoutReceived)\n                messenger.logout();\n        }\n\n        if(fireEvent)\n            fireRegistrationStateChanged(\n                currRegState,\n                RegistrationState.UNREGISTERED,\n                RegistrationStateChangeEvent.REASON_USER_REQUEST,\n                null);\n    }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void exceptionCaught(MsnMessenger msnMessenger,\n                                    Throwable throwable)\n        {\n            if(throwable instanceof IncorrectPasswordException)\n            {\n                unregister(false);\n                MsnActivator.getProtocolProviderFactory().\n                    storePassword(getAccountID(), null);\n\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.AUTHENTICATION_FAILED,\n                    RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,\n                    \"Incorrect Password\");\n\n                // We try to reconnect and ask user to retype password.\n                reconnect(SecurityAuthority.WRONG_PASSWORD);\n            }\n            else if(throwable instanceof SocketException)\n            {\n                // in case of SocketException just fire event and not trigger\n                // unregister it will cause SocketException again and will loop\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.CONNECTION_FAILED,\n                    RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,\n                    null);\n            }\n            else if(throwable instanceof UnknownHostException)\n            {\n                unregister(false);\n\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.CONNECTION_FAILED,\n                    RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,\n                    \"A network error occured. Could not connect to server.\");\n            }\n            else\n            {\n                if(throwable instanceof MsnProtocolException)\n                {\n                    MsnProtocolException exception =\n                        (MsnProtocolException)throwable;\n\n                    logger.error(\"Error in Msn lib \", exception);\n\n                    switch(exception.getErrorCode())\n                    {\n                        case 500:\n                        case 540:\n                        case 601:\n                            if(isRegistered())\n                            {\n                                unregister(false);\n                                fireRegistrationStateChanged(\n                                    getRegistrationState(),\n                                    RegistrationState.UNREGISTERED,\n                                    RegistrationStateChangeEvent.\n                                    REASON_INTERNAL_ERROR, null);\n                            }\n                            break;\n                        case 911:\n                            if(isRegistered())\n                            {\n                                unregister(false);\n                                MsnActivator.getProtocolProviderFactory().\n                                    storePassword(getAccountID(), null);\n                                fireRegistrationStateChanged(\n                                    getRegistrationState(),\n                                    RegistrationState.AUTHENTICATION_FAILED,\n                                    RegistrationStateChangeEvent.\n                                    REASON_AUTHENTICATION_FAILED, null);\n\n                                // We try to reconnect and ask user to retype\n                                // password.\n                                reconnect(SecurityAuthority.WRONG_PASSWORD);\n                            }\n                            break;\n                    }\n\n                    return;\n                }\n\n                logger.error(\"Error in Msn lib \", throwable);\n\n//                We don't want to disconnect on any error, that's why we're\n//                commenting the following lines for now.\n//\n//                if(isRegistered())\n//                {\n//                    unregister(false);\n//                    fireRegistrationStateChanged(\n//                        getRegistrationState(),\n//                        RegistrationState.UNREGISTERED,\n//                        RegistrationStateChangeEvent.REASON_NOT_SPECIFIED, null);\n//                }\n            }\n        }","id":100623,"modified_method":"public void exceptionCaught(MsnMessenger msnMessenger,\n                                    Throwable throwable)\n        {\n            if(throwable instanceof IncorrectPasswordException)\n            {\n                unregister(false);\n                MsnActivator.getProtocolProviderFactory().\n                    storePassword(getAccountID(), null);\n\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.AUTHENTICATION_FAILED,\n                    RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,\n                    \"Incorrect Password\");\n\n                // We try to reconnect and ask user to retype password.\n                reconnect(SecurityAuthority.WRONG_PASSWORD);\n            }\n            else if(throwable instanceof SocketException)\n            {\n                // in case of SocketException just fire event and not trigger\n                // unregister it will cause SocketException again and will loop\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.CONNECTION_FAILED,\n                    RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,\n                    null);\n            }\n            else if(throwable instanceof UnknownHostException)\n            {\n                unregister(false);\n\n                fireRegistrationStateChanged(\n                    getRegistrationState(),\n                    RegistrationState.CONNECTION_FAILED,\n                    RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,\n                    \"A network error occured. Could not connect to server.\");\n            }\n            else if(throwable instanceof MsnProtocolException)\n            {\n                MsnProtocolException exception =\n                    (MsnProtocolException)throwable;\n\n                logger.error(\"Error in Msn lib \", exception);\n\n                switch(exception.getErrorCode())\n                {\n                case 500:\n                case 540:\n                case 601:\n                    if(isRegistered())\n                    {\n                        unregister(false);\n                        fireRegistrationStateChanged(\n                            getRegistrationState(),\n                            RegistrationState.UNREGISTERED,\n                            RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,\n                            null);\n                    }\n                    break;\n                case 911:\n                    if(isRegistered())\n                    {\n                        unregister(false);\n                        MsnActivator.getProtocolProviderFactory().\n                            storePassword(getAccountID(), null);\n                        fireRegistrationStateChanged(\n                            getRegistrationState(),\n                            RegistrationState.AUTHENTICATION_FAILED,\n                            RegistrationStateChangeEvent\n                                .REASON_AUTHENTICATION_FAILED,\n                            null);\n\n                        // We try to reconnect and ask user to retype\n                        // password.\n                        reconnect(SecurityAuthority.WRONG_PASSWORD);\n                    }\n                    break;\n                }\n            }\n            else\n            {\n                logger.error(\"Error in Msn lib \", throwable);\n\n//                We don't want to disconnect on any error, that's why we're\n//                commenting the following lines for now.\n//\n//                if(isRegistered())\n//                {\n//                    unregister(false);\n//                    fireRegistrationStateChanged(\n//                        getRegistrationState(),\n//                        RegistrationState.UNREGISTERED,\n//                        RegistrationStateChangeEvent.REASON_NOT_SPECIFIED, null);\n//                }\n            }\n        }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void logout(MsnMessenger msnMessenger)\n        {\n            logger.trace(\"logout\");\n            unregister(true);\n//            if(isRegistered())\n//                fireRegistrationStateChanged(\n//                    getRegistrationState(),\n//                    RegistrationState.UNREGISTERED,\n//                    RegistrationStateChangeEvent.REASON_NOT_SPECIFIED, null);\n        }","id":100624,"modified_method":"public void logout(MsnMessenger msnMessenger)\n        {\n            logger.trace(\"logout\");\n\n            // The synchronization is for logoutReceived at least.\n            synchronized (initializationLock)\n            {\n                logoutReceived = true;\n                unregister(true);\n            }\n        }","commit_id":"0f148ad9c13d7e197d7ed14c8024a919fa289473","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void sendJFKMessage4(int version,int negType,int phase,byte[] nonceInitiator,byte[] nonceResponder,byte[] initiatorExponential,byte[] responderExponential, BlockCipher c, byte[] Ke, byte[] Ka, byte[] authenticator, byte[] hisRef, PeerNode pn, Peer replyTo, boolean unknownInitiator, int setupType)\n\t{\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Sending a JFK(4) message to \"+pn.getPeer());\n\t\tlong t1=System.currentTimeMillis();\n\t\tNativeBigInteger _responderExponential = new NativeBigInteger(1,responderExponential);\n\t\tNativeBigInteger _initiatorExponential = new NativeBigInteger(1,initiatorExponential);\n\t\t\n\t\tbyte[] myRef = crypto.myCompressedSetupRef();\n\t\tbyte[] data = new byte[8 + myRef.length + hisRef.length];\n\t\tSystem.arraycopy(Fields.longToBytes(node.bootID), 0, data, 0, 8);\n\t\tSystem.arraycopy(myRef, 0, data, 8, myRef.length);\n\t\tSystem.arraycopy(hisRef, 0, data, 8 + myRef.length, hisRef.length);\n\t\t\n\t\tbyte[] messageHash = SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _initiatorExponential, _responderExponential, pn.identity, data));\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Message hash: \"+HexUtil.bytesToHex(messageHash));\n\t\tDSASignature localSignature = crypto.sign(messageHash);\n\t\tbyte[] r = localSignature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = localSignature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\t\n\t\tPCFBMode pk=PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tbyte[] iv=new byte[ivLength];\n\t\tnode.random.nextBytes(iv);\n\t\tpk.reset(iv);\n\t\tbyte[] cyphertext = new byte[JFK_PREFIX_RESPONDER.length + ivLength + Node.SIGNATURE_PARAMETER_LENGTH * 2 + data.length];\n\t\tint cleartextOffset = 0;\n\t\tSystem.arraycopy(JFK_PREFIX_RESPONDER, 0, cyphertext, cleartextOffset, JFK_PREFIX_RESPONDER.length);\n\t\tcleartextOffset += JFK_PREFIX_RESPONDER.length;\n\t\tSystem.arraycopy(iv, 0, cyphertext, cleartextOffset, ivLength);\n\t\tcleartextOffset += ivLength;\n\t\tSystem.arraycopy(r, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(data, 0, cyphertext, cleartextOffset, data.length);\n\t\tcleartextOffset += data.length;\n\t\t// Now encrypt the cleartext[Signature]\n\t\tint cleartextToEncypherOffset = JFK_PREFIX_RESPONDER.length + ivLength;\n\t\tpk.blockEncipher(cyphertext, cleartextToEncypherOffset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// We compute the HMAC of (prefix + iv + signature)\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tbyte[] hmac = mac.mac(Ka, cyphertext, HASH_LENGTH);\n\t\t\n\t\t// Message4 = hmac + IV + encryptedSignature\n\t\tbyte[] message4 = new byte[HASH_LENGTH + ivLength + (cyphertext.length - cleartextToEncypherOffset)]; \n\t\tint offset = 0;\n\t\tSystem.arraycopy(hmac, 0, message4, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\tSystem.arraycopy(iv, 0, message4, offset, ivLength);\n\t\toffset += ivLength;\n\t\tSystem.arraycopy(cyphertext, cleartextToEncypherOffset, message4, offset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// cache the message\n\t\tsynchronized (authenticatorCache) {\n\t\t\tif(!maybeResetTransientKey())\n\t\t\t\tauthenticatorCache.put(authenticator, message4);\n\t\t}\n\t\t\n\t\tif(unknownInitiator)\n\t\t\tsendAnonAuthPacket(1, 2, 3, setupType, message4, pn, replyTo, crypto.anonSetupCipher);\n\t\telse\n\t\t\tsendAuthPacket(1, 2, 3, message4, pn, replyTo);\n\t\tlong t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message4 timeout error:Sending packet for\"+pn.getPeer());\n\t}","id":100625,"modified_method":"private void sendJFKMessage4(int version,int negType,int phase,byte[] nonceInitiator,byte[] nonceResponder,byte[] initiatorExponential,byte[] responderExponential, BlockCipher c, byte[] Ke, byte[] Ka, byte[] authenticator, byte[] hisRef, PeerNode pn, Peer replyTo, boolean unknownInitiator, int setupType, boolean bothNoderefs)\n\t{\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Sending a JFK(4) message to \"+pn.getPeer());\n\t\tlong t1=System.currentTimeMillis();\n\t\tNativeBigInteger _responderExponential = new NativeBigInteger(1,responderExponential);\n\t\tNativeBigInteger _initiatorExponential = new NativeBigInteger(1,initiatorExponential);\n\t\t\n\t\tbyte[] myRef = crypto.myCompressedSetupRef();\n\t\tbyte[] data = new byte[8 + myRef.length + (bothNoderefs ? hisRef.length : 0)];\n\t\tSystem.arraycopy(Fields.longToBytes(node.bootID), 0, data, 0, 8);\n\t\tSystem.arraycopy(myRef, 0, data, 8, myRef.length);\n\t\tif(bothNoderefs)\n\t\t\tSystem.arraycopy(hisRef, 0, data, 8 + myRef.length, hisRef.length);\n\t\t\n\t\tbyte[] messageHash = SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _initiatorExponential, _responderExponential, pn.identity, data));\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Message hash: \"+HexUtil.bytesToHex(messageHash));\n\t\tDSASignature localSignature = crypto.sign(messageHash);\n\t\tbyte[] r = localSignature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = localSignature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\t\n\t\tPCFBMode pk=PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tbyte[] iv=new byte[ivLength];\n\t\tnode.random.nextBytes(iv);\n\t\tpk.reset(iv);\n\t\tbyte[] cyphertext = new byte[JFK_PREFIX_RESPONDER.length + ivLength + Node.SIGNATURE_PARAMETER_LENGTH * 2 + data.length];\n\t\tint cleartextOffset = 0;\n\t\tSystem.arraycopy(JFK_PREFIX_RESPONDER, 0, cyphertext, cleartextOffset, JFK_PREFIX_RESPONDER.length);\n\t\tcleartextOffset += JFK_PREFIX_RESPONDER.length;\n\t\tSystem.arraycopy(iv, 0, cyphertext, cleartextOffset, ivLength);\n\t\tcleartextOffset += ivLength;\n\t\tSystem.arraycopy(r, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(data, 0, cyphertext, cleartextOffset, data.length);\n\t\tcleartextOffset += data.length;\n\t\t// Now encrypt the cleartext[Signature]\n\t\tint cleartextToEncypherOffset = JFK_PREFIX_RESPONDER.length + ivLength;\n\t\tpk.blockEncipher(cyphertext, cleartextToEncypherOffset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// We compute the HMAC of (prefix + iv + signature)\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tbyte[] hmac = mac.mac(Ka, cyphertext, HASH_LENGTH);\n\t\t\n\t\t// Message4 = hmac + IV + encryptedSignature\n\t\tbyte[] message4 = new byte[HASH_LENGTH + ivLength + (cyphertext.length - cleartextToEncypherOffset)]; \n\t\tint offset = 0;\n\t\tSystem.arraycopy(hmac, 0, message4, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\tSystem.arraycopy(iv, 0, message4, offset, ivLength);\n\t\toffset += ivLength;\n\t\tSystem.arraycopy(cyphertext, cleartextToEncypherOffset, message4, offset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// cache the message\n\t\tsynchronized (authenticatorCache) {\n\t\t\tif(!maybeResetTransientKey())\n\t\t\t\tauthenticatorCache.put(authenticator, message4);\n\t\t}\n\t\t\n\t\tif(unknownInitiator)\n\t\t\tsendAnonAuthPacket(1, 2, 3, setupType, message4, pn, replyTo, crypto.anonSetupCipher);\n\t\telse\n\t\t\tsendAuthPacket(1, 2, 3, message4, pn, replyTo);\n\t\tlong t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message4 timeout error:Sending packet for\"+pn.getPeer());\n\t}","commit_id":"baf545305fb894b6e7e8f12859f670346bedfc59","url":"https://github.com/freenet/fred"},{"original_method":"private void processJFKMessage3(byte[] payload, int inputOffset, PeerNode pn,Peer replyTo, boolean oldOpennetPeer, boolean unknownInitiator, int setupType)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(3) message, processing it - \"+pn);\n\t\t\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tNONCE_SIZE*2 + DiffieHellman.modulusLengthInBytes()*2 +\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // authenticator\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // it's at least a signature\n\t\t\t\t\t\t\t\t\t8;\t\t\t  // a bootid\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(3), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Ni\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceInitiator, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// Nr\n\t\tbyte[] nonceResponder = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceResponder, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// g^i\n\t\tbyte[] initiatorExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, initiatorExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t// g^r\n\t\tbyte[] responderExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, responderExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t\n\t\tbyte[] authenticator = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, authenticator, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\n\t\t// FIXME: check the cache before or after the hmac verification ?\n\t\t// is it cheaper to wait for the lock on authenticatorCache or to verify the hmac ?\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(getTransientKey(), assembleJFKAuthenticator(responderExponential, initiatorExponential, nonceResponder, nonceInitiator, replyTo.getAddress().getAddress()) , authenticator)) {\n\t\t\tif(shouldLogErrorInHandshake(t1))\n\t\t\t\tLogger.normal(this, \"The HMAC doesn't match; let's discard the packet (either we rekeyed or we are victim of forgery) - JFK3 - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t// Check try to find the authenticator in the cache.\n\t\t// If authenticator is already present, indicates duplicate/replayed message3\n\t\t// Now simply transmit the corresponding message4\n\t\tObject message4 = null;\n\t\tsynchronized (authenticatorCache) {\n\t\t\tmessage4 = authenticatorCache.get(authenticator);\n\t\t}\n\t\tif(message4 != null) {\n\t\t\tLogger.normal(this, \"We replayed a message from the cache (shouldn't happen often) - \"+pn);\n\t\t\tsendAuthPacket(1, 2, 3, (byte[]) message4, pn, replyTo);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1, initiatorExponential);\n\t\tNativeBigInteger _ourExponential = new NativeBigInteger(1, responderExponential);\n\t\t\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tDiffieHellmanLightContext ctx = findContextByExponential(_ourExponential);\n\t\tif(ctx == null) {\n\t\t\tLogger.error(this, \"WTF? the HMAC verified but we don't know about that exponential! SHOULDN'T HAPPEN! - JFK3 - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\tBigInteger computedExponential = ctx.getHMACKey(_hisExponential, Global.DHgroupA);\n\t\tbyte[] Ks = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"0\");\n\t\tbyte[] Ke = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"1\");\n\t\tbyte[] Ka = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"2\");\n\t\tc.initialize(Ke);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"I\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_INITIATOR.length + payload.length - inputOffset];\n\t\tSystem.arraycopy(JFK_PREFIX_INITIATOR, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_INITIATOR.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_INITIATOR.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\tif(!mac.verify(Ka, decypheredPayload, hmac)) {\n\t\t\tLogger.error(this, \"The inner-HMAC doesn't match; let's discard the packet JFK(3) - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * Node Data (starting with BootID)\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length -8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// construct the peernode\n\t\tif(unknownInitiator) {\n\t\t\tpn = getPeerNodeFromUnknownInitiator(hisRef, setupType, pn);\n\t\t}\n\t\t\n\t\tif(pn == null) {\n\t\t\t// Reject\n\t\t\tLogger.normal(this, \"Rejecting...\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s)); \n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _hisExponential, _ourExponential, crypto.myIdentity, data))), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(3) - \"+pn.getPeer());\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// At this point we know it's from the peer, so we can report a packet received.\n\t\tpn.receivedPacket(true);\n\t\t\n\t\t// Send reply\n\t\tsendJFKMessage4(1, 2, 3, nonceInitiator, nonceResponder,initiatorExponential, responderExponential, c, Ke, Ka, authenticator, hisRef, pn, replyTo, unknownInitiator, setupType);\n\t\tc.initialize(Ks);\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\tif(pn.completedHandshake(bootID, hisRef, 0, hisRef.length, c, Ks, replyTo, true)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failure! with \"+pn.getPeer());\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message3 Processing packet for\"+pn.getPeer()+\" took \"+TimeUtil.formatTime(t2-t1, 3, true));\n\t}","id":100626,"modified_method":"private void processJFKMessage3(byte[] payload, int inputOffset, PeerNode pn,Peer replyTo, boolean oldOpennetPeer, boolean unknownInitiator, int setupType)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(3) message, processing it - \"+pn);\n\t\t\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tNONCE_SIZE*2 + DiffieHellman.modulusLengthInBytes()*2 +\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // authenticator\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // it's at least a signature\n\t\t\t\t\t\t\t\t\t8;\t\t\t  // a bootid\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(3), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Ni\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceInitiator, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// Nr\n\t\tbyte[] nonceResponder = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceResponder, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// g^i\n\t\tbyte[] initiatorExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, initiatorExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t// g^r\n\t\tbyte[] responderExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, responderExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t\n\t\tbyte[] authenticator = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, authenticator, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\n\t\t// FIXME: check the cache before or after the hmac verification ?\n\t\t// is it cheaper to wait for the lock on authenticatorCache or to verify the hmac ?\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(getTransientKey(), assembleJFKAuthenticator(responderExponential, initiatorExponential, nonceResponder, nonceInitiator, replyTo.getAddress().getAddress()) , authenticator)) {\n\t\t\tif(shouldLogErrorInHandshake(t1))\n\t\t\t\tLogger.normal(this, \"The HMAC doesn't match; let's discard the packet (either we rekeyed or we are victim of forgery) - JFK3 - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t// Check try to find the authenticator in the cache.\n\t\t// If authenticator is already present, indicates duplicate/replayed message3\n\t\t// Now simply transmit the corresponding message4\n\t\tObject message4 = null;\n\t\tsynchronized (authenticatorCache) {\n\t\t\tmessage4 = authenticatorCache.get(authenticator);\n\t\t}\n\t\tif(message4 != null) {\n\t\t\tLogger.normal(this, \"We replayed a message from the cache (shouldn't happen often) - \"+pn);\n\t\t\tsendAuthPacket(1, 2, 3, (byte[]) message4, pn, replyTo);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1, initiatorExponential);\n\t\tNativeBigInteger _ourExponential = new NativeBigInteger(1, responderExponential);\n\t\t\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tDiffieHellmanLightContext ctx = findContextByExponential(_ourExponential);\n\t\tif(ctx == null) {\n\t\t\tLogger.error(this, \"WTF? the HMAC verified but we don't know about that exponential! SHOULDN'T HAPPEN! - JFK3 - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\tBigInteger computedExponential = ctx.getHMACKey(_hisExponential, Global.DHgroupA);\n\t\tbyte[] Ks = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"0\");\n\t\tbyte[] Ke = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"1\");\n\t\tbyte[] Ka = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"2\");\n\t\tc.initialize(Ke);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"I\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_INITIATOR.length + payload.length - inputOffset];\n\t\tSystem.arraycopy(JFK_PREFIX_INITIATOR, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_INITIATOR.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_INITIATOR.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\tif(!mac.verify(Ka, decypheredPayload, hmac)) {\n\t\t\tLogger.error(this, \"The inner-HMAC doesn't match; let's discard the packet JFK(3) - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * Node Data (starting with BootID)\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length -8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// construct the peernode\n\t\tif(unknownInitiator) {\n\t\t\tpn = getPeerNodeFromUnknownInitiator(hisRef, setupType, pn);\n\t\t}\n\t\t\n\t\tif(pn == null) {\n\t\t\t// Reject\n\t\t\tLogger.normal(this, \"Rejecting...\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s)); \n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _hisExponential, _ourExponential, crypto.myIdentity, data))), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(3) - \"+pn.getPeer());\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// At this point we know it's from the peer, so we can report a packet received.\n\t\tpn.receivedPacket(true);\n\t\t\n\t\t// Send reply\n\t\tsendJFKMessage4(1, 2, 3, nonceInitiator, nonceResponder,initiatorExponential, responderExponential, \n\t\t\t\tc, Ke, Ka, authenticator, hisRef, pn, replyTo, unknownInitiator, setupType, true);\n\t\t// FIXME change last argument to FALSE when this build is mandatory.\n\t\t\n\t\tc.initialize(Ks);\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\tif(pn.completedHandshake(bootID, hisRef, 0, hisRef.length, c, Ks, replyTo, true)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failure! with \"+pn.getPeer());\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message3 Processing packet for\"+pn.getPeer()+\" took \"+TimeUtil.formatTime(t2-t1, 3, true));\n\t}","commit_id":"baf545305fb894b6e7e8f12859f670346bedfc59","url":"https://github.com/freenet/fred"},{"original_method":"private void processJFKMessage4(byte[] payload, int inputOffset, PeerNode pn, Peer replyTo, boolean oldOpennetPeer, boolean unknownInitiator, int setupType)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(4) message, processing it - \"+pn.getPeer());\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // the signature\n\t\t\t\t\t\t\t\t\tpn.jfkMyRef.length\t\t\t  // the bootid + mynoderef\n\t\t\t\t\t\t\t\t\t;\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn.getPeer()+\": \"+payload.length+\" after decryption in JFK(4), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\tbyte[] jfkBuffer = pn.getJFKBuffer();\n\t\tif(jfkBuffer == null) {\n\t\t\tLogger.normal(this, \"We have already handled this message... might be a replay or a bug - \"+pn);\n\t\t\treturn;\n\t\t}\n\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tc.initialize(pn.jfkKe);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"R\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_RESPONDER.length + (payload.length-inputOffset)];\n\t\tSystem.arraycopy(JFK_PREFIX_RESPONDER, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_RESPONDER.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_RESPONDER.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, payload.length-inputOffset);\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(pn.jfkKa, decypheredPayload, hmac)) {\n\t\t\tLogger.normal(this, \"The digest-HMAC doesn't match; let's discard the packet - \"+pn.getPeer());\n\t\t\treturn;\n\t\t}\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length - decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * bootID, znoderef\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length - pn.jfkMyRef.length - 8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s));\n\t\tbyte[] locallyGeneratedText = new byte[NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes() * 2 + crypto.myIdentity.length + 8 /*bootID*/ + hisRef.length + pn.jfkMyRef.length];\n\t\tint bufferOffset = NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes()*2;\n\t\tSystem.arraycopy(jfkBuffer, 0, locallyGeneratedText, 0, bufferOffset);\n\t\tbyte[] identity = crypto.getIdentity(unknownInitiator);\n\t\tSystem.arraycopy(identity, 0, locallyGeneratedText, bufferOffset, identity.length);\n\t\tbufferOffset += identity.length;\n\t\t// bootID\n\t\tSystem.arraycopy(data, 0, locallyGeneratedText, bufferOffset, data.length - pn.jfkMyRef.length);\n\t\tbufferOffset += data.length - pn.jfkMyRef.length;\n\t\tSystem.arraycopy(pn.jfkMyRef, 0, locallyGeneratedText, bufferOffset, pn.jfkMyRef.length);\n\t\tbyte[] messageHash = SHA256.digest(locallyGeneratedText);\n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, messageHash), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(4) -\"+pn.getPeer()+\" message hash \"+HexUtil.bytesToHex(messageHash));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\t// We change the key\n\t\tc.initialize(pn.jfkKs);\n\t\tif(pn.completedHandshake(bootID, data, 8, data.length - 8, c, pn.jfkKs, replyTo, false)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failed!\");\n\t\t}\n\t\t\n\t\t// cleanup\n                // FIXME: maybe we should copy zeros/garbage into it before leaving it to the GC\n\t\tpn.setJFKBuffer(null);\n\t\tpn.jfkKa = null;\n\t\tpn.jfkKe = null;\n\t\tpn.jfkKs = null;\n\t\t// We want to clear it here so that new handshake requests\n\t\t// will be sent with a different DH pair\n\t\tpn.setKeyAgreementSchemeContext(null);\n\t\tsynchronized (pn) {\n\t\t\t// FIXME TRUE MULTI-HOMING: winner-takes-all, kill all other connection attempts since we can't deal with multiple active connections\n\t\t\t// Also avoids leaking\n\t\t\tpn.jfkNoncesSent.clear();\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message4 timeout error:Processing packet from \"+pn.getPeer());\n\t}","id":100627,"modified_method":"private boolean processJFKMessage4(byte[] payload, int inputOffset, PeerNode pn, Peer replyTo, boolean oldOpennetPeer, boolean unknownInitiator, int setupType, boolean bothNoderefs)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(4) message, processing it - \"+pn.getPeer());\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // the signature\n\t\t\t\t\t\t\t\t\tpn.jfkMyRef.length\t\t\t  // the bootid + mynoderef\n\t\t\t\t\t\t\t\t\t;\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn.getPeer()+\": \"+payload.length+\" after decryption in JFK(4), should be \"+(expectedLength + 3));\n\t\t\treturn false;\n\t\t}\n\t\tbyte[] jfkBuffer = pn.getJFKBuffer();\n\t\tif(jfkBuffer == null) {\n\t\t\tLogger.normal(this, \"We have already handled this message... might be a replay or a bug - \"+pn);\n\t\t\treturn false;\n\t\t}\n\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tc.initialize(pn.jfkKe);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"R\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_RESPONDER.length + (payload.length-inputOffset)];\n\t\tSystem.arraycopy(JFK_PREFIX_RESPONDER, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_RESPONDER.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_RESPONDER.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, payload.length-inputOffset);\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(pn.jfkKa, decypheredPayload, hmac)) {\n\t\t\tLogger.normal(this, \"The digest-HMAC doesn't match; let's discard the packet - \"+pn.getPeer());\n\t\t\treturn false;\n\t\t}\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length - decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * bootID, znoderef\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length - (bothNoderefs ? pn.jfkMyRef.length : 0) - 8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s));\n\t\tbyte[] locallyGeneratedText = new byte[NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes() * 2 + crypto.myIdentity.length + 8 /*bootID*/ + hisRef.length + pn.jfkMyRef.length];\n\t\tint bufferOffset = NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes()*2;\n\t\tSystem.arraycopy(jfkBuffer, 0, locallyGeneratedText, 0, bufferOffset);\n\t\tbyte[] identity = crypto.getIdentity(unknownInitiator);\n\t\tSystem.arraycopy(identity, 0, locallyGeneratedText, bufferOffset, identity.length);\n\t\tbufferOffset += identity.length;\n\t\t// bootID\n\t\tSystem.arraycopy(data, 0, locallyGeneratedText, bufferOffset, hisRef.length + 8);\n\t\tbufferOffset += hisRef.length + 8;\n\t\tSystem.arraycopy(pn.jfkMyRef, 0, locallyGeneratedText, bufferOffset, pn.jfkMyRef.length);\n\t\tbyte[] messageHash = SHA256.digest(locallyGeneratedText);\n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, messageHash), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(4) -\"+pn.getPeer()+\" message hash \"+HexUtil.bytesToHex(messageHash));\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\t// We change the key\n\t\tc.initialize(pn.jfkKs);\n\t\tif(pn.completedHandshake(bootID, data, 8, data.length - 8, c, pn.jfkKs, replyTo, false)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failed!\");\n\t\t}\n\t\t\n\t\t// cleanup\n                // FIXME: maybe we should copy zeros/garbage into it before leaving it to the GC\n\t\tpn.setJFKBuffer(null);\n\t\tpn.jfkKa = null;\n\t\tpn.jfkKe = null;\n\t\tpn.jfkKs = null;\n\t\t// We want to clear it here so that new handshake requests\n\t\t// will be sent with a different DH pair\n\t\tpn.setKeyAgreementSchemeContext(null);\n\t\tsynchronized (pn) {\n\t\t\t// FIXME TRUE MULTI-HOMING: winner-takes-all, kill all other connection attempts since we can't deal with multiple active connections\n\t\t\t// Also avoids leaking\n\t\t\tpn.jfkNoncesSent.clear();\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message4 timeout error:Processing packet from \"+pn.getPeer());\n\t\treturn true;\n\t}","commit_id":"baf545305fb894b6e7e8f12859f670346bedfc59","url":"https://github.com/freenet/fred"},{"original_method":"private void processDecryptedAuthAnonReply(byte[] payload, Peer replyTo, PeerNode pn) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\t\n\t\t/** Protocol version. Should be 1. */\n\t\tint version = payload[0];\n\t\t/** Negotiation type. 2 = JFK. Other types might indicate other DH variants, \n\t\t * or even non-DH-based algorithms such as password based key setup. */\n\t\tint negType = payload[1];\n\t\t/** Packet phase. */\n\t\tint packetType = payload[2];\n\t\t/** Setup type. See above. */\n\t\tint setupType = payload[3];\n\t\t\n\t\tif(logMINOR) Logger.minor(this, \"Received anonymous auth packet (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\", setup type=\"+setupType+\") from \"+replyTo+\"\");\n\t\t\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\t\tif(negType != 2) {\n\t\t\tLogger.error(this, \"Unknown neg type: \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Known setup types\n\t\tif(setupType != SETUP_OPENNET_SEEDNODE) {\n\t\t\tLogger.error(this, \"Unknown setup type \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// We are the INITIATOR.\n\t\t// Therefore, we can only get packets of phase 2 and 4 here.\n\t\t\n\t\tif(packetType == 1) {\n\t\t\t// Phase 2\n\t\t\tprocessJFKMessage2(payload, 4, pn, replyTo, true, setupType);\n\t\t} else if(packetType == 3) {\n\t\t\t// Phase 4\n\t\t\tprocessJFKMessage4(payload, 4, pn, replyTo, false, true, setupType);\n\t\t} else {\n\t\t\tLogger.error(this, \"Invalid phase \"+packetType+\" for anonymous-initiator (we are the responder)\");\n\t\t}\n\t}","id":100628,"modified_method":"private void processDecryptedAuthAnonReply(byte[] payload, Peer replyTo, PeerNode pn) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\t\n\t\t/** Protocol version. Should be 1. */\n\t\tint version = payload[0];\n\t\t/** Negotiation type. 2 = JFK. Other types might indicate other DH variants, \n\t\t * or even non-DH-based algorithms such as password based key setup. */\n\t\tint negType = payload[1];\n\t\t/** Packet phase. */\n\t\tint packetType = payload[2];\n\t\t/** Setup type. See above. */\n\t\tint setupType = payload[3];\n\t\t\n\t\tif(logMINOR) Logger.minor(this, \"Received anonymous auth packet (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\", setup type=\"+setupType+\") from \"+replyTo+\"\");\n\t\t\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\t\tif(negType != 2) {\n\t\t\tLogger.error(this, \"Unknown neg type: \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Known setup types\n\t\tif(setupType != SETUP_OPENNET_SEEDNODE) {\n\t\t\tLogger.error(this, \"Unknown setup type \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// We are the INITIATOR.\n\t\t// Therefore, we can only get packets of phase 2 and 4 here.\n\t\t\n\t\tif(packetType == 1) {\n\t\t\t// Phase 2\n\t\t\tprocessJFKMessage2(payload, 4, pn, replyTo, true, setupType);\n\t\t} else if(packetType == 3) {\n\t\t\t// Phase 4\n\t\t\tif(!processJFKMessage4(payload, 4, pn, replyTo, false, true, setupType, true))\n\t\t\t\tprocessJFKMessage4(payload, 4, pn, replyTo, false, true, setupType, false);\n\t\t} else {\n\t\t\tLogger.error(this, \"Invalid phase \"+packetType+\" for anonymous-initiator (we are the responder)\");\n\t\t}\n\t}","commit_id":"baf545305fb894b6e7e8f12859f670346bedfc59","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Process a decrypted, authenticated auth packet.\n\t * @param payload The packet payload, after it has been decrypted.\n\t */\n\tprivate void processDecryptedAuth(byte[] payload, PeerNode pn, Peer replyTo, boolean oldOpennetPeer) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\tif(pn.isDisabled()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Won't connect to a disabled peer (\"+pn+ ')');\n\t\t\treturn;  // We don't connect to disabled peers\n\t\t}\n\n\t\tlong now = System.currentTimeMillis();\n\t\tint delta = (int) (now - pn.lastSentPacketTime());\n\n\t\tint negType = payload[1];\n\t\tint packetType = payload[2];\n\t\tint version = payload[0];\n\n\t\tif(logMINOR) Logger.minor(this, \"Received auth packet for \"+pn.getPeer()+\" (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\") (last packet sent \"+TimeUtil.formatTime(delta, 2, true)+\" ago) from \"+replyTo+\"\");\n\n\t\t/* Format:\n\t\t * 1 byte - version number (1)\n\t\t * 1 byte - negotiation type (0 = simple DH, will not be supported when implement JFKi || 1 = StS)\n\t\t * 1 byte - packet type (0-3)\n\t\t */\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\n\t\tif(negType == 0) {\n\t\t\tLogger.error(this, \"Old ephemeral Diffie-Hellman (negType 0) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType == 1) {\n\t\t\tLogger.error(this, \"Old StationToStation (negType 1) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType==2){\n\t\t\t/*\n\t\t\t * We implement Just Fast Keying key management protocol with active identity protection\n\t\t\t * for the initiator and no identity protection for the responder\n\t\t\t * M1:\n\t\t\t * This is a straightforward DiffieHellman exponential.\n\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t * exponentials during different sessions while ensuring that the resulting session\n\t\t\t * key will be different,can be used to differentiate between parallel sessions \n\t\t\t * M2:\n\t\t\t * Responder replies with a signed copy of his own exponential, a random nonce and \n\t\t\t * an authenticator which provides sufficient defense against forgeries,replays\n\t\t\t * We slightly deviate JFK here;we do not send any public key information as specified in the JFK docs \n\t\t\t * M3:\n\t\t\t * Initiator echoes the data sent by the responder including the authenticator. \n\t\t\t * This helps the responder verify the authenticity of the returned data. \n\t\t\t * M4:\n\t\t\t * Encrypted message of the signature on both nonces, both exponentials using the same keys as in the previous message\n\t\t\t */ \n\t\t\tif(packetType<0 || packetType>3){\n\t\t\t\tLogger.error(this,\"Unknown PacketType\" + packetType + \"from\" + replyTo + \"from\" +pn); \n\t\t\t\treturn ;\n\t\t\t}\n\t\t\telse if(packetType==0){\n\t\t\t\t/*\n\t\t\t\t * Initiator- This is a straightforward DiffieHellman exponential.\n\t\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t\t * exponentials during different sessions while ensuring that the resulting\n\t\t\t\t * session key will be different,can be used to differentiate between\n\t\t\t\t * parallel sessions\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage1(payload,3,pn,replyTo,false,-1);\n\n\t\t\t}\n\t\t\telse if(packetType==1){\n\t\t\t\t/*\n\t\t\t\t * Responder replies with a signed copy of his own exponential, a random\n\t\t\t\t * nonce and an authenticator calculated from a transient hash key private\n\t\t\t\t * to the responder.\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage2(payload,3,pn,replyTo,false,-1);\n\t\t\t}\n\t\t\telse if(packetType==2){\n\t\t\t\t/*\n\t\t\t\t * Initiator echoes the data sent by the responder.These messages are\n\t\t\t\t * cached by the Responder.Receiving a duplicate message simply causes\n\t\t\t\t * the responder to Re-transmit the corresponding message4\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage3(payload, 3, pn, replyTo, oldOpennetPeer, false, -1);\n\t\t\t}\n\t\t\telse if(packetType==3){\n\t\t\t\t/*\n\t\t\t\t * Encrypted message of the signature on both nonces, both exponentials \n\t\t\t\t * using the same keys as in the previous message.\n\t\t\t\t * The signature is non-message recovering\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage4(payload, 3, pn, replyTo, oldOpennetPeer, false, -1);\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.error(this, \"Decrypted auth packet but unknown negotiation type \"+negType+\" from \"+replyTo+\" possibly from \"+pn);\n\t\t\treturn;\n\t\t}\n\t}","id":100629,"modified_method":"/**\n\t * Process a decrypted, authenticated auth packet.\n\t * @param payload The packet payload, after it has been decrypted.\n\t */\n\tprivate void processDecryptedAuth(byte[] payload, PeerNode pn, Peer replyTo, boolean oldOpennetPeer) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\tif(pn.isDisabled()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Won't connect to a disabled peer (\"+pn+ ')');\n\t\t\treturn;  // We don't connect to disabled peers\n\t\t}\n\n\t\tlong now = System.currentTimeMillis();\n\t\tint delta = (int) (now - pn.lastSentPacketTime());\n\n\t\tint negType = payload[1];\n\t\tint packetType = payload[2];\n\t\tint version = payload[0];\n\n\t\tif(logMINOR) Logger.minor(this, \"Received auth packet for \"+pn.getPeer()+\" (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\") (last packet sent \"+TimeUtil.formatTime(delta, 2, true)+\" ago) from \"+replyTo+\"\");\n\n\t\t/* Format:\n\t\t * 1 byte - version number (1)\n\t\t * 1 byte - negotiation type (0 = simple DH, will not be supported when implement JFKi || 1 = StS)\n\t\t * 1 byte - packet type (0-3)\n\t\t */\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\n\t\tif(negType == 0) {\n\t\t\tLogger.error(this, \"Old ephemeral Diffie-Hellman (negType 0) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType == 1) {\n\t\t\tLogger.error(this, \"Old StationToStation (negType 1) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType==2){\n\t\t\t/*\n\t\t\t * We implement Just Fast Keying key management protocol with active identity protection\n\t\t\t * for the initiator and no identity protection for the responder\n\t\t\t * M1:\n\t\t\t * This is a straightforward DiffieHellman exponential.\n\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t * exponentials during different sessions while ensuring that the resulting session\n\t\t\t * key will be different,can be used to differentiate between parallel sessions \n\t\t\t * M2:\n\t\t\t * Responder replies with a signed copy of his own exponential, a random nonce and \n\t\t\t * an authenticator which provides sufficient defense against forgeries,replays\n\t\t\t * We slightly deviate JFK here;we do not send any public key information as specified in the JFK docs \n\t\t\t * M3:\n\t\t\t * Initiator echoes the data sent by the responder including the authenticator. \n\t\t\t * This helps the responder verify the authenticity of the returned data. \n\t\t\t * M4:\n\t\t\t * Encrypted message of the signature on both nonces, both exponentials using the same keys as in the previous message\n\t\t\t */ \n\t\t\tif(packetType<0 || packetType>3){\n\t\t\t\tLogger.error(this,\"Unknown PacketType\" + packetType + \"from\" + replyTo + \"from\" +pn); \n\t\t\t\treturn ;\n\t\t\t}\n\t\t\telse if(packetType==0){\n\t\t\t\t/*\n\t\t\t\t * Initiator- This is a straightforward DiffieHellman exponential.\n\t\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t\t * exponentials during different sessions while ensuring that the resulting\n\t\t\t\t * session key will be different,can be used to differentiate between\n\t\t\t\t * parallel sessions\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage1(payload,3,pn,replyTo,false,-1);\n\n\t\t\t}\n\t\t\telse if(packetType==1){\n\t\t\t\t/*\n\t\t\t\t * Responder replies with a signed copy of his own exponential, a random\n\t\t\t\t * nonce and an authenticator calculated from a transient hash key private\n\t\t\t\t * to the responder.\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage2(payload,3,pn,replyTo,false,-1);\n\t\t\t}\n\t\t\telse if(packetType==2){\n\t\t\t\t/*\n\t\t\t\t * Initiator echoes the data sent by the responder.These messages are\n\t\t\t\t * cached by the Responder.Receiving a duplicate message simply causes\n\t\t\t\t * the responder to Re-transmit the corresponding message4\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage3(payload, 3, pn, replyTo, oldOpennetPeer, false, -1);\n\t\t\t}\n\t\t\telse if(packetType==3){\n\t\t\t\t/*\n\t\t\t\t * Encrypted message of the signature on both nonces, both exponentials \n\t\t\t\t * using the same keys as in the previous message.\n\t\t\t\t * The signature is non-message recovering\n\t\t\t\t */\n\t\t\t\tif(!processJFKMessage4(payload, 3, pn, replyTo, oldOpennetPeer, false, -1, true))\n\t\t\t\t\tprocessJFKMessage4(payload, 3, pn, replyTo, oldOpennetPeer, false, -1, false);\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.error(this, \"Decrypted auth packet but unknown negotiation type \"+negType+\" from \"+replyTo+\" possibly from \"+pn);\n\t\t\treturn;\n\t\t}\n\t}","commit_id":"baf545305fb894b6e7e8f12859f670346bedfc59","url":"https://github.com/freenet/fred"},{"original_method":"@Override\n  public boolean match(PsiElement element1, PsiElement element2) {\n    if (element1 == null || element2 == null) {\n      return element1 == element2;\n    }\n\n    final int cost1 = myTreeHasher.hash(element1, null, myNodeSpecificHasher).getCost();\n    final int cost2 = myTreeHasher.hash(element2, null, myNodeSpecificHasher).getCost();\n\n    if (cost1 < myDiscardCost || cost2 < myDiscardCost) {\n      return true;\n    }\n\n    final EquivalenceDescriptorProvider descriptorProvider = EquivalenceDescriptorProvider.getInstance(element1);\n    EquivalenceDescriptor descriptor1 = descriptorProvider != null ? descriptorProvider.buildDescriptor(element1) : null;\n    EquivalenceDescriptor descriptor2 = descriptorProvider != null ? descriptorProvider.buildDescriptor(element2) : null;\n\n    PsiElement newElement1 = SkippingHandler.skipNodeIfNeccessary(element1, descriptor1, myNodeFilter);\n    PsiElement newElement2 = SkippingHandler.skipNodeIfNeccessary(element2, descriptor2, myNodeFilter);\n\n    if (newElement1 != element1 || newElement2 != element2) {\n      return match(newElement1, newElement2);\n    }\n\n    /*if (descriptorProvider != null) {\n      if (newElement1 != element1) {\n        descriptor1 = descriptorProvider.buildDescriptor(newElement1);\n        element1 = newElement1;\n      }\n      if (newElement2 != element2) {\n        descriptor2 = descriptorProvider.buildDescriptor(newElement2);\n        element2 = newElement2;\n      }\n    }*/\n\n    if (!element1.getClass().equals(element2.getClass())) {\n      return false;\n    }\n\n    if (descriptor1 != null && descriptor2 != null) {\n      return StructuralSearchProfileBase.match(descriptor1, descriptor2, this, mySkippedRoles);\n    }\n\n    if (element1 instanceof LeafElement) {\n      IElementType elementType1 = ((LeafElement)element1).getElementType();\n      IElementType elementType2 = ((LeafElement)element2).getElementType();\n\n      if (!mySettings.DISTINGUISH_LITERALS &&\n          myNodeSpecificHasher.getDuplicatesProfile().getLiterals().contains(elementType1) &&\n          myNodeSpecificHasher.getDuplicatesProfile().getLiterals().contains(elementType2)) {\n        return true;\n      }\n      return element1.getText().equals(element2.getText());\n    }\n\n    if (element1.getFirstChild() == null && element1.getTextLength() == 0) {\n      return element2.getFirstChild() == null && element2.getTextLength() == 0;\n    }\n\n    return matchSequentially(new FilteringNodeIterator(new SiblingNodeIterator(element1.getFirstChild()), getNodeFilter()),\n                             new FilteringNodeIterator(new SiblingNodeIterator(element2.getFirstChild()), getNodeFilter()));\n  }","id":100630,"modified_method":"@Override\n  public boolean match(PsiElement element1, PsiElement element2) {\n    if (element1 == null || element2 == null) {\n      return element1 == element2;\n    }\n\n    final int cost1 = myTreeHasher.hash(element1, null, myNodeSpecificHasher).getCost();\n    final int cost2 = myTreeHasher.hash(element2, null, myNodeSpecificHasher).getCost();\n\n    if (cost1 < myDiscardCost || cost2 < myDiscardCost) {\n      return true;\n    }\n\n    final EquivalenceDescriptorProvider descriptorProvider = EquivalenceDescriptorProvider.getInstance(element1);\n    EquivalenceDescriptor descriptor1 = descriptorProvider != null ? descriptorProvider.buildDescriptor(element1) : null;\n    EquivalenceDescriptor descriptor2 = descriptorProvider != null ? descriptorProvider.buildDescriptor(element2) : null;\n\n    PsiElement newElement1 = SkippingHandler.skipNodeIfNeccessary(element1, descriptor1, myNodeFilter);\n    PsiElement newElement2 = SkippingHandler.skipNodeIfNeccessary(element2, descriptor2, myNodeFilter);\n\n    if (newElement1 != element1 || newElement2 != element2) {\n      return match(newElement1, newElement2);\n    }\n\n    /*if (descriptorProvider != null) {\n      if (newElement1 != element1) {\n        descriptor1 = descriptorProvider.buildDescriptor(newElement1);\n        element1 = newElement1;\n      }\n      if (newElement2 != element2) {\n        descriptor2 = descriptorProvider.buildDescriptor(newElement2);\n        element2 = newElement2;\n      }\n    }*/\n\n    if (!element1.getClass().equals(element2.getClass())) {\n      return false;\n    }\n\n    if (descriptor1 != null && descriptor2 != null) {\n      return StructuralSearchProfileBase.match(descriptor1, descriptor2, this, mySkippedRoles, myNodeSpecificHasher.getDuplicatesProfile());\n    }\n\n    if (element1 instanceof LeafElement) {\n      IElementType elementType1 = ((LeafElement)element1).getElementType();\n      IElementType elementType2 = ((LeafElement)element2).getElementType();\n\n      if (!mySettings.DISTINGUISH_LITERALS &&\n          myNodeSpecificHasher.getDuplicatesProfile().getLiterals().contains(elementType1) &&\n          myNodeSpecificHasher.getDuplicatesProfile().getLiterals().contains(elementType2)) {\n        return true;\n      }\n      return element1.getText().equals(element2.getText());\n    }\n\n    if (element1.getFirstChild() == null && element1.getTextLength() == 0) {\n      return element2.getFirstChild() == null && element2.getTextLength() == 0;\n    }\n\n    return matchSequentially(new FilteringNodeIterator(new SiblingNodeIterator(element1.getFirstChild()), getNodeFilter()),\n                             new FilteringNodeIterator(new SiblingNodeIterator(element2.getFirstChild()), getNodeFilter()));\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private EquivalenceDescriptorBuilder add(SingleChildDescriptor.MyType type, PsiElement element) {\n    //element = SkippingHandler.skipNodeIfNeccessary(element);\n    mySingleChildDescriptors.add(new SingleChildDescriptor(type, element, this));\n    return this;\n  }","id":100631,"modified_method":"private EquivalenceDescriptorBuilder add(SingleChildDescriptor.MyType type, PsiElement element) {\n    //element = SkippingHandler.skipNodeIfNeccessary(element);\n    mySingleChildDescriptors.add(new SingleChildDescriptor(type, element));\n    return this;\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public EquivalenceDescriptor buildDescriptor(@NotNull PsiElement e) {\n    final EquivalenceDescriptorBuilder builder = new EquivalenceDescriptorBuilder();\n\n    if (e instanceof GrVariableDeclaration) {\n      return builder.elements(((GrVariableDeclaration)e).getVariables());\n    }\n    else if (e instanceof GrParameter) {\n      final GrParameter p = (GrParameter)e;\n      return builder\n        .element(p.getNameIdentifierGroovy())\n        .optionally(p.getTypeElementGroovy())\n        .optionallyInPattern(p.getDefaultInitializer())\n        .role(p.getNameIdentifierGroovy(), ChildRole.VARIABLE_NAME);\n    }\n    else if (e instanceof GrVariable) {\n      final GrVariable v = (GrVariable)e;\n      return builder\n        .element(v.getNameIdentifierGroovy())\n        .optionally(v.getTypeElementGroovy())\n        .optionallyInPattern(v.getInitializerGroovy())\n        .role(v.getNameIdentifierGroovy(), ChildRole.VARIABLE_NAME);\n    }\n    else if (e instanceof GrMethod) {\n      final GrMethod m = (GrMethod)e;\n      return builder\n        .element(m.getNameIdentifierGroovy())\n        .elements(m.getParameters())\n        .optionally(m.getReturnTypeElementGroovy())\n        .optionallyInPattern(m.getBlock())\n        .role(m.getNameIdentifierGroovy(), ChildRole.FUNCTION_NAME);\n    }\n    else if (e instanceof GrTypeDefinitionBody) {\n      final GrTypeDefinitionBody b = (GrTypeDefinitionBody)e;\n      return builder\n        .inAnyOrder(b.getFields())\n        .inAnyOrder(b.getGroovyMethods())\n        .inAnyOrder(b.getInitializers())\n        .inAnyOrder(b.getInnerClasses());\n    }\n    else if (e instanceof GrTypeDefinition) {\n      GrTypeDefinition d = (GrTypeDefinition)e;\n      return builder.element(d.getNameIdentifierGroovy())\n        .optionallyInPattern(d.getExtendsClause())\n        .optionallyInPattern(d.getImplementsClause())\n        .optionallyInPattern(d.getBody());\n    }\n    else if (e instanceof GrForInClause) {\n      final GrForInClause f = (GrForInClause)e;\n      return builder\n        .element(f.getDeclaredVariable())\n        .element(f.getIteratedExpression());\n    }\n    else if (e instanceof GrReferenceList) {\n      return builder.inAnyOrder(((GrReferenceList)e).getReferenceElements());\n    }\n    else if (e instanceof GrCodeBlock) {\n      return builder.codeBlock(((GrStatementOwner)e).getStatements());\n    }\n\n    // todo: support 'object method()' <-> 'object.method()'\n\n    return null;\n  }","id":100632,"modified_method":"@Override\n  public EquivalenceDescriptor buildDescriptor(@NotNull PsiElement e) {\n    final EquivalenceDescriptorBuilder builder = new EquivalenceDescriptorBuilder();\n\n    if (e instanceof GrVariableDeclaration) {\n      return builder.elements(((GrVariableDeclaration)e).getVariables());\n    }\n    else if (e instanceof GrParameter) {\n      final GrParameter p = (GrParameter)e;\n      return builder\n        .element(p.getNameIdentifierGroovy())\n        .optionally(p.getTypeElementGroovy())\n        .optionallyInPattern(p.getDefaultInitializer());\n    }\n    else if (e instanceof GrVariable) {\n      final GrVariable v = (GrVariable)e;\n      return builder\n        .element(v.getNameIdentifierGroovy())\n        .optionally(v.getTypeElementGroovy())\n        .optionallyInPattern(v.getInitializerGroovy());\n    }\n    else if (e instanceof GrMethod) {\n      final GrMethod m = (GrMethod)e;\n      return builder\n        .element(m.getNameIdentifierGroovy())\n        .elements(m.getParameters())\n        .optionally(m.getReturnTypeElementGroovy())\n        .optionallyInPattern(m.getBlock());\n    }\n    else if (e instanceof GrTypeDefinitionBody) {\n      final GrTypeDefinitionBody b = (GrTypeDefinitionBody)e;\n      return builder\n        .inAnyOrder(b.getFields())\n        .inAnyOrder(b.getGroovyMethods())\n        .inAnyOrder(b.getInitializers())\n        .inAnyOrder(b.getInnerClasses());\n    }\n    else if (e instanceof GrTypeDefinition) {\n      GrTypeDefinition d = (GrTypeDefinition)e;\n      return builder.element(d.getNameIdentifierGroovy())\n        .optionallyInPattern(d.getExtendsClause())\n        .optionallyInPattern(d.getImplementsClause())\n        .optionallyInPattern(d.getBody());\n    }\n    else if (e instanceof GrForInClause) {\n      final GrForInClause f = (GrForInClause)e;\n      return builder\n        .element(f.getDeclaredVariable())\n        .element(f.getIteratedExpression());\n    }\n    else if (e instanceof GrReferenceList) {\n      return builder.inAnyOrder(((GrReferenceList)e).getReferenceElements());\n    }\n    else if (e instanceof GrCodeBlock) {\n      return builder.codeBlock(((GrStatementOwner)e).getStatements());\n    }\n\n    // todo: support 'object method()' <-> 'object.method()'\n\n    return null;\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public EquivalenceDescriptor buildDescriptor(@NotNull PsiElement element) {\n    final EquivalenceDescriptorBuilder builder = new EquivalenceDescriptorBuilder();\n\n    if (element instanceof JSClass) {\n      final JSClass c = (JSClass)element;\n\n      // todo: make simplier api\n      final JSReferenceList extendsList = c.getExtendsList();\n      final JSReferenceList implementsList = c.getImplementsList();\n\n      return builder\n        .element(c.getNameIdentifier())\n        .childrenOptionally(c.getAttributeList())\n        .inAnyOrder(extendsList != null ? extendsList.getExpressions() : PsiElement.EMPTY_ARRAY)\n        .inAnyOrder(implementsList != null ? implementsList.getExpressions() : PsiElement.EMPTY_ARRAY)\n        .inAnyOrder(c.getFields())\n        .inAnyOrder(c.getFunctions());\n    }\n    else if (element instanceof JSVariable) {\n      final JSVariable v = (JSVariable)element;\n      return builder\n        .element(v.getNameIdentifier())\n        .optionally(v.getTypeElement())\n        .optionallyInPattern(v.getInitializer())\n        .role(v.getNameIdentifier(), ChildRole.VARIABLE_NAME);\n    }\n    else if (element instanceof JSFunction) {\n      final JSFunction f = (JSFunction)element;\n      return builder\n        .constant(f.getKind())\n        .element(f.getNameIdentifier())\n        .childrenOptionally(f.getAttributeList())\n        .children(f.getParameterList())\n        .optionally(f.getReturnTypeElement())\n        .optionallyInPattern(f.getBody())\n        .role(f.getNameIdentifier(), ChildRole.FUNCTION_NAME);\n    }\n    else if (element instanceof JSBlockStatement) {\n      return builder.codeBlock(((JSBlockStatement)element).getStatements());\n    }\n    else if (element instanceof JSParenthesizedExpression) {\n      return builder.element(((JSParenthesizedExpression)element).getInnerExpression());\n    }\n\n    return null;\n  }","id":100633,"modified_method":"@Override\n  public EquivalenceDescriptor buildDescriptor(@NotNull PsiElement element) {\n    final EquivalenceDescriptorBuilder builder = new EquivalenceDescriptorBuilder();\n\n    if (element instanceof JSClass) {\n      final JSClass c = (JSClass)element;\n\n      // todo: make simplier api\n      final JSReferenceList extendsList = c.getExtendsList();\n      final JSReferenceList implementsList = c.getImplementsList();\n\n      return builder\n        .element(c.getNameIdentifier())\n        .childrenOptionally(c.getAttributeList())\n        .inAnyOrder(extendsList != null ? extendsList.getExpressions() : PsiElement.EMPTY_ARRAY)\n        .inAnyOrder(implementsList != null ? implementsList.getExpressions() : PsiElement.EMPTY_ARRAY)\n        .inAnyOrder(c.getFields())\n        .inAnyOrder(c.getFunctions());\n    }\n    else if (element instanceof JSVariable) {\n      final JSVariable v = (JSVariable)element;\n      return builder\n        .element(v.getNameIdentifier())\n        .optionally(v.getTypeElement())\n        .optionallyInPattern(v.getInitializer());\n    }\n    else if (element instanceof JSFunction) {\n      final JSFunction f = (JSFunction)element;\n      return builder\n        .constant(f.getKind())\n        .element(f.getNameIdentifier())\n        .childrenOptionally(f.getAttributeList())\n        .children(f.getParameterList())\n        .optionally(f.getReturnTypeElement())\n        .optionallyInPattern(f.getBody());\n    }\n    else if (element instanceof JSBlockStatement) {\n      return builder.codeBlock(((JSBlockStatement)element).getStatements());\n    }\n    else if (element instanceof JSParenthesizedExpression) {\n      return builder.element(((JSParenthesizedExpression)element).getInnerExpression());\n    }\n\n    return null;\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private Pair<Integer, Integer> computeHash(SingleChildDescriptor childDescriptor,\n                                             PsiFragment parentFragment,\n                                             NodeSpecificHasher nodeSpecificHasher) {\n\n    final PsiElement element = childDescriptor.getElement();\n    if (element == null) {\n      return new Pair<Integer, Integer>(0, 0);\n    }\n    final Pair<Integer, Integer> result = doComputeHash(childDescriptor, parentFragment, nodeSpecificHasher);\n\n    if (result != null) {\n      final ChildRole role = childDescriptor.getRole();\n      if (role != null) {\n        switch (role) {\n          case VARIABLE_NAME:\n            if (!mySettings.DISTINGUISH_VARIABLES) {\n              return new Pair<Integer, Integer>(0, result.second);\n            }\n            break;\n          case FIELD_NAME:\n            if (!mySettings.DISTINGUISH_FIELDS) {\n              return new Pair<Integer, Integer>(0, result.second);\n            }\n            break;\n          case FUNCTION_NAME:\n            if (!mySettings.DISTINGUISH_METHODS) {\n              return new Pair<Integer, Integer>(0, result.second);\n            }\n            break;\n        }\n      }\n    }\n    return result;\n  }","id":100634,"modified_method":"@NotNull\n  private Pair<Integer, Integer> computeHash(SingleChildDescriptor childDescriptor,\n                                             PsiFragment parentFragment,\n                                             NodeSpecificHasher nodeSpecificHasher) {\n\n    final PsiElement element = childDescriptor.getElement();\n    if (element == null) {\n      return new Pair<Integer, Integer>(0, 0);\n    }\n    final Pair<Integer, Integer> result = doComputeHash(childDescriptor, parentFragment, nodeSpecificHasher);\n\n    if (result != null) {\n      final ChildRole role = ((SSRNodeSpecificHasher)nodeSpecificHasher).getDuplicatesProfile().getRole(element);\n      if (role != null) {\n        switch (role) {\n          case VARIABLE_NAME:\n            if (!mySettings.DISTINGUISH_VARIABLES) {\n              return new Pair<Integer, Integer>(0, result.second);\n            }\n            break;\n          case FIELD_NAME:\n            if (!mySettings.DISTINGUISH_FIELDS) {\n              return new Pair<Integer, Integer>(0, result.second);\n            }\n            break;\n          case FUNCTION_NAME:\n            if (!mySettings.DISTINGUISH_METHODS) {\n              return new Pair<Integer, Integer>(0, result.second);\n            }\n            break;\n        }\n      }\n    }\n    return result;\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public SingleChildDescriptor(@NotNull MyType type, @Nullable PsiElement element, @NotNull EquivalenceDescriptor parentDescriptor) {\n    myType = type;\n    myElement = element;\n    myParentDescriptor = parentDescriptor;\n  }","id":100635,"modified_method":"public SingleChildDescriptor(@NotNull MyType type, @Nullable PsiElement element) {\n    myType = type;\n    myElement = element;\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean match(@NotNull EquivalenceDescriptor descriptor1,\n                              @NotNull EquivalenceDescriptor descriptor2,\n                              @NotNull AbstractMatchingVisitor g,\n                              @NotNull Set<ChildRole> skippedRoles) {\n\n    if (descriptor1.getSingleChildDescriptors().size() != descriptor2.getSingleChildDescriptors().size()) {\n      return false;\n    }\n\n    if (descriptor1.getMultiChildDescriptors().size() != descriptor2.getMultiChildDescriptors().size()) {\n      return false;\n    }\n\n    if (descriptor1.getCodeBlocks().size() != descriptor2.getCodeBlocks().size()) {\n      return false;\n    }\n\n    if (descriptor1.getConstants().size() != descriptor2.getConstants().size()) {\n      return false;\n    }\n\n    for (int i = 0, n = descriptor1.getConstants().size(); i < n; i++) {\n      Object childDescriptor1 = descriptor1.getConstants().get(i);\n      Object childDescriptor2 = descriptor2.getConstants().get(i);\n\n      if (!Comparing.equal(childDescriptor1, childDescriptor2)) {\n        return false;\n      }\n    }\n\n    for (int i = 0, n = descriptor1.getSingleChildDescriptors().size(); i < n; i++) {\n      SingleChildDescriptor childDescriptor1 = descriptor1.getSingleChildDescriptors().get(i);\n      SingleChildDescriptor childDescriptor2 = descriptor2.getSingleChildDescriptors().get(i);\n\n      if (!match(childDescriptor1, childDescriptor2, g, skippedRoles)) {\n        return false;\n      }\n    }\n\n    for (int i = 0, n = descriptor1.getMultiChildDescriptors().size(); i < n; i++) {\n      MultiChildDescriptor childDescriptor1 = descriptor1.getMultiChildDescriptors().get(i);\n      MultiChildDescriptor childDescriptor2 = descriptor2.getMultiChildDescriptors().get(i);\n\n      if (!match(childDescriptor1, childDescriptor2, g)) {\n        return false;\n      }\n    }\n\n    for (int i = 0, n = descriptor1.getCodeBlocks().size(); i < n; i++) {\n      final PsiElement[] codeBlock1 = descriptor1.getCodeBlocks().get(i);\n      final PsiElement[] codeBlock2 = descriptor2.getCodeBlocks().get(i);\n\n      if (!g.matchSequentially(codeBlock1, codeBlock2)) {\n        return false;\n      }\n    }\n\n    return true;\n  }","id":100636,"modified_method":"public static boolean match(@NotNull EquivalenceDescriptor descriptor1,\n                              @NotNull EquivalenceDescriptor descriptor2,\n                              @NotNull AbstractMatchingVisitor g,\n                              @NotNull Set<ChildRole> skippedRoles,\n                              @Nullable SSRDuplicatesProfile profile) {\n\n    if (descriptor1.getSingleChildDescriptors().size() != descriptor2.getSingleChildDescriptors().size()) {\n      return false;\n    }\n\n    if (descriptor1.getMultiChildDescriptors().size() != descriptor2.getMultiChildDescriptors().size()) {\n      return false;\n    }\n\n    if (descriptor1.getCodeBlocks().size() != descriptor2.getCodeBlocks().size()) {\n      return false;\n    }\n\n    if (descriptor1.getConstants().size() != descriptor2.getConstants().size()) {\n      return false;\n    }\n\n    for (int i = 0, n = descriptor1.getConstants().size(); i < n; i++) {\n      Object childDescriptor1 = descriptor1.getConstants().get(i);\n      Object childDescriptor2 = descriptor2.getConstants().get(i);\n\n      if (!Comparing.equal(childDescriptor1, childDescriptor2)) {\n        return false;\n      }\n    }\n\n    for (int i = 0, n = descriptor1.getSingleChildDescriptors().size(); i < n; i++) {\n      SingleChildDescriptor childDescriptor1 = descriptor1.getSingleChildDescriptors().get(i);\n      SingleChildDescriptor childDescriptor2 = descriptor2.getSingleChildDescriptors().get(i);\n\n      if (!match(childDescriptor1, childDescriptor2, g, skippedRoles, profile)) {\n        return false;\n      }\n    }\n\n    for (int i = 0, n = descriptor1.getMultiChildDescriptors().size(); i < n; i++) {\n      MultiChildDescriptor childDescriptor1 = descriptor1.getMultiChildDescriptors().get(i);\n      MultiChildDescriptor childDescriptor2 = descriptor2.getMultiChildDescriptors().get(i);\n\n      if (!match(childDescriptor1, childDescriptor2, g)) {\n        return false;\n      }\n    }\n\n    for (int i = 0, n = descriptor1.getCodeBlocks().size(); i < n; i++) {\n      final PsiElement[] codeBlock1 = descriptor1.getCodeBlocks().get(i);\n      final PsiElement[] codeBlock2 = descriptor2.getCodeBlocks().get(i);\n\n      if (!g.matchSequentially(codeBlock1, codeBlock2)) {\n        return false;\n      }\n    }\n\n    return true;\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitElement(PsiElement element) {\n      super.visitElement(element);\n\n      final EquivalenceDescriptorProvider descriptorProvider = EquivalenceDescriptorProvider.getInstance(element);\n\n      if (descriptorProvider != null) {\n        final EquivalenceDescriptor descriptor1 = descriptorProvider.buildDescriptor(element);\n        final EquivalenceDescriptor descriptor2 = descriptorProvider.buildDescriptor(myGlobalVisitor.getElement());\n\n        if (descriptor1 != null && descriptor2 != null) {\n          final boolean result = match(descriptor1, descriptor2, myGlobalVisitor, Collections.<ChildRole>emptySet());\n          myGlobalVisitor.setResult(result);\n          return;\n        }\n      }\n\n      if (isLiteral(element)) {\n        visitLiteral(element);\n        return;\n      }\n\n      if (canBePatternVariable(element) && myGlobalVisitor.getMatchContext().getPattern().isRealTypedVar(element)) {\n        PsiElement matchedElement = myGlobalVisitor.getElement();\n        PsiElement newElement = SkippingHandler.skipNodeIfNeccessary(matchedElement);\n        while (newElement != matchedElement) {\n          matchedElement = newElement;\n          newElement = SkippingHandler.skipNodeIfNeccessary(matchedElement);\n        }\n\n        myGlobalVisitor.setResult(myGlobalVisitor.handleTypedElement(element, matchedElement));\n      }\n      else if (element instanceof LeafElement) {\n        myGlobalVisitor.setResult(element.getText().equals(myGlobalVisitor.getElement().getText()));\n      }\n      else if (element.getFirstChild() == null && element.getTextLength() == 0) {\n        myGlobalVisitor.setResult(true);\n      }\n      else {\n        PsiElement patternChild = element.getFirstChild();\n        PsiElement matchedChild = myGlobalVisitor.getElement().getFirstChild();\n\n        FilteringNodeIterator patternIterator = new FilteringNodeIterator(patternChild);\n        FilteringNodeIterator matchedIterator = new FilteringNodeIterator(matchedChild);\n\n        boolean matched = myGlobalVisitor.matchSequentially(patternIterator, matchedIterator);\n        myGlobalVisitor.setResult(matched);\n      }\n    }","id":100637,"modified_method":"@Override\n    public void visitElement(PsiElement element) {\n      super.visitElement(element);\n\n      final EquivalenceDescriptorProvider descriptorProvider = EquivalenceDescriptorProvider.getInstance(element);\n\n      if (descriptorProvider != null) {\n        final EquivalenceDescriptor descriptor1 = descriptorProvider.buildDescriptor(element);\n        final EquivalenceDescriptor descriptor2 = descriptorProvider.buildDescriptor(myGlobalVisitor.getElement());\n\n        if (descriptor1 != null && descriptor2 != null) {\n          final boolean result = match(descriptor1, descriptor2, myGlobalVisitor, Collections.<ChildRole>emptySet(), null);\n          myGlobalVisitor.setResult(result);\n          return;\n        }\n      }\n\n      if (isLiteral(element)) {\n        visitLiteral(element);\n        return;\n      }\n\n      if (canBePatternVariable(element) && myGlobalVisitor.getMatchContext().getPattern().isRealTypedVar(element)) {\n        PsiElement matchedElement = myGlobalVisitor.getElement();\n        PsiElement newElement = SkippingHandler.skipNodeIfNeccessary(matchedElement);\n        while (newElement != matchedElement) {\n          matchedElement = newElement;\n          newElement = SkippingHandler.skipNodeIfNeccessary(matchedElement);\n        }\n\n        myGlobalVisitor.setResult(myGlobalVisitor.handleTypedElement(element, matchedElement));\n      }\n      else if (element instanceof LeafElement) {\n        myGlobalVisitor.setResult(element.getText().equals(myGlobalVisitor.getElement().getText()));\n      }\n      else if (element.getFirstChild() == null && element.getTextLength() == 0) {\n        myGlobalVisitor.setResult(true);\n      }\n      else {\n        PsiElement patternChild = element.getFirstChild();\n        PsiElement matchedChild = myGlobalVisitor.getElement().getFirstChild();\n\n        FilteringNodeIterator patternIterator = new FilteringNodeIterator(patternChild);\n        FilteringNodeIterator matchedIterator = new FilteringNodeIterator(matchedChild);\n\n        boolean matched = myGlobalVisitor.matchSequentially(patternIterator, matchedIterator);\n        myGlobalVisitor.setResult(matched);\n      }\n    }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean match(@NotNull SingleChildDescriptor childDescriptor1,\n                               @NotNull SingleChildDescriptor childDescriptor2,\n                               @NotNull AbstractMatchingVisitor g,\n                               @NotNull Set<ChildRole> skippedRoles) {\n    if (childDescriptor1.getType() != childDescriptor2.getType()) {\n      return false;\n    }\n\n    final PsiElement element1 = childDescriptor1.getElement();\n    final PsiElement element2 = childDescriptor2.getElement();\n\n    final ChildRole role1 = childDescriptor1.getRole();\n    final ChildRole role2 = childDescriptor2.getRole();\n\n    if (role1 == role2 && skippedRoles.contains(role1)) {\n      return true;\n    }\n\n    switch (childDescriptor1.getType()) {\n\n      case DEFAULT:\n        return g.match(element1, element2);\n\n      case OPTIONALLY_IN_PATTERN:\n      case OPTIONALLY:\n        return g.matchOptionally(element1, element2);\n\n      case CHILDREN:\n        return g.matchSons(element1, element2);\n\n      case CHILDREN_OPTIONALLY_IN_PATTERN:\n      case CHILDREN_OPTIONALLY:\n        return g.matchSonsOptionally(element1, element2);\n\n      case CHILDREN_IN_ANY_ORDER:\n        return g.matchSonsInAnyOrder(element1, element2);\n\n      default:\n        return false;\n    }\n  }","id":100638,"modified_method":"private static boolean match(@NotNull SingleChildDescriptor childDescriptor1,\n                               @NotNull SingleChildDescriptor childDescriptor2,\n                               @NotNull AbstractMatchingVisitor g,\n                               @NotNull Set<ChildRole> skippedRoles,\n                               @Nullable SSRDuplicatesProfile duplicatesProfile) {\n    if (childDescriptor1.getType() != childDescriptor2.getType()) {\n      return false;\n    }\n\n    final PsiElement element1 = childDescriptor1.getElement();\n    final PsiElement element2 = childDescriptor2.getElement();\n\n    if (duplicatesProfile != null) {\n      final ChildRole role1 = element1 != null ? duplicatesProfile.getRole(element1) : null;\n      final ChildRole role2 = element2 != null ? duplicatesProfile.getRole(element2) : null;\n\n      if (role1 == role2 && skippedRoles.contains(role1)) {\n        return true;\n      }\n    }\n\n    switch (childDescriptor1.getType()) {\n\n      case DEFAULT:\n        return g.match(element1, element2);\n\n      case OPTIONALLY_IN_PATTERN:\n      case OPTIONALLY:\n        return g.matchOptionally(element1, element2);\n\n      case CHILDREN:\n        return g.matchSons(element1, element2);\n\n      case CHILDREN_OPTIONALLY_IN_PATTERN:\n      case CHILDREN_OPTIONALLY:\n        return g.matchSonsOptionally(element1, element2);\n\n      case CHILDREN_IN_ANY_ORDER:\n        return g.matchSonsInAnyOrder(element1, element2);\n\n      default:\n        return false;\n    }\n  }","commit_id":"c5c6ca9c8ec4093de5aa394a4abbb2fcbbeba240","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Tests rejection of expressions in 1.1.0 model.\n     *\n     * @throws Exception\n     */\n    private void doTestRejectExpressions_1_1_0(KernelServicesBuilder builder) throws Exception {\n        KernelServices mainServices = builder.build();\n        assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(VERSION_1_1_0);\n        Assert.assertNotNull(legacyServices);\n        assertTrue(legacyServices.isSuccessfulBoot());\n\n        //Use the real xml with expressions for testing all the attributes\n        PathAddress subsystemAddress = PathAddress.pathAddress(pathElement(SUBSYSTEM, SUBSYSTEM_NAME));\n        checkFailedTransformedBootOperations(\n                mainServices,\n                VERSION_1_1_0,\n                builder.parseXmlResource(\"subsystem_with_expressions_compatible_1.1.0.xml\"),\n                new FailedOperationTransformationConfig());\n    }","id":100639,"modified_method":"/**\n     * Tests rejection of expressions in 1.1.0 model.\n     *\n     * @throws Exception\n     */\n    private void doTestRejectExpressions_1_1_0(KernelServicesBuilder builder) throws Exception {\n        KernelServices mainServices = builder.build();\n        assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(VERSION_1_1_0);\n        Assert.assertNotNull(legacyServices);\n        assertTrue(legacyServices.isSuccessfulBoot());\n\n        //Use the real xml with expressions for testing all the attributes\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, VERSION_1_1_0, parse(getSubsystemXml(\"subsystem.xml\")),\n                new FailedOperationTransformationConfig()\n                        .addFailedAttribute(PathAddress.pathAddress(NamingExtension.SUBSYSTEM_PATH, NamingSubsystemModel.BINDING_PATH),\n                                new FailedOperationTransformationConfig.NewAttributesConfig(NamingSubsystemModel.OBJECT_FACTORY_ENV))\n        );\n    }","commit_id":"9ac5612ffd018e6ad53dcd43bbc83988ed9caecb","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testTransformers_AS713() throws Exception {\n\n        String subsystemXml = readResource(\"subsystem.xml\");\n        KernelServicesBuilder builder = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(\n                subsystemXml);\n\n        builder.createLegacyKernelServicesBuilder(createAdditionalInitialization(), VERSION_1_1_0)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-naming:7.1.3.Final\")\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-controller:7.1.3.Final\")\n                .addParentFirstClassPattern(\"org.jboss.as.controller.*\")\n                //TODO get rid of this https://issues.jboss.org/browse/AS7-6528\n                .skipReverseControllerCheck();\n\n        KernelServices mainServices = builder.build();\n        KernelServices legacyServices = mainServices.getLegacyServices(VERSION_1_1_0);\n        assertNotNull(legacyServices);\n\n        checkSimpleBindingTransformation(mainServices, VERSION_1_1_0);\n        checkObjectFactoryWithEnvironmentBindingTransformation(mainServices, VERSION_1_1_0);\n\n        checkSuccessfulObjectFactoryWithEnvironmentBindingTransformation(mainServices, VERSION_1_1_0);\n        checkSuccessfulSimpleBindingTransformation(mainServices, VERSION_1_1_0);\n\n    }","id":100640,"modified_method":"@Test\n    public void testTransformers_AS713() throws Exception {\n        testTransformers(\"7.1.3.Final\");\n    }","commit_id":"9ac5612ffd018e6ad53dcd43bbc83988ed9caecb","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testTransformers_AS712() throws Exception {\n\n        String subsystemXml = readResource(\"subsystem.xml\");\n        KernelServicesBuilder builder = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(\n                subsystemXml);\n\n        builder.createLegacyKernelServicesBuilder(createAdditionalInitialization(), VERSION_1_1_0)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-naming:7.1.2.Final\")\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-controller:7.1.2.Final\")\n                .addParentFirstClassPattern(\"org.jboss.as.controller.*\")\n                //TODO get rid of this https://issues.jboss.org/browse/AS7-6528\n                .skipReverseControllerCheck();\n\n        KernelServices mainServices = builder.build();\n        KernelServices legacyServices = mainServices.getLegacyServices(VERSION_1_1_0);\n        assertNotNull(legacyServices);\n\n        checkSimpleBindingTransformation(mainServices, VERSION_1_1_0);\n        checkObjectFactoryWithEnvironmentBindingTransformation(mainServices, VERSION_1_1_0);\n\n        checkSuccessfulObjectFactoryWithEnvironmentBindingTransformation(mainServices, VERSION_1_1_0);\n        checkSuccessfulSimpleBindingTransformation(mainServices, VERSION_1_1_0);\n\n    }","id":100641,"modified_method":"@Test\n    public void testTransformers_AS712() throws Exception {\n        testTransformers(\"7.1.2.Final\");\n    }","commit_id":"9ac5612ffd018e6ad53dcd43bbc83988ed9caecb","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void initialize(ExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, MANAGEMENT_API_MAJOR_VERSION,\n                MANAGEMENT_API_MINOR_VERSION, MANAGEMENT_API_MICRO_VERSION);\n\n        final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(NamingSubsystemRootResourceDefinition.INSTANCE);\n\n        registration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION, GenericSubsystemDescribeHandler.INSTANCE);\n\n        registration.registerSubModel(NamingBindingResourceDefinition.INSTANCE);\n        registration.registerSubModel(RemoteNamingResourceDefinition.INSTANCE);\n\n        if (context.isRuntimeOnlyRegistrationValid()) {\n            registration.registerOperationHandler(NamingSubsystemRootResourceDefinition.JNDI_VIEW, JndiViewOperation.INSTANCE, false);\n        }\n\n        subsystem.registerXMLElementWriter(NamingSubsystem13Parser.INSTANCE);\n\n        if (context.isRegisterTransformers()) {\n            // register 1.1.0 transformer\n            final TransformersSubRegistration transformersSubRegistration110 = subsystem.registerModelTransformers(VERSION_1_1_0, ResourceTransformer.DEFAULT);\n            transformersSubRegistration110.registerSubResource(NamingSubsystemModel.BINDING_PATH,new Naming11Transformer());\n        }\n    }","id":100642,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void initialize(ExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, MANAGEMENT_API_MAJOR_VERSION,\n                MANAGEMENT_API_MINOR_VERSION, MANAGEMENT_API_MICRO_VERSION);\n\n        final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(NamingSubsystemRootResourceDefinition.INSTANCE);\n\n        registration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION, GenericSubsystemDescribeHandler.INSTANCE);\n\n        registration.registerSubModel(NamingBindingResourceDefinition.INSTANCE);\n        registration.registerSubModel(RemoteNamingResourceDefinition.INSTANCE);\n\n        if (context.isRuntimeOnlyRegistrationValid()) {\n            registration.registerOperationHandler(NamingSubsystemRootResourceDefinition.JNDI_VIEW, JndiViewOperation.INSTANCE, false);\n        }\n\n        subsystem.registerXMLElementWriter(NamingSubsystem13Parser.INSTANCE);\n\n        if (context.isRegisterTransformers()) {\n            // register 1.1.0 transformer\n            ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n            builder.addChildResource(NamingSubsystemModel.BINDING_PATH)\n                    .getAttributeBuilder()\n                    .addRejectCheck(RejectAttributeChecker.DEFINED, OBJECT_FACTORY_ENV)\n                    .setDiscard(DiscardAttributeChecker.UNDEFINED, OBJECT_FACTORY_ENV)\n                    .addRejectCheck(new BindingTypeRejectChecker(), BINDING_TYPE)\n                    .end();\n            TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 1, 0));\n            /*final TransformersSubRegistration transformersSubRegistration110 = subsystem.registerModelTransformers(VERSION_1_1_0, ResourceTransformer.DEFAULT);\n            transformersSubRegistration110.registerSubResource(NamingSubsystemModel.BINDING_PATH,new Naming11Transformer());*/\n        }\n    }","commit_id":"9ac5612ffd018e6ad53dcd43bbc83988ed9caecb","url":"https://github.com/wildfly/wildfly"},{"original_method":"private DataSourceDefinition(final boolean registerRuntimeOnly, final boolean deployed) {\n        super(PATH_SUBSYSTEM,\n                DataSourcesExtension.getResourceDescriptionResolver(DATA_SOURCE),\n                deployed ? null : DataSourceAdd.INSTANCE,\n                deployed ? null : DataSourceRemove.INSTANCE);\n        this.registerRuntimeOnly = registerRuntimeOnly;\n        this.deployed = deployed;\n    }","id":100643,"modified_method":"private DataSourceDefinition(final boolean registerRuntimeOnly, final boolean deployed) {\n        super(PATH_DATASOURCE,\n                DataSourcesExtension.getResourceDescriptionResolver(DATA_SOURCE),\n                deployed ? null : DataSourceAdd.INSTANCE,\n                deployed ? null : DataSourceRemove.INSTANCE);\n        this.registerRuntimeOnly = registerRuntimeOnly;\n        this.deployed = deployed;\n    }","commit_id":"68087f145f39e14b1be1a8635e6456a230c4b765","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void registerTransformers(SubsystemRegistration subsystem) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        JdbcDriverDefinition.registerTransformers110(builder);\n        TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 1, 0));\n\n    }","id":100644,"modified_method":"static void registerTransformers(SubsystemRegistration subsystem) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        JdbcDriverDefinition.registerTransformers110(builder);\n        DataSourceDefinition.registerTransformers110(builder);\n        XaDataSourceDefinition.registerTransformers110(builder);\n        TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 1, 0));\n\n    }","commit_id":"68087f145f39e14b1be1a8635e6456a230c4b765","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void testRejectTransformers1_1_0(String mavenVersion, String subsystemXml) throws Exception {\n        System.setProperty(\"jboss.as.test.transformation.hack\", \"true\");\n        try {\n            ModelVersion modelVersion = ModelVersion.create(1, 1, 0); //The old model version\n            //Use the non-runtime version of the extension which will happen on the HC\n            KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n            // Add legacy subsystems\n            builder.createLegacyKernelServicesBuilder(null, modelVersion)\n                    .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + mavenVersion)\n                    .setExtensionClassName(\"org.jboss.as.connector.subsystems.datasources.DataSourcesExtension\");\n\n            KernelServices mainServices = builder.build();\n            assertTrue(mainServices.isSuccessfulBoot());\n            KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n            assertNotNull(legacyServices);\n            assertTrue(legacyServices.isSuccessfulBoot());\n\n            List<ModelNode> ops = builder.parseXmlResource(subsystemXml);\n            ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, ops, new FailedOperationTransformationConfig());\n        } finally {\n            System.clearProperty(\"jboss.as.test.transformation.hack\");\n        }\n    }","id":100645,"modified_method":"public void testRejectTransformers1_1_0(String mavenVersion, String subsystemXml) throws Exception {\n        System.setProperty(\"jboss.as.test.transformation.hack\", \"true\");\n        try {\n            ModelVersion modelVersion = ModelVersion.create(1, 1, 0); //The old model version\n            //Use the non-runtime version of the extension which will happen on the HC\n            KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n            // Add legacy subsystems\n            builder.createLegacyKernelServicesBuilder(null, modelVersion)\n                    .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + mavenVersion)\n                    .setExtensionClassName(\"org.jboss.as.connector.subsystems.datasources.DataSourcesExtension\");\n\n            KernelServices mainServices = builder.build();\n            assertTrue(mainServices.isSuccessfulBoot());\n            KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n            assertNotNull(legacyServices);\n            assertTrue(legacyServices.isSuccessfulBoot());\n\n            List<ModelNode> ops = builder.parseXmlResource(subsystemXml);\n            PathAddress subsystemAddress = PathAddress.pathAddress(DataSourcesSubsystemRootDefinition.PATH_SUBSYSTEM);\n            ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, ops, new FailedOperationTransformationConfig()\n                    .addFailedAttribute(subsystemAddress.append(JdbcDriverDefinition.PATH_DRIVER),\n                            new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DRIVER_MINOR_VERSION, Constants.DRIVER_MAJOR_VERSION) {\n                                @Override\n                                protected boolean isAttributeWritable(String attributeName) {\n                                    return false;\n                                }\n                            })\n                    .addFailedAttribute(subsystemAddress.append(DataSourceDefinition.PATH_DATASOURCE),\n                            new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DATASOURCE_PROPERTIES_ATTRIBUTES))\n                    .addFailedAttribute(subsystemAddress.append(XaDataSourceDefinition.PATH_XA_DATASOURCE),\n                            new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DATASOURCE_PROPERTIES_ATTRIBUTES))\n            );\n        } finally {\n            System.clearProperty(\"jboss.as.test.transformation.hack\");\n        }\n    }","commit_id":"68087f145f39e14b1be1a8635e6456a230c4b765","url":"https://github.com/wildfly/wildfly"},{"original_method":"private XaDataSourceDefinition(final boolean registerRuntimeOnly, final boolean deployed) {\n        super(PATH_SUBSYSTEM,\n                DataSourcesExtension.getResourceDescriptionResolver(XA_DATASOURCE),\n                deployed ? null : XaDataSourceAdd.INSTANCE,\n                deployed ? null : XaDataSourceRemove.INSTANCE);\n        this.registerRuntimeOnly = registerRuntimeOnly;\n        this.deployed = deployed;\n    }","id":100646,"modified_method":"private XaDataSourceDefinition(final boolean registerRuntimeOnly, final boolean deployed) {\n        super(PATH_XA_DATASOURCE,\n                DataSourcesExtension.getResourceDescriptionResolver(XA_DATASOURCE),\n                deployed ? null : XaDataSourceAdd.INSTANCE,\n                deployed ? null : XaDataSourceRemove.INSTANCE);\n        this.registerRuntimeOnly = registerRuntimeOnly;\n        this.deployed = deployed;\n    }","commit_id":"68087f145f39e14b1be1a8635e6456a230c4b765","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void visitTryStatement(\n      @NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      if (JspPsiUtil.isInJspFile(statement.getContainingFile())) {\n        return;\n      }\n      if (m_ignoreTestCases) {\n        if (TestUtils.isPartOfJUnitTestMethod(statement)) {\n          return;\n        }\n        final PsiClass containingClass =\n          PsiTreeUtil.getParentOfType(statement, PsiClass.class);\n        if (containingClass != null &&\n            TestFrameworks.getInstance().isTestClass(containingClass)) {\n          return;\n        }\n      }\n      final PsiCatchSection[] catchSections =\n        statement.getCatchSections();\n      for (final PsiCatchSection section : catchSections) {\n        checkCatchSection(section);\n      }\n    }","id":100647,"modified_method":"@Override\n    public void visitTryStatement(@NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      if (JspPsiUtil.isInJspFile(statement.getContainingFile())) {\n        return;\n      }\n      if (m_ignoreTestCases && TestUtils.isInTestCode(statement)) {\n        return;\n      }\n      final PsiCatchSection[] catchSections = statement.getCatchSections();\n      for (final PsiCatchSection section : catchSections) {\n        checkCatchSection(section);\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public JComponent createOptionsPanel() {\n    return new SingleCheckboxOptionsPanel(\n      InspectionGadgetsBundle.message(\n        \"magic.number.ignore.option\"),\n      this, \"m_ignoreInHashCode\");\n  }","id":100648,"modified_method":"@Override\n  public JComponent createOptionsPanel() {\n    final MultipleCheckboxOptionsPanel panel = new MultipleCheckboxOptionsPanel(this);\n    panel.addCheckbox(InspectionGadgetsBundle.message(\"magic.number.ignore.option\"), \"ignoreInHashCode\");\n    panel.addCheckbox(InspectionGadgetsBundle.message(\"ignore.in.test.code\"), \"ignoreInTestCode\");\n    return panel;\n  }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitLiteralExpression(\n      @NotNull PsiLiteralExpression expression) {\n      super.visitLiteralExpression(expression);\n      final PsiType type = expression.getType();\n      if (!ClassUtils.isPrimitiveNumericType(type)) {\n        return;\n      }\n      if (PsiType.CHAR.equals(type)) {\n        return;\n      }\n      if (isSpecialCaseLiteral(expression)) {\n        return;\n      }\n      if (ExpressionUtils.isDeclaredConstant(expression)) {\n        return;\n      }\n      if (m_ignoreInHashCode) {\n        final PsiMethod containingMethod =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiMethod.class);\n        if (MethodUtils.isHashCode(containingMethod)) {\n          return;\n        }\n      }\n      final PsiElement parent = expression.getParent();\n      if (parent instanceof PsiPrefixExpression) {\n        registerError(parent);\n      }\n      else {\n        registerError(expression);\n      }\n    }","id":100649,"modified_method":"@Override\n    public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) {\n      super.visitLiteralExpression(expression);\n      final PsiType type = expression.getType();\n      if (!ClassUtils.isPrimitiveNumericType(type)) {\n        return;\n      }\n      if (PsiType.CHAR.equals(type)) {\n        return;\n      }\n      if (isSpecialCaseLiteral(expression)) {\n        return;\n      }\n      if (ExpressionUtils.isDeclaredConstant(expression)) {\n        return;\n      }\n      if (ignoreInHashCode) {\n        final PsiMethod containingMethod = PsiTreeUtil.getParentOfType(expression, PsiMethod.class);\n        if (MethodUtils.isHashCode(containingMethod)) {\n          return;\n        }\n      }\n      if (ignoreInTestCode && TestUtils.isInTestCode(expression)) {\n        return;\n      }\n      final PsiElement parent = expression.getParent();\n      if (parent instanceof PsiPrefixExpression) {\n        registerError(parent);\n      }\n      else {\n        registerError(expression);\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitPolyadicExpression(\n      @NotNull PsiPolyadicExpression expression) {\n      super.visitPolyadicExpression(expression);\n      final IElementType tokenType = expression.getOperationTokenType();\n      if (!JavaTokenType.PLUS.equals(tokenType)) {\n        return;\n      }\n      final PsiType type = expression.getType();\n      if (!TypeUtils.isJavaLangString(type)) {\n        return;\n      }\n      final PsiExpression[] operands = expression.getOperands();\n      for (PsiExpression operand : operands) {\n        if (NonNlsUtils.isNonNlsAnnotated(operand)) {\n          return;\n        }\n      }\n      if (isInsideAnnotation(expression)) {\n        return;\n      }\n      if (ignoreInTestCode) {\n        if (TestUtils.isPartOfJUnitTestMethod(expression)) {\n          return;\n        }\n        final PsiClass containingClass =\n          PsiTreeUtil.getParentOfType(expression, PsiClass.class);\n        if (containingClass != null &&\n            TestFrameworks.getInstance().isTestClass(containingClass)) {\n          return;\n        }\n      }\n      if (ignoreAsserts) {\n        final PsiAssertStatement assertStatement =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiAssertStatement.class, true,\n                                      PsiCodeBlock.class);\n        if (assertStatement != null) {\n          return;\n        }\n      }\n      if (ignoreSystemErrs || ignoreSystemOuts) {\n        final PsiMethodCallExpression methodCallExpression =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiMethodCallExpression.class, true,\n                                      PsiCodeBlock.class);\n        if (methodCallExpression != null) {\n          final PsiReferenceExpression methodExpression =\n            methodCallExpression.getMethodExpression();\n          @NonNls\n          final String canonicalText =\n            methodExpression.getCanonicalText();\n          if (ignoreSystemOuts &&\n              \"System.out.println\".equals(canonicalText) ||\n              \"System.out.print\".equals(canonicalText)) {\n            return;\n          }\n          if (ignoreSystemErrs &&\n              \"System.err.println\".equals(canonicalText) ||\n              \"System.err.print\".equals(canonicalText)) {\n            return;\n          }\n        }\n      }\n      if (ignoreThrowableArguments) {\n        final PsiNewExpression newExpression =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiNewExpression.class, true,\n                                      PsiCodeBlock.class);\n        if (newExpression != null) {\n          final PsiType newExpressionType = newExpression.getType();\n          if (newExpressionType != null &&\n              InheritanceUtil.isInheritor(newExpressionType,\n                                          \"java.lang.Throwable\")) {\n            return;\n          }\n        }\n      }\n      if (ignoreConstantInitializers) {\n        PsiElement parent = expression.getParent();\n        while (parent instanceof PsiBinaryExpression) {\n          parent = parent.getParent();\n        }\n        if (parent instanceof PsiField) {\n          final PsiField field = (PsiField)parent;\n          if (field.hasModifierProperty(PsiModifier.STATIC) &&\n              field.hasModifierProperty(PsiModifier.FINAL)) {\n            return;\n          }\n          final PsiClass containingClass = field.getContainingClass();\n          if (containingClass != null &&\n              containingClass.isInterface()) {\n            return;\n          }\n        }\n      }\n      if (NonNlsUtils.isNonNlsAnnotatedUse(expression)) {\n        return;\n      }\n      for (int i = 1; i < operands.length; i++) {\n        final PsiExpression operand = operands[i];\n        if (!ExpressionUtils.isStringConcatenationOperand(operand)) {\n          continue;\n        }\n        final PsiJavaToken token =\n          expression.getTokenBeforeOperand(operand);\n        if (token == null) {\n          continue;\n        }\n        registerError(token, expression);\n      }\n    }","id":100650,"modified_method":"@Override\n    public void visitPolyadicExpression(\n      @NotNull PsiPolyadicExpression expression) {\n      super.visitPolyadicExpression(expression);\n      final IElementType tokenType = expression.getOperationTokenType();\n      if (!JavaTokenType.PLUS.equals(tokenType)) {\n        return;\n      }\n      final PsiType type = expression.getType();\n      if (!TypeUtils.isJavaLangString(type)) {\n        return;\n      }\n      final PsiExpression[] operands = expression.getOperands();\n      for (PsiExpression operand : operands) {\n        if (NonNlsUtils.isNonNlsAnnotated(operand)) {\n          return;\n        }\n      }\n      if (isInsideAnnotation(expression)) {\n        return;\n      }\n      if (ignoreInTestCode && TestUtils.isInTestCode(expression)) {\n        return;\n      }\n      if (ignoreAsserts) {\n        final PsiAssertStatement assertStatement =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiAssertStatement.class, true,\n                                      PsiCodeBlock.class);\n        if (assertStatement != null) {\n          return;\n        }\n      }\n      if (ignoreSystemErrs || ignoreSystemOuts) {\n        final PsiMethodCallExpression methodCallExpression =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiMethodCallExpression.class, true,\n                                      PsiCodeBlock.class);\n        if (methodCallExpression != null) {\n          final PsiReferenceExpression methodExpression =\n            methodCallExpression.getMethodExpression();\n          @NonNls\n          final String canonicalText =\n            methodExpression.getCanonicalText();\n          if (ignoreSystemOuts &&\n              \"System.out.println\".equals(canonicalText) ||\n              \"System.out.print\".equals(canonicalText)) {\n            return;\n          }\n          if (ignoreSystemErrs &&\n              \"System.err.println\".equals(canonicalText) ||\n              \"System.err.print\".equals(canonicalText)) {\n            return;\n          }\n        }\n      }\n      if (ignoreThrowableArguments) {\n        final PsiNewExpression newExpression =\n          PsiTreeUtil.getParentOfType(expression,\n                                      PsiNewExpression.class, true,\n                                      PsiCodeBlock.class);\n        if (newExpression != null) {\n          final PsiType newExpressionType = newExpression.getType();\n          if (newExpressionType != null &&\n              InheritanceUtil.isInheritor(newExpressionType,\n                                          \"java.lang.Throwable\")) {\n            return;\n          }\n        }\n      }\n      if (ignoreConstantInitializers) {\n        PsiElement parent = expression.getParent();\n        while (parent instanceof PsiBinaryExpression) {\n          parent = parent.getParent();\n        }\n        if (parent instanceof PsiField) {\n          final PsiField field = (PsiField)parent;\n          if (field.hasModifierProperty(PsiModifier.STATIC) &&\n              field.hasModifierProperty(PsiModifier.FINAL)) {\n            return;\n          }\n          final PsiClass containingClass = field.getContainingClass();\n          if (containingClass != null &&\n              containingClass.isInterface()) {\n            return;\n          }\n        }\n      }\n      if (NonNlsUtils.isNonNlsAnnotatedUse(expression)) {\n        return;\n      }\n      for (int i = 1; i < operands.length; i++) {\n        final PsiExpression operand = operands[i];\n        if (!ExpressionUtils.isStringConcatenationOperand(operand)) {\n          continue;\n        }\n        final PsiJavaToken token =\n          expression.getTokenBeforeOperand(operand);\n        if (token == null) {\n          continue;\n        }\n        registerError(token, expression);\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @Nullable\n  public JComponent createOptionsPanel() {\n    final MultipleCheckboxOptionsPanel optionsPanel =\n      new MultipleCheckboxOptionsPanel(this);\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\n      \"string.concatenation.ignore.assert.option\"),\n                             \"ignoreAsserts\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\n      \"string.concatenation.ignore.system.out.option\"),\n                             \"ignoreSystemOuts\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\n      \"string.concatenation.ignore.system.err.option\"),\n                             \"ignoreSystemErrs\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\n      \"string.concatenation.ignore.exceptions.option\"),\n                             \"ignoreThrowableArguments\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\n      \"string.concatenation.ignore.constant.initializers.option\"),\n                             \"ignoreConstantInitializers\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\n      \"string.concatenation.ignore.in.test.code\"),\n                             \"ignoreInTestCode\");\n    return optionsPanel;\n  }","id":100651,"modified_method":"@Override\n  @Nullable\n  public JComponent createOptionsPanel() {\n    final MultipleCheckboxOptionsPanel optionsPanel = new MultipleCheckboxOptionsPanel(this);\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\"string.concatenation.ignore.assert.option\"), \"ignoreAsserts\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\"string.concatenation.ignore.system.out.option\"), \"ignoreSystemOuts\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\"string.concatenation.ignore.system.err.option\"), \"ignoreSystemErrs\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\"string.concatenation.ignore.exceptions.option\"), \"ignoreThrowableArguments\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\"string.concatenation.ignore.constant.initializers.option\"),\n                             \"ignoreConstantInitializers\");\n    optionsPanel.addCheckbox(InspectionGadgetsBundle.message(\"ignore.in.test.code\"), \"ignoreInTestCode\");\n    return optionsPanel;\n  }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isPartOfJUnitTestMethod(@NotNull PsiElement element) {\n    final PsiMethod method = PsiTreeUtil.getParentOfType(element,\n                                                         PsiMethod.class);\n    return method != null && isJUnitTestMethod(method);\n  }","id":100652,"modified_method":"public static boolean isPartOfJUnitTestMethod(@NotNull PsiElement element) {\n    final PsiMethod method = PsiTreeUtil.getParentOfType(element, PsiMethod.class, false);\n    return method != null && isJUnitTestMethod(method);\n  }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    protected void doFix(Project project, ProblemDescriptor descriptor)\n      throws IncorrectOperationException {\n      PsiElement typeElement = descriptor.getPsiElement();\n      if (typeElement == null) return;\n      PsiElement catchParameter = typeElement.getParent();\n      if (!(catchParameter instanceof PsiParameter)) return;\n      PsiElement catchBlock = ((PsiParameter)catchParameter).getDeclarationScope();\n      if (!(catchBlock instanceof PsiCatchSection)) return;\n      final PsiCatchSection myBeforeCatchSection = (PsiCatchSection)catchBlock;\n      final PsiTryStatement myTryStatement = myBeforeCatchSection.getTryStatement();\n      final JavaCodeStyleManager codeStyleManager =\n        JavaCodeStyleManager.getInstance(project);\n      final String name = codeStyleManager.suggestUniqueVariableName(\"e\",\n                                                                     myTryStatement.getTryBlock(), false);\n      final PsiElementFactory factory =\n        JavaPsiFacade.getInstance(project).getElementFactory();\n      PsiClass aClass = myThrown.getElement();\n      if (aClass == null) return;\n      final PsiCatchSection section =\n        factory.createCatchSection(factory.createType(aClass), name,\n                                   myTryStatement);\n      final PsiCatchSection element = (PsiCatchSection)\n        myTryStatement.addBefore(section, myBeforeCatchSection);\n      codeStyleManager.shortenClassReferences(element);\n\n      if (isOnTheFly()) {\n        final TextRange range = getRangeToSelect(element.getCatchBlock());\n        final PsiFile file = element.getContainingFile();\n        final Editor editor = FileEditorManager.getInstance(project)\n          .getSelectedTextEditor();\n        if (editor == null) {\n          return;\n        }\n        final Document document = PsiDocumentManager\n          .getInstance(project).getDocument(file);\n        if (editor.getDocument() != document) {\n          return;\n        }\n        editor.getCaretModel().moveToOffset(range.getStartOffset());\n        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n        editor.getSelectionModel().setSelection(range.getStartOffset(),\n                                                range.getEndOffset());\n      }\n    }","id":100653,"modified_method":"@Override\n    protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException {\n      final PsiElement typeElement = descriptor.getPsiElement();\n      if (typeElement == null) {\n        return;\n      }\n      final PsiElement catchParameter = typeElement.getParent();\n      if (!(catchParameter instanceof PsiParameter)) {\n        return;\n      }\n      final PsiElement catchBlock = ((PsiParameter)catchParameter).getDeclarationScope();\n      if (!(catchBlock instanceof PsiCatchSection)) {\n        return;\n      }\n      final PsiCatchSection myBeforeCatchSection = (PsiCatchSection)catchBlock;\n      final PsiTryStatement myTryStatement = myBeforeCatchSection.getTryStatement();\n      final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project);\n      final String name = codeStyleManager.suggestUniqueVariableName(\"e\", myTryStatement.getTryBlock(), false);\n      final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory();\n      final PsiClass aClass = myThrown.getElement();\n      if (aClass == null) {\n        return;\n      }\n      final PsiCatchSection section = factory.createCatchSection(factory.createType(aClass), name, myTryStatement);\n      final PsiCatchSection element = (PsiCatchSection)myTryStatement.addBefore(section, myBeforeCatchSection);\n      codeStyleManager.shortenClassReferences(element);\n\n      if (isOnTheFly()) {\n        final TextRange range = getRangeToSelect(element.getCatchBlock());\n        final PsiFile file = element.getContainingFile();\n        final Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();\n        if (editor == null) {\n          return;\n        }\n        final Document document = PsiDocumentManager.getInstance(project).getDocument(file);\n        if (editor.getDocument() != document) {\n          return;\n        }\n        editor.getCaretModel().moveToOffset(range.getStartOffset());\n        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n        editor.getSelectionModel().setSelection(range.getStartOffset(), range.getEndOffset());\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public JComponent createOptionsPanel() {\n    return new SingleCheckboxOptionsPanel(\n      InspectionGadgetsBundle.message(\"too.broad.catch.option\"),\n      this, \"onlyWarnOnRootExceptions\");\n  }","id":100654,"modified_method":"@Override\n  public JComponent createOptionsPanel() {\n    final MultipleCheckboxOptionsPanel panel = new MultipleCheckboxOptionsPanel(this);\n    panel.addCheckbox(InspectionGadgetsBundle.message(\"too.broad.catch.option\"), \"onlyWarnOnRootExceptions\");\n    panel.addCheckbox(InspectionGadgetsBundle.message(\"ignore.in.test.code\"), \"ignoreInTestCode\");\n    return panel;\n  }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitTryStatement(\n      @NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      final PsiCodeBlock tryBlock = statement.getTryBlock();\n      if (tryBlock == null) {\n        return;\n      }\n      final Set<PsiClassType> exceptionsThrown =\n        ExceptionUtils.calculateExceptionsThrown(tryBlock);\n      final int numExceptionsThrown = exceptionsThrown.size();\n      final Set<PsiType> exceptionsCaught =\n        new HashSet<PsiType>(numExceptionsThrown);\n      final PsiCatchSection[] catchSections =\n        statement.getCatchSections();\n      for (final PsiCatchSection catchSection : catchSections) {\n        final PsiParameter parameter = catchSection.getParameter();\n        if (parameter == null) {\n          continue;\n        }\n        final PsiType typeCaught = parameter.getType();\n        if (typeCaught instanceof PsiDisjunctionType) {\n          final PsiDisjunctionType disjunctionType =\n            (PsiDisjunctionType)typeCaught;\n          final List<PsiType> types =\n            disjunctionType.getDisjunctions();\n          for (PsiType type : types) {\n            register(exceptionsThrown, exceptionsCaught, parameter, type);\n          }\n        }\n        else {\n          register(exceptionsThrown, exceptionsCaught, parameter, typeCaught);\n        }\n      }\n    }","id":100655,"modified_method":"@Override\n    public void visitTryStatement(@NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      final PsiCodeBlock tryBlock = statement.getTryBlock();\n      if (tryBlock == null) {\n        return;\n      }\n      if (ignoreInTestCode && TestUtils.isInTestCode(statement)) {\n        return;\n      }\n      final Set<PsiClassType> exceptionsThrown = ExceptionUtils.calculateExceptionsThrown(tryBlock);\n      final int numExceptionsThrown = exceptionsThrown.size();\n      final Set<PsiType> exceptionsCaught = new HashSet<PsiType>(numExceptionsThrown);\n      final PsiCatchSection[] catchSections = statement.getCatchSections();\n      for (final PsiCatchSection catchSection : catchSections) {\n        final PsiParameter parameter = catchSection.getParameter();\n        if (parameter == null) {\n          continue;\n        }\n        final PsiType typeCaught = parameter.getType();\n        if (typeCaught instanceof PsiDisjunctionType) {\n          final PsiDisjunctionType disjunctionType = (PsiDisjunctionType)typeCaught;\n          final List<PsiType> types = disjunctionType.getDisjunctions();\n          for (PsiType type : types) {\n            register(exceptionsThrown, exceptionsCaught, parameter, type);\n          }\n        }\n        else {\n          register(exceptionsThrown, exceptionsCaught, parameter, typeCaught);\n        }\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private List<PsiClass> findMaskedExceptions(\n      Set<PsiClassType> exceptionsThrown,\n      Set<PsiType> exceptionsCaught, PsiType typeCaught) {\n      if (exceptionsThrown.contains(typeCaught)) {\n        exceptionsCaught.add(typeCaught);\n        exceptionsThrown.remove(typeCaught);\n      }\n      final List<PsiClass> typesMasked = new ArrayList();\n      for (PsiClassType typeThrown : exceptionsThrown) {\n        if (!exceptionsCaught.contains(typeThrown) &&\n            typeCaught.isAssignableFrom(typeThrown)) {\n          exceptionsCaught.add(typeThrown);\n          PsiClass aClass = typeThrown.resolve();\n          if (aClass != null) {\n            typesMasked.add(aClass);\n          }\n        }\n      }\n      if (onlyWarnOnRootExceptions) {\n        if (!ExceptionUtils.isGenericExceptionClass(typeCaught)) {\n          return Collections.emptyList();\n        }\n      }\n      return typesMasked;\n    }","id":100656,"modified_method":"private List<PsiClass> findMaskedExceptions(Set<PsiClassType> exceptionsThrown, Set<PsiType> exceptionsCaught, PsiType typeCaught) {\n      if (exceptionsThrown.contains(typeCaught)) {\n        exceptionsCaught.add(typeCaught);\n        exceptionsThrown.remove(typeCaught);\n      }\n      final List<PsiClass> typesMasked = new ArrayList();\n      for (PsiClassType typeThrown : exceptionsThrown) {\n        if (!exceptionsCaught.contains(typeThrown) && typeCaught.isAssignableFrom(typeThrown)) {\n          exceptionsCaught.add(typeThrown);\n          final PsiClass aClass = typeThrown.resolve();\n          if (aClass != null) {\n            typesMasked.add(aClass);\n          }\n        }\n      }\n      if (onlyWarnOnRootExceptions) {\n        if (!ExceptionUtils.isGenericExceptionClass(typeCaught)) {\n          return Collections.emptyList();\n        }\n      }\n      return typesMasked;\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public JComponent createOptionsPanel() {\n    return new SingleCheckboxOptionsPanel(InspectionGadgetsBundle.message(\"too.broad.catch.option\"), this, \"onlyWarnOnRootExceptions\");\n  }","id":100657,"modified_method":"@Override\n  public JComponent createOptionsPanel() {\n    final MultipleCheckboxOptionsPanel panel = new MultipleCheckboxOptionsPanel(this);\n    panel.addCheckbox(InspectionGadgetsBundle.message(\"too.broad.catch.option\"), \"onlyWarnOnRootExceptions\");\n    panel.addCheckbox(InspectionGadgetsBundle.message(\"ignore.in.test.code\"), \"ignoreInTestCode\");\n    return panel;\n  }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitMethod(PsiMethod method) {\n      super.visitMethod(method);\n      final PsiReferenceList throwsList = method.getThrowsList();\n      if (!throwsList.isPhysical()) {\n        return;\n      }\n      final PsiJavaCodeReferenceElement[] throwsReferences = throwsList.getReferenceElements();\n      if (throwsReferences.length == 0) {\n        return;\n      }\n      final PsiCodeBlock body = method.getBody();\n      if (body == null) {\n        return;\n      }\n      final Set<PsiClassType> exceptionsThrown = ExceptionUtils.calculateExceptionsThrown(body);\n      final PsiClassType[] referencedExceptions = throwsList.getReferencedTypes();\n      final Set<PsiClassType> exceptionsDeclared = new HashSet(referencedExceptions.length);\n      ContainerUtil.addAll(exceptionsDeclared, referencedExceptions);\n      final int referencedExceptionsLength = referencedExceptions.length;\n      for (int i = 0; i < referencedExceptionsLength; i++) {\n        final PsiClassType referencedException = referencedExceptions[i];\n        if (onlyWarnOnRootExceptions) {\n          if (!ExceptionUtils.isGenericExceptionClass(\n            referencedException)) {\n            continue;\n          }\n        }\n        final List<SmartTypePointer> exceptionsMasked = new ArrayList();\n        final SmartTypePointerManager pointerManager = SmartTypePointerManager.getInstance(body.getProject());\n        for (PsiClassType exceptionThrown : exceptionsThrown) {\n          if (referencedException.isAssignableFrom(exceptionThrown) && !exceptionsDeclared.contains(exceptionThrown)) {\n            exceptionsMasked.add(pointerManager.createSmartTypePointer(exceptionThrown));\n          }\n        }\n        if (!exceptionsMasked.isEmpty()) {\n          final PsiJavaCodeReferenceElement throwsReference = throwsReferences[i];\n          final boolean originalNeeded = exceptionsThrown.contains(referencedException);\n          registerError(throwsReference, exceptionsMasked, Boolean.valueOf(originalNeeded));\n        }\n      }\n    }","id":100658,"modified_method":"@Override\n    public void visitMethod(PsiMethod method) {\n      super.visitMethod(method);\n      final PsiReferenceList throwsList = method.getThrowsList();\n      if (!throwsList.isPhysical()) {\n        return;\n      }\n      final PsiJavaCodeReferenceElement[] throwsReferences = throwsList.getReferenceElements();\n      if (throwsReferences.length == 0) {\n        return;\n      }\n      final PsiCodeBlock body = method.getBody();\n      if (body == null) {\n        return;\n      }\n      if (ignoreInTestCode && TestUtils.isInTestCode(method)) {\n        return;\n      }\n      final Set<PsiClassType> exceptionsThrown = ExceptionUtils.calculateExceptionsThrown(body);\n      final PsiClassType[] referencedExceptions = throwsList.getReferencedTypes();\n      final Set<PsiClassType> exceptionsDeclared = new HashSet(referencedExceptions.length);\n      ContainerUtil.addAll(exceptionsDeclared, referencedExceptions);\n      final int referencedExceptionsLength = referencedExceptions.length;\n      for (int i = 0; i < referencedExceptionsLength; i++) {\n        final PsiClassType referencedException = referencedExceptions[i];\n        if (onlyWarnOnRootExceptions) {\n          if (!ExceptionUtils.isGenericExceptionClass(\n            referencedException)) {\n            continue;\n          }\n        }\n        final List<SmartTypePointer> exceptionsMasked = new ArrayList();\n        final SmartTypePointerManager pointerManager = SmartTypePointerManager.getInstance(body.getProject());\n        for (PsiClassType exceptionThrown : exceptionsThrown) {\n          if (referencedException.isAssignableFrom(exceptionThrown) && !exceptionsDeclared.contains(exceptionThrown)) {\n            exceptionsMasked.add(pointerManager.createSmartTypePointer(exceptionThrown));\n          }\n        }\n        if (!exceptionsMasked.isEmpty()) {\n          final PsiJavaCodeReferenceElement throwsReference = throwsReferences[i];\n          final boolean originalNeeded = exceptionsThrown.contains(referencedException);\n          registerError(throwsReference, exceptionsMasked, Boolean.valueOf(originalNeeded));\n        }\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitTryStatement(\n      @NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      if (m_ignoreTestCases) {\n        final PsiClass containingClass =\n          PsiTreeUtil.getParentOfType(statement, PsiClass.class);\n        if (containingClass != null &&\n            TestFrameworks.getInstance().isTestClass(containingClass)) {\n          return;\n        }\n        if (TestUtils.isPartOfJUnitTestMethod(statement)) {\n          return;\n        }\n      }\n      final PsiCatchSection[] catchSections =\n        statement.getCatchSections();\n      for (PsiCatchSection catchSection : catchSections) {\n        checkCatchSection(catchSection);\n      }\n    }","id":100659,"modified_method":"@Override\n    public void visitTryStatement(@NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      if (m_ignoreTestCases && TestUtils.isInTestCode(statement)) {\n        return;\n      }\n      final PsiCatchSection[] catchSections = statement.getCatchSections();\n      for (PsiCatchSection catchSection : catchSections) {\n        checkCatchSection(catchSection);\n      }\n    }","commit_id":"973060cc0e0f5ecba51129470bb65af9a6996398","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Unit test for {@link DefaultHTMLConverter#toHTML(String, String)}.\n     */\n    @Test\n    public void toHTML() throws Exception\n    {\n        String source = \"wiki syntax\";\n        String syntaxId = \"syntax/x.y\";\n\n        // The source should be parsed.\n        Parser parser = mock(Parser.class);\n        ComponentManager componentManager = mocker.getInstance(ComponentManager.class);\n        when(componentManager.getInstance(Parser.class, syntaxId)).thenReturn(parser);\n\n        XDOM xdom = new XDOM(Collections.<Block> emptyList());\n        when(parser.parse(any(StringReader.class))).thenReturn(xdom);\n\n        Assert.assertEquals(\"\", mocker.getComponentUnderTest().toHTML(source, syntaxId));\n\n        // Verify that the macro transformations have been executed.\n        Transformation macroTransformation = mocker.getInstance(Transformation.class, \"macro\");\n        verify(macroTransformation).transform(same(xdom), any(TransformationContext.class));\n\n        // Verify the XDOM is rendered to Annotated XHTML.\n        BlockRenderer xhtmlRenderer = mocker.getInstance(BlockRenderer.class, \"annotatedxhtml/1.0\");\n        verify(xhtmlRenderer).render(same(xdom), any(WikiPrinter.class));\n    }","id":100660,"modified_method":"/**\n     * Unit test for {@link DefaultHTMLConverter#toHTML(String, String)}.\n     */\n    @Test\n    public void toHTML() throws Exception\n    {\n        String source = \"wiki syntax\";\n        String syntaxId = \"syntax/x.y\";\n\n        // The source should be parsed.\n        Parser parser = this.mocker.registerMockComponent(Parser.class, syntaxId);\n\n        XDOM xdom = new XDOM(Collections.<Block> emptyList());\n        when(parser.parse(any(StringReader.class))).thenReturn(xdom);\n\n        Assert.assertEquals(\"\", mocker.getComponentUnderTest().toHTML(source, syntaxId));\n\n        // Verify that the macro transformations have been executed.\n        Transformation macroTransformation = mocker.getInstance(Transformation.class, \"macro\");\n        verify(macroTransformation).transform(same(xdom), any(TransformationContext.class));\n\n        // Verify the XDOM is rendered to Annotated XHTML.\n        BlockRenderer xhtmlRenderer = mocker.getInstance(BlockRenderer.class, \"annotatedxhtml/1.0\");\n        verify(xhtmlRenderer).render(same(xdom), any(WikiPrinter.class));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Unit test for {@link DefaultHTMLConverter#fromHTML(String, String)}.\n     */\n    @Test\n    public void fromHTML() throws Exception\n    {\n        String html = \"some HTML\";\n        String syntaxId = \"syntax/x.y\";\n\n        // Verify the HTML is cleaned.\n        HTMLCleaner cleaner = mocker.getInstance(HTMLCleaner.class);\n        when(cleaner.clean(html)).thenReturn(html);\n\n        ComponentManager componentManager = mocker.getInstance(ComponentManager.class);\n        PrintRendererFactory printRendererFactory = mock(PrintRendererFactory.class);\n        when(componentManager.getInstance(PrintRendererFactory.class, syntaxId)).thenReturn(printRendererFactory);\n\n        PrintRenderer printRenderer = mock(PrintRenderer.class);\n        when(printRendererFactory.createRenderer(any(WikiPrinter.class))).thenReturn(printRenderer);\n\n        Assert.assertEquals(\"\", mocker.getComponentUnderTest().fromHTML(html, syntaxId));\n\n        // Verify the HTML is converted to the specified syntax.\n        StreamParser xhtmlStreamParser = mocker.getInstance(StreamParser.class, \"xhtml/1.0\");\n        verify(xhtmlStreamParser).parse(any(StringReader.class), same(printRenderer));\n    }","id":100661,"modified_method":"/**\n     * Unit test for {@link DefaultHTMLConverter#fromHTML(String, String)}.\n     */\n    @Test\n    public void fromHTML() throws Exception\n    {\n        String html = \"some HTML\";\n        String syntaxId = \"syntax/x.y\";\n\n        // Verify the HTML is cleaned.\n        HTMLCleaner cleaner = mocker.getInstance(HTMLCleaner.class);\n        when(cleaner.clean(html)).thenReturn(html);\n\n        PrintRendererFactory printRendererFactory = this.mocker.registerMockComponent(PrintRendererFactory.class, syntaxId);\n\n        PrintRenderer printRenderer = mock(PrintRenderer.class);\n        when(printRendererFactory.createRenderer(any(WikiPrinter.class))).thenReturn(printRenderer);\n\n        Assert.assertEquals(\"\", mocker.getComponentUnderTest().fromHTML(html, syntaxId));\n\n        // Verify the HTML is converted to the specified syntax.\n        StreamParser xhtmlStreamParser = mocker.getInstance(StreamParser.class, \"xhtml/1.0\");\n        verify(xhtmlStreamParser).parse(any(StringReader.class), same(printRenderer));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void view() throws Exception\n    {\n        Execution execution = mocker.getInstance(Execution.class);\n        when(execution.getContext()).thenReturn(new ExecutionContext());\n\n        AttachmentReference attachmentReference =\n            new AttachmentReference(\"file.odt\", new DocumentReference(\"wiki\", \"Space\", \"Page\"));\n        DocumentModelBridge document = mock(DocumentModelBridge.class);\n        DocumentAccessBridge documentAccessBridge = mocker.getInstance(DocumentAccessBridge.class);\n        when(documentAccessBridge.isDocumentViewable(attachmentReference.getDocumentReference())).thenReturn(true);\n        when(documentAccessBridge.getDocument(attachmentReference.getDocumentReference())).thenReturn(document);\n        when(document.getSyntax()).thenReturn(Syntax.TEX_1_0);\n\n        XDOM xdom = new XDOM(Collections.<Block> emptyList());\n        OfficeViewer viewer = mocker.getInstance(OfficeViewer.class);\n        when(viewer.createView(attachmentReference, Collections.<String, String> emptyMap())).thenReturn(xdom);\n\n        BlockRenderer xhtmlRenderer = mock(BlockRenderer.class);\n        ComponentManager componentManager = mocker.getInstance(ComponentManager.class);\n        when(componentManager.getInstance(BlockRenderer.class, \"xhtml/1.0\")).thenReturn(xhtmlRenderer);\n\n        Assert.assertEquals(\"\", mocker.getComponentUnderTest().view(attachmentReference));\n\n        TransformationManager transformationManager = mocker.getInstance(TransformationManager.class);\n        verify(transformationManager).performTransformations(eq(xdom), notNull(TransformationContext.class));\n\n        verify(xhtmlRenderer).render(eq(xdom), notNull(WikiPrinter.class));\n    }","id":100662,"modified_method":"@Test\n    public void view() throws Exception\n    {\n        Execution execution = mocker.getInstance(Execution.class);\n        when(execution.getContext()).thenReturn(new ExecutionContext());\n\n        AttachmentReference attachmentReference =\n            new AttachmentReference(\"file.odt\", new DocumentReference(\"wiki\", \"Space\", \"Page\"));\n        DocumentModelBridge document = mock(DocumentModelBridge.class);\n        DocumentAccessBridge documentAccessBridge = mocker.getInstance(DocumentAccessBridge.class);\n        when(documentAccessBridge.isDocumentViewable(attachmentReference.getDocumentReference())).thenReturn(true);\n        when(documentAccessBridge.getDocument(attachmentReference.getDocumentReference())).thenReturn(document);\n        when(document.getSyntax()).thenReturn(Syntax.TEX_1_0);\n\n        XDOM xdom = new XDOM(Collections.<Block> emptyList());\n        OfficeViewer viewer = mocker.getInstance(OfficeViewer.class);\n        when(viewer.createView(attachmentReference, Collections.<String, String> emptyMap())).thenReturn(xdom);\n\n        BlockRenderer xhtmlRenderer = mocker.registerMockComponent(BlockRenderer.class, \"xhtml/1.0\");\n\n        Assert.assertEquals(\"\", mocker.getComponentUnderTest().view(attachmentReference));\n\n        TransformationManager transformationManager = mocker.getInstance(TransformationManager.class);\n        verify(transformationManager).performTransformations(eq(xdom), notNull(TransformationContext.class));\n\n        verify(xhtmlRenderer).render(eq(xdom), notNull(WikiPrinter.class));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void getWikiBotListenerData() throws Exception\n    {\n        QueryManager queryManager = this.componentManager.getInstance(QueryManager.class);\n        Query query = mock(Query.class);\n\n        List results = Collections.singletonList(new Object[]{\n            \"space\", \"name\", \"listenername\", \"listenerdescription\" });\n\n        when(queryManager.createQuery(anyString(), anyString())).thenReturn(query);\n        when(query.execute()).thenReturn(results);\n\n        List<BotListenerData> data = this.componentManager.getComponentUnderTest().getWikiBotListenerData();\n        Assert.assertEquals(1, data.size());\n        Assert.assertEquals(\"space.name\", data.get(0).getId());\n        Assert.assertEquals(\"listenername\", data.get(0).getName());\n        Assert.assertEquals(\"listenerdescription\", data.get(0).getDescription());\n    }","id":100663,"modified_method":"@Test\n    public void getWikiBotListenerData() throws Exception\n    {\n        Query query = mock(Query.class);\n\n        List results = Collections.singletonList(new Object[]{\n            \"space\", \"name\", \"listenername\", \"listenerdescription\" });\n\n        when(this.mockQueryManager.createQuery(anyString(), anyString())).thenReturn(query);\n        when(query.execute()).thenReturn(results);\n\n        List<BotListenerData> data = this.componentManager.getComponentUnderTest().getWikiBotListenerData();\n        Assert.assertEquals(1, data.size());\n        Assert.assertEquals(\"space.name\", data.get(0).getId());\n        Assert.assertEquals(\"listenername\", data.get(0).getName());\n        Assert.assertEquals(\"listenerdescription\", data.get(0).getDescription());\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        Utils.setComponentManager(this.componentManager);\n\n        Execution execution = this.componentManager.getInstance(Execution.class);\n        ExecutionContext context = new ExecutionContext();\n\n        this.xwiki = mock(XWiki.class);\n\n        this.xwikiContext = new XWikiContext();\n        this.xwikiContext.setWiki(this.xwiki);\n\n        context.setProperty(\"xwikicontext\", this.xwikiContext);\n\n        DocumentReference configDocReference = new DocumentReference(\"botwiki\", \"IRC\", \"IRCConfiguration\");\n        this.configDoc = mock(XWikiDocument.class);\n\n        when(execution.getContext()).thenReturn(context);\n        when(xwiki.getDocument(configDocReference, xwikiContext)).thenReturn(configDoc);\n        when(configDoc.getDocumentReference()).thenReturn(configDocReference);\n    }","id":100664,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        Utils.setComponentManager(this.componentManager);\n\n        ExecutionContext context = new ExecutionContext();\n\n        this.xwiki = mock(XWiki.class);\n\n        this.xwikiContext = new XWikiContext();\n        this.xwikiContext.setWiki(this.xwiki);\n\n        context.setProperty(\"xwikicontext\", this.xwikiContext);\n\n        DocumentReference configDocReference = new DocumentReference(\"botwiki\", \"IRC\", \"IRCConfiguration\");\n        this.configDoc = mock(XWikiDocument.class);\n\n        when(this.mockExecution.getContext()).thenReturn(context);\n        when(xwiki.getDocument(configDocReference, xwikiContext)).thenReturn(configDoc);\n        when(configDoc.getDocumentReference()).thenReturn(configDocReference);\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void loadBotData() throws Exception\n    {\n        // Simulate the the IRC Bot is started in the \"botwiki\" wiki.\n        IRCBot bot = this.componentManager.getInstance(IRCBot.class);\n        when(bot.getWikiId()).thenReturn(\"botwiki\");\n\n        BaseObject botDataObject = mock(BaseObject.class);\n\n        when(configDoc.getXObject(WIKI_BOT_CONFIGURATION_CLASS)).thenReturn(botDataObject);\n        when(botDataObject.getStringValue(\"botname\")).thenReturn(\"mybotname\");\n        when(botDataObject.getStringValue(\"server\")).thenReturn(\"myserver\");\n        when(botDataObject.getStringValue(\"channel\")).thenReturn(\"mychannel\");\n        when(botDataObject.getStringValue(\"password\")).thenReturn(\"mypassword\");\n        when(botDataObject.getIntValue(\"inactive\")).thenReturn(0);\n\n        BotData botData = this.componentManager.getComponentUnderTest().loadBotData();\n        Assert.assertEquals(\"mybotname\", botData.getName());\n        Assert.assertEquals(\"myserver\", botData.getServer());\n        Assert.assertEquals(\"mychannel\", botData.getChannel());\n        Assert.assertEquals(\"mypassword\", botData.getPassword());\n        Assert.assertTrue(botData.isActive());\n    }","id":100665,"modified_method":"@Test\n    public void loadBotData() throws Exception\n    {\n        // Simulate the the IRC Bot is started in the \"botwiki\" wiki.\n        when(this.mockBot.getWikiId()).thenReturn(\"botwiki\");\n\n        BaseObject botDataObject = mock(BaseObject.class);\n\n        when(configDoc.getXObject(WIKI_BOT_CONFIGURATION_CLASS)).thenReturn(botDataObject);\n        when(botDataObject.getStringValue(\"botname\")).thenReturn(\"mybotname\");\n        when(botDataObject.getStringValue(\"server\")).thenReturn(\"myserver\");\n        when(botDataObject.getStringValue(\"channel\")).thenReturn(\"mychannel\");\n        when(botDataObject.getStringValue(\"password\")).thenReturn(\"mypassword\");\n        when(botDataObject.getIntValue(\"inactive\")).thenReturn(0);\n\n        BotData botData = this.componentManager.getComponentUnderTest().loadBotData();\n        Assert.assertEquals(\"mybotname\", botData.getName());\n        Assert.assertEquals(\"myserver\", botData.getServer());\n        Assert.assertEquals(\"mychannel\", botData.getChannel());\n        Assert.assertEquals(\"mypassword\", botData.getPassword());\n        Assert.assertTrue(botData.isActive());\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Verify that if there's no configuration document in the Bot wiki then we'll look into the main wiki.\n     */\n    @Test\n    public void getConfigurationDocumentWhenLocatedInMainWiki() throws Exception\n    {\n        // Simulate the the IRC Bot is started in the \"botwiki\" wiki.\n        IRCBot bot = this.componentManager.getInstance(IRCBot.class);\n        when(bot.getWikiId()).thenReturn(\"botwiki\");\n\n        // No config in the \"botwiki\" wiki\n        when(this.configDoc.isNew()).thenReturn(true);\n\n        // Config in main wiki\n        DocumentReference mainConfigDocReference = new DocumentReference(\"xwiki\", \"IRC\", \"IRCConfiguration\");\n        XWikiDocument mainConfigDoc = mock(XWikiDocument.class);\n        when(this.xwiki.getDocument(mainConfigDocReference, this.xwikiContext)).thenReturn(mainConfigDoc);\n\n        Assert.assertSame(mainConfigDoc, this.componentManager.getComponentUnderTest().getConfigurationDocument());\n    }","id":100666,"modified_method":"/**\n     * Verify that if there's no configuration document in the Bot wiki then we'll look into the main wiki.\n     */\n    @Test\n    public void getConfigurationDocumentWhenLocatedInMainWiki() throws Exception\n    {\n        // Simulate the the IRC Bot is started in the \"botwiki\" wiki.\n        when(this.mockBot.getWikiId()).thenReturn(\"botwiki\");\n\n        // No config in the \"botwiki\" wiki\n        when(this.configDoc.isNew()).thenReturn(true);\n\n        // Config in main wiki\n        DocumentReference mainConfigDocReference = new DocumentReference(\"xwiki\", \"IRC\", \"IRCConfiguration\");\n        XWikiDocument mainConfigDoc = mock(XWikiDocument.class);\n        when(this.xwiki.getDocument(mainConfigDocReference, this.xwikiContext)).thenReturn(mainConfigDoc);\n\n        Assert.assertSame(mainConfigDoc, this.componentManager.getComponentUnderTest().getConfigurationDocument());\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void loadBotDataWhenNoConfigDataInConfigDocument() throws Exception\n    {\n        // Simulate the the IRC Bot is started in the \"botwiki\" wiki.\n        IRCBot bot = this.componentManager.getInstance(IRCBot.class);\n        when(bot.getWikiId()).thenReturn(\"botwiki\");\n\n        try {\n            this.componentManager.getComponentUnderTest().loadBotData();\n            Assert.fail(\"Should have thrown an exception\");\n        } catch (IRCBotException expected) {\n            Assert.assertEquals(\"Cannot find the IRC Configuration object in the [botwiki:IRC.IRCConfiguration] \"\n                + \"document\", expected.getMessage());\n        }\n    }","id":100667,"modified_method":"@Test\n    public void loadBotDataWhenNoConfigDataInConfigDocument() throws Exception\n    {\n        // Simulate the the IRC Bot is started in the \"botwiki\" wiki.\n        when(mockBot.getWikiId()).thenReturn(\"botwiki\");\n\n        try {\n            this.componentManager.getComponentUnderTest().loadBotData();\n            Assert.fail(\"Should have thrown an exception\");\n        } catch (IRCBotException expected) {\n            Assert.assertEquals(\"Cannot find the IRC Configuration object in the [botwiki:IRC.IRCConfiguration] \"\n                + \"document\", expected.getMessage());\n        }\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testConvertDocumentFromString()\n    {\n        EntityReference reference;\n\n        reference =\n            new EntityReference(\"page\", EntityType.DOCUMENT, new EntityReference(\"space\", EntityType.SPACE,\n                new EntityReference(\"wiki\", EntityType.WIKI)));\n        Mockito.when(this.mockStringResolver.resolve(\"wiki:space.page\", EntityType.DOCUMENT)).thenReturn(reference);\n        Assert\n            .assertEquals(reference, this.converterManager.convert(EntityReference.class, \"document:wiki:space.page\"));\n\n        reference = new EntityReference(\"page\", EntityType.DOCUMENT, new EntityReference(\"space\", EntityType.SPACE));\n        Mockito.when(this.mockStringResolver.resolve(\"space.page\", EntityType.DOCUMENT)).thenReturn(reference);\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"document:space.page\"));\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"space.page\"));\n\n        reference = new EntityReference(\"page\", EntityType.DOCUMENT);\n        Mockito.when(this.mockStringResolver.resolve(\"page\", EntityType.DOCUMENT)).thenReturn(reference);\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"document:page\"));\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"page\"));\n    }","id":100668,"modified_method":"@Test\n    public void testConvertDocumentFromString()\n    {\n        EntityReference reference;\n\n        reference =\n            new EntityReference(\"page\", EntityType.DOCUMENT, new EntityReference(\"space\", EntityType.SPACE,\n                new EntityReference(\"wiki\", EntityType.WIKI)));\n        Assert\n            .assertEquals(reference, this.converterManager.convert(EntityReference.class, \"document:wiki:space.page\"));\n\n        reference = new EntityReference(\"page\", EntityType.DOCUMENT, new EntityReference(\"space\", EntityType.SPACE));\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"document:space.page\"));\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"space.page\"));\n\n        reference = new EntityReference(\"page\", EntityType.DOCUMENT);\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"document:page\"));\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"page\"));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        this.converterManager = mocker.getInstance(ConverterManager.class);\n\n        this.mockStringResolver = this.mocker.getInstance(EntityReferenceResolver.TYPE_STRING, \"relative\");\n        this.mockSerialier = this.mocker.getInstance(EntityReferenceSerializer.TYPE_STRING);\n    }","id":100669,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        this.converterManager = mocker.getInstance(ConverterManager.class);\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testConvertSpaceFromString()\n    {\n        EntityReference reference;\n\n        reference = new EntityReference(\"space\", EntityType.SPACE, new EntityReference(\"wiki\", EntityType.WIKI));\n        Mockito.when(this.mockStringResolver.resolve(\"wiki:space\", EntityType.SPACE)).thenReturn(reference);\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"space:wiki:space\"));\n\n        reference = new EntityReference(\"space\", EntityType.SPACE);\n        Mockito.when(this.mockStringResolver.resolve(\"space\", EntityType.SPACE)).thenReturn(reference);\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"space:space\"));\n    }","id":100670,"modified_method":"@Test\n    public void testConvertSpaceFromString()\n    {\n        EntityReference reference;\n\n        reference = new EntityReference(\"space\", EntityType.SPACE, new EntityReference(\"wiki\", EntityType.WIKI));\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"space:wiki:space\"));\n\n        reference = new EntityReference(\"space\", EntityType.SPACE);\n        Assert.assertEquals(reference, this.converterManager.convert(EntityReference.class, \"space:space\"));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testConvertToString()\n    {\n        EntityReference reference;\n\n        reference =\n            new EntityReference(\"page\", EntityType.DOCUMENT, new EntityReference(\"space\", EntityType.SPACE,\n                new EntityReference(\"wiki\", EntityType.WIKI)));\n        Mockito.when(this.mockSerialier.serialize(reference)).thenReturn(\"wiki:space.page\");\n        Assert.assertEquals(\"document:wiki:space.page\", this.converterManager.convert(String.class, reference));\n    }","id":100671,"modified_method":"@Test\n    public void testConvertToString()\n    {\n        EntityReference reference;\n\n        reference =\n            new EntityReference(\"page\", EntityType.DOCUMENT, new EntityReference(\"space\", EntityType.SPACE,\n                new EntityReference(\"wiki\", EntityType.WIKI)));\n        Assert.assertEquals(\"document:wiki:space.page\", this.converterManager.convert(String.class, reference));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Test setup.\n     * \n     * @throws Exception if test setup fails\n     */\n    @Before\n    public void setUp() throws Exception\n    {\n        // Required in order to create a new instance of XWikiDocument.\n        Utils.setComponentManager(mocker);\n        sheetScriptService = (SheetScriptService) mocker.getComponentUnderTest();\n    }","id":100672,"modified_method":"/**\n     * Test setup.\n     * \n     * @throws Exception if test setup fails\n     */\n    @Before\n    public void setUp() throws Exception\n    {\n        // Required in order to create a new instance of XWikiDocument.\n        Utils.setComponentManager(mocker);\n        this.sheetScriptService = (SheetScriptService) mocker.getComponentUnderTest();\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Tests that {@link SheetScriptService#bindClassSheet(Document, DocumentReference)} clones the document first to\n     * follow the practice from {@link Document}. This is required in order to not modify the cached document.\n     * \n     * @throws Exception if the test fails to lookup the class sheet binder\n     */\n    @Test\n    public void bindClassSheetClonesDocument() throws Exception\n    {\n        DocumentReference classReference = new DocumentReference(\"wiki\", \"Space\", \"MyClass\");\n        final XWikiDocument classDocument = new XWikiDocument(classReference);\n        Document classDocumentApi = new Document(classDocument, null);\n\n        final DocumentReference sheetReference =\n            new DocumentReference(\"MySheet\", classReference.getLastSpaceReference());\n        final SheetBinder mockClassSheetBinder = mocker.getInstance(SheetBinder.class, \"class\");\n\n        when(mockClassSheetBinder.bind(argThat(new ArgumentMatcher<DocumentModelBridge>()\n        {\n            @Override\n            public boolean matches(Object argument)\n            {\n                return classDocument.equals(argument) && classDocument != argument;\n            }\n        }), same(sheetReference))).thenReturn(true);\n\n        Assert.assertTrue(sheetScriptService.bindClassSheet(classDocumentApi, sheetReference));\n    }","id":100673,"modified_method":"/**\n     * Tests that {@link SheetScriptService#bindClassSheet(Document, DocumentReference)} clones the document first to\n     * follow the practice from {@link Document}. This is required in order to not modify the cached document.\n     * \n     * @throws Exception if the test fails to lookup the class sheet binder\n     */\n    @Test\n    public void bindClassSheetClonesDocument() throws Exception\n    {\n        DocumentReference classReference = new DocumentReference(\"wiki\", \"Space\", \"MyClass\");\n        final XWikiDocument classDocument = new XWikiDocument(classReference);\n        Document classDocumentApi = new Document(classDocument, null);\n\n        final DocumentReference sheetReference =\n            new DocumentReference(\"MySheet\", classReference.getLastSpaceReference());\n\n        when(this.mockClassSheetBinder.bind(argThat(new ArgumentMatcher<DocumentModelBridge>()\n        {\n            @Override\n            public boolean matches(Object argument)\n            {\n                return classDocument.equals(argument) && classDocument != argument;\n            }\n        }), same(sheetReference))).thenReturn(true);\n\n        Assert.assertTrue(this.sheetScriptService.bindClassSheet(classDocumentApi, sheetReference));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Unit test for {@link SheetScriptService#getDocuments(DocumentReference)}.\n     */\n    @Test\n    public void getDocuments() throws Exception\n    {\n        DocumentReference sheetReference = new DocumentReference(\"wiki\", \"Space\", \"Sheet\");\n        DocumentReference publicDocumentReference = new DocumentReference(\"wiki\", \"Space\", \"PublicPage\");\n        DocumentReference privateDocumentReference = new DocumentReference(\"wiki\", \"Space\", \"PrivatePage\");\n        DocumentReference publicClassReference = new DocumentReference(\"wiki\", \"Space\", \"PublicClass\");\n        DocumentReference privateClassReference = new DocumentReference(\"wiki\", \"Space\", \"PrivateClass\");\n\n        SheetBinder documentSheetBinder = mocker.getInstance(SheetBinder.class, \"document\");\n        when(documentSheetBinder.getDocuments(sheetReference)).thenReturn(\n            Arrays.asList(publicDocumentReference, privateDocumentReference));\n\n        SheetBinder classSheetBinder = mocker.getInstance(SheetBinder.class, \"class\");\n        when(classSheetBinder.getDocuments(sheetReference)).thenReturn(\n            Arrays.asList(privateClassReference, publicClassReference));\n\n        DocumentAccessBridge documentAccessBridge = mocker.getInstance(DocumentAccessBridge.class);\n        when(documentAccessBridge.isDocumentViewable(publicClassReference)).thenReturn(true);\n        when(documentAccessBridge.isDocumentViewable(publicDocumentReference)).thenReturn(true);\n\n        Assert.assertEquals(Arrays.asList(publicDocumentReference, publicClassReference),\n            sheetScriptService.getDocuments(sheetReference));\n    }","id":100674,"modified_method":"/**\n     * Unit test for {@link SheetScriptService#getDocuments(DocumentReference)}.\n     */\n    @Test\n    public void getDocuments() throws Exception\n    {\n        DocumentReference sheetReference = new DocumentReference(\"wiki\", \"Space\", \"Sheet\");\n        DocumentReference publicDocumentReference = new DocumentReference(\"wiki\", \"Space\", \"PublicPage\");\n        DocumentReference privateDocumentReference = new DocumentReference(\"wiki\", \"Space\", \"PrivatePage\");\n        DocumentReference publicClassReference = new DocumentReference(\"wiki\", \"Space\", \"PublicClass\");\n        DocumentReference privateClassReference = new DocumentReference(\"wiki\", \"Space\", \"PrivateClass\");\n\n        when(this.mockDocumentSheetBinder.getDocuments(sheetReference)).thenReturn(\n            Arrays.asList(publicDocumentReference, privateDocumentReference));\n\n        when(this.mockClassSheetBinder.getDocuments(sheetReference)).thenReturn(\n            Arrays.asList(privateClassReference, publicClassReference));\n\n        when(this.mockDocumentAccessBridge.isDocumentViewable(publicClassReference)).thenReturn(true);\n        when(this.mockDocumentAccessBridge.isDocumentViewable(publicDocumentReference)).thenReturn(true);\n\n        Assert.assertEquals(Arrays.asList(publicDocumentReference, publicClassReference),\n            this.sheetScriptService.getDocuments(sheetReference));\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        URL url = this.getClass().getClassLoader().getResource(\"solrhome\");\n        System.setProperty(EmbeddedSolrInstance.SOLR_HOME_SYSTEM_PROPERTY, url.getPath());\n\n        this.embedded = mock(SolrInstance.class);\n        this.remote = mock(SolrInstance.class);\n\n        this.mockConfig = this.mocker.getInstance(SolrConfiguration.class);\n\n        this.mockCM = this.mocker.getInstance(ComponentManager.class);\n        when(this.mockCM.getInstance(SolrInstance.class, \"embedded\")).thenReturn(this.embedded);\n        when(this.mockCM.getInstance(SolrInstance.class, \"remote\")).thenReturn(this.remote);\n        when(this.mockCM.getInstance(SolrInstance.class, \"none\")).thenThrow(\n            new ComponentLookupException(\"No such component\"));\n    }","id":100675,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        URL url = this.getClass().getClassLoader().getResource(\"solrhome\");\n        System.setProperty(EmbeddedSolrInstance.SOLR_HOME_SYSTEM_PROPERTY, url.getPath());\n\n        this.embedded = this.mocker.registerMockComponent(SolrInstance.class, \"embedded\");\n        this.remote = this.mocker.registerMockComponent(SolrInstance.class, \"remote\");\n\n        this.mockConfig = this.mocker.getInstance(SolrConfiguration.class);\n    }","commit_id":"ea8ddd8ed58cae21d9d975fa5314ad3774882946","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        xcontextProvider = mocker.registerMockComponent(XWikiContext.TYPE_PROVIDER);\n        context = mock(XWikiContext.class);\n        when(xcontextProvider.get()).thenReturn(context);\n        xwiki = mock(XWiki.class);\n        when(context.getWiki()).thenReturn(xwiki);\n\n        referenceSerializer = mocker.getInstance(EntityReferenceSerializer.TYPE_STRING);\n        referenceResolver = mocker.getInstance(DocumentReferenceResolver.TYPE_STRING);\n        userReferenceResolver = mocker.getInstance(DocumentReferenceResolver.TYPE_STRING, \"user\");\n\n        wikiDescriptorManager = mock(WikiDescriptorManager.class);\n        wikiPropertyGroupManager = mock(WikiPropertyGroupManager.class);\n        wikiDescriptorDocumentHelper = mocker.getInstance(WikiDescriptorDocumentHelper.class);\n\n        Provider<WikiDescriptorManager> wikiDescriptorManagerProvider =\n            mocker.getInstance(new DefaultParameterizedType(null, Provider.class, WikiDescriptorManager.class));\n        Provider<WikiPropertyGroupManager> wikiPropertyGroupManagerProvider =\n            mocker.getInstance(new DefaultParameterizedType(null, Provider.class, WikiPropertyGroupManager.class));\n\n        when(wikiDescriptorManagerProvider.get()).thenReturn(wikiDescriptorManager);\n        when(wikiPropertyGroupManagerProvider.get()).thenReturn(wikiPropertyGroupManager);\n    }","id":100676,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        xcontextProvider = mocker.registerMockComponent(XWikiContext.TYPE_PROVIDER);\n        context = mock(XWikiContext.class);\n        when(xcontextProvider.get()).thenReturn(context);\n        xwiki = mock(XWiki.class);\n        when(context.getWiki()).thenReturn(xwiki);\n\n        referenceSerializer = mocker.getInstance(EntityReferenceSerializer.TYPE_STRING);\n        referenceResolver = mocker.getInstance(DocumentReferenceResolver.TYPE_STRING);\n        userReferenceResolver = mocker.getInstance(DocumentReferenceResolver.TYPE_STRING, \"user\");\n\n        wikiDescriptorDocumentHelper = mocker.getInstance(WikiDescriptorDocumentHelper.class);\n\n        wikiDescriptorManager = mocker.registerMockComponent(WikiDescriptorManager.class);\n        wikiPropertyGroupManager = mocker.registerMockComponent(WikiPropertyGroupManager.class);\n    }","commit_id":"40208ed0b30e070f463455e75fe0949357d67d88","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        wikiDescriptorManagerProvider = mocker.getInstance(new DefaultParameterizedType(null, Provider.class,\n                WikiDescriptorManager.class));\n        xcontextProvider = mocker.registerMockComponent(XWikiContext.TYPE_PROVIDER);\n        queryManager = mocker.getInstance(QueryManager.class);\n        documentReferenceResolver = mocker.getInstance(DocumentReferenceResolver.TYPE_STRING, \"current\");\n        context = mock(XWikiContext.class);\n        when(xcontextProvider.get()).thenReturn(context);\n        xwiki = mock(XWiki.class);\n        when(context.getWiki()).thenReturn(xwiki);\n        wikiDescriptorManager = mock(WikiDescriptorManager.class);\n        when(wikiDescriptorManagerProvider.get()).thenReturn(wikiDescriptorManager);\n        when(wikiDescriptorManager.getMainWikiId()).thenReturn(\"xwiki\");\n    }","id":100677,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        wikiDescriptorManager = mocker.registerMockComponent(WikiDescriptorManager.class);\n        when(wikiDescriptorManager.getMainWikiId()).thenReturn(\"xwiki\");\n\n        xcontextProvider = mocker.registerMockComponent(XWikiContext.TYPE_PROVIDER);\n        context = mock(XWikiContext.class);\n        when(xcontextProvider.get()).thenReturn(context);\n        xwiki = mock(XWiki.class);\n        when(context.getWiki()).thenReturn(xwiki);\n\n        queryManager = mocker.getInstance(QueryManager.class);\n        documentReferenceResolver = mocker.getInstance(DocumentReferenceResolver.TYPE_STRING, \"current\");\n    }","commit_id":"40208ed0b30e070f463455e75fe0949357d67d88","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void installExtension(Artifact artifact, XWikiContext xcontext) throws ComponentLookupException,\n        InstallException, LocalExtensionRepositoryException, MojoExecutionException\n    {\n        ComponentManager componentManager = (ComponentManager) xcontext.get(ComponentManager.class.getName());\n\n        LocalExtensionRepository localExtensionRepository =\n            componentManager.getInstance(LocalExtensionRepository.class);\n        InstalledExtensionRepository installedExtensionRepository =\n            componentManager.getInstance(InstalledExtensionRepository.class);\n\n        DefaultLocalExtension extension =\n            new DefaultLocalExtension(null, new ExtensionId(artifact.getGroupId() + ':' + artifact.getArtifactId(),\n                artifact.getBaseVersion()), artifact.getType());\n\n        extension.setFile(artifact.getFile());\n\n        MavenProject project = getMavenProject(artifact);\n\n        toExtension(extension, project.getModel(), componentManager);\n\n        LocalExtension localExtension = localExtensionRepository.storeExtension(extension);\n        installedExtensionRepository.installExtension(localExtension, \"wiki:xwiki\", true);\n    }","id":100678,"modified_method":"private void installExtension(Artifact artifact, XWikiContext xcontext) throws ComponentLookupException,\n        InstallException, LocalExtensionRepositoryException\n    {\n        ComponentManager componentManager = (ComponentManager) xcontext.get(ComponentManager.class.getName());\n\n        LocalExtensionRepository localExtensionRepository =\n            componentManager.getInstance(LocalExtensionRepository.class);\n        InstalledExtensionRepository installedExtensionRepository =\n            componentManager.getInstance(InstalledExtensionRepository.class);\n\n        ConverterManager converter = componentManager.getInstance(ConverterManager.class);\n        Extension mavenExtension = converter.convert(Extension.class, this.project.getModel());\n\n        DefaultLocalExtension extension = new DefaultLocalExtension(null, mavenExtension);\n\n        extension.setFile(artifact.getFile());\n\n        LocalExtension localExtension = localExtensionRepository.storeExtension(extension);\n        installedExtensionRepository.installExtension(localExtension, \"wiki:xwiki\", true);\n    }","commit_id":"40208ed0b30e070f463455e75fe0949357d67d88","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Tests that the Execution Context and the XWiki Context share the same reference of the Velocity Context after a\n     * call to {@link VelocityManager#getVelocityContext()}. There is old code that accesses the Velocity Context from\n     * the XWiki Context.\n     */\n    @Test\n    public void getVelocityContextUpdatesXContext() throws Exception\n    {\n        Execution execution = this.mocker.getInstance(Execution.class);\n        ExecutionContext executionContext = new ExecutionContext();\n        when(execution.getContext()).thenReturn(executionContext);\n\n        ScriptContextManager scriptContextManager = this.mocker.getInstance(ScriptContextManager.class);\n        ScriptContext scriptContext = new SimpleScriptContext();\n        when(scriptContextManager.getScriptContext()).thenReturn(scriptContext);\n\n        VelocityContext velocityContext = new VelocityContext();\n        executionContext.newProperty(\"velocityContext\").initial(velocityContext).inherited().cloneValue().declare();\n\n        XWikiContext mockContext = mock(XWikiContext.class);\n        Provider<XWikiContext> xcontextProvider = this.mocker.getInstance(XWikiContext.TYPE_PROVIDER);\n        when(xcontextProvider.get()).thenReturn(mockContext);\n\n        this.mocker.getComponentUnderTest().getVelocityContext();\n\n        verify(mockContext).put(\"vcontext\", velocityContext);\n    }","id":100679,"modified_method":"/**\n     * Tests that the Execution Context and the XWiki Context share the same reference of the Velocity Context after a\n     * call to {@link VelocityManager#getVelocityContext()}. There is old code that accesses the Velocity Context from\n     * the XWiki Context.\n     */\n    @Test\n    public void getVelocityContextUpdatesXContext() throws Exception\n    {\n        Execution execution = this.mocker.getInstance(Execution.class);\n        ExecutionContext executionContext = new ExecutionContext();\n        when(execution.getContext()).thenReturn(executionContext);\n\n        ScriptContextManager scriptContextManager = this.mocker.getInstance(ScriptContextManager.class);\n        ScriptContext scriptContext = new SimpleScriptContext();\n        when(scriptContextManager.getScriptContext()).thenReturn(scriptContext);\n\n        VelocityContext velocityContext = new VelocityContext();\n        executionContext.newProperty(\"velocityContext\").initial(velocityContext).inherited().cloneValue().declare();\n\n        XWikiContext mockContext = mock(XWikiContext.class);\n        Provider<XWikiContext> xcontextProvider = this.mocker.registerMockComponent(XWikiContext.TYPE_PROVIDER);\n        when(xcontextProvider.get()).thenReturn(mockContext);\n\n        this.mocker.getComponentUnderTest().getVelocityContext();\n\n        verify(mockContext).put(\"vcontext\", velocityContext);\n    }","commit_id":"ff081f6d0c2d71ddb7d68b2d405a4049c4104cb8","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void getVelocityEngineWhenNoVelocityEngineInCache() throws Exception\n    {\n        Execution execution = this.mocker.getInstance(Execution.class);\n        ExecutionContext executionContext = new ExecutionContext();\n        when(execution.getContext()).thenReturn(executionContext);\n\n        XWikiContext xwikiContext = mock(XWikiContext.class);\n        Provider<XWikiContext> xcontextProvider = this.mocker.getInstance(XWikiContext.TYPE_PROVIDER);\n        when(xcontextProvider.get()).thenReturn(xwikiContext);\n        com.xpn.xwiki.XWiki xwiki = mock(com.xpn.xwiki.XWiki.class);\n        when(xwikiContext.getWiki()).thenReturn(xwiki);\n        when(xwiki.getSkin(any(XWikiContext.class))).thenReturn(\"testskin\");\n\n        VelocityFactory velocityFactory = this.mocker.getInstance(VelocityFactory.class);\n        when(velocityFactory.hasVelocityEngine(\"default\")).thenReturn(false);\n\n        VelocityConfiguration velocityConfiguration = this.mocker.getInstance(VelocityConfiguration.class);\n        when(velocityConfiguration.getProperties()).thenReturn(new Properties());\n\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityFactory.createVelocityEngine(eq(\"default\"), any(Properties.class))).thenReturn(velocityEngine);\n\n        TemplateManager templates = mock(TemplateManager.class);\n        Provider<TemplateManager> templatesProvider = this.mocker.getInstance(new DefaultParameterizedType(null, Provider.class,\n            TemplateManager.class));\n        when(templatesProvider.get()).thenReturn(templates);\n\n        Assert.assertSame(velocityEngine, this.mocker.getComponentUnderTest().getVelocityEngine());\n    }","id":100680,"modified_method":"@Test\n    public void getVelocityEngineWhenNoVelocityEngineInCache() throws Exception\n    {\n        Execution execution = this.mocker.getInstance(Execution.class);\n        ExecutionContext executionContext = new ExecutionContext();\n        when(execution.getContext()).thenReturn(executionContext);\n\n        XWikiContext xwikiContext = mock(XWikiContext.class);\n        Provider<XWikiContext> xcontextProvider = this.mocker.registerMockComponent(XWikiContext.TYPE_PROVIDER);\n        when(xcontextProvider.get()).thenReturn(xwikiContext);\n        com.xpn.xwiki.XWiki xwiki = mock(com.xpn.xwiki.XWiki.class);\n        when(xwikiContext.getWiki()).thenReturn(xwiki);\n        when(xwiki.getSkin(any(XWikiContext.class))).thenReturn(\"testskin\");\n\n        VelocityFactory velocityFactory = this.mocker.getInstance(VelocityFactory.class);\n        when(velocityFactory.hasVelocityEngine(\"default\")).thenReturn(false);\n\n        VelocityConfiguration velocityConfiguration = this.mocker.getInstance(VelocityConfiguration.class);\n        when(velocityConfiguration.getProperties()).thenReturn(new Properties());\n\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityFactory.createVelocityEngine(eq(\"default\"), any(Properties.class))).thenReturn(velocityEngine);\n\n        this.mocker.registerMockComponent(TemplateManager.class);\n\n        Assert.assertSame(velocityEngine, this.mocker.getComponentUnderTest().getVelocityEngine());\n    }","commit_id":"ff081f6d0c2d71ddb7d68b2d405a4049c4104cb8","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void onTraversalDone(Integer numreads) {\n        out.printf(\"Done! %s alleles found\\n\", numreads);\n        HLAnames = HLAnamesAL.toArray(new String[numreads]);\n        HLAreads = HLAreadsAL.toArray(new String[numreads]);\n        HLAstartpos = HLAstartposAL.toArray(new Integer[numreads]);\n        HLAstoppos = HLAstopposAL.toArray(new Integer[numreads]);\n\n        double[][] AlleleLikelihoods = new double[numreads][numreads];\n\n        String name1, name2;\n        double frq1, frq2;\n\n\n        double minfrq = 0;\n        if (FREQUENT){\n            minfrq = 0.0001;\n        }\n        int numcombinations = 0;\n        out.printf(\"NUM\\tAllele1\\tAllele2\\tSSG\\n\");\n\n        int index1 = -1, index2 = -1;\n        if (!debugAlleles.equals(\"\")){\n            String s[] = debugAlleles.split(\",\");\n            for (int i = 0; i < numreads; i++){\n                if (HLAnames[i].equals(s[0])){\n                    index1 = i;\n                }\n                if (HLAnames[i].equals(s[1])){\n                    index2 = i;\n                }\n                if (index1 > -1 && index2 > -1){\n                    out.printf(\"INFO: debugging %s\\t%s\\t%s\\t%s\\n\",s[0],s[1],index1,index2);\n                    double dl = CalculateLikelihood(index1,index2,true);\n                    break;\n                }\n            }\n        }\n        \n        for (int i = 0; i < numreads; i++){\n            name1 = HLAnames[i].substring(4);\n            if (UniqueAlleles.containsKey(name1)){\n                //frq1 = Double.parseDouble((String) AlleleFrequencies.get(name1).toString());\n                //if (frq1 > minfrq){\n                    for (int j = i; j < numreads; j++){\n                        name2 = HLAnames[j].substring(4);\n                        if (UniqueAlleles.containsKey(name2)){\n                //            frq2 = Double.parseDouble((String) AlleleFrequencies.get(name2).toString());\n                //            if (frq2 > minfrq){\n                                if ((HLAstartpos[i] < HLAstoppos[j]) && (HLAstartpos[j] < HLAstoppos[i])){\n                                    numcombinations++;\n                                    AlleleLikelihoods[i][j] = CalculateLikelihood(i,j,false);\n                                    out.printf(\"%s\\t%s\\t%s\\t%.2f\\n\",numcombinations,name1,name2,AlleleLikelihoods[i][j]);\n                                }\n                //            }else{\n                //                if (DEBUG){out.printf(\"%s has allele frequency%.5f\\n\",name2,frq2);}\n                //            }\n                //        }else{\n                //            if (DEBUG){out.printf(\"%s not found in allele frequency file\\n\",name2);}\n                        }\n                    }\n                //}else{\n                //    if (DEBUG){out.printf(\"%s has allele frequency%.5f\\n\",name1,frq1);}\n                //}\n            }else{\n                if (DEBUG){out.printf(\"%s not found in allele frequency file\\n\",name1);}\n            }\n        }\n    }","id":100681,"modified_method":"public void onTraversalDone(Integer numreads) {\n        out.printf(\"Done! %s alleles found\\n\", numreads);\n        HLAnames = HLAnamesAL.toArray(new String[numreads]);\n        HLAreads = HLAreadsAL.toArray(new String[numreads]);\n        HLAstartpos = HLAstartposAL.toArray(new Integer[numreads]);\n        HLAstoppos = HLAstopposAL.toArray(new Integer[numreads]);\n\n        double[][] AlleleLikelihoods = new double[numreads][numreads];\n\n        String name1, name2;\n        double frq1, frq2;\n\n\n        double minfrq = 0;\n        if (FREQUENT){\n            minfrq = 0.0001;\n        }\n        int numcombinations = 0;\n        out.printf(\"NUM\\tAllele1\\tAllele2\\tSSG\\n\");\n\n        int index1 = -1, index2 = -1;\n        if (!debugAlleles.equals(\"\")){\n            String s[] = debugAlleles.split(\",\");\n            for (int i = 0; i < numreads; i++){\n                if (HLAnames[i].equals(s[0])){\n                    index1 = i;\n                }\n                if (HLAnames[i].equals(s[1])){\n                    index2 = i;\n                }\n                if (index1 > -1 && index2 > -1){\n                    out.printf(\"INFO: debugging %s\\t%s\\t%s\\t%s\\n\",s[0],s[1],index1,index2);\n                    double dl = CalculateLikelihood(index1,index2,true);\n                    break;\n                }\n            }\n        }\n        \n        for (int i = 0; i < numreads; i++){\n            name1 = HLAnames[i].substring(4);\n            String [] n1 = name1.split(\"\\\\*\");\n//            out.printf(\"1: %s\\n\",n1[0] + \"*\" + n1[1].substring(0, 3));\n            if (UniqueAlleles.containsKey(n1[0] + \"*\" + n1[1].substring(0, 4))){\n                //out.printf(\"1: %s\\n\",name1);\n                //frq1 = Double.parseDouble((String) AlleleFrequencies.get(name1).toString());\n                //if (frq1 > minfrq){\n                    for (int j = i; j < numreads; j++){\n                        name2 = HLAnames[j].substring(4);\n                        String [] n2 = name2.split(\"\\\\*\");\n//                        out.printf(\"2: %s\\n\",n2[0] + \"*\" + n2[1].substring(0, 3));\n                        if (UniqueAlleles.containsKey(n2[0] + \"*\" + n2[1].substring(0, 4))){\n                        \n                //            frq2 = Double.parseDouble((String) AlleleFrequencies.get(name2).toString());\n                //            if (frq2 > minfrq){\n                                if ((HLAstartpos[i] < HLAstoppos[j]) && (HLAstartpos[j] < HLAstoppos[i])){\n                                    numcombinations++;\n                                    AlleleLikelihoods[i][j] = CalculateLikelihood(i,j,false);\n                                    out.printf(\"%s\\t%s\\t%s\\t%.2f\\n\",numcombinations,name1,name2,AlleleLikelihoods[i][j]);\n                                }\n                //            }else{\n                //                if (DEBUG){out.printf(\"%s has allele frequency%.5f\\n\",name2,frq2);}\n                //            }\n                //        }else{\n                //            if (DEBUG){out.printf(\"%s not found in allele frequency file\\n\",name2);}\n                        }\n                    }\n                //}else{\n                //    if (DEBUG){out.printf(\"%s has allele frequency%.5f\\n\",name1,frq1);}\n                //}\n            //}else{\n            //    if (DEBUG){out.printf(\"%s not found in allele frequency file\\n\",name1);}\n            }\n        }\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer reduceInit() {\n        if (!loaded){\n            loaded = true;\n            BaseLikelihoodsFileReader baseLikelihoodsReader = new BaseLikelihoodsFileReader();\n            baseLikelihoodsReader.ReadFile(baseLikelihoodsFile, false);\n            baseLikelihoods = baseLikelihoodsReader.GetBaseLikelihoods();\n            positions = baseLikelihoodsReader.GetPositions();\n\n            HLAnamesAL = new ArrayList<String>();\n            HLAreadsAL = new ArrayList<String>();\n            HLAstartposAL = new ArrayList<Integer>();\n            HLAstopposAL = new ArrayList<Integer>();\n\n            if (!ethnicity.equals(\"CaucasianUSA\")){\n                AlleleFrequencyFile = \"/humgen/gsa-scr1/GSA/sjia/454_HLA/HLA/HLA_\" + ethnicity + \".freq\";\n            }\n            out.printf(\"INFO  Reading HLA allele frequencies ... \");\n            FrequencyFileReader HLAfreqReader = new FrequencyFileReader();\n            HLAfreqReader.ReadFile(AlleleFrequencyFile,UniqueAllelesFile);\n            AlleleFrequencies = HLAfreqReader.GetAlleleFrequencies();\n            UniqueAlleles = HLAfreqReader.GetUniqueAlleles();\n            out.printf(\"Done! Frequencies for %s HLA alleles loaded.\\n\",AlleleFrequencies.size());\n\n            out.printf(\"INFO  Reading HLA dictionary ...\");\n\n\n        }\n        return 0;\n    }","id":100682,"modified_method":"public Integer reduceInit() {\n        if (!loaded){\n            loaded = true;\n            BaseLikelihoodsFileReader baseLikelihoodsReader = new BaseLikelihoodsFileReader();\n            baseLikelihoodsReader.ReadFile(baseLikelihoodsFile, false);\n            baseLikelihoods = baseLikelihoodsReader.GetBaseLikelihoods();\n            positions = baseLikelihoodsReader.GetPositions();\n\n            HLAnamesAL = new ArrayList<String>();\n            HLAreadsAL = new ArrayList<String>();\n            HLAstartposAL = new ArrayList<Integer>();\n            HLAstopposAL = new ArrayList<Integer>();\n\n            if (!ethnicity.equals(\"CaucasianUSA\")){\n                AlleleFrequencyFile = \"/humgen/gsa-scr1/GSA/sjia/454_HLA/HLA/HLA_\" + ethnicity + \".freq\";\n            }\n            out.printf(\"INFO  Reading HLA allele frequencies ... \");\n            FrequencyFileReader HLAfreqReader = new FrequencyFileReader();\n            HLAfreqReader.ReadFile(AlleleFrequencyFile,UniqueAllelesFile);\n            AlleleFrequencies = HLAfreqReader.GetAlleleFrequencies();\n            UniqueAlleles = HLAfreqReader.GetUniqueAlleles();\n            out.printf(\"Done! Frequencies for %s HLA alleles loaded.\\n\",AlleleFrequencies.size());\n\n            //out.printf(\"INFO Common alleles:\\n\");\n            for (int i = 1; i < UniqueAlleles.size(); i++){\n                //out.printf(\"INFO %s\\n\",UniqueAlleles.values().toArray()[i]);\n            }\n            out.printf(\"INFO  Reading HLA dictionary ...\");\n\n\n        }\n        return 0;\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void onTraversalDone(Integer numreads) {\n        String name1, name2;\n        Double frq1 = 0.0, frq2 = 0.0, likelihood, minfrq = 0.0;\n        int numCombinations = 0;\n\n\n        if (!debugAlleles.equals(\"\")){\n            String s[] = debugAlleles.split(\",\");\n            int index1 = HLADictionaryReader.GetReadIndex(s[0]);\n            int index2 = HLADictionaryReader.GetReadIndex(s[1]);\n            out.printf(\"INFO: debugging %s\\t%s\\t%s\\t%s\\n\",s[0],s[1],index1,index2);\n            if (index1 > -1 && index2 > -1){\n                likelihood = CalculatePhaseLikelihood(index1,index2,true);\n            }\n        }\n\n        if (ONLYFREQUENT){\n            minfrq = 0.0001;\n        }\n\n        out.printf(\"NUM\\tAllele1\\tAllele2\\tPhase\\tFrq1\\tFrq2\\n\");\n        for (int i = 0; i < HLAnames.length; i++){\n            name1 = HLAnames[i].substring(4);\n            if (UniqueAlleles.containsKey(name1)){\n                if (AlleleFrequencies.containsKey(name1)){\n                    frq1 = Double.parseDouble((String) AlleleFrequencies.get(name1).toString());\n                }else{\n                    frq1 = .0001;\n                }\n                //if (frq1 > minfrq){\n                    for (int j = i; j < HLAnames.length; j++){\n                        name2 = HLAnames[j].substring(4);\n                        if (name1.substring(0,1).equals(name2.substring(0,1))){\n                            if (UniqueAlleles.containsKey(name2)){\n                                if (AlleleFrequencies.containsKey(name2)){\n                                    frq2 = Double.parseDouble((String) AlleleFrequencies.get(name2).toString());\n                                }else{\n                                    frq2 = .0001;\n                                }\n                //                if (frq2 > minfrq){\n                                    likelihood = CalculatePhaseLikelihood(i,j,false);\n                                    numCombinations++;\n                                    out.printf(\"%s\\t%s\\t%s\\t%.2f\\t%.2f\\t%.2f\\n\",numCombinations,name1,name2,likelihood,Math.log10(frq1),Math.log10(frq2));\n                //                }\n                            }\n                        }\n                    }\n                //}\n            }\n        }\n    }","id":100683,"modified_method":"public void onTraversalDone(Integer numreads) {\n        String name1, name2;\n        Double frq1 = 0.0, frq2 = 0.0, likelihood, minfrq = 0.0;\n        int numCombinations = 0;\n\n\n        if (!debugAlleles.equals(\"\")){\n            String s[] = debugAlleles.split(\",\");\n            int index1 = HLADictionaryReader.GetReadIndex(s[0]);\n            int index2 = HLADictionaryReader.GetReadIndex(s[1]);\n            out.printf(\"INFO: debugging %s\\t%s\\t%s\\t%s\\n\",s[0],s[1],index1,index2);\n            if (index1 > -1 && index2 > -1){\n                likelihood = CalculatePhaseLikelihood(index1,index2,true);\n            }\n        }\n\n        if (ONLYFREQUENT){\n            minfrq = 0.0001;\n        }\n\n        out.printf(\"NUM\\tAllele1\\tAllele2\\tPhase\\tFrq1\\tFrq2\\n\");\n        for (int i = 0; i < HLAnames.length; i++){\n            name1 = HLAnames[i].substring(4);\n            String [] n1 = name1.split(\"\\\\*\");\n            if (UniqueAlleles.containsKey(n1[0] + \"*\" + n1[1].substring(0, 4))){\n                if (AlleleFrequencies.containsKey(name1)){\n                    frq1 = Double.parseDouble((String) AlleleFrequencies.get(name1).toString());\n                }else{\n                    frq1 = .0001;\n                }\n                //if (frq1 > minfrq){\n                    for (int j = i; j < HLAnames.length; j++){\n                        name2 = HLAnames[j].substring(4);\n                        String [] n2 = name2.split(\"\\\\*\");\n                        if (n1[0].equals(n2[0]) && UniqueAlleles.containsKey(n2[0] + \"*\" + n2[1].substring(0, 4))){\n                            if (AlleleFrequencies.containsKey(name2)){\n                                frq2 = Double.parseDouble((String) AlleleFrequencies.get(name2).toString());\n                            }else{\n                                frq2 = .0001;\n                            }\n            //                if (frq2 > minfrq){\n                                likelihood = CalculatePhaseLikelihood(i,j,false);\n                                numCombinations++;\n                                out.printf(\"%s\\t%s\\t%s\\t%.2f\\t%.2f\\t%.2f\\n\",numCombinations,name1,name2,likelihood,Math.log10(frq1),Math.log10(frq2));\n            //                }\n\n                        }\n                    }\n                //}\n            }\n        }\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void onTraversalDone(Integer numreads) {\n        HLAnames = HLAnamesAL.toArray(new String[numreads]);\n        HLAreads = HLAreadsAL.toArray(new String[numreads]);\n        HLAstartpos = HLAstartposAL.toArray(new Integer[numreads]);\n        HLAstoppos = HLAstopposAL.toArray(new Integer[numreads]);\n        String star = \"*\";\n        String error = \"\";\n\n        //out.printf(\"INFO %s alleles in dictionary\\n\",HLAnames.length);\n        String[][] A_exons = GetExonIntervals(\"A\",true);\n        String[][] B_exons = GetExonIntervals(\"B\",false);\n        String[][] C_exons = GetExonIntervals(\"C\",false);\n        String[][] DRB1_exons = GetExonIntervals(\"DRB1\",false);\n        String[][] DQB1_exons = GetExonIntervals(\"DQB1\",false);\n        String[][] DQA1_exons = GetExonIntervals(\"DQA1\",true);\n        String[][] DPB1_exons = GetExonIntervals(\"DPB1\",true);\n        String[][] DPA1_exons = GetExonIntervals(\"DPA1\",false);\n        //Print individual info and genotypes\n        for (int i = 0; i < inputFileContents.length; i++){\n            String[] s = inputFileContents[i].split(\" \");\n            //out.printf(\"%s\\t%s\\n\",inputFileContents[i],s.length);\n            if (s.length > 10){\n                error = \"\";\n                out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\t%s\",s[0],s[1],s[2],s[3],s[4],s[5]);\n                String HLA_A_1 = GetAlleleName(\"HLA_A\",star,s[6]);\n                String HLA_A_2 = GetAlleleName(\"HLA_A\",star,s[7]);\n                String HLA_B_1 = GetAlleleName(\"HLA_B\",star,s[8]);\n                String HLA_B_2 = GetAlleleName(\"HLA_B\",star,s[9]);\n                String HLA_C_1 = GetAlleleName(\"HLA_C\",star,s[10]);\n                String HLA_C_2 = GetAlleleName(\"HLA_C\",star,s[11]);\n                String HLA_DPA1_1 = GetAlleleName(\"HLA_DPA1\",star,s[12]);\n                String HLA_DPA1_2 = GetAlleleName(\"HLA_DPA1\",star,s[13]);\n                String HLA_DPB1_1 = GetAlleleName(\"HLA_DPB1\",star,s[14]);\n                String HLA_DPB1_2 = GetAlleleName(\"HLA_DPB1\",star,s[15]);\n                String HLA_DQA1_1 = GetAlleleName(\"HLA_DQA1\",star,s[16]);\n                String HLA_DQA1_2 = GetAlleleName(\"HLA_DQA1\",star,s[17]);\n                String HLA_DQB1_1 = GetAlleleName(\"HLA_DQB1\",star,s[18]);\n                String HLA_DQB1_2 = GetAlleleName(\"HLA_DQB1\",star,s[19]);\n                String HLA_DRB1_1 = GetAlleleName(\"HLA_DRB1\",star,s[20]);\n                String HLA_DRB1_2 = GetAlleleName(\"HLA_DRB1\",star,s[21]);\n\n                \n\n                if (true) {\n                    error = error + PrintGenotypes(s[1], HLA_A_1,HLA_A_2, HLA_A_start,HLA_A_end);\n                    error = error + PrintGenotypes(s[1], HLA_C_1,HLA_C_2, HLA_C_start,HLA_C_end);\n                    error = error + PrintGenotypes(s[1], HLA_B_1,HLA_B_2, HLA_B_start,HLA_B_end);\n                    error = error + PrintGenotypes(s[1], HLA_DRB1_1,HLA_DRB1_2, HLA_DRB1_start,HLA_DRB1_end);\n                    error = error + PrintGenotypes(s[1], HLA_DQA1_1,HLA_DQA1_2, HLA_DQA1_start,HLA_DQA1_end);\n                    error = error + PrintGenotypes(s[1], HLA_DQB1_1,HLA_DQB1_2, HLA_DQB1_start,HLA_DQB1_end);\n                    error = error + PrintGenotypes(s[1], HLA_DPA1_1,HLA_DPA1_2, HLA_DPA1_start,HLA_DPA1_end);\n                    error = error + PrintGenotypes(s[1], HLA_DPB1_1,HLA_DPB1_2, HLA_DPB1_start,HLA_DPB1_end);\n\n                    error = error + PrintAminoAcids(s[1], HLA_A_1,HLA_A_2, A_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_C_1,HLA_C_2, C_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_B_1,HLA_B_2, B_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_DRB1_1,HLA_DRB1_2, DRB1_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_DQA1_1,HLA_DQA1_2, DQA1_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_DQB1_1,HLA_DQB1_2, DQB1_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_DPA1_1,HLA_DPA1_2, DPA1_exons);\n                    error = error + PrintAminoAcids(s[1], HLA_DPB1_1,HLA_DPB1_2, DPB1_exons);\n                    out.printf(\"\\n\");\n                    out.printf(\"%s\",error);\n                }\n            }\n        }\n\n        //Prints SNP names for each site\n        if (true){\n            PrintSNPS(HLA_A_start,HLA_A_end);\n            PrintSNPS(HLA_C_start,HLA_C_end);\n            PrintSNPS(HLA_B_start,HLA_B_end);\n            PrintSNPS(HLA_DRB1_start,HLA_DRB1_end);\n            PrintSNPS(HLA_DQA1_start,HLA_DQA1_end);\n            PrintSNPS(HLA_DQB1_start,HLA_DQB1_end);\n            PrintSNPS(HLA_DPA1_start,HLA_DPA1_end);\n            PrintSNPS(HLA_DPB1_start,HLA_DPB1_end);\n\n            PrintAminoAcidSites(A_exons,\"A\",true);\n            PrintAminoAcidSites(C_exons,\"C\",false);\n            PrintAminoAcidSites(B_exons,\"B\",false);\n            PrintAminoAcidSites(DRB1_exons,\"DRB1\",false);\n            PrintAminoAcidSites(DQA1_exons,\"DQA1\",true);\n            PrintAminoAcidSites(DQB1_exons,\"DQB1\",false);\n            PrintAminoAcidSites(DPA1_exons,\"DPA1\",false);\n            PrintAminoAcidSites(DPB1_exons,\"DPB1\",true);\n        }\n\n    }","id":100684,"modified_method":"public void onTraversalDone(Integer numreads) {\n        HLAnames = HLAnamesAL.toArray(new String[numreads]);\n        HLAreads = HLAreadsAL.toArray(new String[numreads]);\n        HLAstartpos = HLAstartposAL.toArray(new Integer[numreads]);\n        HLAstoppos = HLAstopposAL.toArray(new Integer[numreads]);\n        String star = \"*\";\n        String error = \"\";\n\n        //out.printf(\"INFO %s alleles in dictionary\\n\",HLAnames.length);\n        String[][] A_exons = GetExonIntervals(\"A\",true);\n        String[][] B_exons = GetExonIntervals(\"B\",false);\n        String[][] C_exons = GetExonIntervals(\"C\",false);\n        String[][] DRB1_exons = GetExonIntervals(\"DRB1\",false);\n        String[][] DQB1_exons = GetExonIntervals(\"DQB1\",false);\n        String[][] DQA1_exons = GetExonIntervals(\"DQA1\",true);\n        String[][] DPB1_exons = GetExonIntervals(\"DPB1\",true);\n        String[][] DPA1_exons = GetExonIntervals(\"DPA1\",false);\n        //Print individual info and genotypes\n        for (int i = 0; i < inputFileContents.length; i++){\n            String[] s = inputFileContents[i].split(\" \");\n            //out.printf(\"%s\\t%s\\n\",inputFileContents[i],s.length);\n            if (s.length > 10){\n                error = \"\";\n                out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\t%s\",s[0],s[1],s[2],s[3],s[4],s[5]);\n                String HLA_A_1 = GetAlleleName(\"HLA_A\",star,s[6]);\n                String HLA_A_2 = GetAlleleName(\"HLA_A\",star,s[7]);\n                String HLA_B_1 = GetAlleleName(\"HLA_B\",star,s[8]);\n                String HLA_B_2 = GetAlleleName(\"HLA_B\",star,s[9]);\n                String HLA_C_1 = GetAlleleName(\"HLA_C\",star,s[10]);\n                String HLA_C_2 = GetAlleleName(\"HLA_C\",star,s[11]);\n                String HLA_DPA1_1 = GetAlleleName(\"HLA_DPA1\",star,s[12]);\n                String HLA_DPA1_2 = GetAlleleName(\"HLA_DPA1\",star,s[13]);\n                String HLA_DPB1_1 = GetAlleleName(\"HLA_DPB1\",star,s[14]);\n                String HLA_DPB1_2 = GetAlleleName(\"HLA_DPB1\",star,s[15]);\n                String HLA_DQA1_1 = GetAlleleName(\"HLA_DQA1\",star,s[16]);\n                String HLA_DQA1_2 = GetAlleleName(\"HLA_DQA1\",star,s[17]);\n                String HLA_DQB1_1 = GetAlleleName(\"HLA_DQB1\",star,s[18]);\n                String HLA_DQB1_2 = GetAlleleName(\"HLA_DQB1\",star,s[19]);\n                String HLA_DRB1_1 = GetAlleleName(\"HLA_DRB1\",star,s[20]);\n                String HLA_DRB1_2 = GetAlleleName(\"HLA_DRB1\",star,s[21]);\n\n                \n\n                if (true) {\n                    if (PrintDNA){\n                        error = error + PrintGenotypes(s[1], HLA_A_1,HLA_A_2, HLA_A_start,HLA_A_end);\n                        error = error + PrintGenotypes(s[1], HLA_C_1,HLA_C_2, HLA_C_start,HLA_C_end);\n                        error = error + PrintGenotypes(s[1], HLA_B_1,HLA_B_2, HLA_B_start,HLA_B_end);\n                        error = error + PrintGenotypes(s[1], HLA_DRB1_1,HLA_DRB1_2, HLA_DRB1_start,HLA_DRB1_end);\n                        error = error + PrintGenotypes(s[1], HLA_DQA1_1,HLA_DQA1_2, HLA_DQA1_start,HLA_DQA1_end);\n                        error = error + PrintGenotypes(s[1], HLA_DQB1_1,HLA_DQB1_2, HLA_DQB1_start,HLA_DQB1_end);\n                        error = error + PrintGenotypes(s[1], HLA_DPA1_1,HLA_DPA1_2, HLA_DPA1_start,HLA_DPA1_end);\n                        error = error + PrintGenotypes(s[1], HLA_DPB1_1,HLA_DPB1_2, HLA_DPB1_start,HLA_DPB1_end);\n                    }\n                    if (PrintAA){\n                        error = error + PrintAminoAcids(s[1], HLA_A_1,HLA_A_2, A_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_C_1,HLA_C_2, C_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_B_1,HLA_B_2, B_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_DRB1_1,HLA_DRB1_2, DRB1_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_DQA1_1,HLA_DQA1_2, DQA1_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_DQB1_1,HLA_DQB1_2, DQB1_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_DPA1_1,HLA_DPA1_2, DPA1_exons);\n                        error = error + PrintAminoAcids(s[1], HLA_DPB1_1,HLA_DPB1_2, DPB1_exons);\n                    }\n                    out.printf(\"\\n\");\n                    out.printf(\"%s\",error);\n                }\n            }\n        }\n\n        //Prints SNP names for each site\n        if (true){\n            if (PrintDNA){\n                PrintSNPS(HLA_A_start,HLA_A_end);\n                PrintSNPS(HLA_C_start,HLA_C_end);\n                PrintSNPS(HLA_B_start,HLA_B_end);\n                PrintSNPS(HLA_DRB1_start,HLA_DRB1_end);\n                PrintSNPS(HLA_DQA1_start,HLA_DQA1_end);\n                PrintSNPS(HLA_DQB1_start,HLA_DQB1_end);\n                PrintSNPS(HLA_DPA1_start,HLA_DPA1_end);\n                PrintSNPS(HLA_DPB1_start,HLA_DPB1_end);\n            }\n\n            if (PrintAA){\n                PrintAminoAcidSites(A_exons,\"A\",true);\n                PrintAminoAcidSites(C_exons,\"C\",false);\n                PrintAminoAcidSites(B_exons,\"B\",false);\n                PrintAminoAcidSites(DRB1_exons,\"DRB1\",false);\n                PrintAminoAcidSites(DQA1_exons,\"DQA1\",true);\n                PrintAminoAcidSites(DQB1_exons,\"DQB1\",false);\n                PrintAminoAcidSites(DPA1_exons,\"DPA1\",false);\n                PrintAminoAcidSites(DPB1_exons,\"DPB1\",true);\n            }\n        }\n\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer reduceInit() { \n        if (!DatabaseLoaded){\n            DatabaseLoaded = true;\n\n            //Load HLA dictionary\n            out.printf(\"INFO  Loading HLA dictionary ... \");\n\n            HLADictionaryReader.ReadFile(HLAdatabaseFile);\n            HLAreads = HLADictionaryReader.GetReads();\n            HLAnames = HLADictionaryReader.GetReadNames();\n            HLAstartpos = HLADictionaryReader.GetStartPositions();\n            HLAstoppos = HLADictionaryReader.GetStopPositions();\n            minstartpos = HLADictionaryReader.GetMinStartPos();\n            maxstoppos = HLADictionaryReader.GetMaxStopPos();\n            \n            out.printf(\"Done! %s HLA alleles loaded.\\n\",HLAreads.length);\n\n            nummatched = new double[HLAreads.length];\n            concordance = new double[HLAreads.length];\n            numcompared = new double[HLAreads.length];\n\n            //Read allele frequencies\n            if (ethnicity.equals(\"Black\")){\n                AlleleFrequencyFile = BlackAlleleFrequencyFile;\n            }else{\n                AlleleFrequencyFile = CaucasianAlleleFrequencyFile;\n            }\n            out.printf(\"INFO  Reading HLA allele frequencies ... \");\n            FrequencyFileReader HLAfreqReader = new FrequencyFileReader();\n            HLAfreqReader.ReadFile(AlleleFrequencyFile,UniqueAllelesFile);\n            AlleleFrequencies = HLAfreqReader.GetAlleleFrequencies();\n            out.printf(\"Done! Frequencies for %s HLA alleles loaded.\\n\",AlleleFrequencies.size());\n\n            //FindPolymorphicSites(minstartpos,maxstoppos);\n            \n            PolymorphicSitesFileReader siteFileReader = new PolymorphicSitesFileReader();\n            siteFileReader.ReadFile(PolymorphicSitesFile);\n            PolymorphicSites = siteFileReader.GetPolymorphicSites();\n            NonPolymorphicSites = siteFileReader.GetNonPolymorphicSites();\n            \n            \n            out.printf(\"INFO  %s polymorphic and %s non-polymorphic sites found in HLA dictionary\\n\",PolymorphicSites.length,NonPolymorphicSites.length);\n            out.printf(\"INFO  Comparing reads to database ...\\n\");\n\n            if (DEBUG){\n                //out.printf(\"Astart[%s]\\tAstop[%s]\\tBstart[%s]\\tBstop[%s]\\tCstart[%s]\\tCstop[%s]\\tnumAlleles[%s]\\n\",iAstart,iAstop,iBstart,iBstop,iCstart,iCstop,numHLAlleles);\n            }\n        }\n        return 0;\n    }","id":100685,"modified_method":"public Integer reduceInit() { \n        if (!DatabaseLoaded){\n            DatabaseLoaded = true;\n\n            //Load HLA dictionary\n            out.printf(\"INFO  Loading HLA dictionary ... \");\n\n            HLADictionaryReader.ReadFile(HLAdictionaryFile);\n            HLAreads = HLADictionaryReader.GetReads();\n            HLAnames = HLADictionaryReader.GetReadNames();\n            HLAstartpos = HLADictionaryReader.GetStartPositions();\n            HLAstoppos = HLADictionaryReader.GetStopPositions();\n            minstartpos = HLADictionaryReader.GetMinStartPos();\n            maxstoppos = HLADictionaryReader.GetMaxStopPos();\n            \n            out.printf(\"Done! %s HLA alleles loaded.\\n\",HLAreads.length);\n\n            nummatched = new double[HLAreads.length];\n            concordance = new double[HLAreads.length];\n            numcompared = new double[HLAreads.length];\n\n            //Read allele frequencies\n            if (ethnicity.equals(\"Black\")){\n                AlleleFrequencyFile = BlackAlleleFrequencyFile;\n            }else{\n                AlleleFrequencyFile = CaucasianAlleleFrequencyFile;\n            }\n            out.printf(\"INFO  Reading HLA allele frequencies ... \");\n            FrequencyFileReader HLAfreqReader = new FrequencyFileReader();\n            HLAfreqReader.ReadFile(AlleleFrequencyFile,UniqueAllelesFile);\n            AlleleFrequencies = HLAfreqReader.GetAlleleFrequencies();\n            out.printf(\"Done! Frequencies for %s HLA alleles loaded.\\n\",AlleleFrequencies.size());\n\n            //FindPolymorphicSites(minstartpos,maxstoppos);\n            \n            PolymorphicSitesFileReader siteFileReader = new PolymorphicSitesFileReader();\n            siteFileReader.ReadFile(PolymorphicSitesFile);\n            PolymorphicSites = siteFileReader.GetPolymorphicSites();\n            NonPolymorphicSites = siteFileReader.GetNonPolymorphicSites();\n            numpolymorphicsites = PolymorphicSites.length;\n            numnonpolymorphicsites = NonPolymorphicSites.length;\n            \n            out.printf(\"INFO  %s polymorphic and %s non-polymorphic sites found in HLA dictionary\\n\",PolymorphicSites.length,NonPolymorphicSites.length);\n            out.printf(\"INFO  Comparing reads to database ...\\n\");\n\n            if (DEBUG){\n                //out.printf(\"Astart[%s]\\tAstop[%s]\\tBstart[%s]\\tBstop[%s]\\tCstart[%s]\\tCstop[%s]\\tnumAlleles[%s]\\n\",iAstart,iAstop,iBstart,iBstop,iCstart,iCstop,numHLAlleles);\n            }\n        }\n        return 0;\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"private double CalculateConcordance(SAMRecord read){\n        int readstart = read.getAlignmentStart();\n        int readstop = read.getAlignmentEnd();\n        int numpolymorphicsites, numnonpolymorphicsites, pos;\n        char c1, c2;\n        double maxConcordance = 0.0, freq = 0.0, minFreq = 0.0;\n        String s1 = formatter.FormatRead(read.getCigarString(), read.getReadString());\n        String s2;\n        int allelestart, allelestop;\n\n        numpolymorphicsites = PolymorphicSites.length;\n        numnonpolymorphicsites = NonPolymorphicSites.length;\n\n        if (ONLYFREQUENT){\n            minFreq = 0.0001;\n        }\n\n        for (int i = 0; i < HLAreads.length; i++){\n            nummatched[i] = 0; concordance[i] = 0; numcompared[i] = 0;\n            freq = GetAlleleFrequency(HLAnames[i]);\n            //Get concordance between read and specific allele\n            if (readstart <= HLAstoppos[i] && readstop >= HLAstartpos[i] && freq > minFreq){\n                s2 = HLAreads[i];\n                \n                allelestart = HLAstartpos[i];\n                allelestop = HLAstoppos[i];\n\n                //Polymorphic sites: always increment denominator, increment numerator when bases are concordant\n                for (int j = 0; j < numpolymorphicsites; j++){\n                    pos = PolymorphicSites[j];\n                    if (pos >= readstart && pos <= readstop && pos >= allelestart && pos <= allelestop){\n                        c1 = s1.charAt(pos-readstart);\n                        c2 = s2.charAt(pos-allelestart);\n                        if (c1 != 'D'){//allow for deletions (sequencing errors)\n                            numcompared[i]++;\n                            if (c1 == c2){\n                                nummatched[i]++;\n                            }else{\n                                if (debugRead.equals(read.getReadName()) && debugAllele.equals(HLAnames[i])){\n                                    out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\",read.getReadName(), HLAnames[i], j, c1,c2);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //Non-polymorphic sites: increment denominator only when bases are discordant\n                \n                for (int j = 0; j < numnonpolymorphicsites; j++){\n                    pos = NonPolymorphicSites[j];\n                    if (pos >= readstart && pos <= readstop && pos >= allelestart && pos <= allelestop){\n                        c1 = s1.charAt(pos-readstart);\n                        c2 = s2.charAt(pos-allelestart);\n                        if (c1 != c2 && c1 != 'D'){//allow for deletions (sequencing errors)\n                            numcompared[i]++;\n                            if (debugRead.equals(read.getReadName()) && debugAllele.equals(HLAnames[i])){\n                                out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\",read.getReadName(), HLAnames[i], j, c1,c2);\n                            }\n                        }\n                    }\n                }\n            }\n\n            //Update concordance array\n            concordance[i]=nummatched[i]/numcompared[i];\n            if (concordance[i] > maxConcordance){maxConcordance = concordance[i];}\n            if (debugRead.equals(read.getReadName()) && debugAllele.equals(HLAnames[i])){\n                out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\",read.getReadName(),HLAnames[i],concordance[i],numcompared[i],numcompared[i]-nummatched[i]);\n            }\n            if (findFirst && (concordance[i] == 1)){\n                break;\n            }\n        \n        }\n\n        return maxConcordance;\n    }","id":100686,"modified_method":"private double CalculateConcordance(SAMRecord read){\n        int readstart = read.getAlignmentStart();\n        int readstop = read.getAlignmentEnd();\n        char c1, c2;\n        double maxConcordance = 0.0, freq = 0.0, minFreq = 0.0;\n        String s1 = formatter.FormatRead(read.getCigarString(), read.getReadString());\n        String s2;\n        int allelestart, allelestop;\n\n        if (ONLYFREQUENT){\n            minFreq = 0.0001;\n        }\n\n        for (int i = 0; i < HLAreads.length; i++){\n            nummatched[i] = 0; concordance[i] = 0; numcompared[i] = 0;\n            freq = GetAlleleFrequency(HLAnames[i]);\n            //Get concordance between read and specific allele\n            if (readstart <= HLAstoppos[i] && readstop >= HLAstartpos[i] && freq > minFreq){\n                s2 = HLAreads[i];\n                \n                allelestart = HLAstartpos[i];\n                allelestop = HLAstoppos[i];\n\n                //Polymorphic sites: always increment denominator, increment numerator when bases are concordant\n                for (int j = 0; j < numpolymorphicsites; j++){\n                    pos = PolymorphicSites[j];\n                    if (pos >= readstart && pos <= readstop && pos >= allelestart && pos <= allelestop){\n                        c1 = s1.charAt(pos-readstart);\n                        c2 = s2.charAt(pos-allelestart);\n                        if (c1 != 'D' && c2 != 'D'){//allow for deletions (sequencing errors)\n                            numcompared[i]++;\n                            if (c1 == c2){\n                                nummatched[i]++;\n                            }else{\n                                if (debugRead.equals(read.getReadName()) && debugAllele.equals(HLAnames[i])){\n                                    out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\",read.getReadName(), HLAnames[i], j, c1,c2);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //Non-polymorphic sites: increment denominator only when bases are discordant\n                if (numcompared[i] > 0){\n                    for (int j = 0; j < numnonpolymorphicsites; j++){\n                        pos = NonPolymorphicSites[j];\n                        if (pos >= readstart && pos <= readstop && pos >= allelestart && pos <= allelestop){\n                            c1 = s1.charAt(pos-readstart);\n                            c2 = s2.charAt(pos-allelestart);\n                            if (c1 != c2 && c1 != 'D' && c2 != 'D'){//allow for deletions (sequencing errors)\n                                numcompared[i]++;\n                                if (debugRead.equals(read.getReadName()) && debugAllele.equals(HLAnames[i])){\n                                    out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\",read.getReadName(), HLAnames[i], j, c1,c2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            //Update concordance array\n            concordance[i]=nummatched[i]/numcompared[i];\n            if (concordance[i] > maxConcordance){maxConcordance = concordance[i];}\n            if (debugRead.equals(read.getReadName()) && debugAllele.equals(HLAnames[i])){\n                out.printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\",read.getReadName(),HLAnames[i],concordance[i],numcompared[i],numcompared[i]-nummatched[i]);\n            }\n            if (findFirst && (concordance[i] == 1)){\n                break;\n            }\n        \n        }\n\n        return maxConcordance;\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer map(char[] ref, SAMRecord read, ReadMetaDataTracker metaDataTracker) {\n        //Calculate concordance for this read and all overlapping reads\n        double maxConcordance = CalculateConcordance(read);\n\n        String readname = read.getReadName(), allelename = \"\"; double freq;\n        //For input bam files that contain HLA alleles, find and print allele frequency\n        freq = GetAlleleFrequency(readname);\n        out.printf(\"%s\\t%s-%s\", readname,read.getAlignmentStart(),read.getAlignmentEnd());\n\n        //Find the maximum frequency of the alleles most concordant with the read\n        double maxFreq = FindMaxAlleleFrequency(maxConcordance);\n        \n        //Print concordance statistics between this read and the most similar HLA allele(s)\n        for (int i = 0; i < HLAreads.length; i++){\n            if (concordance[i] == maxConcordance && maxConcordance > 0){\n                freq = GetAlleleFrequency(HLAnames[i]);\n                if (freq == maxFreq){\n                    out.printf(\"\\t%s\\t%.4f\\t%.3f\\t%.0f\\t%.0f\",HLAnames[i],freq,concordance[i],numcompared[i],numcompared[i]-nummatched[i]);\n                }\n            }\n        }\n        out.print(\"\\n\");\n        return 1;\n    }","id":100687,"modified_method":"public Integer map(char[] ref, SAMRecord read, ReadMetaDataTracker metaDataTracker) {\n        //Calculate concordance for this read and all overlapping reads\n        if (read.getMappingQuality() > 0){\n            double maxConcordance = CalculateConcordance(read);\n\n            if (maxConcordance > 0){\n                String readname = read.getReadName(), allelename = \"\"; double freq;\n                //For input bam files that contain HLA alleles, find and print allele frequency\n                //freq = GetAlleleFrequency(readname);\n                out.printf(\"%s\\t%s-%s\", readname,read.getAlignmentStart(),read.getAlignmentEnd());\n\n                //Find the maximum frequency of the alleles most concordant with the read\n                //double maxFreq = FindMaxAlleleFrequency(maxConcordance);\n\n                //Print concordance statistics between this read and the most similar HLA allele(s)\n\n                for (int i = 0; i < HLAreads.length; i++){\n                    if (concordance[i] == maxConcordance){\n                        freq = GetAlleleFrequency(HLAnames[i]);\n                        //if (freq == maxFreq){\n                            out.printf(\"\\t%s\\t%.4f\\t%.3f\\t%.0f\\t%.0f\",HLAnames[i],freq,concordance[i],numcompared[i],numcompared[i]-nummatched[i]);\n                        //}\n                        break;\n                    }\n                }\n                out.print(\"\\n\");\n            }\n        }\n        return 1;\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer map(char[] ref, SAMRecord read, ReadMetaDataTracker metaDataTracker) {\n        int readstart = read.getAlignmentStart();\n        int readstop = read.getAlignmentEnd();\n        int startimputation = 0, stopimputation = 0;\n\n        String s1 = formatter.FormatRead(read.getCigarString(), read.getReadString());\n        char c;\n        String readstring = \"\", name = \"\", cigar = \"\", qualitystring = \"\";\n        int numM = 0, numI = 0, numD = 0;\n\n        name = read.getReadName();\n        String matchedAllele = (String) ClosestAllele.get(name);\n\n        //out.printf(\"%s\\t%s\\n\",name,matchedAllele);\n        int index = HLAnames.indexOf(matchedAllele);\n        String matchedRead = HLAreads.get(index);\n\n        if (name.indexOf(\"HLA_A\") > -1){\n            startimputation = HLA_A_start;\n            stopimputation = HLA_A_end;\n        } else if (name.indexOf(\"HLA_B\") > -1){\n            startimputation = HLA_B_start;\n            stopimputation = HLA_B_end;\n        } else if (name.indexOf(\"HLA_C\") > -1){\n            startimputation = HLA_C_start;\n            stopimputation = HLA_C_end;\n        }\n\n        for (int i = startimputation; i <= stopimputation; i++){\n            //if position is within read\n            if (i >= readstart && i <= readstop){\n                c = s1.charAt(i-readstart);\n                //if position is not missing\n                if (c != 'D'){\n                    readstring = readstring + c;\n                    qualitystring = qualitystring + 'I';\n                    numM++;\n                    if (numD > 0){\n                        cigar = cigar + String.valueOf(numD) + \"D\";\n                        numD = 0;\n                    } else if (numI > 0){\n                        cigar = cigar + String.valueOf(numI) + \"I\";\n                        numI = 0;\n                    }\n                //if position is missing, get base from matched allele\n                }else{\n                    c = matchedRead.charAt(i-HLAstartpos[index]);\n                    //if matched allele is also missing / deleted at position\n                    if (c == 'D'){\n                        numD++;\n                        if (numM > 0){\n                            cigar = cigar + String.valueOf(numM) + \"M\";\n                            numM = 0;\n                        }\n                    //if matched allele is not missing / deleted at position\n                    }else{\n                        readstring = readstring + c;\n                        qualitystring = qualitystring + 'I';\n                        numM++;\n                        if (numD > 0){\n                            cigar = cigar + String.valueOf(numD) + \"D\";\n                            numD = 0;\n                        } else if (numI > 0){\n                            cigar = cigar + String.valueOf(numI) + \"I\";\n                            numI = 0;\n                        }\n                    }\n                }\n            //if position is outside of range of read, look at matched allele\n            }else{\n                //if within range of matched allele\n                if (i >= HLAstartpos[index] && i <= HLAstoppos[index]){\n                    c = matchedRead.charAt(i-HLAstartpos[index]);\n                    //if matched allele is also missing / deleted at position\n                    if (c == 'D'){\n                        numD++;\n                        if (numM > 0){\n                            cigar = cigar + String.valueOf(numM) + \"M\";\n                            numM = 0;\n                        }\n                    //if matched allele is not missing / deleted at position\n                    }else{\n                        readstring = readstring + c;\n                        qualitystring = qualitystring + 'I';\n                        numM++;\n                        if (numD > 0){\n                            cigar = cigar + String.valueOf(numD) + \"D\";\n                            numD = 0;\n                        } else if (numI > 0){\n                            cigar = cigar + String.valueOf(numI) + \"I\";\n                            numI = 0;\n                        }\n                    }\n                }else{\n                    numD++;\n                    if (numM > 0){\n                        cigar = cigar + String.valueOf(numM) + \"M\";\n                        numM = 0;\n                    }\n                }\n            }\n        }\n\n        if (numM > 0){\n            cigar = cigar + String.valueOf(numM) + \"M\";\n        }else if(numD > 0){\n            cigar = cigar + String.valueOf(numD) + \"D\";\n        }else if(numI > 0){\n            cigar = cigar + String.valueOf(numI) + \"I\";\n        }\n        \n        out.printf(\"%s\\t0\\t6\\t%s\\t99\\t%s\\t*\\t0\\t0\\t%s\\t%s\\n\",name,startimputation,cigar,readstring,qualitystring);\n        \n        \n        return 1;\n    }","id":100688,"modified_method":"public Integer map(char[] ref, SAMRecord read, ReadMetaDataTracker metaDataTracker) {\n        int readstart = read.getAlignmentStart();\n        int readstop = read.getAlignmentEnd();\n        int startimputation = 0, stopimputation = 0;\n\n        String s1 = formatter.FormatRead(read.getCigarString(), read.getReadString());\n        char c;\n        String readstring = \"\", name = \"\", cigar = \"\", qualitystring = \"\";\n        int numM = 0, numI = 0, numD = 0;\n\n        name = read.getReadName();\n        \n        String matchedAllele = (String) ClosestAllele.get(name);\n\n        //out.printf(\"%s\\t%s\\n\",name,matchedAllele);\n        int index = HLAnames.indexOf(matchedAllele);\n        \n        String matchedRead = HLAreads.get(index);\n\n        if (name.indexOf(\"HLA_A\") > -1){\n            startimputation = HLA_A_start;\n            stopimputation = HLA_A_end;\n        } else if (name.indexOf(\"HLA_B\") > -1){\n            startimputation = HLA_B_start;\n            stopimputation = HLA_B_end;\n        } else if (name.indexOf(\"HLA_C\") > -1){\n            startimputation = HLA_C_start;\n            stopimputation = HLA_C_end;\n        } else if (name.indexOf(\"HLA_DRB1\") > -1){\n            startimputation = HLA_DRB1_start;\n            stopimputation = HLA_DRB1_end;\n        } else if (name.indexOf(\"HLA_DQA1\") > -1){\n            startimputation = HLA_DQA1_start;\n            stopimputation = HLA_DQA1_end;\n        } else if (name.indexOf(\"HLA_DQB1\") > -1){\n            startimputation = HLA_DQB1_start;\n            stopimputation = HLA_DQB1_end;\n        } else if (name.indexOf(\"HLA_DPA1\") > -1){\n            startimputation = HLA_DPA1_start;\n            stopimputation = HLA_DPA1_end;\n        } else if (name.indexOf(\"HLA_DPB1\") > -1){\n            startimputation = HLA_DPB1_start;\n            stopimputation = HLA_DPB1_end;\n        }\n\n        //out.printf(\"DEBUG %s\\t%s\\t%s\\t%s\\t%s\\n\",name,matchedAllele,index,startimputation,stopimputation);\n        for (int i = startimputation; i <= stopimputation; i++){\n            //if position is within read\n            if (i >= readstart && i <= readstop){\n                c = s1.charAt(i-readstart);\n                //if position is not missing\n                if (c != 'D'){\n                    readstring = readstring + c;\n                    qualitystring = qualitystring + 'I';\n                    numM++;\n                    if (numD > 0){\n                        cigar = cigar + String.valueOf(numD) + \"D\";\n                        numD = 0;\n                    } else if (numI > 0){\n                        cigar = cigar + String.valueOf(numI) + \"I\";\n                        numI = 0;\n                    }\n                //if position is missing, get base from matched allele\n                }else{\n                    c = matchedRead.charAt(i-HLAstartpos[index]);\n                    //if matched allele is also missing / deleted at position\n                    if (c == 'D'){\n                        numD++;\n                        if (numM > 0){\n                            cigar = cigar + String.valueOf(numM) + \"M\";\n                            numM = 0;\n                        }\n                    //if matched allele is not missing / deleted at position\n                    }else{\n                        readstring = readstring + c;\n                        qualitystring = qualitystring + 'I';\n                        numM++;\n                        if (numD > 0){\n                            cigar = cigar + String.valueOf(numD) + \"D\";\n                            numD = 0;\n                        } else if (numI > 0){\n                            cigar = cigar + String.valueOf(numI) + \"I\";\n                            numI = 0;\n                        }\n                    }\n                }\n            //if position is outside of range of read, look at matched allele\n            }else{\n                //if within range of matched allele\n                if (i >= HLAstartpos[index] && i <= HLAstoppos[index]){\n                    c = matchedRead.charAt(i-HLAstartpos[index]);\n                    //if matched allele is also missing / deleted at position\n                    if (c == 'D'){\n                        numD++;\n                        if (numM > 0){\n                            cigar = cigar + String.valueOf(numM) + \"M\";\n                            numM = 0;\n                        }\n                    //if matched allele is not missing / deleted at position\n                    }else{\n                        readstring = readstring + c;\n                        qualitystring = qualitystring + 'I';\n                        numM++;\n                        if (numD > 0){\n                            cigar = cigar + String.valueOf(numD) + \"D\";\n                            numD = 0;\n                        } else if (numI > 0){\n                            cigar = cigar + String.valueOf(numI) + \"I\";\n                            numI = 0;\n                        }\n                    }\n                }else{\n                    numD++;\n                    if (numM > 0){\n                        cigar = cigar + String.valueOf(numM) + \"M\";\n                        numM = 0;\n                    }\n                }\n            }\n        }\n\n        if (numM > 0){\n            cigar = cigar + String.valueOf(numM) + \"M\";\n        }else if(numD > 0){\n            cigar = cigar + String.valueOf(numD) + \"D\";\n        }else if(numI > 0){\n            cigar = cigar + String.valueOf(numI) + \"I\";\n        }\n        \n        out.printf(\"%s\\t0\\t6\\t%s\\t99\\t%s\\t*\\t0\\t0\\t%s\\t%s\\n\",name,startimputation,cigar,readstring,qualitystring);\n        \n        \n        return 1;\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer reduceInit() {\n    if (!DatabaseLoaded){\n            try{\n                out.printf(\"Reading HLA database ...\\n\");\n                FileInputStream fstream = new FileInputStream(HLAdatabaseFile);\n                DataInputStream in = new DataInputStream(fstream);\n                BufferedReader br = new BufferedReader(new InputStreamReader(in));\n                String strLine; String [] s = null;\n                //Read File Line By Line\n                int i = 0;\n                while ((strLine = br.readLine()) != null)   {\n                    s = strLine.split(\"\\\\t\");\n\n                    if (s.length>=10){\n                        //Parse the reads with cigar parser\n                        HLAreads.add(formatter.FormatRead(s[5],s[9]));\n                        HLAcigars.add(s[5]);\n                        HLAnames.add(s[0]);\n\n                        HLApositions.add(s[3]);\n                        if (s[0].indexOf(\"HLA_A\") > -1){\n                            if (iAstart < 0){iAstart=i;}\n                            iAstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_B\") > -1){\n                            if (iBstart < 0){iBstart=i;}\n                            iBstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_C\") > -1){\n                            if (iCstart < 0){iCstart=i;}\n                            iCstop = i; i++;\n                        }\n                    }\n                }\n                in.close();\n                int n = HLApositions.size(); numHLAlleles = n;\n                HLAstartpos = new int[n]; HLAstoppos = new int[n];\n                SingleAlleleFrequencies = new double[n];\n\n\n                for (i = 0; i < n; i++){\n                    //Find start and stop positions for each allele\n                    HLAstartpos[i]=Integer.parseInt(HLApositions.get(i));\n                    HLAstoppos[i]=HLAstartpos[i]+HLAreads.get(i).length()-1;\n                    if (minstartpos == 0){minstartpos = HLAstartpos[i];}\n                    minstartpos = Math.min(minstartpos, HLAstartpos[i]);\n                    maxstoppos = Math.max(maxstoppos, HLAstoppos[i]);\n                    SingleAlleleFrequencies[i]=0.0;\n                    //Initialize matrix of probabilities / likelihoods\n\n                }\n                out.printf(\"DONE! Read %s alleles\\n\",HLAreads.size());\n            }catch (Exception e){//Catch exception if any\n              System.err.println(\"ImputeAllelsWalker Error: \" + e.getMessage());\n            }\n\n            try{\n                out.printf(\"Reading closest allele file ...\");\n                FileInputStream fstream = new FileInputStream(ClosestAllelesFile);\n                DataInputStream in = new DataInputStream(fstream);\n                BufferedReader br = new BufferedReader(new InputStreamReader(in));\n                String strLine; String [] s = null;\n                //Read File Line By Line\n                int count = 0;\n                while ((strLine = br.readLine()) != null)   {\n                    s = strLine.split(\"\\\\t\");\n                    ClosestAllele.put(s[0], s[2]);\n//                    out.printf(\"loading: %s\\t%s\\n\",s[0],s[2]);\n                    count++;\n                }\n                in.close();\n                out.printf(\"Done! Read %s alleles\\n\",count);\n            }catch (Exception e){//Catch exception if any\n              System.err.println(\"ImputeAllelsWalker Error: \" + e.getMessage());\n            }\n\n            char c;\n            DatabaseLoaded = true;\n            \n            out.printf(\"Imputing alleles ...\\n\");\n\n            if (DEBUG){\n                //out.printf(\"Astart[%s]\\tAstop[%s]\\tBstart[%s]\\tBstop[%s]\\tCstart[%s]\\tCstop[%s]\\tnumAlleles[%s]\\n\",iAstart,iAstop,iBstart,iBstop,iCstart,iCstop,numHLAlleles);\n            }\n        }\n        return 0;\n    }","id":100689,"modified_method":"public Integer reduceInit() {\n    if (!DatabaseLoaded){\n            try{\n                out.printf(\"Reading HLA database ...\\n\");\n                FileInputStream fstream = new FileInputStream(HLAdatabaseFile);\n                DataInputStream in = new DataInputStream(fstream);\n                BufferedReader br = new BufferedReader(new InputStreamReader(in));\n                String strLine; String [] s = null;\n                //Read File Line By Line\n                int i = 0;\n                while ((strLine = br.readLine()) != null)   {\n                    s = strLine.split(\"\\\\t\");\n\n                    if (s.length>=10){\n                        //Parse the reads with cigar parser\n                        HLAreads.add(formatter.FormatRead(s[5],s[9]));\n                        HLAcigars.add(s[5]);\n                        HLAnames.add(s[0]);\n\n                        HLApositions.add(s[3]);\n                        if (s[0].indexOf(\"HLA_A\") > -1){\n                            if (iAstart < 0){iAstart=i;}\n                            iAstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_B\") > -1){\n                            if (iBstart < 0){iBstart=i;}\n                            iBstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_C\") > -1){\n                            if (iCstart < 0){iCstart=i;}\n                            iCstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_DRB1\") > -1){\n                            if (iDRBstart < 0){iDRBstart=i;}\n                            iDRBstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_DQA1\") > -1){\n                            if (iDQAstart < 0){iDQAstart=i;}\n                            iDQAstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_DQB1\") > -1){\n                            if (iDQBstart < 0){iDQBstart=i;}\n                            iDQBstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_DPA1\") > -1){\n                            if (iDPAstart < 0){iDPAstart=i;}\n                            iDPAstop = i; i++;\n                        }else if (s[0].indexOf(\"HLA_DPB1\") > -1){\n                            if (iDPBstart < 0){iDPBstart=i;}\n                            iDPBstop = i; i++;\n                        }\n                    }\n                }\n                in.close();\n                int n = HLApositions.size(); numHLAlleles = n;\n                HLAstartpos = new int[n]; HLAstoppos = new int[n];\n                SingleAlleleFrequencies = new double[n];\n\n\n                for (i = 0; i < n; i++){\n                    //Find start and stop positions for each allele\n                    HLAstartpos[i]=Integer.parseInt(HLApositions.get(i));\n                    HLAstoppos[i]=HLAstartpos[i]+HLAreads.get(i).length()-1;\n                    if (minstartpos == 0){minstartpos = HLAstartpos[i];}\n                    minstartpos = Math.min(minstartpos, HLAstartpos[i]);\n                    maxstoppos = Math.max(maxstoppos, HLAstoppos[i]);\n                    SingleAlleleFrequencies[i]=0.0;\n                    //Initialize matrix of probabilities / likelihoods\n\n                }\n                out.printf(\"DONE! Read %s alleles\\n\",HLAreads.size());\n            }catch (Exception e){//Catch exception if any\n              System.err.println(\"ImputeAllelsWalker Error: \" + e.getMessage());\n            }\n\n            try{\n                out.printf(\"Reading closest allele file ...\");\n                FileInputStream fstream = new FileInputStream(ClosestAllelesFile);\n                DataInputStream in = new DataInputStream(fstream);\n                BufferedReader br = new BufferedReader(new InputStreamReader(in));\n                String strLine; String [] s = null;\n                //Read File Line By Line\n                int count = 0;\n                while ((strLine = br.readLine()) != null)   {\n                    s = strLine.split(\"\\\\t\");\n                    ClosestAllele.put(s[0], s[2]);\n//                    out.printf(\"loading: %s\\t%s\\n\",s[0],s[2]);\n                    count++;\n                }\n                in.close();\n                out.printf(\"Done! Read %s alleles\\n\",count);\n            }catch (Exception e){//Catch exception if any\n              System.err.println(\"ImputeAllelsWalker Error: \" + e.getMessage());\n            }\n\n            char c;\n            DatabaseLoaded = true;\n            \n            out.printf(\"Imputing alleles ...\\n\");\n\n            if (DEBUG){\n                //out.printf(\"Astart[%s]\\tAstop[%s]\\tBstart[%s]\\tBstop[%s]\\tCstart[%s]\\tCstop[%s]\\tnumAlleles[%s]\\n\",iAstart,iAstop,iBstart,iBstop,iCstart,iCstop,numHLAlleles);\n            }\n        }\n        return 0;\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void ReadFile(String filename, int minAllowedMismatches){\n        try{\n            FileInputStream fstream = new FileInputStream(filename);\n            DataInputStream in = new DataInputStream(fstream);\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String strLine; String [] s = null;\n            //Read File Line By Line\n            int i = 0;\n            while ((strLine = br.readLine()) != null)   {\n                s = strLine.split(\"\\\\t\");\n                if (s.length >= 6){\n                    Double matchFraction = Double.valueOf(s[4]);\n                    int numMismatches = Integer.valueOf(s[6]);\n                    if ((matchFraction < 0.9 && numMismatches > 3) || (numMismatches > minAllowedMismatches)){\n                        ReadsToDiscard.add(s[0]);\n                    }\n                }\n            }\n            in.close();\n        }catch (Exception e){//Catch exception if any\n            System.err.println(\"SimilarityFile Error: \" + e.getMessage());\n        }\n    }","id":100690,"modified_method":"public void ReadFile(String filename, int minAllowedMismatches){\n        try{\n            FileInputStream fstream = new FileInputStream(filename);\n            DataInputStream in = new DataInputStream(fstream);\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String strLine; String [] s = null;\n            //Read File Line By Line\n            int i = 0;\n            while ((strLine = br.readLine()) != null)   {\n                s = strLine.split(\"\\\\t\");\n                if (s.length >= 6){\n                    Double matchFraction = Double.valueOf(s[4]);\n                    int numMismatches = Integer.valueOf(s[6]);\n\n                    Concordance.put(s[0],matchFraction);\n                    NumMatches.put(s[0], s[5]);\n                    NumMismatches.put(s[0], numMismatches);\n                    if ((matchFraction < 0.9 && numMismatches > 3) || (numMismatches > minAllowedMismatches)){\n                        ReadsToDiscard.add(s[0]);\n                    }\n                }\n            }\n            in.close();\n        }catch (Exception e){//Catch exception if any\n            System.err.println(\"SimilarityFile Error: \" + e.getMessage());\n        }\n    }","commit_id":"94b51de40108650b05db9de5f6ea96ef5a00884b","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Paint a background for all groups and a round blue border and background\n     * when a cell is selected. \n     */\n    public void paintComponent(Graphics g) {\n        super.paintComponent(g);\n\n        Graphics2D g2 = (Graphics2D) g;\n\n        AntialiasingManager.activateAntialiasing(g2);\n\n        if (!this.isLeaf) {\n\n            g2.setColor(Constants.MOVER_START_COLOR);\n            g2.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 7, 7);\n        }\n\n        if (this.isSelected) {\n\n            g2.setColor(Constants.SELECTED_END_COLOR);\n            g2.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 7, 7);\n\n            g2.setColor(Constants.BLUE_GRAY_BORDER_DARKER_COLOR);\n            g2.setStroke(new BasicStroke(1.5f));\n            g2.drawRoundRect(0, 0, this.getWidth() - 1, this.getHeight() - 1,\n                    7, 7);\n        }\n    }","id":100691,"modified_method":"/**\n     * Paint a background for all groups and a round blue border and background\n     * when a cell is selected. \n     */\n    public void paintComponent(Graphics g) {\n        super.paintComponent(g);\n\n        Graphics2D g2 = (Graphics2D) g;\n\n        AntialiasingManager.activateAntialiasing(g2);\n\n        if (!this.isLeaf) {\n\n            GradientPaint p = new GradientPaint(0, 0,\n                    Constants.SELECTED_END_COLOR,\n                    this.getWidth(),\n                    this.getHeight(),\n                    Constants.MOVER_END_COLOR);\n\n            g2.setPaint(p);            \n            g2.fillRoundRect(0, 1, this.getWidth(), this.getHeight() - 1, 7, 7);\n        }\n\n        if (this.isSelected) {\n\n            g2.setColor(Constants.SELECTED_END_COLOR);\n            g2.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 7, 7);\n\n            g2.setColor(Constants.BLUE_GRAY_BORDER_DARKER_COLOR);\n            g2.setStroke(new BasicStroke(1.5f));\n            g2.drawRoundRect(0, 0, this.getWidth() - 1, this.getHeight() - 1,\n                    7, 7);\n        }\n    }","commit_id":"dcc7b80c6dd5a55cacdcb4f1f23b1337a8dce4e1","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void paintComponent(Graphics g)\n        {\n            super.paintComponent(g);\n\n            g = g.create();\n\n            AntialiasingManager.activateAntialiasing(g);\n\n            try\n            {\n                if (isFullScreen)\n                    g.setColor(settingsFullScreenColor);\n                else\n                    g.setColor(settingsColor);\n\n                g.fillRoundRect(0, 0, getWidth(), getHeight(), 8, 8);\n\n                // We add the border.\n                int x = CallToolBarButton.DEFAULT_WIDTH\n                        + TOOL_BAR_BORDER + TOOL_BAR_X_GAP;\n\n                while (x < getWidth() - TOOL_BAR_BORDER - TOOL_BAR_X_GAP)\n                {\n                    g.drawImage(buttonSeparatorImage, x + 1,\n                        (getHeight() - buttonSeparatorImage.getHeight(this))/2,\n                        this);\n\n                    x += CallToolBarButton.DEFAULT_WIDTH + TOOL_BAR_X_GAP;\n                }\n            }\n            finally\n            {\n                g.dispose();\n            }\n        }","id":100692,"modified_method":"public void paintComponent(Graphics g)\n        {\n            super.paintComponent(g);\n\n            g = g.create();\n\n            AntialiasingManager.activateAntialiasing(g);\n\n            try\n            {\n                if (isIncomingCall)\n                {\n                    g.setColor(toolbarInCallShadowColor);\n                    g.drawRoundRect(\n                        0, 0, getWidth() - 1, getHeight() - 2, 10, 10);\n\n                    g.setColor(toolbarInCallBorderColor);\n                    g.drawRoundRect(\n                        0, 0, getWidth() - 1, getHeight() - 3, 10, 10);\n                }\n                else\n                {\n                    if (isFullScreen)\n                        g.setColor(toolbarFullScreenColor);\n                    else\n                        g.setColor(toolbarColor);\n\n                    g.fillRoundRect(0, 0, getWidth(), getHeight(), 10, 10);\n                }\n\n                if (!isFullScreen)\n                {\n                    // We add the border.\n                    int x = CallToolBarButton.DEFAULT_WIDTH\n                            + TOOL_BAR_BORDER + TOOL_BAR_X_GAP;\n\n                    while (x < getWidth() - TOOL_BAR_BORDER - TOOL_BAR_X_GAP)\n                    {\n                        separatorImage = (isIncomingCall)\n                                ? buttonDarkSeparatorImage\n                                : buttonSeparatorImage;\n\n                        g.drawImage(separatorImage,\n                            x + 1,\n                            (getHeight()\n                                - separatorImage.getHeight(this))/2,\n                            this);\n\n                        x += CallToolBarButton.DEFAULT_WIDTH + TOOL_BAR_X_GAP;\n                    }\n                }\n            }\n            finally\n            {\n                g.dispose();\n            }\n        }","commit_id":"037be1e08ea836f1979913044d988bd8570dac87","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates a buttons bar from the given list of button components.\n     *\n     * @param fullScreen indicates if the created button bar would be shown in\n     * full screen mode\n     * @param buttons the list of buttons to add in the created button bar\n     * @return the created button bar\n     */\n    public static JComponent createButtonBar(boolean fullScreen,\n                                            Component[] buttons)\n    {\n        JComponent buttonBar = fullScreen\n                                ? new CallToolBarPanel(true)\n                                : new CallToolBarPanel(false);\n\n        if (buttons != null)\n        {\n            for (Component button : buttons)\n            {\n                if (button != null)\n                    ((Container) buttonBar).add(button);\n            }\n        }\n\n        return buttonBar;\n    }","id":100693,"modified_method":"/**\n     * Creates a buttons bar from the given list of button components.\n     *\n     * @param fullScreen indicates if the created button bar would be shown in\n     * full screen mode\n     * @param buttons the list of buttons to add in the created button bar\n     * @return the created button bar\n     */\n    public static JComponent createButtonBar(boolean fullScreen,\n                                            Component[] buttons)\n    {\n        JComponent buttonBar = fullScreen\n                                ? new CallToolBarPanel(true, false)\n                                : new CallToolBarPanel(false, false);\n\n        if (buttons != null)\n        {\n            for (Component button : buttons)\n            {\n                if (button != null)\n                    ((Container) buttonBar).add(button);\n            }\n        }\n\n        return buttonBar;\n    }","commit_id":"037be1e08ea836f1979913044d988bd8570dac87","url":"https://github.com/jitsi/jitsi"},{"original_method":"public CallToolBarPanel(boolean isFullScreen)\n        {\n            this.isFullScreen = isFullScreen;\n\n            setLayout(new FlowLayout(FlowLayout.CENTER, 3, 0));\n            setBorder(BorderFactory.createEmptyBorder(\n                TOOL_BAR_BORDER,\n                TOOL_BAR_BORDER, \n                TOOL_BAR_BORDER,\n                TOOL_BAR_BORDER));\n        }","id":100694,"modified_method":"public CallToolBarPanel(boolean isFullScreen,\n                                boolean isIncomingCall)\n        {\n            this.isFullScreen = isFullScreen;\n            this.isIncomingCall = isIncomingCall;\n\n            setLayout(new FlowLayout(FlowLayout.CENTER, TOOL_BAR_X_GAP, 0));\n            setBorder(BorderFactory.createEmptyBorder(\n                TOOL_BAR_BORDER,\n                TOOL_BAR_BORDER, \n                TOOL_BAR_BORDER,\n                TOOL_BAR_BORDER));\n        }","commit_id":"037be1e08ea836f1979913044d988bd8570dac87","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Reloads icons.\n     */\n    public void loadSkin()\n    {\n        callButton.setBackgroundImage(\n            ImageLoader.getImage(ImageLoader.CALL_BUTTON_BG));\n\n        videoCallButton.setBackgroundImage(\n            ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_BG));\n\n        hangupButton.setBackgroundImage(\n            ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_BG));\n    }","id":100695,"modified_method":"/**\n     * Reloads icons.\n     */\n    public void loadSkin()\n    {\n        callButton.setBackgroundImage(\n            ImageLoader.getImage(ImageLoader.INCOMING_CALL_BUTTON_BG));\n        callButton.setRolloverImage(\n            ImageLoader.getImage(ImageLoader.INCOMING_CALL_BUTTON_ROLLOVER));\n        callButton.setPressedImage(\n            ImageLoader.getImage(ImageLoader.INCOMING_CALL_BUTTON_PRESSED));\n\n        if (videoCallButton != null)\n        {\n            videoCallButton.setBackgroundImage(\n                ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_BG));\n            videoCallButton.setRolloverImage(\n                ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_ROLLOVER));\n            videoCallButton.setPressedImage(\n                ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_PRESSED));\n        }\n\n        if (mergeCallButton != null)\n        {\n            mergeCallButton.setBackgroundImage(\n                ImageLoader.getImage(ImageLoader.MERGE_CALL_BUTTON_BG));\n            mergeCallButton.setRolloverImage(\n                ImageLoader.getImage(ImageLoader.MERGE_CALL_BUTTON_ROLLOVER));\n            mergeCallButton.setPressedImage(\n                ImageLoader.getImage(ImageLoader.MERGE_CALL_BUTTON_PRESSED));\n        }\n\n        hangupButton.setBackgroundImage(\n            ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_BG));\n        hangupButton.setRolloverImage(\n            ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_ROLLOVER));\n        hangupButton.setPressedImage(\n            ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_PRESSED));\n    }","commit_id":"037be1e08ea836f1979913044d988bd8570dac87","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes all components in this panel.\n     */\n    private void initComponents()\n    {\n        JPanel mainPanel = new JPanel(new GridBagLayout());\n\n        // disable html rendering\n        callLabelDisplayName.putClientProperty(\"html.disable\", Boolean.TRUE);\n        callLabelAddress.putClientProperty(\"html.disable\", Boolean.TRUE);\n        callLabelImage.putClientProperty(\"html.disable\", Boolean.TRUE);\n\n        JPanel buttonsPanel = new TransparentPanel(new GridBagLayout());\n\n        callButton = new SIPCommButton(\n            ImageLoader.getImage(ImageLoader.CALL_BUTTON_BG));\n\n        if(mergeCall)\n        {\n            mergeCallButton = new SIPCommButton(\n                ImageLoader.getImage(ImageLoader.MERGE_CALL_BUTTON_BG));\n        }\n\n        if(video)\n        {\n            videoCallButton = new SIPCommButton(\n                ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_BG));\n        }\n\n        hangupButton = new SIPCommButton(\n            ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_BG));\n\n        mainPanel.setPreferredSize(new Dimension(400, 90));\n        mainPanel.setOpaque(false);\n        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));\n\n        callButton.setName(CALL_BUTTON);\n        hangupButton.setName(HANGUP_BUTTON);\n\n        callButton.addActionListener(this);\n\n        if(mergeCall)\n        {\n            mergeCallButton.setName(CONF_CALL_BUTTON);\n            mergeCallButton.addActionListener(this);\n        }\n\n        hangupButton.addActionListener(this);\n\n        if(video)\n        {\n            videoCallButton.setName(VIDEO_CALL_BUTTON);\n            videoCallButton.addActionListener(this);\n        }\n\n        preCallWindow.add(mainPanel);\n\n        GridBagConstraints constraints = new GridBagConstraints();\n        constraints.anchor = GridBagConstraints.WEST;\n        constraints.gridx = 0;\n        constraints.gridy = 0;\n        constraints.gridheight = 2;\n        constraints.insets = new Insets(0, 0, 0, HGAP);\n        mainPanel.add(callLabelImage, constraints);\n\n        constraints.insets = new Insets(0, 0, 0, 0);\n        constraints.gridheight = 1;\n        constraints.gridx = 1;\n        constraints.weightx = 1;\n        mainPanel.add(callLabelDisplayName, constraints);\n\n        constraints.gridy = 1;\n        mainPanel.add(callLabelAddress, constraints);\n\n        if (accountsCombo != null)\n        {\n            constraints.gridx = 1;\n            constraints.weightx = 1;\n            mainPanel.add(Box.createVerticalStrut(HGAP), constraints);\n\n            constraints.gridx = 1;\n            constraints.gridy = 2;\n            constraints.weightx = 1;\n            mainPanel.add(accountsCombo, constraints);\n        }\n\n        constraints.anchor = GridBagConstraints.CENTER;\n        constraints.gridx = 2;\n        constraints.gridy = 0;\n        constraints.weightx = 0;\n        constraints.gridheight = 2;\n        mainPanel.add(Box.createHorizontalStrut(HGAP), constraints);\n\n        constraints.anchor = GridBagConstraints.CENTER;\n        constraints.gridx = 3;\n        constraints.weightx = 0;\n        mainPanel.add(buttonsPanel, constraints);\n\n        constraints.gridx = 0;\n        constraints.gridy = 0;\n        constraints.gridheight = 0;\n        buttonsPanel.add(callButton, constraints);\n\n        if(mergeCall)\n        {\n            constraints.gridx++;\n            buttonsPanel.add(Box.createHorizontalStrut(HGAP));\n            constraints.gridx++;\n            buttonsPanel.add(mergeCallButton, constraints);\n        }\n\n        if(video)\n        {\n            constraints.gridx++;\n            buttonsPanel.add(Box.createHorizontalStrut(HGAP));\n            constraints.gridx++;\n            buttonsPanel.add(videoCallButton, constraints);\n        }\n        constraints.gridx++;\n        buttonsPanel.add(Box.createHorizontalStrut(HGAP));\n        constraints.gridx++;\n        buttonsPanel.add(hangupButton, constraints);\n    }","id":100696,"modified_method":"/**\n     * Initializes all components in this panel.\n     */\n    private void initComponents()\n    {\n        JPanel mainPanel = new TransparentPanel(new BorderLayout(10, 0));\n\n        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n\n        // disable html rendering\n        callLabelDisplayName.putClientProperty(\"html.disable\", Boolean.TRUE);\n        callLabelAddress.putClientProperty(\"html.disable\", Boolean.TRUE);\n        callLabelImage.putClientProperty(\"html.disable\", Boolean.TRUE);\n\n        JComponent buttonsPanel\n            = CallPeerRendererUtils.createIncomingCallButtonBar();\n\n        callButton = new SIPCommButton();\n\n        if(mergeCall)\n        {\n            mergeCallButton = new SIPCommButton();\n        }\n\n        if(video)\n        {\n            videoCallButton = new SIPCommButton();\n        }\n\n        hangupButton = new SIPCommButton();\n\n        callButton.setName(CALL_BUTTON);\n        hangupButton.setName(HANGUP_BUTTON);\n\n        callButton.addActionListener(this);\n\n        if(mergeCall)\n        {\n            mergeCallButton.setName(CONF_CALL_BUTTON);\n            mergeCallButton.addActionListener(this);\n        }\n\n        hangupButton.addActionListener(this);\n\n        if(video)\n        {\n            videoCallButton.setName(VIDEO_CALL_BUTTON);\n            videoCallButton.addActionListener(this);\n        }\n\n        preCallWindow.add(mainPanel);\n\n        mainPanel.add(callLabelImage, BorderLayout.WEST);\n\n        JPanel labelsPanel = new TransparentPanel();\n        labelsPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));\n\n        labelsPanel.setLayout(new BoxLayout(labelsPanel, BoxLayout.Y_AXIS));\n        callLabelDisplayName.setAlignmentX(JLabel.LEFT_ALIGNMENT);\n        labelsPanel.add(callLabelDisplayName);\n        labelsPanel.add(Box.createVerticalStrut(3));\n        callLabelAddress.setAlignmentX(JLabel.LEFT_ALIGNMENT);\n        labelsPanel.add(callLabelAddress);\n\n        if (accountsCombo != null)\n        {\n            labelsPanel.add(Box.createVerticalStrut(3));\n            accountsCombo.setAlignmentX(JLabel.LEFT_ALIGNMENT);\n            labelsPanel.add(accountsCombo);\n        }\n\n        mainPanel.add(labelsPanel, BorderLayout.CENTER);\n\n        // Loads skin resources.\n        loadSkin();\n\n        JPanel rightPanel = new TransparentPanel(\n            new FlowLayout(FlowLayout.CENTER, 0, 0));\n\n        rightPanel.setBorder(BorderFactory.createEmptyBorder(6, 0, 0, 0));\n\n        buttonsPanel.add(callButton);\n\n        if(mergeCall)\n            buttonsPanel.add(mergeCallButton);\n\n        if(video)\n            buttonsPanel.add(videoCallButton);\n\n        buttonsPanel.add(hangupButton);\n\n        rightPanel.add(buttonsPanel);\n        mainPanel.add(rightPanel, BorderLayout.EAST);\n    }","commit_id":"037be1e08ea836f1979913044d988bd8570dac87","url":"https://github.com/jitsi/jitsi"},{"original_method":"public static List<RatedResolveResult> resolveNameInFromImport(PyImportElement importElement, PyQualifiedName qName,\n                                                                 PyFromImportStatement importStatement) {\n    if (qName == null) {\n      return Collections.emptyList();\n    }\n    PsiFile file = importElement.getContainingFile().getOriginalFile();\n    String name = qName.getComponents().get(0);\n\n    final List<PsiFileSystemItem> candidates = importStatement.resolveImportSourceCandidates();\n    List<PsiElement> resultList = new ArrayList<PsiElement>();\n    for (PsiElement candidate : candidates) {\n      if (!candidate.isValid()) {\n        throw new PsiInvalidElementAccessException(candidate, \"Got an invalid candidate from resolveImportSourceCandidates()\");\n      }\n      PsiElement result = resolveChild(PyUtil.turnDirIntoInit(candidate), name, file, false, true);\n      if (result != null) {\n        if (!result.isValid()) {\n          throw new PsiInvalidElementAccessException(result, \"Got an invalid candidate from resolveChild()\");\n        }\n        resultList.add(result);\n      }\n    }\n    if (!resultList.isEmpty()) {\n      return rateResults(resultList);\n\n    }\n    final PsiElement result = resolveForeignImport(importElement, qName, importStatement.getImportSourceQName());\n    return ResolveResultList.to(result);\n  }","id":100697,"modified_method":"public static List<RatedResolveResult> resolveNameInFromImport(PyImportElement importElement, PyQualifiedName qName,\n                                                                 PyFromImportStatement importStatement) {\n    if (qName == null) {\n      return Collections.emptyList();\n    }\n    PsiFile file = importElement.getContainingFile().getOriginalFile();\n    String name = qName.getComponents().get(0);\n\n    final List<PsiFileSystemItem> candidates = importStatement.resolveImportSourceCandidates();\n    List<PsiElement> resultList = new ArrayList<PsiElement>();\n    for (PsiElement candidate : candidates) {\n      if (!candidate.isValid()) {\n        throw new PsiInvalidElementAccessException(candidate, \"Got an invalid candidate from resolveImportSourceCandidates(): \" + candidate.getClass());\n      }\n      PsiElement result = resolveChild(PyUtil.turnDirIntoInit(candidate), name, file, false, true);\n      if (result != null) {\n        if (!result.isValid()) {\n          throw new PsiInvalidElementAccessException(result, \"Got an invalid candidate from resolveChild(): \" + result.getClass());\n        }\n        resultList.add(result);\n      }\n    }\n    if (!resultList.isEmpty()) {\n      return rateResults(resultList);\n\n    }\n    final PsiElement result = resolveForeignImport(importElement, qName, importStatement.getImportSourceQName());\n    return ResolveResultList.to(result);\n  }","commit_id":"dceac0951106c9f7c3704a44993c93c8e8d90e80","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static PsiElement resolveInDirectory(final String referencedName, @Nullable final PsiFile containingFile,\n                                               final PsiDirectory dir, boolean isFileOnly, boolean checkForPackage) {\n    if (referencedName == null) return null;\n\n    final PsiDirectory subdir = dir.findSubdirectory(referencedName);\n    if (subdir != null && (!checkForPackage || subdir.findFile(PyNames.INIT_DOT_PY) != null)) {\n      return subdir;\n    }\n\n    final PsiFile module = findPyFileInDir(dir, referencedName);\n    if (module != null) return module;\n\n    if (!isFileOnly) {\n      // not a subdir, not a file; could be a name in parent/__init__.py\n      final PsiFile initPy = dir.findFile(PyNames.INIT_DOT_PY);\n      if (initPy == containingFile) return null; // don't dive into the file we're in\n      if (initPy instanceof PyFile) {\n        return ((PyFile)initPy).getElementNamed(referencedName);\n      }\n    }\n    return null;\n  }","id":100698,"modified_method":"@Nullable\n  private static PsiElement resolveInDirectory(final String referencedName, @Nullable final PsiFile containingFile,\n                                               final PsiDirectory dir, boolean isFileOnly, boolean checkForPackage) {\n    if (referencedName == null) return null;\n\n    final PsiDirectory subdir = dir.findSubdirectory(referencedName);\n    if (subdir != null && (!checkForPackage || subdir.findFile(PyNames.INIT_DOT_PY) != null)) {\n      return subdir;\n    }\n\n    final PsiFile module = findPyFileInDir(dir, referencedName);\n    if (module != null) return module;\n\n    if (!isFileOnly) {\n      // not a subdir, not a file; could be a name in parent/__init__.py\n      final PsiFile initPy = dir.findFile(PyNames.INIT_DOT_PY);\n      if (initPy == containingFile) return null; // don't dive into the file we're in\n      if (initPy instanceof PyFile) {\n        final PsiElement element = ((PyFile)initPy).getElementNamed(referencedName);\n        if (element != null && !element.isValid()) {\n          throw new PsiInvalidElementAccessException(element);\n        }\n        return element;\n      }\n    }\n    return null;\n  }","commit_id":"dceac0951106c9f7c3704a44993c93c8e8d90e80","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public PsiElement getElementNamed(String name) {\n    PsiElement exportedName = findExportedName(name);\n    if (exportedName instanceof PyImportElement) {\n      return ((PyImportElement) exportedName).getElementNamed(name);\n    }\n    return exportedName;\n  }","id":100699,"modified_method":"@Nullable\n  public PsiElement getElementNamed(String name) {\n    PsiElement exportedName = findExportedName(name);\n    if (exportedName instanceof PyImportElement) {\n      PsiElement importedElement = ((PyImportElement)exportedName).getElementNamed(name);\n      if (importedElement != null && !importedElement.isValid()) {\n        throw new PsiInvalidElementAccessException(importedElement);\n      }\n      return importedElement;\n    }\n    else if (exportedName != null && !exportedName.isValid()) {\n      throw new PsiInvalidElementAccessException(exportedName);\n    }\n    return exportedName;\n  }","commit_id":"116f9638128df9c50263b24e0e64b57779b118fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static PsiElement resolveInDirectory(final String referencedName, @Nullable final PsiFile containingFile,\n                                               final PsiDirectory dir, boolean isFileOnly, boolean checkForPackage) {\n    if (referencedName == null) return null;\n\n    final PsiDirectory subdir = dir.findSubdirectory(referencedName);\n    if (subdir != null && (!checkForPackage || PyUtil.isPackage(subdir))) {\n      return subdir;\n    }\n\n    final PsiFile module = findPyFileInDir(dir, referencedName);\n    if (module != null) return module;\n\n    if (!isFileOnly) {\n      // not a subdir, not a file; could be a name in parent/__init__.py\n      final PsiFile initPy = dir.findFile(PyNames.INIT_DOT_PY);\n      if (initPy == containingFile) return null; // don't dive into the file we're in\n      if (initPy instanceof PyFile) {\n        final PsiElement element = ((PyFile)initPy).getElementNamed(referencedName);\n        if (element != null && !element.isValid()) {\n          throw new PsiInvalidElementAccessException(element);\n        }\n        return element;\n      }\n    }\n    return null;\n  }","id":100700,"modified_method":"@Nullable\n  private static PsiElement resolveInDirectory(final String referencedName, @Nullable final PsiFile containingFile,\n                                               final PsiDirectory dir, boolean isFileOnly, boolean checkForPackage) {\n    if (referencedName == null) return null;\n\n    final PsiDirectory subdir = dir.findSubdirectory(referencedName);\n    if (subdir != null && (!checkForPackage || PyUtil.isPackage(subdir))) {\n      return subdir;\n    }\n\n    final PsiFile module = findPyFileInDir(dir, referencedName);\n    if (module != null) return module;\n\n    if (!isFileOnly) {\n      // not a subdir, not a file; could be a name in parent/__init__.py\n      final PsiFile initPy = dir.findFile(PyNames.INIT_DOT_PY);\n      if (initPy == containingFile) return null; // don't dive into the file we're in\n      if (initPy instanceof PyFile) {\n        return ((PyFile)initPy).getElementNamed(referencedName);\n      }\n    }\n    return null;\n  }","commit_id":"116f9638128df9c50263b24e0e64b57779b118fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Looks for a top-level named item. (Package builtins does not contain any sensible nested names anyway.)\n   * @param name to look for\n   * @return found element, or null.\n   */\n  @Nullable\n  public PsiElement getByName(@NonNls String name) {\n    if (myBuiltinsFile != null) {\n      return myBuiltinsFile.getElementNamed(name);\n    }\n    return null;\n  }","id":100701,"modified_method":"/**\n   * Looks for a top-level named item. (Package builtins does not contain any sensible nested names anyway.)\n   * @param name to look for\n   * @return found element, or null.\n   */\n  @Nullable\n  public PsiElement getByName(@NonNls String name) {\n    if (myBuiltinsFile != null) {\n      final PsiElement element = myBuiltinsFile.getElementNamed(name);\n      if (element != null) {\n        return element;\n      }\n    }\n    if (myExceptionsFile != null) {\n      return myExceptionsFile.getElementNamed(name);\n    }\n    return null;\n  }","commit_id":"279985e5df48238677c23d0c98c6b773dd7eb505","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isInBuiltins(@NotNull PyExpression expression) {\n    if (expression instanceof PyQualifiedExpression && (((PyQualifiedExpression)expression).isQualified())) {\n      return false;\n    }\n    PsiReference reference = expression.getReference();\n    if (reference != null) {\n      PsiElement resolved = reference.resolve();\n      if (resolved != null && getInstance(expression).isBuiltin(resolved)) {\n        return true;\n      }\n    }\n    return false;\n  }","id":100702,"modified_method":"public static boolean isInBuiltins(@NotNull PyExpression expression) {\n    if (expression instanceof PyQualifiedExpression && (((PyQualifiedExpression)expression).isQualified())) {\n      return false;\n    }\n    final String name = expression.getName();\n    PsiReference reference = expression.getReference();\n    if (reference != null && name != null) {\n      final PyBuiltinCache cache = getInstance(expression);\n      if (cache.getByName(name) != null) {\n        final PsiElement resolved = reference.resolve();\n        if (resolved != null && cache.isBuiltin(resolved)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }","commit_id":"279985e5df48238677c23d0c98c6b773dd7eb505","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n\tpublic void prepareOptionsMenu(final MapActivity mapActivity, ContextMenuAdapter adapter) {\n\t\tfilter(adapter,R.string.pause_navigation, R.string.continue_navigation,\n\t\t\t\tR.string.cancel_navigation, R.string.cancel_route, R.string.clear_destination,\n\t\t\t\tR.string.target_points,\n\t\t\t\tR.string.get_directions, \n\t\t\t\tR.string.menu_mute_on, R.string.menu_mute_off,\n\t\t\t\tR.string.where_am_i, R.string.context_menu_item_share_location);\n\t\t//poi\n\t\tif (osmandSettings.SHOW_POI_OVER_MAP.get()) {\n\t\t\tadapter.item(R.string.sherpafy_disable_poi).icons(\n\t\t\t\t\tR.drawable.ic_action_gremove_dark, R.drawable.ic_action_gremove_light)\n\t\t\t\t\t.position(adapter.length() - 1)\n\t\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tapp.getSettings().SHOW_POI_OVER_MAP.set(false);\n\t\t\t\t\tmapActivity.getMapLayers().updateLayers(mapActivity.getMapView());\n\t\t\t\t}\n\t\t\t}).reg();\n\t\t} else {\n\t\t\tadapter.item(R.string.poi).icons(R.drawable.ic_action_layers_dark, R.drawable.ic_action_layers_light)\n\t\t\t\t\t.position(adapter.length() - 1)\n\t\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\t\t\tmapActivity.getMapLayers().selectPOIFilterLayer(mapActivity.getMapView(), null);\n\t\t\t\t\t\t\tapp.getSettings().SHOW_POI_OVER_MAP.set(true);\n\t\t\t\t\t\t\tmapActivity.getMapLayers().updateLayers(mapActivity.getMapView());\n\t\t\t\t\t\t}\n\t\t\t\t\t}).reg();\n\t\t}\n\t\t//important info\n\t\tadapter.item(R.string.sherpafy_tour_info_txt).icons(R.drawable.ic_action_info_dark, R.drawable.ic_action_info_light).position(adapter.length() - 1)\n\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\t\tIntent newIntent = new Intent(mapActivity, TourViewActivity.class);\n\t\t\t\t\t\t// newIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\t\t\t\tmapActivity.startActivity(newIntent);\n\t\t\t\t\t}\n\t\t\t\t}).reg();\n\t\t//complete stage\n\t\tfinal StageInformation stage = getSelectedStage();\n\t\tif (stage != null && !isStageVisited(stage.order)) {\n\t\t\tadapter.item(R.string.complete_stage)\n\t\t\t\t\t.icons(R.drawable.ic_action_finish_flag_dark, R.drawable.ic_action_finish_flag_light)\n\t\t\t\t\t.position(adapter.length() - 1).listen(new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tmarkStageAsCompleted(stage);\n\t\t\t\t\tshowCompleteStageFragment(mapActivity, stage, false);\n\t\t\t\t}\n\t\t\t}).reg();\n\t\t}\n\t\t//share my location\n\t\tadapter.item(R.string.context_menu_item_share_location).icons(\n\t\t\t\tR.drawable.ic_action_gshare_dark, R.drawable.ic_action_gshare_light).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (app.getLocationProvider().getLastKnownLocation() != null) {\n\t\t\t\t\tnew ShareLocation(mapActivity).run();\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(app, R.string.unknown_location, Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}).reg();\n\t}","id":100703,"modified_method":"@Override\n\tpublic void prepareOptionsMenu(final MapActivity mapActivity, ContextMenuAdapter adapter) {\n\t\tfilter(adapter,R.string.pause_navigation, R.string.continue_navigation,\n\t\t\t\tR.string.cancel_navigation, R.string.cancel_route, R.string.clear_destination,\n\t\t\t\tR.string.target_points,\n\t\t\t\tR.string.get_directions, \n\t\t\t\tR.string.menu_mute_on, R.string.menu_mute_off,\n\t\t\t\tR.string.where_am_i, R.string.context_menu_item_share_location);\n\t\t//poi\n\t\tif (osmandSettings.SHOW_POI_OVER_MAP.get()) {\n\t\t\tadapter.item(R.string.sherpafy_disable_poi).icons(\n\t\t\t\t\tR.drawable.ic_action_gremove_dark, R.drawable.ic_action_gremove_light)\n\t\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tapp.getSettings().SHOW_POI_OVER_MAP.set(false);\n\t\t\t\t\tmapActivity.getMapLayers().updateLayers(mapActivity.getMapView());\n\t\t\t\t}\n\t\t\t}).reg();\n\t\t} else {\n\t\t\tadapter.item(R.string.poi).icons(R.drawable.ic_action_layers_dark, R.drawable.ic_action_layers_light)\n\t\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\t\t\tmapActivity.getMapLayers().selectPOIFilterLayer(mapActivity.getMapView(), null);\n\t\t\t\t\t\t\tapp.getSettings().SHOW_POI_OVER_MAP.set(true);\n\t\t\t\t\t\t\tmapActivity.getMapLayers().updateLayers(mapActivity.getMapView());\n\t\t\t\t\t\t}\n\t\t\t\t\t}).reg();\n\t\t}\n\t\t//important info\n\t\tadapter.item(R.string.sherpafy_tour_info_txt).icons(R.drawable.ic_action_info_dark, R.drawable.ic_action_info_light)\n\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\t\tIntent newIntent = new Intent(mapActivity, TourViewActivity.class);\n\t\t\t\t\t\t// newIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\t\t\t\tmapActivity.startActivity(newIntent);\n\t\t\t\t\t}\n\t\t\t\t}).reg();\n\t\t//complete stage\n\t\tfinal StageInformation stage = getSelectedStage();\n\t\tif (stage != null && !isStageVisited(stage.order)) {\n\t\t\tadapter.item(R.string.complete_stage)\n\t\t\t\t\t.icons(R.drawable.ic_action_finish_flag_dark, R.drawable.ic_action_finish_flag_light)\n\t\t\t\t\t.listen(new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tmarkStageAsCompleted(stage);\n\t\t\t\t\tshowCompleteStageFragment(mapActivity, stage, false);\n\t\t\t\t}\n\t\t\t}).reg();\n\t\t}\n\t\t//share my location\n\t\tadapter.item(R.string.context_menu_item_share_location).icons(\n\t\t\t\tR.drawable.ic_action_gshare_dark, R.drawable.ic_action_gshare_light).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (app.getLocationProvider().getLastKnownLocation() != null) {\n\t\t\t\t\tnew ShareLocation(mapActivity).run();\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(app, R.string.unknown_location, Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}).reg();\n\t}","commit_id":"b815e4c364dadcf352fd94416165ba2df5f49d01","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private List<SnmpManagedInterface> getNodeInterfaces(HttpSession userSession, int nodeid) throws SQLException {\n        Connection connection = null;\n        List<SnmpManagedInterface> nodeInterfaces = new ArrayList<SnmpManagedInterface>();\n        int lineCount = 0;\n\n        try {\n            connection = DataSourceFactory.getInstance().getConnection();\n\n            PreparedStatement interfaceSelect = connection.prepareStatement(INTERFACE_QUERY);\n            interfaceSelect.setInt(1, nodeid);\n\n            ResultSet interfaceSet = interfaceSelect.executeQuery();\n\n            if (interfaceSet != null) {\n                while (interfaceSet.next()) {\n                    lineCount++;\n                    SnmpManagedInterface newInterface = new SnmpManagedInterface();\n                    nodeInterfaces.add(newInterface);\n                    newInterface.setNodeid(interfaceSet.getInt(1));\n                    newInterface.setAddress(interfaceSet.getString(2));\n                    newInterface.setIfIndex(interfaceSet.getInt(3));\n                    newInterface.setIpHostname(interfaceSet.getString(4));\n                    newInterface.setStatus(interfaceSet.getString(5));\n                    newInterface.setIfDescr(interfaceSet.getString(6));\n                    newInterface.setIfType(interfaceSet.getInt(7));\n                    newInterface.setIfName(interfaceSet.getString(8));\n                    newInterface.setIfAlias(interfaceSet.getString(9));\n                }\n            }\n            interfaceSelect.close();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n\n        return nodeInterfaces;\n\n    }","id":100704,"modified_method":"private List<SnmpManagedInterface> getNodeInterfaces(HttpSession userSession, int nodeid) throws SQLException {\n        Connection connection = null;\n        List<SnmpManagedInterface> nodeInterfaces = new ArrayList<SnmpManagedInterface>();\n        int lineCount = 0;\n\n        try {\n            connection = DataSourceFactory.getInstance().getConnection();\n\n            PreparedStatement interfaceSelect = connection.prepareStatement(INTERFACE_QUERY);\n            interfaceSelect.setInt(1, nodeid);\n\n            ResultSet interfaceSet = interfaceSelect.executeQuery();\n\n            if (interfaceSet != null) {\n                while (interfaceSet.next()) {\n                    lineCount++;\n                    SnmpManagedInterface newInterface = new SnmpManagedInterface();\n                    nodeInterfaces.add(newInterface);\n                    newInterface.setNodeid(interfaceSet.getInt(1));\n                    newInterface.setAddress(interfaceSet.getString(2));\n                    newInterface.setIfIndex(interfaceSet.getInt(3));\n                    newInterface.setIpHostname(interfaceSet.getString(4));\n                    newInterface.setStatus(interfaceSet.getString(5));\n                    newInterface.setIfDescr(interfaceSet.getString(6));\n                    newInterface.setIfType(interfaceSet.getInt(7));\n                    newInterface.setIfName(interfaceSet.getString(8));\n                    newInterface.setIfAlias(interfaceSet.getString(9));\n                    newInterface.setCollectFlag(interfaceSet.getString(10));\n                    newInterface.setSnmpInterfaceId(interfaceSet.getInt(11));\n                }\n            }\n            interfaceSelect.close();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n\n        Collections.sort(nodeInterfaces);\n        return nodeInterfaces;\n\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<SnmpManagedInterface> allInterfaces = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        List<String> interfaceList = getList(request.getParameterValues(\"collTypeCheck\"));\n\n        // the node being modified\n        String nodeIdString = request.getParameter(\"node\");\n        int currNodeId = WebSecurityUtils.safeParseInt(nodeIdString);\n\n        String primeInt = null;\n\n        for (SnmpManagedInterface testInterface : allInterfaces) {\n            if (testInterface.getNodeid() == currNodeId && \"P\".equals(testInterface.getStatus()))\n                primeInt = testInterface.getAddress();\n        }\n\n        try {\n            Connection connection = Vault.getDbConnection();\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_INTERFACE);\n\n                for (SnmpManagedInterface curInterface : allInterfaces) {\n                    String intKey = curInterface.getNodeid() + \"+\" + curInterface.getIfIndex();\n\n                    // determine what is managed and unmanged\n                    if (interfaceList.contains(intKey) && (curInterface.getStatus() == null || curInterface.getStatus().equals(\"N\"))) {\n                        stmt.setString(1, \"C\");\n                        stmt.setInt(2, curInterface.getNodeid());\n                        stmt.setInt(3, curInterface.getIfIndex());\n                        this.log(\"DEBUG: executing SNMP Collection Type update to C for nodeid: \" + curInterface.getNodeid() + \" ifIndex: \" + curInterface.getIfIndex());\n                        stmt.executeUpdate();\n                    } else if (!interfaceList.contains(intKey) && curInterface.getNodeid() == currNodeId && (\"C\".equals(curInterface.getStatus()) || \"S\".equals(curInterface.getStatus()))) {\n                        stmt.setString(1, \"N\");\n                        stmt.setInt(2, curInterface.getNodeid());\n                        stmt.setInt(3, curInterface.getIfIndex());\n                        this.log(\"DEBUG: executing SNMP Collection Type update to N for nodeid: \" + curInterface.getNodeid() + \" ifIndex: \" + curInterface.getIfIndex());\n                        stmt.executeUpdate();\n                    }\n\n                }\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n                Vault.releaseDbConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        }\n\n        // send the event to restart SNMP Collection\n        if (primeInt != null)\n            sendSNMPRestartEvent(currNodeId, primeInt);\n\n        // forward the request for proper display\n        // TODO This will redirect to the node page, but the URL will be admin/changeCollectStatus. Needs fixed.\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/element/node.jsp?node=\" + currNodeId);\n        dispatcher.forward(request, response);\n    }","id":100705,"modified_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<SnmpManagedInterface> allInterfaces = getManagedInterfacesFromSession(userSession);\n\n        // the node being modified\n        String nodeIdString = request.getParameter(\"node\");\n        int currNodeId = WebSecurityUtils.safeParseInt(nodeIdString);\n\n        String primeInt = null;\n\n        for (SnmpManagedInterface testInterface : allInterfaces) {\n            if (testInterface.getNodeid() == currNodeId && \"P\".equals(testInterface.getStatus())) {\n                primeInt = testInterface.getAddress();\n            }\n        }\n\n        try {\n            Connection connection = Vault.getDbConnection();\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_INTERFACE);\n\n                for (SnmpManagedInterface curInterface : allInterfaces) {\n                    String option = request.getParameter(\"collect-\" + curInterface.getIfIndex());\n                    System.err.println(String.format(\"option = %s\", option));\n                    stmt.setString(1, option);\n                    stmt.setInt(2, curInterface.getSnmpInterfaceId());\n                    stmt.execute();\n                }\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n                Vault.releaseDbConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        }\n\n        // send the event to restart SNMP Collection\n        if (primeInt != null) {\n            sendSNMPRestartEvent(currNodeId, primeInt);\n        }\n\n        // forward the request for proper display\n        // TODO This will redirect to the node page, but the URL will be admin/changeCollectStatus. Needs fixed.\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/element/node.jsp?node=\" + currNodeId);\n        dispatcher.forward(request, response);\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfType(int newIfType) {\n        ifType = newIfType;\n    }","id":100706,"modified_method":"public void setIfType(int newIfType) {\n        m_ifType = newIfType;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getIfIndex() {\n        return ifIndex;\n    }","id":100707,"modified_method":"public int getIfIndex() {\n        return m_ifIndex;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setNodeid(int id) {\n        nodeid = id;\n    }","id":100708,"modified_method":"public void setNodeid(int id) {\n        m_nodeId = id;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfAlias(String newIfAlias) {\n        ifAlias = newIfAlias;\n    }","id":100709,"modified_method":"public void setIfAlias(String newIfAlias) {\n        m_ifAlias = newIfAlias;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getIfType() {\n        return ifType;\n    }","id":100710,"modified_method":"public int getIfType() {\n        return m_ifType;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getNodeid() {\n        return nodeid;\n    }","id":100711,"modified_method":"public int getNodeid() {\n        return m_nodeId;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfDescr(String newIfDescr) {\n        ifDescr = newIfDescr;\n    }","id":100712,"modified_method":"public void setIfDescr(String newIfDescr) {\n        m_ifDescr = newIfDescr;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfName(String newIfName) {\n        ifName = newIfName;\n    }","id":100713,"modified_method":"public void setIfName(String newIfName) {\n        m_ifName = newIfName;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIpHostname() {\n        return iphostname;\n    }","id":100714,"modified_method":"public String getIpHostname() {\n        return m_ipHostname;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIpHostname(String newIpHostname) {\n        iphostname = newIpHostname;\n    }","id":100715,"modified_method":"public void setIpHostname(String newIpHostname) {\n        m_ipHostname = newIpHostname;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfIndex(int index) {\n        ifIndex = index;\n    }","id":100716,"modified_method":"public void setIfIndex(int index) {\n        m_ifIndex = index;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfAlias() {\n        return ifAlias;\n    }","id":100717,"modified_method":"public String getIfAlias() {\n        return m_ifAlias;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setAddress(String newAddress) {\n        address = newAddress;\n    }","id":100718,"modified_method":"public void setAddress(String newAddress) {\n        m_address = newAddress;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setStatus(String newStatus) {\n        snmpstatus = newStatus;\n    }","id":100719,"modified_method":"public void setStatus(String newStatus) {\n        m_snmpStatus = newStatus;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getStatus() {\n        return snmpstatus;\n    }","id":100720,"modified_method":"public String getStatus() {\n        return m_snmpStatus;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public String getAddress() {\n        return address;\n    }","id":100721,"modified_method":"public String getAddress() {\n        return m_address;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfDescr() {\n        return ifDescr;\n    }","id":100722,"modified_method":"public String getIfDescr() {\n        return m_ifDescr;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfName() {\n        return ifName;\n    }","id":100723,"modified_method":"public String getIfName() {\n        return m_ifName;\n    }","commit_id":"693d3fdb8c76c9415a9b3bd783fa486011f15e74","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<SnmpManagedInterface> getNodeInterfaces(HttpSession userSession, int nodeid) throws SQLException {\n        Connection connection = null;\n        List<SnmpManagedInterface> nodeInterfaces = new ArrayList<SnmpManagedInterface>();\n        int lineCount = 0;\n\n        try {\n            connection = DataSourceFactory.getInstance().getConnection();\n\n            PreparedStatement interfaceSelect = connection.prepareStatement(INTERFACE_QUERY);\n            interfaceSelect.setInt(1, nodeid);\n\n            ResultSet interfaceSet = interfaceSelect.executeQuery();\n\n            if (interfaceSet != null) {\n                while (interfaceSet.next()) {\n                    lineCount++;\n                    SnmpManagedInterface newInterface = new SnmpManagedInterface();\n                    nodeInterfaces.add(newInterface);\n                    newInterface.setNodeid(interfaceSet.getInt(1));\n                    newInterface.setAddress(interfaceSet.getString(2));\n                    newInterface.setIfIndex(interfaceSet.getInt(3));\n                    newInterface.setIpHostname(interfaceSet.getString(4));\n                    newInterface.setStatus(interfaceSet.getString(5));\n                    newInterface.setIfDescr(interfaceSet.getString(6));\n                    newInterface.setIfType(interfaceSet.getInt(7));\n                    newInterface.setIfName(interfaceSet.getString(8));\n                    newInterface.setIfAlias(interfaceSet.getString(9));\n                }\n            }\n            interfaceSelect.close();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n\n        return nodeInterfaces;\n\n    }","id":100724,"modified_method":"private List<SnmpManagedInterface> getNodeInterfaces(HttpSession userSession, int nodeid) throws SQLException {\n        Connection connection = null;\n        List<SnmpManagedInterface> nodeInterfaces = new ArrayList<SnmpManagedInterface>();\n        int lineCount = 0;\n\n        try {\n            connection = DataSourceFactory.getInstance().getConnection();\n\n            PreparedStatement interfaceSelect = connection.prepareStatement(INTERFACE_QUERY);\n            interfaceSelect.setInt(1, nodeid);\n\n            ResultSet interfaceSet = interfaceSelect.executeQuery();\n\n            if (interfaceSet != null) {\n                while (interfaceSet.next()) {\n                    lineCount++;\n                    SnmpManagedInterface newInterface = new SnmpManagedInterface();\n                    nodeInterfaces.add(newInterface);\n                    newInterface.setNodeid(interfaceSet.getInt(1));\n                    newInterface.setAddress(interfaceSet.getString(2));\n                    newInterface.setIfIndex(interfaceSet.getInt(3));\n                    newInterface.setIpHostname(interfaceSet.getString(4));\n                    newInterface.setStatus(interfaceSet.getString(5));\n                    newInterface.setIfDescr(interfaceSet.getString(6));\n                    newInterface.setIfType(interfaceSet.getInt(7));\n                    newInterface.setIfName(interfaceSet.getString(8));\n                    newInterface.setIfAlias(interfaceSet.getString(9));\n                    newInterface.setCollectFlag(interfaceSet.getString(10));\n                    newInterface.setSnmpInterfaceId(interfaceSet.getInt(11));\n                }\n            }\n            interfaceSelect.close();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n\n        Collections.sort(nodeInterfaces);\n        return nodeInterfaces;\n\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<SnmpManagedInterface> allInterfaces = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        List<String> interfaceList = getList(request.getParameterValues(\"collTypeCheck\"));\n\n        // the node being modified\n        String nodeIdString = request.getParameter(\"node\");\n        int currNodeId = WebSecurityUtils.safeParseInt(nodeIdString);\n\n        String primeInt = null;\n\n        for (SnmpManagedInterface testInterface : allInterfaces) {\n            if (testInterface.getNodeid() == currNodeId && \"P\".equals(testInterface.getStatus()))\n                primeInt = testInterface.getAddress();\n        }\n\n        try {\n            Connection connection = Vault.getDbConnection();\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_INTERFACE);\n\n                for (SnmpManagedInterface curInterface : allInterfaces) {\n                    String intKey = curInterface.getNodeid() + \"+\" + curInterface.getIfIndex();\n\n                    // determine what is managed and unmanged\n                    if (interfaceList.contains(intKey) && (curInterface.getStatus() == null || curInterface.getStatus().equals(\"N\"))) {\n                        stmt.setString(1, \"C\");\n                        stmt.setInt(2, curInterface.getNodeid());\n                        stmt.setInt(3, curInterface.getIfIndex());\n                        this.log(\"DEBUG: executing SNMP Collection Type update to C for nodeid: \" + curInterface.getNodeid() + \" ifIndex: \" + curInterface.getIfIndex());\n                        stmt.executeUpdate();\n                    } else if (!interfaceList.contains(intKey) && curInterface.getNodeid() == currNodeId && (\"C\".equals(curInterface.getStatus()) || \"S\".equals(curInterface.getStatus()))) {\n                        stmt.setString(1, \"N\");\n                        stmt.setInt(2, curInterface.getNodeid());\n                        stmt.setInt(3, curInterface.getIfIndex());\n                        this.log(\"DEBUG: executing SNMP Collection Type update to N for nodeid: \" + curInterface.getNodeid() + \" ifIndex: \" + curInterface.getIfIndex());\n                        stmt.executeUpdate();\n                    }\n\n                }\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n                Vault.releaseDbConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        }\n\n        // send the event to restart SNMP Collection\n        if (primeInt != null)\n            sendSNMPRestartEvent(currNodeId, primeInt);\n\n        // forward the request for proper display\n        // TODO This will redirect to the node page, but the URL will be admin/changeCollectStatus. Needs fixed.\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/element/node.jsp?node=\" + currNodeId);\n        dispatcher.forward(request, response);\n    }","id":100725,"modified_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<SnmpManagedInterface> allInterfaces = getManagedInterfacesFromSession(userSession);\n\n        // the node being modified\n        String nodeIdString = request.getParameter(\"node\");\n        int currNodeId = WebSecurityUtils.safeParseInt(nodeIdString);\n\n        String primeInt = null;\n\n        for (SnmpManagedInterface testInterface : allInterfaces) {\n            if (testInterface.getNodeid() == currNodeId && \"P\".equals(testInterface.getStatus())) {\n                primeInt = testInterface.getAddress();\n            }\n        }\n\n        try {\n            Connection connection = Vault.getDbConnection();\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_INTERFACE);\n\n                for (SnmpManagedInterface curInterface : allInterfaces) {\n                    String option = request.getParameter(\"collect-\" + curInterface.getIfIndex());\n                    System.err.println(String.format(\"option = %s\", option));\n                    stmt.setString(1, option);\n                    stmt.setInt(2, curInterface.getSnmpInterfaceId());\n                    stmt.execute();\n                }\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n                Vault.releaseDbConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        }\n\n        // send the event to restart SNMP Collection\n        if (primeInt != null) {\n            sendSNMPRestartEvent(currNodeId, primeInt);\n        }\n\n        // forward the request for proper display\n        // TODO This will redirect to the node page, but the URL will be admin/changeCollectStatus. Needs fixed.\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/element/node.jsp?node=\" + currNodeId);\n        dispatcher.forward(request, response);\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getStatus() {\n        return snmpstatus;\n    }","id":100726,"modified_method":"public String getStatus() {\n        return m_snmpStatus;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setStatus(String newStatus) {\n        snmpstatus = newStatus;\n    }","id":100727,"modified_method":"public void setStatus(String newStatus) {\n        m_snmpStatus = newStatus;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfType(int newIfType) {\n        ifType = newIfType;\n    }","id":100728,"modified_method":"public void setIfType(int newIfType) {\n        m_ifType = newIfType;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfDescr(String newIfDescr) {\n        ifDescr = newIfDescr;\n    }","id":100729,"modified_method":"public void setIfDescr(String newIfDescr) {\n        m_ifDescr = newIfDescr;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getNodeid() {\n        return nodeid;\n    }","id":100730,"modified_method":"public int getNodeid() {\n        return m_nodeId;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setAddress(String newAddress) {\n        address = newAddress;\n    }","id":100731,"modified_method":"public void setAddress(String newAddress) {\n        m_address = newAddress;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public String getAddress() {\n        return address;\n    }","id":100732,"modified_method":"public String getAddress() {\n        return m_address;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getIfIndex() {\n        return ifIndex;\n    }","id":100733,"modified_method":"public int getIfIndex() {\n        return m_ifIndex;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getIfType() {\n        return ifType;\n    }","id":100734,"modified_method":"public int getIfType() {\n        return m_ifType;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfIndex(int index) {\n        ifIndex = index;\n    }","id":100735,"modified_method":"public void setIfIndex(int index) {\n        m_ifIndex = index;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfAlias(String newIfAlias) {\n        ifAlias = newIfAlias;\n    }","id":100736,"modified_method":"public void setIfAlias(String newIfAlias) {\n        m_ifAlias = newIfAlias;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIpHostname() {\n        return iphostname;\n    }","id":100737,"modified_method":"public String getIpHostname() {\n        return m_ipHostname;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfDescr() {\n        return ifDescr;\n    }","id":100738,"modified_method":"public String getIfDescr() {\n        return m_ifDescr;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setNodeid(int id) {\n        nodeid = id;\n    }","id":100739,"modified_method":"public void setNodeid(int id) {\n        m_nodeId = id;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIpHostname(String newIpHostname) {\n        iphostname = newIpHostname;\n    }","id":100740,"modified_method":"public void setIpHostname(String newIpHostname) {\n        m_ipHostname = newIpHostname;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfName(String newIfName) {\n        ifName = newIfName;\n    }","id":100741,"modified_method":"public void setIfName(String newIfName) {\n        m_ifName = newIfName;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfAlias() {\n        return ifAlias;\n    }","id":100742,"modified_method":"public String getIfAlias() {\n        return m_ifAlias;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfName() {\n        return ifName;\n    }","id":100743,"modified_method":"public String getIfName() {\n        return m_ifName;\n    }","commit_id":"d2385ba1d47233b5e2ca3759705e3b67e43a7f33","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<SnmpManagedInterface> getNodeInterfaces(HttpSession userSession, int nodeid) throws SQLException {\n        Connection connection = null;\n        List<SnmpManagedInterface> nodeInterfaces = new ArrayList<SnmpManagedInterface>();\n        int lineCount = 0;\n\n        try {\n            connection = DataSourceFactory.getInstance().getConnection();\n\n            PreparedStatement interfaceSelect = connection.prepareStatement(INTERFACE_QUERY);\n            interfaceSelect.setInt(1, nodeid);\n\n            ResultSet interfaceSet = interfaceSelect.executeQuery();\n\n            if (interfaceSet != null) {\n                while (interfaceSet.next()) {\n                    lineCount++;\n                    SnmpManagedInterface newInterface = new SnmpManagedInterface();\n                    nodeInterfaces.add(newInterface);\n                    newInterface.setNodeid(interfaceSet.getInt(1));\n                    newInterface.setAddress(interfaceSet.getString(2));\n                    newInterface.setIfIndex(interfaceSet.getInt(3));\n                    newInterface.setIpHostname(interfaceSet.getString(4));\n                    newInterface.setStatus(interfaceSet.getString(5));\n                    newInterface.setIfDescr(interfaceSet.getString(6));\n                    newInterface.setIfType(interfaceSet.getInt(7));\n                    newInterface.setIfName(interfaceSet.getString(8));\n                    newInterface.setIfAlias(interfaceSet.getString(9));\n                }\n            }\n            interfaceSelect.close();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n\n        return nodeInterfaces;\n\n    }","id":100744,"modified_method":"private List<SnmpManagedInterface> getNodeInterfaces(HttpSession userSession, int nodeid) throws SQLException {\n        Connection connection = null;\n        List<SnmpManagedInterface> nodeInterfaces = new ArrayList<SnmpManagedInterface>();\n        int lineCount = 0;\n\n        try {\n            connection = DataSourceFactory.getInstance().getConnection();\n\n            PreparedStatement interfaceSelect = connection.prepareStatement(INTERFACE_QUERY);\n            interfaceSelect.setInt(1, nodeid);\n\n            ResultSet interfaceSet = interfaceSelect.executeQuery();\n\n            if (interfaceSet != null) {\n                while (interfaceSet.next()) {\n                    lineCount++;\n                    SnmpManagedInterface newInterface = new SnmpManagedInterface();\n                    nodeInterfaces.add(newInterface);\n                    newInterface.setNodeid(interfaceSet.getInt(1));\n                    newInterface.setAddress(interfaceSet.getString(2));\n                    newInterface.setIfIndex(interfaceSet.getInt(3));\n                    newInterface.setIpHostname(interfaceSet.getString(4));\n                    newInterface.setStatus(interfaceSet.getString(5));\n                    newInterface.setIfDescr(interfaceSet.getString(6));\n                    newInterface.setIfType(interfaceSet.getInt(7));\n                    newInterface.setIfName(interfaceSet.getString(8));\n                    newInterface.setIfAlias(interfaceSet.getString(9));\n                    newInterface.setCollectFlag(interfaceSet.getString(10));\n                    newInterface.setSnmpInterfaceId(interfaceSet.getInt(11));\n                }\n            }\n            interfaceSelect.close();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n\n        Collections.sort(nodeInterfaces);\n        return nodeInterfaces;\n\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<SnmpManagedInterface> allInterfaces = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        List<String> interfaceList = getList(request.getParameterValues(\"collTypeCheck\"));\n\n        // the node being modified\n        String nodeIdString = request.getParameter(\"node\");\n        int currNodeId = WebSecurityUtils.safeParseInt(nodeIdString);\n\n        String primeInt = null;\n\n        for (SnmpManagedInterface testInterface : allInterfaces) {\n            if (testInterface.getNodeid() == currNodeId && \"P\".equals(testInterface.getStatus()))\n                primeInt = testInterface.getAddress();\n        }\n\n        try {\n            Connection connection = Vault.getDbConnection();\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_INTERFACE);\n\n                for (SnmpManagedInterface curInterface : allInterfaces) {\n                    String intKey = curInterface.getNodeid() + \"+\" + curInterface.getIfIndex();\n\n                    // determine what is managed and unmanged\n                    if (interfaceList.contains(intKey) && (curInterface.getStatus() == null || curInterface.getStatus().equals(\"N\"))) {\n                        stmt.setString(1, \"C\");\n                        stmt.setInt(2, curInterface.getNodeid());\n                        stmt.setInt(3, curInterface.getIfIndex());\n                        this.log(\"DEBUG: executing SNMP Collection Type update to C for nodeid: \" + curInterface.getNodeid() + \" ifIndex: \" + curInterface.getIfIndex());\n                        stmt.executeUpdate();\n                    } else if (!interfaceList.contains(intKey) && curInterface.getNodeid() == currNodeId && (\"C\".equals(curInterface.getStatus()) || \"S\".equals(curInterface.getStatus()))) {\n                        stmt.setString(1, \"N\");\n                        stmt.setInt(2, curInterface.getNodeid());\n                        stmt.setInt(3, curInterface.getIfIndex());\n                        this.log(\"DEBUG: executing SNMP Collection Type update to N for nodeid: \" + curInterface.getNodeid() + \" ifIndex: \" + curInterface.getIfIndex());\n                        stmt.executeUpdate();\n                    }\n\n                }\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n                Vault.releaseDbConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        }\n\n        // send the event to restart SNMP Collection\n        if (primeInt != null)\n            sendSNMPRestartEvent(currNodeId, primeInt);\n\n        // forward the request for proper display\n        // TODO This will redirect to the node page, but the URL will be admin/changeCollectStatus. Needs fixed.\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/element/node.jsp?node=\" + currNodeId);\n        dispatcher.forward(request, response);\n    }","id":100745,"modified_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<SnmpManagedInterface> allInterfaces = getManagedInterfacesFromSession(userSession);\n\n        // the node being modified\n        String nodeIdString = request.getParameter(\"node\");\n        int currNodeId = WebSecurityUtils.safeParseInt(nodeIdString);\n\n        String primeInt = null;\n\n        for (SnmpManagedInterface testInterface : allInterfaces) {\n            if (testInterface.getNodeid() == currNodeId && \"P\".equals(testInterface.getStatus())) {\n                primeInt = testInterface.getAddress();\n            }\n        }\n\n        try {\n            Connection connection = Vault.getDbConnection();\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_INTERFACE);\n\n                for (SnmpManagedInterface curInterface : allInterfaces) {\n                    String option = request.getParameter(\"collect-\" + curInterface.getIfIndex());\n                    System.err.println(String.format(\"option = %s\", option));\n                    stmt.setString(1, option);\n                    stmt.setInt(2, curInterface.getSnmpInterfaceId());\n                    stmt.execute();\n                }\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n                Vault.releaseDbConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        }\n\n        // send the event to restart SNMP Collection\n        if (primeInt != null) {\n            sendSNMPRestartEvent(currNodeId, primeInt);\n        }\n\n        // forward the request for proper display\n        // TODO This will redirect to the node page, but the URL will be admin/changeCollectStatus. Needs fixed.\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/element/node.jsp?node=\" + currNodeId);\n        dispatcher.forward(request, response);\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getStatus() {\n        return snmpstatus;\n    }","id":100746,"modified_method":"public String getStatus() {\n        return m_snmpStatus;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setAddress(String newAddress) {\n        address = newAddress;\n    }","id":100747,"modified_method":"public void setAddress(String newAddress) {\n        m_address = newAddress;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfIndex(int index) {\n        ifIndex = index;\n    }","id":100748,"modified_method":"public void setIfIndex(int index) {\n        m_ifIndex = index;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfDescr(String newIfDescr) {\n        ifDescr = newIfDescr;\n    }","id":100749,"modified_method":"public void setIfDescr(String newIfDescr) {\n        m_ifDescr = newIfDescr;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setStatus(String newStatus) {\n        snmpstatus = newStatus;\n    }","id":100750,"modified_method":"public void setStatus(String newStatus) {\n        m_snmpStatus = newStatus;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfType(int newIfType) {\n        ifType = newIfType;\n    }","id":100751,"modified_method":"public void setIfType(int newIfType) {\n        m_ifType = newIfType;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfAlias(String newIfAlias) {\n        ifAlias = newIfAlias;\n    }","id":100752,"modified_method":"public void setIfAlias(String newIfAlias) {\n        m_ifAlias = newIfAlias;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getIfType() {\n        return ifType;\n    }","id":100753,"modified_method":"public int getIfType() {\n        return m_ifType;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIfName(String newIfName) {\n        ifName = newIfName;\n    }","id":100754,"modified_method":"public void setIfName(String newIfName) {\n        m_ifName = newIfName;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getNodeid() {\n        return nodeid;\n    }","id":100755,"modified_method":"public int getNodeid() {\n        return m_nodeId;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIpHostname() {\n        return iphostname;\n    }","id":100756,"modified_method":"public String getIpHostname() {\n        return m_ipHostname;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfDescr() {\n        return ifDescr;\n    }","id":100757,"modified_method":"public String getIfDescr() {\n        return m_ifDescr;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public String getAddress() {\n        return address;\n    }","id":100758,"modified_method":"public String getAddress() {\n        return m_address;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setNodeid(int id) {\n        nodeid = id;\n    }","id":100759,"modified_method":"public void setNodeid(int id) {\n        m_nodeId = id;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfAlias() {\n        return ifAlias;\n    }","id":100760,"modified_method":"public String getIfAlias() {\n        return m_ifAlias;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public String getIfName() {\n        return ifName;\n    }","id":100761,"modified_method":"public String getIfName() {\n        return m_ifName;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public void setIpHostname(String newIpHostname) {\n        iphostname = newIpHostname;\n    }","id":100762,"modified_method":"public void setIpHostname(String newIpHostname) {\n        m_ipHostname = newIpHostname;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public int getIfIndex() {\n        return ifIndex;\n    }","id":100763,"modified_method":"public int getIfIndex() {\n        return m_ifIndex;\n    }","commit_id":"2bfacff823d799c7e49e0db26242d1982b66fcda","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Event getTrapEvent(MibValueSymbol trapValueSymbol, String ueibase) {\n\t\tEvent evt = new Event();\n\t\tMask mask = new Mask();\n\t\tMaskelement me;\n\t\t\n\t\t// Set the event's UEI, event-label, logmsg, severity, and descr\n\t\tevt.setUei(getTrapEventUEI(trapValueSymbol, ueibase));\n\t\tevt.setEventLabel(getTrapEventLabel(trapValueSymbol));\n\t\tevt.setLogmsg(getTrapEventLogmsg(trapValueSymbol));\n\t\tevt.setSeverity(\"Indeterminate\");\n\t\tevt.setAlarmData(getTrapEventAlarmData());\n\t\tevt.setDescr(getTrapEventDescr(trapValueSymbol));\n\t\t\n\t\t// Construct the event mask object\n\t\t// The \"ID\" mask element (trap enterprise)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"id\");\n\t\tme.addMevalue(getTrapEnterprise(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"generic\" mask element (hard-wired to enterprise-specific(6))\n\t\tme = new Maskelement();\n\t\tme.setMename(\"generic\");\n\t\tme.addMevalue(\"6\");\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"specific\" mask element (trap specific-type)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"specific\");\n\t\tme.addMevalue(getTrapSpecificType(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\tevt.setMask(mask);\n\t\t\n\t\treturn evt;\n\t}","id":100764,"modified_method":"public static Event getTrapEvent(MibValueSymbol trapValueSymbol, String ueibase) {\n\t\tEvent evt = new Event();\n\t\tMask mask = new Mask();\n\t\tMaskelement me;\n\t\t\n\t\t// Set the event's UEI, event-label, logmsg, severity, and descr\n\t\tevt.setUei(getTrapEventUEI(trapValueSymbol, ueibase));\n\t\tevt.setEventLabel(getTrapEventLabel(trapValueSymbol));\n\t\tevt.setLogmsg(getTrapEventLogmsg(trapValueSymbol));\n\t\tevt.setSeverity(\"Indeterminate\");\n\t\tevt.setDescr(getTrapEventDescr(trapValueSymbol));\n\n        // FIXME Disabled for now so we match mib2opennms functionality\n        //evt.setAlarmData(getTrapEventAlarmData());\n\n\t\t// Construct the event mask object\n\t\t// The \"ID\" mask element (trap enterprise)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"id\");\n\t\tme.addMevalue(getTrapEnterprise(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"generic\" mask element (hard-wired to enterprise-specific(6))\n\t\tme = new Maskelement();\n\t\tme.setMename(\"generic\");\n\t\tme.addMevalue(\"6\");\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"specific\" mask element (trap specific-type)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"specific\");\n\t\tme.addMevalue(getTrapSpecificType(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\tevt.setMask(mask);\n\t\t\n\t\treturn evt;\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static ArrayList<MibValue> getTrapVars(MibValueSymbol trapValueSymbol) {\n\t\tArrayList<MibValue> vals = new ArrayList<MibValue>();\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tSnmpNotificationType v2notif = (SnmpNotificationType)trapValueSymbol.getType();\n\t\t\tvals = v2notif.getObjects();\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType)trapValueSymbol.getType();\n\t\t\tvals = v1trap.getVariables();\n\t\t}\n\t\treturn vals;\n\t}","id":100765,"modified_method":"public static List<MibValue> getTrapVars(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tSnmpNotificationType v2notif = (SnmpNotificationType) trapValueSymbol.getType();\n\t\t\treturn getV2NotificationObjects(v2notif);\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType) trapValueSymbol.getType();\n\t\t\treturn getV1TrapVariables(v1trap);\n\t\t} else {\n\t\t    throw new IllegalStateException(\"trap type is not an SNMP v1 Trap or v2 Notification\");      \n        }\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapEventDescr(MibValueSymbol trapValueSymbol) {\n\t\tString descr;\n\t\tMatcher m = Pattern.compile(\"^\", Pattern.MULTILINE).matcher(((SnmpType)trapValueSymbol.getType()).getDescription());\n\t\tdescr = m.replaceAll(\"\\t\");\n\t\tm = Pattern.compile(\"^\").matcher(descr);\n\t\tdescr = m.replaceAll(\"\\n\");\n\t\tm = Pattern.compile(\"$\").matcher(descr);\n\t\tdescr = m.replaceAll(\"\\n\");\n\t\tStringBuffer dbuf = new StringBuffer(descr);\n\t\tdbuf.append(\"\\n\");\n\t\t\n\t\tint vbNum = 1;\n\t\tfor (MibValue vb : getTrapVars(trapValueSymbol)) {\n\t\t\tdbuf.append(\"\\n\\t\").append(vb.getName()).append(\"=%parm[#\").append(vbNum).append(\"]%\");\n\t\t\tvbNum++;\n\t\t}\n\t\t\n\t\tdescr = dbuf.toString();\n\t\treturn descr;\n\t}","id":100766,"modified_method":"public static String getTrapEventDescr(MibValueSymbol trapValueSymbol) {\n\t\tString description = ((SnmpType) trapValueSymbol.getType()).getDescription();\n        \n        // FIXME There a lot of detail here (like removing the last \\n) that can go away when we don't need to match mib2opennms exactly\n        \n        final String descrStartingNewlines = description.replaceAll(\"^\", \"\\n<p>\");\n        \n        final String descrEndingNewlines = descrStartingNewlines.replaceAll(\"$\", \"<\/p>\\n\");\n\n        //final String descrTabbed = descrEndingNewlines.replaceAll(\"(?m)^\", \"\\t\");\n        //final StringBuffer dbuf = new StringBuffer(descrTabbed);\n\n        final StringBuffer dbuf = new StringBuffer(descrEndingNewlines);\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        \n        //if (dbuf.lastIndexOf(\"\\n\") != -1) {\n        //    dbuf.insert(dbuf.lastIndexOf(\"\\n\") + 1, '\\t');\n        //}\n\n        //final StringBuffer dbuf = new StringBuffer(descrEndingNewlines);\n\t\t//dbuf.append(\"\\n\");\n\t\t\n        dbuf.append(\"<table>\");\n        dbuf.append(\"\\n\");\n\t\tint vbNum = 1;\n\t\tfor (MibValue vb : getTrapVars(trapValueSymbol)) {\n\t\t\tdbuf.append(\"\\t<tr><td><b>\\n\\n\\t\").append(vb.getName());\n            dbuf.append(\"<\/b><\/td><td>\\n\\t%parm[#\").append(vbNum).append(\"]%;<\/td><td><p>\");\n\n            SnmpObjectType snmpObjectType = ((SnmpObjectType) ((ObjectIdentifierValue) vb).getSymbol().getType());\n            if (snmpObjectType.getSyntax().getClass().equals(IntegerType.class)) {\n                IntegerType integerType = (IntegerType) snmpObjectType.getSyntax();\n                \n                if (integerType.getAllSymbols().length > 0) {\n                    SortedMap<Integer, String> map = new TreeMap<Integer, String>();\n                    for (MibValueSymbol sym : integerType.getAllSymbols()) {\n                        map.put(new Integer(sym.getValue().toString()), sym.getName());\n                    }\n\n                    dbuf.append(\"\\n\");\n                    for (Entry<Integer, String> entry : map.entrySet()) {\n                        dbuf.append(\"\\t\\t\").append(entry.getValue()).append(\"(\").append(entry.getKey()).append(\")\\n\");\n                    }\n                    dbuf.append(\"\\t\");\n                }\n            }\n            \n            dbuf.append(\"<\/p><\/td><\/tr>\\n\");\n\t\t\tvbNum++;\n\t\t}\n\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        dbuf.append(\"<\/table>\\n\\t\");\n\t\t\n\t\treturn dbuf.toString();\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void parseCli(String[] argv) {\n\t\tOptions opts = new Options();\n\t\topts.addOption(\"m\", \"mib\", true, \"Pathname or URL of MIB file to scan for traps\");\n\t\topts.addOption(\"b\", \"ueibase\", true, \"Base UEI for resulting events\");\n\t\t\n\t\tCommandLineParser parser = new GnuParser();\n\t\ttry {\n\t\t\tCommandLine cmd = parser.parse(opts, argv);\n\t\t\tif (cmd.hasOption('m')) {\n\t\t\t\tmibloc = cmd.getOptionValue('m');\n\t\t\t} else {\n\t\t\t\tprintHelp(\"You must specify a MIB file pathname or URL\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (cmd.hasOption(\"b\")) {\n\t\t\t\tueibase = cmd.getOptionValue('b');\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\tprintHelp(\"Failed to parse command line options\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","id":100767,"modified_method":"public void parseCli(String[] argv) {\n\t\tOptions opts = new Options();\n\t\topts.addOption(\"m\", \"mib\", true, \"Pathname or URL of MIB file to scan for traps\");\n\t\topts.addOption(\"b\", \"ueibase\", true, \"Base UEI for resulting events\");\n\t\t\n\t\tCommandLineParser parser = new GnuParser();\n\t\ttry {\n\t\t\tCommandLine cmd = parser.parse(opts, argv);\n\t\t\tif (cmd.hasOption('m')) {\n\t\t\t\tm_mibLocation = cmd.getOptionValue('m');\n\t\t\t} else {\n\t\t\t\tprintHelp(\"You must specify a MIB file pathname or URL\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (cmd.hasOption(\"b\")) {\n\t\t\t\tm_ueiBase = cmd.getOptionValue('b');\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\tprintHelp(\"Failed to parse command line options\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Logmsg getTrapEventLogmsg(MibValueSymbol trapValueSymbol) {\n\t\tLogmsg msg = new Logmsg();\n\t\tmsg.setDest(\"logndisplay\");\n\t\tmsg.setContent(\"Log messages coming soon\");\n\t\treturn msg;\n\t}","id":100768,"modified_method":"public static Logmsg getTrapEventLogmsg(MibValueSymbol trapValueSymbol) {\n\t\tLogmsg msg = new Logmsg();\n\t\tmsg.setDest(\"logndisplay\");\n\n        // FIXME There some detail here (like removing the last \\n) that can go away when we don't need to match mib2opennms exactly\n        final StringBuffer dbuf = new StringBuffer();\n        dbuf.append(\"<p>\");\n        dbuf.append(\"\\n\");\n        dbuf.append(\"\\t\").append(trapValueSymbol.getName()).append(\" trap received\\n\");\n        int vbNum = 1;\n        for (MibValue vb : getTrapVars(trapValueSymbol)) {\n            dbuf.append(\"\\t\").append(vb.getName()).append(\"=%parm[#\").append(vbNum).append(\"]%\\n\");\n            vbNum++;\n        }\n\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        dbuf.append(\"<\/p>\\n\\t\");\n\n        msg.setContent(dbuf.toString());\n        \n\t\treturn msg;\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapSpecificType(MibValueSymbol trapValueSymbol) {\n\t\tString specificType = \"0\";\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tMatcher m = Pattern.compile(\".*\\\\.(\\\\d+)$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\tspecificType = m.group(1);\n\t\t\t}\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tspecificType = trapValueSymbol.getValue().toString();\n\t\t}\n\t\treturn specificType;\n\t}","id":100769,"modified_method":"public static String getTrapSpecificType(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tMatcher m = Pattern.compile(\".*\\\\.(\\\\d+)$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\treturn m.group(1);\n\t\t\t} else {\n                throw new IllegalStateException(\"Could not pull last number out of trap OID '\" + trapOid + \"' to get SNMPv1 'specific' value\");\n            }\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\treturn trapValueSymbol.getValue().toString();\n        } else {\n            throw new IllegalStateException(\"Trying to get a trap enterprise number from a non-trap, non-notification object\");\n        }\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapEnterprise(MibValueSymbol trapValueSymbol) {\n\t\tString enterpriseOid = \".1\";\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tenterpriseOid = trapOid;\n\t\t\tMatcher m = Pattern.compile(\"(.*)\\\\.\\\\d+$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\tenterpriseOid = m.group(1);\n\t\t\t}\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType)trapValueSymbol.getType();\n\t\t\tenterpriseOid = v1trap.getEnterprise().toString();\n\t\t}\n\t\treturn enterpriseOid;\n\t}","id":100770,"modified_method":"public static String getTrapEnterprise(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = \".\" + trapValueSymbol.getValue().toString();\n            // FIXME This isn't right, I think, but it matches mib2opennms functionality... it should chop up just the last number, not the last *two*\n\t\t\tMatcher m = Pattern.compile(\"(.*)\\\\.\\\\d+\\\\.\\\\d+$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\treturn m.group(1);\n\t\t\t} else {\n                throw new IllegalStateException(\"Could not pull last two numbers out of trap OID '\" + trapOid + \"' to get SNMPv1 'enterprise' value\");\n            }\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType) trapValueSymbol.getType();\n\t\t\treturn \".\" + v1trap.getEnterprise().toString();\n        } else {\n            throw new IllegalStateException(\"Trying to get a trap enterprise number from a non-trap, non-notification object\");\n        }\n\t}","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main( String[] args ) {\n        MibLoader loader = new MibLoader();\n        Mib mib = null;\n        File file;\n        URL url;\n        \n        // Check command-line arguments\n        parseCli(args);\n        /*\n        if (args.length < 2) {\n        \tprintHelp(\"You must specify at least a MIB file or URL\");\n        \tSystem.exit(1);\n        }\n        if (args[pos].equals(\"--mib\")) {\n        \tmibloc = args[pos+1];\n        \tpos += 2;\n        }\n        if (args[pos].equals(\"--ueibase\")) {\n        \tueibase = args[pos+1];\n        \tpos += 2;\n        }\n        */\n\n        try {\n        \ttry {\n\t        \turl = new URL(mibloc);\n\t        } catch (MalformedURLException e) {\n\t        \turl = null;\n\t        }\n\t        if (url == null) {\n\t        \tfile = new File(mibloc);\n\t        \tloader.addDir(file.getParentFile());\n\t        \tmib = loader.load(file);\n\t        } else {\n\t        \tmib = loader.load(url);\n\t        }\n\t        if (mib.getLog().warningCount() > 0) {\n\t        \tmib.getLog().printTo(System.err);\n\t        }\n        } catch (FileNotFoundException e) {\n        \tprintError(mibloc, e);\n        \tSystem.exit(1);\n        } catch (IOException e) {\n        \tprintError(mibloc, e);\n        } catch (MibLoaderException e) {\n        \te.getLog().printTo(System.err);\n        \tSystem.exit(1);\n        }\n        printEvents(loader, ueibase);\n\t}","id":100771,"modified_method":"public static void main(String[] args) throws FileNotFoundException {\n        BasicConfigurator.configure();\n        Logger.getRootLogger().setLevel(Level.WARN);\n        \n        Mib2Events convertor = new Mib2Events();\n        \n        convertor.parseCli(args);\n        try {\n            convertor.convert();\n        } catch (FileNotFoundException e) {\n            printError(convertor.getMibLocation(), e);\n            System.exit(1);\n        } catch (IOException e) {\n            printError(convertor.getMibLocation(), e);\n        } catch (MibLoaderException e) {\n            e.getLog().printTo(System.err);\n            System.exit(1);\n        }\n\n        if (convertor.getMib().getLog().warningCount() > 0) {\n            convertor.getMib().getLog().printTo(System.err);\n        }\n\n        PrintStream out = System.out;\n        out.println(\"<!-- Start of auto generated data from MIB: \" + convertor.getMib().getName() + \" -->\");\n        convertor.printEvents(out);\n        out.println(\"<!-- End of auto generated data from MIB: \" + convertor.getMib().getName() + \" -->\");\n    }","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void printEvents(Mib mib, String ueibase) {\n\t\tCollection syms = mib.getAllSymbols();\n\t\tIterator<MibSymbol> symIter = syms.iterator();\n\t\tMibSymbol sym = null;\n\t\tMibValueSymbol vsym = null;\n\t\tIterator<MibValue> trapVarbinds;\n\t\tEvents events = new Events();\n\t\tStringWriter writer = new StringWriter();\n\t\t\n\t\twhile (symIter.hasNext()) {\n\t\t\tsym = symIter.next();\n\t\t\tif (! (sym instanceof MibValueSymbol))\n\t\t\t\tcontinue;\n\t\t\tvsym = (MibValueSymbol)sym;\n\t\t\tif ((! (vsym.getType() instanceof SnmpNotificationType)) && (! (vsym.getType() instanceof SnmpTrapType)))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tevents.addEvent(getTrapEvent(vsym, ueibase));\n\t\t}\n\t\t\n\t\tif (events.getEventCount() < 1) {\n\t\t\tSystem.err.println(\"No trap definitions found in this MIB (\" + mib.getName() + \"), exiting\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tevents.marshal(writer);\n\t\t\tprettyPrintXML(new ByteArrayInputStream(writer.toString().getBytes()), (OutputStream)System.out);\n\t\t} catch (MarshalException e) {\n\t\t\tSystem.err.println(\"Fatal: caught MarshalException:\" + e);\n\t\t} catch (ValidationException e) {\n\t\t\tSystem.err.println(\"Fatal: caught ValidationException:\" + e);\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Fatal: Unhandled exception: \" + e);\n\t\t}\n\t}","id":100772,"modified_method":"private static Events convertMibToEvents(Mib mib, String ueibase) {\n        Events events = new Events();\n\t\tfor (MibSymbol sym : getAllSymbolsFromMib(mib)) {\n\t\t\tif (!(sym instanceof MibValueSymbol)) {\n\t\t\t\tcontinue;\n            }\n            \n            MibValueSymbol vsym = (MibValueSymbol) sym;\n\t\t\tif ((!(vsym.getType() instanceof SnmpNotificationType)) && (!(vsym.getType() instanceof SnmpTrapType))) {\n                continue;\n            }\n\t\t\t\n\t\t\tevents.addEvent(getTrapEvent(vsym, ueibase));\n\t\t}\n        return events;\n    }","commit_id":"e51a5435deeb697e68138845af1e51db1ae86dcd","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Logmsg getTrapEventLogmsg(MibValueSymbol trapValueSymbol) {\n\t\tLogmsg msg = new Logmsg();\n\t\tmsg.setDest(\"logndisplay\");\n\t\tmsg.setContent(\"Log messages coming soon\");\n\t\treturn msg;\n\t}","id":100773,"modified_method":"public static Logmsg getTrapEventLogmsg(MibValueSymbol trapValueSymbol) {\n\t\tLogmsg msg = new Logmsg();\n\t\tmsg.setDest(\"logndisplay\");\n\n        // FIXME There some detail here (like removing the last \\n) that can go away when we don't need to match mib2opennms exactly\n        final StringBuffer dbuf = new StringBuffer();\n        dbuf.append(\"<p>\");\n        dbuf.append(\"\\n\");\n        dbuf.append(\"\\t\").append(trapValueSymbol.getName()).append(\" trap received\\n\");\n        int vbNum = 1;\n        for (MibValue vb : getTrapVars(trapValueSymbol)) {\n            dbuf.append(\"\\t\").append(vb.getName()).append(\"=%parm[#\").append(vbNum).append(\"]%\\n\");\n            vbNum++;\n        }\n\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        dbuf.append(\"<\/p>\\n\\t\");\n\n        msg.setContent(dbuf.toString());\n        \n\t\treturn msg;\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void printEvents(Mib mib, String ueibase) {\n\t\tCollection syms = mib.getAllSymbols();\n\t\tIterator<MibSymbol> symIter = syms.iterator();\n\t\tMibSymbol sym = null;\n\t\tMibValueSymbol vsym = null;\n\t\tIterator<MibValue> trapVarbinds;\n\t\tEvents events = new Events();\n\t\tStringWriter writer = new StringWriter();\n\t\t\n\t\twhile (symIter.hasNext()) {\n\t\t\tsym = symIter.next();\n\t\t\tif (! (sym instanceof MibValueSymbol))\n\t\t\t\tcontinue;\n\t\t\tvsym = (MibValueSymbol)sym;\n\t\t\tif ((! (vsym.getType() instanceof SnmpNotificationType)) && (! (vsym.getType() instanceof SnmpTrapType)))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tevents.addEvent(getTrapEvent(vsym, ueibase));\n\t\t}\n\t\t\n\t\tif (events.getEventCount() < 1) {\n\t\t\tSystem.err.println(\"No trap definitions found in this MIB (\" + mib.getName() + \"), exiting\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tevents.marshal(writer);\n\t\t\tprettyPrintXML(new ByteArrayInputStream(writer.toString().getBytes()), (OutputStream)System.out);\n\t\t} catch (MarshalException e) {\n\t\t\tSystem.err.println(\"Fatal: caught MarshalException:\" + e);\n\t\t} catch (ValidationException e) {\n\t\t\tSystem.err.println(\"Fatal: caught ValidationException:\" + e);\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Fatal: Unhandled exception: \" + e);\n\t\t}\n\t}","id":100774,"modified_method":"private static Events convertMibToEvents(Mib mib, String ueibase) {\n        Events events = new Events();\n\t\tfor (MibSymbol sym : getAllSymbolsFromMib(mib)) {\n\t\t\tif (!(sym instanceof MibValueSymbol)) {\n\t\t\t\tcontinue;\n            }\n            \n            MibValueSymbol vsym = (MibValueSymbol) sym;\n\t\t\tif ((!(vsym.getType() instanceof SnmpNotificationType)) && (!(vsym.getType() instanceof SnmpTrapType))) {\n                continue;\n            }\n\t\t\t\n\t\t\tevents.addEvent(getTrapEvent(vsym, ueibase));\n\t\t}\n        return events;\n    }","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static ArrayList<MibValue> getTrapVars(MibValueSymbol trapValueSymbol) {\n\t\tArrayList<MibValue> vals = new ArrayList<MibValue>();\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tSnmpNotificationType v2notif = (SnmpNotificationType)trapValueSymbol.getType();\n\t\t\tvals = v2notif.getObjects();\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType)trapValueSymbol.getType();\n\t\t\tvals = v1trap.getVariables();\n\t\t}\n\t\treturn vals;\n\t}","id":100775,"modified_method":"public static List<MibValue> getTrapVars(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tSnmpNotificationType v2notif = (SnmpNotificationType) trapValueSymbol.getType();\n\t\t\treturn getV2NotificationObjects(v2notif);\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType) trapValueSymbol.getType();\n\t\t\treturn getV1TrapVariables(v1trap);\n\t\t} else {\n\t\t    throw new IllegalStateException(\"trap type is not an SNMP v1 Trap or v2 Notification\");      \n        }\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void parseCli(String[] argv) {\n\t\tOptions opts = new Options();\n\t\topts.addOption(\"m\", \"mib\", true, \"Pathname or URL of MIB file to scan for traps\");\n\t\topts.addOption(\"b\", \"ueibase\", true, \"Base UEI for resulting events\");\n\t\t\n\t\tCommandLineParser parser = new GnuParser();\n\t\ttry {\n\t\t\tCommandLine cmd = parser.parse(opts, argv);\n\t\t\tif (cmd.hasOption('m')) {\n\t\t\t\tmibloc = cmd.getOptionValue('m');\n\t\t\t} else {\n\t\t\t\tprintHelp(\"You must specify a MIB file pathname or URL\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (cmd.hasOption(\"b\")) {\n\t\t\t\tueibase = cmd.getOptionValue('b');\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\tprintHelp(\"Failed to parse command line options\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","id":100776,"modified_method":"public void parseCli(String[] argv) {\n\t\tOptions opts = new Options();\n\t\topts.addOption(\"m\", \"mib\", true, \"Pathname or URL of MIB file to scan for traps\");\n\t\topts.addOption(\"b\", \"ueibase\", true, \"Base UEI for resulting events\");\n\t\t\n\t\tCommandLineParser parser = new GnuParser();\n\t\ttry {\n\t\t\tCommandLine cmd = parser.parse(opts, argv);\n\t\t\tif (cmd.hasOption('m')) {\n\t\t\t\tm_mibLocation = cmd.getOptionValue('m');\n\t\t\t} else {\n\t\t\t\tprintHelp(\"You must specify a MIB file pathname or URL\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (cmd.hasOption(\"b\")) {\n\t\t\t\tm_ueiBase = cmd.getOptionValue('b');\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\tprintHelp(\"Failed to parse command line options\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapSpecificType(MibValueSymbol trapValueSymbol) {\n\t\tString specificType = \"0\";\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tMatcher m = Pattern.compile(\".*\\\\.(\\\\d+)$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\tspecificType = m.group(1);\n\t\t\t}\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tspecificType = trapValueSymbol.getValue().toString();\n\t\t}\n\t\treturn specificType;\n\t}","id":100777,"modified_method":"public static String getTrapSpecificType(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tMatcher m = Pattern.compile(\".*\\\\.(\\\\d+)$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\treturn m.group(1);\n\t\t\t} else {\n                throw new IllegalStateException(\"Could not pull last number out of trap OID '\" + trapOid + \"' to get SNMPv1 'specific' value\");\n            }\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\treturn trapValueSymbol.getValue().toString();\n        } else {\n            throw new IllegalStateException(\"Trying to get a trap enterprise number from a non-trap, non-notification object\");\n        }\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapEventDescr(MibValueSymbol trapValueSymbol) {\n\t\tString descr;\n\t\tMatcher m = Pattern.compile(\"^\", Pattern.MULTILINE).matcher(((SnmpType)trapValueSymbol.getType()).getDescription());\n\t\tdescr = m.replaceAll(\"\\t\");\n\t\tm = Pattern.compile(\"^\").matcher(descr);\n\t\tdescr = m.replaceAll(\"\\n\");\n\t\tm = Pattern.compile(\"$\").matcher(descr);\n\t\tdescr = m.replaceAll(\"\\n\");\n\t\tStringBuffer dbuf = new StringBuffer(descr);\n\t\tdbuf.append(\"\\n\");\n\t\t\n\t\tint vbNum = 1;\n\t\tfor (MibValue vb : getTrapVars(trapValueSymbol)) {\n\t\t\tdbuf.append(\"\\n\\t\").append(vb.getName()).append(\"=%parm[#\").append(vbNum).append(\"]%\");\n\t\t\tvbNum++;\n\t\t}\n\t\t\n\t\tdescr = dbuf.toString();\n\t\treturn descr;\n\t}","id":100778,"modified_method":"public static String getTrapEventDescr(MibValueSymbol trapValueSymbol) {\n\t\tString description = ((SnmpType) trapValueSymbol.getType()).getDescription();\n        \n        // FIXME There a lot of detail here (like removing the last \\n) that can go away when we don't need to match mib2opennms exactly\n        \n        final String descrStartingNewlines = description.replaceAll(\"^\", \"\\n<p>\");\n        \n        final String descrEndingNewlines = descrStartingNewlines.replaceAll(\"$\", \"<\/p>\\n\");\n\n        //final String descrTabbed = descrEndingNewlines.replaceAll(\"(?m)^\", \"\\t\");\n        //final StringBuffer dbuf = new StringBuffer(descrTabbed);\n\n        final StringBuffer dbuf = new StringBuffer(descrEndingNewlines);\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        \n        //if (dbuf.lastIndexOf(\"\\n\") != -1) {\n        //    dbuf.insert(dbuf.lastIndexOf(\"\\n\") + 1, '\\t');\n        //}\n\n        //final StringBuffer dbuf = new StringBuffer(descrEndingNewlines);\n\t\t//dbuf.append(\"\\n\");\n\t\t\n        dbuf.append(\"<table>\");\n        dbuf.append(\"\\n\");\n\t\tint vbNum = 1;\n\t\tfor (MibValue vb : getTrapVars(trapValueSymbol)) {\n\t\t\tdbuf.append(\"\\t<tr><td><b>\\n\\n\\t\").append(vb.getName());\n            dbuf.append(\"<\/b><\/td><td>\\n\\t%parm[#\").append(vbNum).append(\"]%;<\/td><td><p>\");\n\n            SnmpObjectType snmpObjectType = ((SnmpObjectType) ((ObjectIdentifierValue) vb).getSymbol().getType());\n            if (snmpObjectType.getSyntax().getClass().equals(IntegerType.class)) {\n                IntegerType integerType = (IntegerType) snmpObjectType.getSyntax();\n                \n                if (integerType.getAllSymbols().length > 0) {\n                    SortedMap<Integer, String> map = new TreeMap<Integer, String>();\n                    for (MibValueSymbol sym : integerType.getAllSymbols()) {\n                        map.put(new Integer(sym.getValue().toString()), sym.getName());\n                    }\n\n                    dbuf.append(\"\\n\");\n                    for (Entry<Integer, String> entry : map.entrySet()) {\n                        dbuf.append(\"\\t\\t\").append(entry.getValue()).append(\"(\").append(entry.getKey()).append(\")\\n\");\n                    }\n                    dbuf.append(\"\\t\");\n                }\n            }\n            \n            dbuf.append(\"<\/p><\/td><\/tr>\\n\");\n\t\t\tvbNum++;\n\t\t}\n\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        dbuf.append(\"<\/table>\\n\\t\");\n\t\t\n\t\treturn dbuf.toString();\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapEnterprise(MibValueSymbol trapValueSymbol) {\n\t\tString enterpriseOid = \".1\";\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tenterpriseOid = trapOid;\n\t\t\tMatcher m = Pattern.compile(\"(.*)\\\\.\\\\d+$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\tenterpriseOid = m.group(1);\n\t\t\t}\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType)trapValueSymbol.getType();\n\t\t\tenterpriseOid = v1trap.getEnterprise().toString();\n\t\t}\n\t\treturn enterpriseOid;\n\t}","id":100779,"modified_method":"public static String getTrapEnterprise(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = \".\" + trapValueSymbol.getValue().toString();\n            // FIXME This isn't right, I think, but it matches mib2opennms functionality... it should chop up just the last number, not the last *two*\n\t\t\tMatcher m = Pattern.compile(\"(.*)\\\\.\\\\d+\\\\.\\\\d+$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\treturn m.group(1);\n\t\t\t} else {\n                throw new IllegalStateException(\"Could not pull last two numbers out of trap OID '\" + trapOid + \"' to get SNMPv1 'enterprise' value\");\n            }\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType) trapValueSymbol.getType();\n\t\t\treturn \".\" + v1trap.getEnterprise().toString();\n        } else {\n            throw new IllegalStateException(\"Trying to get a trap enterprise number from a non-trap, non-notification object\");\n        }\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main( String[] args ) {\n        MibLoader loader = new MibLoader();\n        Mib mib = null;\n        File file;\n        URL url;\n        \n        // Check command-line arguments\n        parseCli(args);\n        /*\n        if (args.length < 2) {\n        \tprintHelp(\"You must specify at least a MIB file or URL\");\n        \tSystem.exit(1);\n        }\n        if (args[pos].equals(\"--mib\")) {\n        \tmibloc = args[pos+1];\n        \tpos += 2;\n        }\n        if (args[pos].equals(\"--ueibase\")) {\n        \tueibase = args[pos+1];\n        \tpos += 2;\n        }\n        */\n\n        try {\n        \ttry {\n\t        \turl = new URL(mibloc);\n\t        } catch (MalformedURLException e) {\n\t        \turl = null;\n\t        }\n\t        if (url == null) {\n\t        \tfile = new File(mibloc);\n\t        \tloader.addDir(file.getParentFile());\n\t        \tmib = loader.load(file);\n\t        } else {\n\t        \tmib = loader.load(url);\n\t        }\n\t        if (mib.getLog().warningCount() > 0) {\n\t        \tmib.getLog().printTo(System.err);\n\t        }\n        } catch (FileNotFoundException e) {\n        \tprintError(mibloc, e);\n        \tSystem.exit(1);\n        } catch (IOException e) {\n        \tprintError(mibloc, e);\n        } catch (MibLoaderException e) {\n        \te.getLog().printTo(System.err);\n        \tSystem.exit(1);\n        }\n        printEvents(loader, ueibase);\n\t}","id":100780,"modified_method":"public static void main(String[] args) throws FileNotFoundException {\n        BasicConfigurator.configure();\n        Logger.getRootLogger().setLevel(Level.WARN);\n        \n        Mib2Events convertor = new Mib2Events();\n        \n        convertor.parseCli(args);\n        try {\n            convertor.convert();\n        } catch (FileNotFoundException e) {\n            printError(convertor.getMibLocation(), e);\n            System.exit(1);\n        } catch (IOException e) {\n            printError(convertor.getMibLocation(), e);\n        } catch (MibLoaderException e) {\n            e.getLog().printTo(System.err);\n            System.exit(1);\n        }\n\n        if (convertor.getMib().getLog().warningCount() > 0) {\n            convertor.getMib().getLog().printTo(System.err);\n        }\n\n        PrintStream out = System.out;\n        out.println(\"<!-- Start of auto generated data from MIB: \" + convertor.getMib().getName() + \" -->\");\n        convertor.printEvents(out);\n        out.println(\"<!-- End of auto generated data from MIB: \" + convertor.getMib().getName() + \" -->\");\n    }","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Event getTrapEvent(MibValueSymbol trapValueSymbol, String ueibase) {\n\t\tEvent evt = new Event();\n\t\tMask mask = new Mask();\n\t\tMaskelement me;\n\t\t\n\t\t// Set the event's UEI, event-label, logmsg, severity, and descr\n\t\tevt.setUei(getTrapEventUEI(trapValueSymbol, ueibase));\n\t\tevt.setEventLabel(getTrapEventLabel(trapValueSymbol));\n\t\tevt.setLogmsg(getTrapEventLogmsg(trapValueSymbol));\n\t\tevt.setSeverity(\"Indeterminate\");\n\t\tevt.setAlarmData(getTrapEventAlarmData());\n\t\tevt.setDescr(getTrapEventDescr(trapValueSymbol));\n\t\t\n\t\t// Construct the event mask object\n\t\t// The \"ID\" mask element (trap enterprise)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"id\");\n\t\tme.addMevalue(getTrapEnterprise(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"generic\" mask element (hard-wired to enterprise-specific(6))\n\t\tme = new Maskelement();\n\t\tme.setMename(\"generic\");\n\t\tme.addMevalue(\"6\");\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"specific\" mask element (trap specific-type)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"specific\");\n\t\tme.addMevalue(getTrapSpecificType(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\tevt.setMask(mask);\n\t\t\n\t\treturn evt;\n\t}","id":100781,"modified_method":"public static Event getTrapEvent(MibValueSymbol trapValueSymbol, String ueibase) {\n\t\tEvent evt = new Event();\n\t\tMask mask = new Mask();\n\t\tMaskelement me;\n\t\t\n\t\t// Set the event's UEI, event-label, logmsg, severity, and descr\n\t\tevt.setUei(getTrapEventUEI(trapValueSymbol, ueibase));\n\t\tevt.setEventLabel(getTrapEventLabel(trapValueSymbol));\n\t\tevt.setLogmsg(getTrapEventLogmsg(trapValueSymbol));\n\t\tevt.setSeverity(\"Indeterminate\");\n\t\tevt.setDescr(getTrapEventDescr(trapValueSymbol));\n\n        // FIXME Disabled for now so we match mib2opennms functionality\n        //evt.setAlarmData(getTrapEventAlarmData());\n\n\t\t// Construct the event mask object\n\t\t// The \"ID\" mask element (trap enterprise)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"id\");\n\t\tme.addMevalue(getTrapEnterprise(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"generic\" mask element (hard-wired to enterprise-specific(6))\n\t\tme = new Maskelement();\n\t\tme.setMename(\"generic\");\n\t\tme.addMevalue(\"6\");\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"specific\" mask element (trap specific-type)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"specific\");\n\t\tme.addMevalue(getTrapSpecificType(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\tevt.setMask(mask);\n\t\t\n\t\treturn evt;\n\t}","commit_id":"e560f8ec546aaa48d731543e7a03aa244b93619e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapEventDescr(MibValueSymbol trapValueSymbol) {\n\t\tString descr;\n\t\tMatcher m = Pattern.compile(\"^\", Pattern.MULTILINE).matcher(((SnmpType)trapValueSymbol.getType()).getDescription());\n\t\tdescr = m.replaceAll(\"\\t\");\n\t\tm = Pattern.compile(\"^\").matcher(descr);\n\t\tdescr = m.replaceAll(\"\\n\");\n\t\tm = Pattern.compile(\"$\").matcher(descr);\n\t\tdescr = m.replaceAll(\"\\n\");\n\t\tStringBuffer dbuf = new StringBuffer(descr);\n\t\tdbuf.append(\"\\n\");\n\t\t\n\t\tint vbNum = 1;\n\t\tfor (MibValue vb : getTrapVars(trapValueSymbol)) {\n\t\t\tdbuf.append(\"\\n\\t\").append(vb.getName()).append(\"=%parm[#\").append(vbNum).append(\"]%\");\n\t\t\tvbNum++;\n\t\t}\n\t\t\n\t\tdescr = dbuf.toString();\n\t\treturn descr;\n\t}","id":100782,"modified_method":"public static String getTrapEventDescr(MibValueSymbol trapValueSymbol) {\n\t\tString description = ((SnmpType) trapValueSymbol.getType()).getDescription();\n        \n        // FIXME There a lot of detail here (like removing the last \\n) that can go away when we don't need to match mib2opennms exactly\n        \n        final String descrStartingNewlines = description.replaceAll(\"^\", \"\\n<p>\");\n        \n        final String descrEndingNewlines = descrStartingNewlines.replaceAll(\"$\", \"<\/p>\\n\");\n\n        //final String descrTabbed = descrEndingNewlines.replaceAll(\"(?m)^\", \"\\t\");\n        //final StringBuffer dbuf = new StringBuffer(descrTabbed);\n\n        final StringBuffer dbuf = new StringBuffer(descrEndingNewlines);\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        \n        //if (dbuf.lastIndexOf(\"\\n\") != -1) {\n        //    dbuf.insert(dbuf.lastIndexOf(\"\\n\") + 1, '\\t');\n        //}\n\n        //final StringBuffer dbuf = new StringBuffer(descrEndingNewlines);\n\t\t//dbuf.append(\"\\n\");\n\t\t\n        dbuf.append(\"<table>\");\n        dbuf.append(\"\\n\");\n\t\tint vbNum = 1;\n\t\tfor (MibValue vb : getTrapVars(trapValueSymbol)) {\n\t\t\tdbuf.append(\"\\t<tr><td><b>\\n\\n\\t\").append(vb.getName());\n            dbuf.append(\"<\/b><\/td><td>\\n\\t%parm[#\").append(vbNum).append(\"]%;<\/td><td><p>\");\n\n            SnmpObjectType snmpObjectType = ((SnmpObjectType) ((ObjectIdentifierValue) vb).getSymbol().getType());\n            if (snmpObjectType.getSyntax().getClass().equals(IntegerType.class)) {\n                IntegerType integerType = (IntegerType) snmpObjectType.getSyntax();\n                \n                if (integerType.getAllSymbols().length > 0) {\n                    SortedMap<Integer, String> map = new TreeMap<Integer, String>();\n                    for (MibValueSymbol sym : integerType.getAllSymbols()) {\n                        map.put(new Integer(sym.getValue().toString()), sym.getName());\n                    }\n\n                    dbuf.append(\"\\n\");\n                    for (Entry<Integer, String> entry : map.entrySet()) {\n                        dbuf.append(\"\\t\\t\").append(entry.getValue()).append(\"(\").append(entry.getKey()).append(\")\\n\");\n                    }\n                    dbuf.append(\"\\t\");\n                }\n            }\n            \n            dbuf.append(\"<\/p><\/td><\/tr>\\n\");\n\t\t\tvbNum++;\n\t\t}\n\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        dbuf.append(\"<\/table>\\n\\t\");\n\t\t\n\t\treturn dbuf.toString();\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapSpecificType(MibValueSymbol trapValueSymbol) {\n\t\tString specificType = \"0\";\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tMatcher m = Pattern.compile(\".*\\\\.(\\\\d+)$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\tspecificType = m.group(1);\n\t\t\t}\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tspecificType = trapValueSymbol.getValue().toString();\n\t\t}\n\t\treturn specificType;\n\t}","id":100783,"modified_method":"public static String getTrapSpecificType(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tMatcher m = Pattern.compile(\".*\\\\.(\\\\d+)$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\treturn m.group(1);\n\t\t\t} else {\n                throw new IllegalStateException(\"Could not pull last number out of trap OID '\" + trapOid + \"' to get SNMPv1 'specific' value\");\n            }\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\treturn trapValueSymbol.getValue().toString();\n        } else {\n            throw new IllegalStateException(\"Trying to get a trap enterprise number from a non-trap, non-notification object\");\n        }\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main( String[] args ) {\n        MibLoader loader = new MibLoader();\n        Mib mib = null;\n        File file;\n        URL url;\n        \n        // Check command-line arguments\n        parseCli(args);\n        /*\n        if (args.length < 2) {\n        \tprintHelp(\"You must specify at least a MIB file or URL\");\n        \tSystem.exit(1);\n        }\n        if (args[pos].equals(\"--mib\")) {\n        \tmibloc = args[pos+1];\n        \tpos += 2;\n        }\n        if (args[pos].equals(\"--ueibase\")) {\n        \tueibase = args[pos+1];\n        \tpos += 2;\n        }\n        */\n\n        try {\n        \ttry {\n\t        \turl = new URL(mibloc);\n\t        } catch (MalformedURLException e) {\n\t        \turl = null;\n\t        }\n\t        if (url == null) {\n\t        \tfile = new File(mibloc);\n\t        \tloader.addDir(file.getParentFile());\n\t        \tmib = loader.load(file);\n\t        } else {\n\t        \tmib = loader.load(url);\n\t        }\n\t        if (mib.getLog().warningCount() > 0) {\n\t        \tmib.getLog().printTo(System.err);\n\t        }\n        } catch (FileNotFoundException e) {\n        \tprintError(mibloc, e);\n        \tSystem.exit(1);\n        } catch (IOException e) {\n        \tprintError(mibloc, e);\n        } catch (MibLoaderException e) {\n        \te.getLog().printTo(System.err);\n        \tSystem.exit(1);\n        }\n        printEvents(loader, ueibase);\n\t}","id":100784,"modified_method":"public static void main(String[] args) throws FileNotFoundException {\n        BasicConfigurator.configure();\n        Logger.getRootLogger().setLevel(Level.WARN);\n        \n        Mib2Events convertor = new Mib2Events();\n        \n        convertor.parseCli(args);\n        try {\n            convertor.convert();\n        } catch (FileNotFoundException e) {\n            printError(convertor.getMibLocation(), e);\n            System.exit(1);\n        } catch (IOException e) {\n            printError(convertor.getMibLocation(), e);\n        } catch (MibLoaderException e) {\n            e.getLog().printTo(System.err);\n            System.exit(1);\n        }\n\n        if (convertor.getMib().getLog().warningCount() > 0) {\n            convertor.getMib().getLog().printTo(System.err);\n        }\n\n        PrintStream out = System.out;\n        out.println(\"<!-- Start of auto generated data from MIB: \" + convertor.getMib().getName() + \" -->\");\n        convertor.printEvents(out);\n        out.println(\"<!-- End of auto generated data from MIB: \" + convertor.getMib().getName() + \" -->\");\n    }","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void parseCli(String[] argv) {\n\t\tOptions opts = new Options();\n\t\topts.addOption(\"m\", \"mib\", true, \"Pathname or URL of MIB file to scan for traps\");\n\t\topts.addOption(\"b\", \"ueibase\", true, \"Base UEI for resulting events\");\n\t\t\n\t\tCommandLineParser parser = new GnuParser();\n\t\ttry {\n\t\t\tCommandLine cmd = parser.parse(opts, argv);\n\t\t\tif (cmd.hasOption('m')) {\n\t\t\t\tmibloc = cmd.getOptionValue('m');\n\t\t\t} else {\n\t\t\t\tprintHelp(\"You must specify a MIB file pathname or URL\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (cmd.hasOption(\"b\")) {\n\t\t\t\tueibase = cmd.getOptionValue('b');\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\tprintHelp(\"Failed to parse command line options\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","id":100785,"modified_method":"public void parseCli(String[] argv) {\n\t\tOptions opts = new Options();\n\t\topts.addOption(\"m\", \"mib\", true, \"Pathname or URL of MIB file to scan for traps\");\n\t\topts.addOption(\"b\", \"ueibase\", true, \"Base UEI for resulting events\");\n\t\t\n\t\tCommandLineParser parser = new GnuParser();\n\t\ttry {\n\t\t\tCommandLine cmd = parser.parse(opts, argv);\n\t\t\tif (cmd.hasOption('m')) {\n\t\t\t\tm_mibLocation = cmd.getOptionValue('m');\n\t\t\t} else {\n\t\t\t\tprintHelp(\"You must specify a MIB file pathname or URL\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (cmd.hasOption(\"b\")) {\n\t\t\t\tm_ueiBase = cmd.getOptionValue('b');\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\tprintHelp(\"Failed to parse command line options\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void printEvents(Mib mib, String ueibase) {\n\t\tCollection syms = mib.getAllSymbols();\n\t\tIterator<MibSymbol> symIter = syms.iterator();\n\t\tMibSymbol sym = null;\n\t\tMibValueSymbol vsym = null;\n\t\tIterator<MibValue> trapVarbinds;\n\t\tEvents events = new Events();\n\t\tStringWriter writer = new StringWriter();\n\t\t\n\t\twhile (symIter.hasNext()) {\n\t\t\tsym = symIter.next();\n\t\t\tif (! (sym instanceof MibValueSymbol))\n\t\t\t\tcontinue;\n\t\t\tvsym = (MibValueSymbol)sym;\n\t\t\tif ((! (vsym.getType() instanceof SnmpNotificationType)) && (! (vsym.getType() instanceof SnmpTrapType)))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tevents.addEvent(getTrapEvent(vsym, ueibase));\n\t\t}\n\t\t\n\t\tif (events.getEventCount() < 1) {\n\t\t\tSystem.err.println(\"No trap definitions found in this MIB (\" + mib.getName() + \"), exiting\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tevents.marshal(writer);\n\t\t\tprettyPrintXML(new ByteArrayInputStream(writer.toString().getBytes()), (OutputStream)System.out);\n\t\t} catch (MarshalException e) {\n\t\t\tSystem.err.println(\"Fatal: caught MarshalException:\" + e);\n\t\t} catch (ValidationException e) {\n\t\t\tSystem.err.println(\"Fatal: caught ValidationException:\" + e);\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Fatal: Unhandled exception: \" + e);\n\t\t}\n\t}","id":100786,"modified_method":"private static Events convertMibToEvents(Mib mib, String ueibase) {\n        Events events = new Events();\n\t\tfor (MibSymbol sym : getAllSymbolsFromMib(mib)) {\n\t\t\tif (!(sym instanceof MibValueSymbol)) {\n\t\t\t\tcontinue;\n            }\n            \n            MibValueSymbol vsym = (MibValueSymbol) sym;\n\t\t\tif ((!(vsym.getType() instanceof SnmpNotificationType)) && (!(vsym.getType() instanceof SnmpTrapType))) {\n                continue;\n            }\n\t\t\t\n\t\t\tevents.addEvent(getTrapEvent(vsym, ueibase));\n\t\t}\n        return events;\n    }","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static String getTrapEnterprise(MibValueSymbol trapValueSymbol) {\n\t\tString enterpriseOid = \".1\";\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = trapValueSymbol.getValue().toString();\n\t\t\tenterpriseOid = trapOid;\n\t\t\tMatcher m = Pattern.compile(\"(.*)\\\\.\\\\d+$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\tenterpriseOid = m.group(1);\n\t\t\t}\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType)trapValueSymbol.getType();\n\t\t\tenterpriseOid = v1trap.getEnterprise().toString();\n\t\t}\n\t\treturn enterpriseOid;\n\t}","id":100787,"modified_method":"public static String getTrapEnterprise(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tString trapOid = \".\" + trapValueSymbol.getValue().toString();\n            // FIXME This isn't right, I think, but it matches mib2opennms functionality... it should chop up just the last number, not the last *two*\n\t\t\tMatcher m = Pattern.compile(\"(.*)\\\\.\\\\d+\\\\.\\\\d+$\").matcher(trapOid);\n\t\t\tif (m.matches()) {\n\t\t\t\treturn m.group(1);\n\t\t\t} else {\n                throw new IllegalStateException(\"Could not pull last two numbers out of trap OID '\" + trapOid + \"' to get SNMPv1 'enterprise' value\");\n            }\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType) trapValueSymbol.getType();\n\t\t\treturn \".\" + v1trap.getEnterprise().toString();\n        } else {\n            throw new IllegalStateException(\"Trying to get a trap enterprise number from a non-trap, non-notification object\");\n        }\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Logmsg getTrapEventLogmsg(MibValueSymbol trapValueSymbol) {\n\t\tLogmsg msg = new Logmsg();\n\t\tmsg.setDest(\"logndisplay\");\n\t\tmsg.setContent(\"Log messages coming soon\");\n\t\treturn msg;\n\t}","id":100788,"modified_method":"public static Logmsg getTrapEventLogmsg(MibValueSymbol trapValueSymbol) {\n\t\tLogmsg msg = new Logmsg();\n\t\tmsg.setDest(\"logndisplay\");\n\n        // FIXME There some detail here (like removing the last \\n) that can go away when we don't need to match mib2opennms exactly\n        final StringBuffer dbuf = new StringBuffer();\n        dbuf.append(\"<p>\");\n        dbuf.append(\"\\n\");\n        dbuf.append(\"\\t\").append(trapValueSymbol.getName()).append(\" trap received\\n\");\n        int vbNum = 1;\n        for (MibValue vb : getTrapVars(trapValueSymbol)) {\n            dbuf.append(\"\\t\").append(vb.getName()).append(\"=%parm[#\").append(vbNum).append(\"]%\\n\");\n            vbNum++;\n        }\n\n        if (dbuf.charAt(dbuf.length() - 1) == '\\n') {\n            dbuf.deleteCharAt(dbuf.length() - 1); // delete the \\n at the end\n        }\n        dbuf.append(\"<\/p>\\n\\t\");\n\n        msg.setContent(dbuf.toString());\n        \n\t\treturn msg;\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Event getTrapEvent(MibValueSymbol trapValueSymbol, String ueibase) {\n\t\tEvent evt = new Event();\n\t\tMask mask = new Mask();\n\t\tMaskelement me;\n\t\t\n\t\t// Set the event's UEI, event-label, logmsg, severity, and descr\n\t\tevt.setUei(getTrapEventUEI(trapValueSymbol, ueibase));\n\t\tevt.setEventLabel(getTrapEventLabel(trapValueSymbol));\n\t\tevt.setLogmsg(getTrapEventLogmsg(trapValueSymbol));\n\t\tevt.setSeverity(\"Indeterminate\");\n\t\tevt.setAlarmData(getTrapEventAlarmData());\n\t\tevt.setDescr(getTrapEventDescr(trapValueSymbol));\n\t\t\n\t\t// Construct the event mask object\n\t\t// The \"ID\" mask element (trap enterprise)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"id\");\n\t\tme.addMevalue(getTrapEnterprise(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"generic\" mask element (hard-wired to enterprise-specific(6))\n\t\tme = new Maskelement();\n\t\tme.setMename(\"generic\");\n\t\tme.addMevalue(\"6\");\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"specific\" mask element (trap specific-type)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"specific\");\n\t\tme.addMevalue(getTrapSpecificType(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\tevt.setMask(mask);\n\t\t\n\t\treturn evt;\n\t}","id":100789,"modified_method":"public static Event getTrapEvent(MibValueSymbol trapValueSymbol, String ueibase) {\n\t\tEvent evt = new Event();\n\t\tMask mask = new Mask();\n\t\tMaskelement me;\n\t\t\n\t\t// Set the event's UEI, event-label, logmsg, severity, and descr\n\t\tevt.setUei(getTrapEventUEI(trapValueSymbol, ueibase));\n\t\tevt.setEventLabel(getTrapEventLabel(trapValueSymbol));\n\t\tevt.setLogmsg(getTrapEventLogmsg(trapValueSymbol));\n\t\tevt.setSeverity(\"Indeterminate\");\n\t\tevt.setDescr(getTrapEventDescr(trapValueSymbol));\n\n        // FIXME Disabled for now so we match mib2opennms functionality\n        //evt.setAlarmData(getTrapEventAlarmData());\n\n\t\t// Construct the event mask object\n\t\t// The \"ID\" mask element (trap enterprise)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"id\");\n\t\tme.addMevalue(getTrapEnterprise(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"generic\" mask element (hard-wired to enterprise-specific(6))\n\t\tme = new Maskelement();\n\t\tme.setMename(\"generic\");\n\t\tme.addMevalue(\"6\");\n\t\tmask.addMaskelement(me);\n\t\t\n\t\t// The \"specific\" mask element (trap specific-type)\n\t\tme = new Maskelement();\n\t\tme.setMename(\"specific\");\n\t\tme.addMevalue(getTrapSpecificType(trapValueSymbol));\n\t\tmask.addMaskelement(me);\n\t\t\n\t\tevt.setMask(mask);\n\t\t\n\t\treturn evt;\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static ArrayList<MibValue> getTrapVars(MibValueSymbol trapValueSymbol) {\n\t\tArrayList<MibValue> vals = new ArrayList<MibValue>();\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tSnmpNotificationType v2notif = (SnmpNotificationType)trapValueSymbol.getType();\n\t\t\tvals = v2notif.getObjects();\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType)trapValueSymbol.getType();\n\t\t\tvals = v1trap.getVariables();\n\t\t}\n\t\treturn vals;\n\t}","id":100790,"modified_method":"public static List<MibValue> getTrapVars(MibValueSymbol trapValueSymbol) {\n\t\tif (trapValueSymbol.getType() instanceof SnmpNotificationType) {\n\t\t\tSnmpNotificationType v2notif = (SnmpNotificationType) trapValueSymbol.getType();\n\t\t\treturn getV2NotificationObjects(v2notif);\n\t\t} else if (trapValueSymbol.getType() instanceof SnmpTrapType) {\n\t\t\tSnmpTrapType v1trap = (SnmpTrapType) trapValueSymbol.getType();\n\t\t\treturn getV1TrapVariables(v1trap);\n\t\t} else {\n\t\t    throw new IllegalStateException(\"trap type is not an SNMP v1 Trap or v2 Notification\");      \n        }\n\t}","commit_id":"6be0b8a3ca40b041e0bdda29ca9506572f946d66","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override protected String doInBackground(String... params) {\n\n            int nsize = rs.points.size();\n            if (nsize > 0) {\n                boolean survivor[] = new boolean[nsize];\n                cullRamerDouglasPeucer(survivor, 0, nsize - 1);\n                if (!isCancelled()) {\n                    culled = new ArrayList();\n                    survivor[0] = true;\n                    for (int i = 0; i < nsize; i++) {\n                        if (survivor[i]) {\n                            culled.add(rs.points.get(i));\n                        }\n                    }\n                }\n            }\n            return null;\n        }","id":100791,"modified_method":"@Override protected String doInBackground(String... params) {\n\n            int nsize = rs.points.size();\n            if (nsize > 0) {\n                boolean survivor[] = new boolean[nsize];\n                cullRamerDouglasPeucer(survivor, 0, nsize - 1);\n                if (!isCancelled()) {\n                    culled = new ArrayList<>();\n                    survivor[0] = true;\n                    for (int i = 0; i < nsize; i++) {\n                        if (survivor[i]) {\n                            culled.add(rs.points.get(i));\n                        }\n                    }\n                }\n            }\n            return null;\n        }","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void drawSelectedFilesSegments(Canvas canvas, RotatedTileBox tileBox,\n\t\t\tList<SelectedGpxFile> selectedGPXFiles, DrawSettings settings) {\n\t\tfor (SelectedGpxFile g : selectedGPXFiles) {\n\t\t\tList<TrkSegment> segments = g.getPointsToDisplay();\n\t\t\tfor (TrkSegment ts : segments) {\n\n\t\t\t\tif (ts.renders.isEmpty()\t\t\t\t// only do once (CODE HERE NEEDS TO BE UI INSTEAD)\n\t\t\t\t\t\t&& !ts.points.isEmpty()) {\t\t// hmmm. 0-point tracks happen, but.... how?\n\n\t\t\t\t\tif (g.isShowCurrentTrack()) {\n\t\t\t\t\t\tts.renders.add(new Renderable.CurrentTrack(ts.points));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tts.renders.add(new Renderable.Altitude(ts.points, 10));\n\t\t\t\t\t\tts.renders.add(new Renderable.StandardTrack(ts.points, 17.2));\n\t\t\t\t\t\tts.renders.add(new Renderable.Conveyor(ts.points, view, 5, 250));\n\t\t\t\t\t\tts.renders.add(new Renderable.Arrows(ts.points, view, 10, 250));\n\t\t\t\t\t\tts.renders.add(new Renderable.DistanceMarker(ts.points, 1000));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Speed(ts.points, 50));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//ts.recalculateRenderScales(view.getZoom());\n\t\t\t\tupdatePaints(ts.getColor(cachedColor), g.isRoutePoints(), g.isShowCurrentTrack(), settings, tileBox);\n\t\t\t\tts.drawRenderers(view.getZoom(), paint, canvas, tileBox);\n\t\t\t}\n\t\t}\n\t}","id":100792,"modified_method":"private void drawSelectedFilesSegments(Canvas canvas, RotatedTileBox tileBox,\n\t\t\tList<SelectedGpxFile> selectedGPXFiles, DrawSettings settings) {\n\n\t\tfor (SelectedGpxFile g : selectedGPXFiles) {\n\t\t\tList<TrkSegment> segments = g.getPointsToDisplay();\n\t\t\tfor (TrkSegment ts : segments) {\n\n\t\t\t\tif (ts.renders.isEmpty()\t\t\t\t// only do once (CODE HERE NEEDS TO BE UI INSTEAD)\n\t\t\t\t\t\t&& !ts.points.isEmpty()) {\t\t// hmmm. 0-point tracks happen, but.... how?\n\n\t\t\t\t\tif (g.isShowCurrentTrack()) {\n\t\t\t\t\t\tts.renders.add(new Renderable.CurrentTrack(ts.points));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Altitude(ts.points, 10));\n\t\t\t\t\t\tts.renders.add(new Renderable.StandardTrack(ts.points, 17.2));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Conveyor(ts.points, view, 5, 250));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Arrows(ts.points, view, 10, 250));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.DistanceMarker(ts.points, 1000));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Speed(ts.points, 50));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//ts.recalculateRenderScales(view.getZoom());\n\t\t\t\tupdatePaints(ts.getColor(cachedColor), g.isRoutePoints(), g.isShowCurrentTrack(), settings, tileBox);\n\t\t\t\tts.drawRenderers(view.getZoom(), paint, canvas, tileBox);\n\t\t\t}\n\t\t}\n\t}","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override public void drawSingleSegment(double zoom, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (zoom > 13 && !culled.isEmpty()) {\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n                int cachedC = conveyor;\n                drawArrows(cachedC, zoom, canvas, tileBox, false);\n                drawArrows(cachedC, zoom, canvas, tileBox, true);\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","id":100793,"modified_method":"@Override public void drawSingleSegment(double zoom, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (zoom > 13 && !culled.isEmpty()) {\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n                int cachedC = conveyor;\n                drawArrows(cachedC, canvas, tileBox, false);\n                drawArrows(cachedC, canvas, tileBox, true);\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override public void drawSingleSegment(double zoom, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (culled.size() > 1) {\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                float bandWidth = paint.getStrokeWidth() * 3;\n                paint.setStrokeWidth(bandWidth);\n\n                float clipL = -bandWidth / 2;\n                float clipB = -bandWidth / 2;\n                float clipT = canvas.getHeight() + bandWidth / 2;\n                float clipR = canvas.getWidth() + bandWidth / 2;\n\n                WptPt pt = culled.get(0);\n                float lastx = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                float lasty = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                int size = culled.size();\n                for (int i = 1; i < size; i++) {\n                    pt = culled.get(i);\n\n                    float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                    float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                    if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                            && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n                        paint.setColor(pt.colourARGB);\n                        canvas.drawLine(lastx, lasty, x, y, paint);\n                    }\n                    lastx = x;\n                    lasty = y;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","id":100794,"modified_method":"@Override public void drawSingleSegment(double zoom, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (culled.size() > 1) {\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                float bandWidth = paint.getStrokeWidth() * 3;\n                paint.setStrokeWidth(bandWidth);\n\n                QuadRect tileBounds = tileBox.getLatLonBounds();\n\n                WptPt lastPt = culled.get(0);\n                float lastx = tileBox.getPixXFromLatLon(lastPt.lat, lastPt.lon);\n                float lasty = tileBox.getPixYFromLatLon(lastPt.lat, lastPt.lon);\n                boolean last = false;\n\n                int size = culled.size();\n                for (int i = 1; i < size; i++) {\n                    WptPt pt = culled.get(i);\n\n                    if (Math.min(pt.lon, lastPt.lon) < tileBounds.right && Math.max(pt.lon, lastPt.lon) > tileBounds.left\n                            && Math.min(pt.lat, lastPt.lat) < tileBounds.top && Math.max(pt.lat, lastPt.lat) > tileBounds.bottom) {\n\n                        if (!last) {\n                            lastx = tileBox.getPixXFromLatLon(lastPt.lat, lastPt.lon);\n                            lasty = tileBox.getPixYFromLatLon(lastPt.lat, lastPt.lon);\n                            last = true;\n                        }\n\n                        float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                        float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                        paint.setColor(pt.colourARGB);\n                        canvas.drawLine(lastx, lasty, x, y, paint);\n\n                        lastx = x;\n                        lasty = y;\n\n                    } else {\n                        last = false;\n                    }\n                    lastPt = pt;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void drawArrows(int cachedC, double zoom, Canvas canvas, RotatedTileBox tileBox, boolean internal) {\n\n            float scale = internal ? 0.6f : 1.0f;\n\n            float stroke = paint.getStrokeWidth();\n            float arrowSize = 75f;\n            boolean broken = true;\n            int intp = cachedC;                                // the segment cycler\n\n            float clipL = -arrowSize;\n            float clipB = -arrowSize;\n            float clipT = canvas.getHeight() + arrowSize;\n            float clipR = canvas.getWidth() + arrowSize;\n\n            float lastx = 0;\n            float lasty = Float.NEGATIVE_INFINITY;\n\n            int size = culled.size();\n            for (int i = 0; i < size; i++) {\n                WptPt pt = culled.get(i);\n\n                intp--;                                         // increment to go the other way!\n\n                float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                boolean nextBroken = true;\n\n                if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                        && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n\n                    float segment = intp & 15;\n                    if (segment < 5) {\n\n                        paint.setColor(internal ? Algorithms.getRainbowColor(((double) (i)) / ((double) size)) : Color.BLACK);\n\n                        float segpiece = 5 - segment;\n                        if (segpiece > 3)\n                            segpiece = 3;\n\n                        if (!broken) {\n                            float sw = stroke * segpiece * scale;\n                            paint.setStrokeWidth(sw);\n                            canvas.drawLine(lastx, lasty, x, y, paint);\n                        }\n                        nextBroken = false;\n\n                        // arrowhead...\n                        if (segment == 0 && lasty != -Float.NEGATIVE_INFINITY) {\n                            float sw = stroke * segpiece * scale;\n                            paint.setStrokeWidth(sw);\n                            double angle = Math.atan2(lasty - y, lastx - x);\n\n                            float extendx = x - (float) Math.cos(angle) * arrowSize / 2;\n                            float extendy = y - (float) Math.sin(angle) * arrowSize / 2;\n                            float newx1 = extendx + (float) Math.cos(angle - 0.4) * arrowSize;\n                            float newy1 = extendy + (float) Math.sin(angle - 0.4) * arrowSize;\n                            float newx2 = extendx + (float) Math.cos(angle + 0.4) * arrowSize;\n                            float newy2 = extendy + (float) Math.sin(angle + 0.4) * arrowSize;\n\n                            canvas.drawLine(extendx, extendy, x, y, paint);\n                            canvas.drawLine(newx1, newy1, extendx, extendy, paint);\n                            canvas.drawLine(newx2, newy2, extendx, extendy, paint);\n                        }\n                    }\n                }\n                broken = nextBroken;\n                lastx = x;\n                lasty = y;\n            }\n            paint.setStrokeWidth(stroke);\n        }","id":100795,"modified_method":"private void drawArrows(int cachedC, Canvas canvas, RotatedTileBox tileBox, boolean internal) {\n\n            float scale = internal ? 0.6f : 1.0f;\n\n            float stroke = paint.getStrokeWidth();\n            float arrowSize = 75f;\n            boolean broken = true;\n            int intp = cachedC;                                // the segment cycler\n\n            float clipL = -arrowSize;\n            float clipB = -arrowSize;\n            float clipT = canvas.getHeight() + arrowSize;\n            float clipR = canvas.getWidth() + arrowSize;\n\n            float lastx = 0;\n            float lasty = Float.NEGATIVE_INFINITY;\n\n            int size = culled.size();\n            for (int i = 0; i < size; i++, intp--) {\n                WptPt pt = culled.get(i);\n\n                float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                boolean nextBroken = true;\n                if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                        && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n\n                    float segment = intp & 15;\n                    if (segment < 5) {\n\n                        paint.setColor(internal ? Algorithms.getRainbowColor(((double) (i)) / ((double) size)) : Color.BLACK);\n\n                        float segpiece = 5 - segment;\n                        if (segpiece > 3)\n                            segpiece = 3;\n\n                        if (!broken) {\n                            float sw = stroke * segpiece * scale;\n                            paint.setStrokeWidth(sw);\n                            canvas.drawLine(lastx, lasty, x, y, paint);\n                        }\n                        nextBroken = false;\n\n                        // arrowhead...\n                        if (segment == 0 && lasty != Float.NEGATIVE_INFINITY) {\n                            float sw = stroke * segpiece * scale;\n                            paint.setStrokeWidth(sw);\n                            double angle = Math.atan2(lasty - y, lastx - x);\n\n                            float extendx = x - (float) Math.cos(angle) * arrowSize / 2;\n                            float extendy = y - (float) Math.sin(angle) * arrowSize / 2;\n                            float newx1 = extendx + (float) Math.cos(angle - 0.4) * arrowSize;\n                            float newy1 = extendy + (float) Math.sin(angle - 0.4) * arrowSize;\n                            float newx2 = extendx + (float) Math.cos(angle + 0.4) * arrowSize;\n                            float newy2 = extendy + (float) Math.sin(angle + 0.4) * arrowSize;\n\n                            canvas.drawLine(extendx, extendy, x, y, paint);\n                            canvas.drawLine(newx1, newy1, extendx, extendy, paint);\n                            canvas.drawLine(newx2, newy2, extendx, extendy, paint);\n                        }\n                    }\n                }\n                broken = nextBroken;\n                lastx = x;\n                lasty = y;\n            }\n            paint.setStrokeWidth(stroke);\n        }","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override public void drawSingleSegment(double zoom, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (culled.size() > 1) {\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                paint.setColor(getComplementaryColor(p.getColor()));\n\n                float strokeRadius = paint.getStrokeWidth() / 2;\n\n                float clipL = -strokeRadius;\n                float clipB = -strokeRadius;\n                float clipT = canvas.getHeight() + strokeRadius;\n                float clipR = canvas.getWidth() + strokeRadius;\n\n                WptPt pt = culled.get(0);\n                float lastx = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                float lasty = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                int intp = conveyor;\n\n                int size = culled.size();\n                for (int i = 1; i < size; i++, intp--) {\n                    pt = culled.get(i);\n\n                    float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                    float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                    if ((intp & 7) < 3) {\n                        if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                                && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n                            canvas.drawLine(lastx, lasty, x, y, paint);\n                        }\n                    }\n                    lastx = x;\n                    lasty = y;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","id":100796,"modified_method":"@Override public void drawSingleSegment(double zoom, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (culled.size() > 1) {\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                paint.setColor(getComplementaryColor(p.getColor()));\n\n                QuadRect tileBounds = tileBox.getLatLonBounds();\n\n                WptPt lastPt = culled.get(0);\n                float lastx = tileBox.getPixXFromLatLon(lastPt.lat, lastPt.lon);\n                float lasty = tileBox.getPixYFromLatLon(lastPt.lat, lastPt.lon);\n                boolean last = false;\n\n                int intp = conveyor;\n\n                int size = culled.size();\n                for (int i = 1; i < size; i++, intp--) {\n                    WptPt pt = culled.get(i);\n\n                    if ((intp & 7) < 3\n                            && Math.min(pt.lon, lastPt.lon) < tileBounds.right && Math.max(pt.lon, lastPt.lon) > tileBounds.left\n                            && Math.min(pt.lat, lastPt.lat) < tileBounds.top && Math.max(pt.lat, lastPt.lat) > tileBounds.bottom) {\n\n                        if (!last) {\n                            lastx = tileBox.getPixXFromLatLon(lastPt.lat, lastPt.lon);\n                            lasty = tileBox.getPixYFromLatLon(lastPt.lat, lastPt.lon);\n                            last = true;\n                        }\n\n                        float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                        float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                        canvas.drawLine(lastx, lasty, x, y, paint);\n\n                        lastx = x;\n                        lasty = y;\n\n                    } else {\n                        last = false;\n                    }\n                    lastPt = pt;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"protected void draw(List<WptPt> pts, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (pts.size() > 1) {\n\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                float stroke = paint.getStrokeWidth() / 2;\n\n                float clipL = -stroke;\n                float clipB = -stroke;\n                float clipT = canvas.getHeight() + stroke;\n                float clipR = canvas.getWidth() + stroke;\n\n                WptPt pt = pts.get(0);\n                float lastx = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                float lasty = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                int size = pts.size();\n                for (int i = 1; i < size; i++) {\n                    pt = pts.get(i);\n\n                    float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                    float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                    if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                            && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n                        canvas.drawLine(lastx, lasty, x, y, paint);\n                    }\n                    lastx = x;\n                    lasty = y;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","id":100797,"modified_method":"protected void draw(List<WptPt> pts, Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (pts.size() > 1) {\n\n                updateLocalPaint(p);\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n                QuadRect tileBounds = tileBox.getLatLonBounds();\n\n                WptPt lastPt = pts.get(0);\n                float lastx = tileBox.getPixXFromLatLon(lastPt.lat, lastPt.lon);\n                float lasty = tileBox.getPixYFromLatLon(lastPt.lat, lastPt.lon);\n                boolean last = false;\n\n                int size = pts.size();\n                for (int i = 1; i < size; i++) {\n                    WptPt pt = pts.get(i);\n\n                    if (Math.min(pt.lon, lastPt.lon) < tileBounds.right && Math.max(pt.lon, lastPt.lon) > tileBounds.left\n                            && Math.min(pt.lat, lastPt.lat) < tileBounds.top && Math.max(pt.lat, lastPt.lat) > tileBounds.bottom) {\n\n                        if (!last) {\n                            lastx = tileBox.getPixXFromLatLon(lastPt.lat, lastPt.lon);\n                            lasty = tileBox.getPixYFromLatLon(lastPt.lat, lastPt.lon);\n                            last = true;\n                        }\n\n                        float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                        float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                        canvas.drawLine(lastx, lasty, x, y, paint);\n\n                        lastx = x;\n                        lasty = y;\n\n                    } else {\n                        last = false;\n                    }\n                    lastPt = pt;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","commit_id":"ceddb50e60efcc6686d1e4d39a4328c8ae8c21af","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public Thread newThread(Runnable r) {\n        Thread retval=newThread(group, r, baseName);\n        retval.setDaemon(createDaemons);\n        renameThread(retval);\n        return retval;\n    }","id":100798,"modified_method":"public Thread newThread(Runnable r) {\n        return newThread(group, r, baseName);\n    }","commit_id":"caceb52edd96356f2ce8e45d3db7e38c55d465b9","url":"https://github.com/belaban/JGroups"},{"original_method":"public void setThreadNamingPattern(String pattern) {\n        includeClusterName=pattern.contains(\"c\");\n        includeLocalAddress=pattern.contains(\"l\");\n    }","id":100799,"modified_method":"public void setPattern(String pattern) {\n        includeClusterName=pattern.contains(\"c\");\n        includeLocalAddress=pattern.contains(\"l\");\n    }","commit_id":"caceb52edd96356f2ce8e45d3db7e38c55d465b9","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r, String name) {\n        Thread retval=newThread(group, r, name);\n        retval.setDaemon(createDaemons);\n        renameThread(retval);\n        return retval;\n    }","id":100800,"modified_method":"public Thread newThread(Runnable r, String name) {\n        return newThread(group, r, name);\n    }","commit_id":"caceb52edd96356f2ce8e45d3db7e38c55d465b9","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r) {\n        Thread retval=newThread(group, r, baseName);\n        retval.setDaemon(createDaemons);\n        renameThread(retval);\n        return retval;\n    }","id":100801,"modified_method":"public Thread newThread(Runnable r) {\n        return newThread(group, r, baseName);\n    }","commit_id":"6166cc43a5e698ceefd2601dc5e9bada1e6a3656","url":"https://github.com/belaban/JGroups"},{"original_method":"public void setThreadNamingPattern(String pattern) {\n        includeClusterName=pattern.contains(\"c\");\n        includeLocalAddress=pattern.contains(\"l\");\n    }","id":100802,"modified_method":"public void setPattern(String pattern) {\n        includeClusterName=pattern.contains(\"c\");\n        includeLocalAddress=pattern.contains(\"l\");\n    }","commit_id":"6166cc43a5e698ceefd2601dc5e9bada1e6a3656","url":"https://github.com/belaban/JGroups"},{"original_method":"public Thread newThread(Runnable r, String name) {\n        Thread retval=newThread(group, r, name);\n        retval.setDaemon(createDaemons);\n        renameThread(retval);\n        return retval;\n    }","id":100803,"modified_method":"public Thread newThread(Runnable r, String name) {\n        return newThread(group, r, name);\n    }","commit_id":"6166cc43a5e698ceefd2601dc5e9bada1e6a3656","url":"https://github.com/belaban/JGroups"},{"original_method":"/** Common implementation for start in parent nodes; just invokes start on all children of the entity */\n\tpublic static void start(EntityLocal e, Collection<? extends Location> locations) {\n        log.info(\"Starting entity \"+e+\" at \"+locations);\n        Iterable<Entity> startables = Iterables.filter(e.getOwnedChildren(), Predicates.instanceOf(Startable.class));\n\n        if (!Iterables.isEmpty(startables)) {\n\t        Entities.invokeEffectorList(e, startables, Startable.START, MutableMap.of(\"locations\", locations)).getUnchecked();\n        }\n\t}","id":100804,"modified_method":"/** Common implementation for start in parent nodes; just invokes start on all children of the entity */\n\tpublic static void start(EntityLocal e, Collection<? extends Location> locations) {\n        log.info(\"Starting entity \"+e+\" at \"+locations);\n        Iterable<Entity> startables = filterStartableManagedEntities(e.getOwnedChildren());\n\n        if (!Iterables.isEmpty(startables)) {\n\t        Entities.invokeEffectorList(e, startables, Startable.START, MutableMap.of(\"locations\", locations)).getUnchecked();\n        }\n\t}","commit_id":"39fec93b8ccebdadd3deb7f38037aac43eb78cb6","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"/** Common implementation for stop in parent nodes; just invokes stop on all children of the entity */\n\tpublic static void stop(EntityLocal e) {\n        log.debug(\"Stopping entity \"+e);\n        Iterable<Entity> startables = Iterables.filter(e.getOwnedChildren(), Predicates.instanceOf(Startable.class));\n\t\t\n\t\tif (!Iterables.isEmpty(startables)) {\n\t\t\tEntities.invokeEffectorList(e, startables, Startable.STOP).getUnchecked();\n\t\t}\n        if (log.isDebugEnabled()) log.debug(\"Stopped entity \"+e);\n\t}","id":100805,"modified_method":"/** Common implementation for stop in parent nodes; just invokes stop on all children of the entity */\n\tpublic static void stop(EntityLocal e) {\n        log.debug(\"Stopping entity \"+e);\n        Iterable<Entity> startables = filterStartableManagedEntities(e.getOwnedChildren());\n\t\t\n\t\tif (!Iterables.isEmpty(startables)) {\n\t\t\tEntities.invokeEffectorList(e, startables, Startable.STOP).getUnchecked();\n\t\t}\n        if (log.isDebugEnabled()) log.debug(\"Stopped entity \"+e);\n\t}","commit_id":"39fec93b8ccebdadd3deb7f38037aac43eb78cb6","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"/** Common implementation for restart in parent nodes; just invokes stop on all children of the entity */\n    public static void restart(EntityLocal e) {\n        log.debug(\"Restarting entity \"+e);\n        Iterable<Entity> startables = Iterables.filter(e.getOwnedChildren(), Predicates.instanceOf(Startable.class));\n        \n        if (!Iterables.isEmpty(startables)) {\n            Entities.invokeEffectorList(e, startables, Startable.RESTART).getUnchecked();\n        }\n        if (log.isDebugEnabled()) log.debug(\"Restarted entity \"+e);\n    }","id":100806,"modified_method":"/** Common implementation for restart in parent nodes; just invokes stop on all children of the entity */\n    public static void restart(EntityLocal e) {\n        log.debug(\"Restarting entity \"+e);\n        Iterable<Entity> startables = filterStartableManagedEntities(e.getOwnedChildren());\n        \n        if (!Iterables.isEmpty(startables)) {\n            Entities.invokeEffectorList(e, startables, Startable.RESTART).getUnchecked();\n        }\n        if (log.isDebugEnabled()) log.debug(\"Restarted entity \"+e);\n    }","commit_id":"39fec93b8ccebdadd3deb7f38037aac43eb78cb6","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"protected void init() {\n    List<MBeanAttributeInfo> attributes = new ArrayList<MBeanAttributeInfo>();\n    MBeanInfo parentInfo = super.getMBeanInfo();\n    List<String> parentAttributes = new ArrayList<String>();\n    for (MBeanAttributeInfo attr : parentInfo.getAttributes()) {\n      attributes.add(attr);\n      parentAttributes.add(attr.getName());\n    }\n    \n    this.registryLength = this.registry.getMetricsList().size();\n    \n    for (MetricsBase metric : this.registry.getMetricsList()) {\n      if (metric.getName() == null || parentAttributes.contains(metric.getName()))\n        continue;\n      \n      // add on custom HBase metric types\n      if (metric instanceof MetricsRate) {\n        attributes.add( new MBeanAttributeInfo(metric.getName(), \n            \"java.lang.Float\", metric.getDescription(), true, false, false) );\n        extendedAttributes.put(metric.getName(), metric);\n      }  else {\n        LOG.error(\"unknown metrics instance: \"+metric.getClass().getName());\n      }      \n    }\n\n    this.extendedInfo = new MBeanInfo( this.getClass().getName(), \n        this.description, attributes.toArray( new MBeanAttributeInfo[0] ), \n        parentInfo.getConstructors(), parentInfo.getOperations(), \n        parentInfo.getNotifications() );\n  }","id":100807,"modified_method":"protected void init() {\n    List<MBeanAttributeInfo> attributes = new ArrayList<MBeanAttributeInfo>();\n    MBeanInfo parentInfo = super.getMBeanInfo();\n    List<String> parentAttributes = new ArrayList<String>();\n    for (MBeanAttributeInfo attr : parentInfo.getAttributes()) {\n      attributes.add(attr);\n      parentAttributes.add(attr.getName());\n    }\n    \n    this.registryLength = this.registry.getMetricsList().size();\n    \n    for (MetricsBase metric : this.registry.getMetricsList()) {\n      if (metric.getName() == null || parentAttributes.contains(metric.getName()))\n        continue;\n      \n      // add on custom HBase metric types\n      if (metric instanceof org.apache.hadoop.hbase.metrics.MetricsRate) {\n        attributes.add( new MBeanAttributeInfo(metric.getName(), \n            \"java.lang.Float\", metric.getDescription(), true, false, false) );\n        extendedAttributes.put(metric.getName(), metric);\n      }\n      // else, its probably a hadoop metric already registered. Skip it.\n    }\n\n    this.extendedInfo = new MBeanInfo( this.getClass().getName(), \n        this.description, attributes.toArray( new MBeanAttributeInfo[0] ), \n        parentInfo.getConstructors(), parentInfo.getOperations(), \n        parentInfo.getNotifications() );\n  }","commit_id":"f9b14e8510b81f747dc3211641ffb6af3c95a56f","url":"https://github.com/apache/hbase"},{"original_method":"protected MetricsMBeanBase( MetricsRegistry mr, String description ) {\n    super(mr, description);\n    this.registry = mr;\n    this.description = description;\n    this.init();\n  }","id":100808,"modified_method":"protected MetricsMBeanBase( MetricsRegistry mr, String description ) {\n    super(copyMinusHBaseMetrics(mr), description);\n    this.registry = mr;\n    this.description = description;\n    this.init();\n  }","commit_id":"f9b14e8510b81f747dc3211641ffb6af3c95a56f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Since this object is a registered updater, this method will be called\n   * periodically, e.g. every 5 seconds.\n   * @param unused \n   */\n  public void doUpdates(MetricsContext unused) {\n    synchronized (this) {\n      this.stores.pushMetric(this.metricsRecord);\n      this.storefiles.pushMetric(this.metricsRecord);\n      this.storefileIndexSizeMB.pushMetric(this.metricsRecord);\n      this.memstoreSizeMB.pushMetric(this.metricsRecord);\n      this.regions.pushMetric(this.metricsRecord);\n      this.requests.pushMetric(this.metricsRecord);\n      this.compactionQueueSize.pushMetric(this.metricsRecord);\n      this.blockCacheSize.pushMetric(this.metricsRecord);\n      this.blockCacheFree.pushMetric(this.metricsRecord);\n      this.blockCacheCount.pushMetric(this.metricsRecord);\n      this.blockCacheHitRatio.pushMetric(this.metricsRecord);\n\n      // mix in HFile metrics\n      this.fsReadLatency.inc((int)HFile.getReadOps(), HFile.getReadTime());\n      this.fsWriteLatency.inc((int)HFile.getWriteOps(), HFile.getWriteTime());\n      // mix in HLog metrics\n      this.fsWriteLatency.inc((int)HLog.getWriteOps(), HLog.getWriteTime());\n      this.fsSyncLatency.inc((int)HLog.getSyncOps(), HLog.getSyncTime());\n      // push the result\n      this.fsReadLatency.pushMetric(this.metricsRecord);\n      this.fsWriteLatency.pushMetric(this.metricsRecord);\n      this.fsSyncLatency.pushMetric(this.metricsRecord);\n    }\n    this.metricsRecord.update();\n    this.lastUpdate = System.currentTimeMillis();\n  }","id":100809,"modified_method":"/**\n   * Since this object is a registered updater, this method will be called\n   * periodically, e.g. every 5 seconds.\n   * @param unused \n   */\n  public void doUpdates(MetricsContext unused) {\n    synchronized (this) {\n      this.stores.pushMetric(this.metricsRecord);\n      this.storefiles.pushMetric(this.metricsRecord);\n      this.storefileIndexSizeMB.pushMetric(this.metricsRecord);\n      this.memstoreSizeMB.pushMetric(this.metricsRecord);\n      this.regions.pushMetric(this.metricsRecord);\n      this.requests.pushMetric(this.metricsRecord);\n      this.compactionQueueSize.pushMetric(this.metricsRecord);\n      this.blockCacheSize.pushMetric(this.metricsRecord);\n      this.blockCacheFree.pushMetric(this.metricsRecord);\n      this.blockCacheCount.pushMetric(this.metricsRecord);\n      this.blockCacheHitRatio.pushMetric(this.metricsRecord);\n      \n      // Mix in HFile and HLog metrics\n      // Be careful. Here is code for MTVR from up in hadoop:\n      // public synchronized void inc(final int numOps, final long time) {\n      //   currentData.numOperations += numOps;\n      //   currentData.time += time;\n      //   long timePerOps = time/numOps;\n      //    minMax.update(timePerOps);\n      // }\n      // Means you can't pass a numOps of zero or get a ArithmeticException / by zero.\n      int ops = (int)HFile.getReadOps();\n      if (ops != 0) this.fsReadLatency.inc(ops, HFile.getReadTime());\n      ops = (int)HFile.getWriteOps();\n      if (ops != 0) this.fsWriteLatency.inc(ops, HFile.getWriteTime());\n      // mix in HLog metrics\n      ops = (int)HLog.getWriteOps();\n      if (ops != 0) this.fsWriteLatency.inc(ops, HLog.getWriteTime());\n      ops = (int)HLog.getSyncOps();\n      if (ops != 0) this.fsSyncLatency.inc(ops, HLog.getSyncTime());\n\n      // push the result\n      this.fsReadLatency.pushMetric(this.metricsRecord);\n      this.fsWriteLatency.pushMetric(this.metricsRecord);\n      this.fsSyncLatency.pushMetric(this.metricsRecord);\n    }\n    this.metricsRecord.update();\n    this.lastUpdate = System.currentTimeMillis();\n  }","commit_id":"f9b14e8510b81f747dc3211641ffb6af3c95a56f","url":"https://github.com/apache/hbase"},{"original_method":"@Override public void visitReferenceElement(PsiJavaCodeReferenceElement reference) {\n      super.visitReferenceElement(reference);\n      final PsiElement resolved = reference.resolve();\n\n      if (resolved instanceof PsiCompiledElement && resolved instanceof PsiMember) {\n        final LanguageLevel languageLevel = LanguageLevelUtil.getEffectiveLanguageLevel(ModuleUtil.findModuleForPsiElement(reference.getElement()));\n        if (isForbiddenApiUsage((PsiMember)resolved, languageLevel)) {\n          PsiClass psiClass = null;\n          final PsiElement qualifier = reference.getQualifier();\n          if (qualifier != null) {\n            if (qualifier instanceof PsiExpression) {\n              psiClass = PsiUtil.resolveClassInType(((PsiExpression)qualifier).getType());\n            }\n          }\n          else {\n            psiClass = PsiTreeUtil.getParentOfType(reference, PsiClass.class);\n          }\n          if (psiClass != null) {\n            if (isIgnored(psiClass)) return;\n            for (PsiClass superClass : psiClass.getSupers()) {\n              if (isIgnored(superClass)) return;\n            }\n          }\n          registerError(reference, languageLevel);\n        }\n      }\n    }","id":100810,"modified_method":"@Override public void visitReferenceElement(PsiJavaCodeReferenceElement reference) {\n      super.visitReferenceElement(reference);\n      final PsiElement resolved = reference.resolve();\n\n      if (resolved instanceof PsiCompiledElement && resolved instanceof PsiMember) {\n        final Module module = ModuleUtil.findModuleForPsiElement(reference.getElement());\n        if (module != null) {\n          final LanguageLevel languageLevel = LanguageLevelUtil.getEffectiveLanguageLevel(module);\n          if (isForbiddenApiUsage((PsiMember)resolved, languageLevel)) {\n            PsiClass psiClass = null;\n            final PsiElement qualifier = reference.getQualifier();\n            if (qualifier != null) {\n              if (qualifier instanceof PsiExpression) {\n                psiClass = PsiUtil.resolveClassInType(((PsiExpression)qualifier).getType());\n              }\n            }\n            else {\n              psiClass = PsiTreeUtil.getParentOfType(reference, PsiClass.class);\n            }\n            if (psiClass != null) {\n              if (isIgnored(psiClass)) return;\n              for (PsiClass superClass : psiClass.getSupers()) {\n                if (isIgnored(superClass)) return;\n              }\n            }\n            registerError(reference, languageLevel);\n          }\n        }\n      }\n    }","commit_id":"7c974f6ae8c74a7941a2e153715412f7fdd9afa9","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public void visitNewExpression(final PsiNewExpression expression) {\n      super.visitNewExpression(expression);\n      final PsiMethod constructor = expression.resolveConstructor();\n      final LanguageLevel languageLevel = LanguageLevelUtil.getEffectiveLanguageLevel(ModuleUtil.findModuleForPsiElement(expression));\n      if (constructor instanceof PsiCompiledElement) {\n        if (isForbiddenApiUsage(constructor, languageLevel)) {\n          registerError(expression.getClassReference(), languageLevel);\n        }\n      }\n    }","id":100811,"modified_method":"@Override public void visitNewExpression(final PsiNewExpression expression) {\n      super.visitNewExpression(expression);\n      final PsiMethod constructor = expression.resolveConstructor();\n      final Module module = ModuleUtil.findModuleForPsiElement(expression);\n      if (module != null) {\n        final LanguageLevel languageLevel = LanguageLevelUtil.getEffectiveLanguageLevel(module);\n        if (constructor instanceof PsiCompiledElement) {\n          if (isForbiddenApiUsage(constructor, languageLevel)) {\n            registerError(expression.getClassReference(), languageLevel);\n          }\n        }\n      }\n    }","commit_id":"7c974f6ae8c74a7941a2e153715412f7fdd9afa9","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public void visitClass(PsiClass aClass) {\n      // Don't go into classes (anonymous, locals).\n      if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        final LanguageLevel effectiveLanguageLevel = getEffectiveLanguageLevel(ModuleUtilCore.findModuleForPsiElement(aClass));\n        if (!effectiveLanguageLevel.isAtLeast(LanguageLevel.JDK_1_8) && \n            JavaVersionService.getInstance().getJavaSdkVersion(aClass).isAtLeast(JavaSdkVersion.JDK_1_8)) {\n          final List<PsiMethod> methods = new ArrayList<PsiMethod>();\n          for (HierarchicalMethodSignature methodSignature : aClass.getVisibleSignatures()) {\n            final PsiMethod method = methodSignature.getMethod();\n            if (ourDefaultMethods.contains(getSignature(method))) {\n              methods.add(method);\n            }\n          }\n\n          if (!methods.isEmpty()) {\n            PsiElement element2Highlight = aClass.getNameIdentifier();\n            if (element2Highlight == null) {\n              element2Highlight = aClass;\n            }\n            myHolder.registerProblem(element2Highlight,\n                                     methods.size() == 1 ? InspectionsBundle.message(\"inspection.1.8.problem.single.descriptor\", methods.get(0).getName(), getJdkName(effectiveLanguageLevel)) \n                                                         : InspectionsBundle.message(\"inspection.1.8.problem.descriptor\", methods.size(), getJdkName(effectiveLanguageLevel)),\n                                     QuickFixFactory.getInstance().createImplementMethodsFix(aClass));\n          }\n        }\n      }\n    }","id":100812,"modified_method":"@Override public void visitClass(PsiClass aClass) {\n      // Don't go into classes (anonymous, locals).\n      if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        final Module module = ModuleUtilCore.findModuleForPsiElement(aClass);\n        final LanguageLevel effectiveLanguageLevel = module != null ? getEffectiveLanguageLevel(module) : null;\n        if (effectiveLanguageLevel != null &&\n            !effectiveLanguageLevel.isAtLeast(LanguageLevel.JDK_1_8) &&\n            JavaVersionService.getInstance().getJavaSdkVersion(aClass).isAtLeast(JavaSdkVersion.JDK_1_8)) {\n          final List<PsiMethod> methods = new ArrayList<PsiMethod>();\n          for (HierarchicalMethodSignature methodSignature : aClass.getVisibleSignatures()) {\n            final PsiMethod method = methodSignature.getMethod();\n            if (ourDefaultMethods.contains(getSignature(method))) {\n              methods.add(method);\n            }\n          }\n\n          if (!methods.isEmpty()) {\n            PsiElement element2Highlight = aClass.getNameIdentifier();\n            if (element2Highlight == null) {\n              element2Highlight = aClass;\n            }\n            myHolder.registerProblem(element2Highlight,\n                                     methods.size() == 1 ? InspectionsBundle.message(\"inspection.1.8.problem.single.descriptor\", methods.get(0).getName(), getJdkName(effectiveLanguageLevel)) \n                                                         : InspectionsBundle.message(\"inspection.1.8.problem.descriptor\", methods.size(), getJdkName(effectiveLanguageLevel)),\n                                     QuickFixFactory.getInstance().createImplementMethodsFix(aClass));\n          }\n        }\n      }\n    }","commit_id":"a481b867c7e46060090beb9d5768579c5d9faeaa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createStaticLookupMethod(ClassNode classNode, ClassNode implementationNode, String apiInstanceProperty, String lookupMethodName) {\n        // if autowiring is required we add a default method that throws an exception\n        // the method should be override via meta-programming in the Grails environment\n        MethodNode lookupMethod = classNode.getMethod(lookupMethodName, ZERO_PARAMETERS);\n        if(lookupMethod == null) {\n            BlockStatement methodBody = new BlockStatement();\n            lookupMethod = populateAutowiredApiLookupMethod(implementationNode, apiInstanceProperty, lookupMethodName, methodBody);\n            classNode.addMethod(lookupMethod);\n        }\n    }","id":100813,"modified_method":"private void createStaticLookupMethod(ClassNode classNode, ClassNode implementationNode, String apiInstanceProperty, String lookupMethodName) {\n        // if autowiring is required we add a default method that throws an exception\n        // the method should be override via meta-programming in the Grails environment\n        MethodNode lookupMethod = classNode.getMethod(lookupMethodName, ZERO_PARAMETERS);\n        if(lookupMethod == null) {\n            BlockStatement methodBody = new BlockStatement();\n            lookupMethod = populateAutowiredApiLookupMethod(classNode, implementationNode, apiInstanceProperty, lookupMethodName, methodBody);\n            classNode.addMethod(lookupMethod);\n        }\n    }","commit_id":"2e47244a670ce53240528fdb39853e012ba5a4db","url":"https://github.com/grails/grails-core"},{"original_method":"/**\n     * Binds the given source object to the given target object performing type conversion if necessary\n     *\n     * @param domain The GrailsDomainClass instance\n     * @param object The object to bind to\n     * @param source The source object\n     * @param include The list of properties to include\n     * @param exclude The list of properties to exclud\n     * @param filter The prefix to filter by\n     *\n     * @see org.codehaus.groovy.grails.commons.GrailsDomainClass\n     *\n     * @return A BindingResult or null if it wasn't successful\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static BindingResult bindObjectToDomainInstance(GrailsDomainClass domain, Object object,\n            Object source, List include, List exclude, String filter) {\n        BindingResult bindingResult = null;\n        if (source instanceof GrailsParameterMap) {\n            GrailsParameterMap parameterMap = (GrailsParameterMap)source;\n            HttpServletRequest request = parameterMap.getRequest();\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            dataBinder.bind(parameterMap, filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof HttpServletRequest) {\n            HttpServletRequest request = (HttpServletRequest)source;\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            performBindFromRequest(dataBinder, request,filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof Map) {\n            Map propertyMap = (Map)source;\n            propertyMap = convertPotentialGStrings(propertyMap);\n            GrailsDataBinder binder = createDataBinder(object, include, exclude, null);\n            performBindFromPropertyValues(binder, new MutablePropertyValues(propertyMap),filter);\n            bindingResult = binder.getBindingResult();\n        }\n        else {\n            GrailsWebRequest webRequest = (GrailsWebRequest) RequestContextHolder.getRequestAttributes();\n            if (webRequest != null) {\n                GrailsDataBinder binder = createDataBinder(object, include, exclude, webRequest.getCurrentRequest());\n                HttpServletRequest request = webRequest.getCurrentRequest();\n                performBindFromRequest(binder, request,filter);\n            }\n        }\n\n        if (domain != null && bindingResult != null) {\n            BindingResult newResult = new ValidationErrors(object);\n            for (Object error : bindingResult.getAllErrors()) {\n                if (error instanceof FieldError) {\n                    FieldError fieldError = (FieldError)error;\n                    final boolean isBlank = BLANK.equals(fieldError.getRejectedValue());\n                    if (!isBlank) {\n                        newResult.addError(fieldError);\n                    }\n                    else if (domain.hasPersistentProperty(fieldError.getField())) {\n                        final boolean isOptional = domain.getPropertyByName(fieldError.getField()).isOptional();\n                        if (!isOptional) {\n                            newResult.addError(fieldError);\n                        }\n                    }\n                    else {\n                        newResult.addError(fieldError);\n                    }\n                }\n                else {\n                    newResult.addError((ObjectError)error);\n                }\n            }\n            bindingResult = newResult;\n        }\n        MetaClass mc = GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());\n        if (mc.hasProperty(object, \"errors\")!=null && bindingResult!=null) {\n            mc.setProperty(object,\"errors\", bindingResult);\n        }\n        return bindingResult;\n    }","id":100814,"modified_method":"/**\n     * Binds the given source object to the given target object performing type conversion if necessary\n     *\n     * @param domain The GrailsDomainClass instance\n     * @param object The object to bind to\n     * @param source The source object\n     * @param include The list of properties to include\n     * @param exclude The list of properties to exclud\n     * @param filter The prefix to filter by\n     *\n     * @see org.codehaus.groovy.grails.commons.GrailsDomainClass\n     *\n     * @return A BindingResult or null if it wasn't successful\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static BindingResult bindObjectToDomainInstance(GrailsDomainClass domain, Object object,\n            Object source, List include, List exclude, String filter) {\n        BindingResult bindingResult = null;\n        if (source instanceof GrailsParameterMap) {\n            GrailsParameterMap parameterMap = (GrailsParameterMap)source;\n            HttpServletRequest request = parameterMap.getRequest();\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            dataBinder.bind(parameterMap, filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof HttpServletRequest) {\n            HttpServletRequest request = (HttpServletRequest)source;\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            performBindFromRequest(dataBinder, request,filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof Map) {\n            Map propertyMap = (Map)source;\n            propertyMap = convertPotentialGStrings(propertyMap);\n            GrailsDataBinder binder = createDataBinder(object, include, exclude, null);\n            performBindFromPropertyValues(binder, new MutablePropertyValues(propertyMap),filter);\n            bindingResult = binder.getBindingResult();\n        }\n        else {\n            GrailsWebRequest webRequest = (GrailsWebRequest) RequestContextHolder.getRequestAttributes();\n            if (webRequest != null) {\n                GrailsDataBinder binder = createDataBinder(object, include, exclude, webRequest.getCurrentRequest());\n                HttpServletRequest request = webRequest.getCurrentRequest();\n                performBindFromRequest(binder, request,filter);\n            }\n        }\n\n        if (domain != null && bindingResult != null) {\n            BindingResult newResult = new ValidationErrors(object);\n            for (Object error : bindingResult.getAllErrors()) {\n                if (error instanceof FieldError) {\n                    FieldError fieldError = (FieldError)error;\n                    final boolean isBlank = BLANK.equals(fieldError.getRejectedValue());\n                    if (!isBlank) {\n                        newResult.addError(fieldError);\n                    }\n                    else if (domain.hasPersistentProperty(fieldError.getField())) {\n                        final boolean isOptional = domain.getPropertyByName(fieldError.getField()).isOptional();\n                        if (!isOptional) {\n                            newResult.addError(fieldError);\n                        }\n                    }\n                    else {\n                        newResult.addError(fieldError);\n                    }\n                }\n                else {\n                    newResult.addError((ObjectError)error);\n                }\n            }\n            bindingResult = newResult;\n        }\n        MetaClass mc = GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());\n        if (mc.hasProperty(object, \"errors\")!=null && bindingResult!=null) {\n            ValidationErrors errors = new ValidationErrors(object);\n            errors.addAllErrors(errors);\n            mc.setProperty(object,\"errors\", errors);\n        }\n        return bindingResult;\n    }","commit_id":"2e47244a670ce53240528fdb39853e012ba5a4db","url":"https://github.com/grails/grails-core"},{"original_method":"@Override\n    protected MethodNode populateAutowiredApiLookupMethod(ClassNode implementationNode, String apiInstanceProperty, String methodName, BlockStatement methodBody) {\n        return new MethodNode(methodName, PUBLIC_STATIC_MODIFIER, implementationNode,ZERO_PARAMETERS,null,methodBody);\n    }","id":100815,"modified_method":"@Override\n    protected MethodNode populateAutowiredApiLookupMethod(ClassNode classNode, ClassNode implementationNode, String apiInstanceProperty, String methodName, BlockStatement methodBody) {\n        return new MethodNode(methodName, PUBLIC_STATIC_MODIFIER, implementationNode,ZERO_PARAMETERS,null,methodBody);\n    }","commit_id":"2e47244a670ce53240528fdb39853e012ba5a4db","url":"https://github.com/grails/grails-core"},{"original_method":"public static void expandPropertyMacro(ITemplateGenerator generator, PropertyMacro propertyMacro, SNode inputNode, SNode templateNode, SNode outputNode) {\n    String attributeRole = propertyMacro.getRole_();\n    String propertyName = AttributesRolesUtil.getPropertyNameFromPropertyAttributeRole(attributeRole);\n    String propertyValue;\n\n    // try new query\n    PropertyMacro_GetPropertyValue function = propertyMacro.getPropertyValueFunction();\n    if (function != null) {\n      String templateValue = templateNode.getProperty(propertyName);\n\n      String methodName = TemplateFunctionMethodName.propertyMacro_GetPropertyValue(function.getNode());\n      try {\n        Object macroValue = QueryMethodGenerated.invoke(\n          methodName,\n          generator.getGeneratorSessionContext(),\n          new PropertyMacroContext(inputNode, templateValue, propertyMacro.getNode(), generator),\n          propertyMacro.getModel());\n        propertyValue = macroValue == null ? null : String.valueOf(macroValue);\n      } catch (Exception e) {\n        generator.showErrorMessage(inputNode, templateNode, BaseAdapter.fromAdapter(propertyMacro), \"couldn't evaluate property macro\");\n        LOG.error(e);\n        return;\n      }\n\n    } else {\n      // try old query\n      Object[] args = new Object[]{\n        inputNode,\n        templateNode,\n        null/*BaseAdapter.fromAdapter(propertyMacro.getProperty())*/,\n        generator};\n      propertyValue = (String) QueryMethod.invoke(\"propertyMacro_\" + propertyMacro.getAspectMethodName(), args, propertyMacro.getModel());\n    }\n\n    outputNode.setProperty(propertyName, propertyValue);\n  }","id":100816,"modified_method":"public static void expandPropertyMacro(ITemplateGenerator generator, PropertyMacro propertyMacro, SNode inputNode, SNode templateNode, SNode outputNode) throws GenerationFailueException {\n    String attributeRole = propertyMacro.getRole_();\n    String propertyName = AttributesRolesUtil.getPropertyNameFromPropertyAttributeRole(attributeRole);\n\n    PropertyMacro_GetPropertyValue function = propertyMacro.getPropertyValueFunction();\n    if (function == null) {\n      throw new GenerationFailueException(\"couldn't evaluate property macro\", inputNode, templateNode, BaseAdapter.fromAdapter(propertyMacro));\n    }\n\n    String templateValue = templateNode.getProperty(propertyName);\n    String methodName = TemplateFunctionMethodName.propertyMacro_GetPropertyValue(function.getNode());\n    try {\n      Object macroValue = QueryMethodGenerated.invoke(\n        methodName,\n        generator.getGeneratorSessionContext(),\n        new PropertyMacroContext(inputNode, templateValue, propertyMacro.getNode(), generator),\n        propertyMacro.getModel());\n      String propertyValue = macroValue == null ? null : String.valueOf(macroValue);\n      outputNode.setProperty(propertyName, propertyValue);\n    } catch (Throwable t) {\n      throw new GenerationFailueException(\"couldn't evaluate property macro\", inputNode, templateNode, BaseAdapter.fromAdapter(propertyMacro), t);\n    }\n  }","commit_id":"7fa151d376561ff0eba52ff4d2230d8c832637e4","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void createStaticLookupMethod(ClassNode classNode, ClassNode implementationNode, String apiInstanceProperty, String lookupMethodName) {\n        // if autowiring is required we add a default method that throws an exception\n        // the method should be override via meta-programming in the Grails environment\n        MethodNode lookupMethod = classNode.getMethod(lookupMethodName, ZERO_PARAMETERS);\n        if(lookupMethod == null) {\n            BlockStatement methodBody = new BlockStatement();\n            lookupMethod = populateAutowiredApiLookupMethod(implementationNode, apiInstanceProperty, lookupMethodName, methodBody);\n            classNode.addMethod(lookupMethod);\n        }\n    }","id":100817,"modified_method":"private void createStaticLookupMethod(ClassNode classNode, ClassNode implementationNode, String apiInstanceProperty, String lookupMethodName) {\n        // if autowiring is required we add a default method that throws an exception\n        // the method should be override via meta-programming in the Grails environment\n        MethodNode lookupMethod = classNode.getMethod(lookupMethodName, ZERO_PARAMETERS);\n        if(lookupMethod == null) {\n            BlockStatement methodBody = new BlockStatement();\n            lookupMethod = populateAutowiredApiLookupMethod(classNode, implementationNode, apiInstanceProperty, lookupMethodName, methodBody);\n            classNode.addMethod(lookupMethod);\n        }\n    }","commit_id":"58815ba566112aab835252aebaf7826aced68034","url":"https://github.com/grails/grails-core"},{"original_method":"/**\n     * Binds the given source object to the given target object performing type conversion if necessary\n     *\n     * @param domain The GrailsDomainClass instance\n     * @param object The object to bind to\n     * @param source The source object\n     * @param include The list of properties to include\n     * @param exclude The list of properties to exclud\n     * @param filter The prefix to filter by\n     *\n     * @see org.codehaus.groovy.grails.commons.GrailsDomainClass\n     *\n     * @return A BindingResult or null if it wasn't successful\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static BindingResult bindObjectToDomainInstance(GrailsDomainClass domain, Object object,\n            Object source, List include, List exclude, String filter) {\n        BindingResult bindingResult = null;\n        if (source instanceof GrailsParameterMap) {\n            GrailsParameterMap parameterMap = (GrailsParameterMap)source;\n            HttpServletRequest request = parameterMap.getRequest();\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            dataBinder.bind(parameterMap, filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof HttpServletRequest) {\n            HttpServletRequest request = (HttpServletRequest)source;\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            performBindFromRequest(dataBinder, request,filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof Map) {\n            Map propertyMap = (Map)source;\n            propertyMap = convertPotentialGStrings(propertyMap);\n            GrailsDataBinder binder = createDataBinder(object, include, exclude, null);\n            performBindFromPropertyValues(binder, new MutablePropertyValues(propertyMap),filter);\n            bindingResult = binder.getBindingResult();\n        }\n        else {\n            GrailsWebRequest webRequest = (GrailsWebRequest) RequestContextHolder.getRequestAttributes();\n            if (webRequest != null) {\n                GrailsDataBinder binder = createDataBinder(object, include, exclude, webRequest.getCurrentRequest());\n                HttpServletRequest request = webRequest.getCurrentRequest();\n                performBindFromRequest(binder, request,filter);\n            }\n        }\n\n        if (domain != null && bindingResult != null) {\n            BindingResult newResult = new ValidationErrors(object);\n            for (Object error : bindingResult.getAllErrors()) {\n                if (error instanceof FieldError) {\n                    FieldError fieldError = (FieldError)error;\n                    final boolean isBlank = BLANK.equals(fieldError.getRejectedValue());\n                    if (!isBlank) {\n                        newResult.addError(fieldError);\n                    }\n                    else if (domain.hasPersistentProperty(fieldError.getField())) {\n                        final boolean isOptional = domain.getPropertyByName(fieldError.getField()).isOptional();\n                        if (!isOptional) {\n                            newResult.addError(fieldError);\n                        }\n                    }\n                    else {\n                        newResult.addError(fieldError);\n                    }\n                }\n                else {\n                    newResult.addError((ObjectError)error);\n                }\n            }\n            bindingResult = newResult;\n        }\n        MetaClass mc = GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());\n        if (mc.hasProperty(object, \"errors\")!=null && bindingResult!=null) {\n            mc.setProperty(object,\"errors\", bindingResult);\n        }\n        return bindingResult;\n    }","id":100818,"modified_method":"/**\n     * Binds the given source object to the given target object performing type conversion if necessary\n     *\n     * @param domain The GrailsDomainClass instance\n     * @param object The object to bind to\n     * @param source The source object\n     * @param include The list of properties to include\n     * @param exclude The list of properties to exclud\n     * @param filter The prefix to filter by\n     *\n     * @see org.codehaus.groovy.grails.commons.GrailsDomainClass\n     *\n     * @return A BindingResult or null if it wasn't successful\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static BindingResult bindObjectToDomainInstance(GrailsDomainClass domain, Object object,\n            Object source, List include, List exclude, String filter) {\n        BindingResult bindingResult = null;\n        if (source instanceof GrailsParameterMap) {\n            GrailsParameterMap parameterMap = (GrailsParameterMap)source;\n            HttpServletRequest request = parameterMap.getRequest();\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            dataBinder.bind(parameterMap, filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof HttpServletRequest) {\n            HttpServletRequest request = (HttpServletRequest)source;\n            GrailsDataBinder dataBinder = createDataBinder(object, include, exclude, request);\n            performBindFromRequest(dataBinder, request,filter);\n            bindingResult = dataBinder.getBindingResult();\n        }\n        else if (source instanceof Map) {\n            Map propertyMap = (Map)source;\n            propertyMap = convertPotentialGStrings(propertyMap);\n            GrailsDataBinder binder = createDataBinder(object, include, exclude, null);\n            performBindFromPropertyValues(binder, new MutablePropertyValues(propertyMap),filter);\n            bindingResult = binder.getBindingResult();\n        }\n        else {\n            GrailsWebRequest webRequest = (GrailsWebRequest) RequestContextHolder.getRequestAttributes();\n            if (webRequest != null) {\n                GrailsDataBinder binder = createDataBinder(object, include, exclude, webRequest.getCurrentRequest());\n                HttpServletRequest request = webRequest.getCurrentRequest();\n                performBindFromRequest(binder, request,filter);\n            }\n        }\n\n        if (domain != null && bindingResult != null) {\n            BindingResult newResult = new ValidationErrors(object);\n            for (Object error : bindingResult.getAllErrors()) {\n                if (error instanceof FieldError) {\n                    FieldError fieldError = (FieldError)error;\n                    final boolean isBlank = BLANK.equals(fieldError.getRejectedValue());\n                    if (!isBlank) {\n                        newResult.addError(fieldError);\n                    }\n                    else if (domain.hasPersistentProperty(fieldError.getField())) {\n                        final boolean isOptional = domain.getPropertyByName(fieldError.getField()).isOptional();\n                        if (!isOptional) {\n                            newResult.addError(fieldError);\n                        }\n                    }\n                    else {\n                        newResult.addError(fieldError);\n                    }\n                }\n                else {\n                    newResult.addError((ObjectError)error);\n                }\n            }\n            bindingResult = newResult;\n        }\n        MetaClass mc = GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());\n        if (mc.hasProperty(object, \"errors\")!=null && bindingResult!=null) {\n            ValidationErrors errors = new ValidationErrors(object);\n            errors.addAllErrors(errors);\n            mc.setProperty(object,\"errors\", errors);\n        }\n        return bindingResult;\n    }","commit_id":"58815ba566112aab835252aebaf7826aced68034","url":"https://github.com/grails/grails-core"},{"original_method":"@Override\n    protected MethodNode populateAutowiredApiLookupMethod(ClassNode implementationNode, String apiInstanceProperty, String methodName, BlockStatement methodBody) {\n        return new MethodNode(methodName, PUBLIC_STATIC_MODIFIER, implementationNode,ZERO_PARAMETERS,null,methodBody);\n    }","id":100819,"modified_method":"@Override\n    protected MethodNode populateAutowiredApiLookupMethod(ClassNode classNode, ClassNode implementationNode, String apiInstanceProperty, String methodName, BlockStatement methodBody) {\n        return new MethodNode(methodName, PUBLIC_STATIC_MODIFIER, implementationNode,ZERO_PARAMETERS,null,methodBody);\n    }","commit_id":"58815ba566112aab835252aebaf7826aced68034","url":"https://github.com/grails/grails-core"},{"original_method":"public void visitDocumentChanged(final XmlDocumentChanged xmlDocumentChanged) {\n    getAntParent(xmlDocumentChanged.getDocument()).clearCaches();\n  }","id":100820,"modified_method":"public void visitDocumentChanged(final XmlDocumentChanged xmlDocumentChanged) {\n    final AntElement element = getAntParent(xmlDocumentChanged.getDocument());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlTagChildAdd(final XmlTagChildAdd xmlTagChildAdd) {\n    getAntParent(xmlTagChildAdd.getTag()).clearCaches();\n  }","id":100821,"modified_method":"public void visitXmlTagChildAdd(final XmlTagChildAdd xmlTagChildAdd) {\n    final AntElement element = getAntParent(xmlTagChildAdd.getTag());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlAttributeSet(final XmlAttributeSet xmlAttributeSet) {\n    getAntParent(xmlAttributeSet.getTag()).clearCaches();\n  }","id":100822,"modified_method":"public void visitXmlAttributeSet(final XmlAttributeSet xmlAttributeSet) {\n    final AntElement element = getAntParent(xmlAttributeSet.getTag());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlTagChildChanged(final XmlTagChildChanged xmlTagChildChanged) {\n    getAntParent(xmlTagChildChanged.getTag()).clearCaches();\n  }","id":100823,"modified_method":"public void visitXmlTagChildChanged(final XmlTagChildChanged xmlTagChildChanged) {\n    final AntElement element = getAntParent(xmlTagChildChanged.getTag());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlTagChildRemoved(final XmlTagChildRemoved xmlTagChildRemoved) {\n    getAntParent(xmlTagChildRemoved.getTag()).clearCaches();\n  }","id":100824,"modified_method":"public void visitXmlTagChildRemoved(final XmlTagChildRemoved xmlTagChildRemoved) {\n    final AntElement element = getAntParent(xmlTagChildRemoved.getTag());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlElementChanged(final XmlElementChanged xmlElementChanged) {\n    getAntParent(xmlElementChanged.getElement()).clearCaches();\n  }","id":100825,"modified_method":"public void visitXmlElementChanged(final XmlElementChanged xmlElementChanged) {\n    final AntElement element = getAntParent(xmlElementChanged.getElement());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static AntElement getAntParent(final XmlElement el) {\n    final TextRange textRange = el.getTextRange();\n    final AntFile antFile = (AntFile)el.getContainingFile().getViewProvider().getPsi(AntSupport.getLanguage());\n    AntElement antElement = (AntElement)antFile.findElementAt(textRange.getStartOffset() + 1);\n    while (!(antElement instanceof AntFile) && antElement.getTextLength() < textRange.getLength()) {\n      antElement = antElement.getAntParent();\n    }\n    return antElement;\n  }","id":100826,"modified_method":"@Nullable\n  private static AntElement getAntParent(final XmlElement el) {\n    final TextRange textRange = el.getTextRange();\n    final AntFile antFile = (AntFile)el.getContainingFile().getViewProvider().getPsi(AntSupport.getLanguage());\n    if (antFile == null) return null;\n    AntElement antElement = (AntElement)antFile.findElementAt(textRange.getStartOffset());\n    while (!(antElement instanceof AntFile) && antElement.getTextLength() < textRange.getLength()) {\n      antElement = antElement.getAntParent();\n    }\n    return antElement;\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlTextChanged(final XmlTextChanged xmlTextChanged) {\n    getAntParent(xmlTextChanged.getText()).clearCaches();\n  }","id":100827,"modified_method":"public void visitXmlTextChanged(final XmlTextChanged xmlTextChanged) {\n    final AntElement element = getAntParent(xmlTextChanged.getText());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitXmlTagNameChanged(final XmlTagNameChanged xmlTagNameChanged) {\n    getAntParent(xmlTagNameChanged.getTag()).clearCaches();\n  }","id":100828,"modified_method":"public void visitXmlTagNameChanged(final XmlTagNameChanged xmlTagNameChanged) {\n    final AntElement element = getAntParent(xmlTagNameChanged.getTag());\n    if (element != null) {\n      element.clearCaches();\n    }\n  }","commit_id":"83746194a92e69be3c85839bbd3aa8624143da73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Map<String, ComponentDto> getProjectsByComponentUuid(Collection<ComponentDto> components, Collection<ComponentDto> projects) {\n    Map<String, ComponentDto> projectsByComponentUuid = newHashMap();\n    for (final ComponentDto component : components) {\n      projectsByComponentUuid.put(component.uuid(), Iterables.find(projects, new Predicate<ComponentDto>() {\n        @Override\n        public boolean apply(@Nullable ComponentDto input) {\n          return input != null && input.uuid().equals(input.projectUuid());\n        }\n      }));\n    }\n    return projectsByComponentUuid;\n  }","id":100829,"modified_method":"private Map<String, ComponentDto> getProjectsByComponentUuid(Collection<ComponentDto> components, Collection<ComponentDto> projects) {\n    Map<String, ComponentDto> projectsByComponentUuid = newHashMap();\n    for (final ComponentDto component : components) {\n      projectsByComponentUuid.put(component.uuid(), Iterables.find(projects, new Predicate<ComponentDto>() {\n        @Override\n        public boolean apply(@Nullable ComponentDto project) {\n          return project != null && project.uuid().equals(component.projectUuid());\n        }\n      }));\n    }\n    return projectsByComponentUuid;\n  }","commit_id":"a0018917f53b63865fcd2870eaa9fe45220912aa","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void issue_linked_on_removed_file() throws Exception {\n    ComponentDto removedFile = ComponentTesting.newFileDto(project).setUuid(\"EDCB\")\n      .setEnabled(false)\n      .setKey(\"RemovedComponent\")\n      .setSubProjectId(project.getId());\n    db.componentDao().insert(session, removedFile);\n\n    IssueDto issue = IssueTesting.newDto(rule, removedFile, project)\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setRule(rule)\n      .setProject(project)\n      .setComponent(removedFile)\n      .setStatus(\"OPEN\").setResolution(\"OPEN\")\n      .setSeverity(\"MAJOR\")\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"));\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).execute();\n    result.assertJson(this.getClass(), \"issue_linked_on_removed_file.json\", false);\n  }","id":100830,"modified_method":"@Test\n  public void issue_linked_on_removed_file() throws Exception {\n    ComponentDto removedFile = ComponentTesting.newFileDto(project).setUuid(\"EDCB\")\n      .setEnabled(false)\n      .setKey(\"RemovedComponent\")\n      .setSubProjectId(project.getId());\n    db.componentDao().insert(session, removedFile);\n\n    IssueDto issue = IssueTesting.newDto(rule, removedFile, project)\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setComponent(removedFile)\n      .setStatus(\"OPEN\").setResolution(\"OPEN\")\n      .setSeverity(\"MAJOR\")\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"));\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).execute();\n    result.assertJson(this.getClass(), \"issue_linked_on_removed_file.json\", false);\n  }","commit_id":"a0018917f53b63865fcd2870eaa9fe45220912aa","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void hide_rules() throws Exception {\n    IssueDto issue = IssueTesting.newDto(rule, file, project)\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"))\n      .setRule(rule)\n      .setDebt(10L)\n      .setProject(project)\n      .setComponent(file)\n      .setStatus(\"OPEN\")\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setSeverity(\"MAJOR\");\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).setParam(IssueFilterParameters.HIDE_RULES, \"true\").execute();\n    result.assertJson(this.getClass(), \"hide_rules.json\", false);\n  }","id":100831,"modified_method":"@Test\n  public void hide_rules() throws Exception {\n    IssueDto issue = IssueTesting.newDto(rule, file, project)\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"))\n      .setDebt(10L)\n      .setStatus(\"OPEN\")\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setSeverity(\"MAJOR\");\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).setParam(IssueFilterParameters.HIDE_RULES, \"true\").execute();\n    result.assertJson(this.getClass(), \"hide_rules.json\", false);\n  }","commit_id":"a0018917f53b63865fcd2870eaa9fe45220912aa","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void issue() throws Exception {\n    db.userDao().insert(session, new UserDto().setLogin(\"simon\").setName(\"Simon\").setEmail(\"simon@email.com\"));\n    db.userDao().insert(session, new UserDto().setLogin(\"fabrice\").setName(\"Fabrice\").setEmail(\"fabrice@email.com\"));\n\n    IssueDto issue = IssueTesting.newDto(rule, file, project)\n      .setRule(rule)\n      .setDebt(10L)\n      .setProject(project)\n      .setComponent(file)\n      .setStatus(\"OPEN\").setResolution(\"OPEN\")\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setSeverity(\"MAJOR\")\n      .setAuthorLogin(\"John\")\n      .setAssignee(\"simon\")\n      .setReporter(\"fabrice\")\n      .setActionPlanKey(\"AP-ABCD\")\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"));\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).execute();\n    // TODO date assertion is complex to test, and components id are not predictable, that's why strict boolean is set to false\n    result.assertJson(this.getClass(), \"issue.json\", false);\n  }","id":100832,"modified_method":"@Test\n  public void issue() throws Exception {\n    db.userDao().insert(session, new UserDto().setLogin(\"simon\").setName(\"Simon\").setEmail(\"simon@email.com\"));\n    db.userDao().insert(session, new UserDto().setLogin(\"fabrice\").setName(\"Fabrice\").setEmail(\"fabrice@email.com\"));\n\n    IssueDto issue = IssueTesting.newDto(rule, file, project)\n      .setDebt(10L)\n      .setStatus(\"OPEN\").setResolution(\"OPEN\")\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setSeverity(\"MAJOR\")\n      .setAuthorLogin(\"John\")\n      .setAssignee(\"simon\")\n      .setReporter(\"fabrice\")\n      .setActionPlanKey(\"AP-ABCD\")\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"));\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).execute();\n    // TODO date assertion is complex to test, and components id are not predictable, that's why strict boolean is set to false\n    result.assertJson(this.getClass(), \"issue.json\", false);\n  }","commit_id":"a0018917f53b63865fcd2870eaa9fe45220912aa","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void display_facets() throws Exception {\n    IssueDto issue = IssueTesting.newDto(rule, file, project)\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"))\n      .setRule(rule)\n      .setDebt(10L)\n      .setProject(project)\n      .setComponent(file)\n      .setStatus(\"OPEN\")\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setSeverity(\"MAJOR\");\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)\n      .setParam(\"resolved\", \"false\")\n      .setParam(SearchAction.PARAM_FACETS, \"statuses,severities,resolutions,componentRootUuids,rules,componentUuids,assignees,languages\")\n      .execute();\n    result.assertJson(this.getClass(), \"display_facets.json\", false);\n  }","id":100833,"modified_method":"@Test\n  public void display_facets() throws Exception {\n    IssueDto issue = IssueTesting.newDto(rule, file, project)\n      .setIssueCreationDate(DateUtils.parseDate(\"2014-09-04\"))\n      .setIssueUpdateDate(DateUtils.parseDate(\"2014-12-04\"))\n      .setDebt(10L)\n      .setStatus(\"OPEN\")\n      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")\n      .setSeverity(\"MAJOR\");\n    db.issueDao().insert(session, issue);\n    session.commit();\n\n    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)\n      .setParam(\"resolved\", \"false\")\n      .setParam(SearchAction.PARAM_FACETS, \"statuses,severities,resolutions,componentRootUuids,rules,componentUuids,assignees,languages\")\n      .execute();\n    result.assertJson(this.getClass(), \"display_facets.json\", false);\n  }","commit_id":"a0018917f53b63865fcd2870eaa9fe45220912aa","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n     * Call a procedure and check the return code.\n     * Success just returns the result to the caller.\n     * Unpossible errors end the process.\n     * Some errors will retry the call until the global progress timeout with various waits.\n     * After the global progress timeout, the process is killed.\n     */\n    ClientResponse callROProcedureWithRetry(String procName, Object... params) {\n        long startTime = System.currentTimeMillis();\n        long now = startTime;\n\n        while (now - startTime < (config.noProgressTimeout * 1000)) {\n            ClientResponse cr = null;\n\n            try {\n                cr = client.callProcedure(procName, params);\n            }\n            catch (ProcCallException e) {\n                log.debug(\"callROProcedureWithRetry operation exception:\", e);\n                cr = e.getClientResponse();\n            }\n            catch (NoConnectionsException e) {\n                log.debug(\"callROProcedureWithRetry operation exception:\", e);\n                // wait a bit to retry\n                try { Thread.sleep(1000); } catch (InterruptedException e1) {}\n            }\n            catch (IOException e) {\n                log.debug(\"callROProcedureWithRetry operation exception:\", e);\n                // IOException is not cool man\n                logStackTrace(e);\n                System.exit(-1);\n            }\n\n            if (cr != null) {\n                if (cr.getStatus() != ClientResponse.SUCCESS) {\n                    log.debug(\"callROProcedureWithRetry operation failed: \" + ((ClientResponseImpl)cr).toJSONString());\n                }\n                switch (cr.getStatus()) {\n                case ClientResponse.SUCCESS:\n                    // hooray!\n                    return cr;\n                case ClientResponse.CONNECTION_LOST:\n                case ClientResponse.CONNECTION_TIMEOUT:\n                    // can retry after a delay\n                    try { Thread.sleep(5 * 1000); } catch (Exception e) {}\n                    break;\n                case ClientResponse.RESPONSE_UNKNOWN:\n                    // can try again immediately - cluster is up but a node died\n                    break;\n                case ClientResponse.SERVER_UNAVAILABLE:\n                    // shouldn't be in admin mode (paused) in this app, but can retry after a delay\n                    try { Thread.sleep(30 * 1000); } catch (Exception e) {}\n                    break;\n                case ClientResponse.GRACEFUL_FAILURE:\n                case ClientResponse.UNEXPECTED_FAILURE:\n                case ClientResponse.USER_ABORT:\n                    log.error(_F(\"Error in procedure call for: %s\", procName));\n                    log.error(((ClientResponseImpl)cr).toJSONString());\n                    // for starters, I'm assuming these errors can't happen for reads in a sound system\n                    assert(false);\n                    System.exit(-1);\n                }\n            }\n\n            now = System.currentTimeMillis();\n        }\n\n        log.error(_F(\"Error no progress timeout reached, terminating\"));\n        System.exit(-1);\n        return null;\n    }","id":100834,"modified_method":"/**\n     * Call a procedure and check the return code.\n     * Success just returns the result to the caller.\n     * Unpossible errors end the process.\n     * Some errors will retry the call until the global progress timeout with various waits.\n     * After the global progress timeout, the process is killed.\n     */\n    ClientResponse callROProcedureWithRetry(String procName, Object... params) {\n        long startTime = System.currentTimeMillis();\n        long now = startTime;\n\n        while (now - startTime < (config.noProgressTimeout * 1000)) {\n            ClientResponse cr = null;\n\n            try {\n                cr = client.callProcedure(procName, params);\n            }\n            catch (ProcCallException e) {\n                log.debug(\"callROProcedureWithRetry operation exception:\", e);\n                cr = e.getClientResponse();\n            }\n            catch (NoConnectionsException e) {\n                log.debug(\"callROProcedureWithRetry operation exception:\", e);\n                // wait a bit to retry\n                try { Thread.sleep(1000); } catch (InterruptedException e1) {}\n            }\n            catch (IOException e) {\n                log.debug(\"callROProcedureWithRetry operation exception:\", e);\n                // IOException is not cool man\n                logStackTrace(e);\n                System.exit(-1);\n            }\n\n            if (cr != null) {\n                if (cr.getStatus() != ClientResponse.SUCCESS) {\n                    log.debug(\"callROProcedureWithRetry operation failed: \" + ((ClientResponseImpl)cr).toJSONString());\n                }\n                switch (cr.getStatus()) {\n                case ClientResponse.SUCCESS:\n                    // hooray!\n                    return cr;\n                case ClientResponse.CONNECTION_LOST:\n                case ClientResponse.CONNECTION_TIMEOUT:\n                    // can retry after a delay\n                    try { Thread.sleep(5 * 1000); } catch (Exception e) {}\n                    break;\n                case ClientResponse.RESPONSE_UNKNOWN:\n                    // can try again immediately - cluster is up but a node died\n                    break;\n                case ClientResponse.SERVER_UNAVAILABLE:\n                    // shouldn't be in admin mode (paused) in this app, but can retry after a delay\n                    try { Thread.sleep(30 * 1000); } catch (Exception e) {}\n                    break;\n                case ClientResponse.GRACEFUL_FAILURE:\n                case ClientResponse.UNEXPECTED_FAILURE:\n                case ClientResponse.USER_ABORT:\n                    log.warn(_F(\"USER ABORT response in procedure call for: %s\", procName));\n                    log.warn(((ClientResponseImpl)cr).toJSONString());\n                    // for starters, I'm assuming these errors can't happen for reads in a sound system\n                    // but this is not a retry-able case, caller should check for errors\n                    return cr;\n                }\n            }\n\n            now = System.currentTimeMillis();\n        }\n\n        log.error(_F(\"Error no progress timeout reached, terminating\"));\n        System.exit(-1);\n        return null;\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void runTestWorkload() throws Exception {\n\n        startTime = System.currentTimeMillis();\n\n        class watchDog extends Thread {\n            @Override\n            public void run() {\n                if (config.duration == 0)\n                    return;\n                try { Thread.sleep(config.duration * 1000); }\n                catch (Exception e) { }\n                log.info(\"Duration limit reached, terminating run\");\n                System.exit(0);\n            }\n        };\n        watchDog th = new watchDog();\n        th.setDaemon(true);\n        th.start();\n\n        ClientConfig clientConfig = new ClientConfig(\"\", \"\", new StatusListener());\n        //clientConfig.setProcedureCallTimeout(30 * 60 * 1000); // 30 min\n        clientConfig.setMaxOutstandingTxns(512);\n        client = ClientFactory.createClient(clientConfig);\n        connect(config.servers);\n\n        // get the topo\n        topo = getCluterTopology();\n\n        // kick this off with a random schema\n        VoltTable t = null;\n        TableHelper.ViewRep v = null;\n        while (t == null) {\n            Pair<VoltTable, TableHelper.ViewRep> schema = catalogChange(null, true, null);\n            t = schema.getFirst();\n            v = schema.getSecond();\n        }\n\n        while (true) {\n\n            // make sure the table is full and mess around with it\n            loadTable(t);\n\n            for (int j = 0; j < 3; j++) {\n\n                String tableName = TableHelper.getTableName(t);\n\n                // deterministically sample some rows\n                VoltTable preT = null;\n                long max = maxId(t);\n                long sampleOffset = -1;\n                if (max > 0) {\n                    if (max <= 100)\n                        sampleOffset = 0;\n                    else\n                        sampleOffset = Math.min((long) (max * .75), max - 100);\n                    assert(max >= 0);\n                    preT = sample(sampleOffset, t);\n                    assert(preT.getRowCount() > 0);\n                    log.info(_F(\"Sampled table %s from offset %d limit 100 and found %d rows.\",\n                            tableName, sampleOffset, preT.getRowCount()));\n                }\n                //log.info(_F(\"First sample:\\n%s\", preT.toFormattedString()));\n\n                // move to an entirely new table or migrated schema\n                VoltTable newT = null;\n                TableHelper.ViewRep newV = null;\n                boolean isNewTable = (j == 0) && (rand.nextInt(5) == 0);\n                while (newT == null) {\n                    Pair<VoltTable, TableHelper.ViewRep> schema = catalogChange(t, isNewTable, v);\n                    if (schema == null) {\n                            log.info(_F(\"Retrying an unsuccessful catalog update.\"));\n                            continue;   // try again\n                    }\n                    newT = schema.getFirst();\n                    newV = schema.getSecond();\n                }\n                t = newT;\n                v = newV;\n\n                // if the table has been migrated, check the data\n                if (!isNewTable && (preT != null)) {\n                    VoltTable guessT = t.clone(4096 * 1024);\n                    //log.info(_F(\"Empty clone:\\n%s\", guessT.toFormattedString()));\n\n                    TableHelper.migrateTable(preT, guessT);\n                    //log.info(_F(\"Java migration:\\n%s\", guessT.toFormattedString()));\n\n                    // deterministically sample the same rows\n                    assert(sampleOffset >= 0);\n                    VoltTable result = callROProcedureWithRetry(\n                            \"VerifySchemaChanged\" + tableName, sampleOffset, guessT).getResults()[0];\n                    boolean success = result.fetchRow(0).getLong(0) == 1;\n                    String err = result.fetchRow(0).getString(1);\n                    if (!success) {\n                        log.error(_F(err));\n                        assert(false);\n                    }\n                }\n            }\n        }\n    }","id":100835,"modified_method":"private void runTestWorkload() throws Exception {\n\n        startTime = System.currentTimeMillis();\n\n        class watchDog extends Thread {\n            @Override\n            public void run() {\n                if (config.duration == 0)\n                    return;\n                try { Thread.sleep(config.duration * 1000); }\n                catch (Exception e) { }\n                log.info(\"Duration limit reached, terminating run\");\n                System.exit(0);\n            }\n        };\n        watchDog th = new watchDog();\n        th.setDaemon(true);\n        th.start();\n\n        ClientConfig clientConfig = new ClientConfig(\"\", \"\", new StatusListener());\n        //clientConfig.setProcedureCallTimeout(30 * 60 * 1000); // 30 min\n        clientConfig.setMaxOutstandingTxns(512);\n        client = ClientFactory.createClient(clientConfig);\n        connect(config.servers);\n\n        // get the topo\n        topo = getCluterTopology();\n\n        // kick this off with a random schema\n        VoltTable t = null;\n        TableHelper.ViewRep v = null;\n        while (t == null) {\n            Pair<VoltTable, TableHelper.ViewRep> schema = catalogChange(null, true, null);\n            t = schema.getFirst();\n            v = schema.getSecond();\n        }\n\n        while (true) {\n\n            // make sure the table is full and mess around with it\n            loadTable(t);\n\n            for (int j = 0; j < 3; j++) {\n\n                String tableName = TableHelper.getTableName(t);\n\n                // deterministically sample some rows\n                VoltTable preT = null;\n                long max = maxId(t);\n                long sampleOffset = -1;\n                if (max > 0) {\n                    if (max <= 100)\n                        sampleOffset = 0;\n                    else\n                        sampleOffset = Math.min((long) (max * .75), max - 100);\n                    assert(max >= 0);\n                    preT = sample(sampleOffset, t);\n                    assert(preT.getRowCount() > 0);\n                    log.info(_F(\"Sampled table %s from offset %d limit 100 and found %d rows.\",\n                            tableName, sampleOffset, preT.getRowCount()));\n                }\n                //log.info(_F(\"First sample:\\n%s\", preT.toFormattedString()));\n\n                // move to an entirely new table or migrated schema\n                VoltTable newT = null;\n                TableHelper.ViewRep newV = null;\n                boolean isNewTable = (j == 0) && (rand.nextInt(5) == 0);\n                while (newT == null) {\n                    Pair<VoltTable, TableHelper.ViewRep> schema = catalogChange(t, isNewTable, v);\n                    if (schema == null) {\n                            log.info(_F(\"Retrying an unsuccessful catalog update.\"));\n                            continue;   // try again\n                    }\n                    newT = schema.getFirst();\n                    newV = schema.getSecond();\n                }\n                t = newT;\n                v = newV;\n\n                // if the table has been migrated, check the data\n                if (!isNewTable && (preT != null)) {\n                    VoltTable guessT = t.clone(4096 * 1024);\n                    //log.info(_F(\"Empty clone:\\n%s\", guessT.toFormattedString()));\n\n                    TableHelper.migrateTable(preT, guessT);\n                    //log.info(_F(\"Java migration:\\n%s\", guessT.toFormattedString()));\n\n                    // deterministically sample the same rows\n                    assert(sampleOffset >= 0);\n                    ClientResponse cr = callROProcedureWithRetry(\n                            \"VerifySchemaChanged\" + tableName, sampleOffset, guessT);\n                    assert(cr.getStatus() == ClientResponse.SUCCESS);\n                    VoltTable result = cr.getResults()[0];\n                    boolean success = result.fetchRow(0).getLong(0) == 1;\n                    String err = result.fetchRow(0).getString(1);\n                    if (!success) {\n                        log.error(_F(err));\n                        assert(false);\n                    }\n                }\n            }\n        }\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Perform a schema change to a mutated version of the current table (80%) or\n     * to a new table entirely (20%, drops and adds the new table).\n     */\n    private Pair<VoltTable,TableHelper.ViewRep> catalogChange(VoltTable t1, boolean newTable, TableHelper.ViewRep view) throws Exception {\n        CatalogBuilder builder = new CatalogBuilder();\n        VoltTable t2 = null;\n        String currentName = t1 == null ? \"B\" : TableHelper.getTableName(t1);\n        String newName = currentName;\n\n        // add an empty table with the schema version number in it\n        VoltTable versionT = TableHelper.quickTable(String.format(\"V%s (BIGINT)\", schemaVersionNo + 1));\n\n        if (newTable) {\n            newName = currentName.equals(\"A\") ? \"B\" : \"A\";\n            t2 = TableHelper.getTotallyRandomTable(newName, rand);\n        }\n        else {\n            t2 = TableHelper.mutateTable(t1, true, rand);\n        }\n\n        log.info(_F(\"New Schema:\\n%s\", TableHelper.ddlForTable(t2)));\n\n        // handle views\n        if (view == null) {\n            view = TableHelper.ViewRep.viewRepForTable(\"MV\", t2, rand);\n        }\n        else {\n            if (!view.compatibleWithTable(t2)) {\n                view = null;\n            }\n        }\n        if (view != null) {\n            log.info(_F(\"New View:\\n%s\", view.ddlForView()));\n        }\n        else {\n            log.info(\"New View: NULL\");\n        }\n\n        builder.addLiteralSchema(TableHelper.ddlForTable(t2));\n        if (view != null) {\n            builder.addLiteralSchema(view.ddlForView());\n        }\n        builder.addLiteralSchema(TableHelper.ddlForTable(versionT));\n        // make tables name A partitioned and tables named B replicated\n        if (newName.equalsIgnoreCase(\"A\")) {\n            int pkeyIndex = TableHelper.getBigintPrimaryKeyIndexIfExists(t2);\n            builder.addPartitionInfo(newName, t2.getColumnName(pkeyIndex));\n            builder.addProcedures(VerifySchemaChangedA.class);\n        }\n        else {\n            builder.addProcedures(VerifySchemaChangedB.class);\n        }\n        byte[] catalogData = builder.compileToBytes();\n        assert(catalogData != null);\n\n        long count = tupleCount(t1);\n        long start = System.nanoTime();\n\n        if (newTable) {\n            log.info(_F(\"Starting catalog update to swap tables.\"));\n        }\n        else {\n            log.info(_F(\"Starting catalog update to change schema.\"));\n        }\n\n        boolean success = false;\n        ClientResponse cr = null;\n        try {\n            cr = client.callProcedure(\"@UpdateApplicationCatalog\", catalogData, null);\n        }\n        catch (NoConnectionsException e) {\n            // failure\n        }\n        catch (IOException e) {\n            // IOException is not cool man\n            logStackTrace(e);\n            System.exit(-1);\n        }\n        catch (ProcCallException e) {\n            cr = e.getClientResponse();\n        }\n\n        if (cr != null) {\n            switch (cr.getStatus()) {\n            case ClientResponse.SUCCESS:\n                // hooray!\n                success = true;\n                break;\n            case ClientResponse.CONNECTION_LOST:\n            case ClientResponse.CONNECTION_TIMEOUT:\n            case ClientResponse.RESPONSE_UNKNOWN:\n            case ClientResponse.SERVER_UNAVAILABLE:\n                // can try again after a break\n                break;\n            case ClientResponse.UNEXPECTED_FAILURE:\n            case ClientResponse.GRACEFUL_FAILURE:\n            case ClientResponse.USER_ABORT:\n                // should never happen\n                assert(false);\n                System.exit(-1);\n            }\n        }\n\n        // don't actually trust the call... manually verify\n        int versionObserved = verifyAndGetSchemaVersion();\n\n        // did not update\n        if (versionObserved == schemaVersionNo) {\n            // make sure the system didn't say it worked\n            assert(success == false);\n            if (success == true) {\n                log.info(_F(\"Catalog update was reported to be successful but is not observable.\"));\n                System.exit(-1);     // fail test\n            }\n\n            // signal to the caller this didn't work\n            return null;\n        }\n        // success!\n        else {\n            assert(versionObserved == (schemaVersionNo + 1));\n            schemaVersionNo++;\n\n            long end = System.nanoTime();\n            double seconds = (end - start) / 1000000000.0;\n\n            if (newTable) {\n                log.info(_F(\"Completed catalog update that swapped tables in %.4f seconds\",\n                        seconds));\n            }\n            else {\n                log.info(_F(\"Completed catalog update of %d tuples in %.4f seconds (%d tuples/sec)\",\n                        count, seconds, (long) (count / seconds)));\n            }\n\n            return new Pair<VoltTable,TableHelper.ViewRep>(t2, view, false);\n        }\n    }","id":100836,"modified_method":"/**\n     * Perform a schema change to a mutated version of the current table (80%) or\n     * to a new table entirely (20%, drops and adds the new table).\n     */\n    private Pair<VoltTable,TableHelper.ViewRep> catalogChange(VoltTable t1, boolean newTable, TableHelper.ViewRep view) throws Exception {\n        CatalogBuilder builder = new CatalogBuilder();\n        VoltTable t2 = null;\n        String currentName = t1 == null ? \"B\" : TableHelper.getTableName(t1);\n        String newName = currentName;\n\n        // add an empty table with the schema version number in it\n        VoltTable versionT = TableHelper.quickTable(String.format(\"V%s (BIGINT)\", schemaVersionNo + 1));\n\n        if (newTable) {\n            newName = currentName.equals(\"A\") ? \"B\" : \"A\";\n            t2 = TableHelper.getTotallyRandomTable(newName, rand);\n        }\n        else {\n            t2 = TableHelper.mutateTable(t1, true, rand);\n        }\n\n        log.info(_F(\"New Schema:\\n%s\", TableHelper.ddlForTable(t2)));\n\n        // handle views\n        if (view == null) {\n            view = TableHelper.ViewRep.viewRepForTable(\"MV\", t2, rand);\n        }\n        else {\n            if (!view.compatibleWithTable(t2)) {\n                view = null;\n            }\n        }\n        if (view != null) {\n            log.info(_F(\"New View:\\n%s\", view.ddlForView()));\n        }\n        else {\n            log.info(\"New View: NULL\");\n        }\n\n        builder.addLiteralSchema(TableHelper.ddlForTable(t2));\n        if (view != null) {\n            builder.addLiteralSchema(view.ddlForView());\n        }\n        builder.addLiteralSchema(TableHelper.ddlForTable(versionT));\n        // make tables name A partitioned and tables named B replicated\n        if (newName.equalsIgnoreCase(\"A\")) {\n            int pkeyIndex = TableHelper.getBigintPrimaryKeyIndexIfExists(t2);\n            builder.addPartitionInfo(newName, t2.getColumnName(pkeyIndex));\n            builder.addProcedures(VerifySchemaChangedA.class);\n        }\n        else {\n            builder.addProcedures(VerifySchemaChangedB.class);\n        }\n        byte[] catalogData = builder.compileToBytes();\n        assert(catalogData != null);\n\n        long count = tupleCount(t1);\n        long start = System.nanoTime();\n\n        if (newTable) {\n            log.info(_F(\"Starting catalog update to swap tables.\"));\n        }\n        else {\n            log.info(_F(\"Starting catalog update to change schema.\"));\n        }\n\n        boolean success = false;\n        ClientResponse cr = null;\n        try {\n            cr = client.callProcedure(\"@UpdateApplicationCatalog\", catalogData, null);\n        }\n        catch (NoConnectionsException e) {\n            // failure\n        }\n        catch (IOException e) {\n            // IOException is not cool man\n            logStackTrace(e);\n            System.exit(-1);\n        }\n        catch (ProcCallException e) {\n            cr = e.getClientResponse();\n        }\n\n        if (cr != null) {\n            switch (cr.getStatus()) {\n            case ClientResponse.SUCCESS:\n                // hooray!\n                success = true;\n                break;\n            case ClientResponse.CONNECTION_LOST:\n            case ClientResponse.CONNECTION_TIMEOUT:\n            case ClientResponse.RESPONSE_UNKNOWN:\n            case ClientResponse.SERVER_UNAVAILABLE:\n                // can try again after a break\n                break;\n            case ClientResponse.UNEXPECTED_FAILURE:\n            case ClientResponse.GRACEFUL_FAILURE:\n            case ClientResponse.USER_ABORT:\n                // should never happen\n                assert(false);\n                System.exit(-1);\n            }\n        }\n\n        // don't actually trust the call... manually verify\n        if (success == true) {\n            if (schemaVersionNo > 0) {\n                // a procedure call exception is expected..\n                cr = callROProcedureWithRetry(\"@AdHoc\",\n                        String.format(\"select count(*) from V%d limit 1;\",\n                                schemaVersionNo));\n                if (cr.getStatus() == ClientResponse.SUCCESS) {\n                    log.info(_F(\"Catalog update was reported to be successful but is not observable(1).\"));\n                    System.exit(-1);     // fail test\n                }\n            }\n            cr = callROProcedureWithRetry(\"@AdHoc\",\n                    String.format(\"select count(*) from V%d limit 1;\",\n                            schemaVersionNo+1));\n            if (cr.getStatus() != ClientResponse.SUCCESS) {\n                log.info(_F(\"Catalog update was reported to be successful but is not observable(2).\"));\n                System.exit(-1);     // fail test\n            }\n        } else {\n            if (schemaVersionNo > 0) {\n                cr = callROProcedureWithRetry(\"@AdHoc\",\n                        String.format(\"select count(*) from V%d limit 1;\",\n                                schemaVersionNo));\n                if (cr.getStatus() != ClientResponse.SUCCESS) {\n                    log.info(_F(\"Catalog update was reported to be un-successful but is observable(1).\"));\n                    System.exit(-1);     // fail test\n                }\n            }\n            cr = callROProcedureWithRetry(\"@AdHoc\",\n                    String.format(\"select count(*) from V%d limit 1;\",\n                            schemaVersionNo+1));\n            if (cr.getStatus() == ClientResponse.SUCCESS) {\n                log.info(_F(\"Catalog update was reported to be un-successful but is observable(2).\"));\n                System.exit(-1);     // fail test\n            }\n        }\n\n        schemaVersionNo++;\n\n        long end = System.nanoTime();\n        double seconds = (end - start) / 1000000000.0;\n\n        if (newTable) {\n            log.info(_F(\"Completed catalog update that swapped tables in %.4f seconds\",\n                    seconds));\n        }\n        else {\n            log.info(_F(\"Completed catalog update of %d tuples in %.4f seconds (%d tuples/sec)\",\n                    count, seconds, (long) (count / seconds)));\n        }\n\n        return new Pair<VoltTable,TableHelper.ViewRep>(t2, view, false);\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private Topology getCluterTopology() {\n        int hosts = -1;\n        int sitesPerHost = -1;\n        int k = -1;\n\n        VoltTable result = callROProcedureWithRetry(\"@SystemInformation\", \"DEPLOYMENT\").getResults()[0];\n        result.resetRowPosition();\n        while (result.advanceRow()) {\n            String key = result.getString(0);\n            String value = result.getString(1);\n            if (key.equals(\"hostcount\")) {\n                hosts = Integer.parseInt(value);\n            }\n            if (key.equals(\"sitesperhost\")) {\n                sitesPerHost = Integer.parseInt(value);\n            }\n            if (key.equals(\"kfactor\")) {\n                k = Integer.parseInt(value);\n            }\n        }\n\n        return new Topology(hosts, hosts * sitesPerHost, (hosts * sitesPerHost) / (k + 1));\n    }","id":100837,"modified_method":"private Topology getCluterTopology() {\n        int hosts = -1;\n        int sitesPerHost = -1;\n        int k = -1;\n\n        ClientResponse cr = callROProcedureWithRetry(\"@SystemInformation\", \"DEPLOYMENT\");\n        assert(cr.getStatus() == ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        result.resetRowPosition();\n        while (result.advanceRow()) {\n            String key = result.getString(0);\n            String value = result.getString(1);\n            if (key.equals(\"hostcount\")) {\n                hosts = Integer.parseInt(value);\n            }\n            if (key.equals(\"sitesperhost\")) {\n                sitesPerHost = Integer.parseInt(value);\n            }\n            if (key.equals(\"kfactor\")) {\n                k = Integer.parseInt(value);\n            }\n        }\n\n        return new Topology(hosts, hosts * sitesPerHost, (hosts * sitesPerHost) / (k + 1));\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Get a list of tables from the system and verify that the dummy table added for versioning\n     * is the right one.\n     */\n    private int verifyAndGetSchemaVersion() {\n        VoltTable result = callROProcedureWithRetry(\"@Statistics\", \"TABLE\", 0).getResults()[0];\n        result.resetRowPosition();\n        int version = -1;\n        while (result.advanceRow()) {\n            String tableName = result.getString(\"TABLE_NAME\");\n            if (tableName.startsWith(\"V\")) {\n                int rowVersion = Integer.parseInt(tableName.substring(1));\n                if (version >= 0) {\n                    assert(rowVersion == version);\n                }\n                version = rowVersion;\n            }\n        }\n        assert(version >= 0);\n        return version;\n    }","id":100838,"modified_method":"/**\n     * Get a list of tables from the system and verify that the dummy table added for versioning\n     * is the right one.\n     */\n    private int verifyAndGetSchemaVersion() {\n        ClientResponse cr = callROProcedureWithRetry(\"@Statistics\", \"TABLE\", 0);\n        assert(cr.getStatus() == ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        result.resetRowPosition();\n        int version = -1;\n        while (result.advanceRow()) {\n            String tableName = result.getString(\"TABLE_NAME\");\n            if (tableName.startsWith(\"V\")) {\n                int rowVersion = Integer.parseInt(tableName.substring(1));\n                if (version >= 0) {\n                    assert(rowVersion == version);\n                }\n                version = rowVersion;\n            }\n        }\n        assert(version >= 0);\n        return version;\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Find the largest pkey value in the table.\n     */\n    public long maxId(VoltTable t) {\n        if (t == null) {\n            return 0;\n        }\n        VoltTable result = callROProcedureWithRetry(\"@AdHoc\",\n                String.format(\"select pkey from %s order by pkey desc limit 1;\", TableHelper.getTableName(t))).getResults()[0];\n        return result.getRowCount() > 0 ? result.asScalarLong() : 0;\n    }","id":100839,"modified_method":"/**\n     * Find the largest pkey value in the table.\n     */\n    public long maxId(VoltTable t) {\n        if (t == null) {\n            return 0;\n        }\n        ClientResponse cr = callROProcedureWithRetry(\"@AdHoc\",\n                String.format(\"select pkey from %s order by pkey desc limit 1;\", TableHelper.getTableName(t)));\n        assert(cr.getStatus() == ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        return result.getRowCount() > 0 ? result.asScalarLong() : 0;\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Count the number of tuples in the table.\n     */\n    private long tupleCount(VoltTable t) {\n        if (t == null) {\n            return 0;\n        }\n        VoltTable result = callROProcedureWithRetry(\"@AdHoc\",\n                String.format(\"select count(*) from %s;\", TableHelper.getTableName(t))).getResults()[0];\n        return result.asScalarLong();\n    }","id":100840,"modified_method":"/**\n     * Count the number of tuples in the table.\n     */\n    private long tupleCount(VoltTable t) {\n        if (t == null) {\n            return 0;\n        }\n        ClientResponse cr = callROProcedureWithRetry(\"@AdHoc\",\n                String.format(\"select count(*) from %s;\", TableHelper.getTableName(t)));\n        assert(cr.getStatus() == ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        return result.asScalarLong();\n    }","commit_id":"ab4f5f6469c9d1e378010cfd0054f848eabbf308","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public Connection getConnection(String helperName, Element jotmJdbcElement) throws SQLException, GenericEntityException {\n        ManagedDataSource mds = (ManagedDataSource) dsCache.get(helperName);\n        if (mds != null) {\n            return TransactionFactory.getCursorConnection(helperName, mds.getConnection());\n        }\n\n        synchronized (DBCPConnectionFactory.class) {\n            mds = (ManagedDataSource) dsCache.get(helperName);\n            if (mds != null) {\n                return TransactionFactory.getCursorConnection(helperName, mds.getConnection());\n            }\n\n            // connection properties\n            TransactionManager txMgr = TransactionFactory.getTransactionManager();\n            String driverName = jotmJdbcElement.getAttribute(\"jdbc-driver\");\n            String dbUri = jotmJdbcElement.getAttribute(\"jdbc-uri\");\n            String dbUser = jotmJdbcElement.getAttribute(\"jdbc-username\");\n            String dbPass = jotmJdbcElement.getAttribute(\"jdbc-password\");\n\n            // pool settings\n            int maxSize, minSize;\n            try {\n                maxSize = Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-maxsize\"));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-maxsize=\" + jotmJdbcElement.getAttribute(\"pool-maxsize\") + \"]; the values MUST be numbers, using default of 20.\", module);\n                maxSize = 20;\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                maxSize = 20;\n            }\n            try {\n                minSize = Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-minsize\"));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-minsize=\" + jotmJdbcElement.getAttribute(\"pool-minsize\") + \"]; the values MUST be numbers, using default of 5.\", module);\n                minSize = 2;\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                minSize = 2;\n            }\n            int maxIdle = maxSize / 2;\n            maxIdle = maxIdle > minSize ? maxIdle : minSize;\n\n            // load the driver\n            Driver jdbcDriver;\n            try {\n                jdbcDriver = (Driver) Class.forName(driverName, true, Thread.currentThread().getContextClassLoader()).newInstance();\n            } catch (Exception e) {\n                Debug.logError(e, module);\n                throw new GenericEntityException(e.getMessage(), e);\n            }\n\n            // connection factory properties\n            Properties cfProps = new Properties();\n            cfProps.put(\"user\", dbUser);\n            cfProps.put(\"password\", dbPass);\n\n            // create the connection factory\n            ConnectionFactory cf = new DriverConnectionFactory(jdbcDriver, dbUri, cfProps);\n\n            // wrap it with a LocalXAConnectionFactory\n            XAConnectionFactory xacf = new LocalXAConnectionFactory(txMgr, cf);\n                                                 \n            // configure the pool settings\n            GenericObjectPool pool = new GenericObjectPool();\n            pool.setTimeBetweenEvictionRunsMillis(600000);\n            pool.setMaxActive(maxSize);\n            pool.setMaxIdle(maxIdle);\n            pool.setMinIdle(minSize);\n            pool.setMaxWait(120000);\n\n\n            // create the pool object factory\n            PoolableConnectionFactory factory = new PoolableConnectionFactory(xacf, pool, null, null, true, true);\n            factory.setValidationQuery(\"select example_type_id from example_type limit 1\");\n            factory.setDefaultReadOnly(false);\n\n            String transIso = jotmJdbcElement.getAttribute(\"isolation-level\");\n            if (transIso != null && transIso.length() > 0) {\n                if (\"Serializable\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n                } else if (\"RepeatableRead\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\n                } else if (\"ReadUncommitted\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n                } else if (\"ReadCommitted\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n                } else if (\"None\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);\n                }\n            }\n            pool.setFactory(factory);\n\n            mds = new ManagedDataSource(pool, xacf.getTransactionRegistry());\n            mds.setAccessToUnderlyingConnectionAllowed(true);\n\n            // cache the pool\n            dsCache.put(helperName, mds);\n\n            return TransactionFactory.getCursorConnection(helperName, mds.getConnection());\n        }\n    }","id":100841,"modified_method":"public Connection getConnection(String helperName, Element jotmJdbcElement) throws SQLException, GenericEntityException {\n        ManagedDataSource mds = dsCache.get(helperName);\n        if (mds != null) {\n            return TransactionFactory.getCursorConnection(helperName, mds.getConnection());\n        }\n\n        synchronized (DBCPConnectionFactory.class) {\n            mds = dsCache.get(helperName);\n            if (mds != null) {\n                return TransactionFactory.getCursorConnection(helperName, mds.getConnection());\n            }\n\n            // connection properties\n            TransactionManager txMgr = TransactionFactory.getTransactionManager();\n            String driverName = jotmJdbcElement.getAttribute(\"jdbc-driver\");\n            String dbUri = jotmJdbcElement.getAttribute(\"jdbc-uri\");\n            String dbUser = jotmJdbcElement.getAttribute(\"jdbc-username\");\n            String dbPass = jotmJdbcElement.getAttribute(\"jdbc-password\");\n\n            // pool settings\n            int maxSize, minSize;\n            try {\n                maxSize = Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-maxsize\"));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-maxsize=\" + jotmJdbcElement.getAttribute(\"pool-maxsize\") + \"]; the values MUST be numbers, using default of 20.\", module);\n                maxSize = 20;\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                maxSize = 20;\n            }\n            try {\n                minSize = Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-minsize\"));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-minsize=\" + jotmJdbcElement.getAttribute(\"pool-minsize\") + \"]; the values MUST be numbers, using default of 5.\", module);\n                minSize = 2;\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                minSize = 2;\n            }\n            int maxIdle = maxSize / 2;\n            maxIdle = maxIdle > minSize ? maxIdle : minSize;\n\n            // load the driver\n            Driver jdbcDriver;\n            try {\n                jdbcDriver = (Driver) Class.forName(driverName, true, Thread.currentThread().getContextClassLoader()).newInstance();\n            } catch (Exception e) {\n                Debug.logError(e, module);\n                throw new GenericEntityException(e.getMessage(), e);\n            }\n\n            // connection factory properties\n            Properties cfProps = new Properties();\n            cfProps.put(\"user\", dbUser);\n            cfProps.put(\"password\", dbPass);\n\n            // create the connection factory\n            ConnectionFactory cf = new DriverConnectionFactory(jdbcDriver, dbUri, cfProps);\n\n            // wrap it with a LocalXAConnectionFactory\n            XAConnectionFactory xacf = new LocalXAConnectionFactory(txMgr, cf);\n                                                 \n            // configure the pool settings\n            GenericObjectPool pool = new GenericObjectPool();\n            pool.setTimeBetweenEvictionRunsMillis(600000);\n            pool.setMaxActive(maxSize);\n            pool.setMaxIdle(maxIdle);\n            pool.setMinIdle(minSize);\n            pool.setMaxWait(120000);\n\n\n            // create the pool object factory\n            PoolableConnectionFactory factory = new PoolableConnectionFactory(xacf, pool, null, null, true, true);\n            factory.setValidationQuery(\"select example_type_id from example_type limit 1\");\n            factory.setDefaultReadOnly(false);\n\n            String transIso = jotmJdbcElement.getAttribute(\"isolation-level\");\n            if (transIso != null && transIso.length() > 0) {\n                if (\"Serializable\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n                } else if (\"RepeatableRead\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\n                } else if (\"ReadUncommitted\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n                } else if (\"ReadCommitted\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n                } else if (\"None\".equals(transIso)) {\n                    factory.setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);\n                }\n            }\n            pool.setFactory(factory);\n\n            mds = new ManagedDataSource(pool, xacf.getTransactionRegistry());\n            mds.setAccessToUnderlyingConnectionAllowed(true);\n\n            // cache the pool\n            dsCache.put(helperName, mds);\n\n            return TransactionFactory.getCursorConnection(helperName, mds.getConnection());\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testRemoveByPK() throws Exception {\n        //\n        // Find all the root nodes,\n        // delete them their primary key\n        //\n        EntityCondition isRoot = new EntityExpr(\"primaryParentNodeId\", EntityOperator.EQUALS, GenericEntity.NULL_FIELD);\n        List rootValues = delegator.findByCondition(\"TestingNode\", isRoot, UtilMisc.toList(\"testingNodeId\"), null);\n\n        Iterator it = rootValues.iterator();\n        while(it.hasNext()) {\n            GenericPK pk = ((GenericValue)it.next()).getPrimaryKey();\n            int del = delegator.removeByPrimaryKey(pk);\n            TestCase.assertEquals(\"Removing Root by primary key\", del, 1);\n        }\n\n        // no more TestingNode should be in the data base anymore.\n\n        List testingNodes = delegator.findAll(\"TestingNode\");\n        TestCase.assertEquals(\"No more TestingNode after removing the roots\", testingNodes.size(), 0);\n    }","id":100842,"modified_method":"public void testRemoveByPK() throws Exception {\n        //\n        // Find all the root nodes,\n        // delete them their primary key\n        //\n        EntityCondition isRoot = new EntityExpr(\"primaryParentNodeId\", EntityOperator.EQUALS, GenericEntity.NULL_FIELD);\n        List<GenericValue> rootValues = delegator.findByCondition(\"TestingNode\", isRoot, UtilMisc.toList(\"testingNodeId\"), null);\n\n        for (GenericValue value: rootValues) {\n            GenericPK pk = value.getPrimaryKey();\n            int del = delegator.removeByPrimaryKey(pk);\n            TestCase.assertEquals(\"Removing Root by primary key\", del, 1);\n        }\n\n        // no more TestingNode should be in the data base anymore.\n\n        List<GenericValue> testingNodes = delegator.findAll(\"TestingNode\");\n        TestCase.assertEquals(\"No more TestingNode after removing the roots\", testingNodes.size(), 0);\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testAddMembersToTree() throws Exception {\n        // get the level1 nodes\n        EntityCondition isLevel1 = new EntityExpr(\"primaryParentNodeId\", EntityOperator.NOT_EQUAL, GenericEntity.NULL_FIELD);\n        List nodeLevel1 = delegator.findByCondition(\"TestingNode\", isLevel1, null, null);\n\n        List newValues = new LinkedList();\n        Timestamp now = UtilDateTime.nowTimestamp();\n\n        Iterator nodeIterator = nodeLevel1.iterator();\n        while(nodeIterator.hasNext()) {\n            GenericValue node = (GenericValue)nodeIterator.next();\n            GenericValue testing = delegator.makeValue(\"Testing\",\n                    UtilMisc.toMap(\n                            \"testingId\", delegator.getNextSeqId(\"testing\"),\n                            \"testingTypeId\", \"TEST-1\"\n                            )\n                    );\n            testing.put(\"testingName\", \"leaf-#\" + node.getString(\"testingNodeId\"));\n            testing.put(\"description\", \"level1 leaf\");\n            testing.put(\"comments\", \"No-comments\");\n            testing.put(\"testingSize\", new Long(10));\n            testing.put(\"testingDate\", now);\n\n            newValues.add(testing);\n            GenericValue member = delegator.makeValue(\"TestingNodeMember\",\n                    UtilMisc.toMap(\n                            \"testingNodeId\", node.get(\"testingNodeId\"),\n                            \"testingId\", testing.get(\"testingId\")\n                            )\n                    );\n\n            member.put(\"fromDate\", now);\n            member.put(\"thruDate\", UtilDateTime.getNextDayStart(now));\n\n            newValues.add(member);\n        }\n        int n = delegator.storeAll(newValues);\n        TestCase.assertEquals(\"Created/Stored Nodes\", n, newValues.size());\n    }","id":100843,"modified_method":"public void testAddMembersToTree() throws Exception {\n        // get the level1 nodes\n        EntityCondition isLevel1 = new EntityExpr(\"primaryParentNodeId\", EntityOperator.NOT_EQUAL, GenericEntity.NULL_FIELD);\n        List<GenericValue> nodeLevel1 = delegator.findByCondition(\"TestingNode\", isLevel1, null, null);\n\n        List<GenericValue> newValues = new LinkedList<GenericValue>();\n        Timestamp now = UtilDateTime.nowTimestamp();\n\n        for (GenericValue node: nodeLevel1) {\n            GenericValue testing = delegator.makeValue(\"Testing\",\n                            \"testingId\", delegator.getNextSeqId(\"testing\"),\n                            \"testingTypeId\", \"TEST-1\"\n                    );\n            testing.put(\"testingName\", \"leaf-#\" + node.getString(\"testingNodeId\"));\n            testing.put(\"description\", \"level1 leaf\");\n            testing.put(\"comments\", \"No-comments\");\n            testing.put(\"testingSize\", new Long(10));\n            testing.put(\"testingDate\", now);\n\n            newValues.add(testing);\n            GenericValue member = delegator.makeValue(\"TestingNodeMember\",\n                            \"testingNodeId\", node.get(\"testingNodeId\"),\n                            \"testingId\", testing.get(\"testingId\")\n                    );\n\n            member.put(\"fromDate\", now);\n            member.put(\"thruDate\", UtilDateTime.getNextDayStart(now));\n\n            newValues.add(member);\n        }\n        int n = delegator.storeAll(newValues);\n        TestCase.assertEquals(\"Created/Stored Nodes\", n, newValues.size());\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testBlobCreate() throws Exception {\n      try {\n          byte[] b = new byte[1];\n          b[0] = (byte)0x01;\n          GenericValue testingBlob = delegator.makeValue(\"TestBlob\", UtilMisc.toMap(\"testBlobId\", \"byte-blob\"));\n          testingBlob.setBytes(\"testBlobField\", b);\n          testingBlob.create();\n          \n          TestCase.assertTrue(\"Blob with byte value successfully created...\", true);\n      } catch(Exception ex) {\n        TestCase.fail(ex.getMessage());\n      } finally {\n          // Remove all our newly inserted values.\n        List values = delegator.findAll(\"TestBlob\");\n        delegator.removeAll(values);\n      }\n  }","id":100844,"modified_method":"public void testBlobCreate() throws Exception {\n      try {\n          byte[] b = new byte[1];\n          b[0] = (byte)0x01;\n          GenericValue testingBlob = delegator.makeValue(\"TestBlob\", \"testBlobId\", \"byte-blob\");\n          testingBlob.setBytes(\"testBlobField\", b);\n          testingBlob.create();\n          \n          TestCase.assertTrue(\"Blob with byte value successfully created...\", true);\n      } catch(Exception ex) {\n        TestCase.fail(ex.getMessage());\n      } finally {\n          // Remove all our newly inserted values.\n        List<GenericValue> values = delegator.findAll(\"TestBlob\");\n        delegator.removeAll(values);\n      }\n  }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testStoreByCondition() throws Exception {\n        // change the description of all the level1 nodes\n        EntityCondition isLevel1 = new EntityExpr(\"description\", EntityOperator.EQUALS, \"node-level #1\");\n        Map fieldsToSet = UtilMisc.toMap(\"description\", \"node-level #1 (updated)\");\n        int n = 0;\n        try {\n            delegator.storeByCondition(\"TestingNode\", fieldsToSet, isLevel1);\n            List updatedNodes = delegator.findByAnd(\"TestingNode\", fieldsToSet);\n            n = updatedNodes.size();\n        } catch (GenericEntityException e) {\n            TestCase.fail(\"testStoreByCondition threw an exception\");\n        }\n\n        TestCase.assertTrue(\"testStoreByCondition updated nodes > 0\", n > 0);\n    }","id":100845,"modified_method":"public void testStoreByCondition() throws Exception {\n        // change the description of all the level1 nodes\n        EntityCondition isLevel1 = new EntityExpr(\"description\", EntityOperator.EQUALS, \"node-level #1\");\n        Map<String, String> fieldsToSet = UtilMisc.toMap(\"description\", \"node-level #1 (updated)\");\n        int n = 0;\n        try {\n            delegator.storeByCondition(\"TestingNode\", fieldsToSet, isLevel1);\n            List<GenericValue> updatedNodes = delegator.findByAnd(\"TestingNode\", fieldsToSet);\n            n = updatedNodes.size();\n        } catch (GenericEntityException e) {\n            TestCase.fail(\"testStoreByCondition threw an exception\");\n        }\n\n        TestCase.assertTrue(\"testStoreByCondition updated nodes > 0\", n > 0);\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testRemoveType() throws Exception {\n        List values = delegator.findAll(\"TestingType\");\n        delegator.removeAll(values);\n\n        // now make sure there are no more of these\n        values = delegator.findAll(\"TestingType\");\n        TestCase.assertEquals(\"No more TestingTypes after remove all\", values.size(), 0);\n    }","id":100846,"modified_method":"public void testRemoveType() throws Exception {\n        List<GenericValue> values = delegator.findAll(\"TestingType\");\n        delegator.removeAll(values);\n\n        // now make sure there are no more of these\n        values = delegator.findAll(\"TestingType\");\n        TestCase.assertEquals(\"No more TestingTypes after remove all\", values.size(), 0);\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testRemoveNodeMemberAndTesting() throws Exception {\n            //\n            // Find the testing entities tru the node member and build a list of them\n            //\n            List values = delegator.findAll(\"TestingNodeMember\");\n            Iterator i = values.iterator();\n\n            ArrayList testings = new ArrayList();\n\n            while(i.hasNext()) {\n                GenericValue nodeMember = (GenericValue)i.next();\n                testings.add(nodeMember.getRelatedOne(\"Testing\"));\n            }\n            // and remove the nodeMember afterwards\n            delegator.removeAll(values);\n            values = delegator.findAll(\"TestingNodeMember\");\n            TestCase.assertTrue(\"No more Node Member entities\", values.size() == 0);\n\n            delegator.removeAll(testings);\n            values = delegator.findAll(\"Testing\");\n            TestCase.assertTrue(\"No more Testing entities\", values.size() == 0);\n    }","id":100847,"modified_method":"public void testRemoveNodeMemberAndTesting() throws Exception {\n            //\n            // Find the testing entities tru the node member and build a list of them\n            //\n            List<GenericValue> values = delegator.findAll(\"TestingNodeMember\");\n            Iterator i = values.iterator();\n\n            ArrayList<GenericValue> testings = new ArrayList<GenericValue>();\n\n            for (GenericValue nodeMember: values) {\n                testings.add(nodeMember.getRelatedOne(\"Testing\"));\n            }\n            // and remove the nodeMember afterwards\n            delegator.removeAll(values);\n            values = delegator.findAll(\"TestingNodeMember\");\n            TestCase.assertTrue(\"No more Node Member entities\", values.size() == 0);\n\n            delegator.removeAll(testings);\n            values = delegator.findAll(\"Testing\");\n            TestCase.assertTrue(\"No more Testing entities\", values.size() == 0);\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testTransactionUtilMoreThanTimeout() throws Exception {\n        try {\n            GenericValue testValue = delegator.makeValue(\"Testing\", UtilMisc.toMap(\"testingId\", \"timeout-test\"));\n            boolean transBegin = TransactionUtil.begin(10); // timeout set to 10 seconds\n            delegator.create(testValue);\n            Thread.sleep(20*1000);\n            TransactionUtil.commit(transBegin);\n            assertTrue(false);\n        } catch (GenericTransactionException e) {\n            assertTrue(true);\n        } catch (GenericEntityException e) {\n            assertTrue(\"Other GenericEntityException encountered:\" + e.toString(), false);\n            return;\n        } finally {\n            delegator.removeByAnd(\"Testing\", UtilMisc.toMap(\"testingId\", \"timeout-test\"));\n        }\n    }","id":100848,"modified_method":"public void testTransactionUtilMoreThanTimeout() throws Exception {\n        try {\n            GenericValue testValue = delegator.makeValue(\"Testing\", \"testingId\", \"timeout-test\");\n            boolean transBegin = TransactionUtil.begin(10); // timeout set to 10 seconds\n            delegator.create(testValue);\n            Thread.sleep(20*1000);\n            TransactionUtil.commit(transBegin);\n            assertTrue(false);\n        } catch (GenericTransactionException e) {\n            assertTrue(true);\n        } catch (GenericEntityException e) {\n            assertTrue(\"Other GenericEntityException encountered:\" + e.toString(), false);\n            return;\n        } finally {\n            delegator.removeByAnd(\"Testing\", \"testingId\", \"timeout-test\");\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testTransactionUtilLessThanTimeout() throws Exception {\n        try {\n            GenericValue testValue = delegator.makeValue(\"Testing\", UtilMisc.toMap(\"testingId\", \"timeout-test\"));\n            boolean transBegin = TransactionUtil.begin();\n            TransactionUtil.setTransactionTimeout(20); // now set timeout to 20 seconds\n            delegator.create(testValue);\n            Thread.sleep(10*1000);\n            TransactionUtil.commit(transBegin);\n            assertTrue(true);\n        } catch (GenericTransactionException e) {\n            assertTrue(\"Transaction error when testing transaction less than timeout \" + e.toString(), false);\n        } catch (GenericEntityException e) {\n            assertTrue(\"Other GenericEntityException encountered:\" + e.toString(), false);\n            return;\n        } finally {\n            delegator.removeByAnd(\"Testing\", UtilMisc.toMap(\"testingId\", \"timeout-test\"));\n        }\n    }","id":100849,"modified_method":"public void testTransactionUtilLessThanTimeout() throws Exception {\n        try {\n            GenericValue testValue = delegator.makeValue(\"Testing\", \"testingId\", \"timeout-test\");\n            boolean transBegin = TransactionUtil.begin();\n            TransactionUtil.setTransactionTimeout(20); // now set timeout to 20 seconds\n            delegator.create(testValue);\n            Thread.sleep(10*1000);\n            TransactionUtil.commit(transBegin);\n            assertTrue(true);\n        } catch (GenericTransactionException e) {\n            assertTrue(\"Transaction error when testing transaction less than timeout \" + e.toString(), false);\n        } catch (GenericEntityException e) {\n            assertTrue(\"Other GenericEntityException encountered:\" + e.toString(), false);\n            return;\n        } finally {\n            delegator.removeByAnd(\"Testing\", \"testingId\", \"timeout-test\");\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testCountViews() throws Exception {\n        EntityCondition isNodeWithMember = new EntityExpr(\"testingId\", EntityOperator.NOT_EQUAL, GenericEntity.NULL_FIELD);\n        List nodeWithMembers = delegator.findByCondition(\"TestingNodeAndMember\", isNodeWithMember, null, null);\n\n        Iterator it;\n        it = nodeWithMembers.iterator();\n\n        while(it.hasNext()) {\n            GenericValue v = (GenericValue)it.next();\n            Map fields = v.getAllFields();\n            Debug.logInfo(\"--------------------------\", module);\n            //      For values of a map\n            for(Iterator it1 = fields.keySet().iterator(); it1.hasNext(); ) {\n                Object field = it1.next();\n                Object value = fields.get(field);\n                Debug.logInfo(field.toString() + \" = \" + ((value == null) ? \"[null]\" : value.toString()), module);\n            }\n        }\n        long testingcount = delegator.findCountByCondition(\"Testing\", null, null);\n        TestCase.assertEquals(\"Number of views should equal number of created entities in the test.\", nodeWithMembers.size(), testingcount);\n    }","id":100850,"modified_method":"public void testCountViews() throws Exception {\n        EntityCondition isNodeWithMember = new EntityExpr(\"testingId\", EntityOperator.NOT_EQUAL, GenericEntity.NULL_FIELD);\n        List<GenericValue> nodeWithMembers = delegator.findByCondition(\"TestingNodeAndMember\", isNodeWithMember, null, null);\n\n        for (GenericValue v: nodeWithMembers) {\n            Map<String, Object> fields = v.getAllFields();\n            Debug.logInfo(\"--------------------------\", module);\n            //      For values of a map\n            for (Map.Entry<String, Object> entry: fields.entrySet()) {\n                String field = entry.getKey();\n                Object value = entry.getValue();\n                Debug.logInfo(field.toString() + \" = \" + ((value == null) ? \"[null]\" : value), module);\n            }\n        }\n        long testingcount = delegator.findCountByCondition(\"Testing\", null, null);\n        TestCase.assertEquals(\"Number of views should equal number of created entities in the test.\", nodeWithMembers.size(), testingcount);\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testEntityListIterator() throws Exception {\n        try {\n            EntityListIterator iterator = delegator.findListIteratorByCondition(\"Testing\", new EntityExpr(\"testingId\", EntityOperator.LIKE, \"T2-%\"), null, null);\n            assertTrue(\"Test if EntityListIterator was created: \", iterator != null);\n\n            int i = 0;\n            GenericValue item = (GenericValue) iterator.next();\n            while (item != null) {\n                assertTrue(\"Testing if iterated data matches test data (row \" + i + \"): \", item.getString(\"testingId\").equals(getTestId(\"T2-\", i)));\n                item = (GenericValue) iterator.next();\n                i++;\n            }\n            assertTrue(\"Test if EntitlyListIterator iterates exactly \" + TEST_COUNT + \" times: \" , i == TEST_COUNT);\n            iterator.close();\n        } catch (GenericEntityException e) {\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        } finally {\n            List entitiesToRemove = delegator.findByCondition(\"Testing\", new EntityExpr(\"testingId\", EntityOperator.LIKE, \"T2-%\"), null, null);\n            delegator.removeAll(entitiesToRemove);\n        }\n    }","id":100851,"modified_method":"public void testEntityListIterator() throws Exception {\n        try {\n            EntityListIterator iterator = delegator.findListIteratorByCondition(\"Testing\", new EntityExpr(\"testingId\", EntityOperator.LIKE, \"T2-%\"), null, null);\n            assertTrue(\"Test if EntityListIterator was created: \", iterator != null);\n\n            int i = 0;\n            GenericValue item = iterator.next();\n            while (item != null) {\n                assertTrue(\"Testing if iterated data matches test data (row \" + i + \"): \", item.getString(\"testingId\").equals(getTestId(\"T2-\", i)));\n                item = iterator.next();\n                i++;\n            }\n            assertTrue(\"Test if EntitlyListIterator iterates exactly \" + TEST_COUNT + \" times: \" , i == TEST_COUNT);\n            iterator.close();\n        } catch (GenericEntityException e) {\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        } finally {\n            List<GenericValue> entitiesToRemove = delegator.findByCondition(\"Testing\", new EntityExpr(\"testingId\", EntityOperator.LIKE, \"T2-%\"), null, null);\n            delegator.removeAll(entitiesToRemove);\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testCreateManyAndStoreAtOnce() throws Exception {\n        try {\n            List newValues = new LinkedList();\n            for (int i = 0; i < TEST_COUNT; i++) {\n                newValues.add(delegator.makeValue(\"Testing\", UtilMisc.toMap(\"testingId\", getTestId(\"T1-\", i))));\n            }\n            delegator.storeAll(newValues);\n            List newlyCreatedValues = delegator.findAll(\"Testing\", UtilMisc.toList(\"testingId\"));\n            TestCase.assertEquals(\"Test to create \" + TEST_COUNT + \" and store all at once\", TEST_COUNT, newlyCreatedValues.size());\n        } catch (GenericEntityException e) {\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        } finally {\n            List newlyCreatedValues = delegator.findAll(\"Testing\", UtilMisc.toList(\"testingId\"));\n            delegator.removeAll(newlyCreatedValues); \n        }\n    }","id":100852,"modified_method":"public void testCreateManyAndStoreAtOnce() throws Exception {\n        try {\n            List<GenericValue> newValues = new LinkedList<GenericValue>();\n            for (int i = 0; i < TEST_COUNT; i++) {\n                newValues.add(delegator.makeValue(\"Testing\", \"testingId\", getTestId(\"T1-\", i)));\n            }\n            delegator.storeAll(newValues);\n            List<GenericValue> newlyCreatedValues = delegator.findAll(\"Testing\", UtilMisc.toList(\"testingId\"));\n            TestCase.assertEquals(\"Test to create \" + TEST_COUNT + \" and store all at once\", TEST_COUNT, newlyCreatedValues.size());\n        } catch (GenericEntityException e) {\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        } finally {\n            List<GenericValue> newlyCreatedValues = delegator.findAll(\"Testing\", UtilMisc.toList(\"testingId\"));\n            delegator.removeAll(newlyCreatedValues); \n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testForeignKeyCreate() throws Exception {\n        try {\n            delegator.create(\"Testing\", UtilMisc.toMap(\"testingId\", delegator.getNextSeqId(\"Testing\"), \"testingTypeId\", \"NO-SUCH-KEY\"));\n        } catch(GenericEntityException e) {\n            Debug.logInfo(e.toString(), module);\n            return;\n        }\n        TestCase.fail(\"Foreign key referential integrity is not observed for create (INSERT)\");\n    }","id":100853,"modified_method":"public void testForeignKeyCreate() throws Exception {\n        try {\n            delegator.create(\"Testing\", \"testingId\", delegator.getNextSeqId(\"Testing\"), \"testingTypeId\", \"NO-SUCH-KEY\");\n        } catch(GenericEntityException e) {\n            Debug.logInfo(e.toString(), module);\n            return;\n        }\n        TestCase.fail(\"Foreign key referential integrity is not observed for create (INSERT)\");\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testMakeValue() throws Exception {\n        try {\n            // This method call directly stores a new value into the entity engine\n            delegator.create(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"TEST-1\", \"description\", \"Testing Type #1\"));\n\n            // This sequence creates the GenericValue entities first, puts them in a List, then calls the delegator to store them all\n            List newValues = new LinkedList();\n\n            newValues.add(delegator.makeValue(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"TEST-2\", \"description\", \"Testing Type #2\")));\n            newValues.add(delegator.makeValue(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"TEST-3\", \"description\", \"Testing Type #3\")));\n            newValues.add(delegator.makeValue(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"TEST-4\", \"description\", \"Testing Type #4\")));\n            delegator.storeAll(newValues);\n\n            // finds a List of newly created values.  the second parameter specifies the fields to order results by.\n            List newlyCreatedValues = delegator.findAll(\"TestingType\", UtilMisc.toList(\"testingTypeId\"));\n            TestCase.assertEquals(\"4 TestingTypes found\", 4, newlyCreatedValues.size());\n        } catch (GenericEntityException ex) {\n            TestCase.fail(ex.getMessage());\n        }\n    }","id":100854,"modified_method":"public void testMakeValue() throws Exception {\n        try {\n            // This method call directly stores a new value into the entity engine\n            delegator.create(\"TestingType\", \"testingTypeId\", \"TEST-1\", \"description\", \"Testing Type #1\");\n\n            // This sequence creates the GenericValue entities first, puts them in a List, then calls the delegator to store them all\n            List<GenericValue> newValues = new LinkedList<GenericValue>();\n\n            newValues.add(delegator.makeValue(\"TestingType\", \"testingTypeId\", \"TEST-2\", \"description\", \"Testing Type #2\"));\n            newValues.add(delegator.makeValue(\"TestingType\", \"testingTypeId\", \"TEST-3\", \"description\", \"Testing Type #3\"));\n            newValues.add(delegator.makeValue(\"TestingType\", \"testingTypeId\", \"TEST-4\", \"description\", \"Testing Type #4\"));\n            delegator.storeAll(newValues);\n\n            // finds a List of newly created values.  the second parameter specifies the fields to order results by.\n            List<GenericValue> newlyCreatedValues = delegator.findAll(\"TestingType\", UtilMisc.toList(\"testingTypeId\"));\n            TestCase.assertEquals(\"4 TestingTypes found\", 4, newlyCreatedValues.size());\n        } catch (GenericEntityException ex) {\n            TestCase.fail(ex.getMessage());\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testUpdateValue() throws Exception {\n        try {\n\n            // retrieve a sample GenericValue, make sure it's correct\n            GenericValue testValue = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"TEST-1\"));\n            TestCase.assertEquals(\"Retrieved value has the correct description\", testValue.getString(\"description\"), \"Testing Type #1\");\n\n            // now update and store it\n            testValue.put(\"description\", \"New Testing Type #1\");\n            testValue.store();\n\n            // now retrieve it again and make sure that the updated value is correct\n            testValue = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"TEST-1\"));\n            TestCase.assertEquals(\"Retrieved value has the correct description\", testValue.getString(\"description\"), \"New Testing Type #1\");\n\n        } catch (GenericEntityException ex) {\n            TestCase.fail(ex.getMessage());\n        }\n    }","id":100855,"modified_method":"public void testUpdateValue() throws Exception {\n        try {\n\n            // retrieve a sample GenericValue, make sure it's correct\n            GenericValue testValue = delegator.findByPrimaryKey(\"TestingType\", \"testingTypeId\", \"TEST-1\");\n            TestCase.assertEquals(\"Retrieved value has the correct description\", testValue.getString(\"description\"), \"Testing Type #1\");\n\n            // now update and store it\n            testValue.put(\"description\", \"New Testing Type #1\");\n            testValue.store();\n\n            // now retrieve it again and make sure that the updated value is correct\n            testValue = delegator.findByPrimaryKey(\"TestingType\", \"testingTypeId\", \"TEST-1\");\n            TestCase.assertEquals(\"Retrieved value has the correct description\", testValue.getString(\"description\"), \"New Testing Type #1\");\n\n        } catch (GenericEntityException ex) {\n            TestCase.fail(ex.getMessage());\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testNotLike() throws Exception {\n        EntityCondition cond  = new EntityExpr(\"description\", EntityOperator.NOT_LIKE, \"root%\");\n        List nodes = delegator.findByCondition(\"TestingNode\", cond, null, null);\n        TestCase.assertTrue(\"Found nodes\", nodes != null);\n\n        Iterator i = nodes.iterator();\n        while (i.hasNext()) {\n            GenericValue product = (GenericValue) i.next();\n            String nodeId = product.getString(\"description\");\n            Debug.logInfo(\"Testing name - \" + nodeId, module);\n            TestCase.assertTrue(\"No nodes starting w/ root\", !nodeId.startsWith(\"root\"));\n        }\n    }","id":100856,"modified_method":"public void testNotLike() throws Exception {\n        EntityCondition cond  = new EntityExpr(\"description\", EntityOperator.NOT_LIKE, \"root%\");\n        List<GenericValue> nodes = delegator.findByCondition(\"TestingNode\", cond, null, null);\n        TestCase.assertTrue(\"Found nodes\", nodes != null);\n\n        for (GenericValue product: nodes) {\n            String nodeId = product.getString(\"description\");\n            Debug.logInfo(\"Testing name - \" + nodeId, module);\n            TestCase.assertTrue(\"No nodes starting w/ root\", !nodeId.startsWith(\"root\"));\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testCreateManyAndStoreOneAtATime() throws Exception {\n        try {\n            for (int i = 0; i < TEST_COUNT; i++){\n                delegator.create(delegator.makeValue(\"Testing\", UtilMisc.toMap(\"testingId\", getTestId(\"T2-\", i))));\n            }\n            List newlyCreatedValues = delegator.findAll(\"Testing\", UtilMisc.toList(\"testingId\"));\n            TestCase.assertEquals(\"Test to create \" + TEST_COUNT + \" and store one at a time: \", TEST_COUNT, newlyCreatedValues.size());\n        } catch (GenericEntityException e){\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        }\n    }","id":100857,"modified_method":"public void testCreateManyAndStoreOneAtATime() throws Exception {\n        try {\n            for (int i = 0; i < TEST_COUNT; i++){\n                delegator.create(delegator.makeValue(\"Testing\", \"testingId\", getTestId(\"T2-\", i)));\n            }\n            List<GenericValue> newlyCreatedValues = delegator.findAll(\"Testing\", UtilMisc.toList(\"testingId\"));\n            TestCase.assertEquals(\"Test to create \" + TEST_COUNT + \" and store one at a time: \", TEST_COUNT, newlyCreatedValues.size());\n        } catch (GenericEntityException e){\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testCreateTree() throws Exception {\n        try {\n        // get how many child nodes did we have before creating the tree\n        EntityCondition isChild = new EntityExpr(\"primaryParentNodeId\", EntityOperator.NOT_EQUAL, GenericEntity.NULL_FIELD);\n        long alreadyStored = delegator.findCountByCondition(\"TestingNode\", isChild, null);\n\n        //\n        // The tree has a root, the root has level1max children.\n        //\n\n        // create the root\n        GenericValue root = delegator.create(\"TestingNode\",\n                UtilMisc.toMap(\n                        \"testingNodeId\", delegator.getNextSeqId(\"testingNodeId\"),\n                        \"primaryParentNodeId\", GenericEntity.NULL_FIELD,\n                        \"description\", \"root\")\n                );\n        int level1;\n        for(level1 = 0; level1 < _level1max; level1++) {\n            String nextSeqId = delegator.getNextSeqId(\"testingNodeId\");\n            GenericValue v =\n                delegator.create(\"TestingNode\",\n                    UtilMisc.toMap(\"testingNodeId\", nextSeqId,\n                                    \"primaryParentNodeId\", (String)root.get(\"testingNodeId\"),\n                                    \"description\", \"node-level #1\")\n                                );\n        }\n\n        long created = level1;\n        long newlyStored = delegator.findCountByCondition(\"TestingNode\", isChild, null);\n\n        // Normally, newlyStored = alreadyStored + created\n        TestCase.assertEquals(\"Created/Stored Nodes\", newlyStored, created + alreadyStored);\n        } catch(GenericEntityException e) {\n            Debug.logInfo(e.getMessage(), module);\n        }\n    }","id":100858,"modified_method":"public void testCreateTree() throws Exception {\n        try {\n        // get how many child nodes did we have before creating the tree\n        EntityCondition isChild = new EntityExpr(\"primaryParentNodeId\", EntityOperator.NOT_EQUAL, GenericEntity.NULL_FIELD);\n        long alreadyStored = delegator.findCountByCondition(\"TestingNode\", isChild, null);\n\n        //\n        // The tree has a root, the root has level1max children.\n        //\n\n        // create the root\n        GenericValue root = delegator.create(\"TestingNode\",\n                        \"testingNodeId\", delegator.getNextSeqId(\"testingNodeId\"),\n                        \"primaryParentNodeId\", GenericEntity.NULL_FIELD,\n                        \"description\", \"root\"\n                );\n        int level1;\n        for(level1 = 0; level1 < _level1max; level1++) {\n            String nextSeqId = delegator.getNextSeqId(\"testingNodeId\");\n            GenericValue v =\n                delegator.create(\"TestingNode\",\n                    \"testingNodeId\", nextSeqId,\n                                    \"primaryParentNodeId\", root.get(\"testingNodeId\"),\n                                    \"description\", \"node-level #1\"\n                                );\n        }\n\n        long created = level1;\n        long newlyStored = delegator.findCountByCondition(\"TestingNode\", isChild, null);\n\n        // Normally, newlyStored = alreadyStored + created\n        TestCase.assertEquals(\"Created/Stored Nodes\", newlyStored, created + alreadyStored);\n        } catch(GenericEntityException e) {\n            Debug.logInfo(e.getMessage(), module);\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testFindDistinct() throws Exception {\n        List exprList = UtilMisc.toList(\n                new EntityExpr(\"testingSize\", EntityOperator.EQUALS, new Long(10)),\n                new EntityExpr(\"comments\", EntityOperator.EQUALS, \"No-comments\")\n                );\n        EntityConditionList condition = new EntityConditionList(exprList, EntityOperator.AND);\n\n        EntityFindOptions findOptions = new EntityFindOptions();\n        findOptions.setDistinct(true);\n\n        List testingSize10 = delegator.findByCondition(\"Testing\", condition, null, UtilMisc.toList(\"testingSize\", \"comments\"), null, findOptions);\n        Debug.logInfo(\"testingSize10 is \" + testingSize10.size(), module);\n\n        TestCase.assertEquals(\"There should only be 1 result found by findDistinct()\", testingSize10.size(), 1);\n    }","id":100859,"modified_method":"public void testFindDistinct() throws Exception {\n        List<EntityExpr> exprList = UtilMisc.toList(\n                new EntityExpr(\"testingSize\", EntityOperator.EQUALS, new Long(10)),\n                new EntityExpr(\"comments\", EntityOperator.EQUALS, \"No-comments\")\n                );\n        EntityConditionList<EntityExpr> condition = new EntityConditionList<EntityExpr>(exprList, EntityOperator.AND);\n\n        EntityFindOptions findOptions = new EntityFindOptions();\n        findOptions.setDistinct(true);\n\n        List<GenericValue> testingSize10 = delegator.findByCondition(\"Testing\", condition, null, UtilMisc.toList(\"testingSize\", \"comments\"), null, findOptions);\n        Debug.logInfo(\"testingSize10 is \" + testingSize10.size(), module);\n\n        TestCase.assertEquals(\"There should only be 1 result found by findDistinct()\", testingSize10.size(), 1);\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testSetNullBlob() throws Exception {\n      try {\n          delegator.create(\"TestBlob\", UtilMisc.toMap(\"testBlobId\", \"null-blob\"));\n      } catch (GenericEntityException ex) {\n          assertTrue(\"GenericEntityException:\" + ex.toString(), false);\n          return;\n      } finally {\n          List allTestBlobs = delegator.findAll(\"TestBlob\");\n          delegator.removeAll(allTestBlobs);\n      }\n  }","id":100860,"modified_method":"public void testSetNullBlob() throws Exception {\n      try {\n          delegator.create(\"TestBlob\", \"testBlobId\", \"null-blob\");\n      } catch (GenericEntityException ex) {\n          assertTrue(\"GenericEntityException:\" + ex.toString(), false);\n          return;\n      } finally {\n          List<GenericValue> allTestBlobs = delegator.findAll(\"TestBlob\");\n          delegator.removeAll(allTestBlobs);\n      }\n  }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void testTransactionUtilRollback() throws Exception {\n        try {\n            GenericValue testValue = delegator.makeValue(\"Testing\", UtilMisc.toMap(\"testingId\", \"rollback-test\"));\n            boolean transBegin = TransactionUtil.begin();\n            delegator.create(testValue);\n            TransactionUtil.rollback(transBegin, null, null);\n            GenericValue testValueOut = delegator.findByPrimaryKey(\"Testing\", UtilMisc.toMap(\"testingId\", \"rollback-test\"));\n            assertEquals(\"Test that transaction rollback removes value: \", testValueOut, null);\n        } catch (GenericEntityException e) {\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        }\n    }","id":100861,"modified_method":"public void testTransactionUtilRollback() throws Exception {\n        try {\n            GenericValue testValue = delegator.makeValue(\"Testing\", \"testingId\", \"rollback-test\");\n            boolean transBegin = TransactionUtil.begin();\n            delegator.create(testValue);\n            TransactionUtil.rollback(transBegin, null, null);\n            GenericValue testValueOut = delegator.findByPrimaryKey(\"Testing\", \"testingId\", \"rollback-test\");\n            assertEquals(\"Test that transaction rollback removes value: \", testValueOut, null);\n        } catch (GenericEntityException e) {\n            assertTrue(\"GenericEntityException:\" + e.toString(), false);\n            return;\n        }\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public void closeAll() {\n        Set cacheKeys = dsCache.keySet();\n        Iterator i = cacheKeys.iterator();\n        while (i.hasNext()) {\n            String helperName = (String) i.next();\n            XAPoolDataSource pds = (XAPoolDataSource) dsCache.remove(helperName);\n            pds.close();   \n        }                                                                             \n    }","id":100862,"modified_method":"public void closeAll() {\n        for (String helperName: dsCache.keySet()) {\n            XAPoolDataSource pds = dsCache.remove(helperName);\n            pds.close();   \n        }                                                                             \n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public static String getPoolName(String helperName) throws GenericEntityException {\n        XAPoolDataSource pds = (XAPoolDataSource) dsCache.get(helperName);\n        if (pds == null) {\n            throw new GenericEntityException(\"No pool found for helper name [\" + helperName + \"]\");\n        }\n        return pds.getPoolDataString();\n    }","id":100863,"modified_method":"public static String getPoolName(String helperName) throws GenericEntityException {\n        XAPoolDataSource pds = dsCache.get(helperName);\n        if (pds == null) {\n            throw new GenericEntityException(\"No pool found for helper name [\" + helperName + \"]\");\n        }\n        return pds.getPoolDataString();\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public Connection getConnection(String helperName, Element jotmJdbcElement) throws SQLException, GenericEntityException {\n        XAPoolDataSource pds = (XAPoolDataSource) dsCache.get(helperName);        \n        if (pds != null) {                                  \n            return TransactionFactory.getCursorConnection(helperName, pds.getConnection());\n        }\n        \n        synchronized (MinervaConnectionFactory.class) {\n            pds = (XAPoolDataSource) dsCache.get(helperName);\n            if (pds != null) {                           \n                return pds.getConnection();\n            } else {\n                pds = new XAPoolDataSource();\n                pds.setPoolName(helperName);\n            }\n\n            XADataSourceImpl ds = new XADataSourceImpl();\n\n            if (ds == null)\n                throw new GenericEntityException(\"XADataSource was not created, big problem!\");\n            \n            ds.setDriver(jotmJdbcElement.getAttribute(\"jdbc-driver\"));\n            ds.setURL(jotmJdbcElement.getAttribute(\"jdbc-uri\"));\n            \n            String transIso = jotmJdbcElement.getAttribute(\"isolation-level\");\n            if (transIso != null && transIso.length() > 0) {\n                if (\"Serializable\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n                } else if (\"RepeatableRead\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\n                } else if (\"ReadUncommitted\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n                } else if (\"ReadCommitted\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n                } else if (\"None\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_NONE);\n                }                                            \n            }\n            \n            // set the datasource in the pool            \n            pds.setDataSource(ds);\n            pds.setJDBCUser(jotmJdbcElement.getAttribute(\"jdbc-username\"));\n            pds.setJDBCPassword(jotmJdbcElement.getAttribute(\"jdbc-password\"));\n            \n            // set the transaction manager in the pool\n            pds.setTransactionManager(TransactionFactory.getTransactionManager());\n            \n            // configure the pool settings\n            try {            \n                pds.setMaxSize(Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-maxsize\")));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-maxsize=\" + jotmJdbcElement.getAttribute(\"pool-maxsize\") + \"]; the values MUST be numbers, using default of 20.\", module);\n                pds.setMaxSize(20);\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                pds.setMaxSize(20);\n            }\n            try {            \n                pds.setMinSize(Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-minsize\")));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-minsize=\" + jotmJdbcElement.getAttribute(\"pool-minsize\") + \"]; the values MUST be numbers, using default of 5.\", module);\n                pds.setMinSize(2);\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                pds.setMinSize(2);\n            }\n                                  \n            // cache the pool\n            dsCache.put(helperName, pds);        \n                                                      \n            return TransactionFactory.getCursorConnection(helperName, pds.getConnection());\n        }                \n    }","id":100864,"modified_method":"public Connection getConnection(String helperName, Element jotmJdbcElement) throws SQLException, GenericEntityException {\n        XAPoolDataSource pds = dsCache.get(helperName);        \n        if (pds != null) {                                  \n            return TransactionFactory.getCursorConnection(helperName, pds.getConnection());\n        }\n        \n        synchronized (MinervaConnectionFactory.class) {\n            pds = dsCache.get(helperName);\n            if (pds != null) {                           \n                return pds.getConnection();\n            } else {\n                pds = new XAPoolDataSource();\n                pds.setPoolName(helperName);\n            }\n\n            XADataSourceImpl ds = new XADataSourceImpl();\n\n            if (ds == null)\n                throw new GenericEntityException(\"XADataSource was not created, big problem!\");\n            \n            ds.setDriver(jotmJdbcElement.getAttribute(\"jdbc-driver\"));\n            ds.setURL(jotmJdbcElement.getAttribute(\"jdbc-uri\"));\n            \n            String transIso = jotmJdbcElement.getAttribute(\"isolation-level\");\n            if (transIso != null && transIso.length() > 0) {\n                if (\"Serializable\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n                } else if (\"RepeatableRead\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\n                } else if (\"ReadUncommitted\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n                } else if (\"ReadCommitted\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n                } else if (\"None\".equals(transIso)) {\n                    pds.setTransactionIsolation(Connection.TRANSACTION_NONE);\n                }                                            \n            }\n            \n            // set the datasource in the pool            \n            pds.setDataSource(ds);\n            pds.setJDBCUser(jotmJdbcElement.getAttribute(\"jdbc-username\"));\n            pds.setJDBCPassword(jotmJdbcElement.getAttribute(\"jdbc-password\"));\n            \n            // set the transaction manager in the pool\n            pds.setTransactionManager(TransactionFactory.getTransactionManager());\n            \n            // configure the pool settings\n            try {            \n                pds.setMaxSize(Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-maxsize\")));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-maxsize=\" + jotmJdbcElement.getAttribute(\"pool-maxsize\") + \"]; the values MUST be numbers, using default of 20.\", module);\n                pds.setMaxSize(20);\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                pds.setMaxSize(20);\n            }\n            try {            \n                pds.setMinSize(Integer.parseInt(jotmJdbcElement.getAttribute(\"pool-minsize\")));\n            } catch (NumberFormatException nfe) {\n                Debug.logError(\"Problems with pool settings [pool-minsize=\" + jotmJdbcElement.getAttribute(\"pool-minsize\") + \"]; the values MUST be numbers, using default of 5.\", module);\n                pds.setMinSize(2);\n            } catch (Exception e) {\n                Debug.logError(e, \"Problems with pool settings\", module);\n                pds.setMinSize(2);\n            }\n                                  \n            // cache the pool\n            dsCache.put(helperName, pds);        \n                                                      \n            return TransactionFactory.getCursorConnection(helperName, pds.getConnection());\n        }                \n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Set getPooledData(String helperName) throws GenericEntityException {\n        XAPoolDataSource pds = (XAPoolDataSource) dsCache.get(helperName);\n        if (pds == null) {\n            throw new GenericEntityException(\"No pool found for helper name [\" + helperName + \"]\");\n        }\n        return pds.getPooledObjectRecords(0); // 0 to return all (in use and waiting)\n    }","id":100865,"modified_method":"public static Set getPooledData(String helperName) throws GenericEntityException {\n        XAPoolDataSource pds = dsCache.get(helperName);\n        if (pds == null) {\n            throw new GenericEntityException(\"No pool found for helper name [\" + helperName + \"]\");\n        }\n        return pds.getPooledObjectRecords(0); // 0 to return all (in use and waiting)\n    }","commit_id":"c02dd1f8a6d505bd372a8045454a6b70644b7779","url":"https://github.com/apache/ofbiz"},{"original_method":"@Test\n  public void configTest() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE,\n                                                      \"app\", \"flow\", \"flowlet\", \"configure\");\n    queueAdmin.create(queueName);\n\n    final List<ConsumerGroupConfig> groupConfigs = ImmutableList.of(\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(2L, 2, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(3L, 3, DequeueStrategy.FIFO, null)\n    );\n\n    final HBaseConsumerStateStore stateStore = ((HBaseQueueAdmin) queueAdmin).getConsumerStateStore(queueName);\n    try {\n      TransactionExecutor txExecutor = Transactions.createTransactionExecutor(executorFactory, stateStore);\n      // Intentionally set a row state for group 2, instance 0. It's for testing upgrade of config.\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          stateStore.updateState(2L, 0, QueueEntryRow.getQueueEntryRowKey(queueName, 10L, 0));\n        }\n      });\n\n      // Set the group info\n      configureGroups(queueName, groupConfigs);\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          for (ConsumerGroupConfig groupConfig : groupConfigs) {\n            long groupId = groupConfig.getGroupId();\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(groupId);\n            Assert.assertEquals(1, queueBarriers.size());\n\n            for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n              HBaseConsumerState state = stateStore.getState(groupId, instanceId);\n\n              if (groupId == 2L && instanceId == 0) {\n                // For group 2L instance 0, the start row shouldn't be changed.\n                // End row should be the same as the first barrier\n                Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(),\n                                                       QueueEntryRow.getQueueEntryRowKey(queueName, 10L, 0)));\n                Assert.assertEquals(0, Bytes.compareTo(state.getNextBarrier(),\n                                                       queueBarriers.get(0).getStartRow()));\n              } else {\n                // For other group, they should have the start row the same as the first barrier info\n                Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(),\n                                                       queueBarriers.get(0).getStartRow()));\n              }\n            }\n          }\n        }\n      });\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          // Check consumers are all processed up to the barrier boundary\n          for (long groupId = 1L; groupId <= 3L; groupId++) {\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(groupId);\n            boolean allConsumed = stateStore.isAllConsumed(groupId, queueBarriers.get(0).getStartRow());\n            // For group 2, instance 0 is not consumed up to the boundary yet\n            Assert.assertTrue(groupId == 2L ? !allConsumed : allConsumed);\n\n            if (groupId == 2L) {\n              // Mark group 2, instance 0 as completed the barrier.\n              stateStore.completed(groupId, 0);\n            }\n          }\n        }\n      });\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          // After group 2, instance 0 completed the current barrier, all consumers in group 2 should be able to\n          // proceed\n          List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(2L);\n          byte[] startRow = stateStore.getState(2L, 0).getStartRow();\n          Assert.assertEquals(0, Bytes.compareTo(startRow, queueBarriers.get(0).getStartRow()));\n          Assert.assertTrue(stateStore.isAllConsumed(2L, startRow));\n        }\n      });\n\n      // Add instance to group 2\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          stateStore.configureInstances(2L, 3);\n        }\n      });\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(2L);\n          Assert.assertEquals(2, queueBarriers.size());\n\n          // For existing instances, the start row shouldn't changed.\n          for (int instanceId = 0; instanceId < 2; instanceId++) {\n            HBaseConsumerState state = stateStore.getState(2L, instanceId);\n            Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(), queueBarriers.get(0).getStartRow()));\n            Assert.assertEquals(0, Bytes.compareTo(state.getNextBarrier(), queueBarriers.get(1).getStartRow()));\n\n            // Complete the existing instance\n            stateStore.completed(2L, instanceId);\n          }\n\n          // For new instances, the start row should be the same as the new barrier\n          HBaseConsumerState state = stateStore.getState(2L, 2);\n          Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(), queueBarriers.get(1).getStartRow()));\n          Assert.assertNull(state.getNextBarrier());\n\n          // All instances should be consumed up to the beginning of the last barrier info\n          Assert.assertTrue(stateStore.isAllConsumed(2L, queueBarriers.get(1).getStartRow()));\n        }\n      });\n\n      // Reduce instances of group 2 through group reconfiguration, remove group 1 and 3, add group 4.\n      configureGroups(queueName, ImmutableList.of(new ConsumerGroupConfig(2L, 1, DequeueStrategy.FIFO, null),\n                                                  new ConsumerGroupConfig(4L, 1, DequeueStrategy.FIFO, null))\n      );\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          // States and barrier info for removed groups should be gone\n          try {\n            // There should be no barrier info for group 1\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(1L);\n            Assert.assertTrue(queueBarriers.isEmpty());\n            stateStore.getState(1L, 0);\n            Assert.fail(\"Not expected to get state for group 1\");\n          } catch (Exception e) {\n            // Expected\n          }\n          try {\n            // There should be no barrier info for group 3\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(3L);\n            Assert.assertTrue(queueBarriers.isEmpty());\n            stateStore.getState(3L, 0);\n            Assert.fail(\"Not expected to get state for group 3\");\n          } catch (Exception e) {\n            // Expected\n          }\n          // For group 2, there should be two barrier infos,\n          // since all consumers passed the first barrier (groupSize = 2). Only the size = 3 and size = 1 left\n          List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(2L);\n          Assert.assertEquals(2, queueBarriers.size());\n\n          // Make all consumers (3 of them before reconfigure) in group 2 consumes everything\n          for (int instanceId = 0; instanceId < 3; instanceId++) {\n            stateStore.completed(2L, instanceId);\n          }\n\n          // For the remaining consumer, it should start consuming from the latest barrier\n          HBaseConsumerState state = stateStore.getState(2L, 0);\n          Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(),\n                                                 queueBarriers.get(1).getStartRow()));\n          Assert.assertNull(state.getNextBarrier());\n\n          // For removed instances, they should throw exception when retrieving their states\n          for (int i = 1; i < 3; i++) {\n            try {\n              stateStore.getState(2L, i);\n              Assert.fail(\"Not expected to get state for group 2, instance \" + i);\n            } catch (Exception e) {\n              // Expected\n            }\n          }\n        }\n      });\n    } finally {\n      stateStore.close();\n      queueAdmin.dropAllInNamespace(Constants.DEFAULT_NAMESPACE_ID);\n    }\n  }","id":100866,"modified_method":"@Test\n  public void configTest() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE,\n                                                      \"app\", \"flow\", \"flowlet\", \"configure\");\n    queueAdmin.create(queueName);\n\n    final List<ConsumerGroupConfig> groupConfigs = ImmutableList.of(\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(2L, 2, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(3L, 3, DequeueStrategy.FIFO, null)\n    );\n\n    try (HBaseConsumerStateStore stateStore = ((HBaseQueueAdmin) queueAdmin).getConsumerStateStore(queueName)) {\n      TransactionExecutor txExecutor = Transactions.createTransactionExecutor(executorFactory, stateStore);\n      // Intentionally set a row state for group 2, instance 0. It's for testing upgrade of config.\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          stateStore.updateState(2L, 0, QueueEntryRow.getQueueEntryRowKey(queueName, 10L, 0));\n        }\n      });\n\n      // Set the group info\n      configureGroups(queueName, groupConfigs);\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          for (ConsumerGroupConfig groupConfig : groupConfigs) {\n            long groupId = groupConfig.getGroupId();\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(groupId);\n            Assert.assertEquals(1, queueBarriers.size());\n\n            for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n              HBaseConsumerState state = stateStore.getState(groupId, instanceId);\n\n              if (groupId == 2L && instanceId == 0) {\n                // For group 2L instance 0, the start row shouldn't be changed.\n                // End row should be the same as the first barrier\n                Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(),\n                                                       QueueEntryRow.getQueueEntryRowKey(queueName, 10L, 0)));\n                Assert.assertEquals(0, Bytes.compareTo(state.getNextBarrier(),\n                                                       queueBarriers.get(0).getStartRow()));\n              } else {\n                // For other group, they should have the start row the same as the first barrier info\n                Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(),\n                                                       queueBarriers.get(0).getStartRow()));\n              }\n            }\n          }\n        }\n      });\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          // Check consumers are all processed up to the barrier boundary\n          for (long groupId = 1L; groupId <= 3L; groupId++) {\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(groupId);\n            boolean allConsumed = stateStore.isAllConsumed(groupId, queueBarriers.get(0).getStartRow());\n            // For group 2, instance 0 is not consumed up to the boundary yet\n            Assert.assertTrue(groupId == 2L ? !allConsumed : allConsumed);\n\n            if (groupId == 2L) {\n              // Mark group 2, instance 0 as completed the barrier.\n              stateStore.completed(groupId, 0);\n            }\n          }\n        }\n      });\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          // After group 2, instance 0 completed the current barrier, all consumers in group 2 should be able to\n          // proceed\n          List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(2L);\n          byte[] startRow = stateStore.getState(2L, 0).getStartRow();\n          Assert.assertEquals(0, Bytes.compareTo(startRow, queueBarriers.get(0).getStartRow()));\n          Assert.assertTrue(stateStore.isAllConsumed(2L, startRow));\n        }\n      });\n\n      // Add instance to group 2\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          stateStore.configureInstances(2L, 3);\n        }\n      });\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(2L);\n          Assert.assertEquals(2, queueBarriers.size());\n\n          // For existing instances, the start row shouldn't changed.\n          for (int instanceId = 0; instanceId < 2; instanceId++) {\n            HBaseConsumerState state = stateStore.getState(2L, instanceId);\n            Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(), queueBarriers.get(0).getStartRow()));\n            Assert.assertEquals(0, Bytes.compareTo(state.getNextBarrier(), queueBarriers.get(1).getStartRow()));\n\n            // Complete the existing instance\n            stateStore.completed(2L, instanceId);\n          }\n\n          // For new instances, the start row should be the same as the new barrier\n          HBaseConsumerState state = stateStore.getState(2L, 2);\n          Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(), queueBarriers.get(1).getStartRow()));\n          Assert.assertNull(state.getNextBarrier());\n\n          // All instances should be consumed up to the beginning of the last barrier info\n          Assert.assertTrue(stateStore.isAllConsumed(2L, queueBarriers.get(1).getStartRow()));\n        }\n      });\n\n      // Reduce instances of group 2 through group reconfiguration, remove group 1 and 3, add group 4.\n      configureGroups(queueName, ImmutableList.of(new ConsumerGroupConfig(2L, 1, DequeueStrategy.FIFO, null),\n                                                  new ConsumerGroupConfig(4L, 1, DequeueStrategy.FIFO, null))\n      );\n\n      txExecutor.execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          // States and barrier info for removed groups should be gone\n          try {\n            // There should be no barrier info for group 1\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(1L);\n            Assert.assertTrue(queueBarriers.isEmpty());\n            stateStore.getState(1L, 0);\n            Assert.fail(\"Not expected to get state for group 1\");\n          } catch (Exception e) {\n            // Expected\n          }\n          try {\n            // There should be no barrier info for group 3\n            List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(3L);\n            Assert.assertTrue(queueBarriers.isEmpty());\n            stateStore.getState(3L, 0);\n            Assert.fail(\"Not expected to get state for group 3\");\n          } catch (Exception e) {\n            // Expected\n          }\n          // For group 2, there should be two barrier infos,\n          // since all consumers passed the first barrier (groupSize = 2). Only the size = 3 and size = 1 left\n          List<QueueBarrier> queueBarriers = stateStore.getAllBarriers(2L);\n          Assert.assertEquals(2, queueBarriers.size());\n\n          // Make all consumers (3 of them before reconfigure) in group 2 consumes everything\n          for (int instanceId = 0; instanceId < 3; instanceId++) {\n            stateStore.completed(2L, instanceId);\n          }\n\n          // For the remaining consumer, it should start consuming from the latest barrier\n          HBaseConsumerState state = stateStore.getState(2L, 0);\n          Assert.assertEquals(0, Bytes.compareTo(state.getStartRow(),\n                                                 queueBarriers.get(1).getStartRow()));\n          Assert.assertNull(state.getNextBarrier());\n\n          // For removed instances, they should throw exception when retrieving their states\n          for (int i = 1; i < 3; i++) {\n            try {\n              stateStore.getState(2L, i);\n              Assert.fail(\"Not expected to get state for group 2, instance \" + i);\n            } catch (Exception e) {\n              // Expected\n            }\n          }\n        }\n      });\n    } finally {\n      queueAdmin.dropAllInNamespace(Constants.DEFAULT_NAMESPACE_ID);\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test (timeout = 30000L)\n  public void testQueueUpgrade() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"upgrade\");\n    HBaseQueueAdmin hbaseQueueAdmin = (HBaseQueueAdmin) queueAdmin;\n    HBaseQueueClientFactory hBaseQueueClientFactory = (HBaseQueueClientFactory) queueClientFactory;\n\n    // Create the old queue table explicitly\n    HBaseQueueAdmin oldQueueAdmin = new HBaseQueueAdmin(hConf, cConf, injector.getInstance(LocationFactory.class),\n                                                        injector.getInstance(HBaseTableUtil.class),\n                                                        injector.getInstance(DatasetFramework.class),\n                                                        injector.getInstance(TransactionExecutorFactory.class),\n                                                        QueueConstants.QueueType.QUEUE);\n    oldQueueAdmin.create(queueName);\n\n    int buckets = cConf.getInt(QueueConstants.ConfigKeys.QUEUE_TABLE_PRESPLITS);\n    final HBaseQueueProducer oldProducer = hBaseQueueClientFactory.createProducer(\n      oldQueueAdmin, queueName, QueueConstants.QueueType.QUEUE,\n      QueueMetrics.NOOP_QUEUE_METRICS, new SaltedHBaseQueueStrategy(buckets), ImmutableList.<ConsumerGroupConfig>of());\n    try {\n      // Enqueue 10 items to old queue table\n      Transactions.createTransactionExecutor(executorFactory, oldProducer)\n        .execute(new TransactionExecutor.Subroutine() {\n          @Override\n          public void apply() throws Exception {\n            for (int i = 0; i < 10; i++) {\n              oldProducer.enqueue(new QueueEntry(\"key\", i, Bytes.toBytes(\"Message \" + i)));\n            }\n          }\n        });\n    } finally {\n      oldProducer.close();\n    }\n\n    // Configure the consumer\n    final ConsumerConfig consumerConfig = new ConsumerConfig(0L, 0, 1, DequeueStrategy.HASH, \"key\");\n    final QueueConfigurer configurer = queueAdmin.getQueueConfigurer(queueName);\n    try {\n      Transactions.createTransactionExecutor(executorFactory, configurer).execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          configurer.configureGroups(ImmutableList.of(consumerConfig));\n        }\n      });\n    } finally {\n      configurer.close();\n    }\n\n    // explicit set the consumer state to be the lowest start row\n    final HBaseConsumerStateStore stateStore = hbaseQueueAdmin.getConsumerStateStore(queueName);\n    try {\n      Transactions.createTransactionExecutor(executorFactory, stateStore).execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          stateStore.updateState(consumerConfig.getGroupId(), consumerConfig.getInstanceId(),\n                                 QueueEntryRow.getQueueEntryRowKey(queueName, 0L, 0));\n        }\n      });\n    } finally {\n      stateStore.close();\n    }\n\n    // Enqueue 10 more items to new queue table\n    createEnqueueRunnable(queueName, 10, 1, null).run();\n\n    // Verify both old and new table have 10 rows each\n    Assert.assertEquals(10, countRows(hbaseQueueAdmin.getDataTableId(queueName,\n                                                                     QueueConstants.QueueType.QUEUE)));\n    Assert.assertEquals(10, countRows(hbaseQueueAdmin.getDataTableId(queueName,\n                                                                     QueueConstants.QueueType.SHARDED_QUEUE)));\n\n    // Create a consumer. It should see all 20 items\n    final List<String> messages = Lists.newArrayList();\n    final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n    try {\n      while (messages.size() != 20) {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> result = consumer.dequeue(20);\n              for (byte[] data : result) {\n                messages.add(Bytes.toString(data));\n              }\n            }\n          });\n      }\n    } finally {\n      configurer.close();\n    }\n\n    verifyQueueIsEmpty(queueName, ImmutableList.of(consumerConfig));\n  }","id":100867,"modified_method":"@Test (timeout = 30000L)\n  public void testQueueUpgrade() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"upgrade\");\n    HBaseQueueAdmin hbaseQueueAdmin = (HBaseQueueAdmin) queueAdmin;\n    HBaseQueueClientFactory hBaseQueueClientFactory = (HBaseQueueClientFactory) queueClientFactory;\n\n    // Create the old queue table explicitly\n    HBaseQueueAdmin oldQueueAdmin = new HBaseQueueAdmin(hConf, cConf, injector.getInstance(LocationFactory.class),\n                                                        injector.getInstance(HBaseTableUtil.class),\n                                                        injector.getInstance(DatasetFramework.class),\n                                                        injector.getInstance(TransactionExecutorFactory.class),\n                                                        QueueConstants.QueueType.QUEUE);\n    oldQueueAdmin.create(queueName);\n\n    int buckets = cConf.getInt(QueueConstants.ConfigKeys.QUEUE_TABLE_PRESPLITS);\n    try (\n      final HBaseQueueProducer oldProducer = hBaseQueueClientFactory.createProducer(\n        oldQueueAdmin, queueName, QueueConstants.QueueType.QUEUE,\n        QueueMetrics.NOOP_QUEUE_METRICS, new SaltedHBaseQueueStrategy(buckets), new ArrayList<ConsumerGroupConfig>());\n    ) {\n      // Enqueue 10 items to old queue table\n      Transactions.createTransactionExecutor(executorFactory, oldProducer)\n        .execute(new TransactionExecutor.Subroutine() {\n          @Override\n          public void apply() throws Exception {\n            for (int i = 0; i < 10; i++) {\n              oldProducer.enqueue(new QueueEntry(\"key\", i, Bytes.toBytes(\"Message \" + i)));\n            }\n          }\n        });\n    }\n\n    // Configure the consumer\n    final ConsumerConfig consumerConfig = new ConsumerConfig(0L, 0, 1, DequeueStrategy.HASH, \"key\");\n    try (QueueConfigurer configurer = queueAdmin.getQueueConfigurer(queueName)) {\n      Transactions.createTransactionExecutor(executorFactory, configurer).execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          configurer.configureGroups(ImmutableList.of(consumerConfig));\n        }\n      });\n    }\n\n    // explicit set the consumer state to be the lowest start row\n    try (HBaseConsumerStateStore stateStore = hbaseQueueAdmin.getConsumerStateStore(queueName)) {\n      Transactions.createTransactionExecutor(executorFactory, stateStore).execute(new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          stateStore.updateState(consumerConfig.getGroupId(), consumerConfig.getInstanceId(),\n                                 QueueEntryRow.getQueueEntryRowKey(queueName, 0L, 0));\n        }\n      });\n    }\n\n    // Enqueue 10 more items to new queue table\n    createEnqueueRunnable(queueName, 10, 1, null).run();\n\n    // Verify both old and new table have 10 rows each\n    Assert.assertEquals(10, countRows(hbaseQueueAdmin.getDataTableId(queueName,\n                                                                     QueueConstants.QueueType.QUEUE)));\n    Assert.assertEquals(10, countRows(hbaseQueueAdmin.getDataTableId(queueName,\n                                                                     QueueConstants.QueueType.SHARDED_QUEUE)));\n\n    // Create a consumer. It should see all 20 items\n    final List<String> messages = Lists.newArrayList();\n    try (final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n      while (messages.size() != 20) {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> result = consumer.dequeue(20);\n              for (byte[] data : result) {\n                messages.add(Bytes.toString(data));\n              }\n            }\n          });\n      }\n    }\n\n    verifyQueueIsEmpty(queueName, ImmutableList.of(consumerConfig));\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test (timeout = 30000L)\n  public void testReconfigure() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE,\n                                                      \"app\", \"flow\", \"flowlet\", \"changeinstances\");\n    ConsumerGroupConfig groupConfig = new ConsumerGroupConfig(0L, 2, DequeueStrategy.HASH, \"key\");\n    configureGroups(queueName, ImmutableList.of(groupConfig));\n\n    // Enqueue 10 items\n    createEnqueueRunnable(queueName, 10, 1, null).run();\n\n    // Map from instance id to items dequeued\n    final Multimap<Integer, Integer> dequeued = ArrayListMultimap.create();\n\n    // Consume 2 items for each consumer instances\n    for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n      final ConsumerConfig consumerConfig = new ConsumerConfig(groupConfig, instanceId);\n      final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n      try {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> result = consumer.dequeue(2);\n              Assert.assertEquals(2, result.size());\n              for (byte[] data : result) {\n                dequeued.put(consumerConfig.getInstanceId(), Bytes.toInt(data));\n              }\n            }\n          });\n      } finally {\n        consumer.close();\n      }\n    }\n\n    // Increase number of instances to 3\n    changeInstances(queueName, 0L, 3);\n\n    // Enqueue 10 more items\n    createEnqueueRunnable(queueName, 10, 1, null).run();\n\n    groupConfig = new ConsumerGroupConfig(0L, 3, DequeueStrategy.HASH, \"key\");\n\n    // Dequeue everything\n    while (dequeued.size() != 20) {\n      for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n        final ConsumerConfig consumerConfig = new ConsumerConfig(groupConfig, instanceId);\n        final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n        try {\n          Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n            .execute(new TransactionExecutor.Subroutine() {\n              @Override\n              public void apply() throws Exception {\n                for (byte[] data : consumer.dequeue(20)) {\n                  dequeued.put(consumerConfig.getInstanceId(), Bytes.toInt(data));\n                }\n              }\n            });\n        } finally {\n          consumer.close();\n        }\n      }\n    }\n\n    // Instance 0 should see all evens before change instances\n    Assert.assertEquals(ImmutableList.of(0, 2, 4, 6, 8, 0, 3, 6, 9), dequeued.get(0));\n    // Instance 1 should see all odds before change instances\n    Assert.assertEquals(ImmutableList.of(1, 3, 5, 7, 9, 1, 4, 7), dequeued.get(1));\n    // Instance 2 should only see entries after change instances\n    Assert.assertEquals(ImmutableList.of(2, 5, 8), dequeued.get(2));\n\n    // All consumers should have empty dequeue now\n    for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n      final ConsumerConfig consumerConfig = new ConsumerConfig(groupConfig, instanceId);\n      final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n      try {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> result = consumer.dequeue(20);\n              Assert.assertTrue(result.isEmpty());\n            }\n          });\n      } finally {\n        consumer.close();\n      }\n    }\n\n    // Enqueue 6 more items for the 3 instances\n    createEnqueueRunnable(queueName, 6, 1, null).run();\n\n    // Reduce to 1 consumer\n    changeInstances(queueName, 0L, 1);\n\n    // The consumer 0 should be able to consume all 10 new items\n    dequeued.clear();\n    final ConsumerConfig consumerConfig = new ConsumerConfig(0L, 0, 1, DequeueStrategy.HASH, \"key\");\n    final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n    while (dequeued.size() != 6) {\n      Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n        .execute(new TransactionExecutor.Subroutine() {\n          @Override\n          public void apply() throws Exception {\n            for (byte[] data : consumer.dequeue(1)) {\n              dequeued.put(consumerConfig.getInstanceId(), Bytes.toInt(data));\n            }\n          }\n        });\n    }\n\n    Assert.assertEquals(ImmutableList.of(0, 1, 2, 3, 4, 5), dequeued.get(0));\n  }","id":100868,"modified_method":"@Test (timeout = 30000L)\n  public void testReconfigure() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE,\n                                                      \"app\", \"flow\", \"flowlet\", \"changeinstances\");\n    ConsumerGroupConfig groupConfig = new ConsumerGroupConfig(0L, 2, DequeueStrategy.HASH, \"key\");\n    configureGroups(queueName, ImmutableList.of(groupConfig));\n\n    // Enqueue 10 items\n    createEnqueueRunnable(queueName, 10, 1, null).run();\n\n    // Map from instance id to items dequeued\n    final Multimap<Integer, Integer> dequeued = ArrayListMultimap.create();\n\n    // Consume 2 items for each consumer instances\n    for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n      final ConsumerConfig consumerConfig = new ConsumerConfig(groupConfig, instanceId);\n      try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> result = consumer.dequeue(2);\n              Assert.assertEquals(2, result.size());\n              for (byte[] data : result) {\n                dequeued.put(consumerConfig.getInstanceId(), Bytes.toInt(data));\n              }\n            }\n          });\n      }\n    }\n\n    // Increase number of instances to 3\n    changeInstances(queueName, 0L, 3);\n\n    // Enqueue 10 more items\n    createEnqueueRunnable(queueName, 10, 1, null).run();\n\n    groupConfig = new ConsumerGroupConfig(0L, 3, DequeueStrategy.HASH, \"key\");\n\n    // Dequeue everything\n    while (dequeued.size() != 20) {\n      for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n        final ConsumerConfig consumerConfig = new ConsumerConfig(groupConfig, instanceId);\n        try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n          Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n            .execute(new TransactionExecutor.Subroutine() {\n              @Override\n              public void apply() throws Exception {\n                for (byte[] data : consumer.dequeue(20)) {\n                  dequeued.put(consumerConfig.getInstanceId(), Bytes.toInt(data));\n                }\n              }\n            });\n        }\n      }\n    }\n\n    // Instance 0 should see all evens before change instances\n    Assert.assertEquals(ImmutableList.of(0, 2, 4, 6, 8, 0, 3, 6, 9), dequeued.get(0));\n    // Instance 1 should see all odds before change instances\n    Assert.assertEquals(ImmutableList.of(1, 3, 5, 7, 9, 1, 4, 7), dequeued.get(1));\n    // Instance 2 should only see entries after change instances\n    Assert.assertEquals(ImmutableList.of(2, 5, 8), dequeued.get(2));\n\n    // All consumers should have empty dequeue now\n    for (int instanceId = 0; instanceId < groupConfig.getGroupSize(); instanceId++) {\n      final ConsumerConfig consumerConfig = new ConsumerConfig(groupConfig, instanceId);\n      try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> result = consumer.dequeue(20);\n              Assert.assertTrue(result.isEmpty());\n            }\n          });\n      }\n    }\n\n    // Enqueue 6 more items for the 3 instances\n    createEnqueueRunnable(queueName, 6, 1, null).run();\n\n    // Reduce to 1 consumer\n    changeInstances(queueName, 0L, 1);\n\n    // The consumer 0 should be able to consume all 10 new items\n    dequeued.clear();\n    final ConsumerConfig consumerConfig = new ConsumerConfig(0L, 0, 1, DequeueStrategy.HASH, \"key\");\n    try (final QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n      while (dequeued.size() != 6) {\n        Transactions.createTransactionExecutor(executorFactory, (TransactionAware) consumer)\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              for (byte[] data : consumer.dequeue(1)) {\n                dequeued.put(consumerConfig.getInstanceId(), Bytes.toInt(data));\n              }\n            }\n          });\n      }\n    }\n\n    Assert.assertEquals(ImmutableList.of(0, 1, 2, 3, 4, 5), dequeued.get(0));\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test(timeout = TIMEOUT_MS)\n  public void testQueueAbortRetrySkip() throws Exception {\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"queuefailure\");\n    configureGroups(queueName, ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.HASH, \"key\")\n    ));\n\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null),\n      new ConsumerConfig(1, 0, 1, DequeueStrategy.HASH, \"key\")\n    );\n\n    createEnqueueRunnable(queueName, 5, 1, null).run();\n\n    QueueConsumer fifoConsumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 2);\n    QueueConsumer hashConsumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 2);\n\n    TransactionContext txContext = createTxContext(fifoConsumer, hashConsumer);\n    txContext.start();\n\n    Assert.assertEquals(0, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n    Assert.assertEquals(0, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n\n    // Abort the consumer transaction\n    txContext.abort();\n\n    // Dequeue again in a new transaction, should see the same entries\n    txContext.start();\n    Assert.assertEquals(0, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n    Assert.assertEquals(0, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n    txContext.finish();\n\n    // Dequeue again, now should get next entry\n    txContext.start();\n    Assert.assertEquals(1, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n    Assert.assertEquals(1, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n    txContext.finish();\n\n    // Dequeue a result and abort.\n    txContext.start();\n    DequeueResult<byte[]> fifoResult = fifoConsumer.dequeue();\n    DequeueResult<byte[]> hashResult = hashConsumer.dequeue();\n\n    Assert.assertEquals(2, Bytes.toInt(fifoResult.iterator().next()));\n    Assert.assertEquals(2, Bytes.toInt(hashResult.iterator().next()));\n    txContext.abort();\n\n    // Now skip the result with a new transaction.\n    txContext.start();\n    fifoResult.reclaim();\n    hashResult.reclaim();\n    txContext.finish();\n\n    // Dequeue again, it should see a new entry\n    txContext.start();\n    Assert.assertEquals(3, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n    Assert.assertEquals(3, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n    txContext.finish();\n\n    // Dequeue again, it should see a new entry\n    txContext.start();\n    Assert.assertEquals(4, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n    Assert.assertEquals(4, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n    txContext.finish();\n\n    fifoConsumer.close();\n    hashConsumer.close();\n\n    verifyQueueIsEmpty(queueName, consumerConfigs);\n  }","id":100869,"modified_method":"@Test(timeout = TIMEOUT_MS)\n  public void testQueueAbortRetrySkip() throws Exception {\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"queuefailure\");\n    configureGroups(queueName, ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.HASH, \"key\")\n    ));\n\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null),\n      new ConsumerConfig(1, 0, 1, DequeueStrategy.HASH, \"key\")\n    );\n\n    createEnqueueRunnable(queueName, 5, 1, null).run();\n\n    try (\n      QueueConsumer fifoConsumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 2);\n      QueueConsumer hashConsumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 2)\n    ) {\n\n      TransactionContext txContext = createTxContext(fifoConsumer, hashConsumer);\n      txContext.start();\n\n      Assert.assertEquals(0, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n      Assert.assertEquals(0, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n\n      // Abort the consumer transaction\n      txContext.abort();\n\n      // Dequeue again in a new transaction, should see the same entries\n      txContext.start();\n      Assert.assertEquals(0, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n      Assert.assertEquals(0, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n      txContext.finish();\n\n      // Dequeue again, now should get next entry\n      txContext.start();\n      Assert.assertEquals(1, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n      Assert.assertEquals(1, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n      txContext.finish();\n\n      // Dequeue a result and abort.\n      txContext.start();\n      DequeueResult<byte[]> fifoResult = fifoConsumer.dequeue();\n      DequeueResult<byte[]> hashResult = hashConsumer.dequeue();\n\n      Assert.assertEquals(2, Bytes.toInt(fifoResult.iterator().next()));\n      Assert.assertEquals(2, Bytes.toInt(hashResult.iterator().next()));\n      txContext.abort();\n\n      // Now skip the result with a new transaction.\n      txContext.start();\n      fifoResult.reclaim();\n      hashResult.reclaim();\n      txContext.finish();\n\n      // Dequeue again, it should see a new entry\n      txContext.start();\n      Assert.assertEquals(3, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n      Assert.assertEquals(3, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n      txContext.finish();\n\n      // Dequeue again, it should see a new entry\n      txContext.start();\n      Assert.assertEquals(4, Bytes.toInt(fifoConsumer.dequeue().iterator().next()));\n      Assert.assertEquals(4, Bytes.toInt(hashConsumer.dequeue().iterator().next()));\n      txContext.finish();\n    }\n\n    verifyQueueIsEmpty(queueName, consumerConfigs);\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"protected void verifyQueueIsEmpty(QueueName queueName, List<ConsumerConfig> consumerConfigs) throws Exception {\n    // Verify the queue is empty\n    Set<ConsumerGroupConfig> groupConfigs = Sets.newHashSet();\n    for (ConsumerConfig consumerConfig : consumerConfigs) {\n      QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, -1);\n\n      groupConfigs.add(new ConsumerGroupConfig(consumerConfig));\n      TransactionContext txContext = createTxContext(consumer);\n      try {\n        txContext.start();\n        Assert.assertTrue(consumer.dequeue().isEmpty());\n        txContext.finish();\n      } catch (TransactionFailureException e) {\n        txContext.abort();\n        throw Throwables.propagate(e);\n      } finally {\n        consumer.close();\n      }\n    }\n\n    forceEviction(queueName, groupConfigs.size());\n\n    long newGroupId = groupConfigs.size();\n    groupConfigs.add(new ConsumerGroupConfig(newGroupId, 1, DequeueStrategy.FIFO, null));\n    configureGroups(queueName, groupConfigs);\n\n    // the queue has been consumed by n consumers. Use a consumerId greater than n to make sure it can dequeue.\n    ConsumerConfig consumerConfig = new ConsumerConfig(newGroupId, 0, 1, DequeueStrategy.FIFO, null);\n    resetConsumerState(queueName, consumerConfig);\n    QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, -1);\n\n    TransactionContext txContext = createTxContext(consumer);\n    txContext.start();\n    DequeueResult<byte[]> result = consumer.dequeue();\n    if (!result.isEmpty()) {\n      StringBuilder resultString = new StringBuilder();\n      for (byte[] aResult : result) {\n        if (resultString.length() > 0) {\n          resultString.append(\", \");\n        }\n        resultString.append(Bytes.toInt(aResult));\n      }\n      LOG.info(\"Queue should be empty but returned result: {}, value = \", result, resultString);\n    }\n    Assert.assertTrue(\"Entire queue should be evicted after test but dequeue succeeds.\", result.isEmpty());\n    txContext.abort();\n  }","id":100870,"modified_method":"protected void verifyQueueIsEmpty(QueueName queueName, List<ConsumerConfig> consumerConfigs) throws Exception {\n    // Verify the queue is empty\n    Set<ConsumerGroupConfig> groupConfigs = Sets.newHashSet();\n    for (ConsumerConfig consumerConfig : consumerConfigs) {\n      try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, -1)) {\n        groupConfigs.add(new ConsumerGroupConfig(consumerConfig));\n        TransactionContext txContext = createTxContext(consumer);\n        try {\n          txContext.start();\n          Assert.assertTrue(consumer.dequeue().isEmpty());\n          txContext.finish();\n        } catch (TransactionFailureException e) {\n          txContext.abort();\n          throw Throwables.propagate(e);\n        }\n      }\n    }\n\n    forceEviction(queueName, groupConfigs.size());\n\n    long newGroupId = groupConfigs.size();\n    groupConfigs.add(new ConsumerGroupConfig(newGroupId, 1, DequeueStrategy.FIFO, null));\n    configureGroups(queueName, groupConfigs);\n\n    // the queue has been consumed by n consumers. Use a consumerId greater than n to make sure it can dequeue.\n    ConsumerConfig consumerConfig = new ConsumerConfig(newGroupId, 0, 1, DequeueStrategy.FIFO, null);\n    resetConsumerState(queueName, consumerConfig);\n    try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, -1)) {\n      TransactionContext txContext = createTxContext(consumer);\n      txContext.start();\n      DequeueResult<byte[]> result = consumer.dequeue();\n      if (!result.isEmpty()) {\n        StringBuilder resultString = new StringBuilder();\n        for (byte[] aResult : result) {\n          if (resultString.length() > 0) {\n            resultString.append(\", \");\n          }\n          resultString.append(Bytes.toInt(aResult));\n        }\n        LOG.info(\"Queue should be empty but returned result: {}, value = \", result, resultString);\n      }\n      Assert.assertTrue(\"Entire queue should be evicted after test but dequeue succeeds.\", result.isEmpty());\n      txContext.abort();\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"private void enqueueDequeue(final QueueName queueName, int preEnqueueCount,\n                              int concurrentCount, int enqueueBatchSize,\n                              int consumerSize, DequeueStrategy dequeueStrategy,\n                              final int dequeueBatchSize) throws Exception {\n\n    ConsumerGroupConfig groupConfig = new ConsumerGroupConfig(0L, consumerSize, dequeueStrategy, \"key\");\n    configureGroups(queueName, ImmutableList.of(groupConfig));\n\n    Preconditions.checkArgument(preEnqueueCount % enqueueBatchSize == 0, \"Count must be divisible by enqueueBatchSize\");\n    Preconditions.checkArgument(concurrentCount % enqueueBatchSize == 0, \"Count must be divisible by enqueueBatchSize\");\n\n    final List<ConsumerConfig> consumerConfigs = Lists.newArrayList();\n    for (int i = 0; i < consumerSize; i++) {\n      consumerConfigs.add(new ConsumerConfig(groupConfig, i));\n    }\n\n    createEnqueueRunnable(queueName, preEnqueueCount, enqueueBatchSize, null).run();\n\n    final CyclicBarrier startBarrier = new CyclicBarrier(consumerSize + 2);\n    ExecutorService executor = Executors.newFixedThreadPool(consumerSize + 1);\n\n    // Enqueue thread\n    executor.submit(createEnqueueRunnable(queueName, concurrentCount, enqueueBatchSize, startBarrier));\n\n    // Dequeue\n    final long expectedSum = ((long) preEnqueueCount / 2 * ((long) preEnqueueCount - 1)) +\n                             ((long) concurrentCount / 2 * ((long) concurrentCount - 1));\n    final AtomicLong valueSum = new AtomicLong();\n    final CountDownLatch completeLatch = new CountDownLatch(consumerSize);\n\n    for (int i = 0; i < consumerSize; i++) {\n      final int instanceId = i;\n      executor.submit(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            startBarrier.await();\n            LOG.info(\"Consumer {} starts consuming {}\", instanceId, queueName.getSimpleName());\n            QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(instanceId), 1);\n            try {\n              TransactionContext txContext = createTxContext(consumer);\n\n              Stopwatch stopwatch = new Stopwatch();\n              stopwatch.start();\n\n              int dequeueCount = 0;\n              while (valueSum.get() < expectedSum) {\n                txContext.start();\n\n                try {\n                  DequeueResult<byte[]> result = consumer.dequeue(dequeueBatchSize);\n                  txContext.finish();\n\n                  if (result.isEmpty()) {\n                    continue;\n                  }\n\n                  for (byte[] data : result) {\n                    valueSum.addAndGet(Bytes.toInt(data));\n                    dequeueCount++;\n                  }\n                } catch (TransactionFailureException e) {\n                  LOG.error(\"Operation error\", e);\n                  txContext.abort();\n                  throw Throwables.propagate(e);\n                }\n              }\n\n              long elapsed = stopwatch.elapsedTime(TimeUnit.MILLISECONDS);\n              LOG.info(\"Dequeue {} entries in {} ms for {}\", dequeueCount, elapsed, queueName.getSimpleName());\n              LOG.info(\"Dequeue avg {} entries per seconds for {}\",\n                       (double) dequeueCount * 1000 / elapsed, queueName.getSimpleName());\n              consumer.close();\n\n              completeLatch.countDown();\n            } finally {\n              consumer.close();\n            }\n          } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n          }\n        }\n      });\n    }\n\n    startBarrier.await();\n    completeLatch.await();\n\n    Assert.assertEquals(expectedSum, valueSum.get());\n\n    // Only check eviction for queue.\n    if (!queueName.isStream()) {\n      verifyQueueIsEmpty(queueName, consumerConfigs);\n    }\n    executor.shutdownNow();\n  }","id":100871,"modified_method":"private void enqueueDequeue(final QueueName queueName, int preEnqueueCount,\n                              int concurrentCount, int enqueueBatchSize,\n                              int consumerSize, DequeueStrategy dequeueStrategy,\n                              final int dequeueBatchSize) throws Exception {\n\n    ConsumerGroupConfig groupConfig = new ConsumerGroupConfig(0L, consumerSize, dequeueStrategy, \"key\");\n    configureGroups(queueName, ImmutableList.of(groupConfig));\n\n    Preconditions.checkArgument(preEnqueueCount % enqueueBatchSize == 0, \"Count must be divisible by enqueueBatchSize\");\n    Preconditions.checkArgument(concurrentCount % enqueueBatchSize == 0, \"Count must be divisible by enqueueBatchSize\");\n\n    final List<ConsumerConfig> consumerConfigs = Lists.newArrayList();\n    for (int i = 0; i < consumerSize; i++) {\n      consumerConfigs.add(new ConsumerConfig(groupConfig, i));\n    }\n\n    createEnqueueRunnable(queueName, preEnqueueCount, enqueueBatchSize, null).run();\n\n    final CyclicBarrier startBarrier = new CyclicBarrier(consumerSize + 2);\n    ExecutorService executor = Executors.newFixedThreadPool(consumerSize + 1);\n\n    // Enqueue thread\n    executor.submit(createEnqueueRunnable(queueName, concurrentCount, enqueueBatchSize, startBarrier));\n\n    // Dequeue\n    final long expectedSum = ((long) preEnqueueCount / 2 * ((long) preEnqueueCount - 1)) +\n                             ((long) concurrentCount / 2 * ((long) concurrentCount - 1));\n    final AtomicLong valueSum = new AtomicLong();\n    final CountDownLatch completeLatch = new CountDownLatch(consumerSize);\n\n    for (int i = 0; i < consumerSize; i++) {\n      final int instanceId = i;\n      executor.submit(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            startBarrier.await();\n            LOG.info(\"Consumer {} starts consuming {}\", instanceId, queueName.getSimpleName());\n            try (\n              QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(instanceId), 1)\n            ) {\n              TransactionContext txContext = createTxContext(consumer);\n\n              Stopwatch stopwatch = new Stopwatch();\n              stopwatch.start();\n\n              int dequeueCount = 0;\n              while (valueSum.get() < expectedSum) {\n                txContext.start();\n\n                try {\n                  DequeueResult<byte[]> result = consumer.dequeue(dequeueBatchSize);\n                  txContext.finish();\n\n                  if (result.isEmpty()) {\n                    continue;\n                  }\n\n                  for (byte[] data : result) {\n                    valueSum.addAndGet(Bytes.toInt(data));\n                    dequeueCount++;\n                  }\n                } catch (TransactionFailureException e) {\n                  LOG.error(\"Operation error\", e);\n                  txContext.abort();\n                  throw Throwables.propagate(e);\n                }\n              }\n\n              long elapsed = stopwatch.elapsedTime(TimeUnit.MILLISECONDS);\n              LOG.info(\"Dequeue {} entries in {} ms for {}\", dequeueCount, elapsed, queueName.getSimpleName());\n              LOG.info(\"Dequeue avg {} entries per seconds for {}\",\n                       (double) dequeueCount * 1000 / elapsed, queueName.getSimpleName());\n              consumer.close();\n\n              completeLatch.countDown();\n            }\n          } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n          }\n        }\n      });\n    }\n\n    startBarrier.await();\n    completeLatch.await();\n\n    Assert.assertEquals(expectedSum, valueSum.get());\n\n    // Only check eviction for queue.\n    if (!queueName.isStream()) {\n      verifyQueueIsEmpty(queueName, consumerConfigs);\n    }\n    executor.shutdownNow();\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testMultiStageConsumer() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\",\n                                                      \"multistage\");\n    ConsumerGroupConfig groupConfig = new ConsumerGroupConfig(0L, 2, DequeueStrategy.HASH, \"key\");\n    configureGroups(queueName, ImmutableList.of(groupConfig));\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(groupConfig, 0),\n      new ConsumerConfig(groupConfig, 1)\n    );\n\n    // Enqueue 10 items\n    final QueueProducer producer = queueClientFactory.createProducer(queueName);\n    for (int i = 0; i < 10; i++) {\n      TransactionContext txContext = createTxContext(producer);\n      txContext.start();\n      producer.enqueue(new QueueEntry(\"key\", i, Bytes.toBytes(i)));\n      txContext.finish();\n    }\n\n    // Consumer all even entries\n    QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 1);\n\n    for (int i = 0; i < 5; i++) {\n      TransactionContext txContext = createTxContext(consumer);\n      txContext.start();\n      DequeueResult<byte[]> result = consumer.dequeue();\n      Assert.assertTrue(!result.isEmpty());\n      Assert.assertEquals(i * 2, Bytes.toInt(result.iterator().next()));\n      txContext.finish();\n    }\n\n    consumer.close();\n\n    // Consume 2 odd entries\n    consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 1);\n    TransactionContext txContext = createTxContext(consumer);\n    txContext.start();\n    DequeueResult<byte[]> result = consumer.dequeue(2);\n    Assert.assertEquals(2, result.size());\n    Iterator<byte[]> iter = result.iterator();\n    for (int i = 0; i < 2; i++) {\n      Assert.assertEquals(i * 2 + 1, Bytes.toInt(iter.next()));\n    }\n    txContext.finish();\n\n    // Close the consumer and re-create with the same instance ID, it should keep consuming\n    consumer.close();\n\n    // Consume the rest odd entries\n    consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 1);\n    for (int i = 2; i < 5; i++) {\n      txContext = createTxContext(consumer);\n      txContext.start();\n      result = consumer.dequeue();\n      Assert.assertTrue(!result.isEmpty());\n      Assert.assertEquals(i * 2 + 1, Bytes.toInt(result.iterator().next()));\n      txContext.finish();\n    }\n  }","id":100872,"modified_method":"@Test\n  public void testMultiStageConsumer() throws Exception {\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\",\n                                                      \"multistage\");\n    ConsumerGroupConfig groupConfig = new ConsumerGroupConfig(0L, 2, DequeueStrategy.HASH, \"key\");\n    configureGroups(queueName, ImmutableList.of(groupConfig));\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(groupConfig, 0),\n      new ConsumerConfig(groupConfig, 1)\n    );\n\n    // Enqueue 10 items\n    try (QueueProducer producer = queueClientFactory.createProducer(queueName)) {\n      for (int i = 0; i < 10; i++) {\n        TransactionContext txContext = createTxContext(producer);\n        txContext.start();\n        producer.enqueue(new QueueEntry(\"key\", i, Bytes.toBytes(i)));\n        txContext.finish();\n      }\n    }\n\n    // Consumer all even entries\n    try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 1)) {\n      for (int i = 0; i < 5; i++) {\n        TransactionContext txContext = createTxContext(consumer);\n        txContext.start();\n        DequeueResult<byte[]> result = consumer.dequeue();\n        Assert.assertTrue(!result.isEmpty());\n        Assert.assertEquals(i * 2, Bytes.toInt(result.iterator().next()));\n        txContext.finish();\n      }\n    }\n\n    // Consume 2 odd entries\n    try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 1)) {\n      TransactionContext txContext = createTxContext(consumer);\n      txContext.start();\n      DequeueResult<byte[]> result = consumer.dequeue(2);\n      Assert.assertEquals(2, result.size());\n      Iterator<byte[]> iter = result.iterator();\n      for (int i = 0; i < 2; i++) {\n        Assert.assertEquals(i * 2 + 1, Bytes.toInt(iter.next()));\n      }\n      txContext.finish();\n    }\n\n    // Close the consumer and re-create with the same instance ID, it should keep consuming\n    // Consume the rest odd entries\n    try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 1)) {\n      for (int i = 2; i < 5; i++) {\n        TransactionContext txContext = createTxContext(consumer);\n        txContext.start();\n        DequeueResult<byte[]> result = consumer.dequeue();\n        Assert.assertTrue(!result.isEmpty());\n        Assert.assertEquals(i * 2 + 1, Bytes.toInt(result.iterator().next()));\n        txContext.finish();\n      }\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testDropAllQueues() throws Exception {\n    // create a queue and a stream and enqueue one entry each\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"myApp\", \"myFlow\", \"myFlowlet\", \"tDAQ\");\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n    configureGroups(queueName, ImmutableList.of(consumerConfig));\n\n    final QueueProducer qProducer = queueClientFactory.createProducer(queueName);\n    executorFactory.createExecutor(Lists.newArrayList((TransactionAware) qProducer))\n                   .execute(new TransactionExecutor.Subroutine() {\n                     @Override\n                     public void apply() throws Exception {\n                       qProducer.enqueue(new QueueEntry(Bytes.toBytes(\"q42\")));\n                     }\n                   });\n    // drop all queues\n    queueAdmin.dropAllInNamespace(Constants.DEFAULT_NAMESPACE_ID);\n    // verify that queue is gone and stream is still there\n    configureGroups(queueName, ImmutableList.of(consumerConfig));\n    final QueueConsumer qConsumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n    executorFactory.createExecutor(Lists.newArrayList((TransactionAware) qConsumer))\n                   .execute(new TransactionExecutor.Subroutine() {\n                     @Override\n                     public void apply() throws Exception {\n                       DequeueResult<byte[]> dequeue = qConsumer.dequeue();\n                       Assert.assertTrue(dequeue.isEmpty());\n                     }\n                   });\n  }","id":100873,"modified_method":"@Test\n  public void testDropAllQueues() throws Exception {\n    // create a queue and a stream and enqueue one entry each\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"myApp\", \"myFlow\", \"myFlowlet\", \"tDAQ\");\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n    configureGroups(queueName, ImmutableList.of(consumerConfig));\n\n    try (final QueueProducer qProducer = queueClientFactory.createProducer(queueName)) {\n      executorFactory.createExecutor(Lists.newArrayList((TransactionAware) qProducer))\n        .execute(new TransactionExecutor.Subroutine() {\n          @Override\n          public void apply() throws Exception {\n            qProducer.enqueue(new QueueEntry(Bytes.toBytes(\"q42\")));\n          }\n        });\n      // drop all queues\n      queueAdmin.dropAllInNamespace(Constants.DEFAULT_NAMESPACE_ID);\n      // verify that queue is gone and stream is still there\n      configureGroups(queueName, ImmutableList.of(consumerConfig));\n      try (final QueueConsumer qConsumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n        executorFactory.createExecutor(Lists.newArrayList((TransactionAware) qConsumer))\n          .execute(new TransactionExecutor.Subroutine() {\n            @Override\n            public void apply() throws Exception {\n              DequeueResult<byte[]> dequeue = qConsumer.dequeue();\n              Assert.assertTrue(dequeue.isEmpty());\n            }\n          });\n      }\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"private void testOneEnqueueDequeue(DequeueStrategy strategy) throws Exception {\n    // since this is used by more than one test method, ensure uniqueness of the queue name by adding strategy\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\",\n                                                \"queue1\" + strategy.toString());\n    configureGroups(queueName, ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, strategy, null),\n      new ConsumerGroupConfig(1L, 1, strategy, null)\n    ));\n\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(0L, 0, 1, strategy, null),\n      new ConsumerConfig(1L, 0, 1, strategy, null)\n    );\n    QueueProducer producer = queueClientFactory.createProducer(queueName);\n    TransactionContext txContext = createTxContext(producer);\n    txContext.start();\n    producer.enqueue(new QueueEntry(Bytes.toBytes(55)));\n    txContext.finish();\n\n    QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 2);\n\n    txContext = createTxContext(consumer);\n    txContext.start();\n    Assert.assertEquals(55, Bytes.toInt(consumer.dequeue().iterator().next()));\n    txContext.finish();\n\n    producer.close();\n    consumer.close();\n\n    forceEviction(queueName, 2);\n\n    // verifying that consumer of the 2nd group can process items: they were not evicted\n    QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 2);\n\n    txContext = createTxContext(consumer2);\n    txContext.start();\n    Assert.assertEquals(55, Bytes.toInt(consumer2.dequeue().iterator().next()));\n    txContext.finish();\n\n    consumer2.close();\n\n    // now all should be evicted\n    verifyQueueIsEmpty(queueName, consumerConfigs);\n  }","id":100874,"modified_method":"private void testOneEnqueueDequeue(DequeueStrategy strategy) throws Exception {\n    // since this is used by more than one test method, ensure uniqueness of the queue name by adding strategy\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\",\n                                                \"queue1\" + strategy.toString());\n    configureGroups(queueName, ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, strategy, null),\n      new ConsumerGroupConfig(1L, 1, strategy, null)\n    ));\n\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(0L, 0, 1, strategy, null),\n      new ConsumerConfig(1L, 0, 1, strategy, null)\n    );\n\n    try (QueueProducer producer = queueClientFactory.createProducer(queueName)) {\n      TransactionContext txContext = createTxContext(producer);\n      txContext.start();\n      producer.enqueue(new QueueEntry(Bytes.toBytes(55)));\n      txContext.finish();\n\n      try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 2)) {\n        txContext = createTxContext(consumer);\n        txContext.start();\n        Assert.assertEquals(55, Bytes.toInt(consumer.dequeue().iterator().next()));\n        txContext.finish();\n      }\n    }\n\n    forceEviction(queueName, 2);\n\n    // verifying that consumer of the 2nd group can process items: they were not evicted\n    try (QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 2)) {\n      TransactionContext txContext = createTxContext(consumer2);\n      txContext.start();\n      Assert.assertEquals(55, Bytes.toInt(consumer2.dequeue().iterator().next()));\n      txContext.finish();\n    }\n\n    // now all should be evicted\n    verifyQueueIsEmpty(queueName, consumerConfigs);\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"private void testClearOrDropAllForFlow(boolean doDrop) throws Exception {\n    // this test is the same for clear and drop, except for two small places...\n    // using a different app name for each case as this test leaves some entries\n    String app = doDrop ? \"tDAFF\" : \"tCAFF\";\n\n    QueueName queueName1 = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, app, \"flow1\", \"flowlet1\", \"out1\");\n    QueueName queueName2 = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, app, \"flow1\", \"flowlet2\", \"out2\");\n    QueueName queueName3 = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, app, \"flow2\", \"flowlet1\", \"out\");\n\n    List<ConsumerGroupConfig> groupConfigs = ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null)\n    );\n\n    configureGroups(queueName1, groupConfigs);\n    configureGroups(queueName2, groupConfigs);\n    configureGroups(queueName3, groupConfigs);\n    QueueProducer producer1 = queueClientFactory.createProducer(queueName1);\n    QueueProducer producer2 = queueClientFactory.createProducer(queueName2);\n    QueueProducer producer3 = queueClientFactory.createProducer(queueName3);\n    TransactionContext txContext = createTxContext(producer1, producer2, producer3);\n    txContext.start();\n    for (int i = 0; i < 10; i++) {\n      for (QueueProducer producer : Arrays.asList(producer1, producer2, producer3)) {\n        producer.enqueue(new QueueEntry(Bytes.toBytes(i)));\n      }\n    }\n    txContext.finish();\n\n    // consume 1 element from each queue\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n    QueueConsumer consumer1 = queueClientFactory.createConsumer(queueName1, consumerConfig, 1);\n    QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName2, consumerConfig, 1);\n    QueueConsumer consumer3 = queueClientFactory.createConsumer(queueName3, consumerConfig, 1);\n    txContext = createTxContext(consumer1, consumer2, consumer3);\n    txContext.start();\n    for (QueueConsumer consumer : Arrays.asList(consumer1, consumer2, consumer3)) {\n      DequeueResult<byte[]> result = consumer.dequeue(1);\n      Assert.assertFalse(result.isEmpty());\n      Assert.assertArrayEquals(Bytes.toBytes(0), result.iterator().next());\n    }\n    txContext.finish();\n\n    // verify the consumer config was deleted\n    verifyConsumerConfigExists(queueName1, queueName2);\n\n    // clear/drop all queues for flow1\n    Id.Flow flow1Id = Id.Flow.from(Constants.DEFAULT_NAMESPACE, app, \"flow1\");\n    if (doDrop) {\n      queueAdmin.dropAllForFlow(flow1Id);\n    } else {\n      queueAdmin.clearAllForFlow(flow1Id);\n    }\n\n    if (doDrop) {\n      // verify that only flow2's queues still exist\n      Assert.assertFalse(queueAdmin.exists(queueName1));\n      Assert.assertFalse(queueAdmin.exists(queueName2));\n      Assert.assertTrue(queueAdmin.exists(queueName3));\n    } else {\n      // verify all queues still exist\n      Assert.assertTrue(queueAdmin.exists(queueName1));\n      Assert.assertTrue(queueAdmin.exists(queueName2));\n      Assert.assertTrue(queueAdmin.exists(queueName3));\n    }\n    // verify the consumer config was deleted\n    verifyConsumerConfigIsDeleted(queueName1, queueName2);\n\n    // create new consumers because existing ones may have pre-fetched and cached some entries\n    configureGroups(queueName1, groupConfigs);\n    configureGroups(queueName2, groupConfigs);\n\n    consumer1 = queueClientFactory.createConsumer(queueName1, consumerConfig, 1);\n    consumer2 = queueClientFactory.createConsumer(queueName2, consumerConfig, 1);\n    consumer3 = queueClientFactory.createConsumer(queueName3, consumerConfig, 1);\n\n    txContext = createTxContext(consumer1, consumer2, consumer3);\n    txContext.start();\n    // attempt to consume from flow1's queues, should be empty\n    for (QueueConsumer consumer : Arrays.asList(consumer1, consumer2)) {\n      DequeueResult<byte[]> result = consumer.dequeue(1);\n      Assert.assertTrue(result.isEmpty());\n    }\n    // but flow2 was not deleted -> consumer 3 should get another entry\n    DequeueResult<byte[]> result = consumer3.dequeue(1);\n    Assert.assertFalse(result.isEmpty());\n    Assert.assertArrayEquals(Bytes.toBytes(1), result.iterator().next());\n    txContext.finish();\n  }","id":100875,"modified_method":"private void testClearOrDropAllForFlow(boolean doDrop) throws Exception {\n    // this test is the same for clear and drop, except for two small places...\n    // using a different app name for each case as this test leaves some entries\n    String app = doDrop ? \"tDAFF\" : \"tCAFF\";\n\n    QueueName queueName1 = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, app, \"flow1\", \"flowlet1\", \"out1\");\n    QueueName queueName2 = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, app, \"flow1\", \"flowlet2\", \"out2\");\n    QueueName queueName3 = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, app, \"flow2\", \"flowlet1\", \"out\");\n\n    List<ConsumerGroupConfig> groupConfigs = ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null)\n    );\n\n    configureGroups(queueName1, groupConfigs);\n    configureGroups(queueName2, groupConfigs);\n    configureGroups(queueName3, groupConfigs);\n\n    try (\n      QueueProducer producer1 = queueClientFactory.createProducer(queueName1);\n      QueueProducer producer2 = queueClientFactory.createProducer(queueName2);\n      QueueProducer producer3 = queueClientFactory.createProducer(queueName3)\n    ) {\n      TransactionContext txContext = createTxContext(producer1, producer2, producer3);\n      txContext.start();\n      for (int i = 0; i < 10; i++) {\n        for (QueueProducer producer : Arrays.asList(producer1, producer2, producer3)) {\n          producer.enqueue(new QueueEntry(Bytes.toBytes(i)));\n        }\n      }\n      txContext.finish();\n    }\n\n    // consume 1 element from each queue\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n    try (\n      QueueConsumer consumer1 = queueClientFactory.createConsumer(queueName1, consumerConfig, 1);\n      QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName2, consumerConfig, 1);\n      QueueConsumer consumer3 = queueClientFactory.createConsumer(queueName3, consumerConfig, 1)\n    ) {\n      TransactionContext txContext = createTxContext(consumer1, consumer2, consumer3);\n      txContext.start();\n      for (QueueConsumer consumer : Arrays.asList(consumer1, consumer2, consumer3)) {\n        DequeueResult<byte[]> result = consumer.dequeue(1);\n        Assert.assertFalse(result.isEmpty());\n        Assert.assertArrayEquals(Bytes.toBytes(0), result.iterator().next());\n      }\n      txContext.finish();\n    }\n\n    // verify the consumer config was deleted\n    verifyConsumerConfigExists(queueName1, queueName2);\n\n    // clear/drop all queues for flow1\n    Id.Flow flow1Id = Id.Flow.from(Constants.DEFAULT_NAMESPACE, app, \"flow1\");\n    if (doDrop) {\n      queueAdmin.dropAllForFlow(flow1Id);\n    } else {\n      queueAdmin.clearAllForFlow(flow1Id);\n    }\n\n    if (doDrop) {\n      // verify that only flow2's queues still exist\n      Assert.assertFalse(queueAdmin.exists(queueName1));\n      Assert.assertFalse(queueAdmin.exists(queueName2));\n      Assert.assertTrue(queueAdmin.exists(queueName3));\n    } else {\n      // verify all queues still exist\n      Assert.assertTrue(queueAdmin.exists(queueName1));\n      Assert.assertTrue(queueAdmin.exists(queueName2));\n      Assert.assertTrue(queueAdmin.exists(queueName3));\n    }\n    // verify the consumer config was deleted\n    verifyConsumerConfigIsDeleted(queueName1, queueName2);\n\n    // create new consumers because existing ones may have pre-fetched and cached some entries\n    configureGroups(queueName1, groupConfigs);\n    configureGroups(queueName2, groupConfigs);\n\n    try (\n      QueueConsumer consumer1 = queueClientFactory.createConsumer(queueName1, consumerConfig, 1);\n      QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName2, consumerConfig, 1);\n      QueueConsumer consumer3 = queueClientFactory.createConsumer(queueName3, consumerConfig, 1)\n    ) {\n      TransactionContext txContext = createTxContext(consumer1, consumer2, consumer3);\n      txContext.start();\n      // attempt to consume from flow1's queues, should be empty\n      for (QueueConsumer consumer : Arrays.asList(consumer1, consumer2)) {\n        DequeueResult<byte[]> result = consumer.dequeue(1);\n        Assert.assertTrue(result.isEmpty());\n      }\n      // but flow2 was not deleted -> consumer 3 should get another entry\n      DequeueResult<byte[]> result = consumer3.dequeue(1);\n      Assert.assertFalse(result.isEmpty());\n      Assert.assertArrayEquals(Bytes.toBytes(1), result.iterator().next());\n      txContext.finish();\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"protected Runnable createEnqueueRunnable(final QueueName queueName, final int count,\n                                           final int batchSize, final CyclicBarrier barrier) {\n    return new Runnable() {\n\n      @Override\n      public void run() {\n        try {\n          if (barrier != null) {\n            barrier.await();\n          }\n          QueueProducer producer = queueClientFactory.createProducer(queueName);\n          try {\n            TransactionContext txContext = createTxContext(producer);\n\n            LOG.info(\"Start enqueue {} entries.\", count);\n\n            Stopwatch stopwatch = new Stopwatch();\n            stopwatch.start();\n\n            // Pre-Enqueue\n            int batches = count / batchSize;\n            List<QueueEntry> queueEntries = Lists.newArrayListWithCapacity(batchSize);\n            // include some negative hash values and some positive ones\n            int hashValueMultiplier = -1;\n            for (int i = 0; i < batches; i++) {\n              txContext.start();\n\n              try {\n                queueEntries.clear();\n                for (int j = 0; j < batchSize; j++) {\n                  int val = i * batchSize + j;\n                  byte[] queueData = Bytes.toBytes(val);\n                  queueEntries.add(new QueueEntry(\"key\", hashValueMultiplier * val, queueData));\n                  hashValueMultiplier *= -1;\n                }\n\n                producer.enqueue(queueEntries);\n                txContext.finish();\n              } catch (TransactionFailureException e) {\n                LOG.error(\"Operation error\", e);\n                txContext.abort();\n                throw Throwables.propagate(e);\n              }\n            }\n\n            long elapsed = stopwatch.elapsedTime(TimeUnit.MILLISECONDS);\n            LOG.info(\"Enqueue {} entries in {} ms for {}\", count, elapsed, queueName.getSimpleName());\n            LOG.info(\"Enqueue avg {} entries per seconds for {}\",\n                     (double) count * 1000 / elapsed, queueName.getSimpleName());\n            stopwatch.stop();\n          } finally {\n            producer.close();\n          }\n        } catch (Exception e) {\n          LOG.error(e.getMessage(), e);\n        }\n      }\n    };\n  }","id":100876,"modified_method":"protected Runnable createEnqueueRunnable(final QueueName queueName, final int count,\n                                           final int batchSize, final CyclicBarrier barrier) {\n    return new Runnable() {\n\n      @Override\n      public void run() {\n        try {\n          if (barrier != null) {\n            barrier.await();\n          }\n          try (QueueProducer producer = queueClientFactory.createProducer(queueName)) {\n            TransactionContext txContext = createTxContext(producer);\n\n            LOG.info(\"Start enqueue {} entries.\", count);\n\n            Stopwatch stopwatch = new Stopwatch();\n            stopwatch.start();\n\n            // Pre-Enqueue\n            int batches = count / batchSize;\n            List<QueueEntry> queueEntries = Lists.newArrayListWithCapacity(batchSize);\n            // include some negative hash values and some positive ones\n            int hashValueMultiplier = -1;\n            for (int i = 0; i < batches; i++) {\n              txContext.start();\n\n              try {\n                queueEntries.clear();\n                for (int j = 0; j < batchSize; j++) {\n                  int val = i * batchSize + j;\n                  byte[] queueData = Bytes.toBytes(val);\n                  queueEntries.add(new QueueEntry(\"key\", hashValueMultiplier * val, queueData));\n                  hashValueMultiplier *= -1;\n                }\n\n                producer.enqueue(queueEntries);\n                txContext.finish();\n              } catch (TransactionFailureException e) {\n                LOG.error(\"Operation error\", e);\n                txContext.abort();\n                throw Throwables.propagate(e);\n              }\n            }\n\n            long elapsed = stopwatch.elapsedTime(TimeUnit.MILLISECONDS);\n            LOG.info(\"Enqueue {} entries in {} ms for {}\", count, elapsed, queueName.getSimpleName());\n            LOG.info(\"Enqueue avg {} entries per seconds for {}\",\n                     (double) count * 1000 / elapsed, queueName.getSimpleName());\n            stopwatch.stop();\n          }\n        } catch (Exception e) {\n          LOG.error(e.getMessage(), e);\n        }\n      }\n    };\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testReset() throws Exception {\n    // NOTE: using different name of the queue from other unit-tests because this test leaves entries\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"queueReset\");\n    configureGroups(queueName, ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null)\n    ));\n\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null),\n      new ConsumerConfig(1, 0, 1, DequeueStrategy.FIFO, null)\n    );\n\n    QueueProducer producer = queueClientFactory.createProducer(queueName);\n    TransactionContext txContext = createTxContext(producer);\n    txContext.start();\n    producer.enqueue(new QueueEntry(Bytes.toBytes(0)));\n    producer.enqueue(new QueueEntry(Bytes.toBytes(1)));\n    producer.enqueue(new QueueEntry(Bytes.toBytes(2)));\n    producer.enqueue(new QueueEntry(Bytes.toBytes(3)));\n    producer.enqueue(new QueueEntry(Bytes.toBytes(4)));\n    txContext.finish();\n\n    QueueConsumer consumer1 = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 2);\n\n    // Check that there's smth in the queue, but do not consume: abort tx after check\n    txContext = createTxContext(consumer1);\n    txContext.start();\n    Assert.assertEquals(0, Bytes.toInt(consumer1.dequeue().iterator().next()));\n    txContext.finish();\n\n    // Reset queues\n    queueAdmin.dropAllInNamespace(Constants.DEFAULT_NAMESPACE_ID);\n\n    // we gonna need another one to check again to avoid caching side-affects\n    configureGroups(queueName, ImmutableList.of(new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null)));\n    QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 2);\n    txContext = createTxContext(consumer2);\n    // Check again: should be nothing in the queue\n    txContext.start();\n    Assert.assertTrue(consumer2.dequeue().isEmpty());\n    txContext.finish();\n\n    // add another entry\n    txContext = createTxContext(producer);\n    txContext.start();\n    producer.enqueue(new QueueEntry(Bytes.toBytes(5)));\n    txContext.finish();\n\n    txContext = createTxContext(consumer2);\n    // Check again: consumer should see new entry\n    txContext.start();\n    Assert.assertEquals(5, Bytes.toInt(consumer2.dequeue().iterator().next()));\n    txContext.finish();\n  }","id":100877,"modified_method":"@Test\n  public void testReset() throws Exception {\n    // NOTE: using different name of the queue from other unit-tests because this test leaves entries\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"queueReset\");\n    configureGroups(queueName, ImmutableList.of(\n      new ConsumerGroupConfig(0L, 1, DequeueStrategy.FIFO, null),\n      new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null)\n    ));\n\n    List<ConsumerConfig> consumerConfigs = ImmutableList.of(\n      new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null),\n      new ConsumerConfig(1, 0, 1, DequeueStrategy.FIFO, null)\n    );\n\n    try (QueueProducer producer = queueClientFactory.createProducer(queueName)) {\n      TransactionContext txContext = createTxContext(producer);\n      txContext.start();\n      producer.enqueue(new QueueEntry(Bytes.toBytes(0)));\n      producer.enqueue(new QueueEntry(Bytes.toBytes(1)));\n      producer.enqueue(new QueueEntry(Bytes.toBytes(2)));\n      producer.enqueue(new QueueEntry(Bytes.toBytes(3)));\n      producer.enqueue(new QueueEntry(Bytes.toBytes(4)));\n      txContext.finish();\n\n      try (QueueConsumer consumer1 = queueClientFactory.createConsumer(queueName, consumerConfigs.get(0), 2)) {\n        // Check that there's smth in the queue, but do not consume: abort tx after check\n        txContext = createTxContext(consumer1);\n        txContext.start();\n        Assert.assertEquals(0, Bytes.toInt(consumer1.dequeue().iterator().next()));\n        txContext.finish();\n      }\n\n      // Reset queues\n      queueAdmin.dropAllInNamespace(Constants.DEFAULT_NAMESPACE_ID);\n\n      // we gonna need another one to check again to avoid caching side-affects\n      configureGroups(queueName, ImmutableList.of(new ConsumerGroupConfig(1L, 1, DequeueStrategy.FIFO, null)));\n      try (QueueConsumer consumer2 = queueClientFactory.createConsumer(queueName, consumerConfigs.get(1), 2)) {\n        txContext = createTxContext(consumer2);\n        // Check again: should be nothing in the queue\n        txContext.start();\n        Assert.assertTrue(consumer2.dequeue().isEmpty());\n        txContext.finish();\n\n        // add another entry\n        txContext = createTxContext(producer);\n        txContext.start();\n        producer.enqueue(new QueueEntry(Bytes.toBytes(5)));\n        txContext.finish();\n\n        txContext = createTxContext(consumer2);\n        // Check again: consumer should see new entry\n        txContext.start();\n        Assert.assertEquals(5, Bytes.toInt(consumer2.dequeue().iterator().next()));\n        txContext.finish();\n      }\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Category(SlowTests.class)\n  @Test\n  public void testConcurrentEnqueue() throws Exception {\n    // This test is for testing multiple producers that writes with a delay after a transaction started.\n    // This is for verifying consumer advances the startKey correctly.\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\",\n                                                      \"concurrent\");\n    configureGroups(queueName, ImmutableList.of(new ConsumerGroupConfig(0, 1, DequeueStrategy.FIFO, null)));\n\n    final CyclicBarrier barrier = new CyclicBarrier(4);\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n\n    // Starts three producers to enqueue concurrently. For each entry, starts a TX, sleep, enqueue, commit.\n    ExecutorService executor = Executors.newFixedThreadPool(3);\n    final int entryCount = 50;\n    for (int i = 0; i < 3; i++) {\n      final QueueProducer producer = queueClientFactory.createProducer(queueName);\n      final int producerId = i + 1;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            barrier.await();\n            for (int i = 0; i < entryCount; i++) {\n              TransactionContext txContext = createTxContext(producer);\n              txContext.start();\n              // Sleeps at different rate to make the scan in consumer has higher change to see\n              // the transaction but not the entry (as not yet written)\n              TimeUnit.MILLISECONDS.sleep(producerId * 50);\n              producer.enqueue(new QueueEntry(Bytes.toBytes(i)));\n              txContext.finish();\n            }\n          } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n          } finally {\n            Closeables.closeQuietly(producer);\n          }\n        }\n      });\n    }\n\n    // sum(0..entryCount) * 3\n    int expectedSum = entryCount * (entryCount - 1) / 2 * 3;\n    QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n\n    // Trigger starts of producer\n    barrier.await();\n\n    int dequeueSum = 0;\n    int noProgress = 0;\n    while (dequeueSum != expectedSum && noProgress < 200) {\n      TransactionContext txContext = createTxContext(consumer);\n      txContext.start();\n      DequeueResult<byte[]> result = consumer.dequeue();\n      if (!result.isEmpty()) {\n        noProgress = 0;\n        int value = Bytes.toInt(result.iterator().next());\n        dequeueSum += value;\n      } else {\n        noProgress++;\n        TimeUnit.MILLISECONDS.sleep(10);\n      }\n      txContext.finish();\n    }\n\n    Closeables.closeQuietly(consumer);\n\n    Assert.assertEquals(expectedSum, dequeueSum);\n  }","id":100878,"modified_method":"@Category(SlowTests.class)\n  @Test\n  public void testConcurrentEnqueue() throws Exception {\n    // This test is for testing multiple producers that writes with a delay after a transaction started.\n    // This is for verifying consumer advances the startKey correctly.\n    final QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\",\n                                                      \"concurrent\");\n    configureGroups(queueName, ImmutableList.of(new ConsumerGroupConfig(0, 1, DequeueStrategy.FIFO, null)));\n\n    final CyclicBarrier barrier = new CyclicBarrier(4);\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n\n    // Starts three producers to enqueue concurrently. For each entry, starts a TX, sleep, enqueue, commit.\n    ExecutorService executor = Executors.newFixedThreadPool(3);\n    final int entryCount = 50;\n    for (int i = 0; i < 3; i++) {\n      final QueueProducer producer = queueClientFactory.createProducer(queueName);\n      final int producerId = i + 1;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            barrier.await();\n            for (int i = 0; i < entryCount; i++) {\n              TransactionContext txContext = createTxContext(producer);\n              txContext.start();\n              // Sleeps at different rate to make the scan in consumer has higher change to see\n              // the transaction but not the entry (as not yet written)\n              TimeUnit.MILLISECONDS.sleep(producerId * 50);\n              producer.enqueue(new QueueEntry(Bytes.toBytes(i)));\n              txContext.finish();\n            }\n          } catch (Exception e) {\n            LOG.error(e.getMessage(), e);\n          } finally {\n            Closeables.closeQuietly(producer);\n          }\n        }\n      });\n    }\n\n    // sum(0..entryCount) * 3\n    int expectedSum = entryCount * (entryCount - 1) / 2 * 3;\n    try (QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)) {\n\n      // Trigger starts of producer\n      barrier.await();\n\n      int dequeueSum = 0;\n      int noProgress = 0;\n      while (dequeueSum != expectedSum && noProgress < 200) {\n        TransactionContext txContext = createTxContext(consumer);\n        txContext.start();\n        DequeueResult<byte[]> result = consumer.dequeue();\n        if (!result.isEmpty()) {\n          noProgress = 0;\n          int value = Bytes.toInt(result.iterator().next());\n          dequeueSum += value;\n        } else {\n          noProgress++;\n          TimeUnit.MILLISECONDS.sleep(10);\n        }\n        txContext.finish();\n      }\n\n      Assert.assertEquals(expectedSum, dequeueSum);\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test(timeout = TIMEOUT_MS)\n  public void testRollback() throws Exception {\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"queuerollback\");\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n    configureGroups(queueName, ImmutableList.of(consumerConfig));\n    QueueProducer producer = queueClientFactory.createProducer(queueName);\n    QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1);\n\n    TransactionContext txContext = createTxContext(producer, consumer, new TransactionAware() {\n      boolean canCommit = false;\n\n      @Override\n      public void startTx(Transaction tx) {\n      }\n\n      @Override\n      public void updateTx(Transaction tx) {\n      }\n\n      @Override\n      public Collection<byte[]> getTxChanges() {\n        return ImmutableList.of();\n      }\n\n      @Override\n      public boolean commitTx() throws Exception {\n        // Flip-flop between commit success/failure.\n        boolean res = canCommit;\n        canCommit = !canCommit;\n        return res;\n      }\n\n      @Override\n      public void postTxCommit() {\n      }\n\n      @Override\n      public boolean rollbackTx() throws Exception {\n        return true;\n      }\n\n\n      @Override\n      public String getTransactionAwareName() {\n        return \"test\";\n      }                                    \n    });\n\n    // First, try to enqueue and commit would fail\n    txContext.start();\n    try {\n      producer.enqueue(new QueueEntry(Bytes.toBytes(1)));\n      txContext.finish();\n      // If reaches here, it's wrong, as exception should be thrown.\n      Assert.assertTrue(false);\n    } catch (TransactionFailureException e) {\n      txContext.abort();\n    }\n\n    // Try to enqueue again. Within the same transaction, dequeue should be empty.\n    txContext.start();\n    producer.enqueue(new QueueEntry(Bytes.toBytes(1)));\n    Assert.assertTrue(consumer.dequeue().isEmpty());\n    txContext.finish();\n\n    // This time, enqueue has been committed, dequeue would see the item\n    txContext.start();\n    try {\n      Assert.assertEquals(1, Bytes.toInt(consumer.dequeue().iterator().next()));\n      txContext.finish();\n      // If reaches here, it's wrong, as exception should be thrown.\n      Assert.assertTrue(false);\n    } catch (TransactionFailureException e) {\n      txContext.abort();\n    }\n\n    // Dequeue again, since last tx was rollback, this dequeue should see the item again.\n    txContext.start();\n    Assert.assertEquals(1, Bytes.toInt(consumer.dequeue().iterator().next()));\n    txContext.finish();\n  }","id":100879,"modified_method":"@Test(timeout = TIMEOUT_MS)\n  public void testRollback() throws Exception {\n    QueueName queueName = QueueName.fromFlowlet(Constants.DEFAULT_NAMESPACE, \"app\", \"flow\", \"flowlet\", \"queuerollback\");\n    ConsumerConfig consumerConfig = new ConsumerConfig(0, 0, 1, DequeueStrategy.FIFO, null);\n    configureGroups(queueName, ImmutableList.of(consumerConfig));\n    try (\n      QueueProducer producer = queueClientFactory.createProducer(queueName);\n      QueueConsumer consumer = queueClientFactory.createConsumer(queueName, consumerConfig, 1)\n    ) {\n\n      TransactionContext txContext = createTxContext(producer, consumer, new TransactionAware() {\n        boolean canCommit = false;\n\n        @Override\n        public void startTx(Transaction tx) {\n        }\n\n        @Override\n        public void updateTx(Transaction tx) {\n        }\n\n        @Override\n        public Collection<byte[]> getTxChanges() {\n          return ImmutableList.of();\n        }\n\n        @Override\n        public boolean commitTx() throws Exception {\n          // Flip-flop between commit success/failure.\n          boolean res = canCommit;\n          canCommit = !canCommit;\n          return res;\n        }\n\n        @Override\n        public void postTxCommit() {\n        }\n\n        @Override\n        public boolean rollbackTx() throws Exception {\n          return true;\n        }\n\n\n        @Override\n        public String getTransactionAwareName() {\n          return \"test\";\n        }\n      });\n\n      // First, try to enqueue and commit would fail\n      txContext.start();\n      try {\n        producer.enqueue(new QueueEntry(Bytes.toBytes(1)));\n        txContext.finish();\n        // If reaches here, it's wrong, as exception should be thrown.\n        Assert.assertTrue(false);\n      } catch (TransactionFailureException e) {\n        txContext.abort();\n      }\n\n      // Try to enqueue again. Within the same transaction, dequeue should be empty.\n      txContext.start();\n      producer.enqueue(new QueueEntry(Bytes.toBytes(1)));\n      Assert.assertTrue(consumer.dequeue().isEmpty());\n      txContext.finish();\n\n      // This time, enqueue has been committed, dequeue would see the item\n      txContext.start();\n      try {\n        Assert.assertEquals(1, Bytes.toInt(consumer.dequeue().iterator().next()));\n        txContext.finish();\n        // If reaches here, it's wrong, as exception should be thrown.\n        Assert.assertTrue(false);\n      } catch (TransactionFailureException e) {\n        txContext.abort();\n      }\n\n      // Dequeue again, since last tx was rollback, this dequeue should see the item again.\n      txContext.start();\n      Assert.assertEquals(1, Bytes.toInt(consumer.dequeue().iterator().next()));\n      txContext.finish();\n    }\n  }","commit_id":"7d76f3a061ace87e4b6a4b5684fae32f24dd2183","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public DefaultCamelContext produce(CreationalContext<DefaultCamelContext> ctx) {\n        DefaultCamelContext context = new DefaultCamelContext();\n        context.setNameStrategy(new CdiCamelContextNameStrategy());\n        return context;\n    }","id":100880,"modified_method":"@Override\n    public DefaultCamelContext produce(CreationalContext<DefaultCamelContext> ctx) {\n        return new DefaultCamelContext();\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    public T produce(CreationalContext<T> ctx) {\n        T context = super.produce(ctx);\n\n        // Do not override the name if it's been already set (in the bean constructor for example)\n        if (annotated != null && context.getNameStrategy() instanceof DefaultCamelContextNameStrategy) {\n            context.setNameStrategy(nameStrategy(annotated));\n        }\n\n        // Add bean registry and Camel injector\n        if (context instanceof DefaultCamelContext) {\n            DefaultCamelContext adapted = context.adapt(DefaultCamelContext.class);\n            adapted.setRegistry(new CdiCamelRegistry(manager));\n            adapted.setInjector(new CdiCamelInjector(context.getInjector(), manager));\n        } else {\n            // Fail fast for the time being to avoid side effects by the time these two methods get declared on the CamelContext interface\n            throw new InjectionException(\"Camel CDI requires Camel context [\" + context.getName() + \"] to be a subtype of DefaultCamelContext\");\n        }\n\n        // Add event notifier if at least one observer is present\n        Set<Annotation> events = new HashSet<>(extension.getObserverEvents());\n        // Annotated must be wrapped because of OWB-1099\n        Collection<Annotation> qualifiers = annotated != null ? extension.getContextBean(new AnnotatedWrapper(annotated)).getQualifiers() : Arrays.asList(AnyLiteral.INSTANCE, DefaultLiteral.INSTANCE);\n        events.retainAll(qualifiers);\n        if (!events.isEmpty()) {\n            context.getManagementStrategy().addEventNotifier(new CdiEventNotifier(manager, qualifiers));\n        }\n\n        return context;\n    }","id":100881,"modified_method":"@Override\n    public T produce(CreationalContext<T> ctx) {\n        T context = super.produce(ctx);\n\n        // Do not override the name if it's been already set (in the bean constructor for example)\n        if (context.getNameStrategy() instanceof DefaultCamelContextNameStrategy) {\n            context.setNameStrategy(nameStrategy(annotated));\n        }\n\n        // Add bean registry and Camel injector\n        if (context instanceof DefaultCamelContext) {\n            DefaultCamelContext adapted = context.adapt(DefaultCamelContext.class);\n            adapted.setRegistry(new CdiCamelRegistry(manager));\n            adapted.setInjector(new CdiCamelInjector(context.getInjector(), manager));\n        } else {\n            // Fail fast for the time being to avoid side effects by the time these two methods get declared on the CamelContext interface\n            throw new InjectionException(\"Camel CDI requires Camel context [\" + context.getName() + \"] to be a subtype of DefaultCamelContext\");\n        }\n\n        // Add event notifier if at least one observer is present\n        Set<Annotation> qualifiers = CdiSpiHelper.excludeElementOfTypes(CdiSpiHelper.getQualifiers(annotated, manager), Named.class);\n        qualifiers.add(AnyLiteral.INSTANCE);\n        if (qualifiers.size() == 1) {\n            qualifiers.add(DefaultLiteral.INSTANCE);\n        }\n        qualifiers.retainAll(extension.getObserverEvents());\n        if (!qualifiers.isEmpty()) {\n            context.getManagementStrategy().addEventNotifier(new CdiEventNotifier(manager, qualifiers));\n        }\n\n        return context;\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"CdiCamelContextBean(BeanManager manager, InjectionTarget<DefaultCamelContext> target) {\n        this.qualifiers = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnyLiteral.INSTANCE, DefaultLiteral.INSTANCE)));\n        this.types = Collections.unmodifiableSet(manager.createAnnotatedType(DefaultCamelContext.class).getTypeClosure());\n        this.target = target;\n    }","id":100882,"modified_method":"CdiCamelContextBean(CdiCamelContextAnnotated annotated, InjectionTarget<DefaultCamelContext> target) {\n        this.qualifiers = annotated.getAnnotations();\n        this.types = annotated.getTypeClosure();\n        this.target = target;\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"private void addDefaultCamelContext(@Observes AfterBeanDiscovery abd, BeanManager manager) {\n        if (contextBeans.isEmpty()) {\n            abd.addBean(new CdiCamelContextBean(manager, environment.camelContextInjectionTarget(new CamelContextDefaultProducer(), null, manager, CdiCamelExtension.this)));\n        }\n    }","id":100883,"modified_method":"private void addDefaultCamelContext(@Observes AfterBeanDiscovery abd, BeanManager manager) {\n        if (contextQualifiers.isEmpty()) {\n            CdiCamelContextAnnotated annotated = new CdiCamelContextAnnotated(manager, AnyLiteral.INSTANCE, DefaultLiteral.INSTANCE);\n            abd.addBean(new CdiCamelContextBean(annotated, environment.camelContextInjectionTarget(new CamelContextDefaultProducer(), annotated, manager, this)));\n        }\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"private <T extends CamelContext> void camelContextProducerMethods(@Observes ProcessProducerMethod<T, ?> pb) {\n        processCamelContextBean(pb.getAnnotated(), pb.getBean());\n    }","id":100884,"modified_method":"private <T extends CamelContext> void camelContextProducerMethods(@Observes ProcessProducerMethod<T, ?> pb) {\n        contextQualifiers.addAll(pb.getBean().getQualifiers());\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"private <T extends CamelContext> void camelContextProducerFields(@Observes ProcessProducerField<T, ?> pb) {\n        processCamelContextBean(pb.getAnnotated(), pb.getBean());\n    }","id":100885,"modified_method":"private <T extends CamelContext> void camelContextProducerFields(@Observes ProcessProducerField<T, ?> pb) {\n        contextQualifiers.addAll(pb.getBean().getQualifiers());\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"private <T extends CamelContext> void camelContextBeans(@Observes ProcessBean<T> pb) {\n        processCamelContextBean(pb.getAnnotated(), pb.getBean());\n    }","id":100886,"modified_method":"private <T extends CamelContext> void camelContextBeans(@Observes ProcessBean<T> pb) {\n        contextQualifiers.addAll(pb.getBean().getQualifiers());\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"private static <E, T extends E> T getFirstElementOfType(Collection<E> collection, Class<T> type) {\n        for (E item : collection) {\n            if ((item != null) && type.isAssignableFrom(item.getClass())) {\n                return ObjectHelper.cast(type, item);\n            }\n        }\n        return null;\n    }","id":100887,"modified_method":"static <E, T extends E> T getFirstElementOfType(Collection<E> collection, Class<T> type) {\n        for (E item : collection) {\n            if ((item != null) && type.isAssignableFrom(item.getClass())) {\n                return ObjectHelper.cast(type, item);\n            }\n        }\n        return null;\n    }","commit_id":"de29d3dcda2d5adc4367e339e5f75dc9a9729ada","url":"https://github.com/apache/camel"},{"original_method":"public boolean parseForStatement(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, GroovyTokenTypes.kFOR);\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n    if (!ForStatement.forClauseParse(builder, this)) {\n      builder.error(GroovyBundle.message(\"for.clause.expected\"));\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (ParserUtils.getToken(builder, mNLS)) {}\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n    if (parseExtendedStatement(builder)) {\n      warn.rollbackTo();\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    if (!parseStatement(builder, true)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(FOR_STATEMENT);\n      return true;\n    } else {\n      warn.drop();\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n  }","id":100888,"modified_method":"public boolean parseForStatement(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, GroovyTokenTypes.kFOR);\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n    if (!ForStatement.forClauseParse(builder, this)) {\n      builder.error(GroovyBundle.message(\"for.clause.expected\"));\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      ParserUtils.getToken(builder, mNLS);\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n    if (parseExtendedStatement(builder)) {\n      warn.rollbackTo();\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    if (parseStatement(builder, true)) {\n      warn.drop();\n    }\n    else {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n    marker.done(FOR_STATEMENT);\n    return true;\n  }","commit_id":"5da6238ef193095b4916afdf11a104616002ca15","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean parseIfStatement(PsiBuilder builder) {\n    //allow error messages\n    PsiBuilder.Marker ifStmtMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.kIF)) {\n      ifStmtMarker.rollbackTo();\n      builder.error(GroovyBundle.message(\"if.expected\"));\n      return false;\n    }\n\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      ifStmtMarker.done(IF_STATEMENT);\n      return true;\n    }\n\n    if (!ConditionalExpression.parse(builder, this)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof()) {\n        final IElementType type = builder.getTokenType();\n        if (GroovyTokenTypes.mNLS  == type || GroovyTokenTypes.mRPAREN == type ||\n            GroovyTokenTypes.mLCURLY == type || GroovyTokenTypes.mRCURLY == type) {\n          break;\n        }\n\n        builder.advanceLexer();\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n      if (!ParserUtils.getToken(builder, GroovyTokenTypes.mRPAREN)) {\n        ifStmtMarker.done(IF_STATEMENT);\n        return true;\n      }\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (builder.getTokenType() == GroovyTokenTypes.mNLS) {\n      ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n    }\n\n    if (!parseStatement(builder, true) && !parseExtendedStatement(builder)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      ifStmtMarker.done(IF_STATEMENT);\n      return true;\n    } else {\n      warn.drop();\n    }\n\n    PsiBuilder.Marker rb = builder.mark();\n    if (GroovyTokenTypes.kELSE.equals(builder.getTokenType()) ||\n        (Separators.parse(builder) &&\n            builder.getTokenType() == GroovyTokenTypes.kELSE)) {\n      rb.drop();\n      ParserUtils.getToken(builder, GroovyTokenTypes.kELSE);\n\n      warn = builder.mark();\n      if (builder.getTokenType() == GroovyTokenTypes.mNLS) {\n        ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n      }\n\n      if (!parseStatement(builder, true) && !parseExtendedStatement(builder)) {\n        warn.rollbackTo();\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n        ifStmtMarker.done(IF_STATEMENT);\n        return true;\n      } else {\n        warn.drop();\n      }\n\n      ifStmtMarker.done(IF_STATEMENT);\n      return true;\n\n    } else {\n      rb.rollbackTo();\n      ifStmtMarker.done(IF_STATEMENT);\n      return true;\n    }\n  }","id":100889,"modified_method":"public boolean parseIfStatement(PsiBuilder builder) {\n    //allow error messages\n    PsiBuilder.Marker ifStmtMarker = builder.mark();\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.kIF)) {\n      ifStmtMarker.rollbackTo();\n      builder.error(GroovyBundle.message(\"if.expected\"));\n      return false;\n    }\n\n    if (!ParserUtils.getToken(builder, GroovyTokenTypes.mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      ifStmtMarker.done(IF_STATEMENT);\n      return true;\n    }\n\n    if (!ConditionalExpression.parse(builder, this)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n    ParserUtils.getToken(builder, GroovyTokenTypes.mRPAREN, GroovyBundle.message(\"rparen.expected\"));\n\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n    if (!parseStatement(builder, true) && !parseExtendedStatement(builder)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      ifStmtMarker.done(IF_STATEMENT);\n      return true;\n    }\n    else {\n      warn.drop();\n    }\n\n    PsiBuilder.Marker rb = builder.mark();\n    if (GroovyTokenTypes.kELSE.equals(builder.getTokenType()) ||\n        (Separators.parse(builder) && builder.getTokenType() == GroovyTokenTypes.kELSE)) {\n      rb.drop();\n      ParserUtils.getToken(builder, GroovyTokenTypes.kELSE);\n\n      warn = builder.mark();\n      ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n      if (!parseStatement(builder, true) && !parseExtendedStatement(builder)) {\n        warn.rollbackTo();\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      }\n      else {\n        warn.drop();\n      }\n    }\n    else {\n      rb.rollbackTo();\n    }\n\n    ifStmtMarker.done(IF_STATEMENT);\n    return true;\n  }","commit_id":"5da6238ef193095b4916afdf11a104616002ca15","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Checks for argument label. In case when it is so, a caret will not be restored at\n   * initial position\n   *\n   * @param builder\n   * @return\n   */\n  public static boolean argumentLabelStartCheck(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (ParserUtils.lookAhead(builder, mSTAR, mCOLON)) {\n      builder.advanceLexer();\n      marker.done(ARGUMENT_LABEL);\n      return true;\n    }\n    else if (ParserUtils.lookAhead(builder, mIDENT, mCOLON) ||\n             TokenSets.KEYWORDS.contains(builder.getTokenType()) ||\n             mSTRING_LITERAL.equals(builder.getTokenType()) ||\n             mGSTRING_LITERAL.equals(builder.getTokenType()) ||\n             mREGEX_LITERAL.equals(builder.getTokenType())) {\n      builder.advanceLexer();\n      if (mCOLON.equals(builder.getTokenType())) {\n        marker.done(ARGUMENT_LABEL);\n        return true;\n      }\n      else {\n        marker.rollbackTo();\n        return false;\n      }\n    }\n    else if (mGSTRING_BEGIN.equals(builder.getTokenType()) ||\n             mREGEX_BEGIN.equals(builder.getTokenType()) ||\n             TokenSets.NUMBERS.contains(builder.getTokenType()) ||\n             mLBRACK.equals(builder.getTokenType()) ||\n             mLPAREN.equals(builder.getTokenType()) ||\n             mLCURLY.equals(builder.getTokenType())) {\n      PrimaryExpression.parsePrimaryExpression(builder, parser);\n      if (mCOLON.equals(builder.getTokenType())) {\n        marker.done(ARGUMENT_LABEL);\n        return true;\n      }\n      else {\n        marker.rollbackTo();\n        return false;\n      }\n    }\n    else {\n      marker.drop();\n      return false;\n    }\n\n  }","id":100890,"modified_method":"/**\n   * Checks for argument label. In case when it is so, a caret will not be restored at\n   * initial position\n   *\n   * @param builder\n   * @return\n   */\n  public static boolean argumentLabelStartCheck(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (ParserUtils.lookAhead(builder, mSTAR, mCOLON)) {\n      builder.advanceLexer();\n      marker.done(ARGUMENT_LABEL);\n      return true;\n    }\n\n    final IElementType type = builder.getTokenType();\n    if (ParserUtils.lookAhead(builder, mIDENT, mCOLON) ||\n        TokenSets.KEYWORDS.contains(type) ||\n        mSTRING_LITERAL.equals(type) ||\n        mGSTRING_LITERAL.equals(type)) {\n      builder.advanceLexer();\n      if (mCOLON.equals(builder.getTokenType())) {\n        marker.done(ARGUMENT_LABEL);\n        return true;\n      }\n      else {\n        marker.rollbackTo();\n        return false;\n      }\n    }\n\n    if (mGSTRING_BEGIN.equals(type) ||\n        mREGEX_BEGIN.equals(type) ||\n        mDOLLAR_SLASH_REGEX_BEGIN.equals(type) ||\n        TokenSets.NUMBERS.contains(type) ||\n        mLBRACK.equals(type) ||\n        mLPAREN.equals(type) ||\n        mLCURLY.equals(type)) {\n      PrimaryExpression.parsePrimaryExpression(builder, parser);\n      if (mCOLON.equals(builder.getTokenType())) {\n        marker.done(ARGUMENT_LABEL);\n        return true;\n      }\n      else {\n        marker.rollbackTo();\n        return false;\n      }\n    }\n\n    marker.drop();\n    return false;\n  }","commit_id":"dd477bf1adca9ab9d7f18f9d6247ce6bc5a6cfde","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder, GroovyParser parser) {\n\n    PsiBuilder.Marker sMarker = builder.mark();\n    if (ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_BEGIN)) {\n      ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_CONTENT);\n      if (!parseInjection(builder, parser)) {\n        if (!ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_END)) {\n          builder.error(GroovyBundle.message(\"dollar.slash.end.expected\"));\n        }\n        sMarker.done(REGEX);\n        return REGEX;\n      }\n      else {\n        while (ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_CONTENT)) {\n          if (!parseInjection(builder, parser)) break;\n        }\n        if (!ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_END)) {\n          builder.error(GroovyBundle.message(\"dollar.slash.end.expected\"));\n        }\n        sMarker.done(REGEX);\n        return REGEX;\n      }\n    }\n    else {\n      sMarker.drop();\n      return WRONGWAY;\n    }\n  }","id":100891,"modified_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n    final boolean result = ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_BEGIN);\n    LOG.assertTrue(result);\n\n    boolean inj = false;\n    ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_CONTENT);\n    while (parseInjection(builder, parser)) {\n      inj = true;\n      ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_CONTENT);\n    }\n\n    if (!ParserUtils.getToken(builder, mDOLLAR_SLASH_REGEX_END)) {\n      builder.error(GroovyBundle.message(\"dollar.slash.end.expected\"));\n    }\n    marker.done(REGEX);\n    return inj;\n  }","commit_id":"dd477bf1adca9ab9d7f18f9d6247ce6bc5a6cfde","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public PsiElement getReferenceNameElement() {\n    final PsiElement last = getLastChild();\n    assert last != null;\n    return last;\n  }","id":100892,"modified_method":"@NotNull\n  @Override\n  public PsiElement getReferenceNameElement() {\n    final PsiElement last = getLastChild();\n    LOG.assertTrue(last!=null);\n    return last;\n  }","commit_id":"dd477bf1adca9ab9d7f18f9d6247ce6bc5a6cfde","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Property selector parsing\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType namePartParse(PsiBuilder builder, GroovyParser parser) {\n    ParserUtils.getToken(builder, mAT);\n    if (ParserUtils.getToken(builder, mIDENT) ||\n        ParserUtils.getToken(builder, mSTRING_LITERAL) ||\n        ParserUtils.getToken(builder, mGSTRING_LITERAL)) {\n      return REFERENCE_EXPRESSION;\n    }\n\n    final IElementType tokenType = builder.getTokenType();\n    if (mREGEX_LITERAL.equals(tokenType)) {\n      ParserUtils.eatElement(builder, REGEX);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (mGSTRING_BEGIN.equals(tokenType)) {\n      StringConstructorExpression.parse(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (mREGEX_BEGIN.equals(tokenType)) {\n      RegexConstructorExpression.parse(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (mLCURLY.equals(tokenType)) {\n      OpenOrClosableBlock.parseOpenBlock(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (mLPAREN.equals(tokenType)) {\n      PrimaryExpression.parenthesizedExprParse(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (TokenSets.KEYWORDS.contains(builder.getTokenType())) {\n      builder.advanceLexer();\n      return REFERENCE_EXPRESSION;\n    }\n    return WRONGWAY;\n  }","id":100893,"modified_method":"/**\n   * Property selector parsing\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType namePartParse(PsiBuilder builder, GroovyParser parser) {\n    ParserUtils.getToken(builder, mAT);\n    if (ParserUtils.getToken(builder, mIDENT) ||\n        ParserUtils.getToken(builder, mSTRING_LITERAL) ||\n        ParserUtils.getToken(builder, mGSTRING_LITERAL)) {\n      return REFERENCE_EXPRESSION;\n    }\n\n    final IElementType tokenType = builder.getTokenType();\n    if (mGSTRING_BEGIN.equals(tokenType)) {\n      StringConstructorExpression.parse(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (mREGEX_BEGIN.equals(tokenType)) {\n      return RegexConstructorExpression.parse(builder, parser) ? PATH_PROPERTY_REFERENCE : REFERENCE_EXPRESSION;\n    }\n    if (mDOLLAR_SLASH_REGEX_BEGIN.equals(tokenType)) {\n      return DollarSlashRegexConstructorExpression.parse(builder, parser) ? PATH_PROPERTY_REFERENCE : REFERENCE_EXPRESSION;\n    }\n    if (mLCURLY.equals(tokenType)) {\n      OpenOrClosableBlock.parseOpenBlock(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (mLPAREN.equals(tokenType)) {\n      PrimaryExpression.parenthesizedExprParse(builder, parser);\n      return PATH_PROPERTY_REFERENCE;\n    }\n    if (TokenSets.KEYWORDS.contains(builder.getTokenType())) {\n      builder.advanceLexer();\n      return REFERENCE_EXPRESSION;\n    }\n    return WRONGWAY;\n  }","commit_id":"dd477bf1adca9ab9d7f18f9d6247ce6bc5a6cfde","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parsePrimaryExpression(PsiBuilder builder, GroovyParser parser, boolean literalsAsRefExprs) {\n\n    final IElementType tokenType = builder.getTokenType();\n    if (TokenSets.BUILT_IN_TYPE.contains(tokenType)) {\n      ParserUtils.eatElement(builder, BUILT_IN_TYPE_EXPRESSION);\n      return BUILT_IN_TYPE_EXPRESSION;\n    }\n    if (kTHIS == tokenType) {\n      ParserUtils.eatElement(builder, THIS_REFERENCE_EXPRESSION);\n      return THIS_REFERENCE_EXPRESSION;\n    }\n    if (kSUPER == tokenType) {\n      ParserUtils.eatElement(builder, SUPER_REFERENCE_EXPRESSION);\n      return SUPER_REFERENCE_EXPRESSION;\n    }\n    if (kNEW == tokenType) {\n      PsiBuilder.Marker marker = builder.mark();\n      final GroovyElementType type = newExprParse(builder, parser);\n      marker.done(type);\n      return type;\n    }\n    if (mIDENT == tokenType) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return REFERENCE_EXPRESSION;\n    }\n    if (mGSTRING_BEGIN == tokenType) {\n      return StringConstructorExpression.parse(builder, parser);\n    }\n    if (mREGEX_BEGIN == tokenType) {\n      return RegexConstructorExpression.parse(builder, parser);\n    }\n    if (mDOLLAR_SLASH_REGEX_BEGIN == tokenType) {\n      return DollarSlashRegexConstructorExpression.parse(builder, parser);\n    }\n    if (mLBRACK == tokenType) {\n      return ListOrMapConstructorExpression.parse(builder, parser);\n    }\n    if (mLPAREN == tokenType) {\n      return parenthesizedExprParse(builder, parser);\n    }\n    if (mLCURLY == tokenType) {\n      return OpenOrClosableBlock.parseClosableBlock(builder, parser);\n    }\n    if (tokenType == mSTRING_LITERAL ||\n        tokenType == mGSTRING_LITERAL ||\n        tokenType == mREGEX_LITERAL ||\n        tokenType == mDOLLAR_SLASH_REGEX_LITERAL) {\n      return ParserUtils.eatElement(builder, literalsAsRefExprs ? REFERENCE_EXPRESSION : LITERAL);\n    }\n    if (TokenSets.CONSTANTS.contains(tokenType)) {\n      return ParserUtils.eatElement(builder, LITERAL);\n    }\n\n    return WRONGWAY;\n  }","id":100894,"modified_method":"public static IElementType parsePrimaryExpression(PsiBuilder builder, GroovyParser parser, boolean literalsAsRefExprs) {\n\n    final IElementType tokenType = builder.getTokenType();\n    if (TokenSets.BUILT_IN_TYPE.contains(tokenType)) {\n      ParserUtils.eatElement(builder, BUILT_IN_TYPE_EXPRESSION);\n      return BUILT_IN_TYPE_EXPRESSION;\n    }\n    if (kTHIS == tokenType) {\n      ParserUtils.eatElement(builder, THIS_REFERENCE_EXPRESSION);\n      return THIS_REFERENCE_EXPRESSION;\n    }\n    if (kSUPER == tokenType) {\n      ParserUtils.eatElement(builder, SUPER_REFERENCE_EXPRESSION);\n      return SUPER_REFERENCE_EXPRESSION;\n    }\n    if (kNEW == tokenType) {\n      PsiBuilder.Marker marker = builder.mark();\n      final GroovyElementType type = newExprParse(builder, parser);\n      marker.done(type);\n      return type;\n    }\n    if (mIDENT == tokenType) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return REFERENCE_EXPRESSION;\n    }\n    if (mGSTRING_BEGIN == tokenType) {\n      return StringConstructorExpression.parse(builder, parser);\n    }\n    if (mREGEX_BEGIN == tokenType) {\n      RegexConstructorExpression.parse(builder, parser);\n      return REGEX;\n    }\n    if (mDOLLAR_SLASH_REGEX_BEGIN == tokenType) {\n      DollarSlashRegexConstructorExpression.parse(builder, parser);\n      return REGEX;\n    }\n    if (mLBRACK == tokenType) {\n      return ListOrMapConstructorExpression.parse(builder, parser);\n    }\n    if (mLPAREN == tokenType) {\n      return parenthesizedExprParse(builder, parser);\n    }\n    if (mLCURLY == tokenType) {\n      return OpenOrClosableBlock.parseClosableBlock(builder, parser);\n    }\n    if (tokenType == mSTRING_LITERAL || tokenType == mGSTRING_LITERAL) {\n      return ParserUtils.eatElement(builder, literalsAsRefExprs ? REFERENCE_EXPRESSION : LITERAL);\n    }\n    if (TokenSets.CONSTANTS.contains(tokenType)) {\n      return ParserUtils.eatElement(builder, LITERAL);\n    }\n\n    return WRONGWAY;\n  }","commit_id":"dd477bf1adca9ab9d7f18f9d6247ce6bc5a6cfde","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder, GroovyParser parser) {\n\n    PsiBuilder.Marker sMarker = builder.mark();\n    if (ParserUtils.getToken(builder, mREGEX_BEGIN)) {\n      ParserUtils.getToken(builder, mREGEX_CONTENT);\n      if (!parseInjection(builder, parser)) {\n        if (!ParserUtils.getToken(builder, mREGEX_END)) {\n          builder.error(GroovyBundle.message(\"regex.end.expected\"));\n        }\n        sMarker.done(REGEX);\n        return REGEX;\n      }\n      else {\n        while (ParserUtils.getToken(builder, mREGEX_CONTENT)) {\n          if (!parseInjection(builder, parser)) break;\n        }\n        if (!ParserUtils.getToken(builder, mREGEX_END)) {\n          builder.error(GroovyBundle.message(\"regex.end.expected\"));\n        }\n        sMarker.done(REGEX);\n        return REGEX;\n      }\n    }\n    else {\n      sMarker.drop();\n      return WRONGWAY;\n    }\n  }","id":100895,"modified_method":"/**\n   * @return true if there are any injections\n   */\n  public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n    final boolean result = ParserUtils.getToken(builder, mREGEX_BEGIN);\n    LOG.assertTrue(result);\n\n    boolean inj = false;\n    ParserUtils.getToken(builder, mREGEX_CONTENT);\n    while (parseInjection(builder, parser)) {\n      inj = true;\n      ParserUtils.getToken(builder, mREGEX_CONTENT);\n    }\n\n    if (!ParserUtils.getToken(builder, mREGEX_END)) {\n      builder.error(GroovyBundle.message(\"regex.end.expected\"));\n    }\n    marker.done(REGEX);\n    return inj;\n  }","commit_id":"dd477bf1adca9ab9d7f18f9d6247ce6bc5a6cfde","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Subscribe public void inputCreated(InputCreated inputCreatedEvent) {\n        LOG.info(\"Input created: \" + inputCreatedEvent.id());\n        final Input input;\n        try {\n            input = inputService.find(inputCreatedEvent.id());\n        } catch (NotFoundException e) {\n            LOG.warn(\"Received InputCreated event but could not find Input: \", e);\n            return;\n        }\n\n        if (!input.isGlobal() && !this.nodeId.toString().equals(input.getNodeId())) {\n            return;\n        }\n\n        final IOState<MessageInput> inputState = inputRegistry.getInputState(inputCreatedEvent.id());\n        if (inputState != null) {\n            inputRegistry.remove(inputState);\n        }\n        final MessageInput messageInput;\n        try {\n            messageInput = inputService.getMessageInput(input);\n        } catch (NoSuchInputTypeException e) {\n            LOG.warn(\"Newly created input is of invalid type: \" + input.getType(), e);\n            return;\n        }\n        final IOState<MessageInput> newInputState = inputLauncher.launch(messageInput);\n        inputRegistry.add(newInputState);\n    }","id":100896,"modified_method":"@Subscribe public void inputCreated(InputCreated inputCreatedEvent) {\n        LOG.info(\"Input created: \" + inputCreatedEvent.id());\n        final Input input;\n        try {\n            input = inputService.find(inputCreatedEvent.id());\n        } catch (NotFoundException e) {\n            LOG.warn(\"Received InputCreated event but could not find Input: \", e);\n            return;\n        }\n\n        final IOState<MessageInput> inputState = inputRegistry.getInputState(inputCreatedEvent.id());\n        if (inputState != null) {\n            inputRegistry.remove(inputState);\n        }\n\n        if (!input.isGlobal() && !this.nodeId.toString().equals(input.getNodeId())) {\n            return;\n        }\n\n        final MessageInput messageInput;\n        try {\n            messageInput = inputService.getMessageInput(input);\n        } catch (NoSuchInputTypeException e) {\n            LOG.warn(\"Newly created input is of invalid type: \" + input.getType(), e);\n            return;\n        }\n        final IOState<MessageInput> newInputState = inputLauncher.launch(messageInput);\n        inputRegistry.add(newInputState);\n    }","commit_id":"eaa74537e55462e2ed5d81e4d7f2c977563f8c8d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public <T extends Persisted> String save(T model) throws ValidationException {\n        final String resultId = super.save(model);\n        if (resultId != null && !resultId.isEmpty()) {\n            this.clusterEventBus.post(InputCreated.create(resultId));\n            this.serverEventBus.post(InputCreated.create(resultId));\n        }\n        return resultId;\n    }","id":100897,"modified_method":"@Override\n    public <T extends Persisted> String save(T model) throws ValidationException {\n        final String resultId = super.save(model);\n        if (resultId != null && !resultId.isEmpty()) {\n            publishChange(InputCreated.create(resultId));\n        }\n        return resultId;\n    }","commit_id":"eaa74537e55462e2ed5d81e4d7f2c977563f8c8d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public <T extends Persisted> String saveWithoutValidation(T model) {\n        final String resultId = super.saveWithoutValidation(model);\n        if (resultId != null && !resultId.isEmpty()) {\n            this.clusterEventBus.post(InputCreated.create(resultId));\n            this.serverEventBus.post(InputCreated.create(resultId));\n        }\n        return resultId;\n    }","id":100898,"modified_method":"@Override\n    public <T extends Persisted> String saveWithoutValidation(T model) {\n        final String resultId = super.saveWithoutValidation(model);\n        if (resultId != null && !resultId.isEmpty()) {\n            publishChange(InputCreated.create(resultId));\n        }\n        return resultId;\n    }","commit_id":"eaa74537e55462e2ed5d81e4d7f2c977563f8c8d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public <T extends Persisted> int destroy(T model) {\n        final int result = super.destroy(model);\n        if (result > 0) {\n            this.clusterEventBus.post(InputDeleted.create(model.getId()));\n            this.serverEventBus.post(InputDeleted.create(model.getId()));\n        }\n        return result;\n    }","id":100899,"modified_method":"@Override\n    public <T extends Persisted> int destroy(T model) {\n        final int result = super.destroy(model);\n        if (result > 0) {\n            publishChange(InputDeleted.create(model.getId()));\n        }\n        return result;\n    }","commit_id":"eaa74537e55462e2ed5d81e4d7f2c977563f8c8d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/**\n     * @param children\n     * @param snapshotFragments\n     * @return null if there is no log to replay in the whole cluster\n     */\n    private Long deserializeRestoreInformation(List<String> children,\n                                               Map<Long, Set<SnapshotInfo>> snapshotFragments) {\n        byte recover = m_action != START_ACTION.CREATE ? (byte) 1 : 0;\n        Long clStartTxnId = null;\n        ByteBuffer buf;\n        for (String node : children) {\n            byte[] data = null;\n            try {\n                data = m_zk.getData(RESTORE + \"/\" + node, false, null);\n            } catch (Exception e) {\n                LOG.fatal(e.getMessage());\n                VoltDB.crashVoltDB();\n            }\n\n            buf = ByteBuffer.wrap(data);\n            // Check if there is log to replay\n            boolean hasLog = buf.get() == 1;\n            if (hasLog) {\n                long minTxnId = buf.getLong();\n                if (clStartTxnId == null || minTxnId > clStartTxnId) {\n                    clStartTxnId = minTxnId;\n                }\n            }\n\n            byte recoverByte = buf.get();\n            if (recoverByte != recover) {\n                LOG.fatal(\"Database actions are not consistent, please enter \" +\n                          \"the same database action on the command-line.\");\n                VoltDB.crashVoltDB();\n            }\n\n            int count = buf.getInt();\n            for (int i = 0; i < count; i++) {\n                long txnId = buf.getLong();\n                Set<SnapshotInfo> fragments = snapshotFragments.get(txnId);\n                if (fragments == null) {\n                    fragments = new HashSet<SnapshotInfo>();\n                    snapshotFragments.put(txnId, fragments);\n                }\n\n                int len = buf.getInt();\n                byte[] nonceBytes = new byte[len];\n                buf.get(nonceBytes);\n\n                len = buf.getInt();\n                byte[] pathBytes = new byte[len];\n                buf.get(pathBytes);\n\n                int totalPartitionCount = buf.getInt();\n\n                SnapshotInfo info = new SnapshotInfo(txnId, new String(pathBytes),\n                                                     new String(nonceBytes),\n                                                     totalPartitionCount);\n                fragments.add(info);\n\n                int tableCount = buf.getInt();\n                for (int j = 0; j < tableCount; j++) {\n                    len = buf.getInt();\n                    byte[] tableNameBytes = new byte[len];\n                    buf.get(tableNameBytes);\n\n                    int partitionCount = buf.getInt();\n                    HashSet<Integer> partitions = new HashSet<Integer>(partitionCount);\n                    info.partitions.put(new String(tableNameBytes), partitions);\n                    for (int k = 0; k < partitionCount; k++) {\n                        partitions.add(buf.getInt());\n                    }\n                }\n            }\n        }\n        return clStartTxnId;\n    }","id":100900,"modified_method":"/**\n     * @param children\n     * @param snapshotFragments\n     * @return null if there is no log to replay in the whole cluster\n     */\n    private Long deserializeRestoreInformation(List<String> children,\n                                               Map<Long, Set<SnapshotInfo>> snapshotFragments) {\n        byte recover = m_action != START_ACTION.CREATE ? (byte) 1 : 0;\n        Long clStartTxnId = null;\n        ByteBuffer buf;\n        for (String node : children) {\n            byte[] data = null;\n            try {\n                data = m_zk.getData(RESTORE + \"/\" + node, false, null);\n            } catch (Exception e) {\n                LOG.fatal(e.getMessage());\n                VoltDB.crashVoltDB();\n            }\n\n            buf = ByteBuffer.wrap(data);\n            // Check if there is log to replay\n            boolean hasLog = buf.get() == 1;\n            if (hasLog) {\n                long minTxnId = buf.getLong();\n                if (clStartTxnId == null || minTxnId > clStartTxnId) {\n                    clStartTxnId = minTxnId;\n                }\n            }\n\n            byte recoverByte = buf.get();\n            if (recoverByte != recover) {\n                LOG.fatal(\"Database actions are not consistent, please enter \" +\n                          \"the same database action on the command-line.\");\n                VoltDB.crashVoltDB();\n            }\n\n            int count = buf.getInt();\n            for (int i = 0; i < count; i++) {\n                long txnId = buf.getLong();\n                Set<SnapshotInfo> fragments = snapshotFragments.get(txnId);\n                if (fragments == null) {\n                    fragments = new HashSet<SnapshotInfo>();\n                    snapshotFragments.put(txnId, fragments);\n                }\n                long catalogCrc = buf.getLong();\n\n                int len = buf.getInt();\n                byte[] nonceBytes = new byte[len];\n                buf.get(nonceBytes);\n\n                len = buf.getInt();\n                byte[] pathBytes = new byte[len];\n                buf.get(pathBytes);\n\n                int totalPartitionCount = buf.getInt();\n\n                SnapshotInfo info = new SnapshotInfo(txnId, new String(pathBytes),\n                                                     new String(nonceBytes),\n                                                     totalPartitionCount,\n                                                     catalogCrc);\n                fragments.add(info);\n\n                int tableCount = buf.getInt();\n                for (int j = 0; j < tableCount; j++) {\n                    len = buf.getInt();\n                    byte[] tableNameBytes = new byte[len];\n                    buf.get(tableNameBytes);\n\n                    int partitionCount = buf.getInt();\n                    HashSet<Integer> partitions = new HashSet<Integer>(partitionCount);\n                    info.partitions.put(new String(tableNameBytes), partitions);\n                    for (int k = 0; k < partitionCount; k++) {\n                        partitions.add(buf.getInt());\n                    }\n                }\n            }\n        }\n        return clStartTxnId;\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Pick the snapshot to restore from based on the global snapshot\n     * information.\n     *\n     * @return The snapshot to restore from, null if none.\n     */\n    private Entry<Long, Set<SnapshotInfo>> getRestorePlan() {\n        /*\n         * Only let the first host do the rest, so we don't end up having\n         * multiple hosts trying to initiate a snapshot restore\n         */\n        if (!isLowestHost()) {\n            return null;\n        }\n\n        LOG.debug(\"Waiting for all hosts to send their snapshot information\");\n        List<String> children = null;\n        while (true) {\n            try {\n                children = m_zk.getChildren(RESTORE, false);\n            } catch (KeeperException e2) {\n                LOG.fatal(e2.getMessage());\n                VoltDB.crashVoltDB();\n            } catch (InterruptedException e2) {\n                continue;\n            }\n\n            Set<Integer> liveHosts = m_context.siteTracker.getAllLiveHosts();\n            if (children.size() < liveHosts.size()) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e1) {}\n            } else {\n                break;\n            }\n        }\n\n        if (children == null) {\n            LOG.fatal(\"Unable to read agreement messages from other hosts for\" +\n                      \" restore plan\");\n            VoltDB.crashVoltDB();\n        }\n\n        TreeMap<Long, Set<SnapshotInfo>> snapshotFragments = new TreeMap<Long, Set<SnapshotInfo>>();\n        Long clStartTxnId = deserializeRestoreInformation(children, snapshotFragments);\n\n        // If we're not recovering, skip the rest\n        if (m_action == START_ACTION.CREATE) {\n            return null;\n        }\n\n        // Filter all snapshots that are not viable\n        Iterator<Long> iter = snapshotFragments.keySet().iterator();\n        while (iter.hasNext()) {\n            Long txnId = iter.next();\n            if (clStartTxnId != null &&\n                (clStartTxnId < 0 || txnId < clStartTxnId)) {\n                iter.remove();\n            }\n        }\n\n        if (clStartTxnId != null && clStartTxnId > 0 &&\n            snapshotFragments.size() == 0) {\n            LOG.fatal(\"No viable snapshots to restore\");\n            VoltDB.crashVoltDB();\n        }\n        LOG.debug(\"There are \" + snapshotFragments.size() +\n                  \" snapshots available in the cluster\");\n\n        // Find the last complete snapshot and use it\n        HashMap<Long, Map<String, Set<Integer>>> snapshotTablePartitions =\n            new HashMap<Long, Map<String,Set<Integer>>>();\n        Iterator<Entry<Long, Set<SnapshotInfo>>> it = snapshotFragments.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<Long, Set<SnapshotInfo>> e = it.next();\n            long txnId = e.getKey();\n            Map<String, Set<Integer>> tablePartitions = snapshotTablePartitions.get(txnId);\n            if (tablePartitions == null) {\n                tablePartitions = new HashMap<String, Set<Integer>>();\n                snapshotTablePartitions.put(txnId, tablePartitions);\n            }\n\n            int totalPartitions = -1;\n            boolean inconsistent = false;\n            Set<SnapshotInfo> fragments = e.getValue();\n            for (SnapshotInfo s : fragments) {\n                if (totalPartitions == -1) {\n                    totalPartitions = s.partitionCount;\n                } else if (totalPartitions != s.partitionCount) {\n                    inconsistent = true;\n                    break;\n                }\n\n                for (Entry<String, Set<Integer>> entry : s.partitions.entrySet()) {\n                    Set<Integer> partitions = tablePartitions.get(entry.getKey());\n                    if (partitions == null) {\n                        tablePartitions.put(entry.getKey(), entry.getValue());\n                    } else {\n                        partitions.addAll(entry.getValue());\n                    }\n                }\n\n                if (inconsistent) {\n                    break;\n                }\n            }\n\n            // Check if we have all the partitions\n            for (Set<Integer> partitions : tablePartitions.values()) {\n                if (partitions.size() != totalPartitions) {\n                    inconsistent = true;\n                    break;\n                }\n            }\n\n            if (inconsistent) {\n                it.remove();\n            }\n        }\n\n        if (clStartTxnId != null && clStartTxnId > 0 &&\n            snapshotFragments.size() == 0) {\n            LOG.fatal(\"No viable snapshots to restore\");\n            VoltDB.crashVoltDB();\n        }\n\n        return snapshotFragments.lastEntry();\n    }","id":100901,"modified_method":"/**\n     * Pick the snapshot to restore from based on the global snapshot\n     * information.\n     *\n     * @return The snapshot to restore from, null if none.\n     */\n    private Entry<Long, Set<SnapshotInfo>> getRestorePlan() {\n        /*\n         * Only let the first host do the rest, so we don't end up having\n         * multiple hosts trying to initiate a snapshot restore\n         */\n        if (!isLowestHost()) {\n            return null;\n        }\n\n        LOG.debug(\"Waiting for all hosts to send their snapshot information\");\n        List<String> children = null;\n        while (true) {\n            try {\n                children = m_zk.getChildren(RESTORE, false);\n            } catch (KeeperException e2) {\n                LOG.fatal(e2.getMessage());\n                VoltDB.crashVoltDB();\n            } catch (InterruptedException e2) {\n                continue;\n            }\n\n            Set<Integer> liveHosts = m_context.siteTracker.getAllLiveHosts();\n            if (children.size() < liveHosts.size()) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e1) {}\n            } else {\n                break;\n            }\n        }\n\n        if (children == null) {\n            LOG.fatal(\"Unable to read agreement messages from other hosts for\" +\n                      \" restore plan\");\n            VoltDB.crashVoltDB();\n        }\n\n        TreeMap<Long, Set<SnapshotInfo>> snapshotFragments = new TreeMap<Long, Set<SnapshotInfo>>();\n        Long clStartTxnId = deserializeRestoreInformation(children, snapshotFragments);\n\n        // If we're not recovering, skip the rest\n        if (m_action == START_ACTION.CREATE) {\n            return null;\n        }\n\n        boolean crc_catalog_match = false;\n        // Eliminate any snapshot fragments that don't match our command log (if we have one)\n        crc_catalog_match = currySnapshotInfo(clStartTxnId, m_context.catalogCRC,\n                                              snapshotFragments);\n        // If we have a command log and it requires a snapshot, then bail if\n        // there's no good snapshot\n        if ((clStartTxnId != null && clStartTxnId != Long.MIN_VALUE) &&\n            snapshotFragments.size() == 0)\n        {\n            if (!crc_catalog_match)\n            {\n                LOG.fatal(\"No snapshot present that matches the loaded catalog.\");\n            }\n            LOG.fatal(\"No viable snapshots to restore\");\n            VoltDB.crashVoltDB();\n        }\n        LOG.debug(\"There are \" + snapshotFragments.size() +\n                  \" snapshots available in the cluster\");\n\n        // Find the last complete snapshot and use it\n        HashMap<Long, Map<String, Set<Integer>>> snapshotTablePartitions =\n            new HashMap<Long, Map<String,Set<Integer>>>();\n        Iterator<Entry<Long, Set<SnapshotInfo>>> it = snapshotFragments.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<Long, Set<SnapshotInfo>> e = it.next();\n            long txnId = e.getKey();\n            Map<String, Set<Integer>> tablePartitions = snapshotTablePartitions.get(txnId);\n            if (tablePartitions == null) {\n                tablePartitions = new HashMap<String, Set<Integer>>();\n                snapshotTablePartitions.put(txnId, tablePartitions);\n            }\n\n            int totalPartitions = -1;\n            boolean inconsistent = false;\n            Set<SnapshotInfo> fragments = e.getValue();\n            for (SnapshotInfo s : fragments) {\n                if (totalPartitions == -1) {\n                    totalPartitions = s.partitionCount;\n                } else if (totalPartitions != s.partitionCount) {\n                    inconsistent = true;\n                    break;\n                }\n\n                for (Entry<String, Set<Integer>> entry : s.partitions.entrySet()) {\n                    Set<Integer> partitions = tablePartitions.get(entry.getKey());\n                    if (partitions == null) {\n                        tablePartitions.put(entry.getKey(), entry.getValue());\n                    } else {\n                        partitions.addAll(entry.getValue());\n                    }\n                }\n\n                if (inconsistent) {\n                    break;\n                }\n            }\n\n            // Check if we have all the partitions\n            for (Set<Integer> partitions : tablePartitions.values()) {\n                if (partitions.size() != totalPartitions) {\n                    inconsistent = true;\n                    break;\n                }\n            }\n\n            if (inconsistent) {\n                it.remove();\n            }\n        }\n\n        if (clStartTxnId != null && clStartTxnId > 0 &&\n            snapshotFragments.size() == 0) {\n            LOG.fatal(\"No viable snapshots to restore\");\n            VoltDB.crashVoltDB();\n        }\n\n        return snapshotFragments.lastEntry();\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public SnapshotInfo(long txnId, String path, String nonce, int partitions) {\n            this.txnId = txnId;\n            this.path = path;\n            this.nonce = nonce;\n            this.partitionCount = partitions;\n        }","id":100902,"modified_method":"public SnapshotInfo(long txnId, String path, String nonce, int partitions,\n                            long catalogCrc)\n        {\n            this.txnId = txnId;\n            this.path = path;\n            this.nonce = nonce;\n            this.partitionCount = partitions;\n            this.catalogCrc = catalogCrc;\n        }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * @param min\n     * @param snapshots\n     * @return\n     */\n    private ByteBuffer serializeRestoreInformation(Long min, Set<SnapshotInfo> snapshots) {\n        // hasLog + recover + snapshotCount\n        int size = 1 + 1 + 4;\n        if (min != null) {\n            // we need to add the size of the min number to the total size\n            size += 8;\n        }\n        for (SnapshotInfo i : snapshots) {\n            size += i.size();\n        }\n\n        ByteBuffer buf = ByteBuffer.allocate(size);\n        if (min == null) {\n            buf.put((byte) 0);\n        } else {\n            buf.put((byte) 1);\n            buf.putLong(min);\n        }\n        // 1 means recover, 0 means to create new DB\n        buf.put(m_action != START_ACTION.CREATE ? (byte) 1 : 0);\n\n        buf.putInt(snapshots.size());\n        for (SnapshotInfo snapshot : snapshots) {\n            buf.putLong(snapshot.txnId);\n            buf.putInt(snapshot.nonce.length());\n            buf.put(snapshot.nonce.getBytes());\n            buf.putInt(snapshot.path.length());\n            buf.put(snapshot.path.getBytes());\n            buf.putInt(snapshot.partitionCount);\n            buf.putInt(snapshot.partitions.size());\n            for (Entry<String, Set<Integer>> p : snapshot.partitions.entrySet()) {\n                buf.putInt(p.getKey().length());\n                buf.put(p.getKey().getBytes());\n                buf.putInt(p.getValue().size());\n                for (int id : p.getValue()) {\n                    buf.putInt(id);\n                }\n            }\n        }\n        return buf;\n    }","id":100903,"modified_method":"/**\n     * @param min\n     * @param snapshots\n     * @return\n     */\n    private ByteBuffer serializeRestoreInformation(Long min, Set<SnapshotInfo> snapshots) {\n        // hasLog + recover + snapshotCount\n        int size = 1 + 1 + 4;\n        if (min != null) {\n            // we need to add the size of the min number to the total size\n            size += 8;\n        }\n        for (SnapshotInfo i : snapshots) {\n            size += i.size();\n        }\n\n        ByteBuffer buf = ByteBuffer.allocate(size);\n        if (min == null) {\n            buf.put((byte) 0);\n        } else {\n            buf.put((byte) 1);\n            buf.putLong(min);\n        }\n        // 1 means recover, 0 means to create new DB\n        buf.put(m_action != START_ACTION.CREATE ? (byte) 1 : 0);\n\n        buf.putInt(snapshots.size());\n        for (SnapshotInfo snapshot : snapshots) {\n            buf.putLong(snapshot.txnId);\n            buf.putLong(snapshot.catalogCrc);\n            buf.putInt(snapshot.nonce.length());\n            buf.put(snapshot.nonce.getBytes());\n            buf.putInt(snapshot.path.length());\n            buf.put(snapshot.path.getBytes());\n            buf.putInt(snapshot.partitionCount);\n            buf.putInt(snapshot.partitions.size());\n            for (Entry<String, Set<Integer>> p : snapshot.partitions.entrySet()) {\n                buf.putInt(p.getKey().length());\n                buf.put(p.getKey().getBytes());\n                buf.putInt(p.getValue().size());\n                for (int id : p.getValue()) {\n                    buf.putInt(id);\n                }\n            }\n        }\n        return buf;\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public int size() {\n            // txnId + pathLen + nonceLen + partCount + path + nonce\n            int size = 8 + 4 + 4 + 8 + 4 + path.length() + nonce.length();\n            for (Entry<String, Set<Integer>> e : partitions.entrySet()) {\n                size += 4 + 4 + e.getKey().length() + 4 * e.getValue().size();\n            }\n            return size;\n        }","id":100904,"modified_method":"public int size() {\n            // I can't make this add up --izzy\n            // txnId + pathLen + nonceLen + partCount + catalogCrc + path + nonce\n            int size = 8 + 4 + 4 + 8 + 8 + 4 + path.length() + nonce.length();\n            for (Entry<String, Set<Integer>> e : partitions.entrySet()) {\n                size += 4 + 4 + e.getKey().length() + 4 * e.getValue().size();\n            }\n            return size;\n        }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Test\n    public void testMultipleHostEmptyRestore() throws Exception {\n        m_hostCount = 3;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null));\n        MockInitiator initiator = new MockInitiator(null);\n        List<RestoreAgent> agents = new ArrayList<RestoreAgent>();\n\n        for (int i = 0; i < m_hostCount; i++) {\n            agents.add(new RestoreAgent(context, initiator,\n                                        getClient(0), snapshotMonitor,\n                                        this, i, START_ACTION.START));\n        }\n        for (RestoreAgent agent : agents) {\n            agent.restore();\n        }\n\n        int count = 0;\n        while (!m_done && count++ < 50) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        if (!m_done) {\n            fail(\"Timed out\");\n        }\n    }","id":100905,"modified_method":"@Test\n    public void testMultipleHostEmptyRestore() throws Exception {\n        m_hostCount = 3;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null), false, true);\n        MockInitiator initiator = new MockInitiator(null);\n        List<RestoreAgent> agents = new ArrayList<RestoreAgent>();\n\n        for (int i = 0; i < m_hostCount; i++) {\n            agents.add(new RestoreAgent(context, initiator,\n                                        getClient(0), snapshotMonitor,\n                                        this, i, START_ACTION.START));\n        }\n        for (RestoreAgent agent : agents) {\n            agent.restore();\n        }\n\n        int count = 0;\n        while (!m_done && count++ < 50) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        if (!m_done) {\n            fail(\"Timed out\");\n        }\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Test\n    public void testSingleHostEmptyRestore() throws Exception {\n        m_hostCount = 1;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null));\n        MockInitiator initiator = new MockInitiator(null);\n        RestoreAgent restoreAgent = new RestoreAgent(context, initiator,\n                                                     getClient(0),\n                                                     snapshotMonitor,\n                                                     this,\n                                                     0, START_ACTION.START);\n        restoreAgent.restore();\n        while (!m_done) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n    }","id":100906,"modified_method":"@Test\n    public void testSingleHostEmptyRestore() throws Exception {\n        m_hostCount = 1;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null), false, true);\n        MockInitiator initiator = new MockInitiator(null);\n        RestoreAgent restoreAgent = new RestoreAgent(context, initiator,\n                                                     getClient(0),\n                                                     snapshotMonitor,\n                                                     this,\n                                                     0, START_ACTION.START);\n        restoreAgent.restore();\n        while (!m_done) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Test\n    public void testMultiHostSnapshotRestore() throws Exception {\n        m_hostCount = 1;\n        String voltroot = newVoltRoot(null);\n        buildCatalog(m_hostCount, 8, 0, voltroot);\n        ServerThread server = new ServerThread(context.pathToCatalogJar,\n                                               deploymentPath,\n                                               BackendTarget.NATIVE_EE_JNI);\n        server.start();\n        server.waitForInitialization();\n        snapshot();\n        server.shutdown();\n\n        m_hostCount = 3;\n        buildCatalog(m_hostCount, 8, 1, voltroot);\n        HashSet<String> procs = new HashSet<String>();\n        procs.add(\"@SnapshotRestore\");\n        MockInitiator initiator = new MockInitiator(procs);\n        List<RestoreAgent> agents = new ArrayList<RestoreAgent>();\n\n        for (int i = 0; i < m_hostCount; i++) {\n            agents.add(new RestoreAgent(context, initiator,\n                                        getClient(0), snapshotMonitor,\n                                        this, i, START_ACTION.START));\n        }\n        for (RestoreAgent agent : agents) {\n            agent.restore();\n        }\n\n        while (!m_done) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        Long count = initiator.getProcCounts().get(\"@SnapshotRestore\");\n        assertEquals(new Long(1), count);\n    }","id":100907,"modified_method":"@Test\n    public void testMultiHostSnapshotRestore() throws Exception {\n        m_hostCount = 1;\n        String voltroot = newVoltRoot(null);\n        buildCatalog(m_hostCount, 8, 0, voltroot, false, true);\n        ServerThread server = new ServerThread(context.pathToCatalogJar,\n                                               deploymentPath,\n                                               BackendTarget.NATIVE_EE_JNI);\n        server.start();\n        server.waitForInitialization();\n        snapshot();\n        server.shutdown();\n\n        m_hostCount = 3;\n        buildCatalog(m_hostCount, 8, 1, voltroot, false, true);\n        HashSet<String> procs = new HashSet<String>();\n        procs.add(\"@SnapshotRestore\");\n        MockInitiator initiator = new MockInitiator(procs);\n        List<RestoreAgent> agents = new ArrayList<RestoreAgent>();\n\n        for (int i = 0; i < m_hostCount; i++) {\n            agents.add(new RestoreAgent(context, initiator,\n                                        getClient(0), snapshotMonitor,\n                                        this, i, START_ACTION.START));\n        }\n        for (RestoreAgent agent : agents) {\n            agent.restore();\n        }\n\n        while (!m_done) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        Long count = initiator.getProcCounts().get(\"@SnapshotRestore\");\n        assertEquals(new Long(1), count);\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Build a new catalog context.\n     *\n     * @param hostCount\n     * @param sitesPerHost\n     * @param kfactor\n     * @param voltroot\n     * @throws IOException\n     */\n    void buildCatalog(int hostCount, int sitesPerHost, int kfactor, String voltroot)\n    throws IOException {\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        String schema = \"create table A (i integer not null, s varchar(30), sh smallint, l bigint, primary key (i));\";\n        builder.addLiteralSchema(schema);\n        builder.addPartitionInfo(\"A\", \"i\");\n        builder.addStmtProcedure(\"hello\", \"select * from A where i = ? and s = ?\", \"A.i: 0\");\n        builder.addStmtProcedure(\"world\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n        builder.addStmtProcedure(\"bid\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n        builder.addStmtProcedure(\"sum\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n        builder.addStmtProcedure(\"calc\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n        builder.addStmtProcedure(\"HowWillAppleNameItsVaccuumCleaner\", \"select * from A where l = ? and sh = ? and s = ?\");\n        builder.addStmtProcedure(\"Dedupe\", \"select * from A where l = ? and sh = ?\");\n        builder.addStmtProcedure(\"Cill\", \"select * from A where l = ? and s = ?\");\n        builder.configureLogging(voltroot, voltroot, false, false, 200, 20000);\n\n\n        File cat = File.createTempFile(\"temp-restore\", \"catalog\");\n        cat.deleteOnExit();\n        assertTrue(builder.compile(cat.getAbsolutePath(), sitesPerHost,\n                                   hostCount, kfactor, \"localhost\",\n                                   voltroot));\n        deploymentPath = builder.getPathToDeployment();\n\n        String serializedCat = CatalogUtil.loadCatalogFromJar(cat.getAbsolutePath(),\n                                                              null);\n        assertNotNull(serializedCat);\n        Catalog catalog = new Catalog();\n        catalog.execute(serializedCat);\n\n        long crc = CatalogUtil.compileDeploymentAndGetCRC(catalog, deploymentPath,\n                                                          true);\n        context = new CatalogContext(0, catalog, cat.getAbsolutePath(), crc, 0, 0);\n    }","id":100908,"modified_method":"/**\n     * Build a new catalog context.\n     *\n     * @param hostCount\n     * @param sitesPerHost\n     * @param kfactor\n     * @param voltroot\n     * @param excludeProcs  used to create a different catalog to check CRC match\n     * @param rebuildAll TODO\n     * @throws IOException\n     */\n    void buildCatalog(int hostCount, int sitesPerHost, int kfactor, String voltroot,\n                      boolean excludeProcs, boolean rebuildAll)\n    throws IOException {\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        String schema = \"create table A (i integer not null, s varchar(30), sh smallint, l bigint, primary key (i));\";\n        builder.addLiteralSchema(schema);\n        builder.addPartitionInfo(\"A\", \"i\");\n        builder.addStmtProcedure(\"hello\", \"select * from A where i = ? and s = ?\", \"A.i: 0\");\n        builder.addStmtProcedure(\"world\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n        if (!excludeProcs)\n        {\n            builder.addStmtProcedure(\"bid\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n            builder.addStmtProcedure(\"sum\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n            builder.addStmtProcedure(\"calc\", \"select * from A where i = ? and sh = ? and s = ?\", \"A.i: 0\");\n            builder.addStmtProcedure(\"HowWillAppleNameItsVaccuumCleaner\", \"select * from A where l = ? and sh = ? and s = ?\");\n            builder.addStmtProcedure(\"Dedupe\", \"select * from A where l = ? and sh = ?\");\n            builder.addStmtProcedure(\"Cill\", \"select * from A where l = ? and s = ?\");\n        }\n        builder.configureLogging(voltroot, voltroot, false, false, 200, 20000);\n\n\n        File cat = File.createTempFile(\"temp-restore\", \"catalog\");\n        cat.deleteOnExit();\n        assertTrue(builder.compile(cat.getAbsolutePath(), sitesPerHost,\n                                   hostCount, kfactor, \"localhost\",\n                                   voltroot));\n        deploymentPath = builder.getPathToDeployment();\n\n        File cat_to_use = cat;\n        if (rebuildAll)\n        {\n            catalogJarFile = cat;\n        }\n        else\n        {\n            cat_to_use = catalogJarFile;\n        }\n\n        String serializedCat =\n            CatalogUtil.loadCatalogFromJar(cat_to_use.getAbsolutePath(),\n                                           null);\n        assertNotNull(serializedCat);\n        Catalog catalog = new Catalog();\n        catalog.execute(serializedCat);\n\n        long crc = CatalogUtil.compileDeploymentAndGetCRC(catalog, deploymentPath,\n                                                          true);\n        context = new CatalogContext(0, catalog,\n                                     cat_to_use.getAbsolutePath(),\n                                     crc, 0, 0);\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Test\n    public void testMultipleHostAgreementFailure() throws Exception {\n        m_hostCount = 3;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null));\n        MockInitiator initiator = new MockInitiator(null);\n        List<RestoreAgent> agents = new ArrayList<RestoreAgent>();\n\n        for (int i = 0; i < m_hostCount - 1; i++) {\n            agents.add(new RestoreAgent(context, initiator,\n                                        getClient(0), snapshotMonitor,\n                                        this, i, START_ACTION.START));\n        }\n        for (RestoreAgent agent : agents) {\n            agent.restore();\n        }\n\n        int count = 0;\n        while (!m_done && count++ < 10) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        if (m_done) {\n            fail();\n        }\n\n        // Start the last restore agent, should be able to reach agreement now\n        RestoreAgent agent = new RestoreAgent(context, initiator,\n                                              getClient(0), snapshotMonitor,\n                                              this, m_hostCount - 1,\n                                              START_ACTION.START);\n        agent.restore();\n\n        count = 0;\n        while (!m_done && count++ < 10) {\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {}\n        }\n\n        if (!m_done) {\n            fail();\n        }\n    }","id":100909,"modified_method":"@Test\n    public void testMultipleHostAgreementFailure() throws Exception {\n        m_hostCount = 3;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null), false, true);\n        MockInitiator initiator = new MockInitiator(null);\n        List<RestoreAgent> agents = new ArrayList<RestoreAgent>();\n\n        for (int i = 0; i < m_hostCount - 1; i++) {\n            agents.add(new RestoreAgent(context, initiator,\n                                        getClient(0), snapshotMonitor,\n                                        this, i, START_ACTION.START));\n        }\n        for (RestoreAgent agent : agents) {\n            agent.restore();\n        }\n\n        int count = 0;\n        while (!m_done && count++ < 10) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        if (m_done) {\n            fail();\n        }\n\n        // Start the last restore agent, should be able to reach agreement now\n        RestoreAgent agent = new RestoreAgent(context, initiator,\n                                              getClient(0), snapshotMonitor,\n                                              this, m_hostCount - 1,\n                                              START_ACTION.START);\n        agent.restore();\n\n        count = 0;\n        while (!m_done && count++ < 10) {\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {}\n        }\n\n        if (!m_done) {\n            fail();\n        }\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Test\n    public void testSingleHostSnapshotRestore() throws Exception {\n        m_hostCount = 1;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null));\n        ServerThread server = new ServerThread(context.pathToCatalogJar,\n                                               deploymentPath,\n                                               BackendTarget.NATIVE_EE_JNI);\n        server.start();\n        server.waitForInitialization();\n        snapshot();\n        server.shutdown();\n\n        HashSet<String> procs = new HashSet<String>();\n        procs.add(\"@SnapshotRestore\");\n        MockInitiator initiator = new MockInitiator(procs);\n        RestoreAgent restoreAgent = new RestoreAgent(context, initiator,\n                                                     getClient(0),\n                                                     snapshotMonitor, this,\n                                                     0, START_ACTION.START);\n        restoreAgent.restore();\n        while (!m_done) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        Long count = initiator.getProcCounts().get(\"@SnapshotRestore\");\n        assertEquals(new Long(1), count);\n    }","id":100910,"modified_method":"@Test\n    public void testSingleHostSnapshotRestore() throws Exception {\n        m_hostCount = 1;\n        buildCatalog(m_hostCount, 8, 0, newVoltRoot(null), false, true);\n        ServerThread server = new ServerThread(context.pathToCatalogJar,\n                                               deploymentPath,\n                                               BackendTarget.NATIVE_EE_JNI);\n        server.start();\n        server.waitForInitialization();\n        snapshot();\n        server.shutdown();\n\n        HashSet<String> procs = new HashSet<String>();\n        procs.add(\"@SnapshotRestore\");\n        MockInitiator initiator = new MockInitiator(procs);\n        RestoreAgent restoreAgent = new RestoreAgent(context, initiator,\n                                                     getClient(0),\n                                                     snapshotMonitor, this,\n                                                     0, START_ACTION.START);\n        restoreAgent.restore();\n        while (!m_done) {\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {}\n        }\n\n        Long count = initiator.getProcCounts().get(\"@SnapshotRestore\");\n        assertEquals(new Long(1), count);\n    }","commit_id":"7996ce640d0b28935ab1416a50cdd8351142d1d1","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n      //modify the runtime if we're booting, otherwise set reload required and leave the runtime unchanged\n      if (context.isBooting()) {\n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n         //get the server config object from the ServerConfigService (service installed and not started yet, but the object is fine for our needs here)\n         final ServerConfig serverConfig = ASHelper.getMSCService(WSServices.CONFIG_SERVICE, ServerConfig.class, context);\n         final ServiceName serviceName = getClientConfigServiceName(name);\n         final ConfigService clientConfigService = new ConfigService(serverConfig, name, true);\n         final ServiceTarget target = context.getServiceTarget();\n         final ServiceBuilder<?> clientServiceBuilder = target.addService(serviceName, clientConfigService);\n         for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.PROPERTY)) {\n             clientServiceBuilder.addDependency(sn, PropertyService.class, clientConfigService.getPropertiesInjector());\n         }\n         setDependency(context, clientServiceBuilder, clientConfigService.getPreHandlerChainsInjector(), UnifiedHandlerChainMetaData.class, serviceName, address, Constants.PRE_HANDLER_CHAIN);\n         final Injector<UnifiedHandlerChainMetaData> postInjector = clientConfigService.getPostHandlerChainsInjector();\n         setDependency(context, clientServiceBuilder, postInjector, UnifiedHandlerChainMetaData.class, serviceName, address, Constants.POST_HANDLER_CHAIN);\n         ServiceController<?> controller = clientServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n         if (newControllers != null) {\n             newControllers.add(controller);\n         }\n      } else {\n         context.reloadRequired();\n      }\n    }","id":100911,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n      //modify the runtime if we're booting, otherwise set reload required and leave the runtime unchanged\n      if (context.isBooting()) {\n         final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         final String name = address.getLastElement().getValue();\n         //get the server config object from the ServerConfigService (service installed and not started yet, but the object is fine for our needs here)\n         final ServerConfig serverConfig = ASHelper.getMSCService(WSServices.CONFIG_SERVICE, ServerConfig.class, context);\n         final ServiceName serviceName = getClientConfigServiceName(name);\n         final ConfigService clientConfigService = new ConfigService(serverConfig, name, true);\n         final ServiceTarget target = context.getServiceTarget();\n         final ServiceBuilder<?> clientServiceBuilder = target.addService(serviceName, clientConfigService);\n         for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.PROPERTY)) {\n             clientServiceBuilder.addDependency(sn, PropertyService.class, clientConfigService.getPropertiesInjector()); //get a new injector instance each time\n         }\n         for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.PRE_HANDLER_CHAIN)) {\n             clientServiceBuilder.addDependency(sn, UnifiedHandlerChainMetaData.class, clientConfigService.getPreHandlerChainsInjector()); //get a new injector instance each time\n         }\n         for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.POST_HANDLER_CHAIN)) {\n             clientServiceBuilder.addDependency(sn, UnifiedHandlerChainMetaData.class, clientConfigService.getPostHandlerChainsInjector()); //get a new injector instance each time\n         }\n         ServiceController<?> controller = clientServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n         if (newControllers != null) {\n             newControllers.add(controller);\n         }\n      } else {\n         context.reloadRequired();\n      }\n    }","commit_id":"d275fd30cebbed3bc0bac7973e1f226f65e839d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n        //modify the runtime if we're booting, otherwise set reload required and leave the runtime unchanged\n        if (context.isBooting()) {\n           final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n           final String name = address.getLastElement().getValue();\n\n           //get the server config object from the ServerConfigService (service installed but not started yet, but the object is fine for our needs here)\n           final ServerConfig serverConfig = ASHelper.getMSCService(WSServices.CONFIG_SERVICE, ServerConfig.class, context);\n           final ServiceName serviceName = getEndpointConfigServiceName(name);\n           final ConfigService endpointConfigService = new ConfigService(serverConfig, name, false);\n\n           final ServiceTarget target = context.getServiceTarget();\n           final ServiceBuilder<?> clientServiceBuilder = target.addService(serviceName, endpointConfigService);\n           for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.PROPERTY)) {\n               clientServiceBuilder.addDependency(sn, PropertyService.class, endpointConfigService.getPropertiesInjector());\n           }\n           setDependency(context, clientServiceBuilder, endpointConfigService.getPreHandlerChainsInjector(), serviceName, address, Constants.PRE_HANDLER_CHAIN);\n           setDependency(context, clientServiceBuilder, endpointConfigService.getPostHandlerChainsInjector(), serviceName, address, Constants.POST_HANDLER_CHAIN);\n           ServiceController<?> controller = clientServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n           if (newControllers != null) {\n               newControllers.add(controller);\n           }\n        } else {\n           context.reloadRequired();\n        }\n    }","id":100912,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n        //modify the runtime if we're booting, otherwise set reload required and leave the runtime unchanged\n        if (context.isBooting()) {\n           final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n           final String name = address.getLastElement().getValue();\n\n           //get the server config object from the ServerConfigService (service installed but not started yet, but the object is fine for our needs here)\n           final ServerConfig serverConfig = ASHelper.getMSCService(WSServices.CONFIG_SERVICE, ServerConfig.class, context);\n           final ServiceName serviceName = getEndpointConfigServiceName(name);\n           final ConfigService endpointConfigService = new ConfigService(serverConfig, name, false);\n\n           final ServiceTarget target = context.getServiceTarget();\n           final ServiceBuilder<?> serviceBuilder = target.addService(serviceName, endpointConfigService);\n           for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.PROPERTY)) {\n               serviceBuilder.addDependency(sn, PropertyService.class, endpointConfigService.getPropertiesInjector()); //get a new injector instance each time\n           }\n           for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.PRE_HANDLER_CHAIN)) {\n               serviceBuilder.addDependency(sn, UnifiedHandlerChainMetaData.class, endpointConfigService.getPreHandlerChainsInjector()); //get a new injector instance each time\n           }\n           for (ServiceName sn : PackageUtils.getServiceNameDependencies(context, serviceName, address, Constants.POST_HANDLER_CHAIN)) {\n               serviceBuilder.addDependency(sn, UnifiedHandlerChainMetaData.class, endpointConfigService.getPostHandlerChainsInjector()); //get a new injector instance each time\n           }\n           ServiceController<?> controller = serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n           if (newControllers != null) {\n               newControllers.add(controller);\n           }\n        } else {\n           context.reloadRequired();\n        }\n    }","commit_id":"d275fd30cebbed3bc0bac7973e1f226f65e839d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected UtilCache getOrCreateCache(String widgetName) {\n        synchronized (UtilCache.utilCacheTable) {\n            String name = getCacheName(widgetName);\n            UtilCache cache = (UtilCache) UtilCache.utilCacheTable.get(name);\n            if (cache == null) {\n                cache = new UtilCache(name, 0, 0, true);\n                cache.setPropertiesParams(new String[] {name});\n            }\n            return cache;\n        }\n    }","id":100913,"modified_method":"protected UtilCache getOrCreateCache(String widgetName) {\n        synchronized (UtilCache.utilCacheTable) {\n            String name = getCacheName(widgetName);\n            UtilCache cache = UtilCache.findCache(name);\n            if (cache == null) {\n                cache = new UtilCache(name, 0, 0, true);\n                cache.setPropertiesParams(new String[] {name});\n            }\n            return cache;\n        }\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"protected UtilCache getCache(String widgetName) {\n        synchronized (UtilCache.utilCacheTable) {\n            return (UtilCache) UtilCache.utilCacheTable.get(getCacheName(widgetName));\n        }\n    }","id":100914,"modified_method":"protected UtilCache getCache(String widgetName) {\n        return UtilCache.findCache(getCacheName(widgetName));\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"protected UtilCache getCache(String entityName) {\n        synchronized (UtilCache.utilCacheTable) {\n            return (UtilCache) UtilCache.utilCacheTable.get(getCacheName(entityName));\n        }\n    }","id":100915,"modified_method":"protected UtilCache getCache(String entityName) {\n        return UtilCache.findCache(getCacheName(entityName));\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"protected UtilCache getOrCreateCache(String entityName) {\n        synchronized (UtilCache.utilCacheTable) {\n            String name = getCacheName(entityName);\n            UtilCache cache = (UtilCache) UtilCache.utilCacheTable.get(name);\n            if (cache == null) {\n                cache = new UtilCache(name, 0, 0, true);\n                String[] names = getCacheNames(entityName);\n                cache.setPropertiesParams(names);\n            }\n            return cache;\n        }\n    }","id":100916,"modified_method":"protected UtilCache getOrCreateCache(String entityName) {\n        synchronized (UtilCache.utilCacheTable) {\n            String name = getCacheName(entityName);\n            UtilCache cache = UtilCache.findCache(name);\n            if (cache == null) {\n                cache = new UtilCache(name, 0, 0, true);\n                String[] names = getCacheNames(entityName);\n                cache.setPropertiesParams(names);\n            }\n            return cache;\n        }\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"protected void storeHook(String entityName, boolean isPK, List oldValues, List newValues) {\n        UtilCache entityCache = null;\n        synchronized (UtilCache.utilCacheTable) {\n            entityCache = (UtilCache) UtilCache.utilCacheTable.get(getCacheName(entityName));\n        }\n        // for info about cache clearing\n        if (newValues == null || newValues.size() == 0 || newValues.get(0) == null) {\n            //Debug.logInfo(\"In storeHook (cache clear) for entity name [\" + entityName + \"], got entity cache with name: \" + (entityCache == null ? \"[No cache found to remove from]\" : entityCache.getName()), module);\n        }\n        if (entityCache == null) {\n            return;\n        }\n        Iterator cacheKeyIter = entityCache.getCacheLineKeys().iterator();\n        while (cacheKeyIter.hasNext()) {\n            EntityCondition condition = (EntityCondition) cacheKeyIter.next();\n            //Debug.logInfo(\"In storeHook entityName [\" + entityName + \"] checking against condition: \" + condition, module);\n            boolean shouldRemove = false;\n            if (condition == null) {\n                shouldRemove = true;\n            } else if (oldValues == null) {\n                Iterator newValueIter = newValues.iterator();\n                while (newValueIter.hasNext() && !shouldRemove) {\n                    Map newValue = (Map) newValueIter.next();\n                    shouldRemove |= condition.mapMatches(getDelegator(), newValue);\n                }\n            } else {\n                boolean oldMatched = false;\n                Iterator oldValueIter = oldValues.iterator();\n                while (oldValueIter.hasNext() && !shouldRemove) {\n                    Map oldValue = (Map) oldValueIter.next();\n                    if (condition.mapMatches(getDelegator(), oldValue)) {\n                        oldMatched = true;\n                        //Debug.logInfo(\"In storeHook, oldMatched for entityName [\" + entityName + \"]; shouldRemove is false\", module);\n                        if (newValues != null) {\n                            Iterator newValueIter = newValues.iterator();\n                            while (newValueIter.hasNext() && !shouldRemove) {\n                                Map newValue = (Map) newValueIter.next();\n                                shouldRemove |= isNull(newValue) || condition.mapMatches(getDelegator(), newValue);\n                                //Debug.logInfo(\"In storeHook, for entityName [\" + entityName + \"] shouldRemove is now \" + shouldRemove, module);\n                            }\n                        } else {\n                            shouldRemove = true;\n                        }\n                    }\n                }\n                // QUESTION: what is this? why would we do this?\n                if (!oldMatched && isPK) {\n                    //Debug.logInfo(\"In storeHook, for entityName [\" + entityName + \"] oldMatched is false and isPK is true, so setting shouldRemove to true (will remove from cache)\", module);\n                    shouldRemove = true;\n                }\n            }\n            if (shouldRemove) {\n                if (Debug.verboseOn()) Debug.logVerbose(\"In storeHook, matched condition, removing from cache for entityName [\" + entityName + \"] in cache with name [\" + entityCache.getName() + \"] entry with condition: \" + condition, module);\n                // doesn't work anymore since this is a copy of the cache keySet, can call remove directly though with a concurrent mod exception: cacheKeyIter.remove();\n                entityCache.remove(condition);\n            }\n        }\n    }","id":100917,"modified_method":"protected void storeHook(String entityName, boolean isPK, List oldValues, List newValues) {\n        UtilCache entityCache = UtilCache.findCache(getCacheName(entityName));\n        // for info about cache clearing\n        if (newValues == null || newValues.size() == 0 || newValues.get(0) == null) {\n            //Debug.logInfo(\"In storeHook (cache clear) for entity name [\" + entityName + \"], got entity cache with name: \" + (entityCache == null ? \"[No cache found to remove from]\" : entityCache.getName()), module);\n        }\n        if (entityCache == null) {\n            return;\n        }\n        Iterator cacheKeyIter = entityCache.getCacheLineKeys().iterator();\n        while (cacheKeyIter.hasNext()) {\n            EntityCondition condition = (EntityCondition) cacheKeyIter.next();\n            //Debug.logInfo(\"In storeHook entityName [\" + entityName + \"] checking against condition: \" + condition, module);\n            boolean shouldRemove = false;\n            if (condition == null) {\n                shouldRemove = true;\n            } else if (oldValues == null) {\n                Iterator newValueIter = newValues.iterator();\n                while (newValueIter.hasNext() && !shouldRemove) {\n                    Map newValue = (Map) newValueIter.next();\n                    shouldRemove |= condition.mapMatches(getDelegator(), newValue);\n                }\n            } else {\n                boolean oldMatched = false;\n                Iterator oldValueIter = oldValues.iterator();\n                while (oldValueIter.hasNext() && !shouldRemove) {\n                    Map oldValue = (Map) oldValueIter.next();\n                    if (condition.mapMatches(getDelegator(), oldValue)) {\n                        oldMatched = true;\n                        //Debug.logInfo(\"In storeHook, oldMatched for entityName [\" + entityName + \"]; shouldRemove is false\", module);\n                        if (newValues != null) {\n                            Iterator newValueIter = newValues.iterator();\n                            while (newValueIter.hasNext() && !shouldRemove) {\n                                Map newValue = (Map) newValueIter.next();\n                                shouldRemove |= isNull(newValue) || condition.mapMatches(getDelegator(), newValue);\n                                //Debug.logInfo(\"In storeHook, for entityName [\" + entityName + \"] shouldRemove is now \" + shouldRemove, module);\n                            }\n                        } else {\n                            shouldRemove = true;\n                        }\n                    }\n                }\n                // QUESTION: what is this? why would we do this?\n                if (!oldMatched && isPK) {\n                    //Debug.logInfo(\"In storeHook, for entityName [\" + entityName + \"] oldMatched is false and isPK is true, so setting shouldRemove to true (will remove from cache)\", module);\n                    shouldRemove = true;\n                }\n            }\n            if (shouldRemove) {\n                if (Debug.verboseOn()) Debug.logVerbose(\"In storeHook, matched condition, removing from cache for entityName [\" + entityName + \"] in cache with name [\" + entityCache.getName() + \"] entry with condition: \" + condition, module);\n                // doesn't work anymore since this is a copy of the cache keySet, can call remove directly though with a concurrent mod exception: cacheKeyIter.remove();\n                entityCache.remove(condition);\n            }\n        }\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Map clearContentAssocDataResourceViewCache(DispatchContext dctx, Map context) throws GenericServiceException{\n    \n        Map results = new HashMap();\n\n        UtilCache utilCache = (UtilCache) UtilCache.utilCacheTable.get(\"entitycache.entity-list.default.ContentAssocViewDataResourceFrom\");\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n        \n        utilCache = (UtilCache) UtilCache.utilCacheTable.get(\"entitycache.entity-list.default.ContentAssocViewDataResourceTo\");\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n\n        return results;\n    }","id":100918,"modified_method":"public static Map clearContentAssocDataResourceViewCache(DispatchContext dctx, Map context) throws GenericServiceException{\n    \n        Map results = new HashMap();\n\n        UtilCache utilCache = UtilCache.findCache(\"entitycache.entity-list.default.ContentAssocViewDataResourceFrom\");\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n        \n        utilCache = UtilCache.findCache(\"entitycache.entity-list.default.ContentAssocViewDataResourceTo\");\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n\n        return results;\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Map clearContentAssocViewCache(DispatchContext dctx, Map context) throws GenericServiceException{\n        Map results = new HashMap();\n\n        UtilCache utilCache = (UtilCache) UtilCache.utilCacheTable.get(\"entitycache.entity-list.default.ContentAssocViewFrom\");\n\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n        \n        utilCache = (UtilCache) UtilCache.utilCacheTable.get(\"entitycache.entity-list.default.ContentAssocViewTo\");\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n\n        return results;\n    }","id":100919,"modified_method":"public static Map clearContentAssocViewCache(DispatchContext dctx, Map context) throws GenericServiceException{\n        Map results = new HashMap();\n\n        UtilCache utilCache = UtilCache.findCache(\"entitycache.entity-list.default.ContentAssocViewFrom\");\n\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n        \n        utilCache = UtilCache.findCache(\"entitycache.entity-list.default.ContentAssocViewTo\");\n        if (utilCache != null) {\n            utilCache.clear();\n        }\n\n        return results;\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"/** An HTTP WebEvent handler that updates the named cache\n     * @param request The HTTP request object for the current JSP or Servlet request.\n     * @param response The HTTP response object for the current JSP or Servlet request.\n     * @return\n     */\n    public static String updateEvent(HttpServletRequest request, HttpServletResponse response) {\n        String errMsg = \"\";\n        Locale locale = UtilHttp.getLocale(request);\n\n        Security security = (Security) request.getAttribute(\"security\");\n        if (!security.hasPermission(\"UTIL_CACHE_EDIT\", request.getSession())) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.permissionEdit\", locale) + \".\";\n            request.setAttribute(\"_EVENT_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n\n        String name = request.getParameter(\"UTIL_CACHE_NAME\");\n\n        if (name == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotUpdateCacheSetting\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        String maxSizeStr = request.getParameter(\"UTIL_CACHE_MAX_SIZE\");\n        String expireTimeStr = request.getParameter(\"UTIL_CACHE_EXPIRE_TIME\");\n        String useSoftReferenceStr = request.getParameter(\"UTIL_CACHE_USE_SOFT_REFERENCE\");\n\n        Long maxSize = null, expireTime = null;\n\n        try {\n            maxSize = Long.valueOf(maxSizeStr);\n        } catch (Exception e) {}\n        try {\n            expireTime = Long.valueOf(expireTimeStr);\n        } catch (Exception e) {}\n\n        UtilCache utilCache = (UtilCache) UtilCache.utilCacheTable.get(name);\n\n        if (utilCache != null) {\n            if (maxSize != null)\n                utilCache.setMaxSize(maxSize.intValue());\n            if (expireTime != null)\n                utilCache.setExpireTime(expireTime.longValue());\n            if (useSoftReferenceStr != null) {\n                utilCache.setUseSoftReference(\"true\".equals(useSoftReferenceStr));\n            }\n        }\n        return \"success\";\n    }","id":100920,"modified_method":"/** An HTTP WebEvent handler that updates the named cache\n     * @param request The HTTP request object for the current JSP or Servlet request.\n     * @param response The HTTP response object for the current JSP or Servlet request.\n     * @return\n     */\n    public static String updateEvent(HttpServletRequest request, HttpServletResponse response) {\n        String errMsg = \"\";\n        Locale locale = UtilHttp.getLocale(request);\n\n        Security security = (Security) request.getAttribute(\"security\");\n        if (!security.hasPermission(\"UTIL_CACHE_EDIT\", request.getSession())) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.permissionEdit\", locale) + \".\";\n            request.setAttribute(\"_EVENT_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n\n        String name = request.getParameter(\"UTIL_CACHE_NAME\");\n\n        if (name == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotUpdateCacheSetting\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        String maxSizeStr = request.getParameter(\"UTIL_CACHE_MAX_SIZE\");\n        String expireTimeStr = request.getParameter(\"UTIL_CACHE_EXPIRE_TIME\");\n        String useSoftReferenceStr = request.getParameter(\"UTIL_CACHE_USE_SOFT_REFERENCE\");\n\n        Long maxSize = null, expireTime = null;\n\n        try {\n            maxSize = Long.valueOf(maxSizeStr);\n        } catch (Exception e) {}\n        try {\n            expireTime = Long.valueOf(expireTimeStr);\n        } catch (Exception e) {}\n\n        UtilCache utilCache = UtilCache.findCache(name);\n\n        if (utilCache != null) {\n            if (maxSize != null)\n                utilCache.setMaxSize(maxSize.intValue());\n            if (expireTime != null)\n                utilCache.setExpireTime(expireTime.longValue());\n            if (useSoftReferenceStr != null) {\n                utilCache.setUseSoftReference(\"true\".equals(useSoftReferenceStr));\n            }\n        }\n        return \"success\";\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"/** An HTTP WebEvent handler the specified element from the specified cache\n     * @param request The HTTP request object for the current JSP or Servlet request.\n     * @param response The HTTP response object for the current JSP or Servlet request.\n     * @return\n     */\n    public static String removeElementEvent(HttpServletRequest request, HttpServletResponse response) {\n        String errMsg = \"\";\n        Locale locale = UtilHttp.getLocale(request);\n\n        Security security = (Security) request.getAttribute(\"security\");\n        if (!security.hasPermission(\"UTIL_CACHE_EDIT\", request.getSession())) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.permissionEdit\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n\n        String name = request.getParameter(\"UTIL_CACHE_NAME\");\n        if (name == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.noCacheNameSpecified\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        String numString = request.getParameter(\"UTIL_CACHE_ELEMENT_NUMBER\");\n\n        if (numString == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.noElementNumberSpecified\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", \"\");\n            return \"error\";\n        }\n        int number;\n\n        try {\n            number = Integer.parseInt(numString);\n        } catch (Exception e) {\n            return \"error\";\n        }\n\n        UtilCache utilCache = (UtilCache) UtilCache.utilCacheTable.get(name);\n\n        if (utilCache != null) {\n            Object key = null;\n\n            if (utilCache.getMaxSize() > 0) {\n                try {\n                    key = utilCache.cacheLineTable.getKeyFromMemory(number);\n                } catch (Exception e) {}\n            } else {\n                // no LRU, try looping through the keySet to see if we find the specified index...\n                Iterator ksIter = utilCache.cacheLineTable.keySet().iterator();\n                int curNum = 0;\n\n                while (ksIter.hasNext()) {\n                    if (number == curNum) {\n                        key = ksIter.next();\n                        break;\n                    } else {\n                        ksIter.next();\n                    }\n                    curNum++;\n                }\n            }\n\n            if (key != null) {\n                utilCache.remove(key);\n                errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.removeElementWithKey\", UtilMisc.toMap(\"key\", key.toString()), locale) + \".\";\n                request.setAttribute(\"_EVENT_MESSAGE_\", errMsg);\n            } else {\n                errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotRemoveElementNumber\", UtilMisc.toMap(\"name\", name, \"numString\", numString), locale) + \".\";\n                request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n                return \"error\";\n            }\n        } else {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotRemoveElement\", UtilMisc.toMap(\"name\", name), locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        return \"success\";\n    }","id":100921,"modified_method":"/** An HTTP WebEvent handler the specified element from the specified cache\n     * @param request The HTTP request object for the current JSP or Servlet request.\n     * @param response The HTTP response object for the current JSP or Servlet request.\n     * @return\n     */\n    public static String removeElementEvent(HttpServletRequest request, HttpServletResponse response) {\n        String errMsg = \"\";\n        Locale locale = UtilHttp.getLocale(request);\n\n        Security security = (Security) request.getAttribute(\"security\");\n        if (!security.hasPermission(\"UTIL_CACHE_EDIT\", request.getSession())) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.permissionEdit\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n\n        String name = request.getParameter(\"UTIL_CACHE_NAME\");\n        if (name == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.noCacheNameSpecified\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        String numString = request.getParameter(\"UTIL_CACHE_ELEMENT_NUMBER\");\n\n        if (numString == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.noElementNumberSpecified\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", \"\");\n            return \"error\";\n        }\n        int number;\n\n        try {\n            number = Integer.parseInt(numString);\n        } catch (Exception e) {\n            return \"error\";\n        }\n\n        UtilCache utilCache = UtilCache.findCache(name);\n\n        if (utilCache != null) {\n            Object key = null;\n\n            if (utilCache.getMaxSize() > 0) {\n                try {\n                    key = utilCache.cacheLineTable.getKeyFromMemory(number);\n                } catch (Exception e) {}\n            } else {\n                // no LRU, try looping through the keySet to see if we find the specified index...\n                Iterator ksIter = utilCache.cacheLineTable.keySet().iterator();\n                int curNum = 0;\n\n                while (ksIter.hasNext()) {\n                    if (number == curNum) {\n                        key = ksIter.next();\n                        break;\n                    } else {\n                        ksIter.next();\n                    }\n                    curNum++;\n                }\n            }\n\n            if (key != null) {\n                utilCache.remove(key);\n                errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.removeElementWithKey\", UtilMisc.toMap(\"key\", key.toString()), locale) + \".\";\n                request.setAttribute(\"_EVENT_MESSAGE_\", errMsg);\n            } else {\n                errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotRemoveElementNumber\", UtilMisc.toMap(\"name\", name, \"numString\", numString), locale) + \".\";\n                request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n                return \"error\";\n            }\n        } else {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotRemoveElement\", UtilMisc.toMap(\"name\", name), locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        return \"success\";\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"/** An HTTP WebEvent handler that clears the named cache\n     * @param request The HTTP request object for the current JSP or Servlet request.\n     * @param response The HTTP response object for the current JSP or Servlet request.\n     * @return\n     */\n    public static String clearEvent(HttpServletRequest request, HttpServletResponse response) {\n        String errMsg = \"\";\n        Locale locale = UtilHttp.getLocale(request);\n\n        Security security = (Security) request.getAttribute(\"security\");\n        if (!security.hasPermission(\"UTIL_CACHE_EDIT\", request.getSession())) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.permissionEdit\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n\n        String name = request.getParameter(\"UTIL_CACHE_NAME\");\n\n        if (name == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotClearCache\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        UtilCache utilCache = (UtilCache) UtilCache.utilCacheTable.get(name);\n\n        if (utilCache != null) {\n            utilCache.clear();\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.clearCache\", UtilMisc.toMap(\"name\", name), locale) + \".\";\n            request.setAttribute(\"_EVENT_MESSAGE_\", errMsg);\n        } else {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotClearCacheNotFoundName\", UtilMisc.toMap(\"name\", name), locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        return \"success\";\n    }","id":100922,"modified_method":"/** An HTTP WebEvent handler that clears the named cache\n     * @param request The HTTP request object for the current JSP or Servlet request.\n     * @param response The HTTP response object for the current JSP or Servlet request.\n     * @return\n     */\n    public static String clearEvent(HttpServletRequest request, HttpServletResponse response) {\n        String errMsg = \"\";\n        Locale locale = UtilHttp.getLocale(request);\n\n        Security security = (Security) request.getAttribute(\"security\");\n        if (!security.hasPermission(\"UTIL_CACHE_EDIT\", request.getSession())) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCacheEvents.permissionEdit\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n\n        String name = request.getParameter(\"UTIL_CACHE_NAME\");\n\n        if (name == null) {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotClearCache\", locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        UtilCache utilCache = UtilCache.findCache(name);\n\n        if (utilCache != null) {\n            utilCache.clear();\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.clearCache\", UtilMisc.toMap(\"name\", name), locale) + \".\";\n            request.setAttribute(\"_EVENT_MESSAGE_\", errMsg);\n        } else {\n            errMsg = UtilProperties.getMessage(UtilCacheEvents.err_resource, \"utilCache.couldNotClearCacheNotFoundName\", UtilMisc.toMap(\"name\", name), locale) + \".\";\n            request.setAttribute(\"_ERROR_MESSAGE_\", errMsg);\n            return \"error\";\n        }\n        return \"success\";\n    }","commit_id":"f39ed344be54a2c571299b164f1752535b36c106","url":"https://github.com/apache/ofbiz"},{"original_method":"/**\r\n     * This method executes the given Http request and analyzes the response. Successful responses are\r\n     * expected to be formatted as json strings, and are converted to a Map<String, Object> object. In this\r\n     * map these keys can be expected: \"status\" (success/error), \"error\"(reason code), \"error_args\" and\r\n     * \"response\".\r\n     * <p/>\r\n     * Errors of all types (IO, Http, rest etc.) are reported through an ErrorStatusException.\r\n     *\r\n     * @param httpMethod      The http request to perform.\r\n     * @param responseJsonKey specify a key for a response attribute to be returned, null means return the\r\n     *                        entire response\r\n     * @return An object, the response body received from the rest service\r\n     * @throws ErrorStatusException Reporting errors of all types (IO, HTTP, rest etc.)\r\n     */\r\n\r\n    private Object executeHttpMethod(final HttpRequestBase httpMethod, String responseJsonKey) throws ErrorStatusException {\r\n        String responseBody;\r\n        try {\r\n            final HttpResponse response = httpClient.execute(httpMethod);\r\n            final int statusCode = response.getStatusLine().getStatusCode();\r\n            if (statusCode != HTTP_STATUS_OK) {\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + MSG_RESPONSE_CODE + statusCode);\r\n                }\r\n                responseBody = getResponseBody(response, httpMethod);\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + \" response body \" + responseBody);\r\n                }\r\n                try {\r\n                    final Map<String, Object> errorMap = GSRestClient.jsonToMap(responseBody);\r\n                    throw new ErrorStatusException(\"Remote_rest_gateway_exception\", errorMap.get(ERROR));\r\n                } catch (final IOException e) {\r\n                    if (statusCode == NOT_FOUND_404_ERROR_CODE) {\r\n                        throw new ErrorStatusException(e, \"URL_not_found\", httpMethod.getURI());\r\n                    }\r\n                    throw new ErrorStatusException(e, \"CLI_unable_to_parse_to_JSON\", responseBody);\r\n                }\r\n            }\r\n            responseBody = getResponseBody(response, httpMethod);\r\n            final Map<String, Object> responseMap = GSRestClient.jsonToMap(responseBody);\r\n            final String status = (String) responseMap.get(STATUS_KEY);\r\n            if (ERROR.equals(status)) {\r\n                final String reason = (String) responseMap.get(ERROR);\r\n                @SuppressWarnings(\"unchecked\")\r\n                final List<String> reasonsArgs = (List<String>) responseMap.get(ERROR_ARGS);\r\n                final ErrorStatusException e = new ErrorStatusException(reason,\r\n                        reasonsArgs != null ? reasonsArgs.toArray() : null);\r\n                logger.log(Level.FINE, reason, e);\r\n                throw e;\r\n            }\r\n            return responseJsonKey != null ? responseMap.get(RESPONSE_KEY) : responseMap;\r\n        } catch (final ClientProtocolException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } catch (final IOException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } finally {\r\n            httpMethod.abort();\r\n        }\r\n    }","id":100923,"modified_method":"/**\r\n     * This method executes the given Http request and analyzes the response. Successful responses are\r\n     * expected to be formatted as json strings, and are converted to a Map<String, Object> object. In this\r\n     * map these keys can be expected: \"status\" (success/error), \"error\"(reason code), \"error_args\" and\r\n     * \"response\".\r\n     * <p/>\r\n     * Errors of all types (IO, Http, rest etc.) are reported through an ErrorStatusException.\r\n     *\r\n     * @param httpMethod      The http request to perform.\r\n     * @param responseJsonKey specify a key for a response attribute to be returned, null means return the\r\n     *                        entire response\r\n     * @return An object, the response body received from the rest service\r\n     * @throws ErrorStatusException Reporting errors of all types (IO, HTTP, rest etc.)\r\n     */\r\n\r\n    private Object executeHttpMethod(final HttpRequestBase httpMethod, String responseJsonKey) throws ErrorStatusException {\r\n        String responseBody;\r\n        try {\r\n            final HttpResponse response = httpClient.execute(httpMethod);\r\n            final int statusCode = response.getStatusLine().getStatusCode();\r\n            if (statusCode != HTTP_STATUS_OK) {\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + MSG_RESPONSE_CODE + statusCode);\r\n                }\r\n                responseBody = getResponseBody(response, httpMethod);\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + \" response body \" + responseBody);\r\n                }\r\n                try {\r\n                \tfinal Map<String, Object> errorMap = GSRestClient.jsonToMap(responseBody);\r\n                    final String status = (String) errorMap.get(STATUS_KEY);\r\n                    if (ERROR.equals(status)) {\r\n                        final String reason = (String) errorMap.get(ERROR);\r\n                        @SuppressWarnings(\"unchecked\")\r\n                        final List<String> reasonsArgs = (List<String>) errorMap.get(ERROR_ARGS);\r\n                        final ErrorStatusException e = new ErrorStatusException(reason,\r\n                                reasonsArgs != null ? reasonsArgs.toArray() : null);\r\n                        logger.log(Level.FINE, reason, e);\r\n                        throw e;\r\n                    }\r\n                } catch (final IOException e) {\r\n                    if (statusCode == NOT_FOUND_404_ERROR_CODE) {\r\n                        throw new ErrorStatusException(e, \"URL_not_found\", httpMethod.getURI());\r\n                    }\r\n                    throw new ErrorStatusException(e, \"CLI_unable_to_parse_to_JSON\", responseBody);\r\n                }\r\n            }\r\n            responseBody = getResponseBody(response, httpMethod);\r\n            final Map<String, Object> responseMap = GSRestClient.jsonToMap(responseBody);\r\n            return responseJsonKey != null ? responseMap.get(RESPONSE_KEY) : responseMap;\r\n        } catch (final ClientProtocolException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } catch (final IOException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } finally {\r\n            httpMethod.abort();\r\n        }\r\n    }","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * Creates and returns a map containing all of the deployed service names installed under a specific application\r\n\t * context.\r\n\t * \r\n\t * @return a list of the deployed services in the service grid that were deployed as a part of a specific\r\n\t *         application.\r\n\t */\r\n\t@JsonResponseExample(status = \"sucess\", responseBody=\"[\\\"service1\\\",\\\"service2\\\"]\")\r\n\t@PossibleResponseStatuses(codes={200, 200}, descriptions={\"success\", \"failed_to_locate_app\"})\r\n\t@RequestMapping(value = \"/applications/{applicationName}/services\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> getServicesList(@PathVariable final String applicationName) {\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to list applications\");\r\n\t\t}\r\n\t\tfinal Application app = admin.getApplications().waitFor(applicationName, 5, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\treturn errorStatus(FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tfinal ProcessingUnits pus = app.getProcessingUnits();\r\n\t\tfinal List<String> serviceNames = new ArrayList<String>(pus.getSize());\r\n\t\tfor (final ProcessingUnit pu : pus) {\r\n\t\t\tserviceNames.add(ServiceUtils.getApplicationServiceName(pu.getName(), applicationName));\r\n\t\t}\r\n\t\treturn successStatus(serviceNames);\r\n\t}","id":100924,"modified_method":"/**\r\n\t * Creates and returns a map containing all of the deployed service names installed under a specific application\r\n\t * context.\r\n\t * \r\n\t * @return a list of the deployed services in the service grid that were deployed as a part of a specific\r\n\t *         application.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen application is not found.\r\n\t */\r\n\t@JsonResponseExample(status = \"sucess\", responseBody=\"[\\\"service1\\\",\\\"service2\\\"]\")\r\n\t@PossibleResponseStatuses(codes={200, 500}, descriptions={\"success\", \"failed_to_locate_app\"})\r\n\t@RequestMapping(value = \"/applications/{applicationName}/services\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> getServicesList(@PathVariable final String applicationName) throws RestErrorException {\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to list applications\");\r\n\t\t}\r\n\t\tfinal Application app = admin.getApplications().waitFor(applicationName, 5, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\tthrow new RestErrorException(FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tfinal ProcessingUnits pus = app.getProcessingUnits();\r\n\t\tfinal List<String> serviceNames = new ArrayList<String>(pus.getSize());\r\n\t\tfor (final ProcessingUnit pu : pus) {\r\n\t\t\tserviceNames.add(ServiceUtils.getApplicationServiceName(pu.getName(), applicationName));\r\n\t\t}\r\n\t\treturn successStatus(serviceNames);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * Returns the lifecycle events according to the lifecycleEventContainerID id that is returned as a response when\r\n\t * installing/un-installing a service/application and according to the cursor position.\r\n\t * \r\n\t * @param lifecycleEventContainerID the unique task ID.\r\n\t * @param cursor event entry cursor\r\n\t * @return a map containing the events and the task state.\r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody= \"{\\\"isDone\\\":false,\\\"lifecycleLogs\\\":[\\\"[service1] Deployed 1 planned 1\\\",\" +\r\n\t\t\t\t\t\"\\\"Service &#92&#34service1&#92&#34 successfully installed (1 Instances)\\\"],\" +\r\n\t\t\t\t\t\"\\\"PollingTaskExpirationTimeMillis\\\":\\\"575218\\\",\\\"curserPos\\\":12}\")\r\n\t@PossibleResponseStatuses(codes = {200,200,200}, \r\n\tdescriptions = {\"success\", \"Lifecycle events container with UUID ... does not exist or expired\", \"execution exception message\"})\r\n\t@RequestMapping(value = \"/lifecycleEventContainerID/{lifecycleEventContainerID}/cursor/{cursor}\",\r\n\t\t\tmethod = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject getLifecycleEvents(@PathVariable final String lifecycleEventContainerID, @PathVariable final int cursor) {\r\n\t\tfinal Map<String, Object> resultsMap = new HashMap<String, Object>();\r\n\r\n\t\tif (!lifecyclePollingThreadContainer.containsKey(UUID.fromString(lifecycleEventContainerID))) {\r\n\t\t\treturn errorStatus(\"Lifecycle events container with UUID: \" + lifecycleEventContainerID\r\n\t\t\t\t\t+ \" does not exist or expired.\");\r\n\t\t}\r\n\t\tfinal RestPollingRunnable restPollingRunnable = lifecyclePollingThreadContainer.\r\n\t\t\t\tget(UUID.fromString(lifecycleEventContainerID));\r\n\r\n\t\tfinal LifecycleEventsContainer container = restPollingRunnable.getLifecycleEventsContainer();\r\n\t\tfinal boolean done = restPollingRunnable.isDone();\r\n\t\tif (!done) {\r\n\t\t\textendThreadTimeout(restPollingRunnable, DEFAULT_TIME_EXTENTION_POLLING_TASK);\r\n\t\t} else {\r\n\t\t\tfinal Throwable t = restPollingRunnable.getExecutionException();\r\n\t\t\tif (t != null) {\r\n\t\t\t\tlogger.log(Level.INFO, \"Lifecycle events polling ended unexpectedly.\", t);\r\n\t\t\t\treturn errorStatus(t.getMessage());\r\n\t\t\t} else {\r\n\t\t\t\tlogger.log(Level.FINE, \"Lifecycle events polling ended successfully.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tresultsMap.put(CloudifyConstants.IS_TASK_DONE, done);\r\n\t\tfinal List<String> lifecycleEvents = container.getLifecycleEvents(cursor);\r\n\r\n\t\tif (lifecycleEvents != null) {\r\n\t\t\tfinal int newCursorPos = cursor + lifecycleEvents.size();\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, newCursorPos);\r\n\t\t\tresultsMap.put(CloudifyConstants.LIFECYCLE_LOGS, lifecycleEvents);\r\n\t\t} else {\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, cursor);\r\n\t\t}\r\n\t\tfinal long timeBeforeTaskTerminationMillis = restPollingRunnable.getEndTime() - System.currentTimeMillis();\r\n\t\tresultsMap.put(CloudifyConstants.SERVER_POLLING_TASK_EXPIRATION_MILLI,\r\n\t\t\t\tLong.toString(timeBeforeTaskTerminationMillis));\r\n\r\n\t\treturn successStatus(resultsMap);\r\n\t}","id":100925,"modified_method":"/**\r\n\t * Returns the lifecycle events according to the lifecycleEventContainerID id that is returned as a response when\r\n\t * installing/un-installing a service/application and according to the cursor position.\r\n\t * \r\n\t * @param lifecycleEventContainerID the unique task ID.\r\n\t * @param cursor event entry cursor\r\n\t * @return a map containing the events and the task state.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen polling task has expired or if the task ended unexpectedly. \r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody= \"{\\\"isDone\\\":false,\\\"lifecycleLogs\\\":[\\\"[service1] Deployed 1 planned 1\\\",\" +\r\n\t\t\t\t\t\"\\\"Service &#92&#34service1&#92&#34 successfully installed (1 Instances)\\\"],\" +\r\n\t\t\t\t\t\"\\\"PollingTaskExpirationTimeMillis\\\":\\\"575218\\\",\\\"curserPos\\\":12}\")\r\n\t@PossibleResponseStatuses(codes = {200,500,500}, \r\n\tdescriptions = {\"success\", \"Lifecycle events container with UUID ... does not exist or expired\", \"execution exception message\"})\r\n\t@RequestMapping(value = \"/lifecycleEventContainerID/{lifecycleEventContainerID}/cursor/{cursor}\",\r\n\t\t\tmethod = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject getLifecycleEvents(@PathVariable final String lifecycleEventContainerID, @PathVariable final int cursor) throws RestErrorException {\r\n\t\tfinal Map<String, Object> resultsMap = new HashMap<String, Object>();\r\n\r\n\t\tif (!lifecyclePollingThreadContainer.containsKey(UUID.fromString(lifecycleEventContainerID))) {\r\n\t\t\tthrow new RestErrorException(\"Lifecycle events container with UUID: \" + lifecycleEventContainerID\r\n\t\t\t\t\t+ \" does not exist or expired.\");\r\n\t\t}\r\n\t\tfinal RestPollingRunnable restPollingRunnable = lifecyclePollingThreadContainer.\r\n\t\t\t\tget(UUID.fromString(lifecycleEventContainerID));\r\n\r\n\t\tfinal LifecycleEventsContainer container = restPollingRunnable.getLifecycleEventsContainer();\r\n\t\tfinal boolean done = restPollingRunnable.isDone();\r\n\t\tif (!done) {\r\n\t\t\textendThreadTimeout(restPollingRunnable, DEFAULT_TIME_EXTENTION_POLLING_TASK);\r\n\t\t} else {\r\n\t\t\tfinal Throwable t = restPollingRunnable.getExecutionException();\r\n\t\t\tif (t != null) {\r\n\t\t\t\tlogger.log(Level.INFO, \"Lifecycle events polling ended unexpectedly.\", t);\r\n\t\t\t\tthrow new RestErrorException(t.getMessage());\r\n\t\t\t} else {\r\n\t\t\t\tlogger.log(Level.FINE, \"Lifecycle events polling ended successfully.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tresultsMap.put(CloudifyConstants.IS_TASK_DONE, done);\r\n\t\tfinal List<String> lifecycleEvents = container.getLifecycleEvents(cursor);\r\n\r\n\t\tif (lifecycleEvents != null) {\r\n\t\t\tfinal int newCursorPos = cursor + lifecycleEvents.size();\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, newCursorPos);\r\n\t\t\tresultsMap.put(CloudifyConstants.LIFECYCLE_LOGS, lifecycleEvents);\r\n\t\t} else {\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, cursor);\r\n\t\t}\r\n\t\tfinal long timeBeforeTaskTerminationMillis = restPollingRunnable.getEndTime() - System.currentTimeMillis();\r\n\t\tresultsMap.put(CloudifyConstants.SERVER_POLLING_TASK_EXPIRATION_MILLI,\r\n\t\t\t\tLong.toString(timeBeforeTaskTerminationMillis));\r\n\r\n\t\treturn successStatus(resultsMap);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * Tests whether the restful service is able to locate the service grid using the admin API. \r\n\t * <p>The admin API searches for a LUS (Lookup Service) according to the lookup groups/locators defined.\r\n\t * \r\n\t * @return - Map<String, Object> object containing the test results.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,200}, descriptions = {\"success\", FAILED_TO_LOCATE_LUS})\r\n\t@JsonResponseExample(status = \"error\",\r\n\tresponseBody=\"{\\\"error\\\":\\\"failed_to_locate_lookup_service\\\", \\\"error_args\\\":[[\\\"localcloud\\\"],[\\\"jini://127.0.0.1:4172/\\\"]]}\",\r\n\tcomments=\"response status is success if the restful service located the service grid\" +\r\n\t\t\t\", otherwise it is error and the response's body will contain error description, the groups and locators.\")\r\n\t@RequestMapping(value = \"/testrest\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject test() {\r\n\t\tif (admin.getLookupServices().getSize() > 0) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\tfinal String groups = Arrays.toString(admin.getGroups());\r\n\t\tfinal String locators = Arrays.toString(admin.getLocators());\r\n\t\treturn errorStatus(FAILED_TO_LOCATE_LUS, groups, locators);\r\n\t}","id":100926,"modified_method":"/**\r\n\t * Tests whether the restful service is able to locate the service grid using the admin API. \r\n\t * <p>The admin API searches for a LUS (Lookup Service) according to the lookup groups/locators defined.\r\n\t * \r\n\t * @return - Map<String, Object> object containing the test results.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen lookup service not found.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,500}, descriptions = {\"success\", FAILED_TO_LOCATE_LUS})\r\n\t@JsonResponseExample(status = \"error\",\r\n\tresponseBody=\"{\\\"error\\\":\\\"failed_to_locate_lookup_service\\\", \\\"error_args\\\":[[\\\"localcloud\\\"],[\\\"jini://127.0.0.1:4172/\\\"]]}\",\r\n\tcomments=\"response status is success if the restful service located the service grid\" +\r\n\t\t\t\", otherwise it is error and the response's body will contain error description, the groups and locators.\")\r\n\t@RequestMapping(value = \"/testrest\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject test() throws RestErrorException {\r\n\t\tif (admin.getLookupServices().getSize() > 0) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\tfinal String groups = Arrays.toString(admin.getGroups());\r\n\t\tfinal String locators = Arrays.toString(admin.getLocators());\r\n\t\tthrow new RestErrorException(FAILED_TO_LOCATE_LUS, groups, locators);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Increments the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param params map that holds a timeout value for this action.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t */\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/addinstance\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> addInstance(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@RequestBody final Map<String, String> params) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tfinal int timeout = Integer.parseInt(params.get(\"timeout\"));\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfinal int before = processingUnit.getNumberOfInstances();\r\n\t\tprocessingUnit.incrementInstance();\r\n\t\tfinal boolean result = processingUnit.waitFor(before + 1, timeout, TimeUnit.SECONDS);\r\n\t\tif (result) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\treturn errorStatus(ResponseConstants.FAILED_TO_ADD_INSTANCE, applicationName, serviceName);\r\n\t}","id":100927,"modified_method":"/**\r\n\t * \r\n\t * Increments the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param params map that holds a timeout value for this action.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen service processing unit not found or failed to add the instance.\r\n\t */\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/addinstance\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> addInstance(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@RequestBody final Map<String, String> params) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tfinal int timeout = Integer.parseInt(params.get(\"timeout\"));\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfinal int before = processingUnit.getNumberOfInstances();\r\n\t\tprocessingUnit.incrementInstance();\r\n\t\tfinal boolean result = processingUnit.waitFor(before + 1, timeout, TimeUnit.SECONDS);\r\n\t\tif (result) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\tthrow new RestErrorException(ResponseConstants.FAILED_TO_ADD_INSTANCE, applicationName, serviceName);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private Map<String, Object> unavailableServiceError(final String serviceName) {\r\n\t\t// TODO: Consider telling the user he might be using the wrong\r\n\t\t// application name.\r\n\t\treturn errorStatus(FAILED_TO_LOCATE_SERVICE, ServiceUtils.getFullServiceName(serviceName).getServiceName());\r\n\t}","id":100928,"modified_method":"private Map<String, Object> unavailableServiceError(final String serviceName) throws RestErrorException {\r\n\t\t// TODO: Consider telling the user he might be using the wrong\r\n\t\t// application name.\r\n\t\tthrow new RestErrorException(FAILED_TO_LOCATE_SERVICE, ServiceUtils.getFullServiceName(serviceName).getServiceName());\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Invokes a custom command on a specific service instance. Custom parameters are passed as a map using POST method\r\n\t * and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name\r\n\t * @param instanceId The service instance number to be invoked.\r\n\t * @param beanName depreciated\r\n\t * @param params a Map containing the result of each invocation on a service instance.\r\n\t * @return a Map containing the invocation result on the specified instance.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}\")\r\n\t@PossibleResponseStatuses(codes = {200,200,200,200}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"service_instance_unavailable\", \"failed_to_invoke_instance\"})\r\n\t@RequestMapping(\r\n\t\t\tvalue = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\t\t\tMap<String, Object> invokeInstance(@PathVariable final String applicationName,\r\n\t\t\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId,\r\n\t\t\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + serviceName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// Get PUI\r\n\t\tfinal InternalProcessingUnitInstance pui = findInstanceById(pu, instanceId);\r\n\r\n\t\tif (pui == null) {\r\n\t\t\tlogger.severe(\"Could not find service instance \" + instanceId + \" for service \" + absolutePuName);\r\n\t\t\treturn errorStatus(ResponseConstants.SERVICE_INSTANCE_UNAVAILABLE, applicationName, absolutePuName,\r\n\t\t\t\t\tInteger.toString(instanceId));\r\n\t\t}\r\n\t\tfinal String instanceName = buildServiceInstanceName(pui);\r\n\t\t// Invoke the remote service\r\n\t\ttry {\r\n\t\t\tfinal Future<?> future = pui.invoke(beanName, params);\r\n\t\t\tfinal Object invocationResult = future.get();\r\n\t\t\tfinal Object finalResult = postProcessInvocationResult(invocationResult, instanceName);\r\n\t\t\treturn successStatus(finalResult);\r\n\t\t} catch (final Exception e) {\r\n\t\t\tlogger.severe(\"Error invoking pu instance \" + absolutePuName + \":\" + instanceId + \" on host \"\r\n\t\t\t\t\t+ pui.getVirtualMachine().getMachine().getHostName());\r\n\t\t\treturn errorStatus(FAILED_TO_INVOKE_INSTANCE, absolutePuName, Integer.toString(instanceId), e.getMessage());\r\n\t\t}\r\n\t}","id":100929,"modified_method":"/**\r\n\t * \r\n\t * Invokes a custom command on a specific service instance. Custom parameters are passed as a map using POST method\r\n\t * and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name\r\n\t * @param instanceId The service instance number to be invoked.\r\n\t * @param beanName depreciated\r\n\t * @param params a Map containing the result of each invocation on a service instance.\r\n\t * @return a Map containing the invocation result on the specified instance.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen failed to locate service/service instance or invocation failed.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}\")\r\n\t@PossibleResponseStatuses(codes = {200,500,500,500}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"service_instance_unavailable\", \"failed_to_invoke_instance\"})\r\n\t@RequestMapping(\r\n\t\t\tvalue = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\t\t\tMap<String, Object> invokeInstance(@PathVariable final String applicationName,\r\n\t\t\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId,\r\n\t\t\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + serviceName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// Get PUI\r\n\t\tfinal InternalProcessingUnitInstance pui = findInstanceById(pu, instanceId);\r\n\r\n\t\tif (pui == null) {\r\n\t\t\tlogger.severe(\"Could not find service instance \" + instanceId + \" for service \" + absolutePuName);\r\n\t\t\tthrow new RestErrorException(ResponseConstants.SERVICE_INSTANCE_UNAVAILABLE, applicationName, absolutePuName,\r\n\t\t\t\t\tInteger.toString(instanceId));\r\n\t\t}\r\n\t\tfinal String instanceName = buildServiceInstanceName(pui);\r\n\t\t// Invoke the remote service\r\n\t\ttry {\r\n\t\t\tfinal Future<?> future = pui.invoke(beanName, params);\r\n\t\t\tfinal Object invocationResult = future.get();\r\n\t\t\tfinal Object finalResult = postProcessInvocationResult(invocationResult, instanceName);\r\n\t\t\treturn successStatus(finalResult);\r\n\t\t} catch (final Exception e) {\r\n\t\t\tlogger.severe(\"Error invoking pu instance \" + absolutePuName + \":\" + instanceId + \" on host \"\r\n\t\t\t\t\t+ pui.getVirtualMachine().getMachine().getHostName());\r\n\t\t\tthrow new RestErrorException(FAILED_TO_INVOKE_INSTANCE, absolutePuName, Integer.toString(instanceId), e.getMessage());\r\n\t\t}\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Decrements the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param instanceId the service instance ID to remove.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,200,200}, descriptions = {\"success\",\"failed_to_locate_service\", \"service_instance_unavailable\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/remove\",\r\n\t\t\tmethod = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> removeInstance(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\t// todo: application awareness\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfor (final ProcessingUnitInstance instance : processingUnit.getInstances()) {\r\n\t\t\tif (instance.getInstanceId() == instanceId) {\r\n\t\t\t\tinstance.decrement();\r\n\t\t\t\treturn successStatus();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn errorStatus(SERVICE_INSTANCE_UNAVAILABLE);\r\n\t}","id":100930,"modified_method":"/**\r\n\t * \r\n\t * Decrements the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param instanceId the service instance ID to remove.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen failed to locate the service or if the service instance is not available.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,500,500}, descriptions = {\"success\",\"failed_to_locate_service\", \"service_instance_unavailable\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/remove\",\r\n\t\t\tmethod = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> removeInstance(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\t// todo: application awareness\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfor (final ProcessingUnitInstance instance : processingUnit.getInstances()) {\r\n\t\t\tif (instance.getInstanceId() == instanceId) {\r\n\t\t\t\tinstance.decrement();\r\n\t\t\t\treturn successStatus();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new RestErrorException(SERVICE_INSTANCE_UNAVAILABLE);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/******************\r\n\t * Uninstalls an application by uninstalling all of its services. Order of uninstallations is determined by the\r\n\t * context property 'com.gs.application.services' which should exist in all service PUs.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @return Map with return value; @ .\r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody=\"{\\\"lifecycleEventContainerID\\\":\\\"bfae0a89-b5a0-4250-b393-6cedbf63ac76\\\"}\")\r\n\t@PossibleResponseStatuses(codes={200, 200}, descriptions={\"success\", \"failed_to_locate_app\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/timeout/{timeoutInMinutes}\", method = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> uninstallApplication(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final int timeoutInMinutes) {\r\n\r\n\t\t// Check that Application exists\r\n\t\tfinal Application app = this.admin.getApplications().waitFor(applicationName, 10, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall application \" + applicationName\r\n\t\t\t\t\t+ \" since it has not been discovered yet.\");\r\n\t\t\treturn RestUtils.errorStatus(ResponseConstants.FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tif (app.getName().equals(CloudifyConstants.MANAGEMENT_APPLICATION_NAME)){\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall the Management application.\");\r\n\t\t\treturn RestUtils.errorStatus(\r\n\t\t\t\t\tResponseConstants.CANNOT_UNINSTALL_MANAGEMENT_APP);\r\n\t\t}\r\n\t\tfinal ProcessingUnit[] pus = app.getProcessingUnits().getProcessingUnits();\r\n\r\n\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\tfinal List<ProcessingUnit> uninstallOrder = createUninstallOrder(pus, applicationName);\r\n\t\t// TODO: Add timeout.\r\n\t\tFutureTask<Boolean> undeployTask = null;\r\n\t\tlogger.log(Level.INFO, \"Starting to poll for uninstall lifecycle events.\");\r\n\t\tif (uninstallOrder.size() > 0) {\r\n\t\t\tundeployTask = new FutureTask<Boolean>(new Runnable() {\r\n\t\t\t\tlong startTime = System.currentTimeMillis();\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tfor (final ProcessingUnit processingUnit : uninstallOrder) {\r\n\t\t\t\t\t\tlong undeployTimeout = TimeUnit.MINUTES.toMillis(timeoutInMinutes) - (System.currentTimeMillis() - startTime);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (processingUnit.waitForManaged(10, TimeUnit.SECONDS) == null) {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.WARNING, \"Failed to locate GSM that is managing Processing Unit \"\r\n\t\t\t\t\t\t\t\t\t\t+ processingUnit.getName());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.INFO, \"Undeploying Processing Unit \" + processingUnit.getName());\r\n\t\t\t\t\t\t\t\tprocessingUnit.undeployAndWait(undeployTimeout, TimeUnit.MINUTES);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (final Exception e) {\r\n\t\t\t\t\t\t\tfinal String msg =\r\n\t\t\t\t\t\t\t\t\t\"Failed to undeploy processing unit: \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" while uninstalling application \" + applicationName\r\n\t\t\t\t\t\t\t\t\t\t\t+ \". Uninstall will continue, but service \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" may remain in an unstable state\";\r\n\r\n\t\t\t\t\t\t\tlogger.log(Level.SEVERE, msg, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlogger.log(Level.INFO, \"Application \" + applicationName + \" undeployment complete\");\r\n\t\t\t\t}\r\n\t\t\t}, true);\r\n\t\t\t\r\n\t\t\t((InternalAdmin) admin).scheduleAdminOperation(undeployTask);\r\n\r\n\t\t}\r\n\t\tfinal UUID lifecycleEventContainerID =\r\n\t\t\t\tstartPollingForApplicationUninstallLifecycleEvents(applicationName, uninstallOrder, timeoutInMinutes, undeployTask);\r\n\r\n\t\tfinal String errors = sb.toString();\r\n\t\tif (errors.length() == 0) {\r\n\t\t\tfinal Map<String, Object> returnMap = new HashMap<String, Object>();\r\n\t\t\treturnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID, lifecycleEventContainerID);\r\n\t\t\treturn RestUtils.successStatus(returnMap);\r\n\t\t}\r\n\t\treturn RestUtils.errorStatus(errors);\r\n\t}","id":100931,"modified_method":"/******************\r\n\t * Uninstalls an application by uninstalling all of its services. Order of uninstallations is determined by the\r\n\t * context property 'com.gs.application.services' which should exist in all service PUs.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @return Map with return value; @ .\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen application not found or when attempting to remove management services.\r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody=\"{\\\"lifecycleEventContainerID\\\":\\\"bfae0a89-b5a0-4250-b393-6cedbf63ac76\\\"}\")\r\n\t@PossibleResponseStatuses(codes={200, 500, 500}, \r\n\tdescriptions={\"success\", \"failed_to_locate_app\", \"cannot_uninstall_management_application\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/timeout/{timeoutInMinutes}\", method = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> uninstallApplication(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final int timeoutInMinutes) throws RestErrorException {\r\n\r\n\t\t// Check that Application exists\r\n\t\tfinal Application app = this.admin.getApplications().waitFor(applicationName, 10, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall application \" + applicationName\r\n\t\t\t\t\t+ \" since it has not been discovered yet.\");\r\n\t\t\tthrow new RestErrorException(FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tif (app.getName().equals(CloudifyConstants.MANAGEMENT_APPLICATION_NAME)){\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall the Management application.\");\r\n\t\t\tthrow new RestErrorException(\r\n\t\t\t\t\tResponseConstants.CANNOT_UNINSTALL_MANAGEMENT_APP);\r\n\t\t}\r\n\t\tfinal ProcessingUnit[] pus = app.getProcessingUnits().getProcessingUnits();\r\n\r\n\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\tfinal List<ProcessingUnit> uninstallOrder = createUninstallOrder(pus, applicationName);\r\n\t\t// TODO: Add timeout.\r\n\t\tFutureTask<Boolean> undeployTask = null;\r\n\t\tlogger.log(Level.INFO, \"Starting to poll for uninstall lifecycle events.\");\r\n\t\tif (uninstallOrder.size() > 0) {\r\n\t\t\tundeployTask = new FutureTask<Boolean>(new Runnable() {\r\n\t\t\t\tlong startTime = System.currentTimeMillis();\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tfor (final ProcessingUnit processingUnit : uninstallOrder) {\r\n\t\t\t\t\t\tlong undeployTimeout = TimeUnit.MINUTES.toMillis(timeoutInMinutes) - (System.currentTimeMillis() - startTime);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (processingUnit.waitForManaged(10, TimeUnit.SECONDS) == null) {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.WARNING, \"Failed to locate GSM that is managing Processing Unit \"\r\n\t\t\t\t\t\t\t\t\t\t+ processingUnit.getName());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.INFO, \"Undeploying Processing Unit \" + processingUnit.getName());\r\n\t\t\t\t\t\t\t\tprocessingUnit.undeployAndWait(undeployTimeout, TimeUnit.MINUTES);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (final Exception e) {\r\n\t\t\t\t\t\t\tfinal String msg =\r\n\t\t\t\t\t\t\t\t\t\"Failed to undeploy processing unit: \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" while uninstalling application \" + applicationName\r\n\t\t\t\t\t\t\t\t\t\t\t+ \". Uninstall will continue, but service \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" may remain in an unstable state\";\r\n\r\n\t\t\t\t\t\t\tlogger.log(Level.SEVERE, msg, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlogger.log(Level.INFO, \"Application \" + applicationName + \" undeployment complete\");\r\n\t\t\t\t}\r\n\t\t\t}, true);\r\n\t\t\t\r\n\t\t\t((InternalAdmin) admin).scheduleAdminOperation(undeployTask);\r\n\r\n\t\t}\r\n\t\tfinal UUID lifecycleEventContainerID =\r\n\t\t\t\tstartPollingForApplicationUninstallLifecycleEvents(applicationName, uninstallOrder, timeoutInMinutes, undeployTask);\r\n\r\n\t\tfinal String errors = sb.toString();\r\n\t\tif (errors.length() == 0) {\r\n\t\t\tfinal Map<String, Object> returnMap = new HashMap<String, Object>();\r\n\t\t\treturnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID, lifecycleEventContainerID);\r\n\t\t\treturn RestUtils.successStatus(returnMap);\r\n\t\t}\r\n\t\tthrow new RestErrorException(errors);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Invokes a custom command on all of the specified service instances. \r\n\t * Custom parameters are passed as a map using\r\n\t * the POST method and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name.\r\n\t * @param beanName deprecated.\r\n\t * @param params The command parameters.\r\n\t * @return a Map containing the result of each invocation on a service instance.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"instance #1@127.0.0.1\\\":{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}}\")\r\n\t@PossibleResponseStatuses(codes = {200,200,200}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"no_processing_unit_instances_found_for_invocation\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> invoke(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + absolutePuName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get the PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// result, mapping service instances to results\r\n\t\tfinal Map<String, Object> invocationResult = new HashMap<String, Object>();\r\n\t\tfinal ProcessingUnitInstance[] instances = pu.getInstances();\r\n\r\n\t\tif (instances.length == 0) {\r\n\t\t\treturn errorStatus(ResponseConstants.NO_PROCESSING_UNIT_INSTANCES_FOUND_FOR_INVOCATION, serviceName);\r\n\t\t}\r\n\r\n\t\t// Why a map? TODO: Use an array here instead.\r\n\t\t// map between service name and its future\r\n\t\tfinal Map<String, Future<Object>> futures = new HashMap<String, Future<Object>>(instances.length);\r\n\t\tfor (final ProcessingUnitInstance instance : instances) {\r\n\t\t\t// key includes instance ID and host name\r\n\t\t\tfinal String serviceInstanceName = buildServiceInstanceName(instance);\r\n\t\t\ttry {\r\n\t\t\t\tfinal Future<Object> future = ((DefaultProcessingUnitInstance) instance).invoke(beanName, params);\r\n\t\t\t\tfutures.put(serviceInstanceName, future);\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tlogger.severe(\"Error invoking service \" + serviceName + \":\" + instance.getInstanceId() + \" on host \"\r\n\t\t\t\t\t\t+ instance.getVirtualMachine().getMachine().getHostName());\r\n\t\t\t\tinvocationResult.put(serviceInstanceName, \"pu_instance_invocation_failure\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (final Map.Entry<String, Future<Object>> entry : futures.entrySet()) {\r\n\t\t\ttry {\r\n\t\t\t\tObject result = entry.getValue().get();\r\n\t\t\t\t// use only tostring of collection values, to avoid\r\n\t\t\t\t// serialization problems\r\n\t\t\t\tresult = postProcessInvocationResult(result, entry.getKey());\r\n\t\t\t\t\r\n\t\t\t\tinvocationResult.put(entry.getKey(), result);\r\n\t\t\t\t\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tinvocationResult.put(entry.getKey(), \"Invocation failure: \" + e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn successStatus(invocationResult);\r\n\t}","id":100932,"modified_method":"/**\r\n\t * \r\n\t * Invokes a custom command on all of the specified service instances. \r\n\t * Custom parameters are passed as a map using\r\n\t * the POST method and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name.\r\n\t * @param beanName deprecated.\r\n\t * @param params The command parameters.\r\n\t * @return a Map containing the result of each invocation on a service instance.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen lookup service not found or no processing unit instance is found for the requested service.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"instance #1@127.0.0.1\\\":{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}}\")\r\n\t@PossibleResponseStatuses(codes = {200,500,500}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"no_processing_unit_instances_found_for_invocation\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> invoke(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + absolutePuName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get the PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// result, mapping service instances to results\r\n\t\tfinal Map<String, Object> invocationResult = new HashMap<String, Object>();\r\n\t\tfinal ProcessingUnitInstance[] instances = pu.getInstances();\r\n\r\n\t\tif (instances.length == 0) {\r\n\t\t\tthrow new RestErrorException(ResponseConstants.NO_PROCESSING_UNIT_INSTANCES_FOUND_FOR_INVOCATION, serviceName);\r\n\t\t}\r\n\r\n\t\t// Why a map? TODO: Use an array here instead.\r\n\t\t// map between service name and its future\r\n\t\tfinal Map<String, Future<Object>> futures = new HashMap<String, Future<Object>>(instances.length);\r\n\t\tfor (final ProcessingUnitInstance instance : instances) {\r\n\t\t\t// key includes instance ID and host name\r\n\t\t\tfinal String serviceInstanceName = buildServiceInstanceName(instance);\r\n\t\t\ttry {\r\n\t\t\t\tfinal Future<Object> future = ((DefaultProcessingUnitInstance) instance).invoke(beanName, params);\r\n\t\t\t\tfutures.put(serviceInstanceName, future);\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tlogger.severe(\"Error invoking service \" + serviceName + \":\" + instance.getInstanceId() + \" on host \"\r\n\t\t\t\t\t\t+ instance.getVirtualMachine().getMachine().getHostName());\r\n\t\t\t\tinvocationResult.put(serviceInstanceName, \"pu_instance_invocation_failure\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (final Map.Entry<String, Future<Object>> entry : futures.entrySet()) {\r\n\t\t\ttry {\r\n\t\t\t\tObject result = entry.getValue().get();\r\n\t\t\t\t// use only tostring of collection values, to avoid\r\n\t\t\t\t// serialization problems\r\n\t\t\t\tresult = postProcessInvocationResult(result, entry.getKey());\r\n\t\t\t\t\r\n\t\t\t\tinvocationResult.put(entry.getKey(), result);\r\n\t\t\t\t\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tinvocationResult.put(entry.getKey(), \"Invocation failure: \" + e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn successStatus(invocationResult);\r\n\t}","commit_id":"1800e03f4d5b128bed99aaf33e8d196c9d1e284a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n     * This method executes the given Http request and analyzes the response. Successful responses are\r\n     * expected to be formatted as json strings, and are converted to a Map<String, Object> object. In this\r\n     * map these keys can be expected: \"status\" (success/error), \"error\"(reason code), \"error_args\" and\r\n     * \"response\".\r\n     * <p/>\r\n     * Errors of all types (IO, Http, rest etc.) are reported through an ErrorStatusException.\r\n     *\r\n     * @param httpMethod      The http request to perform.\r\n     * @param responseJsonKey specify a key for a response attribute to be returned, null means return the\r\n     *                        entire response\r\n     * @return An object, the response body received from the rest service\r\n     * @throws ErrorStatusException Reporting errors of all types (IO, HTTP, rest etc.)\r\n     */\r\n\r\n    private Object executeHttpMethod(final HttpRequestBase httpMethod, String responseJsonKey) throws ErrorStatusException {\r\n        String responseBody;\r\n        try {\r\n            final HttpResponse response = httpClient.execute(httpMethod);\r\n            final int statusCode = response.getStatusLine().getStatusCode();\r\n            if (statusCode != HTTP_STATUS_OK) {\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + MSG_RESPONSE_CODE + statusCode);\r\n                }\r\n                responseBody = getResponseBody(response, httpMethod);\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + \" response body \" + responseBody);\r\n                }\r\n                try {\r\n                    final Map<String, Object> errorMap = GSRestClient.jsonToMap(responseBody);\r\n                    throw new ErrorStatusException(\"Remote_rest_gateway_exception\", errorMap.get(ERROR));\r\n                } catch (final IOException e) {\r\n                    if (statusCode == NOT_FOUND_404_ERROR_CODE) {\r\n                        throw new ErrorStatusException(e, \"URL_not_found\", httpMethod.getURI());\r\n                    }\r\n                    throw new ErrorStatusException(e, \"CLI_unable_to_parse_to_JSON\", responseBody);\r\n                }\r\n            }\r\n            responseBody = getResponseBody(response, httpMethod);\r\n            final Map<String, Object> responseMap = GSRestClient.jsonToMap(responseBody);\r\n            final String status = (String) responseMap.get(STATUS_KEY);\r\n            if (ERROR.equals(status)) {\r\n                final String reason = (String) responseMap.get(ERROR);\r\n                @SuppressWarnings(\"unchecked\")\r\n                final List<String> reasonsArgs = (List<String>) responseMap.get(ERROR_ARGS);\r\n                final ErrorStatusException e = new ErrorStatusException(reason,\r\n                        reasonsArgs != null ? reasonsArgs.toArray() : null);\r\n                logger.log(Level.FINE, reason, e);\r\n                throw e;\r\n            }\r\n            return responseJsonKey != null ? responseMap.get(RESPONSE_KEY) : responseMap;\r\n        } catch (final ClientProtocolException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } catch (final IOException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } finally {\r\n            httpMethod.abort();\r\n        }\r\n    }","id":100933,"modified_method":"/**\r\n     * This method executes the given Http request and analyzes the response. Successful responses are\r\n     * expected to be formatted as json strings, and are converted to a Map<String, Object> object. In this\r\n     * map these keys can be expected: \"status\" (success/error), \"error\"(reason code), \"error_args\" and\r\n     * \"response\".\r\n     * <p/>\r\n     * Errors of all types (IO, Http, rest etc.) are reported through an ErrorStatusException.\r\n     *\r\n     * @param httpMethod      The http request to perform.\r\n     * @param responseJsonKey specify a key for a response attribute to be returned, null means return the\r\n     *                        entire response\r\n     * @return An object, the response body received from the rest service\r\n     * @throws ErrorStatusException Reporting errors of all types (IO, HTTP, rest etc.)\r\n     */\r\n\r\n    private Object executeHttpMethod(final HttpRequestBase httpMethod, String responseJsonKey) throws ErrorStatusException {\r\n        String responseBody;\r\n        try {\r\n            final HttpResponse response = httpClient.execute(httpMethod);\r\n            final int statusCode = response.getStatusLine().getStatusCode();\r\n            if (statusCode != HTTP_STATUS_OK) {\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + MSG_RESPONSE_CODE + statusCode);\r\n                }\r\n                responseBody = getResponseBody(response, httpMethod);\r\n                if (logger.isLoggable(Level.FINE)) {\r\n                    logger.log(Level.FINE, httpMethod.getURI() + \" response body \" + responseBody);\r\n                }\r\n                try {\r\n                \tfinal Map<String, Object> errorMap = GSRestClient.jsonToMap(responseBody);\r\n                    final String status = (String) errorMap.get(STATUS_KEY);\r\n                    if (ERROR.equals(status)) {\r\n                        final String reason = (String) errorMap.get(ERROR);\r\n                        @SuppressWarnings(\"unchecked\")\r\n                        final List<String> reasonsArgs = (List<String>) errorMap.get(ERROR_ARGS);\r\n                        final ErrorStatusException e = new ErrorStatusException(reason,\r\n                                reasonsArgs != null ? reasonsArgs.toArray() : null);\r\n                        logger.log(Level.FINE, reason, e);\r\n                        throw e;\r\n                    }\r\n                } catch (final IOException e) {\r\n                    if (statusCode == NOT_FOUND_404_ERROR_CODE) {\r\n                        throw new ErrorStatusException(e, \"URL_not_found\", httpMethod.getURI());\r\n                    }\r\n                    throw new ErrorStatusException(e, \"CLI_unable_to_parse_to_JSON\", responseBody);\r\n                }\r\n            }\r\n            responseBody = getResponseBody(response, httpMethod);\r\n            final Map<String, Object> responseMap = GSRestClient.jsonToMap(responseBody);\r\n            return responseJsonKey != null ? responseMap.get(RESPONSE_KEY) : responseMap;\r\n        } catch (final ClientProtocolException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } catch (final IOException e) {\r\n            logger.log(Level.FINE, httpMethod.getURI() + MSG_REST_API_ERR, e);\r\n            throw new ErrorStatusException(e, REASON_CODE_COMM_ERR, httpMethod.getURI(), MSG_REST_API_ERR);\r\n        } finally {\r\n            httpMethod.abort();\r\n        }\r\n    }","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * Returns the lifecycle events according to the lifecycleEventContainerID id that is returned as a response when\r\n\t * installing/un-installing a service/application and according to the cursor position.\r\n\t * \r\n\t * @param lifecycleEventContainerID the unique task ID.\r\n\t * @param cursor event entry cursor\r\n\t * @return a map containing the events and the task state.\r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody= \"{\\\"isDone\\\":false,\\\"lifecycleLogs\\\":[\\\"[service1] Deployed 1 planned 1\\\",\" +\r\n\t\t\t\t\t\"\\\"Service &#92&#34service1&#92&#34 successfully installed (1 Instances)\\\"],\" +\r\n\t\t\t\t\t\"\\\"PollingTaskExpirationTimeMillis\\\":\\\"575218\\\",\\\"curserPos\\\":12}\")\r\n\t@PossibleResponseStatuses(codes = {200,200,200}, \r\n\tdescriptions = {\"success\", \"Lifecycle events container with UUID ... does not exist or expired\", \"execution exception message\"})\r\n\t@RequestMapping(value = \"/lifecycleEventContainerID/{lifecycleEventContainerID}/cursor/{cursor}\",\r\n\t\t\tmethod = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject getLifecycleEvents(@PathVariable final String lifecycleEventContainerID, @PathVariable final int cursor) {\r\n\t\tfinal Map<String, Object> resultsMap = new HashMap<String, Object>();\r\n\r\n\t\tif (!lifecyclePollingThreadContainer.containsKey(UUID.fromString(lifecycleEventContainerID))) {\r\n\t\t\treturn errorStatus(\"Lifecycle events container with UUID: \" + lifecycleEventContainerID\r\n\t\t\t\t\t+ \" does not exist or expired.\");\r\n\t\t}\r\n\t\tfinal RestPollingRunnable restPollingRunnable = lifecyclePollingThreadContainer.\r\n\t\t\t\tget(UUID.fromString(lifecycleEventContainerID));\r\n\r\n\t\tfinal LifecycleEventsContainer container = restPollingRunnable.getLifecycleEventsContainer();\r\n\t\tfinal boolean done = restPollingRunnable.isDone();\r\n\t\tif (!done) {\r\n\t\t\textendThreadTimeout(restPollingRunnable, DEFAULT_TIME_EXTENTION_POLLING_TASK);\r\n\t\t} else {\r\n\t\t\tfinal Throwable t = restPollingRunnable.getExecutionException();\r\n\t\t\tif (t != null) {\r\n\t\t\t\tlogger.log(Level.INFO, \"Lifecycle events polling ended unexpectedly.\", t);\r\n\t\t\t\treturn errorStatus(t.getMessage());\r\n\t\t\t} else {\r\n\t\t\t\tlogger.log(Level.FINE, \"Lifecycle events polling ended successfully.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tresultsMap.put(CloudifyConstants.IS_TASK_DONE, done);\r\n\t\tfinal List<String> lifecycleEvents = container.getLifecycleEvents(cursor);\r\n\r\n\t\tif (lifecycleEvents != null) {\r\n\t\t\tfinal int newCursorPos = cursor + lifecycleEvents.size();\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, newCursorPos);\r\n\t\t\tresultsMap.put(CloudifyConstants.LIFECYCLE_LOGS, lifecycleEvents);\r\n\t\t} else {\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, cursor);\r\n\t\t}\r\n\t\tfinal long timeBeforeTaskTerminationMillis = restPollingRunnable.getEndTime() - System.currentTimeMillis();\r\n\t\tresultsMap.put(CloudifyConstants.SERVER_POLLING_TASK_EXPIRATION_MILLI,\r\n\t\t\t\tLong.toString(timeBeforeTaskTerminationMillis));\r\n\r\n\t\treturn successStatus(resultsMap);\r\n\t}","id":100934,"modified_method":"/**\r\n\t * Returns the lifecycle events according to the lifecycleEventContainerID id that is returned as a response when\r\n\t * installing/un-installing a service/application and according to the cursor position.\r\n\t * \r\n\t * @param lifecycleEventContainerID the unique task ID.\r\n\t * @param cursor event entry cursor\r\n\t * @return a map containing the events and the task state.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen polling task has expired or if the task ended unexpectedly. \r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody= \"{\\\"isDone\\\":false,\\\"lifecycleLogs\\\":[\\\"[service1] Deployed 1 planned 1\\\",\" +\r\n\t\t\t\t\t\"\\\"Service &#92&#34service1&#92&#34 successfully installed (1 Instances)\\\"],\" +\r\n\t\t\t\t\t\"\\\"PollingTaskExpirationTimeMillis\\\":\\\"575218\\\",\\\"curserPos\\\":12}\")\r\n\t@PossibleResponseStatuses(codes = {200,500,500}, \r\n\tdescriptions = {\"success\", \"Lifecycle events container with UUID ... does not exist or expired\", \"execution exception message\"})\r\n\t@RequestMapping(value = \"/lifecycleEventContainerID/{lifecycleEventContainerID}/cursor/{cursor}\",\r\n\t\t\tmethod = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject getLifecycleEvents(@PathVariable final String lifecycleEventContainerID, @PathVariable final int cursor) throws RestErrorException {\r\n\t\tfinal Map<String, Object> resultsMap = new HashMap<String, Object>();\r\n\r\n\t\tif (!lifecyclePollingThreadContainer.containsKey(UUID.fromString(lifecycleEventContainerID))) {\r\n\t\t\tthrow new RestErrorException(\"Lifecycle events container with UUID: \" + lifecycleEventContainerID\r\n\t\t\t\t\t+ \" does not exist or expired.\");\r\n\t\t}\r\n\t\tfinal RestPollingRunnable restPollingRunnable = lifecyclePollingThreadContainer.\r\n\t\t\t\tget(UUID.fromString(lifecycleEventContainerID));\r\n\r\n\t\tfinal LifecycleEventsContainer container = restPollingRunnable.getLifecycleEventsContainer();\r\n\t\tfinal boolean done = restPollingRunnable.isDone();\r\n\t\tif (!done) {\r\n\t\t\textendThreadTimeout(restPollingRunnable, DEFAULT_TIME_EXTENTION_POLLING_TASK);\r\n\t\t} else {\r\n\t\t\tfinal Throwable t = restPollingRunnable.getExecutionException();\r\n\t\t\tif (t != null) {\r\n\t\t\t\tlogger.log(Level.INFO, \"Lifecycle events polling ended unexpectedly.\", t);\r\n\t\t\t\tthrow new RestErrorException(t.getMessage());\r\n\t\t\t} else {\r\n\t\t\t\tlogger.log(Level.FINE, \"Lifecycle events polling ended successfully.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tresultsMap.put(CloudifyConstants.IS_TASK_DONE, done);\r\n\t\tfinal List<String> lifecycleEvents = container.getLifecycleEvents(cursor);\r\n\r\n\t\tif (lifecycleEvents != null) {\r\n\t\t\tfinal int newCursorPos = cursor + lifecycleEvents.size();\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, newCursorPos);\r\n\t\t\tresultsMap.put(CloudifyConstants.LIFECYCLE_LOGS, lifecycleEvents);\r\n\t\t} else {\r\n\t\t\tresultsMap.put(CloudifyConstants.CURSOR_POS, cursor);\r\n\t\t}\r\n\t\tfinal long timeBeforeTaskTerminationMillis = restPollingRunnable.getEndTime() - System.currentTimeMillis();\r\n\t\tresultsMap.put(CloudifyConstants.SERVER_POLLING_TASK_EXPIRATION_MILLI,\r\n\t\t\t\tLong.toString(timeBeforeTaskTerminationMillis));\r\n\r\n\t\treturn successStatus(resultsMap);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/******************\r\n\t * Uninstalls an application by uninstalling all of its services. Order of uninstallations is determined by the\r\n\t * context property 'com.gs.application.services' which should exist in all service PUs.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @return Map with return value; @ .\r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody=\"{\\\"lifecycleEventContainerID\\\":\\\"bfae0a89-b5a0-4250-b393-6cedbf63ac76\\\"}\")\r\n\t@PossibleResponseStatuses(codes={200, 200}, descriptions={\"success\", \"failed_to_locate_app\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/timeout/{timeoutInMinutes}\", method = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> uninstallApplication(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final int timeoutInMinutes) {\r\n\r\n\t\t// Check that Application exists\r\n\t\tfinal Application app = this.admin.getApplications().waitFor(applicationName, 10, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall application \" + applicationName\r\n\t\t\t\t\t+ \" since it has not been discovered yet.\");\r\n\t\t\treturn RestUtils.errorStatus(ResponseConstants.FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tif (app.getName().equals(CloudifyConstants.MANAGEMENT_APPLICATION_NAME)){\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall the Management application.\");\r\n\t\t\treturn RestUtils.errorStatus(\r\n\t\t\t\t\tResponseConstants.CANNOT_UNINSTALL_MANAGEMENT_APP);\r\n\t\t}\r\n\t\tfinal ProcessingUnit[] pus = app.getProcessingUnits().getProcessingUnits();\r\n\r\n\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\tfinal List<ProcessingUnit> uninstallOrder = createUninstallOrder(pus, applicationName);\r\n\t\t// TODO: Add timeout.\r\n\t\tFutureTask<Boolean> undeployTask = null;\r\n\t\tlogger.log(Level.INFO, \"Starting to poll for uninstall lifecycle events.\");\r\n\t\tif (uninstallOrder.size() > 0) {\r\n\t\t\tundeployTask = new FutureTask<Boolean>(new Runnable() {\r\n\t\t\t\tlong startTime = System.currentTimeMillis();\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tfor (final ProcessingUnit processingUnit : uninstallOrder) {\r\n\t\t\t\t\t\tlong undeployTimeout = TimeUnit.MINUTES.toMillis(timeoutInMinutes) - (System.currentTimeMillis() - startTime);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (processingUnit.waitForManaged(10, TimeUnit.SECONDS) == null) {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.WARNING, \"Failed to locate GSM that is managing Processing Unit \"\r\n\t\t\t\t\t\t\t\t\t\t+ processingUnit.getName());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.INFO, \"Undeploying Processing Unit \" + processingUnit.getName());\r\n\t\t\t\t\t\t\t\tprocessingUnit.undeployAndWait(undeployTimeout, TimeUnit.MINUTES);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (final Exception e) {\r\n\t\t\t\t\t\t\tfinal String msg =\r\n\t\t\t\t\t\t\t\t\t\"Failed to undeploy processing unit: \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" while uninstalling application \" + applicationName\r\n\t\t\t\t\t\t\t\t\t\t\t+ \". Uninstall will continue, but service \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" may remain in an unstable state\";\r\n\r\n\t\t\t\t\t\t\tlogger.log(Level.SEVERE, msg, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlogger.log(Level.INFO, \"Application \" + applicationName + \" undeployment complete\");\r\n\t\t\t\t}\r\n\t\t\t}, true);\r\n\t\t\t\r\n\t\t\t((InternalAdmin) admin).scheduleAdminOperation(undeployTask);\r\n\r\n\t\t}\r\n\t\tfinal UUID lifecycleEventContainerID =\r\n\t\t\t\tstartPollingForApplicationUninstallLifecycleEvents(applicationName, uninstallOrder, timeoutInMinutes, undeployTask);\r\n\r\n\t\tfinal String errors = sb.toString();\r\n\t\tif (errors.length() == 0) {\r\n\t\t\tfinal Map<String, Object> returnMap = new HashMap<String, Object>();\r\n\t\t\treturnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID, lifecycleEventContainerID);\r\n\t\t\treturn RestUtils.successStatus(returnMap);\r\n\t\t}\r\n\t\treturn RestUtils.errorStatus(errors);\r\n\t}","id":100935,"modified_method":"/******************\r\n\t * Uninstalls an application by uninstalling all of its services. Order of uninstallations is determined by the\r\n\t * context property 'com.gs.application.services' which should exist in all service PUs.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @return Map with return value; @ .\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen application not found or when attempting to remove management services.\r\n\t */\r\n\t@JsonResponseExample(status=\"success\", \r\n\t\t\tresponseBody=\"{\\\"lifecycleEventContainerID\\\":\\\"bfae0a89-b5a0-4250-b393-6cedbf63ac76\\\"}\")\r\n\t@PossibleResponseStatuses(codes={200, 500, 500}, \r\n\tdescriptions={\"success\", \"failed_to_locate_app\", \"cannot_uninstall_management_application\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/timeout/{timeoutInMinutes}\", method = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> uninstallApplication(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final int timeoutInMinutes) throws RestErrorException {\r\n\r\n\t\t// Check that Application exists\r\n\t\tfinal Application app = this.admin.getApplications().waitFor(applicationName, 10, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall application \" + applicationName\r\n\t\t\t\t\t+ \" since it has not been discovered yet.\");\r\n\t\t\tthrow new RestErrorException(FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tif (app.getName().equals(CloudifyConstants.MANAGEMENT_APPLICATION_NAME)){\r\n\t\t\tlogger.log(Level.INFO, \"Cannot uninstall the Management application.\");\r\n\t\t\tthrow new RestErrorException(\r\n\t\t\t\t\tResponseConstants.CANNOT_UNINSTALL_MANAGEMENT_APP);\r\n\t\t}\r\n\t\tfinal ProcessingUnit[] pus = app.getProcessingUnits().getProcessingUnits();\r\n\r\n\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\tfinal List<ProcessingUnit> uninstallOrder = createUninstallOrder(pus, applicationName);\r\n\t\t// TODO: Add timeout.\r\n\t\tFutureTask<Boolean> undeployTask = null;\r\n\t\tlogger.log(Level.INFO, \"Starting to poll for uninstall lifecycle events.\");\r\n\t\tif (uninstallOrder.size() > 0) {\r\n\t\t\tundeployTask = new FutureTask<Boolean>(new Runnable() {\r\n\t\t\t\tlong startTime = System.currentTimeMillis();\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tfor (final ProcessingUnit processingUnit : uninstallOrder) {\r\n\t\t\t\t\t\tlong undeployTimeout = TimeUnit.MINUTES.toMillis(timeoutInMinutes) - (System.currentTimeMillis() - startTime);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (processingUnit.waitForManaged(10, TimeUnit.SECONDS) == null) {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.WARNING, \"Failed to locate GSM that is managing Processing Unit \"\r\n\t\t\t\t\t\t\t\t\t\t+ processingUnit.getName());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlogger.log(Level.INFO, \"Undeploying Processing Unit \" + processingUnit.getName());\r\n\t\t\t\t\t\t\t\tprocessingUnit.undeployAndWait(undeployTimeout, TimeUnit.MINUTES);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (final Exception e) {\r\n\t\t\t\t\t\t\tfinal String msg =\r\n\t\t\t\t\t\t\t\t\t\"Failed to undeploy processing unit: \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" while uninstalling application \" + applicationName\r\n\t\t\t\t\t\t\t\t\t\t\t+ \". Uninstall will continue, but service \" + processingUnit.getName()\r\n\t\t\t\t\t\t\t\t\t\t\t+ \" may remain in an unstable state\";\r\n\r\n\t\t\t\t\t\t\tlogger.log(Level.SEVERE, msg, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlogger.log(Level.INFO, \"Application \" + applicationName + \" undeployment complete\");\r\n\t\t\t\t}\r\n\t\t\t}, true);\r\n\t\t\t\r\n\t\t\t((InternalAdmin) admin).scheduleAdminOperation(undeployTask);\r\n\r\n\t\t}\r\n\t\tfinal UUID lifecycleEventContainerID =\r\n\t\t\t\tstartPollingForApplicationUninstallLifecycleEvents(applicationName, uninstallOrder, timeoutInMinutes, undeployTask);\r\n\r\n\t\tfinal String errors = sb.toString();\r\n\t\tif (errors.length() == 0) {\r\n\t\t\tfinal Map<String, Object> returnMap = new HashMap<String, Object>();\r\n\t\t\treturnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID, lifecycleEventContainerID);\r\n\t\t\treturn RestUtils.successStatus(returnMap);\r\n\t\t}\r\n\t\tthrow new RestErrorException(errors);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Invokes a custom command on all of the specified service instances. \r\n\t * Custom parameters are passed as a map using\r\n\t * the POST method and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name.\r\n\t * @param beanName deprecated.\r\n\t * @param params The command parameters.\r\n\t * @return a Map containing the result of each invocation on a service instance.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"instance #1@127.0.0.1\\\":{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}}\")\r\n\t@PossibleResponseStatuses(codes = {200,200,200}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"no_processing_unit_instances_found_for_invocation\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> invoke(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + absolutePuName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get the PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// result, mapping service instances to results\r\n\t\tfinal Map<String, Object> invocationResult = new HashMap<String, Object>();\r\n\t\tfinal ProcessingUnitInstance[] instances = pu.getInstances();\r\n\r\n\t\tif (instances.length == 0) {\r\n\t\t\treturn errorStatus(ResponseConstants.NO_PROCESSING_UNIT_INSTANCES_FOUND_FOR_INVOCATION, serviceName);\r\n\t\t}\r\n\r\n\t\t// Why a map? TODO: Use an array here instead.\r\n\t\t// map between service name and its future\r\n\t\tfinal Map<String, Future<Object>> futures = new HashMap<String, Future<Object>>(instances.length);\r\n\t\tfor (final ProcessingUnitInstance instance : instances) {\r\n\t\t\t// key includes instance ID and host name\r\n\t\t\tfinal String serviceInstanceName = buildServiceInstanceName(instance);\r\n\t\t\ttry {\r\n\t\t\t\tfinal Future<Object> future = ((DefaultProcessingUnitInstance) instance).invoke(beanName, params);\r\n\t\t\t\tfutures.put(serviceInstanceName, future);\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tlogger.severe(\"Error invoking service \" + serviceName + \":\" + instance.getInstanceId() + \" on host \"\r\n\t\t\t\t\t\t+ instance.getVirtualMachine().getMachine().getHostName());\r\n\t\t\t\tinvocationResult.put(serviceInstanceName, \"pu_instance_invocation_failure\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (final Map.Entry<String, Future<Object>> entry : futures.entrySet()) {\r\n\t\t\ttry {\r\n\t\t\t\tObject result = entry.getValue().get();\r\n\t\t\t\t// use only tostring of collection values, to avoid\r\n\t\t\t\t// serialization problems\r\n\t\t\t\tresult = postProcessInvocationResult(result, entry.getKey());\r\n\t\t\t\t\r\n\t\t\t\tinvocationResult.put(entry.getKey(), result);\r\n\t\t\t\t\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tinvocationResult.put(entry.getKey(), \"Invocation failure: \" + e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn successStatus(invocationResult);\r\n\t}","id":100936,"modified_method":"/**\r\n\t * \r\n\t * Invokes a custom command on all of the specified service instances. \r\n\t * Custom parameters are passed as a map using\r\n\t * the POST method and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name.\r\n\t * @param beanName deprecated.\r\n\t * @param params The command parameters.\r\n\t * @return a Map containing the result of each invocation on a service instance.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen lookup service not found or no processing unit instance is found for the requested service.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"instance #1@127.0.0.1\\\":{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}}\")\r\n\t@PossibleResponseStatuses(codes = {200,500,500}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"no_processing_unit_instances_found_for_invocation\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> invoke(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + absolutePuName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get the PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// result, mapping service instances to results\r\n\t\tfinal Map<String, Object> invocationResult = new HashMap<String, Object>();\r\n\t\tfinal ProcessingUnitInstance[] instances = pu.getInstances();\r\n\r\n\t\tif (instances.length == 0) {\r\n\t\t\tthrow new RestErrorException(ResponseConstants.NO_PROCESSING_UNIT_INSTANCES_FOUND_FOR_INVOCATION, serviceName);\r\n\t\t}\r\n\r\n\t\t// Why a map? TODO: Use an array here instead.\r\n\t\t// map between service name and its future\r\n\t\tfinal Map<String, Future<Object>> futures = new HashMap<String, Future<Object>>(instances.length);\r\n\t\tfor (final ProcessingUnitInstance instance : instances) {\r\n\t\t\t// key includes instance ID and host name\r\n\t\t\tfinal String serviceInstanceName = buildServiceInstanceName(instance);\r\n\t\t\ttry {\r\n\t\t\t\tfinal Future<Object> future = ((DefaultProcessingUnitInstance) instance).invoke(beanName, params);\r\n\t\t\t\tfutures.put(serviceInstanceName, future);\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tlogger.severe(\"Error invoking service \" + serviceName + \":\" + instance.getInstanceId() + \" on host \"\r\n\t\t\t\t\t\t+ instance.getVirtualMachine().getMachine().getHostName());\r\n\t\t\t\tinvocationResult.put(serviceInstanceName, \"pu_instance_invocation_failure\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (final Map.Entry<String, Future<Object>> entry : futures.entrySet()) {\r\n\t\t\ttry {\r\n\t\t\t\tObject result = entry.getValue().get();\r\n\t\t\t\t// use only tostring of collection values, to avoid\r\n\t\t\t\t// serialization problems\r\n\t\t\t\tresult = postProcessInvocationResult(result, entry.getKey());\r\n\t\t\t\t\r\n\t\t\t\tinvocationResult.put(entry.getKey(), result);\r\n\t\t\t\t\r\n\t\t\t} catch (final Exception e) {\r\n\t\t\t\tinvocationResult.put(entry.getKey(), \"Invocation failure: \" + e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn successStatus(invocationResult);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * Creates and returns a map containing all of the deployed service names installed under a specific application\r\n\t * context.\r\n\t * \r\n\t * @return a list of the deployed services in the service grid that were deployed as a part of a specific\r\n\t *         application.\r\n\t */\r\n\t@JsonResponseExample(status = \"sucess\", responseBody=\"[\\\"service1\\\",\\\"service2\\\"]\")\r\n\t@PossibleResponseStatuses(codes={200, 200}, descriptions={\"success\", \"failed_to_locate_app\"})\r\n\t@RequestMapping(value = \"/applications/{applicationName}/services\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> getServicesList(@PathVariable final String applicationName) {\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to list applications\");\r\n\t\t}\r\n\t\tfinal Application app = admin.getApplications().waitFor(applicationName, 5, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\treturn errorStatus(FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tfinal ProcessingUnits pus = app.getProcessingUnits();\r\n\t\tfinal List<String> serviceNames = new ArrayList<String>(pus.getSize());\r\n\t\tfor (final ProcessingUnit pu : pus) {\r\n\t\t\tserviceNames.add(ServiceUtils.getApplicationServiceName(pu.getName(), applicationName));\r\n\t\t}\r\n\t\treturn successStatus(serviceNames);\r\n\t}","id":100937,"modified_method":"/**\r\n\t * Creates and returns a map containing all of the deployed service names installed under a specific application\r\n\t * context.\r\n\t * \r\n\t * @return a list of the deployed services in the service grid that were deployed as a part of a specific\r\n\t *         application.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen application is not found.\r\n\t */\r\n\t@JsonResponseExample(status = \"sucess\", responseBody=\"[\\\"service1\\\",\\\"service2\\\"]\")\r\n\t@PossibleResponseStatuses(codes={200, 500}, descriptions={\"success\", \"failed_to_locate_app\"})\r\n\t@RequestMapping(value = \"/applications/{applicationName}/services\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> getServicesList(@PathVariable final String applicationName) throws RestErrorException {\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to list applications\");\r\n\t\t}\r\n\t\tfinal Application app = admin.getApplications().waitFor(applicationName, 5, TimeUnit.SECONDS);\r\n\t\tif (app == null) {\r\n\t\t\tthrow new RestErrorException(FAILED_TO_LOCATE_APP, applicationName);\r\n\t\t}\r\n\t\tfinal ProcessingUnits pus = app.getProcessingUnits();\r\n\t\tfinal List<String> serviceNames = new ArrayList<String>(pus.getSize());\r\n\t\tfor (final ProcessingUnit pu : pus) {\r\n\t\t\tserviceNames.add(ServiceUtils.getApplicationServiceName(pu.getName(), applicationName));\r\n\t\t}\r\n\t\treturn successStatus(serviceNames);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Increments the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param params map that holds a timeout value for this action.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t */\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/addinstance\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> addInstance(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@RequestBody final Map<String, String> params) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tfinal int timeout = Integer.parseInt(params.get(\"timeout\"));\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfinal int before = processingUnit.getNumberOfInstances();\r\n\t\tprocessingUnit.incrementInstance();\r\n\t\tfinal boolean result = processingUnit.waitFor(before + 1, timeout, TimeUnit.SECONDS);\r\n\t\tif (result) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\treturn errorStatus(ResponseConstants.FAILED_TO_ADD_INSTANCE, applicationName, serviceName);\r\n\t}","id":100938,"modified_method":"/**\r\n\t * \r\n\t * Increments the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param params map that holds a timeout value for this action.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen service processing unit not found or failed to add the instance.\r\n\t */\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/addinstance\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> addInstance(@PathVariable final String applicationName, @PathVariable final String serviceName,\r\n\t\t\t@RequestBody final Map<String, String> params) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tfinal int timeout = Integer.parseInt(params.get(\"timeout\"));\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfinal int before = processingUnit.getNumberOfInstances();\r\n\t\tprocessingUnit.incrementInstance();\r\n\t\tfinal boolean result = processingUnit.waitFor(before + 1, timeout, TimeUnit.SECONDS);\r\n\t\tif (result) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\tthrow new RestErrorException(ResponseConstants.FAILED_TO_ADD_INSTANCE, applicationName, serviceName);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Decrements the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param instanceId the service instance ID to remove.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,200,200}, descriptions = {\"success\",\"failed_to_locate_service\", \"service_instance_unavailable\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/remove\",\r\n\t\t\tmethod = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> removeInstance(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\t// todo: application awareness\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfor (final ProcessingUnitInstance instance : processingUnit.getInstances()) {\r\n\t\t\tif (instance.getInstanceId() == instanceId) {\r\n\t\t\t\tinstance.decrement();\r\n\t\t\t\treturn successStatus();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn errorStatus(SERVICE_INSTANCE_UNAVAILABLE);\r\n\t}","id":100939,"modified_method":"/**\r\n\t * \r\n\t * Decrements the Processing unit instance number of the specified service.\r\n\t * \r\n\t * @param applicationName The application name where the service resides.\r\n\t * @param serviceName The service name.\r\n\t * @param instanceId the service instance ID to remove.\r\n\t * @return success status map if succeeded, else returns an error status.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen failed to locate the service or if the service instance is not available.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,500,500}, descriptions = {\"success\",\"failed_to_locate_service\", \"service_instance_unavailable\"})\r\n\t@RequestMapping(value = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/remove\",\r\n\t\t\tmethod = RequestMethod.DELETE)\r\n\tpublic @ResponseBody\r\n\tMap<String, Object> removeInstance(@PathVariable final String applicationName,\r\n\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\t// todo: application awareness\r\n\t\tfinal ProcessingUnit processingUnit =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (processingUnit == null) {\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\t\tfor (final ProcessingUnitInstance instance : processingUnit.getInstances()) {\r\n\t\t\tif (instance.getInstanceId() == instanceId) {\r\n\t\t\t\tinstance.decrement();\r\n\t\t\t\treturn successStatus();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new RestErrorException(SERVICE_INSTANCE_UNAVAILABLE);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * \r\n\t * Invokes a custom command on a specific service instance. Custom parameters are passed as a map using POST method\r\n\t * and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name\r\n\t * @param instanceId The service instance number to be invoked.\r\n\t * @param beanName depreciated\r\n\t * @param params a Map containing the result of each invocation on a service instance.\r\n\t * @return a Map containing the invocation result on the specified instance.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}\")\r\n\t@PossibleResponseStatuses(codes = {200,200,200,200}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"service_instance_unavailable\", \"failed_to_invoke_instance\"})\r\n\t@RequestMapping(\r\n\t\t\tvalue = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\t\t\tMap<String, Object> invokeInstance(@PathVariable final String applicationName,\r\n\t\t\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId,\r\n\t\t\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + serviceName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// Get PUI\r\n\t\tfinal InternalProcessingUnitInstance pui = findInstanceById(pu, instanceId);\r\n\r\n\t\tif (pui == null) {\r\n\t\t\tlogger.severe(\"Could not find service instance \" + instanceId + \" for service \" + absolutePuName);\r\n\t\t\treturn errorStatus(ResponseConstants.SERVICE_INSTANCE_UNAVAILABLE, applicationName, absolutePuName,\r\n\t\t\t\t\tInteger.toString(instanceId));\r\n\t\t}\r\n\t\tfinal String instanceName = buildServiceInstanceName(pui);\r\n\t\t// Invoke the remote service\r\n\t\ttry {\r\n\t\t\tfinal Future<?> future = pui.invoke(beanName, params);\r\n\t\t\tfinal Object invocationResult = future.get();\r\n\t\t\tfinal Object finalResult = postProcessInvocationResult(invocationResult, instanceName);\r\n\t\t\treturn successStatus(finalResult);\r\n\t\t} catch (final Exception e) {\r\n\t\t\tlogger.severe(\"Error invoking pu instance \" + absolutePuName + \":\" + instanceId + \" on host \"\r\n\t\t\t\t\t+ pui.getVirtualMachine().getMachine().getHostName());\r\n\t\t\treturn errorStatus(FAILED_TO_INVOKE_INSTANCE, absolutePuName, Integer.toString(instanceId), e.getMessage());\r\n\t\t}\r\n\t}","id":100940,"modified_method":"/**\r\n\t * \r\n\t * Invokes a custom command on a specific service instance. Custom parameters are passed as a map using POST method\r\n\t * and contain the command name and parameter values for the specified command.\r\n\t * \r\n\t * @param applicationName The application name.\r\n\t * @param serviceName The service name\r\n\t * @param instanceId The service instance number to be invoked.\r\n\t * @param beanName depreciated\r\n\t * @param params a Map containing the result of each invocation on a service instance.\r\n\t * @return a Map containing the invocation result on the specified instance.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen failed to locate service/service instance or invocation failed.\r\n\t */\r\n\t@JsonRequestExample(requestBody = \"{\\\"param1 name\\\":\\\"param1\\\",\\\"param2 name\\\":\\\"param2\\\"}\")\r\n\t@JsonResponseExample(status = \"success\", \r\n\tresponseBody = \"{\\\"Invocation_Instance_Name\\\":\\\"instance #1@127.0.0.1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Instance_ID\\\":\\\"1\\\"\" +\r\n\t\t\t\",\\\"Invocation_Result\\\":\\\"the invocation result as specified in the service file\\\"\" +\r\n\t\t\t\",\\\"Invocation_Success\\\":\\\"true\\\",\" +\r\n\t\t\t\"\\\"Invocation_Exception\\\":null,\\\"Invocation_Command_Name\\\":\\\"custom command name\\\"}\")\r\n\t@PossibleResponseStatuses(codes = {200,500,500,500}, \r\n\tdescriptions = {\"success\", \"failed_to_locate_service\", \"service_instance_unavailable\", \"failed_to_invoke_instance\"})\r\n\t@RequestMapping(\r\n\t\t\tvalue = \"applications/{applicationName}/services/{serviceName}/instances/{instanceId}/beans/{beanName}/invoke\",\r\n\t\t\tmethod = RequestMethod.POST)\r\n\tpublic @ResponseBody\r\n\t\t\tMap<String, Object> invokeInstance(@PathVariable final String applicationName,\r\n\t\t\t\t\t@PathVariable final String serviceName, @PathVariable final int instanceId,\r\n\t\t\t\t\t@PathVariable final String beanName, @RequestBody final Map<String, Object> params) throws RestErrorException {\r\n\t\tfinal String absolutePuName = ServiceUtils.getAbsolutePUName(applicationName, serviceName);\r\n\t\tif (logger.isLoggable(Level.FINER)) {\r\n\t\t\tlogger.finer(\"received request to invoke bean \" + beanName + \" of service \" + serviceName\r\n\t\t\t\t\t+ \" of application \" + applicationName);\r\n\t\t}\r\n\r\n\t\t// Get PU\r\n\t\tfinal ProcessingUnit pu =\r\n\t\t\t\tadmin.getProcessingUnits().waitFor(absolutePuName, PU_DISCOVERY_TIMEOUT_SEC, TimeUnit.SECONDS);\r\n\t\tif (pu == null) {\r\n\t\t\tlogger.severe(\"Could not find service \" + absolutePuName);\r\n\t\t\treturn unavailableServiceError(absolutePuName);\r\n\t\t}\r\n\r\n\t\t// Get PUI\r\n\t\tfinal InternalProcessingUnitInstance pui = findInstanceById(pu, instanceId);\r\n\r\n\t\tif (pui == null) {\r\n\t\t\tlogger.severe(\"Could not find service instance \" + instanceId + \" for service \" + absolutePuName);\r\n\t\t\tthrow new RestErrorException(ResponseConstants.SERVICE_INSTANCE_UNAVAILABLE, applicationName, absolutePuName,\r\n\t\t\t\t\tInteger.toString(instanceId));\r\n\t\t}\r\n\t\tfinal String instanceName = buildServiceInstanceName(pui);\r\n\t\t// Invoke the remote service\r\n\t\ttry {\r\n\t\t\tfinal Future<?> future = pui.invoke(beanName, params);\r\n\t\t\tfinal Object invocationResult = future.get();\r\n\t\t\tfinal Object finalResult = postProcessInvocationResult(invocationResult, instanceName);\r\n\t\t\treturn successStatus(finalResult);\r\n\t\t} catch (final Exception e) {\r\n\t\t\tlogger.severe(\"Error invoking pu instance \" + absolutePuName + \":\" + instanceId + \" on host \"\r\n\t\t\t\t\t+ pui.getVirtualMachine().getMachine().getHostName());\r\n\t\t\tthrow new RestErrorException(FAILED_TO_INVOKE_INSTANCE, absolutePuName, Integer.toString(instanceId), e.getMessage());\r\n\t\t}\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\r\n\t * Tests whether the restful service is able to locate the service grid using the admin API. \r\n\t * <p>The admin API searches for a LUS (Lookup Service) according to the lookup groups/locators defined.\r\n\t * \r\n\t * @return - Map<String, Object> object containing the test results.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,200}, descriptions = {\"success\", FAILED_TO_LOCATE_LUS})\r\n\t@JsonResponseExample(status = \"error\",\r\n\tresponseBody=\"{\\\"error\\\":\\\"failed_to_locate_lookup_service\\\", \\\"error_args\\\":[[\\\"localcloud\\\"],[\\\"jini://127.0.0.1:4172/\\\"]]}\",\r\n\tcomments=\"response status is success if the restful service located the service grid\" +\r\n\t\t\t\", otherwise it is error and the response's body will contain error description, the groups and locators.\")\r\n\t@RequestMapping(value = \"/testrest\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject test() {\r\n\t\tif (admin.getLookupServices().getSize() > 0) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\tfinal String groups = Arrays.toString(admin.getGroups());\r\n\t\tfinal String locators = Arrays.toString(admin.getLocators());\r\n\t\treturn errorStatus(FAILED_TO_LOCATE_LUS, groups, locators);\r\n\t}","id":100941,"modified_method":"/**\r\n\t * Tests whether the restful service is able to locate the service grid using the admin API. \r\n\t * <p>The admin API searches for a LUS (Lookup Service) according to the lookup groups/locators defined.\r\n\t * \r\n\t * @return - Map<String, Object> object containing the test results.\r\n\t * @throws RestErrorException \r\n\t * \t\t\tWhen lookup service not found.\r\n\t */\r\n\t@PossibleResponseStatuses(codes = {200,500}, descriptions = {\"success\", FAILED_TO_LOCATE_LUS})\r\n\t@JsonResponseExample(status = \"error\",\r\n\tresponseBody=\"{\\\"error\\\":\\\"failed_to_locate_lookup_service\\\", \\\"error_args\\\":[[\\\"localcloud\\\"],[\\\"jini://127.0.0.1:4172/\\\"]]}\",\r\n\tcomments=\"response status is success if the restful service located the service grid\" +\r\n\t\t\t\", otherwise it is error and the response's body will contain error description, the groups and locators.\")\r\n\t@RequestMapping(value = \"/testrest\", method = RequestMethod.GET)\r\n\tpublic @ResponseBody\r\n\tObject test() throws RestErrorException {\r\n\t\tif (admin.getLookupServices().getSize() > 0) {\r\n\t\t\treturn successStatus();\r\n\t\t}\r\n\t\tfinal String groups = Arrays.toString(admin.getGroups());\r\n\t\tfinal String locators = Arrays.toString(admin.getLocators());\r\n\t\tthrow new RestErrorException(FAILED_TO_LOCATE_LUS, groups, locators);\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private Map<String, Object> unavailableServiceError(final String serviceName) {\r\n\t\t// TODO: Consider telling the user he might be using the wrong\r\n\t\t// application name.\r\n\t\treturn errorStatus(FAILED_TO_LOCATE_SERVICE, ServiceUtils.getFullServiceName(serviceName).getServiceName());\r\n\t}","id":100942,"modified_method":"private Map<String, Object> unavailableServiceError(final String serviceName) throws RestErrorException {\r\n\t\t// TODO: Consider telling the user he might be using the wrong\r\n\t\t// application name.\r\n\t\tthrow new RestErrorException(FAILED_TO_LOCATE_SERVICE, ServiceUtils.getFullServiceName(serviceName).getServiceName());\r\n\t}","commit_id":"1a27c96db34a67e92b46ed798c3ee091f93be102","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n     * Gets the content of a defined section in a given template file and its subtemplates\n     * with the given parameters. \n     * \n     * @see getContent(A_CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n     * @param cms A_CmsObject Object for accessing system resources.\n     * @param templateFile Filename of the template file.\n     * @param elementName Element name of this template in our parent template.\n     * @param parameters Hashtable with all template class parameters.\n     * @param templateSelector template section that should be processed.\n     */\n    public byte[] getContent(A_CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n        \n        HttpServletRequest orgReq = (HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest();    \n        HttpSession session = orgReq.getSession(true);\n        \n\t\t// read all parameters\n        String file = (String)parameters.get(C_NEWS_PARAM_FILE);\n        if(file == null) {\n            file = (String)session.getValue(C_NEWS_PARAM_FILE);\n        } else {\n            session.putValue(C_NEWS_PARAM_FILE, file);\n        }\n\n        String action = (String)parameters.get(C_NEWS_PARAM_ACTION);\n        if(action == null) {\n            action = (String)session.getValue(C_NEWS_PARAM_ACTION);\n        } else {\n            session.putValue(C_NEWS_PARAM_ACTION, action);\n        }        \n        \n        String newDate = (String)parameters.get(C_NEWS_PARAM_DATE);\n        String newHeadline = (String)parameters.get(C_NEWS_PARAM_HEADLINE);\n        String newShorttext = (String)parameters.get(C_NEWS_PARAM_SHORTTEXT);\n        String newText = (String)parameters.get(C_NEWS_PARAM_TEXT);\n        String newExternalLink = (String)parameters.get(C_NEWS_PARAM_EXTLINK);\n\t\t\n\t\t//no URL is specified \n\t\tif (newExternalLink != null && !\"\".equals(newExternalLink)) {\n\t\t\tif (newExternalLink.equals(C_URL_PROTOCOL)) {\n\t\t\t\tnewExternalLink = \"\";\n\t\t\t}\n\t\t}\n        String newState = (String)parameters.get(C_NEWS_PARAM_STATE);\n\t\t\n        // load the template file of the news admin screen\n        CmsXmlWpTemplateFile xmlTemplateDocument = (CmsXmlWpTemplateFile)getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\n        // Only go on, if the \"edit\" action was requested\n        if(\"edit\".equals(action)) {                \n            // Calendar object used to get the actual date\n            GregorianCalendar cal = new GregorianCalendar();\n        \n            if(newHeadline == null && newShorttext == null && newText == null && newExternalLink == null) {\n                if(file != null && ! \"\".equals(file)) {\n                    // the user wants to edit an old article\n                    CmsNewsContentFile newsFile = getNewsContentFile(cms, cms.readFile(file));\n                    \n                    A_CmsResource newsContentFileObject = cms.readFileHeader(newsFile.getAbsoluteFilename());\n                    if (!newsContentFileObject.isLocked()) {\n                        cms.lockResource(newsFile.getAbsoluteFilename());\n                    }\n                                    \n                    parameters.put(C_NEWS_PARAM_DATE, Utils.getNiceShortDate(newsFile.getNewsDate()));\n                    parameters.put(C_NEWS_PARAM_HEADLINE, newsFile.getNewsHeadline());\n                    parameters.put(C_NEWS_PARAM_SHORTTEXT, newsFile.getNewsShortText());\n                    parameters.put(C_NEWS_PARAM_TEXT, newsFile.getNewsText(\"\\n\\n\"));\n                    parameters.put(C_NEWS_PARAM_EXTLINK, newsFile.getNewsExternalLink());\n                    parameters.put(C_NEWS_PARAM_STATE, new Boolean(newsFile.isNewsActive()));\n                    xmlTemplateDocument.setData(C_NEWS_PARAM_AUTHOR, newsFile.getNewsAuthor());\n                    session.putValue(C_NEWS_PARAM_AUTHOR, newsFile.getNewsAuthor());\n                } else {\n                    // the user requested a new article\n\n                    // Get the currently logged in user\n                    A_CmsUser author = cms.getRequestContext().currentUser();        \n        \n                    // Get the String for the author\n                    String authorText = null;\n                    String initials =  getInitials(author);                               \n                    String firstName = author.getFirstname();\n                    String lastName = author.getLastname();\n                    if((firstName == null || \"\".equals(firstName)) && (lastName == null || \"\".equals(lastName))) {\n                        authorText = initials;\n                    } else {            \n                        authorText = firstName + \" \" + lastName;\n                        authorText = authorText.trim();\n                        authorText = authorText + \" (\" + initials + \")\";\n                    }\n                    session.putValue(C_NEWS_PARAM_AUTHOR, authorText);\n                    xmlTemplateDocument.setData(C_NEWS_PARAM_AUTHOR, authorText);\n                    \n                    // Get the Sting for the actual date\n                    String dateText = Utils.getNiceShortDate(cal.getTime().getTime());\n                    parameters.put(C_NEWS_PARAM_DATE, dateText);\n                }\n            } else {\n                // this is the POST result of an user input\n                \n                CmsXmlTemplateFile newsIni = new CmsXmlTemplateFile(cms, C_NEWS_INI);                \n                CmsNewsContentFile newsContentFile = null;                 \n                \n                if(file == null || \"\".equals(file)) {\n                    // we have to create a new new file\n                                    \n                    // Get the currently logged in user\n                    A_CmsUser author = cms.getRequestContext().currentUser();        \n        \n                    // Build the new article filename\n                    String dateFileText = getDateFileText(cal);        \n                    String newsNumber = getNewArticleNumber(cms, dateFileText);\n                    String initials =  getInitials(author);               \n                    String newsFileName = dateFileText + \"-\" + newsNumber + \"-\" + initials.toLowerCase();\n                    parameters.put(C_NEWS_PARAM_FILE, newsFileName);\n                    \n                    // create files\n                    newsContentFile = createNewsFile(cms, newsFileName);                    \n                    createPageFile(cms, newsFileName, newsIni.getDataValue(\"mastertemplate\"));\n\n                    // check the date parameter\n                    if(newDate == null || \"\".equals(newDate)) {\n                        newDate = Utils.getNiceShortDate(cal.getTime().getTime());\n                    }\n                    \n                    // Try creating the task\n                    try {\n                        makeTask(cms, newsFileName, newsIni.getDataValue(\"newstask.agent\"), newsIni.getDataValue(\"newstask.role\"));\n                    } catch(Exception e) {\n                        if(A_OpenCms.isLogging()) {\n                            A_OpenCms.log(C_OPENCMS_CRITICAL, getClassName() + \"Cannot create news task for news article \" + newsFileName + \". \");\n                            A_OpenCms.log(C_OPENCMS_CRITICAL, getClassName() + e.getMessage());\n                        }\n                    }                    \n                } else {\n                    newsContentFile = getNewsContentFile(cms, cms.readFile(file));                \n                    // Touch the page file. This will mark it a \"changed\".\n                    cms.writeFileHeader((CmsFile)cms.readFileHeader(C_NEWS_FOLDER_PAGE + newsContentFile.getFilename() + \"/index.html\"));\n                }\n                \n                // Set news content and unlock resource\n                setNewsFileContent(newsContentFile, (String)session.getValue(C_NEWS_PARAM_AUTHOR), newDate, newHeadline, newShorttext, newText, newExternalLink, newState);\n                cms.unlockResource(newsContentFile.getAbsoluteFilename());                                                                             \n                \n                // Session parameters are not needed any more...\n                session.removeValue(C_NEWS_PARAM_FILE);\n                session.removeValue(C_NEWS_PARAM_ACTION);\n                session.removeValue(C_NEWS_PARAM_AUTHOR);\n                templateSelector = C_NEWS_DONE;                \n\t\t    }\n        }\n        \n        \n        // check if the new resource button must be enabeld.\n        // this is only done if the project is not the online project.\n        if(xmlTemplateDocument.hasData(C_NEW_DISABLED) && xmlTemplateDocument.hasData(C_NEW_ENABLED)) {\n            if (cms.getRequestContext().currentProject().equals(cms.onlineProject()) || !checkWriteAccess(cms)) {\n                xmlTemplateDocument.setData(C_NEW,xmlTemplateDocument.getProcessedDataValue(C_NEW_DISABLED,this));                \n            } else {\n                xmlTemplateDocument.setData(C_NEW,xmlTemplateDocument.getProcessedDataValue(C_NEW_ENABLED,this));       \n            }\n        }\n        \n        // Finally start the processing\n\t\treturn startProcessing(cms, xmlTemplateDocument, elementName, parameters, templateSelector);\n    }","id":100943,"modified_method":"/**\n     * Gets the content of a defined section in a given template file and its subtemplates\n     * with the given parameters. \n     * \n     * @see getContent(A_CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n     * @param cms A_CmsObject Object for accessing system resources.\n     * @param templateFile Filename of the template file.\n     * @param elementName Element name of this template in our parent template.\n     * @param parameters Hashtable with all template class parameters.\n     * @param templateSelector template section that should be processed.\n     */\n    public byte[] getContent(A_CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n        \n        HttpServletRequest orgReq = (HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest();    \n        HttpSession session = orgReq.getSession(true);\n        \n\t\t// read all parameters\n        String file = (String)parameters.get(C_NEWS_PARAM_FILE);\n        if(file == null) {\n            file = (String)session.getValue(C_NEWS_PARAM_FILE);\n        } else {\n            session.putValue(C_NEWS_PARAM_FILE, file);\n        }\n\n        String action = (String)parameters.get(C_NEWS_PARAM_ACTION);\n        if(action == null) {\n            action = (String)session.getValue(C_NEWS_PARAM_ACTION);\n        } else {\n            session.putValue(C_NEWS_PARAM_ACTION, action);\n        }        \n        \n        String newDate = (String)parameters.get(C_NEWS_PARAM_DATE);\n        String newHeadline = (String)parameters.get(C_NEWS_PARAM_HEADLINE);\n        String newShorttext = (String)parameters.get(C_NEWS_PARAM_SHORTTEXT);\n        String newText = (String)parameters.get(C_NEWS_PARAM_TEXT);\n        String newExternalLink = (String)parameters.get(C_NEWS_PARAM_EXTLINK);\n        String newState = (String)parameters.get(C_NEWS_PARAM_STATE);\n\t\t\n        // load the template file of the news admin screen\n        CmsXmlWpTemplateFile xmlTemplateDocument = (CmsXmlWpTemplateFile)getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\n        // Only go on, if the \"edit\" action was requested\n        if(\"edit\".equals(action)) {                \n            // Calendar object used to get the actual date\n            GregorianCalendar cal = new GregorianCalendar();\n        \n            if(newHeadline == null && newShorttext == null && newText == null && newExternalLink == null) {\n                if(file != null && ! \"\".equals(file)) {\n                    // the user wants to edit an old article\n                    CmsNewsContentFile newsFile = getNewsContentFile(cms, cms.readFile(file));\n                    \n                    A_CmsResource newsContentFileObject = cms.readFileHeader(newsFile.getAbsoluteFilename());\n                    if (!newsContentFileObject.isLocked()) {\n                        cms.lockResource(newsFile.getAbsoluteFilename());\n                    }\n                                    \n                    parameters.put(C_NEWS_PARAM_DATE, Utils.getNiceShortDate(newsFile.getNewsDate()));\n                    parameters.put(C_NEWS_PARAM_HEADLINE, newsFile.getNewsHeadline());\n                    parameters.put(C_NEWS_PARAM_SHORTTEXT, newsFile.getNewsShortText());\n                    parameters.put(C_NEWS_PARAM_TEXT, newsFile.getNewsText(\"\\n\\n\"));\n                    parameters.put(C_NEWS_PARAM_EXTLINK, newsFile.getNewsExternalLink());\n                    parameters.put(C_NEWS_PARAM_STATE, new Boolean(newsFile.isNewsActive()));\n                    xmlTemplateDocument.setData(C_NEWS_PARAM_AUTHOR, newsFile.getNewsAuthor());\n                    session.putValue(C_NEWS_PARAM_AUTHOR, newsFile.getNewsAuthor());\n                } else {\n                    // the user requested a new article\n\n                    // Get the currently logged in user\n                    A_CmsUser author = cms.getRequestContext().currentUser();        \n        \n                    // Get the String for the author\n                    String authorText = null;\n                    String initials =  getInitials(author);                               \n                    String firstName = author.getFirstname();\n                    String lastName = author.getLastname();\n                    if((firstName == null || \"\".equals(firstName)) && (lastName == null || \"\".equals(lastName))) {\n                        authorText = initials;\n                    } else {            \n                        authorText = firstName + \" \" + lastName;\n                        authorText = authorText.trim();\n                        authorText = authorText + \" (\" + initials + \")\";\n                    }\n                    session.putValue(C_NEWS_PARAM_AUTHOR, authorText);\n                    xmlTemplateDocument.setData(C_NEWS_PARAM_AUTHOR, authorText);\n                    \n                    // Get the Sting for the actual date\n                    String dateText = Utils.getNiceShortDate(cal.getTime().getTime());\n                    parameters.put(C_NEWS_PARAM_DATE, dateText);\n                }\n            } else {\n                // this is the POST result of an user input\n                \n                CmsXmlTemplateFile newsIni = new CmsXmlTemplateFile(cms, C_NEWS_INI);                \n                CmsNewsContentFile newsContentFile = null;                 \n                \n                if(file == null || \"\".equals(file)) {\n                    // we have to create a new new file\n                                    \n                    // Get the currently logged in user\n                    A_CmsUser author = cms.getRequestContext().currentUser();        \n        \n                    // Build the new article filename\n                    String dateFileText = getDateFileText(cal);        \n                    String newsNumber = getNewArticleNumber(cms, dateFileText);\n                    String initials =  getInitials(author);               \n                    String newsFileName = dateFileText + \"-\" + newsNumber + \"-\" + initials.toLowerCase();\n                    parameters.put(C_NEWS_PARAM_FILE, newsFileName);\n                    \n                    // create files\n                    newsContentFile = createNewsFile(cms, newsFileName);                    \n                    createPageFile(cms, newsFileName, newsIni.getDataValue(\"mastertemplate\"));\n\n                    // check the date parameter\n                    if(newDate == null || \"\".equals(newDate)) {\n                        newDate = Utils.getNiceShortDate(cal.getTime().getTime());\n                    }\n                    \n                    // Try creating the task\n                    try {\n                        makeTask(cms, newsFileName, newsIni.getDataValue(\"newstask.agent\"), newsIni.getDataValue(\"newstask.role\"));\n                    } catch(Exception e) {\n                        if(A_OpenCms.isLogging()) {\n                            A_OpenCms.log(C_OPENCMS_CRITICAL, getClassName() + \"Cannot create news task for news article \" + newsFileName + \". \");\n                            A_OpenCms.log(C_OPENCMS_CRITICAL, getClassName() + e.getMessage());\n                        }\n                    }                    \n                } else {\n                    newsContentFile = getNewsContentFile(cms, cms.readFile(file));                \n                    // Touch the page file. This will mark it a \"changed\".\n                    cms.writeFileHeader((CmsFile)cms.readFileHeader(C_NEWS_FOLDER_PAGE + newsContentFile.getFilename() + \"/index.html\"));\n                }\n                \n                // Set news content and unlock resource\n                setNewsFileContent(newsContentFile, (String)session.getValue(C_NEWS_PARAM_AUTHOR), newDate, newHeadline, newShorttext, newText, newExternalLink, newState);\n                cms.unlockResource(newsContentFile.getAbsoluteFilename());                                                                             \n                \n                // Session parameters are not needed any more...\n                session.removeValue(C_NEWS_PARAM_FILE);\n                session.removeValue(C_NEWS_PARAM_ACTION);\n                session.removeValue(C_NEWS_PARAM_AUTHOR);\n                templateSelector = C_NEWS_DONE;                \n\t\t    }\n        }\n        \n        \n        // check if the new resource button must be enabeld.\n        // this is only done if the project is not the online project.\n        if(xmlTemplateDocument.hasData(C_NEW_DISABLED) && xmlTemplateDocument.hasData(C_NEW_ENABLED)) {\n            if (cms.getRequestContext().currentProject().equals(cms.onlineProject()) || !checkWriteAccess(cms)) {\n                xmlTemplateDocument.setData(C_NEW,xmlTemplateDocument.getProcessedDataValue(C_NEW_DISABLED,this));                \n            } else {\n                xmlTemplateDocument.setData(C_NEW,xmlTemplateDocument.getProcessedDataValue(C_NEW_ENABLED,this));       \n            }\n        }\n        \n        // Finally start the processing\n\t\treturn startProcessing(cms, xmlTemplateDocument, elementName, parameters, templateSelector);\n    }","commit_id":"e50c675e5e4ebef5c0f31cb6f06fd1aac39f98bd","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Gets the external link.\n     * @return external link..\n     */\n    public String getNewsExternalLink() throws CmsException {\n        return getDataValue(C_NEWS_XML_EXTLINK);\n    }","id":100944,"modified_method":"/**\n     * Gets the external link.\n     * @return external link..\n     */\n    public String getNewsExternalLink() throws CmsException {\n\t\tString parValue = getDataValue(C_NEWS_XML_EXTLINK);\n\t\t//no URL is specified \n\t\tif (parValue != null && !\"\".equals(parValue)) {\n\t\t\tif (parValue.equals(C_URL_PROTOCOL)) {\n\t\t\t\tparValue = \"\";\n\t\t\t}\n\t\t}\n        return parValue;\n    }","commit_id":"e50c675e5e4ebef5c0f31cb6f06fd1aac39f98bd","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Gets the URL where common template pics reside.\n     * @return Path for the \"pics\" mountpoint.\n     * @exception CmsException if the corresponding XML tag doesn't exist in the workplace definition file.\n     */\n    public String getCommonPictureUrl() throws CmsException {\n        return getDataValue(\"path.commonpicsurl\");\n    }","id":100945,"modified_method":"/**\n     * Gets the URL where common template pics reside.\n     * If the path is empty, the workplace picture path prfeixed\n     * by the servlet path will be returned\n     * @return Path for the \"pics\" mountpoint.\n     * @exception CmsException if the corresponding XML tag doesn't exist in the workplace definition file.\n     */\n    public String getCommonPictureUrl() throws CmsException {\n        String s = getDataValue(\"path.commonpicsurl\");\n        if(s == null || \"\".equals(s)) {\n            s = ((HttpServletRequest)m_cms.getRequestContext().getRequest().getOriginalRequest()).getServletPath() + getDataValue(\"path.commonpictures\");\n        }\n        return s;\n    }","commit_id":"29c19016c7c6f6efc44957fb492e9b5a2cdc9123","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Gets the URL where workplace pisc reside.\n     * @return Path for the \"pics\" mountpoint.\n     * @exception CmsException if the corresponding XML tag doesn't exist in the workplace definition file.\n     */\n    public String getWpPictureUrl() throws CmsException {\n        return getDataValue(\"path.wppicsurl\");\n    }","id":100946,"modified_method":"/**\n     * Gets the URL where workplace pisc reside.\n     * If the path is empty, the workplace picture path prfeixed\n     * by the servlet path will be returned\n     * @return Path for the \"pics\" mountpoint.\n     * @exception CmsException if the corresponding XML tag doesn't exist in the workplace definition file.\n     */\n    public String getWpPictureUrl() throws CmsException {\n        String s = getDataValue(\"path.wppicsurl\");\n        if(s == null || \"\".equals(s)) {\n            s = ((HttpServletRequest)m_cms.getRequestContext().getRequest().getOriginalRequest()).getServletPath() + getDataValue(\"path.wppictures\");\n        }\n        return s;\n        \n    }","commit_id":"29c19016c7c6f6efc44957fb492e9b5a2cdc9123","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/** Returns the encoded src ({@link #getSrc}).\n\t */\n\tprivate String getEncodedSrc() {\n\t\treturn _media != null ? getMediaSrc(): //already encoded\n\t\t\tgetDesktop().getExecution().encodeURL(\n\t\t\t\t_src != null ? _src: \"~./img/spacer.gif\");\n\t}","id":100947,"modified_method":"/** Returns the encoded src ({@link #getSrc}).\n\t */\n\tprivate String getEncodedSrc() {\n\t\tfinal Desktop dt = getDesktop();\n\t\treturn _media != null ? getMediaSrc(): //already encoded\n\t\t\tdt != null ? dt.getExecution().encodeURL(\n\t\t\t\t_src != null ? _src: \"~./img/spacer.gif\"):  \"\";\n\t}","commit_id":"57d322d0a0994e3405fccda1ab17f1cb15647157","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the encoded src ({@link #getSrc}).\n\t */\n\tprivate String getEncodedSrc() {\n\t\treturn _image != null ? getContentSrc(): //already encoded\n\t\t\tgetDesktop().getExecution().encodeURL(\n\t\t\t\t_src != null ? _src: \"~./img/spacer.gif\");\n\t}","id":100948,"modified_method":"/** Returns the encoded src ({@link #getSrc}).\n\t */\n\tprivate String getEncodedSrc() {\n\t\tfinal Desktop dt = getDesktop(); //it might not belong to any desktop\n\t\treturn _image != null ? getContentSrc(): //already encoded\n\t\t\tdt != null ? dt.getExecution().encodeURL(\n\t\t\t\t_src != null ? _src: \"~./img/spacer.gif\"): \"\";\n\t}","commit_id":"57d322d0a0994e3405fccda1ab17f1cb15647157","url":"https://github.com/zkoss/zk"},{"original_method":"private String getEncodedSrc() {\n\t\treturn _audio != null ? getAudioSrc(): //already encoded\n\t\t\tgetDesktop().getExecution().encodeURL(\n\t\t\t\t_src != null ? _src: \"~./aud/mute.mid\");\n\t}","id":100949,"modified_method":"private String getEncodedSrc() {\n\t\tfinal Destkop dt = getDesktop();\n\t\treturn _audio != null ? getAudioSrc(): //already encoded\n\t\t\tdt != null ? dt.getExecution().encodeURL(\n\t\t\t\t_src != null ? _src: \"~./aud/mute.mid\"): \"\";\n\t}","commit_id":"bb32e7d7561773ef5b0cb8fe99d00e62fb2fbe99","url":"https://github.com/zkoss/zk"},{"original_method":"private String getEncodedHref() {\n\t\treturn _href != null ? getDesktop().getExecution().encodeURL(_href): null;\n\t}","id":100950,"modified_method":"private String getEncodedHref() {\n\t\tfinal Desktop dt = getDesktop();\n\t\treturn _href != null && dt != null ? dt.getExecution().encodeURL(_href): null;\n\t\t\t//if desktop is null, it doesn't belong to any execution\n\t}","commit_id":"bb32e7d7561773ef5b0cb8fe99d00e62fb2fbe99","url":"https://github.com/zkoss/zk"},{"original_method":"public WebElement getInputGroupId() {\n        return groupSlugField;\n    }","id":100951,"modified_method":"public String getGroupIdValue() {\n        return groupSlugField.getAttribute(\"value\");\n    }","commit_id":"bc758c71a7ebd7f12214922d7cad2d0b8365305e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n    @Ignore(\"rhbz1034551\")\n    public void groupIDFieldSize() {\n        String errorMsg = \"value must be shorter than or equal to 40 characters\";\n        String groupID = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmno\";\n        String groupName = \"verifyIDFieldSizeName\";\n\n        CreateVersionGroupPage groupPage =\n                dashboardPage.goToGroups().createNewGroup();\n        groupPage.inputGroupId(groupID).inputGroupName(groupName)\n                .saveGroupFailure();\n        assertThat(\"Invalid length error is shown\",\n                groupPage.getFieldValidationErrors(),\n                Matchers.contains(errorMsg));\n\n        groupPage.clearFields();\n        groupID = groupID.substring(0, 40);\n        assertThat(\"GroupID is now 40 characters long\", groupID.length(),\n                Matchers.equalTo(40));\n        groupPage.inputGroupId(groupID).inputGroupName(groupName);\n        VersionGroupsPage versionGroupsPage = groupPage.saveGroup();\n        assertThat(\"A group ID of 40 chars is valid\",\n                versionGroupsPage.getGroupNames(), Matchers.hasItem(groupName));\n    }","id":100952,"modified_method":"@Test\n    public void groupIDFieldSize() {\n        String groupID = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmn\";\n        String groupIDExtra = \"xyz\";\n        String groupName = \"verifyIDFieldSizeName\";\n\n        CreateVersionGroupPage groupPage = dashboardPage\n                .goToGroups()\n                .createNewGroup()\n                .inputGroupId(groupID + groupIDExtra)\n                .inputGroupName(groupName);\n\n        assertThat(\"User cannot enter more than 40 characters\",\n                groupPage.getGroupIdValue(),\n                Matchers.equalTo(groupID));\n    }","commit_id":"bc758c71a7ebd7f12214922d7cad2d0b8365305e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Theory\n    public void inputValidationForID(String inputText) {\n        String errorMsg =\n                \"must start and end with letter or number, and \"\n                        + \"contain only letters, numbers, underscores and hyphens.\";\n\n        // Yes reassign groupPage is necessary since JSF re-renders itself after\n        // each field input and selenium is not happy with it\n        groupPage = groupPage\n                .clearFields()\n                .inputGroupId(inputText)\n                .inputGroupName(inputText)\n                .saveGroupFailure();\n\n        assertThat(\"Validation error is displayed for input:\" + inputText,\n                groupPage.getFieldErrors(), Matchers.hasItem(errorMsg));\n    }","id":100953,"modified_method":"@Theory\n    public void inputValidationForID(String inputText) {\n        String errorMsg =\n                \"must start and end with letter or number, and \"\n                        + \"contain only letters, numbers, underscores and hyphens.\";\n\n        // Yes reassign groupPage is necessary since JSF re-renders itself after\n        // each field input and selenium is not happy with it\n        groupPage = groupPage\n                .clearFields()\n                .inputGroupId(inputText)\n                .inputGroupName(inputText)\n                .saveGroupFailure();\n\n        assertThat(groupPage.getFieldErrors())\n                .contains(errorMsg)\n                .as(\"Validation error is displayed for input:\" + inputText);\n    }","commit_id":"a5c1592b63edd52fc9ef8555cf0f7e31a4df07cd","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void groupDescriptionFieldSize() {\n        String errorMsg = \"value must be shorter than or equal to 100 characters\";\n        String groupID = \"verifyDescriptionFieldSizeID\";\n        String groupName = \"verifyDescriptionFieldSizeName\";\n        String groupDescription =\n                \"This text is to test that the description field takes no more than exactly 100 characters - actually.\";\n\n        assertThat(\"Description length is greater than 100 characters\",\n                groupDescription.length(), Matchers.equalTo(101));\n        CreateVersionGroupPage groupPage =\n                dashboardPage.goToGroups().createNewGroup();\n        groupPage.inputGroupId(groupID).inputGroupName(groupName)\n                .inputGroupDescription(groupDescription);\n        groupPage.saveGroupFailure();\n        assertThat(\"Invalid length error is shown\",\n                groupPage.getFieldValidationErrors(),\n                Matchers.contains(errorMsg));\n\n        groupPage.clearFields();\n        groupDescription = groupDescription.substring(0, 100);\n        assertThat(\"Description length is now 100 characters\",\n                groupDescription.length(), Matchers.equalTo(100));\n        groupPage.inputGroupId(\"verifyDescriptionFieldSizeID\").inputGroupName(\n                groupName);\n        VersionGroupsPage verGroupsPage =\n                groupPage.inputGroupDescription(groupDescription).saveGroup();\n        assertThat(\"A group description of 100 chars is valid\",\n                verGroupsPage.getGroupNames(), Matchers.hasItem(groupName));\n\n    }","id":100954,"modified_method":"@Feature(summary = \"The administrator must enter valid data into the \" +\n            \"required fields to create a group\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 170109)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void groupDescriptionFieldSize() throws Exception {\n        String groupID = \"verifyDescriptionFieldSizeID\";\n        String groupName = \"verifyDescriptionFieldSizeName\";\n        String groupDescription =\"This text is to test that the description \" +\n                \"field takes no more than exactly 100 characters - actually.\";\n\n        assumeTrue(\"Description length is greater than 100 characters\",\n                groupDescription.length() == 101);\n\n        CreateVersionGroupPage groupPage = dashboardPage\n                .goToGroups()\n                .createNewGroup()\n                .inputGroupId(groupID)\n                .inputGroupName(groupName)\n                .inputGroupDescription(groupDescription)\n                .saveGroupFailure();\n\n        assertThat(groupPage.getFieldValidationErrors())\n                .contains(CreateVersionGroupPage.LENGTH_ERROR)\n                .as(\"Invalid length error is shown\");\n\n        groupDescription = groupDescription.substring(0, 100);\n        VersionGroupsPage verGroupsPage = groupPage\n                .clearFields()\n                .inputGroupId(\"verifyDescriptionFieldSizeID\")\n                .inputGroupName(groupName)\n                .inputGroupDescription(groupDescription)\n                .saveGroup();\n\n        assertThat(verGroupsPage.getGroupNames())\n                .contains(groupName)\n                .as(\"A group description of 100 chars is valid\");\n    }","commit_id":"a5c1592b63edd52fc9ef8555cf0f7e31a4df07cd","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Category(BasicAcceptanceTest.class)\n    public void createABasicGroup() {\n        String groupID = \"basic-group\";\n        String groupName = \"A Basic Group\";\n\n        CreateVersionGroupPage createVersionGroupPage =\n                dashboardPage.goToGroups().createNewGroup();\n        createVersionGroupPage.inputGroupId(groupID);\n        createVersionGroupPage.inputGroupName(groupName);\n        createVersionGroupPage\n                .inputGroupDescription(\"A basic group can be saved\");\n        VersionGroupsPage versionGroupsPage =\n                createVersionGroupPage.saveGroup();\n        assertThat(\"Group was created\", versionGroupsPage.getGroupNames()\n                .contains(groupName));\n        VersionGroupPage groupView = versionGroupsPage.goToGroup(groupName);\n        assertThat(\"The group is displayed\", groupView.getTitle(),\n                Matchers.equalTo(\"Groups - \".concat(groupName)));\n    }","id":100955,"modified_method":"@Feature(summary = \"The administrator can create a basic group\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 170109)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    @Category(BasicAcceptanceTest.class)\n    public void createABasicGroup() throws Exception {\n        String groupID = \"basic-group\";\n        String groupName = \"A Basic Group\";\n        VersionGroupsPage versionGroupsPage = dashboardPage\n                .goToGroups()\n                .createNewGroup()\n                .inputGroupId(groupID)\n                .inputGroupName(groupName)\n                .inputGroupDescription(\"A basic group can be saved\")\n                .saveGroup();\n        assertThat(versionGroupsPage.getGroupNames())\n                .contains(groupName)\n                .as(\"The version group was created\");\n        VersionGroupPage groupView = versionGroupsPage.goToGroup(groupName);\n        assertThat(groupView.getTitle())\n                .isEqualTo(\"Groups - \".concat(groupName))\n                .as(\"The group is displayed\");\n    }","commit_id":"a5c1592b63edd52fc9ef8555cf0f7e31a4df07cd","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void addANewProjectVersionToAnEmptyGroup()\n        throws InterruptedException {\n        String groupID = \"add-version-to-empty-group\";\n        String groupName = \"AddVersionToEmptyGroup\";\n        VersionGroupPage versionGroupPage = dashboardPage\n                .goToGroups()\n                .createNewGroup()\n                .inputGroupId(groupID)\n                .inputGroupName(groupName)\n                .saveGroup()\n                .goToGroup(groupName)\n                .clickProjectsTab()\n                .clickAddProjectVersionsButton();\n\n        versionGroupPage = versionGroupPage\n                .enterProjectVersion(\"about-fedora\")\n                .selectProjectVersion(\"about-fedora master\")\n                .clickProjectsTab();\n\n        assertThat(\"The version group shows in the list\",\n                versionGroupPage.getProjectVersionsInGroup(),\n                Matchers.hasItem(\"about fedora\\nmaster\"));\n\n    }","id":100956,"modified_method":"@Feature(summary = \"The administrator can add a project version to \" +\n            \"a newly created group\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 170109)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void addANewProjectVersionToAnEmptyGroup() throws Exception {\n        String groupID = \"add-version-to-empty-group\";\n        String groupName = \"AddVersionToEmptyGroup\";\n        VersionGroupPage versionGroupPage = dashboardPage\n                .goToGroups()\n                .createNewGroup()\n                .inputGroupId(groupID)\n                .inputGroupName(groupName)\n                .saveGroup()\n                .goToGroup(groupName)\n                .clickProjectsTab()\n                .clickAddProjectVersionsButton()\n                .enterProjectVersion(\"about-fedora\")\n                .selectProjectVersion(\"about-fedora master\")\n                .clickProjectsTab();\n\n        assertThat(versionGroupPage.getProjectVersionsInGroup())\n                .contains(\"about fedora\\nmaster\")\n                .as(\"The version group shows in the list\");\n    }","commit_id":"a5c1592b63edd52fc9ef8555cf0f7e31a4df07cd","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void requiredFields() {\n        String errorMsg = \"value is required\";\n        String groupID = \"verifyRequiredFieldsGroupID\";\n        String groupName = \"verifyRequiredFieldsGroupName\";\n\n        CreateVersionGroupPage groupPage =\n                dashboardPage.goToGroups().createNewGroup().saveGroupFailure();\n        assertThat(\"The two errors are value is required\",\n                groupPage.getFieldValidationErrors(), Matchers.contains(errorMsg, errorMsg));\n\n        groupPage =\n                groupPage.clearFields().inputGroupName(groupName)\n                        .saveGroupFailure();\n        assertThat(\"The value required error shown\", groupPage.getFieldValidationErrors(),\n                Matchers.contains(errorMsg));\n\n        groupPage =\n                groupPage.clearFields().inputGroupId(groupID)\n                        .saveGroupFailure();\n        assertThat(\"The value required error shown\", groupPage.getFieldValidationErrors(),\n                Matchers.contains(errorMsg));\n    }","id":100957,"modified_method":"@Feature(summary = \"The administrator must fill in the required fields \" +\n            \"to create a group\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 170109)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void requiredFields() throws Exception {\n        String errorMsg = \"value is required\";\n        String groupID = \"verifyRequiredFieldsGroupID\";\n        String groupName = \"verifyRequiredFieldsGroupName\";\n\n        CreateVersionGroupPage groupPage = dashboardPage\n                .goToGroups()\n                .createNewGroup()\n                .saveGroupFailure();\n\n        assertThat(groupPage.getFieldValidationErrors())\n                .contains(errorMsg, errorMsg)\n                .as(\"The two errors are value is required\");\n\n        groupPage = groupPage.clearFields()\n                .inputGroupName(groupName)\n                .saveGroupFailure();\n\n        assertThat(groupPage.getFieldValidationErrors())\n                .contains(errorMsg)\n                .as(\"The value required error shown\");\n\n        groupPage = groupPage.clearFields()\n                .inputGroupId(groupID)\n                .saveGroupFailure();\n\n        assertThat(groupPage.getFieldValidationErrors())\n                .contains(errorMsg)\n                .as(\"The value required error shown\");\n    }","commit_id":"a5c1592b63edd52fc9ef8555cf0f7e31a4df07cd","url":"https://github.com/zanata/zanata-server"},{"original_method":"private int findDoc(DocumentImpl doc) {\n        return Arrays.binarySearch(documentIds, 0, documentCount, doc.getDocId());\n    }","id":100958,"modified_method":"private int findDoc(DocumentImpl doc) {\n        return findDoc(doc.getDocId());\n    }","commit_id":"264a7d197887ac5f41b9132b90cdd7a7a6665f2d","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * The method <code>filterDocuments<\/code>\n     *\n     * @param other an <code>NewArrayNodeSet<\/code> value\n     * @return a <code>NodeSet<\/code> value\n     */\n    public NodeSet filterDocuments(NewArrayNodeSet other) {\n        NewArrayNodeSet result = new NewArrayNodeSet();\n        for (int i = 0; i < other.size; i++) {\n            int idx = Arrays.binarySearch(documentIds, 0, documentCount, other.nodes[i].getDocument().getDocId());\n            if (idx > -1)\n                result.add(other.nodes[i]);\n        }\n        return result;\n    }","id":100959,"modified_method":"/**\n     * The method <code>filterDocuments<\/code>\n     *\n     * @param other an <code>NewArrayNodeSet<\/code> value\n     * @return a <code>NodeSet<\/code> value\n     */\n    public NodeSet filterDocuments(NewArrayNodeSet other) {\n        NewArrayNodeSet result = new NewArrayNodeSet();\n        for (int i = 0; i < other.size; i++) {\n            int idx = findDoc(other.nodes[i].getDocument().getDocId());\n            if (idx > -1)\n                result.add(other.nodes[i]);\n        }\n        return result;\n    }","commit_id":"264a7d197887ac5f41b9132b90cdd7a7a6665f2d","url":"https://github.com/eXist-db/exist"},{"original_method":"private int findDoc(DocumentImpl doc) {\n        return Arrays.binarySearch(documentIds, 0, documentCount, doc.getDocId());\n    }","id":100960,"modified_method":"private int findDoc(DocumentImpl doc) {\n        return findDoc(doc.getDocId());\n    }","commit_id":"73509023ecf3207d958f2e669db5ddd10dc24dd8","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * The method <code>filterDocuments<\/code>\n     *\n     * @param other an <code>NewArrayNodeSet<\/code> value\n     * @return a <code>NodeSet<\/code> value\n     */\n    public NodeSet filterDocuments(NewArrayNodeSet other) {\n        NewArrayNodeSet result = new NewArrayNodeSet();\n        for (int i = 0; i < other.size; i++) {\n            int idx = Arrays.binarySearch(documentIds, 0, documentCount, other.nodes[i].getDocument().getDocId());\n            if (idx > -1)\n                result.add(other.nodes[i]);\n        }\n        return result;\n    }","id":100961,"modified_method":"/**\n     * The method <code>filterDocuments<\/code>\n     *\n     * @param other an <code>NewArrayNodeSet<\/code> value\n     * @return a <code>NodeSet<\/code> value\n     */\n    public NodeSet filterDocuments(NewArrayNodeSet other) {\n        NewArrayNodeSet result = new NewArrayNodeSet();\n        for (int i = 0; i < other.size; i++) {\n            int idx = findDoc(other.nodes[i].getDocument().getDocId());\n            if (idx > -1)\n                result.add(other.nodes[i]);\n        }\n        return result;\n    }","commit_id":"73509023ecf3207d958f2e669db5ddd10dc24dd8","url":"https://github.com/eXist-db/exist"},{"original_method":"public DocumentImpl getDoc(int docId) {\n        sort();\n        int idx = Arrays.binarySearch(documentIds, 0, documentCount, docId);\n        if (idx < 0)\n            return null;\n        return nodes[documentOffsets[idx]].getDocument();\n    }","id":100962,"modified_method":"public DocumentImpl getDoc(int docId) {\n        sort();\n        int idx = findDoc(docId);\n        if (idx < 0)\n            return null;\n        return nodes[documentOffsets[idx]].getDocument();\n    }","commit_id":"73509023ecf3207d958f2e669db5ddd10dc24dd8","url":"https://github.com/eXist-db/exist"},{"original_method":"public boolean contains(int docId) {\n        sort();\n        return Arrays.binarySearch(documentIds, 0, documentCount, docId) > -1;\n    }","id":100963,"modified_method":"public boolean contains(int docId) {\n        sort();\n        return findDoc(docId) > -1;\n    }","commit_id":"73509023ecf3207d958f2e669db5ddd10dc24dd8","url":"https://github.com/eXist-db/exist"},{"original_method":"private static void printNotification(ConsoleViewImpl view, Project project, final Notification notification) {\n    view.print(DateFormat.getTimeInstance(DateFormat.MEDIUM).format(new Date()) + \" \", ConsoleViewContentType.NORMAL_OUTPUT);\n\n    boolean showLink = notification.getListener() != null;\n    String content = notification.getContent();\n    String mainText = notification.getTitle();\n    if (StringUtil.isNotEmpty(content) && !content.startsWith(\"<\")) {\n      if (StringUtil.isNotEmpty(mainText)) {\n        mainText += \": \";\n      }\n      mainText += content;\n    }\n\n    int nlIndex = eolIndex(mainText);\n    if (nlIndex >= 0) {\n      mainText = mainText.substring(0, nlIndex);\n      showLink = true;\n    }\n\n    mainText = mainText.replaceAll(\"<[^>]*>\", \"\");\n\n    final NotificationType type = notification.getType();\n    view.print(mainText, type == NotificationType.ERROR\n                                        ? ConsoleViewContentType.ERROR_OUTPUT\n                                        : type == NotificationType.INFORMATION\n                                          ? ConsoleViewContentType.USER_INPUT\n                                          : ConsoleViewContentType.NORMAL_OUTPUT);\n    if (showLink) {\n      view.print(\" \", ConsoleViewContentType.NORMAL_OUTPUT);\n      view.printHyperlink(\"more\", new HyperlinkInfo() {\n        @Override\n        public void navigate(Project project) {\n          NotificationsManagerImpl.notifyByBalloon(notification, NotificationDisplayType.STICKY_BALLOON, project);\n        }\n      });\n      view.print(\" \", ConsoleViewContentType.NORMAL_OUTPUT);\n    }\n    view.print(\"\\n\", ConsoleViewContentType.NORMAL_OUTPUT);\n\n    ((StatusBarEx)WindowManager.getInstance().getIdeFrame(project).getStatusBar()).setLogMessage(mainText);\n  }","id":100964,"modified_method":"private static void printNotification(ConsoleViewImpl view, Project project, final Notification notification) {\n    view.print(DateFormat.getTimeInstance(DateFormat.MEDIUM).format(new Date()) + \" \", ConsoleViewContentType.NORMAL_OUTPUT);\n\n    boolean showLink = notification.getListener() != null;\n    String content = notification.getContent();\n    String mainText = notification.getTitle();\n    if (StringUtil.isNotEmpty(content) && !content.startsWith(\"<\")) {\n      if (StringUtil.isNotEmpty(mainText)) {\n        mainText += \": \";\n      }\n      mainText += content;\n    }\n\n    int nlIndex = eolIndex(mainText);\n    if (nlIndex >= 0) {\n      mainText = mainText.substring(0, nlIndex);\n      showLink = true;\n    }\n\n    mainText = mainText.replaceAll(\"<[^>]*>\", \"\");\n\n    final NotificationType type = notification.getType();\n    view.print(mainText, type == NotificationType.ERROR\n                                        ? ConsoleViewContentType.ERROR_OUTPUT\n                                        : type == NotificationType.INFORMATION\n                                          ? ConsoleViewContentType.USER_INPUT\n                                          : ConsoleViewContentType.NORMAL_OUTPUT);\n    if (showLink) {\n      view.print(\" \", ConsoleViewContentType.NORMAL_OUTPUT);\n      view.printHyperlink(\"more\", new HyperlinkInfo() {\n        @Override\n        public void navigate(Project project) {\n          NotificationsManagerImpl.notifyByBalloon(notification, NotificationDisplayType.STICKY_BALLOON, project);\n        }\n      });\n      view.print(\" \", ConsoleViewContentType.NORMAL_OUTPUT);\n    }\n    view.print(\"\\n\", ConsoleViewContentType.NORMAL_OUTPUT);\n\n    final IdeFrame frame = WindowManager.getInstance().getIdeFrame(project);\n    if (frame != null) {\n      final StatusBar statusBar = frame.getStatusBar();\n      if (statusBar != null) {\n        ((StatusBarEx)statusBar).setLogMessage(mainText);\n      }\n    }\n  }","commit_id":"9bd7e35085c7f36b7c802e18942ea804d3e8cdcb","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void disposeComponent() {\n    myTimer.stop();\n  }","id":100965,"modified_method":"public void disposeComponent() {\n  }","commit_id":"f215671eb1a4e51848630bf6e9ae8da9f2534595","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void initComponent() {\n    myTimer = new Timer(5000, new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        boolean connected = MPSPlugin.getInstance().isIDEAPresent();\n        myLabel.setIcon(connected ? Icons.CONNECTED : Icons.DISCONNECTED);\n        myLabel.setToolTipText(connected? \"Connected to IDEA\":\"Not connected to IDEA\");\n      }\n    });\n    myTimer.start();\n  }","id":100966,"modified_method":"public void initComponent() {\n  }","commit_id":"f215671eb1a4e51848630bf6e9ae8da9f2534595","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void projectOpened() {\n    getStatusBar().addCustomIndicationComponent(myLabel);\n  }","id":100967,"modified_method":"public void projectOpened() {\n    StatusBar bar = getStatusBar();\n    if (bar != null) {\n      bar.addCustomIndicationComponent(myLabel);\n      myTimer = new Timer(5000, new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          boolean connected = MPSPlugin.getInstance().isIDEAPresent();\n          myLabel.setIcon(connected ? Icons.CONNECTED : Icons.DISCONNECTED);\n          myLabel.setToolTipText(connected ? \"Connected to IDEA\" : \"Not connected to IDEA\");\n        }\n      });\n      myTimer.start();\n    }\n  }","commit_id":"f215671eb1a4e51848630bf6e9ae8da9f2534595","url":"https://github.com/JetBrains/MPS"},{"original_method":"private StatusBar getStatusBar() {\n    return WindowManager.getInstance().getIdeFrame(myProject).getStatusBar();\n  }","id":100968,"modified_method":"@Nullable\n  private StatusBar getStatusBar() {\n    IdeFrame ideFrame = WindowManager.getInstance().getIdeFrame(myProject);\n    if (ideFrame == null) return null;\n    return ideFrame.getStatusBar();\n  }","commit_id":"f215671eb1a4e51848630bf6e9ae8da9f2534595","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void projectClosed() {\n    getStatusBar().removeCustomIndicationComponent(myLabel);\n  }","id":100969,"modified_method":"public void projectClosed() {\n    StatusBar bar = getStatusBar();\n    if (bar != null) {\n      myTimer.stop();\n      bar.removeCustomIndicationComponent(myLabel);\n    }\n  }","commit_id":"f215671eb1a4e51848630bf6e9ae8da9f2534595","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public BalloonHandler showDumbModeNotification(final String message) {\n    if (ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment()) {\n      return new BalloonHandler() {\n        public void hide() {\n        }\n      };\n    }\n\n    StatusBarEx statusBar = (StatusBarEx)WindowManager.getInstance().getIdeFrame(myProject).getStatusBar();\n    HyperlinkListener listener = new HyperlinkListener() {\n      public void hyperlinkUpdate(HyperlinkEvent e) {\n        if (e.getEventType() != HyperlinkEvent.EventType.ACTIVATED) return;\n\n        Messages.showMessageDialog(\"<html>\" +\n                                   ApplicationNamesInfo.getInstance().getFullProductName() +\n                                   \" is now indexing project sources and libraries to enable advanced features <br>\" +\n                                   \"(refactorings, navigation, usage search, code analysis, formatting, etc.)<br>\" +\n                                   \"During this process you can use code editor and VCS integrations,<br>\" +\n                                   \"and adjust IDE and Run Configurations settings.\" +\n                                   \"<\/html>\", \"Don't panic!\", null);\n      }\n    };\n    return statusBar.notifyProgressByBalloon(MessageType.WARNING, message, null, listener);\n  }","id":100970,"modified_method":"@Override\n  public BalloonHandler showDumbModeNotification(final String message) {\n    final BalloonHandler emptyBalloonHandler = new BalloonHandler() {\n      public void hide() {\n      }\n    };\n    if (ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment()) {\n      return emptyBalloonHandler;\n    }\n\n    final IdeFrame ideFrame = WindowManager.getInstance().getIdeFrame(myProject);\n    if (ideFrame == null) {\n      return emptyBalloonHandler;\n    }\n    StatusBarEx statusBar = (StatusBarEx)ideFrame.getStatusBar();\n    HyperlinkListener listener = new HyperlinkListener() {\n      public void hyperlinkUpdate(HyperlinkEvent e) {\n        if (e.getEventType() != HyperlinkEvent.EventType.ACTIVATED) return;\n\n        Messages.showMessageDialog(\"<html>\" +\n                                   ApplicationNamesInfo.getInstance().getFullProductName() +\n                                   \" is now indexing project sources and libraries to enable advanced features <br>\" +\n                                   \"(refactorings, navigation, usage search, code analysis, formatting, etc.)<br>\" +\n                                   \"During this process you can use code editor and VCS integrations,<br>\" +\n                                   \"and adjust IDE and Run Configurations settings.\" +\n                                   \"<\/html>\", \"Don't panic!\", null);\n      }\n    };\n    return statusBar.notifyProgressByBalloon(MessageType.WARNING, message, null, listener);\n  }","commit_id":"a5b2534f514423a8f87c8eb56775bf6bf0eda5ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * This allows us to configure entry point resolvers incrementally\n     *\n     * @param entryPointResolvers Resolvers to add\n     */\n    public void setEntryPointResolvers(Collection entryPointResolvers)\n    {\n        if (null == entryPointResolverSet)\n        {\n            entryPointResolverSet = new DefaultEntryPointResolverSet();\n        }\n        for (Iterator resolvers = entryPointResolvers.iterator(); resolvers.hasNext();)\n        {\n            entryPointResolverSet.addEntryPointResolver((EntryPointResolver) resolvers.next());\n        }\n    }","id":100971,"modified_method":"/**\n     * This allows us to configure entry point resolvers incrementally\n     *\n     * @param entryPointResolvers Resolvers to add\n     */\n    public void setEntryPointResolvers(Collection<EntryPointResolver> entryPointResolvers)\n    {\n        if (null == entryPointResolverSet)\n        {\n            entryPointResolverSet = new DefaultEntryPointResolverSet();\n        }\n        \n        for (EntryPointResolver resolver : entryPointResolvers)\n        {\n            entryPointResolverSet.addEntryPointResolver(resolver);\n        }\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"public InterceptorStack(List interceptors)\n    {\n        this.interceptors = interceptors;\n    }","id":100972,"modified_method":"public InterceptorStack(List<Interceptor> interceptors)\n    {\n        this.interceptors = interceptors;\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"public void setInterceptors(List interceptors)\n    {\n        this.interceptors = interceptors;\n    }","id":100973,"modified_method":"public void setInterceptors(List<Interceptor> interceptors)\n    {\n        this.interceptors = interceptors;\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"public void dispose()\n    {\n        for (Iterator it = interceptors.iterator(); it.hasNext();)\n        {\n            Interceptor interceptor = (Interceptor) it.next();\n            if (interceptor instanceof Disposable)\n            {\n                ((Disposable) interceptor).dispose();\n            }\n        }\n    }","id":100974,"modified_method":"public void dispose()\n    {\n        for (Interceptor interceptor : interceptors)\n        {\n            if (interceptor instanceof Disposable)\n            {\n                ((Disposable) interceptor).dispose();\n            }\n        }\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object evaluate(String expression, MuleMessage message)\n    {\n        boolean required;\n\n        Map<String, DataHandler> result;\n        //Enable wildcard matching\n        if (expression.contains(ALL_ARGUMENT))\n        {\n            WildcardFilter filter = new WildcardFilter(expression);\n            result = new HashMap<String, DataHandler>(message.getAttachmentNames().size());\n            for (Iterator iterator = message.getAttachmentNames().iterator(); iterator.hasNext();)\n            {\n                String name = (String) iterator.next();\n                if(filter.accept(name))\n                {\n                    result.put(name, message.getAttachment(name));\n                }\n            }\n        }\n        else\n        {\n            StringTokenizer tokenizer = new StringTokenizer(expression, DELIM);\n            result = new HashMap<String, DataHandler>(tokenizer.countTokens());\n            while (tokenizer.hasMoreTokens())\n            {\n                String s = tokenizer.nextToken();\n                s = s.trim();\n                if (s.endsWith(OPTIONAL_ARGUMENT))\n                {\n                    s = s.substring(0, s.length() - OPTIONAL_ARGUMENT.length());\n                    required = false;\n                }\n                else\n                {\n                    required = true;\n                }\n                DataHandler val = message.getAttachment(s);\n                if (val != null)\n                {\n                    result.put(s, val);\n                }\n                else if (required)\n                {\n                    throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull(NAME, expression));\n                }\n            }\n        }\n        if (result.size() == 0)\n        {\n            return Collections.unmodifiableMap(Collections.<String, DataHandler>emptyMap());\n        }\n        else\n        {\n            return Collections.unmodifiableMap(result);\n        }\n    }","id":100975,"modified_method":"public Object evaluate(String expression, MuleMessage message)\n    {\n        boolean required;\n\n        Map<String, DataHandler> result;\n        //Enable wildcard matching\n        if (expression.contains(ALL_ARGUMENT))\n        {\n            WildcardFilter filter = new WildcardFilter(expression);\n            result = new HashMap<String, DataHandler>(message.getAttachmentNames().size());\n            for (String name : message.getAttachmentNames())\n            {\n                if (filter.accept(name))\n                {\n                    result.put(name, message.getAttachment(name));\n                }\n            }\n        }\n        else\n        {\n            StringTokenizer tokenizer = new StringTokenizer(expression, DELIM);\n            result = new HashMap<String, DataHandler>(tokenizer.countTokens());\n            while (tokenizer.hasMoreTokens())\n            {\n                String s = tokenizer.nextToken();\n                s = s.trim();\n                if (s.endsWith(OPTIONAL_ARGUMENT))\n                {\n                    s = s.substring(0, s.length() - OPTIONAL_ARGUMENT.length());\n                    required = false;\n                }\n                else\n                {\n                    required = true;\n                }\n                DataHandler val = message.getAttachment(s);\n                if (val != null)\n                {\n                    result.put(s, val);\n                }\n                else if (required)\n                {\n                    throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull(NAME, expression));\n                }\n            }\n        }\n        if (result.size() == 0)\n        {\n            return Collections.unmodifiableMap(Collections.<String, DataHandler>emptyMap());\n        }\n        else\n        {\n            return Collections.unmodifiableMap(result);\n        }\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object evaluate(String expression, MuleMessage message)\n    {\n        boolean required;\n\n        List<DataHandler> result;\n        //Enable Wildcard matching\n        if (expression.contains(ALL_ARGUMENT))\n        {\n            WildcardFilter filter = new WildcardFilter(expression);\n            result = new ArrayList<DataHandler>(message.getAttachmentNames().size());\n            for (Iterator iterator = message.getAttachmentNames().iterator(); iterator.hasNext();)\n            {\n                String name = (String) iterator.next();\n                if(filter.accept(name))\n                {\n                    result.add(message.getAttachment(name));\n                }\n            }\n        }\n        else\n        {\n            StringTokenizer tokenizer = new StringTokenizer(expression, DELIM);\n            result = new ArrayList<DataHandler>(tokenizer.countTokens());\n            while (tokenizer.hasMoreTokens())\n            {\n                String s = tokenizer.nextToken();\n                s = s.trim();\n                if (s.endsWith(OPTIONAL_ARGUMENT))\n                {\n                    s = s.substring(0, s.length() - OPTIONAL_ARGUMENT.length());\n                    required = false;\n                }\n                else\n                {\n                    required = true;\n                }\n                DataHandler val = message.getAttachment(s);\n                if (val != null)\n                {\n                    result.add(val);\n                }\n                else if (required)\n                {\n                    throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull(NAME, expression));\n                }\n            }\n        }\n        if (result.size() == 0)\n        {\n            return Collections.unmodifiableList(Collections.<DataHandler>emptyList());\n        }\n        else\n        {\n            return Collections.unmodifiableList(result);\n        }\n    }","id":100976,"modified_method":"public Object evaluate(String expression, MuleMessage message)\n    {\n        boolean required;\n\n        List<DataHandler> result;\n        //Enable Wildcard matching\n        if (expression.contains(ALL_ARGUMENT))\n        {\n            WildcardFilter filter = new WildcardFilter(expression);\n            result = new ArrayList<DataHandler>(message.getAttachmentNames().size());\n            for (String name : message.getAttachmentNames())\n            {\n                if (filter.accept(name))\n                {\n                    result.add(message.getAttachment(name));\n                }\n            }\n        }\n        else\n        {\n            StringTokenizer tokenizer = new StringTokenizer(expression, DELIM);\n            result = new ArrayList<DataHandler>(tokenizer.countTokens());\n            while (tokenizer.hasMoreTokens())\n            {\n                String s = tokenizer.nextToken();\n                s = s.trim();\n                if (s.endsWith(OPTIONAL_ARGUMENT))\n                {\n                    s = s.substring(0, s.length() - OPTIONAL_ARGUMENT.length());\n                    required = false;\n                }\n                else\n                {\n                    required = true;\n                }\n                DataHandler val = message.getAttachment(s);\n                if (val != null)\n                {\n                    result.add(val);\n                }\n                else if (required)\n                {\n                    throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull(NAME, expression));\n                }\n            }\n        }\n        if (result.size() == 0)\n        {\n            return Collections.unmodifiableList(Collections.<DataHandler>emptyList());\n        }\n        else\n        {\n            return Collections.unmodifiableList(result);\n        }\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    protected void notifyTransition(String currentPhase)\n    {\n        if(currentPhase.equals(Resumable.PHASE_NAME))\n        {\n            //Revert back to start phase\n            completedPhases.remove(Resumable.PHASE_NAME);\n            completedPhases.remove(Pausable.PHASE_NAME);\n            setCurrentPhase(Startable.PHASE_NAME);\n        }\n    }","id":100977,"modified_method":"@Override\n    protected void notifyTransition(String destinationPhase)\n    {\n        if (destinationPhase.equals(Resumable.PHASE_NAME))\n        {\n            //Revert back to start phase\n            completedPhases.remove(Resumable.PHASE_NAME);\n            completedPhases.remove(Pausable.PHASE_NAME);\n            setCurrentPhase(Startable.PHASE_NAME);\n        }\n    }","commit_id":"9a6e9d11186a5a09de96b31a6ba59669223afc63","url":"https://github.com/mulesoft/mule"},{"original_method":"public String genRoleId(@NotNull SNode node) {\n    if (SNodeOperations.getParent(node) == null) {\n      return null;\n    }\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId roleId = RoleIdsComponent.getNodeRolePointer(node).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(SNodeOperations.getParent(node)), roleId);\n    }\n    SNode linkDecl = SNodeOperations.getContainingLinkDeclaration(node);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","id":100978,"modified_method":"public String genRoleId(@NotNull SNode node) {\n    if (SNodeOperations.getParent(node) == null) {\n      return null;\n    }\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getNodeRolePointer(node));\n    }\n    SNode linkDecl = SNodeOperations.getContainingLinkDeclaration(node);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","commit_id":"c85bbbd05f7fac121ea55345360dde0b8adbbba7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genRoleId(@NotNull SReference ref) {\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId roleId = RoleIdsComponent.getReferenceRolePointer(ref).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(ref.getSourceNode()), roleId);\n    }\n    SNode linkDecl = SLinkOperations.findLinkDeclaration(ref);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","id":100979,"modified_method":"public String genRoleId(@NotNull SReference ref) {\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getReferenceRolePointer(ref));\n    }\n    SNode linkDecl = SLinkOperations.findLinkDeclaration(ref);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","commit_id":"c85bbbd05f7fac121ea55345360dde0b8adbbba7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genTypeId(@NotNull SNode node) {\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId conceptId = RoleIdsComponent.getConceptPointer(node).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(node), conceptId);\n    }\n    SNode concept = SNodeOperations.getConceptDeclaration(node);\n    return ((concept == null) ?\n      null :\n      genReferenceId(concept)\n    );\n  }","id":100980,"modified_method":"public String genTypeId(@NotNull SNode node) {\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getConceptPointer(node));\n    }\n    SNode concept = SNodeOperations.getConceptDeclaration(node);\n    return ((concept == null) ?\n      null :\n      genReferenceId(concept)\n    );\n  }","commit_id":"c85bbbd05f7fac121ea55345360dde0b8adbbba7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genNameId(@NotNull SNode node, @NotNull String prop) {\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId propertyId = RoleIdsComponent.getPropertyNamePointer(node, prop).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(node), propertyId);\n    }\n    SNode propDecl = node.getPropertyDeclaration(prop);\n    return ((propDecl == null) ?\n      null :\n      genReferenceId(propDecl)\n    );\n  }","id":100981,"modified_method":"public String genNameId(@NotNull SNode node, @NotNull String prop) {\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getPropertyNamePointer(node, prop));\n    }\n    SNode propDecl = node.getPropertyDeclaration(prop);\n    return ((propDecl == null) ?\n      null :\n      genReferenceId(propDecl)\n    );\n  }","commit_id":"c85bbbd05f7fac121ea55345360dde0b8adbbba7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genRoleId(@NotNull SReference ref) {\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId roleId = RoleIdsComponent.getReferenceRolePointer(ref).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(ref.getSourceNode()), roleId);\n    }\n    SNode linkDecl = SLinkOperations.findLinkDeclaration(ref);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","id":100982,"modified_method":"public String genRoleId(@NotNull SReference ref) {\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getReferenceRolePointer(ref));\n    }\n    SNode linkDecl = SLinkOperations.findLinkDeclaration(ref);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","commit_id":"d02655bcb454a9b6f220f9a4ead34e61ecd9a430","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genNameId(@NotNull SNode node, @NotNull String prop) {\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId propertyId = RoleIdsComponent.getPropertyNamePointer(node, prop).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(node), propertyId);\n    }\n    SNode propDecl = node.getPropertyDeclaration(prop);\n    return ((propDecl == null) ?\n      null :\n      genReferenceId(propDecl)\n    );\n  }","id":100983,"modified_method":"public String genNameId(@NotNull SNode node, @NotNull String prop) {\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getPropertyNamePointer(node, prop));\n    }\n    SNode propDecl = node.getPropertyDeclaration(prop);\n    return ((propDecl == null) ?\n      null :\n      genReferenceId(propDecl)\n    );\n  }","commit_id":"d02655bcb454a9b6f220f9a4ead34e61ecd9a430","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genRoleId(@NotNull SNode node) {\n    if (SNodeOperations.getParent(node) == null) {\n      return null;\n    }\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId roleId = RoleIdsComponent.getNodeRolePointer(node).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(SNodeOperations.getParent(node)), roleId);\n    }\n    SNode linkDecl = SNodeOperations.getContainingLinkDeclaration(node);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","id":100984,"modified_method":"public String genRoleId(@NotNull SNode node) {\n    if (SNodeOperations.getParent(node) == null) {\n      return null;\n    }\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getNodeRolePointer(node));\n    }\n    SNode linkDecl = SNodeOperations.getContainingLinkDeclaration(node);\n    return ((linkDecl == null) ?\n      null :\n      genReferenceId(linkDecl)\n    );\n  }","commit_id":"d02655bcb454a9b6f220f9a4ead34e61ecd9a430","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String genTypeId(@NotNull SNode node) {\n    if (RoleIdsComponent.isEnabled()) {\n      SNodeId conceptId = RoleIdsComponent.getConceptPointer(node).getNodeId();\n      return genReferenceId(getModelReferenceForConcept(node), conceptId);\n    }\n    SNode concept = SNodeOperations.getConceptDeclaration(node);\n    return ((concept == null) ?\n      null :\n      genReferenceId(concept)\n    );\n  }","id":100985,"modified_method":"public String genTypeId(@NotNull SNode node) {\n    if (RoleIdsComponent.isEnabled()) {\n      return genReferenceId(RoleIdsComponent.getConceptPointer(node));\n    }\n    SNode concept = SNodeOperations.getConceptDeclaration(node);\n    return ((concept == null) ?\n      null :\n      genReferenceId(concept)\n    );\n  }","commit_id":"d02655bcb454a9b6f220f9a4ead34e61ecd9a430","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * @see wicket.Page#checkAccess()\n     */\n    protected boolean checkAccess()\n    {\n        final RequestCycle cycle = getRequestCycle();\n        boolean signedIn = cycle.getSession().getProperty(\"wicket.examples.signin2.user\") != null;\n        if (!signedIn)\n        {\n            cycle.redirectToInterceptPage(SignIn2.class);\n        }\n        return signedIn;\n    }","id":100986,"modified_method":"/**\n     * @see wicket.Page#checkAccess()\n     */\n    protected boolean checkAccess()\n    {\n        final RequestCycle cycle = getRequestCycle();\n        boolean signedIn = cycle.getSession().getProperty(\"wicket.examples.signin2.user\") != null;\n        if (!signedIn)\n        {\n            cycle.redirectToInterceptPage(new SignIn2(null));\n        }\n        return signedIn;\n    }","commit_id":"aec2a0fefd43cf7ae90427185082c606a535dda8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * Resolve the class for the given classname. First try standard java\n     * classes, then groovy files. Groovy file name must be\n     * &lt;classname&gt;.groovy.\n     * \n     * @param classname\n     *            The object's class name\n     * @return The class\n     * @see wicket.IClassResolver#resolveClass(String)\n     */\n    public Class resolveClass(final String classname)\n    {\n        final Class pageClass = defaultClassResolver.resolveClass(classname);\n        if (pageClass != null)\n        {\n            return pageClass;\n        }\n        else\n        {\n            // If definition already loaded, ...\n            Class groovyPageClass = (Class)classCache.get(classname);\n            if (groovyPageClass != null)\n            {\n                return groovyPageClass;\n            }\n\n            // Else, try Groovy.\n            final Resource resource = Resource.locate(classname, \".groovy\");\n            if (resource != null)\n            {\n                try\n                {\n                    // Load the groovy file, get the Class and watch for changes\n                    groovyPageClass = loadGroovyFileAndWatchForChanges(classname, resource);\n                    if (groovyPageClass != null)\n                    {\n                        return groovyPageClass;\n                    }\n                }\n                catch (WicketRuntimeException ex)\n                {\n                    throw new WicketRuntimeException(\n                            \"Unable to load class with name: \" + classname, ex);\n                }\n            }\n            else\n            {\n                throw new WicketRuntimeException(\"File not found: \" + resource);\n            }\n\n            throw new WicketRuntimeException(\"Unable to load class with name: \" + classname);\n        }\n    }","id":100987,"modified_method":"/**\n     * Resolve the class for the given classname. First try standard java\n     * classes, then groovy files. Groovy file name must be\n     * &lt;classname&gt;.groovy.\n     * \n     * @param classname\n     *            The object's class name\n     * @return The class\n     * @see wicket.IClassResolver#resolveClass(String)\n     */\n    public Class resolveClass(final String classname)\n    {\n        try\n        {\n        \treturn defaultClassResolver.resolveClass(classname);\n        }\n        catch (WicketRuntimeException ex)\n        {\n            ; // default resolver failed. Try the groovy specific loader next\n        }\n\n        // If definition already loaded, ...\n        Class groovyPageClass = (Class)classCache.get(classname);\n        if (groovyPageClass != null)\n        {\n            return groovyPageClass;\n        }\n\n        // Else, try Groovy.\n        final Resource resource = Resource.locate(classname, \".groovy\");\n        if (resource != null)\n        {\n            try\n            {\n                // Load the groovy file, get the Class and watch for changes\n                groovyPageClass = loadGroovyFileAndWatchForChanges(classname, resource);\n                if (groovyPageClass != null)\n                {\n                    return groovyPageClass;\n                }\n            }\n            catch (WicketRuntimeException ex)\n            {\n                throw new WicketRuntimeException(\n                        \"Unable to load class with name: \" + classname, ex);\n            }\n        }\n        else\n        {\n            throw new WicketRuntimeException(\"File not found: \" + resource);\n        }\n\n        throw new WicketRuntimeException(\"Unable to load class with name: \" + classname);\n    }","commit_id":"aec2a0fefd43cf7ae90427185082c606a535dda8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * THIS IS NOT PART IF WICKET'S PUBLIC API. IT IS ONLY MEANT TO BE USED\n     * BY SPRING TO SET DEFAULT VALUES FOR THE SETTINGS. \n     * \n     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n     */\n    public void afterPropertiesSet()\n    {\n        // Provide some default, if not explicitly set through Springs\n        // web application context\n        if (getSettings() == null)\n        {\n            setSettings(new ApplicationSettings(this));\n        }\n        \n        initSettings();\n    }","id":100988,"modified_method":"/**\n     * THIS IS NOT PART IF WICKET'S PUBLIC API. IT IS ONLY MEANT TO BE USED\n     * BY SPRING TO SET DEFAULT VALUES FOR THE SETTINGS. \n     * \n     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n     */\n    public void afterPropertiesSet()\n    {\n        // Provide some default, if not explicitly set through Springs\n        // web application context\n        if (getSettings() == null)\n        {\n            setSettings(new ApplicationSettings(this));\n        }\n\n        if (getPages() == null)\n        {\n            setPages(new ApplicationPages());\n        }\n\n        initSettings();\n    }","commit_id":"aec2a0fefd43cf7ae90427185082c606a535dda8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * THIS IS NOT PART IF WICKET'S PUBLIC API. IT IS ONLY MEANT TO BE USED\n     * BY SPRING TO SET DEFAULT VALUES FOR THE SETTINGS. \n     * \n     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n     */\n    public void afterPropertiesSet()\n    {\n        // Provide some default, if not explicitly set through Springs\n        // web application context\n        if (getSettings() == null)\n        {\n            setSettings(new ApplicationSettings(this));\n        }\n        \n        initSettings();\n    }","id":100989,"modified_method":"/**\n     * THIS IS NOT PART IF WICKET'S PUBLIC API. IT IS ONLY MEANT TO BE USED\n     * BY SPRING TO SET DEFAULT VALUES FOR THE SETTINGS. \n     * \n     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n     */\n    public void afterPropertiesSet()\n    {\n        // Provide some default, if not explicitly set through Springs\n        // web application context\n        if (getSettings() == null)\n        {\n            setSettings(new ApplicationSettings(this));\n        }\n\n        if (getPages() == null)\n        {\n            setPages(new ApplicationPages());\n        }\n        \n        initSettings();\n    }","commit_id":"aec2a0fefd43cf7ae90427185082c606a535dda8","url":"https://github.com/apache/wicket"},{"original_method":"public void setCamelContext(CamelContext camelContext) {\n        this.camelContext = camelContext;\n    }","id":100990,"modified_method":"public void setCamelContext(CamelContext camelContext) {\n        this.camelContext = camelContext;\n\n        // configure pretty print\n        String property = camelContext.getProperty(PRETTY_PRINT);\n        if (property != null) {\n            if (property.equalsIgnoreCase(\"false\")) {\n                setPrettyPrint(false);\n            } else {\n                setPrettyPrint(true);\n            }\n        }\n    }","commit_id":"a3d22b3e8922e7ae8fd4a0d835468f72bdf1ef56","url":"https://github.com/apache/camel"},{"original_method":"public <T> T convertTo(Class<T> type, Exchange exchange, Object value) {\n        if (BeanInvocation.class.isAssignableFrom(type) || Processor.class.isAssignableFrom(type)) {\n            // JAXB cannot convert to a BeanInvocation / Processor, so we need to indicate this\n            // to avoid Camel trying to do this when using beans with JAXB payloads\n            return null;\n        }\n\n        try {\n            if (isJaxbType(type)) {\n                return unmarshall(type, exchange, value);\n            }\n            if (value != null) {\n                if (isJaxbType(value.getClass()) && isNotStreamCacheType(type)) {\n                    return marshall(type, exchange, value);\n                }\n            }\n        } catch (Exception e) {\n            throw new TypeConversionException(value, type, e);\n        }\n\n        // should return null if didn't even try to convert at all or for whatever reason the conversion is failed\n        return null;\n    }","id":100991,"modified_method":"public <T> T convertTo(Class<T> type, Exchange exchange, Object value) {\n        if (BeanInvocation.class.isAssignableFrom(type) || Processor.class.isAssignableFrom(type)) {\n            // JAXB cannot convert to a BeanInvocation / Processor, so we need to indicate this\n            // to avoid Camel trying to do this when using beans with JAXB payloads\n            return null;\n        }\n\n        try {\n            if (isJaxbType(type)) {\n                return unmarshall(type, exchange, value);\n            }\n            if (value != null && isNotStreamCacheType(type)) {\n                if (hasXmlRootElement(value.getClass())) {\n                    return marshall(type, exchange, value, null);\n                }\n                Method objectFactoryMethod = JaxbHelper.getJaxbElementFactoryMethod(camelContext, value.getClass());\n                if (objectFactoryMethod != null) {\n                    return marshall(type, exchange, value, objectFactoryMethod);\n                }\n            }\n        } catch (Exception e) {\n            throw new TypeConversionException(value, type, e);\n        }\n\n        // should return null if didn't even try to convert at all or for whatever reason the conversion is failed\n        return null;\n    }","commit_id":"a3d22b3e8922e7ae8fd4a0d835468f72bdf1ef56","url":"https://github.com/apache/camel"},{"original_method":"protected <T> T marshall(Class<T> type, Exchange exchange, Object value)\n        throws JAXBException, XMLStreamException, FactoryConfigurationError, TypeConversionException {\n        LOG.trace(\"Marshal from value {} to type {}\", value, type);\n\n        T answer = null;\n        if (parentTypeConverter != null) {\n            // lets convert the object to a JAXB source and try convert that to\n            // the required source\n            JAXBContext context = createContext(value.getClass());\n            // must create a new instance of marshaller as its not thread safe\n            Marshaller marshaller = context.createMarshaller();\n            Writer buffer = new StringWriter();\n            boolean prettyPrint = isPrettyPrint();\n            // check the camel context property to decide the value of PrettyPrint\n            if (exchange != null) {\n                String property = exchange.getContext().getProperty(PRETTY_PRINT);\n                if (property != null) {\n                    if (property.equalsIgnoreCase(\"false\")) {\n                        prettyPrint = false;\n                    } else {\n                        prettyPrint = true;\n                    }\n                }\n            }\n            if (prettyPrint) {\n                marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            }\n            if (exchange != null && exchange.getProperty(Exchange.CHARSET_NAME, String.class) != null) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));\n            }\n            Object toMarshall = value;\n            if (!hasXmlRootElement(value.getClass())) {\n                Method m = JaxbHelper.getJaxbElementFactoryMethod(camelContext, value.getClass());\n                try {\n                    toMarshall = m.invoke(JaxbHelper.getObjectFactory(camelContext, value.getClass()).newInstance(), value);\n                } catch (Exception e) {\n                    LOG.error(\"Unable to create JAXBElement object for type {} due to {}\", value.getClass().getName(), e);\n                }\n            }\n            if (needFiltering(exchange)) {\n                XMLStreamWriter writer = parentTypeConverter.convertTo(XMLStreamWriter.class, buffer);\n                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer);\n                marshaller.marshal(toMarshall, filteringWriter);\n            } else {\n                marshaller.marshal(toMarshall, buffer);\n            }\n            // we need to pass the exchange\n            answer = parentTypeConverter.convertTo(type, exchange, buffer.toString());\n        }\n        return answer;\n    }","id":100992,"modified_method":"protected <T> T marshall(Class<T> type, Exchange exchange, Object value, Method objectFactoryMethod)\n        throws JAXBException, XMLStreamException, FactoryConfigurationError, TypeConversionException {\n        LOG.trace(\"Marshal from value {} to type {}\", value, type);\n\n        T answer = null;\n        if (parentTypeConverter != null) {\n            // lets convert the object to a JAXB source and try convert that to\n            // the required source\n            JAXBContext context = createContext(value.getClass());\n            // must create a new instance of marshaller as its not thread safe\n            Marshaller marshaller = context.createMarshaller();\n            Writer buffer = new StringWriter();\n\n            if (isPrettyPrint()) {\n                marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            }\n            if (exchange != null && exchange.getProperty(Exchange.CHARSET_NAME, String.class) != null) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));\n            }\n            Object toMarshall = value;\n            if (objectFactoryMethod != null) {\n                try {\n                    Object instance = objectFactoryMethod.getDeclaringClass().newInstance();\n                    if (instance != null) {\n                        toMarshall = objectFactoryMethod.invoke(instance, value);\n                    }\n                } catch (Exception e) {\n                    LOG.debug(\"Unable to create JAXBElement object for type \" + value.getClass() + \" due to \" + e.getMessage(), e);\n                }\n            }\n            if (needFiltering(exchange)) {\n                XMLStreamWriter writer = parentTypeConverter.convertTo(XMLStreamWriter.class, buffer);\n                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer);\n                marshaller.marshal(toMarshall, filteringWriter);\n            } else {\n                marshaller.marshal(toMarshall, buffer);\n            }\n            // we need to pass the exchange\n            answer = parentTypeConverter.convertTo(type, exchange, buffer.toString());\n        }\n        return answer;\n    }","commit_id":"a3d22b3e8922e7ae8fd4a0d835468f72bdf1ef56","url":"https://github.com/apache/camel"},{"original_method":"void marshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller)\n        throws XMLStreamException, JAXBException, NoTypeConversionAvailableException, IOException, InvalidPayloadException {\n\n        Object element = graph;\n        if (partialClass != null && getPartNamespace() != null) {\n            element = new JAXBElement<Object>(getPartNamespace(), partialClass, graph);\n        }\n\n        // only marshal if its possible\n        if (introspector.isElement(element)) {\n            if (asXmlStreamWriter(exchange)) {\n                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);\n                if (needFiltering(exchange)) {\n                    writer = new FilteringXmlStreamWriter(writer);\n                }\n                if (xmlStreamWriterWrapper != null) {\n                    writer = xmlStreamWriterWrapper.wrapWriter(writer);\n                }\n                marshaller.marshal(element, writer);\n            } else {\n                marshaller.marshal(element, stream);\n            }\n            return;\n        } else if (element != null) {\n            Method m = JaxbHelper.getJaxbElementFactoryMethod(camelContext, element.getClass());\n            try {\n                Object toMarshall = m.invoke(JaxbHelper.getObjectFactory(camelContext, element.getClass()).newInstance(), element);\n                if (asXmlStreamWriter(exchange)) {\n                    XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);\n                    if (needFiltering(exchange)) {\n                        writer = new FilteringXmlStreamWriter(writer);\n                    }\n                    if (xmlStreamWriterWrapper != null) {\n                        writer = xmlStreamWriterWrapper.wrapWriter(writer);\n                    }\n                    marshaller.marshal(toMarshall, writer);\n                } else {\n                    marshaller.marshal(toMarshall, stream);\n                }\n                return;\n            } catch (Exception e) {\n                LOG.debug(\"Unable to create JAXBElement object for type {} due to {}\", element.getClass().getName(), e);\n            }\n        }\n\n        // cannot marshal\n        if (!mustBeJAXBElement) {\n            // write the graph as is to the output stream\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Attempt to marshalling non JAXBElement with type {} as InputStream\", ObjectHelper.classCanonicalName(graph));\n            }\n            InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n            IOHelper.copyAndCloseInput(is, stream);\n        } else {\n            throw new InvalidPayloadException(exchange, JAXBElement.class);\n        }\n    }","id":100993,"modified_method":"void marshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller)\n        throws XMLStreamException, JAXBException, NoTypeConversionAvailableException, IOException, InvalidPayloadException {\n\n        Object element = graph;\n        if (partialClass != null && getPartNamespace() != null) {\n            element = new JAXBElement<Object>(getPartNamespace(), partialClass, graph);\n        }\n\n        // only marshal if its possible\n        if (introspector.isElement(element)) {\n            if (asXmlStreamWriter(exchange)) {\n                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);\n                if (needFiltering(exchange)) {\n                    writer = new FilteringXmlStreamWriter(writer);\n                }\n                if (xmlStreamWriterWrapper != null) {\n                    writer = xmlStreamWriterWrapper.wrapWriter(writer);\n                }\n                marshaller.marshal(element, writer);\n            } else {\n                marshaller.marshal(element, stream);\n            }\n            return;\n        } else if (element != null) {\n            Method objectFactoryMethod = JaxbHelper.getJaxbElementFactoryMethod(camelContext, element.getClass());\n            if (objectFactoryMethod != null) {\n                try {\n                    Object instance = objectFactoryMethod.getDeclaringClass().newInstance();\n                    if (instance != null) {\n                        Object toMarshall = objectFactoryMethod.invoke(instance, element);\n                        if (asXmlStreamWriter(exchange)) {\n                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);\n                            if (needFiltering(exchange)) {\n                                writer = new FilteringXmlStreamWriter(writer);\n                            }\n                            if (xmlStreamWriterWrapper != null) {\n                                writer = xmlStreamWriterWrapper.wrapWriter(writer);\n                            }\n                            marshaller.marshal(toMarshall, writer);\n                        } else {\n                            marshaller.marshal(toMarshall, stream);\n                        }\n                        return;\n                    }\n                } catch (Exception e) {\n                    LOG.debug(\"Unable to create JAXBElement object for type \" + element.getClass() + \" due to \" + e.getMessage(), e);\n                }\n            }\n        }\n\n        // cannot marshal\n        if (!mustBeJAXBElement) {\n            // write the graph as is to the output stream\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Attempt to marshalling non JAXBElement with type {} as InputStream\", ObjectHelper.classCanonicalName(graph));\n            }\n            InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n            IOHelper.copyAndCloseInput(is, stream);\n        } else {\n            throw new InvalidPayloadException(exchange, JAXBElement.class);\n        }\n    }","commit_id":"a3d22b3e8922e7ae8fd4a0d835468f72bdf1ef56","url":"https://github.com/apache/camel"},{"original_method":"public static <T> Method getJaxbElementFactoryMethod(CamelContext camelContext, Class<T> type) {\n        Method factoryMethod = null;\n        try {\n            for (Method m : getObjectFactory(camelContext, type).getMethods()) {\n                final XmlElementDecl a = m.getAnnotation(XmlElementDecl.class);\n                if (a == null) {\n                    continue;\n                }\n                final Class<?>[] parameters = m.getParameterTypes();\n                if (parameters.length == 1 && parameters[0].isAssignableFrom(type)) {\n                    if (factoryMethod != null) {\n                        throw new IllegalStateException(\"There are several possible XML schema mappings for class \" + type.getName());\n                    } else {\n                        factoryMethod = m;\n                    }\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            LOG.debug(e.getMessage(), e);\n        }\n        return factoryMethod;\n    }","id":100994,"modified_method":"public static <T> Method getJaxbElementFactoryMethod(CamelContext camelContext, Class<T> type) {\n        // find the first method that has @XmlElementDecl with one parameter that matches the type\n        Class factory = getObjectFactory(camelContext, type);\n        if (factory != null) {\n            for (Method m : factory.getMethods()) {\n                final XmlElementDecl a = m.getAnnotation(XmlElementDecl.class);\n                if (a == null) {\n                    continue;\n                }\n                final Class<?>[] parameters = m.getParameterTypes();\n                if (parameters.length == 1 && parameters[0].isAssignableFrom(type)) {\n                    return m;\n                }\n            }\n        }\n\n        return null;\n    }","commit_id":"a3d22b3e8922e7ae8fd4a0d835468f72bdf1ef56","url":"https://github.com/apache/camel"},{"original_method":"public static <T> Class getObjectFactory(CamelContext camelContext, Class<T> type) throws ClassNotFoundException {\n        Class<?> c = null;\n        if (type.getPackage() != null) {\n            String objectFactoryClassName = type.getPackage().getName() + \".ObjectFactory\";\n            c = camelContext.getClassResolver().resolveClass(objectFactoryClassName);\n        }\n        if (c == null) {\n            throw new ClassNotFoundException(String.format(\"ObjectFactory for type %s was not found\", type.getName()));\n        } else {\n            return c;\n        }\n    }","id":100995,"modified_method":"public static <T> Class getObjectFactory(CamelContext camelContext, Class<T> type) {\n        if (type.getPackage() != null) {\n            String objectFactoryClassName = type.getPackage().getName() + \".ObjectFactory\";\n            return camelContext.getClassResolver().resolveClass(objectFactoryClassName);\n        }\n        return null;\n    }","commit_id":"a3d22b3e8922e7ae8fd4a0d835468f72bdf1ef56","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    public ClassifierDescriptor getClassifier(@NotNull Name name) {\n        ClassDescriptor classDescriptor = semanticServices.getDescriptorResolver().resolveClass(packageFQN.child(name), DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN);\n        if (classDescriptor == null || DescriptorUtils.isObject(classDescriptor)) {\n            // TODO: this is a big hack against several things that I barely understand myself and cannot explain\n            // 1. We should not return objects from this method, and maybe JDR.resolveClass should not return too\n            // 2. JDR should not return classes being analyzed\n            return null;\n        }\n        return classDescriptor;\n    }","id":100996,"modified_method":"@Override\n    public ClassifierDescriptor getClassifier(@NotNull Name name) {\n        return semanticServices.getDescriptorResolver().resolveClass(packageFQN.child(name), DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN);\n    }","commit_id":"8c9cc058c7d9252ca82ce3e335f62f028dbc04e8","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void gen(JetNamedFunction f) {\n        SimpleFunctionDescriptor functionDescriptor = bindingContext.get(BindingContext.FUNCTION, f);\n        assert functionDescriptor != null;\n        JvmMethodSignature method =\n                typeMapper.mapToCallableMethod(\n                        functionDescriptor,\n                        false,\n                        isCallInsideSameClassAsDeclared(functionDescriptor, owner),\n                        isCallInsideSameModuleAsDeclared(functionDescriptor, owner),\n                        owner.getContextKind()).getSignature();\n        generateMethod(f, method, true, null, functionDescriptor);\n    }","id":100997,"modified_method":"public void gen(JetNamedFunction f) {\n        SimpleFunctionDescriptor functionDescriptor = bindingContext.get(BindingContext.FUNCTION, f);\n        assert functionDescriptor != null;\n\n        OwnerKind kind = owner.getContextKind();\n        JvmMethodSignature method =\n                typeMapper.mapToCallableMethod(\n                        functionDescriptor,\n                        false,\n                        isCallInsideSameClassAsDeclared(functionDescriptor, owner),\n                        isCallInsideSameModuleAsDeclared(functionDescriptor, owner),\n                        kind).getSignature();\n\n        if (kind != OwnerKind.TRAIT_IMPL || hasBodyExpression(f)) {\n            boolean needJetAnnotations = kind != OwnerKind.TRAIT_IMPL;\n            generateMethod(f, method, needJetAnnotations, null, functionDescriptor);\n        }\n\n        generateDefaultIfNeeded(owner.intoFunction(functionDescriptor), state, v, method.getAsmMethod(), functionDescriptor, kind,\n                                DefaultParameterValueLoader.DEFAULT);\n    }","commit_id":"099fa6c11efa0855f997021270b0164a56913bc9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void generateMethod(\n            @NotNull JetDeclaration declaration,\n            @NotNull JvmMethodSignature jvmSignature,\n            boolean needJetAnnotations,\n            @Nullable String propertyTypeSignature,\n            @NotNull FunctionDescriptor functionDescriptor\n    ) {\n        assert declaration instanceof JetDeclarationWithBody || declaration instanceof JetProperty || declaration instanceof JetParameter;\n\n        checkMustGenerateCode(functionDescriptor);\n\n        OwnerKind kind = owner.getContextKind();\n\n        if (kind == OwnerKind.TRAIT_IMPL) {\n            needJetAnnotations = false;\n        }\n\n        boolean hasBodyExpression = hasBodyExpression(declaration);\n\n        MethodContext context = owner.intoFunction(functionDescriptor);\n        if (kind != OwnerKind.TRAIT_IMPL || hasBodyExpression) {\n            generateMethodHeaderAndBody(declaration, jvmSignature, needJetAnnotations, propertyTypeSignature, functionDescriptor, context);\n\n            if (state.getClassBuilderMode() == ClassBuilderMode.FULL && !isAbstract(functionDescriptor, kind)) {\n                generateBridgeIfNeeded(owner, state, v, jvmSignature.getAsmMethod(), functionDescriptor);\n            }\n        }\n\n        generateDefaultIfNeeded(context, state, v, jvmSignature.getAsmMethod(), functionDescriptor, kind, DefaultParameterValueLoader.DEFAULT);\n    }","id":100998,"modified_method":"public void generateMethod(\n            @NotNull JetDeclaration declaration,\n            @NotNull JvmMethodSignature jvmSignature,\n            boolean needJetAnnotations,\n            @Nullable String propertyTypeSignature,\n            @NotNull FunctionDescriptor functionDescriptor\n    ) {\n        assert declaration instanceof JetDeclarationWithBody || declaration instanceof JetProperty || declaration instanceof JetParameter;\n\n        checkMustGenerateCode(functionDescriptor);\n\n        generateMethodHeaderAndBody(declaration, jvmSignature, needJetAnnotations, propertyTypeSignature, functionDescriptor);\n\n        if (state.getClassBuilderMode() == ClassBuilderMode.FULL && !isAbstract(functionDescriptor, owner.getContextKind())) {\n            generateBridgeIfNeeded(owner, state, v, jvmSignature.getAsmMethod(), functionDescriptor);\n        }\n    }","commit_id":"099fa6c11efa0855f997021270b0164a56913bc9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void generateMethodHeaderAndBody(\n            @NotNull JetDeclaration declaration,\n            @NotNull JvmMethodSignature jvmSignature,\n            boolean needJetAnnotations,\n            @Nullable String propertyTypeSignature,\n            @NotNull FunctionDescriptor functionDescriptor,\n            @NotNull MethodContext context\n    ) {\n        OwnerKind kind = context.getContextKind();\n        Method asmMethod = jvmSignature.getAsmMethod();\n\n        MethodVisitor mv = v.newMethod(declaration,\n                                       getMethodAsmFlags(functionDescriptor, kind),\n                                       asmMethod.getName(),\n                                       asmMethod.getDescriptor(),\n                                       jvmSignature.getGenericsSignature(),\n                                       null);\n\n        AnnotationCodegen.forMethod(mv, typeMapper).genAnnotations(functionDescriptor);\n        if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES) return;\n\n        if (needJetAnnotations) {\n            genJetAnnotations(state, functionDescriptor, jvmSignature, propertyTypeSignature, mv);\n        }\n\n        if (isAbstract(functionDescriptor, kind)) return;\n\n        if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {\n            genStubCode(mv);\n            return;\n        }\n\n        LocalVariablesInfo localVariablesInfo = generateLocalVariablesInfo(functionDescriptor);\n\n        MethodBounds methodBounds = generateMethodBody(mv, declaration, functionDescriptor, context, asmMethod, localVariablesInfo);\n\n        Type thisType;\n        ReceiverParameterDescriptor expectedThisObject = functionDescriptor.getExpectedThisObject();\n        if (expectedThisObject != null) {\n            thisType = typeMapper.mapType(expectedThisObject.getType());\n        }\n        else if (declaration instanceof JetFunctionLiteral || isLocalNamedFun(functionDescriptor)) {\n            thisType = typeMapper.mapType(context.getThisDescriptor());\n        }\n        else {\n            thisType = null;\n        }\n\n        generateLocalVariableTable(typeMapper, mv, functionDescriptor, thisType, localVariablesInfo, methodBounds);\n\n        endVisit(mv, null, declaration);\n    }","id":100999,"modified_method":"private void generateMethodHeaderAndBody(\n            @NotNull JetDeclaration declaration,\n            @NotNull JvmMethodSignature jvmSignature,\n            boolean needJetAnnotations,\n            @Nullable String propertyTypeSignature,\n            @NotNull FunctionDescriptor functionDescriptor\n    ) {\n        MethodContext context = owner.intoFunction(functionDescriptor);\n\n        Method asmMethod = jvmSignature.getAsmMethod();\n\n        MethodVisitor mv = v.newMethod(declaration,\n                                       getMethodAsmFlags(functionDescriptor, context.getContextKind()),\n                                       asmMethod.getName(),\n                                       asmMethod.getDescriptor(),\n                                       jvmSignature.getGenericsSignature(),\n                                       null);\n\n        AnnotationCodegen.forMethod(mv, typeMapper).genAnnotations(functionDescriptor);\n        if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES) return;\n\n        if (needJetAnnotations) {\n            genJetAnnotations(state, functionDescriptor, jvmSignature, propertyTypeSignature, mv);\n        }\n\n        if (isAbstract(functionDescriptor, context.getContextKind())) return;\n\n        if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {\n            genStubCode(mv);\n            return;\n        }\n\n        LocalVariablesInfo localVariablesInfo = generateLocalVariablesInfo(functionDescriptor);\n\n        MethodBounds methodBounds = generateMethodBody(mv, declaration, functionDescriptor, context, asmMethod, localVariablesInfo);\n\n        Type thisType = getThisTypeForFunction(functionDescriptor, context);\n        generateLocalVariableTable(typeMapper, mv, functionDescriptor, thisType, localVariablesInfo, methodBounds);\n\n        endVisit(mv, null, declaration);\n    }","commit_id":"099fa6c11efa0855f997021270b0164a56913bc9","url":"https://github.com/JetBrains/kotlin"}]