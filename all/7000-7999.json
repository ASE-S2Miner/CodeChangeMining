[{"original_method":"public void testInit() throws Exception {\n        EventIpcManagerDefaultImpl manager = new EventIpcManagerDefaultImpl();\n        manager.setEventdConfigMgr(EventdConfigFactory.getInstance());\n        EventExpander eventExpander = new EventExpander();\n        eventExpander.setEventConfDao(EasyMock.createMock(EventConfDao.class));\n        eventExpander.afterPropertiesSet();\n        manager.setEventExpander(eventExpander);\n        manager.afterPropertiesSet();\n    }","id":7000,"modified_method":"public void testInit() throws Exception {\n        EventIpcManagerDefaultImpl manager = new EventIpcManagerDefaultImpl();\n        manager.setEventdConfigMgr(EventdConfigFactory.getInstance());\n        EventExpander eventExpander = new EventExpander();\n        eventExpander.setEventConfDao(EasyMock.createMock(EventConfDao.class));\n        eventExpander.afterPropertiesSet();\n        manager.setEventExpander(eventExpander);\n        manager.setDataSource(EasyMock.createMock(DataSource.class));\n        manager.setEventdServiceManager(EasyMock.createMock(EventdServiceManager.class));\n        manager.afterPropertiesSet();\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void close() {\n        try {\n            m_getSvcIdStmt.close();\n            m_getHostNameStmt.close();\n            m_getNextIdStmt.close();\n            m_insStmt.close();\n        } catch (SQLException sqle) {\n            ThreadCategory.getInstance(EventWriter.class).warn(\"SQLException while closing prepared statements\", sqle);\n        } finally {\n            super.close();\n        }\n    }","id":7001,"modified_method":"public void close() {\n        try {\n            m_getHostNameStmt.close();\n            m_getNextIdStmt.close();\n            m_insStmt.close();\n        } catch (SQLException e) {\n            log().warn(\"SQLException while closing prepared statements: \" + e, e);\n        } finally {\n            super.close();\n        }\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor\n     * @param connectionFactory \n     * @param getNextEventIdStr\n     */\n    public EventWriter(String getNextEventIdStr) throws SQLException {\n        super();\n        //\n        // prepare the SQL statement\n        //\n        m_getSvcIdStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_SVCNAME_TO_SVCID);\n        m_getHostNameStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_HOSTIP_TO_HOSTNAME);\n        m_getNextIdStmt = m_dsConn.prepareStatement(getNextEventIdStr);\n        m_insStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_INS_EVENT);\n        // set the database for rollback support\n        //\n        try {\n            m_dsConn.setAutoCommit(false);\n        } catch (SQLException se) {\n            ThreadCategory.getInstance(EventWriter.class).warn(\"Unable to set auto commit mode\");\n        }\n    }","id":7002,"modified_method":"public EventWriter() {\n        super();\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * The method that inserts the event into the database\n     * \n     * @param eventHeader\n     *            the event header\n     * @param event\n     *            the actual event to be inserted\n     */\n    public void persistEvent(Header eventHeader, Event event) throws SQLException {\n        if (event != null) {\n            Category log = ThreadCategory.getInstance(EventWriter.class);\n\n            // Check value of <logmsg> attribute 'dest', if set to\n            // \"donotpersist\" then simply return, the uei is not to be\n            // persisted to the database\n            String logdest = event.getLogmsg().getDest();\n            if (logdest.equals(\"donotpersist\")) {\n                log.debug(\"EventWriter: uei '\" + event.getUei() + \"' marked as 'doNotPersist'.\");\n                return;\n            } else {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"EventWriter dbRun for : \" + event.getUei() + \" nodeid: \" + event.getNodeid() + \" ipaddr: \" + event.getInterface() + \" serviceid: \" + event.getService());\n                }\n            }\n\n            try {\n                insertEvent(eventHeader, event);\n\n                // commit\n                m_dsConn.commit();\n            } catch (SQLException e) {\n                log.warn(\"Error inserting event into the datastore\", e);\n                try {\n                    m_dsConn.rollback();\n                } catch (Exception e2) {\n                    log.warn(\"Rollback of transaction failed!\", e2);\n                }\n\n                throw e;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"EventWriter finished for : \" + event.getUei());\n            }\n        }\n    }","id":7003,"modified_method":"/**\n     * The method that inserts the event into the database\n     * \n     * @param eventHeader\n     *            the event header\n     * @param event\n     *            the actual event to be inserted\n     */\n    public void persistEvent(Header eventHeader, Event event) throws SQLException {\n        if (event != null) {\n            // Check value of <logmsg> attribute 'dest', if set to\n            // \"donotpersist\" then simply return, the uei is not to be\n            // persisted to the database\n            String logdest = event.getLogmsg().getDest();\n            if (logdest.equals(\"donotpersist\")) {\n                log().debug(\"EventWriter: uei '\" + event.getUei() + \"' marked as 'doNotPersist'.\");\n                return;\n            } else {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"EventWriter dbRun for : \" + event.getUei() + \" nodeid: \" + event.getNodeid() + \" ipaddr: \" + event.getInterface() + \" serviceid: \" + event.getService());\n                }\n            }\n\n            try {\n                insertEvent(eventHeader, event);\n\n                // commit\n                m_dsConn.commit();\n            } catch (SQLException e) {\n                log().warn(\"Error inserting event into the datastore\", e);\n                try {\n                    m_dsConn.rollback();\n                } catch (Exception e2) {\n                    log().warn(\"Rollback of transaction failed!\", e2);\n                }\n\n                throw e;\n            }\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"EventWriter finished for : \" + event.getUei());\n            }\n        }\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventWithNull() throws SQLException {\n        \n        EventWriter eWriter = new EventWriter(\"SELECT nextval('eventsNxtId')\");\n        \n        try {\n            EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n            bldr.setLogDest(\"logndisplay\");\n            bldr.addParam(\"test\", \"testVal\");\n            bldr.addParam(\"test2\", \"valWith\\u0000Null\\u0000\");\n\n            byte[] bytes = new byte[] { 0x07, (byte)0xD7, 0x04, 0x0A, 0x01, 0x17, 0x06, 0x00, 0x2B, 0x00, 0x00 };\n\n\n            SnmpValue snmpVal = SnmpUtils.getValueFactory().getOctetString(bytes);\n\n            assertFalse(snmpVal.isDisplayable());\n\n            bldr.addParam(\"test3\", snmpVal.toString());\n\n            String b64 = EventConstants.toString(EventConstants.XML_ENCODING_BASE64, snmpVal);\n\n            System.err.println(b64);\n\n            bldr.addParam(\"test\", b64);\n\n            System.err.println(snmpVal.toString());\n\n            eWriter.persistEvent(null, bldr.getEvent());\n\n        } finally {\n            eWriter.close();\n        }\n    }","id":7004,"modified_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventWithNull() throws Exception {\n        EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n        bldr.setLogDest(\"logndisplay\");\n        bldr.addParam(\"test\", \"testVal\");\n        bldr.addParam(\"test2\", \"valWith\\u0000Null\\u0000\");\n\n        byte[] bytes = new byte[] { 0x07, (byte)0xD7, 0x04, 0x0A, 0x01, 0x17, 0x06, 0x00, 0x2B, 0x00, 0x00 };\n\n\n        SnmpValue snmpVal = SnmpUtils.getValueFactory().getOctetString(bytes);\n\n        assertFalse(snmpVal.isDisplayable());\n\n        bldr.addParam(\"test3\", snmpVal.toString());\n\n        String b64 = EventConstants.toString(EventConstants.XML_ENCODING_BASE64, snmpVal);\n\n        bldr.addParam(\"test\", b64);\n\n        m_eventWriter.persistEvent(null, bldr.getEvent());\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * tests sequence of newly initialized db\n     */\n    public void testNextEventId() {\n        int nextId = getJdbcTemplate().queryForInt(\"SELECT nextval('eventsNxtId')\");\n        System.err.println(nextId);\n        \n        // an empty db should produce '1' here\n        assertEquals(1, nextId);\n    }","id":7005,"modified_method":"/**\n     * tests sequence of newly initialized db\n     */\n    public void testNextEventId() {\n        int nextId = getJdbcTemplate().queryForInt(m_eventWriter.getGetNextEventIdStr());\n        \n        // an empty db should produce '1' here\n        assertEquals(1, nextId);\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        \n        DataSourceFactory.setInstance(getDataSource());\n    }","id":7006,"modified_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        \n        JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n        eventdServiceManager.setDataSource(getDataSource());\n        eventdServiceManager.afterPropertiesSet();\n        \n        m_eventWriter = new EventWriter();\n        m_eventWriter.setEventdServiceManager(eventdServiceManager);\n        m_eventWriter.setDataSource(getDataSource());\n        m_eventWriter.setGetNextEventIdStr(\"SELECT nextval('eventsNxtId')\");\n        m_eventWriter.afterPropertiesSet();\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventDescrWithNull() throws SQLException {\n        \n        EventWriter eWriter = new EventWriter(\"SELECT nextval('eventsNxtId')\");\n        \n        try {\n            EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n            bldr.setLogDest(\"logndisplay\");\n        \n            bldr.setDescription(\"abc\\u0000def\");\n        \n            eWriter.persistEvent(null, bldr.getEvent());\n        \n        } finally {\n            eWriter.close();\n        }\n    }","id":7007,"modified_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventDescrWithNull() throws Exception {\n        EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n        bldr.setLogDest(\"logndisplay\");\n\n        bldr.setDescription(\"abc\\u0000def\");\n\n        m_eventWriter.persistEvent(null, bldr.getEvent());\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onInit() {\n        Assert.state(m_dataSource != null, \"dataSource not initialized\");\n        Assert.state(m_eventConfDao != null, \"eventConfDao not initialized\");\n        \n        createBroadcastEventProcessor(m_eventIpcManager);\n\n        initializeServiceTableMap();\n\n        initializeExternalIpcReceivers();\n    }","id":7008,"modified_method":"protected void onInit() {\n        Assert.state(m_eventConfDao != null, \"property eventConfDao must be set\");\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        \n        createBroadcastEventProcessor(m_eventIpcManager);\n\n        m_eventdServiceManager.dataSourceSync();\n\n        initializeExternalIpcReceivers();\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventd = new Eventd();\n                m_eventd.setDataSource(m_db);\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                m_eventd.setConfigManager(m_eventdConfigMgr);\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setEventConfDao(eventConfDao);\n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","id":7009,"modified_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setConfigManager(m_eventdConfigMgr);\n\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setEventConfDao(eventConfDao);\n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor\n     * @param connectionFactory \n     */\n    public Persist() throws SQLException {\n        // Get a database connection\n        m_dsConn = DataSourceFactory.getInstance().getConnection();\n    }","id":7010,"modified_method":"public Persist() {\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","id":7011,"modified_method":"protected Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is used to convert the service name into a service id. It\n     * first looks up the information from a service map of Eventd and if no\n     * match is found, by performing a lookup in the database. If the conversion\n     * is successful then the corresponding integer identifier will be returned\n     * to the caller.\n     * \n     * @param name\n     *            The name of the service\n     * \n     * @return The integer identifier for the service name.\n     * \n     * @exception java.sql.SQLException\n     *                Thrown if there is an error accessing the stored data or\n     *                the SQL text is malformed. This will also be thrown if the\n     *                result cannot be obtained.\n     * \n     * @see EventdConstants#SQL_DB_SVCNAME_TO_SVCID\n     * \n     */\n    private int getServiceID(String name) throws SQLException {\n        Assert.notNull(name, \"The service name must not be null\");\n\n        // ask persistd\n        int id = Eventd.getServiceID(name);\n        if (id != -1) {\n            return id;\n        }\n\n        // talk to the database and get the identifer\n        m_getSvcIdStmt.setString(1, name);\n        ResultSet rset = null;\n        try {\n            rset = m_getSvcIdStmt.executeQuery();\n            if (rset.next()) {\n                id = rset.getInt(1);\n            }\n        } catch (SQLException e) {\n            throw e;\n        } finally {\n            rset.close();\n        }\n\n        // inform persistd about the new find\n        if (id != -1) {\n            Eventd.addServiceMapping(name, id);\n        }\n\n        return id;\n    }","id":7012,"modified_method":"/**\n     * This method is used to convert the service name into a service id. It\n     * first looks up the information from a service map of Eventd and if no\n     * match is found, by performing a lookup in the database. If the conversion\n     * is successful then the corresponding integer identifier will be returned\n     * to the caller.\n     * \n     * @param name\n     *            The name of the service\n     * \n     * @return The integer identifier for the service name.\n     * \n     * @exception java.sql.SQLException\n     *                Thrown if there is an error accessing the stored data or\n     *                the SQL text is malformed. This will also be thrown if the\n     *                result cannot be obtained.\n     * \n     * @see EventdConstants#SQL_DB_SVCNAME_TO_SVCID\n     * \n     */\n    private int getServiceID(String name) throws SQLException {\n        return m_eventdServiceManager.getServiceId(name);\n    }","commit_id":"8187639c3f4e9349daa245b5f7f93dcbb1e2783e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void close() {\n        try {\n            m_getSvcIdStmt.close();\n            m_getHostNameStmt.close();\n            m_getNextIdStmt.close();\n            m_insStmt.close();\n            m_reductionQuery.close();\n            m_upDateStmt.close();\n            m_updateEventStmt.close();\n        } catch (SQLException sqle) {\n            ThreadCategory.getInstance(AlarmWriter.class).warn(\"SQLException while closing prepared statements\", sqle);\n        } finally {\n            super.close();\n        }\n    }","id":7013,"modified_method":"public void close() {\n        try {\n            m_getHostNameStmt.close();\n            m_getNextIdStmt.close();\n            m_insStmt.close();\n            m_reductionQuery.close();\n            m_upDateStmt.close();\n            m_updateEventStmt.close();\n        } catch (SQLException e) {\n            log().warn(\"SQLException while closing prepared statements: \" + e, e);\n        } finally {\n            super.close();\n        }\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor\n     * @param connectionFactory \n     */\n    public AlarmWriter(String getNextAlarmIdStr) throws SQLException {\n        super();\n        //\n        // prepare the SQL statement\n        //\n        m_getSvcIdStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_SVCNAME_TO_SVCID);\n        m_getHostNameStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_HOSTIP_TO_HOSTNAME);\n        m_getNextIdStmt = m_dsConn.prepareStatement(getNextAlarmIdStr);\n        m_insStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_ALARM_INS_EVENT);\n        m_reductionQuery = m_dsConn.prepareStatement(EventdConstants.SQL_DB_ALARM_REDUCTION_QUERY);\n        m_upDateStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_ALARM_UPDATE_EVENT);\n        m_updateEventStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_UPDATE_EVENT_WITH_ALARM_ID);\n        // set the database for rollback support\n        //\n        try {\n            m_dsConn.setAutoCommit(false);\n        } catch (SQLException se) {\n            ThreadCategory.getInstance(AlarmWriter.class).warn(\"Unable to set auto commit mode\");\n        }\n    }","id":7014,"modified_method":"/**\n     * Constructor\n     * @param connectionFactory \n     */\n    public AlarmWriter() {\n        super();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * The method that inserts the event into the database\n     * \n     * @param eventHeader\n     *            the event header\n     * @param event\n     *            the actual event to be inserted\n     */\n    public void persistAlarm(Header eventHeader, Event event) throws SQLException {\n        if (event != null) {\n            Category log = ThreadCategory.getInstance(AlarmWriter.class);\n\n            // Check value of <logmsg> attribute 'dest', if set to\n            // \"donotpersist\" then simply return, the uei is not to be\n            // persisted to the database\n            String logdest = event.getLogmsg().getDest();\n            if (logdest.equals(\"donotpersist\") || event.getAlarmData() == null) {\n                log.debug(\"AlarmWriter: uei '\" + event.getUei() + \"' marked as 'doNotPersist' or reductionKey is null.\");\n                return;\n            } else {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"AlarmWriter dbRun for : \" + event.getUei() + \" nodeid: \" + event.getNodeid() + \" ipaddr: \" + event.getInterface() + \" serviceid: \" + event.getService());\n                }\n            }\n\n            /*\n             * Try twice incase the transaction fails.  This could happen if 2 or more threads query the db\n             * at the same time and determine that insert needs to happen.  One insert will complete the other\n             * will fail.  The next time through the loop, the alarm will be reduced with an update. \n             */\n            int attempt = 1;\n            boolean notUpdated = true;\n            while (attempt <= 2 && notUpdated) {\n                try {\n                    insertOrUpdateAlarm(eventHeader, event);\n                    m_dsConn.commit();\n                    notUpdated = false;\n                } catch (SQLException e) {\n                    try {\n                        m_dsConn.rollback();\n                        m_dsConn.setAutoCommit(false);\n                    } catch (Exception e2) {\n                        log.warn(\"Rollback of transaction failed!\", e2);\n                    }\n                    if (attempt > 1) {\n                        log.warn(\"Error in attempt: \"+attempt+\" inserting alarm into the datastore\", e);\n                        throw e;\n                    } else {\n                        log.info(\"Retrying insertOrUpdate statement after first attempt: \"+ e.getMessage());\n                    }\n                }\n                attempt++;\n            }\n\n            if (log.isDebugEnabled())\n                log.debug(\"AlarmWriter finished for : \" + event.getUei());\n        }\n    }","id":7015,"modified_method":"/**\n     * The method that inserts the event into the database\n     * \n     * @param eventHeader\n     *            the event header\n     * @param event\n     *            the actual event to be inserted\n     */\n    public void persistAlarm(Header eventHeader, Event event) throws SQLException {\n        if (event != null) {\n            // Check value of <logmsg> attribute 'dest', if set to\n            // \"donotpersist\" then simply return, the uei is not to be\n            // persisted to the database\n            String logdest = event.getLogmsg().getDest();\n            if (logdest.equals(\"donotpersist\") || event.getAlarmData() == null) {\n                log().debug(\"AlarmWriter: uei '\" + event.getUei() + \"' marked as 'doNotPersist' or reductionKey is null.\");\n                return;\n            } else {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"AlarmWriter dbRun for : \" + event.getUei() + \" nodeid: \" + event.getNodeid() + \" ipaddr: \" + event.getInterface() + \" serviceid: \" + event.getService());\n                }\n            }\n\n            /*\n             * Try twice incase the transaction fails.  This could happen if 2 or more threads query the db\n             * at the same time and determine that insert needs to happen.  One insert will complete the other\n             * will fail.  The next time through the loop, the alarm will be reduced with an update. \n             */\n            int attempt = 1;\n            boolean notUpdated = true;\n            while (attempt <= 2 && notUpdated) {\n                try {\n                    insertOrUpdateAlarm(eventHeader, event);\n                    m_dsConn.commit();\n                    notUpdated = false;\n                } catch (SQLException e) {\n                    try {\n                        m_dsConn.rollback();\n                        m_dsConn.setAutoCommit(false);\n                    } catch (Exception e2) {\n                        log().warn(\"Rollback of transaction failed!\", e2);\n                    }\n                    if (attempt > 1) {\n                        log().warn(\"Error in attempt: \"+attempt+\" inserting alarm into the datastore\", e);\n                        throw e;\n                    } else {\n                        log().info(\"Retrying insertOrUpdate statement after first attempt: \"+ e.getMessage());\n                    }\n                }\n                attempt++;\n            }\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"AlarmWriter finished for : \" + event.getUei());\n            }\n        }\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor for the eventhandler\n     * @param eventLog\n     *            events to be processed\n     * @param getNextEventId\n     *            the sql statement to get next event id from sequence\n     * @param eventExpander TODO\n     * @param connectionFactory \n     */\n    public EventHandler(Log eventLog, String getNextEventId, String getNextAlarmIdStr, EventExpander eventExpander) {\n        m_eventLog = eventLog;\n        m_getNextEventIdStr = getNextEventId;\n        m_getNextAlarmIdStr = getNextAlarmIdStr;\n        m_eventExpander = eventExpander;\n    }","id":7016,"modified_method":"/**\n     * Constructor for the eventhandler\n     * @param eventLog\n     *            events to be processed\n     * @param getNextEventId\n     *            the sql statement to get next event id from sequence\n     * @param eventExpander TODO\n     * @param dataSource TODO\n     * @param connectionFactory \n     */\n    public EventHandler(Log eventLog, String getNextEventId, String getNextAlarmIdStr, EventExpander eventExpander, EventdServiceManager eventdServiceManager, DataSource dataSource) {\n        m_eventLog = eventLog;\n        m_getNextEventIdStr = getNextEventId;\n        m_getNextAlarmIdStr = getNextAlarmIdStr;\n        m_eventExpander = eventExpander;\n        m_eventdServiceManager = eventdServiceManager;\n        m_dataSource = dataSource;\n        \n        afterPropertiesSet();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Process the received events. For each event, use the EventExpander to\n     * look up matching eventconf entry and load info from that match, expand\n     * event parms, add event to database and send event to appropriate\n     * listeners.\n     */\n    public void run() {\n        // check to see if the event log is hooked up\n        if (m_eventLog == null) {\n            return;\n        }\n\n        Events events = m_eventLog.getEvents();\n        if (events == null || events.getEventCount() <= 0) {\n            // no events to process\n            return;\n        }\n\n        // create an EventWriters\n        EventWriter eventWriter = null;\n        try {\n            AlarmWriter alarmWriter = null;\n            try {\n                try {\n                    eventWriter = new EventWriter(m_getNextEventIdStr);\n                    alarmWriter = new AlarmWriter(m_getNextAlarmIdStr);\n                } catch (Throwable t) {\n                    log().warn(\"Exception creating EventWriter\", t);\n                    log().warn(\"Event(s) CANNOT be inserted into the database\");\n\n                    return;\n                }\n\n                Enumeration<Event> en = events.enumerateEvent();\n                while (en.hasMoreElements()) {\n                    Event event = en.nextElement();\n\n                    if (log().isDebugEnabled()) {\n                        // print out the eui, source, and other\n                        // important aspects\n                        //\n                        String uuid = event.getUuid();\n                        log().debug(\"Event {\");\n                        log().debug(\"  uuid  = \" + (uuid != null && uuid.length() > 0 ? uuid : \"<not-set>\"));\n                        log().debug(\"  uei   = \" + event.getUei());\n                        log().debug(\"  src   = \" + event.getSource());\n                        log().debug(\"  iface = \" + event.getInterface());\n                        log().debug(\"  time  = \" + event.getTime());\n                        Parm[] parms = (event.getParms() == null ? null : event.getParms().getParm());\n                        if (parms != null) {\n                            log().debug(\"  parms {\");\n                            for (int x = 0; x < parms.length; x++) {\n                                if ((parms[x].getParmName() != null) && (parms[x].getValue().getContent() != null)) {\n                                    log().debug(\"    (\" + parms[x].getParmName().trim() + \", \" + parms[x].getValue().getContent().trim() + \")\");\n                                }\n                            }\n                            log().debug(\"  }\");\n                        }\n                        log().debug(\"}\");\n                    }\n\n                    // look up eventconf match and expand event\n                    m_eventExpander.expandEvent(event);\n                    try {\n                        // add to database\n                        eventWriter.persistEvent(m_eventLog.getHeader(), event);\n                        // send event to interested listeners\n                        EventIpcManagerFactory.getIpcManager().broadcastNow(event);\n\n                        alarmWriter.persistAlarm(m_eventLog.getHeader(), event);\n                    } catch (SQLException sqle) {\n                        log().warn(\"Unable to add event to database\", sqle);\n                    } catch (Throwable t) {\n                        log().warn(\"Unknown exception processing event\", t);\n                    }\n                }\n            } finally {\n                if (alarmWriter != null) alarmWriter.close();\n            }\n        } finally {\n            \n            // close database related stuff in the eventwriter\n            if (eventWriter != null) eventWriter.close();\n        }\n    }","id":7017,"modified_method":"/**\n     * Process the received events. For each event, use the EventExpander to\n     * look up matching eventconf entry and load info from that match, expand\n     * event parms, add event to database and send event to appropriate\n     * listeners.\n     */\n    public void run() {\n        // check to see if the event log is hooked up\n        if (m_eventLog == null) {\n            return;\n        }\n\n        Events events = m_eventLog.getEvents();\n        if (events == null || events.getEventCount() <= 0) {\n            // no events to process\n            return;\n        }\n\n        // create an EventWriters\n        EventWriter eventWriter = null;\n        try {\n            AlarmWriter alarmWriter = null;\n            try {\n                try {\n                    eventWriter = new EventWriter();\n                    eventWriter.setDataSource(m_dataSource);\n                    eventWriter.setEventdServiceManager(m_eventdServiceManager);\n                    eventWriter.setGetNextEventIdStr(m_getNextEventIdStr);\n                    eventWriter.afterPropertiesSet();\n                    \n                    alarmWriter = new AlarmWriter();\n                    alarmWriter.setDataSource(m_dataSource);\n                    alarmWriter.setEventdServiceManager(m_eventdServiceManager);\n                    alarmWriter.setGetNextAlarmIdStr(m_getNextAlarmIdStr);\n                    alarmWriter.afterPropertiesSet();\n                } catch (Throwable t) {\n                    log().warn(\"Exception creating EventWriter\", t);\n                    log().warn(\"Event(s) CANNOT be inserted into the database\");\n\n                    return;\n                }\n\n                Enumeration<Event> en = events.enumerateEvent();\n                while (en.hasMoreElements()) {\n                    Event event = en.nextElement();\n\n                    if (log().isDebugEnabled()) {\n                        // print out the eui, source, and other\n                        // important aspects\n                        //\n                        String uuid = event.getUuid();\n                        log().debug(\"Event {\");\n                        log().debug(\"  uuid  = \" + (uuid != null && uuid.length() > 0 ? uuid : \"<not-set>\"));\n                        log().debug(\"  uei   = \" + event.getUei());\n                        log().debug(\"  src   = \" + event.getSource());\n                        log().debug(\"  iface = \" + event.getInterface());\n                        log().debug(\"  time  = \" + event.getTime());\n                        Parm[] parms = (event.getParms() == null ? null : event.getParms().getParm());\n                        if (parms != null) {\n                            log().debug(\"  parms {\");\n                            for (int x = 0; x < parms.length; x++) {\n                                if ((parms[x].getParmName() != null) && (parms[x].getValue().getContent() != null)) {\n                                    log().debug(\"    (\" + parms[x].getParmName().trim() + \", \" + parms[x].getValue().getContent().trim() + \")\");\n                                }\n                            }\n                            log().debug(\"  }\");\n                        }\n                        log().debug(\"}\");\n                    }\n\n                    // look up eventconf match and expand event\n                    m_eventExpander.expandEvent(event);\n                    try {\n                        // add to database\n                        eventWriter.persistEvent(m_eventLog.getHeader(), event);\n                        // send event to interested listeners\n                        EventIpcManagerFactory.getIpcManager().broadcastNow(event);\n\n                        alarmWriter.persistAlarm(m_eventLog.getHeader(), event);\n                    } catch (SQLException sqle) {\n                        log().warn(\"Unable to add event to database\", sqle);\n                    } catch (Throwable t) {\n                        log().warn(\"Unknown exception processing event\", t);\n                    }\n                }\n            } finally {\n                if (alarmWriter != null) alarmWriter.close();\n            }\n        } finally {\n            \n            // close database related stuff in the eventwriter\n            if (eventWriter != null) eventWriter.close();\n        }\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Called by a service to send a set of events to other listeners.\n     */\n    public synchronized void sendNow(Log eventLog) {\n\n        // create a new event handler for the events and queue it to the\n        // event handler thread pool\n        try {\n            m_eventHandlerPool.getRunQueue().add(new EventHandler(eventLog, m_getNextEventIdStr, m_getNextAlarmIdStr, m_eventExpander));\n        } catch (InterruptedException iE) {\n            log().warn(\"Unable to queue event log to the event handler pool queue\", iE);\n\n            throw new UndeclaredEventException(iE);\n        } catch (FifoQueueException qE) {\n            log().warn(\"Unable to queue event log to the event handler pool queue\", qE);\n\n            throw new UndeclaredEventException(qE);\n        }\n    }","id":7018,"modified_method":"/**\n     * Called by a service to send a set of events to other listeners.\n     */\n    public synchronized void sendNow(Log eventLog) {\n\n        // create a new event handler for the events and queue it to the\n        // event handler thread pool\n        try {\n            m_eventHandlerPool.getRunQueue().add(new EventHandler(eventLog, m_getNextEventIdStr, m_getNextAlarmIdStr, m_eventExpander, m_eventdServiceManager, m_dataSource));\n        } catch (InterruptedException iE) {\n            log().warn(\"Unable to queue event log to the event handler pool queue\", iE);\n\n            throw new UndeclaredEventException(iE);\n        } catch (FifoQueueException qE) {\n            log().warn(\"Unable to queue event log to the event handler pool queue\", qE);\n\n            throw new UndeclaredEventException(qE);\n        }\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void afterPropertiesSet() {\n        Assert.state(m_eventdConfigMgr != null, \"eventdConfigMgr not set\");\n        Assert.state(m_eventExpander != null, \"eventExpander not set\");\n        \n        m_ueiListeners = new HashMap<String, List<EventListener>>();\n        m_listeners = new ArrayList<EventListener>();\n        m_listenerThreads = new HashMap<String, ListenerThread>();\n\n        // get number of threads\n        int numReceivers = m_eventdConfigMgr.getReceivers();\n        // create handler pool\n        m_eventHandlerPool = new RunnableConsumerThreadPool(\"EventHandlerPool\", 0.6f, 1.0f, numReceivers);\n        // start pool\n        m_eventHandlerPool.start();\n        // database sequence query string\n        m_getNextEventIdStr = m_eventdConfigMgr.getGetNextEventID();\n        m_getNextAlarmIdStr = m_eventdConfigMgr.getGetNextAlarmID();\n    }","id":7019,"modified_method":"public synchronized void afterPropertiesSet() {\n        Assert.state(m_eventdConfigMgr != null, \"eventdConfigMgr not set\");\n        Assert.state(m_eventExpander != null, \"eventExpander not set\");\n        Assert.state(m_dataSource != null, \"dataSource not set\");\n        Assert.state(m_eventdServiceManager != null, \"eventdServiceManager not set\");\n        \n        m_ueiListeners = new HashMap<String, List<EventListener>>();\n        m_listeners = new ArrayList<EventListener>();\n        m_listenerThreads = new HashMap<String, ListenerThread>();\n\n        // get number of threads\n        int numReceivers = m_eventdConfigMgr.getReceivers();\n        // create handler pool\n        m_eventHandlerPool = new RunnableConsumerThreadPool(\"EventHandlerPool\", 0.6f, 1.0f, numReceivers);\n        // start pool\n        m_eventHandlerPool.start();\n        // database sequence query string\n        m_getNextEventIdStr = m_eventdConfigMgr.getGetNextEventID();\n        m_getNextAlarmIdStr = m_eventdConfigMgr.getGetNextAlarmID();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testInit() throws Exception {\n        EventIpcManagerDefaultImpl manager = new EventIpcManagerDefaultImpl();\n        manager.setEventdConfigMgr(EventdConfigFactory.getInstance());\n        EventExpander eventExpander = new EventExpander();\n        eventExpander.setEventConfDao(EasyMock.createMock(EventConfDao.class));\n        eventExpander.afterPropertiesSet();\n        manager.setEventExpander(eventExpander);\n        manager.afterPropertiesSet();\n    }","id":7020,"modified_method":"public void testInit() throws Exception {\n        EventIpcManagerDefaultImpl manager = new EventIpcManagerDefaultImpl();\n        manager.setEventdConfigMgr(EventdConfigFactory.getInstance());\n        EventExpander eventExpander = new EventExpander();\n        eventExpander.setEventConfDao(EasyMock.createMock(EventConfDao.class));\n        eventExpander.afterPropertiesSet();\n        manager.setEventExpander(eventExpander);\n        manager.setDataSource(EasyMock.createMock(DataSource.class));\n        manager.setEventdServiceManager(EasyMock.createMock(EventdServiceManager.class));\n        manager.afterPropertiesSet();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * The method that inserts the event into the database\n     * \n     * @param eventHeader\n     *            the event header\n     * @param event\n     *            the actual event to be inserted\n     */\n    public void persistEvent(Header eventHeader, Event event) throws SQLException {\n        if (event != null) {\n            Category log = ThreadCategory.getInstance(EventWriter.class);\n\n            // Check value of <logmsg> attribute 'dest', if set to\n            // \"donotpersist\" then simply return, the uei is not to be\n            // persisted to the database\n            String logdest = event.getLogmsg().getDest();\n            if (logdest.equals(\"donotpersist\")) {\n                log.debug(\"EventWriter: uei '\" + event.getUei() + \"' marked as 'doNotPersist'.\");\n                return;\n            } else {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"EventWriter dbRun for : \" + event.getUei() + \" nodeid: \" + event.getNodeid() + \" ipaddr: \" + event.getInterface() + \" serviceid: \" + event.getService());\n                }\n            }\n\n            try {\n                insertEvent(eventHeader, event);\n\n                // commit\n                m_dsConn.commit();\n            } catch (SQLException e) {\n                log.warn(\"Error inserting event into the datastore\", e);\n                try {\n                    m_dsConn.rollback();\n                } catch (Exception e2) {\n                    log.warn(\"Rollback of transaction failed!\", e2);\n                }\n\n                throw e;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"EventWriter finished for : \" + event.getUei());\n            }\n        }\n    }","id":7021,"modified_method":"/**\n     * The method that inserts the event into the database\n     * \n     * @param eventHeader\n     *            the event header\n     * @param event\n     *            the actual event to be inserted\n     */\n    public void persistEvent(Header eventHeader, Event event) throws SQLException {\n        if (event != null) {\n            // Check value of <logmsg> attribute 'dest', if set to\n            // \"donotpersist\" then simply return, the uei is not to be\n            // persisted to the database\n            String logdest = event.getLogmsg().getDest();\n            if (logdest.equals(\"donotpersist\")) {\n                log().debug(\"EventWriter: uei '\" + event.getUei() + \"' marked as 'doNotPersist'.\");\n                return;\n            } else {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"EventWriter dbRun for : \" + event.getUei() + \" nodeid: \" + event.getNodeid() + \" ipaddr: \" + event.getInterface() + \" serviceid: \" + event.getService());\n                }\n            }\n\n            try {\n                insertEvent(eventHeader, event);\n\n                // commit\n                m_dsConn.commit();\n            } catch (SQLException e) {\n                log().warn(\"Error inserting event into the datastore\", e);\n                try {\n                    m_dsConn.rollback();\n                } catch (Exception e2) {\n                    log().warn(\"Rollback of transaction failed!\", e2);\n                }\n\n                throw e;\n            }\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"EventWriter finished for : \" + event.getUei());\n            }\n        }\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void close() {\n        try {\n            m_getSvcIdStmt.close();\n            m_getHostNameStmt.close();\n            m_getNextIdStmt.close();\n            m_insStmt.close();\n        } catch (SQLException sqle) {\n            ThreadCategory.getInstance(EventWriter.class).warn(\"SQLException while closing prepared statements\", sqle);\n        } finally {\n            super.close();\n        }\n    }","id":7022,"modified_method":"public void close() {\n        try {\n            m_getHostNameStmt.close();\n            m_getNextIdStmt.close();\n            m_insStmt.close();\n        } catch (SQLException e) {\n            log().warn(\"SQLException while closing prepared statements: \" + e, e);\n        } finally {\n            super.close();\n        }\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor\n     * @param connectionFactory \n     * @param getNextEventIdStr\n     */\n    public EventWriter(String getNextEventIdStr) throws SQLException {\n        super();\n        //\n        // prepare the SQL statement\n        //\n        m_getSvcIdStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_SVCNAME_TO_SVCID);\n        m_getHostNameStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_HOSTIP_TO_HOSTNAME);\n        m_getNextIdStmt = m_dsConn.prepareStatement(getNextEventIdStr);\n        m_insStmt = m_dsConn.prepareStatement(EventdConstants.SQL_DB_INS_EVENT);\n        // set the database for rollback support\n        //\n        try {\n            m_dsConn.setAutoCommit(false);\n        } catch (SQLException se) {\n            ThreadCategory.getInstance(EventWriter.class).warn(\"Unable to set auto commit mode\");\n        }\n    }","id":7023,"modified_method":"public EventWriter() {\n        super();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        \n        DataSourceFactory.setInstance(getDataSource());\n    }","id":7024,"modified_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        \n        JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n        eventdServiceManager.setDataSource(getDataSource());\n        eventdServiceManager.afterPropertiesSet();\n        \n        m_eventWriter = new EventWriter();\n        m_eventWriter.setEventdServiceManager(eventdServiceManager);\n        m_eventWriter.setDataSource(getDataSource());\n        m_eventWriter.setGetNextEventIdStr(\"SELECT nextval('eventsNxtId')\");\n        m_eventWriter.afterPropertiesSet();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventDescrWithNull() throws SQLException {\n        \n        EventWriter eWriter = new EventWriter(\"SELECT nextval('eventsNxtId')\");\n        \n        try {\n            EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n            bldr.setLogDest(\"logndisplay\");\n        \n            bldr.setDescription(\"abc\\u0000def\");\n        \n            eWriter.persistEvent(null, bldr.getEvent());\n        \n        } finally {\n            eWriter.close();\n        }\n    }","id":7025,"modified_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventDescrWithNull() throws Exception {\n        EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n        bldr.setLogDest(\"logndisplay\");\n\n        bldr.setDescription(\"abc\\u0000def\");\n\n        m_eventWriter.persistEvent(null, bldr.getEvent());\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * tests sequence of newly initialized db\n     */\n    public void testNextEventId() {\n        int nextId = getJdbcTemplate().queryForInt(\"SELECT nextval('eventsNxtId')\");\n        System.err.println(nextId);\n        \n        // an empty db should produce '1' here\n        assertEquals(1, nextId);\n    }","id":7026,"modified_method":"/**\n     * tests sequence of newly initialized db\n     */\n    public void testNextEventId() {\n        int nextId = getJdbcTemplate().queryForInt(m_eventWriter.getGetNextEventIdStr());\n        \n        // an empty db should produce '1' here\n        assertEquals(1, nextId);\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventWithNull() throws SQLException {\n        \n        EventWriter eWriter = new EventWriter(\"SELECT nextval('eventsNxtId')\");\n        \n        try {\n            EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n            bldr.setLogDest(\"logndisplay\");\n            bldr.addParam(\"test\", \"testVal\");\n            bldr.addParam(\"test2\", \"valWith\\u0000Null\\u0000\");\n\n            byte[] bytes = new byte[] { 0x07, (byte)0xD7, 0x04, 0x0A, 0x01, 0x17, 0x06, 0x00, 0x2B, 0x00, 0x00 };\n\n\n            SnmpValue snmpVal = SnmpUtils.getValueFactory().getOctetString(bytes);\n\n            assertFalse(snmpVal.isDisplayable());\n\n            bldr.addParam(\"test3\", snmpVal.toString());\n\n            String b64 = EventConstants.toString(EventConstants.XML_ENCODING_BASE64, snmpVal);\n\n            System.err.println(b64);\n\n            bldr.addParam(\"test\", b64);\n\n            System.err.println(snmpVal.toString());\n\n            eWriter.persistEvent(null, bldr.getEvent());\n\n        } finally {\n            eWriter.close();\n        }\n    }","id":7027,"modified_method":"/**\n     * Tests writing nulls to postgres db and the db encoding.\n     * @throws SQLException\n     */\n    public void testWriteEventWithNull() throws Exception {\n        EventBuilder bldr = new EventBuilder(\"testUei\", \"testSource\");\n        bldr.setLogDest(\"logndisplay\");\n        bldr.addParam(\"test\", \"testVal\");\n        bldr.addParam(\"test2\", \"valWith\\u0000Null\\u0000\");\n\n        byte[] bytes = new byte[] { 0x07, (byte)0xD7, 0x04, 0x0A, 0x01, 0x17, 0x06, 0x00, 0x2B, 0x00, 0x00 };\n\n\n        SnmpValue snmpVal = SnmpUtils.getValueFactory().getOctetString(bytes);\n\n        assertFalse(snmpVal.isDisplayable());\n\n        bldr.addParam(\"test3\", snmpVal.toString());\n\n        String b64 = EventConstants.toString(EventConstants.XML_ENCODING_BASE64, snmpVal);\n\n        bldr.addParam(\"test\", b64);\n\n        m_eventWriter.persistEvent(null, bldr.getEvent());\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onInit() {\n        Assert.state(m_dataSource != null, \"dataSource not initialized\");\n        Assert.state(m_eventConfDao != null, \"eventConfDao not initialized\");\n        \n        createBroadcastEventProcessor(m_eventIpcManager);\n\n        initializeServiceTableMap();\n\n        initializeExternalIpcReceivers();\n    }","id":7028,"modified_method":"protected void onInit() {\n        Assert.state(m_eventConfDao != null, \"property eventConfDao must be set\");\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        \n        createBroadcastEventProcessor(m_eventIpcManager);\n\n        m_eventdServiceManager.dataSourceSync();\n\n        initializeExternalIpcReceivers();\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventd = new Eventd();\n                m_eventd.setDataSource(m_db);\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                m_eventd.setConfigManager(m_eventdConfigMgr);\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setEventConfDao(eventConfDao);\n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","id":7029,"modified_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setConfigManager(m_eventdConfigMgr);\n\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setEventConfDao(eventConfDao);\n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","id":7030,"modified_method":"protected Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is used to convert the service name into a service id. It\n     * first looks up the information from a service map of Eventd and if no\n     * match is found, by performing a lookup in the database. If the conversion\n     * is successful then the corresponding integer identifier will be returned\n     * to the caller.\n     * \n     * @param name\n     *            The name of the service\n     * \n     * @return The integer identifier for the service name.\n     * \n     * @exception java.sql.SQLException\n     *                Thrown if there is an error accessing the stored data or\n     *                the SQL text is malformed. This will also be thrown if the\n     *                result cannot be obtained.\n     * \n     * @see EventdConstants#SQL_DB_SVCNAME_TO_SVCID\n     * \n     */\n    private int getServiceID(String name) throws SQLException {\n        Assert.notNull(name, \"The service name must not be null\");\n\n        // ask persistd\n        int id = Eventd.getServiceID(name);\n        if (id != -1) {\n            return id;\n        }\n\n        // talk to the database and get the identifer\n        m_getSvcIdStmt.setString(1, name);\n        ResultSet rset = null;\n        try {\n            rset = m_getSvcIdStmt.executeQuery();\n            if (rset.next()) {\n                id = rset.getInt(1);\n            }\n        } catch (SQLException e) {\n            throw e;\n        } finally {\n            rset.close();\n        }\n\n        // inform persistd about the new find\n        if (id != -1) {\n            Eventd.addServiceMapping(name, id);\n        }\n\n        return id;\n    }","id":7031,"modified_method":"/**\n     * This method is used to convert the service name into a service id. It\n     * first looks up the information from a service map of Eventd and if no\n     * match is found, by performing a lookup in the database. If the conversion\n     * is successful then the corresponding integer identifier will be returned\n     * to the caller.\n     * \n     * @param name\n     *            The name of the service\n     * \n     * @return The integer identifier for the service name.\n     * \n     * @exception java.sql.SQLException\n     *                Thrown if there is an error accessing the stored data or\n     *                the SQL text is malformed. This will also be thrown if the\n     *                result cannot be obtained.\n     * \n     * @see EventdConstants#SQL_DB_SVCNAME_TO_SVCID\n     * \n     */\n    private int getServiceID(String name) throws SQLException {\n        return m_eventdServiceManager.getServiceId(name);\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor\n     * @param connectionFactory \n     */\n    public Persist() throws SQLException {\n        // Get a database connection\n        m_dsConn = DataSourceFactory.getInstance().getConnection();\n    }","id":7032,"modified_method":"public Persist() {\n    }","commit_id":"d6d088f995b9b736544495de942f424cf0e8724e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Nonnull\n    @Override\n    public NodeState initialize(NodeState workspaceRoot, String workspaceName, QueryIndexProvider indexProvider, CommitHook commitHook) {\n        NodeBuilder root = workspaceRoot.builder();\n\n        // property index for rep:principalName stored in ACEs\n        NodeBuilder index = IndexUtils.getOrCreateOakIndex(root);\n        if (!index.hasChildNode(\"acPrincipalName\")) {\n            IndexUtils.createIndexDefinition(index, \"acPrincipalName\", true, false,\n                    ImmutableList.<String>of(REP_PRINCIPAL_NAME),\n                    ImmutableList.<String>of(NT_REP_DENY_ACE, NT_REP_GRANT_ACE, NT_REP_ACE));\n        }\n\n        // create the permission store and the root for this workspace.\n        NodeBuilder permissionStore = root.child(JCR_SYSTEM).child(REP_PERMISSION_STORE);\n        if (!permissionStore.hasProperty(JCR_PRIMARYTYPE)) {\n            permissionStore.setProperty(JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n        if (!permissionStore.hasChildNode(workspaceName)) {\n            permissionStore.child(workspaceName).setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n        return root.getNodeState();\n    }","id":7033,"modified_method":"@Override\n    public void initialize(\n            NodeBuilder builder, String workspaceName,\n            QueryIndexProvider indexProvider, CommitHook commitHook) {\n        // property index for rep:principalName stored in ACEs\n        NodeBuilder index = IndexUtils.getOrCreateOakIndex(builder);\n        if (!index.hasChildNode(\"acPrincipalName\")) {\n            IndexUtils.createIndexDefinition(index, \"acPrincipalName\", true, false,\n                    ImmutableList.<String>of(REP_PRINCIPAL_NAME),\n                    ImmutableList.<String>of(NT_REP_DENY_ACE, NT_REP_GRANT_ACE, NT_REP_ACE));\n        }\n\n        // create the permission store and the root for this workspace.\n        NodeBuilder permissionStore =\n                builder.child(JCR_SYSTEM).child(REP_PERMISSION_STORE);\n        if (!permissionStore.hasProperty(JCR_PRIMARYTYPE)) {\n            permissionStore.setProperty(JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n        if (!permissionStore.hasChildNode(workspaceName)) {\n            permissionStore.child(workspaceName).setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n    }","commit_id":"29e6e165776de4eed7958c504d682b6d96e0f2b5","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public static void initialize(@Nonnull Iterable<WorkspaceInitializer> initializer,\n                                  @Nonnull NodeStore store,\n                                  @Nonnull String workspaceName,\n                                  @Nonnull IndexEditorProvider indexEditor,\n                                  @Nonnull QueryIndexProvider indexProvider,\n                                  @Nonnull CommitHook commitHook) {\n        NodeStoreBranch branch = store.branch();\n        NodeState root = branch.getHead();\n        for (WorkspaceInitializer wspInit : initializer) {\n            root = wspInit.initialize(root, workspaceName, indexProvider, commitHook);\n        }\n        branch.setRoot(root);\n        try {\n            branch.merge(new EditorHook(new IndexUpdateProvider(indexEditor)), PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7034,"modified_method":"public static void initialize(@Nonnull Iterable<WorkspaceInitializer> initializer,\n                                  @Nonnull NodeStore store,\n                                  @Nonnull String workspaceName,\n                                  @Nonnull IndexEditorProvider indexEditor,\n                                  @Nonnull QueryIndexProvider indexProvider,\n                                  @Nonnull CommitHook commitHook) {\n        NodeBuilder builder = store.getRoot().builder();\n        for (WorkspaceInitializer wspInit : initializer) {\n            wspInit.initialize(builder, workspaceName, indexProvider, commitHook);\n        }\n        try {\n            store.merge(\n                    builder,\n                    new EditorHook(new IndexUpdateProvider(indexEditor)),\n                    PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"29e6e165776de4eed7958c504d682b6d96e0f2b5","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Nonnull\n    @Override\n    public NodeState initialize(NodeState workspaceRoot, String workspaceName,\n                                QueryIndexProvider indexProvider,\n                                CommitHook commitHook) {\n        MemoryNodeStore store = new MemoryNodeStore();\n        NodeStoreBranch branch = store.branch();\n        branch.setRoot(workspaceRoot);\n        try {\n            branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n\n        Root root = new SystemRoot(store, commitHook, workspaceName, securityProvider, indexProvider);\n\n        UserConfiguration userConfiguration = securityProvider.getConfiguration(UserConfiguration.class);\n        UserManager userManager = userConfiguration.getUserManager(root, NamePathMapper.DEFAULT);\n\n        String errorMsg = \"Failed to initialize user content.\";\n        try {\n            NodeUtil rootTree = checkNotNull(new NodeUtil(root.getTree(\"/\")));\n            NodeUtil index = rootTree.getOrAddChild(IndexConstants.INDEX_DEFINITIONS_NAME, JcrConstants.NT_UNSTRUCTURED);\n\n            if (!index.hasChild(\"authorizableId\")) {\n                IndexUtils.createIndexDefinition(index, \"authorizableId\", true, new String[]{REP_AUTHORIZABLE_ID}, null);\n            }\n            if (!index.hasChild(\"principalName\")) {\n                IndexUtils.createIndexDefinition(index, \"principalName\", true,\n                        new String[]{REP_PRINCIPAL_NAME},\n                        new String[]{NT_REP_AUTHORIZABLE});\n            }\n            if (!index.hasChild(\"members\")) {\n                IndexUtils.createIndexDefinition(index, \"members\", false, new String[]{UserConstants.REP_MEMBERS}, null);\n            }\n\n            ConfigurationParameters params = userConfiguration.getParameters();\n            String adminId = params.getConfigValue(PARAM_ADMIN_ID, DEFAULT_ADMIN_ID);\n            if (userManager.getAuthorizable(adminId) == null) {\n                boolean omitPw = params.getConfigValue(PARAM_OMIT_ADMIN_PW, false);\n                userManager.createUser(adminId, (omitPw) ? null : adminId);\n            }\n            String anonymousId = Strings.emptyToNull(params.getConfigValue(PARAM_ANONYMOUS_ID, DEFAULT_ANONYMOUS_ID, String.class));\n            if (anonymousId != null && userManager.getAuthorizable(anonymousId) == null) {\n                userManager.createUser(anonymousId, null);\n            }\n            if (root.hasPendingChanges()) {\n                root.commit();\n            }\n        } catch (RepositoryException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        } catch (CommitFailedException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        }\n\n        return store.getRoot();\n    }","id":7035,"modified_method":"@Override\n    public void initialize(\n            NodeBuilder builder, String workspaceName,\n            QueryIndexProvider indexProvider, CommitHook commitHook) {\n        NodeState base = builder.getNodeState();\n        MemoryNodeStore store = new MemoryNodeStore(base);\n\n        Root root = new SystemRoot(store, commitHook, workspaceName, securityProvider, indexProvider);\n\n        UserConfiguration userConfiguration = securityProvider.getConfiguration(UserConfiguration.class);\n        UserManager userManager = userConfiguration.getUserManager(root, NamePathMapper.DEFAULT);\n\n        String errorMsg = \"Failed to initialize user content.\";\n        try {\n            NodeUtil rootTree = checkNotNull(new NodeUtil(root.getTree(\"/\")));\n            NodeUtil index = rootTree.getOrAddChild(IndexConstants.INDEX_DEFINITIONS_NAME, JcrConstants.NT_UNSTRUCTURED);\n\n            if (!index.hasChild(\"authorizableId\")) {\n                IndexUtils.createIndexDefinition(index, \"authorizableId\", true, new String[]{REP_AUTHORIZABLE_ID}, null);\n            }\n            if (!index.hasChild(\"principalName\")) {\n                IndexUtils.createIndexDefinition(index, \"principalName\", true,\n                        new String[]{REP_PRINCIPAL_NAME},\n                        new String[]{NT_REP_AUTHORIZABLE});\n            }\n            if (!index.hasChild(\"members\")) {\n                IndexUtils.createIndexDefinition(index, \"members\", false, new String[]{UserConstants.REP_MEMBERS}, null);\n            }\n\n            ConfigurationParameters params = userConfiguration.getParameters();\n            String adminId = params.getConfigValue(PARAM_ADMIN_ID, DEFAULT_ADMIN_ID);\n            if (userManager.getAuthorizable(adminId) == null) {\n                boolean omitPw = params.getConfigValue(PARAM_OMIT_ADMIN_PW, false);\n                userManager.createUser(adminId, (omitPw) ? null : adminId);\n            }\n            String anonymousId = Strings.emptyToNull(params.getConfigValue(PARAM_ANONYMOUS_ID, DEFAULT_ANONYMOUS_ID, String.class));\n            if (anonymousId != null && userManager.getAuthorizable(anonymousId) == null) {\n                userManager.createUser(anonymousId, null);\n            }\n            if (root.hasPendingChanges()) {\n                root.commit();\n            }\n        } catch (RepositoryException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        } catch (CommitFailedException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        }\n\n        NodeState target = store.getRoot();\n        target.compareAgainstBaseState(base, new ApplyDiff(builder));\n    }","commit_id":"29e6e165776de4eed7958c504d682b6d96e0f2b5","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Nonnull\n    @Override\n    public NodeState initialize(NodeState workspaceRoot, String workspaceName, QueryIndexProvider indexProvider, CommitHook commitHook) {\n        NodeBuilder root = workspaceRoot.builder();\n\n        // property index for rep:principalName stored in ACEs\n        NodeBuilder index = IndexUtils.getOrCreateOakIndex(root);\n        if (!index.hasChildNode(\"acPrincipalName\")) {\n            IndexUtils.createIndexDefinition(index, \"acPrincipalName\", true, false,\n                    ImmutableList.<String>of(REP_PRINCIPAL_NAME),\n                    ImmutableList.<String>of(NT_REP_DENY_ACE, NT_REP_GRANT_ACE, NT_REP_ACE));\n        }\n\n        // create the permission store and the root for this workspace.\n        NodeBuilder permissionStore = root.child(JCR_SYSTEM).child(REP_PERMISSION_STORE);\n        if (!permissionStore.hasProperty(JCR_PRIMARYTYPE)) {\n            permissionStore.setProperty(JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n        if (!permissionStore.hasChildNode(workspaceName)) {\n            permissionStore.child(workspaceName).setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n        return root.getNodeState();\n    }","id":7036,"modified_method":"@Nonnull\n    @Override\n    public void initialize(NodeBuilder builder, String workspaceName, QueryIndexProvider indexProvider, CommitHook commitHook) {\n        // property index for rep:principalName stored in ACEs\n        NodeBuilder index = IndexUtils.getOrCreateOakIndex(builder);\n        if (!index.hasChildNode(\"acPrincipalName\")) {\n            IndexUtils.createIndexDefinition(index, \"acPrincipalName\", true, false,\n                    ImmutableList.<String>of(REP_PRINCIPAL_NAME),\n                    ImmutableList.<String>of(NT_REP_DENY_ACE, NT_REP_GRANT_ACE, NT_REP_ACE));\n        }\n\n        // create the permission store and the root for this workspace.\n        NodeBuilder permissionStore = builder.child(JCR_SYSTEM).child(REP_PERMISSION_STORE);\n        if (!permissionStore.hasProperty(JCR_PRIMARYTYPE)) {\n            permissionStore.setProperty(JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n        if (!permissionStore.hasChildNode(workspaceName)) {\n            permissionStore.child(workspaceName).setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PERMISSION_STORE, Type.NAME);\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        NodeState newState = state;\n        for (RepositoryInitializer tracker : initializers) {\n            newState = tracker.initialize(newState);\n        }\n        return newState;\n    }","id":7037,"modified_method":"@Override\n    public void initialize(@Nonnull NodeBuilder builder) {\n        for (RepositoryInitializer tracker : initializers) {\n            tracker.initialize(builder);\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        NodeBuilder root = state.builder();\n        root.setProperty(JCR_PRIMARYTYPE, NT_REP_ROOT, Type.NAME);\n\n        if (!root.hasChildNode(JCR_SYSTEM)) {\n            NodeBuilder system = root.child(JCR_SYSTEM);\n            system.setProperty(JCR_PRIMARYTYPE, NT_REP_SYSTEM, Type.NAME);\n\n            system.child(JCR_VERSIONSTORAGE)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_VERSIONSTORAGE, Type.NAME);\n            system.child(JCR_NODE_TYPES)\n                    .setProperty(JCR_PRIMARYTYPE, NT_REP_NODE_TYPES, Type.NAME);\n            system.child(VersionConstants.JCR_ACTIVITIES)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_ACTIVITIES, Type.NAME);\n        }\n\n        if (!root.hasChildNode(IndexConstants.INDEX_DEFINITIONS_NAME)) {\n            NodeBuilder index = IndexUtils.getOrCreateOakIndex(root);\n\n            IndexUtils.createIndexDefinition(index, \"uuid\", true, true,\n                    ImmutableList.<String>of(JCR_UUID), null);\n            NodeBuilder nt = \n                    IndexUtils.createIndexDefinition(index, \"nodetype\", true, false,\n                    ImmutableList.of(JCR_PRIMARYTYPE, JCR_MIXINTYPES), null);\n            // the cost of using the property index for \"@primaryType is not null\" is very high\n            nt.setProperty(IndexConstants.ENTRY_COUNT_PROPERTY_NAME, Long.valueOf(Long.MAX_VALUE));\n        }\n        NodeStore store = new MemoryNodeStore();\n        NodeStoreBranch branch = store.branch();\n        branch.setRoot(root.getNodeState());\n        try {\n            branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n        BuiltInNodeTypes.register(new SystemRoot(store, new EditorHook(new RegistrationEditorProvider())));\n        return store.getRoot();\n    }","id":7038,"modified_method":"@Override\n    public void initialize(NodeBuilder builder) {\n        builder.setProperty(JCR_PRIMARYTYPE, NT_REP_ROOT, Type.NAME);\n\n        if (!builder.hasChildNode(JCR_SYSTEM)) {\n            NodeBuilder system = builder.child(JCR_SYSTEM);\n            system.setProperty(JCR_PRIMARYTYPE, NT_REP_SYSTEM, Type.NAME);\n\n            system.child(JCR_VERSIONSTORAGE)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_VERSIONSTORAGE, Type.NAME);\n            system.child(JCR_NODE_TYPES)\n                    .setProperty(JCR_PRIMARYTYPE, NT_REP_NODE_TYPES, Type.NAME);\n            system.child(VersionConstants.JCR_ACTIVITIES)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_ACTIVITIES, Type.NAME);\n        }\n\n        if (!builder.hasChildNode(IndexConstants.INDEX_DEFINITIONS_NAME)) {\n            NodeBuilder index = IndexUtils.getOrCreateOakIndex(builder);\n\n            IndexUtils.createIndexDefinition(index, \"uuid\", true, true,\n                    ImmutableList.<String>of(JCR_UUID), null);\n            NodeBuilder nt = \n                    IndexUtils.createIndexDefinition(index, \"nodetype\", true, false,\n                    ImmutableList.of(JCR_PRIMARYTYPE, JCR_MIXINTYPES), null);\n            // the cost of using the property index for \"@primaryType is not null\" is very high\n            nt.setProperty(IndexConstants.ENTRY_COUNT_PROPERTY_NAME, Long.valueOf(Long.MAX_VALUE));\n        }\n\n        NodeStore store = new MemoryNodeStore(builder.getNodeState());\n        BuiltInNodeTypes.register(new SystemRoot(store, new EditorHook(new RegistrationEditorProvider())));\n        builder.reset(store.getRoot());\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public LuceneInitializerHelper async() {\n        async = \"async\";\n        return this;\n    }","id":7039,"modified_method":"@Override\n    public void initialize(NodeBuilder builder) {\n        if (builder.hasChildNode(INDEX_DEFINITIONS_NAME)\n                && builder.getChildNode(INDEX_DEFINITIONS_NAME).hasChildNode(name)) {\n            // do nothing\n        } else if (filePath == null) {\n            newLuceneIndexDefinition(\n                    builder.child(INDEX_DEFINITIONS_NAME),\n                    name, propertyTypes, excludes, async);\n        } else {\n            newLuceneFileIndexDefinition(\n                    builder.child(INDEX_DEFINITIONS_NAME),\n                    name, propertyTypes, excludes, filePath, async);\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak()\n                .with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public NodeState initialize(NodeState state) {\n                        NodeBuilder root = state.builder();\n                        createIndexDefinition(getOrCreateOakIndex(root), \"pid\",\n                                true, false, ImmutableList.of(\"pid\"), null);\n                        createIndexDefinition(\n                                getOrCreateOakIndex(root.child(\"content\")),\n                                \"pid\", true, false, ImmutableList.of(\"pid\"),\n                                null);\n                        return root.getNodeState();\n                    }\n                }).with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","id":7040,"modified_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak()\n                .with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public void initialize(NodeBuilder builder) {\n                        createIndexDefinition(\n                                getOrCreateOakIndex(builder), \"pid\",\n                                true, false, ImmutableList.of(\"pid\"), null);\n                        createIndexDefinition(\n                                getOrCreateOakIndex(builder.child(\"content\")),\n                                \"pid\", true, false, ImmutableList.of(\"pid\"),\n                                null);\n                    }\n                })\n                .with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public static void initialize(@Nonnull Iterable<WorkspaceInitializer> initializer,\n                                  @Nonnull NodeStore store,\n                                  @Nonnull String workspaceName,\n                                  @Nonnull IndexEditorProvider indexEditor,\n                                  @Nonnull QueryIndexProvider indexProvider,\n                                  @Nonnull CommitHook commitHook) {\n        NodeStoreBranch branch = store.branch();\n        NodeState root = branch.getHead();\n        for (WorkspaceInitializer wspInit : initializer) {\n            root = wspInit.initialize(root, workspaceName, indexProvider, commitHook);\n        }\n        branch.setRoot(root);\n        try {\n            branch.merge(new EditorHook(new IndexUpdateProvider(indexEditor)), PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7041,"modified_method":"public static void initialize(@Nonnull Iterable<WorkspaceInitializer> initializer,\n                                  @Nonnull NodeStore store,\n                                  @Nonnull String workspaceName,\n                                  @Nonnull IndexEditorProvider indexEditor,\n                                  @Nonnull QueryIndexProvider indexProvider,\n                                  @Nonnull CommitHook commitHook) {\n        NodeBuilder builder = store.getRoot().builder();\n        for (WorkspaceInitializer wspInit : initializer) {\n            wspInit.initialize(builder, workspaceName, indexProvider, commitHook);\n        }\n        try {\n            store.merge(builder, new EditorHook(new IndexUpdateProvider(indexEditor)), PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public static void initialize(@Nonnull NodeStore store,\n                                  @Nonnull RepositoryInitializer initializer,\n                                  @Nonnull IndexEditorProvider indexEditor) {\n        NodeStoreBranch branch = store.branch();\n        NodeState before = branch.getHead();\n        branch.setRoot(initializer.initialize(before));\n        try {\n            branch.merge(new EditorHook(new IndexUpdateProvider(indexEditor)), PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7042,"modified_method":"public static void initialize(@Nonnull NodeStore store,\n                                  @Nonnull RepositoryInitializer initializer,\n                                  @Nonnull IndexEditorProvider indexEditor) {\n        NodeBuilder builder = store.getRoot().builder();\n        initializer.initialize(builder);\n        try {\n            store.merge(builder, new EditorHook(new IndexUpdateProvider(indexEditor)), PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        return new CompositeInitializer(getServices()).initialize(state);\n    }","id":7043,"modified_method":"@Override\n    public void initialize(NodeBuilder builder) {\n        new CompositeInitializer(getServices()).initialize(builder);\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        NodeBuilder root = state.builder();\n        NodeBuilder system = root.child(JcrConstants.JCR_SYSTEM);\n        system.setProperty(JcrConstants.JCR_PRIMARYTYPE, NodeTypeConstants.NT_REP_SYSTEM, Type.NAME);\n\n        if (!system.hasChildNode(REP_PRIVILEGES)) {\n            NodeBuilder privileges = system.child(REP_PRIVILEGES);\n            privileges.setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PRIVILEGES, Type.NAME);\n\n            NodeStore store = new MemoryNodeStore();\n            NodeStoreBranch branch = store.branch();\n            try {\n                branch.setRoot(root.getNodeState());\n                branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n            } catch (CommitFailedException e) {\n                log.error(\"Failed to initialize privilege content \", e);\n                throw new RuntimeException(e);\n            }\n\n            try {\n                new PrivilegeDefinitionWriter(new SystemRoot(store)).writeBuiltInDefinitions();\n            } catch (RepositoryException e) {\n                log.error(\"Failed to register built-in privileges\", e);\n                throw new RuntimeException(e);\n            }\n            return store.getRoot();\n        }\n        return root.getNodeState();\n    }","id":7044,"modified_method":"@Override\n    public void initialize(NodeBuilder builder) {\n        NodeBuilder system = builder.child(JcrConstants.JCR_SYSTEM);\n        system.setProperty(JcrConstants.JCR_PRIMARYTYPE, NodeTypeConstants.NT_REP_SYSTEM, Type.NAME);\n\n        if (!system.hasChildNode(REP_PRIVILEGES)) {\n            NodeBuilder privileges = system.child(REP_PRIVILEGES);\n            privileges.setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PRIVILEGES, Type.NAME);\n\n            NodeStore store = new MemoryNodeStore(builder.getNodeState());\n            try {\n                new PrivilegeDefinitionWriter(new SystemRoot(store)).writeBuiltInDefinitions();\n                builder.reset(store.getRoot());\n            } catch (RepositoryException e) {\n                log.error(\"Failed to register built-in privileges\", e);\n                throw new RuntimeException(e);\n            }\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testCustomConfigPropertyLookup() throws Exception {\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"fooIndex\", true, false, ImmutableSet.of(\"foo\", \"extrafoo\"),\n                null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\")\n                .setProperty(\"extrafoo\", \"pqr\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        // Add an index\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(ImmutableSet.of(\"a\"), find(lookup, \"extrafoo\", \"pqr\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","id":7045,"modified_method":"@Test\n    public void testCustomConfigPropertyLookup() throws Exception {\n        NodeState root = InitialContent.INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"fooIndex\", true, false, ImmutableSet.of(\"foo\", \"extrafoo\"),\n                null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\")\n                .setProperty(\"extrafoo\", \"pqr\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        // Add an index\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(ImmutableSet.of(\"a\"), find(lookup, \"extrafoo\", \"pqr\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see <a href=\"https://issues.apache.org/jira/browse/OAK-666\">OAK-666:\n     *      Property2Index: node type is used when indexing, but ignored when\n     *      querying<\/a>\n     */\n    @Test\n    public void testCustomConfigNodeType() throws Exception {\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n\n        // Add index definitions\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);\n        createIndexDefinition(index, \"fooIndex\", true, false,\n                ImmutableSet.of(\"foo\", \"extrafoo\"),\n                ImmutableSet.of(NT_UNSTRUCTURED));\n        createIndexDefinition(index, \"fooIndexFile\", true, false,\n                ImmutableSet.of(\"foo\"), ImmutableSet.of(NT_FILE));\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"abc\");\n        builder.child(\"b\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"), Type.STRINGS);\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_UNSTRUCTURED);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","id":7046,"modified_method":"/**\n     * @see <a href=\"https://issues.apache.org/jira/browse/OAK-666\">OAK-666:\n     *      Property2Index: node type is used when indexing, but ignored when\n     *      querying<\/a>\n     */\n    @Test\n    public void testCustomConfigNodeType() throws Exception {\n        NodeState root = InitialContent.INITIAL_CONTENT;\n\n        // Add index definitions\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);\n        createIndexDefinition(index, \"fooIndex\", true, false,\n                ImmutableSet.of(\"foo\", \"extrafoo\"),\n                ImmutableSet.of(NT_UNSTRUCTURED));\n        createIndexDefinition(index, \"fooIndexFile\", true, false,\n                ImmutableSet.of(\"foo\"), ImmutableSet.of(NT_FILE));\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"abc\");\n        builder.child(\"b\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"), Type.STRINGS);\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_UNSTRUCTURED);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testPropertyLookup() throws Exception {\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(MANY + 2, find(lookup, \"foo\", null, f).size());\n\n        double cost;\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"xyz\"));\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","id":7047,"modified_method":"@Test\n    public void testPropertyLookup() throws Exception {\n        NodeState root = InitialContent.INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(MANY + 2, find(lookup, \"foo\", null, f).size());\n\n        double cost;\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"xyz\"));\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak().with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public NodeState initialize(NodeState state) {\n                        NodeBuilder root = state.builder();\n                        NodeBuilder index = IndexUtils.getOrCreateOakIndex(root);\n                        IndexUtils.createIndexDefinition(index, \"myProp\", true,\n                                false, ImmutableList.<String>of(\"myProp\"), null);\n                        return root.getNodeState();\n                    }\n                })\n                .with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","id":7048,"modified_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak().with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public void initialize(NodeBuilder builder) {\n                        NodeBuilder index = IndexUtils.getOrCreateOakIndex(builder);\n                        IndexUtils.createIndexDefinition(index, \"myProp\", true,\n                                false, ImmutableList.<String>of(\"myProp\"), null);\n                    }\n                })\n                .with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void ignoreHidden() throws CommitFailedException {\n        EditorHook hook = new EditorHook(new TypeEditorProvider());\n\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n        NodeBuilder builder = root.builder();\n\n        NodeState before = builder.getNodeState();\n        builder.child(\":hidden\");\n        NodeState after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.child(\":hidden\").setProperty(\"prop\", \"value\");\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.getChildNode(\":hidden\").remove();\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n    }","id":7049,"modified_method":"@Test\n    public void ignoreHidden() throws CommitFailedException {\n        EditorHook hook = new EditorHook(new TypeEditorProvider());\n\n        NodeState root = InitialContent.INITIAL_CONTENT;\n        NodeBuilder builder = root.builder();\n\n        NodeState before = builder.getNodeState();\n        builder.child(\":hidden\");\n        NodeState after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.child(\":hidden\").setProperty(\"prop\", \"value\");\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.getChildNode(\":hidden\").remove();\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Nonnull\n    @Override\n    public NodeState initialize(NodeState workspaceRoot, String workspaceName,\n                                QueryIndexProvider indexProvider,\n                                CommitHook commitHook) {\n        MemoryNodeStore store = new MemoryNodeStore();\n        NodeStoreBranch branch = store.branch();\n        branch.setRoot(workspaceRoot);\n        try {\n            branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n\n        Root root = new SystemRoot(store, commitHook, workspaceName, securityProvider, indexProvider);\n\n        UserConfiguration userConfiguration = securityProvider.getConfiguration(UserConfiguration.class);\n        UserManager userManager = userConfiguration.getUserManager(root, NamePathMapper.DEFAULT);\n\n        String errorMsg = \"Failed to initialize user content.\";\n        try {\n            NodeUtil rootTree = checkNotNull(new NodeUtil(root.getTree(\"/\")));\n            NodeUtil index = rootTree.getOrAddChild(IndexConstants.INDEX_DEFINITIONS_NAME, JcrConstants.NT_UNSTRUCTURED);\n\n            if (!index.hasChild(\"authorizableId\")) {\n                IndexUtils.createIndexDefinition(index, \"authorizableId\", true, new String[]{REP_AUTHORIZABLE_ID}, null);\n            }\n            if (!index.hasChild(\"principalName\")) {\n                IndexUtils.createIndexDefinition(index, \"principalName\", true,\n                        new String[]{REP_PRINCIPAL_NAME},\n                        new String[]{NT_REP_AUTHORIZABLE});\n            }\n            if (!index.hasChild(\"members\")) {\n                IndexUtils.createIndexDefinition(index, \"members\", false, new String[]{UserConstants.REP_MEMBERS}, null);\n            }\n\n            ConfigurationParameters params = userConfiguration.getParameters();\n            String adminId = params.getConfigValue(PARAM_ADMIN_ID, DEFAULT_ADMIN_ID);\n            if (userManager.getAuthorizable(adminId) == null) {\n                boolean omitPw = params.getConfigValue(PARAM_OMIT_ADMIN_PW, false);\n                userManager.createUser(adminId, (omitPw) ? null : adminId);\n            }\n            String anonymousId = Strings.emptyToNull(params.getConfigValue(PARAM_ANONYMOUS_ID, DEFAULT_ANONYMOUS_ID, String.class));\n            if (anonymousId != null && userManager.getAuthorizable(anonymousId) == null) {\n                userManager.createUser(anonymousId, null);\n            }\n            if (root.hasPendingChanges()) {\n                root.commit();\n            }\n        } catch (RepositoryException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        } catch (CommitFailedException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        }\n        return store.getRoot();\n    }","id":7050,"modified_method":"@Override\n    public void initialize(NodeBuilder builder, String workspaceName,\n                                QueryIndexProvider indexProvider,\n                                CommitHook commitHook) {\n        MemoryNodeStore store = new MemoryNodeStore();\n        NodeStoreBranch branch = store.branch();\n        branch.setRoot(builder.getNodeState());\n        try {\n            branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n\n        Root root = new SystemRoot(store, commitHook, workspaceName, securityProvider, indexProvider);\n\n        UserConfiguration userConfiguration = securityProvider.getConfiguration(UserConfiguration.class);\n        UserManager userManager = userConfiguration.getUserManager(root, NamePathMapper.DEFAULT);\n\n        String errorMsg = \"Failed to initialize user content.\";\n        try {\n            NodeUtil rootTree = checkNotNull(new NodeUtil(root.getTree(\"/\")));\n            NodeUtil index = rootTree.getOrAddChild(IndexConstants.INDEX_DEFINITIONS_NAME, JcrConstants.NT_UNSTRUCTURED);\n\n            if (!index.hasChild(\"authorizableId\")) {\n                IndexUtils.createIndexDefinition(index, \"authorizableId\", true, new String[]{REP_AUTHORIZABLE_ID}, null);\n            }\n            if (!index.hasChild(\"principalName\")) {\n                IndexUtils.createIndexDefinition(index, \"principalName\", true,\n                        new String[]{REP_PRINCIPAL_NAME},\n                        new String[]{NT_REP_AUTHORIZABLE});\n            }\n            if (!index.hasChild(\"members\")) {\n                IndexUtils.createIndexDefinition(index, \"members\", false, new String[]{UserConstants.REP_MEMBERS}, null);\n            }\n\n            ConfigurationParameters params = userConfiguration.getParameters();\n            String adminId = params.getConfigValue(PARAM_ADMIN_ID, DEFAULT_ADMIN_ID);\n            if (userManager.getAuthorizable(adminId) == null) {\n                boolean omitPw = params.getConfigValue(PARAM_OMIT_ADMIN_PW, false);\n                userManager.createUser(adminId, (omitPw) ? null : adminId);\n            }\n            String anonymousId = Strings.emptyToNull(params.getConfigValue(PARAM_ANONYMOUS_ID, DEFAULT_ANONYMOUS_ID, String.class));\n            if (anonymousId != null && userManager.getAuthorizable(anonymousId) == null) {\n                userManager.createUser(anonymousId, null);\n            }\n            if (root.hasPendingChanges()) {\n                root.commit();\n            }\n\n            builder.reset(store.getRoot());\n        } catch (RepositoryException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        } catch (CommitFailedException e) {\n            log.error(errorMsg, e);\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"7745f5361aad40d1e44616add1060b68e3426899","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        NodeState newState = state;\n        for (RepositoryInitializer tracker : initializers) {\n            newState = tracker.initialize(newState);\n        }\n        return newState;\n    }","id":7051,"modified_method":"@Override\n    public void initialize(@Nonnull NodeBuilder builder) {\n        for (RepositoryInitializer tracker : initializers) {\n            tracker.initialize(builder);\n        }\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        NodeBuilder root = state.builder();\n        root.setProperty(JCR_PRIMARYTYPE, NT_REP_ROOT, Type.NAME);\n\n        if (!root.hasChildNode(JCR_SYSTEM)) {\n            NodeBuilder system = root.child(JCR_SYSTEM);\n            system.setProperty(JCR_PRIMARYTYPE, NT_REP_SYSTEM, Type.NAME);\n\n            system.child(JCR_VERSIONSTORAGE)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_VERSIONSTORAGE, Type.NAME);\n            system.child(JCR_NODE_TYPES)\n                    .setProperty(JCR_PRIMARYTYPE, NT_REP_NODE_TYPES, Type.NAME);\n            system.child(VersionConstants.JCR_ACTIVITIES)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_ACTIVITIES, Type.NAME);\n        }\n\n        if (!root.hasChildNode(IndexConstants.INDEX_DEFINITIONS_NAME)) {\n            NodeBuilder index = IndexUtils.getOrCreateOakIndex(root);\n\n            IndexUtils.createIndexDefinition(index, \"uuid\", true, true,\n                    ImmutableList.<String>of(JCR_UUID), null);\n            NodeBuilder nt = \n                    IndexUtils.createIndexDefinition(index, \"nodetype\", true, false,\n                    ImmutableList.of(JCR_PRIMARYTYPE, JCR_MIXINTYPES), null);\n            // the cost of using the property index for \"@primaryType is not null\" is very high\n            nt.setProperty(IndexConstants.ENTRY_COUNT_PROPERTY_NAME, Long.valueOf(Long.MAX_VALUE));\n        }\n        NodeStore store = new MemoryNodeStore();\n        NodeStoreBranch branch = store.branch();\n        branch.setRoot(root.getNodeState());\n        try {\n            branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n        BuiltInNodeTypes.register(new SystemRoot(store, new EditorHook(new RegistrationEditorProvider())));\n        return store.getRoot();\n    }","id":7052,"modified_method":"@Override\n    public void initialize(NodeBuilder builder) {\n        builder.setProperty(JCR_PRIMARYTYPE, NT_REP_ROOT, Type.NAME);\n\n        if (!builder.hasChildNode(JCR_SYSTEM)) {\n            NodeBuilder system = builder.child(JCR_SYSTEM);\n            system.setProperty(JCR_PRIMARYTYPE, NT_REP_SYSTEM, Type.NAME);\n\n            system.child(JCR_VERSIONSTORAGE)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_VERSIONSTORAGE, Type.NAME);\n            system.child(JCR_NODE_TYPES)\n                    .setProperty(JCR_PRIMARYTYPE, NT_REP_NODE_TYPES, Type.NAME);\n            system.child(VersionConstants.JCR_ACTIVITIES)\n                    .setProperty(JCR_PRIMARYTYPE, VersionConstants.REP_ACTIVITIES, Type.NAME);\n        }\n\n        if (!builder.hasChildNode(IndexConstants.INDEX_DEFINITIONS_NAME)) {\n            NodeBuilder index = IndexUtils.getOrCreateOakIndex(builder);\n\n            IndexUtils.createIndexDefinition(index, \"uuid\", true, true,\n                    ImmutableList.<String>of(JCR_UUID), null);\n            NodeBuilder nt = \n                    IndexUtils.createIndexDefinition(index, \"nodetype\", true, false,\n                    ImmutableList.of(JCR_PRIMARYTYPE, JCR_MIXINTYPES), null);\n            // the cost of using the property index for \"@primaryType is not null\" is very high\n            nt.setProperty(IndexConstants.ENTRY_COUNT_PROPERTY_NAME, Long.valueOf(Long.MAX_VALUE));\n        }\n\n        NodeState base = builder.getNodeState();\n        NodeStore store = new MemoryNodeStore(base);\n        BuiltInNodeTypes.register(new SystemRoot(\n                store, new EditorHook(new RegistrationEditorProvider())));\n        NodeState target = store.getRoot();\n        target.compareAgainstBaseState(base, new ApplyDiff(builder));\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak()\n                .with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public NodeState initialize(NodeState state) {\n                        NodeBuilder root = state.builder();\n                        createIndexDefinition(getOrCreateOakIndex(root), \"pid\",\n                                true, false, ImmutableList.of(\"pid\"), null);\n                        createIndexDefinition(\n                                getOrCreateOakIndex(root.child(\"content\")),\n                                \"pid\", true, false, ImmutableList.of(\"pid\"),\n                                null);\n                        return root.getNodeState();\n                    }\n                }).with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","id":7053,"modified_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak()\n                .with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public void initialize(NodeBuilder builder) {\n                        createIndexDefinition(\n                                getOrCreateOakIndex(builder), \"pid\",\n                                true, false, ImmutableList.of(\"pid\"), null);\n                        createIndexDefinition(\n                                getOrCreateOakIndex(builder.child(\"content\")),\n                                \"pid\", true, false, ImmutableList.of(\"pid\"),\n                                null);\n                    }\n                })\n                .with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public static void initialize(@Nonnull NodeStore store,\n                                  @Nonnull RepositoryInitializer initializer,\n                                  @Nonnull IndexEditorProvider indexEditor) {\n        NodeStoreBranch branch = store.branch();\n        NodeState before = branch.getHead();\n        branch.setRoot(initializer.initialize(before));\n        try {\n            branch.merge(new EditorHook(new IndexUpdateProvider(indexEditor)), PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7054,"modified_method":"public static void initialize(@Nonnull NodeStore store,\n                                  @Nonnull RepositoryInitializer initializer,\n                                  @Nonnull IndexEditorProvider indexEditor) {\n        try {\n            NodeBuilder builder = store.getRoot().builder();\n            initializer.initialize(builder);\n            store.merge(\n                    builder,\n                    new EditorHook(new IndexUpdateProvider(indexEditor)),\n                    PostCommitHook.EMPTY);\n        } catch (CommitFailedException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        return new CompositeInitializer(getServices()).initialize(state);\n    }","id":7055,"modified_method":"@Override\n    public void initialize(@Nonnull NodeBuilder builder) {\n        new CompositeInitializer(getServices()).initialize(builder);\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NodeState initialize(NodeState state) {\n        NodeBuilder root = state.builder();\n        NodeBuilder system = root.child(JcrConstants.JCR_SYSTEM);\n        system.setProperty(JcrConstants.JCR_PRIMARYTYPE, NodeTypeConstants.NT_REP_SYSTEM, Type.NAME);\n\n        if (!system.hasChildNode(REP_PRIVILEGES)) {\n            NodeBuilder privileges = system.child(REP_PRIVILEGES);\n            privileges.setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PRIVILEGES, Type.NAME);\n\n            NodeStore store = new MemoryNodeStore();\n            NodeStoreBranch branch = store.branch();\n            try {\n                branch.setRoot(root.getNodeState());\n                branch.merge(EmptyHook.INSTANCE, PostCommitHook.EMPTY);\n            } catch (CommitFailedException e) {\n                log.error(\"Failed to initialize privilege content \", e);\n                throw new RuntimeException(e);\n            }\n\n            try {\n                new PrivilegeDefinitionWriter(new SystemRoot(store)).writeBuiltInDefinitions();\n            } catch (RepositoryException e) {\n                log.error(\"Failed to register built-in privileges\", e);\n                throw new RuntimeException(e);\n            }\n            return store.getRoot();\n        }\n        return root.getNodeState();\n    }","id":7056,"modified_method":"@Override\n    public void initialize(NodeBuilder builder) {\n        NodeBuilder system = builder.child(JcrConstants.JCR_SYSTEM);\n        system.setProperty(JcrConstants.JCR_PRIMARYTYPE, NodeTypeConstants.NT_REP_SYSTEM, Type.NAME);\n\n        if (!system.hasChildNode(REP_PRIVILEGES)) {\n            NodeBuilder privileges = system.child(REP_PRIVILEGES);\n            privileges.setProperty(JcrConstants.JCR_PRIMARYTYPE, NT_REP_PRIVILEGES, Type.NAME);\n\n            NodeState base = builder.getNodeState();\n            NodeStore store = new MemoryNodeStore(base);\n            try {\n                new PrivilegeDefinitionWriter(new SystemRoot(store)).writeBuiltInDefinitions();\n            } catch (RepositoryException e) {\n                log.error(\"Failed to register built-in privileges\", e);\n                throw new RuntimeException(e);\n            }\n            NodeState target = store.getRoot();\n            target.compareAgainstBaseState(base, new ApplyDiff(builder));\n        }\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see <a href=\"https://issues.apache.org/jira/browse/OAK-666\">OAK-666:\n     *      Property2Index: node type is used when indexing, but ignored when\n     *      querying<\/a>\n     */\n    @Test\n    public void testCustomConfigNodeType() throws Exception {\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n\n        // Add index definitions\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);\n        createIndexDefinition(index, \"fooIndex\", true, false,\n                ImmutableSet.of(\"foo\", \"extrafoo\"),\n                ImmutableSet.of(NT_UNSTRUCTURED));\n        createIndexDefinition(index, \"fooIndexFile\", true, false,\n                ImmutableSet.of(\"foo\"), ImmutableSet.of(NT_FILE));\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"abc\");\n        builder.child(\"b\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"), Type.STRINGS);\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_UNSTRUCTURED);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","id":7057,"modified_method":"/**\n     * @see <a href=\"https://issues.apache.org/jira/browse/OAK-666\">OAK-666:\n     *      Property2Index: node type is used when indexing, but ignored when\n     *      querying<\/a>\n     */\n    @Test\n    public void testCustomConfigNodeType() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definitions\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);\n        createIndexDefinition(index, \"fooIndex\", true, false,\n                ImmutableSet.of(\"foo\", \"extrafoo\"),\n                ImmutableSet.of(NT_UNSTRUCTURED));\n        createIndexDefinition(index, \"fooIndexFile\", true, false,\n                ImmutableSet.of(\"foo\"), ImmutableSet.of(NT_FILE));\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"abc\");\n        builder.child(\"b\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"), Type.STRINGS);\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_UNSTRUCTURED);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testPropertyLookup() throws Exception {\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(MANY + 2, find(lookup, \"foo\", null, f).size());\n\n        double cost;\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"xyz\"));\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","id":7058,"modified_method":"@Test\n    public void testPropertyLookup() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(MANY + 2, find(lookup, \"foo\", null, f).size());\n\n        double cost;\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"xyz\"));\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testCustomConfigPropertyLookup() throws Exception {\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"fooIndex\", true, false, ImmutableSet.of(\"foo\", \"extrafoo\"),\n                null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\")\n                .setProperty(\"extrafoo\", \"pqr\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        // Add an index\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(ImmutableSet.of(\"a\"), find(lookup, \"extrafoo\", \"pqr\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","id":7059,"modified_method":"@Test\n    public void testCustomConfigPropertyLookup() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"fooIndex\", true, false, ImmutableSet.of(\"foo\", \"extrafoo\"),\n                null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\")\n                .setProperty(\"extrafoo\", \"pqr\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        // Add an index\n        NodeState indexed = HOOK.processCommit(before, after);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(ImmutableSet.of(\"a\"), find(lookup, \"extrafoo\", \"pqr\", f));\n\n        try {\n            assertEquals(ImmutableSet.of(), find(lookup, \"pqr\", \"foo\", f));\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected: no index for \"pqr\"\n        }\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak().with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public NodeState initialize(NodeState state) {\n                        NodeBuilder root = state.builder();\n                        NodeBuilder index = IndexUtils.getOrCreateOakIndex(root);\n                        IndexUtils.createIndexDefinition(index, \"myProp\", true,\n                                false, ImmutableList.<String>of(\"myProp\"), null);\n                        return root.getNodeState();\n                    }\n                })\n                .with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","id":7060,"modified_method":"@Override\n    protected ContentRepository createRepository() {\n        return new Oak().with(new InitialContent())\n                .with(new RepositoryInitializer() {\n                    @Override\n                    public void initialize(NodeBuilder builder) {\n                        NodeBuilder index = IndexUtils.getOrCreateOakIndex(builder);\n                        IndexUtils.createIndexDefinition(index, \"myProp\", true,\n                                false, ImmutableList.<String>of(\"myProp\"), null);\n                    }\n                })\n                .with(new OpenSecurityProvider())\n                .with(new PropertyIndexProvider())\n                .with(new PropertyIndexEditorProvider())\n                .createContentRepository();\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void ignoreHidden() throws CommitFailedException {\n        EditorHook hook = new EditorHook(new TypeEditorProvider());\n\n        NodeState root = new InitialContent().initialize(EMPTY_NODE);\n        NodeBuilder builder = root.builder();\n\n        NodeState before = builder.getNodeState();\n        builder.child(\":hidden\");\n        NodeState after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.child(\":hidden\").setProperty(\"prop\", \"value\");\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.getChildNode(\":hidden\").remove();\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n    }","id":7061,"modified_method":"@Test\n    public void ignoreHidden() throws CommitFailedException {\n        EditorHook hook = new EditorHook(new TypeEditorProvider());\n\n        NodeState root = INITIAL_CONTENT;\n        NodeBuilder builder = root.builder();\n\n        NodeState before = builder.getNodeState();\n        builder.child(\":hidden\");\n        NodeState after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.child(\":hidden\").setProperty(\"prop\", \"value\");\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n\n        before = after;\n        builder.getChildNode(\":hidden\").remove();\n        after = builder.getNodeState();\n        hook.processCommit(before, after);\n    }","commit_id":"21a8a63e344bc1e603c4291c4396472b310a5f38","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void loadDemonymLists(String demonymFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(demonymFile);\n      while(reader.ready()){\n        String[] line = reader.readLine().split(\"\\t\");\n        if(line[0].startsWith(\"#\")) continue;\n        Set<String> set = Generics.newHashSet();\n        for(String s : line){\n          set.add(s.toLowerCase());\n          demonymSet.add(s.toLowerCase());\n        }\n        demonyms.put(line[0].toLowerCase(), set);\n      }\n      adjectiveNation.addAll(demonymSet);\n      adjectiveNation.removeAll(demonyms.keySet());\n    } catch (IOException e){\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","id":7062,"modified_method":"/** The format of the demonyms file is\n   *     countryCityOrState ( TAB demonym )*\n   *  Lines starting with # are ignored\n   *  The file is cased but checked uncased.\n   *  The results are:\n   *  demonyms is a has from each country (etc.) to a set of demonymic Strings;\n   *  adjectiveNation is a set of demonymic Strings;\n   *  demonymSet has all country (etc.) names and all demonymic Strings.\n   */\n  private void loadDemonymLists(String demonymFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(demonymFile);\n      for (String line; (line = reader.readLine()) != null; ) {\n        line = line.toLowerCase(Locale.ENGLISH);\n        String[] tokens = line.split(\"\\t\");\n        if (tokens[0].startsWith(\"#\")) continue;\n        Set<String> set = Generics.newHashSet();\n        for (String s : tokens) {\n          set.add(s);\n          demonymSet.add(s);\n        }\n        demonyms.put(tokens[0], set);\n      }\n      adjectiveNation.addAll(demonymSet);\n      adjectiveNation.removeAll(demonyms.keySet());\n    } catch (IOException e) {\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","commit_id":"3cce5c84ae844d923f9a4f31ba6d330e6f08e3a6","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void loadStateAbbreviation(String statesFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(statesFile);\n      while(reader.ready()){\n        String[] tokens = reader.readLine().split(\"\\t\");\n        statesAbbreviation.put(tokens[1], tokens[0]);\n        statesAbbreviation.put(tokens[2], tokens[0]);\n      }\n    } catch (IOException e){\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","id":7063,"modified_method":"/** The format of each line of this file is\n   *     fullStateName ( TAB  abbrev )*\n   *  The file is cased and checked cased.\n   *  The result is: statesAbbreviation is a hash from each abbrev to the fullStateName.\n   */\n  public void loadStateAbbreviation(String statesFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(statesFile);\n      for (String line; (line = reader.readLine()) != null; ) {\n        String[] tokens = line.split(\"\\t\");\n        for (String token : tokens) {\n          statesAbbreviation.put(token, tokens[0]);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","commit_id":"3cce5c84ae844d923f9a4f31ba6d330e6f08e3a6","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public boolean isDemonym(Mention m, Dictionaries dict){\n    String thisString = this.spanToString().toLowerCase();\n    String antString = m.spanToString().toLowerCase();\n    if(thisString.startsWith(\"the \") || thisString.startsWith(\"The \")) {\n      thisString = thisString.substring(4);\n    }\n    if(antString.startsWith(\"the \") || antString.startsWith(\"The \")) antString = antString.substring(4);\n\n    if (dict.statesAbbreviation.containsKey(m.spanToString()) && dict.statesAbbreviation.get(m.spanToString()).equals(this.spanToString())\n         || dict.statesAbbreviation.containsKey(this.spanToString()) && dict.statesAbbreviation.get(this.spanToString()).equals(m.spanToString())) {\n      return true;\n    }\n\n    if(dict.demonyms.get(thisString)!=null){\n      if(dict.demonyms.get(thisString).contains(antString)) return true;\n    } else if(dict.demonyms.get(antString)!=null){\n      if(dict.demonyms.get(antString).contains(thisString)) return true;\n    }\n    return false;\n  }","id":7064,"modified_method":"public boolean isDemonym(Mention m, Dictionaries dict) {\n    String thisCasedString = this.spanToString();\n    String antCasedString = m.spanToString();\n\n    // The US state matching part (only) is done cased\n    String thisNormed = dict.lookupCanonicalAmericanStateName(thisCasedString);\n    String antNormed = dict.lookupCanonicalAmericanStateName(antCasedString);\n    if (thisNormed != null && thisNormed.equals(antNormed)) {\n      return true;\n    }\n\n    // The rest is done uncased\n    String thisString = thisCasedString.toLowerCase(Locale.ENGLISH);\n    String antString = antCasedString.toLowerCase(Locale.ENGLISH);\n    if (thisString.startsWith(\"the \")) {\n      thisString = thisString.substring(4);\n    }\n    if (antString.startsWith(\"the \")) {\n      antString = antString.substring(4);\n    }\n\n    Set<String> thisDemonyms = dict.getDemonyms(thisString);\n    Set<String> antDemonyms = dict.getDemonyms(antString);\n    if (thisDemonyms.contains(antString) || antDemonyms.contains(thisString)) {\n      return true;\n    }\n    return false;\n  }","commit_id":"3cce5c84ae844d923f9a4f31ba6d330e6f08e3a6","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void loadStateAbbreviation(String statesFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(statesFile);\n      while(reader.ready()){\n        String[] tokens = reader.readLine().split(\"\\t\");\n        statesAbbreviation.put(tokens[1], tokens[0]);\n        statesAbbreviation.put(tokens[2], tokens[0]);\n      }\n    } catch (IOException e){\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","id":7065,"modified_method":"/** The format of each line of this file is\n   *     fullStateName ( TAB  abbrev )*\n   *  The file is cased and checked cased.\n   *  The result is: statesAbbreviation is a hash from each abbrev to the fullStateName.\n   */\n  public void loadStateAbbreviation(String statesFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(statesFile);\n      for (String line; (line = reader.readLine()) != null; ) {\n        String[] tokens = line.split(\"\\t\");\n        for (String token : tokens) {\n          statesAbbreviation.put(token, tokens[0]);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","commit_id":"651f827d47839a53dabc907e9714c82f1ce98bd3","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void loadDemonymLists(String demonymFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(demonymFile);\n      while(reader.ready()){\n        String[] line = reader.readLine().split(\"\\t\");\n        if(line[0].startsWith(\"#\")) continue;\n        Set<String> set = Generics.newHashSet();\n        for(String s : line){\n          set.add(s.toLowerCase());\n          demonymSet.add(s.toLowerCase());\n        }\n        demonyms.put(line[0].toLowerCase(), set);\n      }\n      adjectiveNation.addAll(demonymSet);\n      adjectiveNation.removeAll(demonyms.keySet());\n    } catch (IOException e){\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","id":7066,"modified_method":"/** The format of the demonyms file is\n   *     countryCityOrState ( TAB demonym )*\n   *  Lines starting with # are ignored\n   *  The file is cased but checked uncased.\n   *  The results are:\n   *  demonyms is a has from each country (etc.) to a set of demonymic Strings;\n   *  adjectiveNation is a set of demonymic Strings;\n   *  demonymSet has all country (etc.) names and all demonymic Strings.\n   */\n  private void loadDemonymLists(String demonymFile) {\n    BufferedReader reader = null;\n    try {\n      reader = IOUtils.readerFromString(demonymFile);\n      for (String line; (line = reader.readLine()) != null; ) {\n        line = line.toLowerCase(Locale.ENGLISH);\n        String[] tokens = line.split(\"\\t\");\n        if (tokens[0].startsWith(\"#\")) continue;\n        Set<String> set = Generics.newHashSet();\n        for (String s : tokens) {\n          set.add(s);\n          demonymSet.add(s);\n        }\n        demonyms.put(tokens[0], set);\n      }\n      adjectiveNation.addAll(demonymSet);\n      adjectiveNation.removeAll(demonyms.keySet());\n    } catch (IOException e) {\n      throw new RuntimeIOException(e);\n    } finally {\n      IOUtils.closeIgnoringExceptions(reader);\n    }\n  }","commit_id":"651f827d47839a53dabc907e9714c82f1ce98bd3","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public boolean isDemonym(Mention m, Dictionaries dict){\n    String thisString = this.spanToString().toLowerCase();\n    String antString = m.spanToString().toLowerCase();\n    if(thisString.startsWith(\"the \") || thisString.startsWith(\"The \")) {\n      thisString = thisString.substring(4);\n    }\n    if(antString.startsWith(\"the \") || antString.startsWith(\"The \")) antString = antString.substring(4);\n\n    if (dict.statesAbbreviation.containsKey(m.spanToString()) && dict.statesAbbreviation.get(m.spanToString()).equals(this.spanToString())\n         || dict.statesAbbreviation.containsKey(this.spanToString()) && dict.statesAbbreviation.get(this.spanToString()).equals(m.spanToString())) {\n      return true;\n    }\n\n    if(dict.demonyms.get(thisString)!=null){\n      if(dict.demonyms.get(thisString).contains(antString)) return true;\n    } else if(dict.demonyms.get(antString)!=null){\n      if(dict.demonyms.get(antString).contains(thisString)) return true;\n    }\n    return false;\n  }","id":7067,"modified_method":"public boolean isDemonym(Mention m, Dictionaries dict) {\n    String thisCasedString = this.spanToString();\n    String antCasedString = m.spanToString();\n\n    // The US state matching part (only) is done cased\n    String thisNormed = dict.lookupCanonicalAmericanStateName(thisCasedString);\n    String antNormed = dict.lookupCanonicalAmericanStateName(antCasedString);\n    if (thisNormed != null && thisNormed.equals(antNormed)) {\n      return true;\n    }\n\n    // The rest is done uncased\n    String thisString = thisCasedString.toLowerCase(Locale.ENGLISH);\n    String antString = antCasedString.toLowerCase(Locale.ENGLISH);\n    if (thisString.startsWith(\"the \")) {\n      thisString = thisString.substring(4);\n    }\n    if (antString.startsWith(\"the \")) {\n      antString = antString.substring(4);\n    }\n\n    Set<String> thisDemonyms = dict.getDemonyms(thisString);\n    Set<String> antDemonyms = dict.getDemonyms(antString);\n    if (thisDemonyms.contains(antString) || antDemonyms.contains(thisString)) {\n      return true;\n    }\n    return false;\n  }","commit_id":"651f827d47839a53dabc907e9714c82f1ce98bd3","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        popAssignmentTracking(oldTracker);\n    }","id":7068,"modified_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","commit_id":"cb20cdd86f9cd87f9b077d233e841fab7a78578a","url":"https://github.com/apache/groovy"},{"original_method":"private void popAssignmentTracking(final Map<VariableExpression, List<ClassNode>> oldTracker) {\n        if (!ifElseForWhileAssignmentTracker.isEmpty()) {\n            for (Map.Entry<VariableExpression, List<ClassNode>> entry : ifElseForWhileAssignmentTracker.entrySet()) {\n                storeType(entry.getKey(), lowestUpperBound(entry.getValue()));\n            }\n        }\n        ifElseForWhileAssignmentTracker = oldTracker;\n    }","id":7069,"modified_method":"private Map<VariableExpression, ClassNode> popAssignmentTracking(final Map<VariableExpression, List<ClassNode>> oldTracker) {\n        Map<VariableExpression, ClassNode> assignments = new HashMap<VariableExpression, ClassNode>();\n        if (!ifElseForWhileAssignmentTracker.isEmpty()) {\n            for (Map.Entry<VariableExpression, List<ClassNode>> entry : ifElseForWhileAssignmentTracker.entrySet()) {\n                VariableExpression key = entry.getKey();\n                ClassNode cn = lowestUpperBound(entry.getValue());\n                storeType(key, cn);\n                assignments.put(key, cn);\n            }\n        }\n        ifElseForWhileAssignmentTracker = oldTracker;\n        return assignments;\n    }","commit_id":"cb20cdd86f9cd87f9b077d233e841fab7a78578a","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitClosureExpression(final ClosureExpression expression) {\n\t\t// first, collect closure shared variables and reinitialize types\n\t\tSharedVariableCollector collector = new SharedVariableCollector(getSourceUnit());\n\t\tcollector.visitClosureExpression(expression);\n\t\tSet<VariableExpression> closureSharedExpressions = collector.getClosureSharedExpressions();\n\t\tMap<VariableExpression, ListHashMap> typesBeforeVisit = null;\n\t\tif (!closureSharedExpressions.isEmpty()) {\n\t\t\ttypesBeforeVisit = new HashMap<VariableExpression, ListHashMap>();\n\t\t\tsaveVariableExpressionMetadata(closureSharedExpressions, typesBeforeVisit);\n\t\t}\n\n\t\t// perform visit\n        ClosureExpression oldClosureExpr = closureExpression;\n        List<ClassNode> oldClosureReturnTypes = closureReturnTypes;\n        closureExpression = expression;\n        super.visitClosureExpression(expression);\n        MethodNode node = new MethodNode(\"dummy\", 0, ClassHelper.OBJECT_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, expression.getCode());\n        closureReturnAdder.visitMethod(node);\n\n        if (closureReturnTypes!=null) {\n            expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE, lowestUpperBound(closureReturnTypes));\n        }\n\n        closureExpression = oldClosureExpr;\n        closureReturnTypes = oldClosureReturnTypes;\n\t\t\n\t\t// restore original metadata\n\t\trestoreVariableExpressionMetadata(typesBeforeVisit);\n\t}","id":7070,"modified_method":"@Override\n    public void visitClosureExpression(final ClosureExpression expression) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        Statement code = expression.getCode();\n        code.visit(new VariableExpressionTypeMemoizer(varOrigType));\n\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n\n        // first, collect closure shared variables and reinitialize types\n        SharedVariableCollector collector = new SharedVariableCollector(getSourceUnit());\n        collector.visitClosureExpression(expression);\n        Set<VariableExpression> closureSharedExpressions = collector.getClosureSharedExpressions();\n        Map<VariableExpression, ListHashMap> typesBeforeVisit = null;\n        if (!closureSharedExpressions.isEmpty()) {\n            typesBeforeVisit = new HashMap<VariableExpression, ListHashMap>();\n            saveVariableExpressionMetadata(closureSharedExpressions, typesBeforeVisit);\n        }\n\n        // perform visit\n        ClosureExpression oldClosureExpr = closureExpression;\n        List<ClassNode> oldClosureReturnTypes = closureReturnTypes;\n        closureExpression = expression;\n        super.visitClosureExpression(expression);\n        MethodNode node = new MethodNode(\"dummy\", 0, ClassHelper.OBJECT_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, code);\n        closureReturnAdder.visitMethod(node);\n\n        if (closureReturnTypes != null) {\n            expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE, lowestUpperBound(closureReturnTypes));\n        }\n\n        closureExpression = oldClosureExpr;\n        closureReturnTypes = oldClosureReturnTypes;\n\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitClosureExpression(expression);\n\n        // restore original metadata\n        restoreVariableExpressionMetadata(typesBeforeVisit);\n    }","commit_id":"cb20cdd86f9cd87f9b077d233e841fab7a78578a","url":"https://github.com/apache/groovy"},{"original_method":"private void popAssignmentTracking(final Map<VariableExpression, List<ClassNode>> oldTracker) {\n        if (!ifElseForWhileAssignmentTracker.isEmpty()) {\n            for (Map.Entry<VariableExpression, List<ClassNode>> entry : ifElseForWhileAssignmentTracker.entrySet()) {\n                storeType(entry.getKey(), lowestUpperBound(entry.getValue()));\n            }\n        }\n        ifElseForWhileAssignmentTracker = oldTracker;\n    }","id":7071,"modified_method":"private Map<VariableExpression, ClassNode> popAssignmentTracking(final Map<VariableExpression, List<ClassNode>> oldTracker) {\n        Map<VariableExpression, ClassNode> assignments = new HashMap<VariableExpression, ClassNode>();\n        if (!ifElseForWhileAssignmentTracker.isEmpty()) {\n            for (Map.Entry<VariableExpression, List<ClassNode>> entry : ifElseForWhileAssignmentTracker.entrySet()) {\n                VariableExpression key = entry.getKey();\n                ClassNode cn = lowestUpperBound(entry.getValue());\n                storeType(key, cn);\n                assignments.put(key, cn);\n            }\n        }\n        ifElseForWhileAssignmentTracker = oldTracker;\n        return assignments;\n    }","commit_id":"f40d674341fec6a77c4587acb4db9fedf7ae2db8","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        popAssignmentTracking(oldTracker);\n    }","id":7072,"modified_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","commit_id":"f40d674341fec6a77c4587acb4db9fedf7ae2db8","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitClosureExpression(final ClosureExpression expression) {\n\t\t// first, collect closure shared variables and reinitialize types\n\t\tSharedVariableCollector collector = new SharedVariableCollector(getSourceUnit());\n\t\tcollector.visitClosureExpression(expression);\n\t\tSet<VariableExpression> closureSharedExpressions = collector.getClosureSharedExpressions();\n\t\tMap<VariableExpression, ListHashMap> typesBeforeVisit = null;\n\t\tif (!closureSharedExpressions.isEmpty()) {\n\t\t\ttypesBeforeVisit = new HashMap<VariableExpression, ListHashMap>();\n\t\t\tsaveVariableExpressionMetadata(closureSharedExpressions, typesBeforeVisit);\n\t\t}\n\n\t\t// perform visit\n        ClosureExpression oldClosureExpr = closureExpression;\n        List<ClassNode> oldClosureReturnTypes = closureReturnTypes;\n        closureExpression = expression;\n        super.visitClosureExpression(expression);\n        MethodNode node = new MethodNode(\"dummy\", 0, ClassHelper.OBJECT_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, expression.getCode());\n        closureReturnAdder.visitMethod(node);\n\n        if (closureReturnTypes!=null) {\n            expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE, lowestUpperBound(closureReturnTypes));\n        }\n\n        closureExpression = oldClosureExpr;\n        closureReturnTypes = oldClosureReturnTypes;\n\t\t\n\t\t// restore original metadata\n\t\trestoreVariableExpressionMetadata(typesBeforeVisit);\n\t}","id":7073,"modified_method":"@Override\n    public void visitClosureExpression(final ClosureExpression expression) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        Statement code = expression.getCode();\n        code.visit(new VariableExpressionTypeMemoizer(varOrigType));\n\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n\n        // first, collect closure shared variables and reinitialize types\n        SharedVariableCollector collector = new SharedVariableCollector(getSourceUnit());\n        collector.visitClosureExpression(expression);\n        Set<VariableExpression> closureSharedExpressions = collector.getClosureSharedExpressions();\n        Map<VariableExpression, ListHashMap> typesBeforeVisit = null;\n        if (!closureSharedExpressions.isEmpty()) {\n            typesBeforeVisit = new HashMap<VariableExpression, ListHashMap>();\n            saveVariableExpressionMetadata(closureSharedExpressions, typesBeforeVisit);\n        }\n\n        // perform visit\n        ClosureExpression oldClosureExpr = closureExpression;\n        List<ClassNode> oldClosureReturnTypes = closureReturnTypes;\n        closureExpression = expression;\n        super.visitClosureExpression(expression);\n        MethodNode node = new MethodNode(\"dummy\", 0, ClassHelper.OBJECT_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, code);\n        closureReturnAdder.visitMethod(node);\n\n        if (closureReturnTypes != null) {\n            expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE, lowestUpperBound(closureReturnTypes));\n        }\n\n        closureExpression = oldClosureExpr;\n        closureReturnTypes = oldClosureReturnTypes;\n\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitClosureExpression(expression);\n\n        // restore original metadata\n        restoreVariableExpressionMetadata(typesBeforeVisit);\n    }","commit_id":"f40d674341fec6a77c4587acb4db9fedf7ae2db8","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        popAssignmentTracking(oldTracker);\n    }","id":7074,"modified_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","commit_id":"c0124fec9c11e90c7fb939657e864d35f24b9743","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitClosureExpression(final ClosureExpression expression) {\n\t\t// first, collect closure shared variables and reinitialize types\n\t\tSharedVariableCollector collector = new SharedVariableCollector(getSourceUnit());\n\t\tcollector.visitClosureExpression(expression);\n\t\tSet<VariableExpression> closureSharedExpressions = collector.getClosureSharedExpressions();\n\t\tMap<VariableExpression, ListHashMap> typesBeforeVisit = null;\n\t\tif (!closureSharedExpressions.isEmpty()) {\n\t\t\ttypesBeforeVisit = new HashMap<VariableExpression, ListHashMap>();\n\t\t\tsaveVariableExpressionMetadata(closureSharedExpressions, typesBeforeVisit);\n\t\t}\n\n\t\t// perform visit\n        ClosureExpression oldClosureExpr = closureExpression;\n        List<ClassNode> oldClosureReturnTypes = closureReturnTypes;\n        closureExpression = expression;\n        super.visitClosureExpression(expression);\n        MethodNode node = new MethodNode(\"dummy\", 0, ClassHelper.OBJECT_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, expression.getCode());\n        closureReturnAdder.visitMethod(node);\n\n        if (closureReturnTypes!=null) {\n            expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE, lowestUpperBound(closureReturnTypes));\n        }\n\n        closureExpression = oldClosureExpr;\n        closureReturnTypes = oldClosureReturnTypes;\n\t\t\n\t\t// restore original metadata\n\t\trestoreVariableExpressionMetadata(typesBeforeVisit);\n\t}","id":7075,"modified_method":"@Override\n    public void visitClosureExpression(final ClosureExpression expression) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        Statement code = expression.getCode();\n        code.visit(new VariableExpressionTypeMemoizer(varOrigType));\n\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n\n        // first, collect closure shared variables and reinitialize types\n        SharedVariableCollector collector = new SharedVariableCollector(getSourceUnit());\n        collector.visitClosureExpression(expression);\n        Set<VariableExpression> closureSharedExpressions = collector.getClosureSharedExpressions();\n        Map<VariableExpression, ListHashMap> typesBeforeVisit = null;\n        if (!closureSharedExpressions.isEmpty()) {\n            typesBeforeVisit = new HashMap<VariableExpression, ListHashMap>();\n            saveVariableExpressionMetadata(closureSharedExpressions, typesBeforeVisit);\n        }\n\n        // perform visit\n        ClosureExpression oldClosureExpr = closureExpression;\n        List<ClassNode> oldClosureReturnTypes = closureReturnTypes;\n        closureExpression = expression;\n        super.visitClosureExpression(expression);\n        MethodNode node = new MethodNode(\"dummy\", 0, ClassHelper.OBJECT_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, code);\n        closureReturnAdder.visitMethod(node);\n\n        if (closureReturnTypes != null) {\n            expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE, lowestUpperBound(closureReturnTypes));\n        }\n\n        closureExpression = oldClosureExpr;\n        closureReturnTypes = oldClosureReturnTypes;\n\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitClosureExpression(expression);\n\n        // restore original metadata\n        restoreVariableExpressionMetadata(typesBeforeVisit);\n    }","commit_id":"c0124fec9c11e90c7fb939657e864d35f24b9743","url":"https://github.com/apache/groovy"},{"original_method":"private void popAssignmentTracking(final Map<VariableExpression, List<ClassNode>> oldTracker) {\n        if (!ifElseForWhileAssignmentTracker.isEmpty()) {\n            for (Map.Entry<VariableExpression, List<ClassNode>> entry : ifElseForWhileAssignmentTracker.entrySet()) {\n                storeType(entry.getKey(), lowestUpperBound(entry.getValue()));\n            }\n        }\n        ifElseForWhileAssignmentTracker = oldTracker;\n    }","id":7076,"modified_method":"private Map<VariableExpression, ClassNode> popAssignmentTracking(final Map<VariableExpression, List<ClassNode>> oldTracker) {\n        Map<VariableExpression, ClassNode> assignments = new HashMap<VariableExpression, ClassNode>();\n        if (!ifElseForWhileAssignmentTracker.isEmpty()) {\n            for (Map.Entry<VariableExpression, List<ClassNode>> entry : ifElseForWhileAssignmentTracker.entrySet()) {\n                VariableExpression key = entry.getKey();\n                ClassNode cn = lowestUpperBound(entry.getValue());\n                storeType(key, cn);\n                assignments.put(key, cn);\n            }\n        }\n        ifElseForWhileAssignmentTracker = oldTracker;\n        return assignments;\n    }","commit_id":"c0124fec9c11e90c7fb939657e864d35f24b9743","url":"https://github.com/apache/groovy"},{"original_method":"/**\n     * <p>update<\/p>\n     *\n     * @throws java.io.IOException if any.\n     * @throws org.exolab.castor.xml.MarshalException if any.\n     * @throws org.exolab.castor.xml.ValidationException if any.\n     */\n    public void update() throws IOException, MarshalException, ValidationException {\n        getWriteLock().lock();\n        try {\n            final File cfgFile = ConfigFileConstants.getFile(ConfigFileConstants.RANCID_CONFIG_FILE_NAME);\n            if (cfgFile.lastModified() > m_currentVersion) {\n                m_currentVersion = cfgFile.lastModified();\n                LogUtils.debugf(this, \"init: config file path: %s\", cfgFile.getPath());\n                reloadXML(new FileInputStream(cfgFile));\n                LogUtils.debugf(this, \"init: finished loading config file: %s\", cfgFile.getPath());\n            }\n        } finally {\n            getWriteLock().unlock();\n        }\n    }","id":7077,"modified_method":"/**\n     * <p>update<\/p>\n     *\n     * @throws java.io.IOException if any.\n     * @throws org.exolab.castor.xml.MarshalException if any.\n     * @throws org.exolab.castor.xml.ValidationException if any.\n     */\n    public void update() throws IOException, MarshalException, ValidationException {\n        getWriteLock().lock();\n        try {\n            final File cfgFile = ConfigFileConstants.getFile(ConfigFileConstants.RANCID_CONFIG_FILE_NAME);\n            if (cfgFile.lastModified() > m_currentVersion) {\n                m_currentVersion = cfgFile.lastModified();\n                LOG.debug(\"init: config file path: {}\", cfgFile.getPath());\n                reloadXML(new FileInputStream(cfgFile));\n                LOG.debug(\"init: finished loading config file: {}\", cfgFile.getPath());\n            }\n        } finally {\n            getWriteLock().unlock();\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>saveXml<\/p>\n     *\n     * @param xml a {@link java.lang.String} object.\n     * @throws java.io.IOException if any.\n     */\n    protected void saveXml(final String xml) throws IOException {\n        if (xml != null) {\n            getWriteLock().lock();\n            try {\n                long timestamp = System.currentTimeMillis();\n                File cfgFile = ConfigFileConstants.getFile(ConfigFileConstants.RANCID_CONFIG_FILE_NAME);\n                LogUtils.debugf(this, \"saveXml: saving config file at %d: %s\", timestamp, cfgFile.getPath());\n                Writer fileWriter = new OutputStreamWriter(new FileOutputStream(cfgFile), \"UTF-8\");\n                fileWriter.write(xml);\n                fileWriter.flush();\n                fileWriter.close();\n                LogUtils.debugf(this, \"saveXml: finished saving config file: %s\", cfgFile.getPath());\n            } finally {\n                getWriteLock().unlock();\n            }\n        }\n    }","id":7078,"modified_method":"/**\n     * <p>saveXml<\/p>\n     *\n     * @param xml a {@link java.lang.String} object.\n     * @throws java.io.IOException if any.\n     */\n    protected void saveXml(final String xml) throws IOException {\n        if (xml != null) {\n            getWriteLock().lock();\n            try {\n                long timestamp = System.currentTimeMillis();\n                File cfgFile = ConfigFileConstants.getFile(ConfigFileConstants.RANCID_CONFIG_FILE_NAME);\n                LOG.debug(\"saveXml: saving config file at {}: {}\", timestamp, cfgFile.getPath());\n                Writer fileWriter = new OutputStreamWriter(new FileOutputStream(cfgFile), \"UTF-8\");\n                fileWriter.write(xml);\n                fileWriter.flush();\n                fileWriter.close();\n                LOG.debug(\"saveXml: finished saving config file: {}\", cfgFile.getPath());\n            } finally {\n                getWriteLock().unlock();\n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Load the config from the default config file and create the singleton\n     * instance of this factory.\n     *\n     * @exception java.io.IOException\n     *                Thrown if the specified config file cannot be read\n     * @exception org.exolab.castor.xml.MarshalException\n     *                Thrown if the file does not conform to the schema.\n     * @exception org.exolab.castor.xml.ValidationException\n     *                Thrown if the contents do not match the required schema.\n     * @throws java.io.IOException if any.\n     * @throws org.exolab.castor.xml.MarshalException if any.\n     * @throws org.exolab.castor.xml.ValidationException if any.\n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (m_loaded) {\n            // init already called - return\n            // to reload, reload() will need to be called\n            return;\n        }\n\n        OpennmsServerConfigFactory.init();\n        final OpennmsServerConfigFactory onmsSvrConfig = OpennmsServerConfigFactory.getInstance();\n\n        final File cfgFile = ConfigFileConstants.getFile(ConfigFileConstants.RANCID_CONFIG_FILE_NAME);\n\n        LogUtils.debugf(RancidAdapterConfigFactory.class, \"init: config file path: %s\", cfgFile.getPath());\n\n        final InputStream reader = new FileInputStream(cfgFile);\n        RancidAdapterConfigFactory config = new RancidAdapterConfigFactory(cfgFile.lastModified(), reader,onmsSvrConfig.getServerName(),onmsSvrConfig.verifyServer());\n        reader.close();\n        setInstance(config);\n\n    }","id":7079,"modified_method":"/**\n     * Load the config from the default config file and create the singleton\n     * instance of this factory.\n     *\n     * @exception java.io.IOException\n     *                Thrown if the specified config file cannot be read\n     * @exception org.exolab.castor.xml.MarshalException\n     *                Thrown if the file does not conform to the schema.\n     * @exception org.exolab.castor.xml.ValidationException\n     *                Thrown if the contents do not match the required schema.\n     * @throws java.io.IOException if any.\n     * @throws org.exolab.castor.xml.MarshalException if any.\n     * @throws org.exolab.castor.xml.ValidationException if any.\n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (m_loaded) {\n            // init already called - return\n            // to reload, reload() will need to be called\n            return;\n        }\n\n        OpennmsServerConfigFactory.init();\n        final OpennmsServerConfigFactory onmsSvrConfig = OpennmsServerConfigFactory.getInstance();\n\n        final File cfgFile = ConfigFileConstants.getFile(ConfigFileConstants.RANCID_CONFIG_FILE_NAME);\n\n        LOG.debug(\"init: config file path: {}\", cfgFile.getPath());\n\n        final InputStream reader = new FileInputStream(cfgFile);\n        RancidAdapterConfigFactory config = new RancidAdapterConfigFactory(cfgFile.lastModified(), reader,onmsSvrConfig.getServerName(),onmsSvrConfig.verifyServer());\n        reader.close();\n        setInstance(config);\n\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<InetAddress> getIpList(final Package pkg) {\n        final StringBuffer filterRules = new StringBuffer(pkg.getFilter().getContent());\n        if (m_verifyServer) {\n            filterRules.append(\" & (serverName == \");\n            filterRules.append('\\\"');\n            filterRules.append(m_localServer);\n            filterRules.append('\\\"');\n            filterRules.append(\")\");\n        }\n        LogUtils.debugf(this, \"createPackageIpMap: package is %s. filter rules are %s\", pkg.getName(), filterRules.toString());\n        return FilterDaoFactory.getInstance().getActiveIPAddressList(filterRules.toString());\n    }","id":7080,"modified_method":"private List<InetAddress> getIpList(final Package pkg) {\n        final StringBuffer filterRules = new StringBuffer(pkg.getFilter().getContent());\n        if (m_verifyServer) {\n            filterRules.append(\" & (serverName == \");\n            filterRules.append('\\\"');\n            filterRules.append(m_localServer);\n            filterRules.append('\\\"');\n            filterRules.append(\")\");\n        }\n        LOG.debug(\"createPackageIpMap: package is {}. filter rules are {}\", pkg.getName(), filterRules);\n        return FilterDaoFactory.getInstance().getActiveIPAddressList(filterRules.toString());\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is used to establish package against iplist mapping, with\n     * which, the iplist is selected per package via the configured filter rules\n     * from the database.\n     */\n    private void createPackageIpListMap() {\n        getWriteLock().lock();\n        try {\n            m_pkgIpMap = new HashMap<Package, List<InetAddress>>();\n            \n            if (hasPolicies()) {\n                for (final Package pkg: packages() ) {\n                    // Get a list of ipaddress per package agaist the filter rules from\n                    // database and populate the package, IP list map.\n                    //\n                    try {\n                        final List<InetAddress> ipList = getIpList(pkg);\n                        LogUtils.debugf(this, \"createPackageIpMap: package %s: ipList size = %d\", pkg.getName(), ipList.size());\n            \n                        if (ipList.size() > 0) {\n                            m_pkgIpMap.put(pkg, ipList);\n                        }\n                    } catch (final Throwable t) {\n                        LogUtils.errorf(this, t, \"createPackageIpMap: failed to map package: %s to an IP List with filter \\\"%s\\\"\", pkg.getName(), pkg.getFilter().getContent());\n                    }\n        \n                }\n            }\n        } finally {\n            getWriteLock().unlock();\n        }\n    }","id":7081,"modified_method":"/**\n     * This method is used to establish package against iplist mapping, with\n     * which, the iplist is selected per package via the configured filter rules\n     * from the database.\n     */\n    private void createPackageIpListMap() {\n        getWriteLock().lock();\n        try {\n            m_pkgIpMap = new HashMap<Package, List<InetAddress>>();\n            \n            if (hasPolicies()) {\n                for (final Package pkg: packages() ) {\n                    // Get a list of ipaddress per package agaist the filter rules from\n                    // database and populate the package, IP list map.\n                    //\n                    try {\n                        final List<InetAddress> ipList = getIpList(pkg);\n                        LOG.debug(\"createPackageIpMap: package {}: ipList size = {}\", pkg.getName(), ipList.size());\n            \n                        if (ipList.size() > 0) {\n                            m_pkgIpMap.put(pkg, ipList);\n                        }\n                    } catch (final Throwable t) {\n                        LOG.error(\"createPackageIpMap: failed to map package: {} to an IP List with filter \\\"{}\\\"\", pkg.getName(), pkg.getFilter().getContent(), t);\n                    }\n        \n                }\n            }\n        } finally {\n            getWriteLock().unlock();\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is used to determine if the named interface is included in\n     * the passed package definition. If the interface belongs to the package\n     * then a value of true is returned. If the interface does not belong to the\n     * package a false value is returned.\n     * \n     * <strong>Note: <\/strong>Evaluation of the interface against a package\n     * filter will only work if the IP is already in the database.\n     * \n     * TODO: Factor this method out so that it can be reused? Or use an existing\n     * utility method if one exists?\n     * \n     * @param iface\n     *            The interface to test against the package.\n     * @param pkg\n     *            The package to check for the inclusion of the interface.\n     * \n     * @return True if the interface is included in the package, false\n     *         otherwise.\n     */\n    private boolean interfaceInPackage(final String iface, final Package pkg) {\n        boolean filterPassed = false;\n        final InetAddress ifaceAddr = addr(iface);\n    \n        // get list of IPs in this package\n        final List<InetAddress> ipList = m_pkgIpMap.get(pkg);\n        if (ipList != null && ipList.size() > 0) {\n\t\t\tfilterPassed = ipList.contains(ifaceAddr);\n        }\n    \n        LogUtils.debugf(this, \"interfaceInPackage: Interface %s passed filter for package %s?: %s\", iface, pkg.getName(), Boolean.valueOf(filterPassed));\n    \n        if (!filterPassed) return false;\n    \n        //\n        // Ensure that the interface is in the specific list or\n        // that it is in the include range and is not excluded\n        //\n        boolean has_specific = false;\n        boolean has_range_include = false;\n        boolean has_range_exclude = false;\n \n        // if there are NO include ranges then treat act as if the user include\n        // the range 0.0.0.0 - 255.255.255.255\n        has_range_include = pkg.getIncludeRangeCount() == 0 && pkg.getSpecificCount() == 0;\n        \n        for (IncludeRange rng : pkg.getIncludeRange()) {\n            if (isInetAddressInRange(iface, rng.getBegin(), rng.getEnd())) {\n                has_range_include = true;\n                break;\n            }\n        }\n\n        byte[] addr = toIpAddrBytes(iface);\n\n        for (String spec : pkg.getSpecific()) {\n            byte[] speca = toIpAddrBytes(spec);\n            if (new ByteArrayComparator().compare(speca, addr) == 0) {\n                has_specific = true;\n                break;\n            }\n        }\n\n        Enumeration<String> eurl = pkg.enumerateIncludeUrl();\n        while (!has_specific && eurl.hasMoreElements()) {\n            has_specific = interfaceInUrl(iface, eurl.nextElement());\n        }\n    \n        for (ExcludeRange rng : pkg.getExcludeRangeCollection()) {\n            if (isInetAddressInRange(iface, rng.getBegin(), rng.getEnd())) {\n                has_range_exclude = true;\n                break;\n            }\n        }\n    \n        return has_specific || (has_range_include && !has_range_exclude);\n    }","id":7082,"modified_method":"/**\n     * This method is used to determine if the named interface is included in\n     * the passed package definition. If the interface belongs to the package\n     * then a value of true is returned. If the interface does not belong to the\n     * package a false value is returned.\n     * \n     * <strong>Note: <\/strong>Evaluation of the interface against a package\n     * filter will only work if the IP is already in the database.\n     * \n     * TODO: Factor this method out so that it can be reused? Or use an existing\n     * utility method if one exists?\n     * \n     * @param iface\n     *            The interface to test against the package.\n     * @param pkg\n     *            The package to check for the inclusion of the interface.\n     * \n     * @return True if the interface is included in the package, false\n     *         otherwise.\n     */\n    private boolean interfaceInPackage(final String iface, final Package pkg) {\n        boolean filterPassed = false;\n        final InetAddress ifaceAddr = addr(iface);\n    \n        // get list of IPs in this package\n        final List<InetAddress> ipList = m_pkgIpMap.get(pkg);\n        if (ipList != null && ipList.size() > 0) {\n\t\t\tfilterPassed = ipList.contains(ifaceAddr);\n        }\n    \n        LOG.debug(\"interfaceInPackage: Interface {} passed filter for package {}?: {}\", iface, pkg.getName(), Boolean.valueOf(filterPassed));\n    \n        if (!filterPassed) return false;\n    \n        //\n        // Ensure that the interface is in the specific list or\n        // that it is in the include range and is not excluded\n        //\n        boolean has_specific = false;\n        boolean has_range_include = false;\n        boolean has_range_exclude = false;\n \n        // if there are NO include ranges then treat act as if the user include\n        // the range 0.0.0.0 - 255.255.255.255\n        has_range_include = pkg.getIncludeRangeCount() == 0 && pkg.getSpecificCount() == 0;\n        \n        for (IncludeRange rng : pkg.getIncludeRange()) {\n            if (isInetAddressInRange(iface, rng.getBegin(), rng.getEnd())) {\n                has_range_include = true;\n                break;\n            }\n        }\n\n        byte[] addr = toIpAddrBytes(iface);\n\n        for (String spec : pkg.getSpecific()) {\n            byte[] speca = toIpAddrBytes(spec);\n            if (new ByteArrayComparator().compare(speca, addr) == 0) {\n                has_specific = true;\n                break;\n            }\n        }\n\n        Enumeration<String> eurl = pkg.enumerateIncludeUrl();\n        while (!has_specific && eurl.hasMoreElements()) {\n            has_specific = interfaceInUrl(iface, eurl.nextElement());\n        }\n    \n        for (ExcludeRange rng : pkg.getExcludeRangeCollection()) {\n            if (isInetAddressInRange(iface, rng.getBegin(), rng.getEnd())) {\n                has_range_exclude = true;\n                break;\n            }\n        }\n    \n        return has_specific || (has_range_include && !has_range_exclude);\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private String getTypeFromSysObjectId(String sysoid) {\n        String rancidType = m_rancidAdapterConfig.getType(sysoid);\n        log().debug(\"getTypeFromSysObjectId: Rancid devicetype found: \" + rancidType + \" for sysOid: \" + sysoid);\n        return rancidType;\n    }","id":7083,"modified_method":"private String getTypeFromSysObjectId(String sysoid) {\n        String rancidType = m_rancidAdapterConfig.getType(sysoid);\n        LOG.debug(\"getTypeFromSysObjectId: Rancid devicetype found: {} for sysOid: {}\", sysoid, rancidType);\n        return rancidType;\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void sendAndThrow(int nodeId, Throwable e) {\n        log().debug(\"sendAndThrow: error working on nodeid: \" + nodeId);\n        log().debug(\"sendAndThrow: Exception: \" + e.getMessage());\n        Event event = buildEvent(EventConstants.PROVISIONING_ADAPTER_FAILED, nodeId).addParam(\"reason\", MESSAGE_PREFIX+e.getLocalizedMessage()).getEvent();\n        m_eventForwarder.sendNow(event);\n        throw new ProvisioningAdapterException(MESSAGE_PREFIX, e);\n    }","id":7084,"modified_method":"private void sendAndThrow(int nodeId, Throwable e) {\n        LOG.debug(\"sendAndThrow: error working on nodeid: {}\", nodeId);\n        LOG.debug(\"sendAndThrow: Exception: {}\", e.getMessage());\n        Event event = buildEvent(EventConstants.PROVISIONING_ADAPTER_FAILED, nodeId).addParam(\"reason\", MESSAGE_PREFIX+e.getLocalizedMessage()).getEvent();\n        m_eventForwarder.sendNow(event);\n        throw new ProvisioningAdapterException(MESSAGE_PREFIX, e);\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>doAdd<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"doAdd: adding nodeid: \" + nodeId);\n\n        final OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n        Assert.notNull(node, \"doAdd: failed to return node for given nodeId:\"+nodeId);\n\n        String ipaddress = m_template.execute(new TransactionCallback<String>() {\n            @Override\n            public String doInTransaction(TransactionStatus arg0) {\n                return getSuitableIpForRancid(node);\n            }\n        });\n\n        \n        RancidNode rNode = getSuitableRancidNode(node);\n        rNode.setStateUp(true);\n        \n        try {\n            m_rwsConfig.getWriteLock().lock();\n            try {\n                if (m_onmsNodeRancidNodeMap.containsValue(rNode)) {\n                    log().error(\"doAdd: Error Duplicate node: \" + node);\n                    ProvisioningAdapterException e = new ProvisioningAdapterException(\"Duplicate node has been added: \"+node); \n                    sendAndThrow(nodeId, e);\n                    return;\n                }\n                log().debug(\"doAdd: adding to router.db node: \" + node.getLabel());\n    \n                RWSClientApi.createRWSRancidNode(cp, rNode);\n                m_onmsNodeIpMap.putIfAbsent(nodeId, ipaddress);\n                m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), rNode);\n    \n                RWSClientApi.createOrUpdateRWSAuthNode(cp, rNode.getAuth());\n            } finally {\n                m_rwsConfig.getWriteLock().unlock();\n            }\n        } catch (ProvisioningAdapterException ae) {    \n            sendAndThrow(nodeId, ae);\n        } catch (Throwable e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"doAdd: retry Add on standByConn: \" + cp.getUrl());\n                doAdd(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":7085,"modified_method":"/**\n     * <p>doAdd<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        LOG.debug(\"doAdd: adding nodeid: {}\", nodeId);\n\n        final OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n        Assert.notNull(node, \"doAdd: failed to return node for given nodeId:\"+nodeId);\n\n        String ipaddress = m_template.execute(new TransactionCallback<String>() {\n            @Override\n            public String doInTransaction(TransactionStatus arg0) {\n                return getSuitableIpForRancid(node);\n            }\n        });\n\n        \n        RancidNode rNode = getSuitableRancidNode(node);\n        rNode.setStateUp(true);\n        \n        try {\n            m_rwsConfig.getWriteLock().lock();\n            try {\n                if (m_onmsNodeRancidNodeMap.containsValue(rNode)) {\n                    LOG.error(\"doAdd: Error Duplicate node: {}\", node);\n                    ProvisioningAdapterException e = new ProvisioningAdapterException(\"Duplicate node has been added: \"+node); \n                    sendAndThrow(nodeId, e);\n                    return;\n                }\n                LOG.debug(\"doAdd: adding to router.db node: {}\", node.getLabel());\n    \n                RWSClientApi.createRWSRancidNode(cp, rNode);\n                m_onmsNodeIpMap.putIfAbsent(nodeId, ipaddress);\n                m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), rNode);\n    \n                RWSClientApi.createOrUpdateRWSAuthNode(cp, rNode.getAuth());\n            } finally {\n                m_rwsConfig.getWriteLock().unlock();\n            }\n        } catch (ProvisioningAdapterException ae) {    \n            sendAndThrow(nodeId, ae);\n        } catch (Throwable e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                LOG.info(\"doAdd: retry Add on standByConn: {}\", cp.getUrl());\n                doAdd(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>handleRancidGroupProcessingCompleted<\/p>\n     *\n     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"handleRancidGroupProcessingCompleted: get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        for (Parm parm : e.getParmCollection()) {\n            log().debug(\"handleRancidGroupProcessingCompleted: parm name: \" + parm.getParmName());\n            if (parm.getParmName().equals(\".1.3.6.1.4.1.31543.1.1.2.1.1.3\")) {\n                updateGroupConfiguration(parm.getValue().getContent());\n                break;\n            }\n        }\n    }","id":7086,"modified_method":"/**\n     * <p>handleRancidGroupProcessingCompleted<\/p>\n     *\n     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        LOG.debug(\"handleRancidGroupProcessingCompleted: get Event uei/id: {} / {}\", e.getDbid(), e.getUei());\n        for (Parm parm : e.getParmCollection()) {\n            LOG.debug(\"handleRancidGroupProcessingCompleted: parm name: {}\", parm.getParmName());\n            if (parm.getParmName().equals(\".1.3.6.1.4.1.31543.1.1.2.1.1.3\")) {\n                updateGroupConfiguration(parm.getValue().getContent());\n                break;\n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void getRancidCategories() {\n        \n        try {\n            m_rancid_categories = RWSClientApi.getRWSResourceDeviceTypesPatternList(m_cp).getResource();\n        } catch (RancidApiException e) {\n            ConnectionProperties cp = getStandByRWSConnection();\n            if (cp != null) {\n                try {\n                    m_rancid_categories = RWSClientApi.getRWSResourceDeviceTypesPatternList(m_cp).getResource();\n                } catch (RancidApiException e1) {\n                    log().warn(\"getRancidCategories: not able to retrieve rancid categories from RWS server\");\n                    m_rancid_categories = new ArrayList<String>();\n                    m_rancid_categories.add(\"cisco\");\n                    log().warn(\"getRancidCategories: setting categories list to 'cisco'\");\n                }\n            }\n        }\n    }","id":7087,"modified_method":"private void getRancidCategories() {\n        \n        try {\n            m_rancid_categories = RWSClientApi.getRWSResourceDeviceTypesPatternList(m_cp).getResource();\n        } catch (RancidApiException e) {\n            ConnectionProperties cp = getStandByRWSConnection();\n            if (cp != null) {\n                try {\n                    m_rancid_categories = RWSClientApi.getRWSResourceDeviceTypesPatternList(m_cp).getResource();\n                } catch (RancidApiException e1) {\n                    LOG.warn(\"getRancidCategories: not able to retrieve rancid categories from RWS server\");\n                    m_rancid_categories = new ArrayList<String>();\n                    m_rancid_categories.add(\"cisco\");\n                    LOG.warn(\"getRancidCategories: setting categories list to 'cisco'\");\n                }\n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType adapterOperationType) {\n        log().debug(\"Scheduling: \" + adapterOperationType + \" for nodeid: \" + nodeId);\n        if (adapterOperationType.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            updateRancidNodeState(nodeId, true);\n\n            String ipaddress = m_onmsNodeIpMap.get(nodeId);\n            //String ipaddress = (String) m_template.execute(new TransactionCallback() {\n            //    public Object doInTransaction(TransactionStatus arg0) {\n            //        return getSuitableIpForRancid(nodeId);\n            //    }\n            //});\n            \n            log().debug(\"Found Suitable ip address: \" + ipaddress);\n            long initialDelay = m_rancidAdapterConfig.getDelay(ipaddress);\n            int retries = m_rancidAdapterConfig.getRetries(ipaddress);\n            log().debug(\"Setting initialDelay(sec): \" + initialDelay);\n            log().debug(\"Setting retries(sec): \" + retries);\n            \n            return new AdapterOperationSchedule(initialDelay,60, retries, TimeUnit.SECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","id":7088,"modified_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType adapterOperationType) {\n        LOG.debug(\"Scheduling: {} for nodeid: {}\", nodeId, adapterOperationType);\n        if (adapterOperationType.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            updateRancidNodeState(nodeId, true);\n\n            String ipaddress = m_onmsNodeIpMap.get(nodeId);\n            //String ipaddress = (String) m_template.execute(new TransactionCallback() {\n            //    public Object doInTransaction(TransactionStatus arg0) {\n            //        return getSuitableIpForRancid(nodeId);\n            //    }\n            //});\n            \n            LOG.debug(\"Found Suitable ip address: {}\", ipaddress);\n            long initialDelay = m_rancidAdapterConfig.getDelay(ipaddress);\n            int retries = m_rancidAdapterConfig.getRetries(ipaddress);\n            LOG.debug(\"Setting initialDelay(sec): {}\", initialDelay);\n            LOG.debug(\"Setting retries(sec): {}\", retries);\n            \n            return new AdapterOperationSchedule(initialDelay,60, retries, TimeUnit.SECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>handleReloadConfigEvent<\/p>\n     *\n     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RELOAD_DAEMON_CONFIG_UEI)\n    public void handleReloadConfigEvent(Event event) {\n        if (isReloadConfigEventTarget(event)) {\n            LogUtils.debugf(this, \"reloading the rancid adapter configuration\");\n            try {\n                RancidAdapterConfigFactory.init();\n                final RancidAdapterConfigFactory factory = RancidAdapterConfigFactory.getInstance();\n                factory.getWriteLock().lock();\n                try {\n                    factory.update();\n                    m_template.execute(new TransactionCallback<Object>() {\n                        @Override\n                        public Object doInTransaction(TransactionStatus arg0) {\n                            buildRancidNodeMap();\n                            return null;\n                        }\n                    });  \n                } finally {\n                    factory.getWriteLock().unlock();\n                }\n            } catch (Throwable e) {\n                LogUtils.infof(this, e, \"unable to reload rancid adapter configuration\");\n            }\n        }\n    }","id":7089,"modified_method":"/**\n     * <p>handleReloadConfigEvent<\/p>\n     *\n     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RELOAD_DAEMON_CONFIG_UEI)\n    public void handleReloadConfigEvent(Event event) {\n        if (isReloadConfigEventTarget(event)) {\n            LOG.debug(\"reloading the rancid adapter configuration\");\n            try {\n                RancidAdapterConfigFactory.init();\n                final RancidAdapterConfigFactory factory = RancidAdapterConfigFactory.getInstance();\n                factory.getWriteLock().lock();\n                try {\n                    factory.update();\n                    m_template.execute(new TransactionCallback<Object>() {\n                        @Override\n                        public Object doInTransaction(TransactionStatus arg0) {\n                            buildRancidNodeMap();\n                            return null;\n                        }\n                    });  \n                } finally {\n                    factory.getWriteLock().unlock();\n                }\n            } catch (Throwable e) {\n                LOG.info(\"unable to reload rancid adapter configuration\", e);\n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private String getSuitableIpForRancid(OnmsNode node){\n        log().debug(\"getSuitableIpForRancid: node: \" + node.getNodeId() + \" Foreign Source: \" + node.getForeignSource());\n        OnmsIpInterface primaryInterface = node.getPrimaryInterface();\n        String ipaddr = \"127.0.0.1\";\n        if (primaryInterface == null) {\n            log().debug(\"getSuitableIpForRancid: found null SNMP Primary Interface, getting interfaces\");\n            Set<OnmsIpInterface> ipInterfaces = node.getIpInterfaces();\n            for (OnmsIpInterface onmsIpInterface : ipInterfaces) {\n                log().debug(\"getSuitableIpForRancid: trying Interface with id: \" + onmsIpInterface.getId());\n                if (onmsIpInterface.getIpAddress() != null) {\n                    ipaddr = str(onmsIpInterface.getIpAddress());\n                } else { \n                    log().debug(\"getSuitableIpForRancid: found null ip address on Interface with id: \" + onmsIpInterface.getId());\n                }\n            }\n        } else {        \n            log().debug(\"getSuitableIpForRancid: found SNMP Primary Interface\");\n            if (primaryInterface.getIpAddress() != null ) {\n                ipaddr = str(primaryInterface.getIpAddress());\n            } else {\n                log().debug(\"getSuitableIpForRancid: found null ip address on Primary Interface\");\n            }\n        }\n        return ipaddr;\n    }","id":7090,"modified_method":"private String getSuitableIpForRancid(OnmsNode node){\n        LOG.debug(\"getSuitableIpForRancid: node: {} Foreign Source: {}\", node.getForeignSource(), node.getNodeId());\n        OnmsIpInterface primaryInterface = node.getPrimaryInterface();\n        String ipaddr = \"127.0.0.1\";\n        if (primaryInterface == null) {\n            LOG.debug(\"getSuitableIpForRancid: found null SNMP Primary Interface, getting interfaces\");\n            Set<OnmsIpInterface> ipInterfaces = node.getIpInterfaces();\n            for (OnmsIpInterface onmsIpInterface : ipInterfaces) {\n                LOG.debug(\"getSuitableIpForRancid: trying Interface with id: {}\", onmsIpInterface.getId());\n                if (onmsIpInterface.getIpAddress() != null) {\n                    ipaddr = str(onmsIpInterface.getIpAddress());\n                } else { \n                    LOG.debug(\"getSuitableIpForRancid: found null ip address on Interface with id: {}\", onmsIpInterface.getId());\n                }\n            }\n        } else {        \n            LOG.debug(\"getSuitableIpForRancid: found SNMP Primary Interface\");\n            if (primaryInterface.getIpAddress() != null ) {\n                ipaddr = str(primaryInterface.getIpAddress());\n            } else {\n                LOG.debug(\"getSuitableIpForRancid: found null ip address on Primary Interface\");\n            }\n        }\n        return ipaddr;\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>doDelete<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"doDelete: deleting nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n            m_rwsConfig.getWriteLock().lock();\n            try {\n                if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                    RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n    \n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rNode.getAuth());\n    \n                    m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n                    m_onmsNodeIpMap.remove(Integer.valueOf(nodeId));\n                } else {\n                    log().warn(\"doDelete: no device found in node Rancid Map for nodeid: \" + nodeId);                \n                }\n            } finally {\n                m_rwsConfig.getWriteLock().unlock();\n            }\n        } catch (Throwable e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"doDelete: retry Delete on standByConn: \" + cp.getUrl());\n                doDelete(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":7091,"modified_method":"/**\n     * <p>doDelete<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        LOG.debug(\"doDelete: deleting nodeid: {}\", nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n            m_rwsConfig.getWriteLock().lock();\n            try {\n                if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                    RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n    \n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rNode.getAuth());\n    \n                    m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n                    m_onmsNodeIpMap.remove(Integer.valueOf(nodeId));\n                } else {\n                    LOG.warn(\"doDelete: no device found in node Rancid Map for nodeid: {}\", nodeId);\n                }\n            } finally {\n                m_rwsConfig.getWriteLock().unlock();\n            }\n        } catch (Throwable e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                LOG.info(\"doDelete: retry Delete on standByConn: {}\", cp.getUrl());\n                doDelete(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>doUpdate<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"doUpdate: updating nodeid: \" + nodeId);\n            \n        RancidNode rLocalNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n        log().debug(\"doUpdate: found local map Node: \" + rLocalNode.toString());\n        \n        final OnmsNode node = m_nodeDao.get(nodeId);\n        Assert.notNull(node, \"doUpdate: failed to return node for given nodeId:\"+nodeId);\n \n        String ipaddress = m_template.execute(new TransactionCallback<String>() {\n            @Override\n            public String doInTransaction(TransactionStatus arg0) {\n                return getSuitableIpForRancid(node);\n            }\n        });\n\n        m_onmsNodeIpMap.put(nodeId, ipaddress);\n\n        RancidNode rUpdatedNode = getSuitableRancidNode(node);\n        log().debug(\"doUpdate: found updated Node : \" + rUpdatedNode.toString());\n\n        if (rLocalNode.getDeviceName().equalsIgnoreCase(rUpdatedNode.getDeviceName())) {            \n            try {\n                RancidNode rRemoteNode = RWSClientApi.getRWSRancidNodeTLO(cp, rLocalNode.getGroup(), rLocalNode.getDeviceName());\n                RancidNodeAuthentication rRemoteNodeAuth = RWSClientApi.getRWSAuthNode(cp, rLocalNode.getDeviceName());\n                log().debug(\"doUpdate: found Node in router.db : \" + rRemoteNode.toString());\n                if (!rUpdatedNode.getDeviceType().equalsIgnoreCase(rRemoteNode.getDeviceType())) {\n                    try {\n                        // don't change the status of the node in update operation\n                        rUpdatedNode.setStateUp(rRemoteNode.isStateUp());\n                        log().debug(\"doUpdate: updating router.db\");\n                        RWSClientApi.updateRWSRancidNode(cp, rLocalNode);\n                    } catch (Throwable e) {\n                        log().error(\"doUpdate: failed to update node: \" + nodeId + \" Exception: \" + e.getMessage());\n                    }\n                }\n                \n                if ( updateAuth(rUpdatedNode.getAuth(), rRemoteNodeAuth) ) {\n                    log().debug(\"doUpdate: updating authentication data\");\n                    try {\n                        RWSClientApi.updateRWSAuthNode(cp, rUpdatedNode.getAuth());                                                        \n                    } catch (Throwable e) {\n                        log().error(\"doUpdate: Failed to update node authentication data: \" + nodeId + \" Exception: \" + e.getMessage());\n                    }\n                }\n                \n                rUpdatedNode.setStateUp(rLocalNode.isStateUp());\n                m_onmsNodeRancidNodeMap.put(nodeId, rUpdatedNode);\n            \n            } catch (RancidApiException re) {\n                if (re.getRancidCode() ==RancidApiException.RWS_RESOURCE_NOT_FOUND) {\n                    log().warn(\"doUpdate: node not found in router.db: \" + rUpdatedNode.toString());\n                    try {\n                        log().debug(\"doUpdate: adding Node to router.db for nodeid: \" + nodeId);\n                        rUpdatedNode.setStateUp(true);\n                        RWSClientApi.createRWSRancidNode(cp, rUpdatedNode);\n                        RWSClientApi.createOrUpdateRWSAuthNode(cp, rUpdatedNode.getAuth());\n                        m_onmsNodeRancidNodeMap.put(nodeId, rUpdatedNode);\n                    } catch (RancidApiException e) {\n                        log().error(\"doUpdate: Failed to create node: \" + nodeId + \" Exception: \" + e.getMessage());\n                        sendAndThrow(nodeId, e);            \n                    }\n                } else {\n                    cp = getStandByRWSConnection();\n                    if (retry && cp != null) {\n                        log().info(\"doUpdate: retry Update on standByConn: \" + cp.getUrl());\n                        doUpdate(nodeId, cp, false);\n                    } else {\n                        sendAndThrow(nodeId, re);            \n                    }\n                } \n            }\n        } else {\n            log().debug(\"doUpdate: the device name is changed for Nodeid: \" + nodeId);\n        \n            log().debug(\"doUpdate: calling doDelete for NodeId: \" + nodeId);\n            doDelete(nodeId, cp, retry);\n            \n            try {\n                log().debug(\"doUpdate: adding Node to router.db for nodeid: \" + nodeId);\n                rUpdatedNode.setStateUp(true);\n                RWSClientApi.createRWSRancidNode(cp, rUpdatedNode);\n                RWSClientApi.createOrUpdateRWSAuthNode(cp, rUpdatedNode.getAuth());\n                m_onmsNodeRancidNodeMap.put(nodeId, rUpdatedNode);\n                m_onmsNodeIpMap.put(nodeId, ipaddress);\n            } catch (RancidApiException e) {\n                log().error(\"doUpdate: Failed to create node: \" + nodeId + \" Exception: \" + e.getMessage());\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":7092,"modified_method":"/**\n     * <p>doUpdate<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        LOG.debug(\"doUpdate: updating nodeid: {}\", nodeId);\n            \n        RancidNode rLocalNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n        LOG.debug(\"doUpdate: found local map Node: {}\", rLocalNode);\n        \n        final OnmsNode node = m_nodeDao.get(nodeId);\n        Assert.notNull(node, \"doUpdate: failed to return node for given nodeId:\"+nodeId);\n \n        String ipaddress = m_template.execute(new TransactionCallback<String>() {\n            @Override\n            public String doInTransaction(TransactionStatus arg0) {\n                return getSuitableIpForRancid(node);\n            }\n        });\n\n        m_onmsNodeIpMap.put(nodeId, ipaddress);\n\n        RancidNode rUpdatedNode = getSuitableRancidNode(node);\n        LOG.debug(\"doUpdate: found updated Node : {}\", rUpdatedNode);\n\n        if (rLocalNode.getDeviceName().equalsIgnoreCase(rUpdatedNode.getDeviceName())) {            \n            try {\n                RancidNode rRemoteNode = RWSClientApi.getRWSRancidNodeTLO(cp, rLocalNode.getGroup(), rLocalNode.getDeviceName());\n                RancidNodeAuthentication rRemoteNodeAuth = RWSClientApi.getRWSAuthNode(cp, rLocalNode.getDeviceName());\n                LOG.debug(\"doUpdate: found Node in router.db : {}\", rRemoteNode);\n                if (!rUpdatedNode.getDeviceType().equalsIgnoreCase(rRemoteNode.getDeviceType())) {\n                    try {\n                        // don't change the status of the node in update operation\n                        rUpdatedNode.setStateUp(rRemoteNode.isStateUp());\n                        LOG.debug(\"doUpdate: updating router.db\");\n                        RWSClientApi.updateRWSRancidNode(cp, rLocalNode);\n                    } catch (Throwable e) {\n                        LOG.error(\"doUpdate: failed to update node: {} Exception: {}\", e.getMessage(), nodeId);\n                    }\n                }\n                \n                if ( updateAuth(rUpdatedNode.getAuth(), rRemoteNodeAuth) ) {\n                    LOG.debug(\"doUpdate: updating authentication data\");\n                    try {\n                        RWSClientApi.updateRWSAuthNode(cp, rUpdatedNode.getAuth());                                                        \n                    } catch (Throwable e) {\n                        LOG.error(\"doUpdate: Failed to update node authentication data: {} Exception: {}\", e.getMessage(), nodeId);\n                    }\n                }\n                \n                rUpdatedNode.setStateUp(rLocalNode.isStateUp());\n                m_onmsNodeRancidNodeMap.put(nodeId, rUpdatedNode);\n            \n            } catch (RancidApiException re) {\n                if (re.getRancidCode() ==RancidApiException.RWS_RESOURCE_NOT_FOUND) {\n                    LOG.warn(\"doUpdate: node not found in router.db: {}\", rUpdatedNode);\n                    try {\n                        LOG.debug(\"doUpdate: adding Node to router.db for nodeid: {}\", nodeId);\n                        rUpdatedNode.setStateUp(true);\n                        RWSClientApi.createRWSRancidNode(cp, rUpdatedNode);\n                        RWSClientApi.createOrUpdateRWSAuthNode(cp, rUpdatedNode.getAuth());\n                        m_onmsNodeRancidNodeMap.put(nodeId, rUpdatedNode);\n                    } catch (RancidApiException e) {\n                        LOG.error(\"doUpdate: Failed to create node: {} Exception: {}\", e.getMessage(), nodeId);\n                        sendAndThrow(nodeId, e);            \n                    }\n                } else {\n                    cp = getStandByRWSConnection();\n                    if (retry && cp != null) {\n                        LOG.info(\"doUpdate: retry Update on standByConn: {}\", cp.getUrl());\n                        doUpdate(nodeId, cp, false);\n                    } else {\n                        sendAndThrow(nodeId, re);            \n                    }\n                } \n            }\n        } else {\n            LOG.debug(\"doUpdate: the device name is changed for Nodeid: {}\", nodeId);\n        \n            LOG.debug(\"doUpdate: calling doDelete for NodeId: {}\", nodeId);\n            doDelete(nodeId, cp, retry);\n            \n            try {\n                LOG.debug(\"doUpdate: adding Node to router.db for nodeid: {}\", nodeId);\n                rUpdatedNode.setStateUp(true);\n                RWSClientApi.createRWSRancidNode(cp, rUpdatedNode);\n                RWSClientApi.createOrUpdateRWSAuthNode(cp, rUpdatedNode.getAuth());\n                m_onmsNodeRancidNodeMap.put(nodeId, rUpdatedNode);\n                m_onmsNodeIpMap.put(nodeId, ipaddress);\n            } catch (RancidApiException e) {\n                LOG.error(\"doUpdate: Failed to create node: {} Exception: {}\", e.getMessage(), nodeId);\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>doNodeConfigChanged<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"doNodeConfigChanged: nodeid: \" + nodeId);\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateConfiguration(nodeId,m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)),cp, retry);\n            } else {\n                log().warn(\"doNodeConfigChanged: No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n    }","id":7093,"modified_method":"/**\n     * <p>doNodeConfigChanged<\/p>\n     *\n     * @param nodeId a int.\n     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.\n     * @param retry a boolean.\n     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.\n     */\n    public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        LOG.debug(\"doNodeConfigChanged: nodeid: {}\", nodeId);\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateConfiguration(nodeId,m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)),cp, retry);\n            } else {\n                LOG.warn(\"doNodeConfigChanged: No node found in nodeRancid Map for nodeid: {}\", nodeId);\n            }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private String getTypeFromCategories(OnmsNode node) {\n        for (String rancidType: m_rancid_categories) {\n            for (OnmsCategory nodecategory: node.getCategories()) {\n                if (nodecategory.getName().equalsIgnoreCase(rancidType)) {\n                    log().debug(\"getTypeFromCategories: Found Matching Category: Rancid devicetype found: \" + rancidType);\n                    return rancidType;\n                }\n            }\n        }\n        log().warn(\"getTypeFromCategories: No Matching Category found: trying to get devicetype using config file\");\n        return getTypeFromCategories(node);\n    }","id":7094,"modified_method":"private String getTypeFromCategories(OnmsNode node) {\n        for (String rancidType: m_rancid_categories) {\n            for (OnmsCategory nodecategory: node.getCategories()) {\n                if (nodecategory.getName().equalsIgnoreCase(rancidType)) {\n                    LOG.debug(\"getTypeFromCategories: Found Matching Category: Rancid devicetype found: {}\", rancidType);\n                    return rancidType;\n                }\n            }\n        }\n        LOG.warn(\"getTypeFromCategories: No Matching Category found: trying to get devicetype using config file\");\n        return getTypeFromCategories(node);\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>handleRancidDownLoadFailure<\/p>\n     *\n     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"handleRancidDownLoadFailure: get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","id":7095,"modified_method":"/**\n     * <p>handleRancidDownLoadFailure<\/p>\n     *\n     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        LOG.debug(\"handleRancidDownLoadFailure: get Event uei/id: {} / {}\", e.getDbid(), e.getUei());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n            } else {\n                LOG.warn(\"node does not exist with nodeid: {}\", e.getNodeid());\n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //The group should be the foreign source of the node\n\n        String group = node.getForeignSource();\n\n        if (group == null) return null;\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        String ipaddress = m_onmsNodeIpMap.get(node.getId());\n\n        if (m_rancidAdapterConfig.useCategories(ipaddress)) {\n            log().debug(\"getSuitableRancidNode: Using Categories to get Rancid devicetype for node: \" + node.getLabel());\n            r_node.setDeviceType(getTypeFromCategories(node)); \n        } else {\n            log().debug(\"getSuitableRancidNode: Using Sysoid to get Rancid devicetype for node: \" + node.getLabel());\n            r_node.setDeviceType(getTypeFromSysObjectId(node.getSysObjectId()));\n        }\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        r_node.setAuth(getSuitableRancidNodeAuthentication(node));\n        return r_node;\n        \n\n    }","id":7096,"modified_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //The group should be the foreign source of the node\n\n        String group = node.getForeignSource();\n\n        if (group == null) return null;\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        String ipaddress = m_onmsNodeIpMap.get(node.getId());\n\n        if (m_rancidAdapterConfig.useCategories(ipaddress)) {\n            LOG.debug(\"getSuitableRancidNode: Using Categories to get Rancid devicetype for node: {}\", node.getLabel());\n            r_node.setDeviceType(getTypeFromCategories(node)); \n        } else {\n            LOG.debug(\"getSuitableRancidNode: Using Sysoid to get Rancid devicetype for node: {}\", node.getLabel());\n            r_node.setDeviceType(getTypeFromSysObjectId(node.getSysObjectId()));\n        }\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        r_node.setAuth(getSuitableRancidNodeAuthentication(node));\n        return r_node;\n        \n\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public boolean isNodeReady(final AdapterOperation op) {\n        boolean ready = true;\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            ready =\n            m_rancidAdapterConfig.isCurTimeInSchedule(m_onmsNodeIpMap.get(op.getNodeId()));\n        }\n        log().debug(\"isNodeReady: \" + ready + \" For Operation \" + op.getType() + \" for node: \" + op.getNodeId());\n        return ready;\n    }","id":7097,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public boolean isNodeReady(final AdapterOperation op) {\n        boolean ready = true;\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            ready =\n            m_rancidAdapterConfig.isCurTimeInSchedule(m_onmsNodeIpMap.get(op.getNodeId()));\n        }\n        LOG.debug(\"isNodeReady: {} For Operation {} for node: {}\", op.getNodeId(), ready, op.getType());\n        return ready;\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void updateConfiguration(int nodeid, RancidNode rNode,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"updateConfiguration: Updating Rancid Router.db configuration for node: \" + rNode.getDeviceName() + \" type: \" + rNode.getDeviceType() + \" group: \" + rNode.getGroup());\n        try {\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n        } catch (Throwable e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"updateConfiguration: retry update on standByConn: \" + cp.getUrl());\n                updateConfiguration(nodeid, rNode, cp, false);\n            } else {\n                sendAndThrow(nodeid, e);            \n            }\n        }\n    }","id":7098,"modified_method":"private void updateConfiguration(int nodeid, RancidNode rNode,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        LOG.debug(\"updateConfiguration: Updating Rancid Router.db configuration for node: {} type: {} group: {}\", rNode.getGroup(), rNode.getDeviceName(), rNode.getDeviceType());\n        try {\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n        } catch (Throwable e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                LOG.info(\"updateConfiguration: retry update on standByConn: {}\", cp.getUrl());\n                updateConfiguration(nodeid, rNode, cp, false);\n            } else {\n                sendAndThrow(nodeid, e);            \n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>handleRancidDownLoadSuccess<\/p>\n     *\n     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RANCID_DOWNLOAD_SUCCESS_UEI)\n    public void handleRancidDownLoadSuccess(Event e) {\n        log().debug(\"handleRancidDownLoadSuccess: get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid() ) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","id":7099,"modified_method":"/**\n     * <p>handleRancidDownLoadSuccess<\/p>\n     *\n     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.\n     */\n    @EventHandler(uei = EventConstants.RANCID_DOWNLOAD_SUCCESS_UEI)\n    public void handleRancidDownLoadSuccess(Event e) {\n        LOG.debug(\"handleRancidDownLoadSuccess: get Event uei/id: {} / {}\", e.getDbid(), e.getUei());\n        if (e.hasNodeid() ) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n            } else {\n                LOG.warn(\"node does not exist with nodeid: {}\", e.getNodeid());\n            }\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private boolean isReloadConfigEventTarget(Event event) {\n        boolean isTarget = false;\n        \n        List<Parm> parmCollection = event.getParmCollection();\n\n        for (Parm parm : parmCollection) {\n            if (EventConstants.PARM_DAEMON_NAME.equals(parm.getParmName()) && \"Provisiond.RancidProvisioningAdapter\".equalsIgnoreCase(parm.getValue().getContent())) {\n                isTarget = true;\n                break;\n            }\n        }\n        \n        log().debug(\"isReloadConfigEventTarget: Provisiond.RancidProvisioningAdapter was target of reload event: \" + isTarget);\n        return isTarget;\n    }","id":7100,"modified_method":"private boolean isReloadConfigEventTarget(Event event) {\n        boolean isTarget = false;\n        \n        List<Parm> parmCollection = event.getParmCollection();\n\n        for (Parm parm : parmCollection) {\n            if (EventConstants.PARM_DAEMON_NAME.equals(parm.getParmName()) && \"Provisiond.RancidProvisioningAdapter\".equalsIgnoreCase(parm.getValue().getContent())) {\n                isTarget = true;\n                break;\n            }\n        }\n        \n        LOG.debug(\"isReloadConfigEventTarget: Provisiond.RancidProvisioningAdapter was target of reload event: {}\", isTarget);\n        return isTarget;\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public void processPendingOperationForNode(final AdapterOperation op) throws ProvisioningAdapterException {\n        log().debug(\"processPendingOperationForNode: \" + op.getType() + \" for node: \" + op.getNodeId() );\n        if (op.getType() == AdapterOperationType.ADD) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doAdd(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        } else if (op.getType() == AdapterOperationType.UPDATE) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doUpdate(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        } else if (op.getType() == AdapterOperationType.DELETE) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doDelete(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        } else if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doNodeConfigChanged(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        }\n    }","id":7101,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public void processPendingOperationForNode(final AdapterOperation op) throws ProvisioningAdapterException {\n        LOG.debug(\"processPendingOperationForNode: {} for node: {}\", op.getNodeId(), op.getType());\n        if (op.getType() == AdapterOperationType.ADD) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doAdd(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        } else if (op.getType() == AdapterOperationType.UPDATE) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doUpdate(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        } else if (op.getType() == AdapterOperationType.DELETE) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doDelete(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        } else if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            m_template.execute(new TransactionCallback<Object>() {\n                @Override\n                public Object doInTransaction(TransactionStatus arg0) {\n                    doNodeConfigChanged(op.getNodeId(),m_cp,true);\n                    return null;\n                }\n            });\n        }\n    }","commit_id":"1893a4f95cad80b0aa0ed840aab65c9af3fb7b25","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static String getHostsDeclaration(Collection<HostGeoInfo> hosts) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"$hosts = array(\\n\");\n        Iterator<HostGeoInfo> iServer = hosts.iterator();\n        while (iServer.hasNext()) {\n            HostGeoInfo server = iServer.next();\n            sb.append(\"    array('name'      => '\").append(server.displayName).append(\"',\\n\");\n            sb.append(\"          'latitude'  => \").append(server.latitude).append(\",\\n\");\n            sb.append(\"          'longitude' => \").append(server.longitude).append(\",\\n\");\n            sb.append(\"          'ip'        => '\").append(server.address).append(\"')\");\n            if (iServer.hasNext()) sb.append(\",\\n\");\n            sb.append(\"\\n\");\n        }\n        sb.append(\");\\n\");\n        return sb.toString();\n    }","id":7102,"modified_method":"private static String getHostsDeclaration(Collection<HostGeoInfo> hosts) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"$hosts = array(\\n\");\n        Iterator<HostGeoInfo> iServer = hosts.iterator();\n        while (iServer.hasNext()) {\n            HostGeoInfo server = iServer.next();\n            sb.append(\"    array('name'      => '\").append(escape(server.displayName)).append(\"',\\n\");\n            sb.append(\"          'latitude'  => \").append(server.latitude).append(\",\\n\");\n            sb.append(\"          'longitude' => \").append(server.longitude).append(\",\\n\");\n            sb.append(\"          'ip'        => '\").append(escape(server.address)).append(\"')\");\n            if (iServer.hasNext()) sb.append(\",\\n\");\n            sb.append(\"\\n\");\n        }\n        sb.append(\");\\n\");\n        return sb.toString();\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void logout() {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth&logout\", HOST, PATH);\n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-out of GeoScaling service: \"+e, e);\n        }\n    }","id":7103,"modified_method":"public void logout() {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth&logout\", HOST, PATH);\n            sendRequest(new HttpGet(url), true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-out of GeoScaling service: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void createSmartSubdomain(int primaryDomainId, String smartSubdomainName) {\n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, primaryDomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"smart_subdomain_name\", smartSubdomainName));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n    }","id":7104,"modified_method":"private void createSmartSubdomain(int primaryDomainId, String smartSubdomainName) {\n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, primaryDomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"smart_subdomain_name\", smartSubdomainName));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n                        \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void deleteSmartSubdomain(int primaryDomainId, int smartSubdomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}&delete={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling smart subdomain: \"+e, e);\n        }\n    }","id":7105,"modified_method":"private void deleteSmartSubdomain(int primaryDomainId, int smartSubdomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}&delete={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            sendRequest(new HttpGet(url), true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling smart subdomain: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void createPrimaryDomain(String name) {\n        try {\n            name = name.toLowerCase();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"domain\", name));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n        \n        primaryDomains = fetchPrimaryDomains();\n    }","id":7106,"modified_method":"public void createPrimaryDomain(String name) {\n        try {\n            name = name.toLowerCase();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"domain\", name));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n        \n        primaryDomains = fetchPrimaryDomains();\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void login(String username, String password) {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"username\", username));\n            nameValuePairs.add(new BasicNameValuePair(\"password\", password));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-in to GeoScaling service: \"+e, e);\n        }\n    }","id":7107,"modified_method":"public void login(String username, String password) {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"username\", username));\n            nameValuePairs.add(new BasicNameValuePair(\"password\", password));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-in to GeoScaling service: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void configureSmartSubdomain(int primaryDomainId, int smartSubdomainId, String smartSubdomainName,\n            long flags, String phpScript) {\n        \n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomain&id={2,number,#}&subdomain_id={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"name\", smartSubdomainName));\n            if ((flags & PROVIDE_NETWORK_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_as_info\", \"on\"));\n            if ((flags & PROVIDE_CITY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_city_info\", \"on\"));\n            if ((flags & PROVIDE_COUNTRY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_country_info\", \"on\"));\n            if ((flags & PROVIDE_EXTRA_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_extra_info\", \"on\"));\n            if ((flags & PROVIDE_UPTIME_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_uptime_info\", \"on\"));\n            nameValuePairs.add(new BasicNameValuePair(\"code\", phpScript));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to update GeoScaling smart subdomain: \"+e, e);\n        }\n    }","id":7108,"modified_method":"private void configureSmartSubdomain(int primaryDomainId, int smartSubdomainId, String smartSubdomainName,\n            long flags, String phpScript) {\n        \n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomain&id={2,number,#}&subdomain_id={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"name\", smartSubdomainName));\n            if ((flags & PROVIDE_NETWORK_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_as_info\", \"on\"));\n            if ((flags & PROVIDE_CITY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_city_info\", \"on\"));\n            if ((flags & PROVIDE_COUNTRY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_country_info\", \"on\"));\n            if ((flags & PROVIDE_EXTRA_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_extra_info\", \"on\"));\n            if ((flags & PROVIDE_UPTIME_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_uptime_info\", \"on\"));\n            nameValuePairs.add(new BasicNameValuePair(\"code\", phpScript));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to update GeoScaling smart subdomain: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private List<Domain> fetchPrimaryDomains() {\n        try {\n            List<Domain> domains = new LinkedList<Domain>();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=domain.*&id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int id = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link).trim();\n                    if (name.length() == 0) continue;\n                    \n                    domains.add(new Domain(id, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return domains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling subdomains: \"+e, e);\n        }\n    }","id":7109,"modified_method":"private List<Domain> fetchPrimaryDomains() {\n        try {\n            List<Domain> domains = new LinkedList<Domain>();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            HttpResponse response = sendRequest(new HttpGet(url), false);\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=domain.*&id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int id = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link).trim();\n                    if (name.length() == 0) continue;\n                    \n                    domains.add(new Domain(id, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return domains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling subdomains: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void deletePrimaryDomain(int primaryDomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=domain&id={2,number,#}&delete=1\",\n                    HOST, PATH, primaryDomainId);\n            \n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling primary domain: \"+e, e);\n        }\n    }","id":7110,"modified_method":"private void deletePrimaryDomain(int primaryDomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=domain&id={2,number,#}&delete=1\",\n                    HOST, PATH, primaryDomainId);\n            \n            sendRequest(new HttpGet(url), true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling primary domain: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private List<SmartSubdomain> fetchSmartSubdomains(Domain parent) {\n        try {\n            List<SmartSubdomain> subdomains = new LinkedList<SmartSubdomain>();\n            \n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, parent.id);\n            \n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=smart_subdomain.*&subdomain_id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int subdomainId = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link);\n                    if (name.trim().length() == 0) continue;\n                    \n                    name = name.substring(0, name.length() - parent.name.length() - 1);\n                    subdomains.add(new SmartSubdomain(parent, subdomainId, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return subdomains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling smart subdomains: \"+e, e);\n        }\n    }","id":7111,"modified_method":"private List<SmartSubdomain> fetchSmartSubdomains(Domain parent) {\n        try {\n            List<SmartSubdomain> subdomains = new LinkedList<SmartSubdomain>();\n            \n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, parent.id);\n            \n            HttpResponse response = sendRequest(new HttpGet(url), false);\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=smart_subdomain.*&subdomain_id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int subdomainId = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link);\n                    if (name.trim().length() == 0) continue;\n                    \n                    name = name.substring(0, name.length() - parent.name.length() - 1);\n                    subdomains.add(new SmartSubdomain(parent, subdomainId, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return subdomains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling smart subdomains: \"+e, e);\n        }\n    }","commit_id":"180b2506a9d41bbe665dab3f64e11b4302dd58d1","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private static String getHostsDeclaration(Collection<HostGeoInfo> hosts) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"$hosts = array(\\n\");\n        Iterator<HostGeoInfo> iServer = hosts.iterator();\n        while (iServer.hasNext()) {\n            HostGeoInfo server = iServer.next();\n            sb.append(\"    array('name'      => '\").append(server.displayName).append(\"',\\n\");\n            sb.append(\"          'latitude'  => \").append(server.latitude).append(\",\\n\");\n            sb.append(\"          'longitude' => \").append(server.longitude).append(\",\\n\");\n            sb.append(\"          'ip'        => '\").append(server.address).append(\"')\");\n            if (iServer.hasNext()) sb.append(\",\\n\");\n            sb.append(\"\\n\");\n        }\n        sb.append(\");\\n\");\n        return sb.toString();\n    }","id":7112,"modified_method":"private static String getHostsDeclaration(Collection<HostGeoInfo> hosts) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"$hosts = array(\\n\");\n        Iterator<HostGeoInfo> iServer = hosts.iterator();\n        while (iServer.hasNext()) {\n            HostGeoInfo server = iServer.next();\n            sb.append(\"    array('name'      => '\").append(escape(server.displayName)).append(\"',\\n\");\n            sb.append(\"          'latitude'  => \").append(server.latitude).append(\",\\n\");\n            sb.append(\"          'longitude' => \").append(server.longitude).append(\",\\n\");\n            sb.append(\"          'ip'        => '\").append(escape(server.address)).append(\"')\");\n            if (iServer.hasNext()) sb.append(\",\\n\");\n            sb.append(\"\\n\");\n        }\n        sb.append(\");\\n\");\n        return sb.toString();\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void logout() {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth&logout\", HOST, PATH);\n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-out of GeoScaling service: \"+e, e);\n        }\n    }","id":7113,"modified_method":"public void logout() {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth&logout\", HOST, PATH);\n            sendRequest(new HttpGet(url), true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-out of GeoScaling service: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void deletePrimaryDomain(int primaryDomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=domain&id={2,number,#}&delete=1\",\n                    HOST, PATH, primaryDomainId);\n            \n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling primary domain: \"+e, e);\n        }\n    }","id":7114,"modified_method":"private void deletePrimaryDomain(int primaryDomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=domain&id={2,number,#}&delete=1\",\n                    HOST, PATH, primaryDomainId);\n            \n            sendRequest(new HttpGet(url), true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling primary domain: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void createSmartSubdomain(int primaryDomainId, String smartSubdomainName) {\n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, primaryDomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"smart_subdomain_name\", smartSubdomainName));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n    }","id":7115,"modified_method":"private void createSmartSubdomain(int primaryDomainId, String smartSubdomainName) {\n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, primaryDomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"smart_subdomain_name\", smartSubdomainName));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n                        \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void createPrimaryDomain(String name) {\n        try {\n            name = name.toLowerCase();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"domain\", name));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n        \n        primaryDomains = fetchPrimaryDomains();\n    }","id":7116,"modified_method":"public void createPrimaryDomain(String name) {\n        try {\n            name = name.toLowerCase();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"domain\", name));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create GeoScaling smart subdomain: \"+e, e);\n        }\n        \n        primaryDomains = fetchPrimaryDomains();\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void login(String username, String password) {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"username\", username));\n            nameValuePairs.add(new BasicNameValuePair(\"password\", password));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-in to GeoScaling service: \"+e, e);\n        }\n    }","id":7117,"modified_method":"public void login(String username, String password) {\n        try {\n            String url = MessageFormat.format(\"https://{0}/{1}?module=auth\", HOST, PATH);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"username\", username));\n            nameValuePairs.add(new BasicNameValuePair(\"password\", password));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to log-in to GeoScaling service: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void configureSmartSubdomain(int primaryDomainId, int smartSubdomainId, String smartSubdomainName,\n            long flags, String phpScript) {\n        \n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomain&id={2,number,#}&subdomain_id={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"name\", smartSubdomainName));\n            if ((flags & PROVIDE_NETWORK_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_as_info\", \"on\"));\n            if ((flags & PROVIDE_CITY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_city_info\", \"on\"));\n            if ((flags & PROVIDE_COUNTRY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_country_info\", \"on\"));\n            if ((flags & PROVIDE_EXTRA_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_extra_info\", \"on\"));\n            if ((flags & PROVIDE_UPTIME_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_uptime_info\", \"on\"));\n            nameValuePairs.add(new BasicNameValuePair(\"code\", phpScript));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            HttpResponse response = httpClient.execute(request);\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to update GeoScaling smart subdomain: \"+e, e);\n        }\n    }","id":7118,"modified_method":"private void configureSmartSubdomain(int primaryDomainId, int smartSubdomainId, String smartSubdomainName,\n            long flags, String phpScript) {\n        \n        try {\n            smartSubdomainName = smartSubdomainName.toLowerCase();\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomain&id={2,number,#}&subdomain_id={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            HttpPost request = new HttpPost(url);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n            nameValuePairs.add(new BasicNameValuePair(\"MAX_FILE_SIZE\", \"65536\"));\n            nameValuePairs.add(new BasicNameValuePair(\"name\", smartSubdomainName));\n            if ((flags & PROVIDE_NETWORK_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_as_info\", \"on\"));\n            if ((flags & PROVIDE_CITY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_city_info\", \"on\"));\n            if ((flags & PROVIDE_COUNTRY_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_country_info\", \"on\"));\n            if ((flags & PROVIDE_EXTRA_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_extra_info\", \"on\"));\n            if ((flags & PROVIDE_UPTIME_INFO) != 0) nameValuePairs.add(new BasicNameValuePair(\"share_uptime_info\", \"on\"));\n            nameValuePairs.add(new BasicNameValuePair(\"code\", phpScript));\n            request.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            \n            sendRequest(request, true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to update GeoScaling smart subdomain: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void deleteSmartSubdomain(int primaryDomainId, int smartSubdomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}&delete={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            if (response.getEntity() != null)\n                EntityUtils.consume(response.getEntity());\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling smart subdomain: \"+e, e);\n        }\n    }","id":7119,"modified_method":"private void deleteSmartSubdomain(int primaryDomainId, int smartSubdomainId) {\n        try {\n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}&delete={3,number,#}\",\n                    HOST, PATH, primaryDomainId, smartSubdomainId);\n            \n            sendRequest(new HttpGet(url), true);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to delete GeoScaling smart subdomain: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private List<SmartSubdomain> fetchSmartSubdomains(Domain parent) {\n        try {\n            List<SmartSubdomain> subdomains = new LinkedList<SmartSubdomain>();\n            \n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, parent.id);\n            \n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=smart_subdomain.*&subdomain_id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int subdomainId = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link);\n                    if (name.trim().length() == 0) continue;\n                    \n                    name = name.substring(0, name.length() - parent.name.length() - 1);\n                    subdomains.add(new SmartSubdomain(parent, subdomainId, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return subdomains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling smart subdomains: \"+e, e);\n        }\n    }","id":7120,"modified_method":"private List<SmartSubdomain> fetchSmartSubdomains(Domain parent) {\n        try {\n            List<SmartSubdomain> subdomains = new LinkedList<SmartSubdomain>();\n            \n            String url = MessageFormat.format(\n                    \"https://{0}/{1}?module=smart_subdomains&id={2,number,#}\",\n                    HOST, PATH, parent.id);\n            \n            HttpResponse response = sendRequest(new HttpGet(url), false);\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=smart_subdomain.*&subdomain_id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int subdomainId = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link);\n                    if (name.trim().length() == 0) continue;\n                    \n                    name = name.substring(0, name.length() - parent.name.length() - 1);\n                    subdomains.add(new SmartSubdomain(parent, subdomainId, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return subdomains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling smart subdomains: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private List<Domain> fetchPrimaryDomains() {\n        try {\n            List<Domain> domains = new LinkedList<Domain>();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            HttpResponse response = httpClient.execute(new HttpGet(url));\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=domain.*&id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int id = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link).trim();\n                    if (name.length() == 0) continue;\n                    \n                    domains.add(new Domain(id, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return domains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling subdomains: \"+e, e);\n        }\n    }","id":7121,"modified_method":"private List<Domain> fetchPrimaryDomains() {\n        try {\n            List<Domain> domains = new LinkedList<Domain>();\n            String url = MessageFormat.format(\"https://{0}/{1}?module=domains\", HOST, PATH);\n            HttpResponse response = sendRequest(new HttpGet(url), false);\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                Document document = tidy.parseDOM(entity.getContent(), null);\n                NodeList links = document.getElementsByTagName(\"a\");\n                for (int i = 0; i < links.getLength(); ++i) {\n                    Element link = (Element) links.item(i);\n                    String href = link.getAttribute(\"href\");\n                    Pattern p = Pattern.compile(\"module=domain.*&id=(\\\\d+)\");\n                    Matcher m = p.matcher(href);\n                    if (!m.find(0)) continue;\n                    \n                    int id = Integer.parseInt(m.group(1));\n                    String name = getTextContent(link).trim();\n                    if (name.length() == 0) continue;\n                    \n                    domains.add(new Domain(id, name));\n                }\n                \n                EntityUtils.consume(entity);\n            }\n            \n            return domains;\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve GeoScaling subdomains: \"+e, e);\n        }\n    }","commit_id":"de8c8f68048f4c99d7c914c6ef10b74a53c6d638","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private Action<? super ExecutionListener> runBuildInProcess(StartParameter startParameter, DaemonParameters daemonParameters, ServiceRegistry loggingServices) {\n        ServiceRegistry globalServices = new DefaultServiceRegistry(loggingServices, NativeServices.getInstance()).addProvider(new GlobalScopeServices());\n        InProcessBuildActionExecuter executer = new InProcessBuildActionExecuter(globalServices.get(GradleLauncherFactory.class));\n        return daemonBuildAction(startParameter, daemonParameters, executer);\n    }","id":7122,"modified_method":"private Action<? super ExecutionListener> runBuildInProcess(StartParameter startParameter, DaemonParameters daemonParameters, ServiceRegistry loggingServices) {\n        ServiceRegistry globalServices = ServiceRegistryBuilder.builder()\n                .displayName(\"Global services\")\n                .parent(loggingServices)\n                .parent(NativeServices.getInstance())\n                .provider(new GlobalScopeServices())\n                .build();\n        InProcessBuildActionExecuter executer = new InProcessBuildActionExecuter(globalServices.get(GradleLauncherFactory.class));\n        return daemonBuildAction(startParameter, daemonParameters, executer);\n    }","commit_id":"63fde612690aa51ef362cacd62925350fc5df838","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * This is used by consumers 1.0-milestone-3 and later\n     */\n    public DefaultConnection() {\n        LOGGER.debug(\"Tooling API provider {} created.\", GradleVersion.current().getVersion());\n        LoggingServiceRegistry loggingServices = LoggingServiceRegistry.newEmbeddableLogging();\n        services = new DefaultServiceRegistry(loggingServices, NativeServices.getInstance()).addProvider(new ConnectionScopeServices(loggingServices));\n        adapter = services.get(ProtocolToModelAdapter.class);\n        connection = services.get(ProviderConnection.class);\n    }","id":7123,"modified_method":"/**\n     * This is used by consumers 1.0-milestone-3 and later\n     */\n    public DefaultConnection() {\n        LOGGER.debug(\"Tooling API provider {} created.\", GradleVersion.current().getVersion());\n        LoggingServiceRegistry loggingServices = LoggingServiceRegistry.newEmbeddableLogging();\n        services = ServiceRegistryBuilder.builder()\n                .displayName(\"Connection services\")\n                .parent(loggingServices)\n                .parent(NativeServices.getInstance())\n                .provider(new ConnectionScopeServices(loggingServices)).build();\n        adapter = services.get(ProtocolToModelAdapter.class);\n        connection = services.get(ProviderConnection.class);\n    }","commit_id":"63fde612690aa51ef362cacd62925350fc5df838","url":"https://github.com/gradle/gradle"},{"original_method":"private static synchronized GradleLauncherFactory doGetFactory() {\n        if (factory == null) {\n            factory = new DefaultServiceRegistry(LoggingServiceRegistry.newProcessLogging(), NativeServices.getInstance()).addProvider(new GlobalScopeServices()).get(GradleLauncherFactory.class);\n        }\n        return factory;\n    }","id":7124,"modified_method":"private static synchronized GradleLauncherFactory doGetFactory() {\n        if (factory == null) {\n            factory = ServiceRegistryBuilder.builder()\n                    .displayName(\"Global services\")\n                    .parent(LoggingServiceRegistry.newProcessLogging())\n                    .parent(NativeServices.getInstance())\n                    .provider(new GlobalScopeServices())\n                    .build()\n                    .get(GradleLauncherFactory.class);\n        }\n        return factory;\n    }","commit_id":"63fde612690aa51ef362cacd62925350fc5df838","url":"https://github.com/gradle/gradle"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars)) + \"{\" + SPropertyOperations.getInteger(thisNode, \"n\") + \",}\";\n  }","id":7125,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    String s = Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars);\n    return ((UnaryRegexp_Behavior.call_inParentheses_1353467374623956744(thisNode) ?\n      Regexp_Behavior.call_par_1222433790846(thisNode, s) :\n      s\n    )) + \"{\" + SPropertyOperations.getInteger(thisNode, \"n\") + \",}\";\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars)) + \"{\" + SPropertyOperations.getInteger(thisNode, \"n\") + \",\" + SPropertyOperations.getInteger(thisNode, \"m\") + \"}\";\n  }","id":7126,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    String s = Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars);\n    return ((UnaryRegexp_Behavior.call_inParentheses_1353467374623956744(thisNode) ?\n      Regexp_Behavior.call_par_1222433790846(thisNode, s) :\n      s\n    )) + \"{\" + SPropertyOperations.getInteger(thisNode, \"n\") + \",\" + SPropertyOperations.getInteger(thisNode, \"m\") + \"}\";\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return SConceptPropertyOperations.getString(thisNode, \"alias\") + Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars)) + \")\";\n  }","id":7127,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return SConceptPropertyOperations.getString(thisNode, \"alias\") + Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars) + \")\";\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, \"\\\\\\\\\" + (ListSequence.fromList(vars).indexOf(SLinkOperations.getTarget(thisNode, \"match\", false)) + 1));\n  }","id":7128,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return \"\\\\\" + (ListSequence.fromList(vars).indexOf(SLinkOperations.getTarget(thisNode, \"match\", false)) + 1);\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars)) + \"{\" + SPropertyOperations.getInteger(thisNode, \"n\") + \"}\";\n  }","id":7129,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    String s = Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars);\n    return ((UnaryRegexp_Behavior.call_inParentheses_1353467374623956744(thisNode) ?\n      Regexp_Behavior.call_par_1222433790846(thisNode, s) :\n      s\n    )) + \"{\" + SPropertyOperations.getInteger(thisNode, \"n\") + \"}\";\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"left\", true), vars)) + \"|\" + Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"right\", true), vars));\n  }","id":7130,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    String s = Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"left\", true), vars) + \"|\" + Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"right\", true), vars);\n    return (OrRegexp_Behavior.call_inParentheses_1353467374623956858(thisNode) ?\n      Regexp_Behavior.call_par_1222433790846(thisNode, s) :\n      s\n    );\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_escape_1353467374624660231(thisNode, SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, \"symbolClass\", false), \"name\"));\n  }","id":7131,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, \"symbolClass\", false), \"name\");\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String call_quote_1222857178958(SNode thisNode, char ch) {\n    return Regexp_Behavior.call_escape_1353467374624660231(thisNode, Pattern.quote(\"\" + ch));\n  }","id":7132,"modified_method":"public static String call_quote_1222857178958(SNode thisNode, char ch) {\n    return Pattern.quote(\"\" + ch);\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_toString_1213877429451(SNode thisNode) {\n    return Regexp_Behavior.call_getString_1222432436326(thisNode, new ArrayList<SNode>());\n  }","id":7133,"modified_method":"public static String virtual_toString_1213877429451(SNode thisNode) {\n    return Regexp_Behavior.call_escape_1353467374624660231(thisNode, Regexp_Behavior.call_getString_1222432436326(thisNode, new ArrayList<SNode>()));\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String call_escape_1353467374624660231(SNode thisNode, String s) {\n    if (s.indexOf('\\\\') == -1) {\n      return s;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }","id":7134,"modified_method":"public static String call_escape_1353467374624660231(SNode thisNode, String s) {\n    if (s.indexOf('\\\\') == -1) {\n      return s;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\' || c == '\"') {\n        sb.append(\"\\\\\");\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"left\", true), vars)) + Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"right\", true), vars));\n  }","id":7135,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"left\", true), vars) + Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"right\", true), vars);\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    char[] chars = new char[]{'\\\\','(',')','}','{','[',']','+','*','?','|','^','.','$'};\n    String text = SPropertyOperations.getString(thisNode, \"text\");\n    for (int i = 0; i < chars.length; i++) {\n      text = text.replaceAll(\"\\\\\" + chars[i], \"\\\\\\\\\\\\\\\\\" + chars[i]);\n    }\n    return text;\n  }","id":7136,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return StringLiteralRegexp_Behavior.call_toRegexp_8330008649152995372(thisNode, SPropertyOperations.getString(thisNode, \"text\"));\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String call_partsToString_1222857748873(SNode thisNode, List<SNode> parts) {\n    StringBuilder result = new StringBuilder();\n    for (SNode part : parts) {\n      if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart\")) {\n        SNode cscp = SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart\");\n        if (Regexp_Behavior.call_checkStringForUnicode_1222857160881(thisNode, SPropertyOperations.getString(cscp, \"character\"))) {\n          result.append(SPropertyOperations.getString(cscp, \"character\"));\n        } else {\n          result.append(Regexp_Behavior.call_quote_1222857178958(thisNode, SPropertyOperations.getString(cscp, \"character\").charAt(0)));\n        }\n      } else if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart\")) {\n        result.append(Regexp_Behavior.call_escape_1353467374624660231(thisNode, SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart\"), \"declaration\", false), \"name\")));\n      } else if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart\")) {\n        SNode iscp = SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart\");\n        String start;\n        String end = \"\";\n        if (Regexp_Behavior.call_checkStringForUnicode_1222857160881(thisNode, SPropertyOperations.getString(iscp, \"start\"))) {\n          start = SPropertyOperations.getString(iscp, \"start\");\n          if (Regexp_Behavior.call_checkStringForUnicode_1222857160881(thisNode, SPropertyOperations.getString(iscp, \"end\"))) {\n            end = SPropertyOperations.getString(iscp, \"end\");\n          }\n        } else {\n          start = Regexp_Behavior.call_escape_1353467374624660231(thisNode, SPropertyOperations.getString(iscp, \"start\"));\n          end = Regexp_Behavior.call_escape_1353467374624660231(thisNode, SPropertyOperations.getString(iscp, \"end\"));\n        }\n        result.append(start).append(\"-\").append(end);\n      } else if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart\")) {\n        SNode iscp = SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart\");\n        SNode left = SLinkOperations.getTarget(iscp, \"left\", true);\n        if (SNodeOperations.isInstanceOf(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp\")) {\n          SNode tmLeft = SNodeOperations.cast(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp\");\n          result.append(Regexp_Behavior.call_getString_1222432436326(tmLeft, new ArrayList<SNode>()));\n        } else if (SNodeOperations.isInstanceOf(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart\")) {\n          SNode tmLeft = SNodeOperations.cast(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart\");\n          List<SNode> tr = new ArrayList<SNode>();\n          ListSequence.fromList(tr).addElement(tmLeft);\n          result.append(SymbolClassRegexp_Behavior.call_partsToString_1222857748873(thisNode, tr));\n        } else {\n          throw new RuntimeException(\"NOT SUPPORTED: \" + part.getClass());\n        }\n        result.append(\"&&\");\n        SNode right = SNodeOperations.cast(SLinkOperations.getTarget(iscp, \"left\", true), \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart\");\n        if (SNodeOperations.isInstanceOf(right, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp\")) {\n          SNode tmrRight = SNodeOperations.cast(right, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart\");\n          List<SNode> tr = new ArrayList<SNode>();\n          ListSequence.fromList(tr).addElement(tmrRight);\n          result.append(SymbolClassRegexp_Behavior.call_partsToString_1222857748873(thisNode, tr));\n        } else {\n          throw new RuntimeException(\"NOT SUPPORTED: \" + part.getClass());\n        }\n      } else {\n        throw new RuntimeException(\"NOT SUPPORTED: \" + part.getClass());\n      }\n    }\n    return result.toString();\n  }","id":7137,"modified_method":"public static String call_partsToString_1222857748873(SNode thisNode, List<SNode> parts) {\n    StringBuilder result = new StringBuilder();\n    for (SNode part : parts) {\n      if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart\")) {\n        SNode cscp = SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart\");\n        if (Regexp_Behavior.call_checkStringForUnicode_1222857160881(thisNode, SPropertyOperations.getString(cscp, \"character\"))) {\n          result.append(SPropertyOperations.getString(cscp, \"character\"));\n        } else {\n          result.append(Regexp_Behavior.call_quote_1222857178958(thisNode, SPropertyOperations.getString(cscp, \"character\").charAt(0)));\n        }\n      } else if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart\")) {\n        result.append(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart\"), \"declaration\", false), \"name\"));\n      } else if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart\")) {\n        SNode iscp = SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart\");\n        String start;\n        String end = \"\";\n        if (Regexp_Behavior.call_checkStringForUnicode_1222857160881(thisNode, SPropertyOperations.getString(iscp, \"start\"))) {\n          start = SPropertyOperations.getString(iscp, \"start\");\n          if (Regexp_Behavior.call_checkStringForUnicode_1222857160881(thisNode, SPropertyOperations.getString(iscp, \"end\"))) {\n            end = SPropertyOperations.getString(iscp, \"end\");\n          }\n        } else {\n          start = SPropertyOperations.getString(iscp, \"start\");\n          end = SPropertyOperations.getString(iscp, \"end\");\n        }\n        result.append(start).append(\"-\").append(end);\n      } else if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart\")) {\n        SNode iscp = SNodeOperations.cast(part, \"jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart\");\n        SNode left = SLinkOperations.getTarget(iscp, \"left\", true);\n        if (SNodeOperations.isInstanceOf(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp\")) {\n          SNode tmLeft = SNodeOperations.cast(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp\");\n          result.append(Regexp_Behavior.call_getString_1222432436326(tmLeft, new ArrayList<SNode>()));\n        } else if (SNodeOperations.isInstanceOf(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart\")) {\n          SNode tmLeft = SNodeOperations.cast(left, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart\");\n          List<SNode> tr = new ArrayList<SNode>();\n          ListSequence.fromList(tr).addElement(tmLeft);\n          result.append(SymbolClassRegexp_Behavior.call_partsToString_1222857748873(thisNode, tr));\n        } else {\n          throw new RuntimeException(\"NOT SUPPORTED: \" + part.getClass());\n        }\n        result.append(\"&&\");\n        SNode right = SNodeOperations.cast(SLinkOperations.getTarget(iscp, \"left\", true), \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart\");\n        if (SNodeOperations.isInstanceOf(right, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp\")) {\n          SNode tmrRight = SNodeOperations.cast(right, \"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart\");\n          List<SNode> tr = new ArrayList<SNode>();\n          ListSequence.fromList(tr).addElement(tmrRight);\n          result.append(SymbolClassRegexp_Behavior.call_partsToString_1222857748873(thisNode, tr));\n        } else {\n          throw new RuntimeException(\"NOT SUPPORTED: \" + part.getClass());\n        }\n      } else {\n        throw new RuntimeException(\"NOT SUPPORTED: \" + part.getClass());\n      }\n    }\n    return result.toString();\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public TypesystemDescriptor() {\n    {\n      InferenceRule_Runtime inferenceRule = new MatchVariableReference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new MatchRegexpStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new ForEachMatchStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new ReplaceWithRegexpExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new SplitExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new FindMatchStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new MatchRegexpExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SplitOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_MatchRegexpOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n  }","id":7138,"modified_method":"public TypesystemDescriptor() {\n    {\n      InferenceRule_Runtime inferenceRule = new MatchVariableReference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new MatchRegexpStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new ForEachMatchStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new ReplaceWithRegexpExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new SplitExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new FindMatchStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new MatchRegexpExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SplitOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_MatchRegexpOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_StringLiteralRegexp_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    return Regexp_Behavior.call_par_1222433790846(thisNode, Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars)) + SConceptPropertyOperations.getString(thisNode, \"alias\");\n  }","id":7139,"modified_method":"public static String virtual_getString_1222432436326(SNode thisNode, List<SNode> vars) {\n    String s = Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(thisNode, \"regexp\", true), vars);\n    return ((UnaryRegexp_Behavior.call_inParentheses_1353467374623956744(thisNode) ?\n      Regexp_Behavior.call_par_1222433790846(thisNode, s) :\n      s\n    )) + SConceptPropertyOperations.getString(thisNode, \"alias\");\n  }","commit_id":"62a347d074a7df063b1d3e1d9537f5aba3c11db0","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n\t * Callback for name enumeration responses.  The results contain CollectionObjects containing the\n\t * names under a prefix.  The collection objects are matched to registered prefixes and returned\n\t * to the calling applications using their registered callback handlers.  Each response can create\n\t * a new Interest that is used to further enumerate the namespace. The implementation \n\t * explicitly handles multiple name enumeration responders.  The method may now create multiple\n\t * interests to further enumerate the prefix.  Please note that the current implementation will\n\t * need to be updated if responseIDs are more than one component long. \n\t * \n\t * @param results ArrayList of ContentObjects containing the ContentNames under a registered prefix\n\t * @param interest The interest matching or triggering a name enumeration response\n\t * \n\t * @return Interest Returns a new Interest to further enumerate or null to cancel the interest\n\t * that matched these objects.  This implementation returns null since new interests are created and\n\t * expressed as the returned CollectionObjects are processed.\n\t * \n\t * @see CollectionObject\n\t * @see CCNInterestHandler\n\t */\n\t\n\tpublic Interest handleContent(ArrayList<ContentObject> results, Interest interest) {\n\t\t\n\t\tif (interest.name().contains(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION)) {\n\t\t\t//the NEMarker is in the name...  good!\n\t\t} else {\n\t\t\t//COMMAND_MARKER_BASIC_ENUMERATION missing...  we have a problem\n\t\t\tLog.warning(\"the name enumeration marker is missing...  shouldn't have gotten this callback\");\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tsynchronized(_currentRequests) {\n\t\t\tContentName prefix = interest.name().cut(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\tNERequest ner = getCurrentRequest(prefix);\n\t\t\n\t\t\t//need to make sure the prefix is still registered\n\t\t\tif (ner==null) {\n\t\t\t\t//this is no longer registered...  no need to keep refreshing the interest use the callback\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tner.removeInterest(interest);\n            }\n\n\t\t\tNameEnumerationResponseMessageObject neResponse;\n\t\t\tArrayList<ContentName> names = new ArrayList<ContentName>();\n\t\t\tLinkedList<Link> links;\n\t\t\tInterest newInterest = interest;\n\t\t\n\t\t\t//update: now supports multiple responders!\n\t\t\t//note:  if responseIDs are longer than 1 component, need to revisit interest generation for followups\n\t\t\tif (results != null) {\n\t\t\t\tfor (ContentObject c: results) {\n\t\t\t\t\tLog.fine(\"we have a match for: \"+interest.name()+\" [\"+ interest.toString()+\"]\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tArrayList<Interest> newInterests = new ArrayList<Interest>(); \n\t\t\t\t\t\n\t\t\t\t\t//we want to get new versions of this object\n\t\t\t\t\tnewInterest = VersioningProfile.firstBlockLatestVersionInterest(c.name(), null);\n\t\t\t\t\tnewInterests.add(newInterest);\n\t\t\t\t\t\n\t\t\t\t\t//does this content object have a response id in it?\n\t\t\t\t\tContentName responseName = getIdFromName(c.name());\n\t\t\t\t\t\n\t\t\t\t\tif (responseName==null ) {\n\t\t\t\t\t\t//no response name...  this is an error!\n\t\t\t\t\t\tLog.warning(\"CCNNameEnumerator received a response without a responseID: {0} matching interest {1}\", c.name(), interest.name());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//we have a response name. \n\t\t\t\t\t\t\n\t\t\t\t\t\t//supports single component response IDs\n\t\t\t\t\t\t//if response IDs are hierarchical, we need to avoid exploding the number of Interests we express\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t//if the interest had a responseId in it, we don't need to make a new base interest with an exclude, we would have done this already.\n\t\t\t\t\t\tLog.fine(\"response id from interest: \"+getIdFromName(interest.name()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(getIdFromName(interest.name()) != null && getIdFromName(interest.name()).count() > 0) {\n\t\t\t\t\t\t\t//the interest has a response ID in it already...  skip making new base interest\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//also need to add this responder to the exclude list to find more responders\n\t\t\t\t\t\t\tContentName prefixWithMarker = new ContentName(prefix, CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\t\t\t\t\tExclude excludes = interest.exclude();\n\t\t\t\t\t\t\tif(excludes==null)\n\t\t\t\t\t\t\t\texcludes = new Exclude();\n\t\t\t\t\t\t\texcludes.add(new byte[][]{responseName.component(0)});\n\t\t\t\t\t\t\tnewInterest = Interest.constructInterest(prefixWithMarker, excludes, null, null, 4, null); \n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//check to make sure the interest isn't already expressed\n\t\t\t\t\t\t\tif(!ner.containsInterest(newInterest))\n\t\t\t\t\t\t\t\tnewInterests.add(newInterest);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor(Interest i: newInterests) {\n\t\t\t\t\t\t\t_handle.expressInterest(i, this);\n\t\t\t\t\t\t\tner.addInterest(i);\n\t\t\t\t\t\t\tLog.finest(\"expressed: \"+i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t// error registering new interest\n\t\t\t\t\t\tLog.warning(\"error registering new interest in handleContent\");\n\t\t\t\t\t\tLog.warningStackTrace(e1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnewInterests.clear();\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tneResponse = new NameEnumerationResponseMessageObject(c, _handle);\n\t\t\t\t\t\tlinks = neResponse.contents();\n\t\t\t\t\t\tfor (Link l: links) {\n\t\t\t\t\t\t\tnames.add(l.targetName());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//strip off NEMarker before passing through callback\n\t\t\t\t\t\tcallback.handleNameEnumerator(interest.name().cut(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION), names);\n\t\t\t\t\t} catch(ContentDecodingException e) {\n\t\t\t\t\t\tLog.warning(\"Error parsing Collection from ContentObject in CCNNameEnumerator\");\n\t\t\t\t\t\tLog.warningStackTrace(e);\n\t\t\t\t\t} catch(IOException e) {\n\t\t\t\t\t\tLog.warning(\"error getting CollectionObject from ContentObject in CCNNameEnumerator.handleContent\");\n\t\t\t\t\t\tLog.warningStackTrace(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null; \n\t}","id":7140,"modified_method":"/**\n\t * Callback for name enumeration responses.  The results contain CollectionObjects containing the\n\t * names under a prefix.  The collection objects are matched to registered prefixes and returned\n\t * to the calling applications using their registered callback handlers.  Each response can create\n\t * a new Interest that is used to further enumerate the namespace. The implementation \n\t * explicitly handles multiple name enumeration responders.  The method may now create multiple\n\t * interests to further enumerate the prefix.  Please note that the current implementation will\n\t * need to be updated if responseIDs are more than one component long. \n\t * \n\t * @param results ArrayList of ContentObjects containing the ContentNames under a registered prefix\n\t * @param interest The interest matching or triggering a name enumeration response\n\t * \n\t * @return Interest Returns a new Interest to further enumerate or null to cancel the interest\n\t * that matched these objects.  This implementation returns null since new interests are created and\n\t * expressed as the returned CollectionObjects are processed.\n\t * \n\t * @see CollectionObject\n\t * @see CCNInterestHandler\n\t */\n\t\n\tpublic Interest handleContent(ArrayList<ContentObject> results, Interest interest) {\n\t\t\n\t\tif (interest.name().contains(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION)) {\n\t\t\t//the NEMarker is in the name...  good!\n\t\t} else {\n\t\t\t//COMMAND_MARKER_BASIC_ENUMERATION missing...  we have a problem\n\t\t\tLog.warning(\"the name enumeration marker is missing...  shouldn't have gotten this callback\");\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tsynchronized(_currentRequests) {\n\t\t\tContentName prefix = interest.name().cut(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\tNERequest ner = getCurrentRequest(prefix);\n\t\t\n\t\t\t//need to make sure the prefix is still registered\n\t\t\tif (ner==null) {\n\t\t\t\t//this is no longer registered...  no need to keep refreshing the interest use the callback\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tner.removeInterest(interest);\n            }\n\n\t\t\tNameEnumerationResponseMessageObject neResponse;\n\t\t\tArrayList<ContentName> names = new ArrayList<ContentName>();\n\t\t\tLinkedList<Link> links;\n\t\t\tInterest newInterest = interest;\n\t\t\n\t\t\t//update: now supports multiple responders!\n\t\t\t//note:  if responseIDs are longer than 1 component, need to revisit interest generation for followups\n\t\t\tif (results != null) {\n\t\t\t\tfor (ContentObject c: results) {\n\t\t\t\t\tif (Log.isLoggable(Level.FINE)) {\n\t\t\t\t\t\tLog.fine(\"we have a match for: \"+interest.name()+\" [\"+ interest.toString()+\"]\");\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\tArrayList<Interest> newInterests = new ArrayList<Interest>(); \n\t\t\t\t\t\n\t\t\t\t\t//we want to get new versions of this object\n\t\t\t\t\tnewInterest = VersioningProfile.firstBlockLatestVersionInterest(c.name(), null);\n\t\t\t\t\tnewInterests.add(newInterest);\n\t\t\t\t\t\n\t\t\t\t\t//does this content object have a response id in it?\n\t\t\t\t\tContentName responseName = getIdFromName(c.name());\n\t\t\t\t\t\n\t\t\t\t\tif (responseName==null ) {\n\t\t\t\t\t\t//no response name...  this is an error!\n\t\t\t\t\t\tLog.warning(\"CCNNameEnumerator received a response without a responseID: {0} matching interest {1}\", c.name(), interest.name());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//we have a response name. \n\t\t\t\t\t\t\n\t\t\t\t\t\t//supports single component response IDs\n\t\t\t\t\t\t//if response IDs are hierarchical, we need to avoid exploding the number of Interests we express\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t//if the interest had a responseId in it, we don't need to make a new base interest with an exclude, we would have done this already.\n\t\t\t\t\t\tif (Log.isLoggable(Level.FINE)) {\n\t\t\t\t\t\t\tLog.fine(\"response id from interest: \"+getIdFromName(interest.name()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(getIdFromName(interest.name()) != null && getIdFromName(interest.name()).count() > 0) {\n\t\t\t\t\t\t\t//the interest has a response ID in it already...  skip making new base interest\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//also need to add this responder to the exclude list to find more responders\n\t\t\t\t\t\t\tContentName prefixWithMarker = new ContentName(prefix, CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\t\t\t\t\tExclude excludes = interest.exclude();\n\t\t\t\t\t\t\tif(excludes==null)\n\t\t\t\t\t\t\t\texcludes = new Exclude();\n\t\t\t\t\t\t\texcludes.add(new byte[][]{responseName.component(0)});\n\t\t\t\t\t\t\tnewInterest = Interest.constructInterest(prefixWithMarker, excludes, null, null, 4, null); \n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//check to make sure the interest isn't already expressed\n\t\t\t\t\t\t\tif(!ner.containsInterest(newInterest))\n\t\t\t\t\t\t\t\tnewInterests.add(newInterest);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor(Interest i: newInterests) {\n\t\t\t\t\t\t\t_handle.expressInterest(i, this);\n\t\t\t\t\t\t\tner.addInterest(i);\n\t\t\t\t\t\t\tLog.finest(\"expressed: {0}\", i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t// error registering new interest\n\t\t\t\t\t\tLog.warning(\"error registering new interest in handleContent\");\n\t\t\t\t\t\tLog.warningStackTrace(e1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnewInterests.clear();\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tneResponse = new NameEnumerationResponseMessageObject(c, _handle);\n\t\t\t\t\t\tlinks = neResponse.contents();\n\t\t\t\t\t\tfor (Link l: links) {\n\t\t\t\t\t\t\tnames.add(l.targetName());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//strip off NEMarker before passing through callback\n\t\t\t\t\t\tcallback.handleNameEnumerator(interest.name().cut(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION), names);\n\t\t\t\t\t} catch(ContentDecodingException e) {\n\t\t\t\t\t\tLog.warning(\"Error parsing Collection from ContentObject in CCNNameEnumerator\");\n\t\t\t\t\t\tLog.warningStackTrace(e);\n\t\t\t\t\t} catch(IOException e) {\n\t\t\t\t\t\tLog.warning(\"error getting CollectionObject from ContentObject in CCNNameEnumerator.handleContent\");\n\t\t\t\t\t\tLog.warningStackTrace(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null; \n\t}","commit_id":"0d73e5fd09a2b158b2b50bee87734b27378c5c26","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Method to cancel active enumerations.  The active interests are retrieved from the corresponding\n\t * NERequest object for the prefix.  Each interest is canceled and the NERequest object is removed\n\t * from the list of active enumerations.\n\t * \n\t * @param prefix  ContentName to cancel enumeration\n\t * @return boolean Returns if the prefix is successfully canceled.\n\t */\n\t\n\tpublic boolean cancelPrefix(ContentName prefix) {\n\t\tLog.info(\"cancel prefix: \"+prefix.toString());\n\t\tsynchronized(_currentRequests) {\n\t\t\t//cancel the behind the scenes interests and remove from the local ArrayList\n\t\t\tNERequest r = getCurrentRequest(prefix);\n\t\t\tif (r != null) {\n\t\t\t\tArrayList<Interest> is = r.getInterests();\n\t\t\t\tLog.fine(\"we have \"+is.size()+\" interests to cancel\");\n\t\t\t\tInterest i;\n\t\t\t\twhile (!r.getInterests().isEmpty()) {\n\t\t\t\t\ti=r.getInterests().remove(0);\n\t\t\t\t\t_handle.cancelInterest(i, this);\n\t\t\t\t}\n\t\t\t\n\t\t\t\t_currentRequests.remove(r);\n\t\t\t\treturn (getCurrentRequest(prefix) == null);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}","id":7141,"modified_method":"/**\n\t * Method to cancel active enumerations.  The active interests are retrieved from the corresponding\n\t * NERequest object for the prefix.  Each interest is canceled and the NERequest object is removed\n\t * from the list of active enumerations.\n\t * \n\t * @param prefix  ContentName to cancel enumeration\n\t * @return boolean Returns if the prefix is successfully canceled.\n\t */\n\t\n\tpublic boolean cancelPrefix(ContentName prefix) {\n\t\tLog.info(\"cancel prefix: {0} \", prefix);\n\t\tsynchronized(_currentRequests) {\n\t\t\t//cancel the behind the scenes interests and remove from the local ArrayList\n\t\t\tNERequest r = getCurrentRequest(prefix);\n\t\t\tif (r != null) {\n\t\t\t\tArrayList<Interest> is = r.getInterests();\n\t\t\t\tLog.fine(\"we have {0} interests to cancel\", is.size());\n\t\t\t\tInterest i;\n\t\t\t\twhile (!r.getInterests().isEmpty()) {\n\t\t\t\t\ti=r.getInterests().remove(0);\n\t\t\t\t\t_handle.cancelInterest(i, this);\n\t\t\t\t}\n\t\t\t\n\t\t\t\t_currentRequests.remove(r);\n\t\t\t\treturn (getCurrentRequest(prefix) == null);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}","commit_id":"0d73e5fd09a2b158b2b50bee87734b27378c5c26","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Method for receiving Interests matching the namespace for answering name enumeration requests.  Incoming Interests are\n\t * verified to have the name enumeration marker.  The NEResponse matching the interest is found (if it already exists) and if\n\t * new names have been registered under the prefix or if no matching NEResponse object is found, a name enumeration\n\t * response is created.\n\t * \n\t * @param interests ArrayList of Interest objects matching the namespace filter.\n\t * \n\t * @return int \n\t */\n\t\n\tpublic int handleInterests(ArrayList<Interest> interests) {\n\t\t\n\t\t\n\t\t\n\t\tContentName responseName = null;\n\t\tLink match;\n\t\tNameEnumerationResponseMessage nem;\n\t\t\t\t\n\t\tContentName name = null;\n\t\tNEResponse r = null;\n\t\tfor (Interest i: interests) {\n\t\t\tLog.finer(\"got an interest: {0}\",i.name());\n\t\t\tname = i.name().clone();\n\t\t\tnem = new NameEnumerationResponseMessage();\n\t\t\t//Verify NameEnumeration Marker is in the name\n\t\t\tif (!name.contains(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION)) {\n\t\t\t\t//Skip...  we don't handle these\n\t\t\t} else {\n\t\t\t\tname = name.cut(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\t\tresponseName = new ContentName(name, CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\n\t\t\t\tboolean skip = false;\n\t\t\t\t\n\t\t\t\tsynchronized (_handledResponses) {\n\t\t\t\t\t//have we handled this response already?\n\t\t\t\t\tr = getHandledResponse(name);\n\t\t\t\t\tif (r != null) {\n\t\t\t\t\t\t//we have handled this before!\n\t\t\t\t\t\tif (r.isDirty()) {\n\t\t\t\t\t\t\t//this has updates to send back!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//nothing new to send back...  go ahead and skip to next interest\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//this is a new one...\n\t\t\t\t\t\tr = new NEResponse(name);\n\t\t\t\t\t\t_handledResponses.add(r);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!skip) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (ContentName n: _registeredNames) {\n\t\t\t\t\t\t\tif (name.isPrefixOf(n) && name.count() < n.count()) {\n\t\t\t\t\t\t\t\tContentName tempName = n.clone();\n\t\t\t\t\t\t\t\tbyte[] tn = n.component(name.count());\n\t\t\t\t\t\t\t\tbyte[][] na = new byte[1][tn.length];\n\t\t\t\t\t\t\t\tna[0] = tn;\n\t\t\t\t\t\t\t\ttempName = new ContentName(na);\n\t\t\t\t\t\t\t\tmatch = new Link(tempName);\n\t\t\t\t\t\t\t\tif (!nem.contents().contains(match)) {\n\t\t\t\t\t\t\t\t\tnem.add(match);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (nem.size() > 0) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tContentName responseNameWithId = KeyProfile.keyName(responseName, _handle.keyManager().getDefaultKeyID());\n\t\t\t\t\t\t\tNameEnumerationResponseMessageObject nemobj = new NameEnumerationResponseMessageObject(responseNameWithId, nem, _handle);\n\t\t\t\t\t\t\tnemobj.save(i);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tLog.fine(\"Saved collection object in name enumeration: \" + nemobj.getVersionedName());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tr.clean();\n\t\t\t\t\t\t} catch(IOException e) {\n\t\t\t\t\t\t\tLog.warning(\"error processing an incoming interest..  dropping and returning\");\n\t\t\t\t\t\t\tLog.warningStackTrace(e);\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tLog.finer(\"this interest did not have any matching names...  not returning anything.\");\n\t\t\t\t\tif (r != null)\n\t\t\t\t\t\tr.clean();\n\t\t\t\t} //end of synchronized\n\t\t\t}  //end of name enumeration marker check\n\t\t} //end of interest processing loop\n\t\t\t\n\t\treturn 0;\n\t}","id":7142,"modified_method":"/**\n\t * Method for receiving Interests matching the namespace for answering name enumeration requests.  Incoming Interests are\n\t * verified to have the name enumeration marker.  The NEResponse matching the interest is found (if it already exists) and if\n\t * new names have been registered under the prefix or if no matching NEResponse object is found, a name enumeration\n\t * response is created.\n\t * \n\t * @param interests ArrayList of Interest objects matching the namespace filter.\n\t * \n\t * @return int \n\t */\n\t\n\tpublic int handleInterests(ArrayList<Interest> interests) {\n\t\t\n\t\t\n\t\t\n\t\tContentName responseName = null;\n\t\tLink match;\n\t\tNameEnumerationResponseMessage nem;\n\t\t\t\t\n\t\tContentName name = null;\n\t\tNEResponse r = null;\n\t\tfor (Interest i: interests) {\n\t\t\tif (Log.isLoggable(Level.FINER)) {\n\t\t\t\tLog.finer(\"got an interest: {0}\",i.name());\n\t\t\t}\n\t\t\tname = i.name().clone();\n\t\t\tnem = new NameEnumerationResponseMessage();\n\t\t\t//Verify NameEnumeration Marker is in the name\n\t\t\tif (!name.contains(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION)) {\n\t\t\t\t//Skip...  we don't handle these\n\t\t\t} else {\n\t\t\t\tname = name.cut(CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\t\tresponseName = new ContentName(name, CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\n\t\t\t\tboolean skip = false;\n\t\t\t\t\n\t\t\t\tsynchronized (_handledResponses) {\n\t\t\t\t\t//have we handled this response already?\n\t\t\t\t\tr = getHandledResponse(name);\n\t\t\t\t\tif (r != null) {\n\t\t\t\t\t\t//we have handled this before!\n\t\t\t\t\t\tif (r.isDirty()) {\n\t\t\t\t\t\t\t//this has updates to send back!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//nothing new to send back...  go ahead and skip to next interest\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//this is a new one...\n\t\t\t\t\t\tr = new NEResponse(name);\n\t\t\t\t\t\t_handledResponses.add(r);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!skip) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (ContentName n: _registeredNames) {\n\t\t\t\t\t\t\tif (name.isPrefixOf(n) && name.count() < n.count()) {\n\t\t\t\t\t\t\t\tContentName tempName = n.clone();\n\t\t\t\t\t\t\t\tbyte[] tn = n.component(name.count());\n\t\t\t\t\t\t\t\tbyte[][] na = new byte[1][tn.length];\n\t\t\t\t\t\t\t\tna[0] = tn;\n\t\t\t\t\t\t\t\ttempName = new ContentName(na);\n\t\t\t\t\t\t\t\tmatch = new Link(tempName);\n\t\t\t\t\t\t\t\tif (!nem.contents().contains(match)) {\n\t\t\t\t\t\t\t\t\tnem.add(match);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (nem.size() > 0) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tContentName responseNameWithId = KeyProfile.keyName(responseName, _handle.keyManager().getDefaultKeyID());\n\t\t\t\t\t\t\tNameEnumerationResponseMessageObject nemobj = new NameEnumerationResponseMessageObject(responseNameWithId, nem, _handle);\n\t\t\t\t\t\t\tnemobj.save(i);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (Log.isLoggable(Level.FINE)) {\n\t\t\t\t\t\t\t\tLog.fine(\"Saved collection object in name enumeration: \" + nemobj.getVersionedName());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tr.clean();\n\t\t\t\t\t\t} catch(IOException e) {\n\t\t\t\t\t\t\tLog.warning(\"error processing an incoming interest..  dropping and returning\");\n\t\t\t\t\t\t\tLog.warningStackTrace(e);\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tLog.finer(\"this interest did not have any matching names...  not returning anything.\");\n\t\t\t\t\tif (r != null)\n\t\t\t\t\t\tr.clean();\n\t\t\t\t} //end of synchronized\n\t\t\t}  //end of name enumeration marker check\n\t\t} //end of interest processing loop\n\t\t\t\n\t\treturn 0;\n\t}","commit_id":"0d73e5fd09a2b158b2b50bee87734b27378c5c26","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Method to register a prefix for name enumeration.  A NERequest and initial interest is created for new prefixes.\n\t * Prefixes that are already registered return and do not impact the already active registration.\n\t * \n\t * @param prefix ContentName to enumerate\n\t * @throws IOException\n\t */\n\t\n\tpublic void registerPrefix(ContentName prefix) throws IOException {\n\t\tsynchronized (_currentRequests) {\n\t\t\tNERequest r = getCurrentRequest(prefix);\n\t\t\tif (r != null) {\n\t\t\t\t// this prefix is already registered...\n\t\t\t\tLog.info(\"prefix \" + prefix.toString() + \" is already registered...  returning\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tr = new NERequest(prefix);\n\t\t\t\t_currentRequests.add(r);\n\t\t\t}\n\n\t\t\tLog.info(\"Registered Prefix: \" + prefix.toString());\n\n\t\t\tContentName prefixMarked = new ContentName(prefix, CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\t\n\t\t\t//we have minSuffixComponents to account for sig, version, seg and digest\n\t\t\tInterest pi = Interest.constructInterest(prefixMarked, null, null, null, 4, null);\n\t\t\t\n\t\t\tr.addInterest(pi);\n\n\t\t\t_handle.expressInterest(pi, this);\n\t\t}\n\t}","id":7143,"modified_method":"/**\n\t * Method to register a prefix for name enumeration.  A NERequest and initial interest is created for new prefixes.\n\t * Prefixes that are already registered return and do not impact the already active registration.\n\t * \n\t * @param prefix ContentName to enumerate\n\t * @throws IOException\n\t */\n\t\n\tpublic void registerPrefix(ContentName prefix) throws IOException {\n\t\tsynchronized (_currentRequests) {\n\t\t\tNERequest r = getCurrentRequest(prefix);\n\t\t\tif (r != null) {\n\t\t\t\t// this prefix is already registered...\n\t\t\t\tLog.fine(\"prefix {0} is already registered...  returning\", prefix);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tr = new NERequest(prefix);\n\t\t\t\t_currentRequests.add(r);\n\t\t\t}\n\n\t\t\tLog.info(\"Registered Prefix: {0}\", prefix);\n\n\t\t\tContentName prefixMarked = new ContentName(prefix, CommandMarkers.COMMAND_MARKER_BASIC_ENUMERATION);\n\t\t\t\n\t\t\t//we have minSuffixComponents to account for sig, version, seg and digest\n\t\t\tInterest pi = Interest.constructInterest(prefixMarked, null, null, null, 4, null);\n\t\t\t\n\t\t\tr.addInterest(pi);\n\n\t\t\t_handle.expressInterest(pi, this);\n\t\t}\n\t}","commit_id":"0d73e5fd09a2b158b2b50bee87734b27378c5c26","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n     * Creates a proxy using user resource model\n     * @param baseAddress baseAddress\n     * @param cls proxy class, if not interface then a CGLIB proxy will be created\n     * @param modelBeans model beans\n     * @param providers list of providers\n     * @return typed proxy\n     */\n    public static <T> T createFromModel(String baseAddress, Class<T> cls, List<UserResource> modelBeans,\n                               List<?> providers, String configLocation) {\n        JAXRSClientFactoryBean bean = getBean(baseAddress, cls, configLocation);\n        bean.setProviders(providers);\n        bean.setModelBeans(modelBeans);\n        return bean.create(cls);\n    }","id":7144,"modified_method":"/**\n     * Creates a proxy using user resource model\n     * @param baseAddress baseAddress\n     * @param cls proxy class, if not interface then a CGLIB proxy will be created\n     * @param modelBeans model beans\n     * @param providers list of providers\n     * @return typed proxy\n     */\n    public static <T> T createFromModel(String baseAddress, Class<T> cls, List<UserResource> modelBeans,\n                               List<?> providers, String configLocation) {\n        JAXRSClientFactoryBean bean = WebClient.getBean(baseAddress, configLocation);\n        \n        bean.setProviders(providers);\n        bean.setModelBeans(modelBeans);\n        bean.setServiceClass(cls);\n        return bean.create(cls);\n    }","commit_id":"bf46b09157a5f1711e936988b0afdb346957b838","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Creates a thread safe proxy using user resource model\n     * @param baseAddress baseAddress\n     * @param cls proxy class, if not interface then a CGLIB proxy will be created\n     * @param modelRef model location\n     * @param providers list of providers\n     * @param threadSafe if true then thread-safe proxy will be created \n     * @return typed proxy\n     */\n    public static <T> T createFromModel(String baseAddress, Class<T> cls, String modelRef, \n                                        List<?> providers, boolean threadSafe) {\n        JAXRSClientFactoryBean bean = getBean(baseAddress, cls, null);\n        bean.setProviders(providers);\n        bean.setModelRef(modelRef);\n        if (threadSafe) {\n            bean.setInitialState(new ThreadLocalClientState(baseAddress));\n        }\n        return bean.create(cls);\n    }","id":7145,"modified_method":"/**\n     * Creates a thread safe proxy using user resource model\n     * @param baseAddress baseAddress\n     * @param cls proxy class, if not interface then a CGLIB proxy will be created\n     * @param modelRef model location\n     * @param providers list of providers\n     * @param threadSafe if true then thread-safe proxy will be created \n     * @return typed proxy\n     */\n    public static <T> T createFromModel(String baseAddress, Class<T> cls, String modelRef, \n                                        List<?> providers, boolean threadSafe) {\n        JAXRSClientFactoryBean bean = WebClient.getBean(baseAddress, null);\n        bean.setProviders(providers);\n        bean.setModelRef(modelRef);\n        bean.setServiceClass(cls);\n        if (threadSafe) {\n            bean.setInitialState(new ThreadLocalClientState(baseAddress));\n        }\n        return bean.create(cls);\n    }","commit_id":"bf46b09157a5f1711e936988b0afdb346957b838","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Creates a proxy using user resource model\n     * @param baseAddress baseAddress\n     * @param cls proxy class, if not interface then a CGLIB proxy will be created\n     * @param modelRef model location\n     * @param providers list of providers\n     * @return typed proxy\n     */\n    public static <T> T createFromModel(String baseAddress, Class<T> cls, String modelRef, \n                               List<?> providers, String configLocation) {\n        JAXRSClientFactoryBean bean = getBean(baseAddress, cls, configLocation);\n        bean.setProviders(providers);\n        bean.setModelRef(modelRef);\n        return bean.create(cls);\n    }","id":7146,"modified_method":"/**\n     * Creates a proxy using user resource model\n     * @param baseAddress baseAddress\n     * @param cls proxy class, if not interface then a CGLIB proxy will be created\n     * @param modelRef model location\n     * @param providers list of providers\n     * @return typed proxy\n     */\n    public static <T> T createFromModel(String baseAddress, Class<T> cls, String modelRef, \n                               List<?> providers, String configLocation) {\n        JAXRSClientFactoryBean bean = WebClient.getBean(baseAddress, configLocation);\n        bean.setProviders(providers);\n        bean.setModelRef(modelRef);\n        bean.setServiceClass(cls);\n        return bean.create(cls);\n    }","commit_id":"bf46b09157a5f1711e936988b0afdb346957b838","url":"https://github.com/apache/cxf"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private void serializeMessage(Message message, \n                                  Response response, \n                                  OperationResourceInfo ori,\n                                  boolean firstTry) {\n        int status = response.getStatus();\n        Object responseObj = response.getEntity();\n        if (status == 200 && !isResponseNull(responseObj) && firstTry \n            && ori != null && JAXRSUtils.headMethodPossible(ori.getHttpMethod(), \n                (String)message.getExchange().getInMessage().get(Message.HTTP_REQUEST_METHOD))) {\n            LOG.info(new org.apache.cxf.common.i18n.Message(\"HEAD_WITHOUT_ENTITY\", BUNDLE).toString());\n            responseObj = null;\n        }\n        if (status == -1) {\n            status = isResponseNull(responseObj) ? 204 : 200;\n        }\n        \n        boolean responseHeadersCopied = isResponseHeadersCopied(message);\n        setResponseStatus(message, status, responseHeadersCopied);\n        \n        Map<String, List<String>> theHeaders = \n            (Map<String, List<String>>)message.get(Message.PROTOCOL_HEADERS);\n        if (firstTry && theHeaders != null) {\n            // some headers might've been setup by custom cxf interceptors\n            theHeaders.putAll((Map)response.getMetadata());\n        } else {\n            message.put(Message.PROTOCOL_HEADERS, response.getMetadata());\n        }\n        Map<String, List<Object>> rh = \n            (Map<String, List<Object>>)message.get(Message.PROTOCOL_HEADERS);\n        MultivaluedMap<String, Object> responseHeaders;\n        if (!(rh instanceof MultivaluedMap)) {\n            responseHeaders = new MetadataMap<String, Object>(rh);\n        } else {\n            responseHeaders = (MultivaluedMap)rh;\n        }\n        setResponseDate((MultivaluedMap)responseHeaders, firstTry);\n        if (isResponseNull(responseObj)) {\n            return;\n        }\n        \n        Object ignoreWritersProp = message.getExchange().get(JAXRSUtils.IGNORE_MESSAGE_WRITERS);\n        boolean ignoreWriters = \n            ignoreWritersProp == null ? false : Boolean.valueOf(ignoreWritersProp.toString());\n        if (ignoreWriters) {\n            writeResponseToStream(message.getContent(OutputStream.class), responseObj);\n            return;\n        }\n        \n        List<MediaType> availableContentTypes = computeAvailableContentTypes(message, response);  \n        \n        Method invoked = null;\n        if (firstTry) {\n            invoked = ori == null ? null : ori.getAnnotatedMethod() == null\n                ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n        }\n        \n        Class<?> targetType = getRawResponseClass(responseObj);\n        Type genericType = getGenericResponseType(ori == null ? null : invoked, responseObj, targetType);\n        if (genericType instanceof TypeVariable) {\n            genericType = InjectionUtils.getSuperType(ori.getClassResourceInfo().getServiceClass(), \n                                                       (TypeVariable)genericType);\n        }\n        \n        Annotation[] annotations = invoked != null ? invoked.getAnnotations() : new Annotation[]{};\n        \n        MessageBodyWriter writer = null;\n        MediaType responseType = null;\n        for (MediaType type : availableContentTypes) { \n            writer = ProviderFactory.getInstance(message)\n                .createMessageBodyWriter(targetType, genericType, annotations, type, message);\n            \n            if (writer != null) {\n                responseType = type;\n                break;\n            }\n        }\n    \n        OutputStream outOriginal = message.getContent(OutputStream.class);\n        if (writer == null) {\n            message.put(Message.CONTENT_TYPE, \"text/plain\");\n            message.put(Message.RESPONSE_CODE, 500);\n            writeResponseErrorMessage(outOriginal, \"NO_MSG_WRITER\", targetType.getSimpleName());\n            return;\n        }\n        boolean enabled = checkBufferingMode(message, writer, firstTry);\n        Object entity = getEntity(responseObj);\n        try {\n            responseType = checkFinalContentType(responseType);\n            LOG.fine(\"Response content type is: \" + responseType.toString());\n            message.put(Message.CONTENT_TYPE, responseType.toString());\n            \n            long size = writer.getSize(entity, targetType, genericType, annotations, responseType);\n            if (size > 0) {\n                LOG.fine(\"Setting ContentLength to \" + size + \" as requested by \" \n                         + writer.getClass().getName());\n                responseHeaders.putSingle(HttpHeaders.CONTENT_LENGTH, Long.toString(size));\n            }\n            \n            LOG.fine(\"Response EntityProvider is: \" + writer.getClass().getName());\n            try {\n                writer.writeTo(entity, targetType, genericType, \n                               annotations, \n                               responseType, \n                               responseHeaders, \n                               message.getContent(OutputStream.class));\n                \n                if (isResponseRedirected(message)) {\n                    return;\n                }\n                \n                Object newContentType = responseHeaders.getFirst(HttpHeaders.CONTENT_TYPE);\n                if (newContentType != null) {\n                    message.put(Message.CONTENT_TYPE, newContentType.toString());\n                }\n                checkCachedStream(message, outOriginal, enabled);\n            } finally {\n                if (enabled) {\n                    message.setContent(OutputStream.class, outOriginal);\n                    message.put(XMLStreamWriter.class.getName(), null);\n                }\n            }\n            \n        } catch (IOException ex) {\n            handleWriteException(message, response, ori, ex, entity, firstTry);\n        } catch (Throwable ex) {\n            handleWriteException(message, response, ori, ex, entity, firstTry);\n        }\n    }","id":7147,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private void serializeMessage(Message message, \n                                  Response response, \n                                  OperationResourceInfo ori,\n                                  boolean firstTry) {\n        int status = response.getStatus();\n        Object responseObj = response.getEntity();\n        if (status == 200 && !isResponseNull(responseObj) && firstTry \n            && ori != null && JAXRSUtils.headMethodPossible(ori.getHttpMethod(), \n                (String)message.getExchange().getInMessage().get(Message.HTTP_REQUEST_METHOD))) {\n            LOG.info(new org.apache.cxf.common.i18n.Message(\"HEAD_WITHOUT_ENTITY\", BUNDLE).toString());\n            responseObj = null;\n        }\n        if (status == -1) {\n            status = isResponseNull(responseObj) ? 204 : 200;\n        }\n        \n        boolean responseHeadersCopied = isResponseHeadersCopied(message);\n        setResponseStatus(message, status, responseHeadersCopied);\n        \n        Map<String, List<String>> theHeaders = \n            (Map<String, List<String>>)message.get(Message.PROTOCOL_HEADERS);\n        if (firstTry && theHeaders != null) {\n            // some headers might've been setup by custom cxf interceptors\n            theHeaders.putAll((Map)response.getMetadata());\n        } else {\n            message.put(Message.PROTOCOL_HEADERS, response.getMetadata());\n        }\n        Map<String, List<Object>> rh = \n            (Map<String, List<Object>>)message.get(Message.PROTOCOL_HEADERS);\n        MultivaluedMap<String, Object> responseHeaders;\n        if (!(rh instanceof MultivaluedMap)) {\n            responseHeaders = new MetadataMap<String, Object>(rh);\n        } else {\n            responseHeaders = (MultivaluedMap)rh;\n        }\n        setResponseDate((MultivaluedMap)responseHeaders, firstTry);\n        if (isResponseNull(responseObj)) {\n            return;\n        }\n        \n        Object ignoreWritersProp = message.getExchange().get(JAXRSUtils.IGNORE_MESSAGE_WRITERS);\n        boolean ignoreWriters = \n            ignoreWritersProp == null ? false : Boolean.valueOf(ignoreWritersProp.toString());\n        if (ignoreWriters) {\n            writeResponseToStream(message.getContent(OutputStream.class), responseObj);\n            return;\n        }\n        \n        List<MediaType> availableContentTypes = computeAvailableContentTypes(message, response);  \n        \n        Method invoked = null;\n        if (firstTry) {\n            invoked = ori == null ? null : ori.getAnnotatedMethod() == null\n                ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n        }\n        \n        Class<?> targetType = getRawResponseClass(responseObj);\n        Type genericType = getGenericResponseType(ori == null ? null : invoked, responseObj, targetType);\n        if (genericType instanceof TypeVariable) {\n            genericType = InjectionUtils.getSuperType(ori.getClassResourceInfo().getServiceClass(), \n                                                       (TypeVariable)genericType);\n        }\n        \n        Annotation[] annotations = invoked != null ? invoked.getAnnotations() : new Annotation[]{};\n        \n        MessageBodyWriter writer = null;\n        MediaType responseType = null;\n        for (MediaType type : availableContentTypes) { \n            writer = ProviderFactory.getInstance(message)\n                .createMessageBodyWriter(targetType, genericType, annotations, type, message);\n            \n            if (writer != null) {\n                responseType = type;\n                break;\n            }\n        }\n    \n        OutputStream outOriginal = message.getContent(OutputStream.class);\n        if (writer == null) {\n            message.put(Message.CONTENT_TYPE, \"text/plain\");\n            message.put(Message.RESPONSE_CODE, 500);\n            writeResponseErrorMessage(outOriginal, \"NO_MSG_WRITER\", targetType.getSimpleName());\n            return;\n        }\n        boolean enabled = checkBufferingMode(message, writer, firstTry);\n        Object entity = getEntity(responseObj);\n        try {\n            responseType = checkFinalContentType(responseType);\n            if (LOG.isLoggable(Level.FINE)) {\n                LOG.fine(\"Response content type is: \" + responseType.toString());\n            }\n            message.put(Message.CONTENT_TYPE, responseType.toString());\n            \n            long size = writer.getSize(entity, targetType, genericType, annotations, responseType);\n            if (size > 0) {\n                LOG.fine(\"Setting ContentLength to \" + size + \" as requested by \" \n                         + writer.getClass().getName());\n                responseHeaders.putSingle(HttpHeaders.CONTENT_LENGTH, Long.toString(size));\n            }\n            if (LOG.isLoggable(Level.FINE)) {\n                LOG.fine(\"Response EntityProvider is: \" + writer.getClass().getName());\n            }\n            try {\n                writer.writeTo(entity, targetType, genericType, \n                               annotations, \n                               responseType, \n                               responseHeaders, \n                               message.getContent(OutputStream.class));\n                \n                if (isResponseRedirected(message)) {\n                    return;\n                }\n                \n                Object newContentType = responseHeaders.getFirst(HttpHeaders.CONTENT_TYPE);\n                if (newContentType != null) {\n                    message.put(Message.CONTENT_TYPE, newContentType.toString());\n                }\n                checkCachedStream(message, outOriginal, enabled);\n            } finally {\n                if (enabled) {\n                    message.setContent(OutputStream.class, outOriginal);\n                    message.put(XMLStreamWriter.class.getName(), null);\n                }\n            }\n            \n        } catch (IOException ex) {\n            handleWriteException(message, response, ori, ex, entity, firstTry);\n        } catch (Throwable ex) {\n            handleWriteException(message, response, ori, ex, entity, firstTry);\n        }\n    }","commit_id":"bf46b09157a5f1711e936988b0afdb346957b838","url":"https://github.com/apache/cxf"},{"original_method":"public static String resolve(User u) {\n        LOGGER.fine(\"Resolving e-mail address for \\\"\"+u+\"\\\" ID=\"+u.getId());\n\n        for (MailAddressResolver r : all()) {\n            String email = r.findMailAddressFor(u);\n            if(email!=null) {\n                LOGGER.fine(r+\" resolved \"+u.getId()+\" to \"+email);\n                return email;\n            }\n        }\n\n        // fall back logic\n        String extractedAddress = extractAddressFromId(u.getFullName());\n        if (extractedAddress != null)\n            return extractedAddress;\n\n        if(u.getFullName().contains(\"@\"))\n            // this already looks like an e-mail ID\n            return u.getFullName();\n\n        String ds = Mailer.descriptor().getDefaultSuffix();\n        if(ds!=null) {\n            // another common pattern is \"DOMAIN\\person\" in Windows. Only\n            // do this when this full name is not manually set. see HUDSON-5164\n            Matcher m = WINDOWS_DOMAIN_REGEXP.matcher(u.getFullName());\n            if (m.matches() && u.getFullName().replace('\\\\','_').equals(u.getId()))\n                return m.group(1)+ds; // user+defaultSuffix\n\n            return u.getId()+ds;\n        } else\n            return null;\n    }","id":7148,"modified_method":"public static String resolve(User u) {\n        if (LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.fine(\"Resolving e-mail address for \\\"\"+u+\"\\\" ID=\"+u.getId());\n        }\n\n        for (MailAddressResolver r : all()) {\n            String email = r.findMailAddressFor(u);\n            if(email!=null) {\n                if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.fine(r+\" resolved \"+u.getId()+\" to \"+email);\n                }\n                return email;\n            }\n        }\n\n        // fall back logic\n        String extractedAddress = extractAddressFromId(u.getFullName());\n        if (extractedAddress != null)\n            return extractedAddress;\n\n        if(u.getFullName().contains(\"@\"))\n            // this already looks like an e-mail ID\n            return u.getFullName();\n\n        String ds = Mailer.descriptor().getDefaultSuffix();\n        if(ds!=null) {\n            // another common pattern is \"DOMAIN\\person\" in Windows. Only\n            // do this when this full name is not manually set. see HUDSON-5164\n            Matcher m = WINDOWS_DOMAIN_REGEXP.matcher(u.getFullName());\n            if (m.matches() && u.getFullName().replace('\\\\','_').equals(u.getId()))\n                return m.group(1)+ds; // user+defaultSuffix\n\n            return u.getId()+ds;\n        } else\n            return null;\n    }","commit_id":"9cd26cdf4566775be07d3cde85e163219b1eac9b","url":"https://github.com/kohsuke/hudson"},{"original_method":"private boolean internalMatch(ContentName name, boolean digestIncluded,\r\n\t\t\tPublisherPublicKeyDigest resultPublisherKeyID) {\r\n\t\tif (null != maxSuffixComponents() || null != minSuffixComponents()) {\r\n\t\t\t// we know our specified name is a prefix of the result. \r\n\t\t\t// the number of additional components must be this value\r\n\t\t\tint nameCount = name.count();\r\n\t\t\tint lengthDiff = nameCount + (digestIncluded?0:1) - name().count();\r\n\t\t\tif (null != maxSuffixComponents() && lengthDiff > maxSuffixComponents()) {\r\n\t\t\t\tLog.fine(\"Interest match failed: \" + lengthDiff + \" more than the \" + maxSuffixComponents() + \" components between expected \" +\r\n\t\t\t\t\t\tname() + \" and tested \" + name);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (null != minSuffixComponents() && lengthDiff < minSuffixComponents()) {\r\n\t\t\t\tLog.fine(\"Interest match failed: \" + lengthDiff + \" less than the \" + minSuffixComponents() + \" components between expected \" +\r\n\t\t\t\t\t\tname() + \" and tested \" + name);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (null != exclude()) {\r\n\t\t\tif (exclude().match(name.component(name().count()))) {\r\n\t\t\t\tLog.finest(\"Interest match failed. \" + name + \" has been excluded\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (null != publisherID()) {\r\n\t\t\tif (null == resultPublisherKeyID) {\r\n\t\t\t\tLog.finest(\"Interest match failed, target \" + name + \" doesn't specify a publisherID and we require a particular one.\");\r\n\t\t\t\treturn false; \r\n\t\t\t}\r\n\t\t\t// Should this be more general?\r\n\t\t\t// TODO DKS handle issuer\r\n\t\t\tLog.finest(\"Interest match handed off to trust manager for name: \" + name);\r\n\t\t\treturn TrustManager.getTrustManager().matchesRole(publisherID(), resultPublisherKeyID);\r\n\t\t} \r\n\t\tLog.finest(\"Interest match succeeded to name: \" + name);\r\n\t\treturn true;\r\n\t}","id":7149,"modified_method":"private boolean internalMatch(ContentName name, boolean digestIncluded,\r\n\t\t\tPublisherPublicKeyDigest resultPublisherKeyID) {\r\n\t\tif (null != maxSuffixComponents() || null != minSuffixComponents()) {\r\n\t\t\t// we know our specified name is a prefix of the result. \r\n\t\t\t// the number of additional components must be this value\r\n\t\t\tint nameCount = name.count();\r\n\t\t\tint lengthDiff = nameCount + (digestIncluded?0:1) - name().count();\r\n\t\t\tif (null != maxSuffixComponents() && lengthDiff > maxSuffixComponents()) {\n\t\t\t\tif (Log.isLoggable(Level.FINE))\r\n\t\t\t\t\tLog.fine(\"Interest match failed: \" + lengthDiff + \" more than the \" + maxSuffixComponents() + \" components between expected \" +\r\n\t\t\t\t\t\t\tname() + \" and tested \" + name);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (null != minSuffixComponents() && lengthDiff < minSuffixComponents()) {\n\t\t\t\tif (Log.isLoggable(Level.FINEST))\r\n\t\t\t\t\tLog.fine(\"Interest match failed: \" + lengthDiff + \" less than the \" + minSuffixComponents() + \" components between expected \" +\r\n\t\t\t\t\t\t\tname() + \" and tested \" + name);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (null != exclude()) {\r\n\t\t\tif (exclude().match(name.component(name().count()))) {\n\t\t\t\tif (Log.isLoggable(Level.FINEST))\r\n\t\t\t\t\tLog.finest(\"Interest match failed. \" + name + \" has been excluded\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (null != publisherID()) {\r\n\t\t\tif (null == resultPublisherKeyID) {\r\n\t\t\t\tLog.finest(\"Interest match failed, target \" + name + \" doesn't specify a publisherID and we require a particular one.\");\r\n\t\t\t\treturn false; \r\n\t\t\t}\r\n\t\t\t// Should this be more general?\r\n\t\t\t// TODO DKS handle issuer\n\t\t\tif (Log.isLoggable(Level.FINEST))\r\n\t\t\t\tLog.finest(\"Interest match handed off to trust manager for name: \" + name);\r\n\t\t\treturn TrustManager.getTrustManager().matchesRole(publisherID(), resultPublisherKeyID);\r\n\t\t}\n\t\tif (Log.isLoggable(Level.FINEST))\r\n\t\t\tLog.finest(\"Interest match succeeded to name: \" + name);\r\n\t\treturn true;\r\n\t}","commit_id":"b7b424b6196bc5ecedcb0cc7ca6013f3145b3317","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Test method for {@link com.hazelcast.config.XmlConfigBuilder.IterableNodeList#IterableNodeList(org.w3c.dom.NodeList)}.\n\t */\n\t@Test\n\tpublic void testIterableNodeList() {\n        NodeList nodeList = document.getFirstChild().getChildNodes();\n\t\tint count = 0;\n\t\t\n\t\tfor(Node node : new XmlConfigBuilder.IterableNodeList(nodeList)) {\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tassertEquals(3, count);\n\t}","id":7150,"modified_method":"/**\n\t * Test method for {@link com.hazelcast.config.XmlConfigBuilder.IterableNodeList#IterableNodeList(org.w3c.dom.NodeList)}.\n\t */\n\t@Test\n\tpublic void testIterableNodeList() {\n        NodeList nodeList = document.getFirstChild().getChildNodes();\n\t\tint count = 0;\n\t\t\n\t\tfor(Node node : new XmlConfigBuilder.IterableNodeList(nodeList)) {\n\t\t\tcount += (node != null)?1:0;\n\t\t}\n\t\t\n\t\tassertEquals(3, count);\n\t}","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleJoin(final org.w3c.dom.Node node) {\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node child = nodelist.item(i);\n            final String name = child.getNodeName().toLowerCase();\n            if (\"multicast\".equals(name)) {\n                handleMulticast(child);\n            } else if (\"tcp-ip\".equals(name)) {\n                handleTcpIp(child);\n            }\n        }\n    }","id":7151,"modified_method":"private void handleJoin(final org.w3c.dom.Node node) {\n        for(org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n            final String name = child.getNodeName().toLowerCase();\n            if (\"multicast\".equals(name)) {\n                handleMulticast(child);\n            } else if (\"tcp-ip\".equals(name)) {\n                handleTcpIp(child);\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleTcpIp(final org.w3c.dom.Node node) {\n        final NamedNodeMap atts = node.getAttributes();\n        final Join join = config.getNetworkConfig().getJoin();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = getTextContent(att).trim();\n            if (att.getNodeName().equals(\"enabled\")) {\n                join.getJoinMembers().setEnabled(checkTrue(value));\n            } else if (att.getNodeName().equals(\"conn-timeout-seconds\")) {\n                join.getJoinMembers().setConnectionTimeoutSeconds(getIntegerValue(\"conn-timeout-seconds\", value, 5));\n            }\n        }\n        final NodeList nodelist = node.getChildNodes();\n        members:\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            if (n.getNodeName().equalsIgnoreCase(\"required-member\")) {\n                join.getJoinMembers().setRequiredMember(value);\n            } else if (n.getNodeName().equalsIgnoreCase(\"hostname\")) {\n                join.getJoinMembers().addMember(value);\n            } else if (n.getNodeName().equalsIgnoreCase(\"address\")) {\n                int colonIndex = value.indexOf(':');\n                if (colonIndex == -1) {\n                    logger.log(Level.WARNING, \"Address should be in the form of ip:port. Address [\" + value + \"] is not valid.\");\n                } else {\n                    String hostStr = value.substring(0, colonIndex);\n                    String portStr = value.substring(colonIndex + 1);\n                    try {\n                        join.getJoinMembers().addAddress(new Address(hostStr, Integer.parseInt(portStr), true));\n                    } catch (UnknownHostException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } else if (n.getNodeName().equalsIgnoreCase(\"interface\")) {\n                final int indexStar = value.indexOf('*');\n                final int indexDash = value.indexOf('-');\n                if (indexStar == -1 && indexDash == -1) {\n                    join.getJoinMembers().addMember(value);\n                } else {\n                    final String first3 = value.substring(0, value.lastIndexOf('.'));\n                    final String lastOne = value.substring(value.lastIndexOf('.') + 1);\n                    if (first3.indexOf('*') != -1 && first3.indexOf('-') != -1) {\n                        String msg = \"First 3 parts of interface definition cannot contain '*' and '-'.\";\n                        msg += \"\\nPlease change the value '\" + value + \"' in the config file.\";\n                        logger.log(Level.WARNING, msg);\n                        continue members;\n                    }\n                    if (lastOne.equals(\"*\")) {\n                        for (int j = 0; j < 256; j++) {\n                            join.getJoinMembers().addMember(first3 + \".\" + String.valueOf(j));\n                        }\n                    } else if (lastOne.indexOf('-') != -1) {\n                        final int start = Integer.parseInt(lastOne.substring(0, lastOne\n                                .indexOf('-')));\n                        final int end = Integer.parseInt(lastOne\n                                .substring(lastOne.indexOf('-') + 1));\n                        for (int j = start; j <= end; j++) {\n                            join.getJoinMembers().addMember(first3 + \".\" + String.valueOf(j));\n                        }\n                    }\n                }\n            }\n        }\n    }","id":7152,"modified_method":"private void handleTcpIp(final org.w3c.dom.Node node) {\n        final NamedNodeMap atts = node.getAttributes();\n        final Join join = config.getNetworkConfig().getJoin();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = getTextContent(att).trim();\n            if (att.getNodeName().equals(\"enabled\")) {\n                join.getJoinMembers().setEnabled(checkTrue(value));\n            } else if (att.getNodeName().equals(\"conn-timeout-seconds\")) {\n                join.getJoinMembers().setConnectionTimeoutSeconds(getIntegerValue(\"conn-timeout-seconds\", value, 5));\n            }\n        }\n        final NodeList nodelist = node.getChildNodes();\n        members:\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            if (n.getNodeName().equalsIgnoreCase(\"required-member\")) {\n                join.getJoinMembers().setRequiredMember(value);\n            } else if (n.getNodeName().equalsIgnoreCase(\"hostname\")) {\n                join.getJoinMembers().addMember(value);\n            } else if (n.getNodeName().equalsIgnoreCase(\"address\")) {\n                int colonIndex = value.indexOf(':');\n                if (colonIndex == -1) {\n                    logger.log(Level.WARNING, \"Address should be in the form of ip:port. Address [\" + value + \"] is not valid.\");\n                } else {\n                    String hostStr = value.substring(0, colonIndex);\n                    String portStr = value.substring(colonIndex + 1);\n                    try {\n                        join.getJoinMembers().addAddress(new Address(hostStr, Integer.parseInt(portStr), true));\n                    } catch (UnknownHostException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } else if (\"interface\".equalsIgnoreCase(n.getNodeName())) {\n                final int indexStar = value.indexOf('*');\n                final int indexDash = value.indexOf('-');\n                if (indexStar == -1 && indexDash == -1) {\n                    join.getJoinMembers().addMember(value);\n                } else {\n                    final String first3 = value.substring(0, value.lastIndexOf('.'));\n                    final String lastOne = value.substring(value.lastIndexOf('.') + 1);\n                    if (first3.indexOf('*') != -1 && first3.indexOf('-') != -1) {\n                        String msg = \"First 3 parts of interface definition cannot contain '*' and '-'.\";\n                        msg += \"\\nPlease change the value '\" + value + \"' in the config file.\";\n                        logger.log(Level.WARNING, msg);\n                        continue members;\n                    }\n                    if (lastOne.equals(\"*\")) {\n                        for (int j = 0; j < 256; j++) {\n                            join.getJoinMembers().addMember(first3 + \".\" + String.valueOf(j));\n                        }\n                    } else if (lastOne.indexOf('-') != -1) {\n                        final int start = Integer.parseInt(lastOne.substring(0, lastOne\n                                .indexOf('-')));\n                        final int end = Integer.parseInt(lastOne\n                                .substring(lastOne.indexOf('-') + 1));\n                        for (int j = start; j <= end; j++) {\n                            join.getJoinMembers().addMember(first3 + \".\" + String.valueOf(j));\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleExecutor(final org.w3c.dom.Node node) {\n        final NodeList nodelist = node.getChildNodes();\n        final ExecutorConfig executorConfig = config.getExecutorConfig();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String name = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"core-pool-size\".equals(name)) {\n                executorConfig.setCorePoolSize(getIntegerValue(\"core-pool-size\", value, ExecutorConfig.DEFAULT_CORE_POOL_SIZE));\n            } else if (\"max-pool-size\".equals(name)) {\n                executorConfig.setMaxPoolSize(getIntegerValue(\"max-pool-size\", value, ExecutorConfig.DEFAULT_MAX_POOL_SIZE));\n            } else if (\"keep-alive-seconds\".equals(name)) {\n                executorConfig.setKeepAliveSeconds(getIntegerValue(\"keep-alive-seconds\", value, ExecutorConfig.DEFAULT_KEEPALIVE_SECONDS));\n            }\n        }\n    }","id":7153,"modified_method":"private void handleExecutor(final org.w3c.dom.Node node) {\n        final ExecutorConfig executorConfig = config.getExecutorConfig();\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String name = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"core-pool-size\".equals(name)) {\n                executorConfig.setCorePoolSize(getIntegerValue(\"core-pool-size\", value, ExecutorConfig.DEFAULT_CORE_POOL_SIZE));\n            } else if (\"max-pool-size\".equals(name)) {\n                executorConfig.setMaxPoolSize(getIntegerValue(\"max-pool-size\", value, ExecutorConfig.DEFAULT_MAX_POOL_SIZE));\n            } else if (\"keep-alive-seconds\".equals(name)) {\n                executorConfig.setKeepAliveSeconds(getIntegerValue(\"keep-alive-seconds\", value, ExecutorConfig.DEFAULT_KEEPALIVE_SECONDS));\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleInterfaces(final org.w3c.dom.Node node) {\n        final NamedNodeMap atts = node.getAttributes();\n        final Interfaces interfaces = config.getNetworkConfig().getInterfaces();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = att.getNodeValue();\n            if (\"enabled\".equals(att.getNodeName())) {\n                interfaces.setEnabled(checkTrue(value));\n            }\n        }\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            if (\"interface\".equalsIgnoreCase(n.getNodeName())) {\n                interfaces.addInterface(value);\n            }\n        }\n    }","id":7154,"modified_method":"private void handleInterfaces(final org.w3c.dom.Node node) {\n        final NamedNodeMap atts = node.getAttributes();\n        final Interfaces interfaces = config.getNetworkConfig().getInterfaces();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            if (\"enabled\".equals(att.getNodeName())) {\n                final String value = att.getNodeValue();\n                interfaces.setEnabled(checkTrue(value));\n            }\n        }\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            if (\"interface\".equalsIgnoreCase(n.getNodeName())) {\n                final String value = getTextContent(n).trim();\n                interfaces.addInterface(value);\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleQueue(final org.w3c.dom.Node node) {\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\n        final String name = getTextContent(attName);\n        final QueueConfig qConfig = new QueueConfig();\n        qConfig.setName(name);\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String nodeName = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"max-size-per-jvm\".equals(nodeName)) {\n                qConfig.setMaxSizePerJVM(getIntegerValue(\"max-size-per-jvm\", value, QueueConfig.DEFAULT_MAX_SIZE_PER_JVM));\n            } else if (\"time-to-live-seconds\".equals(nodeName)) {\n                qConfig.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value, QueueConfig.DEFAULT_TTL_SECONDS));\n            }\n        }\n        this.config.getMapQConfigs().put(name, qConfig);\n    }","id":7155,"modified_method":"private void handleQueue(final org.w3c.dom.Node node) {\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\n        final String name = getTextContent(attName);\n        final QueueConfig qConfig = new QueueConfig();\n        qConfig.setName(name);\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String nodeName = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"max-size-per-jvm\".equals(nodeName)) {\n                qConfig.setMaxSizePerJVM(getIntegerValue(\"max-size-per-jvm\", value, QueueConfig.DEFAULT_MAX_SIZE_PER_JVM));\n            } else if (\"time-to-live-seconds\".equals(nodeName)) {\n                qConfig.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value, QueueConfig.DEFAULT_TTL_SECONDS));\n            }\n        }\n        this.config.getMapQConfigs().put(name, qConfig);\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleTopic(final org.w3c.dom.Node node) {\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\n        final String name = getTextContent(attName);\n        final TopicConfig tConfig = new TopicConfig();\n        tConfig.setName(name);\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            if (n.getNodeName().equalsIgnoreCase(\"global-ordering-enabled\")) {\n                tConfig.setGlobalOrderingEnabled(checkTrue(value));\n            }\n        }\n        config.getMapTopicConfigs().put(name, tConfig);\n    }","id":7156,"modified_method":"private void handleTopic(final org.w3c.dom.Node node) {\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\n        final String name = getTextContent(attName);\n        final TopicConfig tConfig = new TopicConfig();\n        tConfig.setName(name);\n        \n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String value = getTextContent(n).trim();\n            if (n.getNodeName().equalsIgnoreCase(\"global-ordering-enabled\")) {\n                tConfig.setGlobalOrderingEnabled(checkTrue(value));\n            }\n        }\n        config.getMapTopicConfigs().put(name, tConfig);\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void parse(final Config config) throws Exception {\n        this.config = config;\n        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        Document doc = null;\n        try {\n            doc = builder.parse(in);\n            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            Util.streamXML(doc, baos);\n            final byte[] bytes = baos.toByteArray();\n            final ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n            config.setXmlConfig(Util.inputStreamToString(bais));\n            if (\"true\".equals(System.getProperty(\"hazelcast.config.print\"))) {\n                logger.log(Level.INFO, \"Hazelcast config URL : \" + config.getConfigurationUrl());\n                logger.log(Level.INFO, \"=== Hazelcast config xml ===\");\n                logger.log(Level.INFO, config.getXmlConfig());\n                logger.log(Level.INFO, \"==============================\");\n                logger.log(Level.INFO, \"\");\n            }\n        } catch (final Exception e) {\n            String msgPart = \"config file '\" + config.getConfigurationFile() + \"' set as a system property.\";\n            if (!usingSystemConfig) {\n                msgPart = \"hazelcast.xml config file in the classpath.\";\n            }\n            String msg = \"Having problem parsing the \" + msgPart;\n            msg += \"\\nException: \" + e.getMessage();\n            msg += \"\\nHazelcast will start with default configuration.\";\n            logger.log(Level.WARNING, msg);\n            return;\n        }\n        final Element docElement = doc.getDocumentElement();\n        try {\n            docElement.getTextContent();\n        } catch (final Throwable e) {\n            domLevel3 = false;\n        }\n        final NodeList nodelist = docElement.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node node = nodelist.item(i);\n            final String nodeName = node.getNodeName();\n            if (\"network\".equals(nodeName)) {\n                handleNetwork(node);\n            } else if (\"group\".equals(nodeName)) {\n                handleGroup(node);\n            } else if (\"properties\".equals(nodeName)) {\n                handleProperties(node);\n            } else if (\"executor-service\".equals(nodeName)) {\n                handleExecutor(node);\n            } else if (\"queue\".equals(nodeName)) {\n                handleQueue(node);\n            } else if (\"map\".equals(nodeName)) {\n                handleMap(node);\n            } else if (\"topic\".equals(nodeName)) {\n                handleTopic(node);\n            }\n        }\n    }","id":7157,"modified_method":"private void parse(final Config config) throws Exception {\n        this.config = config;\n        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        Document doc = null;\n        try {\n            doc = builder.parse(in);\n            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            Util.streamXML(doc, baos);\n            final byte[] bytes = baos.toByteArray();\n            final ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n            config.setXmlConfig(Util.inputStreamToString(bais));\n            if (\"true\".equals(System.getProperty(\"hazelcast.config.print\"))) {\n                logger.log(Level.INFO, \"Hazelcast config URL : \" + config.getConfigurationUrl());\n                logger.log(Level.INFO, \"=== Hazelcast config xml ===\");\n                logger.log(Level.INFO, config.getXmlConfig());\n                logger.log(Level.INFO, \"==============================\");\n                logger.log(Level.INFO, \"\");\n            }\n        } catch (final Exception e) {\n            String msgPart = \"config file '\" + config.getConfigurationFile() + \"' set as a system property.\";\n            if (!usingSystemConfig) {\n                msgPart = \"hazelcast.xml config file in the classpath.\";\n            }\n            String msg = \"Having problem parsing the \" + msgPart;\n            msg += \"\\nException: \" + e.getMessage();\n            msg += \"\\nHazelcast will start with default configuration.\";\n            logger.log(Level.WARNING, msg);\n            return;\n        }\n        final Element docElement = doc.getDocumentElement();\n        try {\n            docElement.getTextContent();\n        } catch (final Throwable e) {\n            domLevel3 = false;\n        }\n        \n        for(org.w3c.dom.Node node  : new IterableNodeList(docElement.getChildNodes())) {\n            final String nodeName = node.getNodeName();\n            if (\"network\".equals(nodeName)) {\n                handleNetwork(node);\n            } else if (\"group\".equals(nodeName)) {\n                handleGroup(node);\n            } else if (\"properties\".equals(nodeName)) {\n                handleProperties(node);\n            } else if (\"executor-service\".equals(nodeName)) {\n                handleExecutor(node);\n            } else if (\"queue\".equals(nodeName)) {\n                handleQueue(node);\n            } else if (\"map\".equals(nodeName)) {\n                handleMap(node);\n            } else if (\"topic\".equals(nodeName)) {\n                handleTopic(node);\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleNetwork(final org.w3c.dom.Node node) throws Exception {\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node child = nodelist.item(i);\n            final String nodeName = child.getNodeName();\n            if (\"port\".equals(nodeName)) {\n                handlePort(child);\n            } else if (\"join\".equals(nodeName)) {\n                handleJoin(child);\n            } else if (\"interfaces\".equals(nodeName)) {\n                handleInterfaces(child);\n            } else if (\"symmetric-encryption\".equals(nodeName)) {\n                handleViaReflection(child, config.getNetworkConfig(), new SymmetricEncryptionConfig());\n            } else if (\"asymmetric-encryption\".equals(nodeName)) {\n                handleViaReflection(child, config.getNetworkConfig(), new AsymmetricEncryptionConfig());\n            }\n        }\n    }","id":7158,"modified_method":"private void handleNetwork(final org.w3c.dom.Node node) throws Exception {\n        for(org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n            final String nodeName = child.getNodeName();\n            if (\"port\".equals(nodeName)) {\n                handlePort(child);\n            } else if (\"join\".equals(nodeName)) {\n                handleJoin(child);\n            } else if (\"interfaces\".equals(nodeName)) {\n                handleInterfaces(child);\n            } else if (\"symmetric-encryption\".equals(nodeName)) {\n                handleViaReflection(child, config.getNetworkConfig(), new SymmetricEncryptionConfig());\n            } else if (\"asymmetric-encryption\".equals(nodeName)) {\n                handleViaReflection(child, config.getNetworkConfig(), new AsymmetricEncryptionConfig());\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleProperties(final org.w3c.dom.Node node) {\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            final String name = n.getNodeName().toLowerCase();\n            System.setProperty(name, value);\n        }\n    }","id":7159,"modified_method":"private void handleProperties(final org.w3c.dom.Node node) {\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String value = getTextContent(n).trim();\n            final String name = n.getNodeName().toLowerCase();\n            System.setProperty(name, value);\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleGroup(final org.w3c.dom.Node node) {\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            final String nodeName = n.getNodeName().toLowerCase();\n            if (\"name\".equals(nodeName)) {\n                config.setGroupName(value);\n            } else if (\"password\".equals(nodeName)) {\n                config.setGroupPassword(value);\n            }\n        }\n    }","id":7160,"modified_method":"private void handleGroup(final org.w3c.dom.Node node) {\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String value = getTextContent(n).trim();\n            final String nodeName = n.getNodeName().toLowerCase();\n            if (\"name\".equals(nodeName)) {\n                config.setGroupName(value);\n            } else if (\"password\".equals(nodeName)) {\n                config.setGroupPassword(value);\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private MapStoreConfig createMapStoreConfig(final org.w3c.dom.Node node) {\n        MapStoreConfig mapStoreConfig = new MapStoreConfig();\n        final NamedNodeMap atts = node.getAttributes();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = getTextContent(att).trim();\n            if (att.getNodeName().equals(\"enabled\")) {\n                mapStoreConfig.setEnabled(checkTrue(value));\n            }\n        }\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String nodeName = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"class-name\".equals(nodeName)) {\n                mapStoreConfig.setClassName(value);\n            } else if (\"write-delay-seconds\".equals(nodeName)) {\n                mapStoreConfig.setWriteDelaySeconds(getIntegerValue(\"write-delay-seconds\", value, MapStoreConfig.DEFAULT_WRITE_DELAY_SECONDS));\n            }\n        }\n        return mapStoreConfig;\n    }","id":7161,"modified_method":"private MapStoreConfig createMapStoreConfig(final org.w3c.dom.Node node) {\n        MapStoreConfig mapStoreConfig = new MapStoreConfig();\n        final NamedNodeMap atts = node.getAttributes();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = getTextContent(att).trim();\n            if (att.getNodeName().equals(\"enabled\")) {\n                mapStoreConfig.setEnabled(checkTrue(value));\n            }\n        }\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String nodeName = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"class-name\".equals(nodeName)) {\n                mapStoreConfig.setClassName(value);\n            } else if (\"write-delay-seconds\".equals(nodeName)) {\n                mapStoreConfig.setWriteDelaySeconds(getIntegerValue(\"write-delay-seconds\", value, MapStoreConfig.DEFAULT_WRITE_DELAY_SECONDS));\n            }\n        }\n        return mapStoreConfig;\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleMulticast(final org.w3c.dom.Node node) {\n        final NamedNodeMap atts = node.getAttributes();\n        final Join join = config.getNetworkConfig().getJoin();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = getTextContent(att).trim();\n            if (att.getNodeName().equals(\"enabled\")) {\n                join.getMulticastConfig().setEnabled(checkTrue(value));\n            }\n        }\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            if (n.getNodeName().equalsIgnoreCase(\"multicast-group\")) {\n                join.getMulticastConfig().setMulticastGroup(value);\n            } else if (n.getNodeName().equalsIgnoreCase(\"multicast-port\")) {\n                join.getMulticastConfig().setMulticastPort(Integer.parseInt(value));\n            }\n        }\n    }","id":7162,"modified_method":"private void handleMulticast(final org.w3c.dom.Node node) {\n        final NamedNodeMap atts = node.getAttributes();\n        final Join join = config.getNetworkConfig().getJoin();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            final String value = getTextContent(att).trim();\n            if (\"enabled\".equalsIgnoreCase(att.getNodeName())) {\n                join.getMulticastConfig().setEnabled(checkTrue(value));\n            }\n        }\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String value = getTextContent(n).trim();\n            if (\"multicast-group\".equalsIgnoreCase(n.getNodeName())) {\n                join.getMulticastConfig().setMulticastGroup(value);\n            } else if (\"multicast-port\".equalsIgnoreCase(n.getNodeName())) {\n                join.getMulticastConfig().setMulticastPort(Integer.parseInt(value));\n            }\n        }\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleViaReflection(final org.w3c.dom.Node node, Object parent, Object target) throws Exception {\n        final NamedNodeMap atts = node.getAttributes();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            String methodName = \"set\" + getMethodName(att.getNodeName());\n            Method method = getMethod(target, methodName);\n            final String value = att.getNodeValue();\n            invoke(target, method, value);\n        }\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String value = getTextContent(n).trim();\n            String methodName = \"set\" + getMethodName(n.getNodeName());\n            Method method = getMethod(target, methodName);\n            invoke(target, method, value);\n        }\n        String mName = \"set\" + target.getClass().getSimpleName();\n        Method method = getMethod(parent, mName);\n        if (method == null) {\n            mName = \"add\" + target.getClass().getSimpleName();\n            method = getMethod(parent, mName);\n        }\n        method.invoke(parent, new Object[]{target});\n    }","id":7163,"modified_method":"private void handleViaReflection(final org.w3c.dom.Node node, Object parent, Object target) throws Exception {\n        final NamedNodeMap atts = node.getAttributes();\n        for (int a = 0; a < atts.getLength(); a++) {\n            final org.w3c.dom.Node att = atts.item(a);\n            String methodName = \"set\" + getMethodName(att.getNodeName());\n            Method method = getMethod(target, methodName);\n            final String value = att.getNodeValue();\n            invoke(target, method, value);\n        }\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String value = getTextContent(n).trim();\n            String methodName = \"set\" + getMethodName(n.getNodeName());\n            Method method = getMethod(target, methodName);\n            invoke(target, method, value);\n        }\n        String mName = \"set\" + target.getClass().getSimpleName();\n        Method method = getMethod(parent, mName);\n        if (method == null) {\n            mName = \"add\" + target.getClass().getSimpleName();\n            method = getMethod(parent, mName);\n        }\n        method.invoke(parent, new Object[]{target});\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleMap(final org.w3c.dom.Node node) throws Exception{\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\n        final String name = getTextContent(attName);\n        final MapConfig mapConfig = new MapConfig();\n        mapConfig.setName(name);\n        final NodeList nodelist = node.getChildNodes();\n        for (int i = 0; i < nodelist.getLength(); i++) {\n            final org.w3c.dom.Node n = nodelist.item(i);\n            final String nodeName = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"backup-count\".equals(nodeName)) {\n                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", value, MapConfig.DEFAULT_BACKUP_COUNT));\n            } else if (\"eviction-policy\".equals(nodeName)) {\n                mapConfig.setEvictionPolicy(value);\n            } else if (\"max-size\".equals(nodeName)) {\n                mapConfig.setMaxSize(getIntegerValue(\"max-size\", value,\n                        MapConfig.DEFAULT_MAX_SIZE));\n            } else if (\"eviction-percentage\".equals(nodeName)) {\n                mapConfig.setEvictionPercentage(getIntegerValue(\"eviction-percentage\", value,\n                        MapConfig.DEFAULT_EVICTION_PERCENTAGE));\n            } else if (\"time-to-live-seconds\".equals(nodeName)) {\n                mapConfig.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value,\n                        MapConfig.DEFAULT_TTL_SECONDS));\n            } else if (\"map-store\".equals(nodeName)) {\n                MapStoreConfig mapStoreConfig = createMapStoreConfig(n);\n                mapConfig.setMapStoreConfig(mapStoreConfig);\n            } else if (\"near-cache\".equals(nodeName)) {\n                handleViaReflection(n, mapConfig, new NearCacheConfig());\n            }\n        }\n        this.config.getMapMapConfigs().put(name, mapConfig);\n    }","id":7164,"modified_method":"private void handleMap(final org.w3c.dom.Node node) throws Exception{\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\n        final String name = getTextContent(attName);\n        final MapConfig mapConfig = new MapConfig();\n        mapConfig.setName(name);\n        for(org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {\n            final String nodeName = n.getNodeName().toLowerCase();\n            final String value = getTextContent(n).trim();\n            if (\"backup-count\".equals(nodeName)) {\n                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", value, MapConfig.DEFAULT_BACKUP_COUNT));\n            } else if (\"eviction-policy\".equals(nodeName)) {\n                mapConfig.setEvictionPolicy(value);\n            } else if (\"max-size\".equals(nodeName)) {\n                mapConfig.setMaxSize(getIntegerValue(\"max-size\", value,\n                        MapConfig.DEFAULT_MAX_SIZE));\n            } else if (\"eviction-percentage\".equals(nodeName)) {\n                mapConfig.setEvictionPercentage(getIntegerValue(\"eviction-percentage\", value,\n                        MapConfig.DEFAULT_EVICTION_PERCENTAGE));\n            } else if (\"time-to-live-seconds\".equals(nodeName)) {\n                mapConfig.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value,\n                        MapConfig.DEFAULT_TTL_SECONDS));\n            } else if (\"map-store\".equals(nodeName)) {\n                MapStoreConfig mapStoreConfig = createMapStoreConfig(n);\n                mapConfig.setMapStoreConfig(mapStoreConfig);\n            } else if (\"near-cache\".equals(nodeName)) {\n                handleViaReflection(n, mapConfig, new NearCacheConfig());\n            }\n        }\n        this.config.getMapMapConfigs().put(name, mapConfig);\n    }","commit_id":"89f39547b9aa5d7845ee214421b1e3e40daa35de","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#read()}.\n   */\n  @Test\n  public void readTest1() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN; k <= MAX_LEN; k += DELTA) {\n      for (OutStreamOptions op : getOptionSet()) {\n        String path = uniqPath + \"/file_\" + k + \"_\" + op.hashCode();\n        TachyonFile f = TachyonFSTestUtils.createByteFile(sTfs, path, k, op);\n\n        for (int i = 0; i < 2; i ++) {\n          FileInStream is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n          byte[] ret = new byte[k];\n          int value = is.read();\n          int cnt = 0;\n          while (value != -1) {\n            Assert.assertTrue(value >= 0);\n            Assert.assertTrue(value < 256);\n            ret[cnt++] = (byte) value;\n            value = is.read();\n          }\n          Assert.assertEquals(cnt, k);\n          Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n          is.close();\n        }\n      }\n    }\n  }","id":7165,"modified_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#read()}.\n   */\n  @Test\n  public void readTest1() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN; k <= MAX_LEN; k += DELTA) {\n      for (CreateFileOptions op : getOptionSet()) {\n        TachyonURI path = new TachyonURI(uniqPath + \"/file_\" + k + \"_\" + op.hashCode());\n        TachyonFSTestUtils.createByteFile(sTfs, path, op, k);\n\n        for (int i = 0; i < 2; i ++) {\n          FileInStream is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n          byte[] ret = new byte[k];\n          int value = is.read();\n          int cnt = 0;\n          while (value != -1) {\n            Assert.assertTrue(value >= 0);\n            Assert.assertTrue(value < 256);\n            ret[cnt++] = (byte) value;\n            value = is.read();\n          }\n          Assert.assertEquals(cnt, k);\n          Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n          is.close();\n        }\n      }\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"private List<OutStreamOptions> getOptionSet() {\n    List<OutStreamOptions> ret = new ArrayList<OutStreamOptions>(3);\n    ret.add(sWriteBoth);\n    ret.add(sWriteTachyon);\n    ret.add(sWriteUnderStore);\n    return ret;\n  }","id":7166,"modified_method":"private List<CreateFileOptions> getOptionSet() {\n    List<CreateFileOptions> ret = new ArrayList<CreateFileOptions>(3);\n    ret.add(sWriteBoth);\n    ret.add(sWriteTachyon);\n    ret.add(sWriteUnderStore);\n    return ret;\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#read(byte[], int, int)}.\n   */\n  @Test\n  public void readTest3() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN; k <= MAX_LEN; k += DELTA) {\n      for (OutStreamOptions op : getOptionSet()) {\n        String path = uniqPath + \"/file_\" + k + \"_\" + op.hashCode();\n        TachyonFile f = TachyonFSTestUtils.createByteFile(sTfs, path, k, op);\n\n        FileInStream is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n\n        byte[] ret = new byte[k / 2];\n        Assert.assertEquals(k / 2, is.read(ret, 0, k / 2));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k / 2, ret));\n        is.close();\n\n        is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n        ret = new byte[k];\n        Assert.assertEquals(k, is.read(ret, 0, k));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n        is.close();\n      }\n    }\n  }","id":7167,"modified_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#read(byte[], int, int)}.\n   */\n  @Test\n  public void readTest3() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN; k <= MAX_LEN; k += DELTA) {\n      for (CreateFileOptions op : getOptionSet()) {\n        TachyonURI path = new TachyonURI(uniqPath + \"/file_\" + k + \"_\" + op.hashCode());\n        TachyonFSTestUtils.createByteFile(sTfs, path, op, k);\n\n        FileInStream is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n\n        byte[] ret = new byte[k / 2];\n        Assert.assertEquals(k / 2, is.read(ret, 0, k / 2));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k / 2, ret));\n        is.close();\n\n        is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n        ret = new byte[k];\n        Assert.assertEquals(k, is.read(ret, 0, k));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n        is.close();\n      }\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#skip(long)}.\n   */\n  @Test\n  public void skipTest() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN + DELTA; k <= MAX_LEN; k += DELTA) {\n      for (OutStreamOptions op : getOptionSet()) {\n        String path = uniqPath + \"/file_\" + k + \"_\" + op.hashCode();\n        TachyonFile f = TachyonFSTestUtils.createByteFile(sTfs, path, k, op);\n\n        FileInStream is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n\n        Assert.assertEquals(k / 2, is.skip(k / 2));\n        Assert.assertEquals(k / 2, is.read());\n        is.close();\n\n        is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n        int t = k / 3;\n        Assert.assertEquals(t, is.skip(t));\n        Assert.assertEquals(t, is.read());\n        Assert.assertEquals(t, is.skip(t));\n        Assert.assertEquals(2 * t + 1, is.read());\n        is.close();\n      }\n    }\n  }","id":7168,"modified_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#skip(long)}.\n   */\n  @Test\n  public void skipTest() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN + DELTA; k <= MAX_LEN; k += DELTA) {\n      for (CreateFileOptions op : getOptionSet()) {\n        TachyonURI path = new TachyonURI(uniqPath + \"/file_\" + k + \"_\" + op.hashCode());\n        TachyonFSTestUtils.createByteFile(sTfs, path, op, k);\n\n        FileInStream is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n\n        Assert.assertEquals(k / 2, is.skip(k / 2));\n        Assert.assertEquals(k / 2, is.read());\n        is.close();\n\n        is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n        int t = k / 3;\n        Assert.assertEquals(t, is.skip(t));\n        Assert.assertEquals(t, is.read());\n        Assert.assertEquals(t, is.skip(t));\n        Assert.assertEquals(2 * t + 1, is.read());\n        is.close();\n      }\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#read(byte[])}.\n   */\n  @Test\n  public void readTest2() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN; k <= MAX_LEN; k += DELTA) {\n      for (OutStreamOptions op : getOptionSet()) {\n        String path = uniqPath + \"/file_\" + k + \"_\" + op.hashCode();\n        TachyonFile f = TachyonFSTestUtils.createByteFile(sTfs, path, k, op);\n\n        FileInStream is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n        byte[] ret = new byte[k];\n        Assert.assertEquals(k, is.read(ret));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n        is.close();\n\n        is = sTfs.getInStream(f, TachyonFSTestUtils.toOpenFileOptions(op));\n        ret = new byte[k];\n        Assert.assertEquals(k, is.read(ret));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n        is.close();\n      }\n    }\n  }","id":7169,"modified_method":"/**\n   * Test {@link tachyon.client.block.BufferedBlockInStream#read(byte[])}.\n   */\n  @Test\n  public void readTest2() throws IOException, TachyonException {\n    String uniqPath = PathUtils.uniqPath();\n    for (int k = MIN_LEN; k <= MAX_LEN; k += DELTA) {\n      for (CreateFileOptions op : getOptionSet()) {\n        TachyonURI path = new TachyonURI(uniqPath + \"/file_\" + k + \"_\" + op.hashCode());\n        TachyonFSTestUtils.createByteFile(sTfs, path, op, k);\n\n        FileInStream is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n        byte[] ret = new byte[k];\n        Assert.assertEquals(k, is.read(ret));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n        is.close();\n\n        is = sTfs.openFile(path, TachyonFSTestUtils.toOpenFileOptions(op));\n        ret = new byte[k];\n        Assert.assertEquals(k, is.read(ret));\n        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(k, ret));\n        is.close();\n      }\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void multiReadTest() throws IOException, TachyonException {\n    final int length = 20;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/multiReadTest\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n    for (int i = 0; i < 10; i ++) {\n      DataServerMessage recvMsg = request(block);\n      assertValid(recvMsg, length, block.getBlockId(), 0, length);\n    }\n  }","id":7170,"modified_method":"@Test\n  public void multiReadTest() throws IOException, TachyonException {\n    final int length = 20;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    for (int i = 0; i < 10; i ++) {\n      DataServerMessage recvMsg = request(block);\n      assertValid(recvMsg, length, block.getBlockId(), 0, length);\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"public void readThroughClientNonExistentTest() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/testFile\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n\n    // Get the maximum block id, for use in determining a non-existent block id.\n    FileInfo fileInfo = mTFS.getInfo(file);\n    long maxBlockId = block.getBlockId();\n    for (long blockId : fileInfo.blockIds) {\n      if (blockId > maxBlockId) {\n        maxBlockId = blockId;\n      }\n    }\n\n    RemoteBlockReader client =\n        RemoteBlockReader.Factory.create(mWorkerTachyonConf);\n    block.blockId = maxBlockId + 1;\n    ByteBuffer result = readRemotely(client, block, length);\n\n    Assert.assertNull(result);\n  }","id":7171,"modified_method":"public void readThroughClientNonExistentTest() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n\n    // Get the maximum block id, for use in determining a non-existent block id.\n    URIStatus status = mTFS.getStatus(new TachyonURI(\"/file\"));\n    long maxBlockId = block.getBlockId();\n    for (long blockId : status.getBlockIds()) {\n      if (blockId > maxBlockId) {\n        maxBlockId = blockId;\n      }\n    }\n\n    RemoteBlockReader client =\n        RemoteBlockReader.Factory.create(mWorkerTachyonConf);\n    block.blockId = maxBlockId + 1;\n    ByteBuffer result = readRemotely(client, block, length);\n\n    Assert.assertNull(result);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void readTest() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/testFile\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n    DataServerMessage recvMsg = request(block);\n    assertValid(recvMsg, length, block.getBlockId(), 0, length);\n  }","id":7172,"modified_method":"@Test\n  public void readTest() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    DataServerMessage recvMsg = request(block);\n    assertValid(recvMsg, length, block.getBlockId(), 0, length);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void negativeOffset() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/readTooLarge\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n    DataServerMessage recvMsg = request(block, length * -2, 1);\n    assertError(recvMsg, block.blockId);\n  }","id":7173,"modified_method":"@Test\n  public void negativeOffset() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    DataServerMessage recvMsg = request(block, length * -2, 1);\n    assertError(recvMsg, block.blockId);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void readTooLarge() throws IOException, TachyonException {\n    final int length = 20;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/readTooLarge\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n    DataServerMessage recvMsg = request(block, 0, length * 2);\n    assertError(recvMsg, block.blockId);\n  }","id":7174,"modified_method":"@Test\n  public void readTooLarge() throws IOException, TachyonException {\n    final int length = 20;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    DataServerMessage recvMsg = request(block, 0, length * 2);\n    assertError(recvMsg, block.blockId);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void readPartialTest1() throws TachyonException, IOException {\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/testFile\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, 10);\n    BlockInfo block = getFirstBlockInfo(file);\n    final int offset = 0;\n    final int length = 6;\n    DataServerMessage recvMsg = request(block, offset, length);\n    assertValid(recvMsg, length, block.getBlockId(), offset, length);\n  }","id":7175,"modified_method":"@Test\n  public void readPartialTest1() throws TachyonException, IOException {\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, 10);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    final int offset = 0;\n    final int length = 6;\n    DataServerMessage recvMsg = request(block, offset, length);\n    assertValid(recvMsg, length, block.getBlockId(), offset, length);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Create a new socket to the data port and send a block request. The returned value is the\n   * response from the server.\n   */\n  private DataServerMessage request(final BlockInfo block, final long offset, final long length)\n      throws IOException, TachyonException {\n    long lockId = mBlockWorkerClient.lockBlock(block.blockId).lockId;\n\n    SocketChannel socketChannel = null;\n\n    try {\n      DataServerMessage sendMsg =\n          DataServerMessage.createBlockRequestMessage(block.blockId, offset, length, lockId,\n              mBlockWorkerClient.getSessionId());\n      socketChannel = SocketChannel\n        .open(new InetSocketAddress(block.getLocations().get(0).getWorkerAddress().getHost(),\n            block.getLocations().get(0).getWorkerAddress().getDataPort()));\n\n      while (!sendMsg.finishSending()) {\n        sendMsg.send(socketChannel);\n      }\n      DataServerMessage recvMsg =\n          DataServerMessage.createBlockResponseMessage(false, block.blockId, offset, length, null);\n      while (!recvMsg.isMessageReady()) {\n        int numRead = recvMsg.recv(socketChannel);\n        if (numRead == -1) {\n          break;\n        }\n      }\n      return recvMsg;\n    } finally {\n      mBlockWorkerClient.unlockBlock(block.blockId);\n      if (socketChannel != null) {\n        socketChannel.close();\n      }\n    }\n  }","id":7176,"modified_method":"/**\n   * Returns the MasterBlockInfo of the first block of the file\n   *\n   * @param uri the uri of the file to get the first MasterBlockInfo for\n   * @return the MasterBlockInfo of the first block in the file\n   * @throws IOException if the block does not exist\n   * @throws TachyonException\n   */\n  private BlockInfo getFirstBlockInfo(TachyonURI uri)\n      throws IOException, TachyonException {\n    URIStatus status = mTFS.getStatus(uri);\n    return mBlockMasterClient.getBlockInfo(status.getBlockIds().get(0));\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void readThroughClientTest() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/testFile\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n\n    RemoteBlockReader client =\n        RemoteBlockReader.Factory.create(mWorkerTachyonConf);\n    ByteBuffer result = readRemotely(client, block, length);\n\n    Assert.assertEquals(BufferUtils.getIncreasingByteBuffer(length), result);\n  }","id":7177,"modified_method":"@Test\n  public void readThroughClientTest() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n\n    RemoteBlockReader client =\n        RemoteBlockReader.Factory.create(mWorkerTachyonConf);\n    ByteBuffer result = readRemotely(client, block, length);\n\n    Assert.assertEquals(BufferUtils.getIncreasingByteBuffer(length), result);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void readPartialTest2() throws TachyonException, IOException {\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/testFile\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, 10);\n    BlockInfo block = getFirstBlockInfo(file);\n    final int offset = 2;\n    final int length = 6;\n    DataServerMessage recvMsg = request(block, offset, length);\n    assertValid(recvMsg, BufferUtils.getIncreasingByteBuffer(offset, length), block.getBlockId(),\n        offset, length);\n  }","id":7178,"modified_method":"@Test\n  public void readPartialTest2() throws TachyonException, IOException {\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, 10);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    final int offset = 2;\n    final int length = 6;\n    DataServerMessage recvMsg = request(block, offset, length);\n    assertValid(recvMsg, BufferUtils.getIncreasingByteBuffer(offset, length), block.getBlockId(),\n        offset, length);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void readMultiFiles() throws IOException, TachyonException {\n    final int length = WORKER_CAPACITY_BYTES / 2 + 1;\n    TachyonFile file1 =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/readFile1\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block1 = getFirstBlockInfo(file1);\n    DataServerMessage recvMsg1 = request(block1);\n    assertValid(recvMsg1, length, block1.getBlockId(), 0, length);\n\n    TachyonFile file2 =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/readFile2\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block2 = getFirstBlockInfo(file2);\n    DataServerMessage recvMsg2 = request(block2);\n    assertValid(recvMsg2, length, block2.getBlockId(), 0, length);\n\n    CommonUtils\n        .sleepMs(mWorkerTachyonConf.getInt(Constants.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS) * 2\n            + 10);\n\n    FileInfo fileInfo = mTFS.getInfo(mTFS.open(new TachyonURI(\"/readFile1\")));\n    Assert.assertEquals(0, fileInfo.inMemoryPercentage);\n  }","id":7179,"modified_method":"@Test\n  public void readMultiFiles() throws IOException, TachyonException {\n    final int length = WORKER_CAPACITY_BYTES / 2 + 1;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file1\", WriteType.MUST_CACHE, length);\n    BlockInfo block1 = getFirstBlockInfo(new TachyonURI(\"/file1\"));\n    DataServerMessage recvMsg1 = request(block1);\n    assertValid(recvMsg1, length, block1.getBlockId(), 0, length);\n\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file2\", WriteType.MUST_CACHE, length);\n    BlockInfo block2 = getFirstBlockInfo(new TachyonURI(\"/file2\"));\n    DataServerMessage recvMsg2 = request(block2);\n    assertValid(recvMsg2, length, block2.getBlockId(), 0, length);\n\n    CommonUtils\n        .sleepMs(mWorkerTachyonConf.getInt(Constants.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS) * 2\n            + 10);\n\n    Assert.assertEquals(0, mTFS.getStatus(new TachyonURI(\"/readFile1\")).getInMemoryPercentage());\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void tooLargeOffset() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/readTooLarge\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n    DataServerMessage recvMsg = request(block, length * 2, 1);\n    assertError(recvMsg, block.blockId);\n  }","id":7180,"modified_method":"@Test\n  public void tooLargeOffset() throws IOException, TachyonException {\n    final int length = 10;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    DataServerMessage recvMsg = request(block, length * 2, 1);\n    assertError(recvMsg, block.blockId);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void lengthTooSmall() throws IOException, TachyonException {\n    final int length = 20;\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/readTooLarge\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, length);\n    BlockInfo block = getFirstBlockInfo(file);\n    DataServerMessage recvMsg = request(block, 0, length * -2);\n    assertError(recvMsg, block.blockId);\n  }","id":7181,"modified_method":"@Test\n  public void lengthTooSmall() throws IOException, TachyonException {\n    final int length = 20;\n    TachyonFSTestUtils.createByteFile(mTFS, \"/file\", WriteType.MUST_CACHE, length);\n    BlockInfo block = getFirstBlockInfo(new TachyonURI(\"/file\"));\n    DataServerMessage recvMsg = request(block, 0, length * -2);\n    assertError(recvMsg, block.blockId);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void createFilesTest() throws Exception {\n    int clients = 10;\n    OutStreamOptions option =\n        new OutStreamOptions.Builder(new TachyonConf()).setBlockSizeBytes(1024)\n            .setUnderStorageType(UnderStorageType.SYNC_PERSIST).build();\n    for (int k = 0; k < clients; k ++) {\n      mTfs.getOutStream(new TachyonURI(TachyonURI.SEPARATOR + k), option).close();\n    }\n    List<String> files = TachyonFSTestUtils.listFiles(mTfs, TachyonURI.SEPARATOR);\n    Assert.assertEquals(clients, files.size());\n    Collections.sort(files);\n    for (int k = 0; k < clients; k ++) {\n      Assert.assertEquals(TachyonURI.SEPARATOR + k, files.get(k));\n    }\n  }","id":7182,"modified_method":"@Test\n  public void createFilesTest() throws Exception {\n    int clients = 10;\n    CreateFileOptions option =\n        CreateFileOptions.defaults().setBlockSizeBytes(1024).setWriteType(WriteType.THROUGH);\n    for (int k = 0; k < clients; k ++) {\n      mTfs.createFile(new TachyonURI(TachyonURI.SEPARATOR + k), option).close();\n    }\n    List<String> files = TachyonFSTestUtils.listFiles(mTfs, TachyonURI.SEPARATOR);\n    Assert.assertEquals(clients, files.size());\n    Collections.sort(files);\n    for (int k = 0; k < clients; k ++) {\n      Assert.assertEquals(TachyonURI.SEPARATOR + k, files.get(k));\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Creates 10 files in the folder.\n   *\n   * @param folderName the folder name to create\n   * @param answer the results, the mapping from file id to file path\n   * @throws IOException if an error occurs creating the file\n   */\n  private void faultTestDataCreation(TachyonURI folderName, List<Pair<Long, TachyonURI>> answer)\n      throws IOException, TachyonException {\n    mTfs.mkdir(folderName);\n    answer.add(new Pair<Long, TachyonURI>(mTfs.open(folderName).getFileId(), folderName));\n\n    for (int k = 0; k < 10; k ++) {\n      TachyonURI path =\n          new TachyonURI(PathUtils.concatPath(folderName, folderName.toString().substring(1) + k));\n      mTfs.getOutStream(path).close();\n      answer.add(new Pair<Long, TachyonURI>(mTfs.open(path).getFileId(), path));\n    }\n  }","id":7183,"modified_method":"/**\n   * Creates 10 files in the folder.\n   *\n   * @param folderName the folder name to create\n   * @param answer the results, the mapping from file id to file path\n   * @throws IOException if an error occurs creating the file\n   */\n  private void faultTestDataCreation(TachyonURI folderName, List<Pair<Long, TachyonURI>> answer)\n      throws IOException, TachyonException {\n    mTfs.createDirectory(folderName);\n    answer.add(new Pair<Long, TachyonURI>(mTfs.getStatus(folderName).getFileId(), folderName));\n\n    for (int k = 0; k < 10; k ++) {\n      TachyonURI path =\n          new TachyonURI(PathUtils.concatPath(folderName, folderName.toString().substring(1) + k));\n      mTfs.createFile(path).close();\n      answer.add(new Pair<Long, TachyonURI>(mTfs.getStatus(path).getFileId(), path));\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void deleteFileFaultTest() throws Exception {\n    // Kill leader -> create files -> kill leader -> delete files, repeat.\n    List<Pair<Long, TachyonURI>> answer = Lists.newArrayList();\n    for (int kills = 0; kills < MASTERS - 1; kills ++) {\n      Assert.assertTrue(mLocalTachyonClusterMultiMaster.killLeader());\n      CommonUtils.sleepMs(Constants.SECOND_MS * 2);\n\n      if (kills % 2 != 0) {\n        // Delete files.\n\n        faultTestDataCheck(answer);\n\n        // We can not call mTfs.delete(mTfs.open(new TachyonURI(TachyonURI.SEPARATOR))) because root\n        // node can not be deleted.\n        for (FileInfo file : mTfs.listStatus(mTfs.open(new TachyonURI(TachyonURI.SEPARATOR)))) {\n          mTfs.delete(new TachyonFile(file.getFileId()),\n              new DeleteOptions.Builder().setRecursive(true).build());\n        }\n        answer.clear();\n        faultTestDataCheck(answer);\n      } else {\n        // Create files.\n\n        Assert.assertEquals(0, answer.size());\n        faultTestDataCheck(answer);\n\n        faultTestDataCreation(new TachyonURI(PathUtils.concatPath(\n            TachyonURI.SEPARATOR, \"data_\" + kills)), answer);\n        faultTestDataCheck(answer);\n      }\n    }\n  }","id":7184,"modified_method":"@Test\n  public void deleteFileFaultTest() throws Exception {\n    // Kill leader -> create files -> kill leader -> delete files, repeat.\n    List<Pair<Long, TachyonURI>> answer = Lists.newArrayList();\n    for (int kills = 0; kills < MASTERS - 1; kills ++) {\n      Assert.assertTrue(mLocalTachyonClusterMultiMaster.killLeader());\n      CommonUtils.sleepMs(Constants.SECOND_MS * 2);\n\n      if (kills % 2 != 0) {\n        // Delete files.\n\n        faultTestDataCheck(answer);\n\n        // We can not call mTfs.delete(mTfs.open(new TachyonURI(TachyonURI.SEPARATOR))) because root\n        // node can not be deleted.\n        for (URIStatus file : mTfs.listStatus(new TachyonURI(TachyonURI.SEPARATOR))) {\n          mTfs.delete(new TachyonURI(file.getPath()), new DeleteOptions.Builder()\n              .setRecursive(true).build());\n        }\n        answer.clear();\n        faultTestDataCheck(answer);\n      } else {\n        // Create files.\n\n        Assert.assertEquals(0, answer.size());\n        faultTestDataCheck(answer);\n\n        faultTestDataCreation(new TachyonURI(PathUtils.concatPath(\n            TachyonURI.SEPARATOR, \"data_\" + kills)), answer);\n        faultTestDataCheck(answer);\n      }\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tells if the results can match the answer.\n   *\n   * @param answer the correct results\n   * @throws IOException if an error occurs opening the file\n   */\n  private void faultTestDataCheck(List<Pair<Long, TachyonURI>> answer) throws IOException,\n      TachyonException {\n    List<String> files = TachyonFSTestUtils.listFiles(mTfs, TachyonURI.SEPARATOR);\n    Collections.sort(files);\n    Assert.assertEquals(answer.size(), files.size());\n    for (int k = 0; k < answer.size(); k ++) {\n      Assert.assertEquals(answer.get(k).getSecond().toString(),\n          mTfs.getInfo(new TachyonFile(answer.get(k).getFirst())).getPath());\n      Assert.assertEquals(answer.get(k).getFirst().longValue(),\n          mTfs.open(answer.get(k).getSecond()).getFileId());\n    }\n  }","id":7185,"modified_method":"/**\n   * Tells if the results can match the answer.\n   *\n   * @param answer the correct results\n   * @throws IOException if an error occurs opening the file\n   */\n  private void faultTestDataCheck(List<Pair<Long, TachyonURI>> answer) throws IOException,\n      TachyonException {\n    List<String> files = TachyonFSTestUtils.listFiles(mTfs, TachyonURI.SEPARATOR);\n    Collections.sort(files);\n    Assert.assertEquals(answer.size(), files.size());\n    for (int k = 0; k < answer.size(); k ++) {\n      Assert.assertEquals(answer.get(k).getSecond().toString(),\n          mTfs.getStatus(answer.get(k).getSecond()).getPath());\n      Assert.assertEquals(answer.get(k).getFirst().longValue(),\n          mTfs.getStatus(answer.get(k).getSecond()).getFileId());\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void rawtablePerfTest() throws Exception {\n    int col = 200;\n\n    TachyonURI uri = new TachyonURI(\"/table\");\n    RawTable table = mTachyonRawTables.create(uri, col);\n    RawTableInfo info = mTachyonRawTables.getInfo(table);\n\n    Assert.assertEquals(col, info.getColumns());\n\n    for (int k = 0; k < col; k ++) {\n      RawColumn rawCol = table.getColumn(k);\n      FileOutStream outStream = mTachyonRawTables.createPartition(rawCol, 0);\n      outStream.write(BufferUtils.getIncreasingByteArray(10));\n      outStream.close();\n    }\n\n    for (int k = 0; k < col; k ++) {\n      RawColumn rawCol = table.getColumn(k);\n      TachyonFile file = mTachyonRawTables.openPartition(rawCol, 0);\n      FileInStream is = mFileSystem.getInStream(file);\n      ByteBuffer buf = ByteBuffer.allocate(10);\n      is.read(buf.array());\n      Assert.assertEquals(BufferUtils.getIncreasingByteBuffer(10), buf);\n      is.close();\n    }\n\n    for (int k = 0; k < col; k ++) {\n      RawColumn rawCol = table.getColumn(k);\n      TachyonFile file = mTachyonRawTables.openPartition(rawCol, 0);\n      FileInStream is = mFileSystem.getInStream(file);\n      ByteBuffer buf = ByteBuffer.allocate(10);\n      is.read(buf.array());\n      Assert.assertEquals(BufferUtils.getIncreasingByteBuffer(10), buf);\n      is.close();\n    }\n  }","id":7186,"modified_method":"@Test\n  public void rawtablePerfTest() throws Exception {\n    int col = 200;\n\n    TachyonURI uri = new TachyonURI(\"/table\");\n    RawTable table = mTachyonRawTables.create(uri, col);\n    RawTableInfo info = mTachyonRawTables.getInfo(table);\n\n    Assert.assertEquals(col, info.getColumns());\n\n    for (int k = 0; k < col; k ++) {\n      RawColumn rawCol = table.getColumn(k);\n      FileOutStream outStream = mTachyonRawTables.createPartition(rawCol, 0);\n      outStream.write(BufferUtils.getIncreasingByteArray(10));\n      outStream.close();\n    }\n\n    for (int k = 0; k < col; k ++) {\n      RawColumn rawCol = table.getColumn(k);\n      TachyonURI file = mTachyonRawTables.getPartitionUri(rawCol, 0);\n      FileInStream is = mFileSystem.openFile(file);\n      ByteBuffer buf = ByteBuffer.allocate(10);\n      is.read(buf.array());\n      Assert.assertEquals(BufferUtils.getIncreasingByteBuffer(10), buf);\n      is.close();\n    }\n\n    for (int k = 0; k < col; k ++) {\n      RawColumn rawCol = table.getColumn(k);\n      TachyonURI file = mTachyonRawTables.getPartitionUri(rawCol, 0);\n      FileInStream is = mFileSystem.openFile(file);\n      ByteBuffer buf = ByteBuffer.allocate(10);\n      is.read(buf.array());\n      Assert.assertEquals(BufferUtils.getIncreasingByteBuffer(10), buf);\n      is.close();\n    }\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Before\n  public final void before() throws Exception {\n    mFileSystem = FileSystem.TachyonFileSystemFactory.get();\n    mTachyonRawTables = TachyonRawTables.TachyonRawTablesFactory.get();\n    mMaxCols =\n        mLocalTachyonClusterResource.get().getMasterTachyonConf().getInt(Constants.MAX_COLUMNS);\n  }","id":7187,"modified_method":"@Before\n  public final void before() throws Exception {\n    mFileSystem = FileSystem.Factory.create();\n    mTachyonRawTables = TachyonRawTables.TachyonRawTablesFactory.get();\n    mMaxCols =\n        mLocalTachyonClusterResource.get().getMasterTachyonConf().getInt(Constants.MAX_COLUMNS);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@BeforeClass\n  public static void beforeClass() throws Exception {\n    Configuration conf = new Configuration();\n    conf.set(\"fs.tachyon.impl\", TFS.class.getName());\n\n    FileSystem tachyonFS = sLocalTachyonClusterResource.get().getClient();\n    TachyonFSTestUtils.createByteFile(tachyonFS, \"/testFile1\", TachyonStorageType.STORE,\n        UnderStorageType.SYNC_PERSIST, FILE_LEN);\n\n    URI uri = URI.create(sLocalTachyonClusterResource.get().getMasterUri());\n    sTFS = org.apache.hadoop.fs.FileSystem.get(uri, conf);\n  }","id":7188,"modified_method":"@BeforeClass\n  public static void beforeClass() throws Exception {\n    Configuration conf = new Configuration();\n    conf.set(\"fs.tachyon.impl\", TFS.class.getName());\n\n    FileSystem tachyonFS = sLocalTachyonClusterResource.get().getClient();\n    TachyonFSTestUtils.createByteFile(tachyonFS, \"/testFile1\", WriteType.CACHE_THROUGH, FILE_LEN);\n\n    URI uri = URI.create(sLocalTachyonClusterResource.get().getMasterUri());\n    sTFS = org.apache.hadoop.fs.FileSystem.get(uri, conf);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"@Before\n  public final void before() throws Exception {\n    mTFS = mLocalTachyonClusterResource.get().getClient();\n    mWorkerConf = mLocalTachyonClusterResource.get().getWorkerTachyonConf();\n    mWorkerToMasterHeartbeatIntervalMs =\n        mWorkerConf.getInt(Constants.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS);\n    mSetPinned = new SetStateOptions.Builder().setPinned(true).build();\n    mSetUnpinned = new SetStateOptions.Builder().setPinned(false).build();\n  }","id":7189,"modified_method":"@Before\n  public final void before() throws Exception {\n    mTFS = mLocalTachyonClusterResource.get().getClient();\n    mWorkerConf = mLocalTachyonClusterResource.get().getWorkerTachyonConf();\n    mWorkerToMasterHeartbeatIntervalMs =\n        mWorkerConf.getInt(Constants.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS);\n    mSetPinned = SetAttributeOptions.defaults().setPinned(true);\n    mSetUnpinned = SetAttributeOptions.defaults().setPinned(false);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that pinning a file prevents it from being evicted.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void pinFileTest() throws IOException, TachyonException {\n    // Create a file that fills the entire Tachyon store\n    TachyonFile file =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/test1\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, MEM_CAPACITY_BYTES);\n\n    // Pin the file\n    mTFS.setState(file, mSetPinned);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // Confirm the pin with master\n    Assert.assertTrue(mTFS.getInfo(file).isIsPinned());\n\n    // Try to create a file that cannot be stored unless the previous file is evicted, expect an\n    // exception since worker cannot serve the request\n    mThrown.expect(IOException.class);\n    TachyonFSTestUtils.createByteFile(mTFS, \"/test2\", TachyonStorageType.STORE,\n        UnderStorageType.NO_PERSIST, MEM_CAPACITY_BYTES);\n  }","id":7190,"modified_method":"/**\n   * Tests that pinning a file prevents it from being evicted.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void pinFileTest() throws IOException, TachyonException {\n    // Create a file that fills the entire Tachyon store\n    TachyonURI file = new TachyonURI(\"/test1\");\n    TachyonFSTestUtils.createByteFile(mTFS, file, WriteType.MUST_CACHE, MEM_CAPACITY_BYTES);\n\n    // Pin the file\n    mTFS.setAttribute(file, mSetPinned);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // Confirm the pin with master\n    Assert.assertTrue(mTFS.getStatus(file).isPinned());\n\n    // Try to create a file that cannot be stored unless the previous file is evicted, expect an\n    // exception since worker cannot serve the request\n    mThrown.expect(IOException.class);\n    TachyonFSTestUtils.createByteFile(mTFS, \"/test2\", WriteType.MUST_CACHE, MEM_CAPACITY_BYTES);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the promotion of a file.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void promoteBlock() throws IOException, TachyonException {\n    TachyonFile file1 =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/root/test1\", TachyonStorageType.STORE,\n            UnderStorageType.SYNC_PERSIST, MEM_CAPACITY_BYTES / 6);\n    TachyonFile file2 =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/root/test2\", TachyonStorageType.STORE,\n            UnderStorageType.SYNC_PERSIST, MEM_CAPACITY_BYTES / 2);\n    TachyonFile file3 =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/root/test3\", TachyonStorageType.STORE,\n            UnderStorageType.SYNC_PERSIST, MEM_CAPACITY_BYTES / 2);\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    TachyonFile toPromote = null;\n    int toPromoteLen = 0;\n    FileInfo file1Info = mTFS.getInfo(file1);\n    FileInfo file2Info = mTFS.getInfo(file2);\n    FileInfo file3Info = mTFS.getInfo(file3);\n\n    // We know some file will not be in memory, but not which one since we do not want to make\n    // any assumptions on the eviction policy\n    if (file1Info.getInMemoryPercentage() < 100) {\n      toPromote = file1;\n      toPromoteLen = (int) file1Info.getLength();\n      Assert.assertEquals(100, file2Info.getInMemoryPercentage());\n      Assert.assertEquals(100, file3Info.getInMemoryPercentage());\n    } else if (file2Info.getInMemoryPercentage() < 100) {\n      toPromote = file2;\n      toPromoteLen = (int) file2Info.getLength();\n      Assert.assertEquals(100, file1Info.getInMemoryPercentage());\n      Assert.assertEquals(100, file3Info.getInMemoryPercentage());\n    } else {\n      toPromote = file3;\n      toPromoteLen = (int) file3Info.getLength();\n      Assert.assertEquals(100, file1Info.getInMemoryPercentage());\n      Assert.assertEquals(100, file2Info.getInMemoryPercentage());\n    }\n\n    FileInStream is =\n        mTFS.getInStream(\n            toPromote,\n            new InStreamOptions.Builder(mWorkerConf).setTachyonStorageType(\n                TachyonStorageType.PROMOTE).build());\n    byte[] buf = new byte[toPromoteLen];\n    int len = is.read(buf);\n    is.close();\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    Assert.assertEquals(toPromoteLen, len);\n    Assert.assertEquals(100, mTFS.getInfo(toPromote).getInMemoryPercentage());\n  }","id":7191,"modified_method":"/**\n   * Tests the promotion of a file.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void promoteBlock() throws IOException, TachyonException {\n    TachyonURI uri1 = new TachyonURI(\"/file1\");\n    TachyonURI uri2 = new TachyonURI(\"/file2\");\n    TachyonURI uri3 = new TachyonURI(\"/file3\");\n    TachyonFSTestUtils.createByteFile(mTFS, uri1, WriteType.CACHE_THROUGH, MEM_CAPACITY_BYTES / 6);\n    TachyonFSTestUtils.createByteFile(mTFS, uri2, WriteType.CACHE_THROUGH, MEM_CAPACITY_BYTES / 2);\n    TachyonFSTestUtils.createByteFile(mTFS, uri3, WriteType.CACHE_THROUGH, MEM_CAPACITY_BYTES / 2);\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    TachyonURI toPromote = null;\n    int toPromoteLen = 0;\n    URIStatus file1Info = mTFS.getStatus(uri1);\n    URIStatus file2Info = mTFS.getStatus(uri2);\n    URIStatus file3Info = mTFS.getStatus(uri3);\n\n    // We know some file will not be in memory, but not which one since we do not want to make\n    // any assumptions on the eviction policy\n    if (file1Info.getInMemoryPercentage() < 100) {\n      toPromote = uri1;\n      toPromoteLen = (int) file1Info.getLength();\n      Assert.assertEquals(100, file2Info.getInMemoryPercentage());\n      Assert.assertEquals(100, file3Info.getInMemoryPercentage());\n    } else if (file2Info.getInMemoryPercentage() < 100) {\n      toPromote = uri2;\n      toPromoteLen = (int) file2Info.getLength();\n      Assert.assertEquals(100, file1Info.getInMemoryPercentage());\n      Assert.assertEquals(100, file3Info.getInMemoryPercentage());\n    } else {\n      toPromote = uri3;\n      toPromoteLen = (int) file3Info.getLength();\n      Assert.assertEquals(100, file1Info.getInMemoryPercentage());\n      Assert.assertEquals(100, file2Info.getInMemoryPercentage());\n    }\n\n    FileInStream is =\n        mTFS.openFile(toPromote, OpenFileOptions.defaults().setReadType(ReadType.CACHE_PROMOTE));\n    byte[] buf = new byte[toPromoteLen];\n    int len = is.read(buf);\n    is.close();\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    Assert.assertEquals(toPromoteLen, len);\n    Assert.assertEquals(100, mTFS.getStatus(toPromote).getInMemoryPercentage());\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that pinning a file and then unpinning.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void unpinFileTest() throws IOException, TachyonException {\n    // Create a file that fills the entire Tachyon store\n    TachyonFile file1 = TachyonFSTestUtils.createByteFile(mTFS, \"/test1\", TachyonStorageType.STORE,\n        UnderStorageType.NO_PERSIST, MEM_CAPACITY_BYTES);\n\n    // Pin the file\n    mTFS.setState(file1, mSetPinned);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // Confirm the pin with master\n    Assert.assertTrue(mTFS.getInfo(file1).isIsPinned());\n\n    // Unpin the file\n    mTFS.setState(file1, mSetUnpinned);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // Confirm the unpin\n    Assert.assertFalse(mTFS.getInfo(file1).isIsPinned());\n\n    // Try to create a file that cannot be stored unless the previous file is evicted, this\n    // should succeed\n    TachyonFile file2 = TachyonFSTestUtils.createByteFile(mTFS, \"/test2\", TachyonStorageType.STORE,\n        UnderStorageType.NO_PERSIST, MEM_CAPACITY_BYTES);\n\n    // File 2 should be in memory and File 1 should be evicted\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n    Assert.assertFalse(mTFS.getInfo(file1).getInMemoryPercentage() == 100);\n    Assert.assertTrue(mTFS.getInfo(file2).getInMemoryPercentage() == 100);\n  }","id":7192,"modified_method":"/**\n   * Tests that pinning a file and then unpinning.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void unpinFileTest() throws IOException, TachyonException {\n    // Create a file that fills the entire Tachyon store\n    TachyonURI file1 = new TachyonURI(\"/test1\");\n    TachyonFSTestUtils.createByteFile(mTFS, file1, WriteType.MUST_CACHE, MEM_CAPACITY_BYTES);\n\n    // Pin the file\n    mTFS.setAttribute(file1, mSetPinned);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // Confirm the pin with master\n    Assert.assertTrue(mTFS.getStatus(file1).isPinned());\n\n    // Unpin the file\n    mTFS.setAttribute(file1, mSetUnpinned);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // Confirm the unpin\n    Assert.assertFalse(mTFS.getStatus(file1).isPinned());\n\n    // Try to create a file that cannot be stored unless the previous file is evicted, this\n    // should succeed\n    TachyonURI file2 = new TachyonURI(\"/test2\");\n    TachyonFSTestUtils.createByteFile(mTFS, file2, WriteType.MUST_CACHE, MEM_CAPACITY_BYTES);\n\n    // File 2 should be in memory and File 1 should be evicted\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n    Assert.assertFalse(mTFS.getStatus(file1).getInMemoryPercentage() == 100);\n    Assert.assertTrue(mTFS.getStatus(file2).getInMemoryPercentage() == 100);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that deletes go through despite failing initially due to concurrent read.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void deleteWhileReadTest() throws IOException, TachyonException {\n    TachyonFile file = TachyonFSTestUtils.createByteFile(mTFS, \"/test1\", TachyonStorageType.STORE,\n        UnderStorageType.NO_PERSIST, MEM_CAPACITY_BYTES);\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    Assert.assertTrue(mTFS.getInfo(file).getInMemoryPercentage() == 100);\n    // Open the file\n    InStreamOptions options =\n        new InStreamOptions.Builder(new TachyonConf()).setTachyonStorageType(\n            TachyonStorageType.STORE).build();\n    FileInStream in = mTFS.getInStream(file, options);\n    Assert.assertEquals(0, in.read());\n\n    // Delete the file\n    mTFS.delete(file);\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // After the delete, the master should no longer serve the file\n    Assert.assertNull(mTFS.openIfExists(new TachyonURI(\"/test1\")));\n\n    // However, the previous read should still be able to read it as the data still exists\n    byte[] res = new byte[MEM_CAPACITY_BYTES];\n    Assert.assertEquals(MEM_CAPACITY_BYTES - 1, in.read(res, 1, MEM_CAPACITY_BYTES - 1));\n    res[0] = 0;\n    Assert.assertTrue(BufferUtils.equalIncreasingByteArray(MEM_CAPACITY_BYTES, res));\n    in.close();\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // After the file is closed, the master's delete should go through and new files can be created\n    TachyonFile newFile =\n        TachyonFSTestUtils.createByteFile(mTFS, \"/test2\", TachyonStorageType.STORE,\n            UnderStorageType.NO_PERSIST, MEM_CAPACITY_BYTES);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n    Assert.assertTrue(mTFS.getInfo(newFile).getInMemoryPercentage() == 100);\n  }","id":7193,"modified_method":"/**\n   * Tests that deletes go through despite failing initially due to concurrent read.\n   *\n   * @throws IOException if a non-Tachyon exception occurs\n   * @throws TachyonException if an unexpected tachyon exception is thrown\n   */\n  @Test\n  public void deleteWhileReadTest() throws IOException, TachyonException {\n    TachyonURI file = new TachyonURI(\"/test1\");\n    TachyonFSTestUtils.createByteFile(mTFS, file, WriteType.MUST_CACHE, MEM_CAPACITY_BYTES);\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    Assert.assertTrue(mTFS.getStatus(file).getInMemoryPercentage() == 100);\n    // Open the file\n    OpenFileOptions options = OpenFileOptions.defaults().setReadType(ReadType.CACHE);\n    FileInStream in = mTFS.openFile(file, options);\n    Assert.assertEquals(0, in.read());\n\n    // Delete the file\n    mTFS.delete(file);\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // After the delete, the master should no longer serve the file\n    Assert.assertFalse(mTFS.exists(file));\n\n    // However, the previous read should still be able to read it as the data still exists\n    byte[] res = new byte[MEM_CAPACITY_BYTES];\n    Assert.assertEquals(MEM_CAPACITY_BYTES - 1, in.read(res, 1, MEM_CAPACITY_BYTES - 1));\n    res[0] = 0;\n    Assert.assertTrue(BufferUtils.equalIncreasingByteArray(MEM_CAPACITY_BYTES, res));\n    in.close();\n\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n\n    // After the file is closed, the master's delete should go through and new files can be created\n    TachyonURI newFile = new TachyonURI(\"/test2\");\n    TachyonFSTestUtils.createByteFile(mTFS, newFile, WriteType.MUST_CACHE, MEM_CAPACITY_BYTES);\n    CommonUtils.sleepMs(LOG, mWorkerToMasterHeartbeatIntervalMs * 3);\n    Assert.assertTrue(mTFS.getStatus(newFile).getInMemoryPercentage() == 100);\n  }","commit_id":"5386b0ed251a6683b63bed815181b5bba00685ad","url":"https://github.com/amplab/tachyon"},{"original_method":"public void deleteItemMetaData(final Long itemId, final String label) {\n    final String query = \"from ItemMetaData imd where imd.item.itemId=? and imd.label= ?\";\n    \n    final HibernateCallback hcb = new HibernateCallback(){\n    \tpublic Object doInHibernate(Session session) throws HibernateException, SQLException {\n    \t\tQuery q = session.createQuery(query);\n    \t\tq.setLong(0, itemId.longValue());\n    \t\tq.setString(1, label);\n    \t\treturn q.list();\n    \t};\n    };\n    List itemmetadatalist = getHibernateTemplate().executeFind(hcb);\n\n//    List itemmetadatalist = getHibernateTemplate().find(query,\n//        new Object[] { itemId, label },\n//        new org.hibernate.type.Type[] { Hibernate.LONG , Hibernate.STRING });\n    int retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        getHibernateTemplate().deleteAll(itemmetadatalist);\n        retryCount = 0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem delete itemmetadatalist: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n  }","id":7194,"modified_method":"public void deleteItemMetaData(final Long itemId, final String label) {\n// delete metadata by label\n    ItemData item = (ItemData)getHibernateTemplate().load(ItemData.class, itemId);\n    final String query = \"from ItemMetaData imd where imd.item.itemId=? and imd.label= ?\";\n    \n    final HibernateCallback hcb = new HibernateCallback(){\n    \tpublic Object doInHibernate(Session session) throws HibernateException, SQLException {\n    \t\tQuery q = session.createQuery(query);\n    \t\tq.setLong(0, itemId.longValue());\n    \t\tq.setString(1, label);\n    \t\treturn q.list();\n    \t};\n    };\n    List itemmetadatalist = getHibernateTemplate().executeFind(hcb);\n\n    int retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        if (item!=null){ // need to dissociate with item before deleting in Hibernate 3\n\t  Iterator iter = itemmetadatalist.iterator();\n\t  while (iter.hasNext()){\n\t    ItemMetaDataIfc meta= (ItemMetaDataIfc) iter.next();\n            meta.setItem(null);\n\t  }\n          \n          Set set = item.getItemMetaDataSet();\n          set.removeAll(itemmetadatalist);\n          item.setItemMetaDataSet(set);\n          getHibernateTemplate().deleteAll(itemmetadatalist);\n          retryCount = 0;\n\t}\n        else retryCount=0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem delete itemmetadatalist: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n  }","commit_id":"7b7a7015b24616ea6a87800e168e10f4bf6e8851","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void deleteItem(Long itemId, String agent) {\n      ItemData item = (ItemData)getHibernateTemplate().load(ItemData.class, itemId);\n      if (item != null) {\n        printItem(item);\n      }\n    int retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        getHibernateTemplate().delete(item);\n        retryCount = 0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleting item: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n      if (item != null) {\n        printItem(item);\n      }\n  }","id":7195,"modified_method":"public void deleteItem(Long itemId, String agent) {\n    ItemData item = (ItemData)getHibernateTemplate().load(ItemData.class, itemId);\n    if (item != null) {\n      printItem(item);\n    }\n    int retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n\tSectionDataIfc section = item.getSection();\n        Set set = section.getItemSet();\n        set.remove(item);\n        getHibernateTemplate().delete(item);\n        retryCount = 0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleting item: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n      if (item != null) {\n        printItem(item);\n      }\n  }","commit_id":"788d7fa625a7a0bc923e3c72751645f00b492882","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void deleteItemContent(Long itemId, String agent) {\n      ItemData item = (ItemData)getHibernateTemplate().load(ItemData.class, itemId);\n      if (item != null) {\n        printItem(item);\n      }\n    int retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        getHibernateTemplate().deleteAll(item.getItemTextSet());\n        retryCount = 0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleteItemTextSet: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n\n    retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        getHibernateTemplate().deleteAll(item.getItemMetaDataSet());\n        retryCount = 0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleteItemMetaDataSet: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n\n    retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        getHibernateTemplate().deleteAll(item.getItemFeedbackSet());\n        retryCount = 0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleting ItemFeedbackSet: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n      if (item != null) {\n        printItem(item);\n      }\n  }","id":7196,"modified_method":"public void deleteItemContent(Long itemId, String agent) {\n    ItemData item = (ItemData)getHibernateTemplate().load(ItemData.class, itemId);\n\n    int retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        if (item!=null){ // need to dissociate with item before deleting in Hibernate 3\n          Set set = item.getItemTextSet();\n          Iterator iter = set.iterator();\n          while (iter.hasNext()){\n            ItemTextIfc text = (ItemTextIfc) iter.next();\n            text.setItem(null);\n\t  }\n          item.setItemFeedbackSet(new HashSet());\n          getHibernateTemplate().deleteAll(set);\n          retryCount = 0;\n\t}\n        else retryCount=0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleteItemTextSet: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n\n    retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        if (item!=null){ // need to dissociate with item before deleting in Hibernate 3\n          Set set = item.getItemMetaDataSet();\n          Iterator iter = set.iterator();\n          while (iter.hasNext()){\n            ItemMetaDataIfc text = (ItemMetaDataIfc) iter.next();\n            text.setItem(null);\n\t  }\n          item.setItemTextSet(new HashSet());\n          getHibernateTemplate().deleteAll(set);\n          retryCount = 0;\n\t}\n        else retryCount=0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleteItemMetaDataSet: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n\n    retryCount = PersistenceService.getInstance().getRetryCount().intValue();\n    while (retryCount > 0){\n      try {\n        if (item!=null){ // need to dissociate with item before deleting in Hibernate 3\n          Set set = item.getItemFeedbackSet();\n          Iterator iter = set.iterator();\n          while (iter.hasNext()){\n            ItemFeedbackIfc text = (ItemFeedbackIfc) iter.next();\n            text.setItem(null);\n\t  }\n         item.setItemMetaDataSet(new HashSet());\n          getHibernateTemplate().deleteAll(set);\n          retryCount = 0;\n\t}\n        else retryCount=0;\n      }\n      catch (Exception e) {\n        log.warn(\"problem deleting ItemFeedbackSet: \"+e.getMessage());\n        retryCount = PersistenceService.getInstance().retryDeadlock(e, retryCount);\n      }\n    }\n  }","commit_id":"788d7fa625a7a0bc923e3c72751645f00b492882","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMStructure structure)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(structure);\n\n\t\tlong userId = portletDataContext.getUserId(structure.getUserUuid());\n\n\t\tif (structure.getParentStructureId() !=\n\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID) {\n\n\t\t\tElement structureElement =\n\t\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\t\tstructure, DDMStructure.class,\n\t\t\t\t\tstructure.getParentStructureId());\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, structureElement);\n\t\t}\n\n\t\tMap<Long, Long> structureIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tlong parentStructureId = MapUtil.getLong(\n\t\t\tstructureIds, structure.getParentStructureId(),\n\t\t\tstructure.getParentStructureId());\n\n\t\tMap<String, String> structureKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tstructure);\n\n\t\tDDMStructure importedStructure = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tElement element =\n\t\t\t\tportletDataContext.getImportDataStagedModelElement(structure);\n\n\t\t\tboolean preloaded = GetterUtil.getBoolean(\n\t\t\t\telement.attributeValue(\"preloaded\"));\n\n\t\t\tDDMStructure existingStructure = null;\n\n\t\t\tif (!preloaded) {\n\t\t\t\texistingStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\t\t\tstructure.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\t\t\tportletDataContext.getScopeGroupId(),\n\t\t\t\t\tstructure.getClassNameId(), structure.getStructureKey());\n\t\t\t}\n\n\t\t\tif (existingStructure == null) {\n\t\t\t\tserviceContext.setUuid(structure.getUuid());\n\n\t\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentStructureId, structure.getClassNameId(),\n\t\t\t\t\tstructure.getStructureKey(), structure.getNameMap(),\n\t\t\t\t\tstructure.getDescriptionMap(), structure.getXsd(),\n\t\t\t\t\tstructure.getStorageType(), structure.getType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.updateStructure(\n\t\t\t\t\t\texistingStructure.getStructureId(), parentStructureId,\n\t\t\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\t\t\tstructure.getXsd(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\tuserId, portletDataContext.getScopeGroupId(), parentStructureId,\n\t\t\t\tstructure.getClassNameId(), structure.getStructureKey(),\n\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\tstructure.getXsd(), structure.getStorageType(),\n\t\t\t\tstructure.getType(), serviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(structure, importedStructure);\n\n\t\tstructureKeys.put(\n\t\t\tstructure.getStructureKey(), importedStructure.getStructureKey());\n\t}","id":7197,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMStructure structure)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(structure);\n\n\t\tlong userId = portletDataContext.getUserId(structure.getUserUuid());\n\n\t\tif (structure.getParentStructureId() !=\n\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID) {\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, structure, DDMStructure.class,\n\t\t\t\tstructure.getParentStructureId());\n\t\t}\n\n\t\tMap<Long, Long> structureIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tlong parentStructureId = MapUtil.getLong(\n\t\t\tstructureIds, structure.getParentStructureId(),\n\t\t\tstructure.getParentStructureId());\n\n\t\tMap<String, String> structureKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tstructure);\n\n\t\tDDMStructure importedStructure = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tElement element =\n\t\t\t\tportletDataContext.getImportDataStagedModelElement(structure);\n\n\t\t\tboolean preloaded = GetterUtil.getBoolean(\n\t\t\t\telement.attributeValue(\"preloaded\"));\n\n\t\t\tDDMStructure existingStructure = null;\n\n\t\t\tif (!preloaded) {\n\t\t\t\texistingStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\t\t\tstructure.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\t\t\tportletDataContext.getScopeGroupId(),\n\t\t\t\t\tstructure.getClassNameId(), structure.getStructureKey());\n\t\t\t}\n\n\t\t\tif (existingStructure == null) {\n\t\t\t\tserviceContext.setUuid(structure.getUuid());\n\n\t\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentStructureId, structure.getClassNameId(),\n\t\t\t\t\tstructure.getStructureKey(), structure.getNameMap(),\n\t\t\t\t\tstructure.getDescriptionMap(), structure.getXsd(),\n\t\t\t\t\tstructure.getStorageType(), structure.getType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.updateStructure(\n\t\t\t\t\t\texistingStructure.getStructureId(), parentStructureId,\n\t\t\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\t\t\tstructure.getXsd(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\tuserId, portletDataContext.getScopeGroupId(), parentStructureId,\n\t\t\t\tstructure.getClassNameId(), structure.getStructureKey(),\n\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\tstructure.getXsd(), structure.getStorageType(),\n\t\t\t\tstructure.getType(), serviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(structure, importedStructure);\n\n\t\tstructureKeys.put(\n\t\t\tstructure.getStructureKey(), importedStructure.getStructureKey());\n\t}","commit_id":"6bccc1653f06f38626be219a2572ef78c1e1f736","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doExportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMTemplate template)\n\t\tthrows Exception {\n\n\t\tElement templateElement = portletDataContext.getExportDataElement(\n\t\t\ttemplate);\n\n\t\tDDMStructure structure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\ttemplate.getClassPK());\n\n\t\tif (structure != null) {\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, template, structure,\n\t\t\t\tPortletDataContext.REFERENCE_TYPE_STRONG);\n\t\t}\n\n\t\tif (template.isSmallImage()) {\n\t\t\tImage smallImage = ImageLocalServiceUtil.fetchImage(\n\t\t\t\ttemplate.getSmallImageId());\n\n\t\t\tif (Validator.isNotNull(template.getSmallImageURL())) {\n\t\t\t\tString smallImageURL =\n\t\t\t\t\tExportImportHelperUtil.replaceExportContentReferences(\n\t\t\t\t\t\tportletDataContext, template, templateElement,\n\t\t\t\t\t\ttemplate.getSmallImageURL().concat(StringPool.SPACE),\n\t\t\t\t\t\ttrue);\n\n\t\t\t\ttemplate.setSmallImageURL(smallImageURL);\n\t\t\t}\n\t\t\telse if (smallImage != null) {\n\t\t\t\tString smallImagePath = ExportImportPathUtil.getModelPath(\n\t\t\t\t\ttemplate,\n\t\t\t\t\tsmallImage.getImageId() + StringPool.PERIOD +\n\t\t\t\t\t\ttemplate.getSmallImageType());\n\n\t\t\t\ttemplateElement.addAttribute(\n\t\t\t\t\t\"small-image-path\", smallImagePath);\n\n\t\t\t\ttemplate.setSmallImageType(smallImage.getType());\n\n\t\t\t\tportletDataContext.addZipEntry(\n\t\t\t\t\tsmallImagePath, smallImage.getTextObj());\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tDDMPortletDataHandler.NAMESPACE, \"referenced-content\")) {\n\n\t\t\tString content =\n\t\t\t\tExportImportHelperUtil.replaceExportContentReferences(\n\t\t\t\t\tportletDataContext, template, templateElement,\n\t\t\t\t\ttemplate.getScript(), true);\n\n\t\t\ttemplate.setScript(content);\n\t\t}\n\n\t\tportletDataContext.addClassedModel(\n\t\t\ttemplateElement, ExportImportPathUtil.getModelPath(template),\n\t\t\ttemplate);\n\t}","id":7198,"modified_method":"@Override\n\tprotected void doExportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMTemplate template)\n\t\tthrows Exception {\n\n\t\tElement templateElement = portletDataContext.getExportDataElement(\n\t\t\ttemplate);\n\n\t\tDDMStructure structure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\ttemplate.getClassPK());\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, template, structure,\n\t\t\tPortletDataContext.REFERENCE_TYPE_STRONG);\n\n\t\tif (template.isSmallImage()) {\n\t\t\tImage smallImage = ImageLocalServiceUtil.fetchImage(\n\t\t\t\ttemplate.getSmallImageId());\n\n\t\t\tif (Validator.isNotNull(template.getSmallImageURL())) {\n\t\t\t\tString smallImageURL =\n\t\t\t\t\tExportImportHelperUtil.replaceExportContentReferences(\n\t\t\t\t\t\tportletDataContext, template, templateElement,\n\t\t\t\t\t\ttemplate.getSmallImageURL().concat(StringPool.SPACE),\n\t\t\t\t\t\ttrue);\n\n\t\t\t\ttemplate.setSmallImageURL(smallImageURL);\n\t\t\t}\n\t\t\telse if (smallImage != null) {\n\t\t\t\tString smallImagePath = ExportImportPathUtil.getModelPath(\n\t\t\t\t\ttemplate,\n\t\t\t\t\tsmallImage.getImageId() + StringPool.PERIOD +\n\t\t\t\t\t\ttemplate.getSmallImageType());\n\n\t\t\t\ttemplateElement.addAttribute(\n\t\t\t\t\t\"small-image-path\", smallImagePath);\n\n\t\t\t\ttemplate.setSmallImageType(smallImage.getType());\n\n\t\t\t\tportletDataContext.addZipEntry(\n\t\t\t\t\tsmallImagePath, smallImage.getTextObj());\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tDDMPortletDataHandler.NAMESPACE, \"referenced-content\")) {\n\n\t\t\tString content =\n\t\t\t\tExportImportHelperUtil.replaceExportContentReferences(\n\t\t\t\t\tportletDataContext, template, templateElement,\n\t\t\t\t\ttemplate.getScript(), true);\n\n\t\t\ttemplate.setScript(content);\n\t\t}\n\n\t\tportletDataContext.addClassedModel(\n\t\t\ttemplateElement, ExportImportPathUtil.getModelPath(template),\n\t\t\ttemplate);\n\t}","commit_id":"6bccc1653f06f38626be219a2572ef78c1e1f736","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMTemplate template)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(template.getUserUuid());\n\n\t\tlong classPK = template.getClassPK();\n\n\t\tElement structureElement = portletDataContext.getReferenceDataElement(\n\t\t\ttemplate, DDMStructure.class, classPK);\n\n\t\tif (structureElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, structureElement);\n\n\t\t\tMap<Long, Long> structureIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tclassPK = MapUtil.getLong(structureIds, classPK, classPK);\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (template.isSmallImage()) {\n\t\t\t\tElement element =\n\t\t\t\t\tportletDataContext.getImportDataStagedModelElement(\n\t\t\t\t\t\ttemplate);\n\n\t\t\t\tString smallImagePath = element.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(template.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, element,\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), true);\n\n\t\t\t\t\ttemplate.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\ttemplate.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(template);\n\n\t\t\tDDMTemplate importedTemplate = null;\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tDDMTemplate existingTemplate =\n\t\t\t\t\tDDMTemplateLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\t\t\ttemplate.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tif (existingTemplate == null) {\n\t\t\t\t\tserviceContext.setUuid(template.getUuid());\n\n\t\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedTemplate =\n\t\t\t\t\t\tDDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\t\t\t\texistingTemplate.getTemplateId(),\n\t\t\t\t\t\t\ttemplate.getClassPK(), template.getNameMap(),\n\t\t\t\t\t\t\ttemplate.getDescriptionMap(), template.getType(),\n\t\t\t\t\t\t\ttemplate.getMode(), template.getLanguage(),\n\t\t\t\t\t\t\ttemplate.getScript(), template.isCacheable(),\n\t\t\t\t\t\t\ttemplate.isSmallImage(),\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), smallFile,\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(template, importedTemplate);\n\n\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\tddmTemplateKeys.put(\n\t\t\t\ttemplate.getTemplateKey(), importedTemplate.getTemplateKey());\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","id":7199,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMTemplate template)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(template.getUserUuid());\n\n\t\tlong classPK = template.getClassPK();\n\n\t\tif (classPK > 0) {\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, template, DDMStructure.class, classPK);\n\n\t\t\tMap<Long, Long> structureIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tclassPK = MapUtil.getLong(structureIds, classPK, classPK);\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (template.isSmallImage()) {\n\t\t\t\tElement element =\n\t\t\t\t\tportletDataContext.getImportDataStagedModelElement(\n\t\t\t\t\t\ttemplate);\n\n\t\t\t\tString smallImagePath = element.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(template.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, element,\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), true);\n\n\t\t\t\t\ttemplate.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\ttemplate.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(template);\n\n\t\t\tDDMTemplate importedTemplate = null;\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tDDMTemplate existingTemplate =\n\t\t\t\t\tDDMTemplateLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\t\t\ttemplate.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tif (existingTemplate == null) {\n\t\t\t\t\tserviceContext.setUuid(template.getUuid());\n\n\t\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedTemplate =\n\t\t\t\t\t\tDDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\t\t\t\texistingTemplate.getTemplateId(),\n\t\t\t\t\t\t\ttemplate.getClassPK(), template.getNameMap(),\n\t\t\t\t\t\t\ttemplate.getDescriptionMap(), template.getType(),\n\t\t\t\t\t\t\ttemplate.getMode(), template.getLanguage(),\n\t\t\t\t\t\t\ttemplate.getScript(), template.isCacheable(),\n\t\t\t\t\t\t\ttemplate.isSmallImage(),\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), smallFile,\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(template, importedTemplate);\n\n\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\tddmTemplateKeys.put(\n\t\t\t\ttemplate.getTemplateKey(), importedTemplate.getTemplateKey());\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","commit_id":"6bccc1653f06f38626be219a2572ef78c1e1f736","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, FileEntry fileEntry)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(fileEntry.getUserUuid());\n\n\t\tString path = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, FileEntry.class.getName(),\n\t\t\tfileEntry.getFileEntryId());\n\n\t\tElement fileEntryElement =\n\t\t\tportletDataContext.getImportDataElement(\n\t\t\t\tFileEntry.class.getSimpleName(), \"path\", path);\n\n\t\tElement referenceDataElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfileEntryElement, Repository.class,\n\t\t\t\tfileEntry.getRepositoryId());\n\n\t\tif (referenceDataElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, referenceDataElement);\n\t\t}\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, fileEntry, Folder.class,\n\t\t\t\tfileEntry.getFolderId());\n\t\t}\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, fileEntry.getFolderId(), fileEntry.getFolderId());\n\n\t\tlong[] assetCategoryIds = portletDataContext.getAssetCategoryIds(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\tString[] assetTagNames = portletDataContext.getAssetTagNames(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfileEntry, DLFileEntry.class);\n\n\t\tserviceContext.setAttribute(\n\t\t\t\"sourceFileName\", \"A.\" + fileEntry.getExtension());\n\t\tserviceContext.setUserId(userId);\n\n\t\tString binPath = fileEntryElement.attributeValue(\"bin-path\");\n\n\t\tInputStream is = null;\n\n\t\tif (Validator.isNull(binPath) &&\n\t\t\tportletDataContext.isPerformDirectBinaryImport()) {\n\n\t\t\ttry {\n\t\t\t\tis = FileEntryUtil.getContentStream(fileEntry);\n\t\t\t}\n\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tis = portletDataContext.getZipEntryAsInputStream(binPath);\n\t\t}\n\n\t\tif (is == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No file found for file entry \" +\n\t\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\timportMetaData(\n\t\t\tportletDataContext, fileEntryElement, fileEntry, serviceContext);\n\n\t\tFileEntry importedFileEntry = null;\n\n\t\tString titleWithExtension = DLUtil.getTitleWithExtension(fileEntry);\n\t\tString extension = fileEntry.getExtension();\n\n\t\tString periodAndExtension = StringPool.PERIOD.concat(extension);\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tFileEntry existingFileEntry = FileEntryUtil.fetchByUUID_R(\n\t\t\t\tfileEntry.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tFileVersion fileVersion = fileEntry.getFileVersion();\n\n\t\t\tif (existingFileEntry == null) {\n\t\t\t\tString fileEntryTitle = fileEntry.getTitle();\n\n\t\t\t\tFileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\tif (existingTitleFileEntry != null) {\n\t\t\t\t\tif ((fileEntry.getGroupId() ==\n\t\t\t\t\t\t\tportletDataContext.getSourceGroupId()) &&\n\t\t\t\t\t\tportletDataContext.\n\t\t\t\t\t\t\tisDataStrategyMirrorWithOverwriting()) {\n\n\t\t\t\t\t\tDLAppLocalServiceUtil.deleteFileEntry(\n\t\t\t\t\t\t\texistingTitleFileEntry.getFileEntryId());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tboolean titleHasExtension = false;\n\n\t\t\t\t\t\tif (fileEntryTitle.endsWith(periodAndExtension)) {\n\t\t\t\t\t\t\tfileEntryTitle = FileUtil.stripExtension(\n\t\t\t\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\t\t\t\ttitleHasExtension = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (int i = 1;; i++) {\n\t\t\t\t\t\t\tfileEntryTitle += StringPool.SPACE + i;\n\n\t\t\t\t\t\t\ttitleWithExtension =\n\t\t\t\t\t\t\t\tfileEntryTitle + periodAndExtension;\n\n\t\t\t\t\t\t\texistingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\t\t\t\ttitleWithExtension);\n\n\t\t\t\t\t\t\tif (existingTitleFileEntry == null) {\n\t\t\t\t\t\t\t\tif (titleHasExtension) {\n\t\t\t\t\t\t\t\t\tfileEntryTitle += periodAndExtension;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"fileVersionUuid\", fileVersion.getUuid());\n\t\t\t\tserviceContext.setUuid(fileEntry.getUuid());\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(), fileEntryTitle,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\n\t\t\t\tif (fileEntry.isInTrash()) {\n\t\t\t\t\timportedFileEntry = DLAppServiceUtil.moveFileEntryToTrash(\n\t\t\t\t\t\timportedFileEntry.getFileEntryId());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFileVersion latestExistingFileVersion =\n\t\t\t\t\texistingFileEntry.getLatestFileVersion();\n\n\t\t\t\tboolean indexEnabled = serviceContext.isIndexingEnabled();\n\n\t\t\t\ttry {\n\t\t\t\t\tserviceContext.setIndexingEnabled(false);\n\n\t\t\t\t\tif (!fileVersion.getUuid().equals(\n\t\t\t\t\t\t\tlatestExistingFileVersion.getUuid())) {\n\n\t\t\t\t\t\tDLFileVersion alreadyExistingFileVersion =\n\t\t\t\t\t\t\tDLFileVersionLocalServiceUtil.\n\t\t\t\t\t\t\t\tgetFileVersionByUuidAndGroupId(\n\t\t\t\t\t\t\t\t\tfileVersion.getUuid(),\n\t\t\t\t\t\t\t\t\texistingFileEntry.getGroupId());\n\n\t\t\t\t\t\tif (alreadyExistingFileVersion != null) {\n\t\t\t\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\t\t\t\"existingDLFileVersionId\",\n\t\t\t\t\t\t\t\talreadyExistingFileVersion.getFileVersionId());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tserviceContext.setUuid(fileVersion.getUuid());\n\n\t\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\t\tDLAppLocalServiceUtil.updateFileEntry(\n\t\t\t\t\t\t\t\tuserId, existingFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(), fileEntry.getMimeType(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(),\n\t\t\t\t\t\t\t\tfileEntry.getDescription(), null, false, is,\n\t\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tDLAppLocalServiceUtil.updateAsset(\n\t\t\t\t\t\t\tuserId, existingFileEntry,\n\t\t\t\t\t\t\tlatestExistingFileVersion, assetCategoryIds,\n\t\t\t\t\t\t\tassetTagNames, null);\n\n\t\t\t\t\t\timportedFileEntry = existingFileEntry;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry.getFolderId() != folderId) {\n\t\t\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.moveFileEntry(\n\t\t\t\t\t\t\tuserId, importedFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\tfolderId, serviceContext);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry instanceof LiferayFileEntry) {\n\t\t\t\t\t\tLiferayFileEntry liferayFileEntry =\n\t\t\t\t\t\t\t(LiferayFileEntry)importedFileEntry;\n\n\t\t\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\t\t\tindexer.reindex(liferayFileEntry.getModel());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tserviceContext.setIndexingEnabled(indexEnabled);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(),\n\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(), null, is,\n\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateFileException dfe) {\n\t\t\t\tString title = fileEntry.getTitle();\n\n\t\t\t\tString[] titleParts = title.split(\"\\\\.\", 2);\n\n\t\t\t\ttitle = titleParts[0] + StringUtil.randomString();\n\n\t\t\t\tif (titleParts.length > 1) {\n\t\t\t\t\ttitle += StringPool.PERIOD + titleParts[1];\n\t\t\t\t}\n\n\t\t\t\tif (!title.endsWith(periodAndExtension)) {\n\t\t\t\t\ttitle += periodAndExtension;\n\t\t\t\t}\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitle, fileEntry.getMimeType(), title,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tDLPortletDataHandler.NAMESPACE, \"previews-and-thumbnails\")) {\n\n\t\t\tDLProcessorRegistryUtil.importGeneratedFiles(\n\t\t\t\tportletDataContext, fileEntry, importedFileEntry,\n\t\t\t\tfileEntryElement);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfileEntry, importedFileEntry, DLFileEntry.class);\n\n\t\tMap<Long, Long> fileEntryIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFileEntry.class);\n\n\t\tfileEntryIds.put(\n\t\t\tfileEntry.getFileEntryId(), importedFileEntry.getFileEntryId());\n\t}","id":7200,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, FileEntry fileEntry)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(fileEntry.getUserUuid());\n\n\t\tif (!fileEntry.isDefaultRepository()) {\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, fileEntry, Repository.class,\n\t\t\t\tfileEntry.getRepositoryId());\n\t\t}\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, fileEntry, Folder.class,\n\t\t\t\tfileEntry.getFolderId());\n\t\t}\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, fileEntry.getFolderId(), fileEntry.getFolderId());\n\n\t\tlong[] assetCategoryIds = portletDataContext.getAssetCategoryIds(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\tString[] assetTagNames = portletDataContext.getAssetTagNames(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfileEntry, DLFileEntry.class);\n\n\t\tserviceContext.setAttribute(\n\t\t\t\"sourceFileName\", \"A.\" + fileEntry.getExtension());\n\t\tserviceContext.setUserId(userId);\n\n\t\tString path = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, FileEntry.class.getName(),\n\t\t\tfileEntry.getFileEntryId());\n\n\t\tElement fileEntryElement =\n\t\t\tportletDataContext.getImportDataElement(\n\t\t\t\tFileEntry.class.getSimpleName(), \"path\", path);\n\n\t\tString binPath = fileEntryElement.attributeValue(\"bin-path\");\n\n\t\tInputStream is = null;\n\n\t\tif (Validator.isNull(binPath) &&\n\t\t\tportletDataContext.isPerformDirectBinaryImport()) {\n\n\t\t\ttry {\n\t\t\t\tis = FileEntryUtil.getContentStream(fileEntry);\n\t\t\t}\n\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tis = portletDataContext.getZipEntryAsInputStream(binPath);\n\t\t}\n\n\t\tif (is == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No file found for file entry \" +\n\t\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\timportMetaData(\n\t\t\tportletDataContext, fileEntryElement, fileEntry, serviceContext);\n\n\t\tFileEntry importedFileEntry = null;\n\n\t\tString titleWithExtension = DLUtil.getTitleWithExtension(fileEntry);\n\t\tString extension = fileEntry.getExtension();\n\n\t\tString periodAndExtension = StringPool.PERIOD.concat(extension);\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tFileEntry existingFileEntry = FileEntryUtil.fetchByUUID_R(\n\t\t\t\tfileEntry.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tFileVersion fileVersion = fileEntry.getFileVersion();\n\n\t\t\tif (existingFileEntry == null) {\n\t\t\t\tString fileEntryTitle = fileEntry.getTitle();\n\n\t\t\t\tFileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\tif (existingTitleFileEntry != null) {\n\t\t\t\t\tif ((fileEntry.getGroupId() ==\n\t\t\t\t\t\t\tportletDataContext.getSourceGroupId()) &&\n\t\t\t\t\t\tportletDataContext.\n\t\t\t\t\t\t\tisDataStrategyMirrorWithOverwriting()) {\n\n\t\t\t\t\t\tDLAppLocalServiceUtil.deleteFileEntry(\n\t\t\t\t\t\t\texistingTitleFileEntry.getFileEntryId());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tboolean titleHasExtension = false;\n\n\t\t\t\t\t\tif (fileEntryTitle.endsWith(periodAndExtension)) {\n\t\t\t\t\t\t\tfileEntryTitle = FileUtil.stripExtension(\n\t\t\t\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\t\t\t\ttitleHasExtension = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (int i = 1;; i++) {\n\t\t\t\t\t\t\tfileEntryTitle += StringPool.SPACE + i;\n\n\t\t\t\t\t\t\ttitleWithExtension =\n\t\t\t\t\t\t\t\tfileEntryTitle + periodAndExtension;\n\n\t\t\t\t\t\t\texistingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\t\t\t\ttitleWithExtension);\n\n\t\t\t\t\t\t\tif (existingTitleFileEntry == null) {\n\t\t\t\t\t\t\t\tif (titleHasExtension) {\n\t\t\t\t\t\t\t\t\tfileEntryTitle += periodAndExtension;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"fileVersionUuid\", fileVersion.getUuid());\n\t\t\t\tserviceContext.setUuid(fileEntry.getUuid());\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(), fileEntryTitle,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\n\t\t\t\tif (fileEntry.isInTrash()) {\n\t\t\t\t\timportedFileEntry = DLAppServiceUtil.moveFileEntryToTrash(\n\t\t\t\t\t\timportedFileEntry.getFileEntryId());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFileVersion latestExistingFileVersion =\n\t\t\t\t\texistingFileEntry.getLatestFileVersion();\n\n\t\t\t\tboolean indexEnabled = serviceContext.isIndexingEnabled();\n\n\t\t\t\ttry {\n\t\t\t\t\tserviceContext.setIndexingEnabled(false);\n\n\t\t\t\t\tif (!fileVersion.getUuid().equals(\n\t\t\t\t\t\t\tlatestExistingFileVersion.getUuid())) {\n\n\t\t\t\t\t\tDLFileVersion alreadyExistingFileVersion =\n\t\t\t\t\t\t\tDLFileVersionLocalServiceUtil.\n\t\t\t\t\t\t\t\tgetFileVersionByUuidAndGroupId(\n\t\t\t\t\t\t\t\t\tfileVersion.getUuid(),\n\t\t\t\t\t\t\t\t\texistingFileEntry.getGroupId());\n\n\t\t\t\t\t\tif (alreadyExistingFileVersion != null) {\n\t\t\t\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\t\t\t\"existingDLFileVersionId\",\n\t\t\t\t\t\t\t\talreadyExistingFileVersion.getFileVersionId());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tserviceContext.setUuid(fileVersion.getUuid());\n\n\t\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\t\tDLAppLocalServiceUtil.updateFileEntry(\n\t\t\t\t\t\t\t\tuserId, existingFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(), fileEntry.getMimeType(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(),\n\t\t\t\t\t\t\t\tfileEntry.getDescription(), null, false, is,\n\t\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tDLAppLocalServiceUtil.updateAsset(\n\t\t\t\t\t\t\tuserId, existingFileEntry,\n\t\t\t\t\t\t\tlatestExistingFileVersion, assetCategoryIds,\n\t\t\t\t\t\t\tassetTagNames, null);\n\n\t\t\t\t\t\timportedFileEntry = existingFileEntry;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry.getFolderId() != folderId) {\n\t\t\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.moveFileEntry(\n\t\t\t\t\t\t\tuserId, importedFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\tfolderId, serviceContext);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry instanceof LiferayFileEntry) {\n\t\t\t\t\t\tLiferayFileEntry liferayFileEntry =\n\t\t\t\t\t\t\t(LiferayFileEntry)importedFileEntry;\n\n\t\t\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\t\t\tindexer.reindex(liferayFileEntry.getModel());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tserviceContext.setIndexingEnabled(indexEnabled);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(),\n\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(), null, is,\n\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateFileException dfe) {\n\t\t\t\tString title = fileEntry.getTitle();\n\n\t\t\t\tString[] titleParts = title.split(\"\\\\.\", 2);\n\n\t\t\t\ttitle = titleParts[0] + StringUtil.randomString();\n\n\t\t\t\tif (titleParts.length > 1) {\n\t\t\t\t\ttitle += StringPool.PERIOD + titleParts[1];\n\t\t\t\t}\n\n\t\t\t\tif (!title.endsWith(periodAndExtension)) {\n\t\t\t\t\ttitle += periodAndExtension;\n\t\t\t\t}\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitle, fileEntry.getMimeType(), title,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tDLPortletDataHandler.NAMESPACE, \"previews-and-thumbnails\")) {\n\n\t\t\tDLProcessorRegistryUtil.importGeneratedFiles(\n\t\t\t\tportletDataContext, fileEntry, importedFileEntry,\n\t\t\t\tfileEntryElement);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfileEntry, importedFileEntry, DLFileEntry.class);\n\n\t\tMap<Long, Long> fileEntryIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFileEntry.class);\n\n\t\tfileEntryIds.put(\n\t\t\tfileEntry.getFileEntryId(), importedFileEntry.getFileEntryId());\n\t}","commit_id":"6bccc1653f06f38626be219a2572ef78c1e1f736","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, JournalArticle article)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(article);\n\n\t\tlong userId = portletDataContext.getUserId(article.getUserUuid());\n\n\t\tJournalCreationStrategy creationStrategy =\n\t\t\tJournalCreationStrategyFactory.getInstance();\n\n\t\tlong authorId = creationStrategy.getAuthorUserId(\n\t\t\tportletDataContext, article);\n\n\t\tif (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {\n\t\t\tuserId = authorId;\n\t\t}\n\n\t\tUser user = UserLocalServiceUtil.getUser(userId);\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalFolder.class);\n\n\t\tif (article.getFolderId() !=\n\t\t\t\tJournalFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tElement folderElement = portletDataContext.getReferenceDataElement(\n\t\t\t\tarticle, JournalFolder.class, article.getFolderId());\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, folderElement);\n\t\t}\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, article.getFolderId(), article.getFolderId());\n\n\t\tString articleId = article.getArticleId();\n\n\t\tboolean autoArticleId = false;\n\n\t\tif (Validator.isNumber(articleId) ||\n\t\t\t(JournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\tportletDataContext.getScopeGroupId(), articleId,\n\t\t\t\tJournalArticleConstants.VERSION_DEFAULT) != null)) {\n\n\t\t\tautoArticleId = true;\n\t\t}\n\n\t\tMap<String, String> articleIds =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\tString newArticleId = articleIds.get(articleId);\n\n\t\tif (Validator.isNotNull(newArticleId)) {\n\n\t\t\t// A sibling of a different version was already assigned a new\n\t\t\t// article id\n\n\t\t\tarticleId = newArticleId;\n\t\t\tautoArticleId = false;\n\t\t}\n\n\t\tString content = article.getContent();\n\n\t\tElement articleElement =\n\t\t\tportletDataContext.getImportDataStagedModelElement(article);\n\n\t\tcontent = ExportImportHelperUtil.replaceImportContentReferences(\n\t\t\tportletDataContext, articleElement, content, true);\n\n\t\tarticle.setContent(content);\n\n\t\tString newContent = creationStrategy.getTransformedContent(\n\t\t\tportletDataContext, article);\n\n\t\tif (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {\n\t\t\tarticle.setContent(newContent);\n\t\t}\n\n\t\tDate displayDate = article.getDisplayDate();\n\n\t\tint displayDateMonth = 0;\n\t\tint displayDateDay = 0;\n\t\tint displayDateYear = 0;\n\t\tint displayDateHour = 0;\n\t\tint displayDateMinute = 0;\n\n\t\tif (displayDate != null) {\n\t\t\tCalendar displayCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\tdisplayCal.setTime(displayDate);\n\n\t\t\tdisplayDateMonth = displayCal.get(Calendar.MONTH);\n\t\t\tdisplayDateDay = displayCal.get(Calendar.DATE);\n\t\t\tdisplayDateYear = displayCal.get(Calendar.YEAR);\n\t\t\tdisplayDateHour = displayCal.get(Calendar.HOUR);\n\t\t\tdisplayDateMinute = displayCal.get(Calendar.MINUTE);\n\n\t\t\tif (displayCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\tdisplayDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate expirationDate = article.getExpirationDate();\n\n\t\tint expirationDateMonth = 0;\n\t\tint expirationDateDay = 0;\n\t\tint expirationDateYear = 0;\n\t\tint expirationDateHour = 0;\n\t\tint expirationDateMinute = 0;\n\t\tboolean neverExpire = true;\n\n\t\tif (expirationDate != null) {\n\t\t\tCalendar expirationCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\texpirationCal.setTime(expirationDate);\n\n\t\t\texpirationDateMonth = expirationCal.get(Calendar.MONTH);\n\t\t\texpirationDateDay = expirationCal.get(Calendar.DATE);\n\t\t\texpirationDateYear = expirationCal.get(Calendar.YEAR);\n\t\t\texpirationDateHour = expirationCal.get(Calendar.HOUR);\n\t\t\texpirationDateMinute = expirationCal.get(Calendar.MINUTE);\n\t\t\tneverExpire = false;\n\n\t\t\tif (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\texpirationDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate reviewDate = article.getReviewDate();\n\n\t\tint reviewDateMonth = 0;\n\t\tint reviewDateDay = 0;\n\t\tint reviewDateYear = 0;\n\t\tint reviewDateHour = 0;\n\t\tint reviewDateMinute = 0;\n\t\tboolean neverReview = true;\n\n\t\tif (reviewDate != null) {\n\t\t\tCalendar reviewCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\treviewCal.setTime(reviewDate);\n\n\t\t\treviewDateMonth = reviewCal.get(Calendar.MONTH);\n\t\t\treviewDateDay = reviewCal.get(Calendar.DATE);\n\t\t\treviewDateYear = reviewCal.get(Calendar.YEAR);\n\t\t\treviewDateHour = reviewCal.get(Calendar.HOUR);\n\t\t\treviewDateMinute = reviewCal.get(Calendar.MINUTE);\n\t\t\tneverReview = false;\n\n\t\t\tif (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\treviewDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, article, DDMStructure.class);\n\n\t\tMap<String, String> ddmStructureKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\tString parentDDMStructureKey = MapUtil.getString(\n\t\t\tddmStructureKeys, article.getStructureId(),\n\t\t\tarticle.getStructureId());\n\n\t\tMap<String, Long> ddmStructureIds =\n\t\t\t(Map<String, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tlong ddmStructureId = 0;\n\n\t\tif (article.getClassNameId() != 0) {\n\t\t\tddmStructureId = ddmStructureIds.get(article.getClassPK());\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, article, DDMTemplate.class);\n\n\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\tString parentDDMTemplateKey = MapUtil.getString(\n\t\t\tddmTemplateKeys, article.getTemplateId(), article.getTemplateId());\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (article.isSmallImage()) {\n\t\t\t\tString smallImagePath = articleElement.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(article.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, articleElement,\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), true);\n\n\t\t\t\t\tarticle.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\tarticle.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\t\tList<Element> imagesElements =\n\t\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\t\tarticle, Image.class);\n\n\t\t\tfor (Element imageElement : imagesElements) {\n\t\t\t\tString imagePath = imageElement.attributeValue(\"path\");\n\n\t\t\t\tString fileName = imageElement.attributeValue(\"file-name\");\n\n\t\t\t\timages.put(\n\t\t\t\t\tfileName,\n\t\t\t\t\tportletDataContext.getZipEntryAsByteArray(imagePath));\n\t\t\t}\n\n\t\t\tString articleURL = null;\n\n\t\t\tboolean addGroupPermissions = creationStrategy.addGroupPermissions(\n\t\t\t\tportletDataContext, article);\n\t\t\tboolean addGuestPermissions = creationStrategy.addGuestPermissions(\n\t\t\t\tportletDataContext, article);\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(article);\n\n\t\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\n\t\t\tif ((article.getStatus() != WorkflowConstants.STATUS_APPROVED) &&\n\t\t\t\t(article.getStatus() != WorkflowConstants.STATUS_SCHEDULED)) {\n\n\t\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t\t}\n\n\t\t\tJournalArticle importedArticle = null;\n\n\t\t\tString articleResourceUuid = articleElement.attributeValue(\n\t\t\t\t\"article-resource-uuid\");\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tJournalArticleResource articleResource =\n\t\t\t\t\tJournalArticleResourceLocalServiceUtil.\n\t\t\t\t\t\tfetchJournalArticleResourceByUuidAndGroupId(\n\t\t\t\t\t\t\tarticleResourceUuid,\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tserviceContext.setUuid(articleResourceUuid);\n\t\t\t\tserviceContext.setAttribute(\"urlTitle\", article.getUrlTitle());\n\n\t\t\t\tJournalArticle existingArticle = null;\n\n\t\t\t\tif (articleResource != null) {\n\t\t\t\t\texistingArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.fetchLatestArticle(\n\t\t\t\t\t\t\tarticleResource.getResourcePrimKey(),\n\t\t\t\t\t\t\tWorkflowConstants.STATUS_ANY, false);\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\texistingArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), newArticleId,\n\t\t\t\t\t\t\tarticle.getVersion());\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\t\t\tfolderId, article.getClassNameId(), ddmStructureId,\n\t\t\t\t\t\t\tarticleId, autoArticleId, article.getVersion(),\n\t\t\t\t\t\t\tarticle.getTitleMap(), article.getDescriptionMap(),\n\t\t\t\t\t\t\tarticle.getContent(), article.getType(),\n\t\t\t\t\t\t\tparentDDMStructureKey, parentDDMTemplateKey,\n\t\t\t\t\t\t\tarticle.getLayoutUuid(), displayDateMonth,\n\t\t\t\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\t\t\t\tdisplayDateMinute, expirationDateMonth,\n\t\t\t\t\t\t\texpirationDateDay, expirationDateYear,\n\t\t\t\t\t\t\texpirationDateHour, expirationDateMinute,\n\t\t\t\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay,\n\t\t\t\t\t\t\treviewDateYear, reviewDateHour, reviewDateMinute,\n\t\t\t\t\t\t\tneverReview, article.isIndexable(),\n\t\t\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.updateArticle(\n\t\t\t\t\t\t\tuserId, existingArticle.getGroupId(), folderId,\n\t\t\t\t\t\t\texistingArticle.getArticleId(),\n\t\t\t\t\t\t\tarticle.getVersion(), article.getTitleMap(),\n\t\t\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\t\t\tdisplayDateHour, displayDateMinute,\n\t\t\t\t\t\t\texpirationDateMonth, expirationDateDay,\n\t\t\t\t\t\t\texpirationDateYear, expirationDateHour,\n\t\t\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\t\t\treviewDateMinute, neverReview,\n\t\t\t\t\t\t\tarticle.isIndexable(), article.isSmallImage(),\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), smallFile, images,\n\t\t\t\t\t\t\tarticleURL, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tarticle.getClassNameId(), ddmStructureId, articleId,\n\t\t\t\t\tautoArticleId, article.getVersion(), article.getTitleMap(),\n\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(article, importedArticle);\n\n\t\t\tif (Validator.isNull(newArticleId)) {\n\t\t\t\tarticleIds.put(\n\t\t\t\t\tarticle.getArticleId(), importedArticle.getArticleId());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","id":7201,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, JournalArticle article)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(article);\n\n\t\tlong userId = portletDataContext.getUserId(article.getUserUuid());\n\n\t\tJournalCreationStrategy creationStrategy =\n\t\t\tJournalCreationStrategyFactory.getInstance();\n\n\t\tlong authorId = creationStrategy.getAuthorUserId(\n\t\t\tportletDataContext, article);\n\n\t\tif (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {\n\t\t\tuserId = authorId;\n\t\t}\n\n\t\tUser user = UserLocalServiceUtil.getUser(userId);\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalFolder.class);\n\n\t\tif (article.getFolderId() !=\n\t\t\t\tJournalFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, article, JournalFolder.class,\n\t\t\t\tarticle.getFolderId());\n\t\t}\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, article.getFolderId(), article.getFolderId());\n\n\t\tString articleId = article.getArticleId();\n\n\t\tboolean autoArticleId = false;\n\n\t\tif (Validator.isNumber(articleId) ||\n\t\t\t(JournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\tportletDataContext.getScopeGroupId(), articleId,\n\t\t\t\tJournalArticleConstants.VERSION_DEFAULT) != null)) {\n\n\t\t\tautoArticleId = true;\n\t\t}\n\n\t\tMap<String, String> articleIds =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\tString newArticleId = articleIds.get(articleId);\n\n\t\tif (Validator.isNotNull(newArticleId)) {\n\n\t\t\t// A sibling of a different version was already assigned a new\n\t\t\t// article id\n\n\t\t\tarticleId = newArticleId;\n\t\t\tautoArticleId = false;\n\t\t}\n\n\t\tString content = article.getContent();\n\n\t\tElement articleElement =\n\t\t\tportletDataContext.getImportDataStagedModelElement(article);\n\n\t\tcontent = ExportImportHelperUtil.replaceImportContentReferences(\n\t\t\tportletDataContext, articleElement, content, true);\n\n\t\tarticle.setContent(content);\n\n\t\tString newContent = creationStrategy.getTransformedContent(\n\t\t\tportletDataContext, article);\n\n\t\tif (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {\n\t\t\tarticle.setContent(newContent);\n\t\t}\n\n\t\tDate displayDate = article.getDisplayDate();\n\n\t\tint displayDateMonth = 0;\n\t\tint displayDateDay = 0;\n\t\tint displayDateYear = 0;\n\t\tint displayDateHour = 0;\n\t\tint displayDateMinute = 0;\n\n\t\tif (displayDate != null) {\n\t\t\tCalendar displayCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\tdisplayCal.setTime(displayDate);\n\n\t\t\tdisplayDateMonth = displayCal.get(Calendar.MONTH);\n\t\t\tdisplayDateDay = displayCal.get(Calendar.DATE);\n\t\t\tdisplayDateYear = displayCal.get(Calendar.YEAR);\n\t\t\tdisplayDateHour = displayCal.get(Calendar.HOUR);\n\t\t\tdisplayDateMinute = displayCal.get(Calendar.MINUTE);\n\n\t\t\tif (displayCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\tdisplayDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate expirationDate = article.getExpirationDate();\n\n\t\tint expirationDateMonth = 0;\n\t\tint expirationDateDay = 0;\n\t\tint expirationDateYear = 0;\n\t\tint expirationDateHour = 0;\n\t\tint expirationDateMinute = 0;\n\t\tboolean neverExpire = true;\n\n\t\tif (expirationDate != null) {\n\t\t\tCalendar expirationCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\texpirationCal.setTime(expirationDate);\n\n\t\t\texpirationDateMonth = expirationCal.get(Calendar.MONTH);\n\t\t\texpirationDateDay = expirationCal.get(Calendar.DATE);\n\t\t\texpirationDateYear = expirationCal.get(Calendar.YEAR);\n\t\t\texpirationDateHour = expirationCal.get(Calendar.HOUR);\n\t\t\texpirationDateMinute = expirationCal.get(Calendar.MINUTE);\n\t\t\tneverExpire = false;\n\n\t\t\tif (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\texpirationDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate reviewDate = article.getReviewDate();\n\n\t\tint reviewDateMonth = 0;\n\t\tint reviewDateDay = 0;\n\t\tint reviewDateYear = 0;\n\t\tint reviewDateHour = 0;\n\t\tint reviewDateMinute = 0;\n\t\tboolean neverReview = true;\n\n\t\tif (reviewDate != null) {\n\t\t\tCalendar reviewCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\treviewCal.setTime(reviewDate);\n\n\t\t\treviewDateMonth = reviewCal.get(Calendar.MONTH);\n\t\t\treviewDateDay = reviewCal.get(Calendar.DATE);\n\t\t\treviewDateYear = reviewCal.get(Calendar.YEAR);\n\t\t\treviewDateHour = reviewCal.get(Calendar.HOUR);\n\t\t\treviewDateMinute = reviewCal.get(Calendar.MINUTE);\n\t\t\tneverReview = false;\n\n\t\t\tif (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\treviewDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, article, DDMStructure.class);\n\n\t\tMap<String, String> ddmStructureKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\tString parentDDMStructureKey = MapUtil.getString(\n\t\t\tddmStructureKeys, article.getStructureId(),\n\t\t\tarticle.getStructureId());\n\n\t\tMap<String, Long> ddmStructureIds =\n\t\t\t(Map<String, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tlong ddmStructureId = 0;\n\n\t\tif (article.getClassNameId() != 0) {\n\t\t\tddmStructureId = ddmStructureIds.get(article.getClassPK());\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, article, DDMTemplate.class);\n\n\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\tString parentDDMTemplateKey = MapUtil.getString(\n\t\t\tddmTemplateKeys, article.getTemplateId(), article.getTemplateId());\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (article.isSmallImage()) {\n\t\t\t\tString smallImagePath = articleElement.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(article.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, articleElement,\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), true);\n\n\t\t\t\t\tarticle.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\tarticle.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\t\tList<Element> imagesElements =\n\t\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\t\tarticle, Image.class);\n\n\t\t\tfor (Element imageElement : imagesElements) {\n\t\t\t\tString imagePath = imageElement.attributeValue(\"path\");\n\n\t\t\t\tString fileName = imageElement.attributeValue(\"file-name\");\n\n\t\t\t\timages.put(\n\t\t\t\t\tfileName,\n\t\t\t\t\tportletDataContext.getZipEntryAsByteArray(imagePath));\n\t\t\t}\n\n\t\t\tString articleURL = null;\n\n\t\t\tboolean addGroupPermissions = creationStrategy.addGroupPermissions(\n\t\t\t\tportletDataContext, article);\n\t\t\tboolean addGuestPermissions = creationStrategy.addGuestPermissions(\n\t\t\t\tportletDataContext, article);\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(article);\n\n\t\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\n\t\t\tif ((article.getStatus() != WorkflowConstants.STATUS_APPROVED) &&\n\t\t\t\t(article.getStatus() != WorkflowConstants.STATUS_SCHEDULED)) {\n\n\t\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t\t}\n\n\t\t\tJournalArticle importedArticle = null;\n\n\t\t\tString articleResourceUuid = articleElement.attributeValue(\n\t\t\t\t\"article-resource-uuid\");\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tJournalArticleResource articleResource =\n\t\t\t\t\tJournalArticleResourceLocalServiceUtil.\n\t\t\t\t\t\tfetchJournalArticleResourceByUuidAndGroupId(\n\t\t\t\t\t\t\tarticleResourceUuid,\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tserviceContext.setUuid(articleResourceUuid);\n\t\t\t\tserviceContext.setAttribute(\"urlTitle\", article.getUrlTitle());\n\n\t\t\t\tJournalArticle existingArticle = null;\n\n\t\t\t\tif (articleResource != null) {\n\t\t\t\t\texistingArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.fetchLatestArticle(\n\t\t\t\t\t\t\tarticleResource.getResourcePrimKey(),\n\t\t\t\t\t\t\tWorkflowConstants.STATUS_ANY, false);\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\texistingArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), newArticleId,\n\t\t\t\t\t\t\tarticle.getVersion());\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\t\t\tfolderId, article.getClassNameId(), ddmStructureId,\n\t\t\t\t\t\t\tarticleId, autoArticleId, article.getVersion(),\n\t\t\t\t\t\t\tarticle.getTitleMap(), article.getDescriptionMap(),\n\t\t\t\t\t\t\tarticle.getContent(), article.getType(),\n\t\t\t\t\t\t\tparentDDMStructureKey, parentDDMTemplateKey,\n\t\t\t\t\t\t\tarticle.getLayoutUuid(), displayDateMonth,\n\t\t\t\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\t\t\t\tdisplayDateMinute, expirationDateMonth,\n\t\t\t\t\t\t\texpirationDateDay, expirationDateYear,\n\t\t\t\t\t\t\texpirationDateHour, expirationDateMinute,\n\t\t\t\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay,\n\t\t\t\t\t\t\treviewDateYear, reviewDateHour, reviewDateMinute,\n\t\t\t\t\t\t\tneverReview, article.isIndexable(),\n\t\t\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.updateArticle(\n\t\t\t\t\t\t\tuserId, existingArticle.getGroupId(), folderId,\n\t\t\t\t\t\t\texistingArticle.getArticleId(),\n\t\t\t\t\t\t\tarticle.getVersion(), article.getTitleMap(),\n\t\t\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\t\t\tdisplayDateHour, displayDateMinute,\n\t\t\t\t\t\t\texpirationDateMonth, expirationDateDay,\n\t\t\t\t\t\t\texpirationDateYear, expirationDateHour,\n\t\t\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\t\t\treviewDateMinute, neverReview,\n\t\t\t\t\t\t\tarticle.isIndexable(), article.isSmallImage(),\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), smallFile, images,\n\t\t\t\t\t\t\tarticleURL, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tarticle.getClassNameId(), ddmStructureId, articleId,\n\t\t\t\t\tautoArticleId, article.getVersion(), article.getTitleMap(),\n\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(article, importedArticle);\n\n\t\t\tif (Validator.isNull(newArticleId)) {\n\t\t\t\tarticleIds.put(\n\t\t\t\t\tarticle.getArticleId(), importedArticle.getArticleId());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","commit_id":"6bccc1653f06f38626be219a2572ef78c1e1f736","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, MBThreadFlag threadFlag)\n\t\tthrows Exception {\n\n\t\tElement element = portletDataContext.getImportDataStagedModelElement(\n\t\t\tthreadFlag);\n\n\t\tlong rootMessageId = GetterUtil.getLong(\n\t\t\telement.attributeValue(\"root-message-id\"));\n\n\t\tString rootMessagePath = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, MBMessage.class.getName(), rootMessageId);\n\n\t\tMBMessage rootMessage =\n\t\t\t(MBMessage)portletDataContext.getZipEntryAsObject(rootMessagePath);\n\n\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\tportletDataContext, rootMessage);\n\n\t\tMap<Long, Long> threadIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tMBThread.class);\n\n\t\tlong threadId = MapUtil.getLong(\n\t\t\tthreadIds, threadFlag.getThreadId(), threadFlag.getThreadId());\n\n\t\tMBThread thread = MBThreadLocalServiceUtil.fetchThread(threadId);\n\n\t\tif (thread == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong userId = portletDataContext.getUserId(threadFlag.getUserUuid());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tthreadFlag);\n\n\t\tserviceContext.setUuid(threadFlag.getUuid());\n\n\t\tMBThreadFlagLocalServiceUtil.addThreadFlag(\n\t\t\tuserId, thread, serviceContext);\n\t}","id":7202,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, MBThreadFlag threadFlag)\n\t\tthrows Exception {\n\n\t\tElement element = portletDataContext.getImportDataStagedModelElement(\n\t\t\tthreadFlag);\n\n\t\tlong rootMessageId = GetterUtil.getLong(\n\t\t\telement.attributeValue(\"root-message-id\"));\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\tportletDataContext, threadFlag, MBMessage.class, rootMessageId);\n\n\t\tMap<Long, Long> threadIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tMBThread.class);\n\n\t\tlong threadId = MapUtil.getLong(\n\t\t\tthreadIds, threadFlag.getThreadId(), threadFlag.getThreadId());\n\n\t\tMBThread thread = MBThreadLocalServiceUtil.fetchThread(threadId);\n\n\t\tif (thread == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong userId = portletDataContext.getUserId(threadFlag.getUserUuid());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tthreadFlag);\n\n\t\tserviceContext.setUuid(threadFlag.getUuid());\n\n\t\tMBThreadFlagLocalServiceUtil.addThreadFlag(\n\t\t\tuserId, thread, serviceContext);\n\t}","commit_id":"6bccc1653f06f38626be219a2572ef78c1e1f736","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, PollsChoice choice)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(choice.getUserUuid());\n\n\t\tString questionPath = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, PollsQuestion.class.getName(),\n\t\t\tchoice.getQuestionId());\n\n\t\tPollsQuestion question =\n\t\t\t(PollsQuestion)portletDataContext.getZipEntryAsObject(questionPath);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\tportletDataContext, question);\n\n\t\tMap<Long, Long> questionIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tPollsQuestion.class);\n\n\t\tlong questionId = MapUtil.getLong(\n\t\t\tquestionIds, choice.getQuestionId(), choice.getQuestionId());\n\n\t\tPollsChoice importedChoice = null;\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tchoice);\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tPollsChoice existingChoice =\n\t\t\t\tPollsChoiceLocalServiceUtil.fetchPollsChoiceByUuidAndGroupId(\n\t\t\t\t\tchoice.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tif (existingChoice == null) {\n\t\t\t\tserviceContext.setUuid(choice.getUuid());\n\n\t\t\t\timportedChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\t\tuserId, questionId, choice.getName(),\n\t\t\t\t\tchoice.getDescription(), serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedChoice = PollsChoiceLocalServiceUtil.updateChoice(\n\t\t\t\t\texistingChoice.getChoiceId(), questionId, choice.getName(),\n\t\t\t\t\tchoice.getDescription(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\tuserId, questionId, choice.getName(), choice.getDescription(),\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(choice, importedChoice);\n\t}","id":7203,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, PollsChoice choice)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(choice.getUserUuid());\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\tportletDataContext, choice, PollsQuestion.class,\n\t\t\tchoice.getQuestionId());\n\n\t\tMap<Long, Long> questionIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tPollsQuestion.class);\n\n\t\tlong questionId = MapUtil.getLong(\n\t\t\tquestionIds, choice.getQuestionId(), choice.getQuestionId());\n\n\t\tPollsChoice importedChoice = null;\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tchoice);\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tPollsChoice existingChoice =\n\t\t\t\tPollsChoiceLocalServiceUtil.fetchPollsChoiceByUuidAndGroupId(\n\t\t\t\t\tchoice.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tif (existingChoice == null) {\n\t\t\t\tserviceContext.setUuid(choice.getUuid());\n\n\t\t\t\timportedChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\t\tuserId, questionId, choice.getName(),\n\t\t\t\t\tchoice.getDescription(), serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedChoice = PollsChoiceLocalServiceUtil.updateChoice(\n\t\t\t\t\texistingChoice.getChoiceId(), questionId, choice.getName(),\n\t\t\t\t\tchoice.getDescription(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\tuserId, questionId, choice.getName(), choice.getDescription(),\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(choice, importedChoice);\n\t}","commit_id":"e3744def6734b0576c28acf2b4602f6f4ed3fa24","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, PollsVote vote)\n\t\tthrows Exception {\n\n\t\tString choicePath = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, PollsChoice.class.getName(),\n\t\t\tvote.getChoiceId());\n\n\t\tPollsChoice choice =\n\t\t\t(PollsChoice)portletDataContext.getZipEntryAsObject(choicePath);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\tportletDataContext, choice);\n\n\t\tMap<Long, Long> questionIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tPollsQuestion.class);\n\n\t\tlong questionId = MapUtil.getLong(\n\t\t\tquestionIds, vote.getQuestionId(), vote.getQuestionId());\n\n\t\tMap<Long, Long> choiceIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tPollsChoice.class);\n\n\t\tlong choiceId = MapUtil.getLong(\n\t\t\tchoiceIds, vote.getChoiceId(), vote.getChoiceId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tvote);\n\n\t\tserviceContext.setCreateDate(vote.getVoteDate());\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tPollsVote existingVote =\n\t\t\t\tPollsVoteLocalServiceUtil.fetchPollsVoteByUuidAndGroupId(\n\t\t\t\t\tvote.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tif (existingVote == null) {\n\t\t\t\tserviceContext.setUuid(vote.getUuid());\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tPollsVoteLocalServiceUtil.addVote(\n\t\t\t\tvote.getUserId(), questionId, choiceId, serviceContext);\n\t\t}\n\t\tcatch (DuplicateVoteException dve) {\n\t\t}\n\t}","id":7204,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, PollsVote vote)\n\t\tthrows Exception {\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\tportletDataContext, vote, PollsChoice.class, vote.getChoiceId());\n\n\t\tMap<Long, Long> questionIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tPollsQuestion.class);\n\n\t\tlong questionId = MapUtil.getLong(\n\t\t\tquestionIds, vote.getQuestionId(), vote.getQuestionId());\n\n\t\tMap<Long, Long> choiceIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tPollsChoice.class);\n\n\t\tlong choiceId = MapUtil.getLong(\n\t\t\tchoiceIds, vote.getChoiceId(), vote.getChoiceId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tvote);\n\n\t\tserviceContext.setCreateDate(vote.getVoteDate());\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tPollsVote existingVote =\n\t\t\t\tPollsVoteLocalServiceUtil.fetchPollsVoteByUuidAndGroupId(\n\t\t\t\t\tvote.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tif (existingVote == null) {\n\t\t\t\tserviceContext.setUuid(vote.getUuid());\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tPollsVoteLocalServiceUtil.addVote(\n\t\t\t\tvote.getUserId(), questionId, choiceId, serviceContext);\n\t\t}\n\t\tcatch (DuplicateVoteException dve) {\n\t\t}\n\t}","commit_id":"e3744def6734b0576c28acf2b4602f6f4ed3fa24","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, FileEntry fileEntry)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(fileEntry.getUserUuid());\n\n\t\tString path = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, FileEntry.class.getName(),\n\t\t\tfileEntry.getFileEntryId());\n\n\t\tElement fileEntryElement =\n\t\t\tportletDataContext.getImportDataElement(\n\t\t\t\tFileEntry.class.getSimpleName(), \"path\", path);\n\n\t\tElement referenceDataElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfileEntryElement, Repository.class,\n\t\t\t\tfileEntry.getRepositoryId());\n\n\t\tif (referenceDataElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, referenceDataElement);\n\t\t}\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tString folderPath = ExportImportPathUtil.getModelPath(\n\t\t\t\tportletDataContext, Folder.class.getName(),\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tFolder folder = (Folder)portletDataContext.getZipEntryAsObject(\n\t\t\t\tfolderPath);\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, folder);\n\t\t}\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, fileEntry.getFolderId(), fileEntry.getFolderId());\n\n\t\tlong[] assetCategoryIds = portletDataContext.getAssetCategoryIds(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\tString[] assetTagNames = portletDataContext.getAssetTagNames(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfileEntry, DLFileEntry.class);\n\n\t\tserviceContext.setAttribute(\n\t\t\t\"sourceFileName\", \"A.\" + fileEntry.getExtension());\n\t\tserviceContext.setUserId(userId);\n\n\t\tString binPath = fileEntryElement.attributeValue(\"bin-path\");\n\n\t\tInputStream is = null;\n\n\t\tif (Validator.isNull(binPath) &&\n\t\t\tportletDataContext.isPerformDirectBinaryImport()) {\n\n\t\t\ttry {\n\t\t\t\tis = FileEntryUtil.getContentStream(fileEntry);\n\t\t\t}\n\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tis = portletDataContext.getZipEntryAsInputStream(binPath);\n\t\t}\n\n\t\tif (is == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No file found for file entry \" +\n\t\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\timportMetaData(\n\t\t\tportletDataContext, fileEntryElement, fileEntry, serviceContext);\n\n\t\tFileEntry importedFileEntry = null;\n\n\t\tString titleWithExtension = DLUtil.getTitleWithExtension(fileEntry);\n\t\tString extension = fileEntry.getExtension();\n\n\t\tString periodAndExtension = StringPool.PERIOD.concat(extension);\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tFileEntry existingFileEntry = FileEntryUtil.fetchByUUID_R(\n\t\t\t\tfileEntry.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tFileVersion fileVersion = fileEntry.getFileVersion();\n\n\t\t\tif (existingFileEntry == null) {\n\t\t\t\tString fileEntryTitle = fileEntry.getTitle();\n\n\t\t\t\tFileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\tif (existingTitleFileEntry != null) {\n\t\t\t\t\tif ((fileEntry.getGroupId() ==\n\t\t\t\t\t\t\tportletDataContext.getSourceGroupId()) &&\n\t\t\t\t\t\tportletDataContext.\n\t\t\t\t\t\t\tisDataStrategyMirrorWithOverwriting()) {\n\n\t\t\t\t\t\tDLAppLocalServiceUtil.deleteFileEntry(\n\t\t\t\t\t\t\texistingTitleFileEntry.getFileEntryId());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tboolean titleHasExtension = false;\n\n\t\t\t\t\t\tif (fileEntryTitle.endsWith(periodAndExtension)) {\n\t\t\t\t\t\t\tfileEntryTitle = FileUtil.stripExtension(\n\t\t\t\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\t\t\t\ttitleHasExtension = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (int i = 1;; i++) {\n\t\t\t\t\t\t\tfileEntryTitle += StringPool.SPACE + i;\n\n\t\t\t\t\t\t\ttitleWithExtension =\n\t\t\t\t\t\t\t\tfileEntryTitle + periodAndExtension;\n\n\t\t\t\t\t\t\texistingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\t\t\t\ttitleWithExtension);\n\n\t\t\t\t\t\t\tif (existingTitleFileEntry == null) {\n\t\t\t\t\t\t\t\tif (titleHasExtension) {\n\t\t\t\t\t\t\t\t\tfileEntryTitle += periodAndExtension;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"fileVersionUuid\", fileVersion.getUuid());\n\t\t\t\tserviceContext.setUuid(fileEntry.getUuid());\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(), fileEntryTitle,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\n\t\t\t\tif (fileEntry.isInTrash()) {\n\t\t\t\t\timportedFileEntry = DLAppServiceUtil.moveFileEntryToTrash(\n\t\t\t\t\t\timportedFileEntry.getFileEntryId());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFileVersion latestExistingFileVersion =\n\t\t\t\t\texistingFileEntry.getLatestFileVersion();\n\n\t\t\t\tboolean indexEnabled = serviceContext.isIndexingEnabled();\n\n\t\t\t\ttry {\n\t\t\t\t\tserviceContext.setIndexingEnabled(false);\n\n\t\t\t\t\tif (!fileVersion.getUuid().equals(\n\t\t\t\t\t\t\tlatestExistingFileVersion.getUuid())) {\n\n\t\t\t\t\t\tDLFileVersion alreadyExistingFileVersion =\n\t\t\t\t\t\t\tDLFileVersionLocalServiceUtil.\n\t\t\t\t\t\t\t\tgetFileVersionByUuidAndGroupId(\n\t\t\t\t\t\t\t\t\tfileVersion.getUuid(),\n\t\t\t\t\t\t\t\t\texistingFileEntry.getGroupId());\n\n\t\t\t\t\t\tif (alreadyExistingFileVersion != null) {\n\t\t\t\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\t\t\t\"existingDLFileVersionId\",\n\t\t\t\t\t\t\t\talreadyExistingFileVersion.getFileVersionId());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tserviceContext.setUuid(fileVersion.getUuid());\n\n\t\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\t\tDLAppLocalServiceUtil.updateFileEntry(\n\t\t\t\t\t\t\t\tuserId, existingFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(), fileEntry.getMimeType(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(),\n\t\t\t\t\t\t\t\tfileEntry.getDescription(), null, false, is,\n\t\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tDLAppLocalServiceUtil.updateAsset(\n\t\t\t\t\t\t\tuserId, existingFileEntry,\n\t\t\t\t\t\t\tlatestExistingFileVersion, assetCategoryIds,\n\t\t\t\t\t\t\tassetTagNames, null);\n\n\t\t\t\t\t\timportedFileEntry = existingFileEntry;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry.getFolderId() != folderId) {\n\t\t\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.moveFileEntry(\n\t\t\t\t\t\t\tuserId, importedFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\tfolderId, serviceContext);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry instanceof LiferayFileEntry) {\n\t\t\t\t\t\tLiferayFileEntry liferayFileEntry =\n\t\t\t\t\t\t\t(LiferayFileEntry)importedFileEntry;\n\n\t\t\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\t\t\tindexer.reindex(liferayFileEntry.getModel());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tserviceContext.setIndexingEnabled(indexEnabled);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(),\n\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(), null, is,\n\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateFileException dfe) {\n\t\t\t\tString title = fileEntry.getTitle();\n\n\t\t\t\tString[] titleParts = title.split(\"\\\\.\", 2);\n\n\t\t\t\ttitle = titleParts[0] + StringUtil.randomString();\n\n\t\t\t\tif (titleParts.length > 1) {\n\t\t\t\t\ttitle += StringPool.PERIOD + titleParts[1];\n\t\t\t\t}\n\n\t\t\t\tif (!title.endsWith(periodAndExtension)) {\n\t\t\t\t\ttitle += periodAndExtension;\n\t\t\t\t}\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitle, fileEntry.getMimeType(), title,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tDLPortletDataHandler.NAMESPACE, \"previews-and-thumbnails\")) {\n\n\t\t\tDLProcessorRegistryUtil.importGeneratedFiles(\n\t\t\t\tportletDataContext, fileEntry, importedFileEntry,\n\t\t\t\tfileEntryElement);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfileEntry, importedFileEntry, DLFileEntry.class);\n\n\t\tMap<Long, Long> fileEntryIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFileEntry.class);\n\n\t\tfileEntryIds.put(\n\t\t\tfileEntry.getFileEntryId(), importedFileEntry.getFileEntryId());\n\t}","id":7205,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, FileEntry fileEntry)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(fileEntry.getUserUuid());\n\n\t\tString path = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, FileEntry.class.getName(),\n\t\t\tfileEntry.getFileEntryId());\n\n\t\tElement fileEntryElement =\n\t\t\tportletDataContext.getImportDataElement(\n\t\t\t\tFileEntry.class.getSimpleName(), \"path\", path);\n\n\t\tElement referenceDataElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfileEntryElement, Repository.class,\n\t\t\t\tfileEntry.getRepositoryId());\n\n\t\tif (referenceDataElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, referenceDataElement);\n\t\t}\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, fileEntry, Folder.class,\n\t\t\t\tfileEntry.getFolderId());\n\t\t}\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, fileEntry.getFolderId(), fileEntry.getFolderId());\n\n\t\tlong[] assetCategoryIds = portletDataContext.getAssetCategoryIds(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\tString[] assetTagNames = portletDataContext.getAssetTagNames(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfileEntry, DLFileEntry.class);\n\n\t\tserviceContext.setAttribute(\n\t\t\t\"sourceFileName\", \"A.\" + fileEntry.getExtension());\n\t\tserviceContext.setUserId(userId);\n\n\t\tString binPath = fileEntryElement.attributeValue(\"bin-path\");\n\n\t\tInputStream is = null;\n\n\t\tif (Validator.isNull(binPath) &&\n\t\t\tportletDataContext.isPerformDirectBinaryImport()) {\n\n\t\t\ttry {\n\t\t\t\tis = FileEntryUtil.getContentStream(fileEntry);\n\t\t\t}\n\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tis = portletDataContext.getZipEntryAsInputStream(binPath);\n\t\t}\n\n\t\tif (is == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No file found for file entry \" +\n\t\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\timportMetaData(\n\t\t\tportletDataContext, fileEntryElement, fileEntry, serviceContext);\n\n\t\tFileEntry importedFileEntry = null;\n\n\t\tString titleWithExtension = DLUtil.getTitleWithExtension(fileEntry);\n\t\tString extension = fileEntry.getExtension();\n\n\t\tString periodAndExtension = StringPool.PERIOD.concat(extension);\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tFileEntry existingFileEntry = FileEntryUtil.fetchByUUID_R(\n\t\t\t\tfileEntry.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tFileVersion fileVersion = fileEntry.getFileVersion();\n\n\t\t\tif (existingFileEntry == null) {\n\t\t\t\tString fileEntryTitle = fileEntry.getTitle();\n\n\t\t\t\tFileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\tif (existingTitleFileEntry != null) {\n\t\t\t\t\tif ((fileEntry.getGroupId() ==\n\t\t\t\t\t\t\tportletDataContext.getSourceGroupId()) &&\n\t\t\t\t\t\tportletDataContext.\n\t\t\t\t\t\t\tisDataStrategyMirrorWithOverwriting()) {\n\n\t\t\t\t\t\tDLAppLocalServiceUtil.deleteFileEntry(\n\t\t\t\t\t\t\texistingTitleFileEntry.getFileEntryId());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tboolean titleHasExtension = false;\n\n\t\t\t\t\t\tif (fileEntryTitle.endsWith(periodAndExtension)) {\n\t\t\t\t\t\t\tfileEntryTitle = FileUtil.stripExtension(\n\t\t\t\t\t\t\t\tfileEntryTitle);\n\n\t\t\t\t\t\t\ttitleHasExtension = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (int i = 1;; i++) {\n\t\t\t\t\t\t\tfileEntryTitle += StringPool.SPACE + i;\n\n\t\t\t\t\t\t\ttitleWithExtension =\n\t\t\t\t\t\t\t\tfileEntryTitle + periodAndExtension;\n\n\t\t\t\t\t\t\texistingTitleFileEntry = FileEntryUtil.fetchByR_F_T(\n\t\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\t\t\t\ttitleWithExtension);\n\n\t\t\t\t\t\t\tif (existingTitleFileEntry == null) {\n\t\t\t\t\t\t\t\tif (titleHasExtension) {\n\t\t\t\t\t\t\t\t\tfileEntryTitle += periodAndExtension;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"fileVersionUuid\", fileVersion.getUuid());\n\t\t\t\tserviceContext.setUuid(fileEntry.getUuid());\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(), fileEntryTitle,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\n\t\t\t\tif (fileEntry.isInTrash()) {\n\t\t\t\t\timportedFileEntry = DLAppServiceUtil.moveFileEntryToTrash(\n\t\t\t\t\t\timportedFileEntry.getFileEntryId());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFileVersion latestExistingFileVersion =\n\t\t\t\t\texistingFileEntry.getLatestFileVersion();\n\n\t\t\t\tboolean indexEnabled = serviceContext.isIndexingEnabled();\n\n\t\t\t\ttry {\n\t\t\t\t\tserviceContext.setIndexingEnabled(false);\n\n\t\t\t\t\tif (!fileVersion.getUuid().equals(\n\t\t\t\t\t\t\tlatestExistingFileVersion.getUuid())) {\n\n\t\t\t\t\t\tDLFileVersion alreadyExistingFileVersion =\n\t\t\t\t\t\t\tDLFileVersionLocalServiceUtil.\n\t\t\t\t\t\t\t\tgetFileVersionByUuidAndGroupId(\n\t\t\t\t\t\t\t\t\tfileVersion.getUuid(),\n\t\t\t\t\t\t\t\t\texistingFileEntry.getGroupId());\n\n\t\t\t\t\t\tif (alreadyExistingFileVersion != null) {\n\t\t\t\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\t\t\t\"existingDLFileVersionId\",\n\t\t\t\t\t\t\t\talreadyExistingFileVersion.getFileVersionId());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tserviceContext.setUuid(fileVersion.getUuid());\n\n\t\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\t\tDLAppLocalServiceUtil.updateFileEntry(\n\t\t\t\t\t\t\t\tuserId, existingFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(), fileEntry.getMimeType(),\n\t\t\t\t\t\t\t\tfileEntry.getTitle(),\n\t\t\t\t\t\t\t\tfileEntry.getDescription(), null, false, is,\n\t\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tDLAppLocalServiceUtil.updateAsset(\n\t\t\t\t\t\t\tuserId, existingFileEntry,\n\t\t\t\t\t\t\tlatestExistingFileVersion, assetCategoryIds,\n\t\t\t\t\t\t\tassetTagNames, null);\n\n\t\t\t\t\t\timportedFileEntry = existingFileEntry;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry.getFolderId() != folderId) {\n\t\t\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.moveFileEntry(\n\t\t\t\t\t\t\tuserId, importedFileEntry.getFileEntryId(),\n\t\t\t\t\t\t\tfolderId, serviceContext);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (importedFileEntry instanceof LiferayFileEntry) {\n\t\t\t\t\t\tLiferayFileEntry liferayFileEntry =\n\t\t\t\t\t\t\t(LiferayFileEntry)importedFileEntry;\n\n\t\t\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\t\t\tindexer.reindex(liferayFileEntry.getModel());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tserviceContext.setIndexingEnabled(indexEnabled);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitleWithExtension, fileEntry.getMimeType(),\n\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(), null, is,\n\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateFileException dfe) {\n\t\t\t\tString title = fileEntry.getTitle();\n\n\t\t\t\tString[] titleParts = title.split(\"\\\\.\", 2);\n\n\t\t\t\ttitle = titleParts[0] + StringUtil.randomString();\n\n\t\t\t\tif (titleParts.length > 1) {\n\t\t\t\t\ttitle += StringPool.PERIOD + titleParts[1];\n\t\t\t\t}\n\n\t\t\t\tif (!title.endsWith(periodAndExtension)) {\n\t\t\t\t\ttitle += periodAndExtension;\n\t\t\t\t}\n\n\t\t\t\timportedFileEntry = DLAppLocalServiceUtil.addFileEntry(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\ttitle, fileEntry.getMimeType(), title,\n\t\t\t\t\tfileEntry.getDescription(), null, is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tDLPortletDataHandler.NAMESPACE, \"previews-and-thumbnails\")) {\n\n\t\t\tDLProcessorRegistryUtil.importGeneratedFiles(\n\t\t\t\tportletDataContext, fileEntry, importedFileEntry,\n\t\t\t\tfileEntryElement);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfileEntry, importedFileEntry, DLFileEntry.class);\n\n\t\tMap<Long, Long> fileEntryIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFileEntry.class);\n\n\t\tfileEntryIds.put(\n\t\t\tfileEntry.getFileEntryId(), importedFileEntry.getFileEntryId());\n\t}","commit_id":"bbf91a7932d10020a899a0f2967ac822fe2f9a3c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DevelopmentCostMeasuresMigration(Database database, Settings settings) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(settings);\n  }","id":7206,"modified_method":"public DevelopmentCostMeasuresMigration(Database database, PropertiesDao propertiesDao) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(propertiesDao);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    settings = new Settings();\n    settings.setProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY, 8);\n\n    migration = new DevelopmentCostMeasuresMigration(db.database(), settings);\n  }","id":7207,"modified_method":"@Before\n  public void setUp() throws Exception {\n    when(propertiesDao.selectGlobalProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY)).thenReturn(new PropertyDto().setValue(\"8\"));\n\n    migration = new DevelopmentCostMeasuresMigration(db.database(), propertiesDao);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  IssueChangelogMigration(Database database, Settings settings, System2 system2) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(settings);\n    this.system2 = system2;\n  }","id":7208,"modified_method":"@VisibleForTesting\n  IssueChangelogMigration(Database database, PropertiesDao propertiesDao, System2 system2) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(propertiesDao);\n    this.system2 = system2;\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public IssueChangelogMigration(Database database, Settings settings) {\n    this(database, settings, System2.INSTANCE);\n  }","id":7209,"modified_method":"public IssueChangelogMigration(Database database, PropertiesDao propertiesDao) {\n    this(database, propertiesDao, System2.INSTANCE);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    when(system2.now()).thenReturn(DateUtils.parseDateTime(\"2014-02-19T19:10:03+0100\").getTime());\n    settings = new Settings();\n    settings.setProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY, 8);\n\n    migration = new IssueChangelogMigration(db.database(), settings, system2);\n  }","id":7210,"modified_method":"@Before\n  public void setUp() throws Exception {\n    when(system2.now()).thenReturn(DateUtils.parseDateTime(\"2014-02-19T19:10:03+0100\").getTime());\n    when(propertiesDao.selectGlobalProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY)).thenReturn(new PropertyDto().setValue(\"8\"));\n\n    migration = new IssueChangelogMigration(db.database(), propertiesDao, system2);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  IssueMigration(Database database, Settings settings, System2 system2) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(settings);\n    this.system2 = system2;\n  }","id":7211,"modified_method":"@VisibleForTesting\n  IssueMigration(Database database, PropertiesDao propertiesDao, System2 system2) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(propertiesDao);\n    this.system2 = system2;\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public IssueMigration(Database database, Settings settings) {\n    this(database, settings, System2.INSTANCE);\n  }","id":7212,"modified_method":"public IssueMigration(Database database, PropertiesDao propertiesDao) {\n    this(database, propertiesDao, System2.INSTANCE);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    when(system2.now()).thenReturn(DateUtils.parseDateTime(\"2014-02-19T19:10:03+0100\").getTime());\n    settings = new Settings();\n    settings.setProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY, 8);\n\n    migration = new IssueMigration(db.database(), settings, system2);\n  }","id":7213,"modified_method":"@Before\n  public void setUp() throws Exception {\n    when(system2.now()).thenReturn(DateUtils.parseDateTime(\"2014-02-19T19:10:03+0100\").getTime());\n    when(propertiesDao.selectGlobalProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY)).thenReturn(new PropertyDto().setValue(\"8\"));\n\n    migration = new IssueMigration(db.database(), propertiesDao, system2);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public TechnicalDebtMeasuresMigration(Database database, Settings settings) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(settings);\n  }","id":7214,"modified_method":"public TechnicalDebtMeasuresMigration(Database database, PropertiesDao propertiesDao) {\n    this.db = database;\n    this.workDurationConvertor = new WorkDurationConvertor(propertiesDao);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    settings = new Settings();\n    settings.setProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY, 8);\n\n    migration = new TechnicalDebtMeasuresMigration(db.database(), settings);\n  }","id":7215,"modified_method":"@Before\n  public void setUp() throws Exception {\n    when(propertiesDao.selectGlobalProperty(WorkDurationConvertor.HOURS_IN_DAY_PROPERTY)).thenReturn(new PropertyDto().setValue(\"8\"));\n\n    migration = new TechnicalDebtMeasuresMigration(db.database(), propertiesDao);\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"long createFromLong(long durationInLong) {\n    int hoursInDay = hoursInDay();\n\n    long durationInMinutes = 0L;\n\n    long remainingTime = durationInLong;\n    Long currentTime = remainingTime / 10000;\n    if (currentTime > 0) {\n      durationInMinutes = currentTime.intValue() * hoursInDay * ONE_HOUR;\n      remainingTime = remainingTime - (currentTime * 10000);\n    }\n\n    currentTime = remainingTime / 100;\n    if (currentTime > 0) {\n      durationInMinutes += currentTime.intValue() * ONE_HOUR;\n      remainingTime = remainingTime - (currentTime * 100);\n    }\n\n    currentTime = remainingTime;\n    if (currentTime > 0) {\n      durationInMinutes += currentTime.intValue();\n    }\n\n    return durationInMinutes;\n  }","id":7216,"modified_method":"WorkDurationConvertor(PropertiesDao propertiesDao) {\n    this.propertiesDao = propertiesDao;\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private int hoursInDay() {\n    int hoursInDay = settings.getInt(HOURS_IN_DAY_PROPERTY);\n    if (hoursInDay < 0) {\n      throw new IllegalArgumentException(String.format(\"Bad value of %s: %d\", HOURS_IN_DAY_PROPERTY, hoursInDay));\n    }\n    if (hoursInDay == 0) {\n      hoursInDay = 8;\n    }\n    return hoursInDay;\n  }","id":7217,"modified_method":"private int hoursInDay() {\n    PropertyDto propertyDto = propertiesDao.selectGlobalProperty(HOURS_IN_DAY_PROPERTY);\n    String value = propertyDto != null ? propertyDto.getValue() : \"8\";\n    int hoursInDay = Integer.valueOf(value);\n    if (hoursInDay < 0) {\n      throw new IllegalArgumentException(String.format(\"Bad value of %s: %d\", HOURS_IN_DAY_PROPERTY, hoursInDay));\n    }\n    return hoursInDay;\n  }","commit_id":"3044dc4d33a28a2c94cbbfc310ed0cadc894a036","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private <T extends Document> int delete(Collection<T> collection, List<String> ids) {\n        int numDeleted = 0;\n        for (List<String> sublist : Lists.partition(ids, 64)) {\n            Connection connection = null;\n            String tableName = getTable(collection);\n            try {\n                connection = this.ch.getRWConnection();\n                numDeleted += dbDelete(connection, tableName, sublist);\n                connection.commit();\n            } catch (Exception ex) {\n                throw new DocumentStoreException(ex);\n            } finally {\n                this.ch.closeConnection(connection);\n            }\n        }\n        return numDeleted;\n    }","id":7218,"modified_method":"private <T extends Document> int delete(Collection<T> collection, List<String> ids) {\n        int numDeleted = 0;\n        TableMetaData tmd = getTable(collection);\n        for (List<String> sublist : Lists.partition(ids, 64)) {\n            Connection connection = null;\n            try {\n                connection = this.ch.getRWConnection();\n                numDeleted += dbDelete(connection, tmd, sublist);\n                connection.commit();\n            } catch (Exception ex) {\n                throw new DocumentStoreException(ex);\n            } finally {\n                this.ch.closeConnection(connection);\n            }\n        }\n        return numDeleted;\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void obtainFlagsFromResultSetMeta(ResultSetMetaData met) throws SQLException {\n        for (int i = 1; i <= met.getColumnCount(); i++) {\n            String lcName = met.getColumnName(i).toLowerCase(Locale.ENGLISH);\n            if (\"id\".equals(lcName)) {\n                this.isIdBinary = isBinaryType(met.getColumnType(i));\n            }\n            if (\"data\".equals(lcName)) {\n                this.dataLimitInOctets = met.getPrecision(i);\n            }\n        }\n    }","id":7219,"modified_method":"private void obtainFlagsFromResultSetMeta(ResultSetMetaData met, TableMetaData tmd) throws SQLException {\n        for (int i = 1; i <= met.getColumnCount(); i++) {\n            String lcName = met.getColumnName(i).toLowerCase(Locale.ENGLISH);\n            if (\"id\".equals(lcName)) {\n                tmd.setIdIsBinary(isBinaryType(met.getColumnType(i)));\n            }\n            if (\"data\".equals(lcName)) {\n                tmd.setDataLimitInOctets(met.getPrecision(i));\n            }\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> int delete(Collection<T> collection,\n                                            Map<String, Map<Key, Condition>> toRemove) {\n        int numDeleted = 0;\n        String tableName = getTable(collection);\n        Map<String, Map<Key, Condition>> subMap = Maps.newHashMap();\n        Iterator<Entry<String, Map<Key, Condition>>> it = toRemove.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Map<Key, Condition>> entry = it.next();\n            subMap.put(entry.getKey(), entry.getValue());\n            if (subMap.size() == 64 || !it.hasNext()) {\n                Connection connection = null;\n                try {\n                    connection = this.ch.getRWConnection();\n                    numDeleted += dbDelete(connection, tableName, subMap);\n                    connection.commit();\n                } catch (Exception ex) {\n                    throw DocumentStoreException.convert(ex);\n                } finally {\n                    this.ch.closeConnection(connection);\n                }\n                subMap.clear();\n            }\n        }\n        return numDeleted;\n    }","id":7220,"modified_method":"private <T extends Document> int delete(Collection<T> collection,\n                                            Map<String, Map<Key, Condition>> toRemove) {\n        int numDeleted = 0;\n        TableMetaData tmd = getTable(collection);\n        Map<String, Map<Key, Condition>> subMap = Maps.newHashMap();\n        Iterator<Entry<String, Map<Key, Condition>>> it = toRemove.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Map<Key, Condition>> entry = it.next();\n            subMap.put(entry.getKey(), entry.getValue());\n            if (subMap.size() == 64 || !it.hasNext()) {\n                Connection connection = null;\n                try {\n                    connection = this.ch.getRWConnection();\n                    numDeleted += dbDelete(connection, tmd, subMap);\n                    connection.commit();\n                } catch (Exception ex) {\n                    throw DocumentStoreException.convert(ex);\n                } finally {\n                    this.ch.closeConnection(connection);\n                }\n                subMap.clear();\n            }\n        }\n        return numDeleted;\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> boolean insertDocuments(Collection<T> collection, List<T> documents) {\n        Connection connection = null;\n        String tableName = getTable(collection);\n        try {\n            connection = this.ch.getRWConnection();\n            boolean result = dbInsert(connection, tableName, documents);\n            connection.commit();\n            return result;\n        } catch (SQLException ex) {\n            this.ch.rollbackConnection(connection);\n\n            List<String> ids = new ArrayList<String>();\n            for (T doc : documents) {\n                ids.add(doc.getId());\n            }\n            String message = String.format(\"insert of %s failed\", ids);\n            LOG.debug(message, ex);\n\n            // collect additional exceptions\n            String messages = LOG.isDebugEnabled() ? RDBJDBCTools.getAdditionalMessages(ex) : \"\";\n\n            // see whether a DATA error was involved\n            boolean dataRelated = false;\n            SQLException walk = ex;\n            while (walk != null && !dataRelated) {\n                dataRelated = RDBJDBCTools.matchesSQLState(walk, \"22\", \"72\");\n                walk = walk.getNextException();\n            }\n            if (dataRelated) {\n                String id = null;\n                int longest = 0, longestChars = 0;\n\n                for (Document d : documents) {\n                    String data = SR.asString(d);\n                    byte bytes[] = asBytes(data);\n                    if (bytes.length > longest) {\n                        longest = bytes.length;\n                        longestChars = data.length();\n                        id = d.getId();\n                    }\n                }\n\n                String m = String\n                        .format(\" (potential cause: long data for ID %s - longest octet DATA size in Java characters: %d, in octets: %d, computed character limit: %d)\",\n                                id, longest, longestChars, this.dataLimitInOctets / CHAR2OCTETRATIO);\n                messages += m;\n            }\n\n            if (!messages.isEmpty()) {\n                LOG.debug(\"additional diagnostics: \" + messages);\n            }\n\n            throw new DocumentStoreException(message, ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","id":7221,"modified_method":"private <T extends Document> boolean insertDocuments(Collection<T> collection, List<T> documents) {\n        Connection connection = null;\n        TableMetaData tmd = getTable(collection);\n        try {\n            connection = this.ch.getRWConnection();\n            boolean result = dbInsert(connection, tmd, documents);\n            connection.commit();\n            return result;\n        } catch (SQLException ex) {\n            this.ch.rollbackConnection(connection);\n\n            List<String> ids = new ArrayList<String>();\n            for (T doc : documents) {\n                ids.add(doc.getId());\n            }\n            String message = String.format(\"insert of %s failed\", ids);\n            LOG.debug(message, ex);\n\n            // collect additional exceptions\n            String messages = LOG.isDebugEnabled() ? RDBJDBCTools.getAdditionalMessages(ex) : \"\";\n\n            // see whether a DATA error was involved\n            boolean dataRelated = false;\n            SQLException walk = ex;\n            while (walk != null && !dataRelated) {\n                dataRelated = RDBJDBCTools.matchesSQLState(walk, \"22\", \"72\");\n                walk = walk.getNextException();\n            }\n            if (dataRelated) {\n                String id = null;\n                int longest = 0, longestChars = 0;\n\n                for (Document d : documents) {\n                    String data = SR.asString(d);\n                    byte bytes[] = asBytes(data);\n                    if (bytes.length > longest) {\n                        longest = bytes.length;\n                        longestChars = data.length();\n                        id = d.getId();\n                    }\n                }\n\n                String m = String\n                        .format(\" (potential cause: long data for ID %s - longest octet DATA size in Java characters: %d, in octets: %d, computed character limit: %d)\",\n                                id, longest, longestChars, tmd.getDataLimitInOctets() / CHAR2OCTETRATIO);\n                messages += m;\n            }\n\n            if (!messages.isEmpty()) {\n                LOG.debug(\"additional diagnostics: \" + messages);\n            }\n\n            throw new DocumentStoreException(message, ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void initialize(DataSource ds, DocumentMK.Builder builder, RDBOptions options) throws Exception {\n\n        this.tnNodes = RDBJDBCTools.createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.NODES));\n        this.tnClusterNodes = RDBJDBCTools.createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.CLUSTER_NODES));\n        this.tnSettings = RDBJDBCTools.createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.SETTINGS));\n        this.tnJournal = RDBJDBCTools.createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.JOURNAL));\n\n        this.ch = new RDBConnectionHandler(ds);\n        this.callStack = LOG.isDebugEnabled() ? new Exception(\"call stack of RDBDocumentStore creation\") : null;\n\n        this.nodesCache = builder.buildDocumentCache(this);\n        this.cacheStats = new CacheStats(nodesCache, \"Document-Documents\", builder.getWeigher(), builder.getDocumentCacheSize());\n\n        Connection con = this.ch.getRWConnection();\n\n        int isolation = con.getTransactionIsolation();\n        String isolationDiags = RDBJDBCTools.isolationLevelToString(isolation);\n        if (isolation != Connection.TRANSACTION_READ_COMMITTED) {\n            LOG.info(\"Detected transaction isolation level \" + isolationDiags + \" is \"\n                    + (isolation < Connection.TRANSACTION_READ_COMMITTED ? \"lower\" : \"higher\") + \" than expected \"\n                    + RDBJDBCTools.isolationLevelToString(Connection.TRANSACTION_READ_COMMITTED)\n                    + \" - check datasource configuration\");\n        }\n\n        DatabaseMetaData md = con.getMetaData();\n        String dbDesc = String.format(\"%s %s (%d.%d)\", md.getDatabaseProductName(), md.getDatabaseProductVersion(),\n                md.getDatabaseMajorVersion(), md.getDatabaseMinorVersion()).replaceAll(\"[\\r\\n\\t]\", \" \").trim();\n        String driverDesc = String.format(\"%s %s (%d.%d)\", md.getDriverName(), md.getDriverVersion(), md.getDriverMajorVersion(),\n                md.getDriverMinorVersion()).replaceAll(\"[\\r\\n\\t]\", \" \").trim();\n        String dbUrl = md.getURL();\n\n        this.db = RDBDocumentStoreDB.getValue(md.getDatabaseProductName());\n        this.metadata = ImmutableMap.<String,String>builder()\n                .put(\"type\", \"rdb\")\n                .put(\"db\", md.getDatabaseProductName())\n                .put(\"version\", md.getDatabaseProductVersion())\n                .build();\n        String versionDiags = db.checkVersion(md);\n        if (!versionDiags.isEmpty()) {\n            LOG.info(versionDiags);\n        }\n\n        if (! \"\".equals(db.getInitializationStatement())) {\n            Statement stmt = null;\n            try {\n                stmt = con.createStatement();\n                stmt.execute(db.getInitializationStatement());\n                stmt.close();\n                con.commit();\n            }\n            finally {\n                closeStatement(stmt);\n            }\n        }\n\n        List<String> tablesCreated = new ArrayList<String>();\n        List<String> tablesPresent = new ArrayList<String>();\n        StringBuilder tableDiags = new StringBuilder();\n        try {\n            createTableFor(con, Collection.CLUSTER_NODES, tablesCreated, tablesPresent, tableDiags);\n            createTableFor(con, Collection.NODES, tablesCreated, tablesPresent, tableDiags);\n            createTableFor(con, Collection.SETTINGS, tablesCreated, tablesPresent, tableDiags);\n            createTableFor(con, Collection.JOURNAL, tablesCreated, tablesPresent, tableDiags);\n        } finally {\n            con.commit();\n            con.close();\n        }\n\n        if (options.isDropTablesOnClose()) {\n            tablesToBeDropped.addAll(tablesCreated);\n        }\n\n        if (tableDiags.length() != 0) {\n            tableDiags.insert(0, \", \");\n        }\n\n        String diag = db.getAdditionalDiagnostics(this.ch, this.tnNodes);\n\n        LOG.info(\"RDBDocumentStore (\" + OakVersion.getVersion() + \") instantiated for database \" + dbDesc + \", using driver: \"\n                + driverDesc + \", connecting to: \" + dbUrl + (diag.isEmpty() ? \"\" : (\", properties: \" + diag))\n                + \", transaction isolation level: \" + isolationDiags + tableDiags);\n        if (!tablesPresent.isEmpty()) {\n            LOG.info(\"Tables present upon startup: \" + tablesPresent);\n        }\n        if (!tablesCreated.isEmpty()) {\n            LOG.info(\"Tables created upon startup: \" + tablesCreated\n                    + (options.isDropTablesOnClose() ? \" (will be dropped on exit)\" : \"\"));\n        }\n    }","id":7222,"modified_method":"private void initialize(DataSource ds, DocumentMK.Builder builder, RDBOptions options) throws Exception {\n\n        this.tableMeta.put(Collection.NODES,\n                new TableMetaData(createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.NODES))));\n        this.tableMeta.put(Collection.CLUSTER_NODES,\n                new TableMetaData(createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.CLUSTER_NODES))));\n        this.tableMeta.put(Collection.JOURNAL,\n                new TableMetaData(createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.JOURNAL))));\n        this.tableMeta.put(Collection.SETTINGS,\n                new TableMetaData(createTableName(options.getTablePrefix(), TABLEMAP.get(Collection.SETTINGS))));\n\n        this.ch = new RDBConnectionHandler(ds);\n        this.callStack = LOG.isDebugEnabled() ? new Exception(\"call stack of RDBDocumentStore creation\") : null;\n\n        this.nodesCache = builder.buildDocumentCache(this);\n        this.cacheStats = new CacheStats(nodesCache, \"Document-Documents\", builder.getWeigher(), builder.getDocumentCacheSize());\n\n        Connection con = this.ch.getRWConnection();\n\n        int isolation = con.getTransactionIsolation();\n        String isolationDiags = RDBJDBCTools.isolationLevelToString(isolation);\n        if (isolation != Connection.TRANSACTION_READ_COMMITTED) {\n            LOG.info(\"Detected transaction isolation level \" + isolationDiags + \" is \"\n                    + (isolation < Connection.TRANSACTION_READ_COMMITTED ? \"lower\" : \"higher\") + \" than expected \"\n                    + RDBJDBCTools.isolationLevelToString(Connection.TRANSACTION_READ_COMMITTED)\n                    + \" - check datasource configuration\");\n        }\n\n        DatabaseMetaData md = con.getMetaData();\n        String dbDesc = String.format(\"%s %s (%d.%d)\", md.getDatabaseProductName(), md.getDatabaseProductVersion(),\n                md.getDatabaseMajorVersion(), md.getDatabaseMinorVersion()).replaceAll(\"[\\r\\n\\t]\", \" \").trim();\n        String driverDesc = String.format(\"%s %s (%d.%d)\", md.getDriverName(), md.getDriverVersion(), md.getDriverMajorVersion(),\n                md.getDriverMinorVersion()).replaceAll(\"[\\r\\n\\t]\", \" \").trim();\n        String dbUrl = md.getURL();\n\n        this.db = RDBDocumentStoreDB.getValue(md.getDatabaseProductName());\n        this.metadata = ImmutableMap.<String,String>builder()\n                .put(\"type\", \"rdb\")\n                .put(\"db\", md.getDatabaseProductName())\n                .put(\"version\", md.getDatabaseProductVersion())\n                .build();\n        String versionDiags = db.checkVersion(md);\n        if (!versionDiags.isEmpty()) {\n            LOG.info(versionDiags);\n        }\n\n        if (! \"\".equals(db.getInitializationStatement())) {\n            Statement stmt = null;\n            try {\n                stmt = con.createStatement();\n                stmt.execute(db.getInitializationStatement());\n                stmt.close();\n                con.commit();\n            }\n            finally {\n                closeStatement(stmt);\n            }\n        }\n\n        List<String> tablesCreated = new ArrayList<String>();\n        List<String> tablesPresent = new ArrayList<String>();\n        StringBuilder tableDiags = new StringBuilder();\n        try {\n            createTableFor(con, Collection.CLUSTER_NODES, this.tableMeta.get(Collection.CLUSTER_NODES), tablesCreated,\n                    tablesPresent, tableDiags);\n            createTableFor(con, Collection.NODES, this.tableMeta.get(Collection.NODES), tablesCreated, tablesPresent,\n                    tableDiags);\n            createTableFor(con, Collection.SETTINGS, this.tableMeta.get(Collection.SETTINGS), tablesCreated, tablesPresent,\n                    tableDiags);\n            createTableFor(con, Collection.JOURNAL, this.tableMeta.get(Collection.JOURNAL), tablesCreated, tablesPresent,\n                    tableDiags);\n        } finally {\n            con.commit();\n            con.close();\n        }\n\n        if (options.isDropTablesOnClose()) {\n            tablesToBeDropped.addAll(tablesCreated);\n        }\n\n        if (tableDiags.length() != 0) {\n            tableDiags.insert(0, \", \");\n        }\n\n        String diag = db.getAdditionalDiagnostics(this.ch, this.tableMeta.get(Collection.NODES).getName());\n\n        LOG.info(\"RDBDocumentStore (\" + OakVersion.getVersion() + \") instantiated for database \" + dbDesc + \", using driver: \"\n                + driverDesc + \", connecting to: \" + dbUrl + (diag.isEmpty() ? \"\" : (\", properties: \" + diag))\n                + \", transaction isolation level: \" + isolationDiags + tableDiags);\n        if (!tablesPresent.isEmpty()) {\n            LOG.info(\"Tables present upon startup: \" + tablesPresent);\n        }\n        if (!tablesCreated.isEmpty()) {\n            LOG.info(\"Tables created upon startup: \" + tablesCreated\n                    + (options.isDropTablesOnClose() ? \" (will be dropped on exit)\" : \"\"));\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private int dbDelete(Connection connection, String tableName, List<String> ids) throws SQLException {\n\n        PreparedStatement stmt;\n        int cnt = ids.size();\n\n        if (cnt == 1) {\n            stmt = connection.prepareStatement(\"delete from \" + tableName + \" where ID=?\");\n        } else {\n            StringBuilder inClause = new StringBuilder();\n            for (int i = 0; i < cnt; i++) {\n                inClause.append('?');\n                if (i != cnt - 1) {\n                    inClause.append(',');\n                }\n            }\n            stmt = connection.prepareStatement(\"delete from \" + tableName + \" where ID in (\" + inClause.toString() + \")\");\n        }\n\n        try {\n            for (int i = 0; i < cnt; i++) {\n                setIdInStatement(stmt, i + 1, ids.get(i));\n            }\n            int result = stmt.executeUpdate();\n            if (result != cnt) {\n                LOG.debug(\"DB delete failed for \" + tableName + \"/\" + ids);\n            }\n            return result;\n        } finally {\n            stmt.close();\n        }\n    }","id":7223,"modified_method":"private int dbDelete(Connection connection, TableMetaData tmd, List<String> ids) throws SQLException {\n\n        PreparedStatement stmt;\n        int cnt = ids.size();\n\n        if (cnt == 1) {\n            stmt = connection.prepareStatement(\"delete from \" + tmd.getName() + \" where ID=?\");\n        } else {\n            StringBuilder inClause = new StringBuilder();\n            for (int i = 0; i < cnt; i++) {\n                inClause.append('?');\n                if (i != cnt - 1) {\n                    inClause.append(',');\n                }\n            }\n            stmt = connection.prepareStatement(\"delete from \" + tmd.getName() + \" where ID in (\" + inClause.toString() + \")\");\n        }\n\n        try {\n            for (int i = 0; i < cnt; i++) {\n                setIdInStatement(tmd, stmt, i + 1, ids.get(i));\n            }\n            int result = stmt.executeUpdate();\n            if (result != cnt) {\n                LOG.debug(\"DB delete failed for \" + tmd.getName() + \"/\" + ids);\n            }\n            return result;\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void setIdInStatement(PreparedStatement stmt, int idx, String id) throws SQLException {\n        if (this.isIdBinary) {\n            try {\n                stmt.setBytes(idx, id.getBytes(\"UTF-8\"));\n            } catch (UnsupportedEncodingException ex) {\n                LOG.error(\"UTF-8 not supported??\", ex);\n                throw new DocumentStoreException(ex);\n            }\n        } else {\n            stmt.setString(idx, id);\n        }\n    }","id":7224,"modified_method":"private static void setIdInStatement(TableMetaData tmd, PreparedStatement stmt, int idx, String id) throws SQLException {\n        if (tmd.isIdBinary()) {\n            try {\n                stmt.setBytes(idx, id.getBytes(\"UTF-8\"));\n            } catch (UnsupportedEncodingException ex) {\n                LOG.error(\"UTF-8 not supported??\", ex);\n                throw new DocumentStoreException(ex);\n            }\n        } else {\n            stmt.setString(idx, id);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> List<T> internalQuery(Collection<T> collection, String fromKey, String toKey,\n            String indexedProperty, long startValue, int limit) {\n        Connection connection = null;\n        String tableName = getTable(collection);\n        if (indexedProperty != null && (!INDEXEDPROPERTIES.contains(indexedProperty))) {\n            String message = \"indexed property \" + indexedProperty + \" not supported, query was '>= '\" + startValue\n                    + \"'; supported properties are \" + INDEXEDPROPERTIES;\n            LOG.info(message);\n            throw new DocumentStoreException(message);\n        }\n        try {\n            long now = System.currentTimeMillis();\n            QueryContext qp = new QueryContext(fromKey, toKey);\n            qmap.put(Thread.currentThread(), qp);\n            connection = this.ch.getROConnection();\n            List<RDBRow> dbresult = dbQuery(connection, tableName, fromKey, toKey, indexedProperty, startValue, limit);\n            connection.commit();\n\n            int size = dbresult.size();\n            List<T> result = new ArrayList<T>(size);\n            for (int i = 0; i < size; i++) {\n                RDBRow row = dbresult.set(i, null); // free RDBRow ASAP\n                T doc = runThroughCache(collection, row, now, qp);\n                result.add(doc);\n            }\n            qp.dispose();\n            return result;\n        } catch (Exception ex) {\n            LOG.error(\"SQL exception on query\", ex);\n            throw new DocumentStoreException(ex);\n        } finally {\n            qmap.remove(Thread.currentThread());\n            this.ch.closeConnection(connection);\n        }\n    }","id":7225,"modified_method":"private <T extends Document> List<T> internalQuery(Collection<T> collection, String fromKey, String toKey,\n            String indexedProperty, long startValue, int limit) {\n        Connection connection = null;\n        TableMetaData tmd = getTable(collection);\n        if (indexedProperty != null && (!INDEXEDPROPERTIES.contains(indexedProperty))) {\n            String message = \"indexed property \" + indexedProperty + \" not supported, query was '>= '\" + startValue\n                    + \"'; supported properties are \" + INDEXEDPROPERTIES;\n            LOG.info(message);\n            throw new DocumentStoreException(message);\n        }\n        try {\n            long now = System.currentTimeMillis();\n            QueryContext qp = new QueryContext(fromKey, toKey);\n            qmap.put(Thread.currentThread(), qp);\n            connection = this.ch.getROConnection();\n            String from = collection == Collection.NODES && NodeDocument.MIN_ID_VALUE.equals(fromKey) ? null : fromKey;\n            String to = collection == Collection.NODES && NodeDocument.MAX_ID_VALUE.equals(toKey) ? null : toKey;\n            List<RDBRow> dbresult = dbQuery(connection, tmd, from, to, indexedProperty, startValue, limit);\n            connection.commit();\n\n            int size = dbresult.size();\n            List<T> result = new ArrayList<T>(size);\n            for (int i = 0; i < size; i++) {\n                RDBRow row = dbresult.set(i, null); // free RDBRow ASAP\n                T doc = runThroughCache(collection, row, now, qp);\n                result.add(doc);\n            }\n            qp.dispose();\n            return result;\n        } catch (Exception ex) {\n            LOG.error(\"SQL exception on query\", ex);\n            throw new DocumentStoreException(ex);\n        } finally {\n            qmap.remove(Thread.currentThread());\n            this.ch.closeConnection(connection);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> void delete(Collection<T> collection, String id) {\n        Connection connection = null;\n        String tableName = getTable(collection);\n        try {\n            connection = this.ch.getRWConnection();\n            dbDelete(connection, tableName, Collections.singletonList(id));\n            connection.commit();\n        } catch (Exception ex) {\n            throw new DocumentStoreException(ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","id":7226,"modified_method":"private <T extends Document> void delete(Collection<T> collection, String id) {\n        Connection connection = null;\n        TableMetaData tmd = getTable(collection);\n        try {\n            connection = this.ch.getRWConnection();\n            dbDelete(connection, tmd, Collections.singletonList(id));\n            connection.commit();\n        } catch (Exception ex) {\n            throw new DocumentStoreException(ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private boolean dbBatchedAppendingUpdate(Connection connection, String tableName, List<String> ids, Long modified,\n            boolean setModifiedConditionally,\n            String appendData) throws SQLException {\n        StringBuilder t = new StringBuilder();\n        t.append(\"update \" + tableName + \" set \");\n        t.append(setModifiedConditionally ? \"MODIFIED = case when ? > MODIFIED then ? else MODIFIED end, \" : \"MODIFIED = ?, \");\n        t.append(\"MODCOUNT = MODCOUNT + 1, DSIZE = DSIZE + ?, \");\n        t.append(\"DATA = \" + this.db.getConcatQueryString(this.dataLimitInOctets, appendData.length()) + \" \");\n        t.append(\"where ID in (\");\n        for (int i = 0; i < ids.size(); i++) {\n            if (i != 0) {\n                t.append(',');\n            }\n            t.append('?');\n        }\n        t.append(\")\");\n        PreparedStatement stmt = connection.prepareStatement(t.toString());\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            if (setModifiedConditionally) {\n                stmt.setObject(si++, modified, Types.BIGINT);\n            }\n            stmt.setObject(si++, 1 + appendData.length(), Types.BIGINT);\n            stmt.setString(si++, \",\" + appendData);\n            for (String id : ids) {\n                setIdInStatement(stmt, si++, id);\n            }\n            int result = stmt.executeUpdate();\n            if (result != ids.size()) {\n                LOG.debug(\"DB update failed: only \" + result + \" of \" + ids.size() + \" updated. Table: \" + tableName + \", IDs:\"\n                        + ids);\n            }\n            return result == ids.size();\n        } finally {\n            stmt.close();\n        }\n    }","id":7227,"modified_method":"private boolean dbBatchedAppendingUpdate(Connection connection, TableMetaData tmd, List<String> ids, Long modified,\n            boolean setModifiedConditionally,\n            String appendData) throws SQLException {\n        StringBuilder t = new StringBuilder();\n        t.append(\"update \" + tmd.getName() + \" set \");\n        t.append(setModifiedConditionally ? \"MODIFIED = case when ? > MODIFIED then ? else MODIFIED end, \" : \"MODIFIED = ?, \");\n        t.append(\"MODCOUNT = MODCOUNT + 1, DSIZE = DSIZE + ?, \");\n        t.append(\"DATA = \" + this.db.getConcatQueryString(tmd.getDataLimitInOctets(), appendData.length()) + \" \");\n        t.append(\"where ID in (\");\n        for (int i = 0; i < ids.size(); i++) {\n            if (i != 0) {\n                t.append(',');\n            }\n            t.append('?');\n        }\n        t.append(\")\");\n        PreparedStatement stmt = connection.prepareStatement(t.toString());\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            if (setModifiedConditionally) {\n                stmt.setObject(si++, modified, Types.BIGINT);\n            }\n            stmt.setObject(si++, 1 + appendData.length(), Types.BIGINT);\n            stmt.setString(si++, \",\" + appendData);\n            for (String id : ids) {\n                setIdInStatement(tmd, stmt, si++, id);\n            }\n            int result = stmt.executeUpdate();\n            if (result != ids.size()) {\n                LOG.debug(\"DB update failed: only \" + result + \" of \" + ids.size() + \" updated. Table: \" + tmd.getName() + \", IDs:\"\n                        + ids);\n            }\n            return result == ids.size();\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@CheckForNull\n    private <T extends Document> T readDocumentUncached(Collection<T> collection, String id, NodeDocument cachedDoc) {\n        Connection connection = null;\n        String tableName = getTable(collection);\n        try {\n            long lastmodcount = -1;\n            if (cachedDoc != null) {\n                lastmodcount = modcountOf(cachedDoc);\n            }\n            connection = this.ch.getROConnection();\n            RDBRow row = dbRead(connection, tableName, id, lastmodcount);\n            connection.commit();\n            if (row == null) {\n                return null;\n            } else {\n                if (lastmodcount == row.getModcount()) {\n                    // we can re-use the cached document\n                    cachedDoc.markUpToDate(System.currentTimeMillis());\n                    return castAsT(cachedDoc);\n                } else {\n                    return convertFromDBObject(collection, row);\n                }\n            }\n        } catch (Exception ex) {\n            throw new DocumentStoreException(ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","id":7228,"modified_method":"@CheckForNull\n    private <T extends Document> T readDocumentUncached(Collection<T> collection, String id, NodeDocument cachedDoc) {\n        Connection connection = null;\n        TableMetaData tmd = getTable(collection);\n        try {\n            long lastmodcount = -1;\n            if (cachedDoc != null) {\n                lastmodcount = modcountOf(cachedDoc);\n            }\n            connection = this.ch.getROConnection();\n            RDBRow row = dbRead(connection, tmd, id, lastmodcount);\n            connection.commit();\n            if (row == null) {\n                return null;\n            } else {\n                if (lastmodcount == row.getModcount()) {\n                    // we can re-use the cached document\n                    cachedDoc.markUpToDate(System.currentTimeMillis());\n                    return castAsT(cachedDoc);\n                } else {\n                    return convertFromDBObject(collection, row);\n                }\n            }\n        } catch (Exception ex) {\n            throw new DocumentStoreException(ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> boolean updateDocument(@Nonnull Collection<T> collection, @Nonnull T document,\n            @Nonnull UpdateOp update, Long oldmodcount) {\n        Connection connection = null;\n        String tableName = getTable(collection);\n        String data = null;\n        try {\n            connection = this.ch.getRWConnection();\n            Operation modOperation = update.getChanges().get(MODIFIEDKEY);\n            long modified = getModifiedFromOperation(modOperation);\n            boolean modifiedIsConditional = modOperation == null || modOperation.type != UpdateOp.Operation.Type.SET;\n            Number flagB = (Number) document.get(NodeDocument.HAS_BINARY_FLAG);\n            Boolean hasBinary = flagB != null && flagB.intValue() == NodeDocument.HAS_BINARY_VAL;\n            Boolean flagD = (Boolean) document.get(NodeDocument.DELETED_ONCE);\n            Boolean deletedOnce = flagD != null && flagD.booleanValue();\n            Long modcount = (Long) document.get(MODCOUNT);\n            Long cmodcount = (Long) document.get(COLLISIONSMODCOUNT);\n            boolean success = false;\n\n            // every 16th update is a full rewrite\n            if (isAppendableUpdate(update) && modcount % 16 != 0) {\n                String appendData = SR.asString(update);\n                if (appendData.length() < this.dataLimitInOctets / CHAR2OCTETRATIO) {\n                    try {\n                        success = dbAppendingUpdate(connection, tableName, document.getId(), modified, modifiedIsConditional, hasBinary, deletedOnce,\n                                modcount, cmodcount, oldmodcount, appendData);\n                        connection.commit();\n                    } catch (SQLException ex) {\n                        continueIfStringOverflow(ex);\n                        this.ch.rollbackConnection(connection);\n                        success = false;\n                    }\n                }\n            }\n            if (!success) {\n                data = SR.asString(document);\n                success = dbUpdate(connection, tableName, document.getId(), modified, hasBinary, deletedOnce, modcount, cmodcount,\n                        oldmodcount, data);\n                connection.commit();\n            }\n            return success;\n        } catch (SQLException ex) {\n            this.ch.rollbackConnection(connection);\n            String addDiags = \"\";\n            if (RDBJDBCTools.matchesSQLState(ex, \"22\", \"72\")) {\n                byte[] bytes = asBytes(data);\n                addDiags = String.format(\" (DATA size in Java characters: %d, in octets: %d, computed character limit: %d)\",\n                        data.length(), bytes.length, this.dataLimitInOctets / CHAR2OCTETRATIO);\n            }\n            String message = String.format(\"Update for %s failed%s\", document.getId(), addDiags);\n            LOG.debug(message, ex);\n            throw new DocumentStoreException(message, ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","id":7229,"modified_method":"private <T extends Document> boolean updateDocument(@Nonnull Collection<T> collection, @Nonnull T document,\n            @Nonnull UpdateOp update, Long oldmodcount) {\n        Connection connection = null;\n        TableMetaData tmd = getTable(collection);\n        String data = null;\n        try {\n            connection = this.ch.getRWConnection();\n            Operation modOperation = update.getChanges().get(MODIFIEDKEY);\n            long modified = getModifiedFromOperation(modOperation);\n            boolean modifiedIsConditional = modOperation == null || modOperation.type != UpdateOp.Operation.Type.SET;\n            Number flagB = (Number) document.get(NodeDocument.HAS_BINARY_FLAG);\n            Boolean hasBinary = flagB != null && flagB.intValue() == NodeDocument.HAS_BINARY_VAL;\n            Boolean flagD = (Boolean) document.get(NodeDocument.DELETED_ONCE);\n            Boolean deletedOnce = flagD != null && flagD.booleanValue();\n            Long modcount = (Long) document.get(MODCOUNT);\n            Long cmodcount = (Long) document.get(COLLISIONSMODCOUNT);\n            boolean success = false;\n\n            // every 16th update is a full rewrite\n            if (isAppendableUpdate(update) && modcount % 16 != 0) {\n                String appendData = SR.asString(update);\n                if (appendData.length() < tmd.getDataLimitInOctets() / CHAR2OCTETRATIO) {\n                    try {\n                        success = dbAppendingUpdate(connection, tmd, document.getId(), modified, modifiedIsConditional, hasBinary, deletedOnce,\n                                modcount, cmodcount, oldmodcount, appendData);\n                        connection.commit();\n                    } catch (SQLException ex) {\n                        continueIfStringOverflow(ex);\n                        this.ch.rollbackConnection(connection);\n                        success = false;\n                    }\n                }\n            }\n            if (!success) {\n                data = SR.asString(document);\n                success = dbUpdate(connection, tmd, document.getId(), modified, hasBinary, deletedOnce, modcount, cmodcount,\n                        oldmodcount, data);\n                connection.commit();\n            }\n            return success;\n        } catch (SQLException ex) {\n            this.ch.rollbackConnection(connection);\n            String addDiags = \"\";\n            if (RDBJDBCTools.matchesSQLState(ex, \"22\", \"72\")) {\n                byte[] bytes = asBytes(data);\n                addDiags = String.format(\" (DATA size in Java characters: %d, in octets: %d, computed character limit: %d)\",\n                        data.length(), bytes.length, tmd.getDataLimitInOctets() / CHAR2OCTETRATIO);\n            }\n            String message = String.format(\"Update for %s failed%s\", document.getId(), addDiags);\n            LOG.debug(message, ex);\n            throw new DocumentStoreException(message, ex);\n        } finally {\n            this.ch.closeConnection(connection);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private List<RDBRow> dbQuery(Connection connection, String tableName, String minId, String maxId, String indexedProperty,\n            long startValue, int limit) throws SQLException {\n        boolean noLowerBound = tableName.equals(this.tnNodes) && minId.equals(NodeDocument.MIN_ID_VALUE);\n        boolean noUpperBound = tableName.equals(this.tnNodes) && maxId.equals(NodeDocument.MAX_ID_VALUE);\n        long start = System.currentTimeMillis();\n        StringBuilder selectClause = new StringBuilder();\n        StringBuilder whereClause = new StringBuilder();\n        if (limit != Integer.MAX_VALUE && this.db.getFetchFirstSyntax() == FETCHFIRSTSYNTAX.TOP) {\n            selectClause.append(\"TOP \" + limit +  \" \");\n        }\n        selectClause.append(\"ID, MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from \").append(tableName);\n\n        // dynamically build where clause\n        String whereSep = \"\";\n        if (!noLowerBound) {\n            whereClause.append(\"ID > ?\");\n            whereSep = \" and \";\n        }\n        if (!noUpperBound) {\n            whereClause.append(whereSep).append(\"ID < ?\");\n            whereSep = \" and \";\n        }\n\n        if (indexedProperty != null) {\n            if (MODIFIED.equals(indexedProperty)) {\n                whereClause.append(whereSep).append(\"MODIFIED >= ?\");\n            } else if (NodeDocument.HAS_BINARY_FLAG.equals(indexedProperty)) {\n                if (startValue != NodeDocument.HAS_BINARY_VAL) {\n                    throw new DocumentStoreException(\"unsupported value for property \" + NodeDocument.HAS_BINARY_FLAG);\n                }\n                whereClause.append(whereSep).append(\"HASBINARY = 1\");\n            } else if (NodeDocument.DELETED_ONCE.equals(indexedProperty)) {\n                if (startValue != 1) {\n                    throw new DocumentStoreException(\"unsupported value for property \" + NodeDocument.DELETED_ONCE);\n                }\n                whereClause.append(whereSep).append(\"DELETEDONCE = 1\");\n            } else {\n                throw new DocumentStoreException(\"unsupported indexed property: \" + indexedProperty);\n            }\n        }\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"select \").append(selectClause);\n        if (whereClause.length() != 0) {\n            query.append(\" where \").append(whereClause);\n        }\n\n        query.append(\" order by ID\");\n\n        if (limit != Integer.MAX_VALUE) {\n            switch (this.db.getFetchFirstSyntax()) {\n                case LIMIT:\n                    query.append(\" LIMIT \" + limit);\n                    break;\n                case FETCHFIRST:\n                    query.append(\" FETCH FIRST \" + limit + \" ROWS ONLY\");\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        PreparedStatement stmt = connection.prepareStatement(query.toString());\n        List<RDBRow> result = new ArrayList<RDBRow>();\n        long dataTotal = 0, bdataTotal = 0;\n        try {\n            int si = 1;\n            if (!noLowerBound) {\n                setIdInStatement(stmt, si++, minId);\n            }\n            if (!noUpperBound) {\n                setIdInStatement(stmt, si++, maxId);\n            }\n\n            if (MODIFIED.equals(indexedProperty)) {\n                stmt.setLong(si++, startValue);\n            }\n            if (limit != Integer.MAX_VALUE) {\n                stmt.setFetchSize(limit);\n            }\n            ResultSet rs = stmt.executeQuery();\n            while (rs.next() && result.size() < limit) {\n                String id = getIdFromRS(rs, 1);\n\n                if (id.compareTo(minId) < 0 || id.compareTo(maxId) > 0) {\n                    throw new DocumentStoreException(\"unexpected query result: '\" + minId + \"' < '\" + id + \"' < '\" + maxId\n                            + \"' - broken DB collation?\");\n                }\n                long modified = rs.getLong(2);\n                long modcount = rs.getLong(3);\n                long cmodcount = rs.getLong(4);\n                long hasBinary = rs.getLong(5);\n                long deletedOnce = rs.getLong(6);\n                String data = rs.getString(7);\n                byte[] bdata = rs.getBytes(8);\n                result.add(new RDBRow(id, hasBinary == 1, deletedOnce == 1, modified, modcount, cmodcount, data, bdata));\n                dataTotal += data.length();\n                bdataTotal += bdata == null ? 0 : bdata.length;\n            }\n        } finally {\n            stmt.close();\n        }\n\n        long elapsed = System.currentTimeMillis() - start;\n        if (QUERYHITSLIMIT != 0 && result.size() > QUERYHITSLIMIT) {\n            String message = String.format(\"Potentially excessive query with %d hits (limited to %d, configured QUERYHITSLIMIT %d), elapsed time %dms, params minid '%s' maxid '%s' indexedProperty %s startValue %d limit %d. Check calling method.\",\n                    result.size(), limit, QUERYHITSLIMIT, elapsed, minId, maxId, indexedProperty, startValue, limit);\n            LOG.info(message, new Exception(\"call stack\"));\n        }\n        else if (QUERYTIMELIMIT != 0 && elapsed > QUERYTIMELIMIT) {\n            String message = String.format(\"Long running query with %d hits (limited to %d), elapsed time %dms (configured QUERYTIMELIMIT %d), params minid '%s' maxid '%s' indexedProperty %s startValue %d limit %d. Read %d chars from DATA and %d bytes from BDATA. Check calling method.\",\n                    result.size(), limit, elapsed, QUERYTIMELIMIT, minId, maxId, indexedProperty, startValue, limit, dataTotal, bdataTotal);\n            LOG.info(message, new Exception(\"call stack\"));\n        }\n\n        return result;\n    }","id":7230,"modified_method":"private List<RDBRow> dbQuery(Connection connection, TableMetaData tmd, String minId, String maxId, String indexedProperty,\n            long startValue, int limit) throws SQLException {\n        long start = System.currentTimeMillis();\n        StringBuilder selectClause = new StringBuilder();\n        StringBuilder whereClause = new StringBuilder();\n        if (limit != Integer.MAX_VALUE && this.db.getFetchFirstSyntax() == FETCHFIRSTSYNTAX.TOP) {\n            selectClause.append(\"TOP \" + limit +  \" \");\n        }\n        selectClause.append(\"ID, MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from \").append(tmd.getName());\n\n        // dynamically build where clause\n        String whereSep = \"\";\n        if (minId != null) {\n            whereClause.append(\"ID > ?\");\n            whereSep = \" and \";\n        }\n        if (maxId != null) {\n            whereClause.append(whereSep).append(\"ID < ?\");\n            whereSep = \" and \";\n        }\n\n        if (indexedProperty != null) {\n            if (MODIFIED.equals(indexedProperty)) {\n                whereClause.append(whereSep).append(\"MODIFIED >= ?\");\n            } else if (NodeDocument.HAS_BINARY_FLAG.equals(indexedProperty)) {\n                if (startValue != NodeDocument.HAS_BINARY_VAL) {\n                    throw new DocumentStoreException(\"unsupported value for property \" + NodeDocument.HAS_BINARY_FLAG);\n                }\n                whereClause.append(whereSep).append(\"HASBINARY = 1\");\n            } else if (NodeDocument.DELETED_ONCE.equals(indexedProperty)) {\n                if (startValue != 1) {\n                    throw new DocumentStoreException(\"unsupported value for property \" + NodeDocument.DELETED_ONCE);\n                }\n                whereClause.append(whereSep).append(\"DELETEDONCE = 1\");\n            } else {\n                throw new DocumentStoreException(\"unsupported indexed property: \" + indexedProperty);\n            }\n        }\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"select \").append(selectClause);\n        if (whereClause.length() != 0) {\n            query.append(\" where \").append(whereClause);\n        }\n\n        query.append(\" order by ID\");\n\n        if (limit != Integer.MAX_VALUE) {\n            switch (this.db.getFetchFirstSyntax()) {\n                case LIMIT:\n                    query.append(\" LIMIT \" + limit);\n                    break;\n                case FETCHFIRST:\n                    query.append(\" FETCH FIRST \" + limit + \" ROWS ONLY\");\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        PreparedStatement stmt = connection.prepareStatement(query.toString());\n        List<RDBRow> result = new ArrayList<RDBRow>();\n        long dataTotal = 0, bdataTotal = 0;\n        try {\n            int si = 1;\n            if (minId != null) {\n                setIdInStatement(tmd, stmt, si++, minId);\n            }\n            if (maxId != null) {\n                setIdInStatement(tmd, stmt, si++, maxId);\n            }\n\n            if (MODIFIED.equals(indexedProperty)) {\n                stmt.setLong(si++, startValue);\n            }\n            if (limit != Integer.MAX_VALUE) {\n                stmt.setFetchSize(limit);\n            }\n            ResultSet rs = stmt.executeQuery();\n            while (rs.next() && result.size() < limit) {\n                String id = getIdFromRS(tmd, rs, 1);\n\n                if ((minId != null && id.compareTo(minId) < 0) || (maxId != null && id.compareTo(maxId) > 0)) {\n                    throw new DocumentStoreException(\n                            \"unexpected query result: '\" + minId + \"' < '\" + id + \"' < '\" + maxId + \"' - broken DB collation?\");\n                }\n                long modified = rs.getLong(2);\n                long modcount = rs.getLong(3);\n                long cmodcount = rs.getLong(4);\n                long hasBinary = rs.getLong(5);\n                long deletedOnce = rs.getLong(6);\n                String data = rs.getString(7);\n                byte[] bdata = rs.getBytes(8);\n                result.add(new RDBRow(id, hasBinary == 1, deletedOnce == 1, modified, modcount, cmodcount, data, bdata));\n                dataTotal += data.length();\n                bdataTotal += bdata == null ? 0 : bdata.length;\n            }\n        } finally {\n            stmt.close();\n        }\n\n        long elapsed = System.currentTimeMillis() - start;\n        if (QUERYHITSLIMIT != 0 && result.size() > QUERYHITSLIMIT) {\n            String message = String.format(\"Potentially excessive query with %d hits (limited to %d, configured QUERYHITSLIMIT %d), elapsed time %dms, params minid '%s' maxid '%s' indexedProperty %s startValue %d limit %d. Check calling method.\",\n                    result.size(), limit, QUERYHITSLIMIT, elapsed, minId, maxId, indexedProperty, startValue, limit);\n            LOG.info(message, new Exception(\"call stack\"));\n        }\n        else if (QUERYTIMELIMIT != 0 && elapsed > QUERYTIMELIMIT) {\n            String message = String.format(\"Long running query with %d hits (limited to %d), elapsed time %dms (configured QUERYTIMELIMIT %d), params minid '%s' maxid '%s' indexedProperty %s startValue %d limit %d. Read %d chars from DATA and %d bytes from BDATA. Check calling method.\",\n                    result.size(), limit, elapsed, QUERYTIMELIMIT, minId, maxId, indexedProperty, startValue, limit, dataTotal, bdataTotal);\n            LOG.info(message, new Exception(\"call stack\"));\n        }\n\n        return result;\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public long determineServerTimeDifferenceMillis() {\n        Connection connection = null;\n        PreparedStatement stmt = null;\n        ResultSet rs = null;\n        String tableName = getTable(Collection.NODES);\n        long result;\n        try {\n            connection = this.ch.getROConnection();\n            String t = \"select \";\n            if (this.db.getFetchFirstSyntax() == FETCHFIRSTSYNTAX.TOP) {\n                t += \"TOP 1 \";\n            }\n            t += this.db.getCurrentTimeStampInMsSyntax() + \" from \" + tableName;\n            switch (this.db.getFetchFirstSyntax()) {\n                case LIMIT:\n                    t += \" LIMIT 1\";\n                    break;\n                case FETCHFIRST:\n                    t += \" FETCH FIRST 1 ROWS ONLY\";\n                    break;\n                default:\n                    break;\n            }\n\n            stmt = connection.prepareStatement(t);\n            long start = System.currentTimeMillis();\n            rs = stmt.executeQuery();\n            if (rs.next()) {\n                long roundtrip = System.currentTimeMillis() - start;\n                long serverTime = rs.getTimestamp(1).getTime();\n                result = (start + roundtrip / 2) - serverTime;\n            } else {\n                throw new DocumentStoreException(\"failed to determine server timestamp\");\n            }\n            connection.commit();\n            return result;\n        } catch (Exception ex) {\n            LOG.error(\"\", ex);\n            throw new DocumentStoreException(ex);\n        } finally {\n            closeResultSet(rs);\n            closeStatement(stmt);\n            this.ch.closeConnection(connection);\n        }\n    }","id":7231,"modified_method":"@Override\n    public long determineServerTimeDifferenceMillis() {\n        Connection connection = null;\n        PreparedStatement stmt = null;\n        ResultSet rs = null;\n        String tableName = getTable(Collection.NODES).getName();\n        long result;\n        try {\n            connection = this.ch.getROConnection();\n            String t = \"select \";\n            if (this.db.getFetchFirstSyntax() == FETCHFIRSTSYNTAX.TOP) {\n                t += \"TOP 1 \";\n            }\n            t += this.db.getCurrentTimeStampInMsSyntax() + \" from \" + tableName;\n            switch (this.db.getFetchFirstSyntax()) {\n                case LIMIT:\n                    t += \" LIMIT 1\";\n                    break;\n                case FETCHFIRST:\n                    t += \" FETCH FIRST 1 ROWS ONLY\";\n                    break;\n                default:\n                    break;\n            }\n\n            stmt = connection.prepareStatement(t);\n            long start = System.currentTimeMillis();\n            rs = stmt.executeQuery();\n            if (rs.next()) {\n                long roundtrip = System.currentTimeMillis() - start;\n                long serverTime = rs.getTimestamp(1).getTime();\n                result = (start + roundtrip / 2) - serverTime;\n            } else {\n                throw new DocumentStoreException(\"failed to determine server timestamp\");\n            }\n            connection.commit();\n            return result;\n        } catch (Exception ex) {\n            LOG.error(\"\", ex);\n            throw new DocumentStoreException(ex);\n        } finally {\n            closeResultSet(rs);\n            closeStatement(stmt);\n            this.ch.closeConnection(connection);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> boolean dbInsert(Connection connection, String tableName, List<T> documents) throws SQLException {\n\n        PreparedStatement stmt = connection.prepareStatement(\"insert into \" + tableName +\n                \"(ID, MODIFIED, HASBINARY, DELETEDONCE, MODCOUNT, CMODCOUNT, DSIZE, DATA, BDATA) \" +\n                \"values (?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n\n        try {\n            for (T document : documents) {\n                String data = SR.asString(document);\n                String id = document.getId();\n                Number hasBinary = (Number) document.get(NodeDocument.HAS_BINARY_FLAG);\n                Boolean deletedOnce = (Boolean) document.get(NodeDocument.DELETED_ONCE);\n                Long cmodcount = (Long) document.get(COLLISIONSMODCOUNT);\n\n                int si = 1;\n                setIdInStatement(stmt, si++, id);\n                stmt.setObject(si++, document.get(MODIFIED), Types.BIGINT);\n                stmt.setObject(si++, (hasBinary != null && hasBinary.intValue() == NodeDocument.HAS_BINARY_VAL) ? 1 : 0, Types.SMALLINT);\n                stmt.setObject(si++, (deletedOnce != null && deletedOnce) ? 1 : 0, Types.SMALLINT);\n                stmt.setObject(si++, document.get(MODCOUNT), Types.BIGINT);\n                stmt.setObject(si++, cmodcount == null ? Long.valueOf(0) : cmodcount, Types.BIGINT);\n                stmt.setObject(si++, data.length(), Types.BIGINT);\n                if (data.length() < this.dataLimitInOctets / CHAR2OCTETRATIO) {\n                    stmt.setString(si++, data);\n                    stmt.setBinaryStream(si++, null, 0);\n                } else {\n                    stmt.setString(si++, \"\\\"blob\\\"\");\n                    byte[] bytes = asBytes(data);\n                    stmt.setBytes(si++, bytes);\n                }\n                stmt.addBatch();\n            }\n            int[] results = stmt.executeBatch();\n            boolean success = true;\n            for (int i = 0; i < documents.size(); i++) {\n                int result = results[i];\n                if (result != 1 && result != Statement.SUCCESS_NO_INFO) {\n                    LOG.error(\"DB insert failed for {}: {}\", tableName, documents.get(i).getId());\n                    success = false;\n                }\n            }\n            return success;\n        } finally {\n            stmt.close();\n        }\n    }","id":7232,"modified_method":"private <T extends Document> boolean dbInsert(Connection connection, TableMetaData tmd, List<T> documents) throws SQLException {\n\n        PreparedStatement stmt = connection.prepareStatement(\"insert into \" + tmd.getName() +\n                \"(ID, MODIFIED, HASBINARY, DELETEDONCE, MODCOUNT, CMODCOUNT, DSIZE, DATA, BDATA) \" +\n                \"values (?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n\n        try {\n            for (T document : documents) {\n                String data = SR.asString(document);\n                String id = document.getId();\n                Number hasBinary = (Number) document.get(NodeDocument.HAS_BINARY_FLAG);\n                Boolean deletedOnce = (Boolean) document.get(NodeDocument.DELETED_ONCE);\n                Long cmodcount = (Long) document.get(COLLISIONSMODCOUNT);\n\n                int si = 1;\n                setIdInStatement(tmd, stmt, si++, id);\n                stmt.setObject(si++, document.get(MODIFIED), Types.BIGINT);\n                stmt.setObject(si++, (hasBinary != null && hasBinary.intValue() == NodeDocument.HAS_BINARY_VAL) ? 1 : 0, Types.SMALLINT);\n                stmt.setObject(si++, (deletedOnce != null && deletedOnce) ? 1 : 0, Types.SMALLINT);\n                stmt.setObject(si++, document.get(MODCOUNT), Types.BIGINT);\n                stmt.setObject(si++, cmodcount == null ? Long.valueOf(0) : cmodcount, Types.BIGINT);\n                stmt.setObject(si++, data.length(), Types.BIGINT);\n                if (data.length() < tmd.getDataLimitInOctets() / CHAR2OCTETRATIO) {\n                    stmt.setString(si++, data);\n                    stmt.setBinaryStream(si++, null, 0);\n                } else {\n                    stmt.setString(si++, \"\\\"blob\\\"\");\n                    byte[] bytes = asBytes(data);\n                    stmt.setBytes(si++, bytes);\n                }\n                stmt.addBatch();\n            }\n            int[] results = stmt.executeBatch();\n            boolean success = true;\n            for (int i = 0; i < documents.size(); i++) {\n                int result = results[i];\n                if (result != 1 && result != Statement.SUCCESS_NO_INFO) {\n                    LOG.error(\"DB insert failed for {}: {}\", tmd.getName(), documents.get(i).getId());\n                    success = false;\n                }\n            }\n            return success;\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@CheckForNull\n    private <T extends Document> void internalUpdate(Collection<T> collection, List<String> ids, UpdateOp update) {\n\n        if (isAppendableUpdate(update) && !requiresPreviousState(update)) {\n            Operation modOperation = update.getChanges().get(MODIFIEDKEY);\n            long modified = getModifiedFromOperation(modOperation);\n            boolean modifiedIsConditional = modOperation == null || modOperation.type != UpdateOp.Operation.Type.SET;\n            String appendData = SR.asString(update);\n\n            for (List<String> chunkedIds : Lists.partition(ids, CHUNKSIZE)) {\n                // remember what we already have in the cache\n                Map<String, NodeDocument> cachedDocs = Collections.emptyMap();\n                if (collection == Collection.NODES) {\n                    cachedDocs = new HashMap<String, NodeDocument>();\n                    for (String key : chunkedIds) {\n                        cachedDocs.put(key, nodesCache.getIfPresent(new StringValue(key)));\n                    }\n                }\n\n                Connection connection = null;\n                String tableName = getTable(collection);\n                boolean success = false;\n                try {\n                    connection = this.ch.getRWConnection();\n                    success = dbBatchedAppendingUpdate(connection, tableName, chunkedIds, modified, modifiedIsConditional,\n                            appendData);\n                    connection.commit();\n                } catch (SQLException ex) {\n                    success = false;\n                    this.ch.rollbackConnection(connection);\n                } finally {\n                    this.ch.closeConnection(connection);\n                }\n                if (success) {\n                    for (Entry<String, NodeDocument> entry : cachedDocs.entrySet()) {\n                        T oldDoc = castAsT(entry.getValue());\n                        if (oldDoc == null) {\n                            String id = entry.getKey();\n                            // keep concurrently running queries from updating\n                            // the cache entry for this key\n                            for (QueryContext qp : qmap.values()) {\n                                qp.addKey(id);\n                            }\n                            // make sure concurrently loaded document is\n                            // invalidated\n                            nodesCache.invalidate(new StringValue(id));\n                        } else {\n                            T newDoc = applyChanges(collection, oldDoc, update, true);\n                            if (newDoc != null) {\n                                applyToCache((NodeDocument) oldDoc, (NodeDocument) newDoc);\n                            }\n                        }\n                    }\n                } else {\n                    for (String id : chunkedIds) {\n                        UpdateOp up = update.copy();\n                        up = up.shallowCopy(id);\n                        internalCreateOrUpdate(collection, up, false, true);\n                    }\n                }\n            }\n        } else {\n            for (String id : ids) {\n                UpdateOp up = update.copy();\n                up = up.shallowCopy(id);\n                internalCreateOrUpdate(collection, up, false, true);\n            }\n        }\n    }","id":7233,"modified_method":"@CheckForNull\n    private <T extends Document> void internalUpdate(Collection<T> collection, List<String> ids, UpdateOp update) {\n\n        if (isAppendableUpdate(update) && !requiresPreviousState(update)) {\n            Operation modOperation = update.getChanges().get(MODIFIEDKEY);\n            long modified = getModifiedFromOperation(modOperation);\n            boolean modifiedIsConditional = modOperation == null || modOperation.type != UpdateOp.Operation.Type.SET;\n            String appendData = SR.asString(update);\n\n            for (List<String> chunkedIds : Lists.partition(ids, CHUNKSIZE)) {\n                // remember what we already have in the cache\n                Map<String, NodeDocument> cachedDocs = Collections.emptyMap();\n                if (collection == Collection.NODES) {\n                    cachedDocs = new HashMap<String, NodeDocument>();\n                    for (String key : chunkedIds) {\n                        cachedDocs.put(key, nodesCache.getIfPresent(new StringValue(key)));\n                    }\n                }\n\n                Connection connection = null;\n                TableMetaData tmd = getTable(collection);\n                boolean success = false;\n                try {\n                    connection = this.ch.getRWConnection();\n                    success = dbBatchedAppendingUpdate(connection, tmd, chunkedIds, modified, modifiedIsConditional, appendData);\n                    connection.commit();\n                } catch (SQLException ex) {\n                    success = false;\n                    this.ch.rollbackConnection(connection);\n                } finally {\n                    this.ch.closeConnection(connection);\n                }\n                if (success) {\n                    for (Entry<String, NodeDocument> entry : cachedDocs.entrySet()) {\n                        T oldDoc = castAsT(entry.getValue());\n                        if (oldDoc == null) {\n                            String id = entry.getKey();\n                            // keep concurrently running queries from updating\n                            // the cache entry for this key\n                            for (QueryContext qp : qmap.values()) {\n                                qp.addKey(id);\n                            }\n                            // make sure concurrently loaded document is\n                            // invalidated\n                            nodesCache.invalidate(new StringValue(id));\n                        } else {\n                            T newDoc = applyChanges(collection, oldDoc, update, true);\n                            if (newDoc != null) {\n                                applyToCache((NodeDocument) oldDoc, (NodeDocument) newDoc);\n                            }\n                        }\n                    }\n                } else {\n                    for (String id : chunkedIds) {\n                        UpdateOp up = update.copy();\n                        up = up.shallowCopy(id);\n                        internalCreateOrUpdate(collection, up, false, true);\n                    }\n                }\n            }\n        } else {\n            for (String id : ids) {\n                UpdateOp up = update.copy();\n                up = up.shallowCopy(id);\n                internalCreateOrUpdate(collection, up, false, true);\n            }\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private String getIdFromRS(ResultSet rs, int idx) throws SQLException {\n        if (this.isIdBinary) {\n            try {\n                return new String(rs.getBytes(idx), \"UTF-8\");\n            } catch (UnsupportedEncodingException ex) {\n                LOG.error(\"UTF-8 not supported??\", ex);\n                throw new DocumentStoreException(ex);\n            }\n        } else {\n            return rs.getString(idx);\n        }\n    }","id":7234,"modified_method":"private static String getIdFromRS(TableMetaData tmd, ResultSet rs, int idx) throws SQLException {\n        if (tmd.isIdBinary()) {\n            try {\n                return new String(rs.getBytes(idx), \"UTF-8\");\n            } catch (UnsupportedEncodingException ex) {\n                LOG.error(\"UTF-8 not supported??\", ex);\n                throw new DocumentStoreException(ex);\n            }\n        } else {\n            return rs.getString(idx);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private boolean dbUpdate(Connection connection, String tableName, String id, Long modified, Boolean hasBinary,\n            Boolean deletedOnce, Long modcount, Long cmodcount, Long oldmodcount, String data) throws SQLException {\n        String t = \"update \"\n                + tableName\n                + \" set MODIFIED = ?, HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = ?, DATA = ?, BDATA = ? where ID = ?\";\n        if (oldmodcount != null) {\n            t += \" and MODCOUNT = ?\";\n        }\n        PreparedStatement stmt = connection.prepareStatement(t);\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            stmt.setObject(si++, hasBinary ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, deletedOnce ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, modcount, Types.BIGINT);\n            stmt.setObject(si++, cmodcount == null ? Long.valueOf(0) : cmodcount, Types.BIGINT);\n            stmt.setObject(si++, data.length(), Types.BIGINT);\n\n            if (data.length() < this.dataLimitInOctets / CHAR2OCTETRATIO) {\n                stmt.setString(si++, data);\n                stmt.setBinaryStream(si++, null, 0);\n            } else {\n                stmt.setString(si++, \"\\\"blob\\\"\");\n                byte[] bytes = asBytes(data);\n                stmt.setBytes(si++, bytes);\n            }\n\n            setIdInStatement(stmt, si++, id);\n\n            if (oldmodcount != null) {\n                stmt.setObject(si++, oldmodcount, Types.BIGINT);\n            }\n            int result = stmt.executeUpdate();\n            if (result != 1) {\n                LOG.debug(\"DB update failed for \" + tableName + \"/\" + id + \" with oldmodcount=\" + oldmodcount);\n            }\n            return result == 1;\n        } finally {\n            stmt.close();\n        }\n    }","id":7235,"modified_method":"private boolean dbUpdate(Connection connection, TableMetaData tmd, String id, Long modified, Boolean hasBinary,\n            Boolean deletedOnce, Long modcount, Long cmodcount, Long oldmodcount, String data) throws SQLException {\n        String t = \"update \"\n                + tmd.getName()\n                + \" set MODIFIED = ?, HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = ?, DATA = ?, BDATA = ? where ID = ?\";\n        if (oldmodcount != null) {\n            t += \" and MODCOUNT = ?\";\n        }\n        PreparedStatement stmt = connection.prepareStatement(t);\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            stmt.setObject(si++, hasBinary ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, deletedOnce ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, modcount, Types.BIGINT);\n            stmt.setObject(si++, cmodcount == null ? Long.valueOf(0) : cmodcount, Types.BIGINT);\n            stmt.setObject(si++, data.length(), Types.BIGINT);\n\n            if (data.length() < tmd.getDataLimitInOctets() / CHAR2OCTETRATIO) {\n                stmt.setString(si++, data);\n                stmt.setBinaryStream(si++, null, 0);\n            } else {\n                stmt.setString(si++, \"\\\"blob\\\"\");\n                byte[] bytes = asBytes(data);\n                stmt.setBytes(si++, bytes);\n            }\n\n            setIdInStatement(tmd, stmt, si++, id);\n\n            if (oldmodcount != null) {\n                stmt.setObject(si++, oldmodcount, Types.BIGINT);\n            }\n            int result = stmt.executeUpdate();\n            if (result != 1) {\n                LOG.debug(\"DB update failed for \" + tmd.getName() + \"/\" + id + \" with oldmodcount=\" + oldmodcount);\n            }\n            return result == 1;\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private int dbDelete(Connection connection, String tableName,\n                         Map<String, Map<Key, Condition>> toDelete)\n            throws SQLException, DocumentStoreException {\n        String or = \"\";\n        StringBuilder whereClause = new StringBuilder();\n        for (Entry<String, Map<Key, Condition>> entry : toDelete.entrySet()) {\n            whereClause.append(or);\n            or = \" or \";\n            whereClause.append(\"ID=?\");\n            for (Entry<Key, Condition> c : entry.getValue().entrySet()) {\n                if (!c.getKey().getName().equals(MODIFIED)) {\n                    throw new DocumentStoreException(\n                            \"Unsupported condition: \" + c);\n                }\n                whereClause.append(\" and MODIFIED\");\n                if (c.getValue().type == Condition.Type.EQUALS\n                        && c.getValue().value instanceof Long) {\n                    whereClause.append(\"=?\");\n                } else if (c.getValue().type == Condition.Type.EXISTS) {\n                    whereClause.append(\" is not null\");\n                } else {\n                    throw new DocumentStoreException(\n                            \"Unsupported condition: \" + c);\n                }\n            }\n        }\n\n        PreparedStatement stmt= connection.prepareStatement(\n                \"delete from \" + tableName + \" where \" + whereClause);\n        try {\n            int i = 1;\n            for (Entry<String, Map<Key, Condition>> entry : toDelete.entrySet()) {\n                setIdInStatement(stmt, i++, entry.getKey());\n                for (Entry<Key, Condition> c : entry.getValue().entrySet()) {\n                    if (c.getValue().type == Condition.Type.EQUALS) {\n                        stmt.setLong(i++, (Long) c.getValue().value);\n                    }\n                }\n            }\n            return stmt.executeUpdate();\n        } finally {\n            stmt.close();\n        }\n    }","id":7236,"modified_method":"private int dbDelete(Connection connection, TableMetaData tmd,\n                         Map<String, Map<Key, Condition>> toDelete)\n            throws SQLException, DocumentStoreException {\n        String or = \"\";\n        StringBuilder whereClause = new StringBuilder();\n        for (Entry<String, Map<Key, Condition>> entry : toDelete.entrySet()) {\n            whereClause.append(or);\n            or = \" or \";\n            whereClause.append(\"ID=?\");\n            for (Entry<Key, Condition> c : entry.getValue().entrySet()) {\n                if (!c.getKey().getName().equals(MODIFIED)) {\n                    throw new DocumentStoreException(\n                            \"Unsupported condition: \" + c);\n                }\n                whereClause.append(\" and MODIFIED\");\n                if (c.getValue().type == Condition.Type.EQUALS\n                        && c.getValue().value instanceof Long) {\n                    whereClause.append(\"=?\");\n                } else if (c.getValue().type == Condition.Type.EXISTS) {\n                    whereClause.append(\" is not null\");\n                } else {\n                    throw new DocumentStoreException(\n                            \"Unsupported condition: \" + c);\n                }\n            }\n        }\n\n        PreparedStatement stmt= connection.prepareStatement(\n                \"delete from \" + tmd.getName() + \" where \" + whereClause);\n        try {\n            int i = 1;\n            for (Entry<String, Map<Key, Condition>> entry : toDelete.entrySet()) {\n                setIdInStatement(tmd, stmt, i++, entry.getKey());\n                for (Entry<Key, Condition> c : entry.getValue().entrySet()) {\n                    if (c.getValue().type == Condition.Type.EQUALS) {\n                        stmt.setLong(i++, (Long) c.getValue().value);\n                    }\n                }\n            }\n            return stmt.executeUpdate();\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void createTableFor(Connection con, Collection<? extends Document> col, List<String> tablesCreated,\n            List<String> tablesPresent, StringBuilder diagnostics) throws SQLException {\n        String dbname = this.db.toString();\n        if (con.getMetaData().getURL() != null) {\n            dbname += \" (\" + con.getMetaData().getURL() + \")\";\n        }\n        String tableName = getTable(col);\n\n        PreparedStatement checkStatement = null;\n        ResultSet checkResultSet = null;\n        Statement creatStatement = null;\n        try {\n            checkStatement = con.prepareStatement(\"select * from \" + tableName + \" where ID = ?\");\n            checkStatement.setString(1, \"0:/\");\n            checkResultSet = checkStatement.executeQuery();\n\n            if (col.equals(Collection.NODES)) {\n                // try to discover size of DATA column\n                ResultSetMetaData met = checkResultSet.getMetaData();\n                obtainFlagsFromResultSetMeta(met);\n                String tableInfo = RDBJDBCTools.dumpResultSetMeta(met);\n                diagnostics.append(tableInfo);\n                String indexInfo = dumpIndexData(con.getMetaData(), met, tableName);\n                if (!indexInfo.isEmpty()) {\n                    diagnostics.append(\" \").append(indexInfo);\n                }\n            }\n            tablesPresent.add(tableName);\n        } catch (SQLException ex) {\n            // table does not appear to exist\n            con.rollback();\n\n            try {\n                creatStatement = con.createStatement();\n                creatStatement.execute(this.db.getTableCreationStatement(tableName));\n                creatStatement.close();\n\n                for (String ic : this.db.getIndexCreationStatements(tableName)) {\n                    creatStatement = con.createStatement();\n                    creatStatement.execute(ic);\n                    creatStatement.close();\n                }\n\n                con.commit();\n\n                tablesCreated.add(tableName);\n\n                if (col.equals(Collection.NODES)) {\n                    PreparedStatement pstmt = con.prepareStatement(\"select * from \" + tableName + \" where ID = ?\");\n                    pstmt.setString(1, \"0:/\");\n                    ResultSet rs = pstmt.executeQuery();\n                    ResultSetMetaData met = rs.getMetaData();\n                    obtainFlagsFromResultSetMeta(met);\n                    String tableInfo = RDBJDBCTools.dumpResultSetMeta(met);\n                    diagnostics.append(tableInfo);\n                    String indexInfo = dumpIndexData(con.getMetaData(), met, tableName);\n                    if (!indexInfo.isEmpty()) {\n                        diagnostics.append(\" \").append(indexInfo);\n                    }\n                }\n            }\n            catch (SQLException ex2) {\n                LOG.error(\"Failed to create table \" + tableName + \" in \" + dbname, ex2);\n                throw ex2;\n            }\n        }\n        finally {\n            closeResultSet(checkResultSet);\n            closeStatement(checkStatement);\n            closeStatement(creatStatement);\n        }\n    }","id":7237,"modified_method":"private void createTableFor(Connection con, Collection<? extends Document> col, TableMetaData tmd, List<String> tablesCreated,\n            List<String> tablesPresent, StringBuilder diagnostics) throws SQLException {\n        String dbname = this.db.toString();\n        if (con.getMetaData().getURL() != null) {\n            dbname += \" (\" + con.getMetaData().getURL() + \")\";\n        }\n        String tableName = tmd.getName();\n\n        PreparedStatement checkStatement = null;\n        ResultSet checkResultSet = null;\n        Statement creatStatement = null;\n        try {\n            checkStatement = con.prepareStatement(\"select * from \" + tableName + \" where ID = ?\");\n            checkStatement.setString(1, \"0:/\");\n            checkResultSet = checkStatement.executeQuery();\n\n            // try to discover size of DATA column\n            ResultSetMetaData met = checkResultSet.getMetaData();\n            obtainFlagsFromResultSetMeta(met, tmd);\n\n            if (col.equals(Collection.NODES)) {\n                String tableInfo = RDBJDBCTools.dumpResultSetMeta(met);\n                diagnostics.append(tableInfo);\n                String indexInfo = dumpIndexData(con.getMetaData(), met, tableName);\n                if (!indexInfo.isEmpty()) {\n                    diagnostics.append(\" \").append(indexInfo);\n                }\n            }\n            tablesPresent.add(tableName);\n        } catch (SQLException ex) {\n            // table does not appear to exist\n            con.rollback();\n\n            try {\n                creatStatement = con.createStatement();\n                creatStatement.execute(this.db.getTableCreationStatement(tableName));\n                creatStatement.close();\n\n                for (String ic : this.db.getIndexCreationStatements(tableName)) {\n                    creatStatement = con.createStatement();\n                    creatStatement.execute(ic);\n                    creatStatement.close();\n                }\n\n                con.commit();\n\n                tablesCreated.add(tableName);\n\n                if (col.equals(Collection.NODES)) {\n                    PreparedStatement pstmt = con.prepareStatement(\"select * from \" + tableName + \" where ID = ?\");\n                    pstmt.setString(1, \"0:/\");\n                    ResultSet rs = pstmt.executeQuery();\n                    ResultSetMetaData met = rs.getMetaData();\n                    obtainFlagsFromResultSetMeta(met, tmd);\n                    String tableInfo = RDBJDBCTools.dumpResultSetMeta(met);\n                    diagnostics.append(tableInfo);\n                    String indexInfo = dumpIndexData(con.getMetaData(), met, tableName);\n                    if (!indexInfo.isEmpty()) {\n                        diagnostics.append(\" \").append(indexInfo);\n                    }\n                }\n            }\n            catch (SQLException ex2) {\n                LOG.error(\"Failed to create table \" + tableName + \" in \" + dbname, ex2);\n                throw ex2;\n            }\n        }\n        finally {\n            closeResultSet(checkResultSet);\n            closeStatement(checkStatement);\n            closeStatement(creatStatement);\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private <T extends Document> String getTable(Collection<T> collection) {\n        if (collection == Collection.CLUSTER_NODES) {\n            return this.tnClusterNodes;\n        } else if (collection == Collection.NODES) {\n            return this.tnNodes;\n        } else if (collection == Collection.SETTINGS) {\n            return this.tnSettings;\n        } else if (collection == Collection.JOURNAL) {\n            return this.tnJournal;\n        } else {\n            throw new IllegalArgumentException(\"Unknown collection: \" + collection.toString());\n        }\n    }","id":7238,"modified_method":"@Nonnull\n    private <T extends Document> TableMetaData getTable(Collection<T> collection) {\n        TableMetaData tmd = this.tableMeta.get(collection);\n        if (tmd != null) {\n            return tmd;\n        } else {\n            throw new IllegalArgumentException(\"Unknown collection: \" + collection.toString());\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private boolean dbAppendingUpdate(Connection connection, String tableName, String id, Long modified,\n            boolean setModifiedConditionally, Boolean hasBinary, Boolean deletedOnce, Long modcount, Long cmodcount,\n            Long oldmodcount, String appendData) throws SQLException {\n        StringBuilder t = new StringBuilder();\n        t.append(\"update \" + tableName + \" set \");\n        t.append(setModifiedConditionally ? \"MODIFIED = case when ? > MODIFIED then ? else MODIFIED end, \" : \"MODIFIED = ?, \");\n        t.append(\"HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = DSIZE + ?, \");\n        t.append(\"DATA = \" + this.db.getConcatQueryString(this.dataLimitInOctets, appendData.length()) + \" \");\n        t.append(\"where ID = ?\");\n        if (oldmodcount != null) {\n            t.append(\" and MODCOUNT = ?\");\n        }\n        PreparedStatement stmt = connection.prepareStatement(t.toString());\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            if (setModifiedConditionally) {\n                stmt.setObject(si++, modified, Types.BIGINT);\n            }\n            stmt.setObject(si++, hasBinary ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, deletedOnce ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, modcount, Types.BIGINT);\n            stmt.setObject(si++, cmodcount == null ? Long.valueOf(0) : cmodcount, Types.BIGINT);\n            stmt.setObject(si++, 1 + appendData.length(), Types.BIGINT);\n            stmt.setString(si++, \",\" + appendData);\n            setIdInStatement(stmt, si++, id);\n\n            if (oldmodcount != null) {\n                stmt.setObject(si++, oldmodcount, Types.BIGINT);\n            }\n            int result = stmt.executeUpdate();\n            if (result != 1) {\n                LOG.debug(\"DB append update failed for \" + tableName + \"/\" + id + \" with oldmodcount=\" + oldmodcount);\n            }\n            return result == 1;\n        } finally {\n            stmt.close();\n        }\n    }","id":7239,"modified_method":"private boolean dbAppendingUpdate(Connection connection, TableMetaData tmd, String id, Long modified,\n            boolean setModifiedConditionally, Boolean hasBinary, Boolean deletedOnce, Long modcount, Long cmodcount,\n            Long oldmodcount, String appendData) throws SQLException {\n        StringBuilder t = new StringBuilder();\n        t.append(\"update \" + tmd.getName() + \" set \");\n        t.append(setModifiedConditionally ? \"MODIFIED = case when ? > MODIFIED then ? else MODIFIED end, \" : \"MODIFIED = ?, \");\n        t.append(\"HASBINARY = ?, DELETEDONCE = ?, MODCOUNT = ?, CMODCOUNT = ?, DSIZE = DSIZE + ?, \");\n        t.append(\"DATA = \" + this.db.getConcatQueryString(tmd.getDataLimitInOctets(), appendData.length()) + \" \");\n        t.append(\"where ID = ?\");\n        if (oldmodcount != null) {\n            t.append(\" and MODCOUNT = ?\");\n        }\n        PreparedStatement stmt = connection.prepareStatement(t.toString());\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            if (setModifiedConditionally) {\n                stmt.setObject(si++, modified, Types.BIGINT);\n            }\n            stmt.setObject(si++, hasBinary ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, deletedOnce ? 1 : 0, Types.SMALLINT);\n            stmt.setObject(si++, modcount, Types.BIGINT);\n            stmt.setObject(si++, cmodcount == null ? Long.valueOf(0) : cmodcount, Types.BIGINT);\n            stmt.setObject(si++, 1 + appendData.length(), Types.BIGINT);\n            stmt.setString(si++, \",\" + appendData);\n            setIdInStatement(tmd, stmt, si++, id);\n\n            if (oldmodcount != null) {\n                stmt.setObject(si++, oldmodcount, Types.BIGINT);\n            }\n            int result = stmt.executeUpdate();\n            if (result != 1) {\n                LOG.debug(\"DB append update failed for \" + tmd.getName() + \"/\" + id + \" with oldmodcount=\" + oldmodcount);\n            }\n            return result == 1;\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@CheckForNull\n    private RDBRow dbRead(Connection connection, String tableName, String id, long lastmodcount) throws SQLException {\n        PreparedStatement stmt;\n\n        boolean useCaseStatement = lastmodcount != -1 && this.db.allowsCaseInSelect();\n        if (useCaseStatement) {\n            // the case statement causes the actual row data not to be\n            // sent in case we already have it\n            stmt = connection\n                    .prepareStatement(\"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, case MODCOUNT when ? then null else DATA end as DATA, \"\n                            + \"case MODCOUNT when ? then null else BDATA end as BDATA from \" + tableName + \" where ID = ?\");\n        } else {\n            // either we don't have a previous version of the document\n            // or the database does not support CASE in SELECT\n            stmt = connection.prepareStatement(\"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from \"\n                    + tableName + \" where ID = ?\");\n        }\n\n        try {\n            int si = 1;\n            if (useCaseStatement) {\n                stmt.setLong(si++, lastmodcount);\n                stmt.setLong(si++, lastmodcount);\n            }\n            setIdInStatement(stmt, si, id);\n\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                long modified = rs.getLong(1);\n                long modcount = rs.getLong(2);\n                long cmodcount = rs.getLong(3);\n                long hasBinary = rs.getLong(4);\n                long deletedOnce = rs.getLong(5);\n                String data = rs.getString(6);\n                byte[] bdata = rs.getBytes(7);\n                return new RDBRow(id, hasBinary == 1, deletedOnce == 1, modified, modcount, cmodcount, data, bdata);\n            } else {\n                return null;\n            }\n        } catch (SQLException ex) {\n            LOG.error(\"attempting to read \" + id + \" (id length is \" + id.length() + \")\", ex);\n            // DB2 throws an SQLException for invalid keys; handle this more\n            // gracefully\n            if (\"22001\".equals(ex.getSQLState())) {\n                this.ch.rollbackConnection(connection);\n                return null;\n            } else {\n                throw (ex);\n            }\n        } finally {\n            stmt.close();\n        }\n    }","id":7240,"modified_method":"@CheckForNull\n    private RDBRow dbRead(Connection connection, TableMetaData tmd, String id, long lastmodcount) throws SQLException {\n        PreparedStatement stmt;\n\n        boolean useCaseStatement = lastmodcount != -1 && this.db.allowsCaseInSelect();\n        if (useCaseStatement) {\n            // the case statement causes the actual row data not to be\n            // sent in case we already have it\n            stmt = connection\n                    .prepareStatement(\"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, case MODCOUNT when ? then null else DATA end as DATA, \"\n                            + \"case MODCOUNT when ? then null else BDATA end as BDATA from \" + tmd.getName() + \" where ID = ?\");\n        } else {\n            // either we don't have a previous version of the document\n            // or the database does not support CASE in SELECT\n            stmt = connection.prepareStatement(\"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, DATA, BDATA from \"\n                    + tmd.getName() + \" where ID = ?\");\n        }\n\n        try {\n            int si = 1;\n            if (useCaseStatement) {\n                stmt.setLong(si++, lastmodcount);\n                stmt.setLong(si++, lastmodcount);\n            }\n            setIdInStatement(tmd, stmt, si, id);\n\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                long modified = rs.getLong(1);\n                long modcount = rs.getLong(2);\n                long cmodcount = rs.getLong(3);\n                long hasBinary = rs.getLong(4);\n                long deletedOnce = rs.getLong(5);\n                String data = rs.getString(6);\n                byte[] bdata = rs.getBytes(7);\n                return new RDBRow(id, hasBinary == 1, deletedOnce == 1, modified, modcount, cmodcount, data, bdata);\n            } else {\n                return null;\n            }\n        } catch (SQLException ex) {\n            LOG.error(\"attempting to read \" + id + \" (id length is \" + id.length() + \")\", ex);\n            // DB2 throws an SQLException for invalid keys; handle this more\n            // gracefully\n            if (\"22001\".equals(ex.getSQLState())) {\n                this.ch.rollbackConnection(connection);\n                return null;\n            } else {\n                throw (ex);\n            }\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6df8044874289db13f8b00507c19f8d4c00b4bf7","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"protected Action[] createActions() {\n    if (hasHelpAction ())\n      return new Action[]{getRefactorAction(), getPreviewAction(), getCancelAction(), getHelpAction()};\n    else\n      return new Action[]{getRefactorAction(), getPreviewAction(), getCancelAction()};\n  }","id":7241,"modified_method":"protected Action[] createActions() {\n    List<Action> actions = new ArrayList<Action>();\n    actions.add(getRefactorAction());\n    if(hasPreviewButton()) actions.add(getPreviewAction());\n    actions.add(getCancelAction());\n\n    if (hasHelpAction ())\n      actions.add(getHelpAction());\n    return actions.toArray(new Action[actions.size()]);\n  }","commit_id":"ab5338b3653b8dd437fecbe50e6c188db8b854a7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void doExecuteAction(@NotNull final Project project, @NotNull final PsiClass clazz, final Editor editor) {\n        logger.debug(\"+++ doExecuteAction - START +++\");\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Current project \" + project.getName());\n        }\n\n        final PsiElementClassMember[] dialogMembers = buildMembersToShow(clazz);\n\n        final MemberChooserBuilder<PsiElementClassMember> builder = new MemberChooserBuilder<PsiElementClassMember>(project);\n        final MemberChooserHeaderPanel header = new MemberChooserHeaderPanel(clazz);\n        builder.setHeaderPanel(header);\n        builder.allowEmptySelection(true);\n        builder.overrideAnnotationVisible(PsiUtil.isLanguageLevel5OrHigher(clazz));\n        builder.setTitle(\"Generate toString()\");\n\n        logger.debug(\"Displaying member chooser dialog\");\n        ApplicationManager.getApplication().invokeLater(new Runnable() {\n            public void run() {\n              if (project.isDisposed()) return;\n              final MemberChooser<PsiElementClassMember> dialog = builder.createBuilder(dialogMembers);\n              dialog.setCopyJavadocVisible(false);\n              dialog.selectElements(dialogMembers);\n              header.setChooser(dialog);\n                dialog.show();\n\n                if (DialogWrapper.OK_EXIT_CODE == dialog.getExitCode()) {\n                    Collection<PsiMember> selectedMembers = GenerationUtil.convertClassMembersToPsiMembers(dialog.getSelectedElements());\n\n                    final TemplateResource template = header.getSelectedTemplate();\n                    TemplatesManager.getInstance().setDefaultTemplate(template);\n\n                    if (template.isValidTemplate()) {\n                        GenerateToStringWorker.executeGenerateActionLater(clazz, editor, selectedMembers, template,\n                                                                          dialog.isInsertOverrideAnnotation());\n                    }\n                    else {\n                        HintManager.getInstance().showErrorHint(editor, \"toString() template '\" + template.getFileName() + \"' is invalid\");\n                    }\n                }\n            }\n        });\n\n        logger.debug(\"+++ doExecuteAction - END +++\");\n    }","id":7242,"modified_method":"private static void doExecuteAction(@NotNull final Project project, @NotNull final PsiClass clazz, final Editor editor) {\n        logger.debug(\"+++ doExecuteAction - START +++\");\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Current project \" + project.getName());\n        }\n\n        final PsiElementClassMember[] dialogMembers = buildMembersToShow(clazz);\n\n        final MemberChooserHeaderPanel header = new MemberChooserHeaderPanel(clazz);\n        logger.debug(\"Displaying member chooser dialog\");\n        ApplicationManager.getApplication().invokeLater(new Runnable() {\n            public void run() {\n              if (project.isDisposed()) return;\n                final MemberChooser<PsiElementClassMember> chooser =\n                    new MemberChooser<PsiElementClassMember>(dialogMembers, true, true, project, PsiUtil.isLanguageLevel5OrHigher(clazz), header) {\n                        @Nullable\n                        @Override\n                        protected String getHelpId() {\n                            return \"editing.altInsert.tostring\";\n                        }\n                    };\n                chooser.setTitle(\"Generate toString()\");\n\n                chooser.setCopyJavadocVisible(false);\n                chooser.selectElements(dialogMembers);\n                header.setChooser(chooser);\n                chooser.show();\n\n                if (DialogWrapper.OK_EXIT_CODE == chooser.getExitCode()) {\n                    Collection<PsiMember> selectedMembers = GenerationUtil.convertClassMembersToPsiMembers(chooser.getSelectedElements());\n\n                    final TemplateResource template = header.getSelectedTemplate();\n                    TemplatesManager.getInstance().setDefaultTemplate(template);\n\n                    if (template.isValidTemplate()) {\n                        GenerateToStringWorker.executeGenerateActionLater(clazz, editor, selectedMembers, template,\n                                                                          chooser.isInsertOverrideAnnotation());\n                    }\n                    else {\n                        HintManager.getInstance().showErrorHint(editor, \"toString() template '\" + template.getFileName() + \"' is invalid\");\n                    }\n                }\n            }\n        });\n\n        logger.debug(\"+++ doExecuteAction - END +++\");\n    }","commit_id":"78e51d0db4eb69d2907c2c118ba2fa74ce651b6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public MemberChooserHeaderPanel(final PsiClass clazz) {\n            super(new GridBagLayout());\n\n            final Collection<TemplateResource> templates = TemplatesManager.getInstance().getAllTemplates();\n            final TemplateResource[] all = templates.toArray(new TemplateResource[templates.size()]);\n\n            final JButton settingsButton = new JButton(\"Settings\");\n            settingsButton.setMnemonic(KeyEvent.VK_S);\n\n            comboBox = new ComboBox(all);\n            settingsButton.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent e) {\n                    final TemplatesPanel ui = new TemplatesPanel();\n                  Disposable disposable = Disposer.newDisposable();\n                  Configurable composite = new TabbedConfigurable(disposable) {\n                        protected List<Configurable> createConfigurables() {\n                            List<Configurable> res = new ArrayList<Configurable>();\n                            res.add(new GenerateToStringConfigurable(clazz.getProject()));\n                            res.add(ui);\n                            return res;\n                        }\n\n                        public String getDisplayName() {\n                            return \"toString() Generation Settings\";\n                        }\n\n                        public String getHelpTopic() {\n                            return null; // TODO:\n                        }\n\n                        @Override\n                        public void apply() throws ConfigurationException {\n                            super.apply();\n                            updateDialog(clazz, chooser);\n\n                            comboBox.removeAllItems();\n                            for (TemplateResource resource : TemplatesManager.getInstance().getAllTemplates()) {\n                              comboBox.addItem(resource);\n                            }\n                            comboBox.setSelectedItem(TemplatesManager.getInstance().getDefaultTemplate());\n                        }\n                    };\n\n                    ShowSettingsUtil.getInstance().editConfigurable(MemberChooserHeaderPanel.this, composite, new Runnable() {\n                        public void run() {\n                            ui.selectItem(TemplatesManager.getInstance().getDefaultTemplate());\n                        }\n                    });\n                  Disposer.dispose(disposable);\n                }\n            });\n\n            comboBox.setSelectedItem(TemplatesManager.getInstance().getDefaultTemplate());\n\n            final JLabel templatesLabel = new JLabel(\"Template: \");\n            templatesLabel.setDisplayedMnemonic('T');\n            templatesLabel.setLabelFor(comboBox);\n\n            final GridBagConstraints constraints = new GridBagConstraints();\n            constraints.anchor = GridBagConstraints.BASELINE;\n            constraints.gridx = 0;\n            add(templatesLabel, constraints);\n            constraints.gridx = 1;\n            constraints.weightx = 1.0;\n            constraints.fill = GridBagConstraints.HORIZONTAL;\n            add(comboBox, constraints);\n            constraints.gridx = 2;\n            constraints.weightx = 0.0;\n            add(settingsButton, constraints);\n        }","id":7243,"modified_method":"public MemberChooserHeaderPanel(final PsiClass clazz) {\n            super(new GridBagLayout());\n\n            final Collection<TemplateResource> templates = TemplatesManager.getInstance().getAllTemplates();\n            final TemplateResource[] all = templates.toArray(new TemplateResource[templates.size()]);\n\n            final JButton settingsButton = new JButton(\"Settings\");\n            settingsButton.setMnemonic(KeyEvent.VK_S);\n\n            comboBox = new ComboBox(all);\n            settingsButton.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent e) {\n                    final TemplatesPanel ui = new TemplatesPanel();\n                  Disposable disposable = Disposer.newDisposable();\n                  Configurable composite = new TabbedConfigurable(disposable) {\n                        protected List<Configurable> createConfigurables() {\n                            List<Configurable> res = new ArrayList<Configurable>();\n                            res.add(new GenerateToStringConfigurable(clazz.getProject()));\n                            res.add(ui);\n                            return res;\n                        }\n\n                        public String getDisplayName() {\n                            return \"toString() Generation Settings\";\n                        }\n\n                        public String getHelpTopic() {\n                            return \"editing.altInsert.tostring.settings\";\n                        }\n\n                        @Override\n                        public void apply() throws ConfigurationException {\n                            super.apply();\n                            updateDialog(clazz, chooser);\n\n                            comboBox.removeAllItems();\n                            for (TemplateResource resource : TemplatesManager.getInstance().getAllTemplates()) {\n                              comboBox.addItem(resource);\n                            }\n                            comboBox.setSelectedItem(TemplatesManager.getInstance().getDefaultTemplate());\n                        }\n                    };\n\n                    ShowSettingsUtil.getInstance().editConfigurable(MemberChooserHeaderPanel.this, composite, new Runnable() {\n                        public void run() {\n                            ui.selectItem(TemplatesManager.getInstance().getDefaultTemplate());\n                        }\n                    });\n                  Disposer.dispose(disposable);\n                }\n            });\n\n            comboBox.setSelectedItem(TemplatesManager.getInstance().getDefaultTemplate());\n\n            final JLabel templatesLabel = new JLabel(\"Template: \");\n            templatesLabel.setDisplayedMnemonic('T');\n            templatesLabel.setLabelFor(comboBox);\n\n            final GridBagConstraints constraints = new GridBagConstraints();\n            constraints.anchor = GridBagConstraints.BASELINE;\n            constraints.gridx = 0;\n            add(templatesLabel, constraints);\n            constraints.gridx = 1;\n            constraints.weightx = 1.0;\n            constraints.fill = GridBagConstraints.HORIZONTAL;\n            add(comboBox, constraints);\n            constraints.gridx = 2;\n            constraints.weightx = 0.0;\n            add(settingsButton, constraints);\n        }","commit_id":"78e51d0db4eb69d2907c2c118ba2fa74ce651b6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getHelpTopic() {\n      return null;\n  }","id":7244,"modified_method":"public String getHelpTopic() {\n      return \"editing.altInsert.tostring.settings\";\n  }","commit_id":"78e51d0db4eb69d2907c2c118ba2fa74ce651b6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void doHelpAction() {\n  }","id":7245,"modified_method":"@Override\n  protected void doHelpAction() {\n    if (getHelpId() == null) return;\n    super.doHelpAction();\n  }","commit_id":"78e51d0db4eb69d2907c2c118ba2fa74ce651b6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @NotNull\n  protected Action[] createActions() {\n    if (myAllowEmptySelection) {\n      return new Action[]{getOKAction(), new SelectNoneAction(), getCancelAction()};\n    }\n    else {\n      return new Action[]{getOKAction(), getCancelAction()};\n    }\n  }","id":7246,"modified_method":"@Override\n  @NotNull\n  protected Action[] createActions() {\n    final List<Action> actions = new ArrayList<Action>();\n    actions.add(getOKAction());\n    if (myAllowEmptySelection) {\n      actions.add(new SelectNoneAction());\n    }\n    actions.add(getCancelAction());\n    if (getHelpId() != null) {\n      actions.add(getHelpAction());\n    }\n    return actions.toArray(new Action[actions.size()]);\n  }","commit_id":"78e51d0db4eb69d2907c2c118ba2fa74ce651b6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n    DebuggerContextImpl debuggerContext = DebuggerAction.getDebuggerContext(e.getDataContext());\n    if(debuggerContext == null) {\n      return;\n    }\n\n    DebugProcessImpl debugProcess = debuggerContext.getDebugProcess();\n    if(debugProcess == null) {\n      return;\n    }\n\n    final Project project = debuggerContext.getProject();\n\n    final DebuggerTreeNodeImpl selectedNode = getSelectedNode(e.getDataContext());\n    if (selectedNode == null) {\n      return;\n    }\n    NodeDescriptorImpl descriptor = selectedNode.getDescriptor();\n    if(!(descriptor instanceof ValueDescriptorImpl /*&& ((ValueDescriptorImpl)descriptor).isArray()*/)) {\n      return;\n    }\n\n    final ArrayRenderer renderer = getArrayRenderer((ValueDescriptorImpl)descriptor)/*(ArrayRenderer)((ValueDescriptorImpl)selectedNode.getDescriptor()).getLastRenderer()*/;\n    if (renderer == null) {\n      return;\n    }\n\n    String title = createNodeTitle(\"\", selectedNode);\n    String label = selectedNode.toString();\n    int index = label.indexOf('=');\n    if (index > 0) {\n      title = title + \" \" + label.substring(index);\n    }\n    final ArrayRenderer clonedRenderer = renderer.clone();\n    SingleConfigurableEditor editor = new SingleConfigurableEditor(project, new NamedArrayConfigurable(title, clonedRenderer)) {\n      protected Action[] createActions() {\n        final String helpTopic = getConfigurable().getHelpTopic();\n        return (helpTopic != null)?\n               new Action[]{getOKAction(), getCancelAction(), getHelpAction()} : \n               new Action[]{getOKAction(), getCancelAction()};\n      }\n    };\n    editor.show();\n\n    if(editor.getExitCode() == DialogWrapper.OK_EXIT_CODE) {\n      debugProcess.getManagerThread().schedule(new SuspendContextCommandImpl(debuggerContext.getSuspendContext()) {\n          public void contextAction() throws Exception {\n            final ValueDescriptorImpl nodeDescriptor = (ValueDescriptorImpl)selectedNode.getDescriptor();\n            final Renderer lastRenderer = nodeDescriptor.getLastRenderer();\n            if (lastRenderer instanceof ArrayRenderer) {\n              selectedNode.setRenderer(clonedRenderer);\n            }\n            else if (lastRenderer instanceof CompoundNodeRenderer) {\n              final CompoundNodeRenderer compoundRenderer = (CompoundNodeRenderer)lastRenderer;\n              final ChildrenRenderer childrenRenderer = compoundRenderer.getChildrenRenderer();\n              if (childrenRenderer instanceof ExpressionChildrenRenderer) {\n                ExpressionChildrenRenderer.setPreferableChildrenRenderer(nodeDescriptor, clonedRenderer);\n                selectedNode.calcRepresentation();\n              }\n            }\n          }\n        });\n    }\n  }","id":7247,"modified_method":"public void actionPerformed(AnActionEvent e) {\n    DebuggerContextImpl debuggerContext = DebuggerAction.getDebuggerContext(e.getDataContext());\n    if(debuggerContext == null) {\n      return;\n    }\n\n    DebugProcessImpl debugProcess = debuggerContext.getDebugProcess();\n    if(debugProcess == null) {\n      return;\n    }\n\n    final Project project = debuggerContext.getProject();\n\n    final DebuggerTreeNodeImpl selectedNode = getSelectedNode(e.getDataContext());\n    if (selectedNode == null) {\n      return;\n    }\n    NodeDescriptorImpl descriptor = selectedNode.getDescriptor();\n    if(!(descriptor instanceof ValueDescriptorImpl /*&& ((ValueDescriptorImpl)descriptor).isArray()*/)) {\n      return;\n    }\n\n    final ArrayRenderer renderer = getArrayRenderer((ValueDescriptorImpl)descriptor)/*(ArrayRenderer)((ValueDescriptorImpl)selectedNode.getDescriptor()).getLastRenderer()*/;\n    if (renderer == null) {\n      return;\n    }\n\n    String title = createNodeTitle(\"\", selectedNode);\n    String label = selectedNode.toString();\n    int index = label.indexOf('=');\n    if (index > 0) {\n      title = title + \" \" + label.substring(index);\n    }\n    final ArrayRenderer clonedRenderer = renderer.clone();\n    final NamedArrayConfigurable configurable = new NamedArrayConfigurable(title, clonedRenderer);\n    SingleConfigurableEditor editor = new SingleConfigurableEditor(project, configurable,\n                                                                   ShowSettingsUtilImpl.createDimensionKey(configurable), false);\n    editor.show();\n\n    if(editor.getExitCode() == DialogWrapper.OK_EXIT_CODE) {\n      debugProcess.getManagerThread().schedule(new SuspendContextCommandImpl(debuggerContext.getSuspendContext()) {\n          public void contextAction() throws Exception {\n            final ValueDescriptorImpl nodeDescriptor = (ValueDescriptorImpl)selectedNode.getDescriptor();\n            final Renderer lastRenderer = nodeDescriptor.getLastRenderer();\n            if (lastRenderer instanceof ArrayRenderer) {\n              selectedNode.setRenderer(clonedRenderer);\n            }\n            else if (lastRenderer instanceof CompoundNodeRenderer) {\n              final CompoundNodeRenderer compoundRenderer = (CompoundNodeRenderer)lastRenderer;\n              final ChildrenRenderer childrenRenderer = compoundRenderer.getChildrenRenderer();\n              if (childrenRenderer instanceof ExpressionChildrenRenderer) {\n                ExpressionChildrenRenderer.setPreferableChildrenRenderer(nodeDescriptor, clonedRenderer);\n                selectedNode.calcRepresentation();\n              }\n            }\n          }\n        });\n    }\n  }","commit_id":"1de31c70b87bffa295aed1e0c7007a3cdf132413","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public InstalledPluginsManagerMain(PluginManagerUISettings uiSettings) {\n    super(uiSettings);\n    init();\n    myActionsPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n    final JButton button = new JButton(\"Browse repositories...\");\n    button.setMnemonic('b');\n    button.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        new SingleConfigurableEditor(myActionsPanel, createAvailableConfigurable()) {\n          @Override\n          protected Action[] createActions() {\n            return new Action[] {getOKAction(), getCancelAction(), getHelpAction()};\n          }\n        }.show();\n      }\n    });\n    myActionsPanel.add(button);\n\n    final JButton installPluginFromFileSystem = new JButton(\"Install plugin from disk...\");\n    installPluginFromFileSystem.setMnemonic('d');\n    installPluginFromFileSystem.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, true, false, false){\n          @Override\n          public boolean isFileSelectable(VirtualFile file) {\n            final String extension = file.getExtension();\n            return Comparing.strEqual(extension, \"jar\") || Comparing.strEqual(extension, \"zip\");\n          }\n        };\n        descriptor.setTitle(\"Choose Plugin File\");\n        final VirtualFile virtualFile = FileChooser.chooseFile(myActionsPanel, descriptor);\n        if (virtualFile != null) {\n          final File file = VfsUtil.virtualToIoFile(virtualFile);\n          try {\n            PluginDownloader.install(file, file.getName());\n            setRequireShutdown(true);\n          }\n          catch (IOException ex) {\n            Messages.showErrorDialog(ex.getMessage(), CommonBundle.getErrorTitle());\n          }\n        }\n      }\n    });\n    myActionsPanel.add(installPluginFromFileSystem);\n  }","id":7248,"modified_method":"public InstalledPluginsManagerMain(PluginManagerUISettings uiSettings) {\n    super(uiSettings);\n    init();\n    myActionsPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n    final JButton button = new JButton(\"Browse repositories...\");\n    button.setMnemonic('b');\n    button.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        final PluginManagerConfigurable configurable = createAvailableConfigurable();\n        new SingleConfigurableEditor(myActionsPanel, configurable, ShowSettingsUtilImpl.createDimensionKey(configurable), false).show();\n      }\n    });\n    myActionsPanel.add(button);\n\n    final JButton installPluginFromFileSystem = new JButton(\"Install plugin from disk...\");\n    installPluginFromFileSystem.setMnemonic('d');\n    installPluginFromFileSystem.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, true, false, false){\n          @Override\n          public boolean isFileSelectable(VirtualFile file) {\n            final String extension = file.getExtension();\n            return Comparing.strEqual(extension, \"jar\") || Comparing.strEqual(extension, \"zip\");\n          }\n        };\n        descriptor.setTitle(\"Choose Plugin File\");\n        final VirtualFile virtualFile = FileChooser.chooseFile(myActionsPanel, descriptor);\n        if (virtualFile != null) {\n          final File file = VfsUtil.virtualToIoFile(virtualFile);\n          try {\n            PluginDownloader.install(file, file.getName());\n            setRequireShutdown(true);\n          }\n          catch (IOException ex) {\n            Messages.showErrorDialog(ex.getMessage(), CommonBundle.getErrorTitle());\n          }\n        }\n      }\n    });\n    myActionsPanel.add(installPluginFromFileSystem);\n  }","commit_id":"1de31c70b87bffa295aed1e0c7007a3cdf132413","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected Action[] createActions() {\n    if (myConfigurable.getHelpTopic() != null) {\n      return new Action[]{getOKAction(), getCancelAction(), new ApplyAction(), getHelpAction()};\n    }\n    else {\n      return new Action[]{getOKAction(), getCancelAction(), new ApplyAction()};\n    }\n  }","id":7249,"modified_method":"protected Action[] createActions() {\n    List<Action> actions = new ArrayList<Action>();\n    actions.add(getOKAction());\n    actions.add(getCancelAction());\n    if (myShowApplyButton) {\n      actions.add(new ApplyAction());\n    }\n    if (myConfigurable.getHelpTopic() != null) {\n      actions.add(getHelpAction());\n    }\n    return actions.toArray(new Action[actions.size()]);\n  }","commit_id":"1de31c70b87bffa295aed1e0c7007a3cdf132413","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public SingleConfigurableEditor(Component parent, Configurable configurable, String dimensionServiceKey) {\n    super(parent, true);\n    myDimensionKey = dimensionServiceKey;\n    setTitle(createTitleString(configurable));\n\n    myParentComponent = parent;\n    myConfigurable = configurable;\n    init();\n    myConfigurable.reset();\n  }","id":7250,"modified_method":"public SingleConfigurableEditor(Component parent, Configurable configurable, String dimensionServiceKey) {\n    this(parent, configurable, dimensionServiceKey, true);\n  }","commit_id":"1de31c70b87bffa295aed1e0c7007a3cdf132413","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public SingleConfigurableEditor(Project project, Configurable configurable, @NonNls String dimensionKey) {\n    super(project, true);\n    myDimensionKey = dimensionKey;\n    setTitle(createTitleString(configurable));\n\n    myProject = project;\n    myConfigurable = configurable;\n    init();\n    myConfigurable.reset();\n  }","id":7251,"modified_method":"public SingleConfigurableEditor(Project project, Configurable configurable, @NonNls String dimensionKey) {\n    this(project, configurable, dimensionKey, true);\n  }","commit_id":"1de31c70b87bffa295aed1e0c7007a3cdf132413","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected static void initEnvironment() throws InvocationTargetException, InterruptedException {\n    Environment env = MpsEnvironment.getOrCreate(EnvironmentConfig.defaultConfig());\n\n    ourStatistic = new CheckingTestStatistic();\n    ProjectStrategy strategy = new AntProjectStrategy();\n    ourContextProject = env.createProject(strategy);\n  }","id":7252,"modified_method":"protected static void initEnvironment() throws InvocationTargetException, InterruptedException {\n    Environment env = MpsEnvironment.getOrCreate(EnvironmentConfig.defaultConfig());\n\n    ourStatistic = new CheckingTestStatistic();\n    ProjectStrategy strategy = new FromProjectPathProjectStrategy();\n    ourContextProject = env.createProject(strategy);\n  }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public boolean accept(final Request request) throws Filter.FilterException {\n    assert request instanceof TestNodeRequest;\n    final ITestNodeWrapper testNodeWrapper = ((TestNodeRequest) request).getTestNode();\n    final Filter.FilterException[] result = {null};\n    ModelAccess.instance().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        SNode testNode = testNodeWrapper.getNode();\n        SNode rootNode = SNodeOperations.getContainingRoot(testNode);\n        if (!(SNodeOperations.isInstanceOf(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestable\")))) {\n          result[0] = new Filter.FilterException(\"The test concept must be an instance on ITestable concept. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n        }\n        if (BehaviorReflection.invokeNonVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x46bca02bfb6e730aL, \"jetbrains.mps.lang.test.structure.TestInfo\").getDeclarationNode()), \"call_reOpenProject_1031873601093419509\", new Object[]{SNodeOperations.getModel(rootNode)})) {\n          result[0] = new Filter.FilterException(\"The project properties given in the TestInfo file is impossible to set in-process. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n        }\n        if (SNodeOperations.isInstanceOf(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\"))) {\n          if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\")), \"virtual_canRunInProcess_6436735966448788391\", new Object[]{}))) {\n            result[0] = new Filter.FilterException(\"The test is set not to be executed in-process. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n          }\n        }\n        // cannot run (in-process) test methods from TestCase, which is not executable in the same process \n        if (SNodeOperations.isInstanceOf(rootNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\"))) {\n          if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(rootNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\")), \"virtual_canRunInProcess_6436735966448788391\", new Object[]{}))) {\n            result[0] = new Filter.FilterException(\"The test is set not to be executed in-process. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n          }\n        }\n      }\n    });\n    if (result[0] != null) {\n      throw result[0];\n    }\n    return true;\n  }","id":7253,"modified_method":"@Override\n  public boolean accept(final Request request) throws Filter.FilterException {\n    assert request instanceof TestNodeRequest;\n    final ITestNodeWrapper testNodeWrapper = ((TestNodeRequest) request).getTestNode();\n    final Filter.FilterException[] result = {null};\n    ModelAccess.instance().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        SNode testNode = testNodeWrapper.getNode();\n        SNode rootNode = SNodeOperations.getContainingRoot(testNode);\n        if (!(SNodeOperations.isInstanceOf(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestable\")))) {\n          result[0] = new Filter.FilterException(\"The test concept must be an instance on ITestable concept. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n        }\n        if (((Boolean) BHReflection.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x46bca02bfb6e730aL, \"jetbrains.mps.lang.test.structure.TestInfo\").getDeclarationNode()), SMethodTrimmedId.create(\"reOpenProject\", MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x46bca02bfb6e730aL, \"jetbrains.mps.lang.test.structure.TestInfo\"), \"ThWTaQhG7P\"), SNodeOperations.getModel(rootNode)))) {\n          result[0] = new Filter.FilterException(\"The project properties given in the TestInfo file is impossible to set in-process. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n        }\n        if (SNodeOperations.isInstanceOf(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\"))) {\n          if (!(((Boolean) BHReflection.invoke(SNodeOperations.cast(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\")), SMethodTrimmedId.create(\"canRunInProcess\", null, \"5_jSk8paieB\"))))) {\n            result[0] = new Filter.FilterException(\"The test is set not to be executed in-process. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n          }\n        }\n        // cannot run (in-process) test methods from TestCase, which is not executable in the same process \n        if (SNodeOperations.isInstanceOf(rootNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\"))) {\n          if (!(((Boolean) BHReflection.invoke(SNodeOperations.cast(rootNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, \"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\")), SMethodTrimmedId.create(\"canRunInProcess\", null, \"5_jSk8paieB\"))))) {\n            result[0] = new Filter.FilterException(\"The test is set not to be executed in-process. Test \" + testNodeWrapper.getName() + \" is ignored.\");\n          }\n        }\n      }\n    });\n    if (result[0] != null) {\n      throw result[0];\n    }\n    return true;\n  }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ErrorMessagesCheck706089536802542545() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"706089536802542545\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"706089536802542527\")});\n    }","id":7254,"modified_method":"public void test_ErrorMessagesCheck706089536802542545() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"706089536802542545\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"706089536802542527\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_NodeErrorCheck8681827087508331151() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"8681827087508331151\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"706089536802542537\")});\n    }","id":7255,"modified_method":"public void test_NodeErrorCheck8681827087508331151() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"8681827087508331151\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"706089536802542537\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ErrorMessagesCheck706089536802542565() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"706089536802542565\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"706089536802542547\")});\n    }","id":7256,"modified_method":"public void test_ErrorMessagesCheck706089536802542565() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"706089536802542565\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"706089536802542547\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_NodeErrorCheck8681827087508331336() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"8681827087508331336\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"706089536802542541\")});\n    }","id":7257,"modified_method":"public void test_NodeErrorCheck8681827087508331336() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"8681827087508331336\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"706089536802542541\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ErrorMessagesCheck706089536802542585() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"706089536802542585\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"706089536802542567\")});\n    }","id":7258,"modified_method":"public void test_ErrorMessagesCheck706089536802542585() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"706089536802542585\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"706089536802542567\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_NodeErrorCheck204609444630139535() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"204609444630139535\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"204609444630101473\")});\n    }","id":7259,"modified_method":"public void test_NodeErrorCheck204609444630139535() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"204609444630139535\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"204609444630101473\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_NodeErrorCheck2078093584693358841() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"2078093584693358841\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"2078093584693358458\")});\n    }","id":7260,"modified_method":"public void test_NodeErrorCheck2078093584693358841() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"2078093584693358841\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"2078093584693358458\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_NodeErrorCheck2078093584693310057() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"2078093584693310057\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"2078093584693144571\")});\n    }","id":7261,"modified_method":"public void test_NodeErrorCheck2078093584693310057() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"2078093584693310057\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"2078093584693144571\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ErrorMessagesCheck204609444630139319() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"204609444630139319\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      BehaviorReflection.invokeVirtual(Void.class, operation, \"virtual_perform_245688835340859348\", new Object[]{this.getRealNodeById(\"2078093584693123950\")});\n    }","id":7262,"modified_method":"public void test_ErrorMessagesCheck204609444630139319() throws Exception {\n      SNode operation = SNodeOperations.cast(this.getRealNodeById(\"204609444630139319\"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, \"jetbrains.mps.lang.test.structure.NodeCheckOperation\"));\n      NodeCheckOperation_BehaviorDescriptor.perform_iddCRb6FLnvk.invoke(operation, this.getRealNodeById(\"2078093584693123950\"));\n    }","commit_id":"c23ca7bd132657b54578ba208f7fd8644be7d8f4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Test\n  public void should_create_bean_vertex() {\n    TinkerGraph graph = new TinkerGraph();\n    BeanGraph beanGraph = new BeanGraph(graph);\n    Person person = beanGraph.createVertex(Person.class);\n\n    assertThat(person).isNotNull();\n    assertThat(person.element()).isNotNull();\n    assertThat(person.element().getId()).isNotNull();\n    assertThat(person.beanGraph()).isSameAs(beanGraph);\n    assertThat(person.age()).isNull();\n  }","id":7263,"modified_method":"@Test\n  public void should_create_bean_vertex() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n    Person person = beanGraph.createVertex(Person.class);\n\n    assertThat(person).isNotNull();\n    assertThat(person.element()).isNotNull();\n    assertThat(person.element().getId()).isNotNull();\n    assertThat(person.beanGraph()).isSameAs(beanGraph);\n    assertThat(person.age()).isNull();\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_create_adjacent_bean_vertex() {\n    TinkerGraph graph = new TinkerGraph();\n    BeanGraph beanGraph = new BeanGraph(graph);\n    Person person = beanGraph.createVertex(Person.class);\n\n    Person adjacent = beanGraph.createAdjacentVertex(person, Person.class, \"knows\", \"type\", \"family\");\n    assertThat(adjacent).isNotNull();\n    assertThat(person.knows()).hasSize(1);\n    assertThat(person.knows().iterator().next()).isSameAs(adjacent);\n    assertThat(adjacent.knows()).isEmpty();\n  }","id":7264,"modified_method":"@Test\n  public void should_create_adjacent_bean_vertex() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n    Person person = beanGraph.createVertex(Person.class);\n\n    Person adjacent = beanGraph.createAdjacentVertex(person, Person.class, \"knows\", \"type\", \"family\");\n    assertThat(adjacent).isNotNull();\n    assertThat(person.knows()).hasSize(1);\n    assertThat(person.knows().iterator().next()).isSameAs(adjacent);\n    assertThat(adjacent.knows()).isEmpty();\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_cover_testables() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n    DefaultTestable testable1 = beanGraph.createVertex(DefaultTestable.class);\n    DefaultTestable testable2 = beanGraph.createVertex(DefaultTestable.class);\n    DefaultTestCase testCase = beanGraph.createVertex(DefaultTestCase.class);\n\n    testCase.setCover(testable1, Arrays.asList(10, 11, 12));\n    testCase.setCover(testable2, Arrays.asList(12, 13, 14));\n\n    assertThat(testCase.doesCover()).isTrue();\n    assertThat(testCase.countCoveredLines()).isEqualTo(6);\n    assertThat(testCase.covers()).hasSize(2);\n  }","id":7265,"modified_method":"@Test\n  public void should_cover_testable() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n    DefaultTestable testable = beanGraph.createVertex(DefaultTestable.class);\n    DefaultTestCase testCase = beanGraph.createVertex(DefaultTestCase.class);\n    testCase.setCover(testable, Arrays.asList(10, 11, 12));\n\n    assertThat(testCase.doesCover()).isTrue();\n    assertThat(testCase.countCoveredLines()).isEqualTo(3);\n    assertThat(testCase.covers()).hasSize(1);\n\n    Cover cover = Iterables.<Cover>getFirst(testCase.covers(), null);\n    assertThat(cover.testCase()).isEqualTo(testCase);\n    assertThat(cover.testable()).isSameAs(testable);\n    assertThat(cover.lines()).containsExactly(10, 11, 12);\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_test_cases() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n\n    DefaultTestPlan plan = beanGraph.createVertex(DefaultTestPlan.class);\n    plan.addTestCase(\"T1\");\n    plan.addTestCase(\"T2\");\n\n    assertThat(plan.testCases()).hasSize(2);\n    assertThat(Iterables.<MutableTestCase>get(plan.testCases(), 0).key()).isEqualTo(\"T1\");\n    assertThat(Iterables.<MutableTestCase>get(plan.testCases(), 1).key()).isEqualTo(\"T2\");\n  }","id":7266,"modified_method":"@Test\n  public void should_add_test_cases() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n\n    DefaultTestPlan plan = beanGraph.createVertex(DefaultTestPlan.class);\n    plan.addTestCase(\"T1\");\n    plan.addTestCase(\"T2\");\n\n    assertThat(plan.testCases()).hasSize(2);\n    MutableTestCase firstTestCase = Iterables.get(plan.testCases(), 0);\n    assertThat(firstTestCase.key()).isEqualTo(\"T1\");\n    assertThat(firstTestCase.testPlan()).isSameAs(plan);\n\n    MutableTestCase secondTestCase = Iterables.get(plan.testCases(), 1);\n    assertThat(secondTestCase.key()).isEqualTo(\"T2\");\n    assertThat(secondTestCase.testPlan()).isSameAs(plan);\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_have_tested_lines() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n\n    DefaultTestable testable = beanGraph.createVertex(DefaultTestable.class);\n    DefaultTestCase testCase1 = beanGraph.createVertex(DefaultTestCase.class);\n    testCase1.setCover(testable, Arrays.asList(10, 11, 12));\n    DefaultTestCase testCase2 = beanGraph.createVertex(DefaultTestCase.class);\n    testCase2.setCover(testable, Arrays.asList(12, 48, 49));\n\n    assertThat(testable.testedLines()).containsOnly(10, 11, 12, 48, 49);\n  }","id":7267,"modified_method":"@Test\n  public void should_have_tested_lines() {\n    BeanGraph beanGraph = BeanGraph.createInMemory();\n\n    DefaultTestable testable = beanGraph.createVertex(DefaultTestable.class);\n    DefaultTestCase testCase1 = beanGraph.createVertex(DefaultTestCase.class);\n    testCase1.setCover(testable, Arrays.asList(10, 11, 12));\n    DefaultTestCase testCase2 = beanGraph.createVertex(DefaultTestCase.class);\n    testCase2.setCover(testable, Arrays.asList(12, 48, 49));\n\n    assertThat(testable.testedLines()).containsOnly(10, 11, 12, 48, 49);\n    assertThat(testable.countTestCasesOfLine(2)).isEqualTo(0);\n    assertThat(testable.countTestCasesOfLine(10)).isEqualTo(1);\n    assertThat(testable.countTestCasesOfLine(12)).isEqualTo(2);\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void save() {\n    LoggerFactory.getLogger(ScanGraphStore.class).info(\"Persisting graphs of components\");\n    BatchSession session = myBatis.openBatchSession();\n    GraphDtoMapper mapper = session.getMapper(GraphDtoMapper.class);\n    try {\n      GraphWriter writer = new GraphWriter();\n      for (ComponentVertex component : projectGraph.getComponents()) {\n        Long snapshotId = (Long) component.element().getProperty(\"sid\");\n        if (snapshotId != null) {\n          for (PerspectiveBuilder builder : builders) {\n            Perspective perspective = builder.load(component);\n            if (perspective != null) {\n              Graph subGraph = SubGraph.extract(component.element(), builder.storagePath());\n              String data = writer.write(subGraph);\n              mapper.insert(new GraphDto()\n                .setData(data)\n                .setFormat(\"graphson\")\n                .setPerspective(builder.getPerspectiveKey())\n                .setVersion(1)\n                .setResourceId((Long) component.element().getProperty(\"rid\"))\n                .setSnapshotId(snapshotId)\n                .setRootVertexId(component.element().getId().toString())\n              );\n            }\n          }\n        }\n      }\n      session.commit();\n    } finally {\n      session.close();\n    }\n  }","id":7268,"modified_method":"public void save() {\n    LoggerFactory.getLogger(ScanGraphStore.class).info(\"Persisting graphs of components\");\n    BatchSession session = myBatis.openBatchSession();\n    GraphDtoMapper mapper = session.getMapper(GraphDtoMapper.class);\n    try {\n      for (ComponentVertex component : projectGraph.getComponents()) {\n        Long snapshotId = (Long) component.element().getProperty(\"sid\");\n        if (snapshotId != null) {\n          for (PerspectiveBuilder builder : builders) {\n            Perspective perspective = builder.load(component);\n            if (perspective != null) {\n              Graph subGraph = SubGraph.extract(component.element(), builder.path());\n              String data = write(subGraph);\n              mapper.insert(new GraphDto()\n                .setData(data)\n                .setFormat(\"graphson\")\n                .setPerspective(builder.getPerspectiveKey())\n                .setVersion(1)\n                .setResourceId((Long) component.element().getProperty(\"rid\"))\n                .setSnapshotId(snapshotId)\n                .setRootVertexId(component.element().getId().toString())\n              );\n            }\n          }\n        }\n      }\n      session.commit();\n    } finally {\n      session.close();\n    }\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private Graph process(Vertex start, Object... edgePath) {\n    copy(start);\n    browse(start, 0, edgePath);\n    for (Edge edge : edgesToCopy) {\n      Vertex from = edge.getVertex(Direction.OUT);\n      Vertex to = edge.getVertex(Direction.IN);\n      Edge copyEdge = sub.addEdge(edge.getId(), sub.getVertex(from.getId()), sub.getVertex(to.getId()), edge.getLabel());\n      ElementHelper.copyProperties(edge, copyEdge);\n    }\n    return sub;\n  }","id":7269,"modified_method":"private Graph process(Vertex start, EdgePath edgePath) {\n    copy(start);\n    browse(start, 0, edgePath.getElements());\n    for (Edge edge : edgesToCopy) {\n      Vertex from = edge.getVertex(Direction.OUT);\n      Vertex to = edge.getVertex(Direction.IN);\n      Edge copyEdge = sub.addEdge(edge.getId(), sub.getVertex(from.getId()), sub.getVertex(to.getId()), edge.getLabel());\n      ElementHelper.copyProperties(edge, copyEdge);\n    }\n    return sub;\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void browse(Vertex from, int cursor, Object... edgePath) {\n    if (from != null) {\n      if (cursor < edgePath.length) {\n        String edgeLabel = (String) edgePath[cursor];\n        Direction edgeDirection = (Direction) edgePath[cursor + 1];\n        Iterable<Edge> edges = from.getEdges(edgeDirection, edgeLabel);\n        for (Edge edge : edges) {\n          edgesToCopy.add(edge);\n          Vertex tail = edge.getVertex(edgeDirection.opposite());\n          copy(tail);\n          browse(tail, cursor + 2, edgePath);\n        }\n      }\n    }\n  }","id":7270,"modified_method":"private void browse(Vertex from, int cursor, List<Object> edgePath) {\n    if (from != null) {\n      if (cursor < edgePath.size()) {\n        Direction edgeDirection = (Direction) edgePath.get(cursor);\n        String edgeLabel = (String) edgePath.get(cursor + 1);\n        Iterable<Edge> edges = from.getEdges(edgeDirection, edgeLabel);\n        for (Edge edge : edges) {\n          edgesToCopy.add(edge);\n          Vertex tail = edge.getVertex(edgeDirection.opposite());\n          copy(tail);\n          browse(tail, cursor + 2, edgePath);\n        }\n      }\n    }\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static Graph extract(Vertex start, Object... edgePath) {\n    return new SubGraph().process(start, edgePath);\n  }","id":7271,"modified_method":"public static Graph extract(Vertex start, EdgePath edgePath) {\n    return new SubGraph().process(start, edgePath);\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_extract_cyclic_graph() {\n    TinkerGraph graph = new TinkerGraph();\n    Vertex a = GraphHelper.addVertex(graph, null, \"key\", \"a\");\n    Vertex b = GraphHelper.addVertex(graph, null, \"key\", \"b\");\n    Vertex c = GraphHelper.addVertex(graph, null, \"key\", \"c\");\n    Vertex d = GraphHelper.addVertex(graph, null, \"key\", \"d\");\n    Vertex e = GraphHelper.addVertex(graph, null, \"key\", \"e\");\n\n    Edge ab = GraphHelper.addEdge(graph, null, a, b, \"uses\");\n    Edge bc = GraphHelper.addEdge(graph, null, b, c, \"implements\");\n    Edge ce = GraphHelper.addEdge(graph, null, c, e, \"package\");\n    Edge ad = GraphHelper.addEdge(graph, null, a, d, \"uses\");\n    Edge dc = GraphHelper.addEdge(graph, null, d, c, \"implements\");\n\n    // a -uses-> b -implements-> c -package-> e\n    // a -uses-> d -implements-> c -package-> e\n\n    Graph sub = SubGraph.extract(a, \"uses\", Direction.OUT, \"implements\", Direction.OUT, \"package\", Direction.OUT);\n\n    // same graph\n    assertThat(sub.getVertices()).hasSize(5);\n    assertThat(sub.getEdges()).hasSize(5);\n  }","id":7272,"modified_method":"@Test\n  public void should_extract_cyclic_graph() {\n    TinkerGraph graph = new TinkerGraph();\n    Vertex a = GraphHelper.addVertex(graph, null, \"key\", \"a\");\n    Vertex b = GraphHelper.addVertex(graph, null, \"key\", \"b\");\n    Vertex c = GraphHelper.addVertex(graph, null, \"key\", \"c\");\n    Vertex d = GraphHelper.addVertex(graph, null, \"key\", \"d\");\n    Vertex e = GraphHelper.addVertex(graph, null, \"key\", \"e\");\n\n    Edge ab = GraphHelper.addEdge(graph, null, a, b, \"uses\");\n    Edge bc = GraphHelper.addEdge(graph, null, b, c, \"implements\");\n    Edge ce = GraphHelper.addEdge(graph, null, c, e, \"package\");\n    Edge ad = GraphHelper.addEdge(graph, null, a, d, \"uses\");\n    Edge dc = GraphHelper.addEdge(graph, null, d, c, \"implements\");\n\n    // a -uses-> b -implements-> c -package-> e\n    // a -uses-> d -implements-> c -package-> e\n\n    Graph sub = SubGraph.extract(a, EdgePath.create(Direction.OUT, \"uses\", Direction.OUT, \"implements\", Direction.OUT, \"package\"));\n\n    // same graph\n    assertThat(sub.getVertices()).hasSize(5);\n    assertThat(sub.getEdges()).hasSize(5);\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_check_edge_direction() {\n    TinkerGraph graph = new TinkerGraph();\n    Vertex a = GraphHelper.addVertex(graph, null, \"key\", \"a\");\n    Vertex b = GraphHelper.addVertex(graph, null, \"key\", \"b\");\n    Vertex c = GraphHelper.addVertex(graph, null, \"key\", \"c\");\n    Vertex d = GraphHelper.addVertex(graph, null, \"key\", \"d\");\n    Vertex e = GraphHelper.addVertex(graph, null, \"key\", \"e\");\n\n    Edge ab = GraphHelper.addEdge(graph, null, a, b, \"uses\");\n    Edge bc = GraphHelper.addEdge(graph, null, b, c, \"inherits\");\n    Edge ad = GraphHelper.addEdge(graph, null, a, d, \"uses\");\n    Edge de = GraphHelper.addEdge(graph, null, d, e, \"implements\");\n\n    // a -uses-> b -inherits -> c\n    // a -uses-> d -implements-> e\n\n    Graph sub = SubGraph.extract(a, \"uses\", Direction.IN /* instead of out */, \"implements\", Direction.OUT);\n\n    assertThat(sub.getVertices()).hasSize(1);\n    assertThat(sub.getVertex(a.getId())).isNotNull();\n    assertThat(sub.getEdges()).isEmpty();\n  }","id":7273,"modified_method":"@Test\n  public void should_check_edge_direction() {\n    TinkerGraph graph = new TinkerGraph();\n    Vertex a = GraphHelper.addVertex(graph, null, \"key\", \"a\");\n    Vertex b = GraphHelper.addVertex(graph, null, \"key\", \"b\");\n    Vertex c = GraphHelper.addVertex(graph, null, \"key\", \"c\");\n    Vertex d = GraphHelper.addVertex(graph, null, \"key\", \"d\");\n    Vertex e = GraphHelper.addVertex(graph, null, \"key\", \"e\");\n\n    Edge ab = GraphHelper.addEdge(graph, null, a, b, \"uses\");\n    Edge bc = GraphHelper.addEdge(graph, null, b, c, \"inherits\");\n    Edge ad = GraphHelper.addEdge(graph, null, a, d, \"uses\");\n    Edge de = GraphHelper.addEdge(graph, null, d, e, \"implements\");\n\n    // a -uses-> b -inherits -> c\n    // a -uses-> d -implements-> e\n\n    Graph sub = SubGraph.extract(a, EdgePath.create(Direction.IN /* instead of out */, \"uses\", Direction.OUT, \"implements\"));\n\n    assertThat(sub.getVertices()).hasSize(1);\n    assertThat(sub.getVertex(a.getId())).isNotNull();\n    assertThat(sub.getEdges()).isEmpty();\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_extract_graph() {\n    TinkerGraph graph = new TinkerGraph();\n    Vertex a = GraphHelper.addVertex(graph, null, \"key\", \"a\");\n    Vertex b = GraphHelper.addVertex(graph, null, \"key\", \"b\");\n    Vertex c = GraphHelper.addVertex(graph, null, \"key\", \"c\");\n    Vertex d = GraphHelper.addVertex(graph, null, \"key\", \"d\");\n    Vertex e = GraphHelper.addVertex(graph, null, \"key\", \"e\");\n\n    Edge ab = GraphHelper.addEdge(graph, null, a, b, \"uses\");\n    Edge bc = GraphHelper.addEdge(graph, null, b, c, \"inherits\");\n    Edge ad = GraphHelper.addEdge(graph, null, a, d, \"uses\");\n    Edge de = GraphHelper.addEdge(graph, null, d, e, \"implements\");\n\n    // a -uses-> b -inherits -> c\n    // a -uses-> d -implements-> e\n\n    Graph sub = SubGraph.extract(a, \"uses\", Direction.OUT, \"implements\", Direction.OUT);\n\n    // a -uses-> b\n    // a -uses-> d -implements-> e\n    assertThat(sub.getVertices()).hasSize(4);\n    assertThat(sub.getVertex(a.getId()).getProperty(\"key\")).isEqualTo(\"a\");\n    assertThat(sub.getVertex(b.getId()).getProperty(\"key\")).isEqualTo(\"b\");\n    assertThat(sub.getVertex(c.getId())).isNull();\n    assertThat(sub.getVertex(d.getId()).getProperty(\"key\")).isEqualTo(\"d\");\n    assertThat(sub.getVertex(e.getId()).getProperty(\"key\")).isEqualTo(\"e\");\n\n    assertThat(sub.getEdges()).hasSize(3);\n    assertThat(sub.getEdge(ab.getId()).getLabel()).isEqualTo(\"uses\");\n    assertThat(sub.getEdge(ab.getId()).toString()).isEqualTo(ab.toString());\n    assertThat(sub.getEdge(bc.getId())).isNull();\n    assertThat(sub.getEdge(ad.getId()).toString()).isEqualTo(ad.toString());\n    assertThat(sub.getEdge(de.getId()).toString()).isEqualTo(de.toString());\n  }","id":7274,"modified_method":"@Test\n  public void should_extract_graph() {\n    TinkerGraph graph = new TinkerGraph();\n    Vertex a = GraphHelper.addVertex(graph, null, \"key\", \"a\");\n    Vertex b = GraphHelper.addVertex(graph, null, \"key\", \"b\");\n    Vertex c = GraphHelper.addVertex(graph, null, \"key\", \"c\");\n    Vertex d = GraphHelper.addVertex(graph, null, \"key\", \"d\");\n    Vertex e = GraphHelper.addVertex(graph, null, \"key\", \"e\");\n\n    Edge ab = GraphHelper.addEdge(graph, null, a, b, \"uses\");\n    Edge bc = GraphHelper.addEdge(graph, null, b, c, \"inherits\");\n    Edge ad = GraphHelper.addEdge(graph, null, a, d, \"uses\");\n    Edge de = GraphHelper.addEdge(graph, null, d, e, \"implements\");\n\n    // a -uses-> b -inherits -> c\n    // a -uses-> d -implements-> e\n\n    Graph sub = SubGraph.extract(a, EdgePath.create(Direction.OUT, \"uses\", Direction.OUT, \"implements\"));\n\n    // a -uses-> b\n    // a -uses-> d -implements-> e\n    assertThat(sub.getVertices()).hasSize(4);\n    assertThat(sub.getVertex(a.getId()).getProperty(\"key\")).isEqualTo(\"a\");\n    assertThat(sub.getVertex(b.getId()).getProperty(\"key\")).isEqualTo(\"b\");\n    assertThat(sub.getVertex(c.getId())).isNull();\n    assertThat(sub.getVertex(d.getId()).getProperty(\"key\")).isEqualTo(\"d\");\n    assertThat(sub.getVertex(e.getId()).getProperty(\"key\")).isEqualTo(\"e\");\n\n    assertThat(sub.getEdges()).hasSize(3);\n    assertThat(sub.getEdge(ab.getId()).getLabel()).isEqualTo(\"uses\");\n    assertThat(sub.getEdge(ab.getId()).toString()).isEqualTo(ab.toString());\n    assertThat(sub.getEdge(bc.getId())).isNull();\n    assertThat(sub.getEdge(ad.getId()).toString()).isEqualTo(ad.toString());\n    assertThat(sub.getEdge(de.getId()).toString()).isEqualTo(de.toString());\n  }","commit_id":"9029430f5f78d0abe373c4b2d9cee405530fc481","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void fire(final DescribeSensorsResponse msg) {\n    try {\n      final Iterable<String> uuidList =\n          Iterables.transform(VmInstances.list(VmState.RUNNING), VmInstances.toInstanceUuid());\n      LOG.debug(\"DescribeSensorCallback (fire) called at \" + new Date());\n\n      // cloudwatch metric caches\n      final ConcurrentMap<String, DiskReadWriteMetricTypeCache> metricCacheMap = Maps.newConcurrentMap();\n\n      \n      \n      for (final SensorsResourceType sensorData : msg.getSensorsResources()) {\n        if (!RESOURCE_TYPE_INSTANCE.equals(sensorData.getResourceType()) ||\n            !Iterables.contains(uuidList, sensorData.getResourceUuid()))\n          continue;\n        \n        for (final MetricsResourceType metricType : sensorData.getMetrics()) {\n          for (final MetricCounterType counterType : metricType.getCounters()) {\n            for (final MetricDimensionsType dimensionType : counterType.getDimensions()) {\n\n              // find and fire most recent value for metric/dimension\n              final List<MetricDimensionsValuesType> values =\n                  Lists.newArrayList(dimensionType.getValues());\n\n              //CloudWatch use case of metric data\n\n              if(!values.isEmpty()) {\n                // best to enter older data first...\n                Collections.sort(values, Ordering.natural().onResultOf(GetTimestamp.INSTANCE));\n\n                for (MetricDimensionsValuesType value : values) {\n                  LOG.debug(\"ResourceUUID: \" + sensorData.getResourceUuid());\n                  LOG.debug(\"ResourceName: \" + sensorData.getResourceName());\n                  LOG.debug(\"Metric: \" + metricType.getMetricName());\n                  LOG.debug(\"Dimension: \" + dimensionType.getDimensionName());\n                  LOG.debug(\"Timestamp: \" + value.getTimestamp());\n                  LOG.debug(\"Value: \" + value.getValue());\n                  final Long currentTimeStamp = value.getTimestamp().getTime();\n                  final Double currentValue = value.getValue();\n                  sendSystemMetric(new Supplier<InstanceUsageEvent>() {\n                    @Override\n                    public InstanceUsageEvent get() {\n                      return new InstanceUsageEvent(\n                          sensorData.getResourceUuid(),\n                          sensorData.getResourceName(),\n                          metricType.getMetricName(),\n                          dimensionType.getSequenceNum(),\n                          dimensionType.getDimensionName(),\n                          currentValue,\n                          currentTimeStamp);\n                    }\n                  });\n\n                  // special case to calculate VolumeConsumedReadWriteOps\n                  // As it is (VolumeThroughputPercentage / 100) * (VolumeReadOps + VolumeWriteOps), and we are hard coding\n                  // VolumeThroughputPercentage as 100%, we will just use VolumeReadOps + VolumeWriteOps\n                  \n                  // And just in case VolumeReadOps is called DiskReadOps we do both cases...\n                  combineReadWriteDiskMetric(\"DiskReadOps\", \"DiskWriteOps\", metricCacheMap, \"DiskConsumedReadWriteOps\", metricType, sensorData, dimensionType, value);\n                  combineReadWriteDiskMetric(\"VolumeReadOps\", \"VolumeWriteOps\", metricCacheMap, \"VolumeConsumedReadWriteOps\", metricType, sensorData, dimensionType, value);\n\n                  // Also need VolumeTotalReadWriteTime to compute VolumeIdleTime\n                  combineReadWriteDiskMetric(\"VolumeTotalReadTime\", \"VolumeTotalWriteTime\", metricCacheMap, \"VolumeTotalReadWriteTime\", metricType, sensorData, dimensionType, value);\n                }\n              }\n\n              //Reporting use case of metric data from the cc\n              Collections.sort(values, Ordering.natural().onResultOf(GetTimestamp.INSTANCE));\n\n              if (!values.isEmpty()) {\n                final MetricDimensionsValuesType latestValue = Iterables.getLast(values);\n                final Double usageValue = latestValue.getValue();\n                final Long usageTimestamp = latestValue.getTimestamp().getTime();\n                final long sequenceNumber = dimensionType.getSequenceNum() + (values.size() - 1);\n                fireUsageEvent( new Supplier<InstanceUsageEvent>(){\n                  @Override\n                  public InstanceUsageEvent get() {\n                    return new InstanceUsageEvent(\n                        sensorData.getResourceUuid(),\n                        sensorData.getResourceName(),\n                        metricType.getMetricName(),\n                        sequenceNumber,\n                        dimensionType.getDimensionName(),\n                        usageValue,\n                        usageTimestamp);\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception ex) {\n      LOG.debug(\"Unable to fire describe sensors call back\", ex);\n    }\n  }","id":7275,"modified_method":"@Override\n  public void fire(final DescribeSensorsResponse msg) {\n    try {\n      final Iterable<String> uuidList =\n          Iterables.transform(VmInstances.list(VmState.RUNNING), VmInstances.toInstanceUuid());\n      LOG.debug(\"DescribeSensorCallback (fire) called at \" + new Date());\n\n      // cloudwatch metric caches\n      final ConcurrentMap<String, DiskReadWriteMetricTypeCache> metricCacheMap = Maps.newConcurrentMap();\n      \n      final EC2DiskMetricCache ec2DiskMetricCache = new EC2DiskMetricCache();\n\n      for (final SensorsResourceType sensorData : msg.getSensorsResources()) {\n        if (!RESOURCE_TYPE_INSTANCE.equals(sensorData.getResourceType()) ||\n            !Iterables.contains(uuidList, sensorData.getResourceUuid()))\n          continue;\n        \n        for (final MetricsResourceType metricType : sensorData.getMetrics()) {\n          for (final MetricCounterType counterType : metricType.getCounters()) {\n            for (final MetricDimensionsType dimensionType : counterType.getDimensions()) {\n\n              // find and fire most recent value for metric/dimension\n              final List<MetricDimensionsValuesType> values =\n                  Lists.newArrayList(dimensionType.getValues());\n\n              //CloudWatch use case of metric data\n\n              if(!values.isEmpty()) {\n                // best to enter older data first...\n                Collections.sort(values, Ordering.natural().onResultOf(GetTimestamp.INSTANCE));\n\n                for (MetricDimensionsValuesType value : values) {\n                  LOG.debug(\"ResourceUUID: \" + sensorData.getResourceUuid());\n                  LOG.debug(\"ResourceName: \" + sensorData.getResourceName());\n                  LOG.debug(\"Metric: \" + metricType.getMetricName());\n                  LOG.debug(\"Dimension: \" + dimensionType.getDimensionName());\n                  LOG.debug(\"Timestamp: \" + value.getTimestamp());\n                  LOG.debug(\"Value: \" + value.getValue());\n                  final Long currentTimeStamp = value.getTimestamp().getTime();\n                  final Double currentValue = value.getValue();\n                  ec2DiskMetricCache.initializeMetrics(sensorData.getResourceUuid(), sensorData.getResourceName(), currentTimeStamp); // Put a place holder in in case we don't have any non-EBS volumes\n                  boolean isEbsMetric = dimensionType.getDimensionName().startsWith(\"vol-\");\n                  boolean isEc2DiskMetric = !isEbsMetric && EC2_DISK_METRICS.contains(metricType.getMetricName().replace(\"Volume\", \"Disk\"));\n                  \n                  if (isEbsMetric || isEc2DiskMetric) {\n                    sendSystemMetric(new Supplier<InstanceUsageEvent>() {\n                      @Override\n                      public InstanceUsageEvent get() {\n                        return new InstanceUsageEvent(\n                          sensorData.getResourceUuid(),\n                          sensorData.getResourceName(),\n                          metricType.getMetricName(),\n                          dimensionType.getSequenceNum(),\n                          dimensionType.getDimensionName(),\n                          currentValue,\n                          currentTimeStamp);\n                      }\n                    });\n\n                    if (isEbsMetric) {\n                      // special case to calculate VolumeConsumedReadWriteOps\n                      // As it is (VolumeThroughputPercentage / 100) * (VolumeReadOps + VolumeWriteOps), and we are hard coding\n                      // VolumeThroughputPercentage as 100%, we will just use VolumeReadOps + VolumeWriteOps\n                  \n                      // And just in case VolumeReadOps is called DiskReadOps we do both cases...\n                      combineReadWriteDiskMetric(\"DiskReadOps\", \"DiskWriteOps\", metricCacheMap, \"DiskConsumedReadWriteOps\", metricType, sensorData, dimensionType, value);\n                      combineReadWriteDiskMetric(\"VolumeReadOps\", \"VolumeWriteOps\", metricCacheMap, \"VolumeConsumedReadWriteOps\", metricType, sensorData, dimensionType, value);\n\n                      // Also need VolumeTotalReadWriteTime to compute VolumeIdleTime\n                      combineReadWriteDiskMetric(\"VolumeTotalReadTime\", \"VolumeTotalWriteTime\", metricCacheMap, \"VolumeTotalReadWriteTime\", metricType, sensorData, dimensionType, value);\n                    }\n                  } else {\n                    // see if it is a volume metric\n                    String metricName = metricType.getMetricName().replace(\"Volume\", \"Disk\"); \n                      ec2DiskMetricCache.addToMetric(sensorData.getResourceUuid(), sensorData.getResourceName(), metricName, currentValue, currentTimeStamp);\n                  }\n                }\n              }\n\n              //Reporting use case of metric data from the cc\n              Collections.sort(values, Ordering.natural().onResultOf(GetTimestamp.INSTANCE));\n\n              if (!values.isEmpty()) {\n                final MetricDimensionsValuesType latestValue = Iterables.getLast(values);\n                final Double usageValue = latestValue.getValue();\n                final Long usageTimestamp = latestValue.getTimestamp().getTime();\n                final long sequenceNumber = dimensionType.getSequenceNum() + (values.size() - 1);\n                fireUsageEvent( new Supplier<InstanceUsageEvent>(){\n                  @Override\n                  public InstanceUsageEvent get() {\n                    return new InstanceUsageEvent(\n                        sensorData.getResourceUuid(),\n                        sensorData.getResourceName(),\n                        metricType.getMetricName(),\n                        sequenceNumber,\n                        dimensionType.getDimensionName(),\n                        usageValue,\n                        usageTimestamp);\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n      for (Supplier<InstanceUsageEvent> ec2DiskMetric: ec2DiskMetricCache.getMetrics()) {\n        sendSystemMetric(ec2DiskMetric);\n      }\n    } catch (Exception ex) {\n      LOG.debug(\"Unable to fire describe sensors call back\", ex);\n    }\n  }","commit_id":"008ec70b1bb7bbba72e41c54d3ec38a823fb55ca","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n         * {@inheritDoc}\n         */\n        @Override\n        public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException {\n            list.add(createAddOperation());\n\n            while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n                final Element element = Element.forName(reader.getLocalName());\n                switch (element) {\n                    case JPA: {\n                        parseJPA(reader, list);\n                        break;\n                    }\n                    default: {\n                        throw ParseUtils.unexpectedElement(reader);\n                    }\n                }\n            }\n\n        }","id":7276,"modified_method":"/**\n         * {@inheritDoc}\n         */\n        @Override\n        public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException {\n            ModelNode subsystemAdd = null;\n\n            while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n                final Element element = Element.forName(reader.getLocalName());\n                switch (element) {\n                    case JPA: {\n                        subsystemAdd = parseJPA(reader);\n                        break;\n                    }\n                    default: {\n                        throw ParseUtils.unexpectedElement(reader);\n                    }\n                }\n            }\n            if (subsystemAdd == null) {\n                throw ParseUtils.missingRequiredElement(reader, Collections.singleton(Element.JPA.getLocalName()));\n            }\n            list.add(subsystemAdd);\n        }","commit_id":"9eef0352ac2cf00fb48441c6b9dc75244a158178","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n            ModelNode node = new ModelNode();\n            node.add(createAddOperation());\n\n            resultHandler.handleResultFragment(Util.NO_LOCATION, node);\n            resultHandler.handleResultComplete();\n            return new BasicOperationResult();\n        }","id":7277,"modified_method":"@Override\n        public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n            ModelNode model = context.getSubModel();\n\n            ModelNode node = new ModelNode();\n            node.add(createAddOperation(model.require(CommonAttributes.DEFAULT_DATASOURCE).asString()));\n\n            resultHandler.handleResultFragment(Util.NO_LOCATION, node);\n            resultHandler.handleResultComplete();\n            return new BasicOperationResult();\n        }","commit_id":"9eef0352ac2cf00fb48441c6b9dc75244a158178","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseJPA(XMLExtendedStreamReader reader, List<ModelNode> list) throws\n            XMLStreamException {\n            String dataSourceName = null;\n            int count = reader.getAttributeCount();\n            for (int i = 0; i < count; i++) {\n                final String value = reader.getAttributeValue(i);\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case DEFAULT_DATASOURCE_NAME: {\n                        dataSourceName = value;\n                        break;\n                    }\n                    default: {\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                    }\n                }\n            }\n            // Require no content\n            ParseUtils.requireNoContent(reader);\n            if (dataSourceName == null) {\n                throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.DEFAULT_DATASOURCE_NAME));\n            }\n            list.add(createAddDefaultDataSourceName(dataSourceName));\n        }","id":7278,"modified_method":"private ModelNode parseJPA(XMLExtendedStreamReader reader) throws XMLStreamException {\n            String dataSourceName = null;\n            int count = reader.getAttributeCount();\n            for (int i = 0; i < count; i++) {\n                final String value = reader.getAttributeValue(i);\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case DEFAULT_DATASOURCE_NAME: {\n                        dataSourceName = value;\n                        break;\n                    }\n                    default: {\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                    }\n                }\n            }\n            // Require no content\n            ParseUtils.requireNoContent(reader);\n            if (dataSourceName == null) {\n                throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.DEFAULT_DATASOURCE_NAME));\n            }\n            return createAddOperation(dataSourceName);\n        }","commit_id":"9eef0352ac2cf00fb48441c6b9dc75244a158178","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void initialize(ExtensionContext context) {\n        SubsystemRegistration registration = context.registerSubsystem(SUBSYSTEM_NAME);\n        final ModelNodeRegistration nodeRegistration = registration.registerSubsystemModel(DESCRIPTION);\n        nodeRegistration.registerOperationHandler(ADD, JPASubSystemAdd.INSTANCE, DESCRIPTION, false);\n        nodeRegistration.registerOperationHandler(DESCRIBE, JPADescribeHandler.INSTANCE, JPADescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n        nodeRegistration.registerOperationHandler(JPADataSourceAdd.OPERATION_NAME, JPADataSourceAdd.INSTANCE, JPA_ADD, false);\n        nodeRegistration.registerOperationHandler(JPADataSourceRemove.OPERATION_NAME, JPADataSourceRemove.INSTANCE, JPA_REMOVE, false);\n        registration.registerXMLElementWriter(parser);\n\n    }","id":7279,"modified_method":"@Override\n    public void initialize(ExtensionContext context) {\n        SubsystemRegistration registration = context.registerSubsystem(SUBSYSTEM_NAME);\n        final ModelNodeRegistration nodeRegistration = registration.registerSubsystemModel(DESCRIPTION);\n        nodeRegistration.registerOperationHandler(JPASubSystemAdd.OPERATION_NAME, JPASubSystemAdd.INSTANCE, JPASubSystemAdd.INSTANCE, false);\n        nodeRegistration.registerOperationHandler(JPASubSystemRemove.OPERATION_NAME, JPASubSystemRemove.INSTANCE, JPASubSystemRemove.INSTANCE, false);\n        nodeRegistration.registerOperationHandler(DESCRIBE, JPADescribeHandler.INSTANCE, JPADescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n        nodeRegistration.registerReadWriteAttribute(CommonAttributes.DEFAULT_DATASOURCE, null, JPADefaultDatasourceWriteHandler.INSTANCE, Storage.CONFIGURATION);\n        registration.registerXMLElementWriter(parser);\n\n    }","commit_id":"9eef0352ac2cf00fb48441c6b9dc75244a158178","url":"https://github.com/wildfly/wildfly"},{"original_method":"private JPASubSystemAdd() {\n        //\n    }","id":7280,"modified_method":"private JPASubSystemAdd() {\n        modelValidator.registerValidator(CommonAttributes.DEFAULT_DATASOURCE, new StringLengthValidator(0, Integer.MAX_VALUE, false, true));\n        runtimeValidator.registerValidator(CommonAttributes.DEFAULT_DATASOURCE, new StringLengthValidator(0, Integer.MAX_VALUE, false, false));\n    }","commit_id":"9eef0352ac2cf00fb48441c6b9dc75244a158178","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) {\n\n        if (context instanceof BootOperationContext) {\n\n            /* set Hibernate persistence provider as the default provider */\n            javax.persistence.spi.PersistenceProviderResolverHolder.setPersistenceProviderResolver(\n                PersistenceProviderResolverImpl.getInstance());\n\n            PersistenceProviderAdapterRegistry.putPersistenceProviderAdaptor(\n                \"org.hibernate.ejb.HibernatePersistence\", new HibernatePersistenceProviderAdaptor());\n\n            final BootOperationContext updateContext = (BootOperationContext) context;\n            updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_PERSISTENCE_UNIT, new PersistenceUnitParseProcessor());\n            updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_PERSISTENCE_ANNOTATION, new JPAAnnotationParseProcessor());\n            updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_JPA, new JPADependencyProcessor());\n            // TODO: enable updateContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_PERSISTENCE_PROVIDER, new PersistenceProviderProcessor());\n            updateContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_PERSISTENCE_REF, new PersistenceRefProcessor());\n            updateContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_PERSISTENTUNIT, new PersistenceUnitDeploymentProcessor());\n        }\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        context.getSubModel().setEmptyObject();\n        resultHandler.handleResultComplete();\n        return new BasicOperationResult(compensatingOperation);\n    }","id":7281,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler)\n        throws OperationFailedException {\n\n        modelValidator.validate(operation);\n        ModelNode defaultDSNode = operation.require(CommonAttributes.DEFAULT_DATASOURCE);\n        context.getSubModel().get(CommonAttributes.DEFAULT_DATASOURCE).set(defaultDSNode);\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n\n        if (context instanceof BootOperationContext) {\n\n            /* set Hibernate persistence provider as the default provider */\n            javax.persistence.spi.PersistenceProviderResolverHolder.setPersistenceProviderResolver(\n                PersistenceProviderResolverImpl.getInstance());\n\n            PersistenceProviderAdapterRegistry.putPersistenceProviderAdaptor(\n                \"org.hibernate.ejb.HibernatePersistence\", new HibernatePersistenceProviderAdaptor());\n\n            final BootOperationContext updateContext = (BootOperationContext) context;\n            updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_PERSISTENCE_UNIT, new PersistenceUnitParseProcessor());\n            updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_PERSISTENCE_ANNOTATION, new JPAAnnotationParseProcessor());\n            updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_JPA, new JPADependencyProcessor());\n            // TODO: enable updateContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_PERSISTENCE_PROVIDER, new PersistenceProviderProcessor());\n            updateContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_PERSISTENCE_REF, new PersistenceRefProcessor());\n            updateContext.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_PERSISTENTUNIT, new PersistenceUnitDeploymentProcessor());\n        }\n\n        if (context.getRuntimeContext() != null) {\n            runtimeValidator.validate(operation.resolve());\n            final String dataSourceName = defaultDSNode.resolve().asString();\n            context.getRuntimeContext().setRuntimeTask(new RuntimeTask() {\n                @Override\n                public void execute(RuntimeTaskContext context) throws OperationFailedException {\n                    final ServiceTarget target = context.getServiceTarget();\n                    JPAService.addService(target, dataSourceName);\n                    resultHandler.handleResultComplete();\n                }\n            });\n        } else {\n            resultHandler.handleResultComplete();\n        }\n\n        return new BasicOperationResult(compensatingOperation);\n    }","commit_id":"9eef0352ac2cf00fb48441c6b9dc75244a158178","url":"https://github.com/wildfly/wildfly"},{"original_method":"private boolean has(ModelNode node, String name) {\n            return node.has(name) && node.get(name).isDefined();\n        }","id":7282,"modified_method":"private boolean isNonStandard(ModelNode node, String attribute) {\n            return node.hasDefined(attribute) && !\"default\".equals(node.get(attribute).asString());\n        }","commit_id":"e749dc10e4ea50e7ecb00291c591d0af4461b8e5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public void writeContent(XMLExtendedStreamWriter writer, SubsystemMarshallingContext context) throws XMLStreamException {\n            context.startSubsystemElement(Namespace.CURRENT.getUriString(), false);\n\n            ModelNode node = context.getModelNode();\n            if (has(node, AUTHENTICATION_MANAGER_CLASS_NAME)) {\n                writeAttribute(writer, Attribute.AUTHENTICATION_MANAGER_CLASS_NAME, node.get(AUTHENTICATION_MANAGER_CLASS_NAME));\n            }\n            if (has(node, DEEP_COPY_SUBJECT_MODE)) {\n                writeAttribute(writer, Attribute.DEEP_COPY_SUBJECT_MODE, node.get(DEEP_COPY_SUBJECT_MODE));\n            }\n            if (has(node, DEFAULT_CALLBACK_HANDLER_CLASS_NAME)) {\n                writeAttribute(writer, Attribute.DEFAULT_CALLBACK_HANDLER_CLASS_NAME,\n                        node.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME));\n            }\n\n            writer.writeEndElement();\n        }","id":7283,"modified_method":"@Override\n        public void writeContent(XMLExtendedStreamWriter writer, SubsystemMarshallingContext context) throws XMLStreamException {\n            context.startSubsystemElement(Namespace.CURRENT.getUriString(), false);\n\n            ModelNode node = context.getModelNode();\n\n            if (isNonStandard(node, AUTHENTICATION_MANAGER_CLASS_NAME)\n                    || (node.hasDefined(DEEP_COPY_SUBJECT_MODE) && node.get(DEEP_COPY_SUBJECT_MODE).asBoolean())\n                    || isNonStandard(node, DEFAULT_CALLBACK_HANDLER_CLASS_NAME)) {\n                writer.writeEmptyElement(Element.SECURITY_MANAGEMENT.getLocalName());\n                if (isNonStandard(node, AUTHENTICATION_MANAGER_CLASS_NAME)) {\n                    writeAttribute(writer, Attribute.AUTHENTICATION_MANAGER_CLASS_NAME, node.get(AUTHENTICATION_MANAGER_CLASS_NAME));\n                }\n                if (node.hasDefined(DEEP_COPY_SUBJECT_MODE) && node.get(DEEP_COPY_SUBJECT_MODE).asBoolean()) {\n                    writeAttribute(writer, Attribute.DEEP_COPY_SUBJECT_MODE, node.get(DEEP_COPY_SUBJECT_MODE));\n                }\n                if (isNonStandard(node, DEFAULT_CALLBACK_HANDLER_CLASS_NAME)) {\n                    writeAttribute(writer, Attribute.DEFAULT_CALLBACK_HANDLER_CLASS_NAME,\n                            node.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME));\n                }\n            }\n\n            if (isNonStandard(node, SUBJECT_FACTORY_CLASS_NAME)) {\n                writer.writeEmptyElement(Element.SUBJECT_FACTORY.getLocalName());\n                writeAttribute(writer, Attribute.SUBJECT_FACTORY_CLASS_NAME,\n                        node.get(SUBJECT_FACTORY_CLASS_NAME));\n            }\n\n            if (node.hasDefined(JAAS_APPLICATION_POLICY) && node.get(JAAS_APPLICATION_POLICY).asInt() > 0) {\n                throw new UnsupportedOperationException(\"Implement detyped jaas element marshalling\");\n            }\n\n            writer.writeEndElement();\n        }","commit_id":"e749dc10e4ea50e7ecb00291c591d0af4461b8e5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException {\n            final ModelNode subsystem = new ModelNode();\n            subsystem.get(OP).set(ADD);\n            subsystem.get(OP_ADDR).add(SUBSYSTEM, SUBSYSTEM_NAME);\n\n            // read attributes\n            final int count = reader.getAttributeCount();\n            for (int i = 0; i < count; i++) {\n                requireNoNamespaceAttribute(reader, i);\n                final String value = reader.getAttributeValue(i);\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case AUTHENTICATION_MANAGER_CLASS_NAME: {\n                        subsystem.get(AUTHENTICATION_MANAGER_CLASS_NAME).set(value);\n                        break;\n                    }\n                    case DEEP_COPY_SUBJECT_MODE: {\n                        subsystem.get(DEEP_COPY_SUBJECT_MODE).set(value);\n                        break;\n                    }\n                    case DEFAULT_CALLBACK_HANDLER_CLASS_NAME: {\n                        subsystem.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME).set(value);\n                        break;\n                    }\n                    default:\n                        throw unexpectedAttribute(reader, i);\n                }\n            }\n\n            // no sub elements yet\n            requireNoContent(reader);\n\n            list.add(subsystem);\n        }","id":7284,"modified_method":"@Override\n        public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException {\n\n            final ModelNode subsystem = new ModelNode();\n            subsystem.get(OP).set(ADD);\n            ModelNode address = subsystem.get(OP_ADDR);\n            address.add(SUBSYSTEM, SUBSYSTEM_NAME);\n\n            requireNoAttributes(reader);\n\n            List<ModelNode> jaasUpdates = null;\n            final EnumSet<Element> visited = EnumSet.noneOf(Element.class);\n            while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n                switch (Namespace.forUri(reader.getNamespaceURI())) {\n                    case SECURITY_1_0: {\n                        final Element element = Element.forName(reader.getLocalName());\n                        if (!visited.add(element)) {\n                            throw unexpectedElement(reader);\n                        }\n                        switch (element) {\n                            case SECURITY_MANAGEMENT: {\n                                parseSecurityManagement(reader, subsystem);\n                                break;\n                            }\n                            case SUBJECT_FACTORY: {\n                                parseSubjectFactory(reader, subsystem);\n                                break;\n                            }\n                            case JAAS: {\n                                jaasUpdates = parseJaas(reader, address);\n                                break;\n                            }\n                            default: {\n                                throw unexpectedElement(reader);\n                            }\n                        }\n                        break;\n                    }\n                    default: {\n                        throw unexpectedElement(reader);\n                    }\n                }\n            }\n\n            list.add(subsystem);\n\n            if (jaasUpdates != null) {\n                list.addAll(jaasUpdates);\n            }\n        }","commit_id":"e749dc10e4ea50e7ecb00291c591d0af4461b8e5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Cancellable execute(NewOperationContext context, ModelNode operation, ResultHandler resultHandler) {\n        // Create the compensating operation\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        String authenticationManagerClassName = has(operation, AUTHENTICATION_MANAGER_CLASS_NAME) ? operation.get(\n                AUTHENTICATION_MANAGER_CLASS_NAME).asString() : DEFAULT_AUTHENTICATION_MANAGER;\n        boolean deepCopySubjectMode = has(operation, DEEP_COPY_SUBJECT_MODE) ? operation.get(DEEP_COPY_SUBJECT_MODE).asBoolean()\n                : DEFAULT_DEEP_COPY_OPERATION_MODE;\n        String defaultCallbackHandlerClassName = has(operation, DEFAULT_CALLBACK_HANDLER_CLASS_NAME) ? operation.get(\n                DEFAULT_CALLBACK_HANDLER_CLASS_NAME).asString() : DEFAULT_CALLBACK_HANDLER;\n\n        if (context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext updateContext = (NewRuntimeOperationContext) context;\n            final ServiceTarget target = updateContext.getServiceTarget();\n\n            // add bootstrap service\n            final SecurityBootstrapService bootstrapService = new SecurityBootstrapService();\n            target.addService(SecurityBootstrapService.SERVICE_NAME, bootstrapService)\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n            // add security management service\n            final SecurityManagementService securityManagementService = new SecurityManagementService(\n                    authenticationManagerClassName, deepCopySubjectMode, defaultCallbackHandlerClassName);\n            target.addService(SecurityManagementService.SERVICE_NAME, securityManagementService)\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n            // add service to bind SecurityDomainObjectFactory to JNDI\n            final Reference reference = SecurityDomainObjectFactory.createReference(\"JSM\");\n            final JaasBinderService binderService = new JaasBinderService(Values.immediateValue(reference));\n            target.addService(JaasBinderService.SERVICE_NAME, binderService)\n                    .addDependency(JavaContextService.SERVICE_NAME, Context.class, binderService.getContextInjector())\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n            // add subject factory service\n            final SubjectFactoryService subjectFactoryService = new SubjectFactoryService();\n            target.addService(SubjectFactoryService.SERVICE_NAME, subjectFactoryService)\n                    .addDependency(SecurityManagementService.SERVICE_NAME, ISecurityManagement.class,\n                            subjectFactoryService.getSecurityManagementInjector())\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n        }\n\n        final ModelNode subModel = context.getSubModel();\n        subModel.get(AUTHENTICATION_MANAGER_CLASS_NAME).set(operation.get(AUTHENTICATION_MANAGER_CLASS_NAME));\n        subModel.get(DEEP_COPY_SUBJECT_MODE).set(operation.get(DEEP_COPY_SUBJECT_MODE));\n        subModel.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME).set(operation.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME));\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7285,"modified_method":"@Override\n    public Cancellable execute(NewOperationContext context, ModelNode operation, ResultHandler resultHandler) {\n        // Create the compensating operation\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n\n        String authManagerClassName = \"default\";\n        String callbackHandlerClassName = \"default\";\n        boolean deepCopySubject = DEFAULT_DEEP_COPY_OPERATION_MODE;\n        String subjectFactoryClassName = \"default\";\n\n        final ModelNode subModel = context.getSubModel();\n        if (operation.hasDefined(AUTHENTICATION_MANAGER_CLASS_NAME)) {\n            authManagerClassName = operation.get(AUTHENTICATION_MANAGER_CLASS_NAME).asString();\n            subModel.get(AUTHENTICATION_MANAGER_CLASS_NAME).set(authManagerClassName);\n        }\n        if (operation.hasDefined(DEEP_COPY_SUBJECT_MODE)) {\n            deepCopySubject = operation.get(DEEP_COPY_SUBJECT_MODE).asBoolean();\n            subModel.get(DEEP_COPY_SUBJECT_MODE).set(deepCopySubject);\n        }\n        if (operation.hasDefined(DEFAULT_CALLBACK_HANDLER_CLASS_NAME)) {\n            callbackHandlerClassName = operation.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME).asString();\n            subModel.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME).set(callbackHandlerClassName);\n        }\n        if (operation.hasDefined(SUBJECT_FACTORY_CLASS_NAME)) {\n            subjectFactoryClassName = operation.get(SUBJECT_FACTORY_CLASS_NAME).asString();\n            subModel.get(SUBJECT_FACTORY_CLASS_NAME).set(SUBJECT_FACTORY_CLASS_NAME);\n        }\n\n        if (context instanceof NewBootOperationContext) {\n            final NewBootOperationContext updateContext = (NewBootOperationContext) context;\n            updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_MODULE, new SecurityDependencyProcessor());\n\n            final ServiceTarget target = updateContext.getServiceTarget();\n\n            // add bootstrap service\n            final SecurityBootstrapService bootstrapService = new SecurityBootstrapService();\n            target.addService(SecurityBootstrapService.SERVICE_NAME, bootstrapService)\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n            // add service to bind SecurityDomainObjectFactory to JNDI\n            final Reference reference = SecurityDomainObjectFactory.createReference(\"JSM\");\n            final JaasBinderService binderService = new JaasBinderService(Values.immediateValue(reference));\n            target.addService(JaasBinderService.SERVICE_NAME, binderService)\n                    .addDependency(JavaContextService.SERVICE_NAME, Context.class, binderService.getContextInjector())\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n            // add security management service\n            if (\"default\".equals(authManagerClassName)) {\n                authManagerClassName = AUTHENTICATION_MANAGER;\n            }\n            if (\"default\".equals(callbackHandlerClassName)) {\n                callbackHandlerClassName = CALLBACK_HANDLER;\n            }\n\n            final SecurityManagementService securityManagementService = new SecurityManagementService(\n                    authManagerClassName, deepCopySubject, callbackHandlerClassName, AUTHORIZATION_MANAGER);\n            target.addService(SecurityManagementService.SERVICE_NAME, securityManagementService)\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n            // add subject factory service\n            if (\"default\".equals(subjectFactoryClassName))\n                subjectFactoryClassName = SUBJECT_FACTORY;\n\n            final SubjectFactoryService subjectFactoryService = new SubjectFactoryService(subjectFactoryClassName);\n            target.addService(SubjectFactoryService.SERVICE_NAME, subjectFactoryService).addDependency(\n                    SecurityManagementService.SERVICE_NAME, ISecurityManagement.class,\n                    subjectFactoryService.getSecurityManagementInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"e749dc10e4ea50e7ecb00291c591d0af4461b8e5","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ConnectionFactoryConfiguration createConfiguration(final String name, final ModelNode operation) {\n        final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl(name, jndiBindings(operation));\n\n        config.setAutoGroup(operation.get(AUTO_GROUP).asBoolean(HornetQClient.DEFAULT_AUTO_GROUP));\n        config.setBlockOnAcknowledge(operation.get(BLOCK_ON_ACK).asBoolean(HornetQClient.DEFAULT_BLOCK_ON_ACKNOWLEDGE));\n        config.setBlockOnDurableSend(operation.get(BLOCK_ON_DURABLE_SEND).asBoolean(HornetQClient.DEFAULT_BLOCK_ON_DURABLE_SEND));\n        config.setBlockOnNonDurableSend(operation.get(BLOCK_ON_NON_DURABLE_SEND).asBoolean(HornetQClient.DEFAULT_BLOCK_ON_NON_DURABLE_SEND));\n        config.setCacheLargeMessagesClient(operation.get(CACHE_LARGE_MESSAGE_CLIENT).asBoolean(HornetQClient.DEFAULT_CACHE_LARGE_MESSAGE_CLIENT));\n        config.setCallTimeout(operation.get(CALL_TIMEOUT).asLong(HornetQClient.DEFAULT_CALL_TIMEOUT));\n        config.setClientFailureCheckPeriod(operation.get(CLIENT_FAILURE_CHECK_PERIOD).asInt((int) HornetQClient.DEFAULT_CLIENT_FAILURE_CHECK_PERIOD));\n        if(operation.has(CLIENT_ID)) {\n            config.setClientID(operation.get(CLIENT_ID).asString());\n        }\n        config.setConfirmationWindowSize(operation.get(CONFIRMATION_WINDOW_SIZE).asInt(HornetQClient.DEFAULT_CONFIRMATION_WINDOW_SIZE));\n        config.setConnectionTTL(operation.get(CONNECTION_TTL).asLong(HornetQClient.DEFAULT_CONNECTION_TTL));\n        //config.setConnectorConfigs(connectorConfigs)\n        // config.setConnectorNames(connectors);\n        config.setConsumerMaxRate(operation.get(CONSUMER_MAX_RATE).asInt(HornetQClient.DEFAULT_CONSUMER_MAX_RATE));\n        config.setConsumerWindowSize(operation.get(CONSUMER_WINDOW_SIZE).asInt(HornetQClient.DEFAULT_CONSUMER_WINDOW_SIZE));\n        // config.setDiscoveryAddress(discoveryAddress)\n        if(operation.has(DISCOVERY_GROUP_NAME)) {\n            config.setDiscoveryGroupName(operation.get(DISCOVERY_GROUP_NAME).asString());\n        }\n        // config.setDiscoveryPort(discoveryPort)\n        config.setDupsOKBatchSize(operation.get(DUPS_OK_BATCH_SIZE).asInt(HornetQClient.DEFAULT_ACK_BATCH_SIZE));\n        config.setFailoverOnInitialConnection(operation.get(FAILOVER_ON_INITIAL_CONNECTION).asBoolean(HornetQClient.DEFAULT_FAILOVER_ON_INITIAL_CONNECTION));\n        config.setFailoverOnServerShutdown(operation.get(FAILOVER_ON_SERVER_SHUTDOWN).asBoolean(HornetQClient.DEFAULT_FAILOVER_ON_SERVER_SHUTDOWN));\n        if(operation.has(GROUP_ID)) {\n            config.setGroupID(operation.get(GROUP_ID).asString());\n        }\n        // config.setInitialWaitTimeout(operation.get(INI));\n        // config.setLoadBalancingPolicyClassName(loadBalancingPolicyClassName)\n        // config.setLocalBindAddress(localBindAddress)\n        config.setMaxRetryInterval(operation.get(MAX_RETRY_INTERVAL).asLong(HornetQClient.DEFAULT_MAX_RETRY_INTERVAL));\n        config.setMinLargeMessageSize(operation.get(MIN_LARGE_MESSAGE_SIZE).asInt(HornetQClient.DEFAULT_MIN_LARGE_MESSAGE_SIZE));\n        config.setPreAcknowledge(operation.get(PRE_ACK).asBoolean(HornetQClient.DEFAULT_PRE_ACKNOWLEDGE));\n        config.setProducerMaxRate(operation.get(PRODUCER_MAX_RATE).asInt(HornetQClient.DEFAULT_PRODUCER_MAX_RATE));\n        config.setProducerWindowSize(operation.get(PRODUCER_WINDOW_SIZE).asInt(HornetQClient.DEFAULT_PRODUCER_WINDOW_SIZE));\n        config.setReconnectAttempts(operation.get(RECONNECT_ATTEMPTS).asInt(HornetQClient.DEFAULT_RECONNECT_ATTEMPTS));\n        config.setRetryInterval(operation.get(RETRY_INTERVAL).asLong(HornetQClient.DEFAULT_RETRY_INTERVAL));\n        config.setRetryIntervalMultiplier(operation.get(RETRY_INTERVAL_MULTIPLIER).asDouble(HornetQClient.DEFAULT_RETRY_INTERVAL_MULTIPLIER));\n        config.setScheduledThreadPoolMaxSize(operation.get(SCHEDULED_THREAD_POOL_MAX_SIZE).asInt(HornetQClient.DEFAULT_SCHEDULED_THREAD_POOL_MAX_SIZE));\n        config.setThreadPoolMaxSize(operation.get(THREAD_POOL_MAX_SIZE).asInt(HornetQClient.DEFAULT_THREAD_POOL_MAX_SIZE));\n        config.setTransactionBatchSize(operation.get(TRANSACTION_BATH_SIZE).asInt(HornetQClient.DEFAULT_ACK_BATCH_SIZE));\n        config.setUseGlobalPools(operation.get(USE_GLOBAL_POOLS).asBoolean(HornetQClient.DEFAULT_USE_GLOBAL_POOLS));\n\n        return config;\n    }","id":7286,"modified_method":"static ConnectionFactoryConfiguration createConfiguration(final String name, final ModelNode operation) {\n        final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl(name, jndiBindings(operation));\n\n        config.setAutoGroup(operation.get(AUTO_GROUP).asBoolean(HornetQClient.DEFAULT_AUTO_GROUP));\n        config.setBlockOnAcknowledge(operation.get(BLOCK_ON_ACK).asBoolean(HornetQClient.DEFAULT_BLOCK_ON_ACKNOWLEDGE));\n        config.setBlockOnDurableSend(operation.get(BLOCK_ON_DURABLE_SEND).asBoolean(HornetQClient.DEFAULT_BLOCK_ON_DURABLE_SEND));\n        config.setBlockOnNonDurableSend(operation.get(BLOCK_ON_NON_DURABLE_SEND).asBoolean(HornetQClient.DEFAULT_BLOCK_ON_NON_DURABLE_SEND));\n        config.setCacheLargeMessagesClient(operation.get(CACHE_LARGE_MESSAGE_CLIENT).asBoolean(HornetQClient.DEFAULT_CACHE_LARGE_MESSAGE_CLIENT));\n        config.setCallTimeout(operation.get(CALL_TIMEOUT).asLong(HornetQClient.DEFAULT_CALL_TIMEOUT));\n        config.setClientFailureCheckPeriod(operation.get(CLIENT_FAILURE_CHECK_PERIOD).asInt((int) HornetQClient.DEFAULT_CLIENT_FAILURE_CHECK_PERIOD));\n        if(operation.hasDefined(CLIENT_ID)) {\n            config.setClientID(operation.get(CLIENT_ID).asString());\n        }\n        config.setConfirmationWindowSize(operation.get(CONFIRMATION_WINDOW_SIZE).asInt(HornetQClient.DEFAULT_CONFIRMATION_WINDOW_SIZE));\n        config.setConnectionTTL(operation.get(CONNECTION_TTL).asLong(HornetQClient.DEFAULT_CONNECTION_TTL));\n        if (operation.hasDefined(CONNECTOR)) {\n            ModelNode connectorRefs = operation.get(CONNECTOR);\n            List<Pair<String, String>> connectorNames = new ArrayList<Pair<String,String>>();\n            for (String connectorName : operation.get(CONNECTOR).keys()) {\n                ModelNode connectorRef = connectorRefs.get(connectorName);\n                String backup = connectorRef.hasDefined(CONNECTOR_BACKUP_NAME) ? connectorRef.get(CONNECTOR_BACKUP_NAME).asString() : null;\n                connectorNames.add( new Pair<String, String>(connectorName, backup));\n            }\n            config.setConnectorNames(connectorNames);\n        }\n        //config.setConnectorConfigs(connectorConfigs)\n        // config.setConnectorNames(connectors);\n        config.setConsumerMaxRate(operation.get(CONSUMER_MAX_RATE).asInt(HornetQClient.DEFAULT_CONSUMER_MAX_RATE));\n        config.setConsumerWindowSize(operation.get(CONSUMER_WINDOW_SIZE).asInt(HornetQClient.DEFAULT_CONSUMER_WINDOW_SIZE));\n        if(operation.hasDefined(DISCOVERY_GROUP_NAME)) {\n            config.setDiscoveryGroupName(operation.get(DISCOVERY_GROUP_NAME).asString());\n        }\n        config.setDupsOKBatchSize(operation.get(DUPS_OK_BATCH_SIZE).asInt(HornetQClient.DEFAULT_ACK_BATCH_SIZE));\n        config.setFailoverOnInitialConnection(operation.get(FAILOVER_ON_INITIAL_CONNECTION).asBoolean(HornetQClient.DEFAULT_FAILOVER_ON_INITIAL_CONNECTION));\n        config.setFailoverOnServerShutdown(operation.get(FAILOVER_ON_SERVER_SHUTDOWN).asBoolean(HornetQClient.DEFAULT_FAILOVER_ON_SERVER_SHUTDOWN));\n        if(operation.hasDefined(GROUP_ID)) {\n            config.setGroupID(operation.get(GROUP_ID).asString());\n        }\n\n        config.setInitialWaitTimeout(operation.get(DISCOVERY_INITIAL_WAIT_TIMEOUT).asLong(HornetQClient.DEFAULT_DISCOVERY_INITIAL_WAIT_TIMEOUT));\n        if (operation.hasDefined(LOAD_BALANCING_CLASS_NAME)) {\n             config.setLoadBalancingPolicyClassName(operation.get(LOAD_BALANCING_CLASS_NAME).asString());\n        }\n        config.setMaxRetryInterval(operation.get(MAX_RETRY_INTERVAL).asLong(HornetQClient.DEFAULT_MAX_RETRY_INTERVAL));\n        config.setMinLargeMessageSize(operation.get(MIN_LARGE_MESSAGE_SIZE).asInt(HornetQClient.DEFAULT_MIN_LARGE_MESSAGE_SIZE));\n        config.setPreAcknowledge(operation.get(PRE_ACK).asBoolean(HornetQClient.DEFAULT_PRE_ACKNOWLEDGE));\n        config.setProducerMaxRate(operation.get(PRODUCER_MAX_RATE).asInt(HornetQClient.DEFAULT_PRODUCER_MAX_RATE));\n        config.setProducerWindowSize(operation.get(PRODUCER_WINDOW_SIZE).asInt(HornetQClient.DEFAULT_PRODUCER_WINDOW_SIZE));\n        config.setReconnectAttempts(operation.get(RECONNECT_ATTEMPTS).asInt(HornetQClient.DEFAULT_RECONNECT_ATTEMPTS));\n        config.setRetryInterval(operation.get(RETRY_INTERVAL).asLong(HornetQClient.DEFAULT_RETRY_INTERVAL));\n        config.setRetryIntervalMultiplier(operation.get(RETRY_INTERVAL_MULTIPLIER).asDouble(HornetQClient.DEFAULT_RETRY_INTERVAL_MULTIPLIER));\n        config.setScheduledThreadPoolMaxSize(operation.get(SCHEDULED_THREAD_POOL_MAX_SIZE).asInt(HornetQClient.DEFAULT_SCHEDULED_THREAD_POOL_MAX_SIZE));\n        config.setThreadPoolMaxSize(operation.get(THREAD_POOL_MAX_SIZE).asInt(HornetQClient.DEFAULT_THREAD_POOL_MAX_SIZE));\n        config.setTransactionBatchSize(operation.get(TRANSACTION_BATCH_SIZE).asInt(HornetQClient.DEFAULT_ACK_BATCH_SIZE));\n        config.setUseGlobalPools(operation.get(USE_GLOBAL_POOLS).asBoolean(HornetQClient.DEFAULT_USE_GLOBAL_POOLS));\n\n        return config;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n\n            final ConnectionFactoryConfiguration configuration = createConfiguration(name, operation);\n            final ConnectionFactoryService service = new ConnectionFactoryService(configuration);\n            final ServiceName serviceName = JMSServices.JMS_CF_BASE.append(name);\n            runtimeContext.getServiceTarget().addService(serviceName, service)\n                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n        final ModelNode subModel = context.getSubModel();\n        for(final String attribute : JMSServices.CF_ATTRIBUTES) {\n            if(operation.get(attribute).isDefined()) {\n                subModel.get(attribute).set(operation.get(attribute));\n            }\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7287,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n\n        ModelNode opAddr = operation.require(OP_ADDR);\n        final PathAddress address = PathAddress.pathAddress(opAddr);\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(opAddr);\n\n        final ModelNode subModel = context.getSubModel();\n        for(final String attribute : JMSServices.CF_ATTRIBUTES) {\n            if(operation.hasDefined(attribute)) {\n                subModel.get(attribute).set(operation.get(attribute));\n            }\n        }\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n\n            final ConnectionFactoryConfiguration configuration = createConfiguration(name, operation);\n            final ConnectionFactoryService service = new ConnectionFactoryService(configuration);\n            final ServiceName serviceName = JMSServices.JMS_CF_BASE.append(name);\n            runtimeContext.getServiceTarget().addService(serviceName, service)\n                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"static String[] jndiBindings(final ModelNode node) {\n        if(node.has(ENTRIES)) {\n            final Set<String> bindings = new HashSet<String>();\n            for(final ModelNode entry : node.get(ENTRIES).asList()) {\n                bindings.add(entry.asString());\n            }\n            return bindings.toArray(new String[bindings.size()]);\n        }\n        return NO_BINDINGS;\n    }","id":7288,"modified_method":"static String[] jndiBindings(final ModelNode node) {\n        if(node.hasDefined(ENTRIES)) {\n            final Set<String> bindings = new HashSet<String>();\n            for(final ModelNode entry : node.get(ENTRIES).asList()) {\n                bindings.add(entry.asString());\n            }\n            return bindings.toArray(new String[bindings.size()]);\n        }\n        return NO_BINDINGS;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n\n            final JMSQueueService service = new JMSQueueService(name, operation.get(SELECTOR).asString(),\n                    operation.get(DURABLE).asBoolean(true), jndiBindings(operation));\n            final ServiceName serviceName = JMSServices.JMS_QUEUE_BASE.append(name);\n            runtimeContext.getServiceTarget().addService(serviceName, service)\n                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n        final ModelNode subModel = context.getSubModel();\n        if (operation.get(SELECTOR).isDefined()) {\n            subModel.get(SELECTOR).set(operation.get(SELECTOR));\n        }\n        if (operation.get(DURABLE).isDefined()) {\n            subModel.get(DURABLE).set(operation.get(DURABLE));\n        }\n        if (operation.get(ENTRIES).isDefined()) {\n            subModel.get(ENTRIES).set(operation.get(ENTRIES));\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7289,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        ModelNode opAddr = operation.require(OP_ADDR);\n        final PathAddress address = PathAddress.pathAddress(opAddr);\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(opAddr);\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n\n            final JMSQueueService service = new JMSQueueService(name, operation.get(SELECTOR).asString(),\n                    operation.get(DURABLE).asBoolean(true), jndiBindings(operation));\n            final ServiceName serviceName = JMSServices.JMS_QUEUE_BASE.append(name);\n            runtimeContext.getServiceTarget().addService(serviceName, service)\n                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n        final ModelNode subModel = context.getSubModel();\n        if (operation.get(SELECTOR).isDefined()) {\n            subModel.get(SELECTOR).set(operation.get(SELECTOR));\n        }\n        if (operation.get(DURABLE).isDefined()) {\n            subModel.get(DURABLE).set(operation.get(DURABLE));\n        }\n        if (operation.get(ENTRIES).isDefined()) {\n            subModel.get(ENTRIES).set(operation.get(ENTRIES));\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode subModel = context.getSubModel();\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(ADD);\n        compensatingOperation.get(OP_ADDR).set(subModel.require(OP_ADDR));\n        compensatingOperation.get(SELECTOR).set(subModel.get(SELECTOR));\n        compensatingOperation.get(DURABLE).set(subModel.get(DURABLE));\n        compensatingOperation.get(ENTRIES).set(subModel.get(ENTRIES));\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n\n            final ServiceController<?> service = runtimeContext.getServiceRegistry().getService(JMSServices.JMS_QUEUE_BASE.append(name));\n            if(service != null) {\n                service.setMode(Mode.REMOVE);\n            }\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7290,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        ModelNode opAddr = operation.require(OP_ADDR);\n        final PathAddress address = PathAddress.pathAddress(opAddr);\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode subModel = context.getSubModel();\n        final ModelNode compensatingOperation = NewJMSQueueAdd.getOperation(opAddr, subModel);\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n\n            final ServiceController<?> service = runtimeContext.getServiceRegistry().getService(JMSServices.JMS_QUEUE_BASE.append(name));\n            if(service != null) {\n                service.setMode(Mode.REMOVE);\n            }\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeConnectionFactories(final XMLExtendedStreamWriter writer, final ModelNode node) throws XMLStreamException {\n        for (Property prop : node.asPropertyList()) {\n            final String name = prop.getName();\n            final ModelNode factory = prop.getValue();\n            if (factory.isDefined()) {\n                writer.writeStartElement(Element.CONNECTION_FACTORY.getLocalName());\n                writer.writeAttribute(Attribute.NAME.getLocalName(), name);\n\n                if (has(factory, CommonAttributes.DISCOVERY_GROUP_REF)) {\n                    writer.writeStartElement(Element.DISCOVERY_GROUP_REF.getLocalName());\n                    writeAttribute(writer, Attribute.DISCOVERY_GROUP_NAME, factory.get(DISCOVERY_GROUP_REF));\n                    writer.writeEndElement();\n                }\n                if (has(factory, CONNECTOR)) {\n                    writer.writeStartElement(Element.CONNECTORS.getLocalName());\n                    for (Property connProp : factory.get(CONNECTOR).asPropertyList()) {\n                        final ModelNode conn = connProp.getValue();\n                        if (conn.isDefined()) {\n                            writer.writeStartElement(Element.CONNECTOR_REF.getLocalName());\n                            writer.writeAttribute(Attribute.CONNECTOR_NAME.getLocalName(), connProp.getName());\n                            if (has(conn, CONNECTOR_BACKUP_NAME)) {\n                                writeAttribute(writer, Attribute.CONNECTOR_BACKUP_NAME, conn.get(CONNECTOR_BACKUP_NAME));\n                            }\n                            writer.writeEndElement();\n                        }\n                    }\n                    writer.writeEndElement();\n                }\n                if (has(factory, ENTRIES)) {\n                    final ModelNode entries = factory.get(ENTRIES);\n                    if (entries.getType() == ModelType.LIST) {\n                        writer.writeStartElement(Element.ENTRIES.getLocalName());\n                        for (ModelNode entry : entries.asList()) {\n                            if (entry.isDefined()) {\n                                writer.writeStartElement(Element.ENTRY.getLocalName());\n                                writeAttribute(writer, Attribute.NAME, entry);\n                                writer.writeEndElement();\n                            }\n                        }\n                        writer.writeEndElement();\n                    }\n                }\n                //ENTRIES\n\n                if (has(factory, CommonAttributes.DISCOVERY_INITIAL_WAIT_TIMEOUT)){\n                    writeSimpleElement(writer, Element.DISCOVERY_INITIAL_WAIT_TIMEOUT, node);\n                }\n                if (has(factory, CommonAttributes.CLIENT_FAILURE_CHECK_PERIOD)){\n                    writeSimpleElement(writer, Element.DISCOVERY_INITIAL_WAIT_TIMEOUT, node);\n                }\n                if (has(factory, CommonAttributes.CONNECTION_TTL)){\n                    writeSimpleElement(writer, Element.CONNECTION_TTL, node);\n                }\n                if (has(factory, CommonAttributes.CALL_TIMEOUT)){\n                    writeSimpleElement(writer, Element.CALL_TIMEOUT, node);\n                }\n                if (has(factory, CommonAttributes.CONSUMER_WINDOW_SIZE)){\n                    writeSimpleElement(writer, Element.CONSUMER_WINDOW_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.CONSUMER_MAX_RATE)){\n                    writeSimpleElement(writer, Element.CONSUMER_MAX_RATE, node);\n                }\n                if (has(factory, CommonAttributes.CONFIRMATION_WINDOW_SIZE)){\n                    writeSimpleElement(writer, Element.CONFIRMATION_WINDOW_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.PRODUCER_WINDOW_SIZE)){\n                    writeSimpleElement(writer, Element.PRODUCER_WINDOW_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.PRODUCER_MAX_RATE)){\n                    writeSimpleElement(writer, Element.PRODUCER_MAX_RATE, node);\n                }\n                if (has(factory, CommonAttributes.CACHE_LARGE_MESSAGE_CLIENT)){\n                    writeSimpleElement(writer, Element.CACHE_LARGE_MESSAGE_CLIENT, node);\n                }\n                if (has(factory, CommonAttributes.MIN_LARGE_MESSAGE_SIZE)){\n                    writeSimpleElement(writer, Element.MIN_LARGE_MESSAGE_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.CLIENT_ID)){\n                    writeSimpleElement(writer, Element.CLIENT_ID, node);\n                }\n                if (has(factory, CommonAttributes.DUPS_OK_BATCH_SIZE)){\n                    writeSimpleElement(writer, Element.DUPS_OK_BATCH_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.TRANSACTION_BATH_SIZE)){\n                    writeSimpleElement(writer, Element.TRANSACTION_BATH_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.BLOCK_ON_ACK)){\n                    writeSimpleElement(writer, Element.BLOCK_ON_ACK, node);\n                }\n                if (has(factory, CommonAttributes.BLOCK_ON_NON_DURABLE_SEND)){\n                    writeSimpleElement(writer, Element.BLOCK_ON_NON_DURABLE_SEND, node);\n                }\n                if (has(factory, CommonAttributes.BLOCK_ON_DURABLE_SEND)){\n                    writeSimpleElement(writer, Element.BLOCK_ON_DURABLE_SEND, node);\n                }\n                if (has(factory, CommonAttributes.AUTO_GROUP)){\n                    writeSimpleElement(writer, Element.AUTO_GROUP, node);\n                }\n                if (has(factory, CommonAttributes.PRE_ACK)){\n                    writeSimpleElement(writer, Element.PRE_ACK, node);\n                }\n                if (has(factory, CommonAttributes.RETRY_INTERVAL_MULTIPLIER)){\n                    writeSimpleElement(writer, Element.RETRY_INTERVAL_MULTIPLIER, node);\n                }\n                if (has(factory, CommonAttributes.MAX_RETRY_INTERVAL)){\n                    writeSimpleElement(writer, Element.MAX_RETRY_INTERVAL, node);\n                }\n                if (has(factory, CommonAttributes.RECONNECT_ATTEMPTS)){\n                    writeSimpleElement(writer, Element.RECONNECT_ATTEMPTS, node);\n                }\n                if (has(factory, CommonAttributes.FAILOVER_ON_INITIAL_CONNECTION)){\n                    writeSimpleElement(writer, Element.FAILOVER_ON_INITIAL_CONNECTION, node);\n                }\n                if (has(factory, CommonAttributes.FAILOVER_ON_SERVER_SHUTDOWN)){\n                    writeSimpleElement(writer, Element.FAILOVER_ON_SERVER_SHUTDOWN, node);\n                }\n                if (has(factory, CommonAttributes.LOAD_BALANCING_CLASS_NAME)){\n                    writeSimpleElement(writer, Element.LOAD_BALANCING_CLASS_NAME, node);\n                }\n                if (has(factory, CommonAttributes.USE_GLOBAL_POOLS)){\n                    writeSimpleElement(writer, Element.USE_GLOBAL_POOLS, node);\n                }\n                if (has(factory, CommonAttributes.SCHEDULED_THREAD_POOL_MAX_SIZE)){\n                    writeSimpleElement(writer, Element.SCHEDULED_THREAD_POOL_MAX_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.THREAD_POOL_MAX_SIZE)){\n                    writeSimpleElement(writer, Element.THREAD_POOL_MAX_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.GROUP_ID)){\n                    writeSimpleElement(writer, Element.GROUP_ID, node);\n                }\n\n                writer.writeEndElement();\n            }\n        }\n    }","id":7291,"modified_method":"private void writeConnectionFactories(final XMLExtendedStreamWriter writer, final ModelNode node) throws XMLStreamException {\n        for (Property prop : node.asPropertyList()) {\n            final String name = prop.getName();\n            final ModelNode factory = prop.getValue();\n            if (factory.isDefined()) {\n                writer.writeStartElement(Element.CONNECTION_FACTORY.getLocalName());\n                writer.writeAttribute(Attribute.NAME.getLocalName(), name);\n\n                if (has(factory, CommonAttributes.DISCOVERY_GROUP_REF)) {\n                    writer.writeStartElement(Element.DISCOVERY_GROUP_REF.getLocalName());\n                    writeAttribute(writer, Attribute.DISCOVERY_GROUP_NAME, factory.get(DISCOVERY_GROUP_REF));\n                    writer.writeEndElement();\n                }\n                if (has(factory, CONNECTOR)) {\n                    writer.writeStartElement(Element.CONNECTORS.getLocalName());\n                    for (Property connProp : factory.get(CONNECTOR).asPropertyList()) {\n                        final ModelNode conn = connProp.getValue();\n                        if (conn.isDefined()) {\n                            writer.writeStartElement(Element.CONNECTOR_REF.getLocalName());\n                            writer.writeAttribute(Attribute.CONNECTOR_NAME.getLocalName(), connProp.getName());\n                            if (has(conn, CONNECTOR_BACKUP_NAME)) {\n                                writeAttribute(writer, Attribute.CONNECTOR_BACKUP_NAME, conn.get(CONNECTOR_BACKUP_NAME));\n                            }\n                            writer.writeEndElement();\n                        }\n                    }\n                    writer.writeEndElement();\n                }\n                if (has(factory, ENTRIES)) {\n                    final ModelNode entries = factory.get(ENTRIES);\n                    if (entries.getType() == ModelType.LIST) {\n                        writer.writeStartElement(Element.ENTRIES.getLocalName());\n                        for (ModelNode entry : entries.asList()) {\n                            if (entry.isDefined()) {\n                                writer.writeStartElement(Element.ENTRY.getLocalName());\n                                writeAttribute(writer, Attribute.NAME, entry);\n                                writer.writeEndElement();\n                            }\n                        }\n                        writer.writeEndElement();\n                    }\n                }\n                //ENTRIES\n\n                if (has(factory, CommonAttributes.DISCOVERY_INITIAL_WAIT_TIMEOUT)){\n                    writeSimpleElement(writer, Element.DISCOVERY_INITIAL_WAIT_TIMEOUT, node);\n                }\n                if (has(factory, CommonAttributes.CLIENT_FAILURE_CHECK_PERIOD)){\n                    writeSimpleElement(writer, Element.DISCOVERY_INITIAL_WAIT_TIMEOUT, node);\n                }\n                if (has(factory, CommonAttributes.CONNECTION_TTL)){\n                    writeSimpleElement(writer, Element.CONNECTION_TTL, node);\n                }\n                if (has(factory, CommonAttributes.CALL_TIMEOUT)){\n                    writeSimpleElement(writer, Element.CALL_TIMEOUT, node);\n                }\n                if (has(factory, CommonAttributes.CONSUMER_WINDOW_SIZE)){\n                    writeSimpleElement(writer, Element.CONSUMER_WINDOW_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.CONSUMER_MAX_RATE)){\n                    writeSimpleElement(writer, Element.CONSUMER_MAX_RATE, node);\n                }\n                if (has(factory, CommonAttributes.CONFIRMATION_WINDOW_SIZE)){\n                    writeSimpleElement(writer, Element.CONFIRMATION_WINDOW_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.PRODUCER_WINDOW_SIZE)){\n                    writeSimpleElement(writer, Element.PRODUCER_WINDOW_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.PRODUCER_MAX_RATE)){\n                    writeSimpleElement(writer, Element.PRODUCER_MAX_RATE, node);\n                }\n                if (has(factory, CommonAttributes.CACHE_LARGE_MESSAGE_CLIENT)){\n                    writeSimpleElement(writer, Element.CACHE_LARGE_MESSAGE_CLIENT, node);\n                }\n                if (has(factory, CommonAttributes.MIN_LARGE_MESSAGE_SIZE)){\n                    writeSimpleElement(writer, Element.MIN_LARGE_MESSAGE_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.CLIENT_ID)){\n                    writeSimpleElement(writer, Element.CLIENT_ID, node);\n                }\n                if (has(factory, CommonAttributes.DUPS_OK_BATCH_SIZE)){\n                    writeSimpleElement(writer, Element.DUPS_OK_BATCH_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.TRANSACTION_BATCH_SIZE)){\n                    writeSimpleElement(writer, Element.TRANSACTION_BATH_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.BLOCK_ON_ACK)){\n                    writeSimpleElement(writer, Element.BLOCK_ON_ACK, node);\n                }\n                if (has(factory, CommonAttributes.BLOCK_ON_NON_DURABLE_SEND)){\n                    writeSimpleElement(writer, Element.BLOCK_ON_NON_DURABLE_SEND, node);\n                }\n                if (has(factory, CommonAttributes.BLOCK_ON_DURABLE_SEND)){\n                    writeSimpleElement(writer, Element.BLOCK_ON_DURABLE_SEND, node);\n                }\n                if (has(factory, CommonAttributes.AUTO_GROUP)){\n                    writeSimpleElement(writer, Element.AUTO_GROUP, node);\n                }\n                if (has(factory, CommonAttributes.PRE_ACK)){\n                    writeSimpleElement(writer, Element.PRE_ACK, node);\n                }\n                if (has(factory, CommonAttributes.RETRY_INTERVAL_MULTIPLIER)){\n                    writeSimpleElement(writer, Element.RETRY_INTERVAL_MULTIPLIER, node);\n                }\n                if (has(factory, CommonAttributes.MAX_RETRY_INTERVAL)){\n                    writeSimpleElement(writer, Element.MAX_RETRY_INTERVAL, node);\n                }\n                if (has(factory, CommonAttributes.RECONNECT_ATTEMPTS)){\n                    writeSimpleElement(writer, Element.RECONNECT_ATTEMPTS, node);\n                }\n                if (has(factory, CommonAttributes.FAILOVER_ON_INITIAL_CONNECTION)){\n                    writeSimpleElement(writer, Element.FAILOVER_ON_INITIAL_CONNECTION, node);\n                }\n                if (has(factory, CommonAttributes.FAILOVER_ON_SERVER_SHUTDOWN)){\n                    writeSimpleElement(writer, Element.FAILOVER_ON_SERVER_SHUTDOWN, node);\n                }\n                if (has(factory, CommonAttributes.LOAD_BALANCING_CLASS_NAME)){\n                    writeSimpleElement(writer, Element.LOAD_BALANCING_CLASS_NAME, node);\n                }\n                if (has(factory, CommonAttributes.USE_GLOBAL_POOLS)){\n                    writeSimpleElement(writer, Element.USE_GLOBAL_POOLS, node);\n                }\n                if (has(factory, CommonAttributes.SCHEDULED_THREAD_POOL_MAX_SIZE)){\n                    writeSimpleElement(writer, Element.SCHEDULED_THREAD_POOL_MAX_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.THREAD_POOL_MAX_SIZE)){\n                    writeSimpleElement(writer, Element.THREAD_POOL_MAX_SIZE, node);\n                }\n                if (has(factory, CommonAttributes.GROUP_ID)){\n                    writeSimpleElement(writer, Element.GROUP_ID, node);\n                }\n\n                writer.writeEndElement();\n            }\n        }\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n            final JMSTopicService service = new JMSTopicService(name, jndiBindings(operation));\n            final ServiceName serviceName = JMSServices.JMS_TOPIC_BASE.append(name);\n            runtimeContext.getServiceTarget().addService(serviceName, service)\n                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n        if(operation.has(ENTRIES)) {\n            context.getSubModel().get(ENTRIES).set(operation.get(ENTRIES));\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7292,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        ModelNode opAddr = operation.require(OP_ADDR);\n        final PathAddress address = PathAddress.pathAddress(opAddr);\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(opAddr);\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n            final JMSTopicService service = new JMSTopicService(name, jndiBindings(operation));\n            final ServiceName serviceName = JMSServices.JMS_TOPIC_BASE.append(name);\n            runtimeContext.getServiceTarget().addService(serviceName, service)\n                    .addDependency(JMSServices.JMS_MANAGER, JMSServerManager.class, service.getJmsServer())\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n        if(operation.hasDefined(ENTRIES)) {\n            context.getSubModel().get(ENTRIES).set(operation.get(ENTRIES));\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode subModel = context.getSubModel();\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(ADD);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n        compensatingOperation.get(CommonAttributes.ENTRIES).set(subModel.get(CommonAttributes.ENTRIES));\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n            final ServiceController<?> service = runtimeContext.getServiceRegistry().getService(JMSServices.JMS_TOPIC_BASE.append(name));\n            if(service != null) {\n                service.setMode(Mode.REMOVE);\n            }\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7293,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public Cancellable execute(final NewOperationContext context, final ModelNode operation, ResultHandler resultHandler) {\n\n        ModelNode opAddr = operation.require(OP_ADDR);\n        final PathAddress address = PathAddress.pathAddress(opAddr);\n        final String name = address.getLastElement().getValue();\n\n        final ModelNode subModel = context.getSubModel();\n        final ModelNode compensatingOperation = NewJMSTopicAdd.getOperation(opAddr, subModel);\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext runtimeContext = (NewRuntimeOperationContext) context;\n            final ServiceController<?> service = runtimeContext.getServiceRegistry().getService(JMSServices.JMS_TOPIC_BASE.append(name));\n            if(service != null) {\n                service.setMode(Mode.REMOVE);\n            }\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public void initializeParsers(ExtensionParsingContext context) {\n        context.setSubsystemXmlMapping(Namespace.MESSAGING_1_0.getUriString(), NewMessagingSubsystemParser.getInstance());\n        // Also register JMS subsystem\n        JMS_EXTENSION.initializeParsers(context);\n    }","id":7294,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public void initializeParsers(ExtensionParsingContext context) {\n        context.setSubsystemXmlMapping(Namespace.MESSAGING_1_0.getUriString(), NewMessagingSubsystemParser.getInstance());\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public void initialize(NewExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n        final ModelNodeRegistration registration = subsystem.registerSubsystemModel(NewMessagingSubsystemProviders.SUBSYSTEM);\n        registration.registerOperationHandler(ADD, NewMessagingSubsystemAdd.INSTANCE, NewMessagingSubsystemProviders.SUBSYSTEM_ADD, false);\n        subsystem.registerXMLElementWriter(NewMessagingSubsystemParser.getInstance());\n        // Also register JMS subsystem\n        JMS_EXTENSION.initialize(context);\n    }","id":7295,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public void initialize(NewExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME);\n        final ModelNodeRegistration registration = subsystem.registerSubsystemModel(NewMessagingSubsystemProviders.SUBSYSTEM);\n        registration.registerOperationHandler(ADD, NewMessagingSubsystemAdd.INSTANCE, NewMessagingSubsystemProviders.SUBSYSTEM_ADD, false);\n        subsystem.registerXMLElementWriter(NewMessagingSubsystemParser.getInstance());\n        final ModelNodeRegistration queue = registration.registerSubModel(PathElement.pathElement(QUEUE), NewMessagingSubsystemProviders.QUEUE_RESOURCE);\n        queue.registerOperationHandler(ADD, NewQueueAdd.INSTANCE, NewQueueAdd.INSTANCE, false);\n        queue.registerOperationHandler(REMOVE, NewQueueRemove.INSTANCE, NewQueueRemove.INSTANCE, false);\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Transform the detyped operation parameters into the hornetQ configuration.\n     *\n     * @param params the detyped operation parameters\n     * @return the hornetQ configuration\n     */\n    static Configuration transformConfig(final ModelNode params) {\n        final Configuration configuration = new ConfigurationImpl();\n        // --\n        configuration.setBackup(params.get(BACKUP).asBoolean(ConfigurationImpl.DEFAULT_BACKUP));\n        if(params.has(BACKUP_CONNECTOR_REF)) {\n            configuration.setBackupConnectorName(params.get(BACKUP_CONNECTOR_REF).asString());\n        }\n        configuration.setClustered(params.get(CLUSTERED).asBoolean(ConfigurationImpl.DEFAULT_CLUSTERED));\n        configuration.setClusterPassword(params.get(CLUSTER_PASSWORD).asString());\n        configuration.setClusterUser(params.get(CLUSTER_USER).asString());\n        configuration.setConnectionTTLOverride(params.get(CONNECTION_TTL_OVERRIDE).asInt((int) ConfigurationImpl.DEFAULT_CONNECTION_TTL_OVERRIDE));\n        configuration.setCreateBindingsDir(params.get(CREATE_BINDINGS_DIR).asBoolean(ConfigurationImpl.DEFAULT_CREATE_BINDINGS_DIR));\n        configuration.setCreateJournalDir(params.get(CREATE_JOURNAL_DIR).asBoolean(ConfigurationImpl.DEFAULT_CREATE_JOURNAL_DIR));\n        configuration.setEnabledAsyncConnectionExecution(params.get(ASYNC_CONNECTION_EXECUTION_ENABLED).asBoolean(ConfigurationImpl.DEFAULT_ASYNC_CONNECTION_EXECUTION_ENABLED));\n        configuration.setIDCacheSize(params.get(ID_CACHE_SIZE).asInt(ConfigurationImpl.DEFAULT_ID_CACHE_SIZE));\n        // TODO do we want to allow the jmx configuration ?\n        if(params.has(JMX_DOMAIN)) configuration.setJMXDomain(params.get(JMX_DOMAIN).asString());\n        configuration.setJMXManagementEnabled(params.get(JMX_MANAGEMENT_ENABLED).asBoolean(ConfigurationImpl.DEFAULT_JMX_MANAGEMENT_ENABLED));\n        // Journal\n        final JournalType journalType = params.has(JOURNAL_TYPE) ? JournalType.valueOf(params.get(JOURNAL_TYPE).asString()) : ConfigurationImpl.DEFAULT_JOURNAL_TYPE;\n        configuration.setJournalType(journalType);\n        // AIO Journal\n        configuration.setJournalBufferSize_AIO(params.get(JOURNAL_BUFFER_SIZE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_SIZE_AIO));\n        configuration.setJournalBufferTimeout_AIO(params.get(JOURNAL_BUFFER_TIMEOUT).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_TIMEOUT_AIO));\n        configuration.setJournalMaxIO_AIO(params.get(JOURNAL_MAX_IO).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MAX_IO_AIO));\n        // NIO Journal\n        configuration.setJournalBufferSize_NIO(params.get(JOURNAL_BUFFER_SIZE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_SIZE_NIO));\n        configuration.setJournalBufferTimeout_NIO(params.get(JOURNAL_BUFFER_TIMEOUT).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_TIMEOUT_NIO));\n        configuration.setJournalMaxIO_NIO(params.get(JOURNAL_MAX_IO).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MAX_IO_NIO));\n        //\n        configuration.setJournalCompactMinFiles(params.get(JOURNAL_COMPACT_MIN_FILES).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MIN_FILES));\n        configuration.setJournalCompactPercentage(params.get(JOURNAL_COMPACT_PERCENTAGE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_COMPACT_PERCENTAGE));\n        configuration.setJournalFileSize(params.get(JOURNAL_FILE_SIZE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_FILE_SIZE));\n        configuration.setJournalMinFiles(params.get(JOURNAL_MIN_FILES).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MIN_FILES));\n        configuration.setJournalPerfBlastPages(params.get(PERF_BLAST_PAGES).asInt(ConfigurationImpl.DEFAULT_JOURNAL_PERF_BLAST_PAGES));\n        configuration.setJournalSyncNonTransactional(params.get(JOURNAL_SYNC_NON_TRANSACTIONAL).asBoolean(ConfigurationImpl.DEFAULT_JOURNAL_SYNC_NON_TRANSACTIONAL));\n        configuration.setJournalSyncTransactional(params.get(JOURNAL_SYNC_TRANSACTIONAL).asBoolean(ConfigurationImpl.DEFAULT_JOURNAL_SYNC_TRANSACTIONAL));\n        configuration.setLogJournalWriteRate(params.get(LOG_JOURNAL_WRITE_RATE).asBoolean(ConfigurationImpl.DEFAULT_JOURNAL_LOG_WRITE_RATE));\n\n        // configuration.setManagementAddress(address)\n        // configuration.setManagementNotificationAddress(address)\n        // TODO more\n\n        configuration.setPersistDeliveryCountBeforeDelivery(params.get(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY).asBoolean(ConfigurationImpl.DEFAULT_PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY));\n        configuration.setPersistenceEnabled(params.get(PERSISTENCE_ENABLED).asBoolean(ConfigurationImpl.DEFAULT_PERSISTENCE_ENABLED));\n        configuration.setPersistIDCache(params.get(PERSIST_ID_CACHE).asBoolean(ConfigurationImpl.DEFAULT_PERSIST_ID_CACHE));\n\n        // --\n        processAddressSettings(configuration, params);\n        processCoreQueues(configuration, params);\n        processSecuritySettings(configuration, params);\n        return configuration;\n    }","id":7296,"modified_method":"/**\n     * Transform the detyped operation parameters into the hornetQ configuration.\n     *\n     * @param params the detyped operation parameters\n     * @return the hornetQ configuration\n     */\n    static Configuration transformConfig(final ModelNode params) {\n        final Configuration configuration = new ConfigurationImpl();\n        // --\n        configuration.setBackup(params.get(BACKUP).asBoolean(ConfigurationImpl.DEFAULT_BACKUP));\n        if(params.has(BACKUP_CONNECTOR_REF)) {\n            configuration.setBackupConnectorName(params.get(BACKUP_CONNECTOR_REF).asString());\n        }\n        configuration.setClustered(params.get(CLUSTERED).asBoolean(ConfigurationImpl.DEFAULT_CLUSTERED));\n        configuration.setClusterPassword(params.get(CLUSTER_PASSWORD).asString());\n        configuration.setClusterUser(params.get(CLUSTER_USER).asString());\n        configuration.setConnectionTTLOverride(params.get(CONNECTION_TTL_OVERRIDE).asInt((int) ConfigurationImpl.DEFAULT_CONNECTION_TTL_OVERRIDE));\n        configuration.setCreateBindingsDir(params.get(CREATE_BINDINGS_DIR).asBoolean(ConfigurationImpl.DEFAULT_CREATE_BINDINGS_DIR));\n        configuration.setCreateJournalDir(params.get(CREATE_JOURNAL_DIR).asBoolean(ConfigurationImpl.DEFAULT_CREATE_JOURNAL_DIR));\n        configuration.setEnabledAsyncConnectionExecution(params.get(ASYNC_CONNECTION_EXECUTION_ENABLED).asBoolean(ConfigurationImpl.DEFAULT_ASYNC_CONNECTION_EXECUTION_ENABLED));\n        configuration.setIDCacheSize(params.get(ID_CACHE_SIZE).asInt(ConfigurationImpl.DEFAULT_ID_CACHE_SIZE));\n        // TODO do we want to allow the jmx configuration ?\n        if(params.hasDefined(JMX_DOMAIN)) configuration.setJMXDomain(params.get(JMX_DOMAIN).asString());\n        configuration.setJMXManagementEnabled(params.get(JMX_MANAGEMENT_ENABLED).asBoolean(ConfigurationImpl.DEFAULT_JMX_MANAGEMENT_ENABLED));\n        // Journal\n        final JournalType journalType = params.hasDefined(JOURNAL_TYPE) ? JournalType.valueOf(params.get(JOURNAL_TYPE).asString()) : ConfigurationImpl.DEFAULT_JOURNAL_TYPE;\n        configuration.setJournalType(journalType);\n        // AIO Journal\n        configuration.setJournalBufferSize_AIO(params.get(JOURNAL_BUFFER_SIZE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_SIZE_AIO));\n        configuration.setJournalBufferTimeout_AIO(params.get(JOURNAL_BUFFER_TIMEOUT).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_TIMEOUT_AIO));\n        configuration.setJournalMaxIO_AIO(params.get(JOURNAL_MAX_IO).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MAX_IO_AIO));\n        // NIO Journal\n        configuration.setJournalBufferSize_NIO(params.get(JOURNAL_BUFFER_SIZE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_SIZE_NIO));\n        configuration.setJournalBufferTimeout_NIO(params.get(JOURNAL_BUFFER_TIMEOUT).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_TIMEOUT_NIO));\n        configuration.setJournalMaxIO_NIO(params.get(JOURNAL_MAX_IO).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MAX_IO_NIO));\n        //\n        configuration.setJournalCompactMinFiles(params.get(JOURNAL_COMPACT_MIN_FILES).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MIN_FILES));\n        configuration.setJournalCompactPercentage(params.get(JOURNAL_COMPACT_PERCENTAGE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_COMPACT_PERCENTAGE));\n        configuration.setJournalFileSize(params.get(JOURNAL_FILE_SIZE).asInt(ConfigurationImpl.DEFAULT_JOURNAL_FILE_SIZE));\n        configuration.setJournalMinFiles(params.get(JOURNAL_MIN_FILES).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MIN_FILES));\n        configuration.setJournalPerfBlastPages(params.get(PERF_BLAST_PAGES).asInt(ConfigurationImpl.DEFAULT_JOURNAL_PERF_BLAST_PAGES));\n        configuration.setJournalSyncNonTransactional(params.get(JOURNAL_SYNC_NON_TRANSACTIONAL).asBoolean(ConfigurationImpl.DEFAULT_JOURNAL_SYNC_NON_TRANSACTIONAL));\n        configuration.setJournalSyncTransactional(params.get(JOURNAL_SYNC_TRANSACTIONAL).asBoolean(ConfigurationImpl.DEFAULT_JOURNAL_SYNC_TRANSACTIONAL));\n        configuration.setLogJournalWriteRate(params.get(LOG_JOURNAL_WRITE_RATE).asBoolean(ConfigurationImpl.DEFAULT_JOURNAL_LOG_WRITE_RATE));\n\n        // configuration.setManagementAddress(address)\n        // configuration.setManagementNotificationAddress(address)\n        // TODO more\n\n        configuration.setPersistDeliveryCountBeforeDelivery(params.get(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY).asBoolean(ConfigurationImpl.DEFAULT_PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY));\n        configuration.setPersistenceEnabled(params.get(PERSISTENCE_ENABLED).asBoolean(ConfigurationImpl.DEFAULT_PERSISTENCE_ENABLED));\n        configuration.setPersistIDCache(params.get(PERSIST_ID_CACHE).asBoolean(ConfigurationImpl.DEFAULT_PERSIST_ID_CACHE));\n\n        // --\n        processAddressSettings(configuration, params);\n        processCoreQueues(configuration, params);\n        processSecuritySettings(configuration, params);\n        return configuration;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Create a path service for a given target.\n     *\n     * @param name the path service name\n     * @param path the detyped path element\n     * @param serviceTarget the service target\n     * @return the created service name\n     */\n    static ServiceName createDirectoryService(final String name, final ModelNode path, final ServiceTarget serviceTarget) {\n        final ServiceName serviceName = PATH_BASE.append(name);\n        final String relativeTo = path.has(RELATIVE_TO) ? path.get(RELATIVE_TO).asString() : DEFAULT_RELATIVE_TO;\n        final String pathName = path.has(PATH) ? path.get(PATH).asString() : DEFAULT_PATH + name;\n        RelativePathService.addService(serviceName, pathName, relativeTo, serviceTarget);\n        return serviceName;\n    }","id":7297,"modified_method":"/**\n     * Create a path service for a given target.\n     *\n     * @param name the path service name\n     * @param path the detyped path element\n     * @param serviceTarget the service target\n     * @return the created service name\n     */\n    static ServiceName createDirectoryService(final String name, final ModelNode path, final ServiceTarget serviceTarget) {\n        final ServiceName serviceName = PATH_BASE.append(name);\n        final String relativeTo = path.hasDefined(RELATIVE_TO) ? path.get(RELATIVE_TO).asString() : DEFAULT_RELATIVE_TO;\n        final String pathName = path.hasDefined(PATH) ? path.get(PATH).asString() : DEFAULT_PATH + name;\n        RelativePathService.addService(serviceName, pathName, relativeTo, serviceTarget);\n        return serviceName;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    public Cancellable execute(NewOperationContext context, ModelNode operation, ResultHandler resultHandler) {\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext updateContext = (NewRuntimeOperationContext) context;\n            final ServiceTarget serviceTarget = updateContext.getServiceTarget();\n            // Create the HornetQ Service\n            final HornetQService hqService = new HornetQService();\n            // Transform the configuration\n            final Configuration configuration = transformConfig(operation);\n\n            // Add the HornetQ Service\n            final ServiceBuilder<HornetQServer> serviceBuilder = serviceTarget.addService(MessagingSubsystemElement.JBOSS_MESSAGING, hqService)\n                .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, hqService.getMBeanServer());\n            // Create path services\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_BINDINGS_DIR, operation.get(BINDINGS_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_BINDINGS_DIR));\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_JOURNAL_DIR, operation.get(JOURNAL_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_JOURNAL_DIR));\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_LARGE_MESSSAGE_DIR, operation.get(LARGE_MESSAGES_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_LARGE_MESSSAGE_DIR));\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_PAGING_DIR, operation.get(PAGING_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_PAGING_DIR));\n\n            // Proccess acceptors and connectors\n            final Set<String> socketBindings = new HashSet<String>();\n            processAcceptors(configuration, operation, socketBindings);\n            processConnectors(configuration, operation, socketBindings);\n            for(final String socketBinding : socketBindings) {\n                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);\n                serviceBuilder.addDependency(socketName, SocketBinding.class, hqService.getSocketBindingInjector(socketBinding));\n            }\n            hqService.setConfiguration(configuration);\n\n            // Install the HornetQ Service\n            serviceBuilder.install();\n\n            // TODO this should be added by the jms subsystem itself\n            JMSService.addService(serviceTarget);\n        }\n\n        // Populate subModel\n        final ModelNode subModel = context.getSubModel();\n        subModel.setEmptyObject();\n        for(final String attribute : NewMessagingSubsystemProviders.MESSAGING_ROOT_ATTRIBUTES) {\n            if(operation.get(attribute).isDefined()) {\n                subModel.get(attribute).set(operation.get(attribute));\n            }\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7298,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public Cancellable execute(NewOperationContext context, ModelNode operation, ResultHandler resultHandler) {\n\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n\n        // Populate subModel\n        final ModelNode subModel = context.getSubModel();\n        subModel.setEmptyObject();\n        for(final String attribute : NewMessagingSubsystemProviders.MESSAGING_ROOT_ATTRIBUTES) {\n            if(operation.hasDefined(attribute)) {\n                subModel.get(attribute).set(operation.get(attribute));\n            }\n        }\n        subModel.get(QUEUE);\n\n        if(context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext updateContext = (NewRuntimeOperationContext) context;\n            final ServiceTarget serviceTarget = updateContext.getServiceTarget();\n            // Create the HornetQ Service\n            final HornetQService hqService = new HornetQService();\n            // Transform the configuration\n            final Configuration configuration = transformConfig(operation);\n\n            // Add the HornetQ Service\n            final ServiceBuilder<HornetQServer> serviceBuilder = serviceTarget.addService(MessagingSubsystemElement.JBOSS_MESSAGING, hqService)\n                .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, hqService.getMBeanServer());\n            // Create path services\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_BINDINGS_DIR, operation.get(BINDINGS_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_BINDINGS_DIR));\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_JOURNAL_DIR, operation.get(JOURNAL_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_JOURNAL_DIR));\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_LARGE_MESSSAGE_DIR, operation.get(LARGE_MESSAGES_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_LARGE_MESSSAGE_DIR));\n            serviceBuilder.addDependency(createDirectoryService(DEFAULT_PAGING_DIR, operation.get(PAGING_DIRECTORY), serviceTarget),\n                        String.class, hqService.getPathInjector(DEFAULT_PAGING_DIR));\n\n            // Proccess acceptors and connectors\n            final Set<String> socketBindings = new HashSet<String>();\n            processAcceptors(configuration, operation, socketBindings);\n            processConnectors(configuration, operation, socketBindings);\n            for(final String socketBinding : socketBindings) {\n                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);\n                serviceBuilder.addDependency(socketName, SocketBinding.class, hqService.getSocketBindingInjector(socketBinding));\n            }\n            hqService.setConfiguration(configuration);\n\n            // Install the HornetQ Service\n            serviceBuilder.install();\n\n            // TODO this should be added by the jms subsystem itself\n            JMSService.addService(serviceTarget);\n        }\n\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Process the address settings.\n     *\n     * @param configuration the hornetQ configuration\n     * @param params the detyped operation parameters\n     */\n    static void processAddressSettings(final Configuration configuration, final ModelNode params) {\n        if(params.get(ADDRESS_SETTING).isDefined()) {\n            for(final Property property : params.get(ADDRESS_SETTING).asPropertyList()) {\n                final String match = property.getName();\n                final ModelNode config = property.getValue();\n\n                final AddressSettings settings = new AddressSettings();\n                final AddressFullMessagePolicy addressPolicy = config.has(ADDRESS_FULL_MESSAGE_POLICY) ?\n                        AddressFullMessagePolicy.valueOf(config.get(ADDRESS_FULL_MESSAGE_POLICY).asString()) : AddressSettings.DEFAULT_ADDRESS_FULL_MESSAGE_POLICY;\n                settings.setAddressFullMessagePolicy(addressPolicy);\n                settings.setDeadLetterAddress(asSimpleString(config.get(DEAD_LETTER_ADDRESS), null));\n                settings.setLastValueQueue(config.get(LVQ).asBoolean(AddressSettings.DEFAULT_LAST_VALUE_QUEUE));\n                settings.setMaxDeliveryAttempts(config.get(MAX_DELIVERY_ATTEMPTS).asInt(AddressSettings.DEFAULT_MAX_DELIVERY_ATTEMPTS));\n                settings.setMaxSizeBytes(config.get(MAX_SIZE_BYTES_NODE_NAME).asInt((int) AddressSettings.DEFAULT_MAX_SIZE_BYTES));\n                settings.setMessageCounterHistoryDayLimit(config.get(MESSAGE_COUNTER_HISTORY_DAY_LIMIT).asInt(AddressSettings.DEFAULT_MESSAGE_COUNTER_HISTORY_DAY_LIMIT));\n                settings.setExpiryAddress(asSimpleString(config.get(EXPIRY_ADDRESS), null));\n                settings.setRedeliveryDelay(config.get(REDELIVERY_DELAY).asInt((int) AddressSettings.DEFAULT_REDELIVER_DELAY));\n                settings.setRedistributionDelay(config.get(REDISTRIBUTION_DELAY).asInt((int) AddressSettings.DEFAULT_REDISTRIBUTION_DELAY));\n                settings.setPageSizeBytes(config.get(PAGE_SIZE_BYTES_NODE_NAME).asInt((int) AddressSettings.DEFAULT_PAGE_SIZE));\n                settings.setSendToDLAOnNoRoute(config.get(SEND_TO_DLA_ON_NO_ROUTE).asBoolean(AddressSettings.DEFAULT_SEND_TO_DLA_ON_NO_ROUTE));\n\n                configuration.getAddressesSettings().put(match, settings);\n            }\n        }\n    }","id":7299,"modified_method":"/**\n     * Process the address settings.\n     *\n     * @param configuration the hornetQ configuration\n     * @param params the detyped operation parameters\n     */\n    static void processAddressSettings(final Configuration configuration, final ModelNode params) {\n        if(params.get(ADDRESS_SETTING).isDefined()) {\n            for(final Property property : params.get(ADDRESS_SETTING).asPropertyList()) {\n                final String match = property.getName();\n                final ModelNode config = property.getValue();\n\n                final AddressSettings settings = new AddressSettings();\n                final AddressFullMessagePolicy addressPolicy = config.hasDefined(ADDRESS_FULL_MESSAGE_POLICY) ?\n                        AddressFullMessagePolicy.valueOf(config.get(ADDRESS_FULL_MESSAGE_POLICY).asString()) : AddressSettings.DEFAULT_ADDRESS_FULL_MESSAGE_POLICY;\n                settings.setAddressFullMessagePolicy(addressPolicy);\n                settings.setDeadLetterAddress(asSimpleString(config.get(DEAD_LETTER_ADDRESS), null));\n                settings.setLastValueQueue(config.get(LVQ).asBoolean(AddressSettings.DEFAULT_LAST_VALUE_QUEUE));\n                settings.setMaxDeliveryAttempts(config.get(MAX_DELIVERY_ATTEMPTS).asInt(AddressSettings.DEFAULT_MAX_DELIVERY_ATTEMPTS));\n                settings.setMaxSizeBytes(config.get(MAX_SIZE_BYTES_NODE_NAME).asInt((int) AddressSettings.DEFAULT_MAX_SIZE_BYTES));\n                settings.setMessageCounterHistoryDayLimit(config.get(MESSAGE_COUNTER_HISTORY_DAY_LIMIT).asInt(AddressSettings.DEFAULT_MESSAGE_COUNTER_HISTORY_DAY_LIMIT));\n                settings.setExpiryAddress(asSimpleString(config.get(EXPIRY_ADDRESS), null));\n                settings.setRedeliveryDelay(config.get(REDELIVERY_DELAY).asInt((int) AddressSettings.DEFAULT_REDELIVER_DELAY));\n                settings.setRedistributionDelay(config.get(REDISTRIBUTION_DELAY).asInt((int) AddressSettings.DEFAULT_REDISTRIBUTION_DELAY));\n                settings.setPageSizeBytes(config.get(PAGE_SIZE_BYTES_NODE_NAME).asInt((int) AddressSettings.DEFAULT_PAGE_SIZE));\n                settings.setSendToDLAOnNoRoute(config.get(SEND_TO_DLA_ON_NO_ROUTE).asBoolean(AddressSettings.DEFAULT_SEND_TO_DLA_ON_NO_ROUTE));\n\n                configuration.getAddressesSettings().put(match, settings);\n            }\n        }\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Process the connector information.\n     *\n     * @param configuration the hornetQ configuration\n     * @param params the detyped operation parameters\n     * @param bindings the referenced socket bindings\n     */\n    static void processConnectors(final Configuration configuration, final ModelNode params, final Set<String> bindings) {\n        if(params.has(CONNECTOR)) {\n            final Map<String, TransportConfiguration> connectors = new HashMap<String, TransportConfiguration>();\n            for(final Property property : params.get(CONNECTOR).asPropertyList()) {\n                final String connectorName = property.getName();\n                final ModelNode config = property.getValue();\n                final Map<String, Object> parameters = new HashMap<String, Object>();\n                if(config.get(PARAM).isDefined()) {\n                    for(final Property parameter : config.get(PARAM).asPropertyList()) {\n                        parameters.put(parameter.getName(), parameter.getValue().asString());\n                    }\n                }\n                final TransportConfigType type = TransportConfigType.valueOf(config.get(TYPE).asString());\n                final String clazz;\n                switch(type) {\n                    case Remote: {\n                        clazz = NettyConnectorFactory.class.getName();\n                        final String binding = config.get(SOCKET_BINDING).asString();\n                        parameters.put(SOCKET_BINDING, binding);\n                        bindings.add(binding);\n                        break;\n                    } case InVM: {\n                        clazz = InVMConnectorFactory.class.getName();\n                        parameters.put(SERVER_ID, config.get(SERVER_ID).asInt());\n                        break;\n                    } case Generic: {\n                        clazz = config.get(FACTORY_CLASS).asString();\n                        break;\n                    } default: {\n                        clazz = null;\n                        break;\n                    }\n                }\n                connectors.put(connectorName, new TransportConfiguration(clazz, parameters, connectorName));\n            }\n            configuration.setConnectorConfigurations(connectors);\n        }\n    }","id":7300,"modified_method":"/**\n     * Process the connector information.\n     *\n     * @param configuration the hornetQ configuration\n     * @param params the detyped operation parameters\n     * @param bindings the referenced socket bindings\n     */\n    static void processConnectors(final Configuration configuration, final ModelNode params, final Set<String> bindings) {\n        if(params.hasDefined(CONNECTOR)) {\n            final Map<String, TransportConfiguration> connectors = new HashMap<String, TransportConfiguration>();\n            for(final Property property : params.get(CONNECTOR).asPropertyList()) {\n                final String connectorName = property.getName();\n                final ModelNode config = property.getValue();\n                final Map<String, Object> parameters = new HashMap<String, Object>();\n                if(config.get(PARAM).isDefined()) {\n                    for(final Property parameter : config.get(PARAM).asPropertyList()) {\n                        parameters.put(parameter.getName(), parameter.getValue().asString());\n                    }\n                }\n                final TransportConfigType type = TransportConfigType.valueOf(config.get(TYPE).asString());\n                final String clazz;\n                switch(type) {\n                    case Remote: {\n                        clazz = NettyConnectorFactory.class.getName();\n                        final String binding = config.get(SOCKET_BINDING).asString();\n                        parameters.put(SOCKET_BINDING, binding);\n                        bindings.add(binding);\n                        break;\n                    } case InVM: {\n                        clazz = InVMConnectorFactory.class.getName();\n                        parameters.put(SERVER_ID, config.get(SERVER_ID).asInt());\n                        break;\n                    } case Generic: {\n                        clazz = config.get(FACTORY_CLASS).asString();\n                        break;\n                    } default: {\n                        clazz = null;\n                        break;\n                    }\n                }\n                connectors.put(connectorName, new TransportConfiguration(clazz, parameters, connectorName));\n            }\n            configuration.setConnectorConfigurations(connectors);\n        }\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Process the acceptor information.\n     *\n     * @param configuration the hornetQ configuration\n     * @param params the detyped operation parameters\n     * @param bindings the referenced socket bindings\n     */\n    static void processAcceptors(final Configuration configuration, final ModelNode params, final Set<String> bindings) {\n        if(params.has(ACCEPTOR)) {\n            final Map<String, TransportConfiguration> acceptors = new HashMap<String, TransportConfiguration>();\n            for(final Property property : params.get(ACCEPTOR).asPropertyList()) {\n                final String acceptorName = property.getName();\n                final ModelNode config = property.getValue();\n                final Map<String, Object> parameters = new HashMap<String, Object>();\n                if(config.get(PARAM).isDefined()) {\n                    for(final Property parameter : config.get(PARAM).asPropertyList()) {\n                        parameters.put(parameter.getName(), parameter.getValue().asString());\n                    }\n                }\n                final TransportConfigType type = TransportConfigType.valueOf(config.get(TYPE).asString());\n                final String clazz;\n                switch(type) {\n                    case Remote: {\n                        clazz = NettyAcceptorFactory.class.getName();\n                        final String binding = config.get(SOCKET_BINDING).asString();\n                        parameters.put(SOCKET_BINDING, binding);\n                        bindings.add(binding);\n                        break;\n                    } case InVM: {\n                        clazz = InVMAcceptorFactory.class.getName();\n                        parameters.put(SERVER_ID, config.get(SERVER_ID).asInt());\n                        break;\n                    } case Generic: {\n                        clazz = config.get(FACTORY_CLASS).asString();\n                        break;\n                    } default: {\n                        clazz = null;\n                        break;\n                    }\n                }\n                acceptors.put(acceptorName, new TransportConfiguration(clazz, parameters, acceptorName));\n            }\n            configuration.setAcceptorConfigurations(new HashSet<TransportConfiguration>(acceptors.values()));\n        }\n    }","id":7301,"modified_method":"/**\n     * Process the acceptor information.\n     *\n     * @param configuration the hornetQ configuration\n     * @param params the detyped operation parameters\n     * @param bindings the referenced socket bindings\n     */\n    static void processAcceptors(final Configuration configuration, final ModelNode params, final Set<String> bindings) {\n        if(params.hasDefined(ACCEPTOR)) {\n            final Map<String, TransportConfiguration> acceptors = new HashMap<String, TransportConfiguration>();\n            for(final Property property : params.get(ACCEPTOR).asPropertyList()) {\n                final String acceptorName = property.getName();\n                final ModelNode config = property.getValue();\n                final Map<String, Object> parameters = new HashMap<String, Object>();\n                if(config.get(PARAM).isDefined()) {\n                    for(final Property parameter : config.get(PARAM).asPropertyList()) {\n                        parameters.put(parameter.getName(), parameter.getValue().asString());\n                    }\n                }\n                final TransportConfigType type = TransportConfigType.valueOf(config.get(TYPE).asString());\n                final String clazz;\n                switch(type) {\n                    case Remote: {\n                        clazz = NettyAcceptorFactory.class.getName();\n                        final String binding = config.get(SOCKET_BINDING).asString();\n                        parameters.put(SOCKET_BINDING, binding);\n                        bindings.add(binding);\n                        break;\n                    } case InVM: {\n                        clazz = InVMAcceptorFactory.class.getName();\n                        parameters.put(SERVER_ID, config.get(SERVER_ID).asInt());\n                        break;\n                    } case Generic: {\n                        clazz = config.get(FACTORY_CLASS).asString();\n                        break;\n                    } default: {\n                        clazz = null;\n                        break;\n                    }\n                }\n                acceptors.put(acceptorName, new TransportConfiguration(clazz, parameters, acceptorName));\n            }\n            configuration.setAcceptorConfigurations(new HashSet<TransportConfiguration>(acceptors.values()));\n        }\n    }","commit_id":"a381491b3df0c3261e4fa7e904286fc06e1bd08e","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseStack(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean sizeSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case SIZE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, \"stack-size\", value);\n                        updates.add(update);\n                        sizeSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!sizeSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.SIZE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":7302,"modified_method":"private void parseStack(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean sizeSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case SIZE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_STACK, value);\n                        updates.add(update);\n                        sizeSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!sizeSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.SIZE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseAgentLib(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean valueSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case VALUE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, \"agent-lib\", value);\n                        updates.add(update);\n                        valueSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!valueSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.VALUE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":7303,"modified_method":"private void parseAgentLib(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean valueSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case VALUE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_AGENT_LIB, value);\n                        updates.add(update);\n                        valueSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!valueSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.VALUE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parsePermgen(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        String size = null;\n        String maxSize = null;\n\n        // Handle attributes\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case SIZE: {\n                        size = value;\n                        break;\n                    }\n                    case MAX_SIZE: {\n                        maxSize= value;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n\n        if(size != null || maxSize != null) {\n            final ModelNode update = Util.getWriteAttributeOperation(address, \"heap\", new ModelNode());\n            if(size != null) update.get(VALUE, \"size\").set(size);\n            if(maxSize != null) update.get(VALUE, \"max-size\").set(maxSize);\n            updates.add(update);\n        }\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":7304,"modified_method":"private void parsePermgen(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        String size = null;\n        String maxSize = null;\n\n        // Handle attributes\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case SIZE: {\n                        size = value;\n                        break;\n                    }\n                    case MAX_SIZE: {\n                        maxSize= value;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n\n        if(size != null) {\n            final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_PERMGEN, size);\n            updates.add(update);\n        }\n\n        if(maxSize != null) {\n            final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_MAX_PERMGEN, maxSize);\n            updates.add(update);\n        }\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseJvmOptions(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        ParseUtils.requireNoAttributes(reader);\n        // Handle elements\n        boolean optionSet = false;\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Namespace.forUri(reader.getNamespaceURI())) {\n                case DOMAIN_1_0: {\n                    final Element element = Element.forName(reader.getLocalName());\n                    if (element == Element.OPTION) {\n                        // Handle attributes\n                        String option = null;\n                        final int count = reader.getAttributeCount();\n                        for (int i = 0; i < count; i++) {\n                            final String attrValue = reader.getAttributeValue(i);\n                            if (!isNoNamespaceAttribute(reader, i)) {\n                                throw ParseUtils.unexpectedAttribute(reader, i);\n                            }\n                            else {\n                                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                                switch (attribute) {\n                                    case VALUE: {\n                                        option = attrValue;\n                                        break;\n                                    }\n                                    default:\n                                        throw ParseUtils.unexpectedAttribute(reader, i);\n                                }\n                            }\n                        }\n                        if (option == null) {\n                            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.NAME));\n                        }\n\n                        // PropertyAdd\n                        final ModelNode update = new ModelNode();\n                        update.get(OP_ADDR).set(address);\n                        update.get(OP).set(\"add-jvm-option\");\n                        update.get(\"option\").set(option);\n                        updates.add(update);\n                        optionSet = true;\n                        // Handle elements\n                        ParseUtils.requireNoContent(reader);\n                    } else {\n                        throw ParseUtils.unexpectedElement(reader);\n                    }\n                    break;\n                }\n                default:\n                    throw ParseUtils.unexpectedElement(reader);\n            }\n        }\n        if (!optionSet) {\n            throw ParseUtils.missingRequiredElement(reader, Collections.singleton(Element.OPTION));\n        }\n    }","id":7305,"modified_method":"private void parseJvmOptions(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        ParseUtils.requireNoAttributes(reader);\n        // Handle elements\n        boolean optionSet = false;\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Namespace.forUri(reader.getNamespaceURI())) {\n                case DOMAIN_1_0: {\n                    final Element element = Element.forName(reader.getLocalName());\n                    if (element == Element.OPTION) {\n                        // Handle attributes\n                        String option = null;\n                        final int count = reader.getAttributeCount();\n                        for (int i = 0; i < count; i++) {\n                            final String attrValue = reader.getAttributeValue(i);\n                            if (!isNoNamespaceAttribute(reader, i)) {\n                                throw ParseUtils.unexpectedAttribute(reader, i);\n                            }\n                            else {\n                                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                                switch (attribute) {\n                                    case VALUE: {\n                                        option = attrValue;\n                                        break;\n                                    }\n                                    default:\n                                        throw ParseUtils.unexpectedAttribute(reader, i);\n                                }\n                            }\n                        }\n                        if (option == null) {\n                            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.NAME));\n                        }\n\n                        // PropertyAdd\n                        final ModelNode update = new ModelNode();\n                        update.get(OP_ADDR).set(address);\n                        update.get(OP).set(JVMHandlers.ADD_JVM_OPTION);\n                        update.get(JVMHandlers.JVM_OPTION).set(option);\n                        updates.add(update);\n                        optionSet = true;\n                        // Handle elements\n                        ParseUtils.requireNoContent(reader);\n                    } else {\n                        throw ParseUtils.unexpectedElement(reader);\n                    }\n                    break;\n                }\n                default:\n                    throw ParseUtils.unexpectedElement(reader);\n            }\n        }\n        if (!optionSet) {\n            throw ParseUtils.missingRequiredElement(reader, Collections.singleton(Element.OPTION));\n        }\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseHeap(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        String size = null;\n        String maxSize = null;\n\n        // Handle attributes\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case SIZE: {\n                        size = value;\n                        break;\n                    }\n                    case MAX_SIZE: {\n                        maxSize = value;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n\n        if(size != null || maxSize != null) {\n            final ModelNode update = Util.getWriteAttributeOperation(address, \"heap\", new ModelNode());\n            if(size != null) update.get(VALUE, \"size\").set(size);\n            if(maxSize != null) update.get(VALUE, \"max-size\").set(maxSize);\n            updates.add(update);\n        }\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":7306,"modified_method":"private void parseHeap(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        String size = null;\n        String maxSize = null;\n\n        // Handle attributes\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case SIZE: {\n                        size = value;\n                        break;\n                    }\n                    case MAX_SIZE: {\n                        maxSize = value;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n\n        if(size != null) {\n            final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_HEAP, size);\n            updates.add(update);\n        }\n\n        if(maxSize != null) {\n            final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_MAX_HEAP, maxSize);\n            updates.add(update);\n        }\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void writeJVMElement(final XMLExtendedStreamWriter writer, final String jvmName, final ModelNode jvmElement) throws XMLStreamException {\n        writer.writeStartElement(Element.JVM.getLocalName());\n        writer.writeAttribute(Attribute.NAME.getLocalName(), jvmName);\n\n        if(jvmElement.hasDefined(JVM_TYPE)) {\n            writer.writeAttribute(Attribute.TYPE.getLocalName(), jvmElement.get(JVM_TYPE).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_JAVA_HOME)) {\n            writer.writeAttribute(Attribute.JAVA_HOME.getLocalName(), jvmElement.get(JVMHandlers.JVM_JAVA_HOME).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_DEBUG_ENABLED)) {\n            writer.writeAttribute(Attribute.DEBUG_ENABLED.getLocalName(), jvmElement.get(JVMHandlers.JVM_DEBUG_ENABLED).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_DEBUG_OPTIONS)) {\n            writer.writeAttribute(Attribute.DEBUG_OPTIONS.getLocalName(), jvmElement.get(JVMHandlers.JVM_DEBUG_OPTIONS).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED)) {\n            writer.writeAttribute(Attribute.ENV_CLASSPATH_IGNORED.getLocalName(), jvmElement.get(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED).asString());\n        }\n\n        if(jvmElement.hasDefined(JVMHandlers.JVM_HEAP)) {\n            final ModelNode heap = jvmElement.get(JVMHandlers.JVM_HEAP);\n            if(heap.hasDefined(JVMHandlers.SIZE) || heap.hasDefined(JVMHandlers.MAX_SIZE)) {\n                writer.writeEmptyElement(Element.HEAP.getLocalName());\n                if(heap.hasDefined(JVMHandlers.SIZE)) writer.writeAttribute(Attribute.SIZE.getLocalName(), heap.get(JVMHandlers.SIZE).asString());\n                if(heap.hasDefined(JVMHandlers.MAX_SIZE)) writer.writeAttribute(Attribute.MAX_SIZE.getLocalName(), heap.get(JVMHandlers.MAX_SIZE).asString());\n            }\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_PERMGEN)) {\n            final ModelNode permGen = jvmElement.get(JVMHandlers.JVM_PERMGEN);\n            if(permGen.hasDefined(JVMHandlers.SIZE) || permGen.hasDefined(JVMHandlers.MAX_SIZE)) {\n                writer.writeEmptyElement(Element.HEAP.getLocalName());\n                if(permGen.hasDefined(JVMHandlers.SIZE)) writer.writeAttribute(Attribute.SIZE.getLocalName(), permGen.get(JVMHandlers.SIZE).asString());\n                if(permGen.hasDefined(JVMHandlers.MAX_SIZE)) writer.writeAttribute(Attribute.MAX_SIZE.getLocalName(), permGen.get(JVMHandlers.MAX_SIZE).asString());\n            }\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_STACK)) {\n            writer.writeEmptyElement(Element.STACK.getLocalName());\n            writer.writeAttribute(Attribute.SIZE.getLocalName(), jvmElement.get(JVMHandlers.JVM_STACK).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_AGENT_LIB)) {\n            writer.writeEmptyElement(Element.AGENT_LIB.getLocalName());\n            writer.writeAttribute(Attribute.VALUE.getLocalName(), jvmElement.get(JVMHandlers.JVM_AGENT_LIB).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_AGENT_PATH)) {\n            writer.writeEmptyElement(Element.AGENT_PATH.getLocalName());\n            writer.writeAttribute(Attribute.VALUE.getLocalName(), jvmElement.get(JVMHandlers.JVM_AGENT_PATH).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_JAVA_AGENT)) {\n            writer.writeEmptyElement(Element.JAVA_AGENT.getLocalName());\n            writer.writeAttribute(Attribute.VALUE.getLocalName(), jvmElement.get(JVMHandlers.JVM_JAVA_AGENT).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_OPTIONS)) {\n            writer.writeStartElement(Element.JVM_OPTIONS.getLocalName());\n            for(final ModelNode option : jvmElement.get(JVMHandlers.JVM_OPTIONS).asList()) {\n                writer.writeEmptyElement(Element.OPTION.getLocalName());\n                writer.writeAttribute(Attribute.VALUE.getLocalName(), option.asString());\n            }\n            writer.writeEndElement();\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_ENV_VARIABLES)) {\n            writer.writeStartElement(Element.ENVIRONMENT_VARIABLES.getLocalName());\n            for(final Property variable : jvmElement.get(JVMHandlers.JVM_ENV_VARIABLES).asPropertyList()) {\n                writer.writeEmptyElement(Element.VARIABLE.getLocalName());\n                writer.writeAttribute(Attribute.NAME.getLocalName(), variable.getName());\n                writer.writeAttribute(Attribute.VALUE.getLocalName(), variable.getValue().asString());\n            }\n            writer.writeEndElement();\n        }\n\n        // System properties\n        if(jvmElement.hasDefined(SYSTEM_PROPERTIES)) {\n            writeProperties(writer, jvmElement, Element.SYSTEM_PROPERTIES);\n        }\n\n        writer.writeEndElement();\n    }","id":7307,"modified_method":"protected void writeJVMElement(final XMLExtendedStreamWriter writer, final String jvmName, final ModelNode jvmElement) throws XMLStreamException {\n        writer.writeStartElement(Element.JVM.getLocalName());\n        writer.writeAttribute(Attribute.NAME.getLocalName(), jvmName);\n\n        if(jvmElement.hasDefined(JVM_TYPE)) {\n            writer.writeAttribute(Attribute.TYPE.getLocalName(), jvmElement.get(JVM_TYPE).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_JAVA_HOME)) {\n            writer.writeAttribute(Attribute.JAVA_HOME.getLocalName(), jvmElement.get(JVMHandlers.JVM_JAVA_HOME).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_DEBUG_ENABLED)) {\n            writer.writeAttribute(Attribute.DEBUG_ENABLED.getLocalName(), jvmElement.get(JVMHandlers.JVM_DEBUG_ENABLED).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_DEBUG_OPTIONS)) {\n            writer.writeAttribute(Attribute.DEBUG_OPTIONS.getLocalName(), jvmElement.get(JVMHandlers.JVM_DEBUG_OPTIONS).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED)) {\n            writer.writeAttribute(Attribute.ENV_CLASSPATH_IGNORED.getLocalName(), jvmElement.get(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED).asString());\n        }\n\n        if(jvmElement.hasDefined(JVMHandlers.JVM_HEAP) || jvmElement.hasDefined(JVMHandlers.JVM_MAX_HEAP)) {\n            writer.writeEmptyElement(Element.HEAP.getLocalName());\n            if(jvmElement.hasDefined(JVMHandlers.JVM_HEAP)) writer.writeAttribute(Attribute.SIZE.getLocalName(), jvmElement.get(JVMHandlers.JVM_HEAP).asString());\n            if(jvmElement.hasDefined(JVMHandlers.JVM_MAX_HEAP)) writer.writeAttribute(Attribute.MAX_SIZE.getLocalName(), jvmElement.get(JVMHandlers.JVM_MAX_HEAP).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_PERMGEN) || jvmElement.hasDefined(JVMHandlers.JVM_MAX_PERMGEN)) {\n            writer.writeEmptyElement(Element.PERMGEN.getLocalName());\n            if(jvmElement.hasDefined(JVMHandlers.JVM_PERMGEN)) writer.writeAttribute(Attribute.SIZE.getLocalName(), jvmElement.get(JVMHandlers.JVM_PERMGEN).asString());\n            if(jvmElement.hasDefined(JVMHandlers.JVM_MAX_PERMGEN)) writer.writeAttribute(Attribute.MAX_SIZE.getLocalName(), jvmElement.get(JVMHandlers.JVM_MAX_PERMGEN).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_STACK)) {\n            writer.writeEmptyElement(Element.STACK.getLocalName());\n            writer.writeAttribute(Attribute.SIZE.getLocalName(), jvmElement.get(JVMHandlers.JVM_STACK).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_AGENT_LIB)) {\n            writer.writeEmptyElement(Element.AGENT_LIB.getLocalName());\n            writer.writeAttribute(Attribute.VALUE.getLocalName(), jvmElement.get(JVMHandlers.JVM_AGENT_LIB).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_AGENT_PATH)) {\n            writer.writeEmptyElement(Element.AGENT_PATH.getLocalName());\n            writer.writeAttribute(Attribute.VALUE.getLocalName(), jvmElement.get(JVMHandlers.JVM_AGENT_PATH).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_JAVA_AGENT)) {\n            writer.writeEmptyElement(Element.JAVA_AGENT.getLocalName());\n            writer.writeAttribute(Attribute.VALUE.getLocalName(), jvmElement.get(JVMHandlers.JVM_JAVA_AGENT).asString());\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_OPTIONS)) {\n            writer.writeStartElement(Element.JVM_OPTIONS.getLocalName());\n            for(final ModelNode option : jvmElement.get(JVMHandlers.JVM_OPTIONS).asList()) {\n                writer.writeEmptyElement(Element.OPTION.getLocalName());\n                writer.writeAttribute(Attribute.VALUE.getLocalName(), option.asString());\n            }\n            writer.writeEndElement();\n        }\n        if(jvmElement.hasDefined(JVMHandlers.JVM_ENV_VARIABLES)) {\n            writer.writeStartElement(Element.ENVIRONMENT_VARIABLES.getLocalName());\n            for(final Property variable : jvmElement.get(JVMHandlers.JVM_ENV_VARIABLES).asPropertyList()) {\n                writer.writeEmptyElement(Element.VARIABLE.getLocalName());\n                writer.writeAttribute(Attribute.NAME.getLocalName(), variable.getName());\n                writer.writeAttribute(Attribute.VALUE.getLocalName(), variable.getValue().asString());\n            }\n            writer.writeEndElement();\n        }\n\n        // System properties\n        if(jvmElement.hasDefined(SYSTEM_PROPERTIES)) {\n            writeProperties(writer, jvmElement, Element.SYSTEM_PROPERTIES);\n        }\n\n        writer.writeEndElement();\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseAgentPath(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean valueSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case VALUE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, \"agent-path\", value);\n                        updates.add(update);\n                        valueSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!valueSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.VALUE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":7308,"modified_method":"private void parseAgentPath(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean valueSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case VALUE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_AGENT_PATH, value);\n                        updates.add(update);\n                        valueSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!valueSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.VALUE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void parseJvm(final XMLExtendedStreamReader reader, final ModelNode parentAddress, final List<ModelNode> updates, final Set<String> jvmNames) throws XMLStreamException {\n\n        // Handle attributes\n        final List<ModelNode> attrUpdates = new ArrayList<ModelNode>();\n        String name = null;\n        String type = null;\n        String home = null;\n        Boolean debugEnabled = null;\n        String debugOptions = null;\n        Boolean envClasspathIgnored = null;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case NAME: {\n                        if (name != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n\n                        if (!jvmNames.add(value)) {\n                            throw new XMLStreamException(\"Duplicate JVM declaration \" + value, reader.getLocation());\n                        }\n                        name = value;\n                        break;\n                    }\n                    case JAVA_HOME: {\n                        if (home != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        home = value;\n                        final ModelNode update = Util.getWriteAttributeOperation(null, \"java-home\", home);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    case TYPE: {\n                        try {\n                            // Validate the type against the enum\n                            Enum.valueOf(JvmType.class, value);\n                            type = value;\n                        } catch (final IllegalArgumentException e) {\n                            throw ParseUtils.invalidAttributeValue(reader, i);\n                        }\n                        break;\n                    }\n                    case DEBUG_ENABLED: {\n                        if (debugEnabled != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        debugEnabled = Boolean.valueOf(value);\n                        final ModelNode update = Util.getWriteAttributeOperation(null, \"debug-enabled\", debugEnabled);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    case DEBUG_OPTIONS: {\n                        if (debugOptions != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        debugOptions = value;\n                        final ModelNode update = Util.getWriteAttributeOperation(null, \"debug-options\", debugOptions);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    case ENV_CLASSPATH_IGNORED: {\n                        if (envClasspathIgnored != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        envClasspathIgnored = Boolean.valueOf(value);\n                        final ModelNode update = Util.getWriteAttributeOperation(null, \"env-classpath-ignored\", envClasspathIgnored);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (name == null) {\n            // FIXME and fix xsd. A name is only required at domain and host\n            // level (i.e. when wrapped in <jvms/>). At server-group and server\n            // levels it can be unnamed, in which case configuration from\n            // domain and host levels aren't mixed in. OR make name required in xsd always\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.NAME));\n        }\n\n        final ModelNode address = parentAddress.clone();\n        address.add(ModelDescriptionConstants.JVM, name);\n\n        final ModelNode addUpdate = new ModelNode();\n        addUpdate.get(OP_ADDR).set(address);\n        addUpdate.get(OP).set(ADD);\n        addUpdate.get(NAME).set(name);\n        if(type != null) addUpdate.get(JVM_TYPE).set(type);\n        updates.add(addUpdate);\n\n        // Now we've done the add and we know the address\n        for (final ModelNode attrUpdate : attrUpdates) {\n            attrUpdate.get(OP_ADDR).set(address);\n            updates.add(attrUpdate);\n        }\n\n        // Handle elements\n        boolean hasJvmOptions = false;\n        boolean hasEnvironmentVariables = false;\n        boolean hasSystemProperties = false;\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Namespace.forUri(reader.getNamespaceURI())) {\n                case DOMAIN_1_0: {\n                    final Element element = Element.forName(reader.getLocalName());\n                    switch (element) {\n                        case HEAP: {\n                            parseHeap(reader, address, updates);\n                            break;\n                        }\n                        case PERMGEN: {\n                            parsePermgen(reader, address, updates);\n                            break;\n                        }\n                        case STACK: {\n                            parseStack(reader, address, updates);\n                            break;\n                        }\n                        case AGENT_LIB: {\n                            parseAgentLib(reader, address, updates);\n                            break;\n                        }\n                        case AGENT_PATH: {\n                            parseAgentPath(reader, address, updates);\n                            break;\n                        }\n                        case JAVA_AGENT: {\n                            parseJavaagent(reader, address, updates);\n                            break;\n                        }\n                        case ENVIRONMENT_VARIABLES: {\n                            if (hasEnvironmentVariables) {\n                                throw new XMLStreamException(element.getLocalName() + \" already declared\", reader.getLocation());\n                            }\n                            updates.add(Util.getWriteAttributeOperation(address, \"environment-variables\", parseProperties(reader)));\n                            hasEnvironmentVariables = true;\n                            break;\n                        }\n                        case SYSTEM_PROPERTIES: {\n                            if (hasSystemProperties) {\n                                throw new XMLStreamException(element.getLocalName() + \" already declared\", reader.getLocation());\n                            }\n                            parseSystemProperties(reader, address, updates);\n                            hasSystemProperties = true;\n                            break;\n                        }\n                        case JVM_OPTIONS: {\n                            if (hasJvmOptions) {\n                                throw new XMLStreamException(element.getLocalName() + \" already declared\", reader.getLocation());\n                            }\n                            parseJvmOptions(reader, address, updates);\n                            hasJvmOptions = true;\n                            break;\n                        }\n                        default:\n                            throw ParseUtils.unexpectedElement(reader);\n                    }\n                    break;\n                }\n                default:\n                    throw ParseUtils.unexpectedElement(reader);\n            }\n        }\n    }","id":7309,"modified_method":"protected void parseJvm(final XMLExtendedStreamReader reader, final ModelNode parentAddress, final List<ModelNode> updates, final Set<String> jvmNames) throws XMLStreamException {\n\n        // Handle attributes\n        final List<ModelNode> attrUpdates = new ArrayList<ModelNode>();\n        String name = null;\n        String type = null;\n        String home = null;\n        Boolean debugEnabled = null;\n        String debugOptions = null;\n        Boolean envClasspathIgnored = null;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case NAME: {\n                        if (name != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n\n                        if (!jvmNames.add(value)) {\n                            throw new XMLStreamException(\"Duplicate JVM declaration \" + value, reader.getLocation());\n                        }\n                        name = value;\n                        break;\n                    }\n                    case JAVA_HOME: {\n                        if (home != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        home = value;\n                        final ModelNode update = Util.getWriteAttributeOperation(null, JVMHandlers.JVM_JAVA_HOME, home);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    case TYPE: {\n                        try {\n                            // Validate the type against the enum\n                            Enum.valueOf(JvmType.class, value);\n                            type = value;\n                        } catch (final IllegalArgumentException e) {\n                            throw ParseUtils.invalidAttributeValue(reader, i);\n                        }\n                        break;\n                    }\n                    case DEBUG_ENABLED: {\n                        if (debugEnabled != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        debugEnabled = Boolean.valueOf(value);\n                        final ModelNode update = Util.getWriteAttributeOperation(null, JVMHandlers.JVM_DEBUG_ENABLED, debugEnabled);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    case DEBUG_OPTIONS: {\n                        if (debugOptions != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        debugOptions = value;\n                        final ModelNode update = Util.getWriteAttributeOperation(null, JVMHandlers.JVM_DEBUG_OPTIONS, debugOptions);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    case ENV_CLASSPATH_IGNORED: {\n                        if (envClasspathIgnored != null)\n                            throw ParseUtils.duplicateAttribute(reader, attribute.getLocalName());\n                        envClasspathIgnored = Boolean.valueOf(value);\n                        final ModelNode update = Util.getWriteAttributeOperation(null, JVMHandlers.JVM_ENV_CLASSPATH_IGNORED, envClasspathIgnored);\n                        attrUpdates.add(update);\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (name == null) {\n            // FIXME and fix xsd. A name is only required at domain and host\n            // level (i.e. when wrapped in <jvms/>). At server-group and server\n            // levels it can be unnamed, in which case configuration from\n            // domain and host levels aren't mixed in. OR make name required in xsd always\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.NAME));\n        }\n\n        final ModelNode address = parentAddress.clone();\n        address.add(ModelDescriptionConstants.JVM, name);\n\n        final ModelNode addUpdate = Util.getEmptyOperation(ADD, address);\n        if(type != null) addUpdate.get(JVM_TYPE).set(type);\n        updates.add(addUpdate);\n\n        // Now we've done the add and we know the address\n        for (final ModelNode attrUpdate : attrUpdates) {\n            attrUpdate.get(OP_ADDR).set(address);\n            updates.add(attrUpdate);\n        }\n\n        // Handle elements\n        boolean hasJvmOptions = false;\n        boolean hasEnvironmentVariables = false;\n        boolean hasSystemProperties = false;\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Namespace.forUri(reader.getNamespaceURI())) {\n                case DOMAIN_1_0: {\n                    final Element element = Element.forName(reader.getLocalName());\n                    switch (element) {\n                        case HEAP: {\n                            parseHeap(reader, address, updates);\n                            break;\n                        }\n                        case PERMGEN: {\n                            parsePermgen(reader, address, updates);\n                            break;\n                        }\n                        case STACK: {\n                            parseStack(reader, address, updates);\n                            break;\n                        }\n                        case AGENT_LIB: {\n                            parseAgentLib(reader, address, updates);\n                            break;\n                        }\n                        case AGENT_PATH: {\n                            parseAgentPath(reader, address, updates);\n                            break;\n                        }\n                        case JAVA_AGENT: {\n                            parseJavaagent(reader, address, updates);\n                            break;\n                        }\n                        case ENVIRONMENT_VARIABLES: {\n                            if (hasEnvironmentVariables) {\n                                throw new XMLStreamException(element.getLocalName() + \" already declared\", reader.getLocation());\n                            }\n                            updates.add(Util.getWriteAttributeOperation(address, JVMHandlers.JVM_ENV_VARIABLES, parseProperties(reader)));\n                            hasEnvironmentVariables = true;\n                            break;\n                        }\n                        case SYSTEM_PROPERTIES: {\n                            if (hasSystemProperties) {\n                                throw new XMLStreamException(element.getLocalName() + \" already declared\", reader.getLocation());\n                            }\n                            parseSystemProperties(reader, address, updates);\n                            hasSystemProperties = true;\n                            break;\n                        }\n                        case JVM_OPTIONS: {\n                            if (hasJvmOptions) {\n                                throw new XMLStreamException(element.getLocalName() + \" already declared\", reader.getLocation());\n                            }\n                            parseJvmOptions(reader, address, updates);\n                            hasJvmOptions = true;\n                            break;\n                        }\n                        default:\n                            throw ParseUtils.unexpectedElement(reader);\n                    }\n                    break;\n                }\n                default:\n                    throw ParseUtils.unexpectedElement(reader);\n            }\n        }\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseJavaagent(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean valueSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case VALUE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, \"java-agent\", value);\n                        updates.add(update);\n                        valueSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!valueSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.VALUE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":7310,"modified_method":"private void parseJavaagent(final XMLExtendedStreamReader reader, final ModelNode address, final List<ModelNode> updates) throws XMLStreamException {\n\n        // Handle attributes\n        boolean valueSet = false;\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i ++) {\n            final String value = reader.getAttributeValue(i);\n            if (!isNoNamespaceAttribute(reader, i)) {\n                throw ParseUtils.unexpectedAttribute(reader, i);\n            } else {\n                final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                switch (attribute) {\n                    case VALUE: {\n                        final ModelNode update = Util.getWriteAttributeOperation(address, JVMHandlers.JVM_JAVA_AGENT, value);\n                        updates.add(update);\n                        valueSet = true;\n                        break;\n                    }\n                    default:\n                        throw ParseUtils.unexpectedAttribute(reader, i);\n                }\n            }\n        }\n        if (!valueSet) {\n            throw ParseUtils.missingRequired(reader, Collections.singleton(Attribute.VALUE));\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        if(operation.hasDefined(JVM_TYPE)) {\n            context.getSubModel().get(JVM_TYPE).set(operation.get(JVM_TYPE));\n        }\n\n        resultHandler.handleResultComplete();\n\n        return new BasicOperationResult(compensatingOperation);\n    }","id":7311,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public OperationResult execute(final OperationContext context, final ModelNode operation, final ResultHandler resultHandler) {\n\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n\n        ModelNode subModel = context.getSubModel();\n        ModelNode jvmType = subModel.get(JVM_TYPE);\n        if(operation.hasDefined(JVM_TYPE)) {\n            jvmType.set(operation.get(JVM_TYPE));\n        }\n\n        // Create all attributes\n        for (String attr : JVMHandlers.ATTRIBUTES) {\n            subModel.get(attr);\n        }\n\n        resultHandler.handleResultComplete();\n\n        return new BasicOperationResult(compensatingOperation);\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n        @Override\n        public ModelNode getModelDescription(Locale locale) {\n            // TODO Auto-generated method stub\n            return new ModelNode();\n        }","id":7312,"modified_method":"/** {@inheritDoc} */\n        @Override\n        public ModelNode getModelDescription(Locale locale) {\n            return JVMDescriptions.getOptionAddOperation(locale);\n        }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** {@inheritDoc} */\n        @Override\n        public ModelNode getModelDescription(Locale locale) {\n            // TODO Auto-generated method stub\n            return new ModelNode();\n        }","id":7313,"modified_method":"/** {@inheritDoc} */\n        @Override\n        public ModelNode getModelDescription(Locale locale) {\n            return JVMDescriptions.getOptionRemoveOperation(locale);\n        }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void register(final ModelNodeRegistration registration) {\n\n        registration.registerOperationHandler(JVMAddHandler.OPERATION_NAME, JVMAddHandler.INSTANCE, JVMAddHandler.INSTANCE, false);\n        registration.registerOperationHandler(JVMRemoveHandler.OPERATION_NAME, JVMRemoveHandler.INSTANCE, JVMRemoveHandler.INSTANCE, false);\n\n        registration.registerReadWriteAttribute(JVM_AGENT_LIB, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_AGENT_PATH, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_DEBUG_ENABLED, null, booleanWriteHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_DEBUG_OPTIONS, null, booleanWriteHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_ENV_CLASSPATH_IGNORED, null, booleanWriteHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_ENV_VARIABLES, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_HEAP, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_JAVA_AGENT, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_JAVA_HOME, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_PERMGEN, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_STACK, null, writeHandler, Storage.CONFIGURATION);\n\n        registration.registerOperationHandler(JVMOptionAddHandler.OPERATION_NAME, JVMOptionAddHandler.INSTANCE, JVMOptionAddHandler.INSTANCE, false);\n        registration.registerOperationHandler(JVMOptionRemoveHandler.OPERATION_NAME, JVMOptionRemoveHandler.INSTANCE, JVMOptionRemoveHandler.INSTANCE, false);\n\n        registration.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME, SystemPropertyAddHandler.INSTANCE, SystemPropertyAddHandler.INSTANCE, false);\n        registration.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME, SystemPropertyRemoveHandler.INSTANCE, SystemPropertyRemoveHandler.INSTANCE, false);\n\n    }","id":7314,"modified_method":"public static void register(final ModelNodeRegistration registration) {\n\n        registration.registerOperationHandler(JVMAddHandler.OPERATION_NAME, JVMAddHandler.INSTANCE, JVMAddHandler.INSTANCE, false);\n        registration.registerOperationHandler(JVMRemoveHandler.OPERATION_NAME, JVMRemoveHandler.INSTANCE, JVMRemoveHandler.INSTANCE, false);\n\n        registration.registerReadWriteAttribute(JVM_AGENT_LIB, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_AGENT_PATH, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_DEBUG_ENABLED, null, booleanWriteHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_DEBUG_OPTIONS, null, booleanWriteHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_ENV_CLASSPATH_IGNORED, null, booleanWriteHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_ENV_VARIABLES, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_HEAP, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_MAX_HEAP, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_JAVA_AGENT, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_JAVA_HOME, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_PERMGEN, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_MAX_PERMGEN, null, writeHandler, Storage.CONFIGURATION);\n        registration.registerReadWriteAttribute(JVM_STACK, null, writeHandler, Storage.CONFIGURATION);\n\n        registration.registerOperationHandler(JVMOptionAddHandler.OPERATION_NAME, JVMOptionAddHandler.INSTANCE, JVMOptionAddHandler.INSTANCE, false);\n        registration.registerOperationHandler(JVMOptionRemoveHandler.OPERATION_NAME, JVMOptionRemoveHandler.INSTANCE, JVMOptionRemoveHandler.INSTANCE, false);\n\n        registration.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME, SystemPropertyAddHandler.INSTANCE, SystemPropertyAddHandler.INSTANCE, false);\n        registration.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME, SystemPropertyRemoveHandler.INSTANCE, SystemPropertyRemoveHandler.INSTANCE, false);\n\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"public JvmElement(final String name, ModelNode ... toCombine) {\n\n        this.name = name;\n\n        for(final ModelNode node : toCombine) {\n            if(node == null) {\n                continue;\n            }\n\n            if(node.hasDefined(JVMHandlers.JVM_AGENT_LIB)) {\n                agentLib = node.get(JVMHandlers.JVM_AGENT_LIB).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_AGENT_PATH)) {\n                agentPath = node.get(JVMHandlers.JVM_AGENT_PATH).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_DEBUG_ENABLED)) {\n                debugEnabled = node.get(JVMHandlers.JVM_DEBUG_ENABLED).asBoolean();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_DEBUG_OPTIONS)) {\n                debugOptions = node.get(JVMHandlers.JVM_DEBUG_OPTIONS).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED)) {\n                envClasspathIgnored = node.get(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED).asBoolean();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_ENV_VARIABLES)) {\n                for(Property property : node.get(JVMHandlers.JVM_ENV_VARIABLES).asPropertyList()) {\n                    environmentVariables.put(property.getName(), property.getValue().asString());\n                }\n            }\n            if(node.hasDefined(JVMHandlers.JVM_HEAP)) {\n                final ModelNode heap = node.get(JVMHandlers.JVM_HEAP);\n                if(heap.hasDefined(JVMHandlers.SIZE)) {\n                    heapSize = heap.get(JVMHandlers.SIZE).asString();\n                }\n                if(heap.hasDefined(JVMHandlers.MAX_SIZE)) {\n                    maxHeap = heap.get(JVMHandlers.MAX_SIZE).asString();\n                }\n            }\n            if(node.hasDefined(JVMHandlers.JVM_JAVA_AGENT)) {\n                javaagent = node.get(JVMHandlers.JVM_JAVA_AGENT).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_JAVA_HOME)) {\n                javaHome = node.get(JVMHandlers.JVM_JAVA_HOME).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_OPTIONS)) {\n                for(final ModelNode option : node.get(JVMHandlers.JVM_OPTIONS).asList()) {\n                    jvmOptionsElement.addOption(option.asString());\n                }\n            }\n            if(node.hasDefined(JVMHandlers.JVM_PERMGEN)) {\n                final ModelNode permGen = node.get(JVMHandlers.JVM_PERMGEN);\n                if(permGen.hasDefined(JVMHandlers.SIZE)) {\n                    permgenSize = permGen.get(JVMHandlers.SIZE).asString();\n                }\n                if(permGen.hasDefined(JVMHandlers.MAX_SIZE)) {\n                    maxPermgen = permGen.get(JVMHandlers.MAX_SIZE).asString();\n                }\n            }\n            if(node.hasDefined(JVMHandlers.JVM_STACK)) {\n                stack = node.get(JVMHandlers.JVM_STACK).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_SYSTEM_PROPERTIES)) {\n                for(Property property : node.get(JVMHandlers.JVM_SYSTEM_PROPERTIES).asPropertyList()) {\n                    final ModelNode value = property.getValue();\n                    systemProperties.put(property.getName(), isDefined(value) ? value.asString() : \"true\");\n                }\n            }\n        }\n\n    }","id":7315,"modified_method":"public JvmElement(final String name, ModelNode ... toCombine) {\n\n        this.name = name;\n\n        for(final ModelNode node : toCombine) {\n            if(node == null) {\n                continue;\n            }\n\n            if(node.hasDefined(JVMHandlers.JVM_AGENT_LIB)) {\n                agentLib = node.get(JVMHandlers.JVM_AGENT_LIB).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_AGENT_PATH)) {\n                agentPath = node.get(JVMHandlers.JVM_AGENT_PATH).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_DEBUG_ENABLED)) {\n                debugEnabled = node.get(JVMHandlers.JVM_DEBUG_ENABLED).asBoolean();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_DEBUG_OPTIONS)) {\n                debugOptions = node.get(JVMHandlers.JVM_DEBUG_OPTIONS).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED)) {\n                envClasspathIgnored = node.get(JVMHandlers.JVM_ENV_CLASSPATH_IGNORED).asBoolean();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_ENV_VARIABLES)) {\n                for(Property property : node.get(JVMHandlers.JVM_ENV_VARIABLES).asPropertyList()) {\n                    environmentVariables.put(property.getName(), property.getValue().asString());\n                }\n            }\n            if(node.hasDefined(JVMHandlers.JVM_HEAP)) {\n                heapSize = node.get(JVMHandlers.JVM_HEAP).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_MAX_HEAP)) {\n                maxHeap = node.get(JVMHandlers.JVM_MAX_HEAP).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_JAVA_AGENT)) {\n                javaagent = node.get(JVMHandlers.JVM_JAVA_AGENT).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_JAVA_HOME)) {\n                javaHome = node.get(JVMHandlers.JVM_JAVA_HOME).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_OPTIONS)) {\n                for(final ModelNode option : node.get(JVMHandlers.JVM_OPTIONS).asList()) {\n                    jvmOptionsElement.addOption(option.asString());\n                }\n            }\n            if(node.hasDefined(JVMHandlers.JVM_PERMGEN)) {\n                permgenSize = node.get(JVMHandlers.JVM_PERMGEN).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_MAX_PERMGEN)) {\n                maxPermgen = node.get(JVMHandlers.JVM_MAX_PERMGEN).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_STACK)) {\n                stack = node.get(JVMHandlers.JVM_STACK).asString();\n            }\n            if(node.hasDefined(JVMHandlers.JVM_SYSTEM_PROPERTIES)) {\n                for(Property property : node.get(JVMHandlers.JVM_SYSTEM_PROPERTIES).asPropertyList()) {\n                    final ModelNode value = property.getValue();\n                    systemProperties.put(property.getName(), isDefined(value) ? value.asString() : \"true\");\n                }\n            }\n        }\n\n    }","commit_id":"aee913687aa9c488e8f00f2c297afc538fbf9b71","url":"https://github.com/wildfly/wildfly"},{"original_method":"private ModelNode parseConfigurationElement(XMLExtendedStreamReader reader) throws XMLStreamException {\n            final ModelNode configuration = new ModelNode();\n            // no attributes\n            requireNoAttributes(reader);\n\n            // elements\n            final EnumSet<Element> required = EnumSet.of(Element.MODIFY_SOAP_ADDRESS, Element.WEBSERVICE_HOST);\n            final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n\n            while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n                switch (Namespace.forUri(reader.getNamespaceURI())) {\n                    case WEBSERVICES_1_0: {\n                        final Element element = Element.forName(reader.getLocalName());\n                        required.remove(element);\n                        if (!encountered.add(element)) {\n                            throw unexpectedElement(reader);\n                        }\n                        switch (element) {\n                            case WEBSERVICE_HOST: {\n                                configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));\n                                break;\n                            }\n                            case MODIFY_SOAP_ADDRESS: {\n                                configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader));\n                                break;\n                            }\n                            case WEBSERVICE_SECURE_PORT: {\n                                configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader));\n                                break;\n                            }\n                            case WEBSERVICE_PORT: {\n                                configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader));\n                                break;\n                            }\n                            default: {\n                                throw unexpectedElement(reader);\n                            }\n                        }\n                        break;\n                    }\n                    default: {\n                        throw unexpectedElement(reader);\n                    }\n                }\n            }\n\n            if (!required.isEmpty()) {\n                throw missingRequiredElement(reader, required);\n            }\n\n            return configuration;\n        }","id":7316,"modified_method":"private ModelNode parseConfigurationElement(XMLExtendedStreamReader reader) throws XMLStreamException {\n            final ModelNode configuration = new ModelNode();\n            // no attributes\n            requireNoAttributes(reader);\n\n            // elements\n            final EnumSet<Element> required = EnumSet.of(Element.MODIFY_SOAP_ADDRESS, Element.WEBSERVICE_HOST);\n            final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n\n            while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n                switch (Namespace.forUri(reader.getNamespaceURI())) {\n                    case WEBSERVICES_1_0: {\n                        final Element element = Element.forName(reader.getLocalName());\n                        required.remove(element);\n                        if (!encountered.add(element)) {\n                            throw unexpectedElement(reader);\n                        }\n                        switch (element) {\n                            case WEBSERVICE_HOST: {\n                                configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));\n                                break;\n                            }\n                            case MODIFY_SOAP_ADDRESS: {\n                                boolean b = Boolean.parseBoolean(parseElementNoAttributes(reader));\n                                configuration.get(MODIFY_SOAP_ADDRESS).set(b);\n                                break;\n                            }\n                            case WEBSERVICE_SECURE_PORT: {\n                                int port = Integer.valueOf(parseElementNoAttributes(reader));\n                                configuration.get(WEBSERVICE_SECURE_PORT).set(port);\n                                break;\n                            }\n                            case WEBSERVICE_PORT: {\n                                int port = Integer.valueOf(parseElementNoAttributes(reader));\n                                configuration.get(WEBSERVICE_PORT).set(port);\n                                break;\n                            }\n                            default: {\n                                throw unexpectedElement(reader);\n                            }\n                        }\n                        break;\n                    }\n                    default: {\n                        throw unexpectedElement(reader);\n                    }\n                }\n            }\n\n            if (!required.isEmpty()) {\n                throw missingRequiredElement(reader, required);\n            }\n\n            return configuration;\n        }","commit_id":"9d2f79cb595e132a79d727a049e4f94628deb7e7","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static AbstractServerConfig createServerConfig(WSConfigurationElement configuration,\n            InjectedValue<MBeanServer> mbeanServer, InjectedValue<ServerEnvironment> serverEnvironment) {\n        AbstractServerConfig config = new ServerConfigImpl(mbeanServer, serverEnvironment);\n        try {\n            config.setWebServiceHost(configuration.getWebServiceHost());\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(e);\n        }\n        config.setModifySOAPAddress(configuration.isModifySOAPAddress());\n        if (configuration.getWebServicePort() != null) {\n            config.setWebServicePort(configuration.getWebServicePort());\n        }\n        if (configuration.getWebServiceSecurePort() != null) {\n            config.setWebServicePort(configuration.getWebServiceSecurePort());\n        }\n        return config;\n    }","id":7317,"modified_method":"private static AbstractServerConfig createServerConfig(ModelNode configuration,\n            InjectedValue<MBeanServer> mbeanServer, InjectedValue<ServerEnvironment> serverEnvironment) {\n        AbstractServerConfig config = new ServerConfigImpl(mbeanServer, serverEnvironment);\n        try {\n            config.setWebServiceHost(configuration.require(WEBSERVICE_HOST).asString());\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(e);\n        }\n        config.setModifySOAPAddress(configuration.require(MODIFY_SOAP_ADDRESS).asBoolean());\n        if (configuration.hasDefined(WEBSERVICE_PORT)) {\n            config.setWebServicePort(configuration.require(WEBSERVICE_PORT).asInt());\n        }\n        if (configuration.hasDefined(WEBSERVICE_SECURE_PORT)) {\n            config.setWebServicePort(configuration.require(WEBSERVICE_SECURE_PORT).asInt());\n        }\n        return config;\n    }","commit_id":"9d2f79cb595e132a79d727a049e4f94628deb7e7","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Cancellable execute(NewOperationContext context, ModelNode operation, ResultHandler resultHandler) {\n        // Create the compensating operation\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(REMOVE);\n        compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));\n\n        if (context instanceof NewRuntimeOperationContext) {\n            final NewRuntimeOperationContext updateContext = (NewRuntimeOperationContext) context;\n            ServiceTarget serviceTarget = updateContext.getServiceTarget();\n            addConfigService(serviceTarget, createWSConfigurtionElement(operation));\n            addRegistryService(serviceTarget);\n        }\n\n        if (context instanceof NewBootOperationContext) {\n            final NewBootOperationContext operationContext = (NewBootOperationContext) context;\n            int priority = Phase.INSTALL_WAR_METADATA + 10;\n\n            operationContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEBSERVICES_XML,\n                    new WSDescriptorDeploymentProcessor());\n            // updateContext.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JMS_WS_XML, new\n            // WSJMSDescriptorDeploymentProcessor());\n            operationContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WS, new WSDependenciesProcessor());\n            // updateContext.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_JAXRPC, new\n            // WSJAXRPCDependenciesDeploymentProcessor());\n            // updateContext.addDeploymentProcessor(Phase.INSTALL, priority++, new WSEJBAdapterDeploymentProcessor());\n            operationContext.addDeploymentProcessor(Phase.INSTALL, priority++, new WSTypeDeploymentProcessor());\n            operationContext.addDeploymentProcessor(Phase.INSTALL, priority++, new WSModelDeploymentProcessor());\n\n            addDeploymentProcessors(NewWSSubsystemAdd.class.getClassLoader(), operationContext, priority);\n        }\n\n        final ModelNode subModel = context.getSubModel();\n        subModel.get(CONFIGURATION).set(operation.require(CONFIGURATION));\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","id":7318,"modified_method":"@Override\n    public Cancellable execute(NewOperationContext context, ModelNode operation, ResultHandler resultHandler) {\n        // Create the compensating operation\n        final ModelNode compensatingOperation = Util.getResourceRemoveOperation(operation.require(OP_ADDR));\n\n        operationValidator.validate(operation);\n        ModelNode config = operation.require(CONFIGURATION);\n        configValidator.validate(config);\n\n        final ModelNode subModel = context.getSubModel();\n        subModel.get(CONFIGURATION).set(config);\n\n        if (context instanceof NewBootOperationContext) {\n            final NewBootOperationContext updateContext = (NewBootOperationContext) context;\n\n            log.info(\"Activating WebServices Extension\");\n            WSServices.saveContainerRegistry(updateContext.getServiceRegistry());\n\n            ServiceTarget serviceTarget = updateContext.getServiceTarget();\n            addConfigService(serviceTarget, config);\n            addRegistryService(serviceTarget);\n\n            //add the DUP for dealing with WS deployments\n            NewWSDeploymentActivator.activate(updateContext);\n        }\n        resultHandler.handleResultComplete(compensatingOperation);\n\n        return Cancellable.NULL;\n    }","commit_id":"9d2f79cb595e132a79d727a049e4f94628deb7e7","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static void addConfigService(ServiceTarget serviceTarget, WSConfigurationElement configuration) {\n        InjectedValue<MBeanServer> mbeanServer = new InjectedValue<MBeanServer>();\n        InjectedValue<ServerEnvironment> serverEnvironment = new InjectedValue<ServerEnvironment>();\n        AbstractServerConfig serverConfig = createServerConfig(configuration, mbeanServer, serverEnvironment);\n        serviceTarget.addService(WSServices.CONFIG_SERVICE, new ServerConfigService(serverConfig))\n                .addDependency(mbeanServiceName, MBeanServer.class, mbeanServer)\n                .addDependency(ServerEnvironmentService.SERVICE_NAME, ServerEnvironment.class, serverEnvironment)\n                .setInitialMode(Mode.ACTIVE).install();\n    }","id":7319,"modified_method":"private static void addConfigService(ServiceTarget serviceTarget, ModelNode configuration) {\n        InjectedValue<MBeanServer> mbeanServer = new InjectedValue<MBeanServer>();\n        InjectedValue<ServerEnvironment> serverEnvironment = new InjectedValue<ServerEnvironment>();\n        AbstractServerConfig serverConfig = createServerConfig(configuration, mbeanServer, serverEnvironment);\n        serviceTarget.addService(WSServices.CONFIG_SERVICE, new ServerConfigService(serverConfig))\n                .addDependency(mbeanServiceName, MBeanServer.class, mbeanServer)\n                .addDependency(ServerEnvironmentService.SERVICE_NAME, ServerEnvironment.class, serverEnvironment)\n                .setInitialMode(Mode.ACTIVE)\n                .install();\n    }","commit_id":"9d2f79cb595e132a79d727a049e4f94628deb7e7","url":"https://github.com/wildfly/wildfly"},{"original_method":"private NewWSSubsystemAdd() {\n        // Private to ensure a singleton.\n    }","id":7320,"modified_method":"private NewWSSubsystemAdd() {\n        operationValidator.registerValidator(CONFIGURATION, new ModelTypeValidator(ModelType.OBJECT));\n        configValidator.registerValidator(WEBSERVICE_HOST, new ModelTypeValidator(ModelType.STRING));\n        configValidator.registerValidator(MODIFY_SOAP_ADDRESS, new ModelTypeValidator(ModelType.BOOLEAN));\n        configValidator.registerValidator(WEBSERVICE_PORT, new ModelTypeValidator(ModelType.INT, true, true));\n        configValidator.registerValidator(WEBSERVICE_PORT, new ModelTypeValidator(ModelType.INT, true, true));\n    }","commit_id":"9d2f79cb595e132a79d727a049e4f94628deb7e7","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void addSources(SdkModificator sdkModificator){\n    String [] src = getInternalJavaSdk(sdkModificator.getHomePath()).getRootProvider().getUrls(OrderRootType.SOURCES);\n    for (int i = 0; i < src.length; i++) {\n      VirtualFile virtualFile = VirtualFileManager.getInstance().findFileByUrl(src[i]);\n      sdkModificator.addRoot(virtualFile, ProjectRootType.SOURCE);\n    }\n  }","id":7321,"modified_method":"private void addSources(SdkModificator sdkModificator) {\n    if (!addOrderEntries(OrderRootType.SOURCES, ProjectRootType.SOURCE, getInternalJavaSdk(sdkModificator.getHomePath()), sdkModificator) &&\n        SystemInfo.isMac){\n      ProjectJdk [] jdks = ProjectJdkTable.getInstance().getAllJdks();\n      for(int i = 0; i < jdks.length; i++){\n        if (jdks[i].getSdkType() instanceof JavaSdk){\n          addOrderEntries(OrderRootType.SOURCES, ProjectRootType.SOURCE, jdks[i], sdkModificator);\n          break;\n        }\n      }\n    }\n  }","commit_id":"5d0f72ba9b39a271b1b7b967e424648df88e41d0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void addClasses(SdkModificator sdkModificator) {\n    String [] classes = getInternalJavaSdk(sdkModificator.getHomePath()).getRootProvider().getUrls(OrderRootType.CLASSES);\n    for (int i = 0; i < classes.length; i++) {\n      VirtualFile virtualFile = VirtualFileManager.getInstance().findFileByUrl(classes[i]);\n      sdkModificator.addRoot(virtualFile, ProjectRootType.CLASS);\n    }\n  }","id":7322,"modified_method":"private void addClasses(SdkModificator sdkModificator) {\n    addOrderEntries(OrderRootType.CLASSES, ProjectRootType.CLASS, getInternalJavaSdk(sdkModificator.getHomePath()), sdkModificator);\n  }","commit_id":"5d0f72ba9b39a271b1b7b967e424648df88e41d0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void addDocs(SdkModificator sdkModificator){\n    String [] docs = getInternalJavaSdk(sdkModificator.getHomePath()).getRootProvider().getUrls(OrderRootType.JAVADOC);\n    for (int i = 0; i < docs.length; i++) {\n      VirtualFile virtualFile = VirtualFileManager.getInstance().findFileByUrl(docs[i]);\n      sdkModificator.addRoot(virtualFile, ProjectRootType.JAVADOC);\n    }\n  }","id":7323,"modified_method":"private void addDocs(SdkModificator sdkModificator) {\n    if (!addOrderEntries(OrderRootType.JAVADOC, ProjectRootType.JAVADOC, getInternalJavaSdk(sdkModificator.getHomePath()), sdkModificator) &&\n        SystemInfo.isMac){\n      ProjectJdk [] jdks = ProjectJdkTable.getInstance().getAllJdks();\n      for(int i = 0; i < jdks.length; i++){\n        if (jdks[i].getSdkType() instanceof JavaSdk){\n          addOrderEntries(OrderRootType.JAVADOC, ProjectRootType.JAVADOC, jdks[i], sdkModificator);\n          break;\n        }\n      }\n    }\n  }","commit_id":"5d0f72ba9b39a271b1b7b967e424648df88e41d0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public AdditionalDataConfigurable createAdditionalDataConfigurable(SdkModel sdkModel, SdkModificator sdkModificator) {\n    sdkModel.addListener(new SdkModel.Listener() {\n      public void sdkAdded(Sdk sdk) {\n      }\n      public void beforeSdkRemove(Sdk sdk) {\n      }\n      public void sdkChanged(Sdk sdk) {\n      }\n      public void sdkHomeSelected(Sdk sdk, String newSdkHome) {\n        if (sdk.getSdkType() instanceof IdeaJdk){\n          myInternalJavaSdk = JavaSdk.getInstance().createJdk(\"\", newSdkHome);\n        }\n      }\n    });\n    return new IdeaJdkConfigurable();\n  }","id":7324,"modified_method":"public AdditionalDataConfigurable createAdditionalDataConfigurable(final SdkModel sdkModel, SdkModificator sdkModificator) {\n    sdkModel.addListener(new SdkModel.Listener() {\n      public void sdkAdded(Sdk sdk) {\n      }\n\n      public void beforeSdkRemove(Sdk sdk) {\n      }\n\n      public void sdkChanged(Sdk sdk) {\n      }\n\n      public void sdkHomeSelected(Sdk sdk, String newSdkHome) {\n        if (sdk.getSdkType() instanceof IdeaJdk) {\n          String jreHome;\n          if (SystemInfo.isLinux || SystemInfo.isWindows) {\n            jreHome = newSdkHome + File.separator + \"jre\";\n            myInternalJavaSdk = JavaSdk.getInstance().createJdk(\"\", jreHome);\n          }\n        }\n      }\n    });\n    return new IdeaJdkConfigurable();\n  }","commit_id":"5d0f72ba9b39a271b1b7b967e424648df88e41d0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Compares this key to the other key passed as parameter,\n     * from comparing the two keys, a variation String is constructed.<p>\n     * \n     * This method is the \"heart\" of the key matching process.<p>\n     *\n     * The assumtion is that this key should be the one constructed for the response, \n     * while the parameter key should have been constructed from the request.<p>\n     *\n     * A short example how this works:\n     * If the cache key is \"cache=user\" and the request is done from a guest user\n     * the constructed variation will be \"user=(guest)\".<p>\n     * \n     * @param key the key to match this key with\n     * @return null if not cachable, or the Variation String if cachable\n     */\n    public String matchRequestKey(CmsFlexRequestKey key) {\n\n        StringBuffer str = new StringBuffer(100);\n        if (m_always < 0) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CACHE_NEVER_0));\n            }\n            return null;\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CHECK_NO_PARAMS_0));\n        }\n        if ((m_noparams != null) && (key.getParams() != null)) {\n            if ((m_noparams.size() == 0) && (key.getParams().size() > 0)) {\n                return null;\n            }\n            Iterator i = key.getParams().keySet().iterator();\n            while (i.hasNext()) {\n                if (m_noparams.contains(i.next())) {\n                    return null;\n                }\n            }\n        }\n\n        if (m_always > 0) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CACHE_ALWAYS_0));\n            }\n            str.append(\"always\");\n            return str.toString();\n        }\n\n        if (m_uri != null) {\n            str.append(\"uri=(\");\n            str.append(key.getUri());\n            str.append(\");\");\n        }\n\n        if (m_element != null) {\n            str.append(\"element=(\");\n            str.append(key.getElement());\n            str.append(\");\");\n        }\n\n        if (m_locale != null) {\n            str.append(\"locale=(\");\n            str.append(key.getLocale());\n            str.append(\");\");\n        }\n\n        if (m_encoding != null) {\n            str.append(\"encoding=(\");\n            str.append(key.getEncoding());\n            str.append(\");\");\n        }\n\n        if (m_ip != null) {\n            str.append(\"ip=(\");\n            str.append(key.getIp());\n            str.append(\");\");\n        }\n\n        if (m_user != null) {\n            str.append(\"user=(\");\n            str.append(key.getUser());\n            str.append(\");\");\n        }\n\n        if (m_params != null) {\n            str.append(\"params=(\");\n            Map keyParams = key.getParams();\n            if (keyParams != null) {\n                if (m_params.size() > 0) {\n                    // match only params listed in cache directives\n                    Iterator i = m_params.iterator();\n                    while (i.hasNext()) {\n                        Object o = i.next();\n                        if (keyParams.containsKey(o)) {\n                            str.append(o);\n                            str.append(\"=\");\n                            // TODO: handle multiple occurances of the same parameter value\n                            String[] values = (String[])keyParams.get(o);\n                            str.append(values[0]);\n                            if (i.hasNext()) {\n                                str.append(\",\");\n                            }\n                        }\n                    }\n                } else {\n                    // match all request params\n                    Iterator i = keyParams.keySet().iterator();\n                    while (i.hasNext()) {\n                        Object o = i.next();\n                        str.append(o);\n                        str.append(\"=\");\n                        // TODO: handle multiple occurances of the same parameter value\n                        String[] values = (String[])keyParams.get(o);\n                        str.append(values[0]);\n                        if (i.hasNext()) {\n                            str.append(\",\");\n                        }\n                    }\n                }\n            }\n            str.append(\")\");\n        }\n\n        if (m_session != null) {\n            StringBuffer buf = new StringBuffer(32);\n            boolean found = false;\n            buf.append(\"session=(\");\n            HttpSession keySession = key.getSession();\n            if (keySession != null) {\n                // match only session attributes listed in cache directives\n                Iterator i = m_session.iterator();\n                while (i.hasNext()) {\n                    String name = (String)i.next();\n                    Object val = keySession.getAttribute(name);\n                    if (val != null) {\n                        found = true;\n                        buf.append(name);\n                        buf.append(\"=\");\n                        buf.append(val);\n                        if (i.hasNext()) {\n                            buf.append(\",\");\n                        }\n                    }\n                }\n            }\n            if (found) {\n                buf.append(\")\");\n                str.append(buf);\n            }\n        }\n\n        if (m_schemes != null) {\n            String s = key.getScheme();\n            if ((m_schemes.size() > 0) && (!m_schemes.contains(s))) {\n                return null;\n            }\n            str.append(\"schemes=(\");\n            str.append(s);\n            str.append(\");\");\n        }\n\n        if (m_ports != null) {\n            Integer i = key.getPort();\n            if ((m_ports.size() > 0) && (!m_ports.contains(i))) {\n                return null;\n            }\n            str.append(\"ports=(\");\n            str.append(i);\n            str.append(\");\");\n        }\n\n        if (m_timeout > 0) {\n            str.append(\"timeout=(\");\n            str.append(m_timeout);\n            str.append(\");\");\n        }\n\n        if (str.length() > 0) {\n            return str.toString();\n        } else {\n            return null;\n        }\n    }","id":7325,"modified_method":"/**\n     * Compares this key to the other key passed as parameter,\n     * from comparing the two keys, a variation String is constructed.<p>\n     * \n     * This method is the \"heart\" of the key matching process.<p>\n     *\n     * The assumtion is that this key should be the one constructed for the response, \n     * while the parameter key should have been constructed from the request.<p>\n     *\n     * A short example how this works:\n     * If the cache key is \"cache=user\" and the request is done from a guest user\n     * the constructed variation will be \"user=(guest)\".<p>\n     * \n     * @param key the key to match this key with\n     * @return null if not cachable, or the Variation String if cachable\n     */\n    public String matchRequestKey(CmsFlexRequestKey key) {\n\n        StringBuffer str = new StringBuffer(100);\n        if (m_always < 0) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CACHE_NEVER_0));\n            }\n            return null;\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CHECK_NO_PARAMS_0));\n        }\n        if ((m_noparams != null) && (key.getParams() != null)) {\n            if ((m_noparams.size() == 0) && (key.getParams().size() > 0)) {\n                return null;\n            }\n            Iterator i = key.getParams().keySet().iterator();\n            while (i.hasNext()) {\n                if (m_noparams.contains(i.next())) {\n                    return null;\n                }\n            }\n        }\n\n        if (m_always > 0) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CACHE_ALWAYS_0));\n            }\n            str.append(CACHE_00_ALWAYS);\n            return str.toString();\n        }\n\n        if (m_uri != null) {\n            appendKeyValue(str, CACHE_02_URI, key.getUri());\n        }\n\n        if (m_site != null) {\n            appendKeyValue(str, CACHE_17_SITE, key.getSite());\n        }\n\n        if (m_element != null) {\n            appendKeyValue(str, CACHE_14_ELEMENT, key.getElement());\n        }\n\n        if (m_locale != null) {\n            appendKeyValue(str, CACHE_15_LOCALE, key.getLocale());\n        }\n\n        if (m_encoding != null) {\n            appendKeyValue(str, CACHE_16_ENCODING, key.getEncoding());\n        }\n\n        if (m_ip != null) {\n            appendKeyValue(str, CACHE_13_IP, key.getIp());\n        }\n\n        if (m_user != null) {\n            appendKeyValue(str, CACHE_03_USER, key.getUser());\n        }\n\n        if (m_params != null) {\n            str.append(CACHE_04_PARAMS);\n            str.append(\"=(\");\n            Map keyParams = key.getParams();\n            if (keyParams != null) {\n                if (m_params.size() > 0) {\n                    // match only params listed in cache directives\n                    Iterator i = m_params.iterator();\n                    while (i.hasNext()) {\n                        Object o = i.next();\n                        if (keyParams.containsKey(o)) {\n                            str.append(o);\n                            str.append(\"=\");\n                            // TODO: handle multiple occurances of the same parameter value\n                            String[] values = (String[])keyParams.get(o);\n                            str.append(values[0]);\n                            if (i.hasNext()) {\n                                str.append(\",\");\n                            }\n                        }\n                    }\n                } else {\n                    // match all request params\n                    Iterator i = keyParams.keySet().iterator();\n                    while (i.hasNext()) {\n                        Object o = i.next();\n                        str.append(o);\n                        str.append(\"=\");\n                        // TODO: handle multiple occurances of the same parameter value\n                        String[] values = (String[])keyParams.get(o);\n                        str.append(values[0]);\n                        if (i.hasNext()) {\n                            str.append(\",\");\n                        }\n                    }\n                }\n            }\n            str.append(\");\");\n        }\n\n        if (m_session != null) {\n            StringBuffer buf = new StringBuffer(32);\n            boolean found = false;\n            buf.append(CACHE_07_SESSION);\n            buf.append(\"=(\");\n            HttpSession keySession = key.getSession();\n            if (keySession != null) {\n                // match only session attributes listed in cache directives\n                Iterator i = m_session.iterator();\n                while (i.hasNext()) {\n                    String name = (String)i.next();\n                    Object val = keySession.getAttribute(name);\n                    if (val != null) {\n                        found = true;\n                        buf.append(name);\n                        buf.append(\"=\");\n                        buf.append(val);\n                        if (i.hasNext()) {\n                            buf.append(\",\");\n                        }\n                    }\n                }\n            }\n            if (found) {\n                buf.append(\");\");\n                str.append(buf);\n            }\n        }\n\n        if (m_schemes != null) {\n            String s = key.getScheme();\n            if ((m_schemes.size() > 0) && (!m_schemes.contains(s))) {\n                return null;\n            }\n            appendKeyValue(str, CACHE_08_SCHEMES, s);\n        }\n\n        if (m_ports != null) {\n            Integer i = key.getPort();\n            if ((m_ports.size() > 0) && (!m_ports.contains(i))) {\n                return null;\n            }\n            str.append(CACHE_09_PORTS);\n            str.append(\"=(\");\n            str.append(i);\n            str.append(\");\");\n        }\n\n        if (m_timeout > 0) {\n            str.append(CACHE_06_TIMEOUT);\n            str.append(\"=(\");\n            str.append(m_timeout);\n            str.append(\");\");\n        }\n\n        if (str.length() > 0) {\n            return str.toString();\n        } else {\n            return null;\n        }\n    }","commit_id":"46b3ff1e83311b28eebbff0056061c458169bd48","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Parse a String in the Flex cache language and construct \n     * the key data structure from this.<p>\n     *\n     * @param key the String to parse (usually read from the file property \"cache\")\n     */\n    private void parseFlexKey(String key) {\n\n        StringTokenizer toker = new StringTokenizer(key, \";\");\n        try {\n            while (toker.hasMoreElements()) {\n                String t = toker.nextToken();\n                String k = null;\n                String v = null;\n                int idx = t.indexOf('=');\n                if (idx >= 0) {\n                    k = t.substring(0, idx).trim();\n                    if (t.length() > idx) {\n                        v = t.substring(idx + 1).trim();\n                    }\n                } else {\n                    k = t.trim();\n                }\n                m_always = 0;\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_PARSE_FLEXKEY_3, t, k, v));\n                }\n                switch (CACHE_COMMANDS.indexOf(k)) {\n                    case 0: // always\n                    case 12:\n                        m_always = 1;\n                        // Continue processing (make sure we find a \"never\" behind \"always\")\n                        break;\n                    case 1: // never\n                    case 10:\n                        m_always = -1;\n                        // No need for any further processing\n                        return;\n                    case 2: // uri\n                        m_uri = IS_USED; // marks m_uri as being used\n                        break;\n                    case 3: // user\n                        m_user = IS_USED; // marks m_user as being used\n                        break;\n                    case 4: // params\n                        m_params = parseValueList(v);\n                        if (m_params.contains(I_CmsResourceLoader.PARAMETER_ELEMENT)) {\n                            // workaround for element setting by parameter in OpenCms < 6.0\n                            m_element = IS_USED;\n                            m_params.remove(I_CmsResourceLoader.PARAMETER_ELEMENT);\n                            if (m_params.size() == 0) {\n                                m_params = null;\n                            }\n                        }\n                        break;\n                    case 5: // no-params\n                        if (v != null) {\n                            // No-params are present\n                            m_noparams = parseValueList(v);\n                        } else {\n                            // Never cache with parameters\n                            m_noparams = new HashSet(0);\n                        }\n                        break;\n                    case 6: // timeout\n                        m_timeout = Integer.parseInt(v);\n                        break;\n                    case 7: // session\n                        m_session = parseValueList(v);\n                        if (m_session.size() <= 0) {\n                            // session must have at last one variable set\n                            m_parseError = true;\n                        }\n                        break;\n                    case 8: // schemes\n                        m_schemes = parseValueList(v);\n                        break;\n                    case 9: // ports\n                        m_ports = parseValueList(v);\n                        break;\n                    case 11: // previous parse error - ignore\n                        break;\n                    case 13: // ip\n                        m_ip = IS_USED; // marks ip as being used\n                        break;\n                    case 14: // element\n                        m_element = IS_USED;\n                        break;\n                    case 15: // locale\n                        m_locale = IS_USED;\n                        break;\n                    case 16: // encoding\n                        m_encoding = IS_USED;\n                        break;\n                    default: // unknown directive, throw error\n                        m_parseError = true;\n                }\n            }\n        } catch (Exception e) {\n            // Any Exception here indicates a parsing error\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_PARSE_ERROR_1, e.toString()));\n            }\n            m_parseError = true;\n        }\n        if (m_parseError) {\n            // If string is invalid set cache to \"never\"\n            m_always = -1;\n        }\n    }","id":7326,"modified_method":"/**\n     * Parse a String in the Flex cache language and construct \n     * the key data structure from this.<p>\n     *\n     * @param key the String to parse (usually read from the file property \"cache\")\n     */\n    private void parseFlexKey(String key) {\n\n        StringTokenizer toker = new StringTokenizer(key, \";\");\n        try {\n            while (toker.hasMoreElements()) {\n                String t = toker.nextToken();\n                String k = null;\n                String v = null;\n                int idx = t.indexOf('=');\n                if (idx >= 0) {\n                    k = t.substring(0, idx).trim();\n                    if (t.length() > idx) {\n                        v = t.substring(idx + 1).trim();\n                    }\n                } else {\n                    k = t.trim();\n                }\n                m_always = 0;\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_PARSE_FLEXKEY_3, t, k, v));\n                }\n                switch (CACHE_COMMANDS.indexOf(k)) {\n                    case 0: // always\n                    case 12: // true\n                        m_always = 1;\n                        // continue processing (make sure we find a \"never\" behind \"always\")\n                        break;\n                    case 1: // never\n                    case 10: // false\n                        m_always = -1;\n                        // no need for any further processing\n                        return;\n                    case 2: // uri\n                        m_uri = IS_USED; // marks m_uri as being used\n                        break;\n                    case 3: // user\n                        m_user = IS_USED; // marks m_user as being used\n                        break;\n                    case 4: // params\n                        m_params = parseValueList(v);\n                        if (m_params.contains(I_CmsResourceLoader.PARAMETER_ELEMENT)) {\n                            // workaround for element setting by parameter in OpenCms < 6.0\n                            m_element = IS_USED;\n                            m_params.remove(I_CmsResourceLoader.PARAMETER_ELEMENT);\n                            if (m_params.size() == 0) {\n                                m_params = null;\n                            }\n                        }\n                        break;\n                    case 5: // no-params\n                        if (v != null) {\n                            // no-params are present\n                            m_noparams = parseValueList(v);\n                        } else {\n                            // never cache with parameters\n                            m_noparams = new HashSet(0);\n                        }\n                        break;\n                    case 6: // timeout\n                        m_timeout = Integer.parseInt(v);\n                        break;\n                    case 7: // session\n                        m_session = parseValueList(v);\n                        if (m_session.size() <= 0) {\n                            // session must have at last one variable set\n                            m_parseError = true;\n                        }\n                        break;\n                    case 8: // schemes\n                        m_schemes = parseValueList(v);\n                        break;\n                    case 9: // ports\n                        m_ports = parseValueList(v);\n                        break;\n                    case 11: // previous parse error - ignore\n                        break;\n                    case 13: // ip\n                        m_ip = IS_USED; // marks ip as being used\n                        break;\n                    case 14: // element\n                        m_element = IS_USED;\n                        break;\n                    case 15: // locale\n                        m_locale = IS_USED;\n                        break;\n                    case 16: // encoding\n                        m_encoding = IS_USED;\n                        break;\n                    case 17: // site\n                        m_site = IS_USED;\n                        break;\n                    default: // unknown directive, throw error\n                        m_parseError = true;\n                }\n            }\n        } catch (Exception e) {\n            // any Exception here indicates a parsing error\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_PARSE_ERROR_1, e.toString()));\n            }\n            m_parseError = true;\n        }\n        if (m_parseError) {\n            // If string is invalid set cache to \"never\"\n            m_always = -1;\n        }\n    }","commit_id":"46b3ff1e83311b28eebbff0056061c458169bd48","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/** \n     * @see java.lang.Object#toString()\n     *\n     * @return a complete String representation for this key\n     */\n    public String toString() {\n\n        StringBuffer str = new StringBuffer(100);\n\n        if (m_always < 0) {\n            str.append(\"never\");\n            if (m_parseError) {\n                str.append(\";parse-error\");\n            }\n            return str.toString();\n        }\n        if (m_noparams != null) {\n            // add \"no-cachable\" parameters\n            if (m_noparams.size() == 0) {\n                str.append(\"no-params;\");\n            } else {\n                str.append(\"no-params=(\");\n                Iterator i = m_noparams.iterator();\n                while (i.hasNext()) {\n                    Object o = i.next();\n                    str.append(o);\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n        if (m_always > 0) {\n            str.append(\"always\");\n            if (m_parseError) {\n                str.append(\";parse-error\");\n            }\n            return str.toString();\n        }\n        if (m_uri != null) {\n            if (m_uri == IS_USED) {\n                str.append(\"uri;\");\n            } else {\n                str.append(\"uri=(\");\n                str.append(m_uri);\n                str.append(\");\");\n            }\n        }\n        if (m_element != null) {\n            // add element\n            if (m_element == IS_USED) {\n                str.append(\"element;\");\n            } else {\n                str.append(\"element=(\");\n                str.append(m_element);\n                str.append(\");\");\n            }\n        }\n        if (m_locale != null) {\n            // add locale\n            if (m_locale == IS_USED) {\n                str.append(\"locale;\");\n            } else {\n                str.append(\"locale=(\");\n                str.append(m_locale);\n                str.append(\");\");\n            }\n        }\n        if (m_encoding != null) {\n            // add encoding\n            if (m_encoding == IS_USED) {\n                str.append(\"encoding;\");\n            } else {\n                str.append(\"encoding=(\");\n                str.append(m_encoding);\n                str.append(\");\");\n            }\n        }\n        if (m_ip != null) {\n            // add ip\n            if (m_ip == IS_USED) {\n                str.append(\"ip;\");\n            } else {\n                str.append(\"ip=(\");\n                str.append(m_ip);\n                str.append(\");\");\n            }\n        }\n        if (m_user != null) {\n            // add user data\n            if (m_user == IS_USED) {\n                str.append(\"user;\");\n            } else {\n                str.append(\"user=(\");\n                str.append(m_user);\n                str.append(\");\");\n            }\n        }\n        if (m_params != null) {\n            // add parameters\n            if (m_params.size() == 0) {\n                str.append(\"params;\");\n            } else {\n                str.append(\"params=(\");\n                Iterator i = m_params.iterator();\n                while (i.hasNext()) {\n                    Object o = i.next();\n                    if (I_CmsResourceLoader.PARAMETER_ELEMENT.equals(o)) {\n                        continue;\n                    }\n                    str.append(o);\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n        if (m_session != null) {\n            // add session variables\n            str.append(\"session=(\");\n            Iterator i = m_session.iterator();\n            while (i.hasNext()) {\n                Object o = i.next();\n                str.append(o);\n                if (i.hasNext()) {\n                    str.append(\",\");\n                }\n            }\n            str.append(\");\");\n        }\n        if (m_timeout >= 0) {\n            // add timeout \n            str.append(\"timeout=(\");\n            str.append(m_timeout);\n            str.append(\");\");\n        }\n        if (m_schemes != null) {\n            // add schemes\n            if (m_schemes.size() == 0) {\n                str.append(\"schemes;\");\n            } else {\n                str.append(\"schemes=(\");\n                Iterator i = m_schemes.iterator();\n                while (i.hasNext()) {\n                    str.append(i.next());\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n        if (m_ports != null) {\n            // add ports\n            if (m_ports.size() == 0) {\n                str.append(\"ports;\");\n            } else {\n                str.append(\"ports=(\");\n                Iterator i = m_ports.iterator();\n                while (i.hasNext()) {\n                    str.append(i.next());\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n\n        if (m_parseError) {\n            str.append(\"parse-error;\");\n        }\n        return str.toString();\n    }","id":7327,"modified_method":"/** \n     * @see java.lang.Object#toString()\n     *\n     * @return a complete String representation for this key\n     */\n    public String toString() {\n\n        StringBuffer str = new StringBuffer(100);\n\n        if (m_always < 0) {\n            str.append(CACHE_01_NEVER);\n            if (m_parseError) {\n                str.append(\";\");\n                str.append(CACHE_11_PARSE_ERROR);\n            }\n            return str.toString();\n        }\n        if (m_noparams != null) {\n            // add \"no-cachable\" parameters\n            str.append(CACHE_05_NO_PARAMS);\n            if (m_noparams.size() == 0) {\n                str.append(\";\");\n            } else {\n                str.append(\"=(\");\n                Iterator i = m_noparams.iterator();\n                while (i.hasNext()) {\n                    Object o = i.next();\n                    str.append(o);\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n        if (m_always > 0) {\n            str.append(CACHE_00_ALWAYS);\n            if (m_parseError) {\n                str.append(\";\");\n                str.append(CACHE_11_PARSE_ERROR);\n            }\n            return str.toString();\n        }\n        if (m_uri != null) {\n            // add uri\n            appendKeyValue(str, CACHE_02_URI, m_uri);\n        }\n        if (m_site != null) {\n            // add site\n            appendKeyValue(str, CACHE_17_SITE, m_site);\n        }\n        if (m_element != null) {\n            // add element\n            appendKeyValue(str, CACHE_14_ELEMENT, m_element);\n        }\n        if (m_locale != null) {\n            // add locale\n            appendKeyValue(str, CACHE_15_LOCALE, m_locale);\n        }\n        if (m_encoding != null) {\n            // add encoding\n            appendKeyValue(str, CACHE_16_ENCODING, m_encoding);\n        }\n        if (m_ip != null) {\n            // add ip\n            appendKeyValue(str, CACHE_13_IP, m_ip);\n        }\n        if (m_user != null) {\n            // add user\n            appendKeyValue(str, CACHE_03_USER, m_user);\n        }\n        if (m_params != null) {\n            // add parameters\n            str.append(CACHE_04_PARAMS);\n            if (m_params.size() == 0) {\n                str.append(\";\");\n            } else {\n                str.append(\"=(\");\n                Iterator i = m_params.iterator();\n                while (i.hasNext()) {\n                    Object o = i.next();\n                    if (I_CmsResourceLoader.PARAMETER_ELEMENT.equals(o)) {\n                        continue;\n                    }\n                    str.append(o);\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n        if (m_session != null) {\n            // add session variables\n            str.append(CACHE_07_SESSION);\n            str.append(\"=(\");\n            Iterator i = m_session.iterator();\n            while (i.hasNext()) {\n                Object o = i.next();\n                str.append(o);\n                if (i.hasNext()) {\n                    str.append(\",\");\n                }\n            }\n            str.append(\");\");\n        }\n        if (m_timeout >= 0) {\n            // add timeout \n            str.append(CACHE_06_TIMEOUT);\n            str.append(\"=(\");\n            str.append(m_timeout);\n            str.append(\");\");\n        }\n        if (m_schemes != null) {\n            // add schemes\n            str.append(CACHE_08_SCHEMES);\n            if (m_schemes.size() == 0) {\n                str.append(\";\");\n            } else {\n                str.append(\"=(\");\n                Iterator i = m_schemes.iterator();\n                while (i.hasNext()) {\n                    str.append(i.next());\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n        if (m_ports != null) {\n            // add ports\n            str.append(CACHE_09_PORTS);\n            if (m_ports.size() == 0) {\n                str.append(\";\");\n            } else {\n                str.append(\"=(\");\n                Iterator i = m_ports.iterator();\n                while (i.hasNext()) {\n                    str.append(i.next());\n                    if (i.hasNext()) {\n                        str.append(\",\");\n                    }\n                }\n                str.append(\");\");\n            }\n        }\n\n        if (m_parseError) {\n            str.append(CACHE_11_PARSE_ERROR);\n        }\n        return str.toString();\n    }","commit_id":"46b3ff1e83311b28eebbff0056061c458169bd48","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@Override\n\tprotected void addDDLFormTemplates(\n\t\t\tString ddmStructureKey, String dirName, String fileName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = ddmStructureLocalService.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tStringBundler sb = new StringBundler(4);\n\n\t\tString resourcesPath = _getResourcePath(dirName);\n\n\t\tsb.append(resourcesPath);\n\t\tsb.append(StringPool.SLASH);\n\t\tsb.append(fileName);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath, \"xsd\",\n\t\t\t\tscript, DDMTemplateConstants.TEMPLATE_TYPE_FORM,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_MODE_CREATE);\n\t\t}\n\t}","id":7328,"modified_method":"@Override\n\tprotected void addDDLFormTemplates(\n\t\t\tString ddmStructureKey, String dirName, String fileName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = ddmStructureLocalService.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_getResourcePath(dirName) + StringPool.SLASH + fileName);\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath, \"xsd\",\n\t\t\t\tscript, DDMTemplateConstants.TEMPLATE_TYPE_FORM,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_MODE_CREATE);\n\t\t}\n\t}","commit_id":"ce8152114efee68502fa3b50f5ae4229011566d2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void addApplicationDisplayTemplate(\n\t\t\tString parentDirName, String dirName, long classNameId)\n\t\tthrows Exception {\n\n\t\tStringBundler sb = new StringBundler(4);\n\n\t\tString resourcesPath = _getResourcePath(parentDirName);\n\n\t\tsb.append(resourcesPath);\n\t\tsb.append(\"/\");\n\t\tsb.append(dirName);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tFile file = new File(resourcePath);\n\n\t\t\taddApplicationDisplayTemplate(script, file, classNameId);\n\t\t}\n\t}","id":7329,"modified_method":"@Override\n\tprotected void addApplicationDisplayTemplate(\n\t\t\tString parentDirName, String dirName, long classNameId)\n\t\tthrows Exception {\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_getResourcePath(parentDirName) + StringPool.SLASH + dirName);\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tFile file = new File(resourcePath);\n\n\t\t\taddApplicationDisplayTemplate(script, file, classNameId);\n\t\t}\n\t}","commit_id":"ce8152114efee68502fa3b50f5ae4229011566d2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void addDDLDisplayTemplates(\n\t\t\tString ddmStructureKey, String dirName, String fileName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = ddmStructureLocalService.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tStringBundler sb = new StringBundler(4);\n\n\t\tString resourcesPath = _getResourcePath(dirName);\n\n\t\tsb.append(resourcesPath);\n\t\tsb.append(StringPool.SLASH);\n\t\tsb.append(fileName);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath,\n\t\t\t\tgetDDMTemplateLanguage(resourcePath), script,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK);\n\t\t}\n\t}","id":7330,"modified_method":"@Override\n\tprotected void addDDLDisplayTemplates(\n\t\t\tString ddmStructureKey, String dirName, String fileName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = ddmStructureLocalService.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_getResourcePath(dirName) + StringPool.SLASH + fileName);\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath,\n\t\t\t\tgetDDMTemplateLanguage(resourcePath), script,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK);\n\t\t}\n\t}","commit_id":"ce8152114efee68502fa3b50f5ae4229011566d2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\r\n     * Tries to set the ranges of the <tt>PortTracker<\/tt>s (e.g. default,\r\n     * audio, video, data channel) to the values specified in the\r\n     * <tt>ConfigurationService<\/tt>.\r\n     */\r\n    protected synchronized static void initializePortNumbers()\r\n    {\r\n        //try the default tracker first\r\n        ConfigurationService cfg\r\n            = ProtocolMediaActivator.getConfigurationService();\r\n        String minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_MEDIA_PORT_NUMBER_PROPERTY_NAME);\r\n        String maxPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MAX_MEDIA_PORT_NUMBER_PROPERTY_NAME);\r\n\r\n        //Try the specified range; otherwise, leave the tracker as it is:\r\n        //[5000, 6000].\r\n        defaultPortTracker.tryRange(minPort, maxPort);\r\n\r\n        //try the VIDEO tracker\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_VIDEO_PORT_NUMBER_PROPERTY_NAME);\r\n        maxPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MAX_VIDEO_PORT_NUMBER_PROPERTY_NAME);\r\n        //Try the specified range; otherwise, leave the tracker to null.\r\n        if (videoPortTracker == null)\r\n            videoPortTracker = PortTracker.createTracker(minPort, maxPort);\r\n        else\r\n            videoPortTracker.tryRange(minPort, maxPort);\r\n\r\n        //try the AUDIO tracker\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_AUDIO_PORT_NUMBER_PROPERTY_NAME);\r\n        maxPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MAX_AUDIO_PORT_NUMBER_PROPERTY_NAME);\r\n        //Try the specified range; otherwise, leave the tracker to null.\r\n        if (audioPortTracker == null)\r\n            audioPortTracker = PortTracker.createTracker(minPort, maxPort);\r\n        else\r\n            audioPortTracker.tryRange(minPort, maxPort);\r\n\r\n        //try the DATA CHANNEL tracker\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);\r\n        maxPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MAX_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);\r\n        //Try the specified range; otherwise, leave the tracker to null.\r\n        if (dataPortTracker == null)\r\n            dataPortTracker = PortTracker.createTracker(minPort, maxPort);\r\n        else\r\n            dataPortTracker.tryRange(minPort, maxPort);\r\n    }","id":7331,"modified_method":"/**\r\n     * Tries to set the ranges of the <tt>PortTracker<\/tt>s (e.g. default,\r\n     * audio, video, data channel) to the values specified in the\r\n     * <tt>ConfigurationService<\/tt>.\r\n     */\r\n    protected synchronized static void initializePortNumbers()\r\n    {\r\n        //try the default tracker first\r\n        ConfigurationService cfg\r\n            = ProtocolMediaActivator.getConfigurationService();\r\n        String minPort, maxPort;\r\n\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_MEDIA_PORT_NUMBER_PROPERTY_NAME);\r\n        if (minPort != null)\r\n        {\r\n            maxPort\r\n                = cfg.getString(\r\n                        OperationSetBasicTelephony\r\n                            .MAX_MEDIA_PORT_NUMBER_PROPERTY_NAME);\r\n            if (maxPort != null)\r\n            {\r\n                //Try the specified range; otherwise, leave the tracker as it\r\n                //is: [5000, 6000].\r\n                defaultPortTracker.tryRange(minPort, maxPort);\r\n            }\r\n        }\r\n\r\n        //try the VIDEO tracker\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_VIDEO_PORT_NUMBER_PROPERTY_NAME);\r\n        if (minPort != null)\r\n        {\r\n            maxPort\r\n                = cfg.getString(\r\n                        OperationSetBasicTelephony\r\n                            .MAX_VIDEO_PORT_NUMBER_PROPERTY_NAME);\r\n            if (maxPort != null)\r\n            {\r\n                //Try the specified range; otherwise, leave the tracker to null.\r\n                if (videoPortTracker == null)\r\n                {\r\n                    videoPortTracker\r\n                        = PortTracker.createTracker(minPort, maxPort);\r\n                }\r\n                else\r\n                {\r\n                    videoPortTracker.tryRange(minPort, maxPort);\r\n                }\r\n            }\r\n        }\r\n\r\n        //try the AUDIO tracker\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_AUDIO_PORT_NUMBER_PROPERTY_NAME);\r\n        if (minPort != null)\r\n        {\r\n            maxPort\r\n                = cfg.getString(\r\n                        OperationSetBasicTelephony\r\n                            .MAX_AUDIO_PORT_NUMBER_PROPERTY_NAME);\r\n            if (maxPort != null)\r\n            {\r\n                //Try the specified range; otherwise, leave the tracker to null.\r\n                if (audioPortTracker == null)\r\n                {\r\n                    audioPortTracker\r\n                        = PortTracker.createTracker(minPort, maxPort);\r\n                }\r\n                else\r\n                {\r\n                    audioPortTracker.tryRange(minPort, maxPort);\r\n                }\r\n            }\r\n        }\r\n\r\n        //try the DATA CHANNEL tracker\r\n        minPort\r\n            = cfg.getString(\r\n                    OperationSetBasicTelephony\r\n                        .MIN_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);\r\n        if (minPort != null)\r\n        {\r\n            maxPort\r\n                = cfg.getString(\r\n                        OperationSetBasicTelephony\r\n                            .MAX_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);\r\n            if (maxPort != null)\r\n            {\r\n                //Try the specified range; otherwise, leave the tracker to null.\r\n                if (dataPortTracker == null)\r\n                {\r\n                    dataPortTracker\r\n                        = PortTracker.createTracker(minPort, maxPort);\r\n                }\r\n                else\r\n                {\r\n                    dataPortTracker.tryRange(minPort, maxPort);\r\n                }\r\n            }\r\n        }\r\n    }","commit_id":"3542a84081d4500af7af8a8ae34b296b7f107782","url":"https://github.com/jitsi/jitsi"},{"original_method":"private static void classToXML(Class<?> clazz) throws ParserConfigurationException,\n                                                  TransformerException {\n        boolean isConcreteClass=(clazz.getModifiers() & Modifier.ABSTRACT) == 0;\n        boolean isExperimental=clazz.isAnnotationPresent(Experimental.class);\n        if(isConcreteClass && !isExperimental) {\n            Class<?> protocol=clazz;\n            Document xmldoc=null;\n            DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder=factory.newDocumentBuilder();\n            DOMImplementation impl=builder.getDOMImplementation();\n            xmldoc=impl.createDocument(null, \"table\", null);\n            Element row=createXMLTree(xmldoc);\n\n            for(;clazz != null;clazz=clazz.getSuperclass()) {\n                Field[] fields=clazz.getDeclaredFields();\n                for(Field field:fields) {\n                    if(field.isAnnotationPresent(Property.class)) {\n                        String property=field.getName();\n                        Element entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(property);\n                        row.appendChild(entry);\n\n                        Property annotation=field.getAnnotation(Property.class);\n                        String desc=annotation.description();\n                        entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(desc);\n                        row.appendChild(entry);\n\n                        //System.out.println(protocol + \"#\" + property + \"=\" + desc);\n                    }\n                }\n            }\n            DOMSource domSource=new DOMSource(xmldoc);\n            StreamResult streamResult=new StreamResult(new File(protocol.getSimpleName() + \".xml\"));\n            TransformerFactory tf=TransformerFactory.newInstance();\n            Transformer serializer=tf.newTransformer();\n            serializer.setOutputProperty(OutputKeys.ENCODING, \"ISO-8859-1\");\n            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            serializer.transform(domSource, streamResult);\n        }\n    }","id":7332,"modified_method":"private static void classToXML(Class<?> clazz) throws ParserConfigurationException,\n                                                  TransformerException {\n        boolean isConcreteClass=(clazz.getModifiers() & Modifier.ABSTRACT) == 0;\n        boolean isExperimental=clazz.isAnnotationPresent(Experimental.class);\n        boolean isUnsupported=clazz.isAnnotationPresent(Unsupported.class);\n        if(isConcreteClass && !isExperimental && !isUnsupported) {\n            Class<?> protocol=clazz;\n            Document xmldoc=null;\n            DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder=factory.newDocumentBuilder();\n            DOMImplementation impl=builder.getDOMImplementation();\n            xmldoc=impl.createDocument(null, \"table\", null);\n            Element row=createXMLTree(xmldoc);\n            int propertyCount = 0;\n\n            for(;clazz != null;clazz=clazz.getSuperclass()) {\n                Field[] fields=clazz.getDeclaredFields();\n                for(Field field:fields) {\n                    if(field.isAnnotationPresent(Property.class)) {\n                        String property=field.getName();\n                        Element entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(property);\n                        row.appendChild(entry);\n\n                        Property annotation=field.getAnnotation(Property.class);\n                        String desc=annotation.description();\n                        entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(desc);\n                        row.appendChild(entry);\n                        propertyCount++;\n\n                        //System.out.println(protocol + \"#\" + property + \"=\" + desc);\n                    }\n                }\n            }\n            //do we have more than one property (superclass Protocol has only one property (stats))\n            if(propertyCount > 1) {\n                DOMSource domSource=new DOMSource(xmldoc);\n                StreamResult streamResult=new StreamResult(new File(protocol.getSimpleName() + \".xml\"));\n                TransformerFactory tf=TransformerFactory.newInstance();\n                Transformer serializer=tf.newTransformer();\n                serializer.setOutputProperty(OutputKeys.ENCODING, \"ISO-8859-1\");\n                serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n                serializer.transform(domSource, streamResult);\n            }\n        }\n    }","commit_id":"0e33619befaf801e0dc5d3bffcc51df40b8472ac","url":"https://github.com/belaban/JGroups"},{"original_method":"private static void classToXML(Class<?> clazz) throws ParserConfigurationException,\n                                                  TransformerException {\n        boolean isConcreteClass=(clazz.getModifiers() & Modifier.ABSTRACT) == 0;\n        boolean isExperimental=clazz.isAnnotationPresent(Experimental.class);\n        if(isConcreteClass && !isExperimental) {\n            Class<?> protocol=clazz;\n            Document xmldoc=null;\n            DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder=factory.newDocumentBuilder();\n            DOMImplementation impl=builder.getDOMImplementation();\n            xmldoc=impl.createDocument(null, \"table\", null);\n            Element row=createXMLTree(xmldoc);\n\n            for(;clazz != null;clazz=clazz.getSuperclass()) {\n                Field[] fields=clazz.getDeclaredFields();\n                for(Field field:fields) {\n                    if(field.isAnnotationPresent(Property.class)) {\n                        String property=field.getName();\n                        Element entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(property);\n                        row.appendChild(entry);\n\n                        Property annotation=field.getAnnotation(Property.class);\n                        String desc=annotation.description();\n                        entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(desc);\n                        row.appendChild(entry);\n\n                        //System.out.println(protocol + \"#\" + property + \"=\" + desc);\n                    }\n                }\n            }\n            DOMSource domSource=new DOMSource(xmldoc);\n            StreamResult streamResult=new StreamResult(new File(protocol.getSimpleName() + \".xml\"));\n            TransformerFactory tf=TransformerFactory.newInstance();\n            Transformer serializer=tf.newTransformer();\n            serializer.setOutputProperty(OutputKeys.ENCODING, \"ISO-8859-1\");\n            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            serializer.transform(domSource, streamResult);\n        }\n    }","id":7333,"modified_method":"private static void classToXML(Class<?> clazz) throws ParserConfigurationException,\n                                                  TransformerException {\n        boolean isConcreteClass=(clazz.getModifiers() & Modifier.ABSTRACT) == 0;\n        boolean isExperimental=clazz.isAnnotationPresent(Experimental.class);\n        boolean isUnsupported=clazz.isAnnotationPresent(Unsupported.class);\n        if(isConcreteClass && !isExperimental && !isUnsupported) {\n            Class<?> protocol=clazz;\n            Document xmldoc=null;\n            DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder=factory.newDocumentBuilder();\n            DOMImplementation impl=builder.getDOMImplementation();\n            xmldoc=impl.createDocument(null, \"table\", null);\n            Element row=createXMLTree(xmldoc);\n            int propertyCount = 0;\n\n            for(;clazz != null;clazz=clazz.getSuperclass()) {\n                Field[] fields=clazz.getDeclaredFields();\n                for(Field field:fields) {\n                    if(field.isAnnotationPresent(Property.class)) {\n                        String property=field.getName();\n                        Element entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(property);\n                        row.appendChild(entry);\n\n                        Property annotation=field.getAnnotation(Property.class);\n                        String desc=annotation.description();\n                        entry=xmldoc.createElement(\"entry\");\n                        entry.setTextContent(desc);\n                        row.appendChild(entry);\n                        propertyCount++;\n\n                        //System.out.println(protocol + \"#\" + property + \"=\" + desc);\n                    }\n                }\n            }\n            //do we have more than one property (superclass Protocol has only one property (stats))\n            if(propertyCount > 1) {\n                DOMSource domSource=new DOMSource(xmldoc);\n                StreamResult streamResult=new StreamResult(new File(protocol.getSimpleName() + \".xml\"));\n                TransformerFactory tf=TransformerFactory.newInstance();\n                Transformer serializer=tf.newTransformer();\n                serializer.setOutputProperty(OutputKeys.ENCODING, \"ISO-8859-1\");\n                serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n                serializer.transform(domSource, streamResult);\n            }\n        }\n    }","commit_id":"2372ff30fcdd14ab40264ae7a8b358dc4ad8803d","url":"https://github.com/belaban/JGroups"},{"original_method":"protected void updateStructures() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\"select * from JournalStructure\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tString uuid_ = rs.getString(\"uuid_\");\n\t\t\t\tlong id_ = rs.getLong(\"id_\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong userId = rs.getLong(\"userId\");\n\t\t\t\tString userName = rs.getString(\"userName\");\n\t\t\t\tTimestamp createDate = rs.getTimestamp(\"createDate\");\n\t\t\t\tTimestamp modifiedDate = rs.getTimestamp(\"modifiedDate\");\n\t\t\t\tString structureId = rs.getString(\"structureId\");\n\t\t\t\tString parentStructureId = rs.getString(\"parentStructureId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\t\t\t\tString description = rs.getString(\"description\");\n\t\t\t\tString xsd = rs.getString(\"xsd\");\n\n\t\t\t\tlong ddmStructureId = increment();\n\n\t\t\t\taddDDMStructure(\n\t\t\t\t\tuuid_, ddmStructureId, groupId, companyId, userId, userName,\n\t\t\t\t\tcreateDate, modifiedDate, parentStructureId, structureId,\n\t\t\t\t\tname, description, xsd);\n\n\t\t\t\tupdateResourcePermission(\n\t\t\t\t\tcompanyId,\n\t\t\t\t\t\"com.liferay.portlet.journal.model.JournalStructure\",\n\t\t\t\t\tDDMStructure.class.getName(), id_, ddmStructureId);\n\n\t\t\t\t_ddmStructureIds.put(\n\t\t\t\t\tgroupId + \"#\" + structureId, ddmStructureId);\n\t\t\t\t_ddmStructurePKs.put(id_, ddmStructureId);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\n\t\trunSQL(\"drop table JournalStructure\");\n\t}","id":7334,"modified_method":"protected void updateStructures() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\"select * from JournalStructure\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tString uuid_ = rs.getString(\"uuid_\");\n\t\t\t\tlong id_ = rs.getLong(\"id_\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong userId = rs.getLong(\"userId\");\n\t\t\t\tString userName = rs.getString(\"userName\");\n\t\t\t\tTimestamp createDate = rs.getTimestamp(\"createDate\");\n\t\t\t\tTimestamp modifiedDate = rs.getTimestamp(\"modifiedDate\");\n\t\t\t\tString structureId = rs.getString(\"structureId\");\n\t\t\t\tString parentStructureId = rs.getString(\"parentStructureId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\t\t\t\tString description = rs.getString(\"description\");\n\t\t\t\tString xsd = rs.getString(\"xsd\");\n\n\t\t\t\tLong insertedDdmStructureId =\n\t\t\t\t\t_ddmStructureIds.get(groupId + \"#\" + structureId);\n\t\t\t\t\n\t\t\t\tif (insertedDdmStructureId == null) {\n\t\t\t\t\tlong ddmStructureId = increment();\n\t\n\t\t\t\t\taddDDMStructure(\n\t\t\t\t\t\tuuid_, ddmStructureId, groupId, companyId, userId, userName,\n\t\t\t\t\t\tcreateDate, modifiedDate, parentStructureId, structureId,\n\t\t\t\t\t\tname, description, xsd);\n\t\n\t\t\t\t\tupdateResourcePermission(\n\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\"com.liferay.portlet.journal.model.JournalStructure\",\n\t\t\t\t\t\tDDMStructure.class.getName(), id_, ddmStructureId);\n\t\n\t\t\t\t\t_ddmStructureIds.put(\n\t\t\t\t\t\tgroupId + \"#\" + structureId, ddmStructureId);\n\t\t\t\t\t_ddmStructurePKs.put(id_, ddmStructureId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\n\t\trunSQL(\"drop table JournalStructure\");\n\t}","commit_id":"66fead5b7cbc4bdd804dc9e1a9dae1751308e9a4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected long updateStructure(String structureId) throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select * from JournalStructure where structureId = ?\");\n\n\t\t\tps.setString(1, structureId);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\tif (rs.next()) {\n\t\t\t\tString uuid_ = rs.getString(\"uuid_\");\n\t\t\t\tlong id_ = rs.getLong(\"id_\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong userId = rs.getLong(\"userId\");\n\t\t\t\tString userName = rs.getString(\"userName\");\n\t\t\t\tTimestamp createDate = rs.getTimestamp(\"createDate\");\n\t\t\t\tTimestamp modifiedDate = rs.getTimestamp(\"modifiedDate\");\n\t\t\t\tString parentStructureId = rs.getString(\"parentStructureId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\t\t\t\tString description = rs.getString(\"description\");\n\t\t\t\tString xsd = rs.getString(\"xsd\");\n\n\t\t\t\tLong ddmStructureId = _ddmStructureIds.get(\n\t\t\t\t\tgroupId + \"#\" + structureId);\n\n\t\t\t\tif (ddmStructureId != null) {\n\t\t\t\t\treturn ddmStructureId;\n\t\t\t\t}\n\n\t\t\t\tddmStructureId = increment();\n\n\t\t\t\taddDDMStructure(\n\t\t\t\t\tuuid_, ddmStructureId, groupId, companyId, userId, userName,\n\t\t\t\t\tcreateDate, modifiedDate, parentStructureId, structureId,\n\t\t\t\t\tname, description, xsd);\n\n\t\t\t\tupdateResourcePermission(\n\t\t\t\t\tcompanyId,\n\t\t\t\t\t\"com.liferay.portlet.journal.model.JournalStructure\",\n\t\t\t\t\tDDMStructure.class.getName(), id_, ddmStructureId);\n\n\t\t\t\t_ddmStructureIds.put(\n\t\t\t\t\tgroupId + \"#\" + structureId, ddmStructureId);\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\n\t\t\t\t\"Unable to update journal structure with structure ID \" +\n\t\t\t\t\tstructureId);\n\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":7335,"modified_method":"protected long updateStructure(String structureId) throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select * from JournalStructure where structureId = ?\");\n\n\t\t\tps.setString(1, structureId);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\tif (rs.next()) {\n\t\t\t\tString uuid_ = rs.getString(\"uuid_\");\n\t\t\t\tlong id_ = rs.getLong(\"id_\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong userId = rs.getLong(\"userId\");\n\t\t\t\tString userName = rs.getString(\"userName\");\n\t\t\t\tTimestamp createDate = rs.getTimestamp(\"createDate\");\n\t\t\t\tTimestamp modifiedDate = rs.getTimestamp(\"modifiedDate\");\n\t\t\t\tString parentStructureId = rs.getString(\"parentStructureId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\t\t\t\tString description = rs.getString(\"description\");\n\t\t\t\tString xsd = rs.getString(\"xsd\");\n\n\t\t\t\tLong ddmStructureId = _ddmStructureIds.get(\n\t\t\t\t\tgroupId + \"#\" + structureId);\n\n\t\t\t\tif (ddmStructureId != null) {\n\t\t\t\t\treturn ddmStructureId;\n\t\t\t\t}\n\n\t\t\t\tddmStructureId = increment();\n\n\t\t\t\taddDDMStructure(\n\t\t\t\t\tuuid_, ddmStructureId, groupId, companyId, userId, userName,\n\t\t\t\t\tcreateDate, modifiedDate, parentStructureId, structureId,\n\t\t\t\t\tname, description, xsd);\n\n\t\t\t\tupdateResourcePermission(\n\t\t\t\t\tcompanyId,\n\t\t\t\t\t\"com.liferay.portlet.journal.model.JournalStructure\",\n\t\t\t\t\tDDMStructure.class.getName(), id_, ddmStructureId);\n\n\t\t\t\t_ddmStructureIds.put(\n\t\t\t\t\tgroupId + \"#\" + structureId, ddmStructureId);\n\t\t\t\t_ddmStructurePKs.put(id_, ddmStructureId);\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\n\t\t\t\t\"Unable to update journal structure with structure ID \" +\n\t\t\t\t\tstructureId);\n\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"66fead5b7cbc4bdd804dc9e1a9dae1751308e9a4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addDDMStructure(\n\t\t\tString uuid_, long ddmStructureId, long groupId, long companyId,\n\t\t\tlong userId, String userName, Timestamp createDate,\n\t\t\tTimestamp modifiedDate, String parentStructureId,\n\t\t\tString ddmStructureKey, String name, String description, String xsd)\n\t\tthrows Exception {\n\n\t\tlong parentDDMStructureId = 0;\n\n\t\tif (Validator.isNotNull(parentStructureId)) {\n\t\t\tparentDDMStructureId = updateStructure(parentStructureId);\n\t\t}\n\n\t\taddDDMStructure(\n\t\t\tuuid_, ddmStructureId, groupId, companyId, userId, userName,\n\t\t\tcreateDate, modifiedDate, parentDDMStructureId,\n\t\t\tPortalUtil.getClassNameId(JournalArticle.class.getName()),\n\t\t\tddmStructureKey, name, description, xsd,\n\t\t\tPropsValues.JOURNAL_ARTICLE_STORAGE_TYPE,\n\t\t\tDDMStructureConstants.TYPE_DEFAULT);\n\t}","id":7336,"modified_method":"protected void addDDMStructure(\n\t\t\tString uuid_, long ddmStructureId, long groupId, long companyId,\n\t\t\tlong userId, String userName, Timestamp createDate,\n\t\t\tTimestamp modifiedDate, String parentStructureId,\n\t\t\tString ddmStructureKey, String name, String description, String xsd)\n\t\tthrows Exception {\n\n\t\tlong parentDDMStructureId = 0;\n\n\t\tif (Validator.isNotNull(parentStructureId)) {\n\t\t\tparentDDMStructureId = updateStructure(parentStructureId);\n\t\t}\n\n\t\tLong insertedDdmStructureId =\n\t\t\t_ddmStructureIds.get(groupId + \"#\" + ddmStructureKey);\n\t\tif (insertedDdmStructureId == null) {\n\t\t\taddDDMStructure(\n\t\t\t\tuuid_, ddmStructureId, groupId, companyId, userId, userName,\n\t\t\t\tcreateDate, modifiedDate, parentDDMStructureId,\n\t\t\t\tPortalUtil.getClassNameId(JournalArticle.class.getName()),\n\t\t\t\tddmStructureKey, name, description, xsd,\n\t\t\t\tPropsValues.JOURNAL_ARTICLE_STORAGE_TYPE,\n\t\t\t\tDDMStructureConstants.TYPE_DEFAULT);\n\t\t}\n\t}","commit_id":"606b2ba2696729c603794e6c306565a4d0c8a374","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7337,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7338,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n    }","id":7339,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        //optional parameter graphtype\n        String prefabReportName = request.getParameter(\"graphtype\");\n        \n        Report report = getKscReportFactory().getWorkingReport(); \n        org.opennms.netmgt.config.kscReports.Graph sample_graph = getKscReportFactory().getWorkingGraph(); \n        if (sample_graph == null) {\n            throw new IllegalArgumentException(\"Invalid working graph argument -- null pointer. Possibly missing prefab report in snmp-graph.properties?\");\n        }\n\n        // Set the resourceId in the working graph in case it changed\n        sample_graph.setResourceId(resourceId);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(sample_graph);\n        PrefabGraph[] graph_options = getResourceService().findPrefabGraphsForResource(resource);\n\n        PrefabGraph display_graph = null;\n        if (graph_options.length > 0) {\n            if (prefabReportName == null) {\n                display_graph = graph_options[0];\n            } else {\n                display_graph = getPrefabGraphFromList(graph_options, sample_graph.getGraphtype());\n            }\n        }\n        \n        Calendar begin_time = Calendar.getInstance();\n        Calendar end_time = Calendar.getInstance();\n        KSC_PerformanceReportFactory.getBeginEndTime(sample_graph.getTimespan(), begin_time, end_time);\n        \n        KscResultSet resultSet = new KscResultSet(sample_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphEditDetails\");\n        \n        modelAndView.addObject(\"resultSet\", resultSet);\n        \n        modelAndView.addObject(\"prefabGraphs\", graph_options);\n        \n        modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(false));\n        modelAndView.addObject(\"timeSpan\", sample_graph.getTimespan());\n        \n        int graph_index = getKscReportFactory().getWorkingGraphIndex(); \n        int max_graphs = report.getGraphCount();\n        if (graph_index == -1) {\n            graph_index = max_graphs++;\n        }\n        modelAndView.addObject(\"graphIndex\", graph_index);\n        modelAndView.addObject(\"maxGraphIndex\", max_graphs);\n        \n        return modelAndView;\n    }","id":7340,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        //optional parameter graphtype\n        String prefabReportName = request.getParameter(\"graphtype\");\n        \n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        Report report = editor.getWorkingReport(); \n        org.opennms.netmgt.config.kscReports.Graph sample_graph = editor.getWorkingGraph(); \n        if (sample_graph == null) {\n            throw new IllegalArgumentException(\"Invalid working graph argument -- null pointer. Possibly missing prefab report in snmp-graph.properties?\");\n        }\n\n        // Set the resourceId in the working graph in case it changed\n        sample_graph.setResourceId(resourceId);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(sample_graph);\n        PrefabGraph[] graph_options = getResourceService().findPrefabGraphsForResource(resource);\n\n        PrefabGraph display_graph = null;\n        if (graph_options.length > 0) {\n            if (prefabReportName == null) {\n                display_graph = graph_options[0];\n            } else {\n                display_graph = getPrefabGraphFromList(graph_options, sample_graph.getGraphtype());\n            }\n        }\n        \n        Calendar begin_time = Calendar.getInstance();\n        Calendar end_time = Calendar.getInstance();\n        KSC_PerformanceReportFactory.getBeginEndTime(sample_graph.getTimespan(), begin_time, end_time);\n        \n        KscResultSet resultSet = new KscResultSet(sample_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphEditDetails\");\n        \n        modelAndView.addObject(\"resultSet\", resultSet);\n        \n        modelAndView.addObject(\"prefabGraphs\", graph_options);\n        \n        modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(false));\n        modelAndView.addObject(\"timeSpan\", sample_graph.getTimespan());\n        \n        int graph_index = editor.getWorkingGraphIndex(); \n        int max_graphs = report.getGraphCount();\n        if (graph_index == -1) {\n            graph_index = max_graphs++;\n        }\n        modelAndView.addObject(\"graphIndex\", graph_index);\n        modelAndView.addObject(\"maxGraphIndex\", max_graphs);\n        \n        return modelAndView;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        Report report = getKscReportFactory().getWorkingReport();\n        if (report == null) {\n            throw new IllegalStateException(\"There is no working report\");\n        }\n//        int report_index = getReportFactory().getWorkingReportIndex();      \n//        String number_graphs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) { \n            Graph current_graph = report.getGraph(i); \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(current_graph.getGraphtype());\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(current_graph.getTimespan(), begin_time, end_time); \n\n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customReport\");\n\n        modelAndView.addObject(\"showTimeSpan\", report.getShow_timespan_button());\n        modelAndView.addObject(\"showGraphType\", report.getShow_graphtype_button());\n        modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        return modelAndView;\n    }","id":7341,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        Report report = KscReportEditor.getFromSession(request.getSession(), true).getWorkingReport();\n        if (report == null) {\n            throw new IllegalStateException(\"There is no working report\");\n        }\n//        int report_index = getReportFactory().getWorkingReportIndex();      \n//        String number_graphs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) { \n            Graph current_graph = report.getGraph(i); \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(current_graph.getGraphtype());\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(current_graph.getTimespan(), begin_time, end_time); \n\n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customReport\");\n\n        modelAndView.addObject(\"showTimeSpan\", report.getShow_timespan_button());\n        modelAndView.addObject(\"showGraphType\", report.getShow_graphtype_button());\n        modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        return modelAndView;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7342,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_defaultGraphsPerLine == 0) {\n            throw new IllegalStateException(\"property defaultGraphsPerLine must be set\");\n        }\n        \n        m_executor = Executors.newSingleThreadExecutor();\n\n    }","id":7343,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_defaultGraphsPerLine != 0, \"property defaultGraphsPerLine must be set\");\n        \n        m_executor = Executors.newSingleThreadExecutor();\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = WebSecurityUtils.safeParseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n            promoteResourceAttributesIfNecessary(resource);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        if (report != null) {\n            modelAndView.addObject(\"report\", r_index);\n        }\n        if (domain != null) {\n            modelAndView.addObject(\"domain\", domain);\n        }\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n\n        if (report.getGraphs_per_line() > 0) {\n            modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        } else {\n            modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        }\n        \n        return modelAndView;\n    }","id":7344,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = WebSecurityUtils.safeParseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            report = m_kscReportFactory.getReportByIndex(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n            promoteResourceAttributesIfNecessary(resource);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        if (report != null) {\n            modelAndView.addObject(\"report\", r_index);\n        }\n        if (domain != null) {\n            modelAndView.addObject(\"domain\", domain);\n        }\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n\n        if (report.getGraphs_per_line() > 0) {\n            modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        } else {\n            modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        }\n        \n        return modelAndView;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setDefaultGraphsPerLine(int defaultGraphsPerLine) {\n        if (defaultGraphsPerLine <= 0) {\n            throw new IllegalArgumentException(\"property defaultGraphsPerLine must be greater than zero\");\n        }\n        m_defaultGraphsPerLine = defaultGraphsPerLine;\n    }","id":7345,"modified_method":"public void setDefaultGraphsPerLine(int defaultGraphsPerLine) {\n        Assert.isTrue(defaultGraphsPerLine > 0, \"property defaultGraphsPerLine must be greater than zero\");\n\n        m_defaultGraphsPerLine = defaultGraphsPerLine;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"resourceService property has not been set\");\n        }\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"kscReportFactory property has not been set\");\n        }\n        \n        initTimeSpans();\n    }","id":7346,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"resourceService property has not been set\");\n        Assert.state(m_kscReportFactory != null, \"kscReportFactory property has not been set\");\n        \n        initTimeSpans();\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<Integer, String> getReportList() {\n        ReportsList report_configuration = KSC_PerformanceReportFactory.getConfiguration();  \n        if (report_configuration == null) {\n            throw new DataAccessResourceFailureException(\"Couldn't retrieve KSC Report File configuration\");\n        }\n        \n        Report[] report_array = report_configuration.getReport();\n        \n        LinkedHashMap<Integer, String> reports = new LinkedHashMap<Integer, String>();\n        for (int i = 0; i < report_configuration.getReportCount(); i++ ) {\n            reports.put(i, report_array[i].getTitle());\n        }\n        \n        return reports;\n    }","id":7347,"modified_method":"public Map<Integer, String> getReportList() {\n        return m_kscReportFactory.getReportList();  \n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void initTimeSpans() {\n        for (String timeSpan : getKscReportFactory().timespan_options) {\n            s_timeSpans.put(timeSpan, timeSpan);\n        }\n        \n        s_timeSpansWithNone.put(\"none\", \"none\");\n        s_timeSpansWithNone.putAll(s_timeSpans);\n    }","id":7348,"modified_method":"private void initTimeSpans() {\n        for (String timeSpan : KSC_PerformanceReportFactory.TIMESPAN_OPTIONS) {\n            s_timeSpans.put(timeSpan, timeSpan);\n        }\n        \n        s_timeSpansWithNone.put(\"none\", \"none\");\n        s_timeSpansWithNone.putAll(s_timeSpans);\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (WebSecurityUtils.safeParseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","id":7349,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        // Get The Customizable (Working) Graph \n        Graph graph = editor.getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (WebSecurityUtils.safeParseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            editor.unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7350,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n    }","id":7351,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = 0; \n        String report_action = request.getParameter(\"report_action\");\n        \n        if (report_action == null) {\n            throw new MissingParameterException(\"report_action\");\n        }\n          \n        if ((report_action.equals(\"Customize\")) || (report_action.equals(\"View\")) || (report_action.equals(\"CreateFrom\")) || (report_action.equals(\"Delete\"))) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index == null) {\n                throw new MissingParameterException(\"report\");\n            } \n            report_index = WebSecurityUtils.safeParseInt(r_index);\n            if ((report_action.equals(\"Customize\")) || (report_action.equals(\"CreateFrom\"))) {  \n                // Go ahead and tell report factory to put the report config into the working report area\n                getKscReportFactory().loadWorkingReport(report_index);\n                if (report_action.equals(\"CreateFrom\")) {  // Need to set index to -1 for this case to have Customizer create new report index \n                   getKscReportFactory().setWorkingReportIndex(-1);\n                }\n            }\n            if (report_action.equals(\"Delete\")) {  // Take care of this case right now\n                getKscReportFactory().deleteReportAndSave(report_index); \n            }\n        } else { \n            if (report_action.equals(\"Create\")) {\n                report_index = -1;\n               // Go ahead and tell report factory to put the report config (a blank config) into the working report area\n               getKscReportFactory().loadWorkingReport(report_index);\n            }\n            else {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"View\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", report_index);\n            modelAndView.addObject(\"type\", \"custom\");\n            return modelAndView;\n        } else { \n            if ((report_action.equals(\"Customize\")) || (report_action.equals(\"Create\")) || (report_action.equals(\"CreateFrom\"))) {\n                return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n            } else {\n                return new ModelAndView(\"redirect:/KSC/index.htm\");\n            } \n        }\n    }","id":7352,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String action = request.getParameter(\"report_action\");\n        \n        if (action == null) {\n            throw new MissingParameterException(\"report_action\");\n        }\n\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), false);\n        \n        if (action.equals(\"Customize\")) {\n            editor.loadWorkingReport(getKscReportFactory(), getReportIndex(request));\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"CreateFrom\")) {\n            editor.loadWorkingReportDuplicate(getKscReportFactory(), getReportIndex(request));\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Delete\")) {\n            getKscReportFactory().deleteReportAndSave(getReportIndex(request)); \n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"Create\")) {\n            editor.loadNewWorkingReport();\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"View\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", getReportIndex(request));\n            modelAndView.addObject(\"type\", \"custom\");\n            return modelAndView;\n        } else {\n            throw new ServletException (\"Invalid Parameter contents for report_action: \" + action);\n        }\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = WebSecurityUtils.safeParseInt(g_index);\n        int graphs_per_line = WebSecurityUtils.safeParseInt(request.getParameter(\"graphs_per_line\"));\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n        \n        if (graphs_per_line > 0) {\n            report.setGraphs_per_line(graphs_per_line);\n        } else {\n            report.setGraphs_per_line(0);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = getKscReportFactory().getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","id":7353,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        // Get The Customizable Report \n        Report report = editor.getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = WebSecurityUtils.safeParseInt(g_index);\n        int graphs_per_line = WebSecurityUtils.safeParseInt(request.getParameter(\"graphs_per_line\"));\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n        \n        if (graphs_per_line > 0) {\n            report.setGraphs_per_line(graphs_per_line);\n        } else {\n            report.setGraphs_per_line(0);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            try {\n                editor.unloadWorkingReport(getKscReportFactory());  // first copy working report into report arrays\n                getKscReportFactory().saveCurrent();          // Now unmarshal array to file\n            } catch (Exception e) {\n                throw new ServletException(\"Couldn't save KSC_PerformanceReportFactory.\", e);\n            }\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                editor.loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = editor.getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7354,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        \n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7355,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = 0; \n        String override_timespan = null;\n        String override_graphtype = null;\n        String report_action = request.getParameter(\"action\");\n        String domain = request.getParameter(\"domain\");\n        if (report_action == null) {\n            throw new MissingParameterException (\"action\", new String[] {\"action\",\"report\",\"type\"});\n        }\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException (\"type\", new String[] {\"action\",\"report\",\"type\"});\n        }\n\n        if ((report_action.equals(\"Customize\")) || (report_action.equals(\"Update\"))) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index != null && !r_index.equals(\"null\")) {\n               report_index = WebSecurityUtils.safeParseInt(r_index); \n            } else if (domain == null) {\n                throw new MissingParameterException(\"report or domain\", new String[] {\"report or domain\",\"type\"});\n            }\n            override_timespan = request.getParameter(\"timespan\");\n            if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n                override_timespan = \"none\";\n            }\n            override_graphtype = request.getParameter(\"graphtype\");\n            if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n                override_graphtype = \"none\";\n            }\n            if (report_action.equals(\"Customize\")) {\n                if (report_type.equals(\"node\")) {\n                    Report report = m_kscReportService.buildNodeReport(report_index);\n                    getKscReportFactory().loadWorkingReport(report); \n                    getKscReportFactory().setWorkingReportIndex(-1); // Must set index to -1 to make customizer create a new report, not replace\n                } else if (report_type.equals(\"domain\")) {\n                    Report report = m_kscReportService.buildDomainReport(domain);\n                    getKscReportFactory().loadWorkingReport(report); \n                    getKscReportFactory().setWorkingReportIndex(-1); // Must set index to -1 to make customizer create a new report, not replace\n                } else { \n                    // Go ahead and tell report factory to put the indexed report config into the working report area\n                    getKscReportFactory().loadWorkingReport(report_index);\n                }\n                // Now inject any override characteristics into the working report model\n                Report working_report = getKscReportFactory().getWorkingReport();\n                for (int i=0; i<working_report.getGraphCount(); i++) {\n                    Graph working_graph = working_report.getGraph(i);\n                    if (!override_timespan.equals(\"none\")) { \n                        working_graph.setTimespan(override_timespan); \n                    }\n                    if (!override_graphtype.equals(\"none\")) { \n                        working_graph.setGraphtype(override_graphtype); \n                    }\n                }\n            }\n        } else { \n            if (!report_action.equals(\"Exit\")) {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", report_index);\n            modelAndView.addObject(\"domain\", domain);\n            modelAndView.addObject(\"type\", report_type);\n            \n            if (override_timespan != null) { \n                modelAndView.addObject(\"timespan\", override_timespan);\n            }\n            if (override_graphtype != null) { \n                modelAndView.addObject(\"graphtype\", override_graphtype);\n            }\n\n            return modelAndView;\n        } else if (report_action.equals(\"Customize\")) { \n            return new ModelAndView(\"redirect:/KSC/customReport.htm\", \"report\", report_index);\n        } else if (report_action.equals(\"Exit\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + report_action + \"' is not supported.  Must be one of: Update, Customize, or Exit\");\n        }\n    }","id":7356,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = -1; \n        String override_timespan = null;\n        String override_graphtype = null;\n        String report_action = request.getParameter(\"action\");\n        String domain = request.getParameter(\"domain\");\n        if (report_action == null) {\n            throw new MissingParameterException (\"action\", new String[] {\"action\", \"report\", \"type\"});\n        }\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException (\"type\", new String[] {\"action\", \"report\", \"type\"});\n        }\n\n        if (report_action.equals(\"Customize\") || report_action.equals(\"Update\")) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index != null && !r_index.equals(\"null\")) {\n               report_index = WebSecurityUtils.safeParseInt(r_index); \n            } else if (domain == null) {\n                throw new MissingParameterException(\"report or domain\", new String[] {\"report or domain\" , \"type\"});\n            }\n            override_timespan = request.getParameter(\"timespan\");\n            if ((override_timespan == null) || override_timespan.equals(\"null\")) {\n                override_timespan = \"none\";\n            }\n            override_graphtype = request.getParameter(\"graphtype\");\n            if (override_graphtype == null || override_graphtype.equals(\"null\")) {\n                override_graphtype = \"none\";\n            }\n            if (report_action.equals(\"Customize\")) {\n                KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), false);\n                \n                if (report_type.equals(\"node\")) {\n                    editor.loadWorkingReport(m_kscReportService.buildNodeReport(report_index)); \n                } else if (report_type.equals(\"domain\")) {\n                    editor.loadWorkingReport(m_kscReportService.buildDomainReport(domain)); \n                } else { \n                    editor.loadWorkingReport(getKscReportFactory(), report_index);\n                }\n                \n                // Now inject any override characteristics into the working report model\n                Report working_report = editor.getWorkingReport();\n                for (int i=0; i<working_report.getGraphCount(); i++) {\n                    Graph working_graph = working_report.getGraph(i);\n                    if (!override_timespan.equals(\"none\")) { \n                        working_graph.setTimespan(override_timespan); \n                    }\n                    if (!override_graphtype.equals(\"none\")) { \n                        working_graph.setGraphtype(override_graphtype); \n                    }\n                }\n            }\n        } else { \n            if (!report_action.equals(\"Exit\")) {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"type\", report_type);\n\n            if (report_index >= 0) {\n                modelAndView.addObject(\"report\", report_index);\n            }\n            if (domain != null) {\n                modelAndView.addObject(\"domain\", domain);\n            }\n            if (override_timespan != null) { \n                modelAndView.addObject(\"timespan\", override_timespan);\n            }\n            if (override_graphtype != null) { \n                modelAndView.addObject(\"graphtype\", override_graphtype);\n            }\n\n            return modelAndView;\n        } else if (report_action.equals(\"Customize\")) { \n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (report_action.equals(\"Exit\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + report_action + \"' is not supported.  Must be one of: Update, Customize, or Exit\");\n        }\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7357,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7358,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static synchronized void getBeginEndTime(String interval, Calendar begin_time, Calendar end_time) throws IllegalArgumentException\n    /**\n     * This method requires begin time and end time to be set to the current\n     * time prior to call. The start and stop times are relative to this time.\n     * Init values as follows: begin_time = Calendar.getInstance(); end_time =\n     * Calendar.getInstance();\n     */\n    {\n        if (interval.equals(\"1_hour\")) {\n            begin_time.add(Calendar.HOUR, -1);\n        } else if (interval.equals(\"2_hour\")) {\n            begin_time.add(Calendar.HOUR, -2);\n        } else if (interval.equals(\"4_hour\")) {\n            begin_time.add(Calendar.HOUR, -4);\n        } else if (interval.equals(\"8_hour\")) {\n            begin_time.add(Calendar.HOUR, -8);\n        } else if (interval.equals(\"1_day\")) {\n            begin_time.add(Calendar.DATE, -1);\n        } else if (interval.equals(\"2_day\")) {\n            begin_time.add(Calendar.DATE, -2);\n        } else if (interval.equals(\"7_day\")) {\n            begin_time.add(Calendar.DATE, -7);\n        } else if (interval.equals(\"1_month\")) {\n            begin_time.add(Calendar.DATE, -30);\n        } else if (interval.equals(\"6_month\")) {\n            begin_time.add(Calendar.DATE, -183);\n        } else if (interval.equals(\"1_year\")) {\n            begin_time.add(Calendar.DATE, -365);\n        } else {\n            // From current time, lets zero out the small components\n            begin_time.set(Calendar.HOUR_OF_DAY, 0);\n            begin_time.set(Calendar.MINUTE, 0);\n            begin_time.set(Calendar.SECOND, 0);\n            end_time.set(Calendar.HOUR_OF_DAY, 0);\n            end_time.set(Calendar.MINUTE, 0);\n            end_time.set(Calendar.SECOND, 0);\n\n            if (interval.equals(\"Today\")) {\n                end_time.add(Calendar.DATE, 1);\n            } else if (interval.equals(\"Yesterday\")) {\n                begin_time.add(Calendar.DATE, -1);\n            } else if (interval.equals(\"This Week\") || interval.equals(\"Last Week\")) {\n                begin_time.set(Calendar.DAY_OF_WEEK, 1);\n                end_time.set(Calendar.DAY_OF_WEEK, 7);\n                end_time.set(Calendar.HOUR_OF_DAY, 23);\n                end_time.set(Calendar.MINUTE, 59);\n                if (interval.equals(\"Last Week\")) {\n                    begin_time.add(Calendar.DATE, -7);\n                    end_time.add(Calendar.DATE, -7);\n                }\n            } else if (interval.equals(\"This Month\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.MONTH, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"Last Month\")) {\n                begin_time.add(Calendar.MONTH, -1);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"This Quarter\") || interval.equals(\"Last Quarter\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n\n                switch (begin_time.get(Calendar.MONTH)) {\n                case 0:\n                case 1:\n                case 2:\n                    begin_time.set(Calendar.MONTH, 0);\n                    end_time.set(Calendar.MONTH, 3);\n                    break;\n                case 3:\n                case 4:\n                case 5:\n                    begin_time.set(Calendar.MONTH, 3);\n                    end_time.set(Calendar.MONTH, 6);\n                    break;\n                case 6:\n                case 7:\n                case 8:\n                    begin_time.set(Calendar.MONTH, 6);\n                    end_time.set(Calendar.MONTH, 9);\n                    break;\n                case 9:\n                case 10:\n                case 11:\n                    begin_time.set(Calendar.MONTH, 9);\n                    end_time.set(Calendar.MONTH, 0);\n                    end_time.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid Calendar Month \" + begin_time.get(Calendar.MONTH));\n                }\n                if (interval.equals(\"Last Quarter\")) {\n                    begin_time.add(Calendar.MONTH, -3);\n                    end_time.add(Calendar.MONTH, -3);\n                }\n            } else if (interval.equals(\"This Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.YEAR, 1);\n            } else if (interval.equals(\"Last Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                begin_time.add(Calendar.YEAR, -1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n            } else {\n                throw new IllegalArgumentException(\"Unknown graph timespan: \" + interval);\n            }\n        }\n    }","id":7359,"modified_method":"/**\n     * This method requires begin time and end time to be set to the current\n     * time prior to call. The start and stop times are relative to this time.\n     * Init values as follows: begin_time = Calendar.getInstance(); end_time =\n     * Calendar.getInstance();\n     */\n    public static synchronized void getBeginEndTime(String interval, Calendar begin_time, Calendar end_time) throws IllegalArgumentException {\n        if (interval.equals(\"1_hour\")) {\n            begin_time.add(Calendar.HOUR, -1);\n        } else if (interval.equals(\"2_hour\")) {\n            begin_time.add(Calendar.HOUR, -2);\n        } else if (interval.equals(\"4_hour\")) {\n            begin_time.add(Calendar.HOUR, -4);\n        } else if (interval.equals(\"8_hour\")) {\n            begin_time.add(Calendar.HOUR, -8);\n        } else if (interval.equals(\"1_day\")) {\n            begin_time.add(Calendar.DATE, -1);\n        } else if (interval.equals(\"2_day\")) {\n            begin_time.add(Calendar.DATE, -2);\n        } else if (interval.equals(\"7_day\")) {\n            begin_time.add(Calendar.DATE, -7);\n        } else if (interval.equals(\"1_month\")) {\n            begin_time.add(Calendar.DATE, -30);\n        } else if (interval.equals(\"6_month\")) {\n            begin_time.add(Calendar.DATE, -183);\n        } else if (interval.equals(\"1_year\")) {\n            begin_time.add(Calendar.DATE, -365);\n        } else {\n            // From current time, lets zero out the small components\n            begin_time.set(Calendar.HOUR_OF_DAY, 0);\n            begin_time.set(Calendar.MINUTE, 0);\n            begin_time.set(Calendar.SECOND, 0);\n            end_time.set(Calendar.HOUR_OF_DAY, 0);\n            end_time.set(Calendar.MINUTE, 0);\n            end_time.set(Calendar.SECOND, 0);\n\n            if (interval.equals(\"Today\")) {\n                end_time.add(Calendar.DATE, 1);\n            } else if (interval.equals(\"Yesterday\")) {\n                begin_time.add(Calendar.DATE, -1);\n            } else if (interval.equals(\"This Week\") || interval.equals(\"Last Week\")) {\n                begin_time.set(Calendar.DAY_OF_WEEK, 1);\n                end_time.set(Calendar.DAY_OF_WEEK, 7);\n                end_time.set(Calendar.HOUR_OF_DAY, 23);\n                end_time.set(Calendar.MINUTE, 59);\n                if (interval.equals(\"Last Week\")) {\n                    begin_time.add(Calendar.DATE, -7);\n                    end_time.add(Calendar.DATE, -7);\n                }\n            } else if (interval.equals(\"This Month\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.MONTH, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"Last Month\")) {\n                begin_time.add(Calendar.MONTH, -1);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"This Quarter\") || interval.equals(\"Last Quarter\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n\n                switch (begin_time.get(Calendar.MONTH)) {\n                case 0:\n                case 1:\n                case 2:\n                    begin_time.set(Calendar.MONTH, 0);\n                    end_time.set(Calendar.MONTH, 3);\n                    break;\n                case 3:\n                case 4:\n                case 5:\n                    begin_time.set(Calendar.MONTH, 3);\n                    end_time.set(Calendar.MONTH, 6);\n                    break;\n                case 6:\n                case 7:\n                case 8:\n                    begin_time.set(Calendar.MONTH, 6);\n                    end_time.set(Calendar.MONTH, 9);\n                    break;\n                case 9:\n                case 10:\n                case 11:\n                    begin_time.set(Calendar.MONTH, 9);\n                    end_time.set(Calendar.MONTH, 0);\n                    end_time.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid Calendar Month \" + begin_time.get(Calendar.MONTH));\n                }\n                if (interval.equals(\"Last Quarter\")) {\n                    begin_time.add(Calendar.MONTH, -3);\n                    end_time.add(Calendar.MONTH, -3);\n                }\n            } else if (interval.equals(\"This Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.YEAR, 1);\n            } else if (interval.equals(\"Last Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                begin_time.add(Calendar.YEAR, -1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n            } else {\n                throw new IllegalArgumentException(\"Unknown graph timespan: \" + interval);\n            }\n        }\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Deletes the indexed report and updates file configuration */\n    public void deleteReportAndSave(int index) throws ArrayIndexOutOfBoundsException, IOException, FileNotFoundException, MarshalException, ValidationException {\n        int total_reports = m_config.getReportCount();\n        if ((index < 0) || (index >= total_reports)) {\n            // Out of range. Throw range error.\n            throw new ArrayIndexOutOfBoundsException(\"Reports List index to be deleted is out of bounds.\");\n        } else {\n            Report removee = m_config.getReport(index);\n            m_config.removeReport(removee);\n            saveCurrent();\n            reload(); // ensure consistent state with file\n        }\n    }","id":7360,"modified_method":"/** Deletes the indexed report and updates file configuration */\n    public void deleteReportAndSave(int index) throws ArrayIndexOutOfBoundsException, IOException, FileNotFoundException, MarshalException, ValidationException {\n        Report report = getReportByIndex(index);\n        if (report == null) {\n            throw new ArrayIndexOutOfBoundsException(\"Reports List index to be deleted is out of bounds: \" + index);\n        }\n\n        m_config.removeReport(report);\n        saveCurrent();\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Init routine. Must be called before calling getInstance() to instantiate * */\n    public static synchronized void init() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (instance == null) {\n            instance = new KSC_PerformanceReportFactory();\n            KSC_PerformanceReportFactory.reload();\n            KSC_PerformanceReportFactory.initialized = true;\n        }\n    }","id":7361,"modified_method":"/** Init routine. Must be called before calling getInstance() to instantiate * */\n    public static synchronized void init() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (isInitialized()) {\n            return;\n        }\n        \n        KSC_PerformanceReportFactory newInstance = new KSC_PerformanceReportFactory();\n        newInstance.reload();\n        \n        s_instance = newInstance;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sets the working report index */\n    public void setWorkingReportIndex(int v_index) {\n        working_index = v_index;\n    }","id":7362,"modified_method":"public Report getReportByIndex(int index) {\n        return m_reportList.get(index);\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Saves the KSC_PerformanceReport.xml data */\n    public synchronized void saveCurrent() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (instance == null) {\n            throw new IllegalStateException(\"KSC_PerformanceReportFactory.init() must be called before KSC_PerformanceReportFactory.saveCurrent().\");\n        }\n        sortByTitle();\n        // Marshall to a string first, then to file. This way the original\n        // config isn't lost if teh xml from the marshall is hosed.\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(m_config, stringWriter);\n        if (stringWriter.toString() != null) {\n            FileWriter fileWriter = new FileWriter(KSC_PerformanceReportFile);\n            fileWriter.write(stringWriter.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        reload();\n    }","id":7363,"modified_method":"/**\n     * Saves the KSC_PerformanceReport.xml data.\n     * */\n    public synchronized void saveCurrent() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        assertInitialized();\n\n        sortByTitle();\n        \n        /*\n         * Marshall to a string first, then to file. This way the original\n         * config is not lost if the XML from the marshall is hosed.\n         */\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(m_config, stringWriter);\n        if (stringWriter.toString() != null) {\n            FileWriter fileWriter = new FileWriter(s_configFile);\n            fileWriter.write(stringWriter.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        \n        reload();\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Loads the source report into the working report object */\n    public void loadWorkingReport(Report source_report) throws MarshalException, ValidationException {\n        // Create a new and unique instance of the report for screwing around\n        // with\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(source_report, stringWriter);\n        StringReader stringReader = new StringReader(stringWriter.toString());\n        working_report = (Report) Unmarshaller.unmarshal(Report.class, stringReader);\n    }","id":7364,"modified_method":"void addReport(Report report) {\n        m_config.addReport(report);\n        setIdsOnAllReports();\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sorts the Reports List by their title. Simple bubble sort. */\n    public void sortByTitle() {\n        Report[] report_array = m_config.getReport();\n        for (int j = 0; j < report_array.length; j++) {\n            for (int i = j + 1; i < report_array.length; i++) {\n                if (report_array[i].getTitle().compareTo(report_array[j].getTitle()) < 0) {\n                    Report temp_report = report_array[j];\n                    report_array[j] = report_array[i];\n                    report_array[i] = temp_report;\n                }\n            }\n        }\n        m_config.setReport(report_array); // write back the sorted list\n    }","id":7365,"modified_method":"/**\n     * Sorts the Reports List by their title.\n     */\n    public void sortByTitle() {\n        Arrays.sort(m_config.getReport(), new Comparator<Report>() {\n            public int compare(Report o1, Report o2) {\n                return o1.getTitle().compareTo(o2.getTitle());\n            }\n        });\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Create a new blank report & initialize it */\n    public static Report getNewReport() {\n        Report new_report = new Report();\n        new_report.setTitle(\"New Report Title\");\n        new_report.setShow_graphtype_button(false);\n        new_report.setShow_timespan_button(false);\n        return new_report;\n    }","id":7366,"modified_method":"public Map<Integer, String> getReportList() {\n        LinkedHashMap<Integer, String> reports = new LinkedHashMap<Integer, String>(m_config.getReportCount());\n\n        for (Report report : m_config.getReportCollection()) {\n            reports.put(report.getId(), report.getTitle());\n        }\n        \n        return reports;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * KSC_PerformanceReportFactory\n     * \n     * @return the single KSC_PerformanceReportFactory instance\n     */\n    public static synchronized KSC_PerformanceReportFactory getInstance() throws IllegalStateException {\n        if (instance == null) {\n            throw new IllegalStateException(\"KSC_PerformanceReportFactory.init() must be called before KSC_PerformanceReportFactory.getInstance().\");\n        }\n\n        return instance;\n    }","id":7367,"modified_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * KSC_PerformanceReportFactory\n     * \n     * @return the single KSC_PerformanceReportFactory instance\n     */\n    public static synchronized KSC_PerformanceReportFactory getInstance() throws IllegalStateException {\n        assertInitialized();\n\n        return s_instance;\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Parses the KSC_PerformanceReport.xml via the Castor classes */\n    public static synchronized void reload() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        KSC_PerformanceReportFile = ConfigFileConstants.getFile(ConfigFileConstants.KSC_REPORT_FILE_NAME);\n\n        InputStream configIn = new FileInputStream(KSC_PerformanceReportFile);\n        m_lastModified = KSC_PerformanceReportFile.lastModified();\n\n        m_config = (ReportsList) Unmarshaller.unmarshal(ReportsList.class, new InputStreamReader(configIn));\n    }","id":7368,"modified_method":"/**\n     * Parses the KSC_PerformanceReport.xml via the Castor classes.\n     * */\n    public synchronized void reload() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        s_configFile = ConfigFileConstants.getFile(ConfigFileConstants.KSC_REPORT_FILE_NAME);\n\n        FileReader rdr = new FileReader(s_configFile);\n        try {\n            m_config = CastorUtils.unmarshal(ReportsList.class, rdr);\n        } finally {\n            IOUtils.closeQuietly(rdr);\n        }\n        \n        setIdsOnAllReports();\n        \n        m_reportList = createReportList();\n    }","commit_id":"f71066d5d32523ac45cf4600b03282594b5cbfc9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7369,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7370,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n    }","id":7371,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        //optional parameter graphtype\n        String prefabReportName = request.getParameter(\"graphtype\");\n        \n        Report report = getKscReportFactory().getWorkingReport(); \n        org.opennms.netmgt.config.kscReports.Graph sample_graph = getKscReportFactory().getWorkingGraph(); \n        if (sample_graph == null) {\n            throw new IllegalArgumentException(\"Invalid working graph argument -- null pointer. Possibly missing prefab report in snmp-graph.properties?\");\n        }\n\n        // Set the resourceId in the working graph in case it changed\n        sample_graph.setResourceId(resourceId);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(sample_graph);\n        PrefabGraph[] graph_options = getResourceService().findPrefabGraphsForResource(resource);\n\n        PrefabGraph display_graph = null;\n        if (graph_options.length > 0) {\n            if (prefabReportName == null) {\n                display_graph = graph_options[0];\n            } else {\n                display_graph = getPrefabGraphFromList(graph_options, sample_graph.getGraphtype());\n            }\n        }\n        \n        Calendar begin_time = Calendar.getInstance();\n        Calendar end_time = Calendar.getInstance();\n        KSC_PerformanceReportFactory.getBeginEndTime(sample_graph.getTimespan(), begin_time, end_time);\n        \n        KscResultSet resultSet = new KscResultSet(sample_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphEditDetails\");\n        \n        modelAndView.addObject(\"resultSet\", resultSet);\n        \n        modelAndView.addObject(\"prefabGraphs\", graph_options);\n        \n        modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(false));\n        modelAndView.addObject(\"timeSpan\", sample_graph.getTimespan());\n        \n        int graph_index = getKscReportFactory().getWorkingGraphIndex(); \n        int max_graphs = report.getGraphCount();\n        if (graph_index == -1) {\n            graph_index = max_graphs++;\n        }\n        modelAndView.addObject(\"graphIndex\", graph_index);\n        modelAndView.addObject(\"maxGraphIndex\", max_graphs);\n        \n        return modelAndView;\n    }","id":7372,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        //optional parameter graphtype\n        String prefabReportName = request.getParameter(\"graphtype\");\n        \n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        Report report = editor.getWorkingReport(); \n        org.opennms.netmgt.config.kscReports.Graph sample_graph = editor.getWorkingGraph(); \n        if (sample_graph == null) {\n            throw new IllegalArgumentException(\"Invalid working graph argument -- null pointer. Possibly missing prefab report in snmp-graph.properties?\");\n        }\n\n        // Set the resourceId in the working graph in case it changed\n        sample_graph.setResourceId(resourceId);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(sample_graph);\n        PrefabGraph[] graph_options = getResourceService().findPrefabGraphsForResource(resource);\n\n        PrefabGraph display_graph = null;\n        if (graph_options.length > 0) {\n            if (prefabReportName == null) {\n                display_graph = graph_options[0];\n            } else {\n                display_graph = getPrefabGraphFromList(graph_options, sample_graph.getGraphtype());\n            }\n        }\n        \n        Calendar begin_time = Calendar.getInstance();\n        Calendar end_time = Calendar.getInstance();\n        KSC_PerformanceReportFactory.getBeginEndTime(sample_graph.getTimespan(), begin_time, end_time);\n        \n        KscResultSet resultSet = new KscResultSet(sample_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphEditDetails\");\n        \n        modelAndView.addObject(\"resultSet\", resultSet);\n        \n        modelAndView.addObject(\"prefabGraphs\", graph_options);\n        \n        modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(false));\n        modelAndView.addObject(\"timeSpan\", sample_graph.getTimespan());\n        \n        int graph_index = editor.getWorkingGraphIndex(); \n        int max_graphs = report.getGraphCount();\n        if (graph_index == -1) {\n            graph_index = max_graphs++;\n        }\n        modelAndView.addObject(\"graphIndex\", graph_index);\n        modelAndView.addObject(\"maxGraphIndex\", max_graphs);\n        \n        return modelAndView;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7373,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        Report report = getKscReportFactory().getWorkingReport();\n        if (report == null) {\n            throw new IllegalStateException(\"There is no working report\");\n        }\n//        int report_index = getReportFactory().getWorkingReportIndex();      \n//        String number_graphs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) { \n            Graph current_graph = report.getGraph(i); \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(current_graph.getGraphtype());\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(current_graph.getTimespan(), begin_time, end_time); \n\n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customReport\");\n\n        modelAndView.addObject(\"showTimeSpan\", report.getShow_timespan_button());\n        modelAndView.addObject(\"showGraphType\", report.getShow_graphtype_button());\n        modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        return modelAndView;\n    }","id":7374,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        Report report = KscReportEditor.getFromSession(request.getSession(), true).getWorkingReport();\n        if (report == null) {\n            throw new IllegalStateException(\"There is no working report\");\n        }\n//        int report_index = getReportFactory().getWorkingReportIndex();      \n//        String number_graphs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) { \n            Graph current_graph = report.getGraph(i); \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(current_graph.getGraphtype());\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(current_graph.getTimespan(), begin_time, end_time); \n\n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customReport\");\n\n        modelAndView.addObject(\"showTimeSpan\", report.getShow_timespan_button());\n        modelAndView.addObject(\"showGraphType\", report.getShow_graphtype_button());\n        modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        return modelAndView;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setDefaultGraphsPerLine(int defaultGraphsPerLine) {\n        if (defaultGraphsPerLine <= 0) {\n            throw new IllegalArgumentException(\"property defaultGraphsPerLine must be greater than zero\");\n        }\n        m_defaultGraphsPerLine = defaultGraphsPerLine;\n    }","id":7375,"modified_method":"public void setDefaultGraphsPerLine(int defaultGraphsPerLine) {\n        Assert.isTrue(defaultGraphsPerLine > 0, \"property defaultGraphsPerLine must be greater than zero\");\n\n        m_defaultGraphsPerLine = defaultGraphsPerLine;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = WebSecurityUtils.safeParseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n            promoteResourceAttributesIfNecessary(resource);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        if (report != null) {\n            modelAndView.addObject(\"report\", r_index);\n        }\n        if (domain != null) {\n            modelAndView.addObject(\"domain\", domain);\n        }\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n\n        if (report.getGraphs_per_line() > 0) {\n            modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        } else {\n            modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        }\n        \n        return modelAndView;\n    }","id":7376,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = WebSecurityUtils.safeParseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            report = m_kscReportFactory.getReportByIndex(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n            promoteResourceAttributesIfNecessary(resource);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        if (report != null) {\n            modelAndView.addObject(\"report\", r_index);\n        }\n        if (domain != null) {\n            modelAndView.addObject(\"domain\", domain);\n        }\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n\n        if (report.getGraphs_per_line() > 0) {\n            modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        } else {\n            modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        }\n        \n        return modelAndView;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_defaultGraphsPerLine == 0) {\n            throw new IllegalStateException(\"property defaultGraphsPerLine must be set\");\n        }\n        \n        m_executor = Executors.newSingleThreadExecutor();\n\n    }","id":7377,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_defaultGraphsPerLine != 0, \"property defaultGraphsPerLine must be set\");\n        \n        m_executor = Executors.newSingleThreadExecutor();\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"resourceService property has not been set\");\n        }\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"kscReportFactory property has not been set\");\n        }\n        \n        initTimeSpans();\n    }","id":7378,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"resourceService property has not been set\");\n        Assert.state(m_kscReportFactory != null, \"kscReportFactory property has not been set\");\n        \n        initTimeSpans();\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<Integer, String> getReportList() {\n        ReportsList report_configuration = KSC_PerformanceReportFactory.getConfiguration();  \n        if (report_configuration == null) {\n            throw new DataAccessResourceFailureException(\"Couldn't retrieve KSC Report File configuration\");\n        }\n        \n        Report[] report_array = report_configuration.getReport();\n        \n        LinkedHashMap<Integer, String> reports = new LinkedHashMap<Integer, String>();\n        for (int i = 0; i < report_configuration.getReportCount(); i++ ) {\n            reports.put(i, report_array[i].getTitle());\n        }\n        \n        return reports;\n    }","id":7379,"modified_method":"public Map<Integer, String> getReportList() {\n        return m_kscReportFactory.getReportList();  \n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void initTimeSpans() {\n        for (String timeSpan : getKscReportFactory().timespan_options) {\n            s_timeSpans.put(timeSpan, timeSpan);\n        }\n        \n        s_timeSpansWithNone.put(\"none\", \"none\");\n        s_timeSpansWithNone.putAll(s_timeSpans);\n    }","id":7380,"modified_method":"private void initTimeSpans() {\n        for (String timeSpan : KSC_PerformanceReportFactory.TIMESPAN_OPTIONS) {\n            s_timeSpans.put(timeSpan, timeSpan);\n        }\n        \n        s_timeSpansWithNone.put(\"none\", \"none\");\n        s_timeSpansWithNone.putAll(s_timeSpans);\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7381,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (WebSecurityUtils.safeParseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","id":7382,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        // Get The Customizable (Working) Graph \n        Graph graph = editor.getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (WebSecurityUtils.safeParseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            editor.unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = 0; \n        String report_action = request.getParameter(\"report_action\");\n        \n        if (report_action == null) {\n            throw new MissingParameterException(\"report_action\");\n        }\n          \n        if ((report_action.equals(\"Customize\")) || (report_action.equals(\"View\")) || (report_action.equals(\"CreateFrom\")) || (report_action.equals(\"Delete\"))) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index == null) {\n                throw new MissingParameterException(\"report\");\n            } \n            report_index = WebSecurityUtils.safeParseInt(r_index);\n            if ((report_action.equals(\"Customize\")) || (report_action.equals(\"CreateFrom\"))) {  \n                // Go ahead and tell report factory to put the report config into the working report area\n                getKscReportFactory().loadWorkingReport(report_index);\n                if (report_action.equals(\"CreateFrom\")) {  // Need to set index to -1 for this case to have Customizer create new report index \n                   getKscReportFactory().setWorkingReportIndex(-1);\n                }\n            }\n            if (report_action.equals(\"Delete\")) {  // Take care of this case right now\n                getKscReportFactory().deleteReportAndSave(report_index); \n            }\n        } else { \n            if (report_action.equals(\"Create\")) {\n                report_index = -1;\n               // Go ahead and tell report factory to put the report config (a blank config) into the working report area\n               getKscReportFactory().loadWorkingReport(report_index);\n            }\n            else {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"View\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", report_index);\n            modelAndView.addObject(\"type\", \"custom\");\n            return modelAndView;\n        } else { \n            if ((report_action.equals(\"Customize\")) || (report_action.equals(\"Create\")) || (report_action.equals(\"CreateFrom\"))) {\n                return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n            } else {\n                return new ModelAndView(\"redirect:/KSC/index.htm\");\n            } \n        }\n    }","id":7383,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String action = request.getParameter(\"report_action\");\n        \n        if (action == null) {\n            throw new MissingParameterException(\"report_action\");\n        }\n\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), false);\n        \n        if (action.equals(\"Customize\")) {\n            editor.loadWorkingReport(getKscReportFactory(), getReportIndex(request));\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"CreateFrom\")) {\n            editor.loadWorkingReportDuplicate(getKscReportFactory(), getReportIndex(request));\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Delete\")) {\n            getKscReportFactory().deleteReportAndSave(getReportIndex(request)); \n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"Create\")) {\n            editor.loadNewWorkingReport();\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"View\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", getReportIndex(request));\n            modelAndView.addObject(\"type\", \"custom\");\n            return modelAndView;\n        } else {\n            throw new ServletException (\"Invalid Parameter contents for report_action: \" + action);\n        }\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n    }","id":7384,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = WebSecurityUtils.safeParseInt(g_index);\n        int graphs_per_line = WebSecurityUtils.safeParseInt(request.getParameter(\"graphs_per_line\"));\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n        \n        if (graphs_per_line > 0) {\n            report.setGraphs_per_line(graphs_per_line);\n        } else {\n            report.setGraphs_per_line(0);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = getKscReportFactory().getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","id":7385,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        // Get The Customizable Report \n        Report report = editor.getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = WebSecurityUtils.safeParseInt(g_index);\n        int graphs_per_line = WebSecurityUtils.safeParseInt(request.getParameter(\"graphs_per_line\"));\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n        \n        if (graphs_per_line > 0) {\n            report.setGraphs_per_line(graphs_per_line);\n        } else {\n            report.setGraphs_per_line(0);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            try {\n                editor.unloadWorkingReport(getKscReportFactory());  // first copy working report into report arrays\n                getKscReportFactory().saveCurrent();          // Now unmarshal array to file\n            } catch (Exception e) {\n                throw new ServletException(\"Couldn't save KSC_PerformanceReportFactory.\", e);\n            }\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                editor.loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = editor.getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7386,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        \n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7387,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = 0; \n        String override_timespan = null;\n        String override_graphtype = null;\n        String report_action = request.getParameter(\"action\");\n        String domain = request.getParameter(\"domain\");\n        if (report_action == null) {\n            throw new MissingParameterException (\"action\", new String[] {\"action\",\"report\",\"type\"});\n        }\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException (\"type\", new String[] {\"action\",\"report\",\"type\"});\n        }\n\n        if ((report_action.equals(\"Customize\")) || (report_action.equals(\"Update\"))) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index != null && !r_index.equals(\"null\")) {\n               report_index = WebSecurityUtils.safeParseInt(r_index); \n            } else if (domain == null) {\n                throw new MissingParameterException(\"report or domain\", new String[] {\"report or domain\",\"type\"});\n            }\n            override_timespan = request.getParameter(\"timespan\");\n            if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n                override_timespan = \"none\";\n            }\n            override_graphtype = request.getParameter(\"graphtype\");\n            if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n                override_graphtype = \"none\";\n            }\n            if (report_action.equals(\"Customize\")) {\n                if (report_type.equals(\"node\")) {\n                    Report report = m_kscReportService.buildNodeReport(report_index);\n                    getKscReportFactory().loadWorkingReport(report); \n                    getKscReportFactory().setWorkingReportIndex(-1); // Must set index to -1 to make customizer create a new report, not replace\n                } else if (report_type.equals(\"domain\")) {\n                    Report report = m_kscReportService.buildDomainReport(domain);\n                    getKscReportFactory().loadWorkingReport(report); \n                    getKscReportFactory().setWorkingReportIndex(-1); // Must set index to -1 to make customizer create a new report, not replace\n                } else { \n                    // Go ahead and tell report factory to put the indexed report config into the working report area\n                    getKscReportFactory().loadWorkingReport(report_index);\n                }\n                // Now inject any override characteristics into the working report model\n                Report working_report = getKscReportFactory().getWorkingReport();\n                for (int i=0; i<working_report.getGraphCount(); i++) {\n                    Graph working_graph = working_report.getGraph(i);\n                    if (!override_timespan.equals(\"none\")) { \n                        working_graph.setTimespan(override_timespan); \n                    }\n                    if (!override_graphtype.equals(\"none\")) { \n                        working_graph.setGraphtype(override_graphtype); \n                    }\n                }\n            }\n        } else { \n            if (!report_action.equals(\"Exit\")) {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", report_index);\n            modelAndView.addObject(\"domain\", domain);\n            modelAndView.addObject(\"type\", report_type);\n            \n            if (override_timespan != null) { \n                modelAndView.addObject(\"timespan\", override_timespan);\n            }\n            if (override_graphtype != null) { \n                modelAndView.addObject(\"graphtype\", override_graphtype);\n            }\n\n            return modelAndView;\n        } else if (report_action.equals(\"Customize\")) { \n            return new ModelAndView(\"redirect:/KSC/customReport.htm\", \"report\", report_index);\n        } else if (report_action.equals(\"Exit\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + report_action + \"' is not supported.  Must be one of: Update, Customize, or Exit\");\n        }\n    }","id":7388,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = -1; \n        String override_timespan = null;\n        String override_graphtype = null;\n        String report_action = request.getParameter(\"action\");\n        String domain = request.getParameter(\"domain\");\n        if (report_action == null) {\n            throw new MissingParameterException (\"action\", new String[] {\"action\", \"report\", \"type\"});\n        }\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException (\"type\", new String[] {\"action\", \"report\", \"type\"});\n        }\n\n        if (report_action.equals(\"Customize\") || report_action.equals(\"Update\")) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index != null && !r_index.equals(\"null\")) {\n               report_index = WebSecurityUtils.safeParseInt(r_index); \n            } else if (domain == null) {\n                throw new MissingParameterException(\"report or domain\", new String[] {\"report or domain\" , \"type\"});\n            }\n            override_timespan = request.getParameter(\"timespan\");\n            if ((override_timespan == null) || override_timespan.equals(\"null\")) {\n                override_timespan = \"none\";\n            }\n            override_graphtype = request.getParameter(\"graphtype\");\n            if (override_graphtype == null || override_graphtype.equals(\"null\")) {\n                override_graphtype = \"none\";\n            }\n            if (report_action.equals(\"Customize\")) {\n                KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), false);\n                \n                if (report_type.equals(\"node\")) {\n                    editor.loadWorkingReport(m_kscReportService.buildNodeReport(report_index)); \n                } else if (report_type.equals(\"domain\")) {\n                    editor.loadWorkingReport(m_kscReportService.buildDomainReport(domain)); \n                } else { \n                    editor.loadWorkingReport(getKscReportFactory(), report_index);\n                }\n                \n                // Now inject any override characteristics into the working report model\n                Report working_report = editor.getWorkingReport();\n                for (int i=0; i<working_report.getGraphCount(); i++) {\n                    Graph working_graph = working_report.getGraph(i);\n                    if (!override_timespan.equals(\"none\")) { \n                        working_graph.setTimespan(override_timespan); \n                    }\n                    if (!override_graphtype.equals(\"none\")) { \n                        working_graph.setGraphtype(override_graphtype); \n                    }\n                }\n            }\n        } else { \n            if (!report_action.equals(\"Exit\")) {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"type\", report_type);\n\n            if (report_index >= 0) {\n                modelAndView.addObject(\"report\", report_index);\n            }\n            if (domain != null) {\n                modelAndView.addObject(\"domain\", domain);\n            }\n            if (override_timespan != null) { \n                modelAndView.addObject(\"timespan\", override_timespan);\n            }\n            if (override_graphtype != null) { \n                modelAndView.addObject(\"graphtype\", override_graphtype);\n            }\n\n            return modelAndView;\n        } else if (report_action.equals(\"Customize\")) { \n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (report_action.equals(\"Exit\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + report_action + \"' is not supported.  Must be one of: Update, Customize, or Exit\");\n        }\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7389,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7390,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static synchronized void getBeginEndTime(String interval, Calendar begin_time, Calendar end_time) throws IllegalArgumentException\n    /**\n     * This method requires begin time and end time to be set to the current\n     * time prior to call. The start and stop times are relative to this time.\n     * Init values as follows: begin_time = Calendar.getInstance(); end_time =\n     * Calendar.getInstance();\n     */\n    {\n        if (interval.equals(\"1_hour\")) {\n            begin_time.add(Calendar.HOUR, -1);\n        } else if (interval.equals(\"2_hour\")) {\n            begin_time.add(Calendar.HOUR, -2);\n        } else if (interval.equals(\"4_hour\")) {\n            begin_time.add(Calendar.HOUR, -4);\n        } else if (interval.equals(\"8_hour\")) {\n            begin_time.add(Calendar.HOUR, -8);\n        } else if (interval.equals(\"1_day\")) {\n            begin_time.add(Calendar.DATE, -1);\n        } else if (interval.equals(\"2_day\")) {\n            begin_time.add(Calendar.DATE, -2);\n        } else if (interval.equals(\"7_day\")) {\n            begin_time.add(Calendar.DATE, -7);\n        } else if (interval.equals(\"1_month\")) {\n            begin_time.add(Calendar.DATE, -30);\n        } else if (interval.equals(\"6_month\")) {\n            begin_time.add(Calendar.DATE, -183);\n        } else if (interval.equals(\"1_year\")) {\n            begin_time.add(Calendar.DATE, -365);\n        } else {\n            // From current time, lets zero out the small components\n            begin_time.set(Calendar.HOUR_OF_DAY, 0);\n            begin_time.set(Calendar.MINUTE, 0);\n            begin_time.set(Calendar.SECOND, 0);\n            end_time.set(Calendar.HOUR_OF_DAY, 0);\n            end_time.set(Calendar.MINUTE, 0);\n            end_time.set(Calendar.SECOND, 0);\n\n            if (interval.equals(\"Today\")) {\n                end_time.add(Calendar.DATE, 1);\n            } else if (interval.equals(\"Yesterday\")) {\n                begin_time.add(Calendar.DATE, -1);\n            } else if (interval.equals(\"This Week\") || interval.equals(\"Last Week\")) {\n                begin_time.set(Calendar.DAY_OF_WEEK, 1);\n                end_time.set(Calendar.DAY_OF_WEEK, 7);\n                end_time.set(Calendar.HOUR_OF_DAY, 23);\n                end_time.set(Calendar.MINUTE, 59);\n                if (interval.equals(\"Last Week\")) {\n                    begin_time.add(Calendar.DATE, -7);\n                    end_time.add(Calendar.DATE, -7);\n                }\n            } else if (interval.equals(\"This Month\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.MONTH, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"Last Month\")) {\n                begin_time.add(Calendar.MONTH, -1);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"This Quarter\") || interval.equals(\"Last Quarter\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n\n                switch (begin_time.get(Calendar.MONTH)) {\n                case 0:\n                case 1:\n                case 2:\n                    begin_time.set(Calendar.MONTH, 0);\n                    end_time.set(Calendar.MONTH, 3);\n                    break;\n                case 3:\n                case 4:\n                case 5:\n                    begin_time.set(Calendar.MONTH, 3);\n                    end_time.set(Calendar.MONTH, 6);\n                    break;\n                case 6:\n                case 7:\n                case 8:\n                    begin_time.set(Calendar.MONTH, 6);\n                    end_time.set(Calendar.MONTH, 9);\n                    break;\n                case 9:\n                case 10:\n                case 11:\n                    begin_time.set(Calendar.MONTH, 9);\n                    end_time.set(Calendar.MONTH, 0);\n                    end_time.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid Calendar Month \" + begin_time.get(Calendar.MONTH));\n                }\n                if (interval.equals(\"Last Quarter\")) {\n                    begin_time.add(Calendar.MONTH, -3);\n                    end_time.add(Calendar.MONTH, -3);\n                }\n            } else if (interval.equals(\"This Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.YEAR, 1);\n            } else if (interval.equals(\"Last Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                begin_time.add(Calendar.YEAR, -1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n            } else {\n                throw new IllegalArgumentException(\"Unknown graph timespan: \" + interval);\n            }\n        }\n    }","id":7391,"modified_method":"/**\n     * This method requires begin time and end time to be set to the current\n     * time prior to call. The start and stop times are relative to this time.\n     * Init values as follows: begin_time = Calendar.getInstance(); end_time =\n     * Calendar.getInstance();\n     */\n    public static synchronized void getBeginEndTime(String interval, Calendar begin_time, Calendar end_time) throws IllegalArgumentException {\n        if (interval.equals(\"1_hour\")) {\n            begin_time.add(Calendar.HOUR, -1);\n        } else if (interval.equals(\"2_hour\")) {\n            begin_time.add(Calendar.HOUR, -2);\n        } else if (interval.equals(\"4_hour\")) {\n            begin_time.add(Calendar.HOUR, -4);\n        } else if (interval.equals(\"8_hour\")) {\n            begin_time.add(Calendar.HOUR, -8);\n        } else if (interval.equals(\"1_day\")) {\n            begin_time.add(Calendar.DATE, -1);\n        } else if (interval.equals(\"2_day\")) {\n            begin_time.add(Calendar.DATE, -2);\n        } else if (interval.equals(\"7_day\")) {\n            begin_time.add(Calendar.DATE, -7);\n        } else if (interval.equals(\"1_month\")) {\n            begin_time.add(Calendar.DATE, -30);\n        } else if (interval.equals(\"6_month\")) {\n            begin_time.add(Calendar.DATE, -183);\n        } else if (interval.equals(\"1_year\")) {\n            begin_time.add(Calendar.DATE, -365);\n        } else {\n            // From current time, lets zero out the small components\n            begin_time.set(Calendar.HOUR_OF_DAY, 0);\n            begin_time.set(Calendar.MINUTE, 0);\n            begin_time.set(Calendar.SECOND, 0);\n            end_time.set(Calendar.HOUR_OF_DAY, 0);\n            end_time.set(Calendar.MINUTE, 0);\n            end_time.set(Calendar.SECOND, 0);\n\n            if (interval.equals(\"Today\")) {\n                end_time.add(Calendar.DATE, 1);\n            } else if (interval.equals(\"Yesterday\")) {\n                begin_time.add(Calendar.DATE, -1);\n            } else if (interval.equals(\"This Week\") || interval.equals(\"Last Week\")) {\n                begin_time.set(Calendar.DAY_OF_WEEK, 1);\n                end_time.set(Calendar.DAY_OF_WEEK, 7);\n                end_time.set(Calendar.HOUR_OF_DAY, 23);\n                end_time.set(Calendar.MINUTE, 59);\n                if (interval.equals(\"Last Week\")) {\n                    begin_time.add(Calendar.DATE, -7);\n                    end_time.add(Calendar.DATE, -7);\n                }\n            } else if (interval.equals(\"This Month\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.MONTH, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"Last Month\")) {\n                begin_time.add(Calendar.MONTH, -1);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"This Quarter\") || interval.equals(\"Last Quarter\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n\n                switch (begin_time.get(Calendar.MONTH)) {\n                case 0:\n                case 1:\n                case 2:\n                    begin_time.set(Calendar.MONTH, 0);\n                    end_time.set(Calendar.MONTH, 3);\n                    break;\n                case 3:\n                case 4:\n                case 5:\n                    begin_time.set(Calendar.MONTH, 3);\n                    end_time.set(Calendar.MONTH, 6);\n                    break;\n                case 6:\n                case 7:\n                case 8:\n                    begin_time.set(Calendar.MONTH, 6);\n                    end_time.set(Calendar.MONTH, 9);\n                    break;\n                case 9:\n                case 10:\n                case 11:\n                    begin_time.set(Calendar.MONTH, 9);\n                    end_time.set(Calendar.MONTH, 0);\n                    end_time.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid Calendar Month \" + begin_time.get(Calendar.MONTH));\n                }\n                if (interval.equals(\"Last Quarter\")) {\n                    begin_time.add(Calendar.MONTH, -3);\n                    end_time.add(Calendar.MONTH, -3);\n                }\n            } else if (interval.equals(\"This Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.YEAR, 1);\n            } else if (interval.equals(\"Last Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                begin_time.add(Calendar.YEAR, -1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n            } else {\n                throw new IllegalArgumentException(\"Unknown graph timespan: \" + interval);\n            }\n        }\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Deletes the indexed report and updates file configuration */\n    public void deleteReportAndSave(int index) throws ArrayIndexOutOfBoundsException, IOException, FileNotFoundException, MarshalException, ValidationException {\n        int total_reports = m_config.getReportCount();\n        if ((index < 0) || (index >= total_reports)) {\n            // Out of range. Throw range error.\n            throw new ArrayIndexOutOfBoundsException(\"Reports List index to be deleted is out of bounds.\");\n        } else {\n            Report removee = m_config.getReport(index);\n            m_config.removeReport(removee);\n            saveCurrent();\n            reload(); // ensure consistent state with file\n        }\n    }","id":7392,"modified_method":"/** Deletes the indexed report and updates file configuration */\n    public void deleteReportAndSave(int index) throws ArrayIndexOutOfBoundsException, IOException, FileNotFoundException, MarshalException, ValidationException {\n        Report report = getReportByIndex(index);\n        if (report == null) {\n            throw new ArrayIndexOutOfBoundsException(\"Reports List index to be deleted is out of bounds: \" + index);\n        }\n\n        m_config.removeReport(report);\n        saveCurrent();\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sets the working report index */\n    public void setWorkingReportIndex(int v_index) {\n        working_index = v_index;\n    }","id":7393,"modified_method":"public Report getReportByIndex(int index) {\n        return m_reportList.get(index);\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Init routine. Must be called before calling getInstance() to instantiate * */\n    public static synchronized void init() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (instance == null) {\n            instance = new KSC_PerformanceReportFactory();\n            KSC_PerformanceReportFactory.reload();\n            KSC_PerformanceReportFactory.initialized = true;\n        }\n    }","id":7394,"modified_method":"/** Init routine. Must be called before calling getInstance() to instantiate * */\n    public static synchronized void init() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (isInitialized()) {\n            return;\n        }\n        \n        KSC_PerformanceReportFactory newInstance = new KSC_PerformanceReportFactory();\n        newInstance.reload();\n        \n        s_instance = newInstance;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Loads the source report into the working report object */\n    public void loadWorkingReport(Report source_report) throws MarshalException, ValidationException {\n        // Create a new and unique instance of the report for screwing around\n        // with\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(source_report, stringWriter);\n        StringReader stringReader = new StringReader(stringWriter.toString());\n        working_report = (Report) Unmarshaller.unmarshal(Report.class, stringReader);\n    }","id":7395,"modified_method":"void addReport(Report report) {\n        m_config.addReport(report);\n        setIdsOnAllReports();\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Create a new blank report & initialize it */\n    public static Report getNewReport() {\n        Report new_report = new Report();\n        new_report.setTitle(\"New Report Title\");\n        new_report.setShow_graphtype_button(false);\n        new_report.setShow_timespan_button(false);\n        return new_report;\n    }","id":7396,"modified_method":"public Map<Integer, String> getReportList() {\n        LinkedHashMap<Integer, String> reports = new LinkedHashMap<Integer, String>(m_config.getReportCount());\n\n        for (Report report : m_config.getReportCollection()) {\n            reports.put(report.getId(), report.getTitle());\n        }\n        \n        return reports;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Saves the KSC_PerformanceReport.xml data */\n    public synchronized void saveCurrent() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (instance == null) {\n            throw new IllegalStateException(\"KSC_PerformanceReportFactory.init() must be called before KSC_PerformanceReportFactory.saveCurrent().\");\n        }\n        sortByTitle();\n        // Marshall to a string first, then to file. This way the original\n        // config isn't lost if teh xml from the marshall is hosed.\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(m_config, stringWriter);\n        if (stringWriter.toString() != null) {\n            FileWriter fileWriter = new FileWriter(KSC_PerformanceReportFile);\n            fileWriter.write(stringWriter.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        reload();\n    }","id":7397,"modified_method":"/**\n     * Saves the KSC_PerformanceReport.xml data.\n     * */\n    public synchronized void saveCurrent() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        assertInitialized();\n\n        sortByTitle();\n        \n        /*\n         * Marshall to a string first, then to file. This way the original\n         * config is not lost if the XML from the marshall is hosed.\n         */\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(m_config, stringWriter);\n        if (stringWriter.toString() != null) {\n            FileWriter fileWriter = new FileWriter(s_configFile);\n            fileWriter.write(stringWriter.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        \n        reload();\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * KSC_PerformanceReportFactory\n     * \n     * @return the single KSC_PerformanceReportFactory instance\n     */\n    public static synchronized KSC_PerformanceReportFactory getInstance() throws IllegalStateException {\n        if (instance == null) {\n            throw new IllegalStateException(\"KSC_PerformanceReportFactory.init() must be called before KSC_PerformanceReportFactory.getInstance().\");\n        }\n\n        return instance;\n    }","id":7398,"modified_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * KSC_PerformanceReportFactory\n     * \n     * @return the single KSC_PerformanceReportFactory instance\n     */\n    public static synchronized KSC_PerformanceReportFactory getInstance() throws IllegalStateException {\n        assertInitialized();\n\n        return s_instance;\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sorts the Reports List by their title. Simple bubble sort. */\n    public void sortByTitle() {\n        Report[] report_array = m_config.getReport();\n        for (int j = 0; j < report_array.length; j++) {\n            for (int i = j + 1; i < report_array.length; i++) {\n                if (report_array[i].getTitle().compareTo(report_array[j].getTitle()) < 0) {\n                    Report temp_report = report_array[j];\n                    report_array[j] = report_array[i];\n                    report_array[i] = temp_report;\n                }\n            }\n        }\n        m_config.setReport(report_array); // write back the sorted list\n    }","id":7399,"modified_method":"/**\n     * Sorts the Reports List by their title.\n     */\n    public void sortByTitle() {\n        Arrays.sort(m_config.getReport(), new Comparator<Report>() {\n            public int compare(Report o1, Report o2) {\n                return o1.getTitle().compareTo(o2.getTitle());\n            }\n        });\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Parses the KSC_PerformanceReport.xml via the Castor classes */\n    public static synchronized void reload() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        KSC_PerformanceReportFile = ConfigFileConstants.getFile(ConfigFileConstants.KSC_REPORT_FILE_NAME);\n\n        InputStream configIn = new FileInputStream(KSC_PerformanceReportFile);\n        m_lastModified = KSC_PerformanceReportFile.lastModified();\n\n        m_config = (ReportsList) Unmarshaller.unmarshal(ReportsList.class, new InputStreamReader(configIn));\n    }","id":7400,"modified_method":"/**\n     * Parses the KSC_PerformanceReport.xml via the Castor classes.\n     * */\n    public synchronized void reload() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        s_configFile = ConfigFileConstants.getFile(ConfigFileConstants.KSC_REPORT_FILE_NAME);\n\n        FileReader rdr = new FileReader(s_configFile);\n        try {\n            m_config = CastorUtils.unmarshal(ReportsList.class, rdr);\n        } finally {\n            IOUtils.closeQuietly(rdr);\n        }\n        \n        setIdsOnAllReports();\n        \n        m_reportList = createReportList();\n    }","commit_id":"788e74443727352fe69774e71553f25330340c3e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7401,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7402,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n    }","id":7403,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        //optional parameter graphtype\n        String prefabReportName = request.getParameter(\"graphtype\");\n        \n        Report report = getKscReportFactory().getWorkingReport(); \n        org.opennms.netmgt.config.kscReports.Graph sample_graph = getKscReportFactory().getWorkingGraph(); \n        if (sample_graph == null) {\n            throw new IllegalArgumentException(\"Invalid working graph argument -- null pointer. Possibly missing prefab report in snmp-graph.properties?\");\n        }\n\n        // Set the resourceId in the working graph in case it changed\n        sample_graph.setResourceId(resourceId);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(sample_graph);\n        PrefabGraph[] graph_options = getResourceService().findPrefabGraphsForResource(resource);\n\n        PrefabGraph display_graph = null;\n        if (graph_options.length > 0) {\n            if (prefabReportName == null) {\n                display_graph = graph_options[0];\n            } else {\n                display_graph = getPrefabGraphFromList(graph_options, sample_graph.getGraphtype());\n            }\n        }\n        \n        Calendar begin_time = Calendar.getInstance();\n        Calendar end_time = Calendar.getInstance();\n        KSC_PerformanceReportFactory.getBeginEndTime(sample_graph.getTimespan(), begin_time, end_time);\n        \n        KscResultSet resultSet = new KscResultSet(sample_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphEditDetails\");\n        \n        modelAndView.addObject(\"resultSet\", resultSet);\n        \n        modelAndView.addObject(\"prefabGraphs\", graph_options);\n        \n        modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(false));\n        modelAndView.addObject(\"timeSpan\", sample_graph.getTimespan());\n        \n        int graph_index = getKscReportFactory().getWorkingGraphIndex(); \n        int max_graphs = report.getGraphCount();\n        if (graph_index == -1) {\n            graph_index = max_graphs++;\n        }\n        modelAndView.addObject(\"graphIndex\", graph_index);\n        modelAndView.addObject(\"maxGraphIndex\", max_graphs);\n        \n        return modelAndView;\n    }","id":7404,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        //optional parameter graphtype\n        String prefabReportName = request.getParameter(\"graphtype\");\n        \n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        Report report = editor.getWorkingReport(); \n        org.opennms.netmgt.config.kscReports.Graph sample_graph = editor.getWorkingGraph(); \n        if (sample_graph == null) {\n            throw new IllegalArgumentException(\"Invalid working graph argument -- null pointer. Possibly missing prefab report in snmp-graph.properties?\");\n        }\n\n        // Set the resourceId in the working graph in case it changed\n        sample_graph.setResourceId(resourceId);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(sample_graph);\n        PrefabGraph[] graph_options = getResourceService().findPrefabGraphsForResource(resource);\n\n        PrefabGraph display_graph = null;\n        if (graph_options.length > 0) {\n            if (prefabReportName == null) {\n                display_graph = graph_options[0];\n            } else {\n                display_graph = getPrefabGraphFromList(graph_options, sample_graph.getGraphtype());\n            }\n        }\n        \n        Calendar begin_time = Calendar.getInstance();\n        Calendar end_time = Calendar.getInstance();\n        KSC_PerformanceReportFactory.getBeginEndTime(sample_graph.getTimespan(), begin_time, end_time);\n        \n        KscResultSet resultSet = new KscResultSet(sample_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphEditDetails\");\n        \n        modelAndView.addObject(\"resultSet\", resultSet);\n        \n        modelAndView.addObject(\"prefabGraphs\", graph_options);\n        \n        modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(false));\n        modelAndView.addObject(\"timeSpan\", sample_graph.getTimespan());\n        \n        int graph_index = editor.getWorkingGraphIndex(); \n        int max_graphs = report.getGraphCount();\n        if (graph_index == -1) {\n            graph_index = max_graphs++;\n        }\n        modelAndView.addObject(\"graphIndex\", graph_index);\n        modelAndView.addObject(\"maxGraphIndex\", max_graphs);\n        \n        return modelAndView;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        Report report = getKscReportFactory().getWorkingReport();\n        if (report == null) {\n            throw new IllegalStateException(\"There is no working report\");\n        }\n//        int report_index = getReportFactory().getWorkingReportIndex();      \n//        String number_graphs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) { \n            Graph current_graph = report.getGraph(i); \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(current_graph.getGraphtype());\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(current_graph.getTimespan(), begin_time, end_time); \n\n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customReport\");\n\n        modelAndView.addObject(\"showTimeSpan\", report.getShow_timespan_button());\n        modelAndView.addObject(\"showGraphType\", report.getShow_graphtype_button());\n        modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        return modelAndView;\n    }","id":7405,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        Report report = KscReportEditor.getFromSession(request.getSession(), true).getWorkingReport();\n        if (report == null) {\n            throw new IllegalStateException(\"There is no working report\");\n        }\n//        int report_index = getReportFactory().getWorkingReportIndex();      \n//        String number_graphs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) { \n            Graph current_graph = report.getGraph(i); \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(current_graph.getGraphtype());\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(current_graph.getTimespan(), begin_time, end_time); \n\n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customReport\");\n\n        modelAndView.addObject(\"showTimeSpan\", report.getShow_timespan_button());\n        modelAndView.addObject(\"showGraphType\", report.getShow_graphtype_button());\n        modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        return modelAndView;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n    }","id":7406,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = WebSecurityUtils.safeParseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n            promoteResourceAttributesIfNecessary(resource);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        if (report != null) {\n            modelAndView.addObject(\"report\", r_index);\n        }\n        if (domain != null) {\n            modelAndView.addObject(\"domain\", domain);\n        }\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n\n        if (report.getGraphs_per_line() > 0) {\n            modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        } else {\n            modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        }\n        \n        return modelAndView;\n    }","id":7407,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = WebSecurityUtils.safeParseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            report = m_kscReportFactory.getReportByIndex(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n            promoteResourceAttributesIfNecessary(resource);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        if (report != null) {\n            modelAndView.addObject(\"report\", r_index);\n        }\n        if (domain != null) {\n            modelAndView.addObject(\"domain\", domain);\n        }\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n\n        if (report.getGraphs_per_line() > 0) {\n            modelAndView.addObject(\"graphsPerLine\", report.getGraphs_per_line());\n        } else {\n            modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        }\n        \n        return modelAndView;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setDefaultGraphsPerLine(int defaultGraphsPerLine) {\n        if (defaultGraphsPerLine <= 0) {\n            throw new IllegalArgumentException(\"property defaultGraphsPerLine must be greater than zero\");\n        }\n        m_defaultGraphsPerLine = defaultGraphsPerLine;\n    }","id":7408,"modified_method":"public void setDefaultGraphsPerLine(int defaultGraphsPerLine) {\n        Assert.isTrue(defaultGraphsPerLine > 0, \"property defaultGraphsPerLine must be greater than zero\");\n\n        m_defaultGraphsPerLine = defaultGraphsPerLine;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_defaultGraphsPerLine == 0) {\n            throw new IllegalStateException(\"property defaultGraphsPerLine must be set\");\n        }\n        \n        m_executor = Executors.newSingleThreadExecutor();\n\n    }","id":7409,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_defaultGraphsPerLine != 0, \"property defaultGraphsPerLine must be set\");\n        \n        m_executor = Executors.newSingleThreadExecutor();\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"resourceService property has not been set\");\n        }\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"kscReportFactory property has not been set\");\n        }\n        \n        initTimeSpans();\n    }","id":7410,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"resourceService property has not been set\");\n        Assert.state(m_kscReportFactory != null, \"kscReportFactory property has not been set\");\n        \n        initTimeSpans();\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<Integer, String> getReportList() {\n        ReportsList report_configuration = KSC_PerformanceReportFactory.getConfiguration();  \n        if (report_configuration == null) {\n            throw new DataAccessResourceFailureException(\"Couldn't retrieve KSC Report File configuration\");\n        }\n        \n        Report[] report_array = report_configuration.getReport();\n        \n        LinkedHashMap<Integer, String> reports = new LinkedHashMap<Integer, String>();\n        for (int i = 0; i < report_configuration.getReportCount(); i++ ) {\n            reports.put(i, report_array[i].getTitle());\n        }\n        \n        return reports;\n    }","id":7411,"modified_method":"public Map<Integer, String> getReportList() {\n        return m_kscReportFactory.getReportList();  \n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void initTimeSpans() {\n        for (String timeSpan : getKscReportFactory().timespan_options) {\n            s_timeSpans.put(timeSpan, timeSpan);\n        }\n        \n        s_timeSpansWithNone.put(\"none\", \"none\");\n        s_timeSpansWithNone.putAll(s_timeSpans);\n    }","id":7412,"modified_method":"private void initTimeSpans() {\n        for (String timeSpan : KSC_PerformanceReportFactory.TIMESPAN_OPTIONS) {\n            s_timeSpans.put(timeSpan, timeSpan);\n        }\n        \n        s_timeSpansWithNone.put(\"none\", \"none\");\n        s_timeSpansWithNone.putAll(s_timeSpans);\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7413,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (WebSecurityUtils.safeParseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","id":7414,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        // Get The Customizable (Working) Graph \n        Graph graph = editor.getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (WebSecurityUtils.safeParseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            editor.unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = 0; \n        String report_action = request.getParameter(\"report_action\");\n        \n        if (report_action == null) {\n            throw new MissingParameterException(\"report_action\");\n        }\n          \n        if ((report_action.equals(\"Customize\")) || (report_action.equals(\"View\")) || (report_action.equals(\"CreateFrom\")) || (report_action.equals(\"Delete\"))) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index == null) {\n                throw new MissingParameterException(\"report\");\n            } \n            report_index = WebSecurityUtils.safeParseInt(r_index);\n            if ((report_action.equals(\"Customize\")) || (report_action.equals(\"CreateFrom\"))) {  \n                // Go ahead and tell report factory to put the report config into the working report area\n                getKscReportFactory().loadWorkingReport(report_index);\n                if (report_action.equals(\"CreateFrom\")) {  // Need to set index to -1 for this case to have Customizer create new report index \n                   getKscReportFactory().setWorkingReportIndex(-1);\n                }\n            }\n            if (report_action.equals(\"Delete\")) {  // Take care of this case right now\n                getKscReportFactory().deleteReportAndSave(report_index); \n            }\n        } else { \n            if (report_action.equals(\"Create\")) {\n                report_index = -1;\n               // Go ahead and tell report factory to put the report config (a blank config) into the working report area\n               getKscReportFactory().loadWorkingReport(report_index);\n            }\n            else {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"View\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", report_index);\n            modelAndView.addObject(\"type\", \"custom\");\n            return modelAndView;\n        } else { \n            if ((report_action.equals(\"Customize\")) || (report_action.equals(\"Create\")) || (report_action.equals(\"CreateFrom\"))) {\n                return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n            } else {\n                return new ModelAndView(\"redirect:/KSC/index.htm\");\n            } \n        }\n    }","id":7415,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String action = request.getParameter(\"report_action\");\n        \n        if (action == null) {\n            throw new MissingParameterException(\"report_action\");\n        }\n\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), false);\n        \n        if (action.equals(\"Customize\")) {\n            editor.loadWorkingReport(getKscReportFactory(), getReportIndex(request));\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"CreateFrom\")) {\n            editor.loadWorkingReportDuplicate(getKscReportFactory(), getReportIndex(request));\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Delete\")) {\n            getKscReportFactory().deleteReportAndSave(getReportIndex(request)); \n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"Create\")) {\n            editor.loadNewWorkingReport();\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"View\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", getReportIndex(request));\n            modelAndView.addObject(\"type\", \"custom\");\n            return modelAndView;\n        } else {\n            throw new ServletException (\"Invalid Parameter contents for report_action: \" + action);\n        }\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n    }","id":7416,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7417,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = WebSecurityUtils.safeParseInt(g_index);\n        int graphs_per_line = WebSecurityUtils.safeParseInt(request.getParameter(\"graphs_per_line\"));\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n        \n        if (graphs_per_line > 0) {\n            report.setGraphs_per_line(graphs_per_line);\n        } else {\n            report.setGraphs_per_line(0);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = getKscReportFactory().getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","id":7418,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), true);\n        \n        // Get The Customizable Report \n        Report report = editor.getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = WebSecurityUtils.safeParseInt(g_index);\n        int graphs_per_line = WebSecurityUtils.safeParseInt(request.getParameter(\"graphs_per_line\"));\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n        \n        if (graphs_per_line > 0) {\n            report.setGraphs_per_line(graphs_per_line);\n        } else {\n            report.setGraphs_per_line(0);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            try {\n                editor.unloadWorkingReport(getKscReportFactory());  // first copy working report into report arrays\n                getKscReportFactory().saveCurrent();          // Now unmarshal array to file\n            } catch (Exception e) {\n                throw new ServletException(\"Couldn't save KSC_PerformanceReportFactory.\", e);\n            }\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                editor.loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = editor.getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportFactory == null) {\n            throw new IllegalStateException(\"property kscReportFactory must be set\");\n        }\n        \n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7419,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportFactory != null, \"property kscReportFactory must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = 0; \n        String override_timespan = null;\n        String override_graphtype = null;\n        String report_action = request.getParameter(\"action\");\n        String domain = request.getParameter(\"domain\");\n        if (report_action == null) {\n            throw new MissingParameterException (\"action\", new String[] {\"action\",\"report\",\"type\"});\n        }\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException (\"type\", new String[] {\"action\",\"report\",\"type\"});\n        }\n\n        if ((report_action.equals(\"Customize\")) || (report_action.equals(\"Update\"))) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index != null && !r_index.equals(\"null\")) {\n               report_index = WebSecurityUtils.safeParseInt(r_index); \n            } else if (domain == null) {\n                throw new MissingParameterException(\"report or domain\", new String[] {\"report or domain\",\"type\"});\n            }\n            override_timespan = request.getParameter(\"timespan\");\n            if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n                override_timespan = \"none\";\n            }\n            override_graphtype = request.getParameter(\"graphtype\");\n            if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n                override_graphtype = \"none\";\n            }\n            if (report_action.equals(\"Customize\")) {\n                if (report_type.equals(\"node\")) {\n                    Report report = m_kscReportService.buildNodeReport(report_index);\n                    getKscReportFactory().loadWorkingReport(report); \n                    getKscReportFactory().setWorkingReportIndex(-1); // Must set index to -1 to make customizer create a new report, not replace\n                } else if (report_type.equals(\"domain\")) {\n                    Report report = m_kscReportService.buildDomainReport(domain);\n                    getKscReportFactory().loadWorkingReport(report); \n                    getKscReportFactory().setWorkingReportIndex(-1); // Must set index to -1 to make customizer create a new report, not replace\n                } else { \n                    // Go ahead and tell report factory to put the indexed report config into the working report area\n                    getKscReportFactory().loadWorkingReport(report_index);\n                }\n                // Now inject any override characteristics into the working report model\n                Report working_report = getKscReportFactory().getWorkingReport();\n                for (int i=0; i<working_report.getGraphCount(); i++) {\n                    Graph working_graph = working_report.getGraph(i);\n                    if (!override_timespan.equals(\"none\")) { \n                        working_graph.setTimespan(override_timespan); \n                    }\n                    if (!override_graphtype.equals(\"none\")) { \n                        working_graph.setGraphtype(override_graphtype); \n                    }\n                }\n            }\n        } else { \n            if (!report_action.equals(\"Exit\")) {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"report\", report_index);\n            modelAndView.addObject(\"domain\", domain);\n            modelAndView.addObject(\"type\", report_type);\n            \n            if (override_timespan != null) { \n                modelAndView.addObject(\"timespan\", override_timespan);\n            }\n            if (override_graphtype != null) { \n                modelAndView.addObject(\"graphtype\", override_graphtype);\n            }\n\n            return modelAndView;\n        } else if (report_action.equals(\"Customize\")) { \n            return new ModelAndView(\"redirect:/KSC/customReport.htm\", \"report\", report_index);\n        } else if (report_action.equals(\"Exit\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + report_action + \"' is not supported.  Must be one of: Update, Customize, or Exit\");\n        }\n    }","id":7420,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get Form Variables\n        int report_index = -1; \n        String override_timespan = null;\n        String override_graphtype = null;\n        String report_action = request.getParameter(\"action\");\n        String domain = request.getParameter(\"domain\");\n        if (report_action == null) {\n            throw new MissingParameterException (\"action\", new String[] {\"action\", \"report\", \"type\"});\n        }\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException (\"type\", new String[] {\"action\", \"report\", \"type\"});\n        }\n\n        if (report_action.equals(\"Customize\") || report_action.equals(\"Update\")) {\n            String r_index = request.getParameter(\"report\");\n            if (r_index != null && !r_index.equals(\"null\")) {\n               report_index = WebSecurityUtils.safeParseInt(r_index); \n            } else if (domain == null) {\n                throw new MissingParameterException(\"report or domain\", new String[] {\"report or domain\" , \"type\"});\n            }\n            override_timespan = request.getParameter(\"timespan\");\n            if ((override_timespan == null) || override_timespan.equals(\"null\")) {\n                override_timespan = \"none\";\n            }\n            override_graphtype = request.getParameter(\"graphtype\");\n            if (override_graphtype == null || override_graphtype.equals(\"null\")) {\n                override_graphtype = \"none\";\n            }\n            if (report_action.equals(\"Customize\")) {\n                KscReportEditor editor = KscReportEditor.getFromSession(request.getSession(), false);\n                \n                if (report_type.equals(\"node\")) {\n                    editor.loadWorkingReport(m_kscReportService.buildNodeReport(report_index)); \n                } else if (report_type.equals(\"domain\")) {\n                    editor.loadWorkingReport(m_kscReportService.buildDomainReport(domain)); \n                } else { \n                    editor.loadWorkingReport(getKscReportFactory(), report_index);\n                }\n                \n                // Now inject any override characteristics into the working report model\n                Report working_report = editor.getWorkingReport();\n                for (int i=0; i<working_report.getGraphCount(); i++) {\n                    Graph working_graph = working_report.getGraph(i);\n                    if (!override_timespan.equals(\"none\")) { \n                        working_graph.setTimespan(override_timespan); \n                    }\n                    if (!override_graphtype.equals(\"none\")) { \n                        working_graph.setGraphtype(override_graphtype); \n                    }\n                }\n            }\n        } else { \n            if (!report_action.equals(\"Exit\")) {\n                throw new ServletException (\"Invalid Parameter contents for report_action\");\n            }\n        }\n        \n        if (report_action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customView.htm\");\n            modelAndView.addObject(\"type\", report_type);\n\n            if (report_index >= 0) {\n                modelAndView.addObject(\"report\", report_index);\n            }\n            if (domain != null) {\n                modelAndView.addObject(\"domain\", domain);\n            }\n            if (override_timespan != null) { \n                modelAndView.addObject(\"timespan\", override_timespan);\n            }\n            if (override_graphtype != null) { \n                modelAndView.addObject(\"graphtype\", override_graphtype);\n            }\n\n            return modelAndView;\n        } else if (report_action.equals(\"Customize\")) { \n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (report_action.equals(\"Exit\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + report_action + \"' is not supported.  Must be one of: Update, Customize, or Exit\");\n        }\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7421,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        if (m_resourceService == null) {\n            throw new IllegalStateException(\"property resourceService must be set\");\n        }\n        if (m_kscReportService == null) {\n            throw new IllegalStateException(\"property kscReportService must be set\");\n        }\n    }","id":7422,"modified_method":"public void afterPropertiesSet() throws Exception {\n        Assert.state(m_resourceService != null, \"property resourceService must be set\");\n        Assert.state(m_kscReportService != null, \"property kscReportService must be set\");\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sets the working report index */\n    public void setWorkingReportIndex(int v_index) {\n        working_index = v_index;\n    }","id":7423,"modified_method":"public Report getReportByIndex(int index) {\n        return m_reportList.get(index);\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Loads the source report into the working report object */\n    public void loadWorkingReport(Report source_report) throws MarshalException, ValidationException {\n        // Create a new and unique instance of the report for screwing around\n        // with\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(source_report, stringWriter);\n        StringReader stringReader = new StringReader(stringWriter.toString());\n        working_report = (Report) Unmarshaller.unmarshal(Report.class, stringReader);\n    }","id":7424,"modified_method":"void addReport(Report report) {\n        m_config.addReport(report);\n        setIdsOnAllReports();\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Deletes the indexed report and updates file configuration */\n    public void deleteReportAndSave(int index) throws ArrayIndexOutOfBoundsException, IOException, FileNotFoundException, MarshalException, ValidationException {\n        int total_reports = m_config.getReportCount();\n        if ((index < 0) || (index >= total_reports)) {\n            // Out of range. Throw range error.\n            throw new ArrayIndexOutOfBoundsException(\"Reports List index to be deleted is out of bounds.\");\n        } else {\n            Report removee = m_config.getReport(index);\n            m_config.removeReport(removee);\n            saveCurrent();\n            reload(); // ensure consistent state with file\n        }\n    }","id":7425,"modified_method":"/** Deletes the indexed report and updates file configuration */\n    public void deleteReportAndSave(int index) throws ArrayIndexOutOfBoundsException, IOException, FileNotFoundException, MarshalException, ValidationException {\n        Report report = getReportByIndex(index);\n        if (report == null) {\n            throw new ArrayIndexOutOfBoundsException(\"Reports List index to be deleted is out of bounds: \" + index);\n        }\n\n        m_config.removeReport(report);\n        saveCurrent();\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Create a new blank report & initialize it */\n    public static Report getNewReport() {\n        Report new_report = new Report();\n        new_report.setTitle(\"New Report Title\");\n        new_report.setShow_graphtype_button(false);\n        new_report.setShow_timespan_button(false);\n        return new_report;\n    }","id":7426,"modified_method":"public Map<Integer, String> getReportList() {\n        LinkedHashMap<Integer, String> reports = new LinkedHashMap<Integer, String>(m_config.getReportCount());\n\n        for (Report report : m_config.getReportCollection()) {\n            reports.put(report.getId(), report.getTitle());\n        }\n        \n        return reports;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static synchronized void getBeginEndTime(String interval, Calendar begin_time, Calendar end_time) throws IllegalArgumentException\n    /**\n     * This method requires begin time and end time to be set to the current\n     * time prior to call. The start and stop times are relative to this time.\n     * Init values as follows: begin_time = Calendar.getInstance(); end_time =\n     * Calendar.getInstance();\n     */\n    {\n        if (interval.equals(\"1_hour\")) {\n            begin_time.add(Calendar.HOUR, -1);\n        } else if (interval.equals(\"2_hour\")) {\n            begin_time.add(Calendar.HOUR, -2);\n        } else if (interval.equals(\"4_hour\")) {\n            begin_time.add(Calendar.HOUR, -4);\n        } else if (interval.equals(\"8_hour\")) {\n            begin_time.add(Calendar.HOUR, -8);\n        } else if (interval.equals(\"1_day\")) {\n            begin_time.add(Calendar.DATE, -1);\n        } else if (interval.equals(\"2_day\")) {\n            begin_time.add(Calendar.DATE, -2);\n        } else if (interval.equals(\"7_day\")) {\n            begin_time.add(Calendar.DATE, -7);\n        } else if (interval.equals(\"1_month\")) {\n            begin_time.add(Calendar.DATE, -30);\n        } else if (interval.equals(\"6_month\")) {\n            begin_time.add(Calendar.DATE, -183);\n        } else if (interval.equals(\"1_year\")) {\n            begin_time.add(Calendar.DATE, -365);\n        } else {\n            // From current time, lets zero out the small components\n            begin_time.set(Calendar.HOUR_OF_DAY, 0);\n            begin_time.set(Calendar.MINUTE, 0);\n            begin_time.set(Calendar.SECOND, 0);\n            end_time.set(Calendar.HOUR_OF_DAY, 0);\n            end_time.set(Calendar.MINUTE, 0);\n            end_time.set(Calendar.SECOND, 0);\n\n            if (interval.equals(\"Today\")) {\n                end_time.add(Calendar.DATE, 1);\n            } else if (interval.equals(\"Yesterday\")) {\n                begin_time.add(Calendar.DATE, -1);\n            } else if (interval.equals(\"This Week\") || interval.equals(\"Last Week\")) {\n                begin_time.set(Calendar.DAY_OF_WEEK, 1);\n                end_time.set(Calendar.DAY_OF_WEEK, 7);\n                end_time.set(Calendar.HOUR_OF_DAY, 23);\n                end_time.set(Calendar.MINUTE, 59);\n                if (interval.equals(\"Last Week\")) {\n                    begin_time.add(Calendar.DATE, -7);\n                    end_time.add(Calendar.DATE, -7);\n                }\n            } else if (interval.equals(\"This Month\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.MONTH, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"Last Month\")) {\n                begin_time.add(Calendar.MONTH, -1);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"This Quarter\") || interval.equals(\"Last Quarter\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n\n                switch (begin_time.get(Calendar.MONTH)) {\n                case 0:\n                case 1:\n                case 2:\n                    begin_time.set(Calendar.MONTH, 0);\n                    end_time.set(Calendar.MONTH, 3);\n                    break;\n                case 3:\n                case 4:\n                case 5:\n                    begin_time.set(Calendar.MONTH, 3);\n                    end_time.set(Calendar.MONTH, 6);\n                    break;\n                case 6:\n                case 7:\n                case 8:\n                    begin_time.set(Calendar.MONTH, 6);\n                    end_time.set(Calendar.MONTH, 9);\n                    break;\n                case 9:\n                case 10:\n                case 11:\n                    begin_time.set(Calendar.MONTH, 9);\n                    end_time.set(Calendar.MONTH, 0);\n                    end_time.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid Calendar Month \" + begin_time.get(Calendar.MONTH));\n                }\n                if (interval.equals(\"Last Quarter\")) {\n                    begin_time.add(Calendar.MONTH, -3);\n                    end_time.add(Calendar.MONTH, -3);\n                }\n            } else if (interval.equals(\"This Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.YEAR, 1);\n            } else if (interval.equals(\"Last Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                begin_time.add(Calendar.YEAR, -1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n            } else {\n                throw new IllegalArgumentException(\"Unknown graph timespan: \" + interval);\n            }\n        }\n    }","id":7427,"modified_method":"/**\n     * This method requires begin time and end time to be set to the current\n     * time prior to call. The start and stop times are relative to this time.\n     * Init values as follows: begin_time = Calendar.getInstance(); end_time =\n     * Calendar.getInstance();\n     */\n    public static synchronized void getBeginEndTime(String interval, Calendar begin_time, Calendar end_time) throws IllegalArgumentException {\n        if (interval.equals(\"1_hour\")) {\n            begin_time.add(Calendar.HOUR, -1);\n        } else if (interval.equals(\"2_hour\")) {\n            begin_time.add(Calendar.HOUR, -2);\n        } else if (interval.equals(\"4_hour\")) {\n            begin_time.add(Calendar.HOUR, -4);\n        } else if (interval.equals(\"8_hour\")) {\n            begin_time.add(Calendar.HOUR, -8);\n        } else if (interval.equals(\"1_day\")) {\n            begin_time.add(Calendar.DATE, -1);\n        } else if (interval.equals(\"2_day\")) {\n            begin_time.add(Calendar.DATE, -2);\n        } else if (interval.equals(\"7_day\")) {\n            begin_time.add(Calendar.DATE, -7);\n        } else if (interval.equals(\"1_month\")) {\n            begin_time.add(Calendar.DATE, -30);\n        } else if (interval.equals(\"6_month\")) {\n            begin_time.add(Calendar.DATE, -183);\n        } else if (interval.equals(\"1_year\")) {\n            begin_time.add(Calendar.DATE, -365);\n        } else {\n            // From current time, lets zero out the small components\n            begin_time.set(Calendar.HOUR_OF_DAY, 0);\n            begin_time.set(Calendar.MINUTE, 0);\n            begin_time.set(Calendar.SECOND, 0);\n            end_time.set(Calendar.HOUR_OF_DAY, 0);\n            end_time.set(Calendar.MINUTE, 0);\n            end_time.set(Calendar.SECOND, 0);\n\n            if (interval.equals(\"Today\")) {\n                end_time.add(Calendar.DATE, 1);\n            } else if (interval.equals(\"Yesterday\")) {\n                begin_time.add(Calendar.DATE, -1);\n            } else if (interval.equals(\"This Week\") || interval.equals(\"Last Week\")) {\n                begin_time.set(Calendar.DAY_OF_WEEK, 1);\n                end_time.set(Calendar.DAY_OF_WEEK, 7);\n                end_time.set(Calendar.HOUR_OF_DAY, 23);\n                end_time.set(Calendar.MINUTE, 59);\n                if (interval.equals(\"Last Week\")) {\n                    begin_time.add(Calendar.DATE, -7);\n                    end_time.add(Calendar.DATE, -7);\n                }\n            } else if (interval.equals(\"This Month\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.MONTH, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"Last Month\")) {\n                begin_time.add(Calendar.MONTH, -1);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n            } else if (interval.equals(\"This Quarter\") || interval.equals(\"Last Quarter\")) {\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.DATE, 1);\n\n                switch (begin_time.get(Calendar.MONTH)) {\n                case 0:\n                case 1:\n                case 2:\n                    begin_time.set(Calendar.MONTH, 0);\n                    end_time.set(Calendar.MONTH, 3);\n                    break;\n                case 3:\n                case 4:\n                case 5:\n                    begin_time.set(Calendar.MONTH, 3);\n                    end_time.set(Calendar.MONTH, 6);\n                    break;\n                case 6:\n                case 7:\n                case 8:\n                    begin_time.set(Calendar.MONTH, 6);\n                    end_time.set(Calendar.MONTH, 9);\n                    break;\n                case 9:\n                case 10:\n                case 11:\n                    begin_time.set(Calendar.MONTH, 9);\n                    end_time.set(Calendar.MONTH, 0);\n                    end_time.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid Calendar Month \" + begin_time.get(Calendar.MONTH));\n                }\n                if (interval.equals(\"Last Quarter\")) {\n                    begin_time.add(Calendar.MONTH, -3);\n                    end_time.add(Calendar.MONTH, -3);\n                }\n            } else if (interval.equals(\"This Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n                end_time.add(Calendar.YEAR, 1);\n            } else if (interval.equals(\"Last Year\")) {\n                begin_time.set(Calendar.MONTH, 0);\n                begin_time.set(Calendar.DATE, 1);\n                begin_time.add(Calendar.YEAR, -1);\n                end_time.set(Calendar.MONTH, 0);\n                end_time.set(Calendar.DATE, 1);\n            } else {\n                throw new IllegalArgumentException(\"Unknown graph timespan: \" + interval);\n            }\n        }\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * KSC_PerformanceReportFactory\n     * \n     * @return the single KSC_PerformanceReportFactory instance\n     */\n    public static synchronized KSC_PerformanceReportFactory getInstance() throws IllegalStateException {\n        if (instance == null) {\n            throw new IllegalStateException(\"KSC_PerformanceReportFactory.init() must be called before KSC_PerformanceReportFactory.getInstance().\");\n        }\n\n        return instance;\n    }","id":7428,"modified_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * KSC_PerformanceReportFactory\n     * \n     * @return the single KSC_PerformanceReportFactory instance\n     */\n    public static synchronized KSC_PerformanceReportFactory getInstance() throws IllegalStateException {\n        assertInitialized();\n\n        return s_instance;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Parses the KSC_PerformanceReport.xml via the Castor classes */\n    public static synchronized void reload() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        KSC_PerformanceReportFile = ConfigFileConstants.getFile(ConfigFileConstants.KSC_REPORT_FILE_NAME);\n\n        InputStream configIn = new FileInputStream(KSC_PerformanceReportFile);\n        m_lastModified = KSC_PerformanceReportFile.lastModified();\n\n        m_config = (ReportsList) Unmarshaller.unmarshal(ReportsList.class, new InputStreamReader(configIn));\n    }","id":7429,"modified_method":"/**\n     * Parses the KSC_PerformanceReport.xml via the Castor classes.\n     * */\n    public synchronized void reload() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        s_configFile = ConfigFileConstants.getFile(ConfigFileConstants.KSC_REPORT_FILE_NAME);\n\n        FileReader rdr = new FileReader(s_configFile);\n        try {\n            m_config = CastorUtils.unmarshal(ReportsList.class, rdr);\n        } finally {\n            IOUtils.closeQuietly(rdr);\n        }\n        \n        setIdsOnAllReports();\n        \n        m_reportList = createReportList();\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Saves the KSC_PerformanceReport.xml data */\n    public synchronized void saveCurrent() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (instance == null) {\n            throw new IllegalStateException(\"KSC_PerformanceReportFactory.init() must be called before KSC_PerformanceReportFactory.saveCurrent().\");\n        }\n        sortByTitle();\n        // Marshall to a string first, then to file. This way the original\n        // config isn't lost if teh xml from the marshall is hosed.\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(m_config, stringWriter);\n        if (stringWriter.toString() != null) {\n            FileWriter fileWriter = new FileWriter(KSC_PerformanceReportFile);\n            fileWriter.write(stringWriter.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        reload();\n    }","id":7430,"modified_method":"/**\n     * Saves the KSC_PerformanceReport.xml data.\n     * */\n    public synchronized void saveCurrent() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        assertInitialized();\n\n        sortByTitle();\n        \n        /*\n         * Marshall to a string first, then to file. This way the original\n         * config is not lost if the XML from the marshall is hosed.\n         */\n        StringWriter stringWriter = new StringWriter();\n        Marshaller.marshal(m_config, stringWriter);\n        if (stringWriter.toString() != null) {\n            FileWriter fileWriter = new FileWriter(s_configFile);\n            fileWriter.write(stringWriter.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        \n        reload();\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Init routine. Must be called before calling getInstance() to instantiate * */\n    public static synchronized void init() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (instance == null) {\n            instance = new KSC_PerformanceReportFactory();\n            KSC_PerformanceReportFactory.reload();\n            KSC_PerformanceReportFactory.initialized = true;\n        }\n    }","id":7431,"modified_method":"/** Init routine. Must be called before calling getInstance() to instantiate * */\n    public static synchronized void init() throws IOException, FileNotFoundException, MarshalException, ValidationException {\n        if (isInitialized()) {\n            return;\n        }\n        \n        KSC_PerformanceReportFactory newInstance = new KSC_PerformanceReportFactory();\n        newInstance.reload();\n        \n        s_instance = newInstance;\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sorts the Reports List by their title. Simple bubble sort. */\n    public void sortByTitle() {\n        Report[] report_array = m_config.getReport();\n        for (int j = 0; j < report_array.length; j++) {\n            for (int i = j + 1; i < report_array.length; i++) {\n                if (report_array[i].getTitle().compareTo(report_array[j].getTitle()) < 0) {\n                    Report temp_report = report_array[j];\n                    report_array[j] = report_array[i];\n                    report_array[i] = temp_report;\n                }\n            }\n        }\n        m_config.setReport(report_array); // write back the sorted list\n    }","id":7432,"modified_method":"/**\n     * Sorts the Reports List by their title.\n     */\n    public void sortByTitle() {\n        Arrays.sort(m_config.getReport(), new Comparator<Report>() {\n            public int compare(Report o1, Report o2) {\n                return o1.getTitle().compareTo(o2.getTitle());\n            }\n        });\n    }","commit_id":"b5f3398c7c72a883b3830eb7a3bb1aa104d9ed62","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void loadAdditionalIndentOptions() {\n    myLoadedAdditionalIndentOptions = true;\n    final FileTypeIndentOptionsProvider[] providers = Extensions.getExtensions(FileTypeIndentOptionsProvider.EP_NAME);\n    for (final FileTypeIndentOptionsProvider provider : providers) {\n      if (!myAdditionalIndentOptions.containsKey(provider.getFileType())) {\n        registerAdditionalIndentOptions(provider.getFileType(), provider.createIndentOptions());\n      }\n    }\n  }","id":7433,"modified_method":"private void loadAdditionalIndentOptions() {\n    synchronized (myAdditionalIndentOptions) {\n      myLoadedAdditionalIndentOptions = true;\n      final FileTypeIndentOptionsProvider[] providers = Extensions.getExtensions(FileTypeIndentOptionsProvider.EP_NAME);\n      for (final FileTypeIndentOptionsProvider provider : providers) {\n        if (!myAdditionalIndentOptions.containsKey(provider.getFileType())) {\n          registerAdditionalIndentOptions(provider.getFileType(), provider.createIndentOptions());\n        }\n      }\n    }\n  }","commit_id":"21f158b937ea1e8db8f707714d65c31f0111298e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean equals(Object other) {\n      if (other instanceof TypeToNameMap) {\n        TypeToNameMap otherMap = (TypeToNameMap)other;\n        if (myPatterns.size() != otherMap.myPatterns.size()) {\n          return false;\n        }\n        if (myNames.size() != otherMap.myNames.size()) {\n          return false;\n        }\n        for (int i = 0; i < myPatterns.size(); i++) {\n          String s1 = myPatterns.get(i);\n          String s2 = otherMap.myPatterns.get(i);\n          if (!Comparing.equal(s1, s2)) {\n            return false;\n          }\n        }\n        for (int i = 0; i < myNames.size(); i++) {\n          String s1 = myNames.get(i);\n          String s2 = otherMap.myNames.get(i);\n          if (!Comparing.equal(s1, s2)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return false;\n    }","id":7434,"modified_method":"public boolean equals(Object other) {\n      if (other instanceof TypeToNameMap) {\n        TypeToNameMap otherMap = (TypeToNameMap)other;\n        return myPatterns.equals(otherMap.myPatterns) && myNames.equals(otherMap.myNames);\n      }\n      return false;\n    }","commit_id":"21f158b937ea1e8db8f707714d65c31f0111298e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void registerAdditionalIndentOptions(FileType fileType, IndentOptions options) {\n    boolean exist = false;\n    for (final FileType existing : myAdditionalIndentOptions.keySet()) {\n      if (existing.getDefaultExtension() == fileType.getDefaultExtension()) {\n        exist = true;\n        break;\n      }\n    }\n\n    if (!exist) {\n      myAdditionalIndentOptions.put(fileType, options);\n    }\n  }","id":7435,"modified_method":"private void registerAdditionalIndentOptions(FileType fileType, IndentOptions options) {\n    boolean exist = false;\n    for (final FileType existing : myAdditionalIndentOptions.keySet()) {\n      if (Comparing.strEqual(existing.getDefaultExtension(), fileType.getDefaultExtension())) {\n        exist = true;\n        break;\n      }\n    }\n\n    if (!exist) {\n      myAdditionalIndentOptions.put(fileType, options);\n    }\n  }","commit_id":"21f158b937ea1e8db8f707714d65c31f0111298e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean eq(PsiType t1, PsiType t2) {\n    return !TypeConversionUtil.erasure(t1).equals(TypeConversionUtil.erasure(t2));\n  }","id":7436,"modified_method":"private static boolean eq(PsiType t1, PsiType t2) {\n    return Comparing.equal(TypeConversionUtil.erasure(t1), TypeConversionUtil.erasure(t2));\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addMixin(@Nullable PsiType mixin, ConditionInstruction instruction) {\n    mixins.add(new Mixin(mixin, instruction, false));\n  }","id":7437,"modified_method":"public void addMixin(@Nullable PsiType mixin, ConditionInstruction instruction) {\n    if (mixin == null) {\n      return;\n    }\n\n    mixins.add(new Mixin(mixin, instruction, false));\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiType getInferredTypeNew(@NotNull final GrReferenceExpression refExpr) {\n    final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(refExpr);\n    if (scope == null) return null;\n\n    return inferVariableTypes(scope).getInferredType(refExpr.getReferenceName(), findInstruction(refExpr, scope.getControlFlow()));\n  }","id":7438,"modified_method":"@Nullable\n  public static PsiType getInferredTypeOld(@NotNull final GrReferenceExpression refExpr) {\n    return RecursionManager.doPreventingRecursion(refExpr, true, new NullableComputable<PsiType>() {\n      @Override\n      public PsiType compute() {\n        final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(refExpr);\n        if (scope == null) return null;\n\n        final Instruction[] flow = scope.getControlFlow();\n        ReadWriteVariableInstruction instruction = findInstruction(refExpr, flow);\n        if (instruction == null) return null;\n\n        if (instruction.isWrite()) {\n          return getInitializerType(refExpr);\n        }\n\n        final DFAType type = getInferredType(refExpr.getReferenceName(), instruction, flow, scope, new HashSet<MixinTypeInstruction>());\n        return type == null ? null : type.getResultType();\n      }\n    });\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static <T> T doInference(TypeDfaState bindings, Computable<T> computation) {\n    InferenceContext old = ourInferenceContext.get();\n    ourInferenceContext.set(new InferenceContext.PartialContext(bindings.getBindings()));\n    try {\n      return computation.compute();\n    }\n    finally {\n      ourInferenceContext.set(old);\n    }\n  }","id":7439,"modified_method":"private static <T> T doInference(Map<String, PsiType> bindings, Computable<T> computation) {\n    InferenceContext old = ourInferenceContext.get();\n    ourInferenceContext.set(new InferenceContext.PartialContext(bindings));\n    try {\n      return computation.compute();\n    }\n    finally {\n      ourInferenceContext.set(old);\n    }\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void handleMixin(final TypeDfaState state, final MixinTypeInstruction instruction) {\n      final String varName = instruction.getVariableName();\n      state.putType(varName, doInference(state, new Computable<PsiType>() {\n        @Override\n        public PsiType compute() {\n          PsiType original = state.getBindings().get(varName);\n          final PsiType mixin = instruction.inferMixinType();\n          if (mixin == null) return original;\n          if (original == null) return mixin;\n          return PsiIntersectionType.createIntersection(original, mixin);\n        }\n      }));\n    }","id":7440,"modified_method":"private void handleMixin(final TypeDfaState state, final MixinTypeInstruction instruction) {\n      final String varName = instruction.getVariableName();\n      if (varName == null) return;\n\n      state.putType(varName, doInference(state.getBindings(instruction), new NullableComputable<DFAType>() {\n        @Override\n        public DFAType compute() {\n          ReadWriteVariableInstruction originalInstr = instruction.getInstructionToMixin(myFlow);\n          assert originalInstr != null && !originalInstr.isWrite();\n\n          DFAType original = state.getVariableType(varName).negate(originalInstr);\n          original.addMixin(instruction.inferMixinType(), instruction.getConditionInstruction());\n          return original;\n        }\n      }));\n    }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiType getInferredType(@NotNull final GrReferenceExpression refExpr) {\n    return RecursionManager.doPreventingRecursion(refExpr, true, new NullableComputable<PsiType>() {\n      @Override\n      public PsiType compute() {\n        final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(refExpr);\n        if (scope == null) return null;\n\n        final Instruction[] flow = scope.getControlFlow();\n        ReadWriteVariableInstruction instruction = findInstruction(refExpr, flow);\n        if (instruction == null) return null;\n\n        if (instruction.isWrite()) {\n          return getInitializerType(refExpr);\n        }\n\n        final DFAType type = getInferredType(refExpr.getReferenceName(), instruction, flow, scope, new HashSet<MixinTypeInstruction>());\n        return type == null ? null : type.getResultType();\n      }\n    });\n  }","id":7441,"modified_method":"@Nullable\n  public static PsiType getInferredType(@NotNull final GrReferenceExpression refExpr) {\n    final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(refExpr);\n    if (scope == null) return null;\n\n    return inferVariableTypes(scope).getInferredType(refExpr.getReferenceName(), findInstruction(refExpr, scope.getControlFlow()));\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static List<Map<String, PsiType>> performTypeDfa(GrControlFlowOwner owner, Instruction[] flow) {\n    final TypeDfaInstance dfaInstance = new TypeDfaInstance(owner);\n    final TypesSemilattice semilattice = new TypesSemilattice(owner.getManager());\n    List<TypeDfaState> states = new DFAEngine<TypeDfaState>(flow, dfaInstance, semilattice).performDFAWithTimeout();\n    return states == null ? null : ContainerUtil.map(states, new Function<TypeDfaState, Map<String, PsiType>>() {\n      @Override\n      public Map<String, PsiType> fun(TypeDfaState state) {\n        return state.getBindings();\n      }\n    });\n  }","id":7442,"modified_method":"@Nullable\n  private static List<Map<String, PsiType>> performTypeDfa(GrControlFlowOwner owner, Instruction[] flow) {\n    final TypeDfaInstance dfaInstance = new TypeDfaInstance(owner, flow);\n    final TypesSemilattice semilattice = new TypesSemilattice(owner.getManager());\n    List<TypeDfaState> states = new DFAEngine<TypeDfaState>(flow, dfaInstance, semilattice).performDFAWithTimeout();\n    if (states == null) return null;\n\n    List<Map<String, PsiType>> result = ContainerUtil.newArrayList();\n    for (int i = 0; i < states.size(); i++) {\n      result.add(states.get(i).getBindings(flow[i]));\n    }\n    return result;\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void handleVariableWrite(TypeDfaState state, ReadWriteVariableInstruction instruction) {\n      final PsiElement element = instruction.getElement();\n      if (element != null && instruction.isWrite()) {\n        state.putType(instruction.getVariableName(), doInference(state, new Computable<PsiType>() {\n          @Override\n          public PsiType compute() {\n            return TypesUtil.boxPrimitiveType(getInitializerType(element), myScope.getManager(), myScope.getResolveScope());\n          }\n        }));\n      }\n    }","id":7443,"modified_method":"private void handleVariableWrite(TypeDfaState state, ReadWriteVariableInstruction instruction) {\n      final PsiElement element = instruction.getElement();\n      if (element != null && instruction.isWrite()) {\n        state.putType(instruction.getVariableName(), doInference(state.getBindings(instruction), new Computable<DFAType>() {\n          @Override\n          public DFAType compute() {\n            return DFAType.create(TypesUtil.boxPrimitiveType(getInitializerType(element), myScope.getManager(), myScope.getResolveScope()));\n          }\n        }));\n      }\n    }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiType getInferredTypeNew(@NotNull PsiElement place, String variableName) {\n    final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(place);\n    if (scope == null) return null;\n\n    return inferVariableTypes(scope).getInferredType(variableName, findInstructionAt(place, scope.getControlFlow()));\n  }","id":7444,"modified_method":"@Nullable\n  public static PsiType getInferredTypeOld(@NotNull PsiElement place, String variableName) {\n    final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(place);\n    if (scope == null) return null;\n\n    final Instruction[] flow = scope.getControlFlow();\n    Instruction instruction = findInstructionAt(place, flow);\n    if (instruction == null) return null;\n\n    final DFAType type = getInferredType(variableName, instruction, flow, scope, new HashSet<MixinTypeInstruction>());\n    return type != null ? type.getResultType() : null;\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiType getInferredType(@NotNull PsiElement place, String variableName) {\n    final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(place);\n    if (scope == null) return null;\n\n    final Instruction[] flow = scope.getControlFlow();\n    Instruction instruction = findInstructionAt(place, flow);\n    if (instruction == null) return null;\n\n    final DFAType type = getInferredType(variableName, instruction, flow, scope, new HashSet<MixinTypeInstruction>());\n    return type != null ? type.getResultType() : null;\n  }","id":7445,"modified_method":"@Nullable\n  public static PsiType getInferredType(@NotNull PsiElement place, String variableName) {\n    final GrControlFlowOwner scope = ControlFlowUtils.findControlFlowOwner(place);\n    if (scope == null) return null;\n\n    return inferVariableTypes(scope).getInferredType(variableName, findInstructionAt(place, scope.getControlFlow()));\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean areTypesErasureEqual(Map<String, PsiType> another, String name) {\n    if (!another.containsKey(name)) return false;\n    final PsiType t1 = myVarTypes.get(name);\n    final PsiType t2 = another.get(name);\n    if (t1 == null || t2 == null) {\n      if (t1 != null || t2 != null) return false;\n    }\n    else {\n      if (!TypeConversionUtil.erasure(t1).equals(TypeConversionUtil.erasure(t2))) return false;\n    }\n    return true;\n  }","id":7446,"modified_method":"Map<String, PsiType> getBindings(Instruction instruction) {\n    HashMap<String,PsiType> map = ContainerUtil.newHashMap();\n    for (Map.Entry<String, DFAType> entry : myVarTypes.entrySet()) {\n      DFAType value = entry.getValue();\n      map.put(entry.getKey(), value == null ? null : value.negate(instruction).getResultType());\n    }\n    return map;\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void joinState(TypeDfaState another, PsiManager manager) {\n    for (Map.Entry<String, PsiType> entry : another.myVarTypes.entrySet()) {\n      final String name = entry.getKey();\n      final PsiType t1 = entry.getValue();\n      if (myVarTypes.containsKey(name)) {\n        final PsiType t2 = myVarTypes.get(name);\n        if (t1 != null && t2 != null) {\n          myVarTypes.put(name, TypesUtil.getLeastUpperBound(t1, t2, manager));\n        }\n        else {\n          myVarTypes.put(name, null);\n        }\n      }\n    }\n  }","id":7447,"modified_method":"void joinState(TypeDfaState another, PsiManager manager) {\n    for (Map.Entry<String, DFAType> entry : another.myVarTypes.entrySet()) {\n      final String name = entry.getKey();\n      final DFAType t1 = entry.getValue();\n      if (myVarTypes.containsKey(name)) {\n        final DFAType t2 = myVarTypes.get(name);\n        if (t1 != null && t2 != null) {\n          myVarTypes.put(name, DFAType.create(t1, t2, manager));\n        }\n        else {\n          myVarTypes.put(name, null);\n        }\n      }\n    }\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void putType(String variableName, PsiType type) {\n    myVarTypes.put(variableName, type);\n  }","id":7448,"modified_method":"void putType(String variableName, DFAType type) {\n    myVarTypes.put(variableName, type);\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"boolean contentsEqual(TypeDfaState another) {\n    if (myVarTypes.size() != another.myVarTypes.size()) {\n      return false;\n    }\n\n    for (String name : myVarTypes.keySet()) {\n      if (!areTypesErasureEqual(another.myVarTypes, name)) {\n        return false;\n      }\n    }\n    return true;\n  }","id":7449,"modified_method":"boolean contentsEqual(TypeDfaState another) {\n    return myVarTypes.equals(another.myVarTypes);\n  }","commit_id":"ca49b5342f46bef928f437d42ffab136246e180f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected String getNextVersion(\n\t\tDLFileEntry fileEntry, boolean majorVersion) {\n\n\t\tString version = fileEntry.getVersion();\n\n\t\tif (DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileEntry.getPendingVersion()) < 0) {\n\n\t\t\tversion = fileEntry.getPendingVersion();\n\t\t}\n\n\t\tint[] versionParts = StringUtil.split(version, StringPool.PERIOD, 0);\n\n\t\tif (majorVersion) {\n\t\t\tversionParts[0]++;\n\t\t\tversionParts[1] = 0;\n\t\t}\n\t\telse {\n\t\t\tversionParts[1]++;\n\t\t}\n\n\t\treturn versionParts[0] + StringPool.PERIOD + versionParts[1];\n\t}","id":7450,"modified_method":"protected String getNextVersion(\n\t\tDLFileEntry fileEntry, boolean majorVersion, int status) {\n\n\t\tif ((status == StatusConstants.DRAFT) &&\n\t\t\tValidator.isNotNull(fileEntry.getPendingVersion())) {\n\n\t\t\treturn fileEntry.getPendingVersion();\n\t\t}\n\n\t\tif (Validator.isNull(fileEntry.getVersion())) {\n\t\t\treturn DLFileEntryConstants.DEFAULT_VERSION;\n\t\t}\n\n\t\tint[] versionParts = StringUtil.split(\n\t\t\tfileEntry.getVersion(), StringPool.PERIOD, 0);\n\n\t\tif (majorVersion) {\n\t\t\tversionParts[0]++;\n\t\t\tversionParts[1] = 0;\n\t\t}\n\t\telse {\n\t\t\tversionParts[1]++;\n\t\t}\n\n\t\treturn versionParts[0] + StringPool.PERIOD + versionParts[1];\n\t}","commit_id":"a4432e475511a9c73f720dd8f67e06b48f4086c2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteFileEntry(\n\t\t\tlong groupId, long folderId, String name, String version)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tif (Validator.isNotNull(version)) {\n\t\t\ttry {\n\t\t\t\tdlService.deleteFile(\n\t\t\t\t\tfileEntry.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\t\tfileEntry.getRepositoryId(), fileEntry.getName(), version);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(e, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlFileVersionPersistence.removeByG_F_N_V(\n\t\t\t\tgroupId, folderId, name, version);\n\n\t\t\tif (version.equals(fileEntry.getVersion())) {\n\t\t\t\ttry {\n\t\t\t\t\tDLFileVersion fileVersion =\n\t\t\t\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\n\t\t\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileVersionException nsfve) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdeleteFileEntry(fileEntry);\n\t\t}\n\t}","id":7451,"modified_method":"public void deleteFileEntry(\n\t\t\tlong groupId, long folderId, String name, String version)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tif (Validator.isNotNull(version)) {\n\t\t\ttry {\n\t\t\t\tdlService.deleteFile(\n\t\t\t\t\tfileEntry.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\t\tfileEntry.getRepositoryId(), fileEntry.getName(), version);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(e, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlFileVersionPersistence.removeByG_F_N_V(\n\t\t\t\tgroupId, folderId, name, version);\n\n\t\t\tif (version.equals(fileEntry.getVersion())) {\n\t\t\t\ttry {\n\t\t\t\t\tDLFileVersion fileVersion =\n\t\t\t\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileVersionException nsfve) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (version.equals(fileEntry.getPendingVersion())) {\n\t\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t\t}\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse {\n\t\t\tdeleteFileEntry(fileEntry);\n\t\t}\n\t}","commit_id":"a4432e475511a9c73f720dd8f67e06b48f4086c2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry addFileEntry(\n\t\t\tString uuid, long userId, long groupId, long folderId, String name,\n\t\t\tString title, String description, String versionDescription,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tfolderId = getFolderId(user.getCompanyId(), folderId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = name;\n\t\t}\n\n\t\tname = String.valueOf(\n\t\t\tcounterLocalService.increment(DLFileEntry.class.getName()));\n\n\t\tDate now = new Date();\n\n\t\tvalidate(groupId, folderId, title, is);\n\n\t\tlong fileEntryId = counterLocalService.increment();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.create(fileEntryId);\n\n\t\tfileEntry.setUuid(uuid);\n\t\tfileEntry.setGroupId(groupId);\n\t\tfileEntry.setCompanyId(user.getCompanyId());\n\t\tfileEntry.setUserId(user.getUserId());\n\t\tfileEntry.setUserName(user.getFullName());\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setCreateDate(serviceContext.getCreateDate(now));\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setFolderId(folderId);\n\t\tfileEntry.setName(name);\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\n\t\tif (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// File version\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now),\n\t\t\tfileEntry.getVersion(), null, serviceContext.getStatus());\n\n\t\t// Folder\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(folderId);\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, fileEntry.getUserName(), DLFileEntry.class.getName(),\n\t\t\t\tfileEntryId, StatusConstants.APPROVED);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.addFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tfileEntryId, fileEntry.getLuceneProperties(),\n\t\t\tfileEntry.getModifiedDate(), serviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntryId, fileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7452,"modified_method":"public DLFileEntry addFileEntry(\n\t\t\tString uuid, long userId, long groupId, long folderId, String name,\n\t\t\tString title, String description, String versionDescription,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tfolderId = getFolderId(user.getCompanyId(), folderId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = name;\n\t\t}\n\n\t\tname = String.valueOf(\n\t\t\tcounterLocalService.increment(DLFileEntry.class.getName()));\n\n\t\tDate now = new Date();\n\n\t\tvalidate(groupId, folderId, title, is);\n\n\t\tlong fileEntryId = counterLocalService.increment();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.create(fileEntryId);\n\n\t\tfileEntry.setUuid(uuid);\n\t\tfileEntry.setGroupId(groupId);\n\t\tfileEntry.setCompanyId(user.getCompanyId());\n\t\tfileEntry.setUserId(user.getUserId());\n\t\tfileEntry.setUserName(user.getFullName());\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setCreateDate(serviceContext.getCreateDate(now));\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setFolderId(folderId);\n\t\tfileEntry.setName(name);\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\n\t\tif (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// File version\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now),\n\t\t\tDLFileEntryConstants.DEFAULT_VERSION, null,\n\t\t\tserviceContext.getStatus());\n\n\t\t// Folder\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(folderId);\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, fileEntry.getUserName(), DLFileEntry.class.getName(),\n\t\t\t\tfileEntryId, StatusConstants.APPROVED);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.addFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tfileEntryId, fileEntry.getLuceneProperties(),\n\t\t\tfileEntry.getModifiedDate(), serviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntryId, fileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"a4432e475511a9c73f720dd8f67e06b48f4086c2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry updateWorkflowStatus(\n\t\t\tlong userId, long fileEntryId, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByPrimaryKey(\n\t\t\tfileEntryId);\n\n\t\t// File version\n\n\t\tDLFileVersion fileVersion =\n\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\tfileVersion.setStatus(serviceContext.getStatus());\n\t\tfileVersion.setStatusByUserId(user.getUserId());\n\t\tfileVersion.setStatusByUserName(user.getFullName());\n\t\tfileVersion.setStatusDate(new Date());\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileVersion.getVersion(),\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION) < 0)) {\n\n\t\t\tfileVersion.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\n\t\tdlFileVersionPersistence.update(fileVersion, false);\n\n\t\t// File entry\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) < 0)) {\n\n\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse if (!fileVersion.isApproved() &&\n\t\t\t\t (DLUtil.compareVersions(\n\t\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tString newVersion = DLFileEntryConstants.DEFAULT_VERSION;\n\n\t\t\tif (DLUtil.compareVersions(\n\t\t\t\t\tfileVersion.getVersion(), newVersion) > 1) {\n\n\t\t\t\tList<DLFileVersion> approvedFileVersions =\n\t\t\t\t\tdlFileVersionPersistence.findByG_F_N_S(\n\t\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\t\tfileEntry.getName(), StatusConstants.APPROVED);\n\n\t\t\t\tif (!approvedFileVersions.isEmpty()) {\n\t\t\t\t\tnewVersion = approvedFileVersions.get(0).getVersion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfileEntry.setPendingVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setVersion(newVersion);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\ttrue);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\tfalse);\n\t\t}\n\n\t\t// Social\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tif (fileVersion.getVersion().equals(\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsocialActivityLocalService.addUniqueActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.ADD_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.UPDATE_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(DLFileEntry.class);\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tindexer.reindex(fileEntry);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tindexer.delete(fileEntry);\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7453,"modified_method":"public DLFileEntry updateWorkflowStatus(\n\t\t\tlong userId, long fileEntryId, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByPrimaryKey(\n\t\t\tfileEntryId);\n\n\t\t// File version\n\n\t\tDLFileVersion fileVersion =\n\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\tfileVersion.setStatus(serviceContext.getStatus());\n\t\tfileVersion.setStatusByUserId(user.getUserId());\n\t\tfileVersion.setStatusByUserName(user.getFullName());\n\t\tfileVersion.setStatusDate(new Date());\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileVersion.getVersion(),\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION) < 0)) {\n\n\t\t\tfileVersion.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\n\t\tdlFileVersionPersistence.update(fileVersion, false);\n\n\t\t// File entry\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) < 0)) {\n\n\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse if (!fileVersion.isApproved() &&\n\t\t\t\t (DLUtil.compareVersions(\n\t\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tString newVersion = DLFileEntryConstants.DEFAULT_VERSION;\n\n\t\t\tif (DLUtil.compareVersions(\n\t\t\t\t\tfileVersion.getVersion(), newVersion) > 1) {\n\n\t\t\t\tList<DLFileVersion> approvedFileVersions =\n\t\t\t\t\tdlFileVersionPersistence.findByG_F_N_S(\n\t\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\t\tfileEntry.getName(), StatusConstants.APPROVED);\n\n\t\t\t\tif (!approvedFileVersions.isEmpty()) {\n\t\t\t\t\tnewVersion = approvedFileVersions.get(0).getVersion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfileEntry.setPendingVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setVersion(newVersion);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\ttrue);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\tfalse);\n\t\t}\n\n\t\t// Social\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tif (fileVersion.getVersion().equals(\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsocialActivityLocalService.addUniqueActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.ADD_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.UPDATE_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(DLFileEntry.class);\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tindexer.reindex(fileEntry);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tindexer.delete(fileEntry);\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"a4432e475511a9c73f720dd8f67e06b48f4086c2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry updateFileEntry(\n\t\t\tlong userId, long groupId, long folderId, long newFolderId,\n\t\t\tString name, String sourceFileName, String title,\n\t\t\tString description, String versionDescription, boolean majorVersion,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = sourceFileName;\n\n\t\t\tif (Validator.isNull(title)) {\n\t\t\t\ttitle = name;\n\t\t\t}\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tvalidate(\n\t\t\tgroupId, folderId, newFolderId, name, title, sourceFileName, is);\n\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Move file entry\n\n\t\tif (folderId != newFolderId) {\n\t\t\tlong oldFileEntryId = fileEntry.getFileEntryId();\n\n\t\t\tif (dlLocalService.hasFile(\n\t\t\t\t\tuser.getCompanyId(),\n\t\t\t\t\tDLFileEntryImpl.getRepositoryId(groupId, newFolderId),\n\t\t\t\t\tname, StringPool.BLANK)) {\n\n\t\t\t\tthrow new DuplicateFileException(name);\n\t\t\t}\n\n\t\t\tlong newFileEntryId = counterLocalService.increment();\n\n\t\t\tDLFileEntry newFileEntry = dlFileEntryPersistence.create(\n\t\t\t\tnewFileEntryId);\n\n\t\t\tnewFileEntry.setGroupId(fileEntry.getGroupId());\n\t\t\tnewFileEntry.setCompanyId(fileEntry.getCompanyId());\n\t\t\tnewFileEntry.setUserId(fileEntry.getUserId());\n\t\t\tnewFileEntry.setUserName(fileEntry.getUserName());\n\t\t\tnewFileEntry.setVersionUserId(fileEntry.getVersionUserId());\n\t\t\tnewFileEntry.setVersionUserName(fileEntry.getVersionUserName());\n\t\t\tnewFileEntry.setCreateDate(fileEntry.getCreateDate());\n\t\t\tnewFileEntry.setModifiedDate(fileEntry.getModifiedDate());\n\t\t\tnewFileEntry.setFolderId(newFolderId);\n\t\t\tnewFileEntry.setName(name);\n\t\t\tnewFileEntry.setTitle(fileEntry.getTitle());\n\t\t\tnewFileEntry.setDescription(fileEntry.getDescription());\n\t\t\tnewFileEntry.setVersion(fileEntry.getVersion());\n\t\t\tnewFileEntry.setSize(fileEntry.getSize());\n\t\t\tnewFileEntry.setReadCount(fileEntry.getReadCount());\n\t\t\tnewFileEntry.setExtraSettings(extraSettings);\n\n\t\t\tdlFileEntryPersistence.update(newFileEntry, false);\n\n\t\t\tdlFileEntryPersistence.remove(fileEntry);\n\n\t\t\tList<DLFileVersion> fileVersions =\n\t\t\t\tdlFileVersionPersistence.findByG_F_N(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileVersion fileVersion : fileVersions) {\n\t\t\t\tlong newFileVersionId = counterLocalService.increment();\n\n\t\t\t\tDLFileVersion newFileVersion = dlFileVersionPersistence.create(\n\t\t\t\t\tnewFileVersionId);\n\n\t\t\t\tnewFileVersion.setGroupId(fileVersion.getGroupId());\n\t\t\t\tnewFileVersion.setCompanyId(fileVersion.getCompanyId());\n\t\t\t\tnewFileVersion.setUserId(fileVersion.getUserId());\n\t\t\t\tnewFileVersion.setUserName(fileVersion.getUserName());\n\t\t\t\tnewFileVersion.setCreateDate(fileVersion.getCreateDate());\n\t\t\t\tnewFileVersion.setFolderId(newFolderId);\n\t\t\t\tnewFileVersion.setName(name);\n\t\t\t\tnewFileVersion.setVersion(fileVersion.getVersion());\n\t\t\t\tnewFileVersion.setSize(fileVersion.getSize());\n\t\t\t\tnewFileVersion.setStatus(fileVersion.getStatus());\n\t\t\t\tnewFileVersion.setStatusByUserId(userId);\n\t\t\t\tnewFileVersion.setStatusByUserName(user.getFullName());\n\t\t\t\tnewFileVersion.setStatusDate(\n\t\t\t\t\tserviceContext.getModifiedDate(now));\n\n\t\t\t\tdlFileVersionPersistence.update(newFileVersion, false);\n\n\t\t\t\tdlFileVersionPersistence.remove(fileVersion);\n\t\t\t}\n\n\t\t\tdlFileShortcutLocalService.updateFileShortcuts(\n\t\t\t\tgroupId, folderId, name, newFolderId, name);\n\n\t\t\t// Resources\n\n\t\t\tResource resource = resourceLocalService.getResource(\n\t\t\t\tfileEntry.getCompanyId(), DLFileEntry.class.getName(),\n\t\t\t\tResourceConstants.SCOPE_INDIVIDUAL,\n\t\t\t\tString.valueOf(fileEntry.getFileEntryId()));\n\n\t\t\tresource.setPrimKey(String.valueOf(newFileEntryId));\n\n\t\t\tresourcePersistence.update(resource, false);\n\n\t\t\t// Asset\n\n\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\tList<DLFileShortcut> fileShortcuts =\n\t\t\t\tdlFileShortcutPersistence.findByG_TF_TN(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\t\tDLFileShortcut.class.getName(),\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t\t}\n\n\t\t\t// Expando\n\n\t\t\texpandoValueLocalService.deleteValues(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// Ratings\n\n\t\t\tRatingsStats stats = ratingsStatsLocalService.getStats(\n\t\t\t\tDLFileEntry.class.getName(), oldFileEntryId);\n\n\t\t\tstats.setClassPK(newFileEntryId);\n\n\t\t\tratingsStatsPersistence.update(stats, false);\n\n\t\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\tDLFileEntry.class.getName());\n\n\t\t\tList<RatingsEntry> entries = ratingsEntryPersistence.findByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tfor (RatingsEntry entry : entries) {\n\t\t\t\tentry.setClassPK(newFileEntryId);\n\n\t\t\t\tratingsEntryPersistence.update(entry, false);\n\t\t\t}\n\n\t\t\t// Message boards\n\n\t\t\tMBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tif (discussion != null) {\n\t\t\t\tdiscussion.setClassPK(newFileEntryId);\n\n\t\t\t\tmbDiscussionPersistence.update(discussion, false);\n\t\t\t}\n\n\t\t\t// Social\n\n\t\t\tsocialActivityLocalService.deleteActivities(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// File\n\n\t\t\tdlService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tnewFileEntry.getGroupId(), fileEntry.getRepositoryId(),\n\t\t\t\tnewFileEntry.getRepositoryId(), name, newFileEntryId);\n\n\t\t\tfolderId = newFolderId;\n\t\t\tfileEntry = newFileEntry;\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// File version\n\n\t\tString version = getNextVersion(fileEntry, majorVersion);\n\n\t\tif (is == null) {\n\t\t\tfileEntry.setVersion(version);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t\tint fetchFailures = 0;\n\n\t\t\twhile (is == null) {\n\t\t\t\ttry {\n\t\t\t\t\tis = dlLocalService.getFileAsStream(\n\t\t\t\t\t\tuser.getCompanyId(), fileEntry.getRepositoryId(), name);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t\t\tfetchFailures++;\n\n\t\t\t\t\tif (PropsValues.DL_HOOK_IMPL.equals(\n\t\t\t\t\t\t\tJCRHook.class.getName()) &&\n\t\t\t\t\t\t(fetchFailures <\n\t\t\t\t\t\t\tPropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nsfe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlLocalService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name,\n\t\t\t\tfalse, version, name, fileEntry.getFileEntryId(),\n\t\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\t\tserviceContext, is);\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\tversionDescription, serviceContext.getStatus());\n\n\t\t// File entry\n\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setVersion(version);\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Folder\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.updateFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tversion, sourceFileName, fileEntry.getFileEntryId(),\n\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\tserviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\t\tfileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7454,"modified_method":"public DLFileEntry updateFileEntry(\n\t\t\tlong userId, long groupId, long folderId, long newFolderId,\n\t\t\tString name, String sourceFileName, String title,\n\t\t\tString description, String versionDescription, boolean majorVersion,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = sourceFileName;\n\n\t\t\tif (Validator.isNull(title)) {\n\t\t\t\ttitle = name;\n\t\t\t}\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tvalidate(\n\t\t\tgroupId, folderId, newFolderId, name, title, sourceFileName, is);\n\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Move file entry\n\n\t\tif (folderId != newFolderId) {\n\t\t\tlong oldFileEntryId = fileEntry.getFileEntryId();\n\n\t\t\tif (dlLocalService.hasFile(\n\t\t\t\t\tuser.getCompanyId(),\n\t\t\t\t\tDLFileEntryImpl.getRepositoryId(groupId, newFolderId),\n\t\t\t\t\tname, StringPool.BLANK)) {\n\n\t\t\t\tthrow new DuplicateFileException(name);\n\t\t\t}\n\n\t\t\tlong newFileEntryId = counterLocalService.increment();\n\n\t\t\tDLFileEntry newFileEntry = dlFileEntryPersistence.create(\n\t\t\t\tnewFileEntryId);\n\n\t\t\tnewFileEntry.setGroupId(fileEntry.getGroupId());\n\t\t\tnewFileEntry.setCompanyId(fileEntry.getCompanyId());\n\t\t\tnewFileEntry.setUserId(fileEntry.getUserId());\n\t\t\tnewFileEntry.setUserName(fileEntry.getUserName());\n\t\t\tnewFileEntry.setVersionUserId(fileEntry.getVersionUserId());\n\t\t\tnewFileEntry.setVersionUserName(fileEntry.getVersionUserName());\n\t\t\tnewFileEntry.setCreateDate(fileEntry.getCreateDate());\n\t\t\tnewFileEntry.setModifiedDate(fileEntry.getModifiedDate());\n\t\t\tnewFileEntry.setFolderId(newFolderId);\n\t\t\tnewFileEntry.setName(name);\n\t\t\tnewFileEntry.setTitle(fileEntry.getTitle());\n\t\t\tnewFileEntry.setDescription(fileEntry.getDescription());\n\t\t\tnewFileEntry.setVersion(fileEntry.getVersion());\n\t\t\tnewFileEntry.setSize(fileEntry.getSize());\n\t\t\tnewFileEntry.setReadCount(fileEntry.getReadCount());\n\t\t\tnewFileEntry.setExtraSettings(extraSettings);\n\n\t\t\tdlFileEntryPersistence.update(newFileEntry, false);\n\n\t\t\tdlFileEntryPersistence.remove(fileEntry);\n\n\t\t\tList<DLFileVersion> fileVersions =\n\t\t\t\tdlFileVersionPersistence.findByG_F_N(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileVersion fileVersion : fileVersions) {\n\t\t\t\tlong newFileVersionId = counterLocalService.increment();\n\n\t\t\t\tDLFileVersion newFileVersion = dlFileVersionPersistence.create(\n\t\t\t\t\tnewFileVersionId);\n\n\t\t\t\tnewFileVersion.setGroupId(fileVersion.getGroupId());\n\t\t\t\tnewFileVersion.setCompanyId(fileVersion.getCompanyId());\n\t\t\t\tnewFileVersion.setUserId(fileVersion.getUserId());\n\t\t\t\tnewFileVersion.setUserName(fileVersion.getUserName());\n\t\t\t\tnewFileVersion.setCreateDate(fileVersion.getCreateDate());\n\t\t\t\tnewFileVersion.setFolderId(newFolderId);\n\t\t\t\tnewFileVersion.setName(name);\n\t\t\t\tnewFileVersion.setVersion(fileVersion.getVersion());\n\t\t\t\tnewFileVersion.setSize(fileVersion.getSize());\n\t\t\t\tnewFileVersion.setStatus(fileVersion.getStatus());\n\t\t\t\tnewFileVersion.setStatusByUserId(userId);\n\t\t\t\tnewFileVersion.setStatusByUserName(user.getFullName());\n\t\t\t\tnewFileVersion.setStatusDate(\n\t\t\t\t\tserviceContext.getModifiedDate(now));\n\n\t\t\t\tdlFileVersionPersistence.update(newFileVersion, false);\n\n\t\t\t\tdlFileVersionPersistence.remove(fileVersion);\n\t\t\t}\n\n\t\t\tdlFileShortcutLocalService.updateFileShortcuts(\n\t\t\t\tgroupId, folderId, name, newFolderId, name);\n\n\t\t\t// Resources\n\n\t\t\tResource resource = resourceLocalService.getResource(\n\t\t\t\tfileEntry.getCompanyId(), DLFileEntry.class.getName(),\n\t\t\t\tResourceConstants.SCOPE_INDIVIDUAL,\n\t\t\t\tString.valueOf(fileEntry.getFileEntryId()));\n\n\t\t\tresource.setPrimKey(String.valueOf(newFileEntryId));\n\n\t\t\tresourcePersistence.update(resource, false);\n\n\t\t\t// Asset\n\n\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\tList<DLFileShortcut> fileShortcuts =\n\t\t\t\tdlFileShortcutPersistence.findByG_TF_TN(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\t\tDLFileShortcut.class.getName(),\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t\t}\n\n\t\t\t// Expando\n\n\t\t\texpandoValueLocalService.deleteValues(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// Ratings\n\n\t\t\tRatingsStats stats = ratingsStatsLocalService.getStats(\n\t\t\t\tDLFileEntry.class.getName(), oldFileEntryId);\n\n\t\t\tstats.setClassPK(newFileEntryId);\n\n\t\t\tratingsStatsPersistence.update(stats, false);\n\n\t\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\tDLFileEntry.class.getName());\n\n\t\t\tList<RatingsEntry> entries = ratingsEntryPersistence.findByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tfor (RatingsEntry entry : entries) {\n\t\t\t\tentry.setClassPK(newFileEntryId);\n\n\t\t\t\tratingsEntryPersistence.update(entry, false);\n\t\t\t}\n\n\t\t\t// Message boards\n\n\t\t\tMBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tif (discussion != null) {\n\t\t\t\tdiscussion.setClassPK(newFileEntryId);\n\n\t\t\t\tmbDiscussionPersistence.update(discussion, false);\n\t\t\t}\n\n\t\t\t// Social\n\n\t\t\tsocialActivityLocalService.deleteActivities(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// File\n\n\t\t\tdlService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tnewFileEntry.getGroupId(), fileEntry.getRepositoryId(),\n\t\t\t\tnewFileEntry.getRepositoryId(), name, newFileEntryId);\n\n\t\t\tfolderId = newFolderId;\n\t\t\tfileEntry = newFileEntry;\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// File version\n\n\t\tString version = getNextVersion(\n\t\t\tfileEntry, majorVersion, serviceContext.getStatus());\n\n\t\tif (is == null) {\n\t\t\tfileEntry.setVersion(version);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t\tint fetchFailures = 0;\n\n\t\t\twhile (is == null) {\n\t\t\t\ttry {\n\t\t\t\t\tis = dlLocalService.getFileAsStream(\n\t\t\t\t\t\tuser.getCompanyId(), fileEntry.getRepositoryId(), name);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t\t\tfetchFailures++;\n\n\t\t\t\t\tif (PropsValues.DL_HOOK_IMPL.equals(\n\t\t\t\t\t\t\tJCRHook.class.getName()) &&\n\t\t\t\t\t\t(fetchFailures <\n\t\t\t\t\t\t\tPropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nsfe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlLocalService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name,\n\t\t\t\tfalse, version, name, fileEntry.getFileEntryId(),\n\t\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\t\tserviceContext, is);\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\tif (Validator.isNotNull(fileEntry.getPendingVersion())) {\n\t\t\tupdateFileVersion(\n\t\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\t\tversionDescription, serviceContext.getStatus());\n\t\t}\n\t\telse {\n\t\t\taddFileVersion(\n\t\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\t\tversionDescription, serviceContext.getStatus());\n\t\t}\n\n\t\t// File entry\n\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\n\t\tif (serviceContext.getStatus() == StatusConstants.DRAFT) {\n\t\t\tfileEntry.setPendingVersion(version);\n\t\t}\n\t\telse if (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(version);\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Folder\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.updateFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tversion, sourceFileName, fileEntry.getFileEntryId(),\n\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\tserviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\t\tfileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"a4432e475511a9c73f720dd8f67e06b48f4086c2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry updateFileEntry(\n\t\t\tlong userId, long groupId, long folderId, long newFolderId,\n\t\t\tString name, String sourceFileName, String title,\n\t\t\tString description, String versionDescription, boolean majorVersion,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = sourceFileName;\n\n\t\t\tif (Validator.isNull(title)) {\n\t\t\t\ttitle = name;\n\t\t\t}\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tvalidate(\n\t\t\tgroupId, folderId, newFolderId, name, title, sourceFileName, is);\n\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Move file entry\n\n\t\tif (folderId != newFolderId) {\n\t\t\tlong oldFileEntryId = fileEntry.getFileEntryId();\n\n\t\t\tif (dlLocalService.hasFile(\n\t\t\t\t\tuser.getCompanyId(),\n\t\t\t\t\tDLFileEntryImpl.getRepositoryId(groupId, newFolderId),\n\t\t\t\t\tname, StringPool.BLANK)) {\n\n\t\t\t\tthrow new DuplicateFileException(name);\n\t\t\t}\n\n\t\t\tlong newFileEntryId = counterLocalService.increment();\n\n\t\t\tDLFileEntry newFileEntry = dlFileEntryPersistence.create(\n\t\t\t\tnewFileEntryId);\n\n\t\t\tnewFileEntry.setGroupId(fileEntry.getGroupId());\n\t\t\tnewFileEntry.setCompanyId(fileEntry.getCompanyId());\n\t\t\tnewFileEntry.setUserId(fileEntry.getUserId());\n\t\t\tnewFileEntry.setUserName(fileEntry.getUserName());\n\t\t\tnewFileEntry.setVersionUserId(fileEntry.getVersionUserId());\n\t\t\tnewFileEntry.setVersionUserName(fileEntry.getVersionUserName());\n\t\t\tnewFileEntry.setCreateDate(fileEntry.getCreateDate());\n\t\t\tnewFileEntry.setModifiedDate(fileEntry.getModifiedDate());\n\t\t\tnewFileEntry.setFolderId(newFolderId);\n\t\t\tnewFileEntry.setName(name);\n\t\t\tnewFileEntry.setTitle(fileEntry.getTitle());\n\t\t\tnewFileEntry.setDescription(fileEntry.getDescription());\n\t\t\tnewFileEntry.setVersion(fileEntry.getVersion());\n\t\t\tnewFileEntry.setSize(fileEntry.getSize());\n\t\t\tnewFileEntry.setReadCount(fileEntry.getReadCount());\n\t\t\tnewFileEntry.setExtraSettings(extraSettings);\n\n\t\t\tdlFileEntryPersistence.update(newFileEntry, false);\n\n\t\t\tdlFileEntryPersistence.remove(fileEntry);\n\n\t\t\tList<DLFileVersion> fileVersions =\n\t\t\t\tdlFileVersionPersistence.findByG_F_N(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileVersion fileVersion : fileVersions) {\n\t\t\t\tlong newFileVersionId = counterLocalService.increment();\n\n\t\t\t\tDLFileVersion newFileVersion = dlFileVersionPersistence.create(\n\t\t\t\t\tnewFileVersionId);\n\n\t\t\t\tnewFileVersion.setGroupId(fileVersion.getGroupId());\n\t\t\t\tnewFileVersion.setCompanyId(fileVersion.getCompanyId());\n\t\t\t\tnewFileVersion.setUserId(fileVersion.getUserId());\n\t\t\t\tnewFileVersion.setUserName(fileVersion.getUserName());\n\t\t\t\tnewFileVersion.setCreateDate(fileVersion.getCreateDate());\n\t\t\t\tnewFileVersion.setFolderId(newFolderId);\n\t\t\t\tnewFileVersion.setName(name);\n\t\t\t\tnewFileVersion.setVersion(fileVersion.getVersion());\n\t\t\t\tnewFileVersion.setSize(fileVersion.getSize());\n\t\t\t\tnewFileVersion.setStatus(fileVersion.getStatus());\n\t\t\t\tnewFileVersion.setStatusByUserId(userId);\n\t\t\t\tnewFileVersion.setStatusByUserName(user.getFullName());\n\t\t\t\tnewFileVersion.setStatusDate(\n\t\t\t\t\tserviceContext.getModifiedDate(now));\n\n\t\t\t\tdlFileVersionPersistence.update(newFileVersion, false);\n\n\t\t\t\tdlFileVersionPersistence.remove(fileVersion);\n\t\t\t}\n\n\t\t\tdlFileShortcutLocalService.updateFileShortcuts(\n\t\t\t\tgroupId, folderId, name, newFolderId, name);\n\n\t\t\t// Resources\n\n\t\t\tResource resource = resourceLocalService.getResource(\n\t\t\t\tfileEntry.getCompanyId(), DLFileEntry.class.getName(),\n\t\t\t\tResourceConstants.SCOPE_INDIVIDUAL,\n\t\t\t\tString.valueOf(fileEntry.getFileEntryId()));\n\n\t\t\tresource.setPrimKey(String.valueOf(newFileEntryId));\n\n\t\t\tresourcePersistence.update(resource, false);\n\n\t\t\t// Asset\n\n\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\tList<DLFileShortcut> fileShortcuts =\n\t\t\t\tdlFileShortcutPersistence.findByG_TF_TN(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\t\tDLFileShortcut.class.getName(),\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t\t}\n\n\t\t\t// Expando\n\n\t\t\texpandoValueLocalService.deleteValues(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// Ratings\n\n\t\t\tRatingsStats stats = ratingsStatsLocalService.getStats(\n\t\t\t\tDLFileEntry.class.getName(), oldFileEntryId);\n\n\t\t\tstats.setClassPK(newFileEntryId);\n\n\t\t\tratingsStatsPersistence.update(stats, false);\n\n\t\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\tDLFileEntry.class.getName());\n\n\t\t\tList<RatingsEntry> entries = ratingsEntryPersistence.findByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tfor (RatingsEntry entry : entries) {\n\t\t\t\tentry.setClassPK(newFileEntryId);\n\n\t\t\t\tratingsEntryPersistence.update(entry, false);\n\t\t\t}\n\n\t\t\t// Message boards\n\n\t\t\tMBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tif (discussion != null) {\n\t\t\t\tdiscussion.setClassPK(newFileEntryId);\n\n\t\t\t\tmbDiscussionPersistence.update(discussion, false);\n\t\t\t}\n\n\t\t\t// Social\n\n\t\t\tsocialActivityLocalService.deleteActivities(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// File\n\n\t\t\tdlService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tnewFileEntry.getGroupId(), fileEntry.getRepositoryId(),\n\t\t\t\tnewFileEntry.getRepositoryId(), name, newFileEntryId);\n\n\t\t\tfolderId = newFolderId;\n\t\t\tfileEntry = newFileEntry;\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// File version\n\n\t\tString version = getNextVersion(\n\t\t\tfileEntry, majorVersion, serviceContext.getStatus());\n\n\t\tif (is == null) {\n\t\t\tfileEntry.setVersion(version);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t\tint fetchFailures = 0;\n\n\t\t\twhile (is == null) {\n\t\t\t\ttry {\n\t\t\t\t\tis = dlLocalService.getFileAsStream(\n\t\t\t\t\t\tuser.getCompanyId(), fileEntry.getRepositoryId(), name);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t\t\tfetchFailures++;\n\n\t\t\t\t\tif (PropsValues.DL_HOOK_IMPL.equals(\n\t\t\t\t\t\t\tJCRHook.class.getName()) &&\n\t\t\t\t\t\t(fetchFailures <\n\t\t\t\t\t\t\tPropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nsfe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlLocalService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name,\n\t\t\t\tfalse, version, name, fileEntry.getFileEntryId(),\n\t\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\t\tserviceContext, is);\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\tif (Validator.isNotNull(fileEntry.getPendingVersion())) {\n\t\t\tupdateFileVersion(\n\t\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\t\tversionDescription, serviceContext.getStatus());\n\t\t}\n\t\telse {\n\t\t\taddFileVersion(\n\t\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\t\tversionDescription, serviceContext.getStatus());\n\t\t}\n\n\t\t// File entry\n\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\n\t\tif (serviceContext.getStatus() == StatusConstants.DRAFT) {\n\t\t\tfileEntry.setPendingVersion(version);\n\t\t}\n\t\telse if (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(version);\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Folder\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.updateFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tversion, sourceFileName, fileEntry.getFileEntryId(),\n\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\tserviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\t\tfileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7455,"modified_method":"public DLFileEntry updateFileEntry(\n\t\t\tlong userId, long groupId, long folderId, long newFolderId,\n\t\t\tString name, String sourceFileName, String title,\n\t\t\tString description, String versionDescription, boolean majorVersion,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = sourceFileName;\n\n\t\t\tif (Validator.isNull(title)) {\n\t\t\t\ttitle = name;\n\t\t\t}\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tvalidate(\n\t\t\tgroupId, folderId, newFolderId, name, title, sourceFileName, is);\n\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Move file entry\n\n\t\tif (folderId != newFolderId) {\n\t\t\tlong oldFileEntryId = fileEntry.getFileEntryId();\n\n\t\t\tif (dlLocalService.hasFile(\n\t\t\t\t\tuser.getCompanyId(),\n\t\t\t\t\tDLFileEntryImpl.getRepositoryId(groupId, newFolderId),\n\t\t\t\t\tname, StringPool.BLANK)) {\n\n\t\t\t\tthrow new DuplicateFileException(name);\n\t\t\t}\n\n\t\t\tlong newFileEntryId = counterLocalService.increment();\n\n\t\t\tDLFileEntry newFileEntry = dlFileEntryPersistence.create(\n\t\t\t\tnewFileEntryId);\n\n\t\t\tnewFileEntry.setGroupId(fileEntry.getGroupId());\n\t\t\tnewFileEntry.setCompanyId(fileEntry.getCompanyId());\n\t\t\tnewFileEntry.setUserId(fileEntry.getUserId());\n\t\t\tnewFileEntry.setUserName(fileEntry.getUserName());\n\t\t\tnewFileEntry.setVersionUserId(fileEntry.getVersionUserId());\n\t\t\tnewFileEntry.setVersionUserName(fileEntry.getVersionUserName());\n\t\t\tnewFileEntry.setCreateDate(fileEntry.getCreateDate());\n\t\t\tnewFileEntry.setModifiedDate(fileEntry.getModifiedDate());\n\t\t\tnewFileEntry.setFolderId(newFolderId);\n\t\t\tnewFileEntry.setName(name);\n\t\t\tnewFileEntry.setTitle(fileEntry.getTitle());\n\t\t\tnewFileEntry.setDescription(fileEntry.getDescription());\n\t\t\tnewFileEntry.setVersion(fileEntry.getVersion());\n\t\t\tnewFileEntry.setSize(fileEntry.getSize());\n\t\t\tnewFileEntry.setReadCount(fileEntry.getReadCount());\n\t\t\tnewFileEntry.setExtraSettings(extraSettings);\n\n\t\t\tdlFileEntryPersistence.update(newFileEntry, false);\n\n\t\t\tdlFileEntryPersistence.remove(fileEntry);\n\n\t\t\tList<DLFileVersion> fileVersions =\n\t\t\t\tdlFileVersionPersistence.findByG_F_N(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileVersion fileVersion : fileVersions) {\n\t\t\t\tlong newFileVersionId = counterLocalService.increment();\n\n\t\t\t\tDLFileVersion newFileVersion = dlFileVersionPersistence.create(\n\t\t\t\t\tnewFileVersionId);\n\n\t\t\t\tnewFileVersion.setGroupId(fileVersion.getGroupId());\n\t\t\t\tnewFileVersion.setCompanyId(fileVersion.getCompanyId());\n\t\t\t\tnewFileVersion.setUserId(fileVersion.getUserId());\n\t\t\t\tnewFileVersion.setUserName(fileVersion.getUserName());\n\t\t\t\tnewFileVersion.setCreateDate(fileVersion.getCreateDate());\n\t\t\t\tnewFileVersion.setFolderId(newFolderId);\n\t\t\t\tnewFileVersion.setName(name);\n\t\t\t\tnewFileVersion.setVersion(fileVersion.getVersion());\n\t\t\t\tnewFileVersion.setSize(fileVersion.getSize());\n\t\t\t\tnewFileVersion.setStatus(fileVersion.getStatus());\n\t\t\t\tnewFileVersion.setStatusByUserId(userId);\n\t\t\t\tnewFileVersion.setStatusByUserName(user.getFullName());\n\t\t\t\tnewFileVersion.setStatusDate(\n\t\t\t\t\tserviceContext.getModifiedDate(now));\n\n\t\t\t\tdlFileVersionPersistence.update(newFileVersion, false);\n\n\t\t\t\tdlFileVersionPersistence.remove(fileVersion);\n\t\t\t}\n\n\t\t\tdlFileShortcutLocalService.updateFileShortcuts(\n\t\t\t\tgroupId, folderId, name, newFolderId, name);\n\n\t\t\t// Resources\n\n\t\t\tResource resource = resourceLocalService.getResource(\n\t\t\t\tfileEntry.getCompanyId(), DLFileEntry.class.getName(),\n\t\t\t\tResourceConstants.SCOPE_INDIVIDUAL,\n\t\t\t\tString.valueOf(fileEntry.getFileEntryId()));\n\n\t\t\tresource.setPrimKey(String.valueOf(newFileEntryId));\n\n\t\t\tresourcePersistence.update(resource, false);\n\n\t\t\t// Asset\n\n\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\tList<DLFileShortcut> fileShortcuts =\n\t\t\t\tdlFileShortcutPersistence.findByG_TF_TN(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\t\tDLFileShortcut.class.getName(),\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t\t}\n\n\t\t\t// Expando\n\n\t\t\texpandoValueLocalService.deleteValues(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// Ratings\n\n\t\t\tRatingsStats stats = ratingsStatsLocalService.getStats(\n\t\t\t\tDLFileEntry.class.getName(), oldFileEntryId);\n\n\t\t\tstats.setClassPK(newFileEntryId);\n\n\t\t\tratingsStatsPersistence.update(stats, false);\n\n\t\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\tDLFileEntry.class.getName());\n\n\t\t\tList<RatingsEntry> entries = ratingsEntryPersistence.findByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tfor (RatingsEntry entry : entries) {\n\t\t\t\tentry.setClassPK(newFileEntryId);\n\n\t\t\t\tratingsEntryPersistence.update(entry, false);\n\t\t\t}\n\n\t\t\t// Message boards\n\n\t\t\tMBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tif (discussion != null) {\n\t\t\t\tdiscussion.setClassPK(newFileEntryId);\n\n\t\t\t\tmbDiscussionPersistence.update(discussion, false);\n\t\t\t}\n\n\t\t\t// Social\n\n\t\t\tsocialActivityLocalService.deleteActivities(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// File\n\n\t\t\tdlService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tnewFileEntry.getGroupId(), fileEntry.getRepositoryId(),\n\t\t\t\tnewFileEntry.getRepositoryId(), name, newFileEntryId);\n\n\t\t\tfolderId = newFolderId;\n\t\t\tfileEntry = newFileEntry;\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// File version\n\n\t\tString version = getNextVersion(fileEntry, majorVersion);\n\n\t\tif (is == null) {\n\t\t\tfileEntry.setVersion(version);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t\tint fetchFailures = 0;\n\n\t\t\twhile (is == null) {\n\t\t\t\ttry {\n\t\t\t\t\tis = dlLocalService.getFileAsStream(\n\t\t\t\t\t\tuser.getCompanyId(), fileEntry.getRepositoryId(), name);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t\t\tfetchFailures++;\n\n\t\t\t\t\tif (PropsValues.DL_HOOK_IMPL.equals(\n\t\t\t\t\t\t\tJCRHook.class.getName()) &&\n\t\t\t\t\t\t(fetchFailures <\n\t\t\t\t\t\t\tPropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nsfe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlLocalService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name,\n\t\t\t\tfalse, version, name, fileEntry.getFileEntryId(),\n\t\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\t\tserviceContext, is);\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\tversionDescription, serviceContext.getStatus());\n\n\t\t// File entry\n\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setVersion(version);\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Folder\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.updateFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tversion, sourceFileName, fileEntry.getFileEntryId(),\n\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\tserviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\t\tfileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"5ee6d17aef1818c171bfd8129a541fad109a1e46","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry updateWorkflowStatus(\n\t\t\tlong userId, long fileEntryId, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByPrimaryKey(\n\t\t\tfileEntryId);\n\n\t\t// File version\n\n\t\tDLFileVersion fileVersion =\n\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\tfileVersion.setStatus(serviceContext.getStatus());\n\t\tfileVersion.setStatusByUserId(user.getUserId());\n\t\tfileVersion.setStatusByUserName(user.getFullName());\n\t\tfileVersion.setStatusDate(new Date());\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileVersion.getVersion(),\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION) < 0)) {\n\n\t\t\tfileVersion.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\n\t\tdlFileVersionPersistence.update(fileVersion, false);\n\n\t\t// File entry\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) < 0)) {\n\n\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse if (!fileVersion.isApproved() &&\n\t\t\t\t (DLUtil.compareVersions(\n\t\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tString newVersion = DLFileEntryConstants.DEFAULT_VERSION;\n\n\t\t\tif (DLUtil.compareVersions(\n\t\t\t\t\tfileVersion.getVersion(), newVersion) > 1) {\n\n\t\t\t\tList<DLFileVersion> approvedFileVersions =\n\t\t\t\t\tdlFileVersionPersistence.findByG_F_N_S(\n\t\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\t\tfileEntry.getName(), StatusConstants.APPROVED);\n\n\t\t\t\tif (!approvedFileVersions.isEmpty()) {\n\t\t\t\t\tnewVersion = approvedFileVersions.get(0).getVersion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfileEntry.setPendingVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setVersion(newVersion);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\ttrue);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\tfalse);\n\t\t}\n\n\t\t// Social\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tif (fileVersion.getVersion().equals(\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsocialActivityLocalService.addUniqueActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.ADD_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.UPDATE_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(DLFileEntry.class);\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tindexer.reindex(fileEntry);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tindexer.delete(fileEntry);\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7456,"modified_method":"public DLFileEntry updateWorkflowStatus(\n\t\t\tlong userId, long fileEntryId, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByPrimaryKey(\n\t\t\tfileEntryId);\n\n\t\t// File version\n\n\t\tDLFileVersion fileVersion =\n\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\tfileVersion.setStatus(serviceContext.getStatus());\n\t\tfileVersion.setStatusByUserId(user.getUserId());\n\t\tfileVersion.setStatusByUserName(user.getFullName());\n\t\tfileVersion.setStatusDate(new Date());\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileVersion.getVersion(),\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION) < 0)) {\n\n\t\t\tfileVersion.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\n\t\tdlFileVersionPersistence.update(fileVersion, false);\n\n\t\t// File entry\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) < 0)) {\n\n\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse if (!fileVersion.isApproved() &&\n\t\t\t\t (DLUtil.compareVersions(\n\t\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tString newVersion = DLFileEntryConstants.DEFAULT_VERSION;\n\n\t\t\tif (DLUtil.compareVersions(\n\t\t\t\t\tfileVersion.getVersion(), newVersion) > 1) {\n\n\t\t\t\tList<DLFileVersion> approvedFileVersions =\n\t\t\t\t\tdlFileVersionPersistence.findByG_F_N_S(\n\t\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\t\tfileEntry.getName(), StatusConstants.APPROVED);\n\n\t\t\t\tif (!approvedFileVersions.isEmpty()) {\n\t\t\t\t\tnewVersion = approvedFileVersions.get(0).getVersion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfileEntry.setPendingVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setVersion(newVersion);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\ttrue);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\tfalse);\n\t\t}\n\n\t\t// Social\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tif (fileVersion.getVersion().equals(\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsocialActivityLocalService.addUniqueActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.ADD_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.UPDATE_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(DLFileEntry.class);\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tindexer.reindex(fileEntry);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tindexer.delete(fileEntry);\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"5ee6d17aef1818c171bfd8129a541fad109a1e46","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry addFileEntry(\n\t\t\tString uuid, long userId, long groupId, long folderId, String name,\n\t\t\tString title, String description, String versionDescription,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tfolderId = getFolderId(user.getCompanyId(), folderId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = name;\n\t\t}\n\n\t\tname = String.valueOf(\n\t\t\tcounterLocalService.increment(DLFileEntry.class.getName()));\n\n\t\tDate now = new Date();\n\n\t\tvalidate(groupId, folderId, title, is);\n\n\t\tlong fileEntryId = counterLocalService.increment();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.create(fileEntryId);\n\n\t\tfileEntry.setUuid(uuid);\n\t\tfileEntry.setGroupId(groupId);\n\t\tfileEntry.setCompanyId(user.getCompanyId());\n\t\tfileEntry.setUserId(user.getUserId());\n\t\tfileEntry.setUserName(user.getFullName());\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setCreateDate(serviceContext.getCreateDate(now));\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setFolderId(folderId);\n\t\tfileEntry.setName(name);\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\n\t\tif (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// File version\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now),\n\t\t\tDLFileEntryConstants.DEFAULT_VERSION, null,\n\t\t\tserviceContext.getStatus());\n\n\t\t// Folder\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(folderId);\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, fileEntry.getUserName(), DLFileEntry.class.getName(),\n\t\t\t\tfileEntryId, StatusConstants.APPROVED);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.addFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tfileEntryId, fileEntry.getLuceneProperties(),\n\t\t\tfileEntry.getModifiedDate(), serviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntryId, fileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7457,"modified_method":"public DLFileEntry addFileEntry(\n\t\t\tString uuid, long userId, long groupId, long folderId, String name,\n\t\t\tString title, String description, String versionDescription,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tfolderId = getFolderId(user.getCompanyId(), folderId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = name;\n\t\t}\n\n\t\tname = String.valueOf(\n\t\t\tcounterLocalService.increment(DLFileEntry.class.getName()));\n\n\t\tDate now = new Date();\n\n\t\tvalidate(groupId, folderId, title, is);\n\n\t\tlong fileEntryId = counterLocalService.increment();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.create(fileEntryId);\n\n\t\tfileEntry.setUuid(uuid);\n\t\tfileEntry.setGroupId(groupId);\n\t\tfileEntry.setCompanyId(user.getCompanyId());\n\t\tfileEntry.setUserId(user.getUserId());\n\t\tfileEntry.setUserName(user.getFullName());\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setCreateDate(serviceContext.getCreateDate(now));\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setFolderId(folderId);\n\t\tfileEntry.setName(name);\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\n\t\tif (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// File version\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now),\n\t\t\tfileEntry.getVersion(), null, serviceContext.getStatus());\n\n\t\t// Folder\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(folderId);\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, fileEntry.getUserName(), DLFileEntry.class.getName(),\n\t\t\t\tfileEntryId, StatusConstants.APPROVED);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.addFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tfileEntryId, fileEntry.getLuceneProperties(),\n\t\t\tfileEntry.getModifiedDate(), serviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntryId, fileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"5ee6d17aef1818c171bfd8129a541fad109a1e46","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String getNextVersion(\n\t\tDLFileEntry fileEntry, boolean majorVersion, int status) {\n\n\t\tif ((status == StatusConstants.DRAFT) &&\n\t\t\tValidator.isNotNull(fileEntry.getPendingVersion())) {\n\n\t\t\treturn fileEntry.getPendingVersion();\n\t\t}\n\n\t\tif (Validator.isNull(fileEntry.getVersion())) {\n\t\t\treturn DLFileEntryConstants.DEFAULT_VERSION;\n\t\t}\n\n\t\tint[] versionParts = StringUtil.split(\n\t\t\tfileEntry.getVersion(), StringPool.PERIOD, 0);\n\n\t\tif (majorVersion) {\n\t\t\tversionParts[0]++;\n\t\t\tversionParts[1] = 0;\n\t\t}\n\t\telse {\n\t\t\tversionParts[1]++;\n\t\t}\n\n\t\treturn versionParts[0] + StringPool.PERIOD + versionParts[1];\n\t}","id":7458,"modified_method":"protected String getNextVersion(\n\t\tDLFileEntry fileEntry, boolean majorVersion) {\n\n\t\tString version = fileEntry.getVersion();\n\n\t\tif (DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileEntry.getPendingVersion()) < 0) {\n\n\t\t\tversion = fileEntry.getPendingVersion();\n\t\t}\n\n\t\tint[] versionParts = StringUtil.split(version, StringPool.PERIOD, 0);\n\n\t\tif (majorVersion) {\n\t\t\tversionParts[0]++;\n\t\t\tversionParts[1] = 0;\n\t\t}\n\t\telse {\n\t\t\tversionParts[1]++;\n\t\t}\n\n\t\treturn versionParts[0] + StringPool.PERIOD + versionParts[1];\n\t}","commit_id":"5ee6d17aef1818c171bfd8129a541fad109a1e46","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteFileEntry(\n\t\t\tlong groupId, long folderId, String name, String version)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tif (Validator.isNotNull(version)) {\n\t\t\ttry {\n\t\t\t\tdlService.deleteFile(\n\t\t\t\t\tfileEntry.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\t\tfileEntry.getRepositoryId(), fileEntry.getName(), version);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(e, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlFileVersionPersistence.removeByG_F_N_V(\n\t\t\t\tgroupId, folderId, name, version);\n\n\t\t\tif (version.equals(fileEntry.getVersion())) {\n\t\t\t\ttry {\n\t\t\t\t\tDLFileVersion fileVersion =\n\t\t\t\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileVersionException nsfve) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (version.equals(fileEntry.getPendingVersion())) {\n\t\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t\t}\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse {\n\t\t\tdeleteFileEntry(fileEntry);\n\t\t}\n\t}","id":7459,"modified_method":"public void deleteFileEntry(\n\t\t\tlong groupId, long folderId, String name, String version)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tif (Validator.isNotNull(version)) {\n\t\t\ttry {\n\t\t\t\tdlService.deleteFile(\n\t\t\t\t\tfileEntry.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\t\tfileEntry.getRepositoryId(), fileEntry.getName(), version);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(e, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlFileVersionPersistence.removeByG_F_N_V(\n\t\t\t\tgroupId, folderId, name, version);\n\n\t\t\tif (version.equals(fileEntry.getVersion())) {\n\t\t\t\ttry {\n\t\t\t\t\tDLFileVersion fileVersion =\n\t\t\t\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\n\t\t\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileVersionException nsfve) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdeleteFileEntry(fileEntry);\n\t\t}\n\t}","commit_id":"5ee6d17aef1818c171bfd8129a541fad109a1e46","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry updateFileEntry(\n\t\t\tlong userId, long groupId, long folderId, long newFolderId,\n\t\t\tString name, String sourceFileName, String title,\n\t\t\tString description, String versionDescription, boolean majorVersion,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = sourceFileName;\n\n\t\t\tif (Validator.isNull(title)) {\n\t\t\t\ttitle = name;\n\t\t\t}\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tvalidate(\n\t\t\tgroupId, folderId, newFolderId, name, title, sourceFileName, is);\n\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Move file entry\n\n\t\tif (folderId != newFolderId) {\n\t\t\tlong oldFileEntryId = fileEntry.getFileEntryId();\n\n\t\t\tif (dlLocalService.hasFile(\n\t\t\t\t\tuser.getCompanyId(),\n\t\t\t\t\tDLFileEntryImpl.getRepositoryId(groupId, newFolderId),\n\t\t\t\t\tname, StringPool.BLANK)) {\n\n\t\t\t\tthrow new DuplicateFileException(name);\n\t\t\t}\n\n\t\t\tlong newFileEntryId = counterLocalService.increment();\n\n\t\t\tDLFileEntry newFileEntry = dlFileEntryPersistence.create(\n\t\t\t\tnewFileEntryId);\n\n\t\t\tnewFileEntry.setGroupId(fileEntry.getGroupId());\n\t\t\tnewFileEntry.setCompanyId(fileEntry.getCompanyId());\n\t\t\tnewFileEntry.setUserId(fileEntry.getUserId());\n\t\t\tnewFileEntry.setUserName(fileEntry.getUserName());\n\t\t\tnewFileEntry.setVersionUserId(fileEntry.getVersionUserId());\n\t\t\tnewFileEntry.setVersionUserName(fileEntry.getVersionUserName());\n\t\t\tnewFileEntry.setCreateDate(fileEntry.getCreateDate());\n\t\t\tnewFileEntry.setModifiedDate(fileEntry.getModifiedDate());\n\t\t\tnewFileEntry.setFolderId(newFolderId);\n\t\t\tnewFileEntry.setName(name);\n\t\t\tnewFileEntry.setTitle(fileEntry.getTitle());\n\t\t\tnewFileEntry.setDescription(fileEntry.getDescription());\n\t\t\tnewFileEntry.setVersion(fileEntry.getVersion());\n\t\t\tnewFileEntry.setSize(fileEntry.getSize());\n\t\t\tnewFileEntry.setReadCount(fileEntry.getReadCount());\n\t\t\tnewFileEntry.setExtraSettings(extraSettings);\n\n\t\t\tdlFileEntryPersistence.update(newFileEntry, false);\n\n\t\t\tdlFileEntryPersistence.remove(fileEntry);\n\n\t\t\tList<DLFileVersion> fileVersions =\n\t\t\t\tdlFileVersionPersistence.findByG_F_N(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileVersion fileVersion : fileVersions) {\n\t\t\t\tlong newFileVersionId = counterLocalService.increment();\n\n\t\t\t\tDLFileVersion newFileVersion = dlFileVersionPersistence.create(\n\t\t\t\t\tnewFileVersionId);\n\n\t\t\t\tnewFileVersion.setGroupId(fileVersion.getGroupId());\n\t\t\t\tnewFileVersion.setCompanyId(fileVersion.getCompanyId());\n\t\t\t\tnewFileVersion.setUserId(fileVersion.getUserId());\n\t\t\t\tnewFileVersion.setUserName(fileVersion.getUserName());\n\t\t\t\tnewFileVersion.setCreateDate(fileVersion.getCreateDate());\n\t\t\t\tnewFileVersion.setFolderId(newFolderId);\n\t\t\t\tnewFileVersion.setName(name);\n\t\t\t\tnewFileVersion.setVersion(fileVersion.getVersion());\n\t\t\t\tnewFileVersion.setSize(fileVersion.getSize());\n\t\t\t\tnewFileVersion.setStatus(fileVersion.getStatus());\n\t\t\t\tnewFileVersion.setStatusByUserId(userId);\n\t\t\t\tnewFileVersion.setStatusByUserName(user.getFullName());\n\t\t\t\tnewFileVersion.setStatusDate(\n\t\t\t\t\tserviceContext.getModifiedDate(now));\n\n\t\t\t\tdlFileVersionPersistence.update(newFileVersion, false);\n\n\t\t\t\tdlFileVersionPersistence.remove(fileVersion);\n\t\t\t}\n\n\t\t\tdlFileShortcutLocalService.updateFileShortcuts(\n\t\t\t\tgroupId, folderId, name, newFolderId, name);\n\n\t\t\t// Resources\n\n\t\t\tResource resource = resourceLocalService.getResource(\n\t\t\t\tfileEntry.getCompanyId(), DLFileEntry.class.getName(),\n\t\t\t\tResourceConstants.SCOPE_INDIVIDUAL,\n\t\t\t\tString.valueOf(fileEntry.getFileEntryId()));\n\n\t\t\tresource.setPrimKey(String.valueOf(newFileEntryId));\n\n\t\t\tresourcePersistence.update(resource, false);\n\n\t\t\t// Asset\n\n\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\tList<DLFileShortcut> fileShortcuts =\n\t\t\t\tdlFileShortcutPersistence.findByG_TF_TN(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\t\tDLFileShortcut.class.getName(),\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t\t}\n\n\t\t\t// Expando\n\n\t\t\texpandoValueLocalService.deleteValues(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// Ratings\n\n\t\t\tRatingsStats stats = ratingsStatsLocalService.getStats(\n\t\t\t\tDLFileEntry.class.getName(), oldFileEntryId);\n\n\t\t\tstats.setClassPK(newFileEntryId);\n\n\t\t\tratingsStatsPersistence.update(stats, false);\n\n\t\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\tDLFileEntry.class.getName());\n\n\t\t\tList<RatingsEntry> entries = ratingsEntryPersistence.findByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tfor (RatingsEntry entry : entries) {\n\t\t\t\tentry.setClassPK(newFileEntryId);\n\n\t\t\t\tratingsEntryPersistence.update(entry, false);\n\t\t\t}\n\n\t\t\t// Message boards\n\n\t\t\tMBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tif (discussion != null) {\n\t\t\t\tdiscussion.setClassPK(newFileEntryId);\n\n\t\t\t\tmbDiscussionPersistence.update(discussion, false);\n\t\t\t}\n\n\t\t\t// Social\n\n\t\t\tsocialActivityLocalService.deleteActivities(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// File\n\n\t\t\tdlService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tnewFileEntry.getGroupId(), fileEntry.getRepositoryId(),\n\t\t\t\tnewFileEntry.getRepositoryId(), name, newFileEntryId);\n\n\t\t\tfolderId = newFolderId;\n\t\t\tfileEntry = newFileEntry;\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// File version\n\n\t\tString version = getNextVersion(fileEntry, majorVersion);\n\n\t\tif (is == null) {\n\t\t\tfileEntry.setVersion(version);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t\tint fetchFailures = 0;\n\n\t\t\twhile (is == null) {\n\t\t\t\ttry {\n\t\t\t\t\tis = dlLocalService.getFileAsStream(\n\t\t\t\t\t\tuser.getCompanyId(), fileEntry.getRepositoryId(), name);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t\t\tfetchFailures++;\n\n\t\t\t\t\tif (PropsValues.DL_HOOK_IMPL.equals(\n\t\t\t\t\t\t\tJCRHook.class.getName()) &&\n\t\t\t\t\t\t(fetchFailures <\n\t\t\t\t\t\t\tPropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nsfe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlLocalService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name,\n\t\t\t\tfalse, version, name, fileEntry.getFileEntryId(),\n\t\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\t\tserviceContext, is);\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\tversionDescription, serviceContext.getStatus());\n\n\t\t// File entry\n\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setVersion(version);\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Folder\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.updateFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tversion, sourceFileName, fileEntry.getFileEntryId(),\n\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\tserviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\t\tfileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7460,"modified_method":"public DLFileEntry updateFileEntry(\n\t\t\tlong userId, long groupId, long folderId, long newFolderId,\n\t\t\tString name, String sourceFileName, String title,\n\t\t\tString description, String versionDescription, boolean majorVersion,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = sourceFileName;\n\n\t\t\tif (Validator.isNull(title)) {\n\t\t\t\ttitle = name;\n\t\t\t}\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tvalidate(\n\t\t\tgroupId, folderId, newFolderId, name, title, sourceFileName, is);\n\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Move file entry\n\n\t\tif (folderId != newFolderId) {\n\t\t\tlong oldFileEntryId = fileEntry.getFileEntryId();\n\n\t\t\tif (dlLocalService.hasFile(\n\t\t\t\t\tuser.getCompanyId(),\n\t\t\t\t\tDLFileEntryImpl.getRepositoryId(groupId, newFolderId),\n\t\t\t\t\tname, StringPool.BLANK)) {\n\n\t\t\t\tthrow new DuplicateFileException(name);\n\t\t\t}\n\n\t\t\tlong newFileEntryId = counterLocalService.increment();\n\n\t\t\tDLFileEntry newFileEntry = dlFileEntryPersistence.create(\n\t\t\t\tnewFileEntryId);\n\n\t\t\tnewFileEntry.setGroupId(fileEntry.getGroupId());\n\t\t\tnewFileEntry.setCompanyId(fileEntry.getCompanyId());\n\t\t\tnewFileEntry.setUserId(fileEntry.getUserId());\n\t\t\tnewFileEntry.setUserName(fileEntry.getUserName());\n\t\t\tnewFileEntry.setVersionUserId(fileEntry.getVersionUserId());\n\t\t\tnewFileEntry.setVersionUserName(fileEntry.getVersionUserName());\n\t\t\tnewFileEntry.setCreateDate(fileEntry.getCreateDate());\n\t\t\tnewFileEntry.setModifiedDate(fileEntry.getModifiedDate());\n\t\t\tnewFileEntry.setFolderId(newFolderId);\n\t\t\tnewFileEntry.setName(name);\n\t\t\tnewFileEntry.setTitle(fileEntry.getTitle());\n\t\t\tnewFileEntry.setDescription(fileEntry.getDescription());\n\t\t\tnewFileEntry.setVersion(fileEntry.getVersion());\n\t\t\tnewFileEntry.setSize(fileEntry.getSize());\n\t\t\tnewFileEntry.setReadCount(fileEntry.getReadCount());\n\t\t\tnewFileEntry.setExtraSettings(extraSettings);\n\n\t\t\tdlFileEntryPersistence.update(newFileEntry, false);\n\n\t\t\tdlFileEntryPersistence.remove(fileEntry);\n\n\t\t\tList<DLFileVersion> fileVersions =\n\t\t\t\tdlFileVersionPersistence.findByG_F_N(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileVersion fileVersion : fileVersions) {\n\t\t\t\tlong newFileVersionId = counterLocalService.increment();\n\n\t\t\t\tDLFileVersion newFileVersion = dlFileVersionPersistence.create(\n\t\t\t\t\tnewFileVersionId);\n\n\t\t\t\tnewFileVersion.setGroupId(fileVersion.getGroupId());\n\t\t\t\tnewFileVersion.setCompanyId(fileVersion.getCompanyId());\n\t\t\t\tnewFileVersion.setUserId(fileVersion.getUserId());\n\t\t\t\tnewFileVersion.setUserName(fileVersion.getUserName());\n\t\t\t\tnewFileVersion.setCreateDate(fileVersion.getCreateDate());\n\t\t\t\tnewFileVersion.setFolderId(newFolderId);\n\t\t\t\tnewFileVersion.setName(name);\n\t\t\t\tnewFileVersion.setVersion(fileVersion.getVersion());\n\t\t\t\tnewFileVersion.setSize(fileVersion.getSize());\n\t\t\t\tnewFileVersion.setStatus(fileVersion.getStatus());\n\t\t\t\tnewFileVersion.setStatusByUserId(userId);\n\t\t\t\tnewFileVersion.setStatusByUserName(user.getFullName());\n\t\t\t\tnewFileVersion.setStatusDate(\n\t\t\t\t\tserviceContext.getModifiedDate(now));\n\n\t\t\t\tdlFileVersionPersistence.update(newFileVersion, false);\n\n\t\t\t\tdlFileVersionPersistence.remove(fileVersion);\n\t\t\t}\n\n\t\t\tdlFileShortcutLocalService.updateFileShortcuts(\n\t\t\t\tgroupId, folderId, name, newFolderId, name);\n\n\t\t\t// Resources\n\n\t\t\tResource resource = resourceLocalService.getResource(\n\t\t\t\tfileEntry.getCompanyId(), DLFileEntry.class.getName(),\n\t\t\t\tResourceConstants.SCOPE_INDIVIDUAL,\n\t\t\t\tString.valueOf(fileEntry.getFileEntryId()));\n\n\t\t\tresource.setPrimKey(String.valueOf(newFileEntryId));\n\n\t\t\tresourcePersistence.update(resource, false);\n\n\t\t\t// Asset\n\n\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\tList<DLFileShortcut> fileShortcuts =\n\t\t\t\tdlFileShortcutPersistence.findByG_TF_TN(\n\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\tassetEntryLocalService.deleteEntry(\n\t\t\t\t\tDLFileShortcut.class.getName(),\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t\t}\n\n\t\t\t// Expando\n\n\t\t\texpandoValueLocalService.deleteValues(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// Ratings\n\n\t\t\tRatingsStats stats = ratingsStatsLocalService.getStats(\n\t\t\t\tDLFileEntry.class.getName(), oldFileEntryId);\n\n\t\t\tstats.setClassPK(newFileEntryId);\n\n\t\t\tratingsStatsPersistence.update(stats, false);\n\n\t\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\tDLFileEntry.class.getName());\n\n\t\t\tList<RatingsEntry> entries = ratingsEntryPersistence.findByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tfor (RatingsEntry entry : entries) {\n\t\t\t\tentry.setClassPK(newFileEntryId);\n\n\t\t\t\tratingsEntryPersistence.update(entry, false);\n\t\t\t}\n\n\t\t\t// Message boards\n\n\t\t\tMBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(\n\t\t\t\tclassNameId, oldFileEntryId);\n\n\t\t\tif (discussion != null) {\n\t\t\t\tdiscussion.setClassPK(newFileEntryId);\n\n\t\t\t\tmbDiscussionPersistence.update(discussion, false);\n\t\t\t}\n\n\t\t\t// Social\n\n\t\t\tsocialActivityLocalService.deleteActivities(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId());\n\n\t\t\t// File\n\n\t\t\tdlService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tnewFileEntry.getGroupId(), fileEntry.getRepositoryId(),\n\t\t\t\tnewFileEntry.getRepositoryId(), name, newFileEntryId);\n\n\t\t\tfolderId = newFolderId;\n\t\t\tfileEntry = newFileEntry;\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// File version\n\n\t\tString version = getNextVersion(\n\t\t\tfileEntry, majorVersion, serviceContext.getStatus());\n\n\t\tif (is == null) {\n\t\t\tfileEntry.setVersion(version);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t\tint fetchFailures = 0;\n\n\t\t\twhile (is == null) {\n\t\t\t\ttry {\n\t\t\t\t\tis = dlLocalService.getFileAsStream(\n\t\t\t\t\t\tuser.getCompanyId(), fileEntry.getRepositoryId(), name);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileException nsfe) {\n\t\t\t\t\tfetchFailures++;\n\n\t\t\t\t\tif (PropsValues.DL_HOOK_IMPL.equals(\n\t\t\t\t\t\t\tJCRHook.class.getName()) &&\n\t\t\t\t\t\t(fetchFailures <\n\t\t\t\t\t\t\tPropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nsfe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlLocalService.updateFile(\n\t\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name,\n\t\t\t\tfalse, version, name, fileEntry.getFileEntryId(),\n\t\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\t\tserviceContext, is);\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\tif (Validator.isNotNull(fileEntry.getPendingVersion())) {\n\t\t\tupdateFileVersion(\n\t\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\t\tversionDescription, serviceContext.getStatus());\n\t\t}\n\t\telse {\n\t\t\taddFileVersion(\n\t\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now), version,\n\t\t\t\tversionDescription, serviceContext.getStatus());\n\t\t}\n\n\t\t// File entry\n\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\n\t\tif (serviceContext.getStatus() == StatusConstants.DRAFT) {\n\t\t\tfileEntry.setPendingVersion(version);\n\t\t}\n\t\telse if (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(version);\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Folder\n\n\t\tif (fileEntry.getFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(\n\t\t\t\tfileEntry.getFolderId());\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.updateFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tversion, sourceFileName, fileEntry.getFileEntryId(),\n\t\t\tfileEntry.getLuceneProperties(), fileEntry.getModifiedDate(),\n\t\t\tserviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\t\tfileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"534ad1eb07518efc30131c25e24bf5f0f2d4222e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteFileEntry(\n\t\t\tlong groupId, long folderId, String name, String version)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tif (Validator.isNotNull(version)) {\n\t\t\ttry {\n\t\t\t\tdlService.deleteFile(\n\t\t\t\t\tfileEntry.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\t\tfileEntry.getRepositoryId(), fileEntry.getName(), version);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(e, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlFileVersionPersistence.removeByG_F_N_V(\n\t\t\t\tgroupId, folderId, name, version);\n\n\t\t\tif (version.equals(fileEntry.getVersion())) {\n\t\t\t\ttry {\n\t\t\t\t\tDLFileVersion fileVersion =\n\t\t\t\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\n\t\t\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileVersionException nsfve) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdeleteFileEntry(fileEntry);\n\t\t}\n\t}","id":7461,"modified_method":"public void deleteFileEntry(\n\t\t\tlong groupId, long folderId, String name, String version)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByG_F_N(\n\t\t\tgroupId, folderId, name);\n\n\t\tif (Validator.isNotNull(version)) {\n\t\t\ttry {\n\t\t\t\tdlService.deleteFile(\n\t\t\t\t\tfileEntry.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\t\t\tfileEntry.getRepositoryId(), fileEntry.getName(), version);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(e, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdlFileVersionPersistence.removeByG_F_N_V(\n\t\t\t\tgroupId, folderId, name, version);\n\n\t\t\tif (version.equals(fileEntry.getVersion())) {\n\t\t\t\ttry {\n\t\t\t\t\tDLFileVersion fileVersion =\n\t\t\t\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, name);\n\n\t\t\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchFileVersionException nsfve) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (version.equals(fileEntry.getPendingVersion())) {\n\t\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\t\t\t}\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse {\n\t\t\tdeleteFileEntry(fileEntry);\n\t\t}\n\t}","commit_id":"534ad1eb07518efc30131c25e24bf5f0f2d4222e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry updateWorkflowStatus(\n\t\t\tlong userId, long fileEntryId, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByPrimaryKey(\n\t\t\tfileEntryId);\n\n\t\t// File version\n\n\t\tDLFileVersion fileVersion =\n\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\tfileVersion.setStatus(serviceContext.getStatus());\n\t\tfileVersion.setStatusByUserId(user.getUserId());\n\t\tfileVersion.setStatusByUserName(user.getFullName());\n\t\tfileVersion.setStatusDate(new Date());\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileVersion.getVersion(),\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION) < 0)) {\n\n\t\t\tfileVersion.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\n\t\tdlFileVersionPersistence.update(fileVersion, false);\n\n\t\t// File entry\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) < 0)) {\n\n\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse if (!fileVersion.isApproved() &&\n\t\t\t\t (DLUtil.compareVersions(\n\t\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tString newVersion = DLFileEntryConstants.DEFAULT_VERSION;\n\n\t\t\tif (DLUtil.compareVersions(\n\t\t\t\t\tfileVersion.getVersion(), newVersion) > 1) {\n\n\t\t\t\tList<DLFileVersion> approvedFileVersions =\n\t\t\t\t\tdlFileVersionPersistence.findByG_F_N_S(\n\t\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\t\tfileEntry.getName(), StatusConstants.APPROVED);\n\n\t\t\t\tif (!approvedFileVersions.isEmpty()) {\n\t\t\t\t\tnewVersion = approvedFileVersions.get(0).getVersion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfileEntry.setPendingVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setVersion(newVersion);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\ttrue);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\tfalse);\n\t\t}\n\n\t\t// Social\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tif (fileVersion.getVersion().equals(\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsocialActivityLocalService.addUniqueActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.ADD_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.UPDATE_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(DLFileEntry.class);\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tindexer.reindex(fileEntry);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tindexer.delete(fileEntry);\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7462,"modified_method":"public DLFileEntry updateWorkflowStatus(\n\t\t\tlong userId, long fileEntryId, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.findByPrimaryKey(\n\t\t\tfileEntryId);\n\n\t\t// File version\n\n\t\tDLFileVersion fileVersion =\n\t\t\tdlFileVersionLocalService.getLatestFileVersion(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\tfileVersion.setStatus(serviceContext.getStatus());\n\t\tfileVersion.setStatusByUserId(user.getUserId());\n\t\tfileVersion.setStatusByUserName(user.getFullName());\n\t\tfileVersion.setStatusDate(new Date());\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileVersion.getVersion(),\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION) < 0)) {\n\n\t\t\tfileVersion.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\n\t\tdlFileVersionPersistence.update(fileVersion, false);\n\n\t\t// File entry\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) < 0)) {\n\n\t\t\tfileEntry.setVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setPendingVersion(StringPool.BLANK);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\t\telse if (!fileVersion.isApproved() &&\n\t\t\t\t (DLUtil.compareVersions(\n\t\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tString newVersion = DLFileEntryConstants.DEFAULT_VERSION;\n\n\t\t\tif (DLUtil.compareVersions(\n\t\t\t\t\tfileVersion.getVersion(), newVersion) > 1) {\n\n\t\t\t\tList<DLFileVersion> approvedFileVersions =\n\t\t\t\t\tdlFileVersionPersistence.findByG_F_N_S(\n\t\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\t\tfileEntry.getName(), StatusConstants.APPROVED);\n\n\t\t\t\tif (!approvedFileVersions.isEmpty()) {\n\t\t\t\t\tnewVersion = approvedFileVersions.get(0).getVersion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfileEntry.setPendingVersion(fileVersion.getVersion());\n\t\t\tfileEntry.setVersion(newVersion);\n\n\t\t\tdlFileEntryPersistence.update(fileEntry, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\ttrue);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\tDLFileEntry.class.getName(), fileEntry.getFileEntryId(),\n\t\t\t\tfalse);\n\t\t}\n\n\t\t// Social\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tif (fileVersion.getVersion().equals(\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsocialActivityLocalService.addUniqueActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.ADD_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\t\tfileVersion.getUserId(), fileVersion.getGroupId(),\n\t\t\t\t\tfileVersion.getCreateDate(), DLFileEntry.class.getName(),\n\t\t\t\t\tfileEntryId, DLActivityKeys.UPDATE_FILE_ENTRY,\n\t\t\t\t\tStringPool.BLANK, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Indexer\n\n\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(DLFileEntry.class);\n\n\t\tif (fileVersion.isApproved() &&\n\t\t\t(DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileVersion.getVersion()) == 0)) {\n\n\t\t\tindexer.reindex(fileEntry);\n\t\t}\n\t\telse if (Validator.isNull(fileEntry.getVersion())) {\n\t\t\tindexer.delete(fileEntry);\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"534ad1eb07518efc30131c25e24bf5f0f2d4222e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLFileEntry addFileEntry(\n\t\t\tString uuid, long userId, long groupId, long folderId, String name,\n\t\t\tString title, String description, String versionDescription,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tfolderId = getFolderId(user.getCompanyId(), folderId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = name;\n\t\t}\n\n\t\tname = String.valueOf(\n\t\t\tcounterLocalService.increment(DLFileEntry.class.getName()));\n\n\t\tDate now = new Date();\n\n\t\tvalidate(groupId, folderId, title, is);\n\n\t\tlong fileEntryId = counterLocalService.increment();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.create(fileEntryId);\n\n\t\tfileEntry.setUuid(uuid);\n\t\tfileEntry.setGroupId(groupId);\n\t\tfileEntry.setCompanyId(user.getCompanyId());\n\t\tfileEntry.setUserId(user.getUserId());\n\t\tfileEntry.setUserName(user.getFullName());\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setCreateDate(serviceContext.getCreateDate(now));\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setFolderId(folderId);\n\t\tfileEntry.setName(name);\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\n\t\tif (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// File version\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now),\n\t\t\tfileEntry.getVersion(), null, serviceContext.getStatus());\n\n\t\t// Folder\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(folderId);\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, fileEntry.getUserName(), DLFileEntry.class.getName(),\n\t\t\t\tfileEntryId, StatusConstants.APPROVED);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.addFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tfileEntryId, fileEntry.getLuceneProperties(),\n\t\t\tfileEntry.getModifiedDate(), serviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntryId, fileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","id":7463,"modified_method":"public DLFileEntry addFileEntry(\n\t\t\tString uuid, long userId, long groupId, long folderId, String name,\n\t\t\tString title, String description, String versionDescription,\n\t\t\tString extraSettings, InputStream is, long size,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tfolderId = getFolderId(user.getCompanyId(), folderId);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\ttitle = name;\n\t\t}\n\n\t\tname = String.valueOf(\n\t\t\tcounterLocalService.increment(DLFileEntry.class.getName()));\n\n\t\tDate now = new Date();\n\n\t\tvalidate(groupId, folderId, title, is);\n\n\t\tlong fileEntryId = counterLocalService.increment();\n\n\t\tDLFileEntry fileEntry = dlFileEntryPersistence.create(fileEntryId);\n\n\t\tfileEntry.setUuid(uuid);\n\t\tfileEntry.setGroupId(groupId);\n\t\tfileEntry.setCompanyId(user.getCompanyId());\n\t\tfileEntry.setUserId(user.getUserId());\n\t\tfileEntry.setUserName(user.getFullName());\n\t\tfileEntry.setVersionUserId(user.getUserId());\n\t\tfileEntry.setVersionUserName(user.getFullName());\n\t\tfileEntry.setCreateDate(serviceContext.getCreateDate(now));\n\t\tfileEntry.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tfileEntry.setFolderId(folderId);\n\t\tfileEntry.setName(name);\n\t\tfileEntry.setTitle(title);\n\t\tfileEntry.setDescription(description);\n\n\t\tif (serviceContext.getStatus() == StatusConstants.APPROVED) {\n\t\t\tfileEntry.setVersion(DLFileEntryConstants.DEFAULT_VERSION);\n\t\t}\n\t\telse {\n\t\t\tfileEntry.setVersion(StringPool.BLANK);\n\t\t}\n\n\t\tfileEntry.setSize((int)size);\n\t\tfileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);\n\t\tfileEntry.setExtraSettings(extraSettings);\n\t\tfileEntry.setExpandoBridgeAttributes(serviceContext);\n\n\t\tdlFileEntryPersistence.update(fileEntry, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddFileEntryResources(\n\t\t\t\tfileEntry, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// File version\n\n\t\taddFileVersion(\n\t\t\tuser, fileEntry, serviceContext.getModifiedDate(now),\n\t\t\tDLFileEntryConstants.DEFAULT_VERSION, null,\n\t\t\tserviceContext.getStatus());\n\n\t\t// Folder\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tDLFolder folder = dlFolderPersistence.findByPrimaryKey(folderId);\n\n\t\t\tfolder.setLastPostDate(fileEntry.getModifiedDate());\n\n\t\t\tdlFolderPersistence.update(folder, false);\n\t\t}\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, fileEntry, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, fileEntry.getUserName(), DLFileEntry.class.getName(),\n\t\t\t\tfileEntryId, StatusConstants.APPROVED);\n\t\t}\n\n\t\t// File\n\n\t\tdlLocalService.addFile(\n\t\t\tuser.getCompanyId(), PortletKeys.DOCUMENT_LIBRARY,\n\t\t\tfileEntry.getGroupId(), fileEntry.getRepositoryId(), name, false,\n\t\t\tfileEntryId, fileEntry.getLuceneProperties(),\n\t\t\tfileEntry.getModifiedDate(), serviceContext, is);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.isStartWorkflow()) {\n\t\t\ttry {\n\t\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\t\tDLFileEntry.class.getName(), fileEntryId, fileEntry);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new SystemException(e);\n\t\t\t}\n\t\t}\n\n\t\treturn fileEntry;\n\t}","commit_id":"534ad1eb07518efc30131c25e24bf5f0f2d4222e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String getNextVersion(\n\t\tDLFileEntry fileEntry, boolean majorVersion) {\n\n\t\tString version = fileEntry.getVersion();\n\n\t\tif (DLUtil.compareVersions(\n\t\t\t\tfileEntry.getVersion(), fileEntry.getPendingVersion()) < 0) {\n\n\t\t\tversion = fileEntry.getPendingVersion();\n\t\t}\n\n\t\tint[] versionParts = StringUtil.split(version, StringPool.PERIOD, 0);\n\n\t\tif (majorVersion) {\n\t\t\tversionParts[0]++;\n\t\t\tversionParts[1] = 0;\n\t\t}\n\t\telse {\n\t\t\tversionParts[1]++;\n\t\t}\n\n\t\treturn versionParts[0] + StringPool.PERIOD + versionParts[1];\n\t}","id":7464,"modified_method":"protected String getNextVersion(\n\t\tDLFileEntry fileEntry, boolean majorVersion, int status) {\n\n\t\tif ((status == StatusConstants.DRAFT) &&\n\t\t\tValidator.isNotNull(fileEntry.getPendingVersion())) {\n\n\t\t\treturn fileEntry.getPendingVersion();\n\t\t}\n\n\t\tif (Validator.isNull(fileEntry.getVersion())) {\n\t\t\treturn DLFileEntryConstants.DEFAULT_VERSION;\n\t\t}\n\n\t\tint[] versionParts = StringUtil.split(\n\t\t\tfileEntry.getVersion(), StringPool.PERIOD, 0);\n\n\t\tif (majorVersion) {\n\t\t\tversionParts[0]++;\n\t\t\tversionParts[1] = 0;\n\t\t}\n\t\telse {\n\t\t\tversionParts[1]++;\n\t\t}\n\n\t\treturn versionParts[0] + StringPool.PERIOD + versionParts[1];\n\t}","commit_id":"534ad1eb07518efc30131c25e24bf5f0f2d4222e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    protected List<Pair<String, ? extends ChannelHandler>> getBaseChannelHandlers(MessageInput input) {\n        final List<Pair<String, ? extends ChannelHandler>> baseChannelHandlers = super.getBaseChannelHandlers(input);\n        baseChannelHandlers.add(Pair.of(\"connection-counter\", connectionCounter));\n        return baseChannelHandlers;\n    }","id":7465,"modified_method":"@Override\n    protected LinkedHashMap<String, Callable<? extends ChannelHandler>> getBaseChannelHandlers(\n            MessageInput input) {\n        final LinkedHashMap<String, Callable<? extends ChannelHandler>> baseChannelHandlers =\n                super.getBaseChannelHandlers(input);\n        baseChannelHandlers.put(\"connection-counter\", Callables.returning(connectionCounter));\n        return baseChannelHandlers;\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    protected List<Pair<String, ? extends ChannelHandler>> getFinalChannelHandlers(MessageInput input) {\n        final List<Pair<String, ? extends ChannelHandler>> handlers = Lists.newArrayList();\n\n        handlers.add(Pair.of(\"http-handler\", new Handler(enableCors)));\n\n        handlers.addAll(super.getFinalChannelHandlers(input));\n        return handlers;\n    }","id":7466,"modified_method":"@Override\n    protected LinkedHashMap<String, Callable<? extends ChannelHandler>> getFinalChannelHandlers(MessageInput input) {\n        final LinkedHashMap<String, Callable<? extends ChannelHandler>> handlers = Maps.newLinkedHashMap();\n\n        handlers.put(\"http-handler\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new Handler(enableCors);\n            }\n        });\n\n        handlers.putAll(super.getFinalChannelHandlers(input));\n        return handlers;\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    protected List<Pair<String, ? extends ChannelHandler>> getBaseChannelHandlers(MessageInput input) {\n        final List<Pair<String, ? extends ChannelHandler>> baseChannelHandlers = super.getBaseChannelHandlers(input);\n\n        baseChannelHandlers.add(Pair.of(\"decoder\", new HttpRequestDecoder()));\n        baseChannelHandlers.add(Pair.of(\"encoder\", new HttpResponseEncoder()));\n        baseChannelHandlers.add(Pair.of(\"decompressor\", new HttpContentDecompressor()));\n\n        return baseChannelHandlers;\n    }","id":7467,"modified_method":"@Override\n    protected LinkedHashMap<String, Callable<? extends ChannelHandler>> getBaseChannelHandlers(MessageInput input) {\n        final LinkedHashMap<String, Callable<? extends ChannelHandler>> baseChannelHandlers =\n                super.getBaseChannelHandlers(input);\n\n        baseChannelHandlers.put(\"decoder\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new HttpRequestDecoder();\n            }\n        });\n        baseChannelHandlers.put(\"encoder\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new HttpResponseEncoder();\n            }\n        });\n        baseChannelHandlers.put(\"decompressor\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new HttpContentDecompressor();\n            }\n        });\n\n        return baseChannelHandlers;\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public void launch(final MessageInput input) throws MisfireException {\n        final List<Pair<String, ? extends ChannelHandler>> handlerList = getBaseChannelHandlers(input);\n        final List<Pair<String, ? extends ChannelHandler>> finalChannelHandlers = getFinalChannelHandlers(input);\n\n        handlerList.addAll(finalChannelHandlers);\n\n        try {\n            bootstrap = getBootstrap();\n\n            bootstrap.setPipelineFactory(getPipelineFactory(handlerList));\n\n            // sigh, bindable bootstraps do not share a common interface\n            if (bootstrap instanceof ConnectionlessBootstrap) {\n                acceptChannel = ((ConnectionlessBootstrap) bootstrap).bind(socketAddress);\n            } else if (bootstrap instanceof ServerBootstrap) {\n                acceptChannel = ((ServerBootstrap) bootstrap).bind(socketAddress);\n            } else {\n                log.error(\"Unknown netty bootstrap class returned: {}. Cannot safely bind.\", bootstrap);\n                throw new IllegalStateException(\"Unknown netty bootstrap class returned: \" + bootstrap + \". Cannot safely bind.\");\n            }\n        } catch (Exception e) {\n            throw new MisfireException(e);\n        }\n    }","id":7468,"modified_method":"@Override\n    public void launch(final MessageInput input) throws MisfireException {\n        final LinkedHashMap<String, Callable<? extends ChannelHandler>> handlerList = getBaseChannelHandlers(input);\n        final LinkedHashMap<String, Callable<? extends ChannelHandler>> finalHandlers = getFinalChannelHandlers(input);\n\n        handlerList.putAll(finalHandlers);\n\n        try {\n            bootstrap = getBootstrap();\n\n            bootstrap.setPipelineFactory(getPipelineFactory(handlerList));\n\n            // sigh, bindable bootstraps do not share a common interface\n            if (bootstrap instanceof ConnectionlessBootstrap) {\n                acceptChannel = ((ConnectionlessBootstrap) bootstrap).bind(socketAddress);\n            } else if (bootstrap instanceof ServerBootstrap) {\n                acceptChannel = ((ServerBootstrap) bootstrap).bind(socketAddress);\n            } else {\n                log.error(\"Unknown netty bootstrap class returned: {}. Cannot safely bind.\", bootstrap);\n                throw new IllegalStateException(\"Unknown netty bootstrap class returned: \" + bootstrap + \". Cannot safely bind.\");\n            }\n        } catch (Exception e) {\n            throw new MisfireException(e);\n        }\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/**\n     * Subclasses can override this to add additional ChannelHandlers to the pipeline to support additional features.\n     * <p/>\n     * Some common use cases are to add SSL/TLS, connection counters or throttling traffic shapers.\n     *\n     * @return the list of initial channelhandlers to add to the {@link org.jboss.netty.channel.ChannelPipelineFactory}\n     * @param input\n     */\n    protected List<Pair<String, ? extends ChannelHandler>> getBaseChannelHandlers(MessageInput input) {\n        List<Pair<String, ? extends ChannelHandler>> handlerList = Lists.newArrayList();\n\n        handlerList.add(Pair.of(\"packet-meta-dumper\", new PacketInformationDumper(input)));\n        handlerList.add(Pair.of(\"traffic-counter\", throughputCounter));\n\n        return handlerList;\n    }","id":7469,"modified_method":"/**\n     * Subclasses can override this to add additional ChannelHandlers to the pipeline to support additional features.\n     * <p/>\n     * Some common use cases are to add SSL/TLS, connection counters or throttling traffic shapers.\n     *\n     * @return the list of initial channelhandlers to add to the {@link org.jboss.netty.channel.ChannelPipelineFactory}\n     * @param input\n     */\n    protected LinkedHashMap<String, Callable<? extends ChannelHandler>> getBaseChannelHandlers(final MessageInput input) {\n        LinkedHashMap<String, Callable<? extends ChannelHandler>> handlerList = Maps.newLinkedHashMap();\n\n        handlerList.put(\"packet-meta-dumper\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new PacketInformationDumper(input);\n            }\n        });\n        handlerList.put(\"traffic-counter\", Callables.returning(throughputCounter));\n\n        return handlerList;\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"private ChannelPipelineFactory getPipelineFactory(final List<Pair<String, ? extends ChannelHandler>> handlerList) {\n        return new ChannelPipelineFactory() {\n            @Override\n            public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline p = Channels.pipeline();\n                for (Pair<String, ? extends ChannelHandler> pair : handlerList) {\n                    p.addLast(pair.first(), pair.second());\n                }\n                return p;\n            }\n        };\n    }","id":7470,"modified_method":"private ChannelPipelineFactory getPipelineFactory(final LinkedHashMap<String, Callable<? extends ChannelHandler>> handlerList) {\n        return new ChannelPipelineFactory() {\n            @Override\n            public ChannelPipeline getPipeline() throws Exception {\n                final ChannelPipeline p = Channels.pipeline();\n                for (final Map.Entry<String, Callable<? extends ChannelHandler>> entry : handlerList.entrySet()) {\n                    p.addLast(entry.getKey(), entry.getValue().call());\n                }\n                return p;\n            }\n        };\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/**\n     * Subclasses can override this to modify the {@link org.jboss.netty.channel.ChannelHandler channel handlers} at the end of the pipeline.\n     * <p/>\n     * The default handlers in this group are the aggregation handler (e.g. for chunked GELF via UDP), which can be missing, and the {@link NettyTransport.RawMessageHandler}.\n     * <p/>\n     * Usually this should not be necessary, only modify them if you have a codec that cannot create a {@link org.graylog2.plugin.journal.RawMessage} for\n     * incoming messages at the end of the pipeline.\n     * <p/>\n     * One valid use case would be to insert debug handlers in the middle of the list, though.\n     *\n     * @return the list of channel handlers at the end of the pipeline\n     * @param input\n     */\n    protected List<Pair<String, ? extends ChannelHandler>> getFinalChannelHandlers(MessageInput input) {\n        List<Pair<String, ? extends ChannelHandler>> handlerList = Lists.newArrayList();\n\n        if (aggregator != null) {\n            log.debug(\"Adding codec aggregator {} to channel pipeline\", aggregator);\n            handlerList.add(Pair.of(\"codec-aggregator\", new MessageAggregationHandler(input, aggregator)));\n        }\n\n        handlerList.add(Pair.of(\"rawmessage-handler\", new RawMessageHandler(input)));\n        return handlerList;\n    }","id":7471,"modified_method":"/**\n     * Subclasses can override this to modify the {@link org.jboss.netty.channel.ChannelHandler channel handlers} at the end of the pipeline.\n     * <p/>\n     * The default handlers in this group are the aggregation handler (e.g. for chunked GELF via UDP), which can be missing, and the {@link NettyTransport.RawMessageHandler}.\n     * <p/>\n     * Usually this should not be necessary, only modify them if you have a codec that cannot create a {@link org.graylog2.plugin.journal.RawMessage} for\n     * incoming messages at the end of the pipeline.\n     * <p/>\n     * One valid use case would be to insert debug handlers in the middle of the list, though.\n     *\n     * @return the list of channel handlers at the end of the pipeline\n     * @param input\n     */\n    protected LinkedHashMap<String, Callable<? extends ChannelHandler>> getFinalChannelHandlers(final MessageInput input) {\n        LinkedHashMap<String, Callable<? extends ChannelHandler>> handlerList = Maps.newLinkedHashMap();\n\n        if (aggregator != null) {\n            log.debug(\"Adding codec aggregator {} to channel pipeline\", aggregator);\n            handlerList.put(\"codec-aggregator\", new Callable<ChannelHandler>() {\n                @Override\n                public ChannelHandler call() throws Exception {\n                    return new MessageAggregationHandler(input, aggregator);\n                }\n            });\n        }\n\n        handlerList.put(\"rawmessage-handler\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new RawMessageHandler(input);\n            }\n        });\n        return handlerList;\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    protected List<Pair<String, ? extends ChannelHandler>> getFinalChannelHandlers(MessageInput input) {\n        final List<Pair<String, ? extends ChannelHandler>> finalChannelHandlers = Lists.newArrayList();\n\n        finalChannelHandlers.add(Pair.of(\"framer\", new DelimiterBasedFrameDecoder(maxFrameLength, delimiter)));\n        finalChannelHandlers.addAll(super.getFinalChannelHandlers(input));\n\n        return finalChannelHandlers;\n    }","id":7472,"modified_method":"@Override\n    protected LinkedHashMap<String, Callable<? extends ChannelHandler>> getFinalChannelHandlers(MessageInput input) {\n        final LinkedHashMap<String, Callable<? extends ChannelHandler>> finalChannelHandlers = Maps.newLinkedHashMap();\n\n        finalChannelHandlers.put(\"framer\", new Callable<ChannelHandler>() {\n            @Override\n            public ChannelHandler call() throws Exception {\n                return new DelimiterBasedFrameDecoder(maxFrameLength, delimiter);\n            }\n        });\n        finalChannelHandlers.putAll(super.getFinalChannelHandlers(input));\n\n        return finalChannelHandlers;\n    }","commit_id":"90f253a703a0bacfd7b0efdd11e6b0bcbfe5e445","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/**\n   * serve the value array with a capped # of columns [0,max_columns)\n   */\n  public Response serveValueArray(final ValueArray va, int max_column) {\n    if( _offset.value() > va._numrows )\n      return Response.error(\"Value only has \" + va._numrows + \" rows\");\n\n    JsonObject result = new JsonObject();\n    result.addProperty(VALUE_TYPE, \"parsed\");\n    result.addProperty(KEY, va._key.toString());\n    result.addProperty(NUM_ROWS, va._numrows);\n    result.addProperty(NUM_COLS, va._cols.length);\n    result.addProperty(ROW_SIZE, va._rowsize);\n    result.addProperty(VALUE_SIZE, va.length());\n\n    JsonArray cols = new JsonArray();\n    JsonArray rows = new JsonArray();\n\n    final int col_limit = Math.min(max_column, va._cols.length);\n\n    for( int i = 0; i < col_limit; i++ ) {\n      Column c = va._cols[i];\n      JsonObject json = new JsonObject();\n      json.addProperty(NAME, c._name);\n      json.addProperty(OFFSET, c._off);\n      json.addProperty(SIZE, Math.abs(c._size));\n      json.addProperty(BASE, c._base);\n      json.addProperty(SCALE, (int) c._scale);\n      json.addProperty(MIN,  c.isEnum() ? Double.NaN : c._min);\n      json.addProperty(MAX,  c.isEnum() ? Double.NaN : c._max);\n      json.addProperty(MEAN, c.isEnum() ? Double.NaN : c._mean);\n      json.addProperty(VARIANCE, c.isEnum() ? Double.NaN : c._sigma);\n      json.addProperty(NUM_MISSING_VALUES, va._numrows - c._n);\n      json.addProperty(TYPE, c.isEnum() ? \"enum\" : (c.isFloat() ? \"float\" : \"int\"));\n      json.addProperty(ENUM_DOMAIN_SIZE, c.isEnum() ? c._domain.length : 0);\n      cols.add(json);\n    }\n\n    if( _offset.value() != INFO_PAGE ) {\n      long endRow = Math.min(_offset.value() + _view.value(), va._numrows);\n      long startRow = Math.min(_offset.value(), va._numrows - _view.value());\n      for( long row = Math.max(0, startRow); row < endRow; ++row ) {\n        JsonObject obj = new JsonObject();\n        obj.addProperty(ROW, row);\n        for( int i = 0; i < col_limit; ++i )\n          format(obj, va, row, i);\n        rows.add(obj);\n      }\n    }\n\n    result.add(COLS, cols);\n    result.add(ROWS, rows);\n\n    Response r = Response.done(result);\n    r.setBuilder(ROOT_OBJECT, new ObjectBuilder() {\n      @Override\n      public String build(Response response, JsonObject object, String contextName) {\n        String s = html(va._key, va._numrows, va._cols.length, va._rowsize, va.length());\n        Table t = new Table(argumentsToJson(), _offset.value(), _view.value(), va, col_limit);\n        s += t.build(response, object.get(ROWS), ROWS);\n        return s;\n      }\n    });\n    r.setBuilder(ROWS + \".\" + ROW, new ArrayRowElementBuilder() {\n      @Override\n      public String elementToString(JsonElement elm, String contextName) {\n        String json = elm.getAsString();\n        String html = _displayNames.get(json);\n        return html != null ? html : RequestStatics.JSON2HTML(json);\n      }\n    });\n    return r;\n  }","id":7473,"modified_method":"/**\n   * serve the value array with a capped # of columns [0,max_columns)\n   */\n  public Response serveValueArray(final ValueArray va, int max_column) {\n    if( _offset.value() > va._numrows )\n      return Response.error(\"Value only has \" + va._numrows + \" rows\");\n\n    JsonObject result = new JsonObject();\n    result.addProperty(VALUE_TYPE, \"parsed\");\n    result.addProperty(KEY, va._key.toString());\n    result.addProperty(NUM_ROWS, va._numrows);\n    result.addProperty(NUM_COLS, va._cols.length);\n    result.addProperty(ROW_SIZE, va._rowsize);\n    result.addProperty(VALUE_SIZE, va.length());\n\n    JsonArray cols = new JsonArray();\n    JsonArray rows = new JsonArray();\n\n    final int col_limit = Math.min(max_column, va._cols.length);\n\n    for( int i = 0; i < col_limit; i++ ) {\n      Column c = va._cols[i];\n      JsonObject json = new JsonObject();\n      json.addProperty(NAME, c._name);\n      json.addProperty(OFFSET, c._off);\n      json.addProperty(SIZE, Math.abs(c._size));\n      json.addProperty(BASE, c._base);\n      json.addProperty(SCALE, (int) c._scale);\n      json.addProperty(MIN,  (c.isEnum() || Double.isNaN(c._min)) ? \"\\\"NaN\\\"\" : String.valueOf(c._min));\n      json.addProperty(MAX,  (c.isEnum() || Double.isNaN(c._max)) ? \"\\\"NaN\\\"\" : String.valueOf(c._max));\n      json.addProperty(MEAN,  (c.isEnum() || Double.isNaN(c._mean)) ? \"\\\"NaN\\\"\" : String.valueOf(c._mean));\n      json.addProperty(VARIANCE,  (c.isEnum() || Double.isNaN(c._sigma)) ? \"\\\"NaN\\\"\" : String.valueOf(c._sigma));\n      json.addProperty(NUM_MISSING_VALUES, va._numrows - c._n);\n      json.addProperty(TYPE, c.isEnum() ? \"enum\" : (c.isFloat() ? \"float\" : \"int\"));\n      json.addProperty(ENUM_DOMAIN_SIZE, c.isEnum() ? c._domain.length : 0);\n      cols.add(json);\n    }\n\n    if( _offset.value() != INFO_PAGE ) {\n      long endRow = Math.min(_offset.value() + _view.value(), va._numrows);\n      long startRow = Math.min(_offset.value(), va._numrows - _view.value());\n      for( long row = Math.max(0, startRow); row < endRow; ++row ) {\n        JsonObject obj = new JsonObject();\n        obj.addProperty(ROW, row);\n        for( int i = 0; i < col_limit; ++i )\n          format(obj, va, row, i);\n        rows.add(obj);\n      }\n    }\n\n    result.add(COLS, cols);\n    result.add(ROWS, rows);\n\n    Response r = Response.done(result);\n    r.setBuilder(ROOT_OBJECT, new ObjectBuilder() {\n      @Override\n      public String build(Response response, JsonObject object, String contextName) {\n        String s = html(va._key, va._numrows, va._cols.length, va._rowsize, va.length());\n        Table t = new Table(argumentsToJson(), _offset.value(), _view.value(), va, col_limit);\n        s += t.build(response, object.get(ROWS), ROWS);\n        return s;\n      }\n    });\n    r.setBuilder(ROWS + \".\" + ROW, new ArrayRowElementBuilder() {\n      @Override\n      public String elementToString(JsonElement elm, String contextName) {\n        String json = elm.getAsString();\n        String html = _displayNames.get(json);\n        return html != null ? html : RequestStatics.JSON2HTML(json);\n      }\n    });\n    return r;\n  }","commit_id":"1c9c6ab9665887cca44d446186e0563448ecb22a","url":"https://github.com/h2oai/h2o-2"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","id":7474,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        return System.getProperties();\n    }","id":7475,"modified_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        return System.getProperties();\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIGDIR_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","id":7476,"modified_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","id":7477,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void setStaticContentDir(String staticContentResourcePath) {\n        this.contentResourcePath = staticContentResourcePath;\n    }","id":7478,"modified_method":"public void addStaticContent(String contentLocation, String serverMountPoint) {\n        staticContent.put(serverMountPoint, contentLocation);\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        try {\n            final WebAppContext webadmin = new WebAppContext();\n            webadmin.setServer(jetty);\n            webadmin.setContextPath(\"/\" + contentContextPath);\n            URL url = getClass().getClassLoader().getResource(contentResourcePath).toURI().toURL();\n            final Resource resource = Resource.newResource(url);\n            webadmin.setBaseResource(resource);\n            jetty.addHandler(webadmin);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Context jerseyContext = new Context(jetty, \"/\");\n        jerseyContext.addServlet(jerseyServletHolder, \"/*\");\n\n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7479,"modified_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        loadStaticContent();\n        loadJAXRSPackages();\n        \n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ws.shutdown();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(\"http://localhost:\" + portNo + \"/\"));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","id":7480,"modified_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ws.stop();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.setPackages(getDummyWebResourcePackage());\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.shutdown();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","id":7481,"modified_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = 5555;//WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addJAXRSPackages(List.from(new String[] { getDummyWebResourcePackage() }), \"/services\");\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + \"/services\" + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.stop();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(ws.getWelcomeUri());\n        \n        \n        ws.shutdown();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","id":7482,"modified_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        \n        ws.stop();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Integer start(String[] args) {\n        try {\n            webServer.setPort(configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT));\n            webServer.setPackages(convertPropertiesToSingleString(configurator.configuration().getStringArray(WEBSERVICE_PACKAGES)));\n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServer.getPort());\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServer.getPort());\n            return 1;\n        }\n    }","id":7483,"modified_method":"public Integer start(String[] args) {\n        webServerPort = configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT);\n        try {\n            webServer.setPort(webServerPort);\n            webServer.addJAXRSPackages(List.from(new String[] {REST_API_PACKAGE}), REST_API_PATH);\n            \n            // webadmin assumes root\n            webServer.addStaticContent(\"html\", \"/webadmin\");\n            webServer.addJAXRSPackages(List.from(new String[] {WEB_ADMIN_REST_API_PACKAGE}), \"/\");\n            \n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServerPort);\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServerPort);\n            return 1;\n        }\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIGDIR_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","id":7484,"modified_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIG_FILE_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int stop(int stopArg) {\n        int portNo = -1;\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                portNo = webServer.getPort();\n                webServer.shutdown();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", portNo, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", portNo, location, e.getMessage());\n            return 1;\n        }\n    }","id":7485,"modified_method":"public int stop(int stopArg) {\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                webServer.stop();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", webServerPort, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", webServerPort, location, e.getMessage());\n            return 1;\n        }\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [5555], database [/tmp/neo/functionaltest.db]\"));\n    }","id":7486,"modified_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [7474], database [/tmp/neo/functionaltest.db]\"));\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"5555\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7487,"modified_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"7474\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMakeJAXRSClassesSpecifiedInTheConfigFileAvailableViaHTTP() throws URISyntaxException {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse petShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/petshop/prices\").get(ClientResponse.class);\n\n        assertEquals(200, petShopResponse.getStatus());\n        assertThat(petShopResponse.getEntity(String.class), containsString(\"dogs for a tenner\"));\n\n        client = Client.create();\n        ClientResponse coffeeShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/coffeeshop/menu\").get(ClientResponse.class);\n\n        assertEquals(200, coffeeShopResponse.getStatus());\n        assertThat(coffeeShopResponse.getEntity(String.class), containsString(\"espresso for a quid\"));\n\n        server.stop();\n\n    }","id":7488,"modified_method":"@Test\n    public void shouldMakeJAXRSClassesAvailableViaHTTP() throws URISyntaxException {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        ClientResponse response = Client.create().resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + NeoServer.REST_API_PATH).get(ClientResponse.class);\n        assertEquals(200, response.getStatus());\n        server.stop();\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + webServer.getPort() + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","id":7489,"modified_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n    }","id":7490,"modified_method":"@After\n    public void tearDown() throws Exception {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n        String dbDir = configurator().configuration().getString(\"org.neo4j.database.location\");\n        FileUtils.deleteDirectory(new File(dbDir));\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer(configurator(), database(), webServer());\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","id":7491,"modified_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer();\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7492,"modified_method":"private File configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return tempPropertyFile;\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        Configurator config = configWithoutWebServerPort();\n\n        Database database = database();\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(config, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","id":7493,"modified_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, configWithoutWebServerPort().getAbsolutePath());\n\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        new NeoServer();\n    }","id":7494,"modified_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        new NeoServer();\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n        return webServer;\n    }","id":7495,"modified_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.addJAXRSPackages(List.from(new String[] {NeoServer.REST_API_PACKAGE}), NeoServer.REST_API_PATH);\n        return webServer;\n    }","commit_id":"80ce54219ec947347f9d0accf4e9545b82c23de8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","id":7496,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        return System.getProperties();\n    }","id":7497,"modified_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        return System.getProperties();\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIGDIR_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","id":7498,"modified_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","id":7499,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        try {\n            final WebAppContext webadmin = new WebAppContext();\n            webadmin.setServer(jetty);\n            webadmin.setContextPath(\"/\" + contentContextPath);\n            URL url = getClass().getClassLoader().getResource(contentResourcePath).toURI().toURL();\n            final Resource resource = Resource.newResource(url);\n            webadmin.setBaseResource(resource);\n            jetty.addHandler(webadmin);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Context jerseyContext = new Context(jetty, \"/\");\n        jerseyContext.addServlet(jerseyServletHolder, \"/*\");\n\n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7500,"modified_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        loadStaticContent();\n        loadJAXRSPackages();\n        \n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void setStaticContentDir(String staticContentResourcePath) {\n        this.contentResourcePath = staticContentResourcePath;\n    }","id":7501,"modified_method":"public void addStaticContent(String contentLocation, String serverMountPoint) {\n        staticContent.put(serverMountPoint, contentLocation);\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ws.shutdown();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(\"http://localhost:\" + portNo + \"/\"));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","id":7502,"modified_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ws.stop();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.setPackages(getDummyWebResourcePackage());\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.shutdown();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","id":7503,"modified_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = 5555;//WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addJAXRSPackages(List.from(new String[] { getDummyWebResourcePackage() }), \"/services\");\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + \"/services\" + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.stop();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(ws.getWelcomeUri());\n        \n        \n        ws.shutdown();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","id":7504,"modified_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        \n        ws.stop();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Integer start(String[] args) {\n        try {\n            webServer.setPort(configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT));\n            webServer.setPackages(convertPropertiesToSingleString(configurator.configuration().getStringArray(WEBSERVICE_PACKAGES)));\n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServer.getPort());\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServer.getPort());\n            return 1;\n        }\n    }","id":7505,"modified_method":"public Integer start(String[] args) {\n        webServerPort = configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT);\n        try {\n            webServer.setPort(webServerPort);\n            webServer.addJAXRSPackages(List.from(new String[] {REST_API_PACKAGE}), REST_API_PATH);\n            \n            // webadmin assumes root\n            webServer.addStaticContent(\"html\", \"/webadmin\");\n            webServer.addJAXRSPackages(List.from(new String[] {WEB_ADMIN_REST_API_PACKAGE}), \"/\");\n            \n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServerPort);\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServerPort);\n            return 1;\n        }\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIGDIR_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","id":7506,"modified_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIG_FILE_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int stop(int stopArg) {\n        int portNo = -1;\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                portNo = webServer.getPort();\n                webServer.shutdown();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", portNo, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", portNo, location, e.getMessage());\n            return 1;\n        }\n    }","id":7507,"modified_method":"public int stop(int stopArg) {\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                webServer.stop();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", webServerPort, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", webServerPort, location, e.getMessage());\n            return 1;\n        }\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMakeJAXRSClassesSpecifiedInTheConfigFileAvailableViaHTTP() throws URISyntaxException {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse petShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/petshop/prices\").get(ClientResponse.class);\n\n        assertEquals(200, petShopResponse.getStatus());\n        assertThat(petShopResponse.getEntity(String.class), containsString(\"dogs for a tenner\"));\n\n        client = Client.create();\n        ClientResponse coffeeShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/coffeeshop/menu\").get(ClientResponse.class);\n\n        assertEquals(200, coffeeShopResponse.getStatus());\n        assertThat(coffeeShopResponse.getEntity(String.class), containsString(\"espresso for a quid\"));\n\n        server.stop();\n\n    }","id":7508,"modified_method":"@Test\n    public void shouldMakeJAXRSClassesAvailableViaHTTP() throws URISyntaxException {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        ClientResponse response = Client.create().resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + NeoServer.REST_API_PATH).get(ClientResponse.class);\n        assertEquals(200, response.getStatus());\n        server.stop();\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [5555], database [/tmp/neo/functionaltest.db]\"));\n    }","id":7509,"modified_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [7474], database [/tmp/neo/functionaltest.db]\"));\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n    }","id":7510,"modified_method":"@After\n    public void tearDown() throws Exception {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n        String dbDir = configurator().configuration().getString(\"org.neo4j.database.location\");\n        FileUtils.deleteDirectory(new File(dbDir));\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        Configurator config = configWithoutWebServerPort();\n\n        Database database = database();\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(config, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","id":7511,"modified_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, configWithoutWebServerPort().getAbsolutePath());\n\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + webServer.getPort() + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","id":7512,"modified_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7513,"modified_method":"private File configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return tempPropertyFile;\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"5555\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7514,"modified_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"7474\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer(configurator(), database(), webServer());\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","id":7515,"modified_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer();\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        new NeoServer();\n    }","id":7516,"modified_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        new NeoServer();\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n        return webServer;\n    }","id":7517,"modified_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.addJAXRSPackages(List.from(new String[] {NeoServer.REST_API_PACKAGE}), NeoServer.REST_API_PATH);\n        return webServer;\n    }","commit_id":"905040a4e5b7d641a3e0388a73edc7f3090ac133","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","id":7518,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIGDIR_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","id":7519,"modified_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        return System.getProperties();\n    }","id":7520,"modified_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        return System.getProperties();\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","id":7521,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void setStaticContentDir(String staticContentResourcePath) {\n        this.contentResourcePath = staticContentResourcePath;\n    }","id":7522,"modified_method":"public void addStaticContent(String contentLocation, String serverMountPoint) {\n        staticContent.put(serverMountPoint, contentLocation);\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        try {\n            final WebAppContext webadmin = new WebAppContext();\n            webadmin.setServer(jetty);\n            webadmin.setContextPath(\"/\" + contentContextPath);\n            URL url = getClass().getClassLoader().getResource(contentResourcePath).toURI().toURL();\n            final Resource resource = Resource.newResource(url);\n            webadmin.setBaseResource(resource);\n            jetty.addHandler(webadmin);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Context jerseyContext = new Context(jetty, \"/\");\n        jerseyContext.addServlet(jerseyServletHolder, \"/*\");\n\n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7523,"modified_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        loadStaticContent();\n        loadJAXRSPackages();\n        \n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ws.shutdown();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(\"http://localhost:\" + portNo + \"/\"));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","id":7524,"modified_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ws.stop();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.setPackages(getDummyWebResourcePackage());\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.shutdown();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","id":7525,"modified_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = 5555;//WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addJAXRSPackages(List.from(new String[] { getDummyWebResourcePackage() }), \"/services\");\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + \"/services\" + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.stop();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(ws.getWelcomeUri());\n        \n        \n        ws.shutdown();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","id":7526,"modified_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        \n        ws.stop();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int stop(int stopArg) {\n        int portNo = -1;\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                portNo = webServer.getPort();\n                webServer.shutdown();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", portNo, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", portNo, location, e.getMessage());\n            return 1;\n        }\n    }","id":7527,"modified_method":"public int stop(int stopArg) {\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                webServer.stop();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", webServerPort, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", webServerPort, location, e.getMessage());\n            return 1;\n        }\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Integer start(String[] args) {\n        try {\n            webServer.setPort(configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT));\n            webServer.setPackages(convertPropertiesToSingleString(configurator.configuration().getStringArray(WEBSERVICE_PACKAGES)));\n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServer.getPort());\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServer.getPort());\n            return 1;\n        }\n    }","id":7528,"modified_method":"public Integer start(String[] args) {\n        webServerPort = configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT);\n        try {\n            webServer.setPort(webServerPort);\n            webServer.addJAXRSPackages(List.from(new String[] {REST_API_PACKAGE}), REST_API_PATH);\n            \n            // webadmin assumes root\n            webServer.addStaticContent(\"html\", \"/webadmin\");\n            webServer.addJAXRSPackages(List.from(new String[] {WEB_ADMIN_REST_API_PACKAGE}), \"/\");\n            \n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServerPort);\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServerPort);\n            return 1;\n        }\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIGDIR_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","id":7529,"modified_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIG_FILE_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"5555\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7530,"modified_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"7474\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + webServer.getPort() + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","id":7531,"modified_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7532,"modified_method":"private File configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return tempPropertyFile;\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        Configurator config = configWithoutWebServerPort();\n\n        Database database = database();\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(config, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","id":7533,"modified_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, configWithoutWebServerPort().getAbsolutePath());\n\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n    }","id":7534,"modified_method":"@After\n    public void tearDown() throws Exception {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n        String dbDir = configurator().configuration().getString(\"org.neo4j.database.location\");\n        FileUtils.deleteDirectory(new File(dbDir));\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [5555], database [/tmp/neo/functionaltest.db]\"));\n    }","id":7535,"modified_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [7474], database [/tmp/neo/functionaltest.db]\"));\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer(configurator(), database(), webServer());\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","id":7536,"modified_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer();\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMakeJAXRSClassesSpecifiedInTheConfigFileAvailableViaHTTP() throws URISyntaxException {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse petShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/petshop/prices\").get(ClientResponse.class);\n\n        assertEquals(200, petShopResponse.getStatus());\n        assertThat(petShopResponse.getEntity(String.class), containsString(\"dogs for a tenner\"));\n\n        client = Client.create();\n        ClientResponse coffeeShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/coffeeshop/menu\").get(ClientResponse.class);\n\n        assertEquals(200, coffeeShopResponse.getStatus());\n        assertThat(coffeeShopResponse.getEntity(String.class), containsString(\"espresso for a quid\"));\n\n        server.stop();\n\n    }","id":7537,"modified_method":"@Test\n    public void shouldMakeJAXRSClassesAvailableViaHTTP() throws URISyntaxException {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        ClientResponse response = Client.create().resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + NeoServer.REST_API_PATH).get(ClientResponse.class);\n        assertEquals(200, response.getStatus());\n        server.stop();\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n        return webServer;\n    }","id":7538,"modified_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.addJAXRSPackages(List.from(new String[] {NeoServer.REST_API_PACKAGE}), NeoServer.REST_API_PATH);\n        return webServer;\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        new NeoServer();\n    }","id":7539,"modified_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        new NeoServer();\n    }","commit_id":"100cbee7937203225ae3c701d2e6fa218f6c3ce1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","id":7540,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed  = key != null && new File(key).exists();\n        ran = true;\n        return passed;\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        return System.getProperties();\n    }","id":7541,"modified_method":"private Properties propertiesWithoutConfigFileLocation() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        return System.getProperties();\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIGDIR_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","id":7542,"modified_method":"private Properties propertiesWithConfigFileLocation(File propertyFile) {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, propertyFile.getAbsolutePath());\n        return System.getProperties();\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","id":7543,"modified_method":"public boolean execute(Properties properties) {\n        String key = properties.getProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        this.passed   = key != null;\n        ran = true;\n        return passed;\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void setStaticContentDir(String staticContentResourcePath) {\n        this.contentResourcePath = staticContentResourcePath;\n    }","id":7544,"modified_method":"public void addStaticContent(String contentLocation, String serverMountPoint) {\n        staticContent.put(serverMountPoint, contentLocation);\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        try {\n            final WebAppContext webadmin = new WebAppContext();\n            webadmin.setServer(jetty);\n            webadmin.setContextPath(\"/\" + contentContextPath);\n            URL url = getClass().getClassLoader().getResource(contentResourcePath).toURI().toURL();\n            final Resource resource = Resource.newResource(url);\n            webadmin.setBaseResource(resource);\n            jetty.addHandler(webadmin);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Context jerseyContext = new Context(jetty, \"/\");\n        jerseyContext.addServlet(jerseyServletHolder, \"/*\");\n\n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","id":7545,"modified_method":"public void start() {\n        jetty = new Server(jettyPort);\n        jetty.setStopAtShutdown(true);\n\n        loadStaticContent();\n        loadJAXRSPackages();\n        \n        try {\n            jetty.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ws.shutdown();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(\"http://localhost:\" + portNo + \"/\"));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","id":7546,"modified_method":"@Test\n    public void shouldShutdownServer() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ws.stop();\n        \n        try {\n            WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        } catch(ClientHandlerException che) {\n            assertThat(che.getMessage(), containsString(\"Connection refused\"));\n        }\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.setPackages(getDummyWebResourcePackage());\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.shutdown();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","id":7547,"modified_method":"@Test\n    public void shouldMountASimpleJAXRSApp() throws Exception {\n        WebServer ws = new Jetty6WebServer();\n        int portNo = 5555;//WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addJAXRSPackages(List.from(new String[] { getDummyWebResourcePackage() }), \"/services\");\n        ws.start();\n     \n        \n        ClientResponse response = Client.create().resource(\"http://localhost:\" + portNo + \"/services\" + HelloWorldWebResource.ROOT_PATH).entity(\"Bertrand Russell\").type(\"text/plain\").accept(\"text/plain\").post(ClientResponse.class);\n        \n        ws.stop();\n        \n        assertEquals(200, response.getStatus());\n        assertThat(response.getEntity(String.class), containsString(\"hello, Bertrand Russell\"));\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.setStaticContentDir(defaultStaticContentLocation());\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(ws.getWelcomeUri());\n        \n        \n        ws.shutdown();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","id":7548,"modified_method":"@Test\n    public void shouldHostWelcomePageOnStartup() throws Exception {\n        \n        WebServer ws = new Jetty6WebServer();\n        int portNo = WebTestUtils.nextAvailablePortNumber();\n        ws.setPort(portNo);\n        ws.addStaticContent(defaultStaticContentLocation(), \"/content\");\n        ws.start();\n        ClientResponse response = WebTestUtils.sendGetRequestTo(new URI(String.format(\"http://localhost:%d/content/welcome.html\", portNo)));\n        \n        ws.stop();\n        \n        assertThat(response.getStatus(), greaterThan(199));\n        assertThat(response.getStatus(), lessThan(308));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n        assertThat(response.getEntity(String.class), not(containsString(\"Directory:\")));\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int stop(int stopArg) {\n        int portNo = -1;\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                portNo = webServer.getPort();\n                webServer.shutdown();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", portNo, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", portNo, location, e.getMessage());\n            return 1;\n        }\n    }","id":7549,"modified_method":"public int stop(int stopArg) {\n        String location = \"unknown\";\n        try {\n            if (database != null) {\n                location = database.getLocation();\n                database.shutdown();\n                database = null;\n            }\n            if (webServer != null) {\n                webServer.stop();\n                webServer = null;\n            }\n            configurator = null;\n            \n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", webServerPort, location);\n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] \", webServerPort, location, e.getMessage());\n            return 1;\n        }\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIGDIR_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","id":7550,"modified_method":"private static File getConfigFile() {\n        return new File(System.getProperty(NEO_CONFIG_FILE_PROPERTY, DEFAULT_NEO_CONFIGDIR));\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Integer start(String[] args) {\n        try {\n            webServer.setPort(configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT));\n            webServer.setPackages(convertPropertiesToSingleString(configurator.configuration().getStringArray(WEBSERVICE_PACKAGES)));\n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServer.getPort());\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServer.getPort());\n            return 1;\n        }\n    }","id":7551,"modified_method":"public Integer start(String[] args) {\n        webServerPort = configurator.configuration().getInt(WEBSERVER_PORT, DEFAULT_WEBSERVER_PORT);\n        try {\n            webServer.setPort(webServerPort);\n            webServer.addJAXRSPackages(List.from(new String[] {REST_API_PACKAGE}), REST_API_PATH);\n            \n            // webadmin assumes root\n            webServer.addStaticContent(\"html\", \"/webadmin\");\n            webServer.addJAXRSPackages(List.from(new String[] {WEB_ADMIN_REST_API_PACKAGE}), \"/\");\n            \n            webServer.start();\n            \n            log.info(\"Started Neo Server on port [%s]\", webServerPort);\n            \n            return 0;\n        } catch (Exception e) {\n            log.error(\"Failed to start Neo Server on port [%s]\", webServerPort);\n            return 1;\n        }\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n    }","id":7552,"modified_method":"@After\n    public void tearDown() throws Exception {\n        System.clearProperty(ORG_NEO4J_SERVER_PROPERTIES);\n        String dbDir = configurator().configuration().getString(\"org.neo4j.database.location\");\n        FileUtils.deleteDirectory(new File(dbDir));\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMakeJAXRSClassesSpecifiedInTheConfigFileAvailableViaHTTP() throws URISyntaxException {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse petShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/petshop/prices\").get(ClientResponse.class);\n\n        assertEquals(200, petShopResponse.getStatus());\n        assertThat(petShopResponse.getEntity(String.class), containsString(\"dogs for a tenner\"));\n\n        client = Client.create();\n        ClientResponse coffeeShopResponse = client.resource(\"http://localhost:\" + server.webServer().getPort() + \"/coffeeshop/menu\").get(ClientResponse.class);\n\n        assertEquals(200, coffeeShopResponse.getStatus());\n        assertThat(coffeeShopResponse.getEntity(String.class), containsString(\"espresso for a quid\"));\n\n        server.stop();\n\n    }","id":7553,"modified_method":"@Test\n    public void shouldMakeJAXRSClassesAvailableViaHTTP() throws URISyntaxException {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        ClientResponse response = Client.create().resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + NeoServer.REST_API_PATH).get(ClientResponse.class);\n        assertEquals(200, response.getStatus());\n        server.stop();\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [5555], database [/tmp/neo/functionaltest.db]\"));\n    }","id":7554,"modified_method":"@Test\n    public void shouldLogShutdown() {\n        NeoServer neoServer = new NeoServer(configurator(), database(), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        neoServer.start(null);\n        neoServer.stop();\n\n        assertThat(appender.toString(), containsString(\"INFO - Successfully shutdown Neo Server on port [7474], database [/tmp/neo/functionaltest.db]\"));\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7555,"modified_method":"private File configWithoutWebServerPort() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/no-webserver-port.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.neo4j.server.web\", tempPropertyFile);\n\n        return tempPropertyFile;\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        Configurator config = configWithoutWebServerPort();\n\n        Database database = database();\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(config, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","id":7556,"modified_method":"@Test\n    public void shouldDefaultToSensiblePortIfNoneSpecifiedInConfig() throws Exception {\n        System.setProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY, configWithoutWebServerPort().getAbsolutePath());\n\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + DEFAULT_PORT + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.getEntity(String.class), containsString(\"Welcome\"));\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        Configurator configurator = configurator();\n        Database database = database();\n        WebServer webServer = webServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n\n        NeoServer server = new NeoServer(configurator, database, webServer);\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + webServer.getPort() + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","id":7557,"modified_method":"@Test\n    public void serverShouldProvideAWelcomePage() {\n        NeoServer server = new NeoServer();\n        server.start(null);\n\n        Client client = Client.create();\n        ClientResponse response = client.resource(\"http://localhost:\" + configurator().configuration().getInt(\"org.neo4j.webserver.port\") + \"/webadmin/welcome.html\").get(ClientResponse.class);\n\n        assertThat(response.getStatus(), is(200));\n        assertThat( response.getHeaders().getFirst(\"Content-Type\"), containsString(\"html\"));\n\n        server.stop();\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"5555\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","id":7558,"modified_method":"private Configurator portClashingConfigurator() throws IOException {\n        File tempPropertyFile = ServerTestUtils.createTempPropertyFile();\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.database.location\", \"/tmp/neo/functionaltest-clashing.db\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webserver.port\", \"7474\", tempPropertyFile);\n        ServerTestUtils.writePropertyToFile(\"org.neo4j.webservice.packages\", \"org.example.coffeeshop, org.example.petshop\", tempPropertyFile);\n\n        return new Configurator(tempPropertyFile);\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer(configurator(), database(), webServer());\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","id":7559,"modified_method":"@Test\n    public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {\n        NeoServer s1 = new NeoServer();\n        s1.start(null);\n\n        Configurator conflictingConfig = portClashingConfigurator();\n\n\n        NeoServer s2 = new NeoServer(portClashingConfigurator(), new Database(conflictingConfig.configuration().getString(\"org.neo4j.database.location\")), webServer());\n        InMemoryAppender appender = new InMemoryAppender(NeoServer.log);\n        s2.start(null);\n\n        assertThat(appender.toString(), containsString(String.format(\"ERROR - Failed to start Neo Server on port [%s]\", conflictingConfig.configuration().getString(\"org.neo4j.webserver.port\"))));\n        s1.stop();\n        s2.stop();\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIGDIR_PROPERTY);\n        new NeoServer();\n    }","id":7560,"modified_method":"@Test(expected=StartupHealthCheckFailedException.class)\n    public void shouldExitWhenFailedStartupHealthCheck() {\n        System.clearProperty(NeoServer.NEO_CONFIG_FILE_PROPERTY);\n        new NeoServer();\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.setPackages(\"org.neo4j.server.web\");\n        return webServer;\n    }","id":7561,"modified_method":"private WebServer webServer() {\n        WebServer webServer = new Jetty6WebServer();\n        webServer.addJAXRSPackages(List.from(new String[] {NeoServer.REST_API_PACKAGE}), NeoServer.REST_API_PATH);\n        return webServer;\n    }","commit_id":"e5b470547b75e0093dcccba03b1a2d9bbd2e3a3b","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n   * Changes the owner for the directory or file with the path specified in args.\n   *\n   * @param path The {@link TachyonURI} path as the input of the command\n   * @param owner The owner to be updated to the file or directory\n   * @param recursive Whether change the owner recursively\n   * @throws IOException if command failed\n   */\n  protected void chown(TachyonURI path, String owner, boolean recursive) throws IOException {\n    try {\n      SetAclOptions options =\n          new SetAclOptions.Builder().setOwner(owner).setRecursive(recursive).build();\n      if (mTfs.setAcl(path, options)) {\n        System.out.println(\"Changed owner of \" + path + \" to \" + owner);\n      } else {\n        throw new IOException(\"Failed to changed owner of \" + path + \" to \" + owner);\n      }\n    } catch (TachyonException e) {\n      throw new IOException(e.getMessage());\n    }\n  }","id":7562,"modified_method":"/**\n   * Changes the owner for the directory or file with the path specified in args.\n   *\n   * @param path The {@link TachyonURI} path as the input of the command\n   * @param owner The owner to be updated to the file or directory\n   * @param recursive Whether change the owner recursively\n   * @throws IOException if command failed\n   */\n  protected void chown(TachyonURI path, String owner, boolean recursive) throws IOException {\n    try {\n      SetAclOptions options =\n          new SetAclOptions.Builder().setOwner(owner).setRecursive(recursive).build();\n      mTfs.setAcl(path, options);\n      System.out.println(\"Changed owner of \" + path + \" to \" + owner);\n    } catch (TachyonException e) {\n      throw new IOException(\"Failed to changed owner of \" + path + \" to \" + owner + \" : \"\n          + e.getMessage());\n    }\n  }","commit_id":"cabc23150772e1ba7124ead95e509c99284475b0","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Changes the permissions of directory or file with the path specified in args.\n   *\n   * @param path The {@link TachyonURI} path as the input of the command\n   * @param modeStr The new permission to be updated to the file or directory\n   * @param recursive Whether change the permission recursively\n   * @throws IOException if command failed\n   */\n  protected void chmod(TachyonURI path, String modeStr, boolean recursive) throws IOException {\n    try {\n      short newPermission = Short.parseShort(modeStr);\n      SetAclOptions options =\n          new SetAclOptions.Builder().setPermission(newPermission).setRecursive(recursive).build();\n      if (mTfs.setAcl(path, options)) {\n        System.out.println(\"Changed permission of \" + path + \" to \" + newPermission);\n      } else {\n        throw new IOException(\"Failed to changed permission of  \" + path + \" to \" + newPermission);\n      }\n    } catch (NumberFormatException e) {\n      throw new IOException(e.getMessage());\n    } catch (TachyonException e) {\n      throw new IOException(e.getMessage());\n    }\n  }","id":7563,"modified_method":"/**\n   * Changes the permissions of directory or file with the path specified in args.\n   *\n   * @param path The {@link TachyonURI} path as the input of the command\n   * @param modeStr The new permission to be updated to the file or directory\n   * @param recursive Whether change the permission recursively\n   * @throws IOException if command failed\n   */\n  protected void chmod(TachyonURI path, String modeStr, boolean recursive) throws IOException {\n    short newPermission = 0;\n    try {\n      newPermission = Short.parseShort(modeStr);\n      SetAclOptions options =\n          new SetAclOptions.Builder().setPermission(newPermission).setRecursive(recursive).build();\n      mTfs.setAcl(path, options);\n      System.out.println(\"Changed permission of \" + path + \" to \" + newPermission);\n    } catch (Exception e) {\n      throw new IOException(\"Failed to changed permission of  \" + path + \" to \" + newPermission\n          + \" : \" + e.getMessage());\n    }\n  }","commit_id":"cabc23150772e1ba7124ead95e509c99284475b0","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Changes the group for the directory or file with the path specified in args.\n   *\n   * @param path The {@link TachyonURI} path as the input of the command\n   * @param group The group to be updated to the file or directory\n   * @param recursive Whether change the group recursively\n   * @throws IOException\n   */\n  protected void chgrp(TachyonURI path, String group, boolean recursive) throws IOException {\n    try {\n      SetAclOptions options =\n          new SetAclOptions.Builder().setGroup(group).setRecursive(recursive).build();\n      if (mTfs.setAcl(path, options)) {\n        System.out.println(\"Changed group of \" + path + \" to \" + group);\n      } else {\n        throw new IOException(\"Failed to changed group of \" + path + \" to \" + group);\n      }\n    } catch (TachyonException e) {\n      throw new IOException(e.getMessage());\n    }\n  }","id":7564,"modified_method":"/**\n   * Changes the group for the directory or file with the path specified in args.\n   *\n   * @param path The {@link TachyonURI} path as the input of the command\n   * @param group The group to be updated to the file or directory\n   * @param recursive Whether change the group recursively\n   * @throws IOException\n   */\n  protected void chgrp(TachyonURI path, String group, boolean recursive) throws IOException {\n    try {\n      SetAclOptions options =\n          new SetAclOptions.Builder().setGroup(group).setRecursive(recursive).build();\n      mTfs.setAcl(path, options);\n      System.out.println(\"Changed group of \" + path + \" to \" + group);\n    } catch (TachyonException e) {\n      throw new IOException(\"Failed to changed group of \" + path + \" to \" + group + \" : \"\n          + e.getMessage());\n    }\n  }","commit_id":"cabc23150772e1ba7124ead95e509c99284475b0","url":"https://github.com/amplab/tachyon"},{"original_method":"/** Used to test ENG-6620, part 3 (array index notation). */\n    public void testSET_FIELDFunctionWithIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[0]\", \"-1\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][0]\", \"\\\"two\\\"\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][0]\", -2, 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][1]\", -3, 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Test \\ escape for brackets in element name, not used for array index\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"\\\"[bar]\\\"\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n    }","id":7565,"modified_method":"/** Used to test ENG-6620, part 3 (array index notation). */\n    public void testSET_FIELDFunctionWithIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"arr[3]\", -4);\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"arr3d[3]\", -4);\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[0]\", \"-1\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][0]\", \"\\\"two\\\"\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][0]\", -2, 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][1]\", -3, 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        testProcWithValidJSON(ONE_ROW_UPDATED, client, \"UpdateSetFieldProc\", \"arr[-1]\", \"-4\", 1);\n        testProcWithValidJSON(ONE_ROW_UPDATED, client, \"UpdateSetFieldProc\", \"arr3d[-1]\", \"-4\", 3);\n\n        // Test \\ escape for brackets in element name, not used for array index\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"\\\"[bar]\\\"\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        testProcWithValidJSON(new long[][]{{1}}, client, \"IdFieldProc\", \"arr[3]\", -4);\n        testProcWithValidJSON(new long[][]{{3}}, client, \"IdFieldProc\", \"arr3d[3]\", -4);\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testFIELDFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"id\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", \"id\", 1);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", 1, \"1\");\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"three\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bool\", \"false\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(4L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"贾鑫Vo\", \"分かりません\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(9L,result.getLong(0));\n\n        cr = client.callProcedure(\"NullFieldProc\", \"funky\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(9, result.getRowCount());\n\n        cr = client.callProcedure(\"NullFieldProc\", \"id\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(5L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(6L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(8L,result.getLong(0));\n\n        cr = client.callProcedure(\"InnerFieldProc\", \"贾鑫Vo\", \"wakarimasen\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr\", \"[0,2,100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'id'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test array not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'arr'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n    }","id":7566,"modified_method":"public void testFIELDFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Debug print, echoing the initial JSON documents, to stdout\n        if (DEBUG) {\n            for (int id=1; id <= TOTAL_NUM_ROWS; id++) {\n                System.out.println(\"JSON document (DOC column), for id=\" + id + \":\\n\"\n                                   + getDocFromId(client, id));\n            }\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"id\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", \"id\", 1);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", 1, \"1\");\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"three\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bool\", \"false\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(4L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"贾鑫Vo\", \"分かりません\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(9L,result.getLong(0));\n\n        cr = client.callProcedure(\"NullFieldProc\", \"funky\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(TOTAL_NUM_ROWS, result.getRowCount());\n\n        cr = client.callProcedure(\"NullFieldProc\", \"id\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        long[] expectedResults = new long[]{5L, 6L, 8L, 10L, 11L, 12L, 13L};\n        assertEquals(expectedResults.length, result.getRowCount());\n        for (long expResult : expectedResults) {\n            assertTrue(result.advanceRow());\n            assertEquals(expResult,result.getLong(0));\n        }\n\n        cr = client.callProcedure(\"InnerFieldProc\", \"贾鑫Vo\", \"wakarimasen\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr\", \"[0,2,100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'id'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test array not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'arr'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        // Test null values passed to FIELD function\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, null);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, 1.2);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"true\");\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"one\");\n        testProcWithValidJSON(new long[][]{{8}}, client, \"NullFieldProc\", (Object) null);\n        testProcWithValidJSON(NON_NULL_TABLE, client, \"NotNullFieldProc\", (Object) null);\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 2 (array index notation). */\n    public void testFIELDFunctionWithIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[1]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[2]\", 100);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n\n        // Test \\ escape for brackets in element name, not used for array index\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]]  ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Verify that index notation returns nothing when used on a primitive\n        // (integer, boolean, float, string), or an object\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"id[0]\", 1);\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"bool[0]\", \"true\");\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"numeric[0]\", 1.2);\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"tag[0]\", \"one\");\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"inner[0]\", \"good for you\");\n    }","id":7567,"modified_method":"/** Used to test ENG-6620, part 2 (array index notation). */\n    public void testFIELDFunctionWithIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[1]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[2]\", 100);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n\n        // Test \\ escape for brackets in element name, not used for array index\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]]  ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Verify that index notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an object\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"inner[0]\");\n\n        // Compare with similar behavior when FIELD is called with ARRAY_ELEMENT\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"id\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"numeric\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"bool\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"last\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"inner\", 0);\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NullArrayProc\", \"tag\", 0);\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * @return\n     * @throws IOException\n     * @throws NoConnectionsException\n     * @throws ProcCallException\n     */\n    private void loadJS1(Client client) throws IOException, NoConnectionsException, ProcCallException\n    {\n\n        final String jstemplate = \"{\\n\" +\n                \"    \\\"id\\\": %d,\\n\" +\n                \"    \\\"bool\\\": true,\\n\" +\n                \"    \\\"numeric\\\": 1.2,\\n\" +\n                \"    \\\"inner\\\": {\\n\" +\n                \"        \\\"veggies\\\": \\\"good for you\\\",\\n\" +\n                \"        \\\"贾鑫Vo\\\": \\\"wakarimasen\\\",\\n\" +\n                \"        \\\"second\\\": {\\n\" +\n                \"            \\\"fruits\\\": 1,\\n\" +\n                \"            \\\"third\\\": {\\n\" +\n                \"                \\\"meats\\\": \\\"yum\\\",\\n\" +\n                \"                \\\"dairy\\\": \\\"%d\\\",\\n\" +\n                \"                \\\"numeric\\\": 2.3\\n\" +\n                \"            }\\n\" +\n                \"        },\\n\" +\n                \"        \\\"arr\\\": [\\n\" +\n                \"            0,\\n\" +\n                \"            %d,\\n\" +\n                \"            3.4\\n\" +\n                \"        ]\\n\" +\n                \"    },\\n\" +\n                \"    \\\"arr\\\": [\\n\" +\n                \"        0,\\n\" +\n                \"        %d,\\n\" +\n                \"        100\\n\" +\n                \"    ],\\n\" +\n                \"    \\\"arr3d\\\": [\\n\" +\n                \"        0,\\n\" +\n                \"        [\\n\" +\n                \"            \\\"one\\\",\\n\" +\n                \"            [\\n\" +\n                \"                2,\\n\" +\n                \"                %d,\\n\" +\n                \"                4.5\\n\" +\n                \"            ]\\n\" +\n                \"        ],\\n\" +\n                \"        {\\n\" +\n                \"            \\\"veggies\\\": \\\"good for you\\\",\\n\" +\n                \"            \\\"dairy\\\": \\\"%d\\\",\\n\" +\n                \"            \\\"numeric\\\": 5.6\\n\" +\n                \"        }\\n\" +\n                \"    ],\\n\" +\n                \"    \\\"dot.char\\\": \\\"foo.bar\\\",\\n\" +\n                \"    \\\"bracket][[] [ ] chars\\\": \\\"[foo]\\\",\\n\" +\n                \"    \\\"tag\\\": \\\"%s\\\"\\n\" +\n                \"}\";\n\n        ClientResponse cr;\n        cr = client.callProcedure(\"JS1.insert\", 1, String.format(jstemplate, 1, 1, 1, 1, 1, 1, \"one\"));\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 2, String.format(jstemplate, 2, 2, 2, 2, 2, 2, \"two\"));\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 3, String.format(jstemplate, 3, 3, 3, 3, 3, 3, \"three\"));\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 4, \"{\\\"id\\\":4,\\\"bool\\\": false}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 5, \"{}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 6, \"[]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 7, \"{\\\"id\\\":7,\\\"funky\\\": null}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 8, null);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 9, \"{\\\"id\\\":9, \\\"贾鑫Vo\\\":\\\"分かりません\\\"}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n    }","id":7568,"modified_method":"/**\n     * @return\n     * @throws IOException\n     * @throws NoConnectionsException\n     * @throws ProcCallException\n     */\n    private void loadJS1(Client client) throws IOException, NoConnectionsException, ProcCallException\n    {\n\n        final String jstemplate = \"{\\n\" +\n                \"    \\\"id\\\": %d,\\n\" +\n                \"    \\\"bool\\\": true,\\n\" +\n                \"    \\\"numeric\\\": 1.2,\\n\" +\n                \"    \\\"inner\\\": {\\n\" +\n                \"        \\\"veggies\\\": \\\"good for you\\\",\\n\" +\n                \"        \\\"贾鑫Vo\\\": \\\"wakarimasen\\\",\\n\" +\n                \"        \\\"second\\\": {\\n\" +\n                \"            \\\"fruits\\\": 1,\\n\" +\n                \"            \\\"third\\\": {\\n\" +\n                \"                \\\"meats\\\": \\\"yum\\\",\\n\" +\n                \"                \\\"dairy\\\": \\\"%d\\\",\\n\" +\n                \"                \\\"numeric\\\": 2.3\\n\" +\n                \"            }\\n\" +\n                \"        },\\n\" +\n                \"        \\\"arr\\\": [\\n\" +\n                \"            0,\\n\" +\n                \"            %d,\\n\" +\n                \"            3.4\\n\" +\n                \"        ]\\n\" +\n                \"    },\\n\" +\n                \"    \\\"arr\\\": [\\n\" +\n                \"        0,\\n\" +\n                \"        %d,\\n\" +\n                \"        100\\n\" +\n                \"    ],\\n\" +\n                \"    \\\"arr3d\\\": [\\n\" +\n                \"        0,\\n\" +\n                \"        [\\n\" +\n                \"            \\\"one\\\",\\n\" +\n                \"            [\\n\" +\n                \"                2,\\n\" +\n                \"                %d,\\n\" +\n                \"                4.5\\n\" +\n                \"            ]\\n\" +\n                \"        ],\\n\" +\n                \"        {\\n\" +\n                \"            \\\"veggies\\\": \\\"good for you\\\",\\n\" +\n                \"            \\\"dairy\\\": \\\"%d\\\",\\n\" +\n                \"            \\\"numeric\\\": 5.6\\n\" +\n                \"        }\\n\" +\n                \"    ],\\n\" +\n                \"    \\\"dot.char\\\": \\\"foo.bar\\\",\\n\" +\n                \"    \\\"bracket][[] [ ] chars\\\": \\\"[foo]\\\",\\n\" +\n                \"    \\\"tag\\\": \\\"%s\\\",\\n\" +\n                \"    \\\"last\\\": \\\"\\\\\\\"foobar\\\\\\\"\\\"\\n\" +\n                \"}\";\n\n        ClientResponse cr;\n        cr = client.callProcedure(\"JS1.insert\", 1, String.format(jstemplate, 1, 1, 1, 1, 1, 1, \"one\"));\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 2, String.format(jstemplate, 2, 2, 2, 2, 2, 2, \"two\"));\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 3, String.format(jstemplate, 3, 3, 3, 3, 3, 3, \"three\"));\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 4, \"{\\\"id\\\":4,\\\"bool\\\": false}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 5, \"{}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 6, \"[]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 7, \"{\\\"id\\\":7,\\\"funky\\\": null}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 8, null);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 9, \"{\\\"id\\\":9, \\\"贾鑫Vo\\\":\\\"分かりません\\\"}\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 10, \"[1,2,3]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 11, \"\\\"foobar\\\"\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 12, \"true\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"JS1.insert\", 13, 42);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testARRAY_ELEMENTFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdArrayProc\", \"arr\", 1, \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdArrayProc\", \"arr\", \"NotNumeric\", \"1\");\n            fail(\"parameter check failed\");\n        }\n        catch ( ProcCallException pcex) {\n            assertTrue(pcex.getMessage().contains(\"TYPE ERROR FOR PARAMETER 1\"));\n        }\n\n        try {\n            cr = client.callProcedure(\"IdArrayProc\", 1, 1, \"1\");\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"NullArrayProc\", \"funky\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(9, result.getRowCount());\n\n        cr = client.callProcedure(\"IdArrayProc\", \"id\", 1, \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(0, result.getRowCount());\n\n        cr = client.callProcedure(\"@AdHoc\", // test index out of bounds\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'arr'), 99) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test negative index\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'arr'), -1) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an array\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'id'), 1) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test object not an array\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'inner'), 1) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        // Test top-level json array.\n        cr = client.callProcedure(\"JS1.insert\", 10, \"[0, 10, 100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\",\n                                  \"SELECT ARRAY_ELEMENT(DOC, 1) FROM JS1 WHERE ID = 10\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(\"10\",result.getString(0));\n\n        // Test empty json array.\n        cr = client.callProcedure(\"JS1.insert\", 11, \"[]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\",\n                                  \"SELECT ARRAY_ELEMENT(DOC, 0) FROM JS1 WHERE ID = 11\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n    }","id":7569,"modified_method":"public void testARRAY_ELEMENTFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdArrayProc\", \"arr\", 1, \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdArrayProc\", \"arr\", \"NotNumeric\", \"1\");\n            fail(\"parameter check failed\");\n        }\n        catch ( ProcCallException pcex) {\n            assertTrue(pcex.getMessage().contains(\"TYPE ERROR FOR PARAMETER 1\"));\n        }\n\n        try {\n            cr = client.callProcedure(\"IdArrayProc\", 1, 1, \"1\");\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"NullArrayProc\", \"funky\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(TOTAL_NUM_ROWS, result.getRowCount());\n\n        cr = client.callProcedure(\"IdArrayProc\", \"id\", 1, \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(0, result.getRowCount());\n\n        cr = client.callProcedure(\"@AdHoc\", // test index out of bounds\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'arr'), 99) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test negative index\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'arr'), -1) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an array\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'id'), 1) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test object not an array\n                                  \"SELECT ARRAY_ELEMENT(FIELD(DOC, 'inner'), 1) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        // Test top-level json array.\n        int id = TOTAL_NUM_ROWS + 1;\n        cr = client.callProcedure(\"JS1.insert\", id, \"[0, 10, 100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\",\n                                  \"SELECT ARRAY_ELEMENT(DOC, 1) FROM JS1 WHERE ID = \" + id);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(\"10\",result.getString(0));\n\n        // Test empty json array.\n        cr = client.callProcedure(\"JS1.insert\", ++id, \"[]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\",\n                                  \"SELECT ARRAY_ELEMENT(DOC, 0) FROM JS1 WHERE ID = \" + id);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 1 (dotted path notation). */\n    public void testFIELDFunctionWithDotNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.dairy\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n\n        // Test \\ escape for dot in element name, not used for sub-path\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"dot.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Verify that dot notation returns nothing when used on a primitive\n        // (integer, boolean, float, string), or an array\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"id.veggies\", 1);\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"bool.veggies\", \"true\");\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"numeric.veggies\", 1.2);\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"tag.veggies\", \"one\");\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"arr.veggies\", 0);\n        testProcWithValidJSON(empty_table, client, \"IdFieldProc\", \"arr.0\", 0);\n    }","id":7570,"modified_method":"/** Used to test ENG-6620, part 1 (dotted path notation). */\n    public void testFIELDFunctionWithDotNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.dairy\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n\n        // Test \\ escape for dot in element name, not used for sub-path\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"dot.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Verify that dot notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an array\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"arr.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"arr.0\");\n\n        // Compare with similar behavior when FIELD is called twice\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"id\",   \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"numeric\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"bool\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"last\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"arr\",  \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"arr\",  \"0\");\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NotNullField2Proc\", \"tag\", \"veggies\");\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public junit.framework.Test suite() {\n\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder =\n            new MultiConfigSuiteBuilder(TestFunctionsForJSON.class);\n        boolean success;\n\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        final String literalSchema =\n                \"CREATE TABLE JS1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE PROCEDURE IdFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NumericFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IN (?, ?) ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE InnerFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE SmallArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE LargeArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE UpdateSetFieldProc AS\\n\" +\n                \"   UPDATE JS1 SET DOC = SET_FIELD(DOC, ?, ?) WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                // Useful for debugging:\n                \"CREATE PROCEDURE GetDocFromId AS\\n\" +\n                \"   SELECT DOC FROM JS1 WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE JSBAD (\\n\" +\n                \"  ID INTEGER NOT NULL,\\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdFieldProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayLengthProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\\n\" +\n                \";\\n\" +\n                \"\";\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        // CONFIG #1: Local Site/Partition running on JNI backend\n        config = new LocalCluster(\"fixedsql-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // CONFIG #2: Local Site/Partitions running on JNI backend\n        config = new LocalCluster(\"fixedsql-threesite.jar\", 3, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n/*\n\n        // CONFIG #2: HSQL -- disabled, the functions being tested are not HSQL compatible\n        config = new LocalCluster(\"fixedsql-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n*/\n        // no clustering tests for functions\n\n        return builder;\n    }","id":7571,"modified_method":"static public junit.framework.Test suite() {\n\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder =\n            new MultiConfigSuiteBuilder(TestFunctionsForJSON.class);\n        boolean success;\n\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        final String literalSchema =\n                \"CREATE TABLE JS1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE PROCEDURE IdFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NumericFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IN (?, ?) ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE InnerFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldDocProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(?, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NotNullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NOT NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NotNullField2Proc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, ?), ?) IS NOT NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE SmallArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE LargeArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE UpdateSetFieldProc AS\\n\" +\n                \"   UPDATE JS1 SET DOC = SET_FIELD(DOC, ?, ?) WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                // Useful for debugging:\n                \"CREATE PROCEDURE GetDocFromId AS\\n\" +\n                \"   SELECT DOC FROM JS1 WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE JSBAD (\\n\" +\n                \"  ID INTEGER NOT NULL,\\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdFieldProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayLengthProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\\n\" +\n                \";\\n\" +\n                \"\";\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        // CONFIG #1: Local Site/Partition running on JNI backend\n        config = new LocalCluster(\"fixedsql-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // CONFIG #2: Local Site/Partitions running on JNI backend\n        config = new LocalCluster(\"fixedsql-threesite.jar\", 3, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n/*\n\n        // CONFIG #2: HSQL -- disabled, the functions being tested are not HSQL compatible\n        config = new LocalCluster(\"fixedsql-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n*/\n        // no clustering tests for functions\n\n        return builder;\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testARRAY_LENGTHFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdArrayLengthProc\", \"arr\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdArrayLengthProc\", \"arr\", \"NoNumber\");\n            fail(\"parameter check failed\");\n        }\n        catch ( ProcCallException pcex) {\n            assertTrue(pcex.getMessage().contains(\"TYPE ERROR FOR PARAMETER 1\"));\n        }\n\n        try {\n            cr = client.callProcedure(\"IdArrayLengthProc\", 1, 3);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"NullFieldProc\", \"funky\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(9, result.getRowCount());\n\n        cr = client.callProcedure(\"NullArrayLengthProc\", \"arr\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(6, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(4L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(5L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(6L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(7L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(8L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(9L,result.getLong(0));\n\n        cr = client.callProcedure(\"LargeArrayLengthProc\", \"arr\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(0, result.getRowCount());\n\n        cr = client.callProcedure(\"LargeArrayLengthProc\", \"arr\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"SmallArrayLengthProc\", \"arr\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(0, result.getRowCount());\n\n        cr = client.callProcedure(\"SmallArrayLengthProc\", \"arr\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an array\n                                  \"SELECT ARRAY_LENGTH(FIELD(DOC, 'id')) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getLong(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test object not an array\n                                  \"SELECT ARRAY_LENGTH(FIELD(DOC, 'inner')) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getLong(0);\n        assertTrue(result.wasNull());\n\n        // Test top-level json array.\n        cr = client.callProcedure(\"JS1.insert\", 10, \"[0, 10, 100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\", // test object not an array\n                                  \"SELECT ARRAY_LENGTH(DOC) FROM JS1 WHERE ID = 10\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        // Test empty json array.\n        cr = client.callProcedure(\"JS1.insert\", 11, \"[]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\",\n                                  \"SELECT ARRAY_LENGTH(DOC) FROM JS1 WHERE ID = 11\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(0L,result.getLong(0));\n    }","id":7572,"modified_method":"public void testARRAY_LENGTHFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdArrayLengthProc\", \"arr\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdArrayLengthProc\", \"arr\", \"NoNumber\");\n            fail(\"parameter check failed\");\n        }\n        catch ( ProcCallException pcex) {\n            assertTrue(pcex.getMessage().contains(\"TYPE ERROR FOR PARAMETER 1\"));\n        }\n\n        try {\n            cr = client.callProcedure(\"IdArrayLengthProc\", 1, 3);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"NullFieldProc\", \"funky\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(TOTAL_NUM_ROWS, result.getRowCount());\n\n        cr = client.callProcedure(\"NullArrayLengthProc\", \"arr\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        long[] expectedResults = new long[]{4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L};\n        assertEquals(expectedResults.length, result.getRowCount());\n        for (long expResult : expectedResults) {\n            assertTrue(result.advanceRow());\n            assertEquals(expResult,result.getLong(0));\n        }\n\n        cr = client.callProcedure(\"LargeArrayLengthProc\", \"arr\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(0, result.getRowCount());\n\n        cr = client.callProcedure(\"LargeArrayLengthProc\", \"arr\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"SmallArrayLengthProc\", \"arr\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(0, result.getRowCount());\n\n        cr = client.callProcedure(\"SmallArrayLengthProc\", \"arr\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an array\n                                  \"SELECT ARRAY_LENGTH(FIELD(DOC, 'id')) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getLong(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test object not an array\n                                  \"SELECT ARRAY_LENGTH(FIELD(DOC, 'inner')) FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getLong(0);\n        assertTrue(result.wasNull());\n\n        // Test top-level json array.\n        int id = TOTAL_NUM_ROWS + 1;\n        cr = client.callProcedure(\"JS1.insert\", id, \"[0, 10, 100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\", // test object not an array\n                                  \"SELECT ARRAY_LENGTH(DOC) FROM JS1 WHERE ID = \" + id);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        // Test empty json array.\n        cr = client.callProcedure(\"JS1.insert\", ++id, \"[]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        cr = client.callProcedure(\"@AdHoc\",\n                                  \"SELECT ARRAY_LENGTH(DOC) FROM JS1 WHERE ID = \" + id);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(0L,result.getLong(0));\n    }","commit_id":"d77d6b78de5b042405bc78db866a3c95f20cc7d9","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6832 (invalid array index notation, for FIELD). */\n    public void testFIELDFunctionWithInvalidIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"IdFieldProc\", \"arr[-2]\",  0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"IdFieldProc\", \"arr[]\",    0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"IdFieldProc\", \"arr[abc]\", 0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"IdFieldProc\", \"arr[\",     0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"IdFieldProc\", \"arr[123\",  0);\n        // 2147483648 is Integer.MAX_VALUE + 1\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 13]\",\n                                client, \"IdFieldProc\", \"arr[2147483648]\", 0);\n\n        // Test the wrong number of parameters\n        testProcWithInvalidJSON(\"PROCEDURE IdFieldProc EXPECTS 2 PARAMS, BUT RECEIVED 0\",\n                                client, \"IdFieldProc\");\n        testProcWithInvalidJSON(\"PROCEDURE IdFieldProc EXPECTS 2 PARAMS, BUT RECEIVED 1\",\n                                client, \"IdFieldProc\", \"arr[0]\");\n        testProcWithInvalidJSON(\"PROCEDURE IdFieldProc EXPECTS 2 PARAMS, BUT RECEIVED 3\",\n                                client, \"IdFieldProc\", \"arr[0]\", 0, 0);\n    }","id":7573,"modified_method":"/** Used to test ENG-6832 (invalid array index notation, for FIELD). */\n    public void testFIELDFunctionWithInvalidIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"IdFieldProc\", \"arr[-2]\",  0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"IdFieldProc\", \"arr[]\",    0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"IdFieldProc\", \"arr[abc]\", 0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"IdFieldProc\", \"arr[\",     0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"IdFieldProc\", \"arr[123\",  0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 14]\",\n                                client, \"IdFieldProc\", \"arr[\" + Integer.MIN_VALUE + \"]\",  0);\n\n        // Same invalid-query tests, using ad-hoc queries\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[-2]') = '0' ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[]') = '0' ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[abc]') = '0' ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[') = '0' ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[123') = '0' ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 14]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[\" + Integer.MIN_VALUE + \"]') = '0' ORDER BY ID\");\n\n        // Test using 2147483648, which is Integer.MAX_VALUE + 1\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 13]\",\n                                client, \"IdFieldProc\", \"arr[2147483648]\", 0);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 13]\",\n                                client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[2147483648]') = '0' ORDER BY ID\");\n\n        // Test the wrong number of parameters\n        testProcWithInvalidJSON(\"PROCEDURE IdFieldProc EXPECTS 2 PARAMS, BUT RECEIVED 0\",\n                                client, \"IdFieldProc\");\n        testProcWithInvalidJSON(\"PROCEDURE IdFieldProc EXPECTS 2 PARAMS, BUT RECEIVED 1\",\n                                client, \"IdFieldProc\", \"arr[0]\");\n        testProcWithInvalidJSON(\"PROCEDURE IdFieldProc EXPECTS 2 PARAMS, BUT RECEIVED 3\",\n                                client, \"IdFieldProc\", \"arr[0]\", 0, 0);\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void testProcWithInvalidJSON(String expectedErrorMessage, Client client,\n                                         String procName, Object... parameters) throws Exception {\n        String procDescription = \"'\" + procName + \"', with parameters:\";\n        for (int i=0; i < parameters.length; i++) {\n            procDescription += \"\\n\" + (parameters[i] == null ? \"null\" : parameters[i].toString());\n        }\n        try {\n            client.callProcedure(procName, parameters);\n            fail(\"document validity check failed for \" + procDescription + \"\\nDid not get \"\n                 + \"error containing expected  message:\\n'\" + expectedErrorMessage + \"'\");\n        } catch (ProcCallException pcex) {\n            String actualMessage = pcex.getMessage();\n            assertTrue(\"For \" + procDescription + \"\\nExpected error message containing:\\n'\"\n                       + expectedErrorMessage + \"'\\nbut got:\\n'\" + actualMessage + \"'\",\n                       actualMessage.contains(expectedErrorMessage));\n        }\n    }","id":7574,"modified_method":"private void testProcWithInvalidJSON(String expectedErrorMessage, Client client,\n                                         String procName, Object... parameters) throws Exception {\n        testProcWithInvalidJSON(expectedErrorMessage, client, 1, procName, parameters);\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 2 (array index notation) / ENG-6832. */\n    public void testFIELDFunctionWithIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[0]\", 0);\n        testProcWithValidJSON(TABLE_ROW2,    client, \"IdFieldProc\", \"arr[1]\", 2);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[2]\", 100);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[-1]\", 100);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NotNullFieldProc\", \"arr[-1]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr[3]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr[\" + Integer.MAX_VALUE + \"]\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][0]\", \"One\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        testProcWithValidJSON(TABLE_ROW3,    client, \"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr3d[1][1][3]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr3d[1][1][\" + Integer.MAX_VALUE + \"]\");\n\n        // Same index-notation tests, using ad-hoc queries\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[0]') = '0' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW2,    client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[1]') = '2' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[2]') = '100' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[-1]') = '100' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[-1]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[3]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[\" + Integer.MAX_VALUE + \"]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][0]') = 'One' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][0]') = '2' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW3,    client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][1]') = '3' ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][3]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][\" + Integer.MAX_VALUE + \"]') IS NOT NULL ORDER BY ID\");\n\n        // Test \\ escape for brackets in element name, not used for array index\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"bracket]]  ] chars\", \"[foo]\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'bracket]\\\\[\\\\[] \\\\[ ] chars') = '[foo]' ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'bracket]]  ] chars') = '[foo]' ORDER BY ID\");\n\n        // Verify that index notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an object\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"inner[0]\");\n\n        // Same primitive/object tests, using ad-hoc queries\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'id[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'numeric[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'bool[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'last[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'inner[0]') IS NOT NULL ORDER BY ID\");\n\n        // Compare with similar behavior when FIELD is called with ARRAY_ELEMENT\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"id\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"numeric\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"bool\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"last\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"inner\", 0);\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NullArrayProc\", \"tag\", 0);\n\n        // Same ARRAY_ELEMENT tests, using ad-hoc queries\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'id'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'numeric'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'bool'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'last'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'inner'), 0) IS NULL ORDER BY ID\");\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"@AdHoc\",\n                                \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'tag'), 0) IS NULL ORDER BY ID\");\n\n        // Test index notation with no name specified (a weird case!)\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[0]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[1]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[2]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[-1]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"[3]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[0]\", 1);\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[1]\", 2);\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[2]\", 3);\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[-1]\", 3);\n\n        // Same nameless array tests, using ad-hoc queries\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') = '1' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[1]') = '2' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[2]') = '3' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[-1]') = '3' ORDER BY ID\");\n    }","id":7575,"modified_method":"/** Used to test ENG-6620, part 2 (array index notation) / ENG-6832. */\n    public void testFIELDFunctionWithIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[0]\", 0);\n        testProcWithValidJSON(TABLE_ROW2,    client, \"IdFieldProc\", \"arr[1]\", 2);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[2]\", 100);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[-1]\", 100);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NotNullFieldProc\", \"arr[-1]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr[3]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr[\" + Integer.MAX_VALUE + \"]\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][0]\", \"One\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        testProcWithValidJSON(TABLE_ROW3,    client, \"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr3d[1][1][3]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr3d[1][1][\" + Integer.MAX_VALUE + \"]\");\n\n        // Same index-notation tests, using ad-hoc queries\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[0]') = '0' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW2,    client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[1]') = '2' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[2]') = '100' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[-1]') = '100' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[-1]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[3]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[\" + Integer.MAX_VALUE + \"]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][0]') = 'One' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][0]') = '2' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW3,    client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][1]') = '3' ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][3]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][\" + Integer.MAX_VALUE + \"]') IS NOT NULL ORDER BY ID\");\n\n        // Test using 2147483646, which is Integer.MAX_VALUE - 1\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr[2147483646]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NotNullFieldProc\", \"arr3d[1][1][2147483646]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr[2147483646]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'arr3d[1][1][2147483646]') IS NOT NULL ORDER BY ID\");\n\n        // Test \\ escape for brackets in element name, not used for array index\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"bracket]]  ] chars\", \"[foo]\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'bracket]\\\\[\\\\[] \\\\[ ] chars') = '[foo]' ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'bracket]]  ] chars') = '[foo]' ORDER BY ID\");\n\n        // Verify that index notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an object\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"inner[0]\");\n\n        // Same primitive/object tests, using ad-hoc queries\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'id[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'numeric[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'bool[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'last[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'inner[0]') IS NOT NULL ORDER BY ID\");\n\n        // Compare with similar behavior when FIELD is called with ARRAY_ELEMENT\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"id\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"numeric\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"bool\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"last\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"inner\", 0);\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NullArrayProc\", \"tag\", 0);\n\n        // Same ARRAY_ELEMENT tests, using ad-hoc queries\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'id'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'numeric'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'bool'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'last'), 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'inner'), 0) IS NULL ORDER BY ID\");\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"@AdHoc\",\n                                \"SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, 'tag'), 0) IS NULL ORDER BY ID\");\n\n        // Test index notation with no name specified (a weird case!)\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[0]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[1]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[2]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"NotNullFieldProc\", \"[-1]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"[3]\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[0]\", 1);\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[1]\", 2);\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[2]\", 3);\n        testProcWithValidJSON(TABLE_ROW10, client, \"IdFieldProc\", \"[-1]\", 3);\n\n        // Same nameless array tests, using ad-hoc queries\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[1]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[2]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[-1]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[3]') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[0]') = '1' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[1]') = '2' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[2]') = '3' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW10, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, '[-1]') = '3' ORDER BY ID\");\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void debugPrintJsonDoc(String description, Client client, int... rowIds) throws Exception {\n        if (DEBUG) {\n            System.out.println();\n            for (int id : rowIds) {\n                System.out.println(\"JSON document (DOC column), for id=\" + id + \" (\"\n                                   + description + \"):\\n\" + getDocFromId(client, id));\n            }\n        }\n    }","id":7576,"modified_method":"private void debugPrintJsonDoc(String description, Client client, int... rowIds) throws Exception {\n        debugPrintJsonDoc(DEBUG, description, client, rowIds);\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testFIELDFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Debug print, echoing the initial JSON documents, to stdout\n        if (DEBUG) {\n            int[] ids = new int[TOTAL_NUM_ROWS];\n            for (int id=1; id <= TOTAL_NUM_ROWS; id++) {\n                ids[id-1] = id;\n            }\n            debugPrintJsonDoc(\"initial values\", client, ids);\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"id\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", \"id\", 1);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", 1, \"1\");\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"Three\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bool\", \"false\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(4L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"贾鑫Vo\", \"分かりません\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(9L,result.getLong(0));\n\n        cr = client.callProcedure(\"NullFieldProc\", \"funky\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(TOTAL_NUM_ROWS, result.getRowCount());\n\n        cr = client.callProcedure(\"NullFieldProc\", \"id\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        long[] expectedResults = new long[]{5L, 6L, 8L, 10L, 11L, 12L, 13L, 14L, 15L};\n        assertEquals(expectedResults.length, result.getRowCount());\n        for (long expResult : expectedResults) {\n            assertTrue(result.advanceRow());\n            assertEquals(expResult,result.getLong(0));\n        }\n\n        cr = client.callProcedure(\"InnerFieldProc\", \"贾鑫Vo\", \"wakarimasen\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr\", \"[0,2,100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'id'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test array not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'arr'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        // Test that FIELD function is case-sensitive\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"tag\", \"one\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"tag\", \"ONE\");\n        testProcWithValidJSON(TABLE_ROW1,  client, \"IdFieldProc\", \"tag\", \"One\");\n\n        // Same case-sensitive tests, using ad-hoc queries\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'one' ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'ONE' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW1,  client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'One' ORDER BY ID\");\n\n        // Test null values passed to FIELD function\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, null);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, 1.2);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"true\");\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"One\");\n        testProcWithInvalidJSON(\"Invalid FIELD path argument (SQL null)\", client, \"NullFieldProc\", (Object) null);\n\n        testProcWithValidJSON(new long[][]{{11}}, client, \"NotNullFieldProc\", \"null\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"NotNullFieldProc\", \"foo\");\n        testProcWithValidJSON(new long[][]{{11}}, client, \"IdFieldProc\", \"null\", \"foo\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"IdFieldProc\", \"foo\", \"null\");\n\n        // Same null-value tests, using ad-hoc queries\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid FIELD path argument (SQL null)\", client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, null) IS NULL ORDER BY ID\");\n\n        testProcWithValidJSON(new long[][]{{11}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'null') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'foo') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(new long[][]{{11}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'null') = 'foo' ORDER BY ID\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'foo') = 'null' ORDER BY ID\");\n    }","id":7577,"modified_method":"public void testFIELDFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Debug print, echoing the initial JSON documents, to stdout\n        if (DEBUG) {\n            int[] ids = new int[TOTAL_NUM_ROWS];\n            for (int id=1; id <= TOTAL_NUM_ROWS; id++) {\n                ids[id-1] = id;\n            }\n            debugPrintJsonDoc(\"initial values\", client, ids);\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"id\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", \"id\", 1);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        try {\n            cr = client.callProcedure(\"IdFieldProc\", 1, \"1\");\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        }\n        catch ( ProcCallException pcex) {\n            fail(\"parameter check failed\");\n        }\n\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"Three\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bool\", \"false\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(4L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"贾鑫Vo\", \"分かりません\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(9L,result.getLong(0));\n\n        cr = client.callProcedure(\"NullFieldProc\", \"funky\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(TOTAL_NUM_ROWS, result.getRowCount());\n\n        cr = client.callProcedure(\"NullFieldProc\", \"id\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        long[] expectedResults = new long[]{5L, 6L, 8L, 10L, 11L, 12L, 13L, 14L, 15L};\n        assertEquals(expectedResults.length, result.getRowCount());\n        for (long expResult : expectedResults) {\n            assertTrue(result.advanceRow());\n            assertEquals(expResult,result.getLong(0));\n        }\n\n        cr = client.callProcedure(\"InnerFieldProc\", \"贾鑫Vo\", \"wakarimasen\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(3, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(1L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n        assertTrue(result.advanceRow());\n        assertEquals(3L,result.getLong(0));\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr\", \"[0,2,100]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        assertEquals(2L,result.getLong(0));\n\n        cr = client.callProcedure(\"@AdHoc\", // test scalar not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'id'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        cr = client.callProcedure(\"@AdHoc\", // test array not an object\n                                  \"SELECT FIELD(FIELD(DOC, 'arr'), 'value') FROM JS1 WHERE ID = 1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        assertEquals(1, result.getRowCount());\n        assertTrue(result.advanceRow());\n        result.getString(0);\n        assertTrue(result.wasNull());\n\n        // Test that FIELD function is case-sensitive\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"tag\", \"one\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"tag\", \"ONE\");\n        testProcWithValidJSON(TABLE_ROW1,  client, \"IdFieldProc\", \"tag\", \"One\");\n\n        // Same case-sensitive tests, using ad-hoc queries\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'one' ORDER BY ID\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'ONE' ORDER BY ID\");\n        testProcWithValidJSON(TABLE_ROW1,  client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'One' ORDER BY ID\");\n\n        // Test null values passed to FIELD function\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, null);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, 1.2);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"true\");\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"One\");\n        testProcWithValidJSON(FULL_TABLE, client, \"NullFieldDocProc\", null, \"tag\");\n        testProcWithInvalidJSON(\"Invalid FIELD path argument (SQL null)\", client, \"NullFieldProc\", (Object) null);\n\n        testProcWithValidJSON(new long[][]{{11}}, client, \"NotNullFieldProc\", \"null\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"NotNullFieldProc\", \"foo\");\n        testProcWithValidJSON(new long[][]{{11}}, client, \"IdFieldProc\", \"null\", \"foo\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"IdFieldProc\", \"foo\", \"null\");\n\n        // Same null-value tests, using ad-hoc queries\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, 0) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, 1.2) IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, 'true') IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, 'One') IS NULL ORDER BY ID\");\n        testProcWithValidJSON(FULL_TABLE, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(null, 'tag') IS NULL ORDER BY ID\");\n        testProcWithInvalidJSON(\"Invalid FIELD path argument (SQL null)\", client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, null) IS NULL ORDER BY ID\");\n\n        testProcWithValidJSON(new long[][]{{11}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'null') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'foo') IS NOT NULL ORDER BY ID\");\n        testProcWithValidJSON(new long[][]{{11}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'null') = 'foo' ORDER BY ID\");\n        testProcWithValidJSON(new long[][]{{12}}, client, \"@AdHoc\", \"SELECT ID FROM JS1 WHERE FIELD(DOC, 'foo') = 'null' ORDER BY ID\");\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void testProcWithValidJSON(String expectedResult, Client client,\n                                       String procName, Object... parameters) throws Exception {\n        ClientResponse cr = client.callProcedure(procName, parameters);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        VoltTable result = cr.getResults()[0];\n        assertTrue(result.advanceRow());\n        assertEquals(expectedResult, result.getString(0));\n    }","id":7578,"modified_method":"private void testProcWithValidJSON(String expectedResult, Client client,\n                                       String procName, Object... parameters) throws Exception {\n        ClientResponse cr = client.callProcedure(procName, parameters);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        VoltTable result = cr.getResults()[0];\n        assertTrue(result.advanceRow());\n        assertEquals(expectedResult, result.get(0, result.getColumnType(0)));\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6879 (invalid array index notation, for SET_FIELD). */\n    public void testSET_FIELDFunctionWithInvalidIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[-2]\",  \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[]\",    \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[abc]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"UpdateSetFieldProc\", \"arr[\",     \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[123\",  \"-1\", 1);\n        // 1568 is the minimum array index that will trigger this error\n        testProcWithInvalidJSON(\"exceeds the size of the VARCHAR(8192) column\",\n                                client, \"UpdateSetFieldProc\", \"arr[1568]\", \"-1\", 1);\n        // 2147483648 is Integer.MAX_VALUE + 1\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 13]\",\n                                client, \"UpdateSetFieldProc\", \"arr[2147483648]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 14]\",\n                                client, \"UpdateSetFieldProc\", \"arr[\" + Integer.MIN_VALUE + \"]\", \"-1\", 1);\n//        testProcWithInvalidJSON(\"exceeds the size of the VARCHAR(8192) column\",\n//                                client, \"UpdateSetFieldProc\", \"arr[\" + Integer.MAX_VALUE + \"]\", \"-1\", 1);\n\n        // Test the wrong number of parameters\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 0\",\n                                client, \"UpdateSetFieldProc\");\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 1\",\n                                client, \"UpdateSetFieldProc\", \"arr[0]\");\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 2\",\n                                client, \"UpdateSetFieldProc\", \"arr[0]\", \"-1\");\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 4\",\n                                client, \"UpdateSetFieldProc\", \"arr[0]\", \"-1\", 1, 1);\n    }","id":7579,"modified_method":"/** Used to test ENG-6879 (invalid array index notation, for SET_FIELD). */\n    public void testSET_FIELDFunctionWithInvalidIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[-2]\",  \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[]\",    \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[abc]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"UpdateSetFieldProc\", \"arr[\",     \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[123\",  \"-1\", 1);\n        // 1568 is the minimum array index that will trigger this error\n        testProcWithInvalidJSON(\"exceeds the size of the VARCHAR(8192) column\",\n                                client, \"UpdateSetFieldProc\", \"arr[1568]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 14]\",\n                                client, \"UpdateSetFieldProc\", \"arr[\" + Integer.MIN_VALUE + \"]\", \"-1\", 1);\n\n        // Same invalid-query tests, using ad-hoc queries\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[-2]', '-1') WHERE ID = 1\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[]', '-1') WHERE ID = 1\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[abc]', '-1') WHERE ID = 1\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[', '-1') WHERE ID = 1\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[123', '-1') WHERE ID = 1\");\n        // 1568 is the minimum array index that will trigger this error\n        testProcWithInvalidJSON(\"exceeds the size of the VARCHAR(8192) column\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[1568]', '-1') WHERE ID = 1\");\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 14]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[\" + Integer.MIN_VALUE + \"]', '-1') WHERE ID = 1\");\n\n        // Test using 2147483648, which is Integer.MAX_VALUE + 1\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 13]\",\n                                client, \"UpdateSetFieldProc\", \"arr[2147483648]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index greater than the maximum integer value [position 13]\",\n                                client, \"@AdHoc\", \"UPDATE JS1 SET DOC = SET_FIELD(DOC, 'arr[2147483648]', '-1') WHERE ID = 1\");\n\n        // Test the wrong number of parameters\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 0\",\n                                client, \"UpdateSetFieldProc\");\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 1\",\n                                client, \"UpdateSetFieldProc\", \"arr[0]\");\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 2\",\n                                client, \"UpdateSetFieldProc\", \"arr[0]\", \"-1\");\n        testProcWithInvalidJSON(\"PROCEDURE UpdateSetFieldProc EXPECTS 3 PARAMS, BUT RECEIVED 4\",\n                                client, \"UpdateSetFieldProc\", \"arr[0]\", \"-1\", 1, 1);\n    }","commit_id":"bca234787a6f5dd4dfb1bf331543e32222691fcd","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Starts Neo4j with default configuration\n     * @param graphDb The graph database service.\n     *\n     * @param storeDir path to directory where Neo4j store is located\n     * @param create if true a new Neo4j store will be created if no store exist\n     *            at <CODE>storeDir<\/CODE>\n     * @param configuration parameters\n     * @throws StartupFailedException if unable to start\n     */\n    public synchronized Map<Object, Object> start( GraphDatabaseService graphDb,\n            KernelExtensionLoader kernelExtensionLoader )\n    {\n        if ( started )\n        {\n            throw new IllegalStateException( \"Neo4j instance already started\" );\n        }\n        Map<Object, Object> params = config.getParams();\n        boolean useMemoryMapped = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        boolean dumpToConsole = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.DUMP_CONFIGURATION ) );\n        storeDir = FileUtils.fixSeparatorsInPath( storeDir );\n        StringLogger logger = StringLogger.getLogger( storeDir + \"/messages.log\" );\n        AutoConfigurator autoConfigurator = new AutoConfigurator( storeDir, useMemoryMapped, dumpToConsole );\n        autoConfigurator.configure( subset( config.getInputParams(), Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        params.putAll( config.getInputParams() );\n\n        String separator = System.getProperty( \"file.separator\" );\n        String store = storeDir + separator + \"neostore\";\n        params.put( \"store_dir\", storeDir );\n        params.put( \"neo_store\", store );\n        params.put( \"create\", String.valueOf( create ) );\n        String logicalLog = storeDir + separator + \"nioneo_logical.log\";\n        params.put( \"logical_log\", logicalLog );\n        byte resourceId[] = \"414141\".getBytes();\n        params.put( LockManager.class, config.getLockManager() );\n        params.put( LockReleaser.class, config.getLockReleaser() );\n        config.getTxModule().registerDataSource( Config.DEFAULT_DATA_SOURCE_NAME,\n                Config.NIO_NEO_DB_CLASS, resourceId, params );\n        // hack for lucene index recovery if in path\n        if ( !config.isReadOnly() || config.isBackupSlave() )\n        {\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene\" );\n                byte luceneId[] = \"162373\".getBytes();\n                registerLuceneDataSource( \"lucene\", clazz.getName(),\n                        config.getTxModule(), storeDir + \"/lucene\",\n                        config.getLockManager(), luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_FULLTEXT_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene-fulltext\" );\n                byte[] luceneId = \"262374\".getBytes();\n                registerLuceneDataSource( \"lucene-fulltext\",\n                        clazz.getName(), config.getTxModule(),\n                        storeDir + \"/lucene-fulltext\", config.getLockManager(),\n                        luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n        }\n        persistenceSource = new NioNeoDbPersistenceSource();\n        config.setPersistenceSource( Config.DEFAULT_DATA_SOURCE_NAME, create );\n        config.getIdGeneratorModule().setPersistenceSourceInstance(\n                persistenceSource );\n        config.getTxModule().init();\n        config.getPersistenceModule().init();\n        persistenceSource.init();\n        config.getIdGeneratorModule().init();\n        config.getGraphDbModule().init();\n        \n        kernelExtensionLoader.init();\n\n        config.getTxModule().start();\n        config.getPersistenceModule().start( config.getTxModule().getTxManager(),\n                persistenceSource, config.getSyncHookFactory() );\n        persistenceSource.start( config.getTxModule().getXaDataSourceManager() );\n        config.getIdGeneratorModule().start();\n        config.getGraphDbModule().start( config.getLockReleaser(),\n                config.getPersistenceModule().getPersistenceManager(),\n                config.getRelationshipTypeCreator(), params );\n\n        logger.logMessage( \"--- CONFIGURATION START ---\" );\n        logger.logMessage( autoConfigurator.getNiceMemoryInformation() );\n        logger.logMessage( \"Kernel version: \" + Version.get() );\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n        logger.logMessage( \"Operating System: \" + os.getName() + \"; version: \" + os.getVersion()\n                           + \"; arch: \" + os.getArch() );\n        logger.logMessage( \"VM Name: \" + runtime.getVmName() );\n        logger.logMessage( \"VM Vendor: \" + runtime.getVmVendor() );\n        logger.logMessage( \"VM Version: \" + runtime.getVmVersion() );\n        if ( runtime.isBootClassPathSupported() )\n        {\n            logger.logMessage( \"Boot Class Path: \" + runtime.getBootClassPath() );\n        }\n        logger.logMessage( \"Class Path: \" + runtime.getClassPath() );\n        logger.logMessage( \"Library Path: \" + runtime.getLibraryPath() );\n        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n        {\n            logger.logMessage( \"Garbage Collector: \" + gcBean.getName() + \": \"\n                               + Arrays.toString( gcBean.getMemoryPoolNames() ) );\n        }\n        logger.logMessage( \"VM Arguments: \" + runtime.getInputArguments() );\n        logger.logMessage( \"\" );\n        logConfiguration( params, logger, dumpToConsole );\n        logger.logMessage( \"--- CONFIGURATION END ---\" );\n        logger.flush();\n        started = true;\n        return Collections.unmodifiableMap( params );\n    }","id":7580,"modified_method":"/**\n     * Starts Neo4j with default configuration\n     * @param graphDb The graph database service.\n     *\n     * @param storeDir path to directory where Neo4j store is located\n     * @param create if true a new Neo4j store will be created if no store exist\n     *            at <CODE>storeDir<\/CODE>\n     * @param configuration parameters\n     * @throws StartupFailedException if unable to start\n     */\n    public synchronized Map<Object, Object> start( GraphDatabaseService graphDb,\n            KernelExtensionLoader kernelExtensionLoader )\n    {\n        if ( started )\n        {\n            throw new IllegalStateException( \"Neo4j instance already started\" );\n        }\n        Map<Object, Object> params = config.getParams();\n        boolean useMemoryMapped = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        boolean dumpToConsole = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.DUMP_CONFIGURATION ) );\n        storeDir = FileUtils.fixSeparatorsInPath( storeDir );\n        StringLogger logger = StringLogger.getLogger( storeDir + \"/messages.log\" );\n        AutoConfigurator autoConfigurator = new AutoConfigurator( storeDir, useMemoryMapped, dumpToConsole );\n        autoConfigurator.configure( subset( config.getInputParams(), Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        params.putAll( config.getInputParams() );\n\n        String separator = System.getProperty( \"file.separator\" );\n        String store = storeDir + separator + \"neostore\";\n        params.put( \"store_dir\", storeDir );\n        params.put( \"neo_store\", store );\n        params.put( \"create\", String.valueOf( create ) );\n        String logicalLog = storeDir + separator + \"nioneo_logical.log\";\n        params.put( \"logical_log\", logicalLog );\n        byte resourceId[] = \"414141\".getBytes();\n        params.put( LockManager.class, config.getLockManager() );\n        params.put( LockReleaser.class, config.getLockReleaser() );\n        config.getTxModule().registerDataSource( Config.DEFAULT_DATA_SOURCE_NAME,\n                Config.NIO_NEO_DB_CLASS, resourceId, params );\n        // hack for lucene index recovery if in path\n        if ( !config.isReadOnly() || config.isBackupSlave() )\n        {\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene\" );\n                byte luceneId[] = \"162373\".getBytes();\n                registerLuceneDataSource( \"lucene\", clazz.getName(),\n                        config.getTxModule(), storeDir + \"/lucene\",\n                        config.getLockManager(), luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_FULLTEXT_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene-fulltext\" );\n                byte[] luceneId = \"262374\".getBytes();\n                registerLuceneDataSource( \"lucene-fulltext\",\n                        clazz.getName(), config.getTxModule(),\n                        storeDir + \"/lucene-fulltext\", config.getLockManager(),\n                        luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n        }\n        persistenceSource = new NioNeoDbPersistenceSource();\n        config.setPersistenceSource( Config.DEFAULT_DATA_SOURCE_NAME, create );\n        config.getIdGeneratorModule().setPersistenceSourceInstance(\n                persistenceSource );\n        config.getTxModule().init();\n        config.getPersistenceModule().init();\n        persistenceSource.init();\n        config.getIdGeneratorModule().init();\n        config.getGraphDbModule().init();\n\n        kernelExtensionLoader.init();\n\n        config.getTxModule().start();\n        config.getPersistenceModule().start( config.getTxModule().getTxManager(),\n                persistenceSource, config.getSyncHookFactory() );\n        persistenceSource.start( config.getTxModule().getXaDataSourceManager() );\n        config.getIdGeneratorModule().start();\n        config.getGraphDbModule().start( config.getLockReleaser(),\n                config.getPersistenceModule().getPersistenceManager(),\n                config.getRelationshipTypeCreator(), params );\n\n        logger.logMessage( \"--- CONFIGURATION START ---\" );\n        logger.logMessage( autoConfigurator.getNiceMemoryInformation() );\n        logger.logMessage( \"Kernel version: \" + Version.get() );\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n        logger.logMessage( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\",\n                os.getName(), os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n        logger.logMessage( \"VM Name: \" + runtime.getVmName() );\n        logger.logMessage( \"VM Vendor: \" + runtime.getVmVendor() );\n        logger.logMessage( \"VM Version: \" + runtime.getVmVersion() );\n        if ( runtime.isBootClassPathSupported() )\n        {\n            logger.logMessage( \"Boot Class Path: \" + runtime.getBootClassPath() );\n        }\n        logger.logMessage( \"Class Path: \" + runtime.getClassPath() );\n        logger.logMessage( \"Library Path: \" + runtime.getLibraryPath() );\n        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n        {\n            logger.logMessage( \"Garbage Collector: \" + gcBean.getName() + \": \"\n                               + Arrays.toString( gcBean.getMemoryPoolNames() ) );\n        }\n        logger.logMessage( \"VM Arguments: \" + runtime.getInputArguments() );\n        logger.logMessage( \"\" );\n        logConfiguration( params, logger, dumpToConsole );\n        logger.logMessage( \"--- CONFIGURATION END ---\" );\n        logger.flush();\n        started = true;\n        return Collections.unmodifiableMap( params );\n    }","commit_id":"ae1afb59604823f6936231d5401feeeba421f7a6","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Starts Neo4j with default configuration\n     * @param graphDb The graph database service.\n     *\n     * @param storeDir path to directory where Neo4j store is located\n     * @param create if true a new Neo4j store will be created if no store exist\n     *            at <CODE>storeDir<\/CODE>\n     * @param configuration parameters\n     * @throws StartupFailedException if unable to start\n     */\n    public synchronized Map<Object, Object> start( GraphDatabaseService graphDb,\n            KernelExtensionLoader kernelExtensionLoader )\n    {\n        if ( started )\n        {\n            throw new IllegalStateException( \"Neo4j instance already started\" );\n        }\n        Map<Object, Object> params = config.getParams();\n        boolean useMemoryMapped = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        boolean dumpToConsole = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.DUMP_CONFIGURATION ) );\n        storeDir = FileUtils.fixSeparatorsInPath( storeDir );\n        StringLogger logger = StringLogger.getLogger( storeDir + \"/messages.log\" );\n        AutoConfigurator autoConfigurator = new AutoConfigurator( storeDir, useMemoryMapped, dumpToConsole );\n        autoConfigurator.configure( subset( config.getInputParams(), Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        params.putAll( config.getInputParams() );\n\n        String separator = System.getProperty( \"file.separator\" );\n        String store = storeDir + separator + \"neostore\";\n        params.put( \"store_dir\", storeDir );\n        params.put( \"neo_store\", store );\n        params.put( \"create\", String.valueOf( create ) );\n        String logicalLog = storeDir + separator + \"nioneo_logical.log\";\n        params.put( \"logical_log\", logicalLog );\n        byte resourceId[] = \"414141\".getBytes();\n        params.put( LockManager.class, config.getLockManager() );\n        params.put( LockReleaser.class, config.getLockReleaser() );\n        config.getTxModule().registerDataSource( Config.DEFAULT_DATA_SOURCE_NAME,\n                Config.NIO_NEO_DB_CLASS, resourceId, params );\n        // hack for lucene index recovery if in path\n        if ( !config.isReadOnly() || config.isBackupSlave() )\n        {\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene\" );\n                byte luceneId[] = \"162373\".getBytes();\n                registerLuceneDataSource( \"lucene\", clazz.getName(),\n                        config.getTxModule(), storeDir + \"/lucene\",\n                        config.getLockManager(), luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_FULLTEXT_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene-fulltext\" );\n                byte[] luceneId = \"262374\".getBytes();\n                registerLuceneDataSource( \"lucene-fulltext\",\n                        clazz.getName(), config.getTxModule(),\n                        storeDir + \"/lucene-fulltext\", config.getLockManager(),\n                        luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n        }\n        persistenceSource = new NioNeoDbPersistenceSource();\n        config.setPersistenceSource( Config.DEFAULT_DATA_SOURCE_NAME, create );\n        config.getIdGeneratorModule().setPersistenceSourceInstance(\n                persistenceSource );\n        config.getTxModule().init();\n        config.getPersistenceModule().init();\n        persistenceSource.init();\n        config.getIdGeneratorModule().init();\n        config.getGraphDbModule().init();\n        \n        kernelExtensionLoader.init();\n\n        config.getTxModule().start();\n        config.getPersistenceModule().start( config.getTxModule().getTxManager(),\n                persistenceSource, config.getSyncHookFactory() );\n        persistenceSource.start( config.getTxModule().getXaDataSourceManager() );\n        config.getIdGeneratorModule().start();\n        config.getGraphDbModule().start( config.getLockReleaser(),\n                config.getPersistenceModule().getPersistenceManager(),\n                config.getRelationshipTypeCreator(), params );\n\n        logger.logMessage( \"--- CONFIGURATION START ---\" );\n        logger.logMessage( autoConfigurator.getNiceMemoryInformation() );\n        logger.logMessage( \"Kernel version: \" + Version.get() );\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n        logger.logMessage( \"Operating System: \" + os.getName() + \"; version: \" + os.getVersion()\n                           + \"; arch: \" + os.getArch() );\n        logger.logMessage( \"VM Name: \" + runtime.getVmName() );\n        logger.logMessage( \"VM Vendor: \" + runtime.getVmVendor() );\n        logger.logMessage( \"VM Version: \" + runtime.getVmVersion() );\n        if ( runtime.isBootClassPathSupported() )\n        {\n            logger.logMessage( \"Boot Class Path: \" + runtime.getBootClassPath() );\n        }\n        logger.logMessage( \"Class Path: \" + runtime.getClassPath() );\n        logger.logMessage( \"Library Path: \" + runtime.getLibraryPath() );\n        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n        {\n            logger.logMessage( \"Garbage Collector: \" + gcBean.getName() + \": \"\n                               + Arrays.toString( gcBean.getMemoryPoolNames() ) );\n        }\n        logger.logMessage( \"VM Arguments: \" + runtime.getInputArguments() );\n        logger.logMessage( \"\" );\n        logConfiguration( params, logger, dumpToConsole );\n        logger.logMessage( \"--- CONFIGURATION END ---\" );\n        logger.flush();\n        started = true;\n        return Collections.unmodifiableMap( params );\n    }","id":7581,"modified_method":"/**\n     * Starts Neo4j with default configuration\n     * @param graphDb The graph database service.\n     *\n     * @param storeDir path to directory where Neo4j store is located\n     * @param create if true a new Neo4j store will be created if no store exist\n     *            at <CODE>storeDir<\/CODE>\n     * @param configuration parameters\n     * @throws StartupFailedException if unable to start\n     */\n    public synchronized Map<Object, Object> start( GraphDatabaseService graphDb,\n            KernelExtensionLoader kernelExtensionLoader )\n    {\n        if ( started )\n        {\n            throw new IllegalStateException( \"Neo4j instance already started\" );\n        }\n        Map<Object, Object> params = config.getParams();\n        boolean useMemoryMapped = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        boolean dumpToConsole = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.DUMP_CONFIGURATION ) );\n        storeDir = FileUtils.fixSeparatorsInPath( storeDir );\n        StringLogger logger = StringLogger.getLogger( storeDir + \"/messages.log\" );\n        AutoConfigurator autoConfigurator = new AutoConfigurator( storeDir, useMemoryMapped, dumpToConsole );\n        autoConfigurator.configure( subset( config.getInputParams(), Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        params.putAll( config.getInputParams() );\n\n        String separator = System.getProperty( \"file.separator\" );\n        String store = storeDir + separator + \"neostore\";\n        params.put( \"store_dir\", storeDir );\n        params.put( \"neo_store\", store );\n        params.put( \"create\", String.valueOf( create ) );\n        String logicalLog = storeDir + separator + \"nioneo_logical.log\";\n        params.put( \"logical_log\", logicalLog );\n        byte resourceId[] = \"414141\".getBytes();\n        params.put( LockManager.class, config.getLockManager() );\n        params.put( LockReleaser.class, config.getLockReleaser() );\n        config.getTxModule().registerDataSource( Config.DEFAULT_DATA_SOURCE_NAME,\n                Config.NIO_NEO_DB_CLASS, resourceId, params );\n        // hack for lucene index recovery if in path\n        if ( !config.isReadOnly() || config.isBackupSlave() )\n        {\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene\" );\n                byte luceneId[] = \"162373\".getBytes();\n                registerLuceneDataSource( \"lucene\", clazz.getName(),\n                        config.getTxModule(), storeDir + \"/lucene\",\n                        config.getLockManager(), luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_FULLTEXT_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene-fulltext\" );\n                byte[] luceneId = \"262374\".getBytes();\n                registerLuceneDataSource( \"lucene-fulltext\",\n                        clazz.getName(), config.getTxModule(),\n                        storeDir + \"/lucene-fulltext\", config.getLockManager(),\n                        luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n        }\n        persistenceSource = new NioNeoDbPersistenceSource();\n        config.setPersistenceSource( Config.DEFAULT_DATA_SOURCE_NAME, create );\n        config.getIdGeneratorModule().setPersistenceSourceInstance(\n                persistenceSource );\n        config.getTxModule().init();\n        config.getPersistenceModule().init();\n        persistenceSource.init();\n        config.getIdGeneratorModule().init();\n        config.getGraphDbModule().init();\n\n        kernelExtensionLoader.init();\n\n        config.getTxModule().start();\n        config.getPersistenceModule().start( config.getTxModule().getTxManager(),\n                persistenceSource, config.getSyncHookFactory() );\n        persistenceSource.start( config.getTxModule().getXaDataSourceManager() );\n        config.getIdGeneratorModule().start();\n        config.getGraphDbModule().start( config.getLockReleaser(),\n                config.getPersistenceModule().getPersistenceManager(),\n                config.getRelationshipTypeCreator(), params );\n\n        logger.logMessage( \"--- CONFIGURATION START ---\" );\n        logger.logMessage( autoConfigurator.getNiceMemoryInformation() );\n        logger.logMessage( \"Kernel version: \" + Version.get() );\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n        logger.logMessage( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\",\n                os.getName(), os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n        logger.logMessage( \"VM Name: \" + runtime.getVmName() );\n        logger.logMessage( \"VM Vendor: \" + runtime.getVmVendor() );\n        logger.logMessage( \"VM Version: \" + runtime.getVmVersion() );\n        if ( runtime.isBootClassPathSupported() )\n        {\n            logger.logMessage( \"Boot Class Path: \" + runtime.getBootClassPath() );\n        }\n        logger.logMessage( \"Class Path: \" + runtime.getClassPath() );\n        logger.logMessage( \"Library Path: \" + runtime.getLibraryPath() );\n        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n        {\n            logger.logMessage( \"Garbage Collector: \" + gcBean.getName() + \": \"\n                               + Arrays.toString( gcBean.getMemoryPoolNames() ) );\n        }\n        logger.logMessage( \"VM Arguments: \" + runtime.getInputArguments() );\n        logger.logMessage( \"\" );\n        logConfiguration( params, logger, dumpToConsole );\n        logger.logMessage( \"--- CONFIGURATION END ---\" );\n        logger.flush();\n        started = true;\n        return Collections.unmodifiableMap( params );\n    }","commit_id":"88b9dbbb3bacfe0a2d56354265fae3948072b50a","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Starts Neo4j with default configuration\n     * @param graphDb The graph database service.\n     *\n     * @param storeDir path to directory where Neo4j store is located\n     * @param create if true a new Neo4j store will be created if no store exist\n     *            at <CODE>storeDir<\/CODE>\n     * @param configuration parameters\n     * @throws StartupFailedException if unable to start\n     */\n    public synchronized Map<Object, Object> start( GraphDatabaseService graphDb,\n            KernelExtensionLoader kernelExtensionLoader )\n    {\n        if ( started )\n        {\n            throw new IllegalStateException( \"Neo4j instance already started\" );\n        }\n        Map<Object, Object> params = config.getParams();\n        boolean useMemoryMapped = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        boolean dumpToConsole = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.DUMP_CONFIGURATION ) );\n        storeDir = FileUtils.fixSeparatorsInPath( storeDir );\n        StringLogger logger = StringLogger.getLogger( storeDir + \"/messages.log\" );\n        AutoConfigurator autoConfigurator = new AutoConfigurator( storeDir, useMemoryMapped, dumpToConsole );\n        autoConfigurator.configure( subset( config.getInputParams(), Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        params.putAll( config.getInputParams() );\n\n        String separator = System.getProperty( \"file.separator\" );\n        String store = storeDir + separator + \"neostore\";\n        params.put( \"store_dir\", storeDir );\n        params.put( \"neo_store\", store );\n        params.put( \"create\", String.valueOf( create ) );\n        String logicalLog = storeDir + separator + \"nioneo_logical.log\";\n        params.put( \"logical_log\", logicalLog );\n        byte resourceId[] = \"414141\".getBytes();\n        params.put( LockManager.class, config.getLockManager() );\n        params.put( LockReleaser.class, config.getLockReleaser() );\n        config.getTxModule().registerDataSource( Config.DEFAULT_DATA_SOURCE_NAME,\n                Config.NIO_NEO_DB_CLASS, resourceId, params );\n        // hack for lucene index recovery if in path\n        if ( !config.isReadOnly() || config.isBackupSlave() )\n        {\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene\" );\n                byte luceneId[] = \"162373\".getBytes();\n                registerLuceneDataSource( \"lucene\", clazz.getName(),\n                        config.getTxModule(), storeDir + \"/lucene\",\n                        config.getLockManager(), luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_FULLTEXT_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene-fulltext\" );\n                byte[] luceneId = \"262374\".getBytes();\n                registerLuceneDataSource( \"lucene-fulltext\",\n                        clazz.getName(), config.getTxModule(),\n                        storeDir + \"/lucene-fulltext\", config.getLockManager(),\n                        luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n        }\n        persistenceSource = new NioNeoDbPersistenceSource();\n        config.setPersistenceSource( Config.DEFAULT_DATA_SOURCE_NAME, create );\n        config.getIdGeneratorModule().setPersistenceSourceInstance(\n                persistenceSource );\n        config.getTxModule().init();\n        config.getPersistenceModule().init();\n        persistenceSource.init();\n        config.getIdGeneratorModule().init();\n        config.getGraphDbModule().init();\n        \n        kernelExtensionLoader.init();\n\n        config.getTxModule().start();\n        config.getPersistenceModule().start( config.getTxModule().getTxManager(),\n                persistenceSource, config.getSyncHookFactory() );\n        persistenceSource.start( config.getTxModule().getXaDataSourceManager() );\n        config.getIdGeneratorModule().start();\n        config.getGraphDbModule().start( config.getLockReleaser(),\n                config.getPersistenceModule().getPersistenceManager(),\n                config.getRelationshipTypeCreator(), params );\n\n        logger.logMessage( \"--- CONFIGURATION START ---\" );\n        logger.logMessage( autoConfigurator.getNiceMemoryInformation() );\n        logger.logMessage( \"Kernel version: \" + Version.get() );\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n        logger.logMessage( \"Operating System: \" + os.getName() + \"; version: \" + os.getVersion()\n                           + \"; arch: \" + os.getArch() );\n        logger.logMessage( \"VM Name: \" + runtime.getVmName() );\n        logger.logMessage( \"VM Vendor: \" + runtime.getVmVendor() );\n        logger.logMessage( \"VM Version: \" + runtime.getVmVersion() );\n        if ( runtime.isBootClassPathSupported() )\n        {\n            logger.logMessage( \"Boot Class Path: \" + runtime.getBootClassPath() );\n        }\n        logger.logMessage( \"Class Path: \" + runtime.getClassPath() );\n        logger.logMessage( \"Library Path: \" + runtime.getLibraryPath() );\n        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n        {\n            logger.logMessage( \"Garbage Collector: \" + gcBean.getName() + \": \"\n                               + Arrays.toString( gcBean.getMemoryPoolNames() ) );\n        }\n        logger.logMessage( \"VM Arguments: \" + runtime.getInputArguments() );\n        logger.logMessage( \"\" );\n        logConfiguration( params, logger, dumpToConsole );\n        logger.logMessage( \"--- CONFIGURATION END ---\" );\n        logger.flush();\n        started = true;\n        return Collections.unmodifiableMap( params );\n    }","id":7582,"modified_method":"/**\n     * Starts Neo4j with default configuration\n     * @param graphDb The graph database service.\n     *\n     * @param storeDir path to directory where Neo4j store is located\n     * @param create if true a new Neo4j store will be created if no store exist\n     *            at <CODE>storeDir<\/CODE>\n     * @param configuration parameters\n     * @throws StartupFailedException if unable to start\n     */\n    public synchronized Map<Object, Object> start( GraphDatabaseService graphDb,\n            KernelExtensionLoader kernelExtensionLoader )\n    {\n        if ( started )\n        {\n            throw new IllegalStateException( \"Neo4j instance already started\" );\n        }\n        Map<Object, Object> params = config.getParams();\n        boolean useMemoryMapped = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        boolean dumpToConsole = Boolean.parseBoolean( (String) config.getInputParams().get(\n                Config.DUMP_CONFIGURATION ) );\n        storeDir = FileUtils.fixSeparatorsInPath( storeDir );\n        StringLogger logger = StringLogger.getLogger( storeDir + \"/messages.log\" );\n        AutoConfigurator autoConfigurator = new AutoConfigurator( storeDir, useMemoryMapped, dumpToConsole );\n        autoConfigurator.configure( subset( config.getInputParams(), Config.USE_MEMORY_MAPPED_BUFFERS ) );\n        params.putAll( config.getInputParams() );\n\n        String separator = System.getProperty( \"file.separator\" );\n        String store = storeDir + separator + \"neostore\";\n        params.put( \"store_dir\", storeDir );\n        params.put( \"neo_store\", store );\n        params.put( \"create\", String.valueOf( create ) );\n        String logicalLog = storeDir + separator + \"nioneo_logical.log\";\n        params.put( \"logical_log\", logicalLog );\n        byte resourceId[] = \"414141\".getBytes();\n        params.put( LockManager.class, config.getLockManager() );\n        params.put( LockReleaser.class, config.getLockReleaser() );\n        config.getTxModule().registerDataSource( Config.DEFAULT_DATA_SOURCE_NAME,\n                Config.NIO_NEO_DB_CLASS, resourceId, params );\n        // hack for lucene index recovery if in path\n        if ( !config.isReadOnly() || config.isBackupSlave() )\n        {\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene\" );\n                byte luceneId[] = \"162373\".getBytes();\n                registerLuceneDataSource( \"lucene\", clazz.getName(),\n                        config.getTxModule(), storeDir + \"/lucene\",\n                        config.getLockManager(), luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n\n            try\n            {\n                Class clazz = Class.forName( Config.LUCENE_FULLTEXT_DS_CLASS );\n                cleanWriteLocksInLuceneDirectory( storeDir + \"/lucene-fulltext\" );\n                byte[] luceneId = \"262374\".getBytes();\n                registerLuceneDataSource( \"lucene-fulltext\",\n                        clazz.getName(), config.getTxModule(),\n                        storeDir + \"/lucene-fulltext\", config.getLockManager(),\n                        luceneId, params );\n            }\n            catch ( ClassNotFoundException e )\n            { // ok index util not on class path\n            }\n            catch ( NoClassDefFoundError err )\n            { // ok index util not on class path\n            }\n        }\n        persistenceSource = new NioNeoDbPersistenceSource();\n        config.setPersistenceSource( Config.DEFAULT_DATA_SOURCE_NAME, create );\n        config.getIdGeneratorModule().setPersistenceSourceInstance(\n                persistenceSource );\n        config.getTxModule().init();\n        config.getPersistenceModule().init();\n        persistenceSource.init();\n        config.getIdGeneratorModule().init();\n        config.getGraphDbModule().init();\n\n        kernelExtensionLoader.init();\n\n        config.getTxModule().start();\n        config.getPersistenceModule().start( config.getTxModule().getTxManager(),\n                persistenceSource, config.getSyncHookFactory() );\n        persistenceSource.start( config.getTxModule().getXaDataSourceManager() );\n        config.getIdGeneratorModule().start();\n        config.getGraphDbModule().start( config.getLockReleaser(),\n                config.getPersistenceModule().getPersistenceManager(),\n                config.getRelationshipTypeCreator(), params );\n\n        logger.logMessage( \"--- CONFIGURATION START ---\" );\n        logger.logMessage( autoConfigurator.getNiceMemoryInformation() );\n        logger.logMessage( \"Kernel version: \" + Version.get() );\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n        logger.logMessage( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\",\n                os.getName(), os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n        logger.logMessage( \"VM Name: \" + runtime.getVmName() );\n        logger.logMessage( \"VM Vendor: \" + runtime.getVmVendor() );\n        logger.logMessage( \"VM Version: \" + runtime.getVmVersion() );\n        if ( runtime.isBootClassPathSupported() )\n        {\n            logger.logMessage( \"Boot Class Path: \" + runtime.getBootClassPath() );\n        }\n        logger.logMessage( \"Class Path: \" + runtime.getClassPath() );\n        logger.logMessage( \"Library Path: \" + runtime.getLibraryPath() );\n        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n        {\n            logger.logMessage( \"Garbage Collector: \" + gcBean.getName() + \": \"\n                               + Arrays.toString( gcBean.getMemoryPoolNames() ) );\n        }\n        logger.logMessage( \"VM Arguments: \" + runtime.getInputArguments() );\n        logger.logMessage( \"\" );\n        logConfiguration( params, logger, dumpToConsole );\n        logger.logMessage( \"--- CONFIGURATION END ---\" );\n        logger.flush();\n        started = true;\n        return Collections.unmodifiableMap( params );\n    }","commit_id":"2b10afcc7cce489e17e68babacbdb08768ce1700","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void close() throws IOException\n\t{\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tlog.info( \"Active transactions: \" + xidIdentMap.size() );\n\t\t\tlog.info( \"Closing dirty log: \" + fileName );\n\t\t\tif ( writeBuffer != null )\n\t\t\t{\n\t\t\t\twriteBuffer.force();\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t\tfileChannel.close();\n\t\t\treturn;\n\t\t}\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\twriteBuffer.force();\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = \n\t\t\tnew WeakReference<MappedByteBuffer>( \n\t\t\t\t\twriteBuffer.getMappedBuffer() );\n\t\twriteBuffer = null;\n\t\tfileChannel.close();\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new IOException( \"Logical log[\" + fileName + \"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\tboolean deleted = false;\n\t\ttry\n\t\t{\n\t\t\tdeleted = file.delete();\n\t\t} catch ( Exception e ) {}\n\t\t\n\t\t// hack for WINBLOWS\n\t\tfor ( int i = 0; i < 3 && !deleted; i++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.sleep( 500 );\n\t\t\t} catch ( InterruptedException e ) \n\t\t\t{ } // ok\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSystem.gc();\n\t\t\t\tdeleted = file.delete();\n\t\t\t} \n\t\t\tcatch ( Exception e ) {} // ok...\n\t\t}\n\t\tif ( !deleted )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\tdeleted = file.delete();\n\t\t\t}\n\t\t\tcatch ( Exception e ) {} // at least we tried...\n\t\t}\n\t\t\n\t\tif ( !deleted )\n\t\t{\n\t\t\tlog.warning( \"Unable to delete clean logical log[\" +  \n\t\t\t\t\tfileName + \"]\" );\n\t\t}\n\t}","id":7583,"modified_method":"public synchronized void close() throws IOException\n\t{\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tlog.info( \"Active transactions: \" + xidIdentMap.size() );\n\t\t\tlog.info( \"Closing dirty log: \" + fileName );\n\t\t\tif ( writeBuffer != null )\n\t\t\t{\n\t\t\t\twriteBuffer.force();\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t\tfileChannel.close();\n\t\t\treturn;\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = null;\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\twriteBuffer.force();\n\t\t\tMappedByteBuffer mappedBuffer = writeBuffer.getMappedBuffer();\n\t\t\tif ( mappedBuffer != null )\n\t\t\t{\n\t\t\t\tbufferWeakRef = new WeakReference<MappedByteBuffer>( \n\t\t\t\t\tmappedBuffer );\n\t\t\t\tmappedBuffer = null;\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t}\n\t\tfileChannel.close();\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new IOException( \"Logical log[\" + fileName + \"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\tboolean deleted = false;\n\t\ttry\n\t\t{\n\t\t\tdeleted = file.delete();\n\t\t} catch ( Exception e ) {}\n\t\t\n\t\t// hack for WINBLOWS\n\t\tfor ( int i = 0; i < 3 && !deleted; i++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.sleep( 500 );\n\t\t\t} catch ( InterruptedException e ) \n\t\t\t{ } // ok\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSystem.gc();\n\t\t\t\tdeleted = file.delete();\n\t\t\t} \n\t\t\tcatch ( Exception e ) {} // ok...\n\t\t}\n\t\tif ( !deleted && bufferWeakRef != null )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\tdeleted = file.delete();\n\t\t\t}\n\t\t\tcatch ( Exception e ) {} // at least we tried...\n\t\t}\n\t\t\n\t\tif ( !deleted )\n\t\t{\n\t\t\tlog.warning( \"Unable to delete clean logical log[\" +  \n\t\t\t\t\tfileName + \"]\" );\n\t\t}\n\t}","commit_id":"14b54b753ebd462a1b52a6f7996a6b68c82d256c","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void clean( final MappedByteBuffer buffer ) throws Exception \n\t{\n\t\tAccessController.doPrivileged( new PrivilegedAction<Object>() \n\t\t{\n\t\t\tpublic Object run() \n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tMethod getCleanerMethod = buffer.getClass().getMethod( \n\t\t\t\t\t\t\"cleaner\", new Class[0]);\n\t\t\t\t\tgetCleanerMethod.setAccessible(true);\n\t\t\t\t\tsun.misc.Cleaner cleaner = (sun.misc.Cleaner)\n\t\t\t\t\t\tgetCleanerMethod.invoke( buffer, new Object[0] );\n\t\t\t\t\tcleaner.clean();\n\t\t\t\t} \n\t\t\t\tcatch(Exception e) \n\t\t\t\t{\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} );\n\t}","id":7584,"modified_method":"private void clean( final MappedByteBuffer mappedBuffer ) throws Exception \n\t{\n\t\tAccessController.doPrivileged( new PrivilegedAction<Object>() \n\t\t{\n\t\t\tpublic Object run() \n\t\t\t{\n\t\t\t\tif ( mappedBuffer == null )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tMethod getCleanerMethod = mappedBuffer.getClass().getMethod( \n\t\t\t\t\t\t\"cleaner\", new Class[0]);\n\t\t\t\t\tgetCleanerMethod.setAccessible(true);\n\t\t\t\t\tsun.misc.Cleaner cleaner = (sun.misc.Cleaner)\n\t\t\t\t\t\tgetCleanerMethod.invoke( mappedBuffer, new Object[0] );\n\t\t\t\t\tcleaner.clean();\n\t\t\t\t} \n\t\t\t\tcatch(Exception e) \n\t\t\t\t{\n\t\t\t\t\tlog.log( Level.INFO, \n\t\t\t\t\t\t\"Unable to invoke cleaner method on \" + mappedBuffer, \n\t\t\t\t\t\te );\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} );\n\t}","commit_id":"14b54b753ebd462a1b52a6f7996a6b68c82d256c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void makeNewLog()\n\t{\n\t\t// save recovered log\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Active transactions found: \" \n\t\t\t\t+ xidIdentMap.size() + \", can't make new log file\" );\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = \n\t\t\tnew WeakReference<MappedByteBuffer>( \n\t\t\t\t\twriteBuffer.getMappedBuffer() );\n\t\twriteBuffer = null;\n\t\ttry\n\t\t{\n\t\t\tfileChannel.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to close log[\" + fileName + \n\t\t\t\t\"]\", e );\n\t\t}\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Logical log[\" + fileName + \n\t\t\t\t\"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\ttry\n\t\t{\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\tfile.renameTo( new File( saveName ) );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tboolean renamed = false;\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenamed = file.renameTo( new File( saveName ) );\n\t\t\t} catch ( Exception ee ) {}\n\t\t\tfor ( int i = 0; i < 3 && !renamed; i++ )\n\t\t\t{\n\t\t\t\t// hack for WINBLOWS\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tThread.sleep( 500 );\n\t\t\t\t} catch ( InterruptedException ee ) \n\t\t\t\t{ } // ok\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSystem.gc();\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t} \n\t\t\t\tcatch ( Exception ee ) {} // ok...\n\t\t\t}\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception ee ) {} // at least we tried...\n\t\t\t}\n\t\t\t\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\tthrow new RuntimeException( \"Unable to rename recovered \" + \n\t\t\t\t\t\"log file[\" + fileName + \"]\" );\n\t\t\t}\n\t\t}\n\t\t// create a new one\n\t\ttry\n\t\t{\n\t\t\tthis.open();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to open new log[\" + \n\t\t\t\tfileName + \"]\", e );\n\t\t}\n\t}","id":7585,"modified_method":"synchronized void makeNewLog()\n\t{\n\t\t// save recovered log\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Active transactions found: \" \n\t\t\t\t+ xidIdentMap.size() + \", can't make new log file\" );\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = null;\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\tMappedByteBuffer mappedBuffer = writeBuffer.getMappedBuffer();\n\t\t\tif ( mappedBuffer != null )\n\t\t\t{\n\t\t\t\tbufferWeakRef = new WeakReference<MappedByteBuffer>( \n\t\t\t\t\tmappedBuffer );\n\t\t\t\tmappedBuffer = null;\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tfileChannel.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to close log[\" + fileName + \n\t\t\t\t\"]\", e );\n\t\t}\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Logical log[\" + fileName + \n\t\t\t\t\"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\ttry\n\t\t{\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\tfile.renameTo( new File( saveName ) );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tboolean renamed = false;\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenamed = file.renameTo( new File( saveName ) );\n\t\t\t} catch ( Exception ee ) {}\n\t\t\tfor ( int i = 0; i < 3 && !renamed; i++ )\n\t\t\t{\n\t\t\t\t// hack for WINBLOWS\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tThread.sleep( 500 );\n\t\t\t\t} catch ( InterruptedException ee ) \n\t\t\t\t{ } // ok\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSystem.gc();\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t} \n\t\t\t\tcatch ( Exception ee ) {} // ok...\n\t\t\t}\n\t\t\tif ( !renamed && bufferWeakRef != null )\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception ee ) {} // at least we tried...\n\t\t\t}\n\t\t\t\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\tthrow new RuntimeException( \"Unable to rename recovered \" + \n\t\t\t\t\t\"log file[\" + fileName + \"]\" );\n\t\t\t}\n\t\t}\n\t\t// create a new one\n\t\ttry\n\t\t{\n\t\t\tthis.open();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to open new log[\" + \n\t\t\t\tfileName + \"]\", e );\n\t\t}\n\t}","commit_id":"14b54b753ebd462a1b52a6f7996a6b68c82d256c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void close() throws IOException\n\t{\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tlog.info( \"Active transactions: \" + xidIdentMap.size() );\n\t\t\tlog.info( \"Closing dirty log: \" + fileName );\n\t\t\tif ( writeBuffer != null )\n\t\t\t{\n\t\t\t\twriteBuffer.force();\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t\tfileChannel.close();\n\t\t\treturn;\n\t\t}\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\twriteBuffer.force();\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = \n\t\t\tnew WeakReference<MappedByteBuffer>( \n\t\t\t\t\twriteBuffer.getMappedBuffer() );\n\t\twriteBuffer = null;\n\t\tfileChannel.close();\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new IOException( \"Logical log[\" + fileName + \"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\tboolean deleted = false;\n\t\ttry\n\t\t{\n\t\t\tdeleted = file.delete();\n\t\t} catch ( Exception e ) {}\n\t\t\n\t\t// hack for WINBLOWS\n\t\tfor ( int i = 0; i < 3 && !deleted; i++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.sleep( 500 );\n\t\t\t} catch ( InterruptedException e ) \n\t\t\t{ } // ok\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSystem.gc();\n\t\t\t\tdeleted = file.delete();\n\t\t\t} \n\t\t\tcatch ( Exception e ) {} // ok...\n\t\t}\n\t\tif ( !deleted )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\tdeleted = file.delete();\n\t\t\t}\n\t\t\tcatch ( Exception e ) {} // at least we tried...\n\t\t}\n\t\t\n\t\tif ( !deleted )\n\t\t{\n\t\t\tlog.warning( \"Unable to delete clean logical log[\" +  \n\t\t\t\t\tfileName + \"]\" );\n\t\t}\n\t}","id":7586,"modified_method":"public synchronized void close() throws IOException\n\t{\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tlog.info( \"Active transactions: \" + xidIdentMap.size() );\n\t\t\tlog.info( \"Closing dirty log: \" + fileName );\n\t\t\tif ( writeBuffer != null )\n\t\t\t{\n\t\t\t\twriteBuffer.force();\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t\tfileChannel.close();\n\t\t\treturn;\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = null;\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\twriteBuffer.force();\n\t\t\tMappedByteBuffer mappedBuffer = writeBuffer.getMappedBuffer();\n\t\t\tif ( mappedBuffer != null )\n\t\t\t{\n\t\t\t\tbufferWeakRef = new WeakReference<MappedByteBuffer>( \n\t\t\t\t\tmappedBuffer );\n\t\t\t\tmappedBuffer = null;\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t}\n\t\tfileChannel.close();\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new IOException( \"Logical log[\" + fileName + \"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\tboolean deleted = false;\n\t\ttry\n\t\t{\n\t\t\tdeleted = file.delete();\n\t\t} catch ( Exception e ) {}\n\t\t\n\t\t// hack for WINBLOWS\n\t\tfor ( int i = 0; i < 3 && !deleted; i++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.sleep( 500 );\n\t\t\t} catch ( InterruptedException e ) \n\t\t\t{ } // ok\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSystem.gc();\n\t\t\t\tdeleted = file.delete();\n\t\t\t} \n\t\t\tcatch ( Exception e ) {} // ok...\n\t\t}\n\t\tif ( !deleted && bufferWeakRef != null )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\tdeleted = file.delete();\n\t\t\t}\n\t\t\tcatch ( Exception e ) {} // at least we tried...\n\t\t}\n\t\t\n\t\tif ( !deleted )\n\t\t{\n\t\t\tlog.warning( \"Unable to delete clean logical log[\" +  \n\t\t\t\t\tfileName + \"]\" );\n\t\t}\n\t}","commit_id":"819a53feefcc03d494a56abcf69b1d2a806ebea3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void clean( final MappedByteBuffer buffer ) throws Exception \n\t{\n\t\tAccessController.doPrivileged( new PrivilegedAction<Object>() \n\t\t{\n\t\t\tpublic Object run() \n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tMethod getCleanerMethod = buffer.getClass().getMethod( \n\t\t\t\t\t\t\"cleaner\", new Class[0]);\n\t\t\t\t\tgetCleanerMethod.setAccessible(true);\n\t\t\t\t\tsun.misc.Cleaner cleaner = (sun.misc.Cleaner)\n\t\t\t\t\t\tgetCleanerMethod.invoke( buffer, new Object[0] );\n\t\t\t\t\tcleaner.clean();\n\t\t\t\t} \n\t\t\t\tcatch(Exception e) \n\t\t\t\t{\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} );\n\t}","id":7587,"modified_method":"private void clean( final MappedByteBuffer mappedBuffer ) throws Exception \n\t{\n\t\tAccessController.doPrivileged( new PrivilegedAction<Object>() \n\t\t{\n\t\t\tpublic Object run() \n\t\t\t{\n\t\t\t\tif ( mappedBuffer == null )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tMethod getCleanerMethod = mappedBuffer.getClass().getMethod( \n\t\t\t\t\t\t\"cleaner\", new Class[0]);\n\t\t\t\t\tgetCleanerMethod.setAccessible(true);\n\t\t\t\t\tsun.misc.Cleaner cleaner = (sun.misc.Cleaner)\n\t\t\t\t\t\tgetCleanerMethod.invoke( mappedBuffer, new Object[0] );\n\t\t\t\t\tcleaner.clean();\n\t\t\t\t} \n\t\t\t\tcatch(Exception e) \n\t\t\t\t{\n\t\t\t\t\tlog.log( Level.INFO, \n\t\t\t\t\t\t\"Unable to invoke cleaner method on \" + mappedBuffer, \n\t\t\t\t\t\te );\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} );\n\t}","commit_id":"819a53feefcc03d494a56abcf69b1d2a806ebea3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void makeNewLog()\n\t{\n\t\t// save recovered log\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Active transactions found: \" \n\t\t\t\t+ xidIdentMap.size() + \", can't make new log file\" );\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = \n\t\t\tnew WeakReference<MappedByteBuffer>( \n\t\t\t\t\twriteBuffer.getMappedBuffer() );\n\t\twriteBuffer = null;\n\t\ttry\n\t\t{\n\t\t\tfileChannel.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to close log[\" + fileName + \n\t\t\t\t\"]\", e );\n\t\t}\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Logical log[\" + fileName + \n\t\t\t\t\"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\ttry\n\t\t{\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\tfile.renameTo( new File( saveName ) );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tboolean renamed = false;\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenamed = file.renameTo( new File( saveName ) );\n\t\t\t} catch ( Exception ee ) {}\n\t\t\tfor ( int i = 0; i < 3 && !renamed; i++ )\n\t\t\t{\n\t\t\t\t// hack for WINBLOWS\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tThread.sleep( 500 );\n\t\t\t\t} catch ( InterruptedException ee ) \n\t\t\t\t{ } // ok\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSystem.gc();\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t} \n\t\t\t\tcatch ( Exception ee ) {} // ok...\n\t\t\t}\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception ee ) {} // at least we tried...\n\t\t\t}\n\t\t\t\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\tthrow new RuntimeException( \"Unable to rename recovered \" + \n\t\t\t\t\t\"log file[\" + fileName + \"]\" );\n\t\t\t}\n\t\t}\n\t\t// create a new one\n\t\ttry\n\t\t{\n\t\t\tthis.open();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to open new log[\" + \n\t\t\t\tfileName + \"]\", e );\n\t\t}\n\t}","id":7588,"modified_method":"synchronized void makeNewLog()\n\t{\n\t\t// save recovered log\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Active transactions found: \" \n\t\t\t\t+ xidIdentMap.size() + \", can't make new log file\" );\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = null;\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\tMappedByteBuffer mappedBuffer = writeBuffer.getMappedBuffer();\n\t\t\tif ( mappedBuffer != null )\n\t\t\t{\n\t\t\t\tbufferWeakRef = new WeakReference<MappedByteBuffer>( \n\t\t\t\t\tmappedBuffer );\n\t\t\t\tmappedBuffer = null;\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tfileChannel.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to close log[\" + fileName + \n\t\t\t\t\"]\", e );\n\t\t}\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Logical log[\" + fileName + \n\t\t\t\t\"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\ttry\n\t\t{\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\tfile.renameTo( new File( saveName ) );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tboolean renamed = false;\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenamed = file.renameTo( new File( saveName ) );\n\t\t\t} catch ( Exception ee ) {}\n\t\t\tfor ( int i = 0; i < 3 && !renamed; i++ )\n\t\t\t{\n\t\t\t\t// hack for WINBLOWS\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tThread.sleep( 500 );\n\t\t\t\t} catch ( InterruptedException ee ) \n\t\t\t\t{ } // ok\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSystem.gc();\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t} \n\t\t\t\tcatch ( Exception ee ) {} // ok...\n\t\t\t}\n\t\t\tif ( !renamed && bufferWeakRef != null )\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception ee ) {} // at least we tried...\n\t\t\t}\n\t\t\t\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\tthrow new RuntimeException( \"Unable to rename recovered \" + \n\t\t\t\t\t\"log file[\" + fileName + \"]\" );\n\t\t\t}\n\t\t}\n\t\t// create a new one\n\t\ttry\n\t\t{\n\t\t\tthis.open();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to open new log[\" + \n\t\t\t\tfileName + \"]\", e );\n\t\t}\n\t}","commit_id":"819a53feefcc03d494a56abcf69b1d2a806ebea3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void makeNewLog()\n\t{\n\t\t// save recovered log\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Active transactions found: \" \n\t\t\t\t+ xidIdentMap.size() + \", can't make new log file\" );\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = \n\t\t\tnew WeakReference<MappedByteBuffer>( \n\t\t\t\t\twriteBuffer.getMappedBuffer() );\n\t\twriteBuffer = null;\n\t\ttry\n\t\t{\n\t\t\tfileChannel.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to close log[\" + fileName + \n\t\t\t\t\"]\", e );\n\t\t}\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Logical log[\" + fileName + \n\t\t\t\t\"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\ttry\n\t\t{\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\tfile.renameTo( new File( saveName ) );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tboolean renamed = false;\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenamed = file.renameTo( new File( saveName ) );\n\t\t\t} catch ( Exception ee ) {}\n\t\t\tfor ( int i = 0; i < 3 && !renamed; i++ )\n\t\t\t{\n\t\t\t\t// hack for WINBLOWS\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tThread.sleep( 500 );\n\t\t\t\t} catch ( InterruptedException ee ) \n\t\t\t\t{ } // ok\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSystem.gc();\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t} \n\t\t\t\tcatch ( Exception ee ) {} // ok...\n\t\t\t}\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception ee ) {} // at least we tried...\n\t\t\t}\n\t\t\t\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\tthrow new RuntimeException( \"Unable to rename recovered \" + \n\t\t\t\t\t\"log file[\" + fileName + \"]\" );\n\t\t\t}\n\t\t}\n\t\t// create a new one\n\t\ttry\n\t\t{\n\t\t\tthis.open();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to open new log[\" + \n\t\t\t\tfileName + \"]\", e );\n\t\t}\n\t}","id":7589,"modified_method":"synchronized void makeNewLog()\n\t{\n\t\t// save recovered log\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Active transactions found: \" \n\t\t\t\t+ xidIdentMap.size() + \", can't make new log file\" );\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = null;\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\tMappedByteBuffer mappedBuffer = writeBuffer.getMappedBuffer();\n\t\t\tif ( mappedBuffer != null )\n\t\t\t{\n\t\t\t\tbufferWeakRef = new WeakReference<MappedByteBuffer>( \n\t\t\t\t\tmappedBuffer );\n\t\t\t\tmappedBuffer = null;\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tfileChannel.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to close log[\" + fileName + \n\t\t\t\t\"]\", e );\n\t\t}\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Logical log[\" + fileName + \n\t\t\t\t\"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\ttry\n\t\t{\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\tfile.renameTo( new File( saveName ) );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tboolean renamed = false;\n\t\t\tString saveName = fileName + \".recovered-\" + \n\t\t\t\tSystem.currentTimeMillis();\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenamed = file.renameTo( new File( saveName ) );\n\t\t\t} catch ( Exception ee ) {}\n\t\t\tfor ( int i = 0; i < 3 && !renamed; i++ )\n\t\t\t{\n\t\t\t\t// hack for WINBLOWS\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tThread.sleep( 500 );\n\t\t\t\t} catch ( InterruptedException ee ) \n\t\t\t\t{ } // ok\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSystem.gc();\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t} \n\t\t\t\tcatch ( Exception ee ) {} // ok...\n\t\t\t}\n\t\t\tif ( !renamed && bufferWeakRef != null )\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\t\trenamed = file.delete();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception ee ) {} // at least we tried...\n\t\t\t}\n\t\t\t\n\t\t\tif ( !renamed )\n\t\t\t{\n\t\t\t\tthrow new RuntimeException( \"Unable to rename recovered \" + \n\t\t\t\t\t\"log file[\" + fileName + \"]\" );\n\t\t\t}\n\t\t}\n\t\t// create a new one\n\t\ttry\n\t\t{\n\t\t\tthis.open();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Unable to open new log[\" + \n\t\t\t\tfileName + \"]\", e );\n\t\t}\n\t}","commit_id":"83e7ead6f415d6bcc4320511121a61bac7ccc0ae","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void clean( final MappedByteBuffer buffer ) throws Exception \n\t{\n\t\tAccessController.doPrivileged( new PrivilegedAction<Object>() \n\t\t{\n\t\t\tpublic Object run() \n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tMethod getCleanerMethod = buffer.getClass().getMethod( \n\t\t\t\t\t\t\"cleaner\", new Class[0]);\n\t\t\t\t\tgetCleanerMethod.setAccessible(true);\n\t\t\t\t\tsun.misc.Cleaner cleaner = (sun.misc.Cleaner)\n\t\t\t\t\t\tgetCleanerMethod.invoke( buffer, new Object[0] );\n\t\t\t\t\tcleaner.clean();\n\t\t\t\t} \n\t\t\t\tcatch(Exception e) \n\t\t\t\t{\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} );\n\t}","id":7590,"modified_method":"private void clean( final MappedByteBuffer mappedBuffer ) throws Exception \n\t{\n\t\tAccessController.doPrivileged( new PrivilegedAction<Object>() \n\t\t{\n\t\t\tpublic Object run() \n\t\t\t{\n\t\t\t\tif ( mappedBuffer == null )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tMethod getCleanerMethod = mappedBuffer.getClass().getMethod( \n\t\t\t\t\t\t\"cleaner\", new Class[0]);\n\t\t\t\t\tgetCleanerMethod.setAccessible(true);\n\t\t\t\t\tsun.misc.Cleaner cleaner = (sun.misc.Cleaner)\n\t\t\t\t\t\tgetCleanerMethod.invoke( mappedBuffer, new Object[0] );\n\t\t\t\t\tcleaner.clean();\n\t\t\t\t} \n\t\t\t\tcatch(Exception e) \n\t\t\t\t{\n\t\t\t\t\tlog.log( Level.INFO, \n\t\t\t\t\t\t\"Unable to invoke cleaner method on \" + mappedBuffer, \n\t\t\t\t\t\te );\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} );\n\t}","commit_id":"83e7ead6f415d6bcc4320511121a61bac7ccc0ae","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void close() throws IOException\n\t{\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tlog.info( \"Active transactions: \" + xidIdentMap.size() );\n\t\t\tlog.info( \"Closing dirty log: \" + fileName );\n\t\t\tif ( writeBuffer != null )\n\t\t\t{\n\t\t\t\twriteBuffer.force();\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t\tfileChannel.close();\n\t\t\treturn;\n\t\t}\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\twriteBuffer.force();\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = \n\t\t\tnew WeakReference<MappedByteBuffer>( \n\t\t\t\t\twriteBuffer.getMappedBuffer() );\n\t\twriteBuffer = null;\n\t\tfileChannel.close();\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new IOException( \"Logical log[\" + fileName + \"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\tboolean deleted = false;\n\t\ttry\n\t\t{\n\t\t\tdeleted = file.delete();\n\t\t} catch ( Exception e ) {}\n\t\t\n\t\t// hack for WINBLOWS\n\t\tfor ( int i = 0; i < 3 && !deleted; i++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.sleep( 500 );\n\t\t\t} catch ( InterruptedException e ) \n\t\t\t{ } // ok\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSystem.gc();\n\t\t\t\tdeleted = file.delete();\n\t\t\t} \n\t\t\tcatch ( Exception e ) {} // ok...\n\t\t}\n\t\tif ( !deleted )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\tdeleted = file.delete();\n\t\t\t}\n\t\t\tcatch ( Exception e ) {} // at least we tried...\n\t\t}\n\t\t\n\t\tif ( !deleted )\n\t\t{\n\t\t\tlog.warning( \"Unable to delete clean logical log[\" +  \n\t\t\t\t\tfileName + \"]\" );\n\t\t}\n\t}","id":7591,"modified_method":"public synchronized void close() throws IOException\n\t{\n\t\tif ( xidIdentMap.size() > 0 )\n\t\t{\n\t\t\tlog.info( \"Active transactions: \" + xidIdentMap.size() );\n\t\t\tlog.info( \"Closing dirty log: \" + fileName );\n\t\t\tif ( writeBuffer != null )\n\t\t\t{\n\t\t\t\twriteBuffer.force();\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t\tfileChannel.close();\n\t\t\treturn;\n\t\t}\n\t\tWeakReference<MappedByteBuffer> bufferWeakRef = null;\n\t\tif ( writeBuffer != null )\n\t\t{\n\t\t\twriteBuffer.force();\n\t\t\tMappedByteBuffer mappedBuffer = writeBuffer.getMappedBuffer();\n\t\t\tif ( mappedBuffer != null )\n\t\t\t{\n\t\t\t\tbufferWeakRef = new WeakReference<MappedByteBuffer>( \n\t\t\t\t\tmappedBuffer );\n\t\t\t\tmappedBuffer = null;\n\t\t\t}\n\t\t\twriteBuffer = null;\n\t\t}\n\t\tfileChannel.close();\n\t\tFile file = new File( fileName );\n\t\tif ( !file.exists() )\n\t\t{\n\t\t\tthrow new IOException( \"Logical log[\" + fileName + \"] not found\" );\n\t\t}\n\t\t// TODO: if store old logs save them here\n\t\tboolean deleted = false;\n\t\ttry\n\t\t{\n\t\t\tdeleted = file.delete();\n\t\t} catch ( Exception e ) {}\n\t\t\n\t\t// hack for WINBLOWS\n\t\tfor ( int i = 0; i < 3 && !deleted; i++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.sleep( 500 );\n\t\t\t} catch ( InterruptedException e ) \n\t\t\t{ } // ok\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSystem.gc();\n\t\t\t\tdeleted = file.delete();\n\t\t\t} \n\t\t\tcatch ( Exception e ) {} // ok...\n\t\t}\n\t\tif ( !deleted && bufferWeakRef != null )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tclean( bufferWeakRef.get() );\n\t\t\t\tdeleted = file.delete();\n\t\t\t}\n\t\t\tcatch ( Exception e ) {} // at least we tried...\n\t\t}\n\t\t\n\t\tif ( !deleted )\n\t\t{\n\t\t\tlog.warning( \"Unable to delete clean logical log[\" +  \n\t\t\t\t\tfileName + \"]\" );\n\t\t}\n\t}","commit_id":"83e7ead6f415d6bcc4320511121a61bac7ccc0ae","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Calculate the percentage of time that all services are up for this\n     * application on this remote monitor.\n     * \n     * @param monitor remote monitor to report on\n     * @param applicationServices services to report on\n     * @param startDate start date.  The report starts on this date.\n     * @param endDate end date.  The report ends the last millisecond prior\n     * this date.\n     * @return representation of the percentage uptime out to three decimal places\n     */\n    public String calculatePercentageUptime(\n            Collection<OnmsLocationMonitor> monitors,\n            Set<OnmsMonitoredService> applicationServices,\n            Collection<OnmsLocationSpecificStatus> statuses,\n            Date startDate, Date endDate) {\n        /*\n         * The methodology is as such:\n         * 1) Sort the status entries by their timestamp;\n         * 2) Create a Map of each monitored service with a default\n         *    PollStatus of unknown.\n         * 3) Iterate through the sorted list of status entries until\n         *    we hit a timestamp that is not within our time range or\n         *    run out of entries.\n         *    a) Along the way, update the status Map with the current\n         *       entry's status, and calculate the current status.\n         *    b) If the current timestamp is before the start time, store\n         *       the current status so we can use it once we cross over\n         *       into our time range and then continue.\n         *    c) If the previous status is normal, then count up the number\n         *       of milliseconds since the previous state change entry in\n         *       the time range (or the beginning of the range if this is\n         *       the first entry in within the time range), and add that\n         *       a counter of \"normal\" millseconds.\n         *    d) Finally, save the current date and status for later use.\n         * 4) Perform the same computation in 3c, except count the number\n         *    of milliseconds since the last state change entry (or the\n         *    start time if there were no entries) and the end time, and add\n         *    that to the counter of \"normal\" milliseconds.\n         * 5) Divide the \"normal\" milliseconds counter by the total number\n         *    of milliseconds in our time range and compute and return a\n         *    percentage.\n         */\n        \n        List<OnmsLocationSpecificStatus> sortedStatuses =\n            new ArrayList<OnmsLocationSpecificStatus>(statuses);\n        Collections.sort(sortedStatuses, new Comparator<OnmsLocationSpecificStatus>(){\n            public int compare(OnmsLocationSpecificStatus o1, OnmsLocationSpecificStatus o2) {\n                return o1.getPollResult().getTimestamp().compareTo(o2.getPollResult().getTimestamp());\n            }\n        });\n\n        HashMap<OnmsMonitoredService,PollStatus> serviceStatus =\n            new HashMap<OnmsMonitoredService,PollStatus>();\n        for (OnmsMonitoredService service : applicationServices) {\n            serviceStatus.put(service, PollStatus.unknown(\"No history for this service from this location\"));\n        }\n        \n        float normalMilliseconds = 0f;\n        \n        Date lastDate = startDate;\n        String lastStatus = \"Critical\";\n        \n        for (OnmsLocationSpecificStatus status : sortedStatuses) {\n            if (!monitors.contains(status.getLocationMonitor())) {\n                continue;\n            }\n\n            Date currentDate = status.getPollResult().getTimestamp();\n\n            if (!currentDate.before(endDate)) {\n                // We're at or past the end date, so we're done processing\n                break;\n            }\n            \n            serviceStatus.put(status.getMonitoredService(), status.getPollResult());\n            String currentStatus = calculateStatus(serviceStatus.values());\n            \n            if (currentDate.before(startDate)) {\n                /*\n                 * We're not yet to a date that is inside our time period, so\n                 * we don't need to check the status and adjust the\n                 * normalMilliseconds variable, but we do need to save the\n                 * status so we have an up-to-date status when we cross the\n                 * start date.\n                 */\n                lastStatus = currentStatus;\n                continue;\n            }\n            \n            /*\n             * Because we *just* had a state change, we want to look at the\n             * value of the *last* status.\n             */\n            if (\"Normal\".equals(lastStatus)) {\n                long milliseconds = currentDate.getTime() - lastDate.getTime();\n                normalMilliseconds += milliseconds;\n            }\n            \n            lastDate = currentDate;\n            lastStatus = currentStatus;\n        }\n        \n        if (\"Normal\".equals(lastStatus)) {\n            long milliseconds = endDate.getTime() - lastDate.getTime();\n            normalMilliseconds += milliseconds;\n        }\n\n        float percentage = normalMilliseconds /\n            (endDate.getTime() - startDate.getTime()) * 100;\n        return new DecimalFormat(\"0.000\").format((double) percentage) + \"%\";\n    }","id":7592,"modified_method":"/**\n     * Calculate the percentage of time that all services are up for this\n     * application on this remote monitor.\n     * \n     * @param monitor remote monitor to report on\n     * @param applicationServices services to report on\n     * @param startDate start date.  The report starts on this date.\n     * @param endDate end date.  The report ends the last millisecond prior\n     * this date.\n     * @return representation of the percentage uptime out to three decimal places\n     */\n    public String calculatePercentageUptime(\n            Collection<OnmsLocationMonitor> monitors,\n            Set<OnmsMonitoredService> applicationServices,\n            Collection<OnmsLocationSpecificStatus> statuses,\n            Date startDate, Date endDate) {\n        /*\n         * The methodology is as such:\n         * 1) Sort the status entries by their timestamp;\n         * 2) Create a Map of each monitored service with a default\n         *    PollStatus of unknown.\n         * 3) Iterate through the sorted list of status entries until\n         *    we hit a timestamp that is not within our time range or\n         *    run out of entries.\n         *    a) Along the way, update the status Map with the current\n         *       entry's status, and calculate the current status.\n         *    b) If the current timestamp is before the start time, store\n         *       the current status so we can use it once we cross over\n         *       into our time range and then continue.\n         *    c) If the previous status is normal, then count up the number\n         *       of milliseconds since the previous state change entry in\n         *       the time range (or the beginning of the range if this is\n         *       the first entry in within the time range), and add that\n         *       a counter of \"normal\" millseconds.\n         *    d) Finally, save the current date and status for later use.\n         * 4) Perform the same computation in 3c, except count the number\n         *    of milliseconds since the last state change entry (or the\n         *    start time if there were no entries) and the end time, and add\n         *    that to the counter of \"normal\" milliseconds.\n         * 5) Divide the \"normal\" milliseconds counter by the total number\n         *    of milliseconds in our time range and compute and return a\n         *    percentage.\n         */\n        \n        List<OnmsLocationSpecificStatus> sortedStatuses =\n            new ArrayList<OnmsLocationSpecificStatus>(statuses);\n        Collections.sort(sortedStatuses, new Comparator<OnmsLocationSpecificStatus>(){\n            public int compare(OnmsLocationSpecificStatus o1, OnmsLocationSpecificStatus o2) {\n                return o1.getPollResult().getTimestamp().compareTo(o2.getPollResult().getTimestamp());\n            }\n        });\n\n        HashMap<OnmsMonitoredService,PollStatus> serviceStatus =\n            new HashMap<OnmsMonitoredService,PollStatus>();\n        for (OnmsMonitoredService service : applicationServices) {\n            serviceStatus.put(service, PollStatus.unknown(\"No history for this service from this location\"));\n        }\n        \n        float normalMilliseconds = 0f;\n        \n        Date lastDate = startDate;\n        String lastStatus = \"Critical\";\n        \n        for (OnmsLocationSpecificStatus status : sortedStatuses) {\n            if (!monitors.contains(status.getLocationMonitor())) {\n                System.out.println(\"monitor \" + status.getLocationMonitor()\n                                   + \" not in monitors list\");\n                continue;\n            }\n            \n            if (!applicationServices.contains(status.getMonitoredService())) {\n                System.out.println(\"service \" + status.getMonitoredService()\n                                   + \" not in monitored service list\");\n                continue;\n            }\n\n            Date currentDate = status.getPollResult().getTimestamp();\n\n            if (!currentDate.before(endDate)) {\n                System.out.println(\"at or past end date \" + endDate + \" at \"\n                                   + currentDate);\n                // We're at or past the end date, so we're done processing\n                break;\n            }\n            \n            serviceStatus.put(status.getMonitoredService(), status.getPollResult());\n            String currentStatus = calculateStatus(serviceStatus.values());\n            \n            if (currentDate.before(startDate)) {\n                System.out.println(\"before start date \" + startDate + \" at \"\n                                   + currentDate + \" with status \"\n                                   + currentStatus + \" after status of \"\n                                   + status.getPollResult());\n                /*\n                 * We're not yet to a date that is inside our time period, so\n                 * we don't need to check the status and adjust the\n                 * normalMilliseconds variable, but we do need to save the\n                 * status so we have an up-to-date status when we cross the\n                 * start date.\n                 */\n                lastStatus = currentStatus;\n                continue;\n            }\n            \n            /*\n             * Because we *just* had a state change, we want to look at the\n             * value of the *last* status.\n             */\n            if (\"Normal\".equals(lastStatus)) {\n                long milliseconds = currentDate.getTime() - lastDate.getTime();\n                normalMilliseconds += milliseconds;\n            }\n            \n            lastDate = currentDate;\n            lastStatus = currentStatus;\n        }\n        \n        if (\"Normal\".equals(lastStatus)) {\n            long milliseconds = endDate.getTime() - lastDate.getTime();\n            normalMilliseconds += milliseconds;\n        }\n\n        float percentage = normalMilliseconds /\n            (endDate.getTime() - startDate.getTime()) * 100;\n        return new DecimalFormat(\"0.000\").format((double) percentage) + \"%\";\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SimpleWebTable createStatusTable(String locationName, String applicationLabel) {\n        List<OnmsLocationSpecificStatus> status =\n            findLocationSpecificStatus(locationName, applicationLabel);\n        \n        SimpleWebTable table = new SimpleWebTable();\n        \n        table.setTitle(\"Distributed poller view for \" + applicationLabel + \" from \" + locationName + \" location\");\n        \n        table.addColumn(\"Node\", \"simpleWebTableHeader\");\n        table.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        table.addColumn(\"Service\", \"simpleWebTableHeader\");\n        table.addColumn(\"Status\", \"simpleWebTableHeader\");\n        table.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        for (OnmsLocationSpecificStatus s : status) {\n            OnmsNode node = s.getMonitoredService().getIpInterface().getNode();\n            \n            table.newRow();\n            table.addCell(node.getLabel(), \"simpleWebTableRowLabel\");\n            table.addCell(s.getLocationMonitor().getDefinitionName() + \"-\"\n                          + s.getLocationMonitor().getId(),\n                          \"simpleWebTableRowLabel\");\n            table.addCell(s.getMonitoredService().getServiceName(),\n            \"simpleWebTableRowLabel\");\n            table.addCell(s.getPollResult().getStatusName(),\n                          \"simpleWebTableRowLabel\");\n            long responseTime = s.getPollResult().getResponseTime(); \n            if (responseTime >= 0) {\n                table.addCell(responseTime + \"ms\", \"simpleWebTableRowLabel\");\n            } else {\n                table.addCell(\"\", \"simpleWebTableRowLabel\");\n            }\n        }\n        \n        return table;\n    }","id":7593,"modified_method":"public SimpleWebTable createStatusTable(String locationName, String applicationLabel) {\n        List<OnmsLocationSpecificStatus> status =\n            findLocationSpecificStatus(locationName, applicationLabel);\n        \n        SimpleWebTable table = new SimpleWebTable();\n        \n        table.setTitle(\"Distributed poller view for \" + applicationLabel + \" from \" + locationName + \" location\");\n        \n        table.addColumn(\"Node\", \"simpleWebTableHeader\");\n        table.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        table.addColumn(\"Service\", \"simpleWebTableHeader\");\n        table.addColumn(\"Status\", \"simpleWebTableHeader\");\n        table.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        for (OnmsLocationSpecificStatus s : status) {\n            OnmsNode node = s.getMonitoredService().getIpInterface().getNode();\n            \n            table.newRow();\n            table.addCell(node.getLabel(), \n                          getStyleForPollResult(s.getPollResult()));\n\n            table.addCell(s.getLocationMonitor().getDefinitionName() + \"-\"\n                          + s.getLocationMonitor().getId(),\n                          \"\");\n            table.addCell(s.getMonitoredService().getServiceName(), \"\");\n            table.addCell(s.getPollResult().getStatusName(),\n                          \"bright\");\n            long responseTime = s.getPollResult().getResponseTime(); \n            if (responseTime >= 0) {\n                table.addCell(responseTime + \"ms\", \"\");\n            } else {\n                table.addCell(\"\", \"\");\n            }\n        }\n        \n        return table;\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<OnmsLocationSpecificStatus> findLocationSpecificStatus(String locationName, String applicationName) {\n        if (locationName == null) {\n            throw new IllegalArgumentException(\"locationName cannot be null\");\n        }\n        \n        if (applicationName == null) {\n            throw new IllegalArgumentException(\"applicationLabel cannot be null\");\n        }\n        \n        OnmsMonitoringLocationDefinition location =\n            m_locationMonitorDao.findMonitoringLocationDefinition(locationName);\n        if (location == null) {\n            throw new IllegalArgumentException(\"Could not find location for \"\n                                               + \"location name \\\"\"\n                                               + locationName + \"\\\"\");\n        }\n        \n        OnmsApplication application =\n            m_applicationDao.findByName(applicationName);\n        if (application == null) {\n            throw new IllegalArgumentException(\"Could not find application \"\n                                               + \"for application name \\\"\"\n                                               + applicationName + \"\\\"\");\n        }\n\n        Collection<OnmsLocationMonitor> locationMonitors =\n            m_locationMonitorDao.findByLocationDefinition(location);\n\n        Package pkg = m_pollerConfig.getPackage(location.getPollingPackageName());\n\n        ServiceSelector selector =\n            m_pollerConfig.getServiceSelectorForPackage(pkg);\n        \n        Collection<OnmsMonitoredService> services =\n            m_monitoredServiceDao.findMatchingServices(selector);\n        \n        Set<OnmsMonitoredService> applicationServices = application.getMemberServices();\n        services.retainAll(applicationServices);\n\n        List<OnmsLocationSpecificStatus> status = new LinkedList<OnmsLocationSpecificStatus>();\n        \n        List<OnmsMonitoredService> sortedServices = new ArrayList<OnmsMonitoredService>(services);\n        Collections.sort(sortedServices, new Comparator<OnmsMonitoredService>() {\n            public int compare(OnmsMonitoredService o1, OnmsMonitoredService o2) {\n                return o1.getServiceName().compareTo(o2.getServiceName());\n            }\n        });\n                                                                     \n        for (OnmsMonitoredService service : sortedServices) {\n            // XXX this is a hack, we need to compute aggregate values for all monitors\n            for (OnmsLocationMonitor locationMonitor : locationMonitors) {\n                if (locationMonitor == null) {\n                    status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"Distributed poller has never reported for this location\")));\n                } else {\n                    OnmsLocationSpecificStatus currentStatus = m_locationMonitorDao.getMostRecentStatusChange(locationMonitor, service);\n                    if (currentStatus == null) {\n                        status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"No status recorded for this service from this location\")));\n                    } else {\n                        status.add(currentStatus);\n                    }\n                }\n            }\n        }\n        \n        \n\n        return status;\n    }","id":7594,"modified_method":"protected List<OnmsLocationSpecificStatus> findLocationSpecificStatus(String locationName, String applicationName) {\n        if (locationName == null) {\n            throw new IllegalArgumentException(\"locationName cannot be null\");\n        }\n        \n        if (applicationName == null) {\n            throw new IllegalArgumentException(\"applicationLabel cannot be null\");\n        }\n        \n        OnmsMonitoringLocationDefinition location =\n            m_locationMonitorDao.findMonitoringLocationDefinition(locationName);\n        if (location == null) {\n            throw new IllegalArgumentException(\"Could not find location for \"\n                                               + \"location name \\\"\"\n                                               + locationName + \"\\\"\");\n        }\n        \n        OnmsApplication application =\n            m_applicationDao.findByName(applicationName);\n        if (application == null) {\n            throw new IllegalArgumentException(\"Could not find application \"\n                                               + \"for application name \\\"\"\n                                               + applicationName + \"\\\"\");\n        }\n\n        Collection<OnmsLocationMonitor> locationMonitors =\n            m_locationMonitorDao.findByLocationDefinition(location);\n        \n        if (locationMonitors.size() == 0) {\n            throw new IllegalArgumentException(\"No location monitors have \"\n                                               + \"registered for location \\\"\"\n                                               + location.getName() + \"\\\"\");\n        }\n\n        Package pkg = m_pollerConfig.getPackage(location.getPollingPackageName());\n\n        ServiceSelector selector =\n            m_pollerConfig.getServiceSelectorForPackage(pkg);\n        \n        Collection<OnmsMonitoredService> services =\n            m_monitoredServiceDao.findMatchingServices(selector);\n        \n        Set<OnmsMonitoredService> applicationServices = application.getMemberServices();\n        services.retainAll(applicationServices);\n\n        List<OnmsLocationSpecificStatus> status = new LinkedList<OnmsLocationSpecificStatus>();\n        \n        List<OnmsMonitoredService> sortedServices = new ArrayList<OnmsMonitoredService>(services);\n        Collections.sort(sortedServices, new Comparator<OnmsMonitoredService>() {\n            public int compare(OnmsMonitoredService o1, OnmsMonitoredService o2) {\n                return o1.getServiceName().compareTo(o2.getServiceName());\n            }\n        });\n                                                                     \n        for (OnmsMonitoredService service : sortedServices) {\n            for (OnmsLocationMonitor locationMonitor : locationMonitors) {\n                if (locationMonitor == null) {\n                    status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"Distributed poller has never reported for this location\")));\n                } else {\n                    OnmsLocationSpecificStatus currentStatus = m_locationMonitorDao.getMostRecentStatusChange(locationMonitor, service);\n                    if (currentStatus == null) {\n                        status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"No status recorded for this service from this location\")));\n                    } else {\n                        status.add(currentStatus);\n                    }\n                }\n            }\n        }\n\n        return status;\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SimpleWebTable createFacilityStatusTable(Date startDate,\n            Date endDate) {\n        SimpleWebTable table = new SimpleWebTable();\n        \n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            m_locationMonitorDao.findAllMonitoringLocationDefinitions();\n\n        Collection<OnmsApplication> applications = m_applicationDao.findAll();\n        if (applications.size() == 0) {\n            throw new IllegalArgumentException(\"there are no applications\");\n        }\n        \n        List<OnmsApplication> sortedApplications =\n            new ArrayList<OnmsApplication>(applications);\n        Collections.sort(sortedApplications,\n                         new Comparator<OnmsApplication>(){\n            public int compare(OnmsApplication o1, OnmsApplication o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            m_locationMonitorDao.getAllMostRecentStatusChanges();\n        \n        Collection<OnmsLocationSpecificStatus> statusesWithinPeriod =\n            m_locationMonitorDao.getStatusChangesBetween(startDate, endDate);\n\n        \n        table.setTitle(\"Distributed Poller Status Summary\");\n        \n        table.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        table.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        for (OnmsApplication application : sortedApplications) {\n            table.addColumn(application.getName(), \"simpleWebTableRowLabel\");\n        }\n        \n        for (OnmsMonitoringLocationDefinition locationDefinition : locationDefinitions) {\n            Collection<OnmsLocationMonitor> monitors =\n                m_locationMonitorDao.findByLocationDefinition(locationDefinition);\n            \n            table.newRow();\n            table.addCell(locationDefinition.getArea(), \"simpleWebTableRowLabel\");\n            table.addCell(locationDefinition.getName(), \"simpleWebTableRowLabel\");\n            \n            for (OnmsApplication application : sortedApplications) {\n                /*\n                 *  XXX this is totally wrong.... we need to add a single cell\n                 *  for each application composed of the status for all\n                 *  monitors\n                 */\n                //for (OnmsLocationMonitor monitor : monitors) {\n                //}\n                String status =\n                    calculateCurrentStatus(monitors,\n                                           application.getMemberServices(),\n                                           mostRecentStatuses);\n\n                String percentage =\n                    calculatePercentageUptime(monitors,\n                                              application.getMemberServices(),\n                                              statusesWithinPeriod,\n                                              startDate, endDate);\n                \n                table.addCell(percentage, status,\n                              createDetailsPageUrl(locationDefinition, application));\n            }\n        }\n        \n        return table;\n    }","id":7595,"modified_method":"public SimpleWebTable createFacilityStatusTable(Date startDate,\n            Date endDate) {\n        SimpleWebTable table = new SimpleWebTable();\n        \n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            m_locationMonitorDao.findAllMonitoringLocationDefinitions();\n\n        Collection<OnmsApplication> applications = m_applicationDao.findAll();\n        if (applications.size() == 0) {\n            throw new IllegalArgumentException(\"there are no applications\");\n        }\n        \n        List<OnmsApplication> sortedApplications =\n            new ArrayList<OnmsApplication>(applications);\n        Collections.sort(sortedApplications,\n                         new Comparator<OnmsApplication>(){\n            public int compare(OnmsApplication o1, OnmsApplication o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            m_locationMonitorDao.getAllMostRecentStatusChanges();\n        \n        Collection<OnmsLocationSpecificStatus> statusesWithinPeriod =\n            m_locationMonitorDao.getStatusChangesBetween(startDate, endDate);\n        \n        Collection<OnmsLocationSpecificStatus> statusesBeforePeriod =\n            m_locationMonitorDao.getAllStatusChangesAt(startDate);\n        \n        Collection<OnmsLocationSpecificStatus> statusesPeriod =\n            new HashSet<OnmsLocationSpecificStatus>();\n        statusesPeriod.addAll(statusesBeforePeriod);\n        statusesPeriod.addAll(statusesWithinPeriod);\n        \n        table.setTitle(\"Distributed Poller Status Summary\");\n        \n        table.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        table.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        for (OnmsApplication application : sortedApplications) {\n            table.addColumn(application.getName(), \"simpleWebTableRowLabel\");\n        }\n        \n        for (OnmsMonitoringLocationDefinition locationDefinition : locationDefinitions) {\n            Collection<OnmsLocationMonitor> monitors =\n                m_locationMonitorDao.findByLocationDefinition(locationDefinition);\n            \n            table.newRow();\n            table.addCell(locationDefinition.getArea(), \"simpleWebTableRowLabel\");\n            table.addCell(locationDefinition.getName(), \"simpleWebTableRowLabel\");\n            \n            for (OnmsApplication application : sortedApplications) {\n                /*\n                 *  XXX this is totally wrong.... we need to add a single cell\n                 *  for each application composed of the status for all\n                 *  monitors\n                 */\n                //for (OnmsLocationMonitor monitor : monitors) {\n                //}\n                String status =\n                    calculateCurrentStatus(monitors,\n                                           application.getMemberServices(),\n                                           mostRecentStatuses);\n\n                String percentage =\n                    calculatePercentageUptime(monitors,\n                                              application.getMemberServices(),\n                                              statusesPeriod,\n                                              startDate, endDate);\n                \n                table.addCell(percentage, status,\n                              createDetailsPageUrl(locationDefinition, application));\n            }\n        }\n        \n        return table;\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runTestCreateStatusNoLocationMonitor() {\n        //expectEverything();\n        resetEverything();\n        \n        expect(m_applicationDao.findByName(\"Application 2\")).andReturn(m_application2);\n        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);\n        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(Collections.EMPTY_SET);\n        expect(m_pollerConfig.getPackage(\"columbus\")).andReturn(m_pkg);\n        expect(m_pollerConfig.getServiceSelectorForPackage(m_pkg)).andReturn(m_selector);\n        expect(m_monitoredServiceDao.findMatchingServices(m_selector)).andReturn(m_services);\n        \n        //expect(m_categoryDao.findByNode(m_node)).andReturn(null).times(m_application2.getMemberServices().size());\n        \n        replayEverything();\n        SimpleWebTable table =\n            m_service.createStatusTable(m_locationDefinition3.getName(),\n                                        m_application2.getName());\n        \n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 2 from Columbus location\");\n        \n        expectedTable.addColumn(\"Category\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"HTTPS\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Unknown\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        \n        assertTableEquals(expectedTable, table);\n    }","id":7596,"modified_method":"public void runTestCreateStatusNoLocationMonitor() {\n        //expectEverything();\n        resetEverything();\n        \n        expect(m_applicationDao.findByName(\"Application 2\")).andReturn(m_application2);\n        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);\n        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(Collections.EMPTY_SET);\n        //expect(m_pollerConfig.getPackage(\"columbus\")).andReturn(m_pkg);\n        //expect(m_pollerConfig.getServiceSelectorForPackage(m_pkg)).andReturn(m_selector);\n        //expect(m_monitoredServiceDao.findMatchingServices(m_selector)).andReturn(m_services);\n        \n        ThrowableAnticipator ta = new ThrowableAnticipator();\n        ta.anticipate(new IllegalArgumentException(\"No location monitors have registered for location \\\"Columbus\\\"\"));\n        \n        replayEverything();\n        try {\n            SimpleWebTable table =\n                m_service.createStatusTable(m_locationDefinition3.getName(),\n                                            m_application2.getName());\n        } catch (Throwable t) {\n            ta.throwableReceived(t);\n        }\n        ta.verifyAnticipated();\n\n        verifyEverything();\n\n        /*\n        \n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 2 from Columbus location\");\n        \n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"Node 1\", \"Critical\");\n        expectedTable.addCell(\"Node 1\", \"\");\n        expectedTable.addCell(\"HTTPS\", \"\");\n        expectedTable.addCell(\"Unknown\", \"bright\");\n        expectedTable.addCell(\"\", \"\");\n        \n        assertTableEquals(expectedTable, table);\n        */\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runTestCreateFacilityStatusTable() {\n        resetEverything();\n        \n        // No need to shuffle, since this is a list\n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            new LinkedList<OnmsMonitoringLocationDefinition>();\n        locationDefinitions.add(m_locationDefinition1);\n        locationDefinitions.add(m_locationDefinition2);\n        locationDefinitions.add(m_locationDefinition3);\n        \n        List<OnmsApplication> applications =\n            new LinkedList<OnmsApplication>();\n        applications.add(m_application1);\n        applications.add(m_application2);\n        Collections.shuffle(applications);\n        \n        OnmsMonitoredService httpService = findMonitoredService(m_services, m_ip, \"HTTP\");\n        OnmsMonitoredService httpsService = findMonitoredService(m_services, m_ip, \"HTTPS\");\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        \n        Collection<OnmsLocationSpecificStatus> statusChanges =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n\n        Date startDate = new Date(2006 - 1900, 10 - 1, 12, 0, 0, 0);\n        Date endDate = new Date(2006 - 1900, 10 - 1, 13, 0, 0, 0);\n\n        \n        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);\n        expect(m_applicationDao.findAll()).andReturn(applications);\n        expect(m_locationMonitorDao.getAllMostRecentStatusChanges()).andReturn(mostRecentStatuses);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(0))).andReturn(Collections.singleton(m_locationMonitor1_1));\n        Collection<OnmsLocationMonitor> monitors2 = new HashSet<OnmsLocationMonitor>();\n        monitors2.add(m_locationMonitor2_1);\n        monitors2.add(m_locationMonitor2_2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(1))).andReturn(monitors2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(2))).andReturn(Collections.EMPTY_SET);\n        expect(m_locationMonitorDao.getStatusChangesBetween(startDate, endDate)).andReturn(statusChanges);\n\n\n        replayEverything();\n        SimpleWebTable table = m_service.createFacilityStatusTable(startDate,\n                                                                   endDate);\n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed Poller Status Summary\");\n        expectedTable.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 2\", \"simpleWebTableRowLabel\");\n\n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+1\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Durham\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Durham&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Durham&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS OH\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Columbus\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+2\");\n\n        assertTableEquals(expectedTable, table);\n    }","id":7597,"modified_method":"public void runTestCreateFacilityStatusTable() {\n        resetEverything();\n        \n        // No need to shuffle, since this is a list\n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            new LinkedList<OnmsMonitoringLocationDefinition>();\n        locationDefinitions.add(m_locationDefinition1);\n        locationDefinitions.add(m_locationDefinition2);\n        locationDefinitions.add(m_locationDefinition3);\n        \n        List<OnmsApplication> applications =\n            new LinkedList<OnmsApplication>();\n        applications.add(m_application1);\n        applications.add(m_application2);\n        Collections.shuffle(applications);\n        \n        OnmsMonitoredService httpService = findMonitoredService(m_services, m_ip, \"HTTP\");\n        OnmsMonitoredService httpsService = findMonitoredService(m_services, m_ip, \"HTTPS\");\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        \n        Collection<OnmsLocationSpecificStatus> statusChanges =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n\n        Date startDate = new Date(2006 - 1900, 10 - 1, 12, 0, 0, 0);\n        Date endDate = new Date(2006 - 1900, 10 - 1, 13, 0, 0, 0);\n\n        \n        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);\n        expect(m_applicationDao.findAll()).andReturn(applications);\n        expect(m_locationMonitorDao.getAllMostRecentStatusChanges()).andReturn(mostRecentStatuses);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(0))).andReturn(Collections.singleton(m_locationMonitor1_1));\n        Collection<OnmsLocationMonitor> monitors2 = new HashSet<OnmsLocationMonitor>();\n        monitors2.add(m_locationMonitor2_1);\n        monitors2.add(m_locationMonitor2_2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(1))).andReturn(monitors2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(2))).andReturn(Collections.EMPTY_SET);\n        expect(m_locationMonitorDao.getStatusChangesBetween(startDate, endDate)).andReturn(statusChanges);\n        expect(m_locationMonitorDao.getAllStatusChangesAt(startDate)).andReturn(Collections.EMPTY_SET);\n\n\n        replayEverything();\n        SimpleWebTable table = m_service.createFacilityStatusTable(startDate,\n                                                                   endDate);\n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed Poller Status Summary\");\n        expectedTable.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 2\", \"simpleWebTableRowLabel\");\n\n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+1\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Durham\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Durham&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Durham&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS OH\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Columbus\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+2\");\n\n        assertTableEquals(expectedTable, table);\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runTestCreateStatus() {\n        expectEverything();\n        \n        replayEverything();\n        SimpleWebTable table =\n            m_service.createStatusTable(m_locationDefinition1.getName(),\n                                        m_application1.getName());\n        \n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 1 from Raleigh location\");\n        \n        expectedTable.addColumn(\"Category\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh-null\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"HTTP\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Up\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.newRow();\n        \n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh-null\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"HTTPS\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Unknown\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        \n        assertTableEquals(expectedTable, table);\n    }","id":7598,"modified_method":"public void runTestCreateStatus() {\n        expectEverything();\n        \n        replayEverything();\n        SimpleWebTable table =\n            m_service.createStatusTable(m_locationDefinition1.getName(),\n                                        m_application1.getName());\n        \n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 1 from Raleigh location\");\n        \n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"Node 1\", \"Normal\");\n        expectedTable.addCell(\"Raleigh-null\", \"\");\n        expectedTable.addCell(\"HTTP\", \"\");\n        expectedTable.addCell(\"Up\", \"bright\");\n        expectedTable.addCell(\"\", \"\");\n        expectedTable.newRow();\n        \n        expectedTable.addCell(\"Node 1\", \"Critical\");\n        expectedTable.addCell(\"Raleigh-null\", \"\");\n        expectedTable.addCell(\"HTTPS\", \"\");\n        expectedTable.addCell(\"Unknown\", \"bright\");\n        expectedTable.addCell(\"\", \"\");\n        \n        assertTableEquals(expectedTable, table);\n    }","commit_id":"e5c1113616bef70bcd9a1153992beed15ef726c6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SimpleWebTable createStatusTable(String locationName, String applicationLabel) {\n        List<OnmsLocationSpecificStatus> status =\n            findLocationSpecificStatus(locationName, applicationLabel);\n        \n        SimpleWebTable table = new SimpleWebTable();\n        \n        table.setTitle(\"Distributed poller view for \" + applicationLabel + \" from \" + locationName + \" location\");\n        \n        table.addColumn(\"Node\", \"simpleWebTableHeader\");\n        table.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        table.addColumn(\"Service\", \"simpleWebTableHeader\");\n        table.addColumn(\"Status\", \"simpleWebTableHeader\");\n        table.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        for (OnmsLocationSpecificStatus s : status) {\n            OnmsNode node = s.getMonitoredService().getIpInterface().getNode();\n            \n            table.newRow();\n            table.addCell(node.getLabel(), \"simpleWebTableRowLabel\");\n            table.addCell(s.getLocationMonitor().getDefinitionName() + \"-\"\n                          + s.getLocationMonitor().getId(),\n                          \"simpleWebTableRowLabel\");\n            table.addCell(s.getMonitoredService().getServiceName(),\n            \"simpleWebTableRowLabel\");\n            table.addCell(s.getPollResult().getStatusName(),\n                          \"simpleWebTableRowLabel\");\n            long responseTime = s.getPollResult().getResponseTime(); \n            if (responseTime >= 0) {\n                table.addCell(responseTime + \"ms\", \"simpleWebTableRowLabel\");\n            } else {\n                table.addCell(\"\", \"simpleWebTableRowLabel\");\n            }\n        }\n        \n        return table;\n    }","id":7599,"modified_method":"public SimpleWebTable createStatusTable(String locationName, String applicationLabel) {\n        List<OnmsLocationSpecificStatus> status =\n            findLocationSpecificStatus(locationName, applicationLabel);\n        \n        SimpleWebTable table = new SimpleWebTable();\n        \n        table.setTitle(\"Distributed poller view for \" + applicationLabel + \" from \" + locationName + \" location\");\n        \n        table.addColumn(\"Node\", \"simpleWebTableHeader\");\n        table.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        table.addColumn(\"Service\", \"simpleWebTableHeader\");\n        table.addColumn(\"Status\", \"simpleWebTableHeader\");\n        table.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        for (OnmsLocationSpecificStatus s : status) {\n            OnmsNode node = s.getMonitoredService().getIpInterface().getNode();\n            \n            table.newRow();\n            table.addCell(node.getLabel(), \n                          getStyleForPollResult(s.getPollResult()));\n\n            table.addCell(s.getLocationMonitor().getDefinitionName() + \"-\"\n                          + s.getLocationMonitor().getId(),\n                          \"\");\n            table.addCell(s.getMonitoredService().getServiceName(), \"\");\n            table.addCell(s.getPollResult().getStatusName(),\n                          \"bright\");\n            long responseTime = s.getPollResult().getResponseTime(); \n            if (responseTime >= 0) {\n                table.addCell(responseTime + \"ms\", \"\");\n            } else {\n                table.addCell(\"\", \"\");\n            }\n        }\n        \n        return table;\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SimpleWebTable createFacilityStatusTable(Date startDate,\n            Date endDate) {\n        SimpleWebTable table = new SimpleWebTable();\n        \n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            m_locationMonitorDao.findAllMonitoringLocationDefinitions();\n\n        Collection<OnmsApplication> applications = m_applicationDao.findAll();\n        if (applications.size() == 0) {\n            throw new IllegalArgumentException(\"there are no applications\");\n        }\n        \n        List<OnmsApplication> sortedApplications =\n            new ArrayList<OnmsApplication>(applications);\n        Collections.sort(sortedApplications,\n                         new Comparator<OnmsApplication>(){\n            public int compare(OnmsApplication o1, OnmsApplication o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            m_locationMonitorDao.getAllMostRecentStatusChanges();\n        \n        Collection<OnmsLocationSpecificStatus> statusesWithinPeriod =\n            m_locationMonitorDao.getStatusChangesBetween(startDate, endDate);\n\n        \n        table.setTitle(\"Distributed Poller Status Summary\");\n        \n        table.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        table.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        for (OnmsApplication application : sortedApplications) {\n            table.addColumn(application.getName(), \"simpleWebTableRowLabel\");\n        }\n        \n        for (OnmsMonitoringLocationDefinition locationDefinition : locationDefinitions) {\n            Collection<OnmsLocationMonitor> monitors =\n                m_locationMonitorDao.findByLocationDefinition(locationDefinition);\n            \n            table.newRow();\n            table.addCell(locationDefinition.getArea(), \"simpleWebTableRowLabel\");\n            table.addCell(locationDefinition.getName(), \"simpleWebTableRowLabel\");\n            \n            for (OnmsApplication application : sortedApplications) {\n                /*\n                 *  XXX this is totally wrong.... we need to add a single cell\n                 *  for each application composed of the status for all\n                 *  monitors\n                 */\n                //for (OnmsLocationMonitor monitor : monitors) {\n                //}\n                String status =\n                    calculateCurrentStatus(monitors,\n                                           application.getMemberServices(),\n                                           mostRecentStatuses);\n\n                String percentage =\n                    calculatePercentageUptime(monitors,\n                                              application.getMemberServices(),\n                                              statusesWithinPeriod,\n                                              startDate, endDate);\n                \n                table.addCell(percentage, status,\n                              createDetailsPageUrl(locationDefinition, application));\n            }\n        }\n        \n        return table;\n    }","id":7600,"modified_method":"public SimpleWebTable createFacilityStatusTable(Date startDate,\n            Date endDate) {\n        SimpleWebTable table = new SimpleWebTable();\n        \n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            m_locationMonitorDao.findAllMonitoringLocationDefinitions();\n\n        Collection<OnmsApplication> applications = m_applicationDao.findAll();\n        if (applications.size() == 0) {\n            throw new IllegalArgumentException(\"there are no applications\");\n        }\n        \n        List<OnmsApplication> sortedApplications =\n            new ArrayList<OnmsApplication>(applications);\n        Collections.sort(sortedApplications,\n                         new Comparator<OnmsApplication>(){\n            public int compare(OnmsApplication o1, OnmsApplication o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            m_locationMonitorDao.getAllMostRecentStatusChanges();\n        \n        Collection<OnmsLocationSpecificStatus> statusesWithinPeriod =\n            m_locationMonitorDao.getStatusChangesBetween(startDate, endDate);\n        \n        Collection<OnmsLocationSpecificStatus> statusesBeforePeriod =\n            m_locationMonitorDao.getAllStatusChangesAt(startDate);\n        \n        Collection<OnmsLocationSpecificStatus> statusesPeriod =\n            new HashSet<OnmsLocationSpecificStatus>();\n        statusesPeriod.addAll(statusesBeforePeriod);\n        statusesPeriod.addAll(statusesWithinPeriod);\n        \n        table.setTitle(\"Distributed Poller Status Summary\");\n        \n        table.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        table.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        for (OnmsApplication application : sortedApplications) {\n            table.addColumn(application.getName(), \"simpleWebTableRowLabel\");\n        }\n        \n        for (OnmsMonitoringLocationDefinition locationDefinition : locationDefinitions) {\n            Collection<OnmsLocationMonitor> monitors =\n                m_locationMonitorDao.findByLocationDefinition(locationDefinition);\n            \n            table.newRow();\n            table.addCell(locationDefinition.getArea(), \"simpleWebTableRowLabel\");\n            table.addCell(locationDefinition.getName(), \"simpleWebTableRowLabel\");\n            \n            for (OnmsApplication application : sortedApplications) {\n                /*\n                 *  XXX this is totally wrong.... we need to add a single cell\n                 *  for each application composed of the status for all\n                 *  monitors\n                 */\n                //for (OnmsLocationMonitor monitor : monitors) {\n                //}\n                String status =\n                    calculateCurrentStatus(monitors,\n                                           application.getMemberServices(),\n                                           mostRecentStatuses);\n\n                String percentage =\n                    calculatePercentageUptime(monitors,\n                                              application.getMemberServices(),\n                                              statusesPeriod,\n                                              startDate, endDate);\n                \n                table.addCell(percentage, status,\n                              createDetailsPageUrl(locationDefinition, application));\n            }\n        }\n        \n        return table;\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<OnmsLocationSpecificStatus> findLocationSpecificStatus(String locationName, String applicationName) {\n        if (locationName == null) {\n            throw new IllegalArgumentException(\"locationName cannot be null\");\n        }\n        \n        if (applicationName == null) {\n            throw new IllegalArgumentException(\"applicationLabel cannot be null\");\n        }\n        \n        OnmsMonitoringLocationDefinition location =\n            m_locationMonitorDao.findMonitoringLocationDefinition(locationName);\n        if (location == null) {\n            throw new IllegalArgumentException(\"Could not find location for \"\n                                               + \"location name \\\"\"\n                                               + locationName + \"\\\"\");\n        }\n        \n        OnmsApplication application =\n            m_applicationDao.findByName(applicationName);\n        if (application == null) {\n            throw new IllegalArgumentException(\"Could not find application \"\n                                               + \"for application name \\\"\"\n                                               + applicationName + \"\\\"\");\n        }\n\n        Collection<OnmsLocationMonitor> locationMonitors =\n            m_locationMonitorDao.findByLocationDefinition(location);\n\n        Package pkg = m_pollerConfig.getPackage(location.getPollingPackageName());\n\n        ServiceSelector selector =\n            m_pollerConfig.getServiceSelectorForPackage(pkg);\n        \n        Collection<OnmsMonitoredService> services =\n            m_monitoredServiceDao.findMatchingServices(selector);\n        \n        Set<OnmsMonitoredService> applicationServices = application.getMemberServices();\n        services.retainAll(applicationServices);\n\n        List<OnmsLocationSpecificStatus> status = new LinkedList<OnmsLocationSpecificStatus>();\n        \n        List<OnmsMonitoredService> sortedServices = new ArrayList<OnmsMonitoredService>(services);\n        Collections.sort(sortedServices, new Comparator<OnmsMonitoredService>() {\n            public int compare(OnmsMonitoredService o1, OnmsMonitoredService o2) {\n                return o1.getServiceName().compareTo(o2.getServiceName());\n            }\n        });\n                                                                     \n        for (OnmsMonitoredService service : sortedServices) {\n            // XXX this is a hack, we need to compute aggregate values for all monitors\n            for (OnmsLocationMonitor locationMonitor : locationMonitors) {\n                if (locationMonitor == null) {\n                    status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"Distributed poller has never reported for this location\")));\n                } else {\n                    OnmsLocationSpecificStatus currentStatus = m_locationMonitorDao.getMostRecentStatusChange(locationMonitor, service);\n                    if (currentStatus == null) {\n                        status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"No status recorded for this service from this location\")));\n                    } else {\n                        status.add(currentStatus);\n                    }\n                }\n            }\n        }\n        \n        \n\n        return status;\n    }","id":7601,"modified_method":"protected List<OnmsLocationSpecificStatus> findLocationSpecificStatus(String locationName, String applicationName) {\n        if (locationName == null) {\n            throw new IllegalArgumentException(\"locationName cannot be null\");\n        }\n        \n        if (applicationName == null) {\n            throw new IllegalArgumentException(\"applicationLabel cannot be null\");\n        }\n        \n        OnmsMonitoringLocationDefinition location =\n            m_locationMonitorDao.findMonitoringLocationDefinition(locationName);\n        if (location == null) {\n            throw new IllegalArgumentException(\"Could not find location for \"\n                                               + \"location name \\\"\"\n                                               + locationName + \"\\\"\");\n        }\n        \n        OnmsApplication application =\n            m_applicationDao.findByName(applicationName);\n        if (application == null) {\n            throw new IllegalArgumentException(\"Could not find application \"\n                                               + \"for application name \\\"\"\n                                               + applicationName + \"\\\"\");\n        }\n\n        Collection<OnmsLocationMonitor> locationMonitors =\n            m_locationMonitorDao.findByLocationDefinition(location);\n        \n        if (locationMonitors.size() == 0) {\n            throw new IllegalArgumentException(\"No location monitors have \"\n                                               + \"registered for location \\\"\"\n                                               + location.getName() + \"\\\"\");\n        }\n\n        Package pkg = m_pollerConfig.getPackage(location.getPollingPackageName());\n\n        ServiceSelector selector =\n            m_pollerConfig.getServiceSelectorForPackage(pkg);\n        \n        Collection<OnmsMonitoredService> services =\n            m_monitoredServiceDao.findMatchingServices(selector);\n        \n        Set<OnmsMonitoredService> applicationServices = application.getMemberServices();\n        services.retainAll(applicationServices);\n\n        List<OnmsLocationSpecificStatus> status = new LinkedList<OnmsLocationSpecificStatus>();\n        \n        List<OnmsMonitoredService> sortedServices = new ArrayList<OnmsMonitoredService>(services);\n        Collections.sort(sortedServices, new Comparator<OnmsMonitoredService>() {\n            public int compare(OnmsMonitoredService o1, OnmsMonitoredService o2) {\n                return o1.getServiceName().compareTo(o2.getServiceName());\n            }\n        });\n                                                                     \n        for (OnmsMonitoredService service : sortedServices) {\n            for (OnmsLocationMonitor locationMonitor : locationMonitors) {\n                if (locationMonitor == null) {\n                    status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"Distributed poller has never reported for this location\")));\n                } else {\n                    OnmsLocationSpecificStatus currentStatus = m_locationMonitorDao.getMostRecentStatusChange(locationMonitor, service);\n                    if (currentStatus == null) {\n                        status.add(new OnmsLocationSpecificStatus(locationMonitor, service, PollStatus.unknown(\"No status recorded for this service from this location\")));\n                    } else {\n                        status.add(currentStatus);\n                    }\n                }\n            }\n        }\n\n        return status;\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Calculate the percentage of time that all services are up for this\n     * application on this remote monitor.\n     * \n     * @param monitor remote monitor to report on\n     * @param applicationServices services to report on\n     * @param startDate start date.  The report starts on this date.\n     * @param endDate end date.  The report ends the last millisecond prior\n     * this date.\n     * @return representation of the percentage uptime out to three decimal places\n     */\n    public String calculatePercentageUptime(\n            Collection<OnmsLocationMonitor> monitors,\n            Set<OnmsMonitoredService> applicationServices,\n            Collection<OnmsLocationSpecificStatus> statuses,\n            Date startDate, Date endDate) {\n        /*\n         * The methodology is as such:\n         * 1) Sort the status entries by their timestamp;\n         * 2) Create a Map of each monitored service with a default\n         *    PollStatus of unknown.\n         * 3) Iterate through the sorted list of status entries until\n         *    we hit a timestamp that is not within our time range or\n         *    run out of entries.\n         *    a) Along the way, update the status Map with the current\n         *       entry's status, and calculate the current status.\n         *    b) If the current timestamp is before the start time, store\n         *       the current status so we can use it once we cross over\n         *       into our time range and then continue.\n         *    c) If the previous status is normal, then count up the number\n         *       of milliseconds since the previous state change entry in\n         *       the time range (or the beginning of the range if this is\n         *       the first entry in within the time range), and add that\n         *       a counter of \"normal\" millseconds.\n         *    d) Finally, save the current date and status for later use.\n         * 4) Perform the same computation in 3c, except count the number\n         *    of milliseconds since the last state change entry (or the\n         *    start time if there were no entries) and the end time, and add\n         *    that to the counter of \"normal\" milliseconds.\n         * 5) Divide the \"normal\" milliseconds counter by the total number\n         *    of milliseconds in our time range and compute and return a\n         *    percentage.\n         */\n        \n        List<OnmsLocationSpecificStatus> sortedStatuses =\n            new ArrayList<OnmsLocationSpecificStatus>(statuses);\n        Collections.sort(sortedStatuses, new Comparator<OnmsLocationSpecificStatus>(){\n            public int compare(OnmsLocationSpecificStatus o1, OnmsLocationSpecificStatus o2) {\n                return o1.getPollResult().getTimestamp().compareTo(o2.getPollResult().getTimestamp());\n            }\n        });\n\n        HashMap<OnmsMonitoredService,PollStatus> serviceStatus =\n            new HashMap<OnmsMonitoredService,PollStatus>();\n        for (OnmsMonitoredService service : applicationServices) {\n            serviceStatus.put(service, PollStatus.unknown(\"No history for this service from this location\"));\n        }\n        \n        float normalMilliseconds = 0f;\n        \n        Date lastDate = startDate;\n        String lastStatus = \"Critical\";\n        \n        for (OnmsLocationSpecificStatus status : sortedStatuses) {\n            if (!monitors.contains(status.getLocationMonitor())) {\n                continue;\n            }\n\n            Date currentDate = status.getPollResult().getTimestamp();\n\n            if (!currentDate.before(endDate)) {\n                // We're at or past the end date, so we're done processing\n                break;\n            }\n            \n            serviceStatus.put(status.getMonitoredService(), status.getPollResult());\n            String currentStatus = calculateStatus(serviceStatus.values());\n            \n            if (currentDate.before(startDate)) {\n                /*\n                 * We're not yet to a date that is inside our time period, so\n                 * we don't need to check the status and adjust the\n                 * normalMilliseconds variable, but we do need to save the\n                 * status so we have an up-to-date status when we cross the\n                 * start date.\n                 */\n                lastStatus = currentStatus;\n                continue;\n            }\n            \n            /*\n             * Because we *just* had a state change, we want to look at the\n             * value of the *last* status.\n             */\n            if (\"Normal\".equals(lastStatus)) {\n                long milliseconds = currentDate.getTime() - lastDate.getTime();\n                normalMilliseconds += milliseconds;\n            }\n            \n            lastDate = currentDate;\n            lastStatus = currentStatus;\n        }\n        \n        if (\"Normal\".equals(lastStatus)) {\n            long milliseconds = endDate.getTime() - lastDate.getTime();\n            normalMilliseconds += milliseconds;\n        }\n\n        float percentage = normalMilliseconds /\n            (endDate.getTime() - startDate.getTime()) * 100;\n        return new DecimalFormat(\"0.000\").format((double) percentage) + \"%\";\n    }","id":7602,"modified_method":"/**\n     * Calculate the percentage of time that all services are up for this\n     * application on this remote monitor.\n     * \n     * @param monitor remote monitor to report on\n     * @param applicationServices services to report on\n     * @param startDate start date.  The report starts on this date.\n     * @param endDate end date.  The report ends the last millisecond prior\n     * this date.\n     * @return representation of the percentage uptime out to three decimal places\n     */\n    public String calculatePercentageUptime(\n            Collection<OnmsLocationMonitor> monitors,\n            Set<OnmsMonitoredService> applicationServices,\n            Collection<OnmsLocationSpecificStatus> statuses,\n            Date startDate, Date endDate) {\n        /*\n         * The methodology is as such:\n         * 1) Sort the status entries by their timestamp;\n         * 2) Create a Map of each monitored service with a default\n         *    PollStatus of unknown.\n         * 3) Iterate through the sorted list of status entries until\n         *    we hit a timestamp that is not within our time range or\n         *    run out of entries.\n         *    a) Along the way, update the status Map with the current\n         *       entry's status, and calculate the current status.\n         *    b) If the current timestamp is before the start time, store\n         *       the current status so we can use it once we cross over\n         *       into our time range and then continue.\n         *    c) If the previous status is normal, then count up the number\n         *       of milliseconds since the previous state change entry in\n         *       the time range (or the beginning of the range if this is\n         *       the first entry in within the time range), and add that\n         *       a counter of \"normal\" millseconds.\n         *    d) Finally, save the current date and status for later use.\n         * 4) Perform the same computation in 3c, except count the number\n         *    of milliseconds since the last state change entry (or the\n         *    start time if there were no entries) and the end time, and add\n         *    that to the counter of \"normal\" milliseconds.\n         * 5) Divide the \"normal\" milliseconds counter by the total number\n         *    of milliseconds in our time range and compute and return a\n         *    percentage.\n         */\n        \n        List<OnmsLocationSpecificStatus> sortedStatuses =\n            new ArrayList<OnmsLocationSpecificStatus>(statuses);\n        Collections.sort(sortedStatuses, new Comparator<OnmsLocationSpecificStatus>(){\n            public int compare(OnmsLocationSpecificStatus o1, OnmsLocationSpecificStatus o2) {\n                return o1.getPollResult().getTimestamp().compareTo(o2.getPollResult().getTimestamp());\n            }\n        });\n\n        HashMap<OnmsMonitoredService,PollStatus> serviceStatus =\n            new HashMap<OnmsMonitoredService,PollStatus>();\n        for (OnmsMonitoredService service : applicationServices) {\n            serviceStatus.put(service, PollStatus.unknown(\"No history for this service from this location\"));\n        }\n        \n        float normalMilliseconds = 0f;\n        \n        Date lastDate = startDate;\n        String lastStatus = \"Critical\";\n        \n        for (OnmsLocationSpecificStatus status : sortedStatuses) {\n            if (!monitors.contains(status.getLocationMonitor())) {\n                System.out.println(\"monitor \" + status.getLocationMonitor()\n                                   + \" not in monitors list\");\n                continue;\n            }\n            \n            if (!applicationServices.contains(status.getMonitoredService())) {\n                System.out.println(\"service \" + status.getMonitoredService()\n                                   + \" not in monitored service list\");\n                continue;\n            }\n\n            Date currentDate = status.getPollResult().getTimestamp();\n\n            if (!currentDate.before(endDate)) {\n                System.out.println(\"at or past end date \" + endDate + \" at \"\n                                   + currentDate);\n                // We're at or past the end date, so we're done processing\n                break;\n            }\n            \n            serviceStatus.put(status.getMonitoredService(), status.getPollResult());\n            String currentStatus = calculateStatus(serviceStatus.values());\n            \n            if (currentDate.before(startDate)) {\n                System.out.println(\"before start date \" + startDate + \" at \"\n                                   + currentDate + \" with status \"\n                                   + currentStatus + \" after status of \"\n                                   + status.getPollResult());\n                /*\n                 * We're not yet to a date that is inside our time period, so\n                 * we don't need to check the status and adjust the\n                 * normalMilliseconds variable, but we do need to save the\n                 * status so we have an up-to-date status when we cross the\n                 * start date.\n                 */\n                lastStatus = currentStatus;\n                continue;\n            }\n            \n            /*\n             * Because we *just* had a state change, we want to look at the\n             * value of the *last* status.\n             */\n            if (\"Normal\".equals(lastStatus)) {\n                long milliseconds = currentDate.getTime() - lastDate.getTime();\n                normalMilliseconds += milliseconds;\n            }\n            \n            lastDate = currentDate;\n            lastStatus = currentStatus;\n        }\n        \n        if (\"Normal\".equals(lastStatus)) {\n            long milliseconds = endDate.getTime() - lastDate.getTime();\n            normalMilliseconds += milliseconds;\n        }\n\n        float percentage = normalMilliseconds /\n            (endDate.getTime() - startDate.getTime()) * 100;\n        return new DecimalFormat(\"0.000\").format((double) percentage) + \"%\";\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runTestCreateFacilityStatusTable() {\n        resetEverything();\n        \n        // No need to shuffle, since this is a list\n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            new LinkedList<OnmsMonitoringLocationDefinition>();\n        locationDefinitions.add(m_locationDefinition1);\n        locationDefinitions.add(m_locationDefinition2);\n        locationDefinitions.add(m_locationDefinition3);\n        \n        List<OnmsApplication> applications =\n            new LinkedList<OnmsApplication>();\n        applications.add(m_application1);\n        applications.add(m_application2);\n        Collections.shuffle(applications);\n        \n        OnmsMonitoredService httpService = findMonitoredService(m_services, m_ip, \"HTTP\");\n        OnmsMonitoredService httpsService = findMonitoredService(m_services, m_ip, \"HTTPS\");\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        \n        Collection<OnmsLocationSpecificStatus> statusChanges =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n\n        Date startDate = new Date(2006 - 1900, 10 - 1, 12, 0, 0, 0);\n        Date endDate = new Date(2006 - 1900, 10 - 1, 13, 0, 0, 0);\n\n        \n        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);\n        expect(m_applicationDao.findAll()).andReturn(applications);\n        expect(m_locationMonitorDao.getAllMostRecentStatusChanges()).andReturn(mostRecentStatuses);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(0))).andReturn(Collections.singleton(m_locationMonitor1_1));\n        Collection<OnmsLocationMonitor> monitors2 = new HashSet<OnmsLocationMonitor>();\n        monitors2.add(m_locationMonitor2_1);\n        monitors2.add(m_locationMonitor2_2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(1))).andReturn(monitors2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(2))).andReturn(Collections.EMPTY_SET);\n        expect(m_locationMonitorDao.getStatusChangesBetween(startDate, endDate)).andReturn(statusChanges);\n\n\n        replayEverything();\n        SimpleWebTable table = m_service.createFacilityStatusTable(startDate,\n                                                                   endDate);\n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed Poller Status Summary\");\n        expectedTable.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 2\", \"simpleWebTableRowLabel\");\n\n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+1\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Durham\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Durham&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Durham&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS OH\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Columbus\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+2\");\n\n        assertTableEquals(expectedTable, table);\n    }","id":7603,"modified_method":"public void runTestCreateFacilityStatusTable() {\n        resetEverything();\n        \n        // No need to shuffle, since this is a list\n        List<OnmsMonitoringLocationDefinition> locationDefinitions =\n            new LinkedList<OnmsMonitoringLocationDefinition>();\n        locationDefinitions.add(m_locationDefinition1);\n        locationDefinitions.add(m_locationDefinition2);\n        locationDefinitions.add(m_locationDefinition3);\n        \n        List<OnmsApplication> applications =\n            new LinkedList<OnmsApplication>();\n        applications.add(m_application1);\n        applications.add(m_application2);\n        Collections.shuffle(applications);\n        \n        OnmsMonitoredService httpService = findMonitoredService(m_services, m_ip, \"HTTP\");\n        OnmsMonitoredService httpsService = findMonitoredService(m_services, m_ip, \"HTTPS\");\n        \n        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n        \n        Collection<OnmsLocationSpecificStatus> statusChanges =\n            new LinkedList<OnmsLocationSpecificStatus>();\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), \"20061011-00:00:00\"));\n        statusChanges.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), \"20061012-06:00:00\"));\n\n        Date startDate = new Date(2006 - 1900, 10 - 1, 12, 0, 0, 0);\n        Date endDate = new Date(2006 - 1900, 10 - 1, 13, 0, 0, 0);\n\n        \n        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);\n        expect(m_applicationDao.findAll()).andReturn(applications);\n        expect(m_locationMonitorDao.getAllMostRecentStatusChanges()).andReturn(mostRecentStatuses);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(0))).andReturn(Collections.singleton(m_locationMonitor1_1));\n        Collection<OnmsLocationMonitor> monitors2 = new HashSet<OnmsLocationMonitor>();\n        monitors2.add(m_locationMonitor2_1);\n        monitors2.add(m_locationMonitor2_2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(1))).andReturn(monitors2);\n        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(2))).andReturn(Collections.EMPTY_SET);\n        expect(m_locationMonitorDao.getStatusChangesBetween(startDate, endDate)).andReturn(statusChanges);\n        expect(m_locationMonitorDao.getAllStatusChangesAt(startDate)).andReturn(Collections.EMPTY_SET);\n\n\n        replayEverything();\n        SimpleWebTable table = m_service.createFacilityStatusTable(startDate,\n                                                                   endDate);\n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed Poller Status Summary\");\n        expectedTable.addColumn(\"Area\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Location\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addColumn(\"Application 2\", \"simpleWebTableRowLabel\");\n\n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+1\");\n        expectedTable.addCell(\"75.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Raleigh&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS NC\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Durham\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Durham&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Normal\", \"distributedStatusDetails.htm?location=Durham&application=Application+2\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"OpenNMS OH\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Columbus\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+1\");\n        expectedTable.addCell(\"0.000%\", \"Indeterminate\", \"distributedStatusDetails.htm?location=Columbus&application=Application+2\");\n\n        assertTableEquals(expectedTable, table);\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runTestCreateStatusNoLocationMonitor() {\n        //expectEverything();\n        resetEverything();\n        \n        expect(m_applicationDao.findByName(\"Application 2\")).andReturn(m_application2);\n        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);\n        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(Collections.EMPTY_SET);\n        expect(m_pollerConfig.getPackage(\"columbus\")).andReturn(m_pkg);\n        expect(m_pollerConfig.getServiceSelectorForPackage(m_pkg)).andReturn(m_selector);\n        expect(m_monitoredServiceDao.findMatchingServices(m_selector)).andReturn(m_services);\n        \n        //expect(m_categoryDao.findByNode(m_node)).andReturn(null).times(m_application2.getMemberServices().size());\n        \n        replayEverything();\n        SimpleWebTable table =\n            m_service.createStatusTable(m_locationDefinition3.getName(),\n                                        m_application2.getName());\n        \n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 2 from Columbus location\");\n        \n        expectedTable.addColumn(\"Category\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"HTTPS\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Unknown\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        \n        assertTableEquals(expectedTable, table);\n    }","id":7604,"modified_method":"public void runTestCreateStatusNoLocationMonitor() {\n        //expectEverything();\n        resetEverything();\n        \n        expect(m_applicationDao.findByName(\"Application 2\")).andReturn(m_application2);\n        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);\n        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(Collections.EMPTY_SET);\n        //expect(m_pollerConfig.getPackage(\"columbus\")).andReturn(m_pkg);\n        //expect(m_pollerConfig.getServiceSelectorForPackage(m_pkg)).andReturn(m_selector);\n        //expect(m_monitoredServiceDao.findMatchingServices(m_selector)).andReturn(m_services);\n        \n        ThrowableAnticipator ta = new ThrowableAnticipator();\n        ta.anticipate(new IllegalArgumentException(\"No location monitors have registered for location \\\"Columbus\\\"\"));\n        \n        replayEverything();\n        try {\n            SimpleWebTable table =\n                m_service.createStatusTable(m_locationDefinition3.getName(),\n                                            m_application2.getName());\n        } catch (Throwable t) {\n            ta.throwableReceived(t);\n        }\n        ta.verifyAnticipated();\n\n        verifyEverything();\n\n        /*\n        \n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 2 from Columbus location\");\n        \n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"Node 1\", \"Critical\");\n        expectedTable.addCell(\"Node 1\", \"\");\n        expectedTable.addCell(\"HTTPS\", \"\");\n        expectedTable.addCell(\"Unknown\", \"bright\");\n        expectedTable.addCell(\"\", \"\");\n        \n        assertTableEquals(expectedTable, table);\n        */\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runTestCreateStatus() {\n        expectEverything();\n        \n        replayEverything();\n        SimpleWebTable table =\n            m_service.createStatusTable(m_locationDefinition1.getName(),\n                                        m_application1.getName());\n        \n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 1 from Raleigh location\");\n        \n        expectedTable.addColumn(\"Category\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh-null\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"HTTP\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Up\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.newRow();\n        \n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Node 1\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Raleigh-null\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"HTTPS\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"Unknown\", \"simpleWebTableRowLabel\");\n        expectedTable.addCell(\"\", \"simpleWebTableRowLabel\");\n        \n        assertTableEquals(expectedTable, table);\n    }","id":7605,"modified_method":"public void runTestCreateStatus() {\n        expectEverything();\n        \n        replayEverything();\n        SimpleWebTable table =\n            m_service.createStatusTable(m_locationDefinition1.getName(),\n                                        m_application1.getName());\n        \n        verifyEverything();\n        \n        //System.out.print(table.toString());\n        \n        SimpleWebTable expectedTable = new SimpleWebTable();\n        expectedTable.setTitle(\"Distributed poller view for Application 1 from Raleigh location\");\n        \n        expectedTable.addColumn(\"Node\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Monitor\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Service\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Status\", \"simpleWebTableHeader\");\n        expectedTable.addColumn(\"Response Time\", \"simpleWebTableHeader\");\n        \n        expectedTable.newRow();\n        expectedTable.addCell(\"Node 1\", \"Normal\");\n        expectedTable.addCell(\"Raleigh-null\", \"\");\n        expectedTable.addCell(\"HTTP\", \"\");\n        expectedTable.addCell(\"Up\", \"bright\");\n        expectedTable.addCell(\"\", \"\");\n        expectedTable.newRow();\n        \n        expectedTable.addCell(\"Node 1\", \"Critical\");\n        expectedTable.addCell(\"Raleigh-null\", \"\");\n        expectedTable.addCell(\"HTTPS\", \"\");\n        expectedTable.addCell(\"Unknown\", \"bright\");\n        expectedTable.addCell(\"\", \"\");\n        \n        assertTableEquals(expectedTable, table);\n    }","commit_id":"0aed1b2ad3672d3e6e5220905e44b5458bd9a172","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @JUnitTemporaryDatabase(createSchema=false)\n    public void testUpdate() throws Exception {\n        // Make sure there is no databasechangelog table\n        assertFalse(changelogExists());\n\n        Resource aResource = null;\n        for (final Resource resource : getTestResources()) {\n            if (resource.getURI().toString().contains(\"test-api.schema.a\")) {\n                aResource = resource;\n            }\n        }\n\n        Set<String> tables = getTables();\n        assertFalse(\"must not contain table 'schematest'\", tables.contains(\"schematest\"));\n\n        final Migration migration = new Migration();\n        migration.setAdminUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setAdminPassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setDatabaseUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setDatabasePassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setChangeLog(\"changelog.xml\");\n        migration.setAccessor(new ExistingResourceAccessor(aResource));\n\n        LOG.info(\"Running migration on database: {}\", migration);\n\n        final Migrator m = new Migrator();\n        m.setDataSource(m_dataSource);\n        m.setAdminDataSource(m_dataSource);\n        m.setValidateDatabaseVersion(false);\n        m.setCreateUser(false);\n        m.setCreateDatabase(false);\n\n        m.prepareDatabase(migration);\n        m.migrate(migration);\n\n        LOG.info(\"Migration complete: {}\", migration);\n\n        tables = getTables();\n        assertTrue(\"must contain table 'schematest'\", tables.contains(\"schematest\"));\n    }","id":7606,"modified_method":"@Test\n    @JUnitTemporaryDatabase(createSchema=false)\n    public void testUpdate() throws Exception {\n        // Make sure there is no databasechangelog table\n        assertFalse(changelogExists());\n\n        Resource aResource = null;\n        for (final Resource resource : getTestResources()) {\n            URI uri = resource.getURI();\n            if (uri.getScheme().equals(\"file\") && uri.toString().contains(\"test-api/schema/a\")) {\n                aResource = resource;\n            }\n            if (uri.getScheme().equals(\"jar\") && uri.toString().contains(\"test-api.schema.a\")) {\n                aResource = resource;\n            }\n        }\n        assertNotNull(\"aResource must not be null\", aResource);\n\n        Set<String> tables = getTables();\n        assertFalse(\"must not contain table 'schematest'\", tables.contains(\"schematest\"));\n\n        final Migration migration = new Migration();\n        migration.setAdminUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setAdminPassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setDatabaseUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setDatabasePassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setChangeLog(\"changelog.xml\");\n        migration.setAccessor(new ExistingResourceAccessor(aResource));\n\n        LOG.info(\"Running migration on database: {}\", migration);\n\n        final Migrator m = new Migrator();\n        m.setDataSource(m_dataSource);\n        m.setAdminDataSource(m_dataSource);\n        m.setValidateDatabaseVersion(false);\n        m.setCreateUser(false);\n        m.setCreateDatabase(false);\n\n        m.prepareDatabase(migration);\n        m.migrate(migration);\n\n        LOG.info(\"Migration complete: {}\", migration);\n\n        tables = getTables();\n        assertTrue(\"must contain table 'schematest'\", tables.contains(\"schematest\"));\n    }","commit_id":"692717792c230ab79c50e8d410e37660a6c4df1e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<Resource> getTestResources() throws IOException {\n        final List<Resource> resources = new ArrayList<Resource>();\n        for (final Resource resource : m_context.getResources(\"classpath*:/changelog.xml\")) {\n            if (!resource.getURI().toString().contains(\"test-api.schema\")) continue;\n            resources.add(resource);\n        }\n        return resources;\n    }","id":7607,"modified_method":"private List<Resource> getTestResources() throws IOException {\n        final List<Resource> resources = new ArrayList<Resource>();\n        for (final Resource resource : m_context.getResources(\"classpath*:/changelog.xml\")) {\n            URI uri = resource.getURI();\n            if (uri.getScheme().equals(\"file\") && !uri.toString().contains(\"test-api/schema\")) continue;\n            if (uri.getScheme().equals(\"jar\") && !uri.toString().contains(\"test-api.schema\")) continue;\n            resources.add(resource);\n        }\n        return resources;\n    }","commit_id":"692717792c230ab79c50e8d410e37660a6c4df1e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @JUnitTemporaryDatabase(createSchema=false)\n    public void testMultipleChangelogs() throws Exception {\n        assertFalse(changelogExists());\n\n        final Migration migration = new Migration();\n        migration.setAdminUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setAdminPassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setDatabaseUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setDatabasePassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setChangeLog(\"changelog.xml\");\n\n        final Migrator m = new Migrator();\n        m.setDataSource(m_dataSource);\n        m.setAdminDataSource(m_dataSource);\n        m.setValidateDatabaseVersion(false);\n        m.setCreateUser(false);\n        m.setCreateDatabase(false);\n\n        // Add a resource accessor to the migration so that it will load multiple changelog.xml files\n        // from the classpath\n        for (final Resource resource : getTestResources()) {\n            if (!resource.getURI().toString().contains(\"test-api.schema\")) continue;\n            LOG.info(\"=== found resource: {} ===\", resource);\n            migration.setAccessor(new ExistingResourceAccessor(resource));\n            m.migrate(migration);\n        }\n\n        final List<ChangelogEntry> ids = getChangelogEntries();\n\n        assertTrue(ids.size() > 0);\n        assertEquals(\"test-api.schema.a\", ids.get(0).getId());\n        assertEquals(\"test-api.schema.b\", ids.get(1).getId());\n    }","id":7608,"modified_method":"@Test\n    @JUnitTemporaryDatabase(createSchema=false)\n    public void testMultipleChangelogs() throws Exception {\n        assertFalse(changelogExists());\n\n        final Migration migration = new Migration();\n        migration.setAdminUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setAdminPassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setDatabaseUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));\n        migration.setDatabasePassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));\n        migration.setChangeLog(\"changelog.xml\");\n\n        final Migrator m = new Migrator();\n        m.setDataSource(m_dataSource);\n        m.setAdminDataSource(m_dataSource);\n        m.setValidateDatabaseVersion(false);\n        m.setCreateUser(false);\n        m.setCreateDatabase(false);\n\n        // Add a resource accessor to the migration so that it will load multiple changelog.xml files\n        // from the classpath\n        for (final Resource resource : getTestResources()) {\n            URI uri = resource.getURI();\n            if (uri.getScheme().equals(\"jar\") && !uri.toString().contains(\"test-api.schema\")) continue;\n            if (uri.getScheme().equals(\"file\") && !uri.toString().contains(\"test-api/schema\")) continue;\n            LOG.info(\"=== found resource: {} ===\", resource);\n            migration.setAccessor(new ExistingResourceAccessor(resource));\n            m.migrate(migration);\n        }\n\n        final List<ChangelogEntry> ids = getChangelogEntries();\n\n        assertTrue(ids.size() > 0);\n        assertEquals(\"test-api.schema.a\", ids.get(0).getId());\n        assertEquals(\"test-api.schema.b\", ids.get(1).getId());\n    }","commit_id":"692717792c230ab79c50e8d410e37660a6c4df1e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** Sets the number of rows to span this header.\n\t * <p>It is the same as the rowspan attribute of HTML TD tag.\n\t */\n\tpublic void setRowspan(int rowspan) throws WrongValueException {\n\t\tif (rowspan <= 0)\n\t\t\tthrow new WrongValueException(\"Positive only\");\n\t\tif (_rowspan != rowspan) {\n\t\t\t_rowspan = rowspan;\n\t\t\tfinal Execution exec = Executions.getCurrent();\n\t\t\tif (exec != null && exec.isExplorer())\n\t\t\t\tinvalidate();\n\t\t\telse smartUpdate(\"rowspan\", _rowspan);\n\t\t}\n\t}","id":7609,"modified_method":"/** Sets the number of rows to span this header.\n\t * <p>It is the same as the rowspan attribute of HTML TD tag.\n\t */\n\tpublic void setRowspan(int rowspan) throws WrongValueException {\n\t\tif (rowspan <= 0)\n\t\t\tthrow new WrongValueException(\"Positive only\");\n\t\tif (_rowspan != rowspan) {\n\t\t\t_rowspan = rowspan;\n\t\t\tsmartUpdate(\"rowspan\", _rowspan);\n\t\t}\n\t}","commit_id":"ed00e71a1a0507c0fccf3756e107c3c3da85d95e","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the number of columns to span this header.\n\t * <p>It is the same as the colspan attribute of HTML TD tag.\n\t */\n\tpublic void setColspan(int colspan) throws WrongValueException {\n\t\tif (colspan <= 0)\n\t\t\tthrow new WrongValueException(\"Positive only\");\n\t\tif (_colspan != colspan) {\n\t\t\t_colspan = colspan;\n\t\t\tfinal Execution exec = Executions.getCurrent();\n\t\t\tif (exec != null && exec.isExplorer())\n\t\t\t\tinvalidate();\n\t\t\telse smartUpdate(\"colspan\", _colspan);\n\t\t}\n\t}","id":7610,"modified_method":"/** Sets the number of columns to span this header.\n\t * <p>It is the same as the colspan attribute of HTML TD tag.\n\t */\n\tpublic void setColspan(int colspan) throws WrongValueException {\n\t\tif (colspan <= 0)\n\t\t\tthrow new WrongValueException(\"Positive only\");\n\t\tif (_colspan != colspan) {\n\t\t\t_colspan = colspan;\n\t\t\tsmartUpdate(\"colspan\", _colspan);\n\t\t}\n\t}","commit_id":"ed00e71a1a0507c0fccf3756e107c3c3da85d95e","url":"https://github.com/zkoss/zk"},{"original_method":"private Object parse(InputStream is, String path) throws Exception {\n\t\tfinal Element root = new SAXBuilder(true, false, true).build(is).getRootElement();\n\t\tfinal String name = IDOMs.getRequiredAttributeValue(root, \"name\");\n\t\tfinal boolean zk = \"zk\".equals(name);\n\t\tfinal String lang = root.getAttributeValue(\"language\");\n\t\tfinal LanguageDefinition langdef = //optional\n\t\t\tlang != null ? LanguageDefinition.lookup(lang): null;\n\t\tfinal String dir = path.substring(0, path.lastIndexOf('/') + 1);\n\t\tfinal WpdContent wc =\n\t\t\t\"false\".equals(root.getAttributeValue(\"cacheable\")) ?\n\t\t\t\tnew WpdContent(dir): null;\n\n\t\tfinal ByteArrayOutputStream out = new ByteArrayOutputStream(1024*8);\n\t\tif (!zk) {\n\t\t\twrite(out, \"_z='\");\n\t\t\twrite(out, name);\n\t\t\twrite(out, \"';if(!zk.$import(_z)){try{_zkpk=zk.$package(_z);\\n\");\n\t\t}\n\n\t\tfinal Map moldInfos = new HashMap();\n\t\tfor (Iterator it = root.getElements().iterator(); it.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tfinal String elnm = el.getName();\n\t\t\tif (\"widget\".equals(elnm)) {\n\t\t\t\tfinal String depends = el.getAttributeValue(\"depends\");\n\t\t\t\tfinal boolean bDepends = depends != null && depends.length() > 0;\n\t\t\t\tif (bDepends) {\n\t\t\t\t\twrite(out, \"zPkg.load('\");\n\t\t\t\t\twrite(out, depends);\n\t\t\t\t\twrite(out, \"',null,function(){\\n_z='\");\n\t\t\t\t\twrite(out, name);\n\t\t\t\t\twrite(out, \"';_zkpk=zk.$package(_z);\");\n\t\t\t\t}\n\n\t\t\t\tfinal String wgtnm = IDOMs.getRequiredAttributeValue(el, \"name\");\n\t\t\t\tfinal String jspath = wgtnm + \".js\"; //eg: /js/zul/wgt/Div.js\n\t\t\t\tif (!writeResource(out, jspath, dir, false)) {\n\t\t\t\t\tlog.error(\"Failed to load widget \"+wgtnm+\": \"+jspath+\" not found, \"+el.getLocator());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal String wgtflnm = name + \".\" + wgtnm;\n\t\t\t\twrite(out, \"zkreg(_zkwg=\");\n\t\t\t\twrite(out, zk ? \"zk.\": \"_zkpk.\");\n\t\t\t\twrite(out, wgtnm);\n\t\t\t\twrite(out, \",'\");\n\t\t\t\twrite(out, wgtflnm);\n\t\t\t\twrite(out, \"');\");\n\t\t\t\tif (langdef == null || !langdef.hasWidgetDefinition(wgtflnm))\n\t\t\t\t\tcontinue;\n\n\t\t\t\ttry {\n\t\t\t\t\tWidgetDefinition wgtdef = langdef.getWidgetDefinition(wgtflnm);\n\t\t\t\t\tboolean first = true;\n\t\t\t\t\tfor (Iterator e = wgtdef.getMoldNames().iterator(); e.hasNext();) {\n\t\t\t\t\t\tfinal String mold = (String)e.next();\n\t\t\t\t\t\tfinal String uri = wgtdef.getMoldURI(mold);\n\t\t\t\t\t\tif (uri == null) continue;\n\n\t\t\t\t\t\tif (first) {\n\t\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\t\twrite(out, \"_zkmd={};\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\twrite(out, \"_zkmd['\");\n\t\t\t\t\t\twrite(out, mold);\n\t\t\t\t\t\twrite(out, \"']=\");\n\n\t\t\t\t\t\tString[] info = (String[])moldInfos.get(uri);\n\t\t\t\t\t\tif (info != null) { //reuse\n\t\t\t\t\t\t\twrite(out, \"[_zkpk.\");\n\t\t\t\t\t\t\twrite(out, info[0]);\n\t\t\t\t\t\t\twrite(out, \",'\");\n\t\t\t\t\t\t\twrite(out, info[1]);\n\t\t\t\t\t\t\twrite(out, \"'];\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmoldInfos.put(uri, new String[] {wgtnm, mold});\n\t\t\t\t\t\t\tif (!writeResource(out, uri, dir, true)) {\n\t\t\t\t\t\t\t\twrite(out, \"zk.$void;zk.error('\");\n\t\t\t\t\t\t\t\twrite(out, uri);\n\t\t\t\t\t\t\t\twrite(out, \" not found')\");\n\t\t\t\t\t\t\t\tlog.error(\"Failed to load mold \"+mold+\" for widget \"+wgtflnm+\". Cause: \"+uri+\" not found\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twrite(out, ';');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!first) write(out, \"zkmld(_zkwg,_zkmd);\");\n\t\t\t\t} catch (Throwable ex) {\n\t\t\t\t\tlog.error(\"Failed to load molds for widget \"+wgtflnm+\".\\nCause: \"+Exceptions.getMessage(ex));\n\t\t\t\t}\n\n\t\t\t\tif (bDepends)\n\t\t\t\t\twrite(out, \"\\n});\");\n\t\t\t} else if (\"script\".equals(elnm)) {\n\t\t\t\tString jspath = el.getAttributeValue(\"src\");\n\t\t\t\tif (jspath != null && jspath.length() > 0) {\n\t\t\t\t\tif (wc != null && jspath.indexOf('*') >= 0) {\n\t\t\t\t\t\tmove(wc, out);\n\t\t\t\t\t\twc.add(jspath);\n\t\t\t\t\t} else if (!writeResource(out, jspath, dir, true)) {\n\t\t\t\t\t\tlog.error(\"Failed to load script \"+jspath+\", \"+el.getLocator());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tString s = el.getText(true);\n\t\t\t\tif (s != null && s.length() > 0) {\n\t\t\t\t\twrite(out, s);\n\t\t\t\t\twrite(out, '\\n'); //might terminate with //\n\t\t\t\t}\n\t\t\t} else if (\"function\".equals(elnm)) {\n\t\t\t\tfinal String clsnm = IDOMs.getRequiredAttributeValue(el, \"class\");\n\t\t\t\tfinal String mtdnm = IDOMs.getRequiredAttributeValue(el, \"name\");\n\t\t\t\tfinal Class cls;\n\t\t\t\ttry {\n\t\t\t\t\tcls = Classes.forNameByThread(clsnm);\n\t\t\t\t} catch (ClassNotFoundException ex) {\n\t\t\t\t\tlog.error(\"Class not found: \"+clsnm+\", \"+el.getLocator(), ex);\n\t\t\t\t\tcontinue; //to report as many errors as possible\n\t\t\t\t}\n\n\t\t\t\tfinal Method mtd;\n\t\t\t\ttry {\n\t\t\t\t\tmtd = cls.getMethod(mtdnm, new Class[0]);\n\t\t\t\t\tif ((mtd.getModifiers() & Modifier.STATIC) == 0) {\n\t\t\t\t\t\tlog.error(\"Not a static method: \"+mtd);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (NoSuchMethodException ex) {\n\t\t\t\t\tlog.error(\"Method not found in \"+clsnm+\": \"+mtdnm+\" \"+el.getLocator(), ex);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (wc != null) {\n\t\t\t\t\tmove(wc, out);\n\t\t\t\t\twc.add(mtd);\n\t\t\t\t} else {\n\t\t\t\t\twrite(out, mtd);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.warning(\"Unknown element \"+elnm+\", \"+el.getLocator());\n\t\t\t}\n\t\t}\n\t\tif (!zk)\n\t\t\twrite(out, \"\\n}finally{zPkg.end(_z);}}\");\n\n\t\tif (wc != null) {\n\t\t\tmove(wc, out);\n\t\t\treturn wc;\n\t\t}\n\t\treturn out.toByteArray();\n\t}","id":7611,"modified_method":"private Object parse(InputStream is, String path) throws Exception {\n\t\tfinal Element root = new SAXBuilder(true, false, true).build(is).getRootElement();\n\t\tfinal String name = IDOMs.getRequiredAttributeValue(root, \"name\");\n\t\tfinal boolean zk = \"zk\".equals(name);\n\t\tfinal String lang = root.getAttributeValue(\"language\");\n\t\tfinal LanguageDefinition langdef = //optional\n\t\t\tlang != null ? LanguageDefinition.lookup(lang): null;\n\t\tfinal String dir = path.substring(0, path.lastIndexOf('/') + 1);\n\t\tfinal WpdContent wc =\n\t\t\t\"false\".equals(root.getAttributeValue(\"cacheable\")) ?\n\t\t\t\tnew WpdContent(dir): null;\n\n\t\tfinal ByteArrayOutputStream out = new ByteArrayOutputStream(1024*8);\n\t\tString depends = null;\n\t\tif (!zk) {\n\t\t\twrite(out, \"_z='\");\n\t\t\twrite(out, name);\n\t\t\twrite(out, \"';try{_zkpk=zk.$package(_z);\\n\");\n\n\t\t\tdepends = root.getAttributeValue(\"depends\");\n\t\t\tif (depends != null)\n\t\t\t\tif (depends.length() == 0) {\n\t\t\t\t\tdepends = null;\n\t\t\t\t} else if (depends != null) {\n\t\t\t\t\twrite(out, \"zPkg.load('\");\n\t\t\t\t\twrite(out, depends);\n\t\t\t\t\twrite(out, \"',null,function(){\\n_zkpk=\");\n\t\t\t\t\twrite(out, name);\n\t\t\t\t\twrite(out, \";\\n\");\n\t\t\t\t}\n\t\t}\n\n\t\tfinal Map moldInfos = new HashMap();\n\t\tfor (Iterator it = root.getElements().iterator(); it.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tfinal String elnm = el.getName();\n\t\t\tif (\"widget\".equals(elnm)) {\n\t\t\t\tfinal String wgtnm = IDOMs.getRequiredAttributeValue(el, \"name\");\n\t\t\t\tfinal String jspath = wgtnm + \".js\"; //eg: /js/zul/wgt/Div.js\n\t\t\t\tif (!writeResource(out, jspath, dir, false)) {\n\t\t\t\t\tlog.error(\"Failed to load widget \"+wgtnm+\": \"+jspath+\" not found, \"+el.getLocator());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal String wgtflnm = name + \".\" + wgtnm;\n\t\t\t\twrite(out, \"zkreg(_zkwg=\");\n\t\t\t\twrite(out, zk ? \"zk.\": \"_zkpk.\");\n\t\t\t\twrite(out, wgtnm);\n\t\t\t\twrite(out, \",'\");\n\t\t\t\twrite(out, wgtflnm);\n\t\t\t\twrite(out, \"');\");\n\t\t\t\tif (langdef == null || !langdef.hasWidgetDefinition(wgtflnm))\n\t\t\t\t\tcontinue;\n\n\t\t\t\ttry {\n\t\t\t\t\tWidgetDefinition wgtdef = langdef.getWidgetDefinition(wgtflnm);\n\t\t\t\t\tboolean first = true;\n\t\t\t\t\tfor (Iterator e = wgtdef.getMoldNames().iterator(); e.hasNext();) {\n\t\t\t\t\t\tfinal String mold = (String)e.next();\n\t\t\t\t\t\tfinal String uri = wgtdef.getMoldURI(mold);\n\t\t\t\t\t\tif (uri == null) continue;\n\n\t\t\t\t\t\tif (first) {\n\t\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\t\twrite(out, \"_zkmd={};\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\twrite(out, \"_zkmd['\");\n\t\t\t\t\t\twrite(out, mold);\n\t\t\t\t\t\twrite(out, \"']=\");\n\n\t\t\t\t\t\tString[] info = (String[])moldInfos.get(uri);\n\t\t\t\t\t\tif (info != null) { //reuse\n\t\t\t\t\t\t\twrite(out, \"[_zkpk.\");\n\t\t\t\t\t\t\twrite(out, info[0]);\n\t\t\t\t\t\t\twrite(out, \",'\");\n\t\t\t\t\t\t\twrite(out, info[1]);\n\t\t\t\t\t\t\twrite(out, \"'];\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmoldInfos.put(uri, new String[] {wgtnm, mold});\n\t\t\t\t\t\t\tif (!writeResource(out, uri, dir, true)) {\n\t\t\t\t\t\t\t\twrite(out, \"zk.$void;zk.error('\");\n\t\t\t\t\t\t\t\twrite(out, uri);\n\t\t\t\t\t\t\t\twrite(out, \" not found')\");\n\t\t\t\t\t\t\t\tlog.error(\"Failed to load mold \"+mold+\" for widget \"+wgtflnm+\". Cause: \"+uri+\" not found\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twrite(out, ';');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!first) write(out, \"zkmld(_zkwg,_zkmd);\");\n\t\t\t\t} catch (Throwable ex) {\n\t\t\t\t\tlog.error(\"Failed to load molds for widget \"+wgtflnm+\".\\nCause: \"+Exceptions.getMessage(ex));\n\t\t\t\t}\n\t\t\t} else if (\"script\".equals(elnm)) {\n\t\t\t\tString jspath = el.getAttributeValue(\"src\");\n\t\t\t\tif (jspath != null && jspath.length() > 0) {\n\t\t\t\t\tif (wc != null && jspath.indexOf('*') >= 0) {\n\t\t\t\t\t\tmove(wc, out);\n\t\t\t\t\t\twc.add(jspath);\n\t\t\t\t\t} else if (!writeResource(out, jspath, dir, true)) {\n\t\t\t\t\t\tlog.error(\"Failed to load script \"+jspath+\", \"+el.getLocator());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tString s = el.getText(true);\n\t\t\t\tif (s != null && s.length() > 0) {\n\t\t\t\t\twrite(out, s);\n\t\t\t\t\twrite(out, '\\n'); //might terminate with //\n\t\t\t\t}\n\t\t\t} else if (\"function\".equals(elnm)) {\n\t\t\t\tfinal String clsnm = IDOMs.getRequiredAttributeValue(el, \"class\");\n\t\t\t\tfinal String mtdnm = IDOMs.getRequiredAttributeValue(el, \"name\");\n\t\t\t\tfinal Class cls;\n\t\t\t\ttry {\n\t\t\t\t\tcls = Classes.forNameByThread(clsnm);\n\t\t\t\t} catch (ClassNotFoundException ex) {\n\t\t\t\t\tlog.error(\"Class not found: \"+clsnm+\", \"+el.getLocator(), ex);\n\t\t\t\t\tcontinue; //to report as many errors as possible\n\t\t\t\t}\n\n\t\t\t\tfinal Method mtd;\n\t\t\t\ttry {\n\t\t\t\t\tmtd = cls.getMethod(mtdnm, new Class[0]);\n\t\t\t\t\tif ((mtd.getModifiers() & Modifier.STATIC) == 0) {\n\t\t\t\t\t\tlog.error(\"Not a static method: \"+mtd);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (NoSuchMethodException ex) {\n\t\t\t\t\tlog.error(\"Method not found in \"+clsnm+\": \"+mtdnm+\" \"+el.getLocator(), ex);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (wc != null) {\n\t\t\t\t\tmove(wc, out);\n\t\t\t\t\twc.add(mtd);\n\t\t\t\t} else {\n\t\t\t\t\twrite(out, mtd);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.warning(\"Unknown element \"+elnm+\", \"+el.getLocator());\n\t\t\t}\n\t\t}\n\t\tif (!zk) {\n\t\t\tif (depends != null)\n\t\t\t\twrite(out, \"\\n});\");\n\t\t\twrite(out, \"\\n}finally{zPkg.end(_z);}\");\n\t\t}\n\n\t\tif (wc != null) {\n\t\t\tmove(wc, out);\n\t\t\treturn wc;\n\t\t}\n\t\treturn out.toByteArray();\n\t}","commit_id":"ed00e71a1a0507c0fccf3756e107c3c3da85d95e","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the amount that the value of {@link #getCurpos}\n\t * changes by when the tray of the scroll bar is clicked.\n\t */\n\tpublic final void setPageIncrement(int pginc)\n\tthrows WrongValueException {\n\t\tif (pginc <= 0)\n\t\t\tthrow new WrongValueException(\"Nonpositive is not allowed: \"+pginc);\n\t\tif (_pginc != pginc) {\n\t\t\t_pginc = pginc;\n\t\t\tsmartUpdate(\"z.pginc\", _pginc);\n\t\t}\n\t}","id":7612,"modified_method":"/** Sets the amount that the value of {@link #getCurpos}\n\t * changes by when the tray of the scroll bar is clicked.\n\t */\n\tpublic final void setPageIncrement(int pginc)\n\tthrows WrongValueException {\n\t\tif (pginc <= 0)\n\t\t\tthrow new WrongValueException(\"Nonpositive is not allowed: \"+pginc);\n\t\tif (_pginc != pginc) {\n\t\t\t_pginc = pginc;\n\t\t\tsmartUpdate(\"pginc\", _pginc);\n\t\t}\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the name of this component.\n\t * <p>The name is used only to work with \"legacy\" Web application that\n\t * handles user's request by servlets.\n\t * It works only with HTTP/HTML-based browsers. It doesn't work\n\t * with other kind of clients.\n\t * <p>Don't use this method if your application is purely based\n\t * on ZK's event-driven model.\n\t *\n\t * @param name the name of this component.\n\t * @since 3.0.0\n\t */\n\tpublic void setName(String name) {\n\t\tif (name != null && name.length() == 0) name = null;\n\t\tif (!Objects.equals(_name, name)) {\n\t\t\t_name = name;\n\t\t\tsmartUpdate(\"z.name\", _name);\n\t\t}\n\t}","id":7613,"modified_method":"/** Sets the name of this component.\n\t * <p>The name is used only to work with \"legacy\" Web application that\n\t * handles user's request by servlets.\n\t * It works only with HTTP/HTML-based browsers. It doesn't work\n\t * with other kind of clients.\n\t * <p>Don't use this method if your application is purely based\n\t * on ZK's event-driven model.\n\t *\n\t * @param name the name of this component.\n\t * @since 3.0.0\n\t */\n\tpublic void setName(String name) {\n\t\tif (name != null && name.length() == 0) name = null;\n\t\tif (!Objects.equals(_name, name)) {\n\t\t\t_name = name;\n\t\t\tsmartUpdate(\"name\", _name);\n\t\t}\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the current position of the slider.\n\t * If negative, 0 is assumed. If larger than {@link #getMaxpos},\n\t * {@link #getMaxpos} is assumed.\n\t */\n\tpublic final void setCurpos(int curpos)\n\tthrows WrongValueException {\n\t\tif (curpos < 0) curpos = 0;\n\t\telse if (curpos > _maxpos) curpos = _maxpos;\n\n\t\tif (_curpos != curpos) {\n\t\t\t_curpos = curpos;\n\t\t\tsmartUpdate(\"z.curpos\", _curpos);\n\t\t}\n\t}","id":7614,"modified_method":"/** Sets the current position of the slider.\n\t * If negative, 0 is assumed. If larger than {@link #getMaxpos},\n\t * {@link #getMaxpos} is assumed.\n\t */\n\tpublic final void setCurpos(int curpos)\n\tthrows WrongValueException {\n\t\tif (curpos < 0) curpos = 0;\n\t\telse if (curpos > _maxpos) curpos = _maxpos;\n\n\t\tif (_curpos != curpos) {\n\t\t\t_curpos = curpos;\n\t\t\tsmartUpdate(\"curpos\", _curpos);\n\t\t}\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/**\n\t * Sets the sliding text.\n\t * The syntax \"{0}\" will be replaced with the position at client side.\n\t * @since 3.0.1\n\t */\n\tpublic void setSlidingtext(String slidingtext) {\t\t\n\t\tif (slidingtext == null || slidingtext.length() == 0)\n\t\t\tslidingtext = \"{0}\";\n\t\tif (!_slidingtext.equals(slidingtext)) {\n\t\t\t_slidingtext = slidingtext;\n\t\t\tsmartUpdate(\"z.slidingtext\", _slidingtext);\n\t\t}\n\t}","id":7615,"modified_method":"/**\n\t * Sets the sliding text.\n\t * The syntax \"{0}\" will be replaced with the position at client side.\n\t * @since 3.0.1\n\t */\n\tpublic void setSlidingtext(String slidingtext) {\t\t\n\t\tif (slidingtext == null || slidingtext.length() == 0)\n\t\t\tslidingtext = \"{0}\";\n\t\tif (!_slidingtext.equals(slidingtext)) {\n\t\t\t_slidingtext = slidingtext;\n\t\t\tsmartUpdate(\"slidingtext\", _slidingtext);\n\t\t}\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the orient.\n\t * <p>Default : \"horizontal\" \n\t * @param orient either \"horizontal\" or \"vertical\".\n\t * @since 3.5.0\n\t */\n\tpublic void setOrient(String orient) throws WrongValueException {\n\t\tif (!\"horizontal\".equals(orient) && !\"vertical\".equals(orient))\n\t\t\tthrow new WrongValueException(\"orient cannot be \"+orient);\n\n\t\tif (!Objects.equals(_orient, orient)) {\n\t\t\t_orient = orient;\n\t\t\tif (\"vertical\".equals(_orient)) {\n\t\t\t\tsetWidth(null);\n\t\t\t\tsetHeight(\"207px\");\n\t\t\t} else {\n\t\t\t\tsetWidth(\"207px\");\n\t\t\t\tsetHeight(null);\n\t\t\t}\n\t\t\tinvalidate();\n\t\t}\n\t}","id":7616,"modified_method":"/** Sets the orient.\n\t * <p>Default : \"horizontal\" \n\t * @param orient either \"horizontal\" or \"vertical\".\n\t * @since 3.5.0\n\t */\n\tpublic void setOrient(String orient) throws WrongValueException {\n\t\tif (!\"horizontal\".equals(orient) && !\"vertical\".equals(orient))\n\t\t\tthrow new WrongValueException(\"orient cannot be \"+orient);\n\t\t_orient = orient;\n\t\tsmartUpdate(\"orient\", _orient);\n\t\t\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the maximum position of the slider.\n\t *\n\t * @exception WrongValueException if non-positive maxpos is passed\n\t */\n\tpublic final void setMaxpos(int maxpos)\n\tthrows WrongValueException {\n\t\tif (maxpos <= 0)\n\t\t\tthrow new WrongValueException(\"Nonpositive is not allowed: \"+maxpos);\n\n\t\tif (_maxpos != maxpos) {\n\t\t\tif (_curpos > maxpos)\n\t\t\t\tsetCurpos(maxpos);\n\t\t\t_maxpos = maxpos;\n\t\t\tsmartUpdate(\"z.maxpos\", _maxpos);\n\t\t}\n\t}","id":7617,"modified_method":"/** Sets the maximum position of the slider.\n\t *\n\t * @exception WrongValueException if non-positive maxpos is passed\n\t */\n\tpublic final void setMaxpos(int maxpos)\n\tthrows WrongValueException {\n\t\tif (maxpos <= 0)\n\t\t\tthrow new WrongValueException(\"Nonpositive is not allowed: \"+maxpos);\n\n\t\tif (_maxpos != maxpos) {\n\t\t\tif (_curpos > maxpos)\n\t\t\t\tsetCurpos(maxpos);\n\t\t\t_maxpos = maxpos;\n\t\t\tsmartUpdate(\"maxpos\", _maxpos);\n\t\t}\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the number of columns to span this header.\r\n\t * <p>It is the same as the colspan attribute of HTML TD tag.\r\n\t */\r\n\tpublic void setColspan(int colspan) throws WrongValueException {\r\n\t\tif (colspan <= 0)\r\n\t\t\tthrow new WrongValueException(\"Positive only\");\r\n\t\tif (_colspan != colspan) {\r\n\t\t\t_colspan = colspan;\t\t\t\r\n\t\t\tfinal Component parent = getParent();\r\n\t\t\tif (parent != null)\r\n\t\t\t\tparent.invalidate();\r\n\t\t\telse {\r\n\t\t\t\tfinal Execution exec = Executions.getCurrent();\r\n\t\t\t\tif (exec != null && exec.isExplorer())\r\n\t\t\t\t\tinvalidate();\r\n\t\t\t\telse smartUpdate(\"colspan\", Integer.toString(_colspan));\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\t}","id":7618,"modified_method":"/** Sets the number of columns to span this header.\r\n\t * <p>It is the same as the colspan attribute of HTML TD tag.\r\n\t */\r\n\tpublic void setColspan(int colspan) throws WrongValueException {\r\n\t\tif (colspan <= 0)\r\n\t\t\tthrow new WrongValueException(\"Positive only\");\r\n\t\tif (_colspan != colspan) {\r\n\t\t\t_colspan = colspan;\t\t\t\r\n\t\t\t\r\n\t\t\tsmartUpdate(\"colspan\", Integer.toString(_colspan));\r\n\t\t\t\t\r\n\t\t}\r\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the number of rows to span this header.\r\n\t * <p>It is the same as the rowspan attribute of HTML TD tag.\r\n\t */\r\n\tpublic void setRowspan(int rowspan) throws WrongValueException {\r\n\t\tif (rowspan <= 0)\r\n\t\t\tthrow new WrongValueException(\"Positive only\");\r\n\t\tif (_rowspan != rowspan) {\r\n\t\t\t_rowspan = rowspan;\r\n\t\t\tfinal Component parent = getParent();\r\n\t\t\tif (parent != null)\r\n\t\t\t\tparent.invalidate();\r\n\t\t\telse {\r\n\t\t\t\tfinal Execution exec = Executions.getCurrent();\r\n\t\t\t\tif (exec != null && exec.isExplorer())\r\n\t\t\t\t\tinvalidate();\r\n\t\t\t\telse smartUpdate(\"rowspan\", Integer.toString(_rowspan));\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":7619,"modified_method":"/** Sets the number of rows to span this header.\r\n\t * <p>It is the same as the rowspan attribute of HTML TD tag.\r\n\t */\r\n\tpublic void setRowspan(int rowspan) throws WrongValueException {\r\n\t\tif (rowspan <= 0)\r\n\t\t\tthrow new WrongValueException(\"Positive only\");\r\n\t\tif (_rowspan != rowspan) {\r\n\t\t\t_rowspan = rowspan;\r\n\t\t\t\r\n\t\t\tsmartUpdate(\"rowspan\", Integer.toString(_rowspan));\r\n\t\t\t\r\n\t\t}\r\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the number of columns.\r\n\t */\r\n\tpublic void setColumns(int columns) throws WrongValueException {\r\n\t\tif (columns <= 0)\r\n\t\t\tthrow new WrongValueException(\"Positive only\");\r\n\t\tif (_columns != columns) {\r\n\t\t\t_columns = columns;\r\n\t\t\tinvalidate();\r\n\t\t}\r\n\t}","id":7620,"modified_method":"/** Sets the number of columns.\r\n\t */\r\n\tpublic void setColumns(int columns) throws WrongValueException {\r\n\t\tif (columns <= 0)\r\n\t\t\tthrow new WrongValueException(\"Positive only\");\r\n\t\tif (_columns != columns) {\r\n\t\t\t_columns = columns;\r\n\t\t\tsmartUpdate(\"columns\", _columns);\r\n\t\t}\r\n\t}","commit_id":"45cc16a3953d4be64df9759edee1805a5e168931","url":"https://github.com/zkoss/zk"},{"original_method":"public AbstractSlave( String path, Map<String,String> params, \n        String masterIp, int masterPort )\n    {\n        params.put( \"backup_slave\", \"true\" );\n        this.graphDb = new EmbeddedReadOnlyGraphDatabase( path, params );\n        this.xaDs = (NeoStoreXaDataSource) graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager().getXaDataSource( \"nioneodb\" );\n        this.xaDs.makeBackupSlave();\n        recover();\n\n        jobEater = new JobEater();\n        logApplier = new LogApplier( xaDs );\n        jobEater.start();\n        logApplier.start();\n        \n        this.masterIp = masterIp;\n        this.masterPort = masterPort;\n        masterConnection = new Connection( masterIp, masterPort );\n        while ( !masterConnection.connected() )\n        {\n            if ( masterConnection.connectionRefused() )\n            {\n                System.out.println( \"Unable to connect to master\" );\n                break;\n            }\n        }\n        if ( masterConnection.connected() )\n        {\n            jobEater.addJob( new ConnectToMasterJob( masterConnection, this ) );\n        }\n        System.out.println( \"At version: \" + getVersion() );\n    }","id":7621,"modified_method":"public AbstractSlave( String path, Map<String,String> params, \n        String masterIp, int masterPort )\n    {\n        params.put( \"backup_slave\", \"true\" );\n        this.graphDb = new EmbeddedReadOnlyGraphDatabase( path, params );\n        XaDataSourceManager xaDsMgr = graphDb.getConfig().getTxModule().\n            getXaDataSourceManager();\n        XaDataSource nioneo = xaDsMgr.getXaDataSource( \"nioneodb\" );\n        XaDataSource lucene = xaDsMgr.getXaDataSource( \"lucene\" );\n        XaDataSource fulltext = xaDsMgr.getXaDataSource( \"lucene-fulltext\" );\n        if ( lucene != null && fulltext != null )\n        {\n            xaDataSources = new XaDataSource[3];\n            xaDataSources[0] = nioneo;\n            xaDataSources[1] = lucene;\n            xaDataSources[2] = fulltext;\n        }\n        else\n        {\n            xaDataSources = new XaDataSource[1];\n            xaDataSources[0] = nioneo;\n        }\n        for ( XaDataSource xaDs : xaDataSources )\n        {\n            xaDs.makeBackupSlave();\n        }\n        recover();\n\n        jobEater = new JobEater();\n        logApplier = new LogApplier( xaDataSources );\n        jobEater.start();\n        logApplier.start();\n        \n        this.masterIp = masterIp;\n        this.masterPort = masterPort;\n        masterConnections = new Connection[xaDataSources.length];\n        for ( int i = 0; i < masterConnections.length; i++ )\n        {\n            masterConnections[i] = new Connection( masterIp, masterPort );\n            while ( !masterConnections[i].connected() )\n            {\n                if ( masterConnections[i].connectionRefused() )\n                {\n                    System.out.println( \"Unable to connect to master\" );\n                    break;\n                }\n            }\n            if ( masterConnections[i].connected() )\n            {\n                String name = \"nioneodb\";\n                if ( i == 1 )\n                {\n                    name = \"lucene\";\n                }\n                else if ( i == 2 )\n                {\n                    name = \"lucene-fulltext\";\n                }\n                jobEater.addJob( new ConnectToMasterJob( masterConnections[i], \n                        this, name, xaDataSources[i] ) );\n            }\n        }\n//        System.out.println( \"At version: \" + getVersion() );\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean isConnectedToMaster()\n    {\n        return masterConnection.connected();\n    }","id":7622,"modified_method":"public boolean isConnectedToMaster()\n    {\n        for ( Connection masterConnection : masterConnections )\n        {\n            if ( !masterConnection.connected() )\n            {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean reconnectToMaster()\n    {\n        masterConnection = new Connection( masterIp, masterPort );\n        while ( !masterConnection.connected() )\n        {\n            if ( masterConnection.connectionRefused() )\n            {\n                return false;\n            }\n        }\n        jobEater.addJob( new ConnectToMasterJob( masterConnection, this ) );\n        return true;\n    }","id":7623,"modified_method":"public boolean reconnectToMaster()\n    {\n        for ( int i = 0; i < masterConnections.length; i++ )\n        {\n            if ( masterConnections[i].connected() )\n            {\n                continue;\n            }\n            masterConnections[i] = new Connection( masterIp, masterPort );\n            while ( !masterConnections[i].connected() )\n            {\n                if ( masterConnections[i].connectionRefused() )\n                {\n                    return false;\n                }\n            }\n            if ( masterConnections[i].connected() )\n            {\n                String name = \"nioneodb\";\n                if ( i == 1 )\n                {\n                    name = \"lucene\";\n                }\n                else if ( i == 2 )\n                {\n                    name = \"lucene-fulltext\";\n                }\n                jobEater.addJob( new ConnectToMasterJob( masterConnections[i], \n                        this, name, xaDataSources[i] ) );\n            }\n        }\n        return true;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void recover()\n    {\n        long nextVersion = xaDs.getCurrentLogVersion();\n        while ( xaDs.hasLogicalLog( nextVersion ) )\n        {\n            try\n            {\n                xaDs.applyLog( xaDs.getLogicalLog( nextVersion ) );\n            }\n            catch ( IOException e )\n            {\n                throw new UnderlyingStorageException( \n                    \"Unable to recover slave to consistent state\", e );\n            }\n            nextVersion++;\n        }\n    }","id":7624,"modified_method":"private void recover()\n    {\n        for ( XaDataSource xaDs : xaDataSources )\n        {\n            long nextVersion = xaDs.getCurrentLogVersion();\n            while ( xaDs.hasLogicalLog( nextVersion ) )\n            {\n                try\n                {\n                    xaDs.applyLog( xaDs.getLogicalLog( nextVersion ) );\n                }\n                catch ( IOException e )\n                {\n                    throw new UnderlyingStorageException( \n                        \"Unable to recover slave to consistent state\", e );\n                }\n                nextVersion++;\n            }\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ConnectToMasterJob( Connection connection, AbstractSlave slave )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        setStatus( Status.SETUP_GREETING );\n    }","id":7625,"modified_method":"public ConnectToMasterJob( Connection connection, AbstractSlave slave, \n            String xaDsName, XaDataSource xaDs )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        this.xaDsName = xaDsName;\n        this.xaDs = xaDs;\n        setStatus( Status.SETUP_GREETING );\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getResponse()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_VERISON(8)\n            buffer.limit( 9 );\n            int read = connection.read();\n            log( \"Get greeting response\" );\n            if ( read == 1 || read == 9 )\n            {\n                buffer.flip();\n                byte masterGreeting = buffer.get();\n                if ( masterGreeting == HeaderConstants.BYE )\n                {\n                    log( \"Problem connecting to master \" + connection + \n                    \". Got BYE.\" );\n                    close();\n                    return true;\n                }\n                else if ( masterGreeting != HeaderConstants.MASTER_GREETING )\n                {\n                    log( \"Got unkown greeting[\" + masterGreeting + \"] from \" +  \n                        connection );\n                    close();\n                }\n                else if ( read != 9 )\n                {\n                    retries++;\n                    connection.pushBackAllReadData();\n                    return false;\n                }\n                masterVersion = buffer.getLong();\n                log( \"Got master version: \" + masterVersion );\n                if ( masterVersion < slave.getVersion() )\n                {\n                    log( \"Got wrong version [\" + masterVersion + \"]\" );\n                    close();\n                    return true;\n                }\n                setNoRequeue();\n                setChainJob( new HandleMasterConnection( connection, slave, \n                    masterVersion ) );\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7626,"modified_method":"private boolean getResponse()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_VERISON(8)\n            buffer.limit( 9 );\n            int read = connection.read();\n            log( \"Get greeting response\" );\n            if ( read == 1 || read == 9 )\n            {\n                buffer.flip();\n                byte masterGreeting = buffer.get();\n                if ( masterGreeting == HeaderConstants.BYE )\n                {\n                    log( \"Problem connecting to master \" + connection + \n                    \". Got BYE.\" );\n                    close();\n                    return true;\n                }\n                else if ( masterGreeting != HeaderConstants.MASTER_GREETING )\n                {\n                    log( \"Got unkown greeting[\" + masterGreeting + \"] from \" +  \n                        connection );\n                    close();\n                }\n                else if ( read != 9 )\n                {\n                    retries++;\n                    connection.pushBackAllReadData();\n                    return false;\n                }\n                masterVersion = buffer.getLong();\n                log( \"Got master version: \" + masterVersion );\n                if ( masterVersion < xaDs.getCurrentLogVersion() )\n                {\n                    log( \"Got wrong version [\" + masterVersion + \"]\" );\n                    close();\n                    return true;\n                }\n                setNoRequeue();\n                setChainJob( new HandleMasterConnection( connection, slave, \n                    masterVersion, xaDs ) );\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.SLAVE_GREETING );\n        buffer.putLong( slave.getIdentifier() );\n        buffer.putLong( slave.getCreationTime() );\n        buffer.putLong( slave.getVersion() );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","id":7627,"modified_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.SLAVE_GREETING );\n        buffer.putLong( xaDs.getRandomIdentifier() );\n        buffer.putLong( xaDs.getCreationTime() );\n        buffer.putLong( xaDs.getCurrentLogVersion() );\n        byte[] bytes = xaDsName.getBytes();\n        buffer.putInt( bytes.length );\n        buffer.put( bytes );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.MASTER_GREETING );\n        buffer.putLong( master.getVersion() );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","id":7628,"modified_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.MASTER_GREETING );\n        buffer.putLong( master.getVersion( xaDsName ) );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_ID(8) + DB_TIMESTAMP(8) + DB_VERISON(8)\n            buffer.limit( 25 );\n            int read = connection.read();\n            if ( read == 25 )\n            {\n                buffer.flip();\n                byte slaveGreeting = buffer.get();\n                if ( slaveGreeting != HeaderConstants.SLAVE_GREETING )\n                {\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                long id = buffer.getLong();\n                long timestamp = buffer.getLong();\n                long version = buffer.getLong();\n                long masterId = master.getIdentifier();\n                long masterTimestamp = master.getCreationTime();\n                long masterVersion = master.getVersion();\n                if ( id != master.getIdentifier() || \n                    timestamp != master.getCreationTime() || \n                    version > master.getVersion() )\n                {\n                    log( \"Got wrong id/time/version [\" + id + \"/\" + timestamp + \n                        \"/\" + version + \"]\" + \"[\" + masterId + \"/\" + \n                        masterTimestamp + \"/\" + masterVersion + \"]\" );\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                log( \"Got slave version[\" + version + \"]. I am version[\" + \n                    master.getVersion() + \"]\" );\n                slaveVersion = version;\n                setStatus( Status.SETUP_GREETING );\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7629,"modified_method":"private boolean getGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_ID(8) + DB_TIMESTAMP(8) + DB_VERISON(8) + \n            // NAME_length(4) + NAME\n            // buffer.limit( 25 );\n            int read = connection.read();\n            if ( read > 29 )\n            {\n                buffer.flip();\n                byte slaveGreeting = buffer.get();\n                if ( slaveGreeting != HeaderConstants.SLAVE_GREETING )\n                {\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                long id = buffer.getLong();\n                long timestamp = buffer.getLong();\n                long version = buffer.getLong();\n                int strLen = buffer.getInt();\n                byte[] bytes = new byte[strLen];\n                buffer.get( bytes );\n                xaDsName = new String( bytes );\n                long masterId = master.getIdentifier( xaDsName );\n                long masterTimestamp = master.getCreationTime( xaDsName );\n                long masterVersion = master.getVersion( xaDsName );\n                if ( id != masterId || timestamp != masterTimestamp || \n                    version > masterVersion )\n                {\n                    log( \"Got wrong id/time/version [\" + id + \"/\" + timestamp + \n                        \"/\" + version + \"]\" + \"[\" + masterId + \"/\" + \n                        masterTimestamp + \"/\" + masterVersion + \n                        \"] for data source \" + xaDsName );\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                log( \"Got slave version[\" + version + \"]. I am version[\" + \n                    master.getVersion( xaDsName ) + \"] for data source \" + xaDsName );\n                slaveVersion = version;\n                setStatus( Status.SETUP_GREETING );\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean sendGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        log( \"Send greeting\" );\n        connection.write();\n        if ( !buffer.hasRemaining() )\n        {\n            releaseWriteBuffer();\n            setNoRequeue();\n            setChainJob( new HandleSlaveConnection( connection, master, slaveVersion ) );\n            return true;\n        }\n        retries++;\n        return false;\n    }","id":7630,"modified_method":"private boolean sendGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        log( \"Send greeting\" );\n        connection.write();\n        if ( !buffer.hasRemaining() )\n        {\n            releaseWriteBuffer();\n            setNoRequeue();\n            setChainJob( new HandleSlaveConnection( connection, master, slaveVersion, xaDsName ) );\n            return true;\n        }\n        retries++;\n        return false;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HandleMasterConnection( Connection connection, AbstractSlave slave, \n        long masterVersion )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        this.masterVersion = masterVersion;\n        if ( slave.getVersion() < (masterVersion - 1) )\n        {\n            setStatus( Status.SETUP_REQUEST );\n        }\n        else\n        {\n            setStatus( Status.GET_MESSAGE );\n        }\n    }","id":7631,"modified_method":"public HandleMasterConnection( Connection connection, AbstractSlave slave, \n        long masterVersion, XaDataSource xaDs )\n    {\n        super( connection, slave );\n        this.xaDs = xaDs;\n        this.masterVersion = masterVersion;\n        if ( xaDs.getCurrentLogVersion() < (masterVersion - 1) )\n        {\n            setStatus( Status.SETUP_REQUEST );\n        }\n        else\n        {\n            setStatus( Status.GET_MESSAGE );\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getLog()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        log( \"Get log\" );\n        try\n        {\n            int read = connection.read();\n            if ( read > 0 )\n            {\n                buffer.flip();\n                if ( logToWrite.position() + read <= logLength )\n                {\n                    logToWrite.write( buffer );\n                }\n                else\n                {\n                    int readLimit = buffer.limit();\n                    int logLimit = (int) (logLength - logToWrite.position()); \n                    buffer.limit( logLimit );\n                    logToWrite.write( buffer );\n                    buffer.limit( readLimit );\n                    byte[] pushData = new byte[readLimit - logLimit];\n                    buffer.get( pushData );\n                    connection.pushBackReadData( pushData );\n                }\n                if ( logToWrite.position() >= logLength )\n                {\n                    log( \"Log transfer complete\" );\n                    if ( slave.getVersion() < (masterVersion - 1) )\n                    {\n                        setStatus( Status.SETUP_REQUEST );\n                    }\n                    else\n                    {\n                        setStatus( Status.GET_MESSAGE );\n                    }\n                    logToWrite.close();\n                    String newName = slave.getLogName( logVersionWriting );\n                    File newLog = new File( newName );\n                    if ( newLog.exists() )\n                    {\n                        log( \"Error new log file[\" + newName + \n                                \"] already exist\" );\n                        close();\n                    }\n                    if ( !tempFile.renameTo( new File( newName ) ) )\n                    {\n                        log( \"Unable to move log to \" + newName );\n                        close();\n                    }\n                    logVersionWriting = -1;\n                    tempFile = null;\n                    logToWrite = null;\n                    // slave.tryApplyNewLog();\n                }\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException e )\n        {\n            close();\n            log( \"Error getting log.\", e );\n            return true;\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7632,"modified_method":"private boolean getLog()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        log( \"Get log\" );\n        try\n        {\n            int read = connection.read();\n            if ( read > 0 )\n            {\n                buffer.flip();\n                if ( logToWrite.position() + read <= logLength )\n                {\n                    logToWrite.write( buffer );\n                }\n                else\n                {\n                    int readLimit = buffer.limit();\n                    int logLimit = (int) (logLength - logToWrite.position()); \n                    buffer.limit( logLimit );\n                    logToWrite.write( buffer );\n                    buffer.limit( readLimit );\n                    byte[] pushData = new byte[readLimit - logLimit];\n                    buffer.get( pushData );\n                    connection.pushBackReadData( pushData );\n                }\n                if ( logToWrite.position() >= logLength )\n                {\n                    log( \"Log transfer complete\" );\n                    if ( xaDs.getCurrentLogVersion() < (masterVersion - 1) )\n                    {\n                        setStatus( Status.SETUP_REQUEST );\n                    }\n                    else\n                    {\n                        setStatus( Status.GET_MESSAGE );\n                    }\n                    logToWrite.close();\n                    String newName = xaDs.getFileName( logVersionWriting );\n                    File newLog = new File( newName );\n                    if ( newLog.exists() )\n                    {\n                        log( \"Error new log file[\" + newName + \n                                \"] already exist\" );\n                        close();\n                    }\n                    if ( !tempFile.renameTo( new File( newName ) ) )\n                    {\n                        log( \"Unable to move log to \" + newName );\n                        close();\n                    }\n                    logVersionWriting = -1;\n                    tempFile = null;\n                    logToWrite = null;\n                    // slave.tryApplyNewLog();\n                }\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException e )\n        {\n            close();\n            log( \"Error getting log.\", e );\n            return true;\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + VERSION(8) + LOG_LENGTH(8)\n            buffer.limit( 17 );\n            int read = connection.read();\n            if ( read == 17 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.OFFER_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                long version = buffer.getLong();\n                if ( version < slave.getVersion() )\n                {\n                    log( \"Got wrong version [\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                    return true;\n                }\n                logLength = buffer.getLong();\n                log( \"Got offer: \" + version + \",\" + logLength );\n                if ( !slave.hasLog( version ) )\n                {\n                    try\n                    {\n                        logVersionWriting = version;\n                        tempFile = new File( \"logical-transfer.v\" + \n                                Long.toString( version ) );\n                        logToWrite = new RandomAccessFile( tempFile, \n                            \"rw\").getChannel();\n                        logToWrite.truncate( 0 );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to setup logical log[\" + version + \n                            \"] for writing\", e );\n                    }\n                    setStatus( Status.SETUP_OK );\n                }\n                else\n                {\n                    log( \"We already have log version[\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7633,"modified_method":"private boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + VERSION(8) + LOG_LENGTH(8)\n            buffer.limit( 17 );\n            int read = connection.read();\n            if ( read == 17 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.OFFER_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                long version = buffer.getLong();\n                if ( version < xaDs.getCurrentLogVersion() )\n                {\n                    log( \"Got wrong version [\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                    return true;\n                }\n                logLength = buffer.getLong();\n                log( \"Got offer: \" + version + \",\" + logLength );\n                if ( !xaDs.hasLogicalLog( version ) )\n                {\n                    try\n                    {\n                        logVersionWriting = version;\n                        tempFile = new File( \"logical-transfer.v\" + \n                                Long.toString( version ) );\n                        logToWrite = new RandomAccessFile( tempFile, \n                            \"rw\").getChannel();\n                        logToWrite.truncate( 0 );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to setup logical log[\" + version + \n                            \"] for writing\", e );\n                    }\n                    setStatus( Status.SETUP_OK );\n                }\n                else\n                {\n                    log( \"We already have log version[\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupRequest()\n    {\n        long version = slave.getVersion();\n        while ( version < masterVersion )\n        {\n            if ( slave.hasLog( version ) )\n            {\n                version++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ( version == masterVersion )\n        {\n            setStatus( Status.GET_MESSAGE );\n            return true;\n        }\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.REQUEST_LOG );\n        buffer.putLong( version );\n        buffer.flip();\n        log( \"Setup request: \" + version );\n        setStatus( Status.SEND_REQUEST );\n        retries = 0;\n        return true;\n    }","id":7634,"modified_method":"private boolean setupRequest()\n    {\n        long version = xaDs.getCurrentLogVersion();\n        while ( version < masterVersion )\n        {\n            if ( xaDs.hasLogicalLog( version ) )\n            {\n                version++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ( version == masterVersion )\n        {\n            setStatus( Status.GET_MESSAGE );\n            return true;\n        }\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.REQUEST_LOG );\n        buffer.putLong( version );\n        buffer.flip();\n        log( \"Setup request: \" + version );\n        setStatus( Status.SEND_REQUEST );\n        retries = 0;\n        return true;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized boolean getMessage()\n    {\n//        if ( logVersionToSend > -1 && logLength > -1 && logToSend != null )\n//        {\n//            setStatus( Status.SETUP_OFFER_LOG );\n//            return true;\n//        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            buffer.limit( 9 );\n            int read = connection.read();\n            if ( read == 9 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.REQUEST_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                logVersionToSend = buffer.getLong();\n                if ( logVersionToSend > master.getVersion() )\n                {\n                    log( \"Got wrong version [\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                log( \"Slave request: \" + logVersionToSend );\n                if ( master.hasLog( logVersionToSend ) )\n                {\n                    try\n                    {\n                        logToSend = master.getLog( logVersionToSend );\n                        logLength = master.getLogLength( logVersionToSend );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to get logical log[\" + logVersionToSend + \n                            \"]\", e );\n                    }\n                    setStatus( Status.SETUP_OFFER_LOG );\n                }\n                else\n                {\n                    log( \"No such log version[\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7635,"modified_method":"private synchronized boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            buffer.limit( 9 );\n            int read = connection.read();\n            if ( read == 9 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.REQUEST_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                logVersionToSend = buffer.getLong();\n                if ( logVersionToSend > master.getVersion( xaDsName ) )\n                {\n                    log( \"Got wrong version [\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                log( \"Slave request: \" + logVersionToSend );\n                if ( master.hasLog( xaDsName, logVersionToSend ) )\n                {\n                    try\n                    {\n                        logToSend = master.getLog( xaDsName, logVersionToSend );\n                        logLength = master.getLogLength( xaDsName, logVersionToSend );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to get logical log[\" + logVersionToSend + \n                            \"]\", e );\n                    }\n                    setStatus( Status.SETUP_OFFER_LOG );\n                }\n                else\n                {\n                    log( \"No such log version[\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HandleSlaveConnection( Connection connection, Master master, \n        long slaveVersion )\n    {\n        super( connection, master );\n        this.master = master;\n/*        if ( master.hasLog( slaveVersion ) )\n        {\n            logVersionToSend = slaveVersion;\n            logLength = master.getLogLength( slaveVersion );\n            \n            try\n            {\n                logToSend = master.getLog( slaveVersion );\n            }\n            catch ( IOException e )\n            {\n                throw new SocketException( \"Error getting next log\", e );\n            }\n        }*/\n        setStatus( Status.GET_MESSAGE );\n    }","id":7636,"modified_method":"public HandleSlaveConnection( Connection connection, Master master, \n        long slaveVersion, String xaDsName )\n    {\n        super( connection, master );\n        this.master = master;\n        this.xaDsName = xaDsName;\n        setStatus( Status.GET_MESSAGE );\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized boolean offerLogToSlave( long version )\n    {\n        if ( !getConnection().connected() )\n        {\n            System.out.println( \"Not connected\" );\n            return false;\n        }\n        if ( logLength != -1 || logVersionToSend != -1 || logToSend != null )\n        {\n            // we already sending a version\n            return true;\n        }\n        try\n        {\n            if ( getStatus() == Status.GET_MESSAGE )\n            {\n                logToSend = master.getLog( version );\n                logLength = master.getLogLength( version );\n                logVersionToSend = version;\n                setStatus( Status.SETUP_OFFER_LOG );\n            }\n            return true;\n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \n                \"Unable to get logical log[\" + logVersionToSend + \n                \"]\", e );\n        }\n    }","id":7637,"modified_method":"public synchronized boolean offerLogToSlave( long version )\n    {\n        if ( !getConnection().connected() )\n        {\n            System.out.println( \"Not connected\" );\n            return false;\n        }\n        if ( logLength != -1 || logVersionToSend != -1 || logToSend != null )\n        {\n            // we already sending a version\n            return true;\n        }\n        try\n        {\n            if ( getStatus() == Status.GET_MESSAGE )\n            {\n                logToSend = master.getLog( xaDsName, version );\n                logLength = master.getLogLength( xaDsName, version );\n                logVersionToSend = version;\n                setStatus( Status.SETUP_OFFER_LOG );\n            }\n            return true;\n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \n                \"Unable to get logical log[\" + logVersionToSend + \n                \"]\", e );\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void run()\n    {\n        try\n        {\n            while ( run )\n            {\n//                Long logVersion = queue.poll();\n//                if ( logVersion != null )\n//                {\n                long logVersion = xaDs.getCurrentLogVersion();\n                if ( xaDs.hasLogicalLog( logVersion ) )\n                {\n                    ReadableByteChannel logChannel = \n                        xaDs.getLogicalLog( logVersion );\n                    xaDs.applyLog( logChannel );\n                }\n                else\n                {\n                    synchronized ( this )\n                    {\n                        try\n                        {\n                            this.wait( 250 );\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            interrupted();\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            System.err.println( \"Failed to apply log: \" + e );\n            e.printStackTrace();\n        }\n        finally\n        {\n            run = false;\n        }\n    }","id":7638,"modified_method":"public void run()\n    {\n        try\n        {\n            while ( run )\n            {\n                for ( XaDataSource xaDs : xaDataSources )\n                {\n                    long logVersion = xaDs.getCurrentLogVersion();\n                    if ( xaDs.hasLogicalLog( logVersion ) )\n                    {\n                        ReadableByteChannel logChannel = \n                            xaDs.getLogicalLog( logVersion );\n                        xaDs.applyLog( logChannel );\n                    }\n                    else\n                    {\n                        synchronized ( this )\n                        {\n                            try\n                            {\n                                this.wait( 250 );\n                            }\n                            catch ( InterruptedException e )\n                            {\n                                interrupted();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            System.err.println( \"Failed to apply log: \" + e );\n            e.printStackTrace();\n        }\n        finally\n        {\n            run = false;\n        }\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"LogApplier( NeoStoreXaDataSource xaDs )\n    {\n        this.xaDs = xaDs;\n    }","id":7639,"modified_method":"LogApplier( XaDataSource[] xaDataSources )\n    {\n        this.xaDataSources = xaDataSources;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ReadableByteChannel getLog( long version ) throws IOException\n    {\n        return xaDs.getLogicalLog( version );\n    }","id":7640,"modified_method":"public long getCreationTime( String xaDsName )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getCreationTime();\n        }\n        return -1;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void rotateLogAndPushToSlaves() throws IOException\n    {\n        if ( slaveList.size() == 0 )\n        {\n            return;\n        }\n        long version = getVersion();\n        xaDs.rotateLogicalLog();\n        ArrayList<HandleSlaveConnection> newList = \n            new ArrayList<HandleSlaveConnection>();\n        for ( HandleSlaveConnection slave : slaveList )\n        {\n            if ( !slave.offerLogToSlave( version ) )\n            {\n                System.out.println( \"Failed to offer log to slave: \" + slave );\n            }\n            else\n            {\n                newList.add( slave );\n            }\n        }\n        slaveList = newList;\n    }","id":7641,"modified_method":"public void rotateLogAndPushToSlaves() throws IOException\n    {\n        if ( slaveList.size() == 0 )\n        {\n            return;\n        }\n        ArrayList<HandleSlaveConnection> newList = \n            new ArrayList<HandleSlaveConnection>();\n        for ( HandleSlaveConnection slave : slaveList )\n        {\n            XaDataSource xaDs = xaDsMgr.getXaDataSource( slave.getXaDsName() );\n            if ( xaDs != null )\n            {\n                long version = xaDs.getCurrentLogVersion();\n                xaDs.rotateLogicalLog();\n                if ( !slave.offerLogToSlave( version ) )\n                {\n                    System.out.println( \"Failed to offer log to slave: \" + slave );\n                }\n                else\n                {\n                    newList.add( slave );\n                }\n            }\n        }\n        slaveList = newList;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Master( String path, Map<String,String> params, int listenPort )\n    {\n        this.graphDb = new EmbeddedGraphDatabase( path, params );\n        this.xaDs = (NeoStoreXaDataSource) graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager().getXaDataSource( \"nioneodb\" );\n        xaDs.keepLogicalLogs( true );\n        this.port = listenPort;\n        try\n        {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking( false );\n            serverChannel.socket().bind( new InetSocketAddress( listenPort ) );\n            \n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \"Unable to bind at port[\" + \n                listenPort + \"]\", e );\n        }\n        jobEater = new JobEater();\n        jobEater.addJob( new AcceptJob( this, serverChannel ) );\n        jobEater.start();\n    }","id":7642,"modified_method":"public Master( String path, Map<String,String> params, int listenPort )\n    {\n        this.graphDb = new EmbeddedGraphDatabase( path, params );\n        this.xaDsMgr = graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager();\n        for ( XaDataSource xaDs : xaDsMgr.getAllRegisteredDataSources() )\n        {\n            xaDs.keepLogicalLogs( true );\n        }\n        this.port = listenPort;\n        try\n        {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking( false );\n            serverChannel.socket().bind( new InetSocketAddress( listenPort ) );\n            \n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \"Unable to bind at port[\" + \n                listenPort + \"]\", e );\n        }\n        jobEater = new JobEater();\n        jobEater.addJob( new AcceptJob( this, serverChannel ) );\n        jobEater.start();\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getLogLength( long version )\n    {\n        return xaDs.getLogicalLogLength( version );\n    }","id":7643,"modified_method":"public long getLogLength( String xaDsName, long version )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getLogicalLogLength( version );\n        }\n        return -1l;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getCreationTime()\n    {\n        return xaDs.getCreationTime();\n    }","id":7644,"modified_method":"public long getIdentifier( String xaDsName  )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getRandomIdentifier();\n        }\n        return -1;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getVersion()\n    {\n        return xaDs.getCurrentLogVersion();\n    }","id":7645,"modified_method":"public long getVersion( String xaDsName )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getCurrentLogVersion();\n        }\n        return -1;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean hasLog( long version )\n    {\n        return xaDs.hasLogicalLog( version );\n    }","id":7646,"modified_method":"public boolean hasLog( String xaDsName, long version )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.hasLogicalLog( version );\n        }\n        return false;\n    }","commit_id":"f1f1300089e2f2368d33e9ec6e16495156b2b37a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean reconnectToMaster()\n    {\n        masterConnection = new Connection( masterIp, masterPort );\n        while ( !masterConnection.connected() )\n        {\n            if ( masterConnection.connectionRefused() )\n            {\n                return false;\n            }\n        }\n        jobEater.addJob( new ConnectToMasterJob( masterConnection, this ) );\n        return true;\n    }","id":7647,"modified_method":"public boolean reconnectToMaster()\n    {\n        for ( int i = 0; i < masterConnections.length; i++ )\n        {\n            if ( masterConnections[i].connected() )\n            {\n                continue;\n            }\n            masterConnections[i] = new Connection( masterIp, masterPort );\n            while ( !masterConnections[i].connected() )\n            {\n                if ( masterConnections[i].connectionRefused() )\n                {\n                    return false;\n                }\n            }\n            if ( masterConnections[i].connected() )\n            {\n                String name = \"nioneodb\";\n                if ( i == 1 )\n                {\n                    name = \"lucene\";\n                }\n                else if ( i == 2 )\n                {\n                    name = \"lucene-fulltext\";\n                }\n                jobEater.addJob( new ConnectToMasterJob( masterConnections[i], \n                        this, name, xaDataSources[i] ) );\n            }\n        }\n        return true;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public AbstractSlave( String path, Map<String,String> params, \n        String masterIp, int masterPort )\n    {\n        params.put( \"backup_slave\", \"true\" );\n        this.graphDb = new EmbeddedReadOnlyGraphDatabase( path, params );\n        this.xaDs = (NeoStoreXaDataSource) graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager().getXaDataSource( \"nioneodb\" );\n        this.xaDs.makeBackupSlave();\n        recover();\n\n        jobEater = new JobEater();\n        logApplier = new LogApplier( xaDs );\n        jobEater.start();\n        logApplier.start();\n        \n        this.masterIp = masterIp;\n        this.masterPort = masterPort;\n        masterConnection = new Connection( masterIp, masterPort );\n        while ( !masterConnection.connected() )\n        {\n            if ( masterConnection.connectionRefused() )\n            {\n                System.out.println( \"Unable to connect to master\" );\n                break;\n            }\n        }\n        if ( masterConnection.connected() )\n        {\n            jobEater.addJob( new ConnectToMasterJob( masterConnection, this ) );\n        }\n        System.out.println( \"At version: \" + getVersion() );\n    }","id":7648,"modified_method":"public AbstractSlave( String path, Map<String,String> params, \n        String masterIp, int masterPort )\n    {\n        params.put( \"backup_slave\", \"true\" );\n        this.graphDb = new EmbeddedReadOnlyGraphDatabase( path, params );\n        XaDataSourceManager xaDsMgr = graphDb.getConfig().getTxModule().\n            getXaDataSourceManager();\n        XaDataSource nioneo = xaDsMgr.getXaDataSource( \"nioneodb\" );\n        XaDataSource lucene = xaDsMgr.getXaDataSource( \"lucene\" );\n        XaDataSource fulltext = xaDsMgr.getXaDataSource( \"lucene-fulltext\" );\n        if ( lucene != null && fulltext != null )\n        {\n            xaDataSources = new XaDataSource[3];\n            xaDataSources[0] = nioneo;\n            xaDataSources[1] = lucene;\n            xaDataSources[2] = fulltext;\n        }\n        else\n        {\n            xaDataSources = new XaDataSource[1];\n            xaDataSources[0] = nioneo;\n        }\n        for ( XaDataSource xaDs : xaDataSources )\n        {\n            xaDs.makeBackupSlave();\n        }\n        recover();\n\n        jobEater = new JobEater();\n        logApplier = new LogApplier( xaDataSources );\n        jobEater.start();\n        logApplier.start();\n        \n        this.masterIp = masterIp;\n        this.masterPort = masterPort;\n        masterConnections = new Connection[xaDataSources.length];\n        for ( int i = 0; i < masterConnections.length; i++ )\n        {\n            masterConnections[i] = new Connection( masterIp, masterPort );\n            while ( !masterConnections[i].connected() )\n            {\n                if ( masterConnections[i].connectionRefused() )\n                {\n                    System.out.println( \"Unable to connect to master\" );\n                    break;\n                }\n            }\n            if ( masterConnections[i].connected() )\n            {\n                String name = \"nioneodb\";\n                if ( i == 1 )\n                {\n                    name = \"lucene\";\n                }\n                else if ( i == 2 )\n                {\n                    name = \"lucene-fulltext\";\n                }\n                jobEater.addJob( new ConnectToMasterJob( masterConnections[i], \n                        this, name, xaDataSources[i] ) );\n            }\n        }\n//        System.out.println( \"At version: \" + getVersion() );\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean isConnectedToMaster()\n    {\n        return masterConnection.connected();\n    }","id":7649,"modified_method":"public boolean isConnectedToMaster()\n    {\n        for ( Connection masterConnection : masterConnections )\n        {\n            if ( !masterConnection.connected() )\n            {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void recover()\n    {\n        long nextVersion = xaDs.getCurrentLogVersion();\n        while ( xaDs.hasLogicalLog( nextVersion ) )\n        {\n            try\n            {\n                xaDs.applyLog( xaDs.getLogicalLog( nextVersion ) );\n            }\n            catch ( IOException e )\n            {\n                throw new UnderlyingStorageException( \n                    \"Unable to recover slave to consistent state\", e );\n            }\n            nextVersion++;\n        }\n    }","id":7650,"modified_method":"private void recover()\n    {\n        for ( XaDataSource xaDs : xaDataSources )\n        {\n            long nextVersion = xaDs.getCurrentLogVersion();\n            while ( xaDs.hasLogicalLog( nextVersion ) )\n            {\n                try\n                {\n                    xaDs.applyLog( xaDs.getLogicalLog( nextVersion ) );\n                }\n                catch ( IOException e )\n                {\n                    throw new UnderlyingStorageException( \n                        \"Unable to recover slave to consistent state\", e );\n                }\n                nextVersion++;\n            }\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.SLAVE_GREETING );\n        buffer.putLong( slave.getIdentifier() );\n        buffer.putLong( slave.getCreationTime() );\n        buffer.putLong( slave.getVersion() );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","id":7651,"modified_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.SLAVE_GREETING );\n        buffer.putLong( xaDs.getRandomIdentifier() );\n        buffer.putLong( xaDs.getCreationTime() );\n        buffer.putLong( xaDs.getCurrentLogVersion() );\n        byte[] bytes = xaDsName.getBytes();\n        buffer.putInt( bytes.length );\n        buffer.put( bytes );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getResponse()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_VERISON(8)\n            buffer.limit( 9 );\n            int read = connection.read();\n            log( \"Get greeting response\" );\n            if ( read == 1 || read == 9 )\n            {\n                buffer.flip();\n                byte masterGreeting = buffer.get();\n                if ( masterGreeting == HeaderConstants.BYE )\n                {\n                    log( \"Problem connecting to master \" + connection + \n                    \". Got BYE.\" );\n                    close();\n                    return true;\n                }\n                else if ( masterGreeting != HeaderConstants.MASTER_GREETING )\n                {\n                    log( \"Got unkown greeting[\" + masterGreeting + \"] from \" +  \n                        connection );\n                    close();\n                }\n                else if ( read != 9 )\n                {\n                    retries++;\n                    connection.pushBackAllReadData();\n                    return false;\n                }\n                masterVersion = buffer.getLong();\n                log( \"Got master version: \" + masterVersion );\n                if ( masterVersion < slave.getVersion() )\n                {\n                    log( \"Got wrong version [\" + masterVersion + \"]\" );\n                    close();\n                    return true;\n                }\n                setNoRequeue();\n                setChainJob( new HandleMasterConnection( connection, slave, \n                    masterVersion ) );\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7652,"modified_method":"private boolean getResponse()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_VERISON(8)\n            buffer.limit( 9 );\n            int read = connection.read();\n            log( \"Get greeting response\" );\n            if ( read == 1 || read == 9 )\n            {\n                buffer.flip();\n                byte masterGreeting = buffer.get();\n                if ( masterGreeting == HeaderConstants.BYE )\n                {\n                    log( \"Problem connecting to master \" + connection + \n                    \". Got BYE.\" );\n                    close();\n                    return true;\n                }\n                else if ( masterGreeting != HeaderConstants.MASTER_GREETING )\n                {\n                    log( \"Got unkown greeting[\" + masterGreeting + \"] from \" +  \n                        connection );\n                    close();\n                }\n                else if ( read != 9 )\n                {\n                    retries++;\n                    connection.pushBackAllReadData();\n                    return false;\n                }\n                masterVersion = buffer.getLong();\n                log( \"Got master version: \" + masterVersion );\n                if ( masterVersion < xaDs.getCurrentLogVersion() )\n                {\n                    log( \"Got wrong version [\" + masterVersion + \"]\" );\n                    close();\n                    return true;\n                }\n                setNoRequeue();\n                setChainJob( new HandleMasterConnection( connection, slave, \n                    masterVersion, xaDs ) );\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ConnectToMasterJob( Connection connection, AbstractSlave slave )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        setStatus( Status.SETUP_GREETING );\n    }","id":7653,"modified_method":"public ConnectToMasterJob( Connection connection, AbstractSlave slave, \n            String xaDsName, XaDataSource xaDs )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        this.xaDsName = xaDsName;\n        this.xaDs = xaDs;\n        setStatus( Status.SETUP_GREETING );\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.MASTER_GREETING );\n        buffer.putLong( master.getVersion() );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","id":7654,"modified_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.MASTER_GREETING );\n        buffer.putLong( master.getVersion( xaDsName ) );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean sendGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        log( \"Send greeting\" );\n        connection.write();\n        if ( !buffer.hasRemaining() )\n        {\n            releaseWriteBuffer();\n            setNoRequeue();\n            setChainJob( new HandleSlaveConnection( connection, master, slaveVersion ) );\n            return true;\n        }\n        retries++;\n        return false;\n    }","id":7655,"modified_method":"private boolean sendGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        log( \"Send greeting\" );\n        connection.write();\n        if ( !buffer.hasRemaining() )\n        {\n            releaseWriteBuffer();\n            setNoRequeue();\n            setChainJob( new HandleSlaveConnection( connection, master, slaveVersion, xaDsName ) );\n            return true;\n        }\n        retries++;\n        return false;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_ID(8) + DB_TIMESTAMP(8) + DB_VERISON(8)\n            buffer.limit( 25 );\n            int read = connection.read();\n            if ( read == 25 )\n            {\n                buffer.flip();\n                byte slaveGreeting = buffer.get();\n                if ( slaveGreeting != HeaderConstants.SLAVE_GREETING )\n                {\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                long id = buffer.getLong();\n                long timestamp = buffer.getLong();\n                long version = buffer.getLong();\n                long masterId = master.getIdentifier();\n                long masterTimestamp = master.getCreationTime();\n                long masterVersion = master.getVersion();\n                if ( id != master.getIdentifier() || \n                    timestamp != master.getCreationTime() || \n                    version > master.getVersion() )\n                {\n                    log( \"Got wrong id/time/version [\" + id + \"/\" + timestamp + \n                        \"/\" + version + \"]\" + \"[\" + masterId + \"/\" + \n                        masterTimestamp + \"/\" + masterVersion + \"]\" );\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                log( \"Got slave version[\" + version + \"]. I am version[\" + \n                    master.getVersion() + \"]\" );\n                slaveVersion = version;\n                setStatus( Status.SETUP_GREETING );\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7656,"modified_method":"private boolean getGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_ID(8) + DB_TIMESTAMP(8) + DB_VERISON(8) + \n            // NAME_length(4) + NAME\n            // buffer.limit( 25 );\n            int read = connection.read();\n            if ( read > 29 )\n            {\n                buffer.flip();\n                byte slaveGreeting = buffer.get();\n                if ( slaveGreeting != HeaderConstants.SLAVE_GREETING )\n                {\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                long id = buffer.getLong();\n                long timestamp = buffer.getLong();\n                long version = buffer.getLong();\n                int strLen = buffer.getInt();\n                byte[] bytes = new byte[strLen];\n                buffer.get( bytes );\n                xaDsName = new String( bytes );\n                long masterId = master.getIdentifier( xaDsName );\n                long masterTimestamp = master.getCreationTime( xaDsName );\n                long masterVersion = master.getVersion( xaDsName );\n                if ( id != masterId || timestamp != masterTimestamp || \n                    version > masterVersion )\n                {\n                    log( \"Got wrong id/time/version [\" + id + \"/\" + timestamp + \n                        \"/\" + version + \"]\" + \"[\" + masterId + \"/\" + \n                        masterTimestamp + \"/\" + masterVersion + \n                        \"] for data source \" + xaDsName );\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                log( \"Got slave version[\" + version + \"]. I am version[\" + \n                    master.getVersion( xaDsName ) + \"] for data source \" + xaDsName );\n                slaveVersion = version;\n                setStatus( Status.SETUP_GREETING );\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getLog()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        log( \"Get log\" );\n        try\n        {\n            int read = connection.read();\n            if ( read > 0 )\n            {\n                buffer.flip();\n                if ( logToWrite.position() + read <= logLength )\n                {\n                    logToWrite.write( buffer );\n                }\n                else\n                {\n                    int readLimit = buffer.limit();\n                    int logLimit = (int) (logLength - logToWrite.position()); \n                    buffer.limit( logLimit );\n                    logToWrite.write( buffer );\n                    buffer.limit( readLimit );\n                    byte[] pushData = new byte[readLimit - logLimit];\n                    buffer.get( pushData );\n                    connection.pushBackReadData( pushData );\n                }\n                if ( logToWrite.position() >= logLength )\n                {\n                    log( \"Log transfer complete\" );\n                    if ( slave.getVersion() < (masterVersion - 1) )\n                    {\n                        setStatus( Status.SETUP_REQUEST );\n                    }\n                    else\n                    {\n                        setStatus( Status.GET_MESSAGE );\n                    }\n                    logToWrite.close();\n                    String newName = slave.getLogName( logVersionWriting );\n                    File newLog = new File( newName );\n                    if ( newLog.exists() )\n                    {\n                        log( \"Error new log file[\" + newName + \n                                \"] already exist\" );\n                        close();\n                    }\n                    if ( !tempFile.renameTo( new File( newName ) ) )\n                    {\n                        log( \"Unable to move log to \" + newName );\n                        close();\n                    }\n                    logVersionWriting = -1;\n                    tempFile = null;\n                    logToWrite = null;\n                    // slave.tryApplyNewLog();\n                }\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException e )\n        {\n            close();\n            log( \"Error getting log.\", e );\n            return true;\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7657,"modified_method":"private boolean getLog()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        log( \"Get log\" );\n        try\n        {\n            int read = connection.read();\n            if ( read > 0 )\n            {\n                buffer.flip();\n                if ( logToWrite.position() + read <= logLength )\n                {\n                    logToWrite.write( buffer );\n                }\n                else\n                {\n                    int readLimit = buffer.limit();\n                    int logLimit = (int) (logLength - logToWrite.position()); \n                    buffer.limit( logLimit );\n                    logToWrite.write( buffer );\n                    buffer.limit( readLimit );\n                    byte[] pushData = new byte[readLimit - logLimit];\n                    buffer.get( pushData );\n                    connection.pushBackReadData( pushData );\n                }\n                if ( logToWrite.position() >= logLength )\n                {\n                    log( \"Log transfer complete\" );\n                    if ( xaDs.getCurrentLogVersion() < (masterVersion - 1) )\n                    {\n                        setStatus( Status.SETUP_REQUEST );\n                    }\n                    else\n                    {\n                        setStatus( Status.GET_MESSAGE );\n                    }\n                    logToWrite.close();\n                    String newName = xaDs.getFileName( logVersionWriting );\n                    File newLog = new File( newName );\n                    if ( newLog.exists() )\n                    {\n                        log( \"Error new log file[\" + newName + \n                                \"] already exist\" );\n                        close();\n                    }\n                    if ( !tempFile.renameTo( new File( newName ) ) )\n                    {\n                        log( \"Unable to move log to \" + newName );\n                        close();\n                    }\n                    logVersionWriting = -1;\n                    tempFile = null;\n                    logToWrite = null;\n                    // slave.tryApplyNewLog();\n                }\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException e )\n        {\n            close();\n            log( \"Error getting log.\", e );\n            return true;\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupRequest()\n    {\n        long version = slave.getVersion();\n        while ( version < masterVersion )\n        {\n            if ( slave.hasLog( version ) )\n            {\n                version++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ( version == masterVersion )\n        {\n            setStatus( Status.GET_MESSAGE );\n            return true;\n        }\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.REQUEST_LOG );\n        buffer.putLong( version );\n        buffer.flip();\n        log( \"Setup request: \" + version );\n        setStatus( Status.SEND_REQUEST );\n        retries = 0;\n        return true;\n    }","id":7658,"modified_method":"private boolean setupRequest()\n    {\n        long version = xaDs.getCurrentLogVersion();\n        while ( version < masterVersion )\n        {\n            if ( xaDs.hasLogicalLog( version ) )\n            {\n                version++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ( version == masterVersion )\n        {\n            setStatus( Status.GET_MESSAGE );\n            return true;\n        }\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.REQUEST_LOG );\n        buffer.putLong( version );\n        buffer.flip();\n        log( \"Setup request: \" + version );\n        setStatus( Status.SEND_REQUEST );\n        retries = 0;\n        return true;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HandleMasterConnection( Connection connection, AbstractSlave slave, \n        long masterVersion )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        this.masterVersion = masterVersion;\n        if ( slave.getVersion() < (masterVersion - 1) )\n        {\n            setStatus( Status.SETUP_REQUEST );\n        }\n        else\n        {\n            setStatus( Status.GET_MESSAGE );\n        }\n    }","id":7659,"modified_method":"public HandleMasterConnection( Connection connection, AbstractSlave slave, \n        long masterVersion, XaDataSource xaDs )\n    {\n        super( connection, slave );\n        this.xaDs = xaDs;\n        this.masterVersion = masterVersion;\n        if ( xaDs.getCurrentLogVersion() < (masterVersion - 1) )\n        {\n            setStatus( Status.SETUP_REQUEST );\n        }\n        else\n        {\n            setStatus( Status.GET_MESSAGE );\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + VERSION(8) + LOG_LENGTH(8)\n            buffer.limit( 17 );\n            int read = connection.read();\n            if ( read == 17 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.OFFER_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                long version = buffer.getLong();\n                if ( version < slave.getVersion() )\n                {\n                    log( \"Got wrong version [\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                    return true;\n                }\n                logLength = buffer.getLong();\n                log( \"Got offer: \" + version + \",\" + logLength );\n                if ( !slave.hasLog( version ) )\n                {\n                    try\n                    {\n                        logVersionWriting = version;\n                        tempFile = new File( \"logical-transfer.v\" + \n                                Long.toString( version ) );\n                        logToWrite = new RandomAccessFile( tempFile, \n                            \"rw\").getChannel();\n                        logToWrite.truncate( 0 );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to setup logical log[\" + version + \n                            \"] for writing\", e );\n                    }\n                    setStatus( Status.SETUP_OK );\n                }\n                else\n                {\n                    log( \"We already have log version[\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7660,"modified_method":"private boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + VERSION(8) + LOG_LENGTH(8)\n            buffer.limit( 17 );\n            int read = connection.read();\n            if ( read == 17 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.OFFER_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                long version = buffer.getLong();\n                if ( version < xaDs.getCurrentLogVersion() )\n                {\n                    log( \"Got wrong version [\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                    return true;\n                }\n                logLength = buffer.getLong();\n                log( \"Got offer: \" + version + \",\" + logLength );\n                if ( !xaDs.hasLogicalLog( version ) )\n                {\n                    try\n                    {\n                        logVersionWriting = version;\n                        tempFile = new File( \"logical-transfer.v\" + \n                                Long.toString( version ) );\n                        logToWrite = new RandomAccessFile( tempFile, \n                            \"rw\").getChannel();\n                        logToWrite.truncate( 0 );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to setup logical log[\" + version + \n                            \"] for writing\", e );\n                    }\n                    setStatus( Status.SETUP_OK );\n                }\n                else\n                {\n                    log( \"We already have log version[\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized boolean offerLogToSlave( long version )\n    {\n        if ( !getConnection().connected() )\n        {\n            System.out.println( \"Not connected\" );\n            return false;\n        }\n        if ( logLength != -1 || logVersionToSend != -1 || logToSend != null )\n        {\n            // we already sending a version\n            return true;\n        }\n        try\n        {\n            if ( getStatus() == Status.GET_MESSAGE )\n            {\n                logToSend = master.getLog( version );\n                logLength = master.getLogLength( version );\n                logVersionToSend = version;\n                setStatus( Status.SETUP_OFFER_LOG );\n            }\n            return true;\n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \n                \"Unable to get logical log[\" + logVersionToSend + \n                \"]\", e );\n        }\n    }","id":7661,"modified_method":"public synchronized boolean offerLogToSlave( long version )\n    {\n        if ( !getConnection().connected() )\n        {\n            System.out.println( \"Not connected\" );\n            return false;\n        }\n        if ( logLength != -1 || logVersionToSend != -1 || logToSend != null )\n        {\n            // we already sending a version\n            return true;\n        }\n        try\n        {\n            if ( getStatus() == Status.GET_MESSAGE )\n            {\n                logToSend = master.getLog( xaDsName, version );\n                logLength = master.getLogLength( xaDsName, version );\n                logVersionToSend = version;\n                setStatus( Status.SETUP_OFFER_LOG );\n            }\n            return true;\n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \n                \"Unable to get logical log[\" + logVersionToSend + \n                \"]\", e );\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized boolean getMessage()\n    {\n//        if ( logVersionToSend > -1 && logLength > -1 && logToSend != null )\n//        {\n//            setStatus( Status.SETUP_OFFER_LOG );\n//            return true;\n//        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            buffer.limit( 9 );\n            int read = connection.read();\n            if ( read == 9 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.REQUEST_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                logVersionToSend = buffer.getLong();\n                if ( logVersionToSend > master.getVersion() )\n                {\n                    log( \"Got wrong version [\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                log( \"Slave request: \" + logVersionToSend );\n                if ( master.hasLog( logVersionToSend ) )\n                {\n                    try\n                    {\n                        logToSend = master.getLog( logVersionToSend );\n                        logLength = master.getLogLength( logVersionToSend );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to get logical log[\" + logVersionToSend + \n                            \"]\", e );\n                    }\n                    setStatus( Status.SETUP_OFFER_LOG );\n                }\n                else\n                {\n                    log( \"No such log version[\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7662,"modified_method":"private synchronized boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            buffer.limit( 9 );\n            int read = connection.read();\n            if ( read == 9 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.REQUEST_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                logVersionToSend = buffer.getLong();\n                if ( logVersionToSend > master.getVersion( xaDsName ) )\n                {\n                    log( \"Got wrong version [\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                log( \"Slave request: \" + logVersionToSend );\n                if ( master.hasLog( xaDsName, logVersionToSend ) )\n                {\n                    try\n                    {\n                        logToSend = master.getLog( xaDsName, logVersionToSend );\n                        logLength = master.getLogLength( xaDsName, logVersionToSend );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to get logical log[\" + logVersionToSend + \n                            \"]\", e );\n                    }\n                    setStatus( Status.SETUP_OFFER_LOG );\n                }\n                else\n                {\n                    log( \"No such log version[\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HandleSlaveConnection( Connection connection, Master master, \n        long slaveVersion )\n    {\n        super( connection, master );\n        this.master = master;\n/*        if ( master.hasLog( slaveVersion ) )\n        {\n            logVersionToSend = slaveVersion;\n            logLength = master.getLogLength( slaveVersion );\n            \n            try\n            {\n                logToSend = master.getLog( slaveVersion );\n            }\n            catch ( IOException e )\n            {\n                throw new SocketException( \"Error getting next log\", e );\n            }\n        }*/\n        setStatus( Status.GET_MESSAGE );\n    }","id":7663,"modified_method":"public HandleSlaveConnection( Connection connection, Master master, \n        long slaveVersion, String xaDsName )\n    {\n        super( connection, master );\n        this.master = master;\n        this.xaDsName = xaDsName;\n        setStatus( Status.GET_MESSAGE );\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"LogApplier( NeoStoreXaDataSource xaDs )\n    {\n        this.xaDs = xaDs;\n    }","id":7664,"modified_method":"LogApplier( XaDataSource[] xaDataSources )\n    {\n        this.xaDataSources = xaDataSources;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void run()\n    {\n        try\n        {\n            while ( run )\n            {\n//                Long logVersion = queue.poll();\n//                if ( logVersion != null )\n//                {\n                long logVersion = xaDs.getCurrentLogVersion();\n                if ( xaDs.hasLogicalLog( logVersion ) )\n                {\n                    ReadableByteChannel logChannel = \n                        xaDs.getLogicalLog( logVersion );\n                    xaDs.applyLog( logChannel );\n                }\n                else\n                {\n                    synchronized ( this )\n                    {\n                        try\n                        {\n                            this.wait( 250 );\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            interrupted();\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            System.err.println( \"Failed to apply log: \" + e );\n            e.printStackTrace();\n        }\n        finally\n        {\n            run = false;\n        }\n    }","id":7665,"modified_method":"public void run()\n    {\n        try\n        {\n            while ( run )\n            {\n                for ( XaDataSource xaDs : xaDataSources )\n                {\n                    long logVersion = xaDs.getCurrentLogVersion();\n                    if ( xaDs.hasLogicalLog( logVersion ) )\n                    {\n                        ReadableByteChannel logChannel = \n                            xaDs.getLogicalLog( logVersion );\n                        xaDs.applyLog( logChannel );\n                    }\n                    else\n                    {\n                        synchronized ( this )\n                        {\n                            try\n                            {\n                                this.wait( 250 );\n                            }\n                            catch ( InterruptedException e )\n                            {\n                                interrupted();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            System.err.println( \"Failed to apply log: \" + e );\n            e.printStackTrace();\n        }\n        finally\n        {\n            run = false;\n        }\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ReadableByteChannel getLog( long version ) throws IOException\n    {\n        return xaDs.getLogicalLog( version );\n    }","id":7666,"modified_method":"public long getCreationTime( String xaDsName )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getCreationTime();\n        }\n        return -1;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getCreationTime()\n    {\n        return xaDs.getCreationTime();\n    }","id":7667,"modified_method":"public long getIdentifier( String xaDsName  )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getRandomIdentifier();\n        }\n        return -1;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getVersion()\n    {\n        return xaDs.getCurrentLogVersion();\n    }","id":7668,"modified_method":"public long getVersion( String xaDsName )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getCurrentLogVersion();\n        }\n        return -1;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Master( String path, Map<String,String> params, int listenPort )\n    {\n        this.graphDb = new EmbeddedGraphDatabase( path, params );\n        this.xaDs = (NeoStoreXaDataSource) graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager().getXaDataSource( \"nioneodb\" );\n        xaDs.keepLogicalLogs( true );\n        this.port = listenPort;\n        try\n        {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking( false );\n            serverChannel.socket().bind( new InetSocketAddress( listenPort ) );\n            \n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \"Unable to bind at port[\" + \n                listenPort + \"]\", e );\n        }\n        jobEater = new JobEater();\n        jobEater.addJob( new AcceptJob( this, serverChannel ) );\n        jobEater.start();\n    }","id":7669,"modified_method":"public Master( String path, Map<String,String> params, int listenPort )\n    {\n        this.graphDb = new EmbeddedGraphDatabase( path, params );\n        this.xaDsMgr = graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager();\n        for ( XaDataSource xaDs : xaDsMgr.getAllRegisteredDataSources() )\n        {\n            xaDs.keepLogicalLogs( true );\n        }\n        this.port = listenPort;\n        try\n        {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking( false );\n            serverChannel.socket().bind( new InetSocketAddress( listenPort ) );\n            \n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \"Unable to bind at port[\" + \n                listenPort + \"]\", e );\n        }\n        jobEater = new JobEater();\n        jobEater.addJob( new AcceptJob( this, serverChannel ) );\n        jobEater.start();\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getLogLength( long version )\n    {\n        return xaDs.getLogicalLogLength( version );\n    }","id":7670,"modified_method":"public long getLogLength( String xaDsName, long version )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getLogicalLogLength( version );\n        }\n        return -1l;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean hasLog( long version )\n    {\n        return xaDs.hasLogicalLog( version );\n    }","id":7671,"modified_method":"public boolean hasLog( String xaDsName, long version )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.hasLogicalLog( version );\n        }\n        return false;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void rotateLogAndPushToSlaves() throws IOException\n    {\n        if ( slaveList.size() == 0 )\n        {\n            return;\n        }\n        long version = getVersion();\n        xaDs.rotateLogicalLog();\n        ArrayList<HandleSlaveConnection> newList = \n            new ArrayList<HandleSlaveConnection>();\n        for ( HandleSlaveConnection slave : slaveList )\n        {\n            if ( !slave.offerLogToSlave( version ) )\n            {\n                System.out.println( \"Failed to offer log to slave: \" + slave );\n            }\n            else\n            {\n                newList.add( slave );\n            }\n        }\n        slaveList = newList;\n    }","id":7672,"modified_method":"public void rotateLogAndPushToSlaves() throws IOException\n    {\n        if ( slaveList.size() == 0 )\n        {\n            return;\n        }\n        ArrayList<HandleSlaveConnection> newList = \n            new ArrayList<HandleSlaveConnection>();\n        for ( HandleSlaveConnection slave : slaveList )\n        {\n            XaDataSource xaDs = xaDsMgr.getXaDataSource( slave.getXaDsName() );\n            if ( xaDs != null )\n            {\n                long version = xaDs.getCurrentLogVersion();\n                xaDs.rotateLogicalLog();\n                if ( !slave.offerLogToSlave( version ) )\n                {\n                    System.out.println( \"Failed to offer log to slave: \" + slave );\n                }\n                else\n                {\n                    newList.add( slave );\n                }\n            }\n        }\n        slaveList = newList;\n    }","commit_id":"062776fab6a9ca853d0c59bf8cf9d0c2a253de9f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public AbstractSlave( String path, Map<String,String> params, \n        String masterIp, int masterPort )\n    {\n        params.put( \"backup_slave\", \"true\" );\n        this.graphDb = new EmbeddedReadOnlyGraphDatabase( path, params );\n        this.xaDs = (NeoStoreXaDataSource) graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager().getXaDataSource( \"nioneodb\" );\n        this.xaDs.makeBackupSlave();\n        recover();\n\n        jobEater = new JobEater();\n        logApplier = new LogApplier( xaDs );\n        jobEater.start();\n        logApplier.start();\n        \n        this.masterIp = masterIp;\n        this.masterPort = masterPort;\n        masterConnection = new Connection( masterIp, masterPort );\n        while ( !masterConnection.connected() )\n        {\n            if ( masterConnection.connectionRefused() )\n            {\n                System.out.println( \"Unable to connect to master\" );\n                break;\n            }\n        }\n        if ( masterConnection.connected() )\n        {\n            jobEater.addJob( new ConnectToMasterJob( masterConnection, this ) );\n        }\n        System.out.println( \"At version: \" + getVersion() );\n    }","id":7673,"modified_method":"public AbstractSlave( String path, Map<String,String> params, \n        String masterIp, int masterPort )\n    {\n        params.put( \"backup_slave\", \"true\" );\n        this.graphDb = new EmbeddedReadOnlyGraphDatabase( path, params );\n        XaDataSourceManager xaDsMgr = graphDb.getConfig().getTxModule().\n            getXaDataSourceManager();\n        XaDataSource nioneo = xaDsMgr.getXaDataSource( \"nioneodb\" );\n        XaDataSource lucene = xaDsMgr.getXaDataSource( \"lucene\" );\n        XaDataSource fulltext = xaDsMgr.getXaDataSource( \"lucene-fulltext\" );\n        if ( lucene != null && fulltext != null )\n        {\n            xaDataSources = new XaDataSource[3];\n            xaDataSources[0] = nioneo;\n            xaDataSources[1] = lucene;\n            xaDataSources[2] = fulltext;\n        }\n        else\n        {\n            xaDataSources = new XaDataSource[1];\n            xaDataSources[0] = nioneo;\n        }\n        for ( XaDataSource xaDs : xaDataSources )\n        {\n            xaDs.makeBackupSlave();\n        }\n        recover();\n\n        jobEater = new JobEater();\n        logApplier = new LogApplier( xaDataSources );\n        jobEater.start();\n        logApplier.start();\n        \n        this.masterIp = masterIp;\n        this.masterPort = masterPort;\n        masterConnections = new Connection[xaDataSources.length];\n        for ( int i = 0; i < masterConnections.length; i++ )\n        {\n            masterConnections[i] = new Connection( masterIp, masterPort );\n            while ( !masterConnections[i].connected() )\n            {\n                if ( masterConnections[i].connectionRefused() )\n                {\n                    System.out.println( \"Unable to connect to master\" );\n                    break;\n                }\n            }\n            if ( masterConnections[i].connected() )\n            {\n                String name = \"nioneodb\";\n                if ( i == 1 )\n                {\n                    name = \"lucene\";\n                }\n                else if ( i == 2 )\n                {\n                    name = \"lucene-fulltext\";\n                }\n                jobEater.addJob( new ConnectToMasterJob( masterConnections[i], \n                        this, name, xaDataSources[i] ) );\n            }\n        }\n//        System.out.println( \"At version: \" + getVersion() );\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void recover()\n    {\n        long nextVersion = xaDs.getCurrentLogVersion();\n        while ( xaDs.hasLogicalLog( nextVersion ) )\n        {\n            try\n            {\n                xaDs.applyLog( xaDs.getLogicalLog( nextVersion ) );\n            }\n            catch ( IOException e )\n            {\n                throw new UnderlyingStorageException( \n                    \"Unable to recover slave to consistent state\", e );\n            }\n            nextVersion++;\n        }\n    }","id":7674,"modified_method":"private void recover()\n    {\n        for ( XaDataSource xaDs : xaDataSources )\n        {\n            long nextVersion = xaDs.getCurrentLogVersion();\n            while ( xaDs.hasLogicalLog( nextVersion ) )\n            {\n                try\n                {\n                    xaDs.applyLog( xaDs.getLogicalLog( nextVersion ) );\n                }\n                catch ( IOException e )\n                {\n                    throw new UnderlyingStorageException( \n                        \"Unable to recover slave to consistent state\", e );\n                }\n                nextVersion++;\n            }\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean reconnectToMaster()\n    {\n        masterConnection = new Connection( masterIp, masterPort );\n        while ( !masterConnection.connected() )\n        {\n            if ( masterConnection.connectionRefused() )\n            {\n                return false;\n            }\n        }\n        jobEater.addJob( new ConnectToMasterJob( masterConnection, this ) );\n        return true;\n    }","id":7675,"modified_method":"public boolean reconnectToMaster()\n    {\n        for ( int i = 0; i < masterConnections.length; i++ )\n        {\n            if ( masterConnections[i].connected() )\n            {\n                continue;\n            }\n            masterConnections[i] = new Connection( masterIp, masterPort );\n            while ( !masterConnections[i].connected() )\n            {\n                if ( masterConnections[i].connectionRefused() )\n                {\n                    return false;\n                }\n            }\n            if ( masterConnections[i].connected() )\n            {\n                String name = \"nioneodb\";\n                if ( i == 1 )\n                {\n                    name = \"lucene\";\n                }\n                else if ( i == 2 )\n                {\n                    name = \"lucene-fulltext\";\n                }\n                jobEater.addJob( new ConnectToMasterJob( masterConnections[i], \n                        this, name, xaDataSources[i] ) );\n            }\n        }\n        return true;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean isConnectedToMaster()\n    {\n        return masterConnection.connected();\n    }","id":7676,"modified_method":"public boolean isConnectedToMaster()\n    {\n        for ( Connection masterConnection : masterConnections )\n        {\n            if ( !masterConnection.connected() )\n            {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ConnectToMasterJob( Connection connection, AbstractSlave slave )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        setStatus( Status.SETUP_GREETING );\n    }","id":7677,"modified_method":"public ConnectToMasterJob( Connection connection, AbstractSlave slave, \n            String xaDsName, XaDataSource xaDs )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        this.xaDsName = xaDsName;\n        this.xaDs = xaDs;\n        setStatus( Status.SETUP_GREETING );\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.SLAVE_GREETING );\n        buffer.putLong( slave.getIdentifier() );\n        buffer.putLong( slave.getCreationTime() );\n        buffer.putLong( slave.getVersion() );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","id":7678,"modified_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.SLAVE_GREETING );\n        buffer.putLong( xaDs.getRandomIdentifier() );\n        buffer.putLong( xaDs.getCreationTime() );\n        buffer.putLong( xaDs.getCurrentLogVersion() );\n        byte[] bytes = xaDsName.getBytes();\n        buffer.putInt( bytes.length );\n        buffer.put( bytes );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getResponse()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_VERISON(8)\n            buffer.limit( 9 );\n            int read = connection.read();\n            log( \"Get greeting response\" );\n            if ( read == 1 || read == 9 )\n            {\n                buffer.flip();\n                byte masterGreeting = buffer.get();\n                if ( masterGreeting == HeaderConstants.BYE )\n                {\n                    log( \"Problem connecting to master \" + connection + \n                    \". Got BYE.\" );\n                    close();\n                    return true;\n                }\n                else if ( masterGreeting != HeaderConstants.MASTER_GREETING )\n                {\n                    log( \"Got unkown greeting[\" + masterGreeting + \"] from \" +  \n                        connection );\n                    close();\n                }\n                else if ( read != 9 )\n                {\n                    retries++;\n                    connection.pushBackAllReadData();\n                    return false;\n                }\n                masterVersion = buffer.getLong();\n                log( \"Got master version: \" + masterVersion );\n                if ( masterVersion < slave.getVersion() )\n                {\n                    log( \"Got wrong version [\" + masterVersion + \"]\" );\n                    close();\n                    return true;\n                }\n                setNoRequeue();\n                setChainJob( new HandleMasterConnection( connection, slave, \n                    masterVersion ) );\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7679,"modified_method":"private boolean getResponse()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_VERISON(8)\n            buffer.limit( 9 );\n            int read = connection.read();\n            log( \"Get greeting response\" );\n            if ( read == 1 || read == 9 )\n            {\n                buffer.flip();\n                byte masterGreeting = buffer.get();\n                if ( masterGreeting == HeaderConstants.BYE )\n                {\n                    log( \"Problem connecting to master \" + connection + \n                    \". Got BYE.\" );\n                    close();\n                    return true;\n                }\n                else if ( masterGreeting != HeaderConstants.MASTER_GREETING )\n                {\n                    log( \"Got unkown greeting[\" + masterGreeting + \"] from \" +  \n                        connection );\n                    close();\n                }\n                else if ( read != 9 )\n                {\n                    retries++;\n                    connection.pushBackAllReadData();\n                    return false;\n                }\n                masterVersion = buffer.getLong();\n                log( \"Got master version: \" + masterVersion );\n                if ( masterVersion < xaDs.getCurrentLogVersion() )\n                {\n                    log( \"Got wrong version [\" + masterVersion + \"]\" );\n                    close();\n                    return true;\n                }\n                setNoRequeue();\n                setChainJob( new HandleMasterConnection( connection, slave, \n                    masterVersion, xaDs ) );\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_ID(8) + DB_TIMESTAMP(8) + DB_VERISON(8)\n            buffer.limit( 25 );\n            int read = connection.read();\n            if ( read == 25 )\n            {\n                buffer.flip();\n                byte slaveGreeting = buffer.get();\n                if ( slaveGreeting != HeaderConstants.SLAVE_GREETING )\n                {\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                long id = buffer.getLong();\n                long timestamp = buffer.getLong();\n                long version = buffer.getLong();\n                long masterId = master.getIdentifier();\n                long masterTimestamp = master.getCreationTime();\n                long masterVersion = master.getVersion();\n                if ( id != master.getIdentifier() || \n                    timestamp != master.getCreationTime() || \n                    version > master.getVersion() )\n                {\n                    log( \"Got wrong id/time/version [\" + id + \"/\" + timestamp + \n                        \"/\" + version + \"]\" + \"[\" + masterId + \"/\" + \n                        masterTimestamp + \"/\" + masterVersion + \"]\" );\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                log( \"Got slave version[\" + version + \"]. I am version[\" + \n                    master.getVersion() + \"]\" );\n                slaveVersion = version;\n                setStatus( Status.SETUP_GREETING );\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7680,"modified_method":"private boolean getGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + DB_ID(8) + DB_TIMESTAMP(8) + DB_VERISON(8) + \n            // NAME_length(4) + NAME\n            // buffer.limit( 25 );\n            int read = connection.read();\n            if ( read > 29 )\n            {\n                buffer.flip();\n                byte slaveGreeting = buffer.get();\n                if ( slaveGreeting != HeaderConstants.SLAVE_GREETING )\n                {\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                long id = buffer.getLong();\n                long timestamp = buffer.getLong();\n                long version = buffer.getLong();\n                int strLen = buffer.getInt();\n                byte[] bytes = new byte[strLen];\n                buffer.get( bytes );\n                xaDsName = new String( bytes );\n                long masterId = master.getIdentifier( xaDsName );\n                long masterTimestamp = master.getCreationTime( xaDsName );\n                long masterVersion = master.getVersion( xaDsName );\n                if ( id != masterId || timestamp != masterTimestamp || \n                    version > masterVersion )\n                {\n                    log( \"Got wrong id/time/version [\" + id + \"/\" + timestamp + \n                        \"/\" + version + \"]\" + \"[\" + masterId + \"/\" + \n                        masterTimestamp + \"/\" + masterVersion + \n                        \"] for data source \" + xaDsName );\n                    setStatus( Status.SEND_BYE );\n                    return true;\n                }\n                log( \"Got slave version[\" + version + \"]. I am version[\" + \n                    master.getVersion( xaDsName ) + \"] for data source \" + xaDsName );\n                slaveVersion = version;\n                setStatus( Status.SETUP_GREETING );\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                retries++;\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean sendGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        log( \"Send greeting\" );\n        connection.write();\n        if ( !buffer.hasRemaining() )\n        {\n            releaseWriteBuffer();\n            setNoRequeue();\n            setChainJob( new HandleSlaveConnection( connection, master, slaveVersion ) );\n            return true;\n        }\n        retries++;\n        return false;\n    }","id":7681,"modified_method":"private boolean sendGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        log( \"Send greeting\" );\n        connection.write();\n        if ( !buffer.hasRemaining() )\n        {\n            releaseWriteBuffer();\n            setNoRequeue();\n            setChainJob( new HandleSlaveConnection( connection, master, slaveVersion, xaDsName ) );\n            return true;\n        }\n        retries++;\n        return false;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.MASTER_GREETING );\n        buffer.putLong( master.getVersion() );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","id":7682,"modified_method":"private boolean setupGreeting()\n    {\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.MASTER_GREETING );\n        buffer.putLong( master.getVersion( xaDsName ) );\n        buffer.flip();\n        log( \"Setup greeting\" );\n        setStatus( Status.SEND_GREETING );\n        retries = 0;\n        return true;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getLog()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        log( \"Get log\" );\n        try\n        {\n            int read = connection.read();\n            if ( read > 0 )\n            {\n                buffer.flip();\n                if ( logToWrite.position() + read <= logLength )\n                {\n                    logToWrite.write( buffer );\n                }\n                else\n                {\n                    int readLimit = buffer.limit();\n                    int logLimit = (int) (logLength - logToWrite.position()); \n                    buffer.limit( logLimit );\n                    logToWrite.write( buffer );\n                    buffer.limit( readLimit );\n                    byte[] pushData = new byte[readLimit - logLimit];\n                    buffer.get( pushData );\n                    connection.pushBackReadData( pushData );\n                }\n                if ( logToWrite.position() >= logLength )\n                {\n                    log( \"Log transfer complete\" );\n                    if ( slave.getVersion() < (masterVersion - 1) )\n                    {\n                        setStatus( Status.SETUP_REQUEST );\n                    }\n                    else\n                    {\n                        setStatus( Status.GET_MESSAGE );\n                    }\n                    logToWrite.close();\n                    String newName = slave.getLogName( logVersionWriting );\n                    File newLog = new File( newName );\n                    if ( newLog.exists() )\n                    {\n                        log( \"Error new log file[\" + newName + \n                                \"] already exist\" );\n                        close();\n                    }\n                    if ( !tempFile.renameTo( new File( newName ) ) )\n                    {\n                        log( \"Unable to move log to \" + newName );\n                        close();\n                    }\n                    logVersionWriting = -1;\n                    tempFile = null;\n                    logToWrite = null;\n                    // slave.tryApplyNewLog();\n                }\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException e )\n        {\n            close();\n            log( \"Error getting log.\", e );\n            return true;\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7683,"modified_method":"private boolean getLog()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        log( \"Get log\" );\n        try\n        {\n            int read = connection.read();\n            if ( read > 0 )\n            {\n                buffer.flip();\n                if ( logToWrite.position() + read <= logLength )\n                {\n                    logToWrite.write( buffer );\n                }\n                else\n                {\n                    int readLimit = buffer.limit();\n                    int logLimit = (int) (logLength - logToWrite.position()); \n                    buffer.limit( logLimit );\n                    logToWrite.write( buffer );\n                    buffer.limit( readLimit );\n                    byte[] pushData = new byte[readLimit - logLimit];\n                    buffer.get( pushData );\n                    connection.pushBackReadData( pushData );\n                }\n                if ( logToWrite.position() >= logLength )\n                {\n                    log( \"Log transfer complete\" );\n                    if ( xaDs.getCurrentLogVersion() < (masterVersion - 1) )\n                    {\n                        setStatus( Status.SETUP_REQUEST );\n                    }\n                    else\n                    {\n                        setStatus( Status.GET_MESSAGE );\n                    }\n                    logToWrite.close();\n                    String newName = xaDs.getFileName( logVersionWriting );\n                    File newLog = new File( newName );\n                    if ( newLog.exists() )\n                    {\n                        log( \"Error new log file[\" + newName + \n                                \"] already exist\" );\n                        close();\n                    }\n                    if ( !tempFile.renameTo( new File( newName ) ) )\n                    {\n                        log( \"Unable to move log to \" + newName );\n                        close();\n                    }\n                    logVersionWriting = -1;\n                    tempFile = null;\n                    logToWrite = null;\n                    // slave.tryApplyNewLog();\n                }\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException e )\n        {\n            close();\n            log( \"Error getting log.\", e );\n            return true;\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean setupRequest()\n    {\n        long version = slave.getVersion();\n        while ( version < masterVersion )\n        {\n            if ( slave.hasLog( version ) )\n            {\n                version++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ( version == masterVersion )\n        {\n            setStatus( Status.GET_MESSAGE );\n            return true;\n        }\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.REQUEST_LOG );\n        buffer.putLong( version );\n        buffer.flip();\n        log( \"Setup request: \" + version );\n        setStatus( Status.SEND_REQUEST );\n        retries = 0;\n        return true;\n    }","id":7684,"modified_method":"private boolean setupRequest()\n    {\n        long version = xaDs.getCurrentLogVersion();\n        while ( version < masterVersion )\n        {\n            if ( xaDs.hasLogicalLog( version ) )\n            {\n                version++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ( version == masterVersion )\n        {\n            setStatus( Status.GET_MESSAGE );\n            return true;\n        }\n        if ( retries > 20 )\n        {\n            close();\n        }\n        if ( !acquireWriteBuffer() )\n        {\n            retries++;\n            return false;\n        }\n        buffer.put( HeaderConstants.REQUEST_LOG );\n        buffer.putLong( version );\n        buffer.flip();\n        log( \"Setup request: \" + version );\n        setStatus( Status.SEND_REQUEST );\n        retries = 0;\n        return true;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + VERSION(8) + LOG_LENGTH(8)\n            buffer.limit( 17 );\n            int read = connection.read();\n            if ( read == 17 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.OFFER_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                long version = buffer.getLong();\n                if ( version < slave.getVersion() )\n                {\n                    log( \"Got wrong version [\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                    return true;\n                }\n                logLength = buffer.getLong();\n                log( \"Got offer: \" + version + \",\" + logLength );\n                if ( !slave.hasLog( version ) )\n                {\n                    try\n                    {\n                        logVersionWriting = version;\n                        tempFile = new File( \"logical-transfer.v\" + \n                                Long.toString( version ) );\n                        logToWrite = new RandomAccessFile( tempFile, \n                            \"rw\").getChannel();\n                        logToWrite.truncate( 0 );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to setup logical log[\" + version + \n                            \"] for writing\", e );\n                    }\n                    setStatus( Status.SETUP_OK );\n                }\n                else\n                {\n                    log( \"We already have log version[\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7685,"modified_method":"private boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            // HEADER(1) + VERSION(8) + LOG_LENGTH(8)\n            buffer.limit( 17 );\n            int read = connection.read();\n            if ( read == 17 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.OFFER_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                long version = buffer.getLong();\n                if ( version < xaDs.getCurrentLogVersion() )\n                {\n                    log( \"Got wrong version [\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                    return true;\n                }\n                logLength = buffer.getLong();\n                log( \"Got offer: \" + version + \",\" + logLength );\n                if ( !xaDs.hasLogicalLog( version ) )\n                {\n                    try\n                    {\n                        logVersionWriting = version;\n                        tempFile = new File( \"logical-transfer.v\" + \n                                Long.toString( version ) );\n                        logToWrite = new RandomAccessFile( tempFile, \n                            \"rw\").getChannel();\n                        logToWrite.truncate( 0 );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to setup logical log[\" + version + \n                            \"] for writing\", e );\n                    }\n                    setStatus( Status.SETUP_OK );\n                }\n                else\n                {\n                    log( \"We already have log version[\" + version + \"]\" );\n                    setStatus( Status.SETUP_NOT_OK );\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HandleMasterConnection( Connection connection, AbstractSlave slave, \n        long masterVersion )\n    {\n        super( connection, slave );\n        this.slave = slave;\n        this.masterVersion = masterVersion;\n        if ( slave.getVersion() < (masterVersion - 1) )\n        {\n            setStatus( Status.SETUP_REQUEST );\n        }\n        else\n        {\n            setStatus( Status.GET_MESSAGE );\n        }\n    }","id":7686,"modified_method":"public HandleMasterConnection( Connection connection, AbstractSlave slave, \n        long masterVersion, XaDataSource xaDs )\n    {\n        super( connection, slave );\n        this.xaDs = xaDs;\n        this.masterVersion = masterVersion;\n        if ( xaDs.getCurrentLogVersion() < (masterVersion - 1) )\n        {\n            setStatus( Status.SETUP_REQUEST );\n        }\n        else\n        {\n            setStatus( Status.GET_MESSAGE );\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized boolean offerLogToSlave( long version )\n    {\n        if ( !getConnection().connected() )\n        {\n            System.out.println( \"Not connected\" );\n            return false;\n        }\n        if ( logLength != -1 || logVersionToSend != -1 || logToSend != null )\n        {\n            // we already sending a version\n            return true;\n        }\n        try\n        {\n            if ( getStatus() == Status.GET_MESSAGE )\n            {\n                logToSend = master.getLog( version );\n                logLength = master.getLogLength( version );\n                logVersionToSend = version;\n                setStatus( Status.SETUP_OFFER_LOG );\n            }\n            return true;\n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \n                \"Unable to get logical log[\" + logVersionToSend + \n                \"]\", e );\n        }\n    }","id":7687,"modified_method":"public synchronized boolean offerLogToSlave( long version )\n    {\n        if ( !getConnection().connected() )\n        {\n            System.out.println( \"Not connected\" );\n            return false;\n        }\n        if ( logLength != -1 || logVersionToSend != -1 || logToSend != null )\n        {\n            // we already sending a version\n            return true;\n        }\n        try\n        {\n            if ( getStatus() == Status.GET_MESSAGE )\n            {\n                logToSend = master.getLog( xaDsName, version );\n                logLength = master.getLogLength( xaDsName, version );\n                logVersionToSend = version;\n                setStatus( Status.SETUP_OFFER_LOG );\n            }\n            return true;\n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \n                \"Unable to get logical log[\" + logVersionToSend + \n                \"]\", e );\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HandleSlaveConnection( Connection connection, Master master, \n        long slaveVersion )\n    {\n        super( connection, master );\n        this.master = master;\n/*        if ( master.hasLog( slaveVersion ) )\n        {\n            logVersionToSend = slaveVersion;\n            logLength = master.getLogLength( slaveVersion );\n            \n            try\n            {\n                logToSend = master.getLog( slaveVersion );\n            }\n            catch ( IOException e )\n            {\n                throw new SocketException( \"Error getting next log\", e );\n            }\n        }*/\n        setStatus( Status.GET_MESSAGE );\n    }","id":7688,"modified_method":"public HandleSlaveConnection( Connection connection, Master master, \n        long slaveVersion, String xaDsName )\n    {\n        super( connection, master );\n        this.master = master;\n        this.xaDsName = xaDsName;\n        setStatus( Status.GET_MESSAGE );\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized boolean getMessage()\n    {\n//        if ( logVersionToSend > -1 && logLength > -1 && logToSend != null )\n//        {\n//            setStatus( Status.SETUP_OFFER_LOG );\n//            return true;\n//        }\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            buffer.limit( 9 );\n            int read = connection.read();\n            if ( read == 9 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.REQUEST_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                logVersionToSend = buffer.getLong();\n                if ( logVersionToSend > master.getVersion() )\n                {\n                    log( \"Got wrong version [\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                log( \"Slave request: \" + logVersionToSend );\n                if ( master.hasLog( logVersionToSend ) )\n                {\n                    try\n                    {\n                        logToSend = master.getLog( logVersionToSend );\n                        logLength = master.getLogLength( logVersionToSend );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to get logical log[\" + logVersionToSend + \n                            \"]\", e );\n                    }\n                    setStatus( Status.SETUP_OFFER_LOG );\n                }\n                else\n                {\n                    log( \"No such log version[\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","id":7689,"modified_method":"private synchronized boolean getMessage()\n    {\n        if ( !acquireReadBuffer() )\n        {\n            return false;\n        }\n        try\n        {\n            buffer.limit( 9 );\n            int read = connection.read();\n            if ( read == 9 )\n            {\n                buffer.flip();\n                byte request = buffer.get();\n                if ( request != HeaderConstants.REQUEST_LOG )\n                {\n                    log( \"Unkown request: \" + request );\n                    close();\n                    return true;\n                }\n                logVersionToSend = buffer.getLong();\n                if ( logVersionToSend > master.getVersion( xaDsName ) )\n                {\n                    log( \"Got wrong version [\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                log( \"Slave request: \" + logVersionToSend );\n                if ( master.hasLog( xaDsName, logVersionToSend ) )\n                {\n                    try\n                    {\n                        logToSend = master.getLog( xaDsName, logVersionToSend );\n                        logLength = master.getLogLength( xaDsName, logVersionToSend );\n                    }\n                    catch ( IOException e )\n                    {\n                        close();\n                        throw new SocketException( \n                            \"Unable to get logical log[\" + logVersionToSend + \n                            \"]\", e );\n                    }\n                    setStatus( Status.SETUP_OFFER_LOG );\n                }\n                else\n                {\n                    log( \"No such log version[\" + logVersionToSend + \"]\" );\n                    return true;\n                }\n                retries = 0;\n                return true;\n            }\n            else\n            {\n                if ( read > 0 )\n                {\n                    connection.pushBackAllReadData();\n                }\n                return false;\n            }\n        }\n        finally\n        {\n            releaseReadBuffer();\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"LogApplier( NeoStoreXaDataSource xaDs )\n    {\n        this.xaDs = xaDs;\n    }","id":7690,"modified_method":"LogApplier( XaDataSource[] xaDataSources )\n    {\n        this.xaDataSources = xaDataSources;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void run()\n    {\n        try\n        {\n            while ( run )\n            {\n//                Long logVersion = queue.poll();\n//                if ( logVersion != null )\n//                {\n                long logVersion = xaDs.getCurrentLogVersion();\n                if ( xaDs.hasLogicalLog( logVersion ) )\n                {\n                    ReadableByteChannel logChannel = \n                        xaDs.getLogicalLog( logVersion );\n                    xaDs.applyLog( logChannel );\n                }\n                else\n                {\n                    synchronized ( this )\n                    {\n                        try\n                        {\n                            this.wait( 250 );\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            interrupted();\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            System.err.println( \"Failed to apply log: \" + e );\n            e.printStackTrace();\n        }\n        finally\n        {\n            run = false;\n        }\n    }","id":7691,"modified_method":"public void run()\n    {\n        try\n        {\n            while ( run )\n            {\n                for ( XaDataSource xaDs : xaDataSources )\n                {\n                    long logVersion = xaDs.getCurrentLogVersion();\n                    if ( xaDs.hasLogicalLog( logVersion ) )\n                    {\n                        ReadableByteChannel logChannel = \n                            xaDs.getLogicalLog( logVersion );\n                        xaDs.applyLog( logChannel );\n                    }\n                    else\n                    {\n                        synchronized ( this )\n                        {\n                            try\n                            {\n                                this.wait( 250 );\n                            }\n                            catch ( InterruptedException e )\n                            {\n                                interrupted();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            System.err.println( \"Failed to apply log: \" + e );\n            e.printStackTrace();\n        }\n        finally\n        {\n            run = false;\n        }\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void rotateLogAndPushToSlaves() throws IOException\n    {\n        if ( slaveList.size() == 0 )\n        {\n            return;\n        }\n        long version = getVersion();\n        xaDs.rotateLogicalLog();\n        ArrayList<HandleSlaveConnection> newList = \n            new ArrayList<HandleSlaveConnection>();\n        for ( HandleSlaveConnection slave : slaveList )\n        {\n            if ( !slave.offerLogToSlave( version ) )\n            {\n                System.out.println( \"Failed to offer log to slave: \" + slave );\n            }\n            else\n            {\n                newList.add( slave );\n            }\n        }\n        slaveList = newList;\n    }","id":7692,"modified_method":"public void rotateLogAndPushToSlaves() throws IOException\n    {\n        if ( slaveList.size() == 0 )\n        {\n            return;\n        }\n        ArrayList<HandleSlaveConnection> newList = \n            new ArrayList<HandleSlaveConnection>();\n        for ( HandleSlaveConnection slave : slaveList )\n        {\n            XaDataSource xaDs = xaDsMgr.getXaDataSource( slave.getXaDsName() );\n            if ( xaDs != null )\n            {\n                long version = xaDs.getCurrentLogVersion();\n                xaDs.rotateLogicalLog();\n                if ( !slave.offerLogToSlave( version ) )\n                {\n                    System.out.println( \"Failed to offer log to slave: \" + slave );\n                }\n                else\n                {\n                    newList.add( slave );\n                }\n            }\n        }\n        slaveList = newList;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getCreationTime()\n    {\n        return xaDs.getCreationTime();\n    }","id":7693,"modified_method":"public long getIdentifier( String xaDsName  )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getRandomIdentifier();\n        }\n        return -1;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean hasLog( long version )\n    {\n        return xaDs.hasLogicalLog( version );\n    }","id":7694,"modified_method":"public boolean hasLog( String xaDsName, long version )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.hasLogicalLog( version );\n        }\n        return false;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getLogLength( long version )\n    {\n        return xaDs.getLogicalLogLength( version );\n    }","id":7695,"modified_method":"public long getLogLength( String xaDsName, long version )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getLogicalLogLength( version );\n        }\n        return -1l;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long getVersion()\n    {\n        return xaDs.getCurrentLogVersion();\n    }","id":7696,"modified_method":"public long getVersion( String xaDsName )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getCurrentLogVersion();\n        }\n        return -1;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ReadableByteChannel getLog( long version ) throws IOException\n    {\n        return xaDs.getLogicalLog( version );\n    }","id":7697,"modified_method":"public long getCreationTime( String xaDsName )\n    {\n        XaDataSource xaDs = xaDsMgr.getXaDataSource( xaDsName );\n        if ( xaDs != null )\n        {\n            return xaDs.getCreationTime();\n        }\n        return -1;\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Master( String path, Map<String,String> params, int listenPort )\n    {\n        this.graphDb = new EmbeddedGraphDatabase( path, params );\n        this.xaDs = (NeoStoreXaDataSource) graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager().getXaDataSource( \"nioneodb\" );\n        xaDs.keepLogicalLogs( true );\n        this.port = listenPort;\n        try\n        {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking( false );\n            serverChannel.socket().bind( new InetSocketAddress( listenPort ) );\n            \n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \"Unable to bind at port[\" + \n                listenPort + \"]\", e );\n        }\n        jobEater = new JobEater();\n        jobEater.addJob( new AcceptJob( this, serverChannel ) );\n        jobEater.start();\n    }","id":7698,"modified_method":"public Master( String path, Map<String,String> params, int listenPort )\n    {\n        this.graphDb = new EmbeddedGraphDatabase( path, params );\n        this.xaDsMgr = graphDb.getConfig().getTxModule()\n            .getXaDataSourceManager();\n        for ( XaDataSource xaDs : xaDsMgr.getAllRegisteredDataSources() )\n        {\n            xaDs.keepLogicalLogs( true );\n        }\n        this.port = listenPort;\n        try\n        {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking( false );\n            serverChannel.socket().bind( new InetSocketAddress( listenPort ) );\n            \n        }\n        catch ( IOException e )\n        {\n            throw new SocketException( \"Unable to bind at port[\" + \n                listenPort + \"]\", e );\n        }\n        jobEater = new JobEater();\n        jobEater.addJob( new AcceptJob( this, serverChannel ) );\n        jobEater.start();\n    }","commit_id":"56fdb1ec1b7504da7b6a04840e72bc24724a13b6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void processJFKMessage3(byte[] payload, int inputOffset, PeerNode pn,Peer replyTo, boolean oldOpennetPeer)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(3) message, processing it - \"+pn);\n\t\t\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tNONCE_SIZE*2 + DiffieHellman.modulusLengthInBytes()*2 +\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // authenticator\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // it's at least a signature\n\t\t\t\t\t\t\t\t\t8;\t\t\t  // a bootid\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(3), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Ni\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceInitiator, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// Nr\n\t\tbyte[] nonceResponder = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceResponder, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// g^i\n\t\tbyte[] initiatorExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, initiatorExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t// g^r\n\t\tbyte[] responderExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, responderExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t\n\t\tbyte[] authenticator = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, authenticator, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\n\t\t// FIXME: check the cache before or after the hmac verification ?\n\t\t// is it cheaper to wait for the lock on authenticatorCache or to verify the hmac ?\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(getTransientKey(), assembleJFKAuthenticator(responderExponential, initiatorExponential, nonceResponder, nonceInitiator, replyTo.getAddress().getAddress()) , authenticator)) {\n\t\t\tLogger.error(this, \"The HMAC doesn't match; let's discard the packet (either we rekeyed or we are victim of forgery) - JFK3\");\n\t\t\treturn;\n\t\t}\n\t\t// Check try to find the authenticator in the cache.\n\t\t// If authenticator is already present, indicates duplicate/replayed message3\n\t\t// Now simply transmit the corresponding message4\n\t\tObject message4 = null;\n\t\tsynchronized (authenticatorCache) {\n\t\t\tmessage4 = authenticatorCache.get(authenticator);\n\t\t}\n\t\tif(message4 != null) {\n\t\t\tLogger.normal(this, \"We replayed a message from the cache (shouldn't happen often) - \"+pn);\n\t\t\tsendAuthPacket(1, 2, 3, (byte[]) message4, pn, replyTo);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1, initiatorExponential);\n\t\tNativeBigInteger _ourExponential = new NativeBigInteger(1, responderExponential);\n\t\t\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tDiffieHellmanLightContext ctx = findContextByExponential(_ourExponential);\n\t\tif(ctx == null) {\n\t\t\tLogger.error(this, \"WTF? the HMAC verified but we don't know about that exponential! SHOULDN'T HAPPEN! - JFK4\");\n\t\t\treturn;\n\t\t}\n\t\tBigInteger computedExponential = ctx.getHMACKey(_hisExponential, Global.DHgroupA);\n\t\tbyte[] Ks = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"0\");\n\t\tbyte[] Ke = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"1\");\n\t\tbyte[] Ka = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"2\");\n\t\tc.initialize(Ke);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"I\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_INITIATOR.length + payload.length - inputOffset];\n\t\tSystem.arraycopy(JFK_PREFIX_INITIATOR, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_INITIATOR.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_INITIATOR.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\tif(!mac.verify(Ka, decypheredPayload, hmac)) {\n\t\t\tLogger.error(this, \"The digest-HMAC doesn't match; let's discard the packet JFK(3) - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * Node Data (starting with BootID)\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length -8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s)); \n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _hisExponential, _ourExponential, crypto.myIdentity, data))), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(3) - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// At this point we know it's from the peer, so we can report a packet received.\n\t\tpn.receivedPacket(true);\n\t\t\n\t\t// Send reply\n\t\tsendJFKMessage4(1, 2, 3, nonceInitiator, nonceResponder,initiatorExponential, responderExponential, c, Ke, Ka, authenticator, hisRef, pn, replyTo);\n\t\tc.initialize(Ks);\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\tif(pn.completedHandshake(bootID, hisRef, 0, hisRef.length, c, Ks, replyTo, true)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failure! with \"+pn);\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message3 Sending packet for\"+pn.getPeer()+\" took \"+TimeUtil.formatTime(t2-t1, 3, true));\n\t}","id":7699,"modified_method":"private void processJFKMessage3(byte[] payload, int inputOffset, PeerNode pn,Peer replyTo, boolean oldOpennetPeer, boolean unknownInitiator, int setupType)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(3) message, processing it - \"+pn);\n\t\t\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tNONCE_SIZE*2 + DiffieHellman.modulusLengthInBytes()*2 +\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // authenticator\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // it's at least a signature\n\t\t\t\t\t\t\t\t\t8;\t\t\t  // a bootid\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(3), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Ni\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceInitiator, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// Nr\n\t\tbyte[] nonceResponder = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceResponder, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\t// g^i\n\t\tbyte[] initiatorExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, initiatorExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t// g^r\n\t\tbyte[] responderExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, responderExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\t\n\t\tbyte[] authenticator = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, authenticator, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\n\t\t// FIXME: check the cache before or after the hmac verification ?\n\t\t// is it cheaper to wait for the lock on authenticatorCache or to verify the hmac ?\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(getTransientKey(), assembleJFKAuthenticator(responderExponential, initiatorExponential, nonceResponder, nonceInitiator, replyTo.getAddress().getAddress()) , authenticator)) {\n\t\t\tLogger.error(this, \"The HMAC doesn't match; let's discard the packet (either we rekeyed or we are victim of forgery) - JFK3\");\n\t\t\treturn;\n\t\t}\n\t\t// Check try to find the authenticator in the cache.\n\t\t// If authenticator is already present, indicates duplicate/replayed message3\n\t\t// Now simply transmit the corresponding message4\n\t\tObject message4 = null;\n\t\tsynchronized (authenticatorCache) {\n\t\t\tmessage4 = authenticatorCache.get(authenticator);\n\t\t}\n\t\tif(message4 != null) {\n\t\t\tLogger.normal(this, \"We replayed a message from the cache (shouldn't happen often) - \"+pn);\n\t\t\tsendAuthPacket(1, 2, 3, (byte[]) message4, pn, replyTo);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1, initiatorExponential);\n\t\tNativeBigInteger _ourExponential = new NativeBigInteger(1, responderExponential);\n\t\t\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tDiffieHellmanLightContext ctx = findContextByExponential(_ourExponential);\n\t\tif(ctx == null) {\n\t\t\tLogger.error(this, \"WTF? the HMAC verified but we don't know about that exponential! SHOULDN'T HAPPEN! - JFK4\");\n\t\t\treturn;\n\t\t}\n\t\tBigInteger computedExponential = ctx.getHMACKey(_hisExponential, Global.DHgroupA);\n\t\tbyte[] Ks = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"0\");\n\t\tbyte[] Ke = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"1\");\n\t\tbyte[] Ka = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"2\");\n\t\tc.initialize(Ke);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"I\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_INITIATOR.length + payload.length - inputOffset];\n\t\tSystem.arraycopy(JFK_PREFIX_INITIATOR, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_INITIATOR.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_INITIATOR.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\tif(!mac.verify(Ka, decypheredPayload, hmac)) {\n\t\t\tLogger.error(this, \"The digest-HMAC doesn't match; let's discard the packet JFK(3) - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length-decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * Node Data (starting with BootID)\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length -8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s)); \n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _hisExponential, _ourExponential, crypto.myIdentity, data))), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(3) - \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// At this point we know it's from the peer, so we can report a packet received.\n\t\tpn.receivedPacket(true);\n\t\t\n\t\t// Send reply\n\t\tsendJFKMessage4(1, 2, 3, nonceInitiator, nonceResponder,initiatorExponential, responderExponential, c, Ke, Ka, authenticator, hisRef, pn, replyTo, unknownInitiator, setupType);\n\t\tc.initialize(Ks);\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\tif(pn.completedHandshake(bootID, hisRef, 0, hisRef.length, c, Ks, replyTo, true)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failure! with \"+pn);\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message3 Sending packet for\"+pn.getPeer()+\" took \"+TimeUtil.formatTime(t2-t1, 3, true));\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void sendJFKMessage4(int version,int negType,int phase,byte[] nonceInitiator,byte[] nonceResponder,byte[] initiatorExponential,byte[] responderExponential, BlockCipher c, byte[] Ke, byte[] Ka, byte[] authenticator, byte[] hisRef, PeerNode pn, Peer replyTo)\n\t{\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Sending a JFK(4) message to \"+pn);\n\t\tNativeBigInteger _responderExponential = new NativeBigInteger(1,responderExponential);\n\t\tNativeBigInteger _initiatorExponential = new NativeBigInteger(1,initiatorExponential);\n\t\t\n\t\tbyte[] myRef = crypto.myCompressedSetupRef();\n\t\tbyte[] data = new byte[8 + myRef.length + hisRef.length];\n\t\tSystem.arraycopy(Fields.longToBytes(node.bootID), 0, data, 0, 8);\n\t\tSystem.arraycopy(myRef, 0, data, 8, myRef.length);\n\t\tSystem.arraycopy(hisRef, 0, data, 8 + myRef.length, hisRef.length);\n\t\t\n\t\tDSASignature localSignature = crypto.sign(SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _initiatorExponential, _responderExponential, pn.identity, data)));\n\t\tbyte[] r = localSignature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = localSignature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\t\n\t\tPCFBMode pk=PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tbyte[] iv=new byte[ivLength];\n\t\tnode.random.nextBytes(iv);\n\t\tpk.reset(iv);\n\t\tbyte[] prefix = null;\n\t\ttry { prefix = \"R\".getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException e) {}\n\n\t\tbyte[] cyphertext = new byte[prefix.length + ivLength + Node.SIGNATURE_PARAMETER_LENGTH * 2 + data.length];\n\t\tint cleartextOffset = 0;\n\t\tSystem.arraycopy(prefix, 0, cyphertext, cleartextOffset, prefix.length);\n\t\tcleartextOffset += prefix.length;\n\t\tSystem.arraycopy(iv, 0, cyphertext, cleartextOffset, ivLength);\n\t\tcleartextOffset += ivLength;\n\t\tSystem.arraycopy(r, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(data, 0, cyphertext, cleartextOffset, data.length);\n\t\tcleartextOffset += data.length;\n\t\t// Now encrypt the cleartext[Signature]\n\t\tint cleartextToEncypherOffset = prefix.length + ivLength;\n\t\tpk.blockEncipher(cyphertext, cleartextToEncypherOffset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// We compute the HMAC of (prefix + iv + signature)\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tbyte[] hmac = mac.mac(Ka, cyphertext, HASH_LENGTH);\n\t\t\n\t\t// Message4 = hmac + IV + encryptedSignature\n\t\tbyte[] message4 = new byte[HASH_LENGTH + ivLength + (cyphertext.length - cleartextToEncypherOffset)]; \n\t\tint offset = 0;\n\t\tSystem.arraycopy(hmac, 0, message4, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\tSystem.arraycopy(iv, 0, message4, offset, ivLength);\n\t\toffset += ivLength;\n\t\tSystem.arraycopy(cyphertext, cleartextToEncypherOffset, message4, offset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// cache the message\n\t\tsynchronized (authenticatorCache) {\n\t\t\tif(!maybeResetTransientKey())\n\t\t\t\tauthenticatorCache.put(authenticator, message4);\n\t\t}\n\t\t\n\t\tsendAuthPacket(1, 2, 3, message4, pn, replyTo);\n\t}","id":7700,"modified_method":"private void sendJFKMessage4(int version,int negType,int phase,byte[] nonceInitiator,byte[] nonceResponder,byte[] initiatorExponential,byte[] responderExponential, BlockCipher c, byte[] Ke, byte[] Ka, byte[] authenticator, byte[] hisRef, PeerNode pn, Peer replyTo, boolean unknownInitiator, int setupType)\n\t{\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Sending a JFK(4) message to \"+pn);\n\t\tNativeBigInteger _responderExponential = new NativeBigInteger(1,responderExponential);\n\t\tNativeBigInteger _initiatorExponential = new NativeBigInteger(1,initiatorExponential);\n\t\t\n\t\tbyte[] myRef = crypto.myCompressedSetupRef();\n\t\tbyte[] data = new byte[8 + myRef.length + hisRef.length];\n\t\tSystem.arraycopy(Fields.longToBytes(node.bootID), 0, data, 0, 8);\n\t\tSystem.arraycopy(myRef, 0, data, 8, myRef.length);\n\t\tSystem.arraycopy(hisRef, 0, data, 8 + myRef.length, hisRef.length);\n\t\t\n\t\tDSASignature localSignature = crypto.sign(SHA256.digest(assembleDHParams(nonceInitiator, nonceResponder, _initiatorExponential, _responderExponential, pn.identity, data)));\n\t\tbyte[] r = localSignature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = localSignature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\t\n\t\tPCFBMode pk=PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tbyte[] iv=new byte[ivLength];\n\t\tnode.random.nextBytes(iv);\n\t\tpk.reset(iv);\n\t\tbyte[] prefix = null;\n\t\ttry { prefix = \"R\".getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException e) {}\n\n\t\tbyte[] cyphertext = new byte[prefix.length + ivLength + Node.SIGNATURE_PARAMETER_LENGTH * 2 + data.length];\n\t\tint cleartextOffset = 0;\n\t\tSystem.arraycopy(prefix, 0, cyphertext, cleartextOffset, prefix.length);\n\t\tcleartextOffset += prefix.length;\n\t\tSystem.arraycopy(iv, 0, cyphertext, cleartextOffset, ivLength);\n\t\tcleartextOffset += ivLength;\n\t\tSystem.arraycopy(r, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, cyphertext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(data, 0, cyphertext, cleartextOffset, data.length);\n\t\tcleartextOffset += data.length;\n\t\t// Now encrypt the cleartext[Signature]\n\t\tint cleartextToEncypherOffset = prefix.length + ivLength;\n\t\tpk.blockEncipher(cyphertext, cleartextToEncypherOffset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// We compute the HMAC of (prefix + iv + signature)\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tbyte[] hmac = mac.mac(Ka, cyphertext, HASH_LENGTH);\n\t\t\n\t\t// Message4 = hmac + IV + encryptedSignature\n\t\tbyte[] message4 = new byte[HASH_LENGTH + ivLength + (cyphertext.length - cleartextToEncypherOffset)]; \n\t\tint offset = 0;\n\t\tSystem.arraycopy(hmac, 0, message4, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\tSystem.arraycopy(iv, 0, message4, offset, ivLength);\n\t\toffset += ivLength;\n\t\tSystem.arraycopy(cyphertext, cleartextToEncypherOffset, message4, offset, cyphertext.length - cleartextToEncypherOffset);\n\t\t\n\t\t// cache the message\n\t\tsynchronized (authenticatorCache) {\n\t\t\tif(!maybeResetTransientKey())\n\t\t\t\tauthenticatorCache.put(authenticator, message4);\n\t\t}\n\t\t\n\t\tif(unknownInitiator)\n\t\t\tsendAnonAuthPacket(1, 2, 3, setupType, message4, pn, replyTo, crypto.anonSetupCipher);\n\t\telse\n\t\t\tsendAuthPacket(1, 2, 3, message4, pn, replyTo);\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void sendPacket(byte[] data, Peer replyTo, PeerNode pn, int alreadyReportedBytes) throws LocalAddressException {\n\t\tif(pn.isIgnoreSource()) {\n\t\t\tPeer p = pn.getPeer();\n\t\t\tif(p != null) replyTo = p;\n\t\t}\n\t\tsock.sendPacket(data, replyTo, pn.allowLocalAddresses());\n\t\tpn.reportOutgoingPacket(data, 0, data.length, System.currentTimeMillis());\n\t\tnode.outputThrottle.forceGrab(data.length - alreadyReportedBytes);\n\t}","id":7701,"modified_method":"private void sendPacket(byte[] data, Peer replyTo, PeerNode pn, int alreadyReportedBytes) throws LocalAddressException {\n\t\tif(pn != null) {\n\t\t\tif(pn.isIgnoreSource()) {\n\t\t\t\tPeer p = pn.getPeer();\n\t\t\t\tif(p != null) replyTo = p;\n\t\t\t}\n\t\t}\n\t\tsock.sendPacket(data, replyTo, pn == null ? crypto.config.alwaysAllowLocalAddresses() : pn.allowLocalAddresses());\n\t\tif(pn != null)\n\t\t\tpn.reportOutgoingPacket(data, 0, data.length, System.currentTimeMillis());\n\t\tnode.outputThrottle.forceGrab(data.length - alreadyReportedBytes);\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void processJFKMessage4(byte[] payload, int inputOffset, PeerNode pn, Peer replyTo, boolean oldOpennetPeer)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(4) message, processing it - \"+pn);\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // the signature\n\t\t\t\t\t\t\t\t\tpn.jfkMyRef.length\t\t\t  // the bootid + mynoderef\n\t\t\t\t\t\t\t\t\t;\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(4), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\tbyte[] jfkBuffer = pn.getJFKBuffer();\n\t\tif(jfkBuffer == null) {\n\t\t\tLogger.normal(this, \"We have already handled this message... might be a replay or a bug - \"+pn);\n\t\t\treturn;\n\t\t}\n\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tc.initialize(pn.jfkKe);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"R\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_RESPONDER.length + (payload.length-inputOffset)];\n\t\tSystem.arraycopy(JFK_PREFIX_RESPONDER, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_RESPONDER.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_RESPONDER.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, payload.length-inputOffset);\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(pn.jfkKa, decypheredPayload, hmac)) {\n\t\t\tLogger.error(this, \"The digest-HMAC doesn't match; let's discard the packet\");\n\t\t\treturn;\n\t\t}\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length - decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * bootID, znoderef\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length - pn.jfkMyRef.length - 8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s));\n\t\tbyte[] locallyGeneratedText = new byte[NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes() * 2 + crypto.myIdentity.length + 8 /*bootID*/ + hisRef.length + pn.jfkMyRef.length];\n\t\tint bufferOffset = NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes()*2;\n\t\tSystem.arraycopy(jfkBuffer, 0, locallyGeneratedText, 0, bufferOffset);\n\t\tSystem.arraycopy(crypto.myIdentity, 0, locallyGeneratedText, bufferOffset, crypto.myIdentity.length);\n\t\tbufferOffset += crypto.myIdentity.length;\n\t\t// bootID\n\t\tSystem.arraycopy(data, 0, locallyGeneratedText, bufferOffset, data.length - pn.jfkMyRef.length);\n\t\tbufferOffset += data.length - pn.jfkMyRef.length;\n\t\tSystem.arraycopy(pn.jfkMyRef, 0, locallyGeneratedText, bufferOffset, pn.jfkMyRef.length);\n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(locallyGeneratedText)), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(4) -\"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\t// We change the key\n\t\tc.initialize(pn.jfkKs);\n\t\tif(pn.completedHandshake(bootID, data, 8, data.length - 8, c, pn.jfkKs, replyTo, false)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failed!\");\n\t\t}\n\t\t\n\t\t// cleanup\n                // FIXME: maybe we should copy zeros/garbage into it before leaving it to the GC\n\t\tpn.setJFKBuffer(null);\n\t\tpn.jfkKa = null;\n\t\tpn.jfkKe = null;\n\t\tpn.jfkKs = null;\n\t\t// We want to clear it here so that new handshake requests\n\t\t// will be sent with a different DH pair\n\t\tpn.setKeyAgreementSchemeContext(null);\n\t\tsynchronized (pn) {\n\t\t\t// FIXME TRUE MULTI-HOMING: winner-takes-all, kill all other connection attempts since we can't deal with multiple active connections\n\t\t\t// Also avoids leaking\n\t\t\tpn.jfkNoncesSent.clear();\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message3 timeout error:Sending packet for\"+pn.getPeer());\n\t}","id":7702,"modified_method":"private void processJFKMessage4(byte[] payload, int inputOffset, PeerNode pn, Peer replyTo, boolean oldOpennetPeer, boolean unknownInitiator, int setupType)\n\t{\n\t\tfinal long t1 = System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(4) message, processing it - \"+pn);\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\t\n\t\tfinal int expectedLength =\tHASH_LENGTH + // HMAC of the cyphertext\n\t\t\t\t\t\t\t\t\t(c.getBlockSize() >> 3) + // IV\n\t\t\t\t\t\t\t\t\tHASH_LENGTH + // the signature\n\t\t\t\t\t\t\t\t\tpn.jfkMyRef.length\t\t\t  // the bootid + mynoderef\n\t\t\t\t\t\t\t\t\t;\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(4), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\t\tbyte[] jfkBuffer = pn.getJFKBuffer();\n\t\tif(jfkBuffer == null) {\n\t\t\tLogger.normal(this, \"We have already handled this message... might be a replay or a bug - \"+pn);\n\t\t\treturn;\n\t\t}\n\n\t\tbyte[] hmac = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, hmac, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\tc.initialize(pn.jfkKe);\n\t\tfinal PCFBMode pk = PCFBMode.create(c);\n\t\tint ivLength = pk.lengthIV();\n\t\tint decypheredPayloadOffset = 0;\n\t\t// We compute the HMAC of (\"R\"+cyphertext) : the cyphertext includes the IV!\n\t\tbyte[] decypheredPayload = new byte[JFK_PREFIX_RESPONDER.length + (payload.length-inputOffset)];\n\t\tSystem.arraycopy(JFK_PREFIX_RESPONDER, 0, decypheredPayload, decypheredPayloadOffset, JFK_PREFIX_RESPONDER.length);\n\t\tdecypheredPayloadOffset += JFK_PREFIX_RESPONDER.length;\n\t\tSystem.arraycopy(payload, inputOffset, decypheredPayload, decypheredPayloadOffset, payload.length-inputOffset);\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tif(!mac.verify(pn.jfkKa, decypheredPayload, hmac)) {\n\t\t\tLogger.error(this, \"The digest-HMAC doesn't match; let's discard the packet\");\n\t\t\treturn;\n\t\t}\n\t\t// Get the IV\n\t\tpk.reset(decypheredPayload, decypheredPayloadOffset);\n\t\tdecypheredPayloadOffset += ivLength;\n\t\t// Decrypt the payload\n\t\tpk.blockDecipher(decypheredPayload, decypheredPayloadOffset, decypheredPayload.length - decypheredPayloadOffset);\n\t\t/*\n\t\t * DecipheredData Format:\n\t\t * Signature-r,s\n\t\t * bootID, znoderef\n\t\t */\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tdecypheredPayloadOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] data = new byte[decypheredPayload.length - decypheredPayloadOffset];\n\t\tSystem.arraycopy(decypheredPayload, decypheredPayloadOffset, data, 0, decypheredPayload.length - decypheredPayloadOffset);\n\t\tlong bootID = Fields.bytesToLong(data);\n\t\tbyte[] hisRef = new byte[data.length - pn.jfkMyRef.length - 8];\n\t\tSystem.arraycopy(data, 8, hisRef, 0, hisRef.length);\n\t\t\n\t\t// verify the signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s));\n\t\tbyte[] locallyGeneratedText = new byte[NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes() * 2 + crypto.myIdentity.length + 8 /*bootID*/ + hisRef.length + pn.jfkMyRef.length];\n\t\tint bufferOffset = NONCE_SIZE * 2 + DiffieHellman.modulusLengthInBytes()*2;\n\t\tSystem.arraycopy(jfkBuffer, 0, locallyGeneratedText, 0, bufferOffset);\n\t\tSystem.arraycopy(crypto.myIdentity, 0, locallyGeneratedText, bufferOffset, crypto.myIdentity.length);\n\t\tbufferOffset += crypto.myIdentity.length;\n\t\t// bootID\n\t\tSystem.arraycopy(data, 0, locallyGeneratedText, bufferOffset, data.length - pn.jfkMyRef.length);\n\t\tbufferOffset += data.length - pn.jfkMyRef.length;\n\t\tSystem.arraycopy(pn.jfkMyRef, 0, locallyGeneratedText, bufferOffset, pn.jfkMyRef.length);\n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(locallyGeneratedText)), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed!! JFK(4) -\"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Promote if necessary\n\t\tboolean dontWant = false;\n\t\tif(oldOpennetPeer) {\n\t\t\tOpennetManager opennet = node.getOpennet();\n\t\t\tif(opennet == null) {\n\t\t\t\tLogger.normal(this, \"Dumping incoming old-opennet peer as opennet just turned off: \"+pn+\".\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!opennet.wantPeer(pn, true)) {\n\t\t\t\tLogger.normal(this, \"No longer want peer \"+pn+\" - dumping it after connecting\");\n\t\t\t\tdontWant = true;\n\t\t\t}\n\t\t\t// wantPeer will call node.peers.addPeer(), we don't have to.\n\t\t}\n\t\t\n\t\t// We change the key\n\t\tc.initialize(pn.jfkKs);\n\t\tif(pn.completedHandshake(bootID, data, 8, data.length - 8, c, pn.jfkKs, replyTo, false)) {\n\t\t\tif(dontWant)\n\t\t\t\tnode.peers.disconnect(pn, true, false);\n\t\t\telse\n\t\t\t\tpn.maybeSendInitialMessages();\n\t\t} else {\n\t\t\tLogger.error(this, \"Handshake failed!\");\n\t\t}\n\t\t\n\t\t// cleanup\n                // FIXME: maybe we should copy zeros/garbage into it before leaving it to the GC\n\t\tpn.setJFKBuffer(null);\n\t\tpn.jfkKa = null;\n\t\tpn.jfkKe = null;\n\t\tpn.jfkKs = null;\n\t\t// We want to clear it here so that new handshake requests\n\t\t// will be sent with a different DH pair\n\t\tpn.setKeyAgreementSchemeContext(null);\n\t\tsynchronized (pn) {\n\t\t\t// FIXME TRUE MULTI-HOMING: winner-takes-all, kill all other connection attempts since we can't deal with multiple active connections\n\t\t\t// Also avoids leaking\n\t\t\tpn.jfkNoncesSent.clear();\n\t\t}\n\t\t\n\t\tfinal long t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message3 timeout error:Sending packet for\"+pn.getPeer());\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void processJFKMessage1(byte[] payload,int offset,PeerNode pn,Peer replyTo, boolean unknownInitiator)\n\t{\n\t\tlong t1=System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(1) message, processing it - \"+pn);\n\t\t// FIXME: follow the spec and send IDr' ?\n\t\tif(payload.length < NONCE_SIZE + DiffieHellman.modulusLengthInBytes() + 3 + (unknownInitiator ? NodeCrypto.IDENTITY_LENGTH : 0)) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(1), should be \"+(NONCE_SIZE + DiffieHellman.modulusLengthInBytes()));\n\t\t\treturn;\n\t\t}\n\t\t// get Ni\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, offset, nonceInitiator, 0, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\n\t\t// get g^i\n\t\tint modulusLength = DiffieHellman.modulusLengthInBytes();\n\t\tbyte[] hisExponential = new byte[modulusLength];\n\t\tSystem.arraycopy(payload, offset, hisExponential, 0, modulusLength);\n\t\tif(unknownInitiator) {\n\t\t\t// Check IDr'\n\t\t\toffset += DiffieHellman.modulusLengthInBytes();\n\t\t\tbyte[] expectedIdentityHash = new byte[NodeCrypto.IDENTITY_LENGTH];\n\t\t\tSystem.arraycopy(payload, offset, expectedIdentityHash, 0, expectedIdentityHash.length);\n\t\t\tif(!Arrays.equals(expectedIdentityHash, crypto.identityHash)) {\n\t\t\t\tLogger.error(this, \"Invalid unknown-initiator JFK(1), IDr' is \"+HexUtil.bytesToHex(expectedIdentityHash)+\" should be \"+HexUtil.bytesToHex(crypto.identityHash));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1,hisExponential);\n\t\tif(DiffieHellman.checkDHExponentialValidity(this.getClass(), _hisExponential)) {\n\t\t\tsendJFKMessage2(nonceInitiator, hisExponential, pn, replyTo);\n\t\t}else\n\t\t\tLogger.error(this, \"We can't accept the exponential \"+pn+\" sent us!! REDFLAG: IT CAN'T HAPPEN UNLESS AGAINST AN ACTIVE ATTACKER!!\");\n\n\t\tlong t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message1 timeout error:Sending packet for\"+pn.getPeer());\n\t}","id":7703,"modified_method":"private void processJFKMessage1(byte[] payload,int offset,PeerNode pn,Peer replyTo, boolean unknownInitiator, int setupType)\n\t{\n\t\tlong t1=System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(1) message, processing it - \"+pn);\n\t\t// FIXME: follow the spec and send IDr' ?\n\t\tif(payload.length < NONCE_SIZE + DiffieHellman.modulusLengthInBytes() + 3 + (unknownInitiator ? NodeCrypto.IDENTITY_LENGTH : 0)) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(1), should be \"+(NONCE_SIZE + DiffieHellman.modulusLengthInBytes()));\n\t\t\treturn;\n\t\t}\n\t\t// get Ni\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, offset, nonceInitiator, 0, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\n\t\t// get g^i\n\t\tint modulusLength = DiffieHellman.modulusLengthInBytes();\n\t\tbyte[] hisExponential = new byte[modulusLength];\n\t\tSystem.arraycopy(payload, offset, hisExponential, 0, modulusLength);\n\t\tif(unknownInitiator) {\n\t\t\t// Check IDr'\n\t\t\toffset += DiffieHellman.modulusLengthInBytes();\n\t\t\tbyte[] expectedIdentityHash = new byte[NodeCrypto.IDENTITY_LENGTH];\n\t\t\tSystem.arraycopy(payload, offset, expectedIdentityHash, 0, expectedIdentityHash.length);\n\t\t\tif(!Arrays.equals(expectedIdentityHash, crypto.identityHash)) {\n\t\t\t\tLogger.error(this, \"Invalid unknown-initiator JFK(1), IDr' is \"+HexUtil.bytesToHex(expectedIdentityHash)+\" should be \"+HexUtil.bytesToHex(crypto.identityHash));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1,hisExponential);\n\t\tif(DiffieHellman.checkDHExponentialValidity(this.getClass(), _hisExponential)) {\n\t\t\tsendJFKMessage2(nonceInitiator, hisExponential, pn, replyTo, unknownInitiator, setupType);\n\t\t}else\n\t\t\tLogger.error(this, \"We can't accept the exponential \"+pn+\" sent us!! REDFLAG: IT CAN'T HAPPEN UNLESS AGAINST AN ACTIVE ATTACKER!!\");\n\n\t\tlong t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message1 timeout error:Sending packet for\"+pn.getPeer());\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void processJFKMessage2(byte[] payload,int inputOffset,PeerNode pn,Peer replyTo)\n\t{\n\t\tlong t1=System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(2) message, processing it - \"+pn);\n\t\t// FIXME: follow the spec and send IDr' ?\n\t\tint expectedLength = NONCE_SIZE*2 + DiffieHellman.modulusLengthInBytes() + HASH_LENGTH*2;\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(2), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceInitiator, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\tbyte[] nonceResponder = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceResponder, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\n\t\tbyte[] hisExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, hisExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1,hisExponential);\n\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tinputOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tinputOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\n\t\tbyte[] authenticator = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, authenticator, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\t// Check try to find the authenticator in the cache.\n\t\t// If authenticator is already present, indicates duplicate/replayed message2\n\t\t// Now simply transmit the corresponding message3\n\t\tObject message3 = null;\n\t\tsynchronized (authenticatorCache) {\n\t\t\tmessage3 = authenticatorCache.get(authenticator);\n\t\t}\n\t\tif(message3 != null) {\n\t\t\tLogger.normal(this, \"We replayed a message from the cache (shouldn't happen often) -\"+pn);\n\t\t\tsendAuthPacket(1, 2, 3, (byte[]) message3, pn, replyTo);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// sanity check\n\t\tbyte[] myNi = null;\n\t\tsynchronized (pn) {\n\t\t\tmyNi = (byte[]) pn.jfkNoncesSent.get(replyTo);\n\t\t}\n\t\t// We don't except such a message;\n\t\tif(myNi == null) {\n\t\t\tLogger.normal(this, \"We received an unexpected JFK(2) message from \"+pn);\n\t\t\treturn;\n\t\t} else if(!Arrays.equals(myNi, nonceInitiator)){\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Ignoring old JFK(2) (different nonce to the one we sent - either a timing artefact or an attempt to change the nonce)\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(!DiffieHellman.checkDHExponentialValidity(this.getClass(), _hisExponential)) {\n\t\t\tLogger.error(this, \"We can't accept the exponential \"+pn+\" sent us!! REDFLAG: IT CAN'T HAPPEN UNLESS AGAINST AN ACTIVE ATTACKER!!\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Verify the DSA signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s));\n\t\t// At that point we don't know if it's \"him\"; let's check it out\n\t\tbyte[] locallyExpectedExponentials = assembleDHParams(_hisExponential, pn.peerCryptoGroup);\n\n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(locallyExpectedExponentials)), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed in JFK(2)!! \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// At this point we know it's from the peer, so we can report a packet received.\n\t\tpn.receivedPacket(true);\n\t\t\n\t\tsendJFKMessage3(1, 2, 3, nonceInitiator, nonceResponder, hisExponential, authenticator, pn, replyTo);\n\n\t\tlong t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message1 timeout error:Sending packet for\"+pn.getPeer());\n\t}","id":7704,"modified_method":"private void processJFKMessage2(byte[] payload,int inputOffset,PeerNode pn,Peer replyTo, boolean unknownInitiator, int setupType)\n\t{\n\t\tlong t1=System.currentTimeMillis();\n\t\tif(logMINOR) Logger.minor(this, \"Got a JFK(2) message, processing it - \"+pn);\n\t\t// FIXME: follow the spec and send IDr' ?\n\t\tint expectedLength = NONCE_SIZE*2 + DiffieHellman.modulusLengthInBytes() + HASH_LENGTH*2;\n\t\tif(payload.length < expectedLength + 3) {\n\t\t\tLogger.error(this, \"Packet too short from \"+pn+\": \"+payload.length+\" after decryption in JFK(2), should be \"+(expectedLength + 3));\n\t\t\treturn;\n\t\t}\n\n\t\tbyte[] nonceInitiator = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceInitiator, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\t\tbyte[] nonceResponder = new byte[NONCE_SIZE];\n\t\tSystem.arraycopy(payload, inputOffset, nonceResponder, 0, NONCE_SIZE);\n\t\tinputOffset += NONCE_SIZE;\n\n\t\tbyte[] hisExponential = new byte[DiffieHellman.modulusLengthInBytes()];\n\t\tSystem.arraycopy(payload, inputOffset, hisExponential, 0, DiffieHellman.modulusLengthInBytes());\n\t\tinputOffset += DiffieHellman.modulusLengthInBytes();\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1,hisExponential);\n\n\t\tbyte[] r = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, r, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tinputOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tbyte[] s = new byte[Node.SIGNATURE_PARAMETER_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, s, 0, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tinputOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\n\t\tbyte[] authenticator = new byte[HASH_LENGTH];\n\t\tSystem.arraycopy(payload, inputOffset, authenticator, 0, HASH_LENGTH);\n\t\tinputOffset += HASH_LENGTH;\n\t\t\n\t\t// Check try to find the authenticator in the cache.\n\t\t// If authenticator is already present, indicates duplicate/replayed message2\n\t\t// Now simply transmit the corresponding message3\n\t\tObject message3 = null;\n\t\tsynchronized (authenticatorCache) {\n\t\t\tmessage3 = authenticatorCache.get(authenticator);\n\t\t}\n\t\tif(message3 != null) {\n\t\t\tLogger.normal(this, \"We replayed a message from the cache (shouldn't happen often) -\"+pn);\n\t\t\tsendAuthPacket(1, 2, 3, (byte[]) message3, pn, replyTo);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// sanity check\n\t\tbyte[] myNi = null;\n\t\tsynchronized (pn) {\n\t\t\tmyNi = (byte[]) pn.jfkNoncesSent.get(replyTo);\n\t\t}\n\t\t// We don't except such a message;\n\t\tif(myNi == null) {\n\t\t\tLogger.normal(this, \"We received an unexpected JFK(2) message from \"+pn);\n\t\t\treturn;\n\t\t} else if(!Arrays.equals(myNi, nonceInitiator)){\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Ignoring old JFK(2) (different nonce to the one we sent - either a timing artefact or an attempt to change the nonce)\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(!DiffieHellman.checkDHExponentialValidity(this.getClass(), _hisExponential)) {\n\t\t\tLogger.error(this, \"We can't accept the exponential \"+pn+\" sent us!! REDFLAG: IT CAN'T HAPPEN UNLESS AGAINST AN ACTIVE ATTACKER!!\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Verify the DSA signature\n\t\tDSASignature remoteSignature = new DSASignature(new NativeBigInteger(1,r), new NativeBigInteger(1,s));\n\t\t// At that point we don't know if it's \"him\"; let's check it out\n\t\tbyte[] locallyExpectedExponentials = assembleDHParams(_hisExponential, pn.peerCryptoGroup);\n\n\t\tif(!DSA.verify(pn.peerPubKey, remoteSignature, new NativeBigInteger(1, SHA256.digest(locallyExpectedExponentials)), false)) {\n\t\t\tLogger.error(this, \"The signature verification has failed in JFK(2)!! \"+pn);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// At this point we know it's from the peer, so we can report a packet received.\n\t\tpn.receivedPacket(true);\n\t\t\n\t\tsendJFKMessage3(1, 2, 3, nonceInitiator, nonceResponder, hisExponential, authenticator, pn, replyTo, unknownInitiator, setupType);\n\n\t\tlong t2=System.currentTimeMillis();\n\t\tif((t2-t1)>500)\n\t\t\tLogger.error(this,\"Message1 timeout error:Sending packet for\"+pn.getPeer());\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Send an auth packet.\n\t */\n\tprivate void sendAuthPacket(int version, int negType, int phase, byte[] data, PeerNode pn, Peer replyTo) {\n\t\tlong now = System.currentTimeMillis();\n\t\tlong delta = now - pn.lastSentPacketTime();\n\t\tbyte[] output = new byte[data.length+3];\n\t\toutput[0] = (byte) version;\n\t\toutput[1] = (byte) negType;\n\t\toutput[2] = (byte) phase;\n\t\tSystem.arraycopy(data, 0, output, 3, data.length);\n\t\tif(logMINOR) Logger.minor(this, \"Sending auth packet for \"+pn.getPeer()+\" (phase=\"+phase+\", ver=\"+version+\", nt=\"+negType+\") (last packet sent \"+TimeUtil.formatTime(delta, 2, true)+\" ago) to \"+replyTo+\" data.length=\"+data.length);\n\t\tsendAuthPacket(output, pn, replyTo);\n\t}","id":7705,"modified_method":"/**\n\t * Send an auth packet.\n\t */\n\tprivate void sendAuthPacket(int version, int negType, int phase, byte[] data, PeerNode pn, Peer replyTo) {\n\t\tlong now = System.currentTimeMillis();\n\t\tlong delta = now - pn.lastSentPacketTime();\n\t\tbyte[] output = new byte[data.length+3];\n\t\toutput[0] = (byte) version;\n\t\toutput[1] = (byte) negType;\n\t\toutput[2] = (byte) phase;\n\t\tSystem.arraycopy(data, 0, output, 3, data.length);\n\t\tif(logMINOR) Logger.minor(this, \"Sending auth packet for \"+pn.getPeer()+\" (phase=\"+phase+\", ver=\"+version+\", nt=\"+negType+\") (last packet sent \"+TimeUtil.formatTime(delta, 2, true)+\" ago) to \"+replyTo+\" data.length=\"+data.length);\n\t\tsendAuthPacket(output, pn.outgoingSetupCipher, pn, replyTo);\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"public void sendHandshake(PeerNode pn) {\n\t\tint negType = pn.selectNegType(this);\n\t\tif(negType == -1) {\n\t\t\t// Pick a random negType from what I do support\n\t\t\tint[] negTypes = supportedNegTypes();\n\t\t\tnegType = negTypes[node.random.nextInt(negTypes.length)];\n\t\t\tLogger.normal(this, \"Cannot send handshake to \"+pn+\" because no common negTypes, choosing random negType of \"+negType);\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Possibly sending handshake to \"+pn+\" negotiation type \"+negType);\n\t\tPeer[] handshakeIPs;\n\t\tif(!pn.shouldSendHandshake()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Not sending handshake to \"+pn.getPeer()+\" because pn.shouldSendHandshake() returned false\");\n\t\t\treturn;\n\t\t}\n\t\tlong firstTime = System.currentTimeMillis();\n\t\thandshakeIPs = pn.getHandshakeIPs();\n\t\tlong secondTime = System.currentTimeMillis();\n\t\tif((secondTime - firstTime) > 1000)\n\t\t\tLogger.error(this, \"getHandshakeIPs() took more than a second to execute (\"+(secondTime - firstTime)+\") working on \"+pn.userToString());\n\t\tif(handshakeIPs.length == 0) {\n\t\t\tpn.couldNotSendHandshake();\n\t\t\tlong thirdTime = System.currentTimeMillis();\n\t\t\tif((thirdTime - secondTime) > 1000)\n\t\t\t\tLogger.error(this, \"couldNotSendHandshake() (after getHandshakeIPs()) took more than a second to execute (\"+(thirdTime - secondTime)+\") working on \"+pn.userToString());\n\t\t\treturn;\n\t\t}\n\t\tint sentCount = 0;\n\t\tlong loopTime1 = System.currentTimeMillis();\n\t\tfor(int i=0;i<handshakeIPs.length;i++){\n\t\t\tPeer peer = handshakeIPs[i];\n\t\t\tFreenetInetAddress addr = peer.getFreenetAddress();\n\t\t\tif(!crypto.allowConnection(pn, addr)) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Not sending handshake packet to \"+peer+\" for \"+pn);\n\t\t\t}\n\t\t\tif(peer.getAddress(false) == null) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Not sending handshake to \"+handshakeIPs[i]+\" for \"+pn.getPeer()+\" because the DNS lookup failed or it's a currently unsupported IPv6 address\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif((!pn.allowLocalAddresses()) && (!peer.isRealInternetAddress(false, false))) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Not sending handshake to \"+handshakeIPs[i]+\" for \"+pn.getPeer()+\" because it's not a real Internet address and metadata.allowLocalAddresses is not true\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsendJFKMessage1(pn, peer, false);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Sending handshake to \"+peer+\" for \"+pn+\" (\"+i+\" of \"+handshakeIPs.length);\n\t\t\tpn.sentHandshake();\n\t\t\tsentCount += 1;\n\t\t}\n\t\tlong loopTime2 = System.currentTimeMillis();\n\t\tif((loopTime2 - loopTime1) > 1000)\n\t\t\tLogger.normal(this, \"loopTime2 is more than a second after loopTime1 (\"+(loopTime2 - loopTime1)+\") working on \"+pn.userToString());\n\t\tif(sentCount==0) {\n\t\t\tpn.couldNotSendHandshake();\n\t\t}\n\t}","id":7706,"modified_method":"public void sendHandshake(PeerNode pn) {\n\t\tint negType = pn.selectNegType(this);\n\t\tif(negType == -1) {\n\t\t\t// Pick a random negType from what I do support\n\t\t\tint[] negTypes = supportedNegTypes();\n\t\t\tnegType = negTypes[node.random.nextInt(negTypes.length)];\n\t\t\tLogger.normal(this, \"Cannot send handshake to \"+pn+\" because no common negTypes, choosing random negType of \"+negType);\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Possibly sending handshake to \"+pn+\" negotiation type \"+negType);\n\t\tPeer[] handshakeIPs;\n\t\tif(!pn.shouldSendHandshake()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Not sending handshake to \"+pn.getPeer()+\" because pn.shouldSendHandshake() returned false\");\n\t\t\treturn;\n\t\t}\n\t\tlong firstTime = System.currentTimeMillis();\n\t\thandshakeIPs = pn.getHandshakeIPs();\n\t\tlong secondTime = System.currentTimeMillis();\n\t\tif((secondTime - firstTime) > 1000)\n\t\t\tLogger.error(this, \"getHandshakeIPs() took more than a second to execute (\"+(secondTime - firstTime)+\") working on \"+pn.userToString());\n\t\tif(handshakeIPs.length == 0) {\n\t\t\tpn.couldNotSendHandshake();\n\t\t\tlong thirdTime = System.currentTimeMillis();\n\t\t\tif((thirdTime - secondTime) > 1000)\n\t\t\t\tLogger.error(this, \"couldNotSendHandshake() (after getHandshakeIPs()) took more than a second to execute (\"+(thirdTime - secondTime)+\") working on \"+pn.userToString());\n\t\t\treturn;\n\t\t}\n\t\tint sentCount = 0;\n\t\tlong loopTime1 = System.currentTimeMillis();\n\t\tfor(int i=0;i<handshakeIPs.length;i++){\n\t\t\tPeer peer = handshakeIPs[i];\n\t\t\tFreenetInetAddress addr = peer.getFreenetAddress();\n\t\t\tif(!crypto.allowConnection(pn, addr)) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Not sending handshake packet to \"+peer+\" for \"+pn);\n\t\t\t}\n\t\t\tif(peer.getAddress(false) == null) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Not sending handshake to \"+handshakeIPs[i]+\" for \"+pn.getPeer()+\" because the DNS lookup failed or it's a currently unsupported IPv6 address\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif((!pn.allowLocalAddresses()) && (!peer.isRealInternetAddress(false, false))) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Not sending handshake to \"+handshakeIPs[i]+\" for \"+pn.getPeer()+\" because it's not a real Internet address and metadata.allowLocalAddresses is not true\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsendJFKMessage1(pn, peer, false, -1);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Sending handshake to \"+peer+\" for \"+pn+\" (\"+i+\" of \"+handshakeIPs.length);\n\t\t\tpn.sentHandshake();\n\t\t\tsentCount += 1;\n\t\t}\n\t\tlong loopTime2 = System.currentTimeMillis();\n\t\tif((loopTime2 - loopTime1) > 1000)\n\t\t\tLogger.normal(this, \"loopTime2 is more than a second after loopTime1 (\"+(loopTime2 - loopTime1)+\") working on \"+pn.userToString());\n\t\tif(sentCount==0) {\n\t\t\tpn.couldNotSendHandshake();\n\t\t}\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Process a decrypted, authenticated auth packet.\n\t * @param payload The packet payload, after it has been decrypted.\n\t */\n\tprivate void processDecryptedAuth(byte[] payload, PeerNode pn, Peer replyTo, boolean oldOpennetPeer) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\tif(pn.isDisabled()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Won't connect to a disabled peer (\"+pn+ ')');\n\t\t\treturn;  // We don't connect to disabled peers\n\t\t}\n\n\t\tlong now = System.currentTimeMillis();\n\t\tint delta = (int) (now - pn.lastSentPacketTime());\n\n\t\tint negType = payload[1];\n\t\tint packetType = payload[2];\n\t\tint version = payload[0];\n\n\t\tif(logMINOR) Logger.minor(this, \"Received auth packet for \"+pn.getPeer()+\" (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\") (last packet sent \"+TimeUtil.formatTime(delta, 2, true)+\" ago) from \"+replyTo+\"\");\n\n\t\t/* Format:\n\t\t * 1 byte - version number (1)\n\t\t * 1 byte - negotiation type (0 = simple DH, will not be supported when implement JFKi || 1 = StS)\n\t\t * 1 byte - packet type (0-3)\n\t\t */\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\n\t\tif(negType == 0) {\n\t\t\tLogger.error(this, \"Old ephemeral Diffie-Hellman (negType 0) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType == 1) {\n\t\t\tLogger.error(this, \"Old StationToStation (negType 1) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType==2){\n\t\t\t/*\n\t\t\t * We implement Just Fast Keying key management protocol with active identity protection\n\t\t\t * for the initiator and no identity protection for the responder\n\t\t\t * M1:\n\t\t\t * This is a straightforward DiffieHellman exponential.\n\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t * exponentials during different sessions while ensuring that the resulting session\n\t\t\t * key will be different,can be used to differentiate between parallel sessions \n\t\t\t * M2:\n\t\t\t * Responder replies with a signed copy of his own exponential, a random nonce and \n\t\t\t * an authenticator which provides sufficient defense against forgeries,replays\n\t\t\t * We slightly deviate JFK here;we do not send any public key information as specified in the JFK docs \n\t\t\t * M3:\n\t\t\t * Initiator echoes the data sent by the responder including the authenticator. \n\t\t\t * This helps the responder verify the authenticity of the returned data. \n\t\t\t * M4:\n\t\t\t * Encrypted message of the signature on both nonces, both exponentials using the same keys as in the previous message\n\t\t\t */ \n\t\t\tif(packetType<0 || packetType>3){\n\t\t\t\tLogger.error(this,\"Unknown PacketType\" + packetType + \"from\" + replyTo + \"from\" +pn); \n\t\t\t\treturn ;\n\t\t\t}\n\t\t\telse if(packetType==0){\n\t\t\t\t/*\n\t\t\t\t * Initiator- This is a straightforward DiffieHellman exponential.\n\t\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t\t * exponentials during different sessions while ensuring that the resulting\n\t\t\t\t * session key will be different,can be used to differentiate between\n\t\t\t\t * parallel sessions\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage1(payload,3,pn,replyTo,false);\n\n\t\t\t}\n\t\t\telse if(packetType==1){\n\t\t\t\t/*\n\t\t\t\t * Responder replies with a signed copy of his own exponential, a random\n\t\t\t\t * nonce and an authenticator calculated from a transient hash key private\n\t\t\t\t * to the responder.\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage2(payload,3,pn,replyTo);\n\t\t\t}\n\t\t\telse if(packetType==2){\n\t\t\t\t/*\n\t\t\t\t * Initiator echoes the data sent by the responder.These messages are\n\t\t\t\t * cached by the Responder.Receiving a duplicate message simply causes\n\t\t\t\t * the responder to Re-transmit the corresponding message4\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage3(payload, 3, pn, replyTo, oldOpennetPeer);\n\t\t\t}\n\t\t\telse if(packetType==3){\n\t\t\t\t/*\n\t\t\t\t * Encrypted message of the signature on both nonces, both exponentials \n\t\t\t\t * using the same keys as in the previous message.\n\t\t\t\t * The signature is non-message recovering\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage4(payload, 3, pn, replyTo, oldOpennetPeer);\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.error(this, \"Decrypted auth packet but unknown negotiation type \"+negType+\" from \"+replyTo+\" possibly from \"+pn);\n\t\t\treturn;\n\t\t}\n\t}","id":7707,"modified_method":"/**\n\t * Process a decrypted, authenticated auth packet.\n\t * @param payload The packet payload, after it has been decrypted.\n\t */\n\tprivate void processDecryptedAuth(byte[] payload, PeerNode pn, Peer replyTo, boolean oldOpennetPeer) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\tif(pn.isDisabled()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Won't connect to a disabled peer (\"+pn+ ')');\n\t\t\treturn;  // We don't connect to disabled peers\n\t\t}\n\n\t\tlong now = System.currentTimeMillis();\n\t\tint delta = (int) (now - pn.lastSentPacketTime());\n\n\t\tint negType = payload[1];\n\t\tint packetType = payload[2];\n\t\tint version = payload[0];\n\n\t\tif(logMINOR) Logger.minor(this, \"Received auth packet for \"+pn.getPeer()+\" (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\") (last packet sent \"+TimeUtil.formatTime(delta, 2, true)+\" ago) from \"+replyTo+\"\");\n\n\t\t/* Format:\n\t\t * 1 byte - version number (1)\n\t\t * 1 byte - negotiation type (0 = simple DH, will not be supported when implement JFKi || 1 = StS)\n\t\t * 1 byte - packet type (0-3)\n\t\t */\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\n\t\tif(negType == 0) {\n\t\t\tLogger.error(this, \"Old ephemeral Diffie-Hellman (negType 0) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType == 1) {\n\t\t\tLogger.error(this, \"Old StationToStation (negType 1) not supported.\");\n\t\t\treturn;\n\t\t} else if (negType==2){\n\t\t\t/*\n\t\t\t * We implement Just Fast Keying key management protocol with active identity protection\n\t\t\t * for the initiator and no identity protection for the responder\n\t\t\t * M1:\n\t\t\t * This is a straightforward DiffieHellman exponential.\n\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t * exponentials during different sessions while ensuring that the resulting session\n\t\t\t * key will be different,can be used to differentiate between parallel sessions \n\t\t\t * M2:\n\t\t\t * Responder replies with a signed copy of his own exponential, a random nonce and \n\t\t\t * an authenticator which provides sufficient defense against forgeries,replays\n\t\t\t * We slightly deviate JFK here;we do not send any public key information as specified in the JFK docs \n\t\t\t * M3:\n\t\t\t * Initiator echoes the data sent by the responder including the authenticator. \n\t\t\t * This helps the responder verify the authenticity of the returned data. \n\t\t\t * M4:\n\t\t\t * Encrypted message of the signature on both nonces, both exponentials using the same keys as in the previous message\n\t\t\t */ \n\t\t\tif(packetType<0 || packetType>3){\n\t\t\t\tLogger.error(this,\"Unknown PacketType\" + packetType + \"from\" + replyTo + \"from\" +pn); \n\t\t\t\treturn ;\n\t\t\t}\n\t\t\telse if(packetType==0){\n\t\t\t\t/*\n\t\t\t\t * Initiator- This is a straightforward DiffieHellman exponential.\n\t\t\t\t * The Initiator Nonce serves two purposes;it allows the initiator to use the same\n\t\t\t\t * exponentials during different sessions while ensuring that the resulting\n\t\t\t\t * session key will be different,can be used to differentiate between\n\t\t\t\t * parallel sessions\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage1(payload,3,pn,replyTo,false,-1);\n\n\t\t\t}\n\t\t\telse if(packetType==1){\n\t\t\t\t/*\n\t\t\t\t * Responder replies with a signed copy of his own exponential, a random\n\t\t\t\t * nonce and an authenticator calculated from a transient hash key private\n\t\t\t\t * to the responder.\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage2(payload,3,pn,replyTo,false,-1);\n\t\t\t}\n\t\t\telse if(packetType==2){\n\t\t\t\t/*\n\t\t\t\t * Initiator echoes the data sent by the responder.These messages are\n\t\t\t\t * cached by the Responder.Receiving a duplicate message simply causes\n\t\t\t\t * the responder to Re-transmit the corresponding message4\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage3(payload, 3, pn, replyTo, oldOpennetPeer, false, -1);\n\t\t\t}\n\t\t\telse if(packetType==3){\n\t\t\t\t/*\n\t\t\t\t * Encrypted message of the signature on both nonces, both exponentials \n\t\t\t\t * using the same keys as in the previous message.\n\t\t\t\t * The signature is non-message recovering\n\t\t\t\t */\n\t\t\t\tprocessJFKMessage4(payload, 3, pn, replyTo, oldOpennetPeer, false, -1);\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.error(this, \"Decrypted auth packet but unknown negotiation type \"+negType+\" from \"+replyTo+\" possibly from \"+pn);\n\t\t\treturn;\n\t\t}\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Send an auth packet (we have constructed the payload, now hash it, pad it, encrypt it).\n\t */\n\tprivate void sendAuthPacket(byte[] output, PeerNode pn, Peer replyTo) {\n\t\tint length = output.length;\n\t\tif(length > sock.getMaxPacketSize()) {\n\t\t\tthrow new IllegalStateException(\"Cannot send auth packet: too long: \"+length);\n\t\t}\n\t\tBlockCipher cipher = pn.outgoingSetupCipher;\n\t\tif(logMINOR) Logger.minor(this, \"Outgoing cipher: \"+HexUtil.bytesToHex(pn.outgoingSetupKey));\n\t\tPCFBMode pcfb = PCFBMode.create(cipher);\n\t\tint paddingLength = node.fastWeakRandom.nextInt(100);\n\t\tbyte[] iv = new byte[pcfb.lengthIV()];\n\t\tnode.random.nextBytes(iv);\n\t\tbyte[] hash = SHA256.digest(output);\n\t\tif(logMINOR) Logger.minor(this, \"Data hash: \"+HexUtil.bytesToHex(hash));\n\t\tbyte[] data = new byte[iv.length + hash.length + 2 /* length */ + output.length + paddingLength];\n\t\tpcfb.reset(iv);\n\t\tSystem.arraycopy(iv, 0, data, 0, iv.length);\n\t\tpcfb.blockEncipher(hash, 0, hash.length);\n\t\tSystem.arraycopy(hash, 0, data, iv.length, hash.length);\n\t\tif(logMINOR) Logger.minor(this, \"Payload length: \"+length);\n\t\tdata[hash.length+iv.length] = (byte) pcfb.encipher((byte)(length>>8));\n\t\tdata[hash.length+iv.length+1] = (byte) pcfb.encipher((byte)length);\n\t\tpcfb.blockEncipher(output, 0, output.length);\n\t\tSystem.arraycopy(output, 0, data, hash.length+iv.length+2, output.length);\n\t\tbyte[] random = new byte[paddingLength];\n\t\tnode.fastWeakRandom.nextBytes(random);\n\t\tSystem.arraycopy(random, 0, data, hash.length+iv.length+2+output.length, random.length);\n\t\ttry {\n\t\t\tsendPacket(data, replyTo, pn, 0);\n\t\t} catch (LocalAddressException e) {\n\t\t\tLogger.error(this, \"Tried to send auth packet to local address: \"+replyTo+\" for \"+pn+\" - maybe you should set allowLocalAddresses for this peer??\");\n\t\t}\n\t}","id":7708,"modified_method":"/**\n\t * Send an auth packet (we have constructed the payload, now hash it, pad it, encrypt it).\n\t */\n\tprivate void sendAuthPacket(byte[] output, BlockCipher cipher, PeerNode pn, Peer replyTo) {\n\t\tint length = output.length;\n\t\tif(length > sock.getMaxPacketSize()) {\n\t\t\tthrow new IllegalStateException(\"Cannot send auth packet: too long: \"+length);\n\t\t}\n\t\tPCFBMode pcfb = PCFBMode.create(cipher);\n\t\tint paddingLength = node.fastWeakRandom.nextInt(100);\n\t\tbyte[] iv = new byte[pcfb.lengthIV()];\n\t\tnode.random.nextBytes(iv);\n\t\tbyte[] hash = SHA256.digest(output);\n\t\tif(logMINOR) Logger.minor(this, \"Data hash: \"+HexUtil.bytesToHex(hash));\n\t\tbyte[] data = new byte[iv.length + hash.length + 2 /* length */ + output.length + paddingLength];\n\t\tpcfb.reset(iv);\n\t\tSystem.arraycopy(iv, 0, data, 0, iv.length);\n\t\tpcfb.blockEncipher(hash, 0, hash.length);\n\t\tSystem.arraycopy(hash, 0, data, iv.length, hash.length);\n\t\tif(logMINOR) Logger.minor(this, \"Payload length: \"+length);\n\t\tdata[hash.length+iv.length] = (byte) pcfb.encipher((byte)(length>>8));\n\t\tdata[hash.length+iv.length+1] = (byte) pcfb.encipher((byte)length);\n\t\tpcfb.blockEncipher(output, 0, output.length);\n\t\tSystem.arraycopy(output, 0, data, hash.length+iv.length+2, output.length);\n\t\tbyte[] random = new byte[paddingLength];\n\t\tnode.fastWeakRandom.nextBytes(random);\n\t\tSystem.arraycopy(random, 0, data, hash.length+iv.length+2+output.length, random.length);\n\t\ttry {\n\t\t\tsendPacket(data, replyTo, pn, 0);\n\t\t} catch (LocalAddressException e) {\n\t\t\tLogger.error(this, \"Tried to send auth packet to local address: \"+replyTo+\" for \"+pn+\" - maybe you should set allowLocalAddresses for this peer??\");\n\t\t}\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void processDecryptedAuthAnonReply(byte[] payload, Peer replyTo, PeerNode pn) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\t\n\t\t/** Protocol version. Should be 1. */\n\t\tint version = payload[0];\n\t\t/** Negotiation type. 2 = JFK. Other types might indicate other DH variants, \n\t\t * or even non-DH-based algorithms such as password based key setup. */\n\t\tint negType = payload[1];\n\t\t/** Packet phase. */\n\t\tint packetType = payload[2];\n\t\t/** Setup type. See above. */\n\t\tint setupType = payload[3];\n\t\t\n\t\tif(logMINOR) Logger.minor(this, \"Received anonymous auth packet (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\", setup type=\"+setupType+\") from \"+replyTo+\"\");\n\t\t\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\t\tif(negType != 2) {\n\t\t\tLogger.error(this, \"Unknown neg type: \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Known setup types\n\t\tif(setupType != SETUP_OPENNET_SEEDNODE) {\n\t\t\tLogger.error(this, \"Unknown setup type \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// We are the INITIATOR.\n\t\t// Therefore, we can only get packets of phase 2 and 4 here.\n\t\t\n\t\tif(packetType == 1) {\n\t\t\t// Phase 2\n\t\t\tprocessJFKMessage2(payload, 4, pn, replyTo);\n\t\t} else if(packetType == 3) {\n\t\t\t// Phase 4\n\t\t\tprocessJFKMessage4(payload, 4, pn, replyTo, false);\n\t\t} else {\n\t\t\tLogger.error(this, \"Invalid phase \"+packetType+\" for anonymous-initiator (we are the responder)\");\n\t\t}\n\t}","id":7709,"modified_method":"private void processDecryptedAuthAnonReply(byte[] payload, Peer replyTo, PeerNode pn) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo+\" for \"+pn);\n\t\t\n\t\t/** Protocol version. Should be 1. */\n\t\tint version = payload[0];\n\t\t/** Negotiation type. 2 = JFK. Other types might indicate other DH variants, \n\t\t * or even non-DH-based algorithms such as password based key setup. */\n\t\tint negType = payload[1];\n\t\t/** Packet phase. */\n\t\tint packetType = payload[2];\n\t\t/** Setup type. See above. */\n\t\tint setupType = payload[3];\n\t\t\n\t\tif(logMINOR) Logger.minor(this, \"Received anonymous auth packet (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\", setup type=\"+setupType+\") from \"+replyTo+\"\");\n\t\t\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\t\tif(negType != 2) {\n\t\t\tLogger.error(this, \"Unknown neg type: \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Known setup types\n\t\tif(setupType != SETUP_OPENNET_SEEDNODE) {\n\t\t\tLogger.error(this, \"Unknown setup type \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// We are the INITIATOR.\n\t\t// Therefore, we can only get packets of phase 2 and 4 here.\n\t\t\n\t\tif(packetType == 1) {\n\t\t\t// Phase 2\n\t\t\tprocessJFKMessage2(payload, 4, pn, replyTo, true, setupType);\n\t\t} else if(packetType == 3) {\n\t\t\t// Phase 4\n\t\t\tprocessJFKMessage4(payload, 4, pn, replyTo, false, true, setupType);\n\t\t} else {\n\t\t\tLogger.error(this, \"Invalid phase \"+packetType+\" for anonymous-initiator (we are the responder)\");\n\t\t}\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void processDecryptedAuthAnon(byte[] payload, Peer replyTo) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo);\n\t\t\n\t\t/** Protocol version. Should be 1. */\n\t\tint version = payload[0];\n\t\t/** Negotiation type. 2 = JFK. Other types might indicate other DH variants, \n\t\t * or even non-DH-based algorithms such as password based key setup. */\n\t\tint negType = payload[1];\n\t\t/** Packet phase. */\n\t\tint packetType = payload[2];\n\t\t/** Setup type. See above. */\n\t\tint setupType = payload[3];\n\t\t\n\t\tif(logMINOR) Logger.minor(this, \"Received anonymous auth packet (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\", setup type=\"+setupType+\") from \"+replyTo+\"\");\n\t\t\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\t\tif(negType != 2) {\n\t\t\tLogger.error(this, \"Unknown neg type: \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Known setup types\n\t\tif(setupType != SETUP_OPENNET_SEEDNODE) {\n\t\t\tLogger.error(this, \"Unknown setup type \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// We are the RESPONDER.\n\t\t// Therefore, we can only get packets of phase 1 and 3 here.\n\t\t\n\t\tif(packetType == 0) {\n\t\t\t// Phase 1\n\t\t\tprocessJFKMessage1(payload,4,null,replyTo, true);\n\t\t} else if(packetType == 2) {\n\t\t\t// Phase 3\n\t\t\tprocessJFKMessage3(payload, 4, null, replyTo, false);\n\t\t} else {\n\t\t\tLogger.error(this, \"Invalid phase \"+packetType+\" for anonymous-initiator (we are the responder)\");\n\t\t}\n\t}","id":7710,"modified_method":"private void processDecryptedAuthAnon(byte[] payload, Peer replyTo) {\n\t\tif(logMINOR) Logger.minor(this, \"Processing decrypted auth packet from \"+replyTo);\n\t\t\n\t\t/** Protocol version. Should be 1. */\n\t\tint version = payload[0];\n\t\t/** Negotiation type. 2 = JFK. Other types might indicate other DH variants, \n\t\t * or even non-DH-based algorithms such as password based key setup. */\n\t\tint negType = payload[1];\n\t\t/** Packet phase. */\n\t\tint packetType = payload[2];\n\t\t/** Setup type. See above. */\n\t\tint setupType = payload[3];\n\t\t\n\t\tif(logMINOR) Logger.minor(this, \"Received anonymous auth packet (phase=\"+packetType+\", v=\"+version+\", nt=\"+negType+\", setup type=\"+setupType+\") from \"+replyTo+\"\");\n\t\t\n\t\tif(version != 1) {\n\t\t\tLogger.error(this, \"Decrypted auth packet but invalid version: \"+version);\n\t\t\treturn;\n\t\t}\n\t\tif(negType != 2) {\n\t\t\tLogger.error(this, \"Unknown neg type: \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Known setup types\n\t\tif(setupType != SETUP_OPENNET_SEEDNODE) {\n\t\t\tLogger.error(this, \"Unknown setup type \"+negType);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// We are the RESPONDER.\n\t\t// Therefore, we can only get packets of phase 1 and 3 here.\n\t\t\n\t\tif(packetType == 0) {\n\t\t\t// Phase 1\n\t\t\tprocessJFKMessage1(payload,4,null,replyTo, true, setupType);\n\t\t} else if(packetType == 2) {\n\t\t\t// Phase 3\n\t\t\tprocessJFKMessage3(payload, 4, null, replyTo, false, true, setupType);\n\t\t} else {\n\t\t\tLogger.error(this, \"Invalid phase \"+packetType+\" for anonymous-initiator (we are the responder)\");\n\t\t}\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void sendJFKMessage1(PeerNode pn, Peer replyTo, boolean unknownInitiator) {\n\t\tif(logMINOR) Logger.minor(this, \"Sending a JFK(1) message to \"+pn);\n\t\tfinal long now = System.currentTimeMillis();\n\t\tDiffieHellmanLightContext ctx = (DiffieHellmanLightContext) pn.getKeyAgreementSchemeContext();\n\t\tif((ctx == null) || ((pn.jfkContextLifetime + DH_GENERATION_INTERVAL*DH_CONTEXT_BUFFER_SIZE) < now)) {\n\t\t\tpn.jfkContextLifetime = now;\n\t\t\tpn.setKeyAgreementSchemeContext(ctx = getLightDiffieHellmanContext());\n\t\t}\n\t\tint offset = 0;\n\t\tbyte[] myExponential = stripBigIntegerToNetworkFormat(ctx.myExponential);\n\t\tbyte[] nonce = new byte[NONCE_SIZE];\n\t\tnode.random.nextBytes(nonce);\n\t\t\n\t\tsynchronized (pn) {\n\t\t\tpn.jfkNoncesSent.put(replyTo, nonce);\n\t\t}\n\t\t\n\t\tint modulusLength = DiffieHellman.modulusLengthInBytes();\n\t\tbyte[] message1 = new byte[NONCE_SIZE+modulusLength+(unknownInitiator ? NodeCrypto.IDENTITY_LENGTH : 0)];\n\n\t\tSystem.arraycopy(nonce, 0, message1, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\tSystem.arraycopy(myExponential, 0, message1, offset, modulusLength);\n\t\t\n\t\tif(unknownInitiator) {\n\t\t\toffset += modulusLength;\n\t\t\tSystem.arraycopy(pn.identityHash, 0, message1, offset, pn.identityHash.length);\n\t\t}\n\n\t\tsendAuthPacket(1,2,0,message1,pn,replyTo);\n\t}","id":7711,"modified_method":"private void sendJFKMessage1(PeerNode pn, Peer replyTo, boolean unknownInitiator, int setupType) {\n\t\tif(logMINOR) Logger.minor(this, \"Sending a JFK(1) message to \"+pn);\n\t\tfinal long now = System.currentTimeMillis();\n\t\tDiffieHellmanLightContext ctx = (DiffieHellmanLightContext) pn.getKeyAgreementSchemeContext();\n\t\tif((ctx == null) || ((pn.jfkContextLifetime + DH_GENERATION_INTERVAL*DH_CONTEXT_BUFFER_SIZE) < now)) {\n\t\t\tpn.jfkContextLifetime = now;\n\t\t\tpn.setKeyAgreementSchemeContext(ctx = getLightDiffieHellmanContext());\n\t\t}\n\t\tint offset = 0;\n\t\tbyte[] myExponential = stripBigIntegerToNetworkFormat(ctx.myExponential);\n\t\tbyte[] nonce = new byte[NONCE_SIZE];\n\t\tnode.random.nextBytes(nonce);\n\t\t\n\t\tsynchronized (pn) {\n\t\t\tpn.jfkNoncesSent.put(replyTo, nonce);\n\t\t}\n\t\t\n\t\tint modulusLength = DiffieHellman.modulusLengthInBytes();\n\t\tbyte[] message1 = new byte[NONCE_SIZE+modulusLength+(unknownInitiator ? NodeCrypto.IDENTITY_LENGTH : 0)];\n\n\t\tSystem.arraycopy(nonce, 0, message1, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\tSystem.arraycopy(myExponential, 0, message1, offset, modulusLength);\n\t\t\n\t\tif(unknownInitiator) {\n\t\t\toffset += modulusLength;\n\t\t\tSystem.arraycopy(pn.identityHash, 0, message1, offset, pn.identityHash.length);\n\t\t\tsendAnonAuthPacket(1,2,0,setupType,message1,pn,replyTo,pn.anonymousInitiatorSetupCipher);\n\t\t} else {\n\t\t\tsendAuthPacket(1,2,0,message1,pn,replyTo);\n\t\t}\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void sendJFKMessage3(int version,int negType,int phase,byte[] nonceInitiator,byte[] nonceResponder,byte[] hisExponential, byte[] authenticator, final PeerNode pn, final Peer replyTo)\n\t{\n\t\tif(logMINOR) Logger.minor(this, \"Sending a JFK(3) message to \"+pn);\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\tDiffieHellmanLightContext ctx = (DiffieHellmanLightContext) pn.getKeyAgreementSchemeContext();\n\t\tif(ctx == null) return;\n\t\tbyte[] ourExponential = stripBigIntegerToNetworkFormat(ctx.myExponential);\n\t\tpn.jfkMyRef = crypto.myCompressedSetupRef();\n\t\tbyte[] data = new byte[8 + pn.jfkMyRef.length];\n\t\tSystem.arraycopy(Fields.longToBytes(node.bootID), 0, data, 0, 8);\n\t\tSystem.arraycopy(pn.jfkMyRef, 0, data, 8, pn.jfkMyRef.length);\n\t\tfinal byte[] message3 = new byte[NONCE_SIZE*2 + // nI, nR\n\t\t                           DiffieHellman.modulusLengthInBytes()*2 + // g^i, g^r\n\t\t                           HASH_LENGTH + // authenticator\n\t\t                           HASH_LENGTH + // HMAC(cyphertext)\n\t\t                           (c.getBlockSize() >> 3) + // IV\n\t\t                           Node.SIGNATURE_PARAMETER_LENGTH * 2 + // Signature (R,S)\n\t\t                           data.length]; // The bootid+noderef\n\t\tint offset = 0;\n\t\t// Ni\n\t\tSystem.arraycopy(nonceInitiator, 0, message3, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\t// Nr\n\t\tSystem.arraycopy(nonceResponder, 0, message3, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\t// g^i\n\t\tSystem.arraycopy(ourExponential, 0,message3, offset, ourExponential.length);\n\t\toffset += ourExponential.length;\n\t\t// g^r\n\t\tSystem.arraycopy(hisExponential, 0,message3, offset, hisExponential.length);\n\t\toffset += hisExponential.length;\n\n\t\t// Authenticator\n\t\tSystem.arraycopy(authenticator, 0, message3, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\t/*\n\t\t * Digital Signature of the message with the private key belonging to the initiator/responder\n\t\t * It is assumed to be non-message recovering\n\t\t */\n\t\tNativeBigInteger _ourExponential = new NativeBigInteger(1,ourExponential);\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1,hisExponential);\n\t\t// save parameters so that we can verify message4\n\t\tbyte[] toSign = assembleDHParams(nonceInitiator, nonceResponder, _ourExponential, _hisExponential, pn.identity, data);\n\t\tpn.setJFKBuffer(toSign);\n\t\tDSASignature localSignature = crypto.sign(SHA256.digest(toSign));\n\t\tbyte[] r = localSignature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = localSignature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\t\n\t\tBigInteger computedExponential = ctx.getHMACKey(_hisExponential, Global.DHgroupA);\n\t\tpn.jfkKs = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"0\");\n\t\tpn.jfkKe = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"1\");\n\t\tpn.jfkKa = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"2\");\n\t\tc.initialize(pn.jfkKe);\n\t\tPCFBMode pcfb = PCFBMode.create(c);\n\t\tint ivLength = pcfb.lengthIV();\n\t\tbyte[] iv = new byte[ivLength];\n\t\tnode.random.nextBytes(iv);\n\t\tpcfb.reset(iv);\n\t\tint cleartextOffset = 0;\n\t\tbyte[] prefix = null;\n\t\ttry { prefix = \"I\".getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException e) {}\n\t\t\n\t\tbyte[] cleartext = new byte[prefix.length + ivLength + Node.SIGNATURE_PARAMETER_LENGTH * 2 + data.length];\n\t\tSystem.arraycopy(prefix, 0, cleartext, cleartextOffset, prefix.length);\n\t\tcleartextOffset += prefix.length;\n\t\tSystem.arraycopy(iv, 0, cleartext, cleartextOffset, ivLength);\n\t\tcleartextOffset += ivLength;\n\t\tSystem.arraycopy(r, 0, cleartext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, cleartext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(data, 0, cleartext, cleartextOffset, data.length);\n\t\tcleartextOffset += data.length;\n\t\t\n\t\tint cleartextToEncypherOffset = prefix.length + ivLength;\n\t\tpcfb.blockEncipher(cleartext, cleartextToEncypherOffset, cleartext.length-cleartextToEncypherOffset);\n\t\t\n\t\t// We compute the HMAC of (prefix + cyphertext) Includes the IV!\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tbyte[] hmac = mac.mac(pn.jfkKa, cleartext, HASH_LENGTH);\n\t\t\n\t\t// copy stuffs back to the message\n\t\tSystem.arraycopy(hmac, 0, message3, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\tSystem.arraycopy(iv, 0, message3, offset, ivLength);\n\t\toffset += ivLength;\n\t\tSystem.arraycopy(cleartext, cleartextToEncypherOffset, message3, offset, cleartext.length-cleartextToEncypherOffset);\n\t\t\n\t\t// cache the message\n\t\tsynchronized (authenticatorCache) {\n\t\t\tif(!maybeResetTransientKey())\n\t\t\t\tauthenticatorCache.put(authenticator,message3);\n\t\t}\t\t\n\t\tsendAuthPacket(1, 2, 2, message3, pn, replyTo);\n\t\t\n\t\t/* Re-send the packet after 5sec if we don't get any reply */\n\t\tnode.getTicker().queueTimedJob(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tif(pn.timeLastConnected() >= pn.lastReceivedPacketTime()) {\n\t\t\t\t\tsendAuthPacket(1, 2, 2, message3, pn, replyTo);\n\t\t\t\t}\n\t\t\t}\n\t\t}, 5*1000);\n\t}","id":7712,"modified_method":"private void sendJFKMessage3(int version,int negType,int phase,byte[] nonceInitiator,byte[] nonceResponder,byte[] hisExponential, byte[] authenticator, final PeerNode pn, final Peer replyTo, boolean unknownInitiator, int setupType)\n\t{\n\t\tif(logMINOR) Logger.minor(this, \"Sending a JFK(3) message to \"+pn);\n\t\tBlockCipher c = null;\n\t\ttry { c = new Rijndael(256, 256); } catch (UnsupportedCipherException e) {}\n\t\tDiffieHellmanLightContext ctx = (DiffieHellmanLightContext) pn.getKeyAgreementSchemeContext();\n\t\tif(ctx == null) return;\n\t\tbyte[] ourExponential = stripBigIntegerToNetworkFormat(ctx.myExponential);\n\t\tpn.jfkMyRef = crypto.myCompressedSetupRef();\n\t\tbyte[] data = new byte[8 + pn.jfkMyRef.length];\n\t\tSystem.arraycopy(Fields.longToBytes(node.bootID), 0, data, 0, 8);\n\t\tSystem.arraycopy(pn.jfkMyRef, 0, data, 8, pn.jfkMyRef.length);\n\t\tfinal byte[] message3 = new byte[NONCE_SIZE*2 + // nI, nR\n\t\t                           DiffieHellman.modulusLengthInBytes()*2 + // g^i, g^r\n\t\t                           HASH_LENGTH + // authenticator\n\t\t                           HASH_LENGTH + // HMAC(cyphertext)\n\t\t                           (c.getBlockSize() >> 3) + // IV\n\t\t                           Node.SIGNATURE_PARAMETER_LENGTH * 2 + // Signature (R,S)\n\t\t                           data.length]; // The bootid+noderef\n\t\tint offset = 0;\n\t\t// Ni\n\t\tSystem.arraycopy(nonceInitiator, 0, message3, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\t// Nr\n\t\tSystem.arraycopy(nonceResponder, 0, message3, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\t// g^i\n\t\tSystem.arraycopy(ourExponential, 0,message3, offset, ourExponential.length);\n\t\toffset += ourExponential.length;\n\t\t// g^r\n\t\tSystem.arraycopy(hisExponential, 0,message3, offset, hisExponential.length);\n\t\toffset += hisExponential.length;\n\n\t\t// Authenticator\n\t\tSystem.arraycopy(authenticator, 0, message3, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\t/*\n\t\t * Digital Signature of the message with the private key belonging to the initiator/responder\n\t\t * It is assumed to be non-message recovering\n\t\t */\n\t\tNativeBigInteger _ourExponential = new NativeBigInteger(1,ourExponential);\n\t\tNativeBigInteger _hisExponential = new NativeBigInteger(1,hisExponential);\n\t\t// save parameters so that we can verify message4\n\t\tbyte[] toSign = assembleDHParams(nonceInitiator, nonceResponder, _ourExponential, _hisExponential, pn.identity, data);\n\t\tpn.setJFKBuffer(toSign);\n\t\tDSASignature localSignature = crypto.sign(SHA256.digest(toSign));\n\t\tbyte[] r = localSignature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = localSignature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\t\n\t\tBigInteger computedExponential = ctx.getHMACKey(_hisExponential, Global.DHgroupA);\n\t\tpn.jfkKs = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"0\");\n\t\tpn.jfkKe = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"1\");\n\t\tpn.jfkKa = computeJFKSharedKey(computedExponential, nonceInitiator, nonceResponder, \"2\");\n\t\tc.initialize(pn.jfkKe);\n\t\tPCFBMode pcfb = PCFBMode.create(c);\n\t\tint ivLength = pcfb.lengthIV();\n\t\tbyte[] iv = new byte[ivLength];\n\t\tnode.random.nextBytes(iv);\n\t\tpcfb.reset(iv);\n\t\tint cleartextOffset = 0;\n\t\tbyte[] prefix = null;\n\t\ttry { prefix = \"I\".getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException e) {}\n\t\t\n\t\tbyte[] cleartext = new byte[prefix.length + ivLength + Node.SIGNATURE_PARAMETER_LENGTH * 2 + data.length];\n\t\tSystem.arraycopy(prefix, 0, cleartext, cleartextOffset, prefix.length);\n\t\tcleartextOffset += prefix.length;\n\t\tSystem.arraycopy(iv, 0, cleartext, cleartextOffset, ivLength);\n\t\tcleartextOffset += ivLength;\n\t\tSystem.arraycopy(r, 0, cleartext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, cleartext, cleartextOffset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tcleartextOffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(data, 0, cleartext, cleartextOffset, data.length);\n\t\tcleartextOffset += data.length;\n\t\t\n\t\tint cleartextToEncypherOffset = prefix.length + ivLength;\n\t\tpcfb.blockEncipher(cleartext, cleartextToEncypherOffset, cleartext.length-cleartextToEncypherOffset);\n\t\t\n\t\t// We compute the HMAC of (prefix + cyphertext) Includes the IV!\n\t\tHMAC mac = new HMAC(SHA256.getInstance());\n\t\tbyte[] hmac = mac.mac(pn.jfkKa, cleartext, HASH_LENGTH);\n\t\t\n\t\t// copy stuffs back to the message\n\t\tSystem.arraycopy(hmac, 0, message3, offset, HASH_LENGTH);\n\t\toffset += HASH_LENGTH;\n\t\tSystem.arraycopy(iv, 0, message3, offset, ivLength);\n\t\toffset += ivLength;\n\t\tSystem.arraycopy(cleartext, cleartextToEncypherOffset, message3, offset, cleartext.length-cleartextToEncypherOffset);\n\t\t\n\t\t// cache the message\n\t\tsynchronized (authenticatorCache) {\n\t\t\tif(!maybeResetTransientKey())\n\t\t\t\tauthenticatorCache.put(authenticator,message3);\n\t\t}\n\t\tif(unknownInitiator)\n\t\t\tsendAnonAuthPacket(1, 2, 2, setupType, message3, pn, replyTo, pn.anonymousInitiatorSetupCipher);\n\t\telse\n\t\t\tsendAuthPacket(1, 2, 2, message3, pn, replyTo);\n\t\t\n\t\t/* Re-send the packet after 5sec if we don't get any reply */\n\t\tnode.getTicker().queueTimedJob(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tif(pn.timeLastConnected() >= pn.lastReceivedPacketTime()) {\n\t\t\t\t\tsendAuthPacket(1, 2, 2, message3, pn, replyTo);\n\t\t\t\t}\n\t\t\t}\n\t\t}, 5*1000);\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"private void sendJFKMessage2(byte[] nonceInitator, byte[] hisExponential, PeerNode pn, Peer replyTo) {\n\t\tif(logMINOR) Logger.minor(this, \"Sending a JFK(2) message to \"+pn);\n\t\tDiffieHellmanLightContext ctx = getLightDiffieHellmanContext();\n\t\t// g^r\n\t\tbyte[] myExponential = stripBigIntegerToNetworkFormat(ctx.myExponential);\n\t\t// Nr\n\t\tbyte[] myNonce = new byte[NONCE_SIZE];\n\t\tnode.random.nextBytes(myNonce);\n\t\tbyte[] r = ctx.signature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = ctx.signature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tHMAC hash = new HMAC(SHA256.getInstance());\n\t\tbyte[] authenticator = hash.mac(getTransientKey(),assembleJFKAuthenticator(myExponential, hisExponential, myNonce, nonceInitator, replyTo.getAddress().getAddress()), HASH_LENGTH);\n\t\tif(logMINOR) Logger.minor(this, \"We are using the following HMAC : \" + HexUtil.bytesToHex(authenticator));\n\n\t\tbyte[] message2 = new byte[NONCE_SIZE*2+DiffieHellman.modulusLengthInBytes()+\n\t\t                           Node.SIGNATURE_PARAMETER_LENGTH*2+\n\t\t                           HASH_LENGTH];\n\n\t\tint offset = 0;\n\t\tSystem.arraycopy(nonceInitator, 0, message2, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\tSystem.arraycopy(myNonce, 0, message2, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\tSystem.arraycopy(myExponential, 0, message2, offset, DiffieHellman.modulusLengthInBytes());\n\t\toffset += DiffieHellman.modulusLengthInBytes();\n\n\t\tSystem.arraycopy(r, 0, message2, offset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\toffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, message2, offset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\toffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\n\t\tSystem.arraycopy(authenticator, 0, message2, offset, HASH_LENGTH);\n\n\t\tsendAuthPacket(1,2,1,message2,pn,replyTo);\n\t}","id":7713,"modified_method":"private void sendJFKMessage2(byte[] nonceInitator, byte[] hisExponential, PeerNode pn, Peer replyTo, boolean unknownInitiator, int setupType) {\n\t\tif(logMINOR) Logger.minor(this, \"Sending a JFK(2) message to \"+pn);\n\t\tDiffieHellmanLightContext ctx = getLightDiffieHellmanContext();\n\t\t// g^r\n\t\tbyte[] myExponential = stripBigIntegerToNetworkFormat(ctx.myExponential);\n\t\t// Nr\n\t\tbyte[] myNonce = new byte[NONCE_SIZE];\n\t\tnode.random.nextBytes(myNonce);\n\t\tbyte[] r = ctx.signature.getRBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tbyte[] s = ctx.signature.getSBytes(Node.SIGNATURE_PARAMETER_LENGTH);\n\t\tHMAC hash = new HMAC(SHA256.getInstance());\n\t\tbyte[] authenticator = hash.mac(getTransientKey(),assembleJFKAuthenticator(myExponential, hisExponential, myNonce, nonceInitator, replyTo.getAddress().getAddress()), HASH_LENGTH);\n\t\tif(logMINOR) Logger.minor(this, \"We are using the following HMAC : \" + HexUtil.bytesToHex(authenticator));\n\n\t\tbyte[] message2 = new byte[NONCE_SIZE*2+DiffieHellman.modulusLengthInBytes()+\n\t\t                           Node.SIGNATURE_PARAMETER_LENGTH*2+\n\t\t                           HASH_LENGTH];\n\n\t\tint offset = 0;\n\t\tSystem.arraycopy(nonceInitator, 0, message2, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\tSystem.arraycopy(myNonce, 0, message2, offset, NONCE_SIZE);\n\t\toffset += NONCE_SIZE;\n\t\tSystem.arraycopy(myExponential, 0, message2, offset, DiffieHellman.modulusLengthInBytes());\n\t\toffset += DiffieHellman.modulusLengthInBytes();\n\n\t\tSystem.arraycopy(r, 0, message2, offset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\toffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\t\tSystem.arraycopy(s, 0, message2, offset, Node.SIGNATURE_PARAMETER_LENGTH);\n\t\toffset += Node.SIGNATURE_PARAMETER_LENGTH;\n\n\t\tSystem.arraycopy(authenticator, 0, message2, offset, HASH_LENGTH);\n\n\t\tif(unknownInitiator)\n\t\t\tsendAnonAuthPacket(1,2,1,setupType,message2,pn,replyTo,crypto.anonSetupCipher);\n\t\telse\n\t\t\tsendAuthPacket(1,2,1,message2,pn,replyTo);\n\t}","commit_id":"5030ac06e04a7e26bdb3c3482a4a99b15a05c765","url":"https://github.com/freenet/fred"},{"original_method":"@Override\n    public String getParameter(String s)\n    {\n        return null;\n    }","id":7714,"modified_method":"@Override\n    public String getParameter(String s)\n    {\n        if (this.parameters != null) {\n            List<String> values = this.parameters.get(s);\n            return values != null && values.size() > 0 ? values.get(0) : null;\n        }\n        return null;\n    }","commit_id":"397f143e918f70e92beb367d6e876effb25bdc2d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String[] getParameterValues(String s)\n    {\n        return new String[0];\n    }","id":7715,"modified_method":"@Override\n    public String[] getParameterValues(String s)\n    {\n        if (this.parameters != null) {\n            List<String> values = this.parameters.get(s);\n            return values != null ? values.toArray(new String[] {}) : null;\n        }\n        return null;\n    }","commit_id":"397f143e918f70e92beb367d6e876effb25bdc2d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Enumeration getParameterNames()\n    {\n        return null;\n    }","id":7716,"modified_method":"@Override\n    public Enumeration getParameterNames()\n    {\n        return this.parameters != null ? Collections.enumeration(this.parameters.keySet()) : null;\n    }","commit_id":"397f143e918f70e92beb367d6e876effb25bdc2d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @since 7.3M1\n     */\n    public void put(String name, String value)\n    {\n        if (this.parameters == null) {\n            this.parameters = new HashMap<>();\n        }\n        this.parameters.put(name, value);\n    }","id":7717,"modified_method":"/**\n     * @since 7.3M1\n     */\n    public void put(String name, String value)\n    {\n        if (this.parameters == null) {\n            this.parameters = new HashMap<>();\n        }\n        List<String> values = this.parameters.get(name);\n        if (values == null) {\n            values = new ArrayList<>();\n            this.parameters.put(name, values);\n        }\n        values.add(value);\n    }","commit_id":"397f143e918f70e92beb367d6e876effb25bdc2d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Map getParameterMap()\n    {\n        return null;\n    }","id":7718,"modified_method":"@Override\n    public Map getParameterMap()\n    {\n        return this.parameters != null ? Collections.unmodifiableMap(this.parameters) : null;\n    }","commit_id":"397f143e918f70e92beb367d6e876effb25bdc2d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String get(String name)\n    {\n        String result = null;\n        if (this.parameters != null) {\n            result = this.parameters.get(name);\n        }\n\n        return result;\n    }","id":7719,"modified_method":"@Override\n    public String get(String name)\n    {\n        return getParameter(name);\n    }","commit_id":"397f143e918f70e92beb367d6e876effb25bdc2d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static int alterEntries(String blacklistToUse, String[] supportedBlacklistTypes, String[] entries, String[] newEntries) {\n        // load blacklist data from file\n        ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\n        \n        // delete the old entry from file\n        String s, t, host, path;\n        for (int i=0; i<entries.length; i++) {\n            s = entries[i];\n            t = newEntries[i];\n            if (t.indexOf(\"/\") == -1) {\n                host = t;\n                path = \"/.*\";\n            } else {\n                host = t.substring(0, t.indexOf(\"/\"));\n                path = t.substring(t.indexOf(\"/\"));\n            }\n            \n            if (list != null && list.contains(s)) {\n                list.remove(s);\n                list.add(t);\n            }\n            \n            // remove the entry from the running blacklist engine\n            for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\n                if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\", blacklistToUse)) {\n                    plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],\n                            (s.indexOf(\"/\") == -1) ? s : s.substring(0, s.indexOf(\"/\")));\n                    plasmaSwitchboard.urlBlacklist.add(supportedBlacklistTypes[blTypes], host, path);\n                }                \n            }    \n        }\n        if (list != null) listManager.writeList(new File(listManager.listsPath, blacklistToUse), (String[])list.toArray(new String[list.size()]));\n        return entries.length;\n    }","id":7720,"modified_method":"private static int alterEntries(String blacklistToUse, String[] supportedBlacklistTypes, String[] entries, String[] newEntries) {\n        // load blacklist data from file\n        ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\n        \n        // delete the old entry from file\n        String s, t, host, path;\n        for (int i=0; i<entries.length; i++) {\n            s = entries[i];\n            t = newEntries[i];\n            if (t.indexOf(\"/\") == -1) {\n                host = t;\n                path = \"/.*\";\n            } else {\n                host = t.substring(0, t.indexOf(\"/\"));\n                path = t.substring(t.indexOf(\"/\"));\n            }\n            \n            if (list != null && list.contains(s)) {\n                list.remove(s);\n                list.add(t);\n            }\n            \n            // remove the entry from the running blacklist engine\n            for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\n                if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\", blacklistToUse)) {\n                    plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],\n                            (s.indexOf(\"/\") == -1) ? s : s.substring(0, s.indexOf(\"/\")),\n                            (s.indexOf(\"/\") == -1) ? \".*\" : s.substring(s.indexOf(\"/\") + 1));\n                    plasmaSwitchboard.urlBlacklist.add(supportedBlacklistTypes[blTypes], host, path);\n                }                \n            }    \n        }\n        if (list != null) listManager.writeList(new File(listManager.listsPath, blacklistToUse), (String[])list.toArray(new String[list.size()]));\n        return entries.length;\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private static int removeEntries(String blacklistToUse, String[] supportedBlacklistTypes, String[] entries) {\n        // load blacklist data from file\n        ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\n        \n        // delete the old entry from file\n        String s;\n        for (int i=0; i<entries.length; i++) {\n            s = entries[i];\n            if (list != null) while (list.contains(s)) list.remove(s);\n            \n            // remove the entry from the running blacklist engine\n            for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\n                if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\", blacklistToUse)) {\n                    plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],\n                            (s.indexOf(\"/\") == -1) ? s : s.substring(0, s.indexOf(\"/\")));\n                }                \n            }    \n        }\n        if (list != null) listManager.writeList(new File(listManager.listsPath, blacklistToUse), (String[])list.toArray(new String[list.size()]));\n        \n        return entries.length;\n    }","id":7721,"modified_method":"private static int removeEntries(String blacklistToUse, String[] supportedBlacklistTypes, String[] entries) {\n        // load blacklist data from file\n        ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\n        \n        // delete the old entry from file\n        String s;\n        for (int i=0; i<entries.length; i++) {\n            s = entries[i];\n            if (list != null) while (list.contains(s)) list.remove(s);\n            \n            // remove the entry from the running blacklist engine\n            for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\n                if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\", blacklistToUse)) {\n                    plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],\n                            (s.indexOf(\"/\") == -1) ? s : s.substring(0, s.indexOf(\"/\")),\n                            (s.indexOf(\"/\") == -1) ? \".*\" : s.substring(s.indexOf(\"/\") + 1));\n                }                \n            }    \n        }\n        if (list != null) listManager.writeList(new File(listManager.listsPath, blacklistToUse), (String[])list.toArray(new String[list.size()]));\n        \n        return entries.length;\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private void removeBlacklistItemFromBlacklist(String blacklistItem, String blacklistName) {\n    \tString[] itemParts = getBlacklistItemParts(blacklistItem);\n    \t\n    \t// getting the supported blacklist types\n        String[] supportedBlacklistTypes = getSupportedBlacklistTypeArray();\n        \n        // loop through the various types\n        for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\n        \t\n        \t// if the current blacklist is activated for the type, remove the item from the list\n            if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + BLACKLISTS,blacklistName)) {\n                plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],itemParts[0]);\n            }                \n        }       \t\n    }","id":7722,"modified_method":"private void removeBlacklistItemFromBlacklist(String blacklistItem, String blacklistName) {\n    \tString[] itemParts = getBlacklistItemParts(blacklistItem);\n    \t\n    \t// getting the supported blacklist types\n        String[] supportedBlacklistTypes = getSupportedBlacklistTypeArray();\n        \n        // loop through the various types\n        for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\n        \t\n        \t// if the current blacklist is activated for the type, remove the item from the list\n            if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + BLACKLISTS,blacklistName)) {\n                plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],itemParts[0], itemParts[1]);\n            }                \n        }       \t\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\r\n\r\n        // initialize the list manager\r\n        listManager.switchboard = (plasmaSwitchboard) env;\r\n        listManager.listsPath = new File(listManager.switchboard.getRootPath(),listManager.switchboard.getConfig(\"listManager.listsPath\", \"DATA/LISTS\"));\r\n        \r\n        // getting the list of supported blacklist types\r\n        String supportedBlacklistTypesStr = env.getConfig(\"BlackLists.types\", \"\");\r\n        String[] supportedBlacklistTypes = supportedBlacklistTypesStr.split(\",\");        \r\n        \r\n        String blacklistToUse = null;\r\n        serverObjects prop = new serverObjects();\r\n        prop.put(\"blacklistEngine\", plasmaSwitchboard.urlBlacklist.getEngineInfo());\r\n        \r\n        // do all post operations\r\n        if (post != null) {\r\n            \r\n            if (post.containsKey(\"selectList\")) {\r\n                blacklistToUse = (String)post.get(\"selectedListName\"); \r\n                if (blacklistToUse != null && blacklistToUse.length() == 0) blacklistToUse = null;\r\n            }\r\n            if (post.containsKey(\"createNewList\")) {\r\n                /* ===========================================================\r\n                 * Creation of a new blacklist\r\n                 * =========================================================== */\r\n                \r\n                blacklistToUse = (String)post.get(\"newListName\");\r\n                if (blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }   \r\n                \r\n                if (!blacklistToUse.endsWith(\".black\")) blacklistToUse += \".black\";\r\n\r\n                try {\r\n                    final File newFile = new File(listManager.listsPath, blacklistToUse);\r\n                    newFile.createNewFile();\r\n                    \r\n                    // share the newly created blacklist\r\n                    listManager.addListToListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                    \r\n                    // activate it for all known blacklist types\r\n                    for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                        listManager.addListToListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);\r\n                    }                                 \r\n                } catch (IOException e) {/* */}\r\n                \r\n            } else if (post.containsKey(\"deleteList\")) {\r\n                /* ===========================================================\r\n                 * Delete a blacklist\r\n                 * =========================================================== */                \r\n                \r\n                blacklistToUse = (String)post.get(\"selectedListName\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                   \r\n                \r\n                File BlackListFile = new File(listManager.listsPath, blacklistToUse);\r\n                BlackListFile.delete();\r\n\r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    listManager.removeListFromListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);\r\n                }                \r\n                \r\n                // remove it from the shared list\r\n                listManager.removeListFromListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                blacklistToUse = null;\r\n                \r\n                // reload Blacklists\r\n                listManager.reloadBlacklists();\r\n\r\n            } else if (post.containsKey(\"activateList\")) {\r\n\r\n                /* ===========================================================\r\n                 * Activate/Deactivate a blacklist\r\n                 * =========================================================== */                   \r\n                \r\n                blacklistToUse = (String)post.get(\"selectedListName\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                   \r\n                \r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {                    \r\n                    if (post.containsKey(\"activateList4\" + supportedBlacklistTypes[blTypes])) {\r\n                        listManager.addListToListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);                        \r\n                    } else {\r\n                        listManager.removeListFromListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);                        \r\n                    }                    \r\n                }                     \r\n\r\n                listManager.reloadBlacklists();                \r\n                \r\n            } else if (post.containsKey(\"shareList\")) {\r\n\r\n                /* ===========================================================\r\n                 * Share a blacklist\r\n                 * =========================================================== */                   \r\n                \r\n                blacklistToUse = (String)post.get(\"selectedListName\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                   \r\n                \r\n                if (listManager.ListInListslist(BLACKLIST_SHARED, blacklistToUse)) { \r\n                    // Remove from shared BlackLists\r\n                    listManager.removeListFromListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                } else { // inactive list -> enable\r\n                    listManager.addListToListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                }                                \r\n            } else if (post.containsKey(\"deleteBlacklistEntry\")) {\r\n                \r\n                /* ===========================================================\r\n                 * Delete a blacklist entry\r\n                 * =========================================================== */                     \r\n                \r\n                // get the current selected blacklist name\r\n                blacklistToUse = (String)post.get(\"currentBlacklist\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                 \r\n                \r\n                // get the entry that should be deleted\r\n                String oldEntry = (String)post.get(\"selectedEntry\");\r\n                if (oldEntry == null || oldEntry.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",header.get(\"PATH\") + \"?selectList=&selectedListName=\" + blacklistToUse);\r\n                    return prop;\r\n                }                \r\n                \r\n                // load blacklist data from file\r\n                ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\r\n                \r\n                // delete the old entry from file\r\n                if (list != null) {\r\n                    for (int i=0; i < list.size(); i++) {\r\n                        if (((String)list.get(i)).equals(oldEntry)) {\r\n                            list.remove(i);\r\n                            break;\r\n                        }\r\n                    }\r\n                    listManager.writeList(new File(listManager.listsPath, blacklistToUse), (String[])list.toArray(new String[list.size()]));\r\n                }\r\n                \r\n                // remove the entry from the running blacklist engine\r\n                int pos = oldEntry.indexOf(\"/\");\r\n                if (pos < 0) {\r\n                    // add default empty path pattern\r\n                    pos = oldEntry.length();\r\n                    oldEntry = oldEntry + \"/.*\";\r\n                }                \r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse)) {\r\n                        plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],oldEntry.substring(0, pos));\r\n                    }                \r\n                }                    \r\n                \r\n            } else if (post.containsKey(\"addBlacklistEntry\")) {\r\n                \r\n                /* ===========================================================\r\n                 * Add a new blacklist entry\r\n                 * =========================================================== */                     \r\n                \r\n                blacklistToUse = (String)post.get(\"currentBlacklist\");   \r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                  \r\n                \r\n                String newEntry = (String)post.get(\"newEntry\");\r\n                if (newEntry.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",header.get(\"PATH\") + \"?selectList=&selectedListName=\" + blacklistToUse);\r\n                    return prop;\r\n                }\r\n                \r\n                // TODO: ignore empty entries\r\n                \r\n                if (newEntry.startsWith(\"http://\") ){\r\n                    newEntry = newEntry.substring(7);\r\n                }\r\n\r\n                int pos = newEntry.indexOf(\"/\");\r\n                if (pos < 0) {\r\n                    // add default empty path pattern\r\n                    pos = newEntry.length();\r\n                    newEntry = newEntry + \"/.*\";\r\n                }\r\n\r\n                // append the line to the file\r\n                PrintWriter pw = null;\r\n                try {\r\n                    pw = new PrintWriter(new FileWriter(new File(listManager.listsPath, blacklistToUse), true));\r\n                    pw.println(newEntry);\r\n                    pw.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                } finally {\r\n                    if (pw != null) try { pw.close(); } catch (Exception e){ /* */}\r\n                }\r\n\r\n                // add to blacklist\r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse)) {\r\n                        plasmaSwitchboard.urlBlacklist.add(supportedBlacklistTypes[blTypes],newEntry.substring(0, pos), newEntry.substring(pos + 1));\r\n                    }                \r\n                }                                         \r\n            }\r\n            \r\n        } \r\n        \r\n        // loading all blacklist files located in the directory\r\n        String[] dirlist = listManager.getDirListing(listManager.listsPath);\r\n        \r\n        // if we have not chosen a blacklist until yet we use the first file\r\n        if (blacklistToUse == null && dirlist != null && dirlist.length > 0) {\r\n            blacklistToUse = dirlist[0];\r\n        }\r\n        \r\n\r\n        // Read the blacklist items from file\r\n        if (blacklistToUse != null) {\r\n            int entryCount = 0;\r\n            final ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\r\n            \r\n            // sort them\r\n            String[] sortedlist = new String[list.size()];\r\n            Arrays.sort(list.toArray(sortedlist));\r\n            \r\n            // display them\r\n            for (int j=0;j<sortedlist.length;++j){\r\n                String nextEntry = sortedlist[j];\r\n                \r\n                if (nextEntry.length() == 0) continue;\r\n                if (nextEntry.startsWith(\"#\")) continue;\r\n    \r\n                prop.put(DISABLED + \"Itemlist_\" + entryCount + \"_item\", de.anomic.data.wikiCode.replaceXMLEntities(nextEntry));\r\n                entryCount++;\r\n            }\r\n        \tprop.put(DISABLED + \"Itemlist\", entryCount);            \r\n\r\n\r\n\t        // List known hosts for BlackList retrieval\r\n\t        if (yacyCore.seedDB != null && yacyCore.seedDB.sizeConnected() > 0) { // no nullpointer error\r\n\t            int peerCount = 0;\r\n\t            try {\r\n\t                TreeMap hostList = new TreeMap();\r\n\t                final Enumeration e = yacyCore.seedDB.seedsConnected(true, false, null, (float) 0.0);\r\n\t                while (e.hasMoreElements()) {\r\n\t                    yacySeed seed = (yacySeed) e.nextElement();\r\n\t                    if (seed != null) hostList.put(seed.get(yacySeed.NAME, \"nameless\"),seed.hash);\r\n\t                }\r\n\t\r\n\t                String peername;\r\n\t                while ((peername = (String) hostList.firstKey()) != null) {\r\n\t                    final String Hash = (String) hostList.get(peername);\r\n\t                    prop.put(DISABLED + \"otherHosts_\" + peerCount + \"_hash\", Hash);\r\n\t                    prop.put(DISABLED + \"otherHosts_\" + peerCount + \"_name\", peername);\r\n\t                    hostList.remove(peername);\r\n\t                    peerCount++;\r\n\t                }\r\n\t            } catch (Exception e) {/* */}\r\n\t            prop.put(DISABLED + \"otherHosts\", peerCount);\r\n\t        }\r\n        }\r\n        \r\n        // List BlackLists\r\n        int blacklistCount = 0;\r\n        if (dirlist != null) {\r\n            for (int i = 0; i <= dirlist.length - 1; i++) {\r\n                prop.put(DISABLED + BLACKLIST + blacklistCount + \"_name\", de.anomic.data.wikiCode.replaceXMLEntities(dirlist[i]));\r\n                prop.put(DISABLED + BLACKLIST + blacklistCount + \"_selected\", 0);\r\n\r\n                if (dirlist[i].equals(blacklistToUse)) { //current List\r\n                    prop.put(DISABLED + BLACKLIST + blacklistCount + \"_selected\", 1);\r\n\r\n                    for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                        prop.put(DISABLED + \"currentActiveFor_\" + blTypes + \"_blTypeName\",supportedBlacklistTypes[blTypes]);\r\n                        prop.put(DISABLED + \"currentActiveFor_\" + blTypes + \"_checked\",\r\n                                listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",dirlist[i])?0:1);\r\n                    }\r\n                    prop.put(DISABLED + \"currentActiveFor\",supportedBlacklistTypes.length);\r\n\r\n                }\r\n                \r\n                if (listManager.ListInListslist(BLACKLIST_SHARED, dirlist[i])) {\r\n                    prop.put(DISABLED + BLACKLIST + blacklistCount + \"_shared\", 1);\r\n                } else {\r\n                    prop.put(DISABLED + BLACKLIST + blacklistCount + \"_shared\", 0);\r\n                }\r\n\r\n                int activeCount = 0;\r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",dirlist[i])) {\r\n                        prop.put(DISABLED + BLACKLIST + blacklistCount + \"_active_\" + activeCount + \"_blTypeName\",supportedBlacklistTypes[blTypes]);\r\n                        activeCount++;\r\n                    }                \r\n                }          \r\n                prop.put(DISABLED + BLACKLIST + blacklistCount + \"_active\",activeCount);\r\n                blacklistCount++;\r\n            }\r\n        }\r\n        prop.put(DISABLED + \"blackLists\", blacklistCount);\r\n        \r\n        prop.put(DISABLED + \"currentBlacklist\", (blacklistToUse==null)?\"\":blacklistToUse);\r\n        prop.put(\"disabled\", (blacklistToUse == null) ? 1 : 0);\r\n        return prop;\r\n    }","id":7723,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\r\n\r\n        // initialize the list manager\r\n        listManager.switchboard = (plasmaSwitchboard) env;\r\n        listManager.listsPath = new File(listManager.switchboard.getRootPath(),listManager.switchboard.getConfig(\"listManager.listsPath\", \"DATA/LISTS\"));\r\n        \r\n        // getting the list of supported blacklist types\r\n        String supportedBlacklistTypesStr = env.getConfig(\"BlackLists.types\", \"\");\r\n        String[] supportedBlacklistTypes = supportedBlacklistTypesStr.split(\",\");        \r\n        \r\n        String blacklistToUse = null;\r\n        serverObjects prop = new serverObjects();\r\n        prop.put(\"blacklistEngine\", plasmaSwitchboard.urlBlacklist.getEngineInfo());\r\n        \r\n        // do all post operations\r\n        if (post != null) {\r\n            \r\n            if (post.containsKey(\"selectList\")) {\r\n                blacklistToUse = (String)post.get(\"selectedListName\"); \r\n                if (blacklistToUse != null && blacklistToUse.length() == 0) blacklistToUse = null;\r\n            }\r\n            if (post.containsKey(\"createNewList\")) {\r\n                /* ===========================================================\r\n                 * Creation of a new blacklist\r\n                 * =========================================================== */\r\n                \r\n                blacklistToUse = (String)post.get(\"newListName\");\r\n                if (blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }   \r\n                \r\n                if (!blacklistToUse.endsWith(\".black\")) blacklistToUse += \".black\";\r\n\r\n                try {\r\n                    final File newFile = new File(listManager.listsPath, blacklistToUse);\r\n                    newFile.createNewFile();\r\n                    \r\n                    // share the newly created blacklist\r\n                    listManager.addListToListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                    \r\n                    // activate it for all known blacklist types\r\n                    for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                        listManager.addListToListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);\r\n                    }                                 \r\n                } catch (IOException e) {/* */}\r\n                \r\n            } else if (post.containsKey(\"deleteList\")) {\r\n                /* ===========================================================\r\n                 * Delete a blacklist\r\n                 * =========================================================== */                \r\n                \r\n                blacklistToUse = (String)post.get(\"selectedListName\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                   \r\n                \r\n                File BlackListFile = new File(listManager.listsPath, blacklistToUse);\r\n                BlackListFile.delete();\r\n\r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    listManager.removeListFromListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);\r\n                }                \r\n                \r\n                // remove it from the shared list\r\n                listManager.removeListFromListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                blacklistToUse = null;\r\n                \r\n                // reload Blacklists\r\n                listManager.reloadBlacklists();\r\n\r\n            } else if (post.containsKey(\"activateList\")) {\r\n\r\n                /* ===========================================================\r\n                 * Activate/Deactivate a blacklist\r\n                 * =========================================================== */                   \r\n                \r\n                blacklistToUse = (String)post.get(\"selectedListName\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                   \r\n                \r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {                    \r\n                    if (post.containsKey(\"activateList4\" + supportedBlacklistTypes[blTypes])) {\r\n                        listManager.addListToListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);                        \r\n                    } else {\r\n                        listManager.removeListFromListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse);                        \r\n                    }                    \r\n                }                     \r\n\r\n                listManager.reloadBlacklists();                \r\n                \r\n            } else if (post.containsKey(\"shareList\")) {\r\n\r\n                /* ===========================================================\r\n                 * Share a blacklist\r\n                 * =========================================================== */                   \r\n                \r\n                blacklistToUse = (String)post.get(\"selectedListName\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                   \r\n                \r\n                if (listManager.ListInListslist(BLACKLIST_SHARED, blacklistToUse)) { \r\n                    // Remove from shared BlackLists\r\n                    listManager.removeListFromListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                } else { // inactive list -> enable\r\n                    listManager.addListToListslist(BLACKLIST_SHARED, blacklistToUse);\r\n                }                                \r\n            } else if (post.containsKey(\"deleteBlacklistEntry\")) {\r\n                \r\n                /* ===========================================================\r\n                 * Delete a blacklist entry\r\n                 * =========================================================== */                     \r\n                \r\n                // get the current selected blacklist name\r\n                blacklistToUse = (String)post.get(\"currentBlacklist\");\r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                 \r\n                \r\n                // get the entry that should be deleted\r\n                String oldEntry = (String)post.get(\"selectedEntry\");\r\n                if (oldEntry == null || oldEntry.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",header.get(\"PATH\") + \"?selectList=&selectedListName=\" + blacklistToUse);\r\n                    return prop;\r\n                }                \r\n                \r\n                // load blacklist data from file\r\n                ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\r\n                \r\n                // delete the old entry from file\r\n                if (list != null) {\r\n                    for (int i=0; i < list.size(); i++) {\r\n                        if (((String)list.get(i)).equals(oldEntry)) {\r\n                            list.remove(i);\r\n                            break;\r\n                        }\r\n                    }\r\n                    listManager.writeList(new File(listManager.listsPath, blacklistToUse), (String[])list.toArray(new String[list.size()]));\r\n                }\r\n                \r\n                // remove the entry from the running blacklist engine\r\n                int pos = oldEntry.indexOf(\"/\");\r\n                if (pos < 0) {\r\n                    // add default empty path pattern\r\n                    pos = oldEntry.length();\r\n                    oldEntry = oldEntry + \"/.*\";\r\n                }                \r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse)) {\r\n                        plasmaSwitchboard.urlBlacklist.remove(supportedBlacklistTypes[blTypes],oldEntry.substring(0, pos), oldEntry.substring(pos + 1));\r\n                    }                \r\n                }                    \r\n                \r\n            } else if (post.containsKey(\"addBlacklistEntry\")) {\r\n                \r\n                /* ===========================================================\r\n                 * Add a new blacklist entry\r\n                 * =========================================================== */                     \r\n                \r\n                blacklistToUse = (String)post.get(\"currentBlacklist\");   \r\n                if (blacklistToUse == null || blacklistToUse.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",\"\");\r\n                    return prop;\r\n                }                  \r\n                \r\n                String newEntry = (String)post.get(\"newEntry\");\r\n                if (newEntry.trim().length() == 0) {\r\n                    prop.put(\"LOCATION\",header.get(\"PATH\") + \"?selectList=&selectedListName=\" + blacklistToUse);\r\n                    return prop;\r\n                }\r\n                \r\n                // TODO: ignore empty entries\r\n                \r\n                if (newEntry.startsWith(\"http://\") ){\r\n                    newEntry = newEntry.substring(7);\r\n                }\r\n\r\n                int pos = newEntry.indexOf(\"/\");\r\n                if (pos < 0) {\r\n                    // add default empty path pattern\r\n                    pos = newEntry.length();\r\n                    newEntry = newEntry + \"/.*\";\r\n                }\r\n\r\n                // append the line to the file\r\n                PrintWriter pw = null;\r\n                try {\r\n                    pw = new PrintWriter(new FileWriter(new File(listManager.listsPath, blacklistToUse), true));\r\n                    pw.println(newEntry);\r\n                    pw.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                } finally {\r\n                    if (pw != null) try { pw.close(); } catch (Exception e){ /* */}\r\n                }\r\n\r\n                // add to blacklist\r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",blacklistToUse)) {\r\n                        plasmaSwitchboard.urlBlacklist.add(supportedBlacklistTypes[blTypes],newEntry.substring(0, pos), newEntry.substring(pos + 1));\r\n                    }                \r\n                }                                         \r\n            }\r\n            \r\n        } \r\n        \r\n        // loading all blacklist files located in the directory\r\n        String[] dirlist = listManager.getDirListing(listManager.listsPath);\r\n        \r\n        // if we have not chosen a blacklist until yet we use the first file\r\n        if (blacklistToUse == null && dirlist != null && dirlist.length > 0) {\r\n            blacklistToUse = dirlist[0];\r\n        }\r\n        \r\n\r\n        // Read the blacklist items from file\r\n        if (blacklistToUse != null) {\r\n            int entryCount = 0;\r\n            final ArrayList list = listManager.getListArray(new File(listManager.listsPath, blacklistToUse));\r\n            \r\n            // sort them\r\n            String[] sortedlist = new String[list.size()];\r\n            Arrays.sort(list.toArray(sortedlist));\r\n            \r\n            // display them\r\n            for (int j=0;j<sortedlist.length;++j){\r\n                String nextEntry = sortedlist[j];\r\n                \r\n                if (nextEntry.length() == 0) continue;\r\n                if (nextEntry.startsWith(\"#\")) continue;\r\n    \r\n                prop.put(DISABLED + \"Itemlist_\" + entryCount + \"_item\", nextEntry);\r\n                entryCount++;\r\n            }\r\n        \tprop.put(DISABLED + \"Itemlist\", entryCount);            \r\n\r\n\r\n\t        // List known hosts for BlackList retrieval\r\n\t        if (yacyCore.seedDB != null && yacyCore.seedDB.sizeConnected() > 0) { // no nullpointer error\r\n\t            int peerCount = 0;\r\n\t            try {\r\n\t                TreeMap hostList = new TreeMap();\r\n\t                final Enumeration e = yacyCore.seedDB.seedsConnected(true, false, null, (float) 0.0);\r\n\t                while (e.hasMoreElements()) {\r\n\t                    yacySeed seed = (yacySeed) e.nextElement();\r\n\t                    if (seed != null) hostList.put(seed.get(yacySeed.NAME, \"nameless\"),seed.hash);\r\n\t                }\r\n\t\r\n\t                String peername;\r\n\t                while ((peername = (String) hostList.firstKey()) != null) {\r\n\t                    final String Hash = (String) hostList.get(peername);\r\n\t                    prop.put(DISABLED + \"otherHosts_\" + peerCount + \"_hash\", Hash);\r\n\t                    prop.put(DISABLED + \"otherHosts_\" + peerCount + \"_name\", peername);\r\n\t                    hostList.remove(peername);\r\n\t                    peerCount++;\r\n\t                }\r\n\t            } catch (Exception e) {/* */}\r\n\t            prop.put(DISABLED + \"otherHosts\", peerCount);\r\n\t        }\r\n        }\r\n        \r\n        // List BlackLists\r\n        int blacklistCount = 0;\r\n        if (dirlist != null) {\r\n            for (int i = 0; i <= dirlist.length - 1; i++) {\r\n                prop.put(DISABLED + BLACKLIST + blacklistCount + \"_name\", dirlist[i]);\r\n                prop.put(DISABLED + BLACKLIST + blacklistCount + \"_selected\", 0);\r\n\r\n                if (dirlist[i].equals(blacklistToUse)) { //current List\r\n                    prop.put(DISABLED + BLACKLIST + blacklistCount + \"_selected\", 1);\r\n\r\n                    for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                        prop.put(DISABLED + \"currentActiveFor_\" + blTypes + \"_blTypeName\",supportedBlacklistTypes[blTypes]);\r\n                        prop.put(DISABLED + \"currentActiveFor_\" + blTypes + \"_checked\",\r\n                                listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",dirlist[i])?0:1);\r\n                    }\r\n                    prop.put(DISABLED + \"currentActiveFor\",supportedBlacklistTypes.length);\r\n\r\n                }\r\n                \r\n                if (listManager.ListInListslist(BLACKLIST_SHARED, dirlist[i])) {\r\n                    prop.put(DISABLED + BLACKLIST + blacklistCount + \"_shared\", 1);\r\n                } else {\r\n                    prop.put(DISABLED + BLACKLIST + blacklistCount + \"_shared\", 0);\r\n                }\r\n\r\n                int activeCount = 0;\r\n                for (int blTypes=0; blTypes < supportedBlacklistTypes.length; blTypes++) {\r\n                    if (listManager.ListInListslist(supportedBlacklistTypes[blTypes] + \".BlackLists\",dirlist[i])) {\r\n                        prop.put(DISABLED + BLACKLIST + blacklistCount + \"_active_\" + activeCount + \"_blTypeName\",supportedBlacklistTypes[blTypes]);\r\n                        activeCount++;\r\n                    }                \r\n                }          \r\n                prop.put(DISABLED + BLACKLIST + blacklistCount + \"_active\",activeCount);\r\n                blacklistCount++;\r\n            }\r\n        }\r\n        prop.put(DISABLED + \"blackLists\", blacklistCount);\r\n        \r\n        prop.put(DISABLED + \"currentBlacklist\", (blacklistToUse==null)?\"\":blacklistToUse);\r\n        prop.put(\"disabled\", (blacklistToUse == null) ? 1 : 0);\r\n        return prop;\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void loadList(String[][] filenames, String sep) {        \r\n        for (int j = 0; j < filenames.length; j++) {\r\n            String[] nextFile = filenames[j];\r\n            String blacklistType = nextFile[0];\r\n            String fileName = nextFile[1];\r\n            this.loadList(blacklistType, fileName, sep);\r\n        }\r\n    }","id":7724,"modified_method":"public void loadList(blacklistFile[] blFiles, String sep) {        \r\n        for (int j = 0; j < blFiles.length; j++) {\r\n            blacklistFile blf = blFiles[j];\r\n            loadList(blf.getType(), blf.getFileName(), sep);\r\n        }\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"protected HashMap geBlacklistMap(String blacklistType) {\r\n        if (blacklistType == null) throw new IllegalArgumentException();\r\n        if (!BLACKLIST_TYPES.contains(blacklistType)) throw new IllegalArgumentException(\"Unknown backlist type.\");        \r\n        \r\n        return (HashMap) this.hostpaths.get(blacklistType);\r\n    }","id":7725,"modified_method":"protected HashMap getBlacklistMap(String blacklistType) {\r\n        if (blacklistType == null) throw new IllegalArgumentException();\r\n        if (!BLACKLIST_TYPES.contains(blacklistType)) throw new IllegalArgumentException(\"Unknown backlist type.\");        \r\n        \r\n        return (HashMap) this.hostpaths.get(blacklistType);\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void loadList(String blacklistType, String filenames, String sep) {\r\n        \r\n        HashMap blacklistMap = geBlacklistMap(blacklistType);\r\n        String[] filenamesarray = filenames.split(\",\");\r\n\r\n        if( filenamesarray.length > 0) {\r\n            for (int i = 0; i < filenamesarray.length; i++) {\r\n                blacklistMap.putAll(kelondroMSetTools.loadMap(new File(this.blacklistRootPath, filenamesarray[i]).toString(), sep));\r\n            }\r\n        }        \r\n    }","id":7726,"modified_method":"public void loadList(String blacklistType, String filenames, String sep) {\r\n        HashMap blacklistMap = getBlacklistMap(blacklistType);\r\n        String[] filenamesarray = filenames.split(\",\");\r\n\r\n        if (filenamesarray.length > 0) {\r\n            for (int i = 0; i < filenamesarray.length; i++) {\r\n                blacklistMap.putAll(kelondroMSetTools.loadMapMultiValsPerKey(new File(this.blacklistRootPath, filenamesarray[i]).toString(), sep));\r\n            }\r\n        }\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public int size() {\r\n        int size = 0;\r\n        Iterator iter = this.hostpaths.keySet().iterator();\r\n        while (iter.hasNext()) {\r\n            HashMap blacklistMap = (HashMap) this.hostpaths.get(iter.next());\r\n            size += blacklistMap.size();\r\n        }\r\n        return size;\r\n    }","id":7727,"modified_method":"public int size() {\r\n        int size = 0;\r\n        Iterator iter = this.hostpaths.keySet().iterator();\r\n        while (iter.hasNext()) {\r\n            Iterator blIter = ((HashMap)this.hostpaths.get(iter.next())).values().iterator();\r\n            while (blIter.hasNext())\r\n                size += ((ArrayList)blIter.next()).size();\r\n        }\r\n        return size;\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void add(String blacklistType, String host, String path) {\r\n        if (host == null) throw new NullPointerException();\r\n        if (path == null) throw new NullPointerException();\r\n        \r\n        if (path.length() > 0 && path.charAt(0) == '/') path = path.substring(1);\r\n        \r\n        HashMap blacklistMap = geBlacklistMap(blacklistType);        \r\n        blacklistMap.put(host.toLowerCase(), path);\r\n    }","id":7728,"modified_method":"public void add(String blacklistType, String host, String path) {\r\n        if (host == null) throw new NullPointerException();\r\n        if (path == null) throw new NullPointerException();\r\n        \r\n        if (path.length() > 0 && path.charAt(0) == '/') path = path.substring(1);\r\n        \r\n        HashMap blacklistMap = getBlacklistMap(blacklistType);\r\n        ArrayList hostList = (ArrayList)blacklistMap.get(host.toLowerCase());\r\n        if (hostList == null)\r\n            blacklistMap.put(host.toLowerCase(), (hostList = new ArrayList()));\r\n        hostList.add(path);\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void remove(String blacklistType, String host) {\r\n        \r\n        HashMap blacklistMap = geBlacklistMap(blacklistType);\r\n        blacklistMap.remove(host);\r\n    }","id":7729,"modified_method":"public void remove(String blacklistType, String host, String path) {\r\n        HashMap blacklistMap = getBlacklistMap(blacklistType);\r\n        ArrayList hostList = (ArrayList)blacklistMap.get(host);\r\n        hostList.remove(path);\r\n        if (hostList.size() == 0)\r\n            blacklistMap.remove(host);\r\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public boolean isListed(String blacklistType, String hostlow, String path) {\n        if (hostlow == null) throw new NullPointerException();\n        if (path == null) throw new NullPointerException();\n        \n        // getting the proper blacklist\n        HashMap blacklistMap = super.geBlacklistMap(blacklistType);\n        \n        if (path.length() > 0 && path.charAt(0) == '/') path = path.substring(1);\n        String pp = \"\"; // path-pattern\n\n        // first try to match the domain with wildcard '*'\n        // [TL] While \".\" are found within the string\n        int index = 0;\n        while ((index = hostlow.indexOf('.', index + 1)) != -1) {\n            if ((pp = (String) blacklistMap.get(hostlow.substring(0, index + 1) + \"*\")) != null) {\n                return ((pp.equals(\"*\")) || (path.matches(pp)));\n            }\n        }\n        index = hostlow.length();\n        while ((index = hostlow.lastIndexOf('.', index - 1)) != -1) {\n            if ((pp = (String) blacklistMap.get(\"*\" + hostlow.substring(index, hostlow.length()))) != null) {\n                return ((pp.equals(\"*\")) || (path.matches(pp)));\n            }\n        }\n\n        // try to match without wildcard in domain\n        return (((pp = (String) blacklistMap.get(hostlow)) != null) &&\n                ((pp.equals(\"*\")) || (path.matches(pp))));\n    }","id":7730,"modified_method":"public boolean isListed(String blacklistType, String hostlow, String path) {\n        if (hostlow == null) throw new NullPointerException();\n        if (path == null) throw new NullPointerException();\n        \n        // getting the proper blacklist\n        HashMap blacklistMap = super.getBlacklistMap(blacklistType);\n        \n        if (path.length() > 0 && path.charAt(0) == '/') path = path.substring(1);\n        ArrayList app;\n        boolean matched = false;\n        String pp = \"\"; // path-pattern\n\n        // first try to match the domain with wildcard '*'\n        // [TL] While \".\" are found within the string\n        int index = 0;\n        while ((index = hostlow.indexOf('.', index + 1)) != -1) {\n            if ((app = (ArrayList) blacklistMap.get(hostlow.substring(0, index + 1) + \"*\")) != null) {\n                for (int i=app.size()-1; !matched && i>-1; i--) {\n                    pp = (String)app.get(i);\n                    matched |= ((pp.equals(\"*\")) || (path.matches(pp)));\n                }\n                return matched;\n            }\n        }\n        index = hostlow.length();\n        while ((index = hostlow.lastIndexOf('.', index - 1)) != -1) {\n            if ((app = (ArrayList) blacklistMap.get(\"*\" + hostlow.substring(index, hostlow.length()))) != null) {\n                for (int i=app.size()-1; !matched && i>-1; i--) {\n                    pp = (String)app.get(i);\n                    matched |= ((pp.equals(\"*\")) || (path.matches(pp)));\n                }\n                return matched;\n            }\n        }\n\n        // try to match without wildcard in domain\n        if ((app = (ArrayList)blacklistMap.get(hostlow)) != null) {\n            for (int i=app.size()-1; !matched && i>-1; i--) {\n                pp = (String)app.get(i);\n                matched |= ((pp.equals(\"*\")) || (path.matches(pp)));\n            }\n            return matched;\n        }\n        return false;\n    }","commit_id":"26f5757b405bd24200a587e21c47cf1c33c8c069","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void removeServiceListener(ServiceListener listener) {\n        synchronized (m_sidToListenersMap) {\n            String filter = (String) m_listenerToFilterMap.remove(listener);\n            if (filter != null) {\n            \t// the listener does exist\n            \tFilterData data = getFilterData(null, filter);\n            \tif (data != null) {\n            \t\tLong sidObject = Long.valueOf(data.serviceId);\n            \t\tList /* ServiceListener */ listeners = (List) m_sidToListenersMap.get(sidObject);\n            \t\tif (listeners != null) {\n            \t\t\tlisteners.remove(listener);\n            \t\t}\n            \t}\n            }\n        }\n    }","id":7731,"modified_method":"public void removeServiceListener(ServiceListener listener) {\n        synchronized (m_sidToListenersMap) {\n        \tm_listenerToObjectClassMap.remove(listener);\n            String filter = (String) m_listenerToFilterMap.remove(listener);\n            if (filter != null) {\n            \t// the listener does exist\n            \tFilterData data = getFilterData(null, filter);\n            \tif (data != null) {\n            \t\tLong sidObject = Long.valueOf(data.serviceId);\n            \t\tList /* ServiceListener */ listeners = (List) m_sidToListenersMap.get(sidObject);\n            \t\tif (listeners != null) {\n            \t\t\tlisteners.remove(listener);\n            \t\t}\n            \t}\n            }\n        }\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public List getAllServiceReferences(String clazz, String filter) {\n        List /* <ServiceReference> */ result = new ArrayList();\n        FilterData data = getFilterData(clazz, filter);\n        if (data != null) {\n        \tSortedSet /* <ServiceReference> */ list = null;\n        \tsynchronized (m_sidToServiceReferencesMap) {\n        \t\tlist = (SortedSet) m_sidToServiceReferencesMap.get(Long.valueOf(data.serviceId));\n        \t\tif (list != null) {\n        \t\t\tIterator iterator = list.iterator();\n        \t\t\twhile (iterator.hasNext()) {\n        \t\t\t\tresult.add((ServiceReference) iterator.next());\n        \t\t\t}\n        \t\t}\n\t\t\t}\n        }\n        return result;\n    }","id":7732,"modified_method":"public List getAllServiceReferences(String clazz, String filter) {\n\t\tList /* <ServiceReference> */result = new ArrayList();\n\t\tMatcher matcher = PATTERN.matcher(filter);\n\t\tif (matcher.matches()) {\n\t\t\tFilterData data = getFilterData(clazz, filter);\n\t\t\tif (data != null) {\n\t\t\t\tSortedSet /* <ServiceReference> */list = null;\n\t\t\t\tsynchronized (m_sidToServiceReferencesMap) {\n\t\t\t\t\tlist = (SortedSet) m_sidToServiceReferencesMap.get(Long.valueOf(data.serviceId));\n\t\t\t\t\tif (list != null) {\n\t\t\t\t\t\tIterator iterator = list.iterator();\n\t\t\t\t\t\twhile (iterator.hasNext()) {\n\t\t\t\t\t\t\tServiceReference ref = (ServiceReference) iterator.next();\n\t\t\t\t\t\t\tString objectClass = matcher.group(1);\n\t\t\t\t\t\t\tif (referenceMatchesObjectClass(ref, objectClass)) {\n\t\t\t\t\t\t\t\tresult.add(ref);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public void addServiceListener(ServiceListener listener, String filter) {\n        FilterData data = getFilterData(null, filter);\n        if (data != null) {\n            Long sidObject = Long.valueOf(data.serviceId);\n            synchronized (m_sidToListenersMap) {\n            \tList /* <ServiceListener> */ listeners = (List) m_sidToListenersMap.get(sidObject);\n            \tif (listeners == null) {\n            \t\tlisteners = new ArrayList();\n            \t\tm_sidToListenersMap.put(sidObject, listeners);\n            \t}\n            \tlisteners.add(listener);\n            \tm_listenerToFilterMap.put(listener, filter);\n            }\n        }\n    }","id":7733,"modified_method":"public void addServiceListener(ServiceListener listener, String filter) {\n        FilterData data = getFilterData(null, filter);\n        if (data != null) {\n            Long sidObject = Long.valueOf(data.serviceId);\n            synchronized (m_sidToListenersMap) {\n            \tList /* <ServiceListener> */ listeners = (List) m_sidToListenersMap.get(sidObject);\n            \tif (listeners == null) {\n            \t\tlisteners = new ArrayList();\n            \t\tm_sidToListenersMap.put(sidObject, listeners);\n            \t}\n            \tlisteners.add(listener);\n            \tm_listenerToFilterMap.put(listener, filter);\n        \t\tMatcher matcher = PATTERN.matcher(filter);\n        \t\tif (matcher.matches()) {\n        \t\t\tString objectClass = matcher.group(1);\n        \t\t\tm_listenerToObjectClassMap.put(listener, objectClass);\n        \t\t} else {\n        \t\t\tthrow new IllegalArgumentException(\"Filter string does not match index pattern\");\n        \t\t}\n\n            }\n        }\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public void serviceChanged(ServiceEvent event) {\n        ServiceReference reference = event.getServiceReference();\n        Long sid = ServiceUtil.getServiceIdObject(reference);\n        List /* <ServiceListener> */ notificationList = new ArrayList();\n        synchronized (m_sidToListenersMap) {\n            List /* <ServiceListener> */ list = (ArrayList) m_sidToListenersMap.get(sid);\n            if (list != null) {\n                notificationList.addAll(list);\n            }\n        }\n        // notify\n        Iterator iterator = notificationList.iterator();\n        while (iterator.hasNext()) {\n        \tServiceListener listener = (ServiceListener) iterator.next();\n        \tlistener.serviceChanged(event);\n        }\n    }","id":7734,"modified_method":"public void serviceChanged(ServiceEvent event) {\n        ServiceReference reference = event.getServiceReference();\n        Long sid = ServiceUtil.getServiceIdObject(reference);\n        List /* <ServiceListener> */ notificationList = new ArrayList();\n        synchronized (m_sidToListenersMap) {\n            List /* <ServiceListener> */ list = (ArrayList) m_sidToListenersMap.get(sid);\n            if (list != null) {\n            \tIterator iterator = list.iterator();\n            \twhile (iterator.hasNext()) {\n                \tServiceListener listener = (ServiceListener) iterator.next();\n                \tString objectClass = (String) m_listenerToObjectClassMap.get(listener);\n                \tif (referenceMatchesObjectClass(reference, objectClass)) {\n                \t\tnotificationList.add(listener);\n                \t} \n            \t}\n            }\n        }\n        // notify\n        Iterator iterator = notificationList.iterator();\n        while (iterator.hasNext()) {\n        \tServiceListener listener = (ServiceListener) iterator.next();\n        \tlistener.serviceChanged(event);\n        }\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"/** Returns a value object with the relevant filter data, or <code>null<\/code> if this filter was not valid. */\n    private FilterData getFilterData(String clazz, String filter) {\n        // something like:\n    \t// (&(objectClass=foo.Bar)(|(service.id=18233)(org.apache.felix.dependencymanager.aspect=18233)))    \t\n        if ((filter != null)\n            && (filter.startsWith(FILTER_START))\n            && (filter.endsWith(FILTER_END))\n            ) {\n        \t// service-id = \n            int i0 = filter.indexOf(FILTER_SUBSTRING_0);\n            if (i0 == -1) {\n                return null;\n            }\n            // org.apache.felix.dependencymanager.aspect =\n            int i1 = filter.indexOf(FILTER_SUBSTRING_1);\n            if (i1 == -1 || i1 <= i0) {\n                return null;\n            }\n            long sid = Long.parseLong(filter.substring(i0 + FILTER_SUBSTRING_0.length(), i1));\n            long sid2 = Long.parseLong(filter.substring(i1 + FILTER_SUBSTRING_1.length(), filter.length() - FILTER_END.length()));\n            if (sid != sid2) {\n                return null;\n            }\n            FilterData result = new FilterData();\n            result.serviceId = sid;\n            return result;\n        }\n        return null;\n    }","id":7735,"modified_method":"/** Returns a value object with the relevant filter data, or <code>null<\/code> if this filter was not valid. */\n    private FilterData getFilterData(String clazz, String filter) {\n        // something like:\n    \t// (&(objectClass=foo.Bar)(|(service.id=18233)(org.apache.felix.dependencymanager.aspect=18233)))  \n    \tFilterData resultData = null;\n    \tif (filter != null) {\n\t    \tMatcher matcher = PATTERN.matcher(filter);\n\t    \tif (matcher.matches()) {\n\t    \t\tString sid = matcher.group(2);\n\t    \t\tString sid2 = matcher.group(3);\n\t    \t\tif (sid.equals(sid2)) {\n\t    \t\t\tresultData = new FilterData();\n\t    \t\t\tresultData.serviceId = Long.parseLong(sid);\n\t    \t\t}\n\t    \t}\n    \t}\n    \treturn resultData;\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public List getAllServiceReferences(String clazz, String filter) {\n        List /* <ServiceReference> */ result = new ArrayList();\n        FilterData data = getFilterData(clazz, filter);\n        if (data != null) {\n        \tSortedSet /* <ServiceReference> */ list = null;\n        \tsynchronized (m_sidToServiceReferencesMap) {\n        \t\tlist = (SortedSet) m_sidToServiceReferencesMap.get(Long.valueOf(data.serviceId));\n        \t\tif (list != null) {\n        \t\t\tIterator iterator = list.iterator();\n        \t\t\twhile (iterator.hasNext()) {\n        \t\t\t\tServiceReference reference = (ServiceReference) iterator.next();\n        \t\t\t\tif (ServiceUtil.getRanking(reference) <= data.ranking) {\n        \t\t\t\t\tresult.add(reference);\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n\t\t\t}\n        }\n        return result;\n    }","id":7736,"modified_method":"public List getAllServiceReferences(String clazz, String filter) {\n        List /* <ServiceReference> */ result = new ArrayList();\n        FilterData data = getFilterData(clazz, filter);\n        if (data != null) {\n        \tSortedSet /* <ServiceReference> */ list = null;\n        \tsynchronized (m_sidToServiceReferencesMap) {\n        \t\tlist = (SortedSet) m_sidToServiceReferencesMap.get(Long.valueOf(data.serviceId));\n        \t\tif (list != null) {\n        \t\t\tIterator iterator = list.iterator();\n        \t\t\twhile (iterator.hasNext()) {\n        \t\t\t\tServiceReference reference = (ServiceReference) iterator.next();\n        \t\t\t\tif (referenceMatchesObjectClass(reference, data.objectClass) && ServiceUtil.getRanking(reference) <= data.ranking) {\n        \t\t\t\t\tresult.add(reference);\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n\t\t\t}\n        }\n        return result;\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public void addServiceListener(ServiceListener listener, String filter) {\n        FilterData data = getFilterData(null, filter);\n        if (data != null) {\n            Long sidObject = Long.valueOf(data.serviceId);\n            synchronized (m_sidToRankingToListenersMap) {\n                SortedMap /* <Integer, ServiceListener> */ rankingToListenersMap = (SortedMap) m_sidToRankingToListenersMap.get(sidObject);\n                if (rankingToListenersMap == null) {\n                    rankingToListenersMap = new TreeMap();\n                    m_sidToRankingToListenersMap.put(sidObject, rankingToListenersMap);\n                }\n                rankingToListenersMap.put(Integer.valueOf(data.ranking), listener);\n                m_listenerToFilterMap.put(listener, filter);\n            }\n        }\n    }","id":7737,"modified_method":"public void addServiceListener(ServiceListener listener, String filter) {\n        FilterData data = getFilterData(null, filter);\n        if (data != null) {\n            Long sidObject = Long.valueOf(data.serviceId);\n            synchronized (m_sidToObjectClassToRankingToListenersMap) {\n            \tMap /* <String, Map<Integer, Collection<ServiceListener>>> */ objectClassToRankingToListenersMap = (SortedMap) m_sidToObjectClassToRankingToListenersMap.get(sidObject);\n            \tif (objectClassToRankingToListenersMap == null) {\n            \t\tobjectClassToRankingToListenersMap = new TreeMap();\n            \t\tm_sidToObjectClassToRankingToListenersMap.put(sidObject, objectClassToRankingToListenersMap);\n            \t}\n            \t\n            \tSortedMap /* Integer, ServiceListener> */ rankingToListenersMap = (SortedMap) objectClassToRankingToListenersMap.get(data.objectClass);\n                if (rankingToListenersMap == null) {\n                    rankingToListenersMap = new TreeMap();\n                    objectClassToRankingToListenersMap.put(data.objectClass, rankingToListenersMap);\n                }            \t\n            \t\n            \tCollection listeners = (Collection) rankingToListenersMap.get(Integer.valueOf(data.ranking));\n            \tif (listeners == null) {\n            \t\tlisteners = new ArrayList();\n            \t\trankingToListenersMap.put(Integer.valueOf(data.ranking), listeners);\n            \t}\n            \t\n            \tlisteners.add(listener);\n                m_listenerToFilterMap.put(listener, filter);\n            }\n        }\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public void removeServiceListener(ServiceListener listener) {\n        synchronized (m_sidToRankingToListenersMap) {\n            String filter = (String) m_listenerToFilterMap.remove(listener);\n            if (filter != null) {\n            \t// the listener does exist\n\t            FilterData data = getFilterData(null, filter);\n\t            if (data != null) {\n\t                synchronized (m_sidToRankingToListenersMap) {\n\t                    SortedMap /* <Integer, ServiceListener> */ rankingToListenersMap = (SortedMap) m_sidToRankingToListenersMap.get(Long.valueOf(data.serviceId));\n\t                    if (rankingToListenersMap != null) {\n\t                        rankingToListenersMap.remove(Integer.valueOf(data.ranking));\n\t                    }\n\t                }\n\t            }\n            }\n        }\n    }","id":7738,"modified_method":"public void removeServiceListener(ServiceListener listener) {\n    \tsynchronized (m_sidToObjectClassToRankingToListenersMap) {\n    \t\tString filter = (String) m_listenerToFilterMap.remove(listener);\n    \t\tif (filter != null) {\n    \t\t\t// the listener does exist\n    \t\t\tFilterData data = getFilterData(null, filter);\n    \t\t\tif (data != null) {\n    \t\t\t\t// this index is applicable\n    \t\t\t\tLong sidObject = Long.valueOf(data.serviceId);\n                \tMap /* <String, Map<Integer, Collection<ServiceListener>>> */ objectClassToRankingToListenersMap = (SortedMap) m_sidToObjectClassToRankingToListenersMap.get(sidObject);\n                \tif (objectClassToRankingToListenersMap != null) {\n                \t\tSortedMap /* Integer, ServiceListener> */ rankingToListenersMap = (SortedMap) objectClassToRankingToListenersMap.get(data.objectClass);\n                \t\tif (rankingToListenersMap != null) {\n                \t\t\tCollection listeners = (Collection) rankingToListenersMap.get(Integer.valueOf(data.ranking));\n                \t\t\tif (listeners != null) {\n                \t\t\t\tlisteners.remove(listener);\n                \t\t\t}\n                \t\t\t// cleanup \n                \t\t\tif (listeners.isEmpty()) {\n                \t\t\t\trankingToListenersMap.remove(Integer.valueOf(data.ranking));\n                \t\t\t}\n                \t\t\tif (rankingToListenersMap.isEmpty()) {\n                \t\t\t\tobjectClassToRankingToListenersMap.remove(data.objectClass);\n                \t\t\t}\n                \t\t\tif (objectClassToRankingToListenersMap.isEmpty()) {\n                \t\t\t\tm_sidToObjectClassToRankingToListenersMap.remove(sidObject);\n                \t\t\t}\n                \t\t}\n                \t}\n    \t\t\t}\n    \t\t}\n\t\t}\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public void serviceChanged(ServiceEvent event) {\n        List list = new ArrayList();\n        ServiceReference reference = event.getServiceReference();\n        Long sid = ServiceUtil.getServiceIdObject(reference);\n        int ranking = ServiceUtil.getRanking(reference);\n        synchronized (m_sidToRankingToListenersMap) {\n            SortedMap /* <Integer, ServiceListener> */ map = (SortedMap) m_sidToRankingToListenersMap.get(sid);\n            if (map != null) {\n                Iterator iterator = map.entrySet().iterator();\n                while (iterator.hasNext()) {\n                    Entry entry = (Entry) iterator.next();\n                    if (ranking <= ((Integer) entry.getKey()).intValue()) {\n                        list.add((ServiceListener) entry.getValue());\n                    }\n                }\n            }\n        }\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            ServiceListener listener = (ServiceListener) iterator.next();\n            listener.serviceChanged(event);\n        }\n    }","id":7739,"modified_method":"public void serviceChanged(ServiceEvent event) {\n        List list = new ArrayList();\n        ServiceReference reference = event.getServiceReference();\n        Long sidObject = ServiceUtil.getServiceIdObject(reference);\n        int ranking = ServiceUtil.getRanking(reference);\n        String[] objectClasses = (String[]) reference.getProperty(Constants.OBJECTCLASS);\n        \n        synchronized (m_sidToObjectClassToRankingToListenersMap) {\n        \tfor (int i = 0; i < objectClasses.length; i++) {\n        \t\t// handle each of the object classes separately since aspects only work on one object class at a time\n        \t\tString objectClass = objectClasses[i];\n        \t\tMap /* <String, Map<Integer, Collection<ServiceListener>>> */ objectClassToRankingToListenersMap = (SortedMap) m_sidToObjectClassToRankingToListenersMap.get(sidObject);\n        \t\tif (objectClassToRankingToListenersMap != null) {\n        \t\t\tSortedMap /* Integer, ServiceListener> */ rankingToListenersMap = (SortedMap) objectClassToRankingToListenersMap.get(objectClass);\n        \t\t\tif (rankingToListenersMap != null) {\n        \t\t\t\tIterator iterator = rankingToListenersMap.entrySet().iterator();\n        \t\t\t\twhile (iterator.hasNext()) {\n        \t\t\t\t\tEntry entry = (Entry) iterator.next();\n        \t\t\t\t\tif (ranking <= ((Integer) entry.getKey()).intValue()) {\n        \t\t\t\t\t\tlist.addAll((Collection)entry.getValue());\n        \t\t\t\t\t}\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n\t\t}\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            ServiceListener listener = (ServiceListener) iterator.next();\n            listener.serviceChanged(event);\n        }\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"/** Returns a value object with the relevant filter data, or <code>null<\/code> if this filter was not valid. */\n    private FilterData getFilterData(String clazz, String filter) {\n        // something like:\n        // (&(objectClass=foo.Bar)(&(|(!(service.ranking=*))(service.ranking<=9))(|(service.id=37)(org.apache.felix.dependencymanager.aspect=37))))\n        if ((filter != null)\n            && (filter.startsWith(FILTER_START))\n            && (filter.endsWith(FILTER_END))\n            ) {\n            int i0 = filter.indexOf(FILTER_SUBSTRING_0);\n            if (i0 == -1) {\n                return null;\n            }\n            int i1 = filter.indexOf(FILTER_SUBSTRING_1);\n            if (i1 == -1 || i1 <= i0) {\n                return null;\n            }\n            int i2 = filter.indexOf(FILTER_SUBSTRING_2);\n            if (i2 == -1 || i2 <= i1) {\n                return null;\n            }\n            long sid = Long.parseLong(filter.substring(i1 + FILTER_SUBSTRING_1.length(), i2));\n            long sid2 = Long.parseLong(filter.substring(i2 + FILTER_SUBSTRING_2.length(), filter.length() - FILTER_END.length()));\n            if (sid != sid2) {\n                return null;\n            }\n            FilterData result = new FilterData();\n            result.className = filter.substring(FILTER_START.length(), i0);\n            result.serviceId = sid;\n            result.ranking = Integer.parseInt(filter.substring(i0 + FILTER_SUBSTRING_0.length(), i1));\n            return result;\n        }\n        return null;\n    }","id":7740,"modified_method":"/** Returns a value object with the relevant filter data, or <code>null<\/code> if this filter was not valid. */\n    private FilterData getFilterData(String clazz, String filter) {\n        // something like:\n        // (&(objectClass=foo.Bar)(&(|(!(service.ranking=*))(service.ranking<=9))(|(service.id=37)(org.apache.felix.dependencymanager.aspect=37))))\n        if ((filter != null)\n            && (filter.startsWith(FILTER_START)) // (&(objectClass=\n            && (filter.endsWith(FILTER_END)) // ))))\n            ) {\n            int i0 = filter.indexOf(FILTER_SUBSTRING_0);\n            if (i0 == -1) {\n                return null;\n            }\n            int i1 = filter.indexOf(FILTER_SUBSTRING_1);\n            if (i1 == -1 || i1 <= i0) {\n                return null;\n            }\n            int i2 = filter.indexOf(FILTER_SUBSTRING_2);\n            if (i2 == -1 || i2 <= i1) {\n                return null;\n            }\n            long sid = Long.parseLong(filter.substring(i1 + FILTER_SUBSTRING_1.length(), i2));\n            long sid2 = Long.parseLong(filter.substring(i2 + FILTER_SUBSTRING_2.length(), filter.length() - FILTER_END.length()));\n            if (sid != sid2) {\n                return null;\n            }\n            FilterData result = new FilterData();\n            result.objectClass = filter.substring(FILTER_START.length(), i0);\n            result.serviceId = sid;\n            result.ranking = Integer.parseInt(filter.substring(i0 + FILTER_SUBSTRING_0.length(), i1));\n            return result;\n        }\n        return null;\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"public String toString() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"AspectFilterIndex[\");\n        sb.append(\"S2R2L: \" + m_sidToRankingToListenersMap.size());\n        sb.append(\", S2SR: \" + m_sidToServiceReferencesMap.size());\n        sb.append(\", L2F: \" + m_listenerToFilterMap.size());\n        sb.append(\"]\");\n        return sb.toString();\n    }","id":7741,"modified_method":"public String toString() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"AspectFilterIndex[\");\n        sb.append(\"S2R2L: \" + m_sidToObjectClassToRankingToListenersMap.size());\n        sb.append(\", S2SR: \" + m_sidToServiceReferencesMap.size());\n        sb.append(\", L2F: \" + m_listenerToFilterMap.size());\n        sb.append(\"]\");\n        return sb.toString();\n    }","commit_id":"5190d72019ca305a1fed1a9a21dc712ef64c57fa","url":"https://github.com/apache/felix"},{"original_method":"@Override\n  protected void visitModelNode(final SModelTreeNode modelNode) {\n    if (!ProjectPane.isShowGenStatus()) return;\n    if (IMakeService.INSTANCE.isSessionActive()) return;\n\n    Application application = ApplicationManager.getApplication();\n    if (application.isDisposed() || application.isDisposeInProgress()) return;\n\n    SModel md = modelNode.getModel();\n    if (!(md instanceof EditableSModel)) return;\n    if (!(md instanceof GeneratableSModel) || !(((GeneratableSModel) md).isGeneratable())) return;\n    if (md.getModule() == null) return;\n\n    final ProjectModuleTreeNode moduleNode = getContainingModuleNode(modelNode);\n\n    boolean wasChanged = ((EditableSModel) md).isChanged();\n\n    if (moduleNode.getModule().isReadOnly()) {\n      addUpdate(modelNode, new GenStatusNodeUpdate(GenerationStatus.READONLY.getMessage()));\n      addUpdate(moduleNode, new GenStatusNodeUpdate(GenerationStatus.READONLY.getMessage()));\n      return;\n    }\n\n    if (wasChanged) {\n      addUpdate(modelNode, new GenStatusNodeUpdate(GenerationStatus.REQUIRED.getMessage()));\n      addUpdate(moduleNode, new GenStatusNodeUpdate(GenerationStatus.REQUIRED.getMessage()));\n      if (moduleNode.getModule() instanceof Generator) {\n        addUpdate(getContainingModuleNode(moduleNode), new GenStatusNodeUpdate(GenerationStatus.REQUIRED.getMessage()));\n      }\n      return;\n    }\n\n    GenerationStatus modelStatus = ModelAccess.instance().runReadAction(new Computable<GenerationStatus>() {\n      @Override\n      public GenerationStatus compute() {\n        // extra check before read action\n        if (modelNode.getModel().getModule() == null) {\n          return GenerationStatus.NOT_REQUIRED;\n        }\n        return getGenerationStatus(modelNode);\n      }\n    });\n    updateModuleStatus(moduleNode);\n    if (moduleNode.getModule() instanceof Generator) {\n      updateModuleStatus(getContainingModuleNode(moduleNode));\n    }\n    addUpdate(modelNode, new GenStatusNodeUpdate(modelStatus.getMessage()));\n  }","id":7742,"modified_method":"@Override\n  protected void visitModelNode(final SModelTreeNode modelNode) {\n    if (!ProjectPane.isShowGenStatus()) return;\n    if (IMakeService.INSTANCE.isSessionActive()) return;\n\n    Application application = ApplicationManager.getApplication();\n    if (application.isDisposed() || application.isDisposeInProgress()) return;\n\n    SModel md = modelNode.getModel();\n    if (!(md instanceof EditableSModel)) return;\n    if (!(md instanceof GeneratableSModel) || !(((GeneratableSModel) md).isGeneratable())) return;\n    if (md.getModule() == null) return;\n\n    final ProjectModuleTreeNode moduleNode = getContainingModuleNode(modelNode);\n\n    boolean wasChanged = ((EditableSModel) md).isChanged();\n\n    if (moduleNode.getModule().isReadOnly()) {\n      addUpdate(modelNode, new AdditionalTextNodeUpdate(GenerationStatus.READONLY.getMessage()));\n      addUpdate(moduleNode, new AdditionalTextNodeUpdate(GenerationStatus.READONLY.getMessage()));\n      return;\n    }\n\n    if (wasChanged) {\n      addUpdate(modelNode, new AdditionalTextNodeUpdate(GenerationStatus.REQUIRED.getMessage()));\n      addUpdate(moduleNode, new AdditionalTextNodeUpdate(GenerationStatus.REQUIRED.getMessage()));\n      if (moduleNode.getModule() instanceof Generator) {\n        addUpdate(getContainingModuleNode(moduleNode), new AdditionalTextNodeUpdate(GenerationStatus.REQUIRED.getMessage()));\n      }\n      return;\n    }\n\n    GenerationStatus modelStatus = ModelAccess.instance().runReadAction(new Computable<GenerationStatus>() {\n      @Override\n      public GenerationStatus compute() {\n        // extra check before read action\n        if (modelNode.getModel().getModule() == null) {\n          return GenerationStatus.NOT_REQUIRED;\n        }\n        return getGenerationStatus(modelNode);\n      }\n    });\n    updateModuleStatus(moduleNode);\n    if (moduleNode.getModule() instanceof Generator) {\n      updateModuleStatus(getContainingModuleNode(moduleNode));\n    }\n    addUpdate(modelNode, new AdditionalTextNodeUpdate(modelStatus.getMessage()));\n  }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateModuleStatus(final ProjectModuleTreeNode moduleNode) {\n    if (moduleNode == null) return;\n    GenerationStatus moduleStatus = ModelAccess.instance().runReadAction(new Computable<GenerationStatus>() {\n      @Override\n      public GenerationStatus compute() {\n        return generationRequired(moduleNode);\n      }\n    });\n    addUpdate(moduleNode, new GenStatusNodeUpdate(moduleStatus.getMessage()));\n  }","id":7743,"modified_method":"private void updateModuleStatus(final ProjectModuleTreeNode moduleNode) {\n    if (moduleNode == null) return;\n    GenerationStatus moduleStatus = ModelAccess.instance().runReadAction(new Computable<GenerationStatus>() {\n      @Override\n      public GenerationStatus compute() {\n        return generationRequired(moduleNode);\n      }\n    });\n    addUpdate(moduleNode, new AdditionalTextNodeUpdate(moduleStatus.getMessage()));\n  }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void modelLoadingStateChanged(SModel sm, ModelLoadingState newState) {\n      SModelTreeNode treeNode = findTreeNode(sm);\n      if (treeNode != null) {\n        updateNodePresentation(treeNode, false, false);\n      }\n    }","id":7744,"modified_method":"@Override\n    public void modelLoadingStateChanged(SModel sm, ModelLoadingState newState) {\n      for (SModelTreeNode treeNode : findTreeNode(sm)) {\n        updateNodePresentation(treeNode, false, false);\n      }\n    }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void attach(@NotNull SModelTreeNode node) {\n    final SModel model = node.getModel();\n    if (model != null) {\n      myTreeNodes.put(model.getReference(), node);\n      ((SModelInternal) model).addModelListener(myModelChangeListener);\n    }\n    refreshTreeNodes(node);\n  }","id":7745,"modified_method":"public void attach(@NotNull SModelTreeNode node) {\n    final SModel model = node.getModel();\n    if (model != null) {\n      boolean modelSeenFirstTime = true;\n      synchronized (myTreeNodes) {\n        Collection<SModelTreeNode> knownNodes = myTreeNodes.get(model.getReference());\n        if (knownNodes == null) {\n          myTreeNodes.put(model.getReference(), knownNodes = new ArrayList<SModelTreeNode>(3));\n        } else {\n          modelSeenFirstTime = false;\n        }\n        knownNodes.add(node);\n      }\n      if (modelSeenFirstTime) {\n        ((SModelInternal) model).addModelListener(myModelChangeListener);\n        myEventsListener.add(model);\n      }\n    }\n    refreshTreeNodes(node);\n  }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void modelChangedDramatically(SModel model) {\n      SModelTreeNode treeNode = findTreeNode(model);\n      if (treeNode != null) {\n        updateNodePresentation(treeNode, false, true);\n        refreshTreeNodes(treeNode);\n      }\n    }","id":7746,"modified_method":"@Override\n    public void modelChangedDramatically(SModel model) {\n      for (SModelTreeNode treeNode : findTreeNode(model)) {\n        updateNodePresentation(treeNode, false, true);\n        refreshTreeNodes(treeNode);\n      }\n    }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"SModelTreeNode findTreeNode(SModel sm) {\n    return myTreeNodes.get(sm.getReference());\n  }","id":7747,"modified_method":"Iterable<SModelTreeNode> findTreeNode(SModel sm) {\n    synchronized (myTreeNodes) {\n      final Collection<SModelTreeNode> nodes = myTreeNodes.get(sm.getReference());\n      return nodes == null ? Collections.<SModelTreeNode>emptyList() : new ArrayList<SModelTreeNode>(nodes);\n    }\n  }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void modelChanged(SModel model) {\n      SModelTreeNode treeNode = findTreeNode(model);\n      if (treeNode != null) {\n        updateNodePresentation(treeNode, false, true);\n        refreshTreeNodes(treeNode);\n      }\n    }","id":7748,"modified_method":"@Override\n    public void modelChanged(SModel model) {\n      for (SModelTreeNode treeNode : findTreeNode(model)) {\n        updateNodePresentation(treeNode, false, true);\n        refreshTreeNodes(treeNode);\n      }\n    }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"void refreshAffectedTreeNodes(SModel changed) {\n    final SModelTreeNode treeNode = findTreeNode(changed);\n    if (treeNode != null) {\n      refreshTreeNodes(treeNode);\n    }\n  }","id":7749,"modified_method":"void refreshAffectedTreeNodes(SModel changed) {\n    for (SModelTreeNode treeNode : findTreeNode(changed)) {\n      refreshTreeNodes(treeNode);\n    }\n  }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void detach(@NotNull SModelTreeNode node) {\n    final SModel model = node.getModel();\n    if (model != null) {\n      ((SModelInternal) model).removeModelListener(myModelChangeListener);\n      myTreeNodes.remove(model.getReference());\n    }\n  }","id":7750,"modified_method":"public void detach(@NotNull SModelTreeNode node) {\n    final SModel model = node.getModel();\n    if (model != null) {\n      boolean modelSeenLastTime = false;\n      synchronized (myTreeNodes) {\n        Collection<SModelTreeNode> knownNodes = myTreeNodes.get(model.getReference());\n        if (knownNodes != null) {\n          knownNodes.remove(node);\n          if (knownNodes.isEmpty()) {\n            myTreeNodes.remove(model.getReference());\n            modelSeenLastTime = true;\n          }\n        }\n      }\n      if (modelSeenLastTime) {\n        myEventsListener.remove(model);\n        ((SModelInternal) model).removeModelListener(myModelChangeListener);\n      }\n    }\n  }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    protected void eventsHappened(List<SModelEvent> events) {\n      MultiMap<SModel, SModelEvent> byModel = new MultiMap<SModel, SModelEvent>();\n      for (SModelEvent e : events) {\n        final SModel model = e.getModel();\n        if (model instanceof EditableSModel) {\n          // we create SNodeTreeUpdater only for editable model, this is the way it used to be\n          byModel.putValue(model, e);\n        }\n      }\n      for (SModel m : byModel.keySet()) {\n        SModelTreeNode treeNode = findTreeNode(m);\n        if (treeNode == null) {\n          continue;\n        }\n        MySNodeTreeUpdater treeUpdater = new MySNodeTreeUpdater(treeNode.getOperationContext().getProject(), treeNode);\n        treeUpdater.setDependencyRecorder(treeNode.getDependencyRecorder());\n        treeUpdater.eventsHappenedInCommand(new ArrayList<SModelEvent>(byModel.get(m)));\n      }\n    }","id":7751,"modified_method":"@Override\n    protected void eventsHappened(List<SModelEvent> events) {\n      MultiMap<SModel, SModelEvent> byModel = new MultiMap<SModel, SModelEvent>();\n      for (SModelEvent e : events) {\n        final SModel model = e.getModel();\n        if (model instanceof EditableSModel) {\n          // we create SNodeTreeUpdater only for editable model, this is the way it used to be\n          byModel.putValue(model, e);\n        }\n      }\n      for (SModel m : byModel.keySet()) {\n        for (SModelTreeNode treeNode : findTreeNode(m)) {\n          TreeStructureUpdate treeUpdater = new TreeStructureUpdate(treeNode.getOperationContext().getProject(), treeNode);\n          treeUpdater.setDependencyRecorder(treeNode.getDependencyRecorder());\n          treeUpdater.eventsHappenedInCommand(new ArrayList<SModelEvent>(byModel.get(m)));\n        }\n      }\n    }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void generatedFilesChanged(SModel sm) {\n      SModelTreeNode treeNode = findTreeNode(sm);\n      if (treeNode != null) {\n        myGenStatusVisitor.dispatch(treeNode);\n      }\n    }","id":7752,"modified_method":"@Override\n    public void generatedFilesChanged(SModel sm) {\n      for (SModelTreeNode treeNode : findTreeNode(sm)) {\n        myGenStatusVisitor.dispatch(treeNode);\n      }\n    }","commit_id":"c8ad764b66073fec4d238e7a0c3711e9f2097252","url":"https://github.com/JetBrains/MPS"},{"original_method":"public CallSite createPogoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\r\n        if (!hasPogoCallSiteConstructor()) {\r\n          Constructor constr = null;\r\n          if (CallSiteGenerator.isCompilable(this)) {\r\n              constr = CallSiteGenerator.compilePogoMethod(this);\r\n\r\n              if (constr != null)\r\n                 pogoCallSiteConstructor = new SoftReference<Constructor> (constr);\r\n          }\r\n        }\r\n\r\n        if (hasPogoCallSiteConstructor()) {\r\n            final Constructor constructor = pogoCallSiteConstructor.get();\r\n            if (constructor != null) {\r\n                try {\r\n                return (CallSite) constructor.newInstance(site, metaClass, this, params, constructor);\r\n                } catch (Throwable e) { //\r\n                }\r\n            }\r\n        }\r\n\r\n        return new PogoMetaMethodSite.PogoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\r\n    }","id":7753,"modified_method":"public CallSite createPogoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\r\n        if (!skipCompiled) {\r\n            Constructor constr = getConstrcutor(pogoCallSiteConstructor);\r\n            if (constr==null) {\r\n                if (CallSiteGenerator.isCompilable(this)) {\r\n                  constr = CallSiteGenerator.compilePogoMethod(this);\r\n                }\r\n                if (constr != null) {\r\n                     pogoCallSiteConstructor = new SoftReference<Constructor> (constr);\r\n                } else {\r\n                    skipCompiled = true;\r\n                }\r\n            }\r\n    \r\n            if (constr!=null) {\r\n                try {\r\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\r\n                } catch (Error e) {\r\n                    skipCompiled=true;\r\n                    throw e;\r\n                } catch (Throwable e) {\r\n                    skipCompiled=true;\r\n                }\r\n            }\r\n        }\r\n        return new PogoMetaMethodSite.PogoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\r\n    }","commit_id":"0a43d5fcf7203e77feca74f18ad0431b14126629","url":"https://github.com/apache/groovy"},{"original_method":"public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\r\n        if (!hasStaticCallSiteConstructor()) {\r\n          Constructor constr = null;\r\n          if (CallSiteGenerator.isCompilable(this)) {\r\n              constr = CallSiteGenerator.compileStaticMethod(this);\r\n\r\n              if (constr != null)\r\n                 staticCallSiteConstructor = new SoftReference<Constructor> (constr);\r\n          }\r\n        }\r\n\r\n        if (hasStaticCallSiteConstructor()) {\r\n            final Constructor constructor = staticCallSiteConstructor.get();\r\n            if (constructor != null) {\r\n                try {\r\n                return (CallSite) constructor.newInstance(site, metaClass, this, params, constructor);\r\n                } catch (Throwable e) { //\r\n                }\r\n            }\r\n        }\r\n\r\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\r\n    }","id":7754,"modified_method":"public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\r\n        if (!skipCompiled) {\r\n            Constructor constr = getConstrcutor(staticCallSiteConstructor);\r\n            if (constr==null) {\r\n                if (CallSiteGenerator.isCompilable(this)) {\r\n                  constr = CallSiteGenerator.compileStaticMethod(this);\r\n                }\r\n                if (constr != null) {\r\n                    staticCallSiteConstructor = new SoftReference<Constructor> (constr);\r\n                } else {\r\n                    skipCompiled = true;\r\n                }\r\n            }\r\n    \r\n            if (constr!=null) {\r\n                try {\r\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\r\n                } catch (Error e) {\r\n                    skipCompiled=true;\r\n                    throw e;\r\n                } catch (Throwable e) {\r\n                    skipCompiled=true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\r\n    }","commit_id":"0a43d5fcf7203e77feca74f18ad0431b14126629","url":"https://github.com/apache/groovy"},{"original_method":"public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\r\n        if (!hasPojoCallSiteConstructor()) {\r\n          Constructor constr = null;\r\n          if (CallSiteGenerator.isCompilable(this)) {\r\n              constr = CallSiteGenerator.compilePojoMethod(this);\r\n\r\n              if (constr != null)\r\n                 pojoCallSiteConstructor = new SoftReference<Constructor> (constr);\r\n          }\r\n        }\r\n\r\n        if (hasPogoCallSiteConstructor()) {\r\n            final Constructor constructor = pojoCallSiteConstructor.get();\r\n            if (constructor != null) {\r\n                try {\r\n                return (CallSite) constructor.newInstance(site, metaClass, this, params, constructor);\r\n                } catch (Throwable e) { //\r\n                }\r\n            }\r\n        }\r\n\r\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\r\n    }","id":7755,"modified_method":"public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\r\n        if (!skipCompiled) {\r\n            Constructor constr = getConstrcutor(pojoCallSiteConstructor);\r\n            if (constr==null) {\r\n                if (CallSiteGenerator.isCompilable(this)) {\r\n                  constr = CallSiteGenerator.compilePojoMethod(this);\r\n                }\r\n                if (constr != null) {\r\n                    pojoCallSiteConstructor = new SoftReference<Constructor> (constr);\r\n                } else {\r\n                    skipCompiled = true;\r\n                }\r\n            }\r\n    \r\n            if (constr!=null) {\r\n                try {\r\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\r\n                } catch (Error e) {\r\n                    skipCompiled=true;\r\n                    throw e;\r\n                } catch (Throwable e) {\r\n                    skipCompiled=true;\r\n                }\r\n            }\r\n        }\r\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\r\n    }","commit_id":"0a43d5fcf7203e77feca74f18ad0431b14126629","url":"https://github.com/apache/groovy"},{"original_method":"public static byte[] genPojoMetaMethodSite(CachedMethod cachedMethod, ClassWriter cw, String name) {\n        String internalName = name.replace('.', '/');\n        cw.visit(Opcodes.V1_4, Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, internalName, null, \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", null);\n        cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL, \"__constructor__\", \"Ljava/lang/reflect/Constructor;\", null, null);\n\n        genConstructor(cw, \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", internalName);\n\n        genCallXxxWithArray(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n        genCallWithFixedParams(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n\n        cw.visitEnd();\n\n        return cw.toByteArray();\n    }","id":7756,"modified_method":"public static byte[] genPojoMetaMethodSite(CachedMethod cachedMethod, ClassWriter cw, String name) {\n        String internalName = name.replace('.', '/');\n        cw.visit(Opcodes.V1_4, Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, internalName, null, \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", null);\n        cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, \"__constructor__\", \"Ljava/lang/reflect/Constructor;\", null, null);\n\n        genConstructor(cw, \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", internalName);\n\n        genCallXxxWithArray(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n        genCallWithFixedParams(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n\n        cw.visitEnd();\n\n        return cw.toByteArray();\n    }","commit_id":"0a43d5fcf7203e77feca74f18ad0431b14126629","url":"https://github.com/apache/groovy"},{"original_method":"public static byte[] genPogoMetaMethodSite(CachedMethod cachedMethod, ClassWriter cw, String name) {\n        String internalName = name.replace('.', '/');\n        cw.visit(Opcodes.V1_4, Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, internalName, null, \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", null);\n        cw.visitField(Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL, \"__constructor__\", \"Ljava/lang/reflect/Constructor;\", null, null);\n \n        genConstructor(cw, \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", internalName);\n\n        genCallXxxWithArray(cw, \"Current\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"groovy/lang/GroovyObject\");\n        genCallXxxWithArray(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n\n        genCallWithFixedParams(cw, \"Current\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"groovy/lang/GroovyObject\");\n        genCallWithFixedParams(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n\n\n        cw.visitEnd();\n\n        return cw.toByteArray();\n    }","id":7757,"modified_method":"public static byte[] genPogoMetaMethodSite(CachedMethod cachedMethod, ClassWriter cw, String name) {\n        String internalName = name.replace('.', '/');\n        cw.visit(Opcodes.V1_4, Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, internalName, null, \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", null);\n        cw.visitField(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, \"__constructor__\", \"Ljava/lang/reflect/Constructor;\", null, null);\n \n        genConstructor(cw, \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", internalName);\n\n        genCallXxxWithArray(cw, \"Current\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"groovy/lang/GroovyObject\");\n        genCallXxxWithArray(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n\n        genCallWithFixedParams(cw, \"Current\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"groovy/lang/GroovyObject\");\n        genCallWithFixedParams(cw, \"\", \"org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite\", cachedMethod, \"java/lang/Object\");\n\n\n        cw.visitEnd();\n\n        return cw.toByteArray();\n    }","commit_id":"0a43d5fcf7203e77feca74f18ad0431b14126629","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n\tpublic List<User> findByC_FN_MN_LN_SN_EA_S(\n\t\tlong companyId, String firstName, String middleName, String lastName,\n\t\tString screenName, String emailAddress, int status,\n\t\tLinkedHashMap<String, Object> params, boolean andOperator, int start,\n\t\tint end, OrderByComparator<User> obc) {\n\n\t\tString[] firstNames = CustomSQLUtil.keywords(firstName);\n\t\tString[] middleNames = CustomSQLUtil.keywords(middleName);\n\t\tString[] lastNames = CustomSQLUtil.keywords(lastName);\n\t\tString[] screenNames = CustomSQLUtil.keywords(screenName);\n\t\tString[] emailAddresses = CustomSQLUtil.keywords(emailAddress);\n\n\t\treturn findByC_FN_MN_LN_SN_EA_S(\n\t\t\tcompanyId, firstNames, middleNames, lastNames, screenNames,\n\t\t\temailAddresses, status, params, andOperator, start, end, obc);\n\t}","id":7758,"modified_method":"@Override\n\tpublic List<User> findByC_FN_MN_LN_SN_EA_S(\n\t\tlong companyId, String firstName, String middleName, String lastName,\n\t\tString screenName, String emailAddress, int status,\n\t\tLinkedHashMap<String, Object> params, boolean andOperator, int start,\n\t\tint end, OrderByComparator<User> obc) {\n\n\t\tString[] firstNames = null;\n\t\tString[] middleNames = null;\n\t\tString[] lastNames = null;\n\t\tString[] screenNames = null;\n\t\tString[] emailAddresses = null;\n\n\t\tif (Validator.isNotNull(firstName) || Validator.isNotNull(middleName) ||\n\t\t\tValidator.isNotNull(lastName) || Validator.isNotNull(screenName) ||\n\t\t\tValidator.isNotNull(emailAddress)) {\n\n\t\t\tfirstNames = CustomSQLUtil.keywords(firstName);\n\t\t\tmiddleNames = CustomSQLUtil.keywords(middleName);\n\t\t\tlastNames = CustomSQLUtil.keywords(lastName);\n\t\t\tscreenNames = CustomSQLUtil.keywords(screenName);\n\t\t\temailAddresses = CustomSQLUtil.keywords(emailAddress);\n\t\t}\n\t\telse {\n\t\t\tandOperator = true;\n\t\t}\n\n\t\treturn findByC_FN_MN_LN_SN_EA_S(\n\t\t\tcompanyId, firstNames, middleNames, lastNames, screenNames,\n\t\t\temailAddresses, status, params, andOperator, start, end, obc);\n\t}","commit_id":"cfcb2f28d35ddf1e3abd840258f040868e37998a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic int countByC_FN_MN_LN_SN_EA_S(\n\t\tlong companyId, String firstName, String middleName, String lastName,\n\t\tString screenName, String emailAddress, int status,\n\t\tLinkedHashMap<String, Object> params, boolean andOperator) {\n\n\t\tString[] firstNames = CustomSQLUtil.keywords(firstName);\n\t\tString[] middleNames = CustomSQLUtil.keywords(middleName);\n\t\tString[] lastNames = CustomSQLUtil.keywords(lastName);\n\t\tString[] screenNames = CustomSQLUtil.keywords(screenName);\n\t\tString[] emailAddresses = CustomSQLUtil.keywords(emailAddress);\n\n\t\treturn countByC_FN_MN_LN_SN_EA_S(\n\t\t\tcompanyId, firstNames, middleNames, lastNames, screenNames,\n\t\t\temailAddresses, status, params, andOperator);\n\t}","id":7759,"modified_method":"@Override\n\tpublic int countByC_FN_MN_LN_SN_EA_S(\n\t\tlong companyId, String firstName, String middleName, String lastName,\n\t\tString screenName, String emailAddress, int status,\n\t\tLinkedHashMap<String, Object> params, boolean andOperator) {\n\n\t\tString[] firstNames = null;\n\t\tString[] middleNames = null;\n\t\tString[] lastNames = null;\n\t\tString[] screenNames = null;\n\t\tString[] emailAddresses = null;\n\n\t\tif (Validator.isNotNull(firstName) || Validator.isNotNull(middleName) ||\n\t\t\tValidator.isNotNull(lastName) || Validator.isNotNull(screenName) ||\n\t\t\tValidator.isNotNull(emailAddress)) {\n\n\t\t\tfirstNames = CustomSQLUtil.keywords(firstName);\n\t\t\tmiddleNames = CustomSQLUtil.keywords(middleName);\n\t\t\tlastNames = CustomSQLUtil.keywords(lastName);\n\t\t\tscreenNames = CustomSQLUtil.keywords(screenName);\n\t\t\temailAddresses = CustomSQLUtil.keywords(emailAddress);\n\t\t}\n\t\telse {\n\t\t\tandOperator = true;\n\t\t}\n\n\t\treturn countByC_FN_MN_LN_SN_EA_S(\n\t\t\tcompanyId, firstNames, middleNames, lastNames, screenNames,\n\t\t\temailAddresses, status, params, andOperator);\n\t}","commit_id":"cfcb2f28d35ddf1e3abd840258f040868e37998a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Optional<SpanTermQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {\n        XContentParser parser = parseContext.parser();\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                if (fieldName != null) {\n                    throw new ParsingException(parser.getTokenLocation(), \"[span_term] query doesn't support multiple fields, found [\"\n                            + fieldName + \"] and [\" + currentFieldName + \"]\");\n                }\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, TERM_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, BaseTermQueryBuilder.VALUE_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[span_term] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                fieldName = parser.currentName();\n                value = parser.objectBytes();\n            }\n        }\n\n        SpanTermQueryBuilder result = new SpanTermQueryBuilder(fieldName, value);\n        result.boost(boost).queryName(queryName);\n        return Optional.of(result);\n    }","id":7760,"modified_method":"public static Optional<SpanTermQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {\n        XContentParser parser = parseContext.parser();\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, TERM_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, BaseTermQueryBuilder.VALUE_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[span_term] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectBytes();\n            }\n        }\n\n        SpanTermQueryBuilder result = new SpanTermQueryBuilder(fieldName, value);\n        result.boost(boost).queryName(queryName);\n        return Optional.of(result);\n    }","commit_id":"0f54cb69abe81664572d101a69749bd0b5cb03bc","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testParseFailsWithMultipleFields() throws IOException {\n        String json = \"{\\n\" +\n                \"  \\\"span_term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : {\\n\" +\n                \"      \\\"term\\\" : \\\"this\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"message2\\\" : {\\n\" +\n                \"      \\\"term\\\" : \\\"this\\\"\\n\" +\n                \"    }\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json));\n        assertEquals(\"[span_term] query doesn't support multiple fields, found [message1] and [message2]\", e.getMessage());\n    }","id":7761,"modified_method":"public void testParseFailsWithMultipleFields() throws IOException {\n        String json = \"{\\n\" +\n                \"  \\\"span_term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : {\\n\" +\n                \"      \\\"term\\\" : \\\"this\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"message2\\\" : {\\n\" +\n                \"      \\\"term\\\" : \\\"this\\\"\\n\" +\n                \"    }\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json));\n        assertEquals(\"[span_term] query doesn't support multiple fields, found [message1] and [message2]\", e.getMessage());\n\n        String shortJson = \"{\\n\" +\n                \"  \\\"span_term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : \\\"this\\\",\\n\" +\n                \"    \\\"message2\\\" : \\\"this\\\"\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        e = expectThrows(ParsingException.class, () -> parseQuery(shortJson));\n        assertEquals(\"[span_term] query doesn't support multiple fields, found [message1] and [message2]\", e.getMessage());\n    }","commit_id":"0f54cb69abe81664572d101a69749bd0b5cb03bc","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static Optional<TermQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n\n        String queryName = null;\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {\n                // skip\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                // also support a format of \"term\" : {\"field_name\" : { ... }}\n                if (fieldName != null) {\n                    throw new ParsingException(parser.getTokenLocation(),\n                            \"[term] query does not support different field names, use [bool] query instead\");\n                }\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, TERM_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, VALUE_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[term] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else if (token.isValue()) {\n                if (fieldName != null) {\n                    throw new ParsingException(parser.getTokenLocation(),\n                            \"[term] query does not support different field names, use [bool] query instead\");\n                }\n                fieldName = currentFieldName;\n                value = parser.objectBytes();\n            } else if (token == XContentParser.Token.START_ARRAY) {\n                throw new ParsingException(parser.getTokenLocation(), \"[term] query does not support array of values\");\n            }\n        }\n\n        TermQueryBuilder termQuery = new TermQueryBuilder(fieldName, value);\n        termQuery.boost(boost);\n        if (queryName != null) {\n            termQuery.queryName(queryName);\n        }\n        return Optional.of(termQuery);\n    }","id":7762,"modified_method":"public static Optional<TermQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n\n        String queryName = null;\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {\n                // skip\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, TERM_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, VALUE_FIELD)) {\n                            value = parser.objectBytes();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[term] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else if (token.isValue()) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.objectBytes();\n            } else if (token == XContentParser.Token.START_ARRAY) {\n                throw new ParsingException(parser.getTokenLocation(), \"[term] query does not support array of values\");\n            }\n        }\n\n        TermQueryBuilder termQuery = new TermQueryBuilder(fieldName, value);\n        termQuery.boost(boost);\n        if (queryName != null) {\n            termQuery.queryName(queryName);\n        }\n        return Optional.of(termQuery);\n    }","commit_id":"f9a40344b271f2487a22668e4fd618ae4ad5f0fd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testParseFailsWithMultipleFields() throws IOException {\n        String json = \"{\\n\" +\n                \"  \\\"term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : {\\n\" +\n                \"      \\\"value\\\" : \\\"this\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"message2\\\" : {\\n\" +\n                \"      \\\"value\\\" : \\\"this\\\"\\n\" +\n                \"    }\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json));\n        assertEquals(\"[term] query does not support different field names, use [bool] query instead\", e.getMessage());\n\n        String shortJson = \"{\\n\" +\n                \"  \\\"term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : \\\"this\\\",\\n\" +\n                \"    \\\"message2\\\" : \\\"this\\\"\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        e = expectThrows(ParsingException.class, () -> parseQuery(shortJson));\n        assertEquals(\"[term] query does not support different field names, use [bool] query instead\", e.getMessage());\n    }","id":7763,"modified_method":"public void testParseFailsWithMultipleFields() throws IOException {\n        String json = \"{\\n\" +\n                \"  \\\"term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : {\\n\" +\n                \"      \\\"value\\\" : \\\"this\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"message2\\\" : {\\n\" +\n                \"      \\\"value\\\" : \\\"this\\\"\\n\" +\n                \"    }\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json));\n        assertEquals(\"[term] query doesn't support multiple fields, found [message1] and [message2]\", e.getMessage());\n\n        String shortJson = \"{\\n\" +\n                \"  \\\"term\\\" : {\\n\" +\n                \"    \\\"message1\\\" : \\\"this\\\",\\n\" +\n                \"    \\\"message2\\\" : \\\"this\\\"\\n\" +\n                \"  }\\n\" +\n                \"}\";\n        e = expectThrows(ParsingException.class, () -> parseQuery(shortJson));\n        assertEquals(\"[term] query doesn't support multiple fields, found [message1] and [message2]\", e.getMessage());\n    }","commit_id":"f9a40344b271f2487a22668e4fd618ae4ad5f0fd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Restarts the cms.<p>\n     */\n    protected void restart() {\n\n        OpenCmsTestLogAppender.setBreakOnError(false);\n        \n        // output a message \n        System.out.println(\"\\n\\n\\n----- Restarting shell -----\");\n        \n        m_shell.exit();\n        \n        m_shell = new CmsShell(getTestDataPath() + \"WEB-INF\" + File.separator, \"${user}@${project}>\", null);\n\n        OpenCmsTestLogAppender.setBreakOnError(true);\n    }","id":7764,"modified_method":"/**\n     * Restarts the cms.<p>\n     */\n    protected void restart() {\n\n        OpenCmsTestLogAppender.setBreakOnError(false);\n\n        // output a message \n        System.out.println(\"\\n\\n\\n----- Restarting shell -----\");\n\n        m_shell.exit();\n\n        m_shell = new CmsShell(getTestDataPath(\"WEB-INF\" + File.separator), \"${user}@${project}>\", null);\n\n        OpenCmsTestLogAppender.setBreakOnError(true);\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Sets up a complete OpenCms instance with configuration from the config-ori folder, \n     * creating the usual projects, and importing a default database.<p>\n     * \n     * @param importFolder the folder to import in the \"real\" FS\n     * @param targetFolder the target folder of the import in the VFS\n     * @param publish flag to signalize if the publish script should be called\n     * @return an initialized OpenCms context with \"Admin\" user in the \"Offline\" project with the site root set to \"/\" \n     */\n    public static CmsObject setupOpenCms(String importFolder, String targetFolder, boolean publish) {\n    \n        return setupOpenCms(importFolder, targetFolder, getTestDataPath() + \"WEB-INF/config.\" + m_dbProduct + \"/\", publish);\n    }","id":7765,"modified_method":"/**\n     * Sets up a complete OpenCms instance with configuration from the config-ori folder, \n     * creating the usual projects, and importing a default database.<p>\n     * \n     * @param importFolder the folder to import in the \"real\" FS\n     * @param targetFolder the target folder of the import in the VFS\n     * @param publish flag to signalize if the publish script should be called\n     * @return an initialized OpenCms context with \"Admin\" user in the \"Offline\" project with the site root set to \"/\" \n     */\n    public static CmsObject setupOpenCms(String importFolder, String targetFolder, boolean publish) {\n\n        return setupOpenCms(importFolder, targetFolder, getTestDataPath(\"WEB-INF/config.\" + m_dbProduct + \"/\"), publish);\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Imports a resource into the Cms.<p>\n     * \n     * @param cms an initialized CmsObject\n     * @param importFile the name (absolute Path) of the import resource (zip or folder)\n     * @param targetPath the name (absolute Path) of the target folder in the VFS\n     * @throws CmsException if something goes wrong\n     */\n    protected static void importResources(CmsObject cms, String importFile, String targetPath) throws CmsException {\n\n        OpenCms.getImportExportManager().importData(\n            cms,\n            getTestDataPath() + File.separator + \"imports\" + File.separator + importFile,\n            targetPath,\n            new CmsShellReport());\n    }","id":7766,"modified_method":"/**\n     * Imports a resource into the Cms.<p>\n     * \n     * @param cms an initialized CmsObject\n     * @param importFile the name (absolute Path) of the import resource (zip or folder)\n     * @param targetPath the name (absolute Path) of the target folder in the VFS\n     * @throws CmsException if something goes wrong\n     */\n    protected static void importResources(CmsObject cms, String importFile, String targetPath) throws CmsException {\n\n        OpenCms.getImportExportManager().importData(\n            cms,\n            getTestDataPath(File.separator + \"imports\" + File.separator + importFile),\n            targetPath,\n            new CmsShellReport());\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Copies the configuration files from the \"config-ori\" folder to the \n     * \"config\" folder.<p>\n     */\n    private static void copyConfiguration(String newConfig) {\n        \n        File configDir = new File(getTestDataPath() + \"WEB-INF/config/\");\n        File configOriDir = new File(newConfig);\n        \n        if (configOriDir.exists()) {\n            File[] oriFiles = configOriDir.listFiles();\n            boolean initConfigDates = false;\n            if (m_dateConfigFiles == null) {\n                m_dateConfigFiles = new long[oriFiles.length];\n                initConfigDates = true;\n            }\n            for (int i=0; i<oriFiles.length; i++) {\n                File source = oriFiles[i];\n                if (source.isFile()) {\n                    // only copy files\n                    String sourceName = source.getAbsolutePath();\n                    File target = new File(configDir, source.getName());\n                    if (initConfigDates) {\n                        m_dateConfigFiles[i] = target.lastModified();\n                    }\n                    String targetName = target.getAbsolutePath();\n                    try {\n                        CmsFileUtil.copy(sourceName, targetName);\n                        target.setLastModified(m_dateConfigFiles[i]);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        \n    }","id":7767,"modified_method":"/**\n     * Copies the configuration files from the \"config-ori\" folder to the \n     * \"config\" folder.<p>\n     */\n    private static void copyConfiguration(String newConfig) {\n\n        File configDir = new File(getTestDataPath(\"WEB-INF/config/\"));\n        File configOriDir = new File(newConfig);\n\n        if (configOriDir.exists()) {\n            File[] oriFiles = configOriDir.listFiles();\n            boolean initConfigDates = false;\n            if (m_dateConfigFiles == null) {\n                m_dateConfigFiles = new long[oriFiles.length];\n                initConfigDates = true;\n            }\n            for (int i = 0; i < oriFiles.length; i++) {\n                File source = oriFiles[i];\n                if (source.isFile()) {\n                    // only copy files\n                    String sourceName = source.getAbsolutePath();\n                    File target = new File(configDir, source.getName());\n                    if (initConfigDates) {\n                        m_dateConfigFiles[i] = target.lastModified();\n                    }\n                    String targetName = target.getAbsolutePath();\n                    try {\n                        CmsFileUtil.copy(sourceName, targetName);\n                        target.setLastModified(m_dateConfigFiles[i]);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Initializies the OpenCms/database configuration \n     * by reading the appropriate values from opencms.properties.<p>\n     */\n    private void initConfiguration() {\n\n        if (m_configuration == null) {\n            try {\n                String propertyFile = getTestDataPath() + \"../test.properties\";\n                m_configuration = CmsPropertyUtils.loadProperties(propertyFile);\n                m_dbProduct = m_configuration.getString(\"db.product\");\n            } catch (IOException e) {\n                fail(e.toString());\n                return;\n}\n            try {\n                String propertyFile = getTestDataPath() + \"WEB-INF/config.\" + m_dbProduct + \"/opencms.properties\";\n                m_configuration = CmsPropertyUtils.loadProperties(propertyFile);\n            } catch (IOException e) {\n                fail(e.toString());\n                return;\n            }\n\n            m_setupUrl = m_configuration.getString(CmsDbPool.C_KEY_DATABASE + \"setup.\" + \"jdbcUrl\");\n            m_setupName = m_configuration.getString(CmsDbPool.C_KEY_DATABASE + \"setup.\" + \"user\");\n            m_setupPassword = m_configuration.getString(CmsDbPool.C_KEY_DATABASE + \"setup.\" + \"password\");\n\n            String key = \"default\";\n            m_dbName = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL + \".\" + key + \".\" + \"dbName\");\n            m_userName = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_USERNAME);\n            m_userPassword = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_PASSWORD);\n\n            m_jdbcDriver = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_JDBC_DRIVER);\n            m_jdbcUrl = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_JDBC_URL);\n            m_jdbcUrlParams = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_JDBC_URL_PARAMS);\n\n            m_defaultTablespace = m_configuration.getString(\"db.oracle.defaultTablespace\");\n            m_indexTablespace = m_configuration.getString(\"db.oracle.indexTablespace\");\n            m_tempTablespace = m_configuration.getString(\"db.oracle.temporaryTablespace\");\n\n            System.out.println(\"----- Starting tests on database \" + m_dbProduct + \" (\" + m_setupUrl + \") \" + \"-----\");\n        }\n    }","id":7768,"modified_method":"/**\n     * Initializies the OpenCms/database configuration \n     * by reading the appropriate values from opencms.properties.<p>\n     */\n    private void initConfiguration() {\n\n        if (m_configuration == null) {\n            try {\n                initTestDataPath();\n                String propertyFile = getTestDataPath(\"../test.properties\");\n                m_configuration = CmsPropertyUtils.loadProperties(propertyFile);\n                m_dbProduct = m_configuration.getString(\"db.product\");\n            } catch (IOException e) {\n                fail(e.toString());\n                return;\n            }\n            int index = 0;\n            boolean cont;\n            do {\n                cont = false;\n                if (m_configuration.containsKey(\"test.data.path.\" + index)) {\n                    addTestDataPath(m_configuration.getString(\"test.data.path.\" + index));\n                    cont = true;\n                    index++;\n                }\n            } while (cont);\n\n            try {\n                String propertyFile = getTestDataPath(\"WEB-INF/config.\" + m_dbProduct + \"/opencms.properties\");\n                m_configuration = CmsPropertyUtils.loadProperties(propertyFile);\n            } catch (IOException e) {\n                fail(e.toString());\n                return;\n            }\n\n            m_setupUrl = m_configuration.getString(CmsDbPool.C_KEY_DATABASE + \"setup.\" + \"jdbcUrl\");\n            m_setupName = m_configuration.getString(CmsDbPool.C_KEY_DATABASE + \"setup.\" + \"user\");\n            m_setupPassword = m_configuration.getString(CmsDbPool.C_KEY_DATABASE + \"setup.\" + \"password\");\n\n            String key = \"default\";\n            m_dbName = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL + \".\" + key + \".\" + \"dbName\");\n            m_userName = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_USERNAME);\n            m_userPassword = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_PASSWORD);\n\n            m_jdbcDriver = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_JDBC_DRIVER);\n            m_jdbcUrl = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_JDBC_URL);\n            m_jdbcUrlParams = m_configuration.getString(CmsDbPool.C_KEY_DATABASE_POOL\n                + \".\"\n                + key\n                + \".\"\n                + CmsDbPool.C_KEY_JDBC_URL_PARAMS);\n\n            m_defaultTablespace = m_configuration.getString(\"db.oracle.defaultTablespace\");\n            m_indexTablespace = m_configuration.getString(\"db.oracle.indexTablespace\");\n            m_tempTablespace = m_configuration.getString(\"db.oracle.temporaryTablespace\");\n\n            System.out.println(\"----- Starting tests on database \" + m_dbProduct + \" (\" + m_setupUrl + \") \" + \"-----\");\n        }\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Sets up a complete OpenCms instance, creating the usual projects,\n     * and importing a default database.<p>\n     * @param importFolder the folder to import in the \"real\" FS\n     * @param targetFolder the target folder of the import in the VFS\n     * @param configFolder the folder to copy the configuration files\n     * @param publish TODO:\n     * \n     * @return an initialized OpenCms context with \"Admin\" user in the \"Offline\" project with the site root set to \"/\" \n     */\n    public static CmsObject setupOpenCms(String importFolder, String targetFolder, String configFolder, boolean publish) {\n        \n        // turn off exceptions after error logging during setup (won't work otherwise)\n        OpenCmsTestLogAppender.setBreakOnError(false);\n        // output a message \n        System.out.println(\"\\n\\n\\n----- \" + m_testClassName + \": Starting test case: Importing OpenCms VFS data -----\");\n                \n        // kill any old shell that might have remained from a previous test \n        if (m_shell != null) {\n            try {\n                m_shell.exit();\n                m_shell = null;\n            } catch (Throwable t) {\n                // ignore\n            }\n        }\n        \n        // copy the configuration files\n        copyConfiguration(configFolder);\n\n        // create a new database first\n        setupDatabase();\n        \n        // create a shell instance\n        m_shell = new CmsShell(getTestDataPath() + \"WEB-INF\" + File.separator, \"${user}@${project}>\", null);\n        \n        // open the test script \n        File script;\n        FileInputStream stream = null;\n        CmsObject cms = null;\n        \n        try {\n            // start the shell with the base script\n            script = new File(getTestDataPath() + \"scripts/script_base.txt\");\n            stream = new FileInputStream(script);\n            m_shell.start(stream);\n            \n            // add the default folders by script\n            script = new File(getTestDataPath() + \"scripts/script_default_folders.txt\");\n            stream = new FileInputStream(script);        \n            m_shell.start(stream); \n            \n            // log in the Admin user and switch to the setup project\n            cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserGuest());\n            cms.loginUser(\"Admin\", \"admin\");\n            cms.getRequestContext().setCurrentProject(cms.readProject(\"_setupProject\"));\n            \n            if (importFolder != null) {\n                // import the \"simpletest\" files\n                importResources(cms, importFolder, targetFolder);\n            }\n            if (publish) {\n                // publish the current project by script\n                script = new File(getTestDataPath() + \"scripts/script_publish.txt\");\n                stream = new FileInputStream(script);        \n                m_shell.start(stream);\n            } else {\n                cms.unlockProject(cms.readProject(\"_setupProject\").getId());\n            }\n            \n            // create the default projects by script\n            script = new File(getTestDataPath() + \"scripts/script_default_projects.txt\");\n            stream = new FileInputStream(script);        \n            m_shell.start(stream);            \n            \n            // switch to the \"Offline\" project\n            cms.getRequestContext().setCurrentProject(cms.readProject(\"Offline\"));\n            cms.getRequestContext().setSiteRoot(\"/sites/default/\");               \n            \n            // output a message \n            System.out.println(\"----- \" + m_testClassName + \": Starting test cases -----\");\n        } catch (Throwable t) {\n            fail(\"Unable to setup OpenCms\\n\" + CmsException.getStackTraceAsString(t));\n        }\n        // turn on exceptions after error logging\n        OpenCmsTestLogAppender.setBreakOnError(true);\n        // return the initialized cms context Object\n        return cms;\n    }","id":7769,"modified_method":"/**\n     * Sets up a complete OpenCms instance, creating the usual projects,\n     * and importing a default database.<p>\n     * @param importFolder the folder to import in the \"real\" FS\n     * @param targetFolder the target folder of the import in the VFS\n     * @param configFolder the folder to copy the configuration files\n     * @param publish TODO:\n     * \n     * @return an initialized OpenCms context with \"Admin\" user in the \"Offline\" project with the site root set to \"/\" \n     */\n    public static CmsObject setupOpenCms(String importFolder, String targetFolder, String configFolder, boolean publish) {\n\n        // turn off exceptions after error logging during setup (won't work otherwise)\n        OpenCmsTestLogAppender.setBreakOnError(false);\n        // output a message \n        System.out.println(\"\\n\\n\\n----- \" + m_testClassName + \": Starting test case: Importing OpenCms VFS data -----\");\n\n        // kill any old shell that might have remained from a previous test \n        if (m_shell != null) {\n            try {\n                m_shell.exit();\n                m_shell = null;\n            } catch (Throwable t) {\n                // ignore\n            }\n        }\n\n        // copy the configuration files\n        copyConfiguration(configFolder);\n\n        // create a new database first\n        setupDatabase();\n\n        // create a shell instance\n        m_shell = new CmsShell(getTestDataPath(\"WEB-INF\" + File.separator), \"${user}@${project}>\", null);\n\n        // open the test script \n        File script;\n        FileInputStream stream = null;\n        CmsObject cms = null;\n\n        try {\n            // start the shell with the base script\n            script = new File(getTestDataPath(\"scripts/script_base.txt\"));\n            stream = new FileInputStream(script);\n            m_shell.start(stream);\n\n            // add the default folders by script\n            script = new File(getTestDataPath(\"scripts/script_default_folders.txt\"));\n            stream = new FileInputStream(script);\n            m_shell.start(stream);\n\n            // log in the Admin user and switch to the setup project\n            cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserGuest());\n            cms.loginUser(\"Admin\", \"admin\");\n            cms.getRequestContext().setCurrentProject(cms.readProject(\"_setupProject\"));\n\n            if (importFolder != null) {\n                // import the \"simpletest\" files\n                importResources(cms, importFolder, targetFolder);\n            }\n            if (publish) {\n                // publish the current project by script\n                script = new File(getTestDataPath(\"scripts/script_publish.txt\"));\n                stream = new FileInputStream(script);\n                m_shell.start(stream);\n            } else {\n                cms.unlockProject(cms.readProject(\"_setupProject\").getId());\n            }\n\n            // create the default projects by script\n            script = new File(getTestDataPath(\"scripts/script_default_projects.txt\"));\n            stream = new FileInputStream(script);\n            m_shell.start(stream);\n\n            // switch to the \"Offline\" project\n            cms.getRequestContext().setCurrentProject(cms.readProject(\"Offline\"));\n            cms.getRequestContext().setSiteRoot(\"/sites/default/\");\n\n            // output a message \n            System.out.println(\"----- \" + m_testClassName + \": Starting test cases -----\");\n        } catch (Throwable t) {\n            t.printStackTrace(System.err);\n            fail(\"Unable to setup OpenCms\\n\" + CmsException.getStackTraceAsString(t));\n        }\n        // turn on exceptions after error logging\n        OpenCmsTestLogAppender.setBreakOnError(true);\n        // return the initialized cms context Object\n        return cms;\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the path to the test data configuration files.<p>\n     * \n     * Use this path in case you require input files for testing \n     * that are modified or otherwise different from the setup data.<p>\n     * \n     * @return the path to the test data configuration files\n     */    \n    protected static synchronized String getTestDataPath() {\n\n        if (m_testDataPath == null) {\n            // get URL of test input resource\n            URL basePathUrl = ClassLoader.getSystemResource(\"./\");\n\n            // check if the db setup files are available\n            File testDataFolder = new File(basePathUrl.getFile() + \"../test/data/\");\n            if (!testDataFolder.exists()) {\n                fail(\"DB setup data not available at \" + testDataFolder.getAbsolutePath());\n            }\n            m_testDataPath = CmsFileUtil.normalizePath(testDataFolder.getAbsolutePath() + File.separator);\n        }\n        // return the path name\n        return m_testDataPath;    \n    }","id":7770,"modified_method":"/**\n     * Initializes the path to the test data configuration files.<p>\n     */\n    protected static synchronized void initTestDataPath() {\n\n        if (m_testDataPath == null) {\n            m_testDataPath = new ArrayList(4);\n\n            // get URL of test input resource\n            URL basePathUrl = ClassLoader.getSystemResource(\"./\");\n\n            // set data path \n            addTestDataPath(basePathUrl.getFile() + \"../test/data/\");\n        }\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Removes the initialized OpenCms database and all \n     * temporary files created during the test run.<p>\n     */\n    public static void removeOpenCms() {\n        \n        // ensure logging does not throw exceptions\n        OpenCmsTestLogAppender.setBreakOnError(false);\n\n        // output a message\n        m_shell.printPrompt(); \n        System.out.println(\"----- \" + m_testClassName + \": Test cases finished -----\");        \n\n        // exit the shell\n        m_shell.exit();\n        \n        // remove the database\n        removeDatabase();\n        \n        // copy the configuration files to re-create the original configuration\n        String configFolder = getTestDataPath() + \"WEB-INF/config.\" + m_dbProduct + \"/\";\n        copyConfiguration(configFolder);\n\n        // remove potentially created \"classes, \"lib\" and \"backup\" folder\n        CmsFileUtil.purgeDirectory(new File(getTestDataPath() + \"WEB-INF/classes/\"));        \n        CmsFileUtil.purgeDirectory(new File(getTestDataPath() + \"WEB-INF/lib/\"));\n        CmsFileUtil.purgeDirectory(new File(getTestDataPath() + \"WEB-INF/config/backup/\"));        \n    }","id":7771,"modified_method":"/**\n     * Removes the initialized OpenCms database and all \n     * temporary files created during the test run.<p>\n     */\n    public static void removeOpenCms() {\n\n        // ensure logging does not throw exceptions\n        OpenCmsTestLogAppender.setBreakOnError(false);\n\n        // output a message\n        m_shell.printPrompt();\n        System.out.println(\"----- \" + m_testClassName + \": Test cases finished -----\");\n\n        // exit the shell\n        m_shell.exit();\n\n        // remove the database\n        removeDatabase();\n\n        // copy the configuration files to re-create the original configuration\n        String configFolder = getTestDataPath(\"WEB-INF\" + File.separator + \"config.\" + m_dbProduct + File.separator);\n        copyConfiguration(configFolder);\n\n        // remove potentially created \"classes, \"lib\" and \"backup\" folder\n        String path;\n        path = getTestDataPath(\"WEB-INF/classes/\");\n        if (path != null) {\n            CmsFileUtil.purgeDirectory(new File(path));\n        }\n        path = getTestDataPath(\"WEB-INF/lib/\");\n        if (path != null) {\n            CmsFileUtil.purgeDirectory(new File(path));\n        }\n        path = getTestDataPath(\"WEB-INF/config/backup/\");\n        if (path != null) {\n            CmsFileUtil.purgeDirectory(new File(path));\n        }\n        path = getTestDataPath(\"export/\");\n        if (path != null) {\n            CmsFileUtil.purgeDirectory(new File(path));\n        }        \n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Sets up a complete OpenCms instance with configuration from the config-ori folder, \n     * creating the usual projects, and importing a default database.<p>\n     * \n     * @param importFolder the folder to import in the \"real\" FS\n     * @param targetFolder the target folder of the import in the VFS\n     * @return an initialized OpenCms context with \"Admin\" user in the \"Offline\" project with the site root set to \"/\" \n     */\n    public static CmsObject setupOpenCms(String importFolder, String targetFolder) {\n    \n        return setupOpenCms(importFolder, targetFolder, getTestDataPath() + \"WEB-INF/config.\" + m_dbProduct + \"/\", true);\n    }","id":7772,"modified_method":"/**\n     * Sets up a complete OpenCms instance with configuration from the config-ori folder, \n     * creating the usual projects, and importing a default database.<p>\n     * \n     * @param importFolder the folder to import in the \"real\" FS\n     * @param targetFolder the target folder of the import in the VFS\n     * @return an initialized OpenCms context with \"Admin\" user in the \"Offline\" project with the site root set to \"/\" \n     */\n    public static CmsObject setupOpenCms(String importFolder, String targetFolder) {\n\n        return setupOpenCms(importFolder, targetFolder, getTestDataPath(\"WEB-INF/config.\" + m_dbProduct + \"/\"), true);\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests if all word tags are removed.<p>\n     */\n    public void testremoveWordTags() {\n        System.out.println(\"Testing Word conversion\");\n        CmsHtmlConverter converter = new CmsHtmlConverter(\"UTF-8\", CmsHtmlConverter.C_PARAM_XHTML);        \n        \n        // read a file and convert it\n        File inputfile = new File (getTestDataPath() + \"test2.html\");\n        try {\n            byte[] htmlInput = converter.getFileBytes(inputfile);\n            String inputContent = new String(htmlInput, converter.m_encoding);\n            inputContent = converter.adjustHtml(inputContent);            \n            byte[] htmlOutput = converter.convertToByte(inputContent);          \n            String outputContent = new String(htmlOutput, converter.m_encoding);\n            System.out.println(outputContent);\n            // now check if all word specific tags are removed\n            assertContainsNot(outputContent, \"<o:p>\");\n            assertContainsNot(outputContent, \"<o:smarttagtype\");\n            assertContainsNot(outputContent, \"<?xml:namespace \");\n                       \n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }","id":7773,"modified_method":"/**\n     * Tests if all word tags are removed.<p>\n     */\n    public void testremoveWordTags() {\n        System.out.println(\"Testing Word conversion\");\n        CmsHtmlConverter converter = new CmsHtmlConverter(\"UTF-8\", CmsHtmlConverter.C_PARAM_XHTML);        \n        \n        // read a file and convert it\n        File inputfile = new File (getTestDataPath(\"test2.html\"));\n        try {\n            byte[] htmlInput = converter.getFileBytes(inputfile);\n            String inputContent = new String(htmlInput, converter.m_encoding);\n            inputContent = converter.adjustHtml(inputContent);            \n            byte[] htmlOutput = converter.convertToByte(inputContent);          \n            String outputContent = new String(htmlOutput, converter.m_encoding);\n            System.out.println(outputContent);\n            // now check if all word specific tags are removed\n            assertContainsNot(outputContent, \"<o:p>\");\n            assertContainsNot(outputContent, \"<o:smarttagtype\");\n            assertContainsNot(outputContent, \"<?xml:namespace \");\n                       \n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests the method saveProperties.<p>\n     * \n     * @throws IOException if something goes wrong\n     */\n    public void testSaveProperties() throws IOException {\n        CmsSetupBean bean = new CmsSetupBean();\n        bean.init(\"\", null);\n\n        String base = getTestDataPath() + File.separator + \"WEB-INF\" + File.separator + \"config\" +  File.separator;\n        String inputFile = base + \"opencms.properties\";\n        String outputFile = base + \"output.properties\";\n               \n        System.out.println(\"Reading properties from \" + inputFile);\n        ExtendedProperties oldProperties = bean.loadProperties(inputFile);\n        \n        System.out.println(\"Writing properties to \" + outputFile);\n        bean.copyFile(inputFile, outputFile);\n        bean.saveProperties(oldProperties, outputFile, false);\n        \n        System.out.println(\"Checking properties from \" + outputFile);\n        ExtendedProperties newProperties = bean.loadProperties(outputFile);\n        \n        for (Iterator i = oldProperties.keySet().iterator(); i.hasNext();) {\n            String key = (String)i.next();\n            String oldValue = \"\", newValue = \"\";\n            Object obj = oldProperties.get(key);\n            \n            if (obj instanceof Vector) {\n                StringBuffer buf;\n                \n                buf = new StringBuffer();\n                for (Iterator j = ((Vector)obj).iterator(); j.hasNext();) {\n                    buf.append(\"[\" + (String)j.next() + \"]\");\n                }\n                oldValue = buf.toString();\n                \n                buf = new StringBuffer();\n                for (Iterator j = ((Vector)newProperties.get(key)).iterator(); j.hasNext();) {\n                    buf.append(\"[\" + (String)j.next() + \"]\");\n                }\n                newValue = buf.toString();\n\n            } else {\n                oldValue = (String)obj;\n                newValue = (String)newProperties.get(key);\n            }\n            System.out.println(key);\n            System.out.println(oldValue);\n            System.out.println(newValue);\n            System.out.println(\"---\");\n            assertEquals(oldValue, newValue);   \n        }        \n        \n        // clean up - remvove generated file\n        File output = new File(outputFile);\n        output.delete();\n    }","id":7774,"modified_method":"/**\n     * Tests the method saveProperties.<p>\n     * \n     * @throws IOException if something goes wrong\n     */\n    public void testSaveProperties() throws IOException {\n        CmsSetupBean bean = new CmsSetupBean();\n        bean.init(\"\", null);\n\n        String base = getTestDataPath(File.separator + \"WEB-INF\" + File.separator + \"config\" +  File.separator);\n        String inputFile = base + \"opencms.properties\";\n        String outputFile = base + \"output.properties\";\n               \n        System.out.println(\"Reading properties from \" + inputFile);\n        ExtendedProperties oldProperties = bean.loadProperties(inputFile);\n        \n        System.out.println(\"Writing properties to \" + outputFile);\n        bean.copyFile(inputFile, outputFile);\n        bean.saveProperties(oldProperties, outputFile, false);\n        \n        System.out.println(\"Checking properties from \" + outputFile);\n        ExtendedProperties newProperties = bean.loadProperties(outputFile);\n        \n        for (Iterator i = oldProperties.keySet().iterator(); i.hasNext();) {\n            String key = (String)i.next();\n            String oldValue = \"\", newValue = \"\";\n            Object obj = oldProperties.get(key);\n            \n            if (obj instanceof Vector) {\n                StringBuffer buf;\n                \n                buf = new StringBuffer();\n                for (Iterator j = ((Vector)obj).iterator(); j.hasNext();) {\n                    buf.append(\"[\" + (String)j.next() + \"]\");\n                }\n                oldValue = buf.toString();\n                \n                buf = new StringBuffer();\n                for (Iterator j = ((Vector)newProperties.get(key)).iterator(); j.hasNext();) {\n                    buf.append(\"[\" + (String)j.next() + \"]\");\n                }\n                newValue = buf.toString();\n\n            } else {\n                oldValue = (String)obj;\n                newValue = (String)newProperties.get(key);\n            }\n            System.out.println(key);\n            System.out.println(oldValue);\n            System.out.println(newValue);\n            System.out.println(\"---\");\n            assertEquals(oldValue, newValue);   \n        }        \n        \n        // clean up - remvove generated file\n        File output = new File(outputFile);\n        output.delete();\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests the CmsShell and setup procedure.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testCmsShell() throws Throwable {\n        \n        // create a new database first\n        setupDatabase();\n        \n        // create a shell instance\n        CmsShell shell = new CmsShell(\n            getTestDataPath() + \"WEB-INF\" + File.separator,\n            \"${user}@${project}>\", \n            null);\n        \n        // open the test script \n        File script;\n        FileInputStream stream;\n        \n        // start the shell with the base script\n        script = new File(getTestDataPath() + \"scripts/script_base.txt\");\n        stream = new FileInputStream(script);        \n        shell.start(stream);\n        \n        // add the default folders by script\n        script = new File(getTestDataPath() + \"scripts/script_default_folders.txt\");\n        stream = new FileInputStream(script);        \n        shell.start(stream); \n        \n        // log in the Admin user and switch to the setup project\n        CmsObject cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserGuest());\n        cms.loginUser(\"Admin\", \"admin\");\n        cms.getRequestContext().setCurrentProject(cms.readProject(\"_setupProject\"));\n        \n        // import the \"simpletest\" files\n        importResources(cms, \"simpletest\", \"/sites/default/\");\n        \n        // publish the current project by script\n        script = new File(getTestDataPath() + \"scripts/script_publish.txt\");\n        stream = new FileInputStream(script);        \n        shell.start(stream);                \n        \n        // get the name of the folder for the backup configuration files\n        File configBackupDir = new File(getTestDataPath() + \"WEB-INF/config/backup/\");\n        \n        // exit the shell\n        shell.exit();\n        \n        // remove the database\n        removeDatabase();\n        \n        // remove the backup configuration files\n        CmsFileUtil.purgeDirectory(configBackupDir);\n    }","id":7775,"modified_method":"/**\n     * Tests the CmsShell and setup procedure.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testCmsShell() throws Throwable {\n        \n        // create a new database first\n        setupDatabase();\n        \n        // create a shell instance\n        CmsShell shell = new CmsShell(\n            getTestDataPath(\"WEB-INF\" + File.separator),\n            \"${user}@${project}>\", \n            null);\n        \n        // open the test script \n        File script;\n        FileInputStream stream;\n        \n        // start the shell with the base script\n        script = new File(getTestDataPath(\"scripts/script_base.txt\"));\n        stream = new FileInputStream(script);        \n        shell.start(stream);\n        \n        // add the default folders by script\n        script = new File(getTestDataPath(\"scripts/script_default_folders.txt\"));\n        stream = new FileInputStream(script);        \n        shell.start(stream); \n        \n        // log in the Admin user and switch to the setup project\n        CmsObject cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserGuest());\n        cms.loginUser(\"Admin\", \"admin\");\n        cms.getRequestContext().setCurrentProject(cms.readProject(\"_setupProject\"));\n        \n        // import the \"simpletest\" files\n        importResources(cms, \"simpletest\", \"/sites/default/\");\n        \n        // publish the current project by script\n        script = new File(getTestDataPath(\"scripts/script_publish.txt\"));\n        stream = new FileInputStream(script);        \n        shell.start(stream);                \n        \n        // get the name of the folder for the backup configuration files\n        File configBackupDir = new File(getTestDataPath(\"WEB-INF/config/backup/\"));\n        \n        // exit the shell\n        shell.exit();\n        \n        // remove the database\n        removeDatabase();\n        \n        // remove the backup configuration files\n        CmsFileUtil.purgeDirectory(configBackupDir);\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests the file export.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testStaticexportFile() throws Throwable {\n        \n        CmsObject cms = getCmsObject();\n        echo(\"Testing file export\");\n        \n        // set the export mode to export immediately after publishing resources\n        OpenCms.getStaticExportManager().setMode(\"after-publish\");\n        \n        String resourcename = \"/file1.txt\";\n        String content = \"this is a test content\";\n        \n        // create a file in the root directory\n        cms.createResource(resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID, content.getBytes(), null);\n        cms.unlockResource(resourcename);\n        \n        // read and check the content\n        this.assertContent(cms, resourcename, content.getBytes()); \n        \n        // now publish (and export) the resource\n        cms.publishProject();\n        \n        // now read the exported file in the file system and check its content\n        File f = new File(getTestDataPath() + \"export/sites/default\" + resourcename);\n        assertTrue(f.exists());\n        \n        // check the exported content\n        byte exportContent[] = new byte[(int)f.length()];\n        FileInputStream fileStream = new FileInputStream(f);\n        fileStream.read(exportContent);\n        \n        this.assertContent(cms, resourcename, exportContent);\n        \n    }","id":7776,"modified_method":"/**\n     * Tests the file export.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testStaticexportFile() throws Throwable {\n        \n        CmsObject cms = getCmsObject();\n        echo(\"Testing file export\");\n        \n        // set the export mode to export immediately after publishing resources\n        OpenCms.getStaticExportManager().setMode(\"after-publish\");\n        \n        String resourcename = \"/file1.txt\";\n        String content = \"this is a test content\";\n        \n        // create a file in the root directory\n        cms.createResource(resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID, content.getBytes(), null);\n        cms.unlockResource(resourcename);\n        \n        // read and check the content\n        this.assertContent(cms, resourcename, content.getBytes()); \n        \n        // now publish (and export) the resource\n        cms.publishProject();\n        \n        // now read the exported file in the file system and check its content\n        File f = new File(getTestDataPath(\"export/sites/default\" + resourcename));\n        assertTrue(f.exists());\n        \n        // check the exported content\n        byte exportContent[] = new byte[(int)f.length()];\n        FileInputStream fileStream = new FileInputStream(f);\n        fileStream.read(exportContent);\n        \n        this.assertContent(cms, resourcename, exportContent);\n        \n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests the synchronize function.<p>\n     * \n     * Synchronizes everything below \"/\" into the RFS, modifies .txt, .jsp and .html\n     * files in the RFS, and synchronizes everything back into the VFS.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testSynchronize() throws Throwable {\n\n        try {\n            CmsObject cms = getCmsObject();\n            echo(\"Testing synchronization of files and folders\");\n\n            String source = \"/\";\n            storeResources(cms, source);\n\n            // save what gets synchronized\n            CmsSynchronizeSettings syncSettings = OpenCms.getSystemInfo().getSynchronizeSettings();\n            syncSettings.setDestinationPathInRfs(getTestDataPath() + \"sync/\");\n            syncSettings.setSourcePathInVfs(source);\n\n            echo(\"Synchronizing \"\n                + OpenCms.getSystemInfo().getSynchronizeSettings().getSourcePathInVfs()\n                + \" with \"\n                + OpenCms.getSystemInfo().getSynchronizeSettings().getDestinationPathInRfs());\n\n            // synchronize everything to the RFS\n            new CmsSynchronize(cms, new CmsShellReport());\n\n            // modify resources in the RFS\n            List tree = getSubtree(cms, source);\n            for (int i = 0, n = tree.size(); i < n; i++) {\n                CmsResource resource = (CmsResource)tree.get(i);\n\n                int type = resource.getTypeId();\n                if (((type == CmsResourceTypePlain.C_RESOURCE_TYPE_ID)) \n                || (type == CmsResourceTypeJsp.C_RESOURCE_TYPE_ID)\n                || (type == CmsResourceTypeXmlPage.C_RESOURCE_TYPE_ID)) {\n                    // modify date last modified on resource\n                    touchResourceInRfs(cms, resource, syncSettings);\n                }\n            }\n\n            // sleep 4 seconds to avoid issues with file system timing\n            Thread.sleep(4000);\n            \n            // synchronize everything back to the VFS\n            new CmsSynchronize(cms, new CmsShellReport());\n\n            // assert if the synchronization worked fine\n            for (int i = 0, n = tree.size(); i < n; i++) {\n                CmsResource vfsResource = (CmsResource)tree.get(i);\n                int type = vfsResource.getTypeId();\n                String vfsname = cms.getSitePath(vfsResource);\n                \n                System.out.println(\"( \" + i + \" / \" + (n-1) + \" ) Checking \" + vfsname);\n                if (((type == CmsResourceTypePlain.C_RESOURCE_TYPE_ID)) \n                || (type == CmsResourceTypeJsp.C_RESOURCE_TYPE_ID) \n                || (type == CmsResourceTypeXmlPage.C_RESOURCE_TYPE_ID)) {\n                    // assert the resource state\n                    assertState(cms, vfsname, I_CmsConstants.C_STATE_CHANGED);                    \n                    // assert the modification date\n                    File rfsResource = new File(getRfsPath(cms, vfsResource, syncSettings));\n                    assertDateLastModifiedAfter(cms, vfsname, rfsResource.lastModified());                    \n                } else {\n                    assertState(cms, vfsname, I_CmsConstants.C_STATE_UNCHANGED);\n                }\n            }\n\n        } finally {\n            \n            // remove the test data\n            echo(\"Purging directory \" + OpenCms.getSystemInfo().getSynchronizeSettings().getDestinationPathInRfs());\n            CmsFileUtil.purgeDirectory(new File(getTestDataPath() + \"sync/\"));\n        }\n\n    }","id":7777,"modified_method":"/**\n     * Tests the synchronize function.<p>\n     * \n     * Synchronizes everything below \"/\" into the RFS, modifies .txt, .jsp and .html\n     * files in the RFS, and synchronizes everything back into the VFS.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testSynchronize() throws Throwable {\n\n        try {\n            CmsObject cms = getCmsObject();\n            echo(\"Testing synchronization of files and folders\");\n\n            String source = \"/\";\n            storeResources(cms, source);\n\n            // save what gets synchronized\n            CmsSynchronizeSettings syncSettings = OpenCms.getSystemInfo().getSynchronizeSettings();\n            syncSettings.setDestinationPathInRfs(getTestDataPath(\"\") + \"sync\" + File.separator);\n            syncSettings.setSourcePathInVfs(source);\n\n            echo(\"Synchronizing \"\n                + OpenCms.getSystemInfo().getSynchronizeSettings().getSourcePathInVfs()\n                + \" with \"\n                + OpenCms.getSystemInfo().getSynchronizeSettings().getDestinationPathInRfs());\n\n            // synchronize everything to the RFS\n            new CmsSynchronize(cms, new CmsShellReport());\n\n            // modify resources in the RFS\n            List tree = getSubtree(cms, source);\n            for (int i = 0, n = tree.size(); i < n; i++) {\n                CmsResource resource = (CmsResource)tree.get(i);\n\n                int type = resource.getTypeId();\n                if (((type == CmsResourceTypePlain.C_RESOURCE_TYPE_ID)) \n                || (type == CmsResourceTypeJsp.C_RESOURCE_TYPE_ID)\n                || (type == CmsResourceTypeXmlPage.C_RESOURCE_TYPE_ID)) {\n                    // modify date last modified on resource\n                    touchResourceInRfs(cms, resource, syncSettings);\n                }\n            }\n\n            // sleep 4 seconds to avoid issues with file system timing\n            Thread.sleep(4000);\n            \n            // synchronize everything back to the VFS\n            new CmsSynchronize(cms, new CmsShellReport());\n\n            // assert if the synchronization worked fine\n            for (int i = 0, n = tree.size(); i < n; i++) {\n                CmsResource vfsResource = (CmsResource)tree.get(i);\n                int type = vfsResource.getTypeId();\n                String vfsname = cms.getSitePath(vfsResource);\n                \n                System.out.println(\"( \" + i + \" / \" + (n-1) + \" ) Checking \" + vfsname);\n                if (((type == CmsResourceTypePlain.C_RESOURCE_TYPE_ID)) \n                || (type == CmsResourceTypeJsp.C_RESOURCE_TYPE_ID) \n                || (type == CmsResourceTypeXmlPage.C_RESOURCE_TYPE_ID)) {\n                    // assert the resource state\n                    assertState(cms, vfsname, I_CmsConstants.C_STATE_CHANGED);                    \n                    // assert the modification date\n                    File rfsResource = new File(getRfsPath(cms, vfsResource, syncSettings));\n                    assertDateLastModifiedAfter(cms, vfsname, rfsResource.lastModified());                    \n                } else {\n                    assertState(cms, vfsname, I_CmsConstants.C_STATE_UNCHANGED);\n                }\n            }\n\n        } finally {\n            \n            // remove the test data\n            echo(\"Purging directory \" + OpenCms.getSystemInfo().getSynchronizeSettings().getDestinationPathInRfs());\n            CmsFileUtil.purgeDirectory(new File(getTestDataPath(\"sync\")));\n        }\n\n    }","commit_id":"a2e5e8c5db0aaac83fd892fe3f8250b2d1da3e6b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@org.junit.Test\n    public void testSignatureConfirmation() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // This should work, as SignatureConfirmation is enabled\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignatureConfirmationPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as SignatureConfirmation is not enabled\n        portQName = new QName(NAMESPACE, \"DoubleItSignatureConfirmationPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not enabling SignatureConfirmation\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Check Signature confirmation\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not enabling SignatureConfirmation\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Check Signature confirmation\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7778,"modified_method":"@org.junit.Test\n    public void testSignatureConfirmation() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // This should work, as SignatureConfirmation is enabled\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignatureConfirmationPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as SignatureConfirmation is not enabled\n        portQName = new QName(NAMESPACE, \"DoubleItSignatureConfirmationPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not enabling SignatureConfirmation\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"Check Signature confirmation\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIncludeTimestamp() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItIncludeTimestampPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is not sending a Timestamp\n        portQName = new QName(NAMESPACE, \"DoubleItIncludeTimestampPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not sending a Timestamp\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Received Timestamp does not match the requirements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not sending a Timestamp\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Received Timestamp does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7779,"modified_method":"@org.junit.Test\n    public void testIncludeTimestamp() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItIncludeTimestampPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the client is not sending a Timestamp\n        portQName = new QName(NAMESPACE, \"DoubleItIncludeTimestampPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not sending a Timestamp\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"Received Timestamp does not match the requirements\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"Timestamp must be present\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7780,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testTimestampLast() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItTimestampLastPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is sending the timestamp first\n        portQName = new QName(NAMESPACE, \"DoubleItTimestampLastPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on sending the timestamp first\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Layout does not match the requirements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on sending the timestamp first\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Layout does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7781,"modified_method":"@org.junit.Test\n    public void testTimestampLast() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItTimestampLastPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        // TODO Timestamp First/Last validation not working - see WSS-444\n        if (!STAX_PORT.equals(test.getPort())) {\n            port.doubleIt(25);\n        }\n        \n        // This should fail, as the client is sending the timestamp first\n        portQName = new QName(NAMESPACE, \"DoubleItTimestampLastPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            // TODO Timestamp First/Last validation not working - see WSS-444\n            if (!STAX_PORT.equals(test.getPort())) {\n                port.doubleIt(25);\n                fail(\"Failure expected on sending the timestamp first\");\n            }\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"Layout does not match the requirements\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7782,"modified_method":"public BindingPropertiesTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testStrict() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItStrictPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n\n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is sending the timestamp last\n        portQName = new QName(NAMESPACE, \"DoubleItStrictPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on sending the timestamp last\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Layout does not match the requirements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on sending the timestamp last\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Layout does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7783,"modified_method":"@org.junit.Test\n    public void testStrict() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItStrictPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n\n        // TODO Strict validation not working - see WSS-444\n        if (!STAX_PORT.equals(test.getPort())) {\n            port.doubleIt(25);\n        }\n        \n        // This should fail, as the client is sending the timestamp last\n        portQName = new QName(NAMESPACE, \"DoubleItStrictPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            // TODO Strict validation not working - see WSS-444\n            if (!STAX_PORT.equals(test.getPort())) {\n                port.doubleIt(25);\n                fail(\"Failure expected on sending the timestamp last\");\n            }\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"Layout does not match the requirements\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSignBeforeEncrypting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignBeforeEncryptingPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is not following the correct steps for this property\n        portQName = new QName(NAMESPACE, \"DoubleItSignBeforeEncryptingPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not signing before encrypting\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Not signed before encrypted\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not signing before encrypting\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Not signed before encrypted\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7784,"modified_method":"@org.junit.Test\n    public void testSignBeforeEncrypting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignBeforeEncryptingPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the client is not following the correct steps for this property\n        portQName = new QName(NAMESPACE, \"DoubleItSignBeforeEncryptingPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not signing before encrypting\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"Not signed before encrypted\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"SignBeforeEncrypting\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testOnlySignEntireHeadersAndBody() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // This should work, as OnlySignEntireHeadersAndBody is not specified\n        QName portQName = new QName(NAMESPACE, \"DoubleItNotOnlySignPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as OnlySignEntireHeadersAndBody is specified\n        portQName = new QName(NAMESPACE, \"DoubleItOnlySignPort\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on OnlySignEntireHeadersAndBody property\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"OnlySignEntireHeadersAndBody does not match the requirements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on OnlySignEntireHeadersAndBody property\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"OnlySignEntireHeadersAndBody does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7785,"modified_method":"@org.junit.Test\n    public void testOnlySignEntireHeadersAndBody() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // This should work, as OnlySignEntireHeadersAndBody is not specified\n        QName portQName = new QName(NAMESPACE, \"DoubleItNotOnlySignPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as OnlySignEntireHeadersAndBody is specified\n        portQName = new QName(NAMESPACE, \"DoubleItOnlySignPort\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on OnlySignEntireHeadersAndBody property\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"OnlySignEntireHeadersAndBody\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testEncryptBeforeSigning() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptBeforeSigningPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is not following the correct steps for this property\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptBeforeSigningPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not encrypting before signing\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Not encrypted before signed\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not encrypting before signing\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Not encrypted before signed\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7786,"modified_method":"@org.junit.Test\n    public void testEncryptBeforeSigning() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptBeforeSigningPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the client is not following the correct steps for this property\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptBeforeSigningPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not encrypting before signing\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"Not encrypted before signed\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"EncryptBeforeSigning\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testTimestampFirst() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItTimestampFirstPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // TODO It's not sending the Timestamp \"first\" correctly - DOM\n        // port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is sending the timestamp last\n        portQName = new QName(NAMESPACE, \"DoubleItTimestampFirstPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        /*\n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on on sending the timestamp last\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"Layout does not match the requirements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        */\n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on on sending the timestamp last\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Layout does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7787,"modified_method":"@org.junit.Test\n    public void testTimestampFirst() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItTimestampFirstPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        // TODO It's not sending the Timestamp \"first\" correctly - DOM\n        // TODO Timestamp First/Last validation not working - see WSS-444\n        if (test.isStreaming() && !STAX_PORT.equals(test.getPort())) {\n            port.doubleIt(25);\n        }\n        \n        // This should fail, as the client is sending the timestamp last\n        portQName = new QName(NAMESPACE, \"DoubleItTimestampFirstPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            // TODO DOM not working as above\n            // TODO Timestamp First/Last validation not working - see WSS-444\n            if (test.isStreaming() && !STAX_PORT.equals(test.getPort())) {\n                port.doubleIt(25);\n                fail(\"Failure expected on on sending the timestamp last\");\n            }\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Layout does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testEncryptSignature() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptSignaturePort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client is not encrypting the signature is specified\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptSignaturePort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not encrypting the signature property\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"The signature is not protected\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not encrypting the signature property\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"The signature is not protected\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7788,"modified_method":"@org.junit.Test\n    public void testEncryptSignature() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptSignaturePort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the client is not encrypting the signature is specified\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptSignaturePort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not encrypting the signature property\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"The signature is not protected\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"Signature must be encrypted\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    @org.junit.Ignore\n    public void testTokenProtection() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItTokenProtectionPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        port.doubleIt(25);\n        \n        // This should fail, as the property is not enabled\n        portQName = new QName(NAMESPACE, \"DoubleItTokenProtectionPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not protecting the token\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Layout does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n            System.out.println(\"EX: \" + ex.getMessage());\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7789,"modified_method":"@org.junit.Test\n    public void testTokenProtection() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = BindingPropertiesTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = BindingPropertiesTest.class.getResource(\"DoubleItBindings.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItTokenProtectionPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        // TODO DOM server not working\n        if (!PORT.equals(test.getPort())) {\n            port.doubleIt(25);\n        }\n        \n        // This should fail, as the property is not enabled\n        portQName = new QName(NAMESPACE, \"DoubleItTokenProtectionPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            // TODO DOM server not working\n            if (!PORT.equals(test.getPort())) {\n                port.doubleIt(25);\n                fail(\"Failure expected on not protecting the token\");\n            }\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"Layout does not match the requirements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testAESGCM192() throws Exception {\n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n        \n        //\n        // This test fails with the IBM JDK 7\n        // IBM JDK 7 appears to require a GCMParameter class to be used, which\n        // only exists in JDK 7. The Sun JDK appears to be more lenient and \n        // allows us to use the existing IVParameterSpec class.\n        //\n        if (\"IBM Corporation\".equals(System.getProperty(\"java.vendor\"))\n            && System.getProperty(\"java.version\") != null\n            &&  System.getProperty(\"java.version\").startsWith(\"1.7\")) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = GCMTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        URL wsdl = GCMTest.class.getResource(\"DoubleItGCM.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItGCM192Port\");\n        DoubleItPortType gcmPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(gcmPort, PORT);\n        \n        // DOM\n        gcmPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(gcmPort);\n        gcmPort.doubleIt(25);\n        \n        ((java.io.Closeable)gcmPort).close();\n        bus.shutdown(true);\n    }","id":7790,"modified_method":"@org.junit.Test\n    public void testAESGCM192() throws Exception {\n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n        \n        //\n        // This test fails with the IBM JDK 7\n        // IBM JDK 7 appears to require a GCMParameter class to be used, which\n        // only exists in JDK 7. The Sun JDK appears to be more lenient and \n        // allows us to use the existing IVParameterSpec class.\n        //\n        if (\"IBM Corporation\".equals(System.getProperty(\"java.vendor\"))\n            && System.getProperty(\"java.version\") != null\n            &&  System.getProperty(\"java.version\").startsWith(\"1.7\")) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = GCMTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        URL wsdl = GCMTest.class.getResource(\"DoubleItGCM.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItGCM192Port\");\n        DoubleItPortType gcmPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(gcmPort, test.getPort());\n        \n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(gcmPort);\n        }\n\n        gcmPort.doubleIt(25);\n        \n        ((java.io.Closeable)gcmPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testAESGCM128() throws Exception {\n        //\n        // This test fails with the IBM JDK 7\n        // IBM JDK 7 appears to require a GCMParameter class to be used, which\n        // only exists in JDK 7. The Sun JDK appears to be more lenient and \n        // allows us to use the existing IVParameterSpec class.\n        //\n        if (\"IBM Corporation\".equals(System.getProperty(\"java.vendor\"))\n            && System.getProperty(\"java.version\") != null\n            &&  System.getProperty(\"java.version\").startsWith(\"1.7\")) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = GCMTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        URL wsdl = GCMTest.class.getResource(\"DoubleItGCM.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItGCM128Port\");\n        DoubleItPortType gcmPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(gcmPort, PORT);\n        \n        // DOM\n        gcmPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(gcmPort);\n        gcmPort.doubleIt(25);\n        \n        ((java.io.Closeable)gcmPort).close();\n        bus.shutdown(true);\n    }","id":7791,"modified_method":"@org.junit.Test\n    public void testAESGCM128() throws Exception {\n        //\n        // This test fails with the IBM JDK 7\n        // IBM JDK 7 appears to require a GCMParameter class to be used, which\n        // only exists in JDK 7. The Sun JDK appears to be more lenient and \n        // allows us to use the existing IVParameterSpec class.\n        //\n        if (\"IBM Corporation\".equals(System.getProperty(\"java.vendor\"))\n            && System.getProperty(\"java.version\") != null\n            &&  System.getProperty(\"java.version\").startsWith(\"1.7\")) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = GCMTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        URL wsdl = GCMTest.class.getResource(\"DoubleItGCM.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItGCM128Port\");\n        DoubleItPortType gcmPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(gcmPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(gcmPort);\n        }\n        \n        gcmPort.doubleIt(25);\n        \n        ((java.io.Closeable)gcmPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testAESGCM256() throws Exception {\n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n        \n        //\n        // This test fails with the IBM JDK 7\n        // IBM JDK 7 appears to require a GCMParameter class to be used, which\n        // only exists in JDK 7. The Sun JDK appears to be more lenient and \n        // allows us to use the existing IVParameterSpec class.\n        //\n        if (\"IBM Corporation\".equals(System.getProperty(\"java.vendor\"))\n            && System.getProperty(\"java.version\") != null\n            &&  System.getProperty(\"java.version\").startsWith(\"1.7\")) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = GCMTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        URL wsdl = GCMTest.class.getResource(\"DoubleItGCM.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItGCM256Port\");\n        DoubleItPortType gcmPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(gcmPort, PORT);\n        \n        // DOM\n        gcmPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(gcmPort);\n        gcmPort.doubleIt(25);\n        \n        ((java.io.Closeable)gcmPort).close();\n        bus.shutdown(true);\n    }","id":7792,"modified_method":"@org.junit.Test\n    public void testAESGCM256() throws Exception {\n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n        \n        //\n        // This test fails with the IBM JDK 7\n        // IBM JDK 7 appears to require a GCMParameter class to be used, which\n        // only exists in JDK 7. The Sun JDK appears to be more lenient and \n        // allows us to use the existing IVParameterSpec class.\n        //\n        if (\"IBM Corporation\".equals(System.getProperty(\"java.vendor\"))\n            && System.getProperty(\"java.version\") != null\n            &&  System.getProperty(\"java.version\").startsWith(\"1.7\")) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = GCMTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        URL wsdl = GCMTest.class.getResource(\"DoubleItGCM.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItGCM256Port\");\n        DoubleItPortType gcmPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(gcmPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(gcmPort);\n        }\n        \n        gcmPort.doubleIt(25);\n        \n        ((java.io.Closeable)gcmPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n                \"Server failed to launch\",\n                // run the server in the same process\n                // set this to false to fork\n                launchServer(Server.class, true)\n        );\n    }","id":7793,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n                \"Server failed to launch\",\n                // run the server in the same process\n                // set this to false to fork\n                launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7794,"modified_method":"public HttpsTokenTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7795,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testBasicAuth() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = HttpsTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = HttpsTokenTest.class.getResource(\"DoubleItHttps.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItBasicAuthPort\");\n        DoubleItPortType port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);  \n        \n        // This should fail, as the client does not send a UsernamePassword\n        portQName = new QName(NAMESPACE, \"DoubleItBasicAuthPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        try {\n            // DOM\n            port.doubleIt(25);\n            fail(\"Failure expected on not sending a UsernamePassword\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"HttpsToken\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        try {\n            // Streaming\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not sending a UsernamePassword\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n    }","id":7796,"modified_method":"@org.junit.Test\n    public void testBasicAuth() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = HttpsTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = HttpsTokenTest.class.getResource(\"DoubleItHttps.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItBasicAuthPort\");\n        DoubleItPortType port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the client does not send a UsernamePassword\n        portQName = new QName(NAMESPACE, \"DoubleItBasicAuthPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not sending a UsernamePassword\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming() && !STAX_PORT.equals(test.getPort())) {\n                String error = \"HttpsToken\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testRequireClientCert() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = HttpsTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = HttpsTokenTest.class.getResource(\"DoubleItHttps.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItRequireClientCertPort\");\n        DoubleItPortType port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the client does not use a client cert\n        portQName = new QName(NAMESPACE, \"DoubleItRequireClientCertPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        try {\n            // DOM\n            port.doubleIt(25);\n            fail(\"Failure expected on not using a client cert\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"HttpsToken\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        try {\n            // Streaming\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on not using a client cert\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7797,"modified_method":"@org.junit.Test\n    public void testRequireClientCert() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = HttpsTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = HttpsTokenTest.class.getResource(\"DoubleItHttps.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItRequireClientCertPort\");\n        DoubleItPortType port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the client does not use a client cert\n        portQName = new QName(NAMESPACE, \"DoubleItRequireClientCertPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on not using a client cert\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming() && !STAX_PORT.equals(test.getPort())) {\n                String error = \"HttpsToken\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverSymmetricSignedEndorsingEncrypted() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricSignedEndorsingEncryptedPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // TODO Streaming\n        // SecurityTestUtil.enableStreaming(kerberosPort);\n        // kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7798,"modified_method":"@org.junit.Test\n    public void testKerberosOverSymmetricSignedEndorsingEncrypted() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricSignedEndorsingEncryptedPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n\n        // TODO Streaming\n        if (!test.isStreaming()) {\n            kerberosPort.doubleIt(25);\n        }\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7799,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverAsymmetricSignedEndorsing() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricSignedEndorsingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT);\n        \n        int result = kerberosPort.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7800,"modified_method":"@org.junit.Test\n    public void testKerberosOverAsymmetricSignedEndorsing() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricSignedEndorsingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        // TODO Streaming support\n        if (!test.isStreaming()) {\n            int result = kerberosPort.doubleIt(25);\n            assertTrue(result == 50);\n        }\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverAsymmetricSignedEncrypted() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricSignedEncryptedPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7801,"modified_method":"@org.junit.Test\n    public void testKerberosOverAsymmetricSignedEncrypted() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricSignedEncryptedPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverAsymmetricEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricEndorsingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, PORT);\n        int result = kerberosPort.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7802,"modified_method":"@org.junit.Test\n    public void testKerberosOverAsymmetricEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricEndorsingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        // TODO Streaming support\n        if (!test.isStreaming()) {\n            int result = kerberosPort.doubleIt(25);\n            assertTrue(result == 50);\n        }\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverTransportEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosTransportEndorsingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, PORT2);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7803,"modified_method":"@org.junit.Test\n    public void testKerberosOverTransportEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosTransportEndorsingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(kerberosPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverSymmetricEndorsingEncrypted() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricEndorsingEncryptedPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // TODO Streaming\n        // SecurityTestUtil.enableStreaming(kerberosPort);\n        // kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7804,"modified_method":"@org.junit.Test\n    public void testKerberosOverSymmetricEndorsingEncrypted() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricEndorsingEncryptedPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        // TODO Streaming\n        if (!test.isStreaming()) {\n            kerberosPort.doubleIt(25);\n        }\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverSymmetricDerivedProtection() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricDerivedProtectionPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // TODO Streaming\n        // SecurityTestUtil.enableStreaming(kerberosPort);\n        // kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7805,"modified_method":"@org.junit.Test\n    public void testKerberosOverSymmetricDerivedProtection() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricDerivedProtectionPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n\n        // TODO Streaming support\n        if (!test.isStreaming()) {\n            kerberosPort.doubleIt(25);\n        }\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7806,"modified_method":"public KerberosTokenTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosSupporting() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSupportingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7807,"modified_method":"@org.junit.Test\n    public void testKerberosSupporting() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSupportingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverAsymmetric() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7808,"modified_method":"@org.junit.Test\n    public void testKerberosOverAsymmetric() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosAsymmetricPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverSymmetricProtection() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricProtectionPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7809,"modified_method":"@org.junit.Test\n    public void testKerberosOverSymmetricProtection() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricProtectionPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverSymmetricSupporting() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricSupportingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7810,"modified_method":"@org.junit.Test\n    public void testKerberosOverSymmetricSupporting() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricSupportingPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverSymmetric() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, PORT);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7811,"modified_method":"@org.junit.Test\n    public void testKerberosOverSymmetric() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosSymmetricPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n\n        updateAddressPort(kerberosPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testKerberosOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosTransportPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        \n        updateAddressPort(kerberosPort, PORT2);\n        \n        // DOM\n        kerberosPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(kerberosPort);\n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","id":7812,"modified_method":"@org.junit.Test\n    public void testKerberosOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = KerberosTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = KerberosTokenTest.class.getResource(\"DoubleItKerberos.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItKerberosTransportPort\");\n        DoubleItPortType kerberosPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(kerberosPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(kerberosPort);\n        }\n        \n        kerberosPort.doubleIt(25);\n        \n        ((java.io.Closeable)kerberosPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testEncryptedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptedElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the header must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"EncryptedElements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"EncryptedElements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7813,"modified_method":"@org.junit.Test\n    public void testEncryptedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptedElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the header must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"EncryptedElements\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"To must be encrypted\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7814,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSignedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignedElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the To header must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"SignedElements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"SignedElements\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7815,"modified_method":"@org.junit.Test\n    public void testSignedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignedElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the To header must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"SignedElements\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"To must be signed\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testContentEncryptedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItContentEncryptedElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // This should fail, as the service requires that the header must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItContentEncryptedElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"EncryptedElements\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7816,"modified_method":"@org.junit.Test\n    public void testContentEncryptedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItContentEncryptedElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        // TODO Investigate...\n        if (!test.isStreaming() && !STAX_PORT.equals(test.getPort())) {\n            port.doubleIt(25);\n        }\n        \n        // This should fail, as the service requires that the header must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItContentEncryptedElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"EncryptedElements\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"To must be encrypted\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSignedParts() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignedPartsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the Body must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedPartsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"SignedParts\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"SignedParts\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // This should fail, as the service requires that the To header must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedPartsPort3\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"SignedParts\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"SignedParts\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7817,"modified_method":"@org.junit.Test\n    public void testSignedParts() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignedPartsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the Body must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedPartsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"SignedParts\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"Body must be signed\"));\n            }\n        }\n        \n        // This should fail, as the service requires that the To header must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedPartsPort3\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"SignedParts\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"To must be signed\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testEncryptedAttachments() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptedAttachmentsPort\");\n        DoubleItSwaPortType port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        DoubleIt3 doubleIt = new DoubleIt3();\n        doubleIt.setNumberToDouble(25);\n        port.doubleIt3(doubleIt, \"12345\".getBytes());\n        \n        // Streaming\n        enableStreaming(port);\n        doubleIt = new DoubleIt3();\n        doubleIt.setNumberToDouble(25);\n        port.doubleIt3(doubleIt, \"12345\".getBytes());\n        \n        // This should fail, as the service requires that the Attachments must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedAttachmentsPort2\");\n        port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            doubleIt = new DoubleIt3();\n            doubleIt.setNumberToDouble(25);\n            port.doubleIt3(doubleIt, \"12345\".getBytes());\n            fail(\"Failure expected on an attachment which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"EncryptedParts\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            enableStreaming(port);\n            doubleIt = new DoubleIt3();\n            doubleIt.setNumberToDouble(25);\n            port.doubleIt3(doubleIt, \"12345\".getBytes());\n            fail(\"Failure expected on an attachment which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"SignedParts\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7818,"modified_method":"@org.junit.Test\n    public void testEncryptedAttachments() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptedAttachmentsPort\");\n        DoubleItSwaPortType port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            enableStreaming(port);\n        }\n        \n        DoubleIt3 doubleIt = new DoubleIt3();\n        doubleIt.setNumberToDouble(25);\n        port.doubleIt3(doubleIt, \"12345\".getBytes());\n        \n        // This should fail, as the service requires that the Attachments must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedAttachmentsPort2\");\n        port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            enableStreaming(port);\n        }\n        \n        try {\n            doubleIt = new DoubleIt3();\n            doubleIt.setNumberToDouble(25);\n            port.doubleIt3(doubleIt, \"12345\".getBytes());\n            fail(\"Failure expected on an attachment which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"EncryptedParts\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7819,"modified_method":"public PartsTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testRequiredParts() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItRequiredPartsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the service requires a (bad) header\n        portQName = new QName(NAMESPACE, \"DoubleItRequiredPartsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a required header which isn't present\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"RequiredParts: No header element\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n\n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a required header which isn't present\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"RequiredParts: No header element\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7820,"modified_method":"@org.junit.Test\n    public void testRequiredParts() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItRequiredPartsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the service requires a (bad) header\n        portQName = new QName(NAMESPACE, \"DoubleItRequiredPartsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a required header which isn't present\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"RequiredParts: No header element\";\n                assertTrue(ex.getMessage().contains(error) || ex.getMessage().contains(\"ToTo\"));\n            }\n        }\n\n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testRequiredElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItRequiredElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the service requires a (bad) header\n        portQName = new QName(NAMESPACE, \"DoubleItRequiredElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a required header which isn't present\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"RequiredElements: No header element\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a required header which isn't present\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"RequiredElements: No header element\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7821,"modified_method":"@org.junit.Test\n    public void testRequiredElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItRequiredElementsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the service requires a (bad) header\n        portQName = new QName(NAMESPACE, \"DoubleItRequiredElementsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a required header which isn't present\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"RequiredElements: No header element\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"ToTo must be present\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testEncryptedParts() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptedPartsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(port);\n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the Body must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedPartsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"EncryptedParts\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"EncryptedParts\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // This should fail, as the service requires that the To header must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedPartsPort3\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"EncryptedParts\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(port);\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"EncryptedParts\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7822,"modified_method":"@org.junit.Test\n    public void testEncryptedParts() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItEncryptedPartsPort\");\n        DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        port.doubleIt(25);\n        \n        // This should fail, as the service requires that the Body must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedPartsPort2\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a body which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"EncryptedParts\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"Body must be encrypted\"));\n            }\n        }\n        \n        // This should fail, as the service requires that the To header must be encrypted\n        portQName = new QName(NAMESPACE, \"DoubleItEncryptedPartsPort3\");\n        port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(port);\n        }\n        \n        try {\n            port.doubleIt(25);\n            fail(\"Failure expected on a header which isn't encrypted\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"EncryptedParts\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"To must be encrypted\"));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSignedAttachments() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignedAttachmentsPort\");\n        DoubleItSwaPortType port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        DoubleIt3 doubleIt = new DoubleIt3();\n        doubleIt.setNumberToDouble(25);\n        port.doubleIt3(doubleIt, \"12345\".getBytes());\n        \n        // Streaming\n        enableStreaming(port);\n        doubleIt = new DoubleIt3();\n        doubleIt.setNumberToDouble(25);\n        port.doubleIt3(doubleIt, \"12345\".getBytes());\n        \n        // This should fail, as the service requires that the Attachments must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedAttachmentsPort2\");\n        port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, PORT);\n        \n        // DOM\n        try {\n            doubleIt = new DoubleIt3();\n            doubleIt.setNumberToDouble(25);\n            port.doubleIt3(doubleIt, \"12345\".getBytes());\n            fail(\"Failure expected on an attachment which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"SignedParts\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        // Streaming\n        try {\n            enableStreaming(port);\n            doubleIt = new DoubleIt3();\n            doubleIt.setNumberToDouble(25);\n            port.doubleIt3(doubleIt, \"12345\".getBytes());\n            fail(\"Failure expected on an attachment which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // String error = \"SignedParts\";\n            // assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","id":7823,"modified_method":"@org.junit.Test\n    public void testSignedAttachments() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PartsTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PartsTest.class.getResource(\"DoubleItParts.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n       \n        // Successful invocation\n        QName portQName = new QName(NAMESPACE, \"DoubleItSignedAttachmentsPort\");\n        DoubleItSwaPortType port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            enableStreaming(port);\n        }\n        \n        DoubleIt3 doubleIt = new DoubleIt3();\n        doubleIt.setNumberToDouble(25);\n        port.doubleIt3(doubleIt, \"12345\".getBytes());\n        \n        // This should fail, as the service requires that the Attachments must be signed\n        portQName = new QName(NAMESPACE, \"DoubleItSignedAttachmentsPort2\");\n        port = service.getPort(portQName, DoubleItSwaPortType.class);\n        updateAddressPort(port, test.getPort());\n        \n        if (test.isStreaming()) {\n            enableStreaming(port);\n        }\n        \n        try {\n            doubleIt = new DoubleIt3();\n            doubleIt.setNumberToDouble(25);\n            port.doubleIt3(doubleIt, \"12345\".getBytes());\n            fail(\"Failure expected on an attachment which isn't signed\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"SignedParts\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * The client uses no security - this should fail.\n     */\n    @org.junit.Test\n    public void testNoSecurity() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItNoSecurityPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        try {\n            utPort.doubleIt(25);\n            fail(\"Failure expected on no Security\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(utPort);\n            utPort.doubleIt(25);\n            fail(\"Failure expected on no Security\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7824,"modified_method":"/**\n     * The client uses no security - this should fail.\n     */\n    @org.junit.Test\n    public void testNoSecurity() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItNoSecurityPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        try {\n            utPort.doubleIt(25);\n            fail(\"Failure expected on no Security\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7825,"modified_method":"public PolicyAlternativeTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * The client uses a Transport binding policy with a Endorsing Supporting X509 Token. The client does\n     * not sign part of the WSA header though and so the invocation should fail.\n     */\n    @org.junit.Test\n    public void testTransportSupportingSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTransportSupportingSignedPort\");\n        DoubleItPortType transportPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(transportPort, PORT2);\n\n        // DOM\n        try {\n            transportPort.doubleIt(25);\n            fail(\"Failure expected on not signing a wsa header\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(transportPort);\n            transportPort.doubleIt(25);\n            fail(\"Failure expected because no client certificate\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // assertTrue(ex.getMessage().contains(\"HttpsToken\"));\n        }\n        \n        ((java.io.Closeable)transportPort).close();\n        bus.shutdown(true);\n    }","id":7826,"modified_method":"/**\n     * The client uses a Transport binding policy with a Endorsing Supporting X509 Token. The client does\n     * not sign part of the WSA header though and so the invocation should fail.\n     */\n    @org.junit.Test\n    public void testTransportSupportingSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTransportSupportingSignedPort\");\n        DoubleItPortType transportPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(transportPort, PORT2);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(transportPort);\n        }\n\n        try {\n            transportPort.doubleIt(25);\n            fail(\"Failure expected on not signing a wsa header\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)transportPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * The client does not require a client cert so invocation should fail\n     * \n     * @throws Exception\n     */\n    @org.junit.Test\n    public void testRequireClientCertToken() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItClientCertPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT2);\n        \n        // DOM\n        try {\n            utPort.doubleIt(25);\n            fail(\"Failure expected because no client certificate\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"HttpsToken\"));\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(utPort);\n            utPort.doubleIt(25);\n            fail(\"Failure expected because no client certificate\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // assertTrue(ex.getMessage().contains(\"HttpsToken\"));\n        }\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7827,"modified_method":"/**\n     * The client does not require a client cert so invocation should fail\n     * \n     * @throws Exception\n     */\n    @org.junit.Test\n    public void testRequireClientCertToken() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItClientCertPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT2);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        try {\n            utPort.doubleIt(25);\n            fail(\"Failure expected because no client certificate\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"HttpsToken\"));\n            }\n        }\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * The client uses the Asymmetric policy - this should succeed.\n     */\n    @org.junit.Test\n    public void testAsymmetric() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7828,"modified_method":"/**\n     * The client uses the Asymmetric policy - this should succeed.\n     */\n    @org.junit.Test\n    public void testAsymmetric() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * The client uses the UsernameToken policy - this should succeed.\n     */\n    @org.junit.Test\n    public void testUsernameToken() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItUsernameTokenPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7829,"modified_method":"/**\n     * The client uses the UsernameToken policy - this should succeed.\n     */\n    @org.junit.Test\n    public void testUsernameToken() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItUsernameTokenPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * The client uses a Transport binding policy with a Endorsing Supporting X509 Token as well as a \n     * Signed Endorsing UsernameToken. Here the client is trying to trick the Service Provider as \n     * the UsernameToken signs the wsa:To Header, not the X.509 Token.\n     */\n    @org.junit.Test\n    public void testTransportUTSupportingSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTransportUTSupportingSignedPort\");\n        DoubleItPortType transportPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(transportPort, PORT2);\n\n        // DOM\n        try {\n            transportPort.doubleIt(25);\n            fail(\"Failure expected on not signing a wsa header\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        // Streaming\n        try {\n            SecurityTestUtil.enableStreaming(transportPort);\n            transportPort.doubleIt(25);\n            fail(\"Failure expected on not signing a wsa header\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)transportPort).close();\n        bus.shutdown(true);\n    }","id":7830,"modified_method":"/**\n     * The client uses a Transport binding policy with a Endorsing Supporting X509 Token as well as a \n     * Signed Endorsing UsernameToken. Here the client is trying to trick the Service Provider as \n     * the UsernameToken signs the wsa:To Header, not the X.509 Token.\n     */\n    @org.junit.Test\n    public void testTransportUTSupportingSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = PolicyAlternativeTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = PolicyAlternativeTest.class.getResource(\"DoubleItPolicy.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTransportUTSupportingSignedPort\");\n        DoubleItPortType transportPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(transportPort, PORT2);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(transportPort);\n        }\n\n        try {\n            transportPort.doubleIt(25);\n            fail(\"Failure expected on not signing a wsa header\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)transportPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2OverSymmetricSupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2SymmetricSupportingPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with an unsigned SAML SV Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"An error was discovered processing\"));\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7831,"modified_method":"@org.junit.Test\n    public void testSaml2OverSymmetricSupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2SymmetricSupportingPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with an unsigned SAML SV Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"An error was discovered processing\")\n                           || ex.getMessage().contains(\"SamlToken not satisfied\"));\n            }\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml1Supporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SupportingPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        \n        // DOM\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(saml1Port);\n        saml1Port.doubleIt(25);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","id":7832,"modified_method":"@org.junit.Test\n    public void testSaml1Supporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SupportingPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml1Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml1Port);\n        }\n        \n        SamlCallbackHandler samlCallbackHandler = new SamlCallbackHandler(false);\n        samlCallbackHandler.setConfirmationMethod(SAML1Constants.CONF_BEARER);\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", samlCallbackHandler\n        );\n        \n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml1SupportingSelfSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SupportingPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false, true)\n        );\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            SecurityConstants.SIGNATURE_USERNAME, \"alice\"\n        );\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            SecurityConstants.SIGNATURE_PROPERTIES, \"alice.properties\"\n        );\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            SecurityConstants.CALLBACK_HANDLER, \n            \"org.apache.cxf.systest.ws.common.KeystorePasswordCallback\"\n        );\n        \n        // DOM\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(saml1Port);\n        saml1Port.doubleIt(25);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","id":7833,"modified_method":"@org.junit.Test\n    public void testSaml1SupportingSelfSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SupportingPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml1Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml1Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(false, true);\n        callbackHandler.setConfirmationMethod(SAML1Constants.CONF_BEARER);\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            SecurityConstants.SIGNATURE_USERNAME, \"alice\"\n        );\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            SecurityConstants.SIGNATURE_PROPERTIES, \"alice.properties\"\n        );\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            SecurityConstants.CALLBACK_HANDLER, \n            \"org.apache.cxf.systest.ws.common.KeystorePasswordCallback\"\n        );\n        \n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2EndorsingPKOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingTransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT2);\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        callbackHandler.setKeyInfoIdentifier(CERT_IDENTIFIER.KEY_VALUE);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7834,"modified_method":"@org.junit.Test\n    public void testSaml2EndorsingPKOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingTransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml2Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        callbackHandler.setKeyInfoIdentifier(CERT_IDENTIFIER.KEY_VALUE);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2EndorsingOverTransportSP11() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingTransportSP11Port\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT2);\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7835,"modified_method":"@org.junit.Test\n    public void testSaml2EndorsingOverTransportSP11() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingTransportSP11Port\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml2Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml1SelfSignedOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SelfSignedTransportPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false, true)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","id":7836,"modified_method":"@org.junit.Test\n    public void testSaml1SelfSignedOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SelfSignedTransportPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml1Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml1Port);\n        }\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false, true)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2Replay() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2TransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT2);\n\n        // Create a SAML Token with no \"OneTimeUse\" Condition\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        \n        Client cxfClient = ClientProxy.getClient(saml2Port);\n        SecurityHeaderCacheInterceptor cacheInterceptor =\n            new SecurityHeaderCacheInterceptor();\n        cxfClient.getOutInterceptors().add(cacheInterceptor);\n        \n        // Make two invocations...should succeed\n        saml2Port.doubleIt(25);\n        saml2Port.doubleIt(25);\n        \n        // Now create a SAML Token with a \"OneTimeUse\" Condition\n        ConditionsBean conditions = new ConditionsBean();\n        conditions.setTokenPeriodMinutes(5);\n        conditions.setOneTimeUse(true);\n            \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler();\n        callbackHandler.setConditions(conditions);\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        \n        cxfClient.getOutInterceptors().remove(cacheInterceptor);\n        cacheInterceptor = new SecurityHeaderCacheInterceptor();\n        cxfClient.getOutInterceptors().add(cacheInterceptor);\n        \n        // Make two invocations...should fail on the second one\n        saml2Port.doubleIt(25);\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected on a replayed SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"A replay attack has been detected\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7837,"modified_method":"@org.junit.Test\n    public void testSaml2Replay() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2TransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml2Port, portNumber);\n\n        // Create a SAML Token with no \"OneTimeUse\" Condition\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        \n        Client cxfClient = ClientProxy.getClient(saml2Port);\n        SecurityHeaderCacheInterceptor cacheInterceptor =\n            new SecurityHeaderCacheInterceptor();\n        cxfClient.getOutInterceptors().add(cacheInterceptor);\n        \n        // Make two invocations...should succeed\n        saml2Port.doubleIt(25);\n        saml2Port.doubleIt(25);\n        \n        // Now create a SAML Token with a \"OneTimeUse\" Condition\n        ConditionsBean conditions = new ConditionsBean();\n        conditions.setTokenPeriodMinutes(5);\n        conditions.setOneTimeUse(true);\n            \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler();\n        callbackHandler.setConditions(conditions);\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        \n        cxfClient.getOutInterceptors().remove(cacheInterceptor);\n        cacheInterceptor = new SecurityHeaderCacheInterceptor();\n        cxfClient.getOutInterceptors().add(cacheInterceptor);\n        \n        // Make two invocations...should fail on the second one\n        saml2Port.doubleIt(25);\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected on a replayed SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"A replay attack has been detected\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml1ElementOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1TransportPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n        }\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlElementCallbackHandler(false)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","id":7838,"modified_method":"@org.junit.Test\n    public void testSaml1ElementOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1TransportPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml1Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml1Port);\n        }\n        \n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n            }\n        }\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlElementCallbackHandler(false)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testNoSamlToken() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItInlinePolicyPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT2);\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected on no SamlToken\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"The received token does not match the token inclusion requirement\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7839,"modified_method":"@org.junit.Test\n    public void testNoSamlToken() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItInlinePolicyPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml2Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected on no SamlToken\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"The received token does not match the token inclusion requirement\";\n                assertTrue(ex.getMessage().contains(error)\n                           || ex.getMessage().contains(\"SamlToken not satisfied\"));\n            }\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2EndorsingEncryptedOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingEncryptedTransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT2);\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7840,"modified_method":"@org.junit.Test\n    public void testSaml2EndorsingEncryptedOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingEncryptedTransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml2Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2OverSymmetricSignedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2SymmetricSignedElementsPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7841,"modified_method":"@org.junit.Test\n    public void testSaml2OverSymmetricSignedElements() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2SymmetricSignedElementsPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        // This test only works for DOM\n        if (!test.isStreaming() && PORT.equals(test.getPort())) {\n            ((BindingProvider)saml2Port).getRequestContext().put(\n                \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n            );\n            int result = saml2Port.doubleIt(25);\n            assertTrue(result == 50);\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2OverAsymmetricSignedEncrypted() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricSignedEncryptedPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7842,"modified_method":"@org.junit.Test\n    public void testSaml2OverAsymmetricSignedEncrypted() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricSignedEncryptedPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml1SelfSignedOverTransportSP11() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SelfSignedTransportSP11Port\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false, true)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","id":7843,"modified_method":"@org.junit.Test\n    public void testSaml1SelfSignedOverTransportSP11() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1SelfSignedTransportSP11Port\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml1Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml1Port);\n        }\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false, true)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7844,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2PEP() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2PEPPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n       \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected as Assertion doesn't contain Role information\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        SamlRoleCallbackHandler roleCallbackHandler = \n            new SamlRoleCallbackHandler();\n        roleCallbackHandler.setRoleName(\"manager\");\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", roleCallbackHandler\n        );\n        \n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Expected failure on incorrect role\n        roleCallbackHandler.setRoleName(\"boss\");\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected as Assertion doesn't contain correct role\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7845,"modified_method":"@org.junit.Test\n    public void testSaml2PEP() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2PEPPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n       \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected as Assertion doesn't contain Role information\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        SamlRoleCallbackHandler roleCallbackHandler = \n            new SamlRoleCallbackHandler();\n        roleCallbackHandler.setRoleName(\"manager\");\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", roleCallbackHandler\n        );\n        \n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Expected failure on incorrect role\n        roleCallbackHandler.setRoleName(\"boss\");\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected as Assertion doesn't contain correct role\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2OverSymmetric() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2SymmetricPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n       \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a SAML1 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Wrong SAML Version\"));\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        try {\n            SamlCallbackHandler callbackHandler = \n                new SamlCallbackHandler();\n            callbackHandler.setConfirmationMethod(SAML2Constants.CONF_BEARER);\n            ((BindingProvider)saml2Port).getRequestContext().put(\n                \"ws-security.saml-callback-handler\", callbackHandler\n            );\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a invalid SAML2 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            // expected\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7846,"modified_method":"@org.junit.Test\n    public void testSaml2OverSymmetric() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2SymmetricPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n       \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n            }\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a SAML1 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"Wrong SAML Version\")\n                           || ex.getMessage().contains(\"enforces SamlVersion20Profile11 but we got 1.1\"));\n            }\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml1OverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1TransportPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n        }\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a SAML2 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Wrong SAML Version\"));\n        }\n\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Don't send any Token...failure expected\n        portQName = new QName(NAMESPACE, \"DoubleItSaml1TransportPort2\");\n        saml1Port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        \n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Failure expected on no token\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"The received token does not match the token inclusion requirement\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","id":7847,"modified_method":"@org.junit.Test\n    public void testSaml1OverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml1TransportPort\");\n        DoubleItPortType saml1Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml1Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml1Port);\n        }\n        \n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n        }\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a SAML2 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"Wrong SAML Version\")\n                           || ex.getMessage().contains(\"enforces SamlVersion11Profile11 but we got 2.0\"));\n            }\n        }\n\n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        int result = saml1Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Don't send any Token...failure expected\n        portQName = new QName(NAMESPACE, \"DoubleItSaml1TransportPort2\");\n        saml1Port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml1Port, PORT2);\n        \n        ((BindingProvider)saml1Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        \n        try {\n            saml1Port.doubleIt(25);\n            fail(\"Failure expected on no token\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"The received token does not match the token inclusion requirement\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)saml1Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2OverAsymmetric() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a SAML1 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Wrong SAML Version\"));\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Don't send any Token...failure expected\n        portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricPort2\");\n        saml2Port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected on no token\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            String error = \"The received token does not match the token inclusion requirement\";\n            assertTrue(ex.getMessage().contains(error));\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7848,"modified_method":"@org.junit.Test\n    public void testSaml2OverAsymmetric() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with no SAML Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"No SAML CallbackHandler available\"));\n            }\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler(false)\n        );\n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Expected failure on an invocation with a SAML1 Assertion\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                assertTrue(ex.getMessage().contains(\"Wrong SAML Version\")\n                           || ex.getMessage().contains(\"enforces SamlVersion20Profile11 but we got 1.1\"));\n            }\n        }\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        // Don't send any Token...failure expected\n        portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricPort2\");\n        saml2Port = service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n        \n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", new SamlCallbackHandler()\n        );\n        \n        try {\n            saml2Port.doubleIt(25);\n            fail(\"Failure expected on no token\");\n        } catch (javax.xml.ws.soap.SOAPFaultException ex) {\n            if (!test.isStreaming()) {\n                String error = \"The received token does not match the token inclusion requirement\";\n                assertTrue(ex.getMessage().contains(error));\n            }\n        }\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2OverAsymmetricEncrypted() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricEncryptedPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler();\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_BEARER);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7849,"modified_method":"@org.junit.Test\n    public void testSaml2OverAsymmetricEncrypted() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2AsymmetricEncryptedPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler();\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_BEARER);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSaml2EndorsingOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingTransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT2);\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7850,"modified_method":"@org.junit.Test\n    public void testSaml2EndorsingOverTransport() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSaml2EndorsingTransportPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(saml2Port, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testAsymmetricSamlInitiator() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSamlInitiatorPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, PORT);\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","id":7851,"modified_method":"@org.junit.Test\n    public void testAsymmetricSamlInitiator() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSamlInitiatorPort\");\n        DoubleItPortType saml2Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(saml2Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(saml2Port);\n        }\n        \n        SamlCallbackHandler callbackHandler = new SamlCallbackHandler(true, true);\n        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_HOLDER_KEY);\n        ((BindingProvider)saml2Port).getRequestContext().put(\n            \"ws-security.saml-callback-handler\", callbackHandler\n        );\n        int result = saml2Port.doubleIt(25);\n        assertTrue(result == 50);\n        \n        ((java.io.Closeable)saml2Port).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSpnegoOverSymmetric() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SpnegoTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SpnegoTokenTest.class.getResource(\"DoubleItSpnego.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSpnegoSymmetricPort\");\n        DoubleItPortType spnegoPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(spnegoPort, PORT);\n        \n        // DOM\n        spnegoPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(spnegoPort);\n        spnegoPort.doubleIt(25);\n        \n        ((java.io.Closeable)spnegoPort).close();\n        bus.shutdown(true);\n    }","id":7852,"modified_method":"@org.junit.Test\n    public void testSpnegoOverSymmetric() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SpnegoTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SpnegoTokenTest.class.getResource(\"DoubleItSpnego.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSpnegoSymmetricPort\");\n        DoubleItPortType spnegoPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(spnegoPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(spnegoPort);\n        }\n        \n        spnegoPort.doubleIt(25);\n        \n        ((java.io.Closeable)spnegoPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        if (unrestrictedPoliciesInstalled) {\n            assertTrue(\n                \"Server failed to launch\",\n                // run the server in the same process\n                // set this to false to fork\n                launchServer(Server.class, true)\n            );\n        }\n    }","id":7853,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        if (unrestrictedPoliciesInstalled) {\n            assertTrue(\n                \"Server failed to launch\",\n                // run the server in the same process\n                // set this to false to fork\n                launchServer(Server.class, true)\n            );\n            assertTrue(\n                       \"Server failed to launch\",\n                       // run the server in the same process\n                       // set this to false to fork\n                       launchServer(StaxServer.class, true)\n            );\n        }\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSpnegoOverSymmetricEncryptBeforeSigning() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SpnegoTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SpnegoTokenTest.class.getResource(\"DoubleItSpnego.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSpnegoSymmetricEncryptBeforeSigningPort\");\n        DoubleItPortType spnegoPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(spnegoPort, PORT);\n        \n        // DOM\n        spnegoPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(spnegoPort);\n        spnegoPort.doubleIt(25);\n        \n        ((java.io.Closeable)spnegoPort).close();\n        bus.shutdown(true);\n    }","id":7854,"modified_method":"@org.junit.Test\n    public void testSpnegoOverSymmetricEncryptBeforeSigning() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SpnegoTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SpnegoTokenTest.class.getResource(\"DoubleItSpnego.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSpnegoSymmetricEncryptBeforeSigningPort\");\n        DoubleItPortType spnegoPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(spnegoPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(spnegoPort);\n        }\n        \n        spnegoPort.doubleIt(25);\n        \n        ((java.io.Closeable)spnegoPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testSpnegoOverSymmetricDerived() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SpnegoTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SpnegoTokenTest.class.getResource(\"DoubleItSpnego.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSpnegoSymmetricDerivedPort\");\n        DoubleItPortType spnegoPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(spnegoPort, PORT);\n        \n        // DOM\n        spnegoPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(spnegoPort);\n        spnegoPort.doubleIt(25);\n        \n        ((java.io.Closeable)spnegoPort).close();\n        bus.shutdown(true);\n    }","id":7855,"modified_method":"@org.junit.Test\n    public void testSpnegoOverSymmetricDerived() throws Exception {\n        \n        if (!unrestrictedPoliciesInstalled) {\n            return;\n        }\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SpnegoTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SpnegoTokenTest.class.getResource(\"DoubleItSpnego.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSpnegoSymmetricDerivedPort\");\n        DoubleItPortType spnegoPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(spnegoPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(spnegoPort);\n        }\n        \n        spnegoPort.doubleIt(25);\n        \n        ((java.io.Closeable)spnegoPort).close();\n        bus.shutdown(true);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"private static Dispatch<Source> createUsernameTokenDispatcher() {\n        return createUsernameTokenDispatcher(false);\n    }","id":7856,"modified_method":"private static Dispatch<Source> createUsernameTokenDispatcher(String port) {\n        return createUsernameTokenDispatcher(false, port);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        createStaticBus();\n    }","id":7857,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n        createStaticBus();\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testUsernameToken() throws Exception {\n        final javax.xml.ws.Service svc \n            = javax.xml.ws.Service.create(WSDL_LOC, GREETER_SERVICE_QNAME);\n        final Greeter greeter = svc.getPort(USERNAME_TOKEN_PORT_QNAME, Greeter.class);\n        updateAddressPort(greeter, PORT);\n        \n        Client client = ClientProxy.getClient(greeter);\n        Map<String, Object> props = new HashMap<String, Object>();\n        props.put(\"action\", \"UsernameToken\");\n        props.put(\"user\", \"alice\");\n        props.put(\"passwordType\", \"PasswordText\");\n        WSS4JOutInterceptor wss4jOut = new WSS4JOutInterceptor(props);\n        \n        client.getOutInterceptors().add(wss4jOut);\n\n        ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n        \n        try {\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail because of password text instead of digest\");\n        } catch (Exception ex) {\n            //expected\n        }\n        \n        props.put(\"passwordType\", \"PasswordDigest\");\n        String s = greeter.greetMe(\"CXF\");\n        assertEquals(\"Hello CXF\", s);\n        \n        try {\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"foo\");\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        try {\n            props.put(\"passwordType\", \"PasswordText\");\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        \n        ((java.io.Closeable)greeter).close();\n    }","id":7858,"modified_method":"@Test\n    public void testUsernameToken() throws Exception {\n        final javax.xml.ws.Service svc \n            = javax.xml.ws.Service.create(WSDL_LOC, GREETER_SERVICE_QNAME);\n        final Greeter greeter = svc.getPort(USERNAME_TOKEN_PORT_QNAME, Greeter.class);\n        updateAddressPort(greeter, test.getPort());\n        \n        Client client = ClientProxy.getClient(greeter);\n        Map<String, Object> props = new HashMap<String, Object>();\n        props.put(\"action\", \"UsernameToken\");\n        props.put(\"user\", \"alice\");\n        props.put(\"passwordType\", \"PasswordText\");\n        WSS4JOutInterceptor wss4jOut = new WSS4JOutInterceptor(props);\n        \n        client.getOutInterceptors().add(wss4jOut);\n\n        ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n        \n        try {\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail because of password text instead of digest\");\n        } catch (Exception ex) {\n            //expected\n        }\n        \n        props.put(\"passwordType\", \"PasswordDigest\");\n        String s = greeter.greetMe(\"CXF\");\n        assertEquals(\"Hello CXF\", s);\n        \n        try {\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"foo\");\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        try {\n            props.put(\"passwordType\", \"PasswordText\");\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        \n        ((java.io.Closeable)greeter).close();\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"private static Dispatch<Source> createUsernameTokenDispatcher(boolean decoupled) {\n        final Service service = Service.create(\n            GREETER_SERVICE_QNAME\n        );\n        service.addPort(\n            USERNAME_TOKEN_PORT_QNAME,\n            decoupled ? SOAPBinding.SOAP11HTTP_BINDING : HTTPBinding.HTTP_BINDING, \n            \"http://localhost:\" + PORT + \"/GreeterService/UsernameTokenPort\"\n        );\n        final Dispatch<Source> dispatcher = service.createDispatch(\n            USERNAME_TOKEN_PORT_QNAME,\n            Source.class,\n            Service.Mode.MESSAGE,\n            new AddressingFeature(decoupled, decoupled)\n        );\n        final java.util.Map<String, Object> requestContext =\n            dispatcher.getRequestContext();\n        requestContext.put(\n            MessageContext.HTTP_REQUEST_METHOD,\n            \"POST\"\n        );\n        if (decoupled) {\n            HTTPConduit cond = (HTTPConduit)((DispatchImpl<?>)dispatcher).getClient().getConduit();\n            cond.getClient().setDecoupledEndpoint(\"http://localhost:\" + DEC_PORT + \"/decoupled\");\n        }\n        return dispatcher;\n    }","id":7859,"modified_method":"private static Dispatch<Source> createUsernameTokenDispatcher(boolean decoupled, String port) {\n        final Service service = Service.create(\n            GREETER_SERVICE_QNAME\n        );\n        service.addPort(\n            USERNAME_TOKEN_PORT_QNAME,\n            decoupled ? SOAPBinding.SOAP11HTTP_BINDING : HTTPBinding.HTTP_BINDING, \n            \"http://localhost:\" + port + \"/GreeterService/UsernameTokenPort\"\n        );\n        final Dispatch<Source> dispatcher = service.createDispatch(\n            USERNAME_TOKEN_PORT_QNAME,\n            Source.class,\n            Service.Mode.MESSAGE,\n            new AddressingFeature(decoupled, decoupled)\n        );\n        final java.util.Map<String, Object> requestContext =\n            dispatcher.getRequestContext();\n        requestContext.put(\n            MessageContext.HTTP_REQUEST_METHOD,\n            \"POST\"\n        );\n        if (decoupled) {\n            HTTPConduit cond = (HTTPConduit)((DispatchImpl<?>)dispatcher).getClient().getConduit();\n            cond.getClient().setDecoupledEndpoint(\"http://localhost:\" + DEC_PORT + \"/decoupled\");\n        }\n        return dispatcher;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testDecoupledFaultFromSecurity() throws Exception {\n        Dispatch<Source> dispatcher = null;\n        java.io.InputStream is = null;\n        \n        //\n        // Sending no security headers should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(true);\n        is = getClass().getResourceAsStream(\"test-data/NoHeadersRequest.xml\");\n        try {\n            dispatcher.invoke(new StreamSource(is));\n            fail(\"exception should have been generated\");\n        } catch (SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Security\"));\n        }\n\n        //\n        // Sending and empty header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(true);\n        is = getClass().getResourceAsStream(\"test-data/EmptyHeaderRequest.xml\");\n        try {\n            dispatcher.invoke(new StreamSource(is));\n            fail(\"exception should have been generated\");\n        } catch (SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Security\"));\n        }\n        //\n        // Sending and empty security header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(true);\n        is = getClass().getResourceAsStream(\"test-data/EmptySecurityHeaderRequest.xml\");\n        try {\n            dispatcher.invoke(new StreamSource(is));\n            fail(\"exception should have been generated\");\n        } catch (SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Security\"));\n        }\n\n    }","id":7860,"modified_method":"@Test\n    public void testDecoupledFaultFromSecurity() throws Exception {\n        Dispatch<Source> dispatcher = null;\n        java.io.InputStream is = null;\n        \n        //\n        // Sending no security headers should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(true, test.getPort());\n        is = getClass().getResourceAsStream(\"test-data/NoHeadersRequest.xml\");\n        try {\n            dispatcher.invoke(new StreamSource(is));\n            fail(\"exception should have been generated\");\n        } catch (SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Security\"));\n        }\n\n        //\n        // Sending and empty header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(true, test.getPort());\n        is = getClass().getResourceAsStream(\"test-data/EmptyHeaderRequest.xml\");\n        try {\n            dispatcher.invoke(new StreamSource(is));\n            fail(\"exception should have been generated\");\n        } catch (SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Security\"));\n        }\n        //\n        // Sending and empty security header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(true, test.getPort());\n        is = getClass().getResourceAsStream(\"test-data/EmptySecurityHeaderRequest.xml\");\n        try {\n            dispatcher.invoke(new StreamSource(is));\n            fail(\"exception should have been generated\");\n        } catch (SOAPFaultException ex) {\n            assertTrue(ex.getMessage().contains(\"Security\"));\n        }\n\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7861,"modified_method":"public WSSecurityClientTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testMalformedSecurityHeaders() throws java.lang.Exception {\n        Dispatch<Source> dispatcher = null;\n        java.io.InputStream is = null;\n        String result = null;\n        //\n        // Old Created Date should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher();\n        is = getClass().getResourceAsStream(\n            \"test-data/UsernameTokenRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n        \n        //\n        // Sending no security headers should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher();\n        is = getClass().getResourceAsStream(\n            \"test-data/NoHeadersRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n        //\n        // Sending and empty header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher();\n        is = getClass().getResourceAsStream(\n            \"test-data/EmptyHeaderRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n        //\n        // Sending and empty security header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher();\n        is = getClass().getResourceAsStream(\n            \"test-data/EmptySecurityHeaderRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n    }","id":7862,"modified_method":"@Test\n    public void testMalformedSecurityHeaders() throws java.lang.Exception {\n        Dispatch<Source> dispatcher = null;\n        java.io.InputStream is = null;\n        String result = null;\n        //\n        // Old Created Date should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(test.getPort());\n        is = getClass().getResourceAsStream(\n            \"test-data/UsernameTokenRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n        \n        //\n        // Sending no security headers should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(test.getPort());\n        is = getClass().getResourceAsStream(\n            \"test-data/NoHeadersRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n        //\n        // Sending and empty header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(test.getPort());\n        is = getClass().getResourceAsStream(\n            \"test-data/EmptyHeaderRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n        //\n        // Sending and empty security header should result in a Fault\n        //\n        dispatcher = createUsernameTokenDispatcher(test.getPort());\n        is = getClass().getResourceAsStream(\n            \"test-data/EmptySecurityHeaderRequest.xml\"\n        );\n        result = source2String(dispatcher.invoke(new StreamSource(is)));\n        assertTrue(result.indexOf(\"Fault\") != -1);\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testUsernameTokenStreaming() throws Exception {\n        final javax.xml.ws.Service svc \n            = javax.xml.ws.Service.create(WSDL_LOC, GREETER_SERVICE_QNAME);\n        final Greeter greeter = svc.getPort(USERNAME_TOKEN_PORT_QNAME, Greeter.class);\n        updateAddressPort(greeter, PORT);\n        \n        Client client = ClientProxy.getClient(greeter);\n        Map<String, Object> props = new HashMap<String, Object>();\n        props.put(\"action\", \"UsernameToken\");\n        props.put(\"user\", \"alice\");\n        props.put(\"passwordType\", \"PasswordText\");\n        WSS4JStaxOutInterceptor wss4jOut = new WSS4JStaxOutInterceptor(props);\n        \n        client.getOutInterceptors().add(wss4jOut);\n\n        ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n        \n        try {\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail because of password text instead of digest\");\n        } catch (Exception ex) {\n            //expected\n        }\n        client.getOutInterceptors().remove(wss4jOut);\n        \n        props.put(\"passwordType\", \"PasswordDigest\");\n        wss4jOut = new WSS4JStaxOutInterceptor(props);\n        client.getOutInterceptors().add(wss4jOut);\n        String s = greeter.greetMe(\"CXF\");\n        assertEquals(\"Hello CXF\", s);\n        client.getOutInterceptors().remove(wss4jOut);\n        \n        try {\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"foo\");\n            wss4jOut = new WSS4JStaxOutInterceptor(props);\n            client.getOutInterceptors().add(wss4jOut);\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        client.getOutInterceptors().remove(wss4jOut);\n        try {\n            props.put(\"passwordType\", \"PasswordText\");\n            wss4jOut = new WSS4JStaxOutInterceptor(props);\n            client.getOutInterceptors().add(wss4jOut);\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        client.getOutInterceptors().remove(wss4jOut);\n        \n        ((java.io.Closeable)greeter).close();\n    }","id":7863,"modified_method":"@Test\n    public void testUsernameTokenStreaming() throws Exception {\n        final javax.xml.ws.Service svc \n            = javax.xml.ws.Service.create(WSDL_LOC, GREETER_SERVICE_QNAME);\n        final Greeter greeter = svc.getPort(USERNAME_TOKEN_PORT_QNAME, Greeter.class);\n        updateAddressPort(greeter, test.getPort());\n        \n        Client client = ClientProxy.getClient(greeter);\n        Map<String, Object> props = new HashMap<String, Object>();\n        props.put(\"action\", \"UsernameToken\");\n        props.put(\"user\", \"alice\");\n        props.put(\"passwordType\", \"PasswordText\");\n        WSS4JStaxOutInterceptor wss4jOut = new WSS4JStaxOutInterceptor(props);\n        \n        client.getOutInterceptors().add(wss4jOut);\n\n        ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n        \n        try {\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail because of password text instead of digest\");\n        } catch (Exception ex) {\n            //expected\n        }\n        client.getOutInterceptors().remove(wss4jOut);\n        \n        props.put(\"passwordType\", \"PasswordDigest\");\n        wss4jOut = new WSS4JStaxOutInterceptor(props);\n        client.getOutInterceptors().add(wss4jOut);\n        String s = greeter.greetMe(\"CXF\");\n        assertEquals(\"Hello CXF\", s);\n        client.getOutInterceptors().remove(wss4jOut);\n        \n        try {\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"foo\");\n            wss4jOut = new WSS4JStaxOutInterceptor(props);\n            client.getOutInterceptors().add(wss4jOut);\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        client.getOutInterceptors().remove(wss4jOut);\n        try {\n            props.put(\"passwordType\", \"PasswordText\");\n            wss4jOut = new WSS4JStaxOutInterceptor(props);\n            client.getOutInterceptors().add(wss4jOut);\n            ((BindingProvider)greeter).getRequestContext().put(\"password\", \"password\");\n            greeter.greetMe(\"CXF\");\n            fail(\"should fail\");\n        } catch (Exception ex) {\n            //expected\n        }\n        client.getOutInterceptors().remove(wss4jOut);\n        \n        ((java.io.Closeable)greeter).close();\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testTimestampSignEncrypt() throws Exception {\n        Bus b = new SpringBusFactory()\n            .createBus(\"org/apache/cxf/systest/ws/security/client.xml\");\n        BusFactory.setDefaultBus(b);\n        final javax.xml.ws.Service svc = javax.xml.ws.Service.create(\n            WSDL_LOC,\n            GREETER_SERVICE_QNAME\n        );\n        final Greeter greeter = svc.getPort(\n            TIMESTAMP_SIGN_ENCRYPT_PORT_QNAME,\n            Greeter.class\n        );\n        updateAddressPort(greeter, PORT);\n\n        // Add a No-Op JAX-WS SoapHandler to the dispatch chain to\n        // verify that the SoapHandlerInterceptor can peacefully co-exist\n        // with the explicitly configured SAAJOutInterceptor\n        //\n        @SuppressWarnings(\"rawtypes\")\n        List<Handler> handlerChain = new ArrayList<Handler>();\n        Binding binding = ((BindingProvider)greeter).getBinding();\n        TestOutHandler handler = new TestOutHandler();\n        handlerChain.add(handler);\n        binding.setHandlerChain(handlerChain);\n\n        greeter.sayHi();\n\n        assertTrue(\"expected Handler.handleMessage() to be called\", \n                   handler.handleMessageCalledOutbound);\n        assertFalse(\"expected Handler.handleFault() not to be called\", \n                    handler.handleFaultCalledOutbound);\n        ((java.io.Closeable)greeter).close();\n        b.shutdown(true);\n        BusFactory.setDefaultBus(getStaticBus());\n    }","id":7864,"modified_method":"@Test\n    public void testTimestampSignEncrypt() throws Exception {\n        Bus b = new SpringBusFactory()\n            .createBus(\"org/apache/cxf/systest/ws/security/client.xml\");\n        BusFactory.setDefaultBus(b);\n        final javax.xml.ws.Service svc = javax.xml.ws.Service.create(\n            WSDL_LOC,\n            GREETER_SERVICE_QNAME\n        );\n        final Greeter greeter = svc.getPort(\n            TIMESTAMP_SIGN_ENCRYPT_PORT_QNAME,\n            Greeter.class\n        );\n        updateAddressPort(greeter, test.getPort());\n\n        // Add a No-Op JAX-WS SoapHandler to the dispatch chain to\n        // verify that the SoapHandlerInterceptor can peacefully co-exist\n        // with the explicitly configured SAAJOutInterceptor\n        //\n        @SuppressWarnings(\"rawtypes\")\n        List<Handler> handlerChain = new ArrayList<Handler>();\n        Binding binding = ((BindingProvider)greeter).getBinding();\n        TestOutHandler handler = new TestOutHandler();\n        handlerChain.add(handler);\n        binding.setHandlerChain(handlerChain);\n\n        greeter.sayHi();\n\n        assertTrue(\"expected Handler.handleMessage() to be called\", \n                   handler.handleMessageCalledOutbound);\n        assertFalse(\"expected Handler.handleFault() not to be called\", \n                    handler.handleFaultCalledOutbound);\n        ((java.io.Closeable)greeter).close();\n        b.shutdown(true);\n        BusFactory.setDefaultBus(getStaticBus());\n    }","commit_id":"b509ba67ce2ebe6655879e9999821ea8a5b4bd6d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.1.4 (WSS1.0) SAML1.1 Sender Vouches with X.509 Certificates, Sign, Optional Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSignedPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7865,"modified_method":"/**\n     * 2.3.1.4 (WSS1.0) SAML1.1 Sender Vouches with X.509 Certificates, Sign, Optional Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricSigned() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSignedPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.1.5 (WSS1.0) SAML1.1 Holder of Key, Sign, Optional Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricInitiator() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricInitiatorPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7866,"modified_method":"/**\n     * 2.3.1.5 (WSS1.0) SAML1.1 Holder of Key, Sign, Optional Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricInitiator() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricInitiatorPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(STSServer.class, true)\n        );\n    }","id":7867,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(STSServer.class, true)\n        );\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.1.3 (WSS1.0) SAML1.1 Assertion (HK) over SSL\n     */\n    @org.junit.Test\n    public void testTLSHOKSignedEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSHOKSignedEndorsingPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT2);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7868,"modified_method":"/**\n     * 2.3.1.3 (WSS1.0) SAML1.1 Assertion (HK) over SSL\n     */\n    @org.junit.Test\n    public void testTLSHOKSignedEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSHOKSignedEndorsingPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(samlPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.1.2 (WSS1.0) SAML1.1 Assertion (Sender Vouches) over SSL\n     */\n    @org.junit.Test\n    public void testTLSSenderVouches() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSSenderVouchesPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT2);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7869,"modified_method":"/**\n     * 2.3.1.2 (WSS1.0) SAML1.1 Assertion (Sender Vouches) over SSL\n     */\n    @org.junit.Test\n    public void testTLSSenderVouches() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSSenderVouchesPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(samlPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.2.5 (WSS1.1) SAML1.1/2.0 Holder of Key, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricIssuedToken() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricIssuedTokenPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        updateSTSPort((BindingProvider)samlPort, STS_PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // TODO Endorsing SAML not supported Streaming\n        // SecurityTestUtil.enableStreaming(samlPort);\n        // samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7870,"modified_method":"/**\n     * 2.3.2.5 (WSS1.1) SAML1.1/2.0 Holder of Key, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricIssuedToken() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricIssuedTokenPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        updateSTSPort((BindingProvider)samlPort, STS_PORT);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        // TODO Endorsing SAML not supported Streaming\n        // TODO Problem with policy validation on the StAX Server side\n        if (!test.isStreaming() && PORT.equals(test.getPort())) {\n            samlPort.doubleIt(25);\n        }\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.2.1 (WSS1.1) SAML 2.0 Bearer\n     */\n    @org.junit.Test\n    public void testAsymmetricSaml2Bearer() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSaml2BearerPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7871,"modified_method":"/**\n     * 2.3.2.1 (WSS1.1) SAML 2.0 Bearer\n     */\n    @org.junit.Test\n    public void testAsymmetricSaml2Bearer() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSaml2BearerPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.2.3 (WSS1.1) SAML2.0 HoK over SSL\n     */\n    @org.junit.Test\n    public void testTLSHOKSignedEndorsingSaml2() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSHOKSignedEndorsingSaml2Port\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT2);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7872,"modified_method":"/**\n     * 2.3.2.3 (WSS1.1) SAML2.0 HoK over SSL\n     */\n    @org.junit.Test\n    public void testTLSHOKSignedEndorsingSaml2() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSHOKSignedEndorsingSaml2Port\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(samlPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.1.1 (WSS1.0) SAML1.1 Assertion (Bearer)\n     */\n    @org.junit.Test\n    public void testBearer() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItBearerPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7873,"modified_method":"/**\n     * 2.3.1.1 (WSS1.0) SAML1.1 Assertion (Bearer)\n     */\n    @org.junit.Test\n    public void testBearer() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItBearerPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.2.2 (WSS1.1) SAML2.0 Sender Vouches over SSL\n     */\n    @org.junit.Test\n    public void testTLSSenderVouchesSaml2() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSSenderVouchesSaml2Port\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT2);\n\n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7874,"modified_method":"/**\n     * 2.3.2.2 (WSS1.1) SAML2.0 Sender Vouches over SSL\n     */\n    @org.junit.Test\n    public void testTLSSenderVouchesSaml2() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSSenderVouchesSaml2Port\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(samlPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.3.2.4 (WSS1.1) SAML1.1/2.0 Sender Vouches with X.509 Certificate, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricSV() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricSVPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // TODO Endorsing Streaming not supported yet Streaming\n        // SecurityTestUtil.enableStreaming(samlPort);\n        // samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7875,"modified_method":"/**\n     * 2.3.2.4 (WSS1.1) SAML1.1/2.0 Sender Vouches with X.509 Certificate, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricSV() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SamlTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SamlTokenTest.class.getResource(\"DoubleItSaml.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricSVPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        // TODO Endorsing Streaming not supported yet Streaming\n        if (!test.isStreaming()) {\n            samlPort.doubleIt(25);\n        }\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7876,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7877,"modified_method":"public SecureConversationTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.4.1 (WSS 1.0) Secure Conversation bootstrapped by Mutual\n     * Authentication with X.509 Certificates\n     */\n    @org.junit.Test\n    public void testSecureConversation() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SecureConversationTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SecureConversationTest.class.getResource(\"DoubleItSecConv.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSecureConversationPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, PORT);\n        \n        // DOM\n        samlPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(samlPort);\n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","id":7878,"modified_method":"/**\n     * 2.4.1 (WSS 1.0) Secure Conversation bootstrapped by Mutual\n     * Authentication with X.509 Certificates\n     */\n    @org.junit.Test\n    public void testSecureConversation() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = SecureConversationTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = SecureConversationTest.class.getResource(\"DoubleItSecConv.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSecureConversationPort\");\n        DoubleItPortType samlPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(samlPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(samlPort);\n        }\n        \n        samlPort.doubleIt(25);\n        \n        ((java.io.Closeable)samlPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7879,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.2.1 UsernameToken as supporting token\n     */\n    @org.junit.Test\n    public void testTLSSupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSSupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT2);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7880,"modified_method":"/**\n     * 2.1.2.1 UsernameToken as supporting token\n     */\n    @org.junit.Test\n    public void testTLSSupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItTLSSupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        String portNumber = PORT2;\n        if (STAX_PORT.equals(test.getPort())) {\n            portNumber = STAX_PORT2;\n        }\n        updateAddressPort(utPort, portNumber);\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7881,"modified_method":"public UsernameTokenTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.3 (WSS 1.0) UsernameToken with Mutual X.509v3 Authentication, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricSESupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSESupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7882,"modified_method":"/**\n     * 2.1.3 (WSS 1.0) UsernameToken with Mutual X.509v3 Authentication, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricSESupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSESupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.4 (WSS 1.1), User Name with Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricSESupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricSESupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7883,"modified_method":"/**\n     * 2.1.4 (WSS 1.1), User Name with Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricSESupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricSESupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.3.1 (WSS 1.0) Encrypted UsernameToken with X.509v3\n     */\n    @org.junit.Test\n    public void testAsymmetricEncrSupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricEncrSupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7884,"modified_method":"/**\n     * 2.1.3.1 (WSS 1.0) Encrypted UsernameToken with X.509v3\n     */\n    @org.junit.Test\n    public void testAsymmetricEncrSupporting() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricEncrSupportingPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.1.2 UsernameToken without password\n     */\n    @org.junit.Test\n    public void testPlaintextNoPassword() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItPlaintextNoPasswordPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7885,"modified_method":"/**\n     * 2.1.1.2 UsernameToken without password\n     */\n    @org.junit.Test\n    public void testPlaintextNoPassword() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItPlaintextNoPasswordPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.1.1 UsernameToken with plain text password\n     */\n    @org.junit.Test\n    public void testPlaintext() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItPlaintextPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7886,"modified_method":"/**\n     * 2.1.1.1 UsernameToken with plain text password\n     */\n    @org.junit.Test\n    public void testPlaintext() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItPlaintextPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n        \n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.1.1.3 UsernameToken with timestamp, nonce and password hash\n     */\n    @org.junit.Test\n    public void testDigest() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItDigestPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, PORT);\n        \n        // DOM\n        utPort.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(utPort);\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","id":7887,"modified_method":"/**\n     * 2.1.1.3 UsernameToken with timestamp, nonce and password hash\n     */\n    @org.junit.Test\n    public void testDigest() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = UsernameTokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = UsernameTokenTest.class.getResource(\"DoubleItUt.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItDigestPort\");\n        DoubleItPortType utPort = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(utPort, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(utPort);\n        }\n\n        utPort.doubleIt(25);\n        \n        ((java.io.Closeable)utPort).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n    }","id":7888,"modified_method":"@BeforeClass\n    public static void startServers() throws Exception {\n        assertTrue(\n            \"Server failed to launch\",\n            // run the server in the same process\n            // set this to false to fork\n            launchServer(Server.class, true)\n        );\n        assertTrue(\n                   \"Server failed to launch\",\n                   // run the server in the same process\n                   // set this to false to fork\n                   launchServer(StaxServer.class, true)\n        );\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.2.2 (WSS1.0) Mutual Authentication with X.509 Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricProtectTokens() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricProtectTokensPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, PORT);\n        \n        // DOM\n        x509Port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(x509Port);\n        x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","id":7889,"modified_method":"/**\n     * 2.2.2 (WSS1.0) Mutual Authentication with X.509 Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricProtectTokens() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricProtectTokensPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(x509Port);\n        }\n        \n        x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.AfterClass\n    public static void cleanup() throws Exception {\n        SecurityTestUtil.cleanup();\n        stopAllServers();\n    }","id":7890,"modified_method":"public X509TokenTest(TestParam type) {\n        this.test = type;\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.2.3 (WSS1.1) Anonymous with X.509 Certificate, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricSignEncrypt() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricSignEncryptPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, PORT);\n        \n        // DOM\n        x509Port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(x509Port);\n        x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","id":7891,"modified_method":"/**\n     * 2.2.3 (WSS1.1) Anonymous with X.509 Certificate, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricSignEncrypt() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricSignEncryptPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(x509Port);\n        }\n        \n        x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.2.4 (WSS1.1) Mutual Authentication with X.509 Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricEndorsingPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, PORT);\n        \n        // DOM\n        x509Port.doubleIt(25);\n        \n        // TODO - support endorsing Streaming\n        // SecurityTestUtil.enableStreaming(x509Port);\n        // x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","id":7892,"modified_method":"/**\n     * 2.2.4 (WSS1.1) Mutual Authentication with X.509 Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testSymmetricEndorsing() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItSymmetricEndorsingPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(x509Port);\n        }\n        \n        // TODO - support endorsing Streaming\n        if (!test.isStreaming()) {\n            x509Port.doubleIt(25);\n        }\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * 2.2.1 (WSS1.0) X.509 Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricSignEncrypt() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSignEncryptPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, PORT);\n        \n        // DOM\n        x509Port.doubleIt(25);\n        \n        // Streaming\n        SecurityTestUtil.enableStreaming(x509Port);\n        x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","id":7893,"modified_method":"/**\n     * 2.2.1 (WSS1.0) X.509 Certificates, Sign, Encrypt\n     */\n    @org.junit.Test\n    public void testAsymmetricSignEncrypt() throws Exception {\n\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = X509TokenTest.class.getResource(\"client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n\n        URL wsdl = X509TokenTest.class.getResource(\"DoubleItX509.wsdl\");\n        Service service = Service.create(wsdl, SERVICE_QNAME);\n        QName portQName = new QName(NAMESPACE, \"DoubleItAsymmetricSignEncryptPort\");\n        DoubleItPortType x509Port = \n                service.getPort(portQName, DoubleItPortType.class);\n        updateAddressPort(x509Port, test.getPort());\n        \n        if (test.isStreaming()) {\n            SecurityTestUtil.enableStreaming(x509Port);\n        }\n        \n        x509Port.doubleIt(25);\n        \n        ((java.io.Closeable)x509Port).close();\n        bus.shutdown(true);\n    }","commit_id":"9603da46c34c6e9d45172d8c0c5de236178c0a85","url":"https://github.com/apache/cxf"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<ManagedInterface> allNodes = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        List<String> interfaceList = Arrays.asList(request.getParameterValues(\"interfaceCheck\"));\n\n        // the list of all services marked as managed\n        List<String> serviceList = Arrays.asList(request.getParameterValues(\"serviceCheck\"));\n\n        // the list of interfaces that need to be put into the URL file\n        List<String> addToURL = new ArrayList<String>();\n\n        List<String> unmanageInterfacesList = new ArrayList<String>();\n        List<String> manageInterfacesList = new ArrayList<String>();\n        \n        Date curDate = new Date();\n\n        final DBUtils d = new DBUtils(getClass());\n        try {\n            Connection connection = DataSourceFactory.getInstance().getConnection();\n            d.watch(connection);\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_SERVICE);\n                d.watch(stmt);\n                PreparedStatement outagesstmt = connection.prepareStatement(DELETE_SERVICE_OUTAGES);\n                d.watch(outagesstmt);\n\n                for (ManagedInterface curInterface : allNodes) {\n                    String intKey = curInterface.getNodeid() + \"-\" + curInterface.getAddress();\n\n                    // see if this interface needs added to the url list\n                    if (interfaceList.contains(intKey)) {\n                        addToURL.add(curInterface.getAddress());\n                    }\n\n                    // determine what is managed and unmanaged\n                    if (interfaceList.contains(intKey) && curInterface.getStatus().equals(\"unmanaged\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceManaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"M\");\n                        manageInterfacesList.add(curInterface.getAddress());\n                    } else if (!interfaceList.contains(intKey) && curInterface.getStatus().equals(\"managed\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceUnmanaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"F\");\n                        unmanageInterfacesList.add(curInterface.getAddress());\n                    }\n\n                    List<ManagedService> interfaceServices = curInterface.getServices();\n\n                    for (int k = 0; k < interfaceServices.size(); k++) {\n                        ManagedService curService = interfaceServices.get(k);\n                        String serviceKey = intKey + \"-\" + curService.getId();\n\n                        if (serviceList.contains(serviceKey) && curService.getStatus().equals(\"unmanaged\")) {\n                            // Event newEvent = new Event();\n                            // newEvent.setUei(\"uei.opennms.org/internal/serviceManaged\");\n                            // newEvent.setSource(\"web ui\");\n                            // newEvent.setNodeid(curNode.getNodeID());\n                            // newEvent.setInterface(curInterface.getAddress());\n                            // newEvent.setService(curService.getName());\n                            // newEvent.setTime(curDate);\n\n                            stmt.setString(1, String.valueOf(\"A\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            LOG.debug(\"doPost: executing manage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            \n                            EventBuilder bldr = new EventBuilder(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n                        } else if (!serviceList.contains(serviceKey) && curService.getStatus().equals(\"managed\")) {\n                            stmt.setString(1, String.valueOf(\"F\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            outagesstmt.setString(1, curInterface.getAddress());\n                            outagesstmt.setInt(2, curInterface.getNodeid());\n                            outagesstmt.setInt(3, curService.getId());\n                            LOG.debug(\"doPost: executing unmanage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            outagesstmt.executeUpdate();\n\n                            EventBuilder bldr = new EventBuilder(EventConstants.SERVICE_UNMANAGED_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n\n                            bldr.setUei(EventConstants.SUSPEND_POLLING_SERVICE_EVENT_UEI);\n                            sendEvent(bldr.getEvent());\n                        }\n                    } // end k loop\n                } // end j loop\n\n                if (manageInterfacesList.size() > 0)\n                    manageInterfaces(manageInterfacesList, connection);\n                if (unmanageInterfacesList.size() > 0)\n                    unmanageInterfaces(unmanageInterfacesList, connection);\n\n                // update the packages url file\n                writeURLFile(addToURL);\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        } finally {\n            d.cleanUp();\n        }\n\n        // send the event to restart SCM\n        sendSCMRestartEvent();\n\n        // forward the request for proper display\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/admin/manageNodesFinish.jsp\");\n        dispatcher.forward(request, response);\n    }","id":7894,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<ManagedInterface> allNodes = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        String[] parameters = request.getParameterValues(\"interfaceCheck\");\n        List<String> interfaceList = (parameters == null ? Collections.<String>emptyList() : Arrays.asList(parameters));\n\n        // the list of all services marked as managed\n        parameters = request.getParameterValues(\"serviceCheck\");\n        List<String> serviceList = (parameters == null ? Collections.<String>emptyList() : Arrays.asList(parameters));\n\n        // the list of interfaces that need to be put into the URL file\n        List<String> addToURL = new ArrayList<String>();\n\n        List<String> unmanageInterfacesList = new ArrayList<String>();\n        List<String> manageInterfacesList = new ArrayList<String>();\n        \n        Date curDate = new Date();\n\n        final DBUtils d = new DBUtils(getClass());\n        try {\n            Connection connection = DataSourceFactory.getInstance().getConnection();\n            d.watch(connection);\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_SERVICE);\n                d.watch(stmt);\n                PreparedStatement outagesstmt = connection.prepareStatement(DELETE_SERVICE_OUTAGES);\n                d.watch(outagesstmt);\n\n                for (ManagedInterface curInterface : allNodes) {\n                    String intKey = curInterface.getNodeid() + \"-\" + curInterface.getAddress();\n\n                    // see if this interface needs added to the url list\n                    if (interfaceList.contains(intKey)) {\n                        addToURL.add(curInterface.getAddress());\n                    }\n\n                    // determine what is managed and unmanaged\n                    if (interfaceList.contains(intKey) && curInterface.getStatus().equals(\"unmanaged\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceManaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"M\");\n                        manageInterfacesList.add(curInterface.getAddress());\n                    } else if (!interfaceList.contains(intKey) && curInterface.getStatus().equals(\"managed\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceUnmanaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"F\");\n                        unmanageInterfacesList.add(curInterface.getAddress());\n                    }\n\n                    List<ManagedService> interfaceServices = curInterface.getServices();\n\n                    for (int k = 0; k < interfaceServices.size(); k++) {\n                        ManagedService curService = interfaceServices.get(k);\n                        String serviceKey = intKey + \"-\" + curService.getId();\n\n                        if (serviceList.contains(serviceKey) && curService.getStatus().equals(\"unmanaged\")) {\n                            // Event newEvent = new Event();\n                            // newEvent.setUei(\"uei.opennms.org/internal/serviceManaged\");\n                            // newEvent.setSource(\"web ui\");\n                            // newEvent.setNodeid(curNode.getNodeID());\n                            // newEvent.setInterface(curInterface.getAddress());\n                            // newEvent.setService(curService.getName());\n                            // newEvent.setTime(curDate);\n\n                            stmt.setString(1, String.valueOf(\"A\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            LOG.debug(\"doPost: executing manage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            \n                            EventBuilder bldr = new EventBuilder(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n                        } else if (!serviceList.contains(serviceKey) && curService.getStatus().equals(\"managed\")) {\n                            stmt.setString(1, String.valueOf(\"F\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            outagesstmt.setString(1, curInterface.getAddress());\n                            outagesstmt.setInt(2, curInterface.getNodeid());\n                            outagesstmt.setInt(3, curService.getId());\n                            LOG.debug(\"doPost: executing unmanage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            outagesstmt.executeUpdate();\n\n                            EventBuilder bldr = new EventBuilder(EventConstants.SERVICE_UNMANAGED_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n\n                            bldr.setUei(EventConstants.SUSPEND_POLLING_SERVICE_EVENT_UEI);\n                            sendEvent(bldr.getEvent());\n                        }\n                    } // end k loop\n                } // end j loop\n\n                if (manageInterfacesList.size() > 0)\n                    manageInterfaces(manageInterfacesList, connection);\n                if (unmanageInterfacesList.size() > 0)\n                    unmanageInterfaces(unmanageInterfacesList, connection);\n\n                // update the packages url file\n                writeURLFile(addToURL);\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        } finally {\n            d.cleanUp();\n        }\n\n        // send the event to restart SCM\n        sendSCMRestartEvent();\n\n        // forward the request for proper display\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/admin/manageNodesFinish.jsp\");\n        dispatcher.forward(request, response);\n    }","commit_id":"229b05b1a16bf07e0c19c639088df561012e3180","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<ManagedInterface> allNodes = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        List<String> interfaceList = Arrays.asList(request.getParameterValues(\"interfaceCheck\"));\n\n        // the list of all services marked as managed\n        List<String> serviceList = Arrays.asList(request.getParameterValues(\"serviceCheck\"));\n\n        // the list of interfaces that need to be put into the URL file\n        List<String> addToURL = new ArrayList<String>();\n\n        List<String> unmanageInterfacesList = new ArrayList<String>();\n        List<String> manageInterfacesList = new ArrayList<String>();\n        \n        Date curDate = new Date();\n\n        final DBUtils d = new DBUtils(getClass());\n        try {\n            Connection connection = DataSourceFactory.getInstance().getConnection();\n            d.watch(connection);\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_SERVICE);\n                d.watch(stmt);\n                PreparedStatement outagesstmt = connection.prepareStatement(DELETE_SERVICE_OUTAGES);\n                d.watch(outagesstmt);\n\n                for (ManagedInterface curInterface : allNodes) {\n                    String intKey = curInterface.getNodeid() + \"-\" + curInterface.getAddress();\n\n                    // see if this interface needs added to the url list\n                    if (interfaceList.contains(intKey)) {\n                        addToURL.add(curInterface.getAddress());\n                    }\n\n                    // determine what is managed and unmanaged\n                    if (interfaceList.contains(intKey) && curInterface.getStatus().equals(\"unmanaged\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceManaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"M\");\n                        manageInterfacesList.add(curInterface.getAddress());\n                    } else if (!interfaceList.contains(intKey) && curInterface.getStatus().equals(\"managed\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceUnmanaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"F\");\n                        unmanageInterfacesList.add(curInterface.getAddress());\n                    }\n\n                    List<ManagedService> interfaceServices = curInterface.getServices();\n\n                    for (int k = 0; k < interfaceServices.size(); k++) {\n                        ManagedService curService = interfaceServices.get(k);\n                        String serviceKey = intKey + \"-\" + curService.getId();\n\n                        if (serviceList.contains(serviceKey) && curService.getStatus().equals(\"unmanaged\")) {\n                            // Event newEvent = new Event();\n                            // newEvent.setUei(\"uei.opennms.org/internal/serviceManaged\");\n                            // newEvent.setSource(\"web ui\");\n                            // newEvent.setNodeid(curNode.getNodeID());\n                            // newEvent.setInterface(curInterface.getAddress());\n                            // newEvent.setService(curService.getName());\n                            // newEvent.setTime(curDate);\n\n                            stmt.setString(1, String.valueOf(\"A\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            LOG.debug(\"doPost: executing manage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            \n                            EventBuilder bldr = new EventBuilder(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n                        } else if (!serviceList.contains(serviceKey) && curService.getStatus().equals(\"managed\")) {\n                            stmt.setString(1, String.valueOf(\"F\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            outagesstmt.setString(1, curInterface.getAddress());\n                            outagesstmt.setInt(2, curInterface.getNodeid());\n                            outagesstmt.setInt(3, curService.getId());\n                            LOG.debug(\"doPost: executing unmanage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            outagesstmt.executeUpdate();\n\n                            EventBuilder bldr = new EventBuilder(EventConstants.SERVICE_UNMANAGED_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n\n                            bldr.setUei(EventConstants.SUSPEND_POLLING_SERVICE_EVENT_UEI);\n                            sendEvent(bldr.getEvent());\n                        }\n                    } // end k loop\n                } // end j loop\n\n                if (manageInterfacesList.size() > 0)\n                    manageInterfaces(manageInterfacesList, connection);\n                if (unmanageInterfacesList.size() > 0)\n                    unmanageInterfaces(unmanageInterfacesList, connection);\n\n                // update the packages url file\n                writeURLFile(addToURL);\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        } finally {\n            d.cleanUp();\n        }\n\n        // send the event to restart SCM\n        sendSCMRestartEvent();\n\n        // forward the request for proper display\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/admin/manageNodesFinish.jsp\");\n        dispatcher.forward(request, response);\n    }","id":7895,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession userSession = request.getSession(false);\n        List<ManagedInterface> allNodes = getManagedInterfacesFromSession(userSession);\n\n        // the list of all interfaces marked as managed\n        String[] parameters = request.getParameterValues(\"interfaceCheck\");\n        List<String> interfaceList = (parameters == null ? Collections.<String>emptyList() : Arrays.asList(parameters));\n\n        // the list of all services marked as managed\n        parameters = request.getParameterValues(\"serviceCheck\");\n        List<String> serviceList = (parameters == null ? Collections.<String>emptyList() : Arrays.asList(parameters));\n\n        // the list of interfaces that need to be put into the URL file\n        List<String> addToURL = new ArrayList<String>();\n\n        List<String> unmanageInterfacesList = new ArrayList<String>();\n        List<String> manageInterfacesList = new ArrayList<String>();\n        \n        Date curDate = new Date();\n\n        final DBUtils d = new DBUtils(getClass());\n        try {\n            Connection connection = DataSourceFactory.getInstance().getConnection();\n            d.watch(connection);\n            try {\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(UPDATE_SERVICE);\n                d.watch(stmt);\n                PreparedStatement outagesstmt = connection.prepareStatement(DELETE_SERVICE_OUTAGES);\n                d.watch(outagesstmt);\n\n                for (ManagedInterface curInterface : allNodes) {\n                    String intKey = curInterface.getNodeid() + \"-\" + curInterface.getAddress();\n\n                    // see if this interface needs added to the url list\n                    if (interfaceList.contains(intKey)) {\n                        addToURL.add(curInterface.getAddress());\n                    }\n\n                    // determine what is managed and unmanaged\n                    if (interfaceList.contains(intKey) && curInterface.getStatus().equals(\"unmanaged\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceManaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"M\");\n                        manageInterfacesList.add(curInterface.getAddress());\n                    } else if (!interfaceList.contains(intKey) && curInterface.getStatus().equals(\"managed\")) {\n                        // Event newEvent = new Event();\n                        // newEvent.setUei(\"uei.opennms.org/internal/interfaceUnmanaged\");\n                        // newEvent.setSource(\"web ui\");\n                        // newEvent.setNodeid(curNode.getNodeID());\n                        // newEvent.setInterface(curInterface.getAddress());\n                        // newEvent.setTime(curDate);\n\n                        // updateInterface(curInterface.getNodeid(),\n                        // curInterface.getAddress(), new Event(), \"F\");\n                        unmanageInterfacesList.add(curInterface.getAddress());\n                    }\n\n                    List<ManagedService> interfaceServices = curInterface.getServices();\n\n                    for (int k = 0; k < interfaceServices.size(); k++) {\n                        ManagedService curService = interfaceServices.get(k);\n                        String serviceKey = intKey + \"-\" + curService.getId();\n\n                        if (serviceList.contains(serviceKey) && curService.getStatus().equals(\"unmanaged\")) {\n                            // Event newEvent = new Event();\n                            // newEvent.setUei(\"uei.opennms.org/internal/serviceManaged\");\n                            // newEvent.setSource(\"web ui\");\n                            // newEvent.setNodeid(curNode.getNodeID());\n                            // newEvent.setInterface(curInterface.getAddress());\n                            // newEvent.setService(curService.getName());\n                            // newEvent.setTime(curDate);\n\n                            stmt.setString(1, String.valueOf(\"A\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            LOG.debug(\"doPost: executing manage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            \n                            EventBuilder bldr = new EventBuilder(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n                        } else if (!serviceList.contains(serviceKey) && curService.getStatus().equals(\"managed\")) {\n                            stmt.setString(1, String.valueOf(\"F\"));\n                            stmt.setString(2, curInterface.getAddress());\n                            stmt.setInt(3, curInterface.getNodeid());\n                            stmt.setInt(4, curService.getId());\n                            outagesstmt.setString(1, curInterface.getAddress());\n                            outagesstmt.setInt(2, curInterface.getNodeid());\n                            outagesstmt.setInt(3, curService.getId());\n                            LOG.debug(\"doPost: executing unmanage service update for {} {}\", curInterface.getAddress(), curService.getName());\n                            stmt.executeUpdate();\n                            outagesstmt.executeUpdate();\n\n                            EventBuilder bldr = new EventBuilder(EventConstants.SERVICE_UNMANAGED_EVENT_UEI, \"web ui\", curDate);\n                            bldr.setNodeid(curInterface.getNodeid());\n                            bldr.setInterface(addr(curInterface.getAddress()));\n                            bldr.setService(curService.getName());\n                            sendEvent(bldr.getEvent());\n\n                            bldr.setUei(EventConstants.SUSPEND_POLLING_SERVICE_EVENT_UEI);\n                            sendEvent(bldr.getEvent());\n                        }\n                    } // end k loop\n                } // end j loop\n\n                if (manageInterfacesList.size() > 0)\n                    manageInterfaces(manageInterfacesList, connection);\n                if (unmanageInterfacesList.size() > 0)\n                    unmanageInterfaces(unmanageInterfacesList, connection);\n\n                // update the packages url file\n                writeURLFile(addToURL);\n\n                connection.commit();\n            } finally { // close off the db connection\n                connection.setAutoCommit(true);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(e);\n        } finally {\n            d.cleanUp();\n        }\n\n        // send the event to restart SCM\n        sendSCMRestartEvent();\n\n        // forward the request for proper display\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(\"/admin/manageNodesFinish.jsp\");\n        dispatcher.forward(request, response);\n    }","commit_id":"84d99dbda3fadce4868d6e6361ad76da1d426da2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public String getPortletTitle(IPortletWindowId portletWindowId, HttpServletRequest request, HttpServletResponse response) {\n        final PortletRenderExecutionWorker<StringWriter> tracker = getRenderedPortlet(portletWindowId, request, response);\n        final int timeout = getPortletRenderTimeout(portletWindowId, request);\n        final PortletRenderResult portletRenderResult = tracker.get(timeout);\n        \n        return portletRenderResult.getTitle();\n    }","id":7896,"modified_method":"public String getPortletTitle(IPortletWindowId portletWindowId, HttpServletRequest request, HttpServletResponse response) {\n        final PortletRenderExecutionWorker<StringWriter> tracker = getRenderedPortlet(portletWindowId, request, response);\n        final int timeout = getPortletRenderTimeout(portletWindowId, request);\n        final PortletRenderResult portletRenderResult = tracker.get(timeout);\n        \n        if (portletRenderResult == null) {\n            return null;\n        }\n        \n        return portletRenderResult.getTitle();\n    }","commit_id":"4f4afade25a29757982bd04514c979e096c74ac9","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Starts the specified portlet rendering, returns immediately.\n     */\n    public void startPortletRender(String subscribeId, HttpServletRequest request, HttpServletResponse response) {\n        final IPortletWindow portletWindow = this.getDefaultPortletWindow(subscribeId, request);\n        \n        this.startPortletRenderInternal(portletWindow.getPortletWindowId(), request, response);\n    }","id":7897,"modified_method":"/**\n     * Starts the specified portlet rendering, returns immediately.\n     */\n    public void startPortletRender(String subscribeId, HttpServletRequest request, HttpServletResponse response) {\n        final IPortletWindow portletWindow;\n        try {\n            portletWindow = this.getDefaultPortletWindow(subscribeId, request);\n        }\n        catch (DataRetrievalFailureException e) {\n            this.logger.warn(\"Failed to start portlet rendering: \" + subscribeId, e);\n            //probably from a channel that isn't a portlet\n            return;\n        }\n        \n        this.startPortletRenderInternal(portletWindow.getPortletWindowId(), request, response);\n    }","commit_id":"4f4afade25a29757982bd04514c979e096c74ac9","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected IPortletWindow getDefaultPortletWindow(String subscribeId, HttpServletRequest request) {\n        final IUserInstance userInstance = this.userInstanceManager.getUserInstance(request);\n        final IPortletEntity portletEntity = this.portletEntityRegistry.getOrCreatePortletEntity(userInstance, subscribeId);\n        final IPortletWindow portletWindow = this.portletWindowRegistry.getOrCreateDefaultPortletWindow(request, portletEntity.getPortletEntityId());\n        return portletWindow;\n    }","id":7898,"modified_method":"protected IPortletWindow getDefaultPortletWindow(String subscribeId, HttpServletRequest request) {\n        try {\n            final IUserInstance userInstance = this.userInstanceManager.getUserInstance(request);\n            final IPortletEntity portletEntity = this.portletEntityRegistry.getOrCreatePortletEntity(userInstance, subscribeId);\n            final IPortletWindow portletWindow = this.portletWindowRegistry.getOrCreateDefaultPortletWindow(request, portletEntity.getPortletEntityId());\n            return portletWindow;\n        }\n        catch (RuntimeException re) {\n            throw new DataRetrievalFailureException(\"Could not find IPortletWindow for subscribe id '\" + subscribeId + \"'\", re);\n        }\n    }","commit_id":"4f4afade25a29757982bd04514c979e096c74ac9","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Gets the title for the specified portlet\n     */\n    public String getPortletTitle(String subscribeId, HttpServletRequest request, HttpServletResponse response) {\n        final IPortletWindow portletWindow = this.getDefaultPortletWindow(subscribeId, request);\n        return this.getPortletTitle(portletWindow.getPortletWindowId(), request, response);\n    }","id":7899,"modified_method":"/**\n     * Gets the title for the specified portlet\n     */\n    public String getPortletTitle(String subscribeId, HttpServletRequest request, HttpServletResponse response) {\n        final IPortletWindow portletWindow;\n        try {\n            portletWindow = this.getDefaultPortletWindow(subscribeId, request);\n        }\n        catch (DataRetrievalFailureException e) {\n            this.logger.warn(\"Failed to get portlet title: \" + subscribeId, e);\n            //probably from a channel that isn't a portlet\n            return null;\n        }\n\n        return this.getPortletTitle(portletWindow.getPortletWindowId(), request, response);\n    }","commit_id":"4f4afade25a29757982bd04514c979e096c74ac9","url":"https://github.com/Jasig/uPortal"},{"original_method":"public V get(long timeout) {\n            try {\n                //TODO we probably don't want to wait here forever for the worker to start, what is a reasonable wait time?\n                final long startTime = this.waitForStart();\n                return this.future.get(timeout - (System.currentTimeMillis() - startTime), TimeUnit.MILLISECONDS);\n            }\n            catch (InterruptedException e) {\n                // TODO ErrorPortlet handling an unhandled exception from the portlet\n                this.logger.warn(\"Execution failed on portlet \" + this.portletWindowId, e);\n                throw new RuntimeException(\"Portlet window id \" + this.portletWindowId + \" failed execution due to an exception.\", e);\n            }\n            catch (ExecutionException e) {\n                // TODO ErrorPortlet handling an unhandled exception from the portlet\n                this.logger.warn(\"Execution failed on portlet \" + this.portletWindowId, e);\n                throw new RuntimeException(\"Portlet window id \" + this.portletWindowId + \" failed execution due to an exception.\", e);\n            }\n            catch (TimeoutException e) {\n                // TODO ErrorPortlet handling a timeout from the portlet\n                /*\n                 * timeout handling\n                 *  render ErrorPortlet\n                 *  mark soft-timeout in request/response, this only allows content output\n                 *  wait for configured grace period\n                 *  mark hard-timeout in request/response, any API fails\n                 *  call future.cancel(true)\n                 */\n                this.logger.warn(\"Execution failed on portlet \" + this.portletWindowId, e);\n                this.future.cancel(true);\n                throw new RuntimeException(\"Portlet window id \" + this.portletWindowId + \" failed execution due to timeout.\", e);\n            }\n        }","id":7900,"modified_method":"public V get(long timeout) {\n            try {\n                //TODO we probably don't want to wait here forever for the worker to start, what is a reasonable wait time?\n                final long startTime = this.waitForStart();\n                return this.future.get(timeout - (System.currentTimeMillis() - startTime), TimeUnit.MILLISECONDS);\n            }\n            catch (InterruptedException e) {\n                // TODO ErrorPortlet handling an unhandled exception from the portlet\n                this.logger.warn(\"Execution failed on portlet \" + this.portletWindowId, e);\n//                throw new RuntimeException(\"Portlet window id \" + this.portletWindowId + \" failed execution due to an exception.\", e);\n                return null;\n            }\n            catch (ExecutionException e) {\n                // TODO ErrorPortlet handling an unhandled exception from the portlet\n                this.logger.warn(\"Execution failed on portlet \" + this.portletWindowId, e);\n//                throw new RuntimeException(\"Portlet window id \" + this.portletWindowId + \" failed execution due to an exception.\", e);\n                return null;\n            }\n            catch (TimeoutException e) {\n                // TODO ErrorPortlet handling a timeout from the portlet\n                /*\n                 * timeout handling\n                 *  render ErrorPortlet\n                 *  mark soft-timeout in request/response, this only allows content output\n                 *  wait for configured grace period\n                 *  mark hard-timeout in request/response, any API fails\n                 *  call future.cancel(true)\n                 */\n                this.logger.warn(\"Execution failed on portlet \" + this.portletWindowId, e);\n                this.future.cancel(true);\n//                throw new RuntimeException(\"Portlet window id \" + this.portletWindowId + \" failed execution due to timeout.\", e);\n                return null;\n            }\n        }","commit_id":"4f4afade25a29757982bd04514c979e096c74ac9","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void outputPortlet(String subscribeId, HttpServletRequest request, HttpServletResponse response, Writer writer) throws IOException {\n        final IPortletWindow portletWindow = this.getDefaultPortletWindow(subscribeId, request);\n        this.outputPortlet(portletWindow.getPortletWindowId(), request, response, writer);\n    }","id":7901,"modified_method":"public void outputPortlet(String subscribeId, HttpServletRequest request, HttpServletResponse response, Writer writer) throws IOException {\n        final IPortletWindow portletWindow;\n        try {\n            portletWindow = this.getDefaultPortletWindow(subscribeId, request);\n        }\n        catch (DataRetrievalFailureException e) {\n            this.logger.warn(\"Failed to output portlet: \" + subscribeId, e);\n            //probably from a channel that isn't a portlet\n            return;\n        }\n\n        this.outputPortlet(portletWindow.getPortletWindowId(), request, response, writer);\n    }","commit_id":"4f4afade25a29757982bd04514c979e096c74ac9","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchSpaces(String keywords, String wikiName, boolean hasProgrammingRights, int number)\n        throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            f.format(\"select distinct doc.space from XWikiDocument as doc where upper(doc.space) like :keywords \");\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.space asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' order by doc.space asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n            queryResult =\n                queryManager.createQuery(query, Query.XWQL)\n                    .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number).execute();\n\n            for (Object object : queryResult) {\n\n                String spaceName = (String) object;\n\n                SearchResult searchResult = objectFactory.createSearchResult();\n                searchResult.setType(\"space\");\n                searchResult.setId(String.format(\"%s:%s\", wikiName, spaceName));\n                searchResult.setWiki(wikiName);\n                searchResult.setSpace(spaceName);\n\n                /* Add a link to the space information */\n                Link spaceLink = new Link();\n                spaceLink.setRel(Relations.SPACE);\n                String spaceUri =\n                    UriBuilder.fromUri(uriInfo.getBaseUri()).path(SpaceResource.class).build(wikiName, spaceName)\n                        .toString();\n                spaceLink.setHref(spaceUri);\n                searchResult.getLinks().add(spaceLink);\n\n                /* Add a link to the webhome if it exists */\n                String webHomePageId = Utils.getPageId(wikiName, spaceName, \"WebHome\");\n                if (Utils.getXWikiApi(componentManager).exists(webHomePageId)\n                    && Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", webHomePageId)) {\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, \"WebHome\").toString();\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.HOME);\n                    searchResult.getLinks().add(pageLink);\n                }\n\n                result.add(searchResult);\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7902,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchSpaces(String keywords, String wikiName, boolean hasProgrammingRights, int number, int start)\n        throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            f.format(\"select distinct doc.space from XWikiDocument as doc where upper(doc.space) like :keywords \");\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.space asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' order by doc.space asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n            queryResult =\n                queryManager.createQuery(query, Query.XWQL)\n                    .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number).setOffset(start).execute();\n\n            for (Object object : queryResult) {\n\n                String spaceName = (String) object;\n                Document spaceDoc = Utils.getXWikiApi(componentManager).getDocument(spaceName + \".WebHome\");\n                String title = spaceDoc.getDisplayTitle();\n                \n                SearchResult searchResult = objectFactory.createSearchResult();\n                searchResult.setType(\"space\");\n                searchResult.setId(String.format(\"%s:%s\", wikiName, spaceName));\n                searchResult.setWiki(wikiName);\n                searchResult.setSpace(spaceName);\n                searchResult.setTitle(title);\n\n                /* Add a link to the space information */\n                Link spaceLink = new Link();\n                spaceLink.setRel(Relations.SPACE);\n                String spaceUri =\n                    UriBuilder.fromUri(uriInfo.getBaseUri()).path(SpaceResource.class).build(wikiName, spaceName)\n                        .toString();\n                spaceLink.setHref(spaceUri);\n                searchResult.getLinks().add(spaceLink);\n\n                /* Add a link to the webhome if it exists */\n                String webHomePageId = Utils.getPageId(wikiName, spaceName, \"WebHome\");\n                if (Utils.getXWikiApi(componentManager).exists(webHomePageId)\n                    && Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", webHomePageId)) {\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, \"WebHome\").toString();\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.HOME);\n                    searchResult.getLinks().add(pageLink);\n                }\n\n                result.add(searchResult);\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"1ad271294a1876626eff2c473f570cd9dbb6c7b2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. See {@link SearchScope} for more information.\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws QueryException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> search(List<SearchScope> searchScopes, String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number) throws IllegalArgumentException, UriBuilderException, QueryException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            result.addAll(searchPages(searchScopes, keywords, wikiName, space, hasProgrammingRights, number));\n\n            if (searchScopes.contains(SearchScope.SPACES)) {\n                result.addAll(searchSpaces(keywords, wikiName, hasProgrammingRights, number));\n            }\n\n            if (searchScopes.contains(SearchScope.OBJECTS)) {\n                result.addAll(searchObjects(keywords, wikiName, space, hasProgrammingRights, number));\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7903,"modified_method":"/**\n     * Search for keyword in the given scopes. See {@link SearchScope} for more information.\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws QueryException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> search(List<SearchScope> searchScopes, String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number, int start, boolean distinct) throws IllegalArgumentException, UriBuilderException, QueryException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            result.addAll(searchPages(searchScopes, keywords, wikiName, space, hasProgrammingRights, number, start));\n\n            if (searchScopes.contains(SearchScope.SPACES)) {\n                result.addAll(searchSpaces(keywords, wikiName, hasProgrammingRights, number, start));\n            }\n\n            if (searchScopes.contains(SearchScope.OBJECTS)) {\n                result.addAll(searchObjects(keywords, wikiName, space, hasProgrammingRights, number, start));\n            }\n\n            if (searchScopes.contains(SearchScope.XWQL)) {\n                result.addAll(searchQuery(keywords, Query.XWQL, wikiName, space, hasProgrammingRights, number, start, distinct));\n            }\n\n            if (searchScopes.contains(SearchScope.HQL)) {\n                result.addAll(searchQuery(keywords, Query.HQL, wikiName, space, hasProgrammingRights, number, start, distinct));\n            }\n\n            if (searchScopes.contains(SearchScope.LUCENE)) {\n                result.addAll(searchLucene(keywords, wikiName, space, hasProgrammingRights, number, start, distinct));\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"1ad271294a1876626eff2c473f570cd9dbb6c7b2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Objects.\n     * \n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchObjects(String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number) throws QueryException, IllegalArgumentException, UriBuilderException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where doc.space = :space and obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.fullName asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String className = (String) fields[3];\n                int objectNumber = (Integer) fields[4];\n\n                String id = Utils.getObjectId(wikiName, spaceName, pageName, className, objectNumber);\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"object\");\n                    searchResult.setId(id);\n                    searchResult.setPageFullName(Utils.getPageFullName(wikiName, spaceName, pageName));\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setClassName(className);\n                    searchResult.setObjectNumber(objectNumber);\n\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, pageName).toString();\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    String objectUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class)\n                            .build(wikiName, spaceName, pageName, className, objectNumber).toString();\n                    Link objectLink = new Link();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    searchResult.getLinks().add(objectLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7904,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Objects.\n     * \n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchObjects(String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number, int start) throws QueryException, IllegalArgumentException, UriBuilderException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where doc.space = :space and obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.fullName asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String className = (String) fields[3];\n                int objectNumber = (Integer) fields[4];\n\n                String id = Utils.getObjectId(wikiName, spaceName, pageName, className, objectNumber);\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                \tDocument doc = Utils.getXWikiApi(componentManager).getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"object\");\n                    searchResult.setId(id);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setClassName(className);\n                    searchResult.setObjectNumber(objectNumber);\n\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, pageName).toString();\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    String objectUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class)\n                            .build(wikiName, spaceName, pageName, className, objectNumber).toString();\n                    Link objectLink = new Link();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    searchResult.getLinks().add(objectLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"1ad271294a1876626eff2c473f570cd9dbb6c7b2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchPages(List<SearchScope> searchScopes, String keywords, String wikiName,\n        String space, boolean hasProgrammingRights, int number) throws QueryException, IllegalArgumentException,\n        UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where doc.space = :space and ( \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where ( \");\n            }\n\n            /* Look for scopes related to pages */\n            int acceptedScopes = 0;\n            for (int i = 0; i < searchScopes.size(); i++) {\n                SearchScope scope = searchScopes.get(i);\n\n                switch (scope) {\n                    case CONTENT:\n                        f.format(\"upper(doc.content) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case NAME:\n                        f.format(\"upper(doc.fullName) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case TITLE:\n                        f.format(\"upper(doc.title) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                }\n\n                if (i != searchScopes.size() - 1) {\n                    f.format(\" or \");\n                }\n            }\n\n            /* If we don't find any scope related to pages then return empty results */\n            if (acceptedScopes == 0) {\n                return result;\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\") order by doc.fullName asc\");\n            } else {\n                f.format(\") and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(Utils.getPageFullName(wikiName, spaceName, pageName));\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n\n                    String pageUri = null;\n                    try {\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\")).toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageTranslationResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\"), language).toString();\n                        }\n                    } catch (UnsupportedEncodingException ex) {\n                        // This should never happen, UTF-8 is always valid.\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7905,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchPages(List<SearchScope> searchScopes, String keywords, String wikiName,\n        String space, boolean hasProgrammingRights, int number, int start) throws QueryException, IllegalArgumentException,\n        UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where doc.space = :space and ( \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where ( \");\n            }\n\n            /* Look for scopes related to pages */\n            int acceptedScopes = 0;\n            for (int i = 0; i < searchScopes.size(); i++) {\n                SearchScope scope = searchScopes.get(i);\n\n                switch (scope) {\n                    case CONTENT:\n                        f.format(\"upper(doc.content) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case NAME:\n                        f.format(\"upper(doc.fullName) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case TITLE:\n                        f.format(\"upper(doc.title) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                }\n\n                if (i != searchScopes.size() - 1) {\n                    f.format(\" or \");\n                }\n            }\n\n            /* If we don't find any scope related to pages then return empty results */\n            if (acceptedScopes == 0) {\n                return result;\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\") order by doc.fullName asc\");\n            } else {\n                f.format(\") and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).setOffset(start).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number).setOffset(start)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                    Document doc = Utils.getXWikiApi(componentManager).getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n\n                    String pageUri = null;\n                    try {\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\")).toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageTranslationResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\"), language).toString();\n                        }\n                    } catch (UnsupportedEncodingException ex) {\n                        // This should never happen, UTF-8 is always valid.\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"1ad271294a1876626eff2c473f570cd9dbb6c7b2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void fillPageSummary(PageSummary pageSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, boolean useVersion, XWiki xwikiApi) throws XWikiException\n    {\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(createTranslations(objectFactory, baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntaxId());\n\n        Document parent = Utils.getParentDocument(doc, xwikiApi);\n        pageSummary.setParent(doc.getParent());\n        // parentId must not be set if the parent document does not exist.\n        if (parent != null && !parent.isNew()) {\n            pageSummary.setParentId(parent.getPrefixedFullName());\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        String spaceUri =\n            UriBuilder.fromUri(baseUri).path(SpaceResource.class).build(doc.getWiki(), doc.getSpace()).toString();\n        Link spaceLink = objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parent != null) {\n            String parentUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class)\n                    .build(parent.getWiki(), parent.getSpace(), parent.getName()).toString();\n            Link parentLink = objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri =\n            UriBuilder.fromUri(baseUri).path(PageHistoryResource.class)\n                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n        Link historyLink = objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri =\n                UriBuilder.fromUri(baseUri).path(PageChildrenResource.class)\n                    .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            Link pageChildrenLink = objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link commentsLink = objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link attachmentsLink = objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n            Link objectsLink = objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri =\n                    UriBuilder.fromUri(baseUri).path(PageTagsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link tagsLink = objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = UriBuilder.fromUri(baseUri).path(SyntaxesResource.class).build().toString();\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }","id":7906,"modified_method":"private static void fillPageSummary(PageSummary pageSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, boolean useVersion, XWiki xwikiApi) throws XWikiException\n    {\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(createTranslations(objectFactory, baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntaxId());\n        pageSummary.setVersion(doc.getVersion());\n\n        Document parent = Utils.getParentDocument(doc, xwikiApi);\n        pageSummary.setParent(doc.getParent());\n        // parentId must not be set if the parent document does not exist.\n        if (parent != null && !parent.isNew()) {\n            pageSummary.setParentId(parent.getPrefixedFullName());\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        String spaceUri =\n            UriBuilder.fromUri(baseUri).path(SpaceResource.class).build(doc.getWiki(), doc.getSpace()).toString();\n        Link spaceLink = objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parent != null) {\n            String parentUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class)\n                    .build(parent.getWiki(), parent.getSpace(), parent.getName()).toString();\n            Link parentLink = objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri =\n            UriBuilder.fromUri(baseUri).path(PageHistoryResource.class)\n                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n        Link historyLink = objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri =\n                UriBuilder.fromUri(baseUri).path(PageChildrenResource.class)\n                    .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            Link pageChildrenLink = objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link commentsLink = objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link attachmentsLink = objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n            Link objectsLink = objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri =\n                    UriBuilder.fromUri(baseUri).path(PageTagsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link tagsLink = objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = UriBuilder.fromUri(baseUri).path(SyntaxesResource.class).build().toString();\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }","commit_id":"1ad271294a1876626eff2c473f570cd9dbb6c7b2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void fillObjectSummary(ObjectSummary objectSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, BaseObject xwikiObject) throws XWikiException\n    {\n        objectSummary.setId(String.format(\"%s:%s\", doc.getPrefixedFullName(), xwikiObject.getGuid()));\n        objectSummary.setGuid(xwikiObject.getGuid());\n        objectSummary.setPageId(doc.getPrefixedFullName());\n        objectSummary.setWiki(doc.getWiki());\n        objectSummary.setSpace(doc.getSpace());\n        objectSummary.setPageName(doc.getName());\n        objectSummary.setClassName(xwikiObject.getClassName());\n        objectSummary.setNumber(xwikiObject.getNumber());\n\n        String[] propertyNames = xwikiObject.getPropertyNames();\n        if (propertyNames.length > 0) {\n            objectSummary.setHeadline(xwikiObject.get(propertyNames[0]).toFormString());\n        }\n\n    }","id":7907,"modified_method":"private static void fillObjectSummary(ObjectSummary objectSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, BaseObject xwikiObject) throws XWikiException\n    {\n        objectSummary.setId(String.format(\"%s:%s\", doc.getPrefixedFullName(), xwikiObject.getGuid()));\n        objectSummary.setGuid(xwikiObject.getGuid());\n        objectSummary.setPageId(doc.getPrefixedFullName());\n        objectSummary.setPageVersion(doc.getVersion());\n        objectSummary.setWiki(doc.getWiki());\n        objectSummary.setSpace(doc.getSpace());\n        objectSummary.setPageName(doc.getName());\n        objectSummary.setClassName(xwikiObject.getClassName());\n        objectSummary.setNumber(xwikiObject.getNumber());\n\n        String[] propertyNames = xwikiObject.getPropertyNames();\n        if (propertyNames.length > 0) {\n            objectSummary.setHeadline(xwikiObject.get(propertyNames[0]).toFormString());\n        }\n\n    }","commit_id":"1ad271294a1876626eff2c473f570cd9dbb6c7b2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchPages(List<SearchScope> searchScopes, String keywords, String wikiName,\n        String space, boolean hasProgrammingRights, int number) throws QueryException, IllegalArgumentException,\n        UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where doc.space = :space and ( \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where ( \");\n            }\n\n            /* Look for scopes related to pages */\n            int acceptedScopes = 0;\n            for (int i = 0; i < searchScopes.size(); i++) {\n                SearchScope scope = searchScopes.get(i);\n\n                switch (scope) {\n                    case CONTENT:\n                        f.format(\"upper(doc.content) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case NAME:\n                        f.format(\"upper(doc.fullName) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case TITLE:\n                        f.format(\"upper(doc.title) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                }\n\n                if (i != searchScopes.size() - 1) {\n                    f.format(\" or \");\n                }\n            }\n\n            /* If we don't find any scope related to pages then return empty results */\n            if (acceptedScopes == 0) {\n                return result;\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\") order by doc.fullName asc\");\n            } else {\n                f.format(\") and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(Utils.getPageFullName(wikiName, spaceName, pageName));\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n\n                    String pageUri = null;\n                    try {\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\")).toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageTranslationResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\"), language).toString();\n                        }\n                    } catch (UnsupportedEncodingException ex) {\n                        // This should never happen, UTF-8 is always valid.\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7908,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchPages(List<SearchScope> searchScopes, String keywords, String wikiName,\n        String space, boolean hasProgrammingRights, int number, int start) throws QueryException, IllegalArgumentException,\n        UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where doc.space = :space and ( \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc where ( \");\n            }\n\n            /* Look for scopes related to pages */\n            int acceptedScopes = 0;\n            for (int i = 0; i < searchScopes.size(); i++) {\n                SearchScope scope = searchScopes.get(i);\n\n                switch (scope) {\n                    case CONTENT:\n                        f.format(\"upper(doc.content) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case NAME:\n                        f.format(\"upper(doc.fullName) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case TITLE:\n                        f.format(\"upper(doc.title) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                }\n\n                if (i != searchScopes.size() - 1) {\n                    f.format(\" or \");\n                }\n            }\n\n            /* If we don't find any scope related to pages then return empty results */\n            if (acceptedScopes == 0) {\n                return result;\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\") order by doc.fullName asc\");\n            } else {\n                f.format(\") and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).setOffset(start).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number).setOffset(start)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                    Document doc = Utils.getXWikiApi(componentManager).getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n\n                    String pageUri = null;\n                    try {\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\")).toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                UriBuilder.fromUri(this.uriInfo.getBaseUri()).path(PageTranslationResource.class)\n                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                URLEncoder.encode(spaceName, \"UTF-8\"),\n                                URLEncoder.encode(pageName, \"UTF-8\"), language).toString();\n                        }\n                    } catch (UnsupportedEncodingException ex) {\n                        // This should never happen, UTF-8 is always valid.\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"9889a1bc810a799b2cd0e6f67348df01efab9af1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchSpaces(String keywords, String wikiName, boolean hasProgrammingRights, int number)\n        throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            f.format(\"select distinct doc.space from XWikiDocument as doc where upper(doc.space) like :keywords \");\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.space asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' order by doc.space asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n            queryResult =\n                queryManager.createQuery(query, Query.XWQL)\n                    .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number).execute();\n\n            for (Object object : queryResult) {\n\n                String spaceName = (String) object;\n\n                SearchResult searchResult = objectFactory.createSearchResult();\n                searchResult.setType(\"space\");\n                searchResult.setId(String.format(\"%s:%s\", wikiName, spaceName));\n                searchResult.setWiki(wikiName);\n                searchResult.setSpace(spaceName);\n\n                /* Add a link to the space information */\n                Link spaceLink = new Link();\n                spaceLink.setRel(Relations.SPACE);\n                String spaceUri =\n                    UriBuilder.fromUri(uriInfo.getBaseUri()).path(SpaceResource.class).build(wikiName, spaceName)\n                        .toString();\n                spaceLink.setHref(spaceUri);\n                searchResult.getLinks().add(spaceLink);\n\n                /* Add a link to the webhome if it exists */\n                String webHomePageId = Utils.getPageId(wikiName, spaceName, \"WebHome\");\n                if (Utils.getXWikiApi(componentManager).exists(webHomePageId)\n                    && Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", webHomePageId)) {\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, \"WebHome\").toString();\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.HOME);\n                    searchResult.getLinks().add(pageLink);\n                }\n\n                result.add(searchResult);\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7909,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchSpaces(String keywords, String wikiName, boolean hasProgrammingRights, int number, int start)\n        throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            f.format(\"select distinct doc.space from XWikiDocument as doc where upper(doc.space) like :keywords \");\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.space asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' order by doc.space asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n            queryResult =\n                queryManager.createQuery(query, Query.XWQL)\n                    .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number).setOffset(start).execute();\n\n            for (Object object : queryResult) {\n\n                String spaceName = (String) object;\n                Document spaceDoc = Utils.getXWikiApi(componentManager).getDocument(spaceName + \".WebHome\");\n                String title = spaceDoc.getDisplayTitle();\n                \n                SearchResult searchResult = objectFactory.createSearchResult();\n                searchResult.setType(\"space\");\n                searchResult.setId(String.format(\"%s:%s\", wikiName, spaceName));\n                searchResult.setWiki(wikiName);\n                searchResult.setSpace(spaceName);\n                searchResult.setTitle(title);\n\n                /* Add a link to the space information */\n                Link spaceLink = new Link();\n                spaceLink.setRel(Relations.SPACE);\n                String spaceUri =\n                    UriBuilder.fromUri(uriInfo.getBaseUri()).path(SpaceResource.class).build(wikiName, spaceName)\n                        .toString();\n                spaceLink.setHref(spaceUri);\n                searchResult.getLinks().add(spaceLink);\n\n                /* Add a link to the webhome if it exists */\n                String webHomePageId = Utils.getPageId(wikiName, spaceName, \"WebHome\");\n                if (Utils.getXWikiApi(componentManager).exists(webHomePageId)\n                    && Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", webHomePageId)) {\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, \"WebHome\").toString();\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.HOME);\n                    searchResult.getLinks().add(pageLink);\n                }\n\n                result.add(searchResult);\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"9889a1bc810a799b2cd0e6f67348df01efab9af1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. See {@link SearchScope} for more information.\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws QueryException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> search(List<SearchScope> searchScopes, String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number) throws IllegalArgumentException, UriBuilderException, QueryException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            result.addAll(searchPages(searchScopes, keywords, wikiName, space, hasProgrammingRights, number));\n\n            if (searchScopes.contains(SearchScope.SPACES)) {\n                result.addAll(searchSpaces(keywords, wikiName, hasProgrammingRights, number));\n            }\n\n            if (searchScopes.contains(SearchScope.OBJECTS)) {\n                result.addAll(searchObjects(keywords, wikiName, space, hasProgrammingRights, number));\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7910,"modified_method":"/**\n     * Search for keyword in the given scopes. See {@link SearchScope} for more information.\n     * \n     * @param searchScopes\n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws QueryException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> search(List<SearchScope> searchScopes, String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number, int start, boolean distinct) throws IllegalArgumentException, UriBuilderException, QueryException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            result.addAll(searchPages(searchScopes, keywords, wikiName, space, hasProgrammingRights, number, start));\n\n            if (searchScopes.contains(SearchScope.SPACES)) {\n                result.addAll(searchSpaces(keywords, wikiName, hasProgrammingRights, number, start));\n            }\n\n            if (searchScopes.contains(SearchScope.OBJECTS)) {\n                result.addAll(searchObjects(keywords, wikiName, space, hasProgrammingRights, number, start));\n            }\n\n            if (searchScopes.contains(SearchScope.XWQL)) {\n                result.addAll(searchQuery(keywords, Query.XWQL, wikiName, space, hasProgrammingRights, number, start, distinct));\n            }\n\n            if (searchScopes.contains(SearchScope.HQL)) {\n                result.addAll(searchQuery(keywords, Query.HQL, wikiName, space, hasProgrammingRights, number, start, distinct));\n            }\n\n            if (searchScopes.contains(SearchScope.LUCENE)) {\n                result.addAll(searchLucene(keywords, wikiName, space, hasProgrammingRights, number, start, distinct));\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"9889a1bc810a799b2cd0e6f67348df01efab9af1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Objects.\n     * \n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchObjects(String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number) throws QueryException, IllegalArgumentException, UriBuilderException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where doc.space = :space and obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.fullName asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String className = (String) fields[3];\n                int objectNumber = (Integer) fields[4];\n\n                String id = Utils.getObjectId(wikiName, spaceName, pageName, className, objectNumber);\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"object\");\n                    searchResult.setId(id);\n                    searchResult.setPageFullName(Utils.getPageFullName(wikiName, spaceName, pageName));\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setClassName(className);\n                    searchResult.setObjectNumber(objectNumber);\n\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, pageName).toString();\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    String objectUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class)\n                            .build(wikiName, spaceName, pageName, className, objectNumber).toString();\n                    Link objectLink = new Link();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    searchResult.getLinks().add(objectLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":7911,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Objects.\n     * \n     * @param keywords\n     * @param wikiName\n     * @param space\n     * @param hasProgrammingRights\n     * @param number\n     * @return\n     * @throws QueryException\n     * @throws IllegalArgumentException\n     * @throws UriBuilderException\n     * @throws XWikiException\n     */\n    protected List<SearchResult> searchObjects(String keywords, String wikiName, String space,\n        boolean hasProgrammingRights, int number, int start) throws QueryException, IllegalArgumentException, UriBuilderException,\n        XWikiException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where doc.space = :space and obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            }\n\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.fullName asc\");\n            } else {\n                f.format(\" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by doc.fullName asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                        .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                        .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                        .execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String className = (String) fields[3];\n                int objectNumber = (Integer) fields[4];\n\n                String id = Utils.getObjectId(wikiName, spaceName, pageName, className, objectNumber);\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                if (Utils.getXWikiApi(componentManager).hasAccessLevel(\"view\", pageId)) {\n                \tDocument doc = Utils.getXWikiApi(componentManager).getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"object\");\n                    searchResult.setId(id);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setClassName(className);\n                    searchResult.setObjectNumber(objectNumber);\n\n                    String pageUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                            .build(wikiName, spaceName, pageName).toString();\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    String objectUri =\n                        UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class)\n                            .build(wikiName, spaceName, pageName, className, objectNumber).toString();\n                    Link objectLink = new Link();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    searchResult.getLinks().add(objectLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"9889a1bc810a799b2cd0e6f67348df01efab9af1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void fillPageSummary(PageSummary pageSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, boolean useVersion, XWiki xwikiApi) throws XWikiException\n    {\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(createTranslations(objectFactory, baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntaxId());\n\n        Document parent = Utils.getParentDocument(doc, xwikiApi);\n        pageSummary.setParent(doc.getParent());\n        // parentId must not be set if the parent document does not exist.\n        if (parent != null && !parent.isNew()) {\n            pageSummary.setParentId(parent.getPrefixedFullName());\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        String spaceUri =\n            UriBuilder.fromUri(baseUri).path(SpaceResource.class).build(doc.getWiki(), doc.getSpace()).toString();\n        Link spaceLink = objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parent != null) {\n            String parentUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class)\n                    .build(parent.getWiki(), parent.getSpace(), parent.getName()).toString();\n            Link parentLink = objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri =\n            UriBuilder.fromUri(baseUri).path(PageHistoryResource.class)\n                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n        Link historyLink = objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri =\n                UriBuilder.fromUri(baseUri).path(PageChildrenResource.class)\n                    .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            Link pageChildrenLink = objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link commentsLink = objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link attachmentsLink = objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n            Link objectsLink = objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri =\n                    UriBuilder.fromUri(baseUri).path(PageTagsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link tagsLink = objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = UriBuilder.fromUri(baseUri).path(SyntaxesResource.class).build().toString();\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }","id":7912,"modified_method":"private static void fillPageSummary(PageSummary pageSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, boolean useVersion, XWiki xwikiApi) throws XWikiException\n    {\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(createTranslations(objectFactory, baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntaxId());\n        pageSummary.setVersion(doc.getVersion());\n\n        Document parent = Utils.getParentDocument(doc, xwikiApi);\n        pageSummary.setParent(doc.getParent());\n        // parentId must not be set if the parent document does not exist.\n        if (parent != null && !parent.isNew()) {\n            pageSummary.setParentId(parent.getPrefixedFullName());\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        String spaceUri =\n            UriBuilder.fromUri(baseUri).path(SpaceResource.class).build(doc.getWiki(), doc.getSpace()).toString();\n        Link spaceLink = objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parent != null) {\n            String parentUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class)\n                    .build(parent.getWiki(), parent.getSpace(), parent.getName()).toString();\n            Link parentLink = objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri =\n            UriBuilder.fromUri(baseUri).path(PageHistoryResource.class)\n                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n        Link historyLink = objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri =\n                UriBuilder.fromUri(baseUri).path(PageChildrenResource.class)\n                    .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            Link pageChildrenLink = objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri =\n                    UriBuilder.fromUri(baseUri).path(CommentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link commentsLink = objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri =\n                    UriBuilder.fromUri(baseUri).path(AttachmentsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link attachmentsLink = objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsAtPageVersionResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri =\n                    UriBuilder.fromUri(baseUri).path(ObjectsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n            Link objectsLink = objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri =\n                    UriBuilder.fromUri(baseUri).path(PageTagsResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link tagsLink = objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = UriBuilder.fromUri(baseUri).path(SyntaxesResource.class).build().toString();\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }","commit_id":"9889a1bc810a799b2cd0e6f67348df01efab9af1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void fillObjectSummary(ObjectSummary objectSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, BaseObject xwikiObject) throws XWikiException\n    {\n        objectSummary.setId(String.format(\"%s:%s\", doc.getPrefixedFullName(), xwikiObject.getGuid()));\n        objectSummary.setGuid(xwikiObject.getGuid());\n        objectSummary.setPageId(doc.getPrefixedFullName());\n        objectSummary.setWiki(doc.getWiki());\n        objectSummary.setSpace(doc.getSpace());\n        objectSummary.setPageName(doc.getName());\n        objectSummary.setClassName(xwikiObject.getClassName());\n        objectSummary.setNumber(xwikiObject.getNumber());\n\n        String[] propertyNames = xwikiObject.getPropertyNames();\n        if (propertyNames.length > 0) {\n            objectSummary.setHeadline(xwikiObject.get(propertyNames[0]).toFormString());\n        }\n\n    }","id":7913,"modified_method":"private static void fillObjectSummary(ObjectSummary objectSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, BaseObject xwikiObject) throws XWikiException\n    {\n        objectSummary.setId(String.format(\"%s:%s\", doc.getPrefixedFullName(), xwikiObject.getGuid()));\n        objectSummary.setGuid(xwikiObject.getGuid());\n        objectSummary.setPageId(doc.getPrefixedFullName());\n        objectSummary.setPageVersion(doc.getVersion());\n        objectSummary.setWiki(doc.getWiki());\n        objectSummary.setSpace(doc.getSpace());\n        objectSummary.setPageName(doc.getName());\n        objectSummary.setClassName(xwikiObject.getClassName());\n        objectSummary.setNumber(xwikiObject.getNumber());\n\n        String[] propertyNames = xwikiObject.getPropertyNames();\n        if (propertyNames.length > 0) {\n            objectSummary.setHeadline(xwikiObject.get(propertyNames[0]).toFormString());\n        }\n\n    }","commit_id":"9889a1bc810a799b2cd0e6f67348df01efab9af1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected String convertContent(String content, RadeoxMacroParameters parameters)\n    {\n        return content;\n    }","id":7914,"modified_method":"protected String convertContent(String content, RadeoxMacroParameters parameters, FilterContext filterContext)\n    {\n        return content;\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String convert(String name, RadeoxMacroParameters parameters, String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        result.append(\"{{\");\n        result.append(convertName(name));\n        if (parameters.size() > 0) {\n            result.append(' ');\n            appendParameters(result, convertParameters(parameters));\n        }\n\n        if (content != null) {\n            result.append(\"}}\");\n\n            String macroContent = convertContent(content, parameters);\n            if (macroContent.indexOf(\"\\n\") != -1) {\n                result.append(\"\\n\" + macroContent + \"\\n\");\n            } else {\n                result.append(macroContent);\n            }\n\n            result.append(\"{{/\");\n            result.append(convertName(name));\n        } else {\n            result.append(\"/\");\n        }\n\n        result.append(\"}}\");\n\n        return result.toString();\n    }","id":7915,"modified_method":"public String convert(String name, RadeoxMacroParameters parameters, String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        result.append(\"{{\");\n        result.append(convertName(name));\n        if (parameters.size() > 0) {\n            result.append(' ');\n            appendParameters(result, convertParameters(parameters));\n        }\n\n        if (content != null) {\n            result.append(\"}}\");\n\n            String macroContent = convertContent(content, parameters, filterContext);\n            if (macroContent.indexOf(\"\\n\") != -1) {\n                result.append(\"\\n\" + macroContent + \"\\n\");\n            } else {\n                result.append(macroContent);\n            }\n\n            result.append(\"{{/\");\n            result.append(convertName(name));\n        } else {\n            result.append(\"/\");\n        }\n\n        result.append(\"}}\");\n\n        return result.toString();\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String, org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = SYNTAX_PATTERN.matcher(content);\n        int current = 0;\n        for (; matcher.find(); current = matcher.end()) {\n            result.append(content.substring(current, matcher.start()));\n\n            String matchedContent = matcher.group(0);\n            for (char c : matchedContent.toCharArray()) {\n                result.append('~');\n                result.append(c);\n            }\n        }\n\n        if (current == 0) {\n            return content;\n        }\n\n        result.append(content.substring(current));\n\n        return result.toString();\n    }","id":7916,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        return SYNTAX_PATTERN.matcher(content).replaceAll(\"~$0\");\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = HTML_PATTERN.matcher(content);\n\n        boolean inHTMLMacro = false;\n        boolean inHTMLComment = false;\n\n        boolean velocityOpenBefore = false;\n        boolean velocityCloseBefore = false;\n\n        StringBuffer htmlContent = new StringBuffer();\n\n        int currentIndex = 0;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            if (!inHTMLMacro) {\n                Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(before);\n                velocityOpenBefore = velocityOpenMatcher.find();\n                Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(before);\n                velocityCloseBefore = velocityCloseMatcher.find();\n\n                result.append(before);\n            } else {\n                htmlContent.append(before);\n            }\n\n            inHTMLMacro = true;\n\n            if (matcher.group(1) != null) {\n                inHTMLComment = true;\n                htmlContent.append(filterContext.addProtectedContent(matcher.group(0)));\n            } else if (inHTMLComment && matcher.group(2) != null) {\n                htmlContent.append(filterContext.addProtectedContent(matcher.group(0)));\n                inHTMLComment = false;\n            } else {\n                htmlContent.append(matcher.group(0));\n            }\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        // clean html content\n        Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(htmlContent);\n        boolean velocityOpen = velocityOpenMatcher.find();\n        String cleanedHtmlContent = velocityOpenMatcher.replaceAll(\"\");\n        Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(cleanedHtmlContent);\n        boolean velocityClose = velocityCloseMatcher.find();\n        cleanedHtmlContent = velocityCloseMatcher.replaceAll(\"\");\n\n        // print the content\n\n        boolean multilines = cleanedHtmlContent.indexOf(\"\\n\") != -1;\n\n        if (velocityOpen) {\n            VelocityFilter.appendVelocityOpen(result, filterContext, multilines);\n        } else if (!velocityOpenBefore || velocityCloseBefore) {\n            appendHTMLOpen(result, filterContext, multilines);\n        }\n\n        result.append(cleanedHtmlContent);\n\n        if (velocityClose) {\n            VelocityFilter.appendVelocityClose(result, filterContext, multilines);\n        } else if (velocityCloseBefore || !velocityOpenBefore) {\n            appendHTMLClose(result, filterContext, multilines);\n        }\n\n        if (currentIndex < content.length()) {\n            result.append(content.substring(currentIndex));\n        }\n\n        return result.toString();\n    }","id":7917,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        char[] array = content.toCharArray();\n\n        HTMLFilterContext context = new HTMLFilterContext(filterContext);\n        StringBuffer nonHTMLContent = new StringBuffer();\n        StringBuffer htmlContent = new StringBuffer();\n\n        boolean inHTMLMacro = false;\n\n        int i = 0;\n        for (; i < array.length;) {\n            char c = array[i];\n\n            context.setConversion(false);\n            context.setElementName(null);\n            context.setType(null);\n            context.setVelocityOpen(false);\n            context.setVelocityClose(false);\n\n            StringBuffer htmlBlock = new StringBuffer();\n\n            if (c == '<') {\n                i = getHTMLBlock(array, i, htmlBlock, context);\n            }\n\n            if (context.isConversion()) {\n                StringBuffer nonHtmlbuffer = inHTMLMacro ? nonHTMLContent : result;\n\n                if (context.isVelocityOpen()) {\n                    VelocityFilter.appendVelocityOpen(nonHtmlbuffer, filterContext, false);\n                }\n\n                nonHtmlbuffer.append(htmlBlock);\n\n                if (context.isVelocityClose()) {\n                    VelocityFilter.appendVelocityClose(nonHtmlbuffer, filterContext, false);\n                }\n            } else if (context.getType() != null) {\n                if (!inHTMLMacro) {\n                    inHTMLMacro = true;\n                } else {\n                    htmlContent.append(nonHTMLContent);\n                    nonHTMLContent.setLength(0);\n                }\n\n                htmlContent.append(htmlBlock);\n            } else {\n                if (!inHTMLMacro) {\n                    result.append(c);\n                } else {\n                    nonHTMLContent.append(c);\n                }\n                ++i;\n            }\n        }\n\n        // remove velocity macro marker from html content\n        String cleanedHtmlContent = htmlContent.toString();\n\n        // velocity open\n        Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(result);\n        boolean velocityOpenBefore = velocityOpenMatcher.find();\n\n        boolean velocityOpen = false;\n        if (!velocityOpenBefore) {\n            velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(cleanedHtmlContent);\n            velocityOpen = velocityOpenMatcher.find();\n            cleanedHtmlContent = velocityOpenMatcher.replaceFirst(\"\");\n        }\n\n        // velocity close\n        Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(result);\n        boolean velocityCloseBefore = velocityCloseMatcher.find();\n\n        boolean velocityClose = false;\n        if (!velocityCloseBefore) {\n            velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(cleanedHtmlContent);\n            velocityClose = velocityCloseMatcher.find();\n            cleanedHtmlContent = velocityCloseMatcher.replaceFirst(\"\");\n        }\n\n        if (cleanedHtmlContent.length() > 0) {\n            boolean multilines = cleanedHtmlContent.indexOf(\"\\n\") != -1;\n\n            // open html content\n            if (velocityOpen) {\n                VelocityFilter.appendVelocityOpen(result, filterContext, multilines);\n            } else if (!velocityOpenBefore || velocityCloseBefore) {\n                appendHTMLOpen(result, filterContext, multilines);\n            }\n\n            // print html content\n            result.append(cleanedHtmlContent);\n\n            // close html content\n            if (velocityClose) {\n                VelocityFilter.appendVelocityClose(result, filterContext, multilines);\n            } else if (!velocityOpenBefore || velocityCloseBefore) {\n                appendHTMLClose(result, filterContext, multilines);\n            }\n        }\n\n        // print end\n        result.append(nonHTMLContent);\n\n        return result.toString();\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = PRE_PATTERN.matcher(content);\n        int currentIndex = 0;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            result.append(before);\n\n            String preContent = matcher.group(1);\n\n            // remove velocity macro marker from pre content\n            Matcher velocityOpenMatcher = VELOCITYOPEN_PATTERN.matcher(preContent);\n            boolean velocityOpen = velocityOpenMatcher.find();\n            preContent = velocityOpenMatcher.replaceAll(\"\");\n            Matcher velocityCloseMatcher = VELOCITYCLOSE_PATTERN.matcher(preContent);\n            boolean velocityClose = velocityCloseMatcher.find();\n            preContent = velocityCloseMatcher.replaceAll(\"\");\n\n            // print pre\n            boolean multilines = preContent.indexOf(\"\\n\") != -1;\n            \n            if (velocityOpen) {\n                VelocityFilter.appendVelocityOpen(result, filterContext, multilines);\n            }\n\n            StringBuffer preBuffer = new StringBuffer();\n\n            preBuffer.append(\"{{{\");\n            preContent = this.standaloneNewLineCleaningFilter.filter(preContent, filterContext);\n            preContent = this.spacesCleaningFilter.filter(preContent, filterContext);\n            preBuffer.append(preContent.trim());\n            preBuffer.append(\"}}}\");\n\n            result.append(filterContext.addProtectedContent(preBuffer.toString(), true));\n\n            if (velocityClose) {\n                VelocityFilter.appendVelocityClose(result, filterContext, multilines);\n            }\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        result.append(content.substring(currentIndex));\n\n        return result.toString();\n    }","id":7918,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = PRE_PATTERN.matcher(content);\n        int currentIndex = 0;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            result.append(before);\n\n            String preContent = matcher.group(1);\n\n            // remove velocity macro marker from pre content\n            Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(preContent);\n            boolean velocityOpen = velocityOpenMatcher.find();\n            preContent = velocityOpenMatcher.replaceAll(\"\");\n            Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(preContent);\n            boolean velocityClose = velocityCloseMatcher.find();\n            preContent = velocityCloseMatcher.replaceAll(\"\");\n\n            // print pre\n            boolean multilines = preContent.indexOf(\"\\n\") != -1;\n            \n            if (velocityOpen) {\n                VelocityFilter.appendVelocityOpen(result, filterContext, multilines);\n            }\n\n            StringBuffer preBuffer = new StringBuffer();\n\n            preBuffer.append(\"{{{\");\n            preContent = this.standaloneNewLineCleaningFilter.filter(preContent, filterContext);\n            preContent = this.spacesCleaningFilter.filter(preContent, filterContext);\n            preBuffer.append(preContent.trim());\n            preBuffer.append(\"}}}\");\n\n            result.append(filterContext.addProtectedContent(preBuffer.toString(), true));\n\n            if (velocityClose) {\n                VelocityFilter.appendVelocityClose(result, filterContext, multilines);\n            }\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        result.append(content.substring(currentIndex));\n\n        return result.toString();\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test XWiki1.0 -> XWiki2.0 conversion\");\n\n        // Velocity\n        suite.addTestsFromResource(\"velocity/velocity1\", false);\n        suite.addTestsFromResource(\"velocity/velocity2\", false);\n        suite.addTestsFromResource(\"velocity/velocity3\", false);\n        suite.addTestsFromResource(\"velocity/velocity4\", false);\n        suite.addTestsFromResource(\"velocity/velocity5\", false);\n        suite.addTestsFromResource(\"velocity/velocity6\", false);\n        suite.addTestsFromResource(\"velocity/velocity7\", false);\n        suite.addTestsFromResource(\"velocity/velocity8\", false);\n        suite.addTestsFromResource(\"velocity/velocity9\", false);\n        suite.addTestsFromResource(\"velocity/velocity10\", false);\n        suite.addTestsFromResource(\"velocity/velocity11\", false);\n        suite.addTestsFromResource(\"velocity/velocity12\", false);\n        suite.addTestsFromResource(\"velocity/velocity13\", false);\n        suite.addTestsFromResource(\"velocity/velocity14\", false);\n        suite.addTestsFromResource(\"velocity/velocity15\", false);\n        suite.addTestsFromResource(\"velocity/velocity16\", false);\n        suite.addTestsFromResource(\"velocity/velocity17\", false);\n        suite.addTestsFromResource(\"velocity/velocity18\", false);\n        suite.addTestsFromResource(\"velocity/velocity19\", false);\n\n        // Escape\n        suite.addTestsFromResource(\"escape/escape1\", false);\n        suite.addTestsFromResource(\"escape/escape2\", false);\n        \n        // Groovy\n        suite.addTestsFromResource(\"groovy/groovy1\", false);\n\n        // Velocity Macros\n        suite.addTestsFromResource(\"macros/velocity/include1\", false);\n        suite.addTestsFromResource(\"macros/velocity/toc1\", false);\n\n        // Radeox Macros\n        suite.addTestsFromResource(\"macros/radeox/attach1\", false);\n        suite.addTestsFromResource(\"macros/radeox/image1\", false);\n        suite.addTestsFromResource(\"macros/radeox/code1\", false);\n        suite.addTestsFromResource(\"macros/radeox/table1\", false);\n        suite.addTestsFromResource(\"macros/radeox/quote1\", false);\n        suite.addTestsFromResource(\"macros/radeox/style1\", false);\n\n        suite.addTestsFromResource(\"pre/pre1\", false);\n        suite.addTestsFromResource(\"pre/pre2\", false);\n\n        // Wiki syntaxes\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"strikeout/strikeout1\", false);\n        suite.addTestsFromResource(\"link/link1\", false);\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        suite.addTestsFromResource(\"hr/hr1\", false);\n\n        // HTML\n        suite.addTestsFromResource(\"html/html1\", false);\n        suite.addTestsFromResource(\"html/html2\", false);\n        suite.addTestsFromResource(\"html/html3\", false);\n        suite.addTestsFromResource(\"html/html4\", false);\n        \n        // Cleaning\n        suite.addTestsFromResource(\"cleaning/cleaning1\", false);\n\n        // Misc\n        suite.addTestsFromResource(\"misc/misc1\", false);\n\n        return new RenderingPlexusTestSetup(suite);\n    }","id":7919,"modified_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test XWiki1.0 -> XWiki2.0 conversion\");\n\n        // Velocity\n        suite.addTestsFromResource(\"velocity/velocity1\", false);\n        suite.addTestsFromResource(\"velocity/velocity2\", false);\n        suite.addTestsFromResource(\"velocity/velocity3\", false);\n        suite.addTestsFromResource(\"velocity/velocity4\", false);\n        suite.addTestsFromResource(\"velocity/velocity5\", false);\n        suite.addTestsFromResource(\"velocity/velocity6\", false);\n        suite.addTestsFromResource(\"velocity/velocity7\", false);\n        suite.addTestsFromResource(\"velocity/velocity8\", false);\n        suite.addTestsFromResource(\"velocity/velocity9\", false);\n        suite.addTestsFromResource(\"velocity/velocity10\", false);\n        suite.addTestsFromResource(\"velocity/velocity11\", false);\n        suite.addTestsFromResource(\"velocity/velocity12\", false);\n        suite.addTestsFromResource(\"velocity/velocity13\", false);\n        suite.addTestsFromResource(\"velocity/velocity14\", false);\n        suite.addTestsFromResource(\"velocity/velocity15\", false);\n        suite.addTestsFromResource(\"velocity/velocity16\", false);\n        suite.addTestsFromResource(\"velocity/velocity17\", false);\n        suite.addTestsFromResource(\"velocity/velocity18\", false);\n        suite.addTestsFromResource(\"velocity/velocity19\", false);\n\n        // Groovy\n        suite.addTestsFromResource(\"groovy/groovy1\", false);\n\n        // Velocity Macros\n        suite.addTestsFromResource(\"macros/velocity/include1\", false);\n        suite.addTestsFromResource(\"macros/velocity/toc1\", false);\n\n        // Radeox Macros\n        suite.addTestsFromResource(\"macros/radeox/attach1\", false);\n        suite.addTestsFromResource(\"macros/radeox/image1\", false);\n        suite.addTestsFromResource(\"macros/radeox/code1\", false);\n        suite.addTestsFromResource(\"macros/radeox/table1\", false);\n        suite.addTestsFromResource(\"macros/radeox/quote1\", false);\n        suite.addTestsFromResource(\"macros/radeox/style1\", false);\n\n        suite.addTestsFromResource(\"pre/pre1\", false);\n        suite.addTestsFromResource(\"pre/pre2\", false);\n\n        // Wiki syntaxes\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"strikeout/strikeout1\", false);\n        suite.addTestsFromResource(\"link/link1\", false);\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        suite.addTestsFromResource(\"hr/hr1\", false);\n\n        // HTML\n        suite.addTestsFromResource(\"html/html1\", false);\n        suite.addTestsFromResource(\"html/html2\", false);\n        suite.addTestsFromResource(\"html/html3\", false);\n        suite.addTestsFromResource(\"html/html4\", false);\n        suite.addTestsFromResource(\"html/html5\", false);\n        suite.addTestsFromResource(\"html/html6\", false);\n        suite.addTestsFromResource(\"html/html7\", false);\n\n        // HTML elements\n        suite.addTestsFromResource(\"macros/html/br1\", false);\n        suite.addTestsFromResource(\"macros/html/div1\", false);\n        suite.addTestsFromResource(\"macros/html/span1\", false);\n\n        // Escape\n        suite.addTestsFromResource(\"escape/escape1\", false);\n        suite.addTestsFromResource(\"escape/escape2\", false);\n        suite.addTestsFromResource(\"escape/escape3\", false);\n\n        // Cleaning\n        suite.addTestsFromResource(\"cleaning/cleaning1\", false);\n\n        // Misc\n        suite.addTestsFromResource(\"misc/misc1\", false);\n\n        return new RenderingPlexusTestSetup(suite);\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.macro.AbstractRadeoxMacroConverter#convertParameters(org.xwiki.rendering.parser.xwiki10.macro.RadeoxMacroParameters)\n     */\n    @Override\n    protected Map<String, String> convertParameters(RadeoxMacroParameters parameters)\n    {\n        Map<String, String> boxParameters = new HashMap<String, String>();\n\n        RadeoxMacroParameter classes = parameters.get(\"class\");\n        RadeoxMacroParameter icon = parameters.get(\"icon\");\n        RadeoxMacroParameter id = parameters.get(\"id\");\n        RadeoxMacroParameter align = parameters.get(\"align\");\n        RadeoxMacroParameter name = parameters.get(\"name\");\n        RadeoxMacroParameter size = parameters.get(\"font-size\");\n        RadeoxMacroParameter font = parameters.get(\"font-family\");\n        RadeoxMacroParameter color = parameters.get(\"color\");\n        RadeoxMacroParameter bgcolor = parameters.get(\"background-color\");\n        RadeoxMacroParameter fl = parameters.get(\"float\");\n        RadeoxMacroParameter width = parameters.get(\"width\");\n        RadeoxMacroParameter height = parameters.get(\"height\");\n        RadeoxMacroParameter border = parameters.get(\"border\");\n\n        // add class support\n        if ((!\"none\".equals(classes)) && (classes != null) && !StringUtils.isEmpty(classes.getValue().trim())) {\n            boxParameters.put(\"class\", classes.getValue().trim());\n        } else if ((!\"none\".equals(icon)) && (icon != null) && !StringUtils.isEmpty(icon.getValue().trim())) {\n            boxParameters.put(\"class\", \"stylemacro\");\n        }\n\n        // add id support\n        if ((!\"none\".equals(id)) && (id != null) && !StringUtils.isEmpty(id.getValue())) {\n            boxParameters.put(\"id\", id.getValue().trim());\n        }\n\n        // add name support\n        if ((!\"none\".equals(name)) && (name != null) && !StringUtils.isEmpty(name.getValue())) {\n            boxParameters.put(\"name\", name.getValue().trim());\n        }\n\n        // add align support\n        if ((!\"none\".equals(align)) && (align != null) && !StringUtils.isEmpty(align.getValue())) {\n            boxParameters.put(\"align\", align.getValue().trim());\n        }\n\n        // add style support\n        StringBuffer styleStr = new StringBuffer();\n\n        if ((!\"none\".equals(size)) && (size != null) && !StringUtils.isEmpty(size.getValue())) {\n            styleStr.append(\"font-size:\" + size.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(font)) && (font != null) && !StringUtils.isEmpty(font.getValue().trim())) {\n            styleStr.append(\"font-family:\" + font.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(color)) && (color != null) && !StringUtils.isEmpty(color.getValue().trim())) {\n            styleStr.append(\"color:\" + color.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(bgcolor)) && (bgcolor != null) && !StringUtils.isEmpty(bgcolor.getValue().trim())) {\n            styleStr.append(\"background-color:\" + bgcolor.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(width)) && (width != null) && !StringUtils.isEmpty(width.getValue().trim())) {\n            styleStr.append(\"width:\" + width.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(fl)) && (fl != null) && !StringUtils.isEmpty(fl.getValue().trim())) {\n            styleStr.append(\"float:\" + fl.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(height)) && (height != null) && !StringUtils.isEmpty(height.getValue().trim())) {\n            styleStr.append(\"height:\" + height.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(border)) && (border != null) && !StringUtils.isEmpty(border.getValue().trim())) {\n            styleStr.append(\"border:\" + border.getValue().trim() + \"; \");\n        }\n\n        if (styleStr.length() > 0) {\n            boxParameters.put(\"style\", styleStr.toString());\n        }\n\n        return boxParameters;\n    }","id":7920,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.macro.AbstractRadeoxMacroConverter#convertParameters(org.xwiki.rendering.parser.xwiki10.macro.RadeoxMacroParameters)\n     */\n    @Override\n    protected Map<String, String> convertParameters(RadeoxMacroParameters parameters)\n    {\n        Map<String, String> boxParameters = new LinkedHashMap<String, String>();\n\n        RadeoxMacroParameter classes = parameters.get(\"class\");\n        RadeoxMacroParameter icon = parameters.get(\"icon\");\n        RadeoxMacroParameter id = parameters.get(\"id\");\n        RadeoxMacroParameter align = parameters.get(\"align\");\n        RadeoxMacroParameter name = parameters.get(\"name\");\n        RadeoxMacroParameter size = parameters.get(\"font-size\");\n        RadeoxMacroParameter font = parameters.get(\"font-family\");\n        RadeoxMacroParameter color = parameters.get(\"color\");\n        RadeoxMacroParameter bgcolor = parameters.get(\"background-color\");\n        RadeoxMacroParameter fl = parameters.get(\"float\");\n        RadeoxMacroParameter width = parameters.get(\"width\");\n        RadeoxMacroParameter height = parameters.get(\"height\");\n        RadeoxMacroParameter border = parameters.get(\"border\");\n\n        // add class support\n        if ((!\"none\".equals(classes)) && (classes != null) && !StringUtils.isEmpty(classes.getValue().trim())) {\n            boxParameters.put(\"class\", classes.getValue().trim());\n        } else if ((!\"none\".equals(icon)) && (icon != null) && !StringUtils.isEmpty(icon.getValue().trim())) {\n            boxParameters.put(\"class\", \"stylemacro\");\n        }\n\n        // add id support\n        if ((!\"none\".equals(id)) && (id != null) && !StringUtils.isEmpty(id.getValue())) {\n            boxParameters.put(\"id\", id.getValue().trim());\n        }\n\n        // add name support\n        if ((!\"none\".equals(name)) && (name != null) && !StringUtils.isEmpty(name.getValue())) {\n            boxParameters.put(\"name\", name.getValue().trim());\n        }\n\n        // add align support\n        if ((!\"none\".equals(align)) && (align != null) && !StringUtils.isEmpty(align.getValue())) {\n            boxParameters.put(\"align\", align.getValue().trim());\n        }\n\n        // add style support\n        StringBuffer styleStr = new StringBuffer();\n\n        if ((!\"none\".equals(size)) && (size != null) && !StringUtils.isEmpty(size.getValue())) {\n            styleStr.append(\"font-size:\" + size.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(font)) && (font != null) && !StringUtils.isEmpty(font.getValue().trim())) {\n            styleStr.append(\"font-family:\" + font.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(color)) && (color != null) && !StringUtils.isEmpty(color.getValue().trim())) {\n            styleStr.append(\"color:\" + color.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(bgcolor)) && (bgcolor != null) && !StringUtils.isEmpty(bgcolor.getValue().trim())) {\n            styleStr.append(\"background-color:\" + bgcolor.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(width)) && (width != null) && !StringUtils.isEmpty(width.getValue().trim())) {\n            styleStr.append(\"width:\" + width.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(fl)) && (fl != null) && !StringUtils.isEmpty(fl.getValue().trim())) {\n            styleStr.append(\"float:\" + fl.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(height)) && (height != null) && !StringUtils.isEmpty(height.getValue().trim())) {\n            styleStr.append(\"height:\" + height.getValue().trim() + \"; \");\n        }\n        if ((!\"none\".equals(border)) && (border != null) && !StringUtils.isEmpty(border.getValue().trim())) {\n            styleStr.append(\"border:\" + border.getValue().trim() + \"; \");\n        }\n\n        if (styleStr.length() > 0) {\n            boxParameters.put(\"style\", styleStr.toString());\n        }\n\n        return boxParameters;\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String convert(String name, RadeoxMacroParameters parameters, String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        boolean inline = parameters.get(\"type\") != null && parameters.get(\"type\").getValue().equals(\"span\");\n\n        // Print parameters\n        StringBuffer parametersOpen = new StringBuffer();\n        Map<String, String> styleParameters = convertParameters(parameters);\n        if (styleParameters.size() > 0) {\n            parametersOpen.append(\"(% \");\n            appendParameters(parametersOpen, styleParameters);\n            parametersOpen.append(\" %)\");\n            result.append(filterContext.addProtectedContent(parametersOpen.toString(), inline));\n        }\n\n        if (!inline) {\n            // Open standalone group\n            result.append(filterContext.addProtectedContent(\"(((\", false));\n        }\n\n        // Print content\n        result.append(convertContent(content, parameters));\n\n        // Print group close\n        if (inline) {\n            // Close inline group\n            result.append(filterContext.addProtectedContent(\"(%%)\", true));\n        } else {\n            // Close standalone group\n            result.append(filterContext.addProtectedContent(\")))\", false));\n        }\n\n        return result.toString();\n    }","id":7921,"modified_method":"@Override\n    public String convert(String name, RadeoxMacroParameters parameters, String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        boolean inline = parameters.get(\"type\") != null && parameters.get(\"type\").getValue().equals(\"span\");\n\n        // Print parameters\n        StringBuffer parametersOpen = new StringBuffer();\n        Map<String, String> styleParameters = convertParameters(parameters);\n        if (styleParameters.size() > 0) {\n            parametersOpen.append(\"(% \");\n            appendParameters(parametersOpen, styleParameters);\n            parametersOpen.append(\" %)\");\n            result.append(filterContext.addProtectedContent(parametersOpen.toString(), inline));\n        }\n\n        if (!inline) {\n            // Open standalone group\n            result.append(filterContext.addProtectedContent(\"(((\", false));\n        }\n\n        // Print content\n        result.append(convertContent(content.trim(), parameters, filterContext));\n\n        // Print group close\n        if (inline) {\n            // Close inline group\n            result.append(filterContext.addProtectedContent(\"(%%)\", true));\n        } else {\n            // Close standalone group\n            result.append(filterContext.addProtectedContent(\")))\", false));\n        }\n\n        return result.toString();\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void appendIcon(StringBuffer result, RadeoxMacroParameters parameters)\n    {\n        RadeoxMacroParameter document = parameters.get(\"document\");\n        RadeoxMacroParameter icon = parameters.get(\"icon\");\n        boolean hasIcon = false;\n\n        if (document != null && document.getValue().contains(\"=\")) {\n            document = null;\n        }\n\n        if ((!\"none\".equals(icon)) && (icon != null) && !StringUtils.isEmpty(icon.getValue().trim())) {\n            hasIcon = true;\n        }\n\n        // add icon support\n        if (hasIcon) {\n            result.append(\"image:\");\n            if (document != null) {\n                result.append(document + \"@\" + icon);\n            } else {\n                result.append(icon.getValue().trim());\n            }\n        }\n    }","id":7922,"modified_method":"private void appendIcon(StringBuffer result, RadeoxMacroParameters parameters, FilterContext filterContext)\n    {\n        RadeoxMacroParameter document = parameters.get(\"document\");\n        RadeoxMacroParameter icon = parameters.get(\"icon\");\n        boolean hasIcon = false;\n\n        if (document != null && document.getValue().contains(\"=\")) {\n            document = null;\n        }\n\n        if ((!\"none\".equals(icon)) && (icon != null) && !StringUtils.isEmpty(icon.getValue().trim())) {\n            hasIcon = true;\n        }\n\n        // add icon support\n        if (hasIcon) {\n            result.append(filterContext.addProtectedContent(\"image:\", true));\n            if (document != null) {\n                result.append(document + \"@\" + icon);\n            } else {\n                result.append(icon.getValue().trim());\n            }\n        }\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String convertContent(String content, RadeoxMacroParameters parameters)\n    {\n        StringBuffer result = new StringBuffer();\n\n        // Print icon\n        appendIcon(result, parameters);\n\n        // Print content\n        result.append(content);\n\n        return result.toString();\n    }","id":7923,"modified_method":"@Override\n    protected String convertContent(String content, RadeoxMacroParameters parameters, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        // Print icon\n        appendIcon(result, parameters, filterContext);\n\n        if (content.length() > 0) {\n            result.append(' ');\n        }\n\n        // Print content\n        result.append(content);\n\n        return result.toString();\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void convertMacro(String name, List<String> parameters, StringBuffer macroBlock,\n        VelocityFilterContext context)\n    {\n        context.setVelocity(true);\n\n        try {\n            VelocityMacroConverter currentMacro =\n                (VelocityMacroConverter) this.componentManager.lookup(VelocityMacroConverter.class, name);\n\n            String convertedMacro = currentMacro.convert(name, parameters);\n\n            // Apply conversion\n            macroBlock.setLength(0);\n            macroBlock.append(convertedMacro);\n\n            context.setInline(currentMacro.isInline());\n\n            context.setConversion(true);\n        } catch (ComponentLookupException e) {\n            if (getLogger().isDebugEnabled()) {\n                getLogger().debug(\"Can't find macro converter [\" + macroBlock + \"]\", e);\n            }\n        } catch (Exception e) {\n            if (getLogger().isDebugEnabled()) {\n                getLogger().debug(\"Failed to convert macro [\" + macroBlock + \"]\", e);\n            }\n        }\n    }","id":7924,"modified_method":"private String convertMacro(String name, List<String> parameters, VelocityFilterContext context)\n    {\n        String convertedMacro = null;\n\n        context.setVelocity(true);\n\n        try {\n            VelocityMacroConverter currentMacro =\n                (VelocityMacroConverter) this.componentManager.lookup(VelocityMacroConverter.class, name);\n\n            convertedMacro = currentMacro.convert(name, parameters);\n\n            context.setInline(currentMacro.isInline());\n\n            context.setConversion(true);\n        } catch (ComponentLookupException e) {\n            if (getLogger().isDebugEnabled()) {\n                getLogger().debug(\"Can't find macro converter [\" + name + \"]\", e);\n            }\n        } catch (Exception e) {\n            if (getLogger().isDebugEnabled()) {\n                getLogger().debug(\"Failed to convert macro [\" + name + \"]\", e);\n            }\n        }\n\n        return convertedMacro;\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private int getMacro(char[] array, int currentIndex, StringBuffer velocityBlock, VelocityFilterContext context)\n    {\n        StringBuffer macroBlock = new StringBuffer(\"#\");\n\n        int i = currentIndex;\n\n        // Get macro name\n        StringBuffer macroName = new StringBuffer();\n        for (; i < array.length && Character.isLetterOrDigit(array[i]); ++i) {\n            macroName.append(array[i]);\n        }\n        macroBlock.append(macroName);\n\n        if (VELOCITY_ENDBLOCK.contains(macroName.toString())) {\n            // #end\n            context.popVelocityDepth();\n            // macroBlock.append(\"£\");\n        } else if (!VELOCITY_NOPARAMBLOCK.contains(macroName.toString())) {\n            if (VELOCITY_BEGINBLOCK.contains(macroName.toString())) {\n                // #if, #foreach\n                context.pushVelocityDepth();\n            }\n\n            // Skip spaces\n            for (; i < array.length && array[i] == ' '; ++i) {\n                macroBlock.append(array[i]);\n            }\n\n            if (array[i] == '(') {\n                if (VELOCITY_PARAMBLOCK.contains(macroName.toString())) {\n                    // Skip condition\n                    i = getMethodParameters(array, i, macroBlock, context);\n                } else {\n                    context.setInline(true);\n\n                    List<String> parameters = new ArrayList<String>();\n                    // Get condition\n                    i = getMacroParameters(array, i, macroBlock, parameters, context);\n                    convertMacro(macroName.toString(), parameters, macroBlock, context);\n                }\n            }\n        }\n\n        velocityBlock.append(macroBlock);\n\n        return i;\n    }","id":7925,"modified_method":"private int getMacro(char[] array, int currentIndex, StringBuffer velocityBlock, VelocityFilterContext context)\n    {\n        StringBuffer macroBlock = new StringBuffer(\"#\");\n\n        int i = currentIndex;\n\n        // Get macro name\n        StringBuffer macroName = new StringBuffer();\n        for (; i < array.length && Character.isLetterOrDigit(array[i]); ++i) {\n            macroName.append(array[i]);\n        }\n        macroBlock.append(macroName);\n\n        if (VELOCITY_ENDBLOCK.contains(macroName.toString())) {\n            // #end\n            context.popVelocityDepth();\n            // macroBlock.append(\"£\");\n        } else if (!VELOCITY_NOPARAMBLOCK.contains(macroName.toString())) {\n            if (VELOCITY_BEGINBLOCK.contains(macroName.toString())) {\n                // #if, #foreach\n                context.pushVelocityDepth();\n            }\n\n            // Skip spaces\n            for (; i < array.length && array[i] == ' '; ++i) {\n                macroBlock.append(array[i]);\n            }\n\n            if (i < array.length) {\n                if (array[i] == '(') {\n                    if (VELOCITY_PARAMBLOCK.contains(macroName.toString())) {\n                        // Skip condition\n                        i = getMethodParameters(array, i, macroBlock, context);\n                    } else {\n                        context.setInline(true);\n\n                        List<String> parameters = new ArrayList<String>();\n                        // Get condition\n                        i = getMacroParameters(array, i, macroBlock, parameters, context);\n                        String convertedMacro = convertMacro(macroName.toString(), parameters, context);\n\n                        if (convertedMacro != null) {\n                            // Apply conversion\n                            macroBlock.setLength(0);\n                            macroBlock.append(convertedMacro);\n                        }\n                    }\n                }\n            }\n        }\n\n        velocityBlock.append(macroBlock);\n\n        return i;\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private int getMacroParameters(char[] array, int currentIndex, StringBuffer velocityBlock,\n        List<String> parameterList, VelocityFilterContext context)\n    {\n        velocityBlock.append('(');\n\n        int i = currentIndex + 1;\n\n        boolean isVelocity = false;\n\n        for (; i < array.length;) {\n            // Skip \\s\n            for (; i < array.length && Character.isWhitespace(array[i]); ++i) {\n                velocityBlock.append(array[i]);\n            }\n\n            // If ')' it's the end of parameters\n            if (array[i] == ')') {\n                velocityBlock.append(')');\n                ++i;\n                break;\n            }\n\n            // Skip parameter\n            StringBuffer parameterBlock = new StringBuffer();\n            i = getMacroParameter(array, i, parameterBlock, context);\n            isVelocity |= context.isVelocity();\n            parameterList.add(parameterBlock.toString());\n\n            velocityBlock.append(parameterBlock);\n        }\n\n        context.setVelocity(isVelocity);\n\n        return i;\n    }","id":7926,"modified_method":"private int getMacroParameters(char[] array, int currentIndex, StringBuffer velocityBlock,\n        List<String> parameterList, VelocityFilterContext context)\n    {\n        velocityBlock.append('(');\n\n        int i = currentIndex + 1;\n\n        boolean isVelocity = false;\n\n        for (; i < array.length;) {\n            // Skip \\s\n            for (; i < array.length && Character.isWhitespace(array[i]); ++i) {\n                velocityBlock.append(array[i]);\n            }\n\n            if (i < array.length) {\n                // If ')' it's the end of parameters\n                if (array[i] == ')') {\n                    velocityBlock.append(')');\n                    ++i;\n                    break;\n                }\n\n                // Skip parameter\n                StringBuffer parameterBlock = new StringBuffer();\n                i = getMacroParameter(array, i, parameterBlock, context);\n                isVelocity |= context.isVelocity();\n                parameterList.add(parameterBlock.toString());\n\n                velocityBlock.append(parameterBlock);\n            }\n        }\n\n        context.setVelocity(isVelocity);\n\n        return i;\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private int getKeyWord(char[] array, int currentIndex, StringBuffer velocityBlock, VelocityFilterContext context)\n    {\n        int i = currentIndex + 1;\n\n        context.setInline(false);\n        context.setVelocity(true);\n\n        if (array[i] == '#') {\n            // A simple line comment\n            i = getSimpleComment(array, i, velocityBlock, context);\n        } else if (array[i] == '*') {\n            // A multi lines comment\n            i = getMultilinesComment(array, i, velocityBlock, context);\n        } else if (Character.isLetter(array[i])) {\n            // A macro\n            i = getMacro(array, i, velocityBlock, context);\n        } else {\n            context.setVelocity(false);\n            i = currentIndex;\n        }\n\n        return i;\n    }","id":7927,"modified_method":"private int getKeyWord(char[] array, int currentIndex, StringBuffer velocityBlock, VelocityFilterContext context)\n    {\n        int i = currentIndex + 1;\n\n        if (i >= array.length) {\n            context.setVelocity(false);\n            return i;\n        }\n\n        context.setInline(false);\n        context.setVelocity(true);\n\n        if (array[i] == '#') {\n            // A simple line comment\n            i = getSimpleComment(array, i, velocityBlock, context);\n        } else if (array[i] == '*') {\n            // A multi lines comment\n            i = getMultilinesComment(array, i, velocityBlock, context);\n        } else if (Character.isLetter(array[i])) {\n            // A macro\n            i = getMacro(array, i, velocityBlock, context);\n        } else {\n            context.setVelocity(false);\n            i = currentIndex;\n        }\n\n        return i;\n    }","commit_id":"417291b829a5513219a5917ad62b20a996a133e0","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Register a content and return the corresponding identifier to be able the reinsert it after the conversion\n     * process.\n     * \n     * @param content the content to protect/register.\n     * @return the content identifier to insert in place of provided content.\n     */\n    public String addProtectedContent(String content)\n    {\n        return addProtectedContent(content, \"\");\n    }","id":7928,"modified_method":"/**\n     * Register a content and return the corresponding identifier to be able the reinsert it after the conversion\n     * process.\n     * \n     * @param content the content to protect/register.\n     * @return the content identifier to insert in place of provided content.\n     */\n    public String addProtectedContent(String content)\n    {\n        return addProtectedContent(content, false);\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String addProtectedContent(String content, String suffix)\n    {\n        this.protectedContentList.add(content);\n\n        return XWIKI1020TOKEN_O + XWIKI1020TOKEN + suffix + (this.protectedContentList.size() - 1) + XWIKI1020TOKEN_C;\n    }","id":7929,"modified_method":"public String addProtectedContent(String content, String suffix, boolean inline)\n    {\n        this.protectedContentList.add(content);\n\n        StringBuffer str = new StringBuffer();\n\n        str.append(XWIKI1020TOKEN_O);\n        str.append(inline ? XWIKI1020TOKENIL : XWIKI1020TOKENNI);\n        str.append(suffix);\n        str.append(this.protectedContentList.size() - 1);\n        str.append(XWIKI1020TOKEN_C);\n\n        return str.toString();\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private String filterMacros(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        Matcher matcher = HTMLVELOCITY_PATTERN.matcher(content);\n\n        int currentIndex = 0;\n        boolean inHTMLMacro = false;\n        boolean htmlMacroInVelocityMacro = false;\n\n        int nbVOpen = 0;\n        int nbVClose = 0;\n        int nbVOpenInHTML = 0;\n        int nbVCloseInHTML = 0;\n\n        StringBuffer htmlContent = new StringBuffer();\n        StringBuffer nonHtmlContent = new StringBuffer();\n        StringBuffer nonHtmlContentWithVelocity = new StringBuffer();\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            String matchedContent = matcher.group(0);\n\n            if (matcher.group(1) != null) {\n                if (inHTMLMacro) {\n                    nonHtmlContent.append(before);\n                    nonHtmlContentWithVelocity.append(before);\n                    nonHtmlContentWithVelocity.append(matchedContent);\n\n                    ++nbVOpen;\n                } else {\n                    result.append(StringEscapeUtils.unescapeHtml(before));\n                    result.append(matchedContent);\n\n                    htmlMacroInVelocityMacro = true;\n                }\n            } else if (matcher.group(2) != null) {\n                if (inHTMLMacro) {\n                    nonHtmlContent.append(before);\n                    nonHtmlContentWithVelocity.append(before);\n                    nonHtmlContentWithVelocity.append(matchedContent);\n\n                    ++nbVClose;\n                } else {\n                    result.append(StringEscapeUtils.unescapeHtml(before));\n                    result.append(matchedContent);\n\n                    htmlMacroInVelocityMacro = false;\n                }\n            } else {\n                if (StringUtils.countMatches(nonHtmlContent.toString() + before, \"\\n\") > 10) {\n                    if (!htmlMacroInVelocityMacro && nbVOpen > 0) {\n                        result.append(filterContext.addProtectedContent(\"{{velocity}}\",\n                            VelocityFilter.VELOCITYOPEN_SUFFIX));\n                    }\n                    result.append(filterContext.addProtectedContent(\"{{html wiki=true}}\"));\n                    result.append(htmlContent);\n                    result.append(filterContext.addProtectedContent(\"{{/html}}\"));\n                    result.append(StringEscapeUtils.unescapeHtml(nonHtmlContentWithVelocity.toString()));\n                    if (nbVCloseInHTML > nbVOpenInHTML) {\n                        result.append(filterContext.addProtectedContent(\"{{/velocity}}\",\n                            VelocityFilter.VELOCITYCLOSE_SUFFIX));\n                    }\n\n                    result.append(StringEscapeUtils.unescapeHtml(before));\n\n                    htmlContent = new StringBuffer();\n                    htmlMacroInVelocityMacro =\n                        (htmlMacroInVelocityMacro && nbVOpen + nbVOpenInHTML == nbVClose + nbVCloseInHTML)\n                            || (!htmlMacroInVelocityMacro && nbVOpen + nbVOpenInHTML > nbVClose + nbVCloseInHTML);\n                    nbVOpenInHTML = 0;\n                    nbVCloseInHTML = 0;\n                } else {\n                    htmlContent.append(nonHtmlContent);\n\n                    if (!inHTMLMacro) {\n                        result.append(StringEscapeUtils.unescapeHtml(before));\n                    } else {\n                        htmlContent.append(before);\n\n                        nbVOpenInHTML += nbVOpen;\n                        nbVCloseInHTML += nbVClose;\n                    }\n                }\n\n                nbVOpen = 0;\n                nbVClose = 0;\n\n                inHTMLMacro = true;\n\n                nonHtmlContent = new StringBuffer();\n                nonHtmlContentWithVelocity = new StringBuffer();\n\n                htmlContent.append(matchedContent);\n            }\n        }\n\n        if (currentIndex == 0) {\n            return StringEscapeUtils.unescapeHtml(content);\n        }\n\n        // Close html macro\n        if (inHTMLMacro) {\n            if (!htmlMacroInVelocityMacro && nbVOpen > 0) {\n                result.append(filterContext.addProtectedContent(\"{{velocity}}\", VelocityFilter.VELOCITYOPEN_SUFFIX));\n            }\n            result.append(filterContext.addProtectedContent(\"{{html wiki=true}}\"));\n            result.append(htmlContent);\n            result.append(filterContext.addProtectedContent(\"{{/html}}\"));\n            result.append(StringEscapeUtils.unescapeHtml(nonHtmlContentWithVelocity.toString()));\n            if (nbVCloseInHTML > nbVOpenInHTML) {\n                result.append(filterContext.addProtectedContent(\"{{/velocity}}\", VelocityFilter.VELOCITYCLOSE_SUFFIX));\n            }\n        }\n\n        result.append(StringEscapeUtils.unescapeHtml(content.substring(currentIndex)));\n\n        return result.toString();\n    }","id":7930,"modified_method":"private String filterMacros(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        Matcher matcher = HTMLVELOCITY_PATTERN.matcher(content);\n\n        int currentIndex = 0;\n        boolean inHTMLMacro = false;\n        boolean htmlMacroInVelocityMacro = false;\n\n        int nbVOpen = 0;\n        int nbVClose = 0;\n        int nbVOpenInHTML = 0;\n        int nbVCloseInHTML = 0;\n\n        StringBuffer htmlContent = new StringBuffer();\n        StringBuffer nonHtmlContent = new StringBuffer();\n        StringBuffer nonHtmlContentWithVelocity = new StringBuffer();\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            String matchedContent = matcher.group(0);\n\n            if (matcher.group(1) != null) {\n                if (inHTMLMacro) {\n                    nonHtmlContent.append(before);\n                    nonHtmlContentWithVelocity.append(before);\n                    nonHtmlContentWithVelocity.append(matchedContent);\n\n                    ++nbVOpen;\n                } else {\n                    result.append(StringEscapeUtils.unescapeHtml(before));\n                    result.append(matchedContent);\n\n                    htmlMacroInVelocityMacro = true;\n                }\n            } else if (matcher.group(2) != null) {\n                if (inHTMLMacro) {\n                    nonHtmlContent.append(before);\n                    nonHtmlContentWithVelocity.append(before);\n                    nonHtmlContentWithVelocity.append(matchedContent);\n\n                    ++nbVClose;\n                } else {\n                    result.append(StringEscapeUtils.unescapeHtml(before));\n                    result.append(matchedContent);\n\n                    htmlMacroInVelocityMacro = false;\n                }\n            } else {\n                if (StringUtils.countMatches(nonHtmlContent.toString() + before, \"\\n\") > 10) {\n                    if (!htmlMacroInVelocityMacro && nbVOpen > 0) {\n                        VelocityFilter.appendVelocityOpen(result, filterContext);\n                    }\n                    appendHTMLOpen(result, filterContext);\n                    result.append(htmlContent);\n                    appendHTMLClose(result, filterContext);\n                    result.append(StringEscapeUtils.unescapeHtml(nonHtmlContentWithVelocity.toString()));\n                    if (nbVCloseInHTML > nbVOpenInHTML) {\n                        VelocityFilter.appendVelocityClose(result, filterContext);\n                    }\n\n                    result.append(StringEscapeUtils.unescapeHtml(before));\n\n                    htmlContent = new StringBuffer();\n                    htmlMacroInVelocityMacro =\n                        (htmlMacroInVelocityMacro && nbVOpen + nbVOpenInHTML == nbVClose + nbVCloseInHTML)\n                            || (!htmlMacroInVelocityMacro && nbVOpen + nbVOpenInHTML > nbVClose + nbVCloseInHTML);\n                    nbVOpenInHTML = 0;\n                    nbVCloseInHTML = 0;\n                } else {\n                    htmlContent.append(nonHtmlContent);\n\n                    if (!inHTMLMacro) {\n                        result.append(StringEscapeUtils.unescapeHtml(before));\n                    } else {\n                        htmlContent.append(before);\n\n                        nbVOpenInHTML += nbVOpen;\n                        nbVCloseInHTML += nbVClose;\n                    }\n                }\n\n                nbVOpen = 0;\n                nbVClose = 0;\n\n                inHTMLMacro = true;\n\n                nonHtmlContent = new StringBuffer();\n                nonHtmlContentWithVelocity = new StringBuffer();\n\n                htmlContent.append(matchedContent);\n            }\n        }\n\n        if (currentIndex == 0) {\n            return StringEscapeUtils.unescapeHtml(content);\n        }\n\n        // Close html macro\n        if (inHTMLMacro) {\n            if (!htmlMacroInVelocityMacro && nbVOpen > 0) {\n                VelocityFilter.appendVelocityOpen(result, filterContext);\n            }\n            appendHTMLOpen(result, filterContext);\n            result.append(htmlContent);\n            appendHTMLClose(result, filterContext);\n            result.append(StringEscapeUtils.unescapeHtml(nonHtmlContentWithVelocity.toString()));\n            if (nbVCloseInHTML > nbVOpenInHTML) {\n                VelocityFilter.appendVelocityClose(result, filterContext);\n            }\n        }\n\n        result.append(StringEscapeUtils.unescapeHtml(content.substring(currentIndex)));\n\n        return result.toString();\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = LINKSYNTAX_PATTERN.matcher(content);\n        int current = 0;\n        while (matcher.find()) {\n            String before = content.substring(current, matcher.start());\n            current = matcher.end();\n\n            // a standalone new line is not interpreted by XWiki 1.0 rendering\n            result.append(CleanUtil.removeLastNewLines(before, 1, true));\n\n            StringBuffer linkResult = new StringBuffer();\n            linkResult.append(\"[[\");\n\n            String str = matcher.group(1);\n            if (str != null) {\n                // TODO: This line creates bug XWIKI-188. The encoder seems to be broken. Fix this!\n                // The only unescaping done should be %xx => char,\n                // since &#nnn; must be preserved (the active encoding cannot handle the character)\n                // and + should be preserved (for \"Doc.C++ examples\").\n                // Anyway, this unescaper only treats &#nnn;\n                // trim the name and unescape it\n                // str = Encoder.unescape(str.trim());\n                str = str.trim();\n                String text = null, href = null, target = null;\n\n                // Is there an alias like [alias|link] ?\n                int pipeIndex = str.indexOf('|');\n                int pipeLength = 1;\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf('>');\n                }\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf(\"&gt;\");\n                    pipeLength = 4;\n                }\n                if (-1 != pipeIndex) {\n                    text = str.substring(0, pipeIndex).trim();\n                    str = str.substring(pipeIndex + pipeLength);\n                }\n\n                // Is there a target like [alias|link|target] ?\n                pipeIndex = str.indexOf('|');\n                pipeLength = 1;\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf('>');\n                }\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf(\"&gt;\");\n                    pipeLength = 4;\n                }\n                if (-1 != pipeIndex) {\n                    target = str.substring(pipeIndex + pipeLength).trim();\n                    str = str.substring(0, pipeIndex);\n                }\n                // Done splitting\n\n                // Fill in missing components\n                href = str.trim();\n\n                // Done, now print the link\n                if (text != null) {\n                    linkResult.append(text);\n                    linkResult.append(\">>\");\n                }\n\n                linkResult.append(href);\n\n                if (target != null) {\n                    linkResult.append(\"||target=\");\n                    linkResult.append(target);\n                }\n            }\n\n            linkResult.append(\"]]\");\n\n            result.append(filterContext.addProtectedContent(linkResult.toString()));\n        }\n\n        if (current == 0) {\n            return content;\n        }\n\n        result.append(content.substring(current));\n\n        return result.toString();\n    }","id":7931,"modified_method":"public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = LINKSYNTAX_PATTERN.matcher(content);\n        int current = 0;\n        for (; matcher.find(); current = matcher.end()) {\n            String before = content.substring(current, matcher.start());\n\n            // a standalone new line is not interpreted by XWiki 1.0 rendering\n            result.append(CleanUtil.removeLastNewLines(before, 1, true));\n\n            StringBuffer linkResult = new StringBuffer();\n            linkResult.append(\"[[\");\n\n            String str = matcher.group(1);\n            if (str != null) {\n                // TODO: This line creates bug XWIKI-188. The encoder seems to be broken. Fix this!\n                // The only unescaping done should be %xx => char,\n                // since &#nnn; must be preserved (the active encoding cannot handle the character)\n                // and + should be preserved (for \"Doc.C++ examples\").\n                // Anyway, this unescaper only treats &#nnn;\n                // trim the name and unescape it\n                // str = Encoder.unescape(str.trim());\n                str = str.trim();\n                String text = null, href = null, target = null;\n\n                // Is there an alias like [alias|link] ?\n                int pipeIndex = str.indexOf('|');\n                int pipeLength = 1;\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf('>');\n                }\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf(\"&gt;\");\n                    pipeLength = 4;\n                }\n                if (-1 != pipeIndex) {\n                    text = str.substring(0, pipeIndex).trim();\n                    str = str.substring(pipeIndex + pipeLength);\n                }\n\n                // Is there a target like [alias|link|target] ?\n                pipeIndex = str.indexOf('|');\n                pipeLength = 1;\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf('>');\n                }\n                if (pipeIndex == -1) {\n                    pipeIndex = str.indexOf(\"&gt;\");\n                    pipeLength = 4;\n                }\n                if (-1 != pipeIndex) {\n                    target = str.substring(pipeIndex + pipeLength).trim();\n                    str = str.substring(0, pipeIndex);\n                }\n                // Done splitting\n\n                // Fill in missing components\n                href = str.trim();\n\n                // Done, now print the link\n                if (text != null) {\n                    linkResult.append(text);\n                    linkResult.append(\">>\");\n                }\n\n                linkResult.append(href);\n\n                if (target != null) {\n                    linkResult.append(\"||target=\");\n                    linkResult.append(target);\n                }\n            }\n\n            linkResult.append(\"]]\");\n\n            result.append(filterContext.addProtectedContent(linkResult.toString(), true));\n        }\n\n        if (current == 0) {\n            return content;\n        }\n\n        result.append(content.substring(current));\n\n        return result.toString();\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private String filterMacros(String content, Pattern pattern, boolean supportContent, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        Matcher matcher = pattern.matcher(content);\n\n        int currentIndex = 0;\n        RadeoxMacroConverter currentMacro = null;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            if (currentMacro != null && !currentMacro.isInline()) {\n                before = CleanUtil.setFirstNewLines(before, 2);\n            }\n\n            String allcontent = matcher.group(0);\n\n            String macroName = matcher.group(1);\n            String params = matcher.group(3);\n            String macroContent = matcher.groupCount() >= 4 ? matcher.group(4) : null;\n\n            try {\n                currentMacro =\n                    (RadeoxMacroConverter) this.componentManager.lookup(RadeoxMacroConverter.ROLE, macroName);\n\n                if (currentMacro.supportContent() == supportContent) {\n                    // a standalone new line is not interpreted by XWiki 1.0 rendering\n                    before = CleanUtil.removeLastNewLines(before, 1, true);\n\n                    if (!currentMacro.isInline()) {\n                        before = CleanUtil.setLastNewLines(before, 2);\n                    }\n\n                    allcontent =\n                        currentMacro.convert(macroName, getMacroParameters(currentMacro, params), macroContent,\n                            filterContext);\n                    if (currentMacro.protectResult()) {\n                        allcontent = filterContext.addProtectedContent(allcontent);\n                    }\n                } else {\n                    currentMacro = null;\n                }\n            } catch (ComponentLookupException e) {\n                if (getLogger().isDebugEnabled()) {\n                    getLogger().debug(\"Can't find macro converter [\" + macroName + \"]\", e);\n                }\n\n                currentMacro = null;\n            }\n\n            result.append(before);\n            result.append(allcontent);\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        if (currentMacro != null && !currentMacro.isInline()) {\n            result.append(CleanUtil.setFirstNewLines(content.substring(currentIndex), 2));\n        } else {\n            result.append(content.substring(currentIndex));\n        }\n\n        return result.toString();\n    }","id":7932,"modified_method":"private String filterMacros(String content, Pattern pattern, boolean supportContent, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        Matcher matcher = pattern.matcher(content);\n\n        int currentIndex = 0;\n        RadeoxMacroConverter currentMacro = null;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n\n            if (currentMacro != null && !currentMacro.isInline()) {\n                before = CleanUtil.setFirstNewLines(before, 2);\n            }\n\n            String allcontent = matcher.group(0);\n\n            String macroName = matcher.group(1);\n            String params = matcher.group(3);\n            String macroContent = matcher.groupCount() >= 4 ? matcher.group(4) : null;\n\n            try {\n                currentMacro =\n                    (RadeoxMacroConverter) this.componentManager.lookup(RadeoxMacroConverter.ROLE, macroName);\n\n                if (currentMacro.supportContent() == supportContent) {\n                    // a standalone new line is not interpreted by XWiki 1.0 rendering\n                    before = CleanUtil.removeLastNewLines(before, 1, true);\n\n                    if (!currentMacro.isInline()) {\n                        before = CleanUtil.setLastNewLines(before, 2);\n                    }\n\n                    allcontent =\n                        currentMacro.convert(macroName, getMacroParameters(currentMacro, params), macroContent,\n                            filterContext);\n                    if (currentMacro.protectResult()) {\n                        allcontent = filterContext.addProtectedContent(allcontent, currentMacro.isInline());\n                    }\n                } else {\n                    currentMacro = null;\n                }\n            } catch (ComponentLookupException e) {\n                if (getLogger().isDebugEnabled()) {\n                    getLogger().debug(\"Can't find macro converter [\" + macroName + \"]\", e);\n                }\n\n                currentMacro = null;\n            }\n\n            result.append(before);\n            result.append(allcontent);\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        if (currentMacro != null && !currentMacro.isInline()) {\n            result.append(CleanUtil.setFirstNewLines(content.substring(currentIndex), 2));\n        } else {\n            result.append(content.substring(currentIndex));\n        }\n\n        return result.toString();\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test XWiki1.0 -> XWiki2.0 conversion\");\n\n        // Velocity\n        suite.addTestsFromResource(\"velocity/velocity1\", false);\n        suite.addTestsFromResource(\"velocity/velocity2\", false);\n        suite.addTestsFromResource(\"velocity/velocity3\", false);\n\n        // Velocity Macros\n        suite.addTestsFromResource(\"macros/velocity/include1\", false);\n        suite.addTestsFromResource(\"macros/velocity/toc1\", false);\n\n        // Radeox Macros\n        suite.addTestsFromResource(\"macros/radeox/attach1\", false);\n        suite.addTestsFromResource(\"macros/radeox/image1\", false);\n        suite.addTestsFromResource(\"macros/radeox/code1\", false);\n        suite.addTestsFromResource(\"macros/radeox/table1\", false);\n        suite.addTestsFromResource(\"macros/radeox/quote1\", false);\n\n        suite.addTestsFromResource(\"pre/pre1\", false);\n\n        // Wiki syntaxes\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"link/link1\", false);\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        \n        // HTML\n        suite.addTestsFromResource(\"html/html1\", false);\n        suite.addTestsFromResource(\"html/html2\", false);\n        \n        return new RenderingPlexusTestSetup(suite);\n    }","id":7933,"modified_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test XWiki1.0 -> XWiki2.0 conversion\");\n\n        // Velocity\n        suite.addTestsFromResource(\"velocity/velocity1\", false);\n        suite.addTestsFromResource(\"velocity/velocity2\", false);\n        suite.addTestsFromResource(\"velocity/velocity3\", false);\n\n        // Velocity Macros\n        suite.addTestsFromResource(\"macros/velocity/include1\", false);\n        suite.addTestsFromResource(\"macros/velocity/toc1\", false);\n\n        // Radeox Macros\n        suite.addTestsFromResource(\"macros/radeox/attach1\", false);\n        suite.addTestsFromResource(\"macros/radeox/image1\", false);\n        suite.addTestsFromResource(\"macros/radeox/code1\", false);\n        suite.addTestsFromResource(\"macros/radeox/table1\", false);\n        suite.addTestsFromResource(\"macros/radeox/quote1\", false);\n\n        suite.addTestsFromResource(\"pre/pre1\", false);\n\n        // Wiki syntaxes\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"strikeout/strikeout1\", false);\n        suite.addTestsFromResource(\"link/link1\", false);\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        \n        // HTML\n        suite.addTestsFromResource(\"html/html1\", false);\n        suite.addTestsFromResource(\"html/html2\", false);\n        \n        // Cleaning\n        suite.addTestsFromResource(\"cleaning/cleaning1\", false);\n        \n        return new RenderingPlexusTestSetup(suite);\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String filter(String content, FilterContext filterContext)\n    {\n        return SANDALONENEWLINE_PATTERN.matcher(content).replaceAll(\"$1 $2\");\n    }","id":7934,"modified_method":"public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n\n        Matcher matcher = FilterContext.XWIKI1020TOKENNI_PATTERN.matcher(content);\n        int current = 0;\n        for (; matcher.find(); current = matcher.end()) {\n            String before = content.substring(current, matcher.start());\n\n            result.append(SANDALONENEWLINE_PATTERN.matcher(before).replaceAll(\"$1 $2\"));\n            result.append(matcher.group(0));\n        }\n\n        result.append(SANDALONENEWLINE_PATTERN.matcher(content.substring(current)).replaceAll(\"$1 $2\"));\n\n        return result.toString();\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private String filterMacros(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        Matcher matcher = VELOCITY_PATTERN.matcher(content);\n\n        int currentIndex = 0;\n\n        boolean inVelocityMacro = false;\n        VelocityMacroConverter currentMacro = null;\n        String nonVelocityContent = null;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n            nonVelocityContent = nonVelocityContent != null ? nonVelocityContent + before : before;\n\n            String matchedContent = matcher.group(0);\n\n            String macroName = matcher.group(4);\n\n            if (macroName != null) {\n                // If it's a velocity macro it can be converted in 2.0 syntax\n                String params = matcher.group(5);\n\n                try {\n                    currentMacro =\n                        (VelocityMacroConverter) this.componentManager.lookup(VelocityMacroConverter.ROLE, macroName);\n\n                    if (!currentMacro.isInline()) {\n                        nonVelocityContent = CleanUtil.setLastNewLines(nonVelocityContent, 2);\n                    } else {\n                        // A standalone new line is not interpreted by XWiki 1.0 rendering\n                        nonVelocityContent = CleanUtil.removeLastNewLines(nonVelocityContent, 1, true);\n                    }\n\n                    matchedContent = currentMacro.convert(macroName, getMacroParameters(params));\n                    if (currentMacro.protectResult()) {\n                        matchedContent = filterContext.addProtectedContent(matchedContent);\n                    }\n\n                    nonVelocityContent += matchedContent;\n                    continue;\n                } catch (ComponentLookupException e) {\n                    if (getLogger().isDebugEnabled()) {\n                        getLogger().debug(\"Can't find macro converter [\" + macroName + \"]\", e);\n                    }\n                }\n            }\n\n            if (StringUtils.countMatches(nonVelocityContent, \"\\n\") > 10) {\n                result.append(filterContext.addProtectedContent(\"{{/velocity}}\", VELOCITYCLOSE_SUFFIX));\n                inVelocityMacro = false;\n            }\n\n            result.append(nonVelocityContent);\n\n            if (!inVelocityMacro) {\n                result.append(filterContext.addProtectedContent(\"{{velocity}}\", VELOCITYOPEN_SUFFIX));\n                matchedContent = CleanUtil.removeFirstNewLines(matchedContent, 1, false);\n                inVelocityMacro = true;\n            }\n\n            result.append(filterContext.addProtectedContent(matchedContent));\n\n            nonVelocityContent = null;\n            currentMacro = null;\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        // Close velocity macro\n        if (inVelocityMacro) {\n            result.append(filterContext.addProtectedContent(\"{{/velocity}}\", VELOCITYCLOSE_SUFFIX));\n        }\n\n        if (nonVelocityContent != null) {\n            result.append(nonVelocityContent);\n        }\n\n        // Make sure the last non inline macro is followed by 2 new lines\n        if (currentMacro != null && !currentMacro.isInline()) {\n            result.append(CleanUtil.setFirstNewLines(content.substring(currentIndex), 2));\n        } else {\n            result.append(content.substring(currentIndex));\n        }\n\n        return result.toString();\n    }","id":7935,"modified_method":"private String filterMacros(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        Matcher matcher = VELOCITY_PATTERN.matcher(content);\n\n        int currentIndex = 0;\n\n        boolean inVelocityMacro = false;\n        VelocityMacroConverter currentMacro = null;\n        String nonVelocityContent = null;\n        for (; matcher.find(); currentIndex = matcher.end()) {\n            String before = content.substring(currentIndex, matcher.start());\n            nonVelocityContent = nonVelocityContent != null ? nonVelocityContent + before : before;\n\n            String matchedContent = matcher.group(0);\n\n            String macroName = matcher.group(4);\n\n            if (macroName != null) {\n                // If it's a velocity macro it can be converted in 2.0 syntax\n                String params = matcher.group(5);\n\n                try {\n                    currentMacro =\n                        (VelocityMacroConverter) this.componentManager.lookup(VelocityMacroConverter.ROLE, macroName);\n\n                    if (!currentMacro.isInline()) {\n                        nonVelocityContent = CleanUtil.setLastNewLines(nonVelocityContent, 2);\n                    } else {\n                        // A standalone new line is not interpreted by XWiki 1.0 rendering\n                        nonVelocityContent = CleanUtil.removeLastNewLines(nonVelocityContent, 1, true);\n                    }\n\n                    matchedContent = currentMacro.convert(macroName, getMacroParameters(params));\n                    if (currentMacro.protectResult()) {\n                        matchedContent = filterContext.addProtectedContent(matchedContent);\n                    }\n\n                    nonVelocityContent += matchedContent;\n                    continue;\n                } catch (ComponentLookupException e) {\n                    if (getLogger().isDebugEnabled()) {\n                        getLogger().debug(\"Can't find macro converter [\" + macroName + \"]\", e);\n                    }\n                }\n            }\n\n            if (StringUtils.countMatches(nonVelocityContent, \"\\n\") > 10) {\n                appendVelocityClose(result, filterContext);\n                inVelocityMacro = false;\n            }\n\n            result.append(nonVelocityContent);\n\n            if (!inVelocityMacro) {\n                appendVelocityOpen(result, filterContext);\n                matchedContent = CleanUtil.removeFirstNewLines(matchedContent, 1, false);\n                inVelocityMacro = true;\n            }\n\n            result.append(filterContext.addProtectedContent(matchedContent));\n\n            nonVelocityContent = null;\n            currentMacro = null;\n        }\n\n        if (currentIndex == 0) {\n            return content;\n        }\n\n        // Close velocity macro\n        if (inVelocityMacro) {\n            appendVelocityClose(result, filterContext);\n        }\n\n        if (nonVelocityContent != null) {\n            result.append(nonVelocityContent);\n        }\n\n        // Make sure the last non inline macro is followed by 2 new lines\n        if (currentMacro != null && !currentMacro.isInline()) {\n            result.append(CleanUtil.setFirstNewLines(content.substring(currentIndex), 2));\n        } else {\n            result.append(content.substring(currentIndex));\n        }\n\n        return result.toString();\n    }","commit_id":"0ddebb519b7b66429624e98a7a6f7bdd1187f83d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test all Parsers/Renderers\");\n        \n        // Embedded documents\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc1\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc2\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc3\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc4\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc5\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc6\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc7\", false);\n        \n        // Text formatting\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"bold/bold2\", false);\n        suite.addTestsFromResource(\"bold/bold3\", false);\n        suite.addTestsFromResource(\"bold/bold4\", false);\n        suite.addTestsFromResource(\"bold/bold5\", false);\n        suite.addTestsFromResource(\"bold/bold6\", false);\n        suite.addTestsFromResource(\"bold/bold7\", false);\n        suite.addTestsFromResource(\"bold/bold8\", false);\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"italic/italic2\", false);\n        suite.addTestsFromResource(\"italic/italic3\", false);\n        suite.addTestsFromResource(\"italic/italic4\", false);\n        suite.addTestsFromResource(\"italic/italic5\", false);\n        suite.addTestsFromResource(\"italic/italic6\", false);\n        suite.addTestsFromResource(\"italic/italic7\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"underline/underline2\", false);\n        suite.addTestsFromResource(\"strikedout/strikedout1\", false);\n        suite.addTestsFromResource(\"strikedout/strikedout2\", false);\n        suite.addTestsFromResource(\"strikedout/strikedout3\", false);\n        suite.addTestsFromResource(\"superscript/superscript1\", false);\n        suite.addTestsFromResource(\"subscript/subscript1\", false);\n        suite.addTestsFromResource(\"monospace/monospace1\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph1\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph2\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph3\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph4\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph5\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph6\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph7\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph8\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph9\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph10\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim1\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim2\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim3\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim4\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim5\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim6\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim7\", false);\n        \n        // Tables\n        suite.addTestsFromResource(\"table/table1\", false);\n        suite.addTestsFromResource(\"table/table2\", false);\n        suite.addTestsFromResource(\"table/table3\", false);\n        suite.addTestsFromResource(\"table/table4\", false);\n\n        // Macros\n        suite.addTestsFromResource(\"macros/macro1\", false);\n        suite.addTestsFromResource(\"macros/macro2\", false);\n        suite.addTestsFromResource(\"macros/macro3\", false);\n        suite.addTestsFromResource(\"macros/macro4\", false);\n        suite.addTestsFromResource(\"macros/macro5\", false);\n        suite.addTestsFromResource(\"macros/macro6\", true);\n        suite.addTestsFromResource(\"macros/macro7\", true);\n        suite.addTestsFromResource(\"macros/macro8\", true);\n        suite.addTestsFromResource(\"macros/macro9\", true);\n\n        // Links\n        suite.addTestsFromResource(\"link/links1\", false);\n        suite.addTestsFromResource(\"link/links2\", false);\n        suite.addTestsFromResource(\"link/links3\", false);\n        suite.addTestsFromResource(\"link/links4\", false);\n        suite.addTestsFromResource(\"link/links5\", false);\n        suite.addTestsFromResource(\"link/links6\", false);\n        suite.addTestsFromResource(\"link/links7\", false);\n        suite.addTestsFromResource(\"link/links8\", false);\n        suite.addTestsFromResource(\"link/links9\", false);\n        suite.addTestsFromResource(\"link/links10\", false);\n        suite.addTestsFromResource(\"link/links11\", false);\n        suite.addTestsFromResource(\"link/links12\", false);\n        suite.addTestsFromResource(\"link/links13\", false);\n        suite.addTestsFromResource(\"link/links14\", false);\n        suite.addTestsFromResource(\"link/links15\", false);\n        suite.addTestsFromResource(\"link/links16\", false);\n        suite.addTestsFromResource(\"link/links17\", false);\n\n        // Lists\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"list/list2\", false);\n        suite.addTestsFromResource(\"list/list3\", false);\n        suite.addTestsFromResource(\"list/list4\", false);\n        suite.addTestsFromResource(\"list/list5\", false);\n        suite.addTestsFromResource(\"list/list6\", false);\n        suite.addTestsFromResource(\"list/list7\", false);\n        suite.addTestsFromResource(\"list/list8\", false);\n        suite.addTestsFromResource(\"list/list9\", false);\n        suite.addTestsFromResource(\"list/list10\", false);\n        suite.addTestsFromResource(\"list/list11\", false);\n        suite.addTestsFromResource(\"list/definitionlist1\", false);\n        suite.addTestsFromResource(\"list/definitionlist2\", false);\n        suite.addTestsFromResource(\"list/definitionlist3\", false);\n        suite.addTestsFromResource(\"list/definitionlist4\", false);\n        suite.addTestsFromResource(\"list/definitionlist5\", false);\n        suite.addTestsFromResource(\"list/definitionlist6\", false);\n\n        // Other\n        suite.addTestsFromResource(\"escape/escape1\", false);\n        suite.addTestsFromResource(\"escape/escape2\", false);\n        suite.addTestsFromResource(\"escape/escape3\", false);\n        suite.addTestsFromResource(\"escape/escape4\", false);\n        suite.addTestsFromResource(\"escape/escape5\", false);\n        suite.addTestsFromResource(\"escape/escape6\", false);\n        suite.addTestsFromResource(\"escape/escape7\", false);\n        suite.addTestsFromResource(\"escape/escape8\", false);\n        suite.addTestsFromResource(\"escape/escape9\", false);\n        suite.addTestsFromResource(\"escape/escape10\", false);\n        suite.addTestsFromResource(\"escape/escape11\", false);\n        suite.addTestsFromResource(\"escape/escape12\", false);\n        suite.addTestsFromResource(\"escape/escape13\", false);\n        suite.addTestsFromResource(\"escape/escape14\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline1\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline2\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline3\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline4\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline5\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        suite.addTestsFromResource(\"section/section2\", false);\n        suite.addTestsFromResource(\"section/section3\", true);\n        suite.addTestsFromResource(\"section/section4\", false);\n        suite.addTestsFromResource(\"section/section5\", false);\n        suite.addTestsFromResource(\"section/section6\", false);\n        suite.addTestsFromResource(\"section/section7\", false);\n        suite.addTestsFromResource(\"quote/quote1\", false);\n        suite.addTestsFromResource(\"quote/quote2\", false);\n        suite.addTestsFromResource(\"quote/quote3\", false);\n        suite.addTestsFromResource(\"quote/quote4\", false);\n        suite.addTestsFromResource(\"misc/misc1\", false);\n        suite.addTestsFromResource(\"misc/misc2\", false);\n        suite.addTestsFromResource(\"misc/misc3\", false);\n        suite.addTestsFromResource(\"misc/misc4\", false);\n        suite.addTestsFromResource(\"misc/misc5\", false);\n        suite.addTestsFromResource(\"misc/misc6\", false);\n        suite.addTestsFromResource(\"encoding/encoding1\", false);\n        suite.addTestsFromResource(\"image/image1\", false);\n        suite.addTestsFromResource(\"image/image2\", false);\n        suite.addTestsFromResource(\"image/image3\", false);\n        suite.addTestsFromResource(\"image/image4\", false);\n        \n        return new RenderingPlexusTestSetup(suite);\n    }","id":7936,"modified_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test all Parsers/Renderers\");\n        \n        // Embedded documents\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc1\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc2\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc3\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc4\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc5\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc6\", false);\n        suite.addTestsFromResource(\"embeddeddoc/embeddeddoc7\", false);\n        \n        // Text formatting\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"bold/bold2\", false);\n        suite.addTestsFromResource(\"bold/bold3\", false);\n        suite.addTestsFromResource(\"bold/bold4\", false);\n        suite.addTestsFromResource(\"bold/bold5\", false);\n        suite.addTestsFromResource(\"bold/bold6\", false);\n        suite.addTestsFromResource(\"bold/bold7\", false);\n        suite.addTestsFromResource(\"bold/bold8\", false);\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"italic/italic2\", false);\n        suite.addTestsFromResource(\"italic/italic3\", false);\n        suite.addTestsFromResource(\"italic/italic4\", false);\n        suite.addTestsFromResource(\"italic/italic5\", false);\n        suite.addTestsFromResource(\"italic/italic6\", false);\n        suite.addTestsFromResource(\"italic/italic7\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"underline/underline2\", false);\n        suite.addTestsFromResource(\"strikedout/strikedout1\", false);\n        suite.addTestsFromResource(\"strikedout/strikedout2\", false);\n        suite.addTestsFromResource(\"strikedout/strikedout3\", false);\n        suite.addTestsFromResource(\"superscript/superscript1\", false);\n        suite.addTestsFromResource(\"subscript/subscript1\", false);\n        suite.addTestsFromResource(\"monospace/monospace1\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph1\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph2\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph3\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph4\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph5\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph6\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph7\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph8\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph9\", false);\n        suite.addTestsFromResource(\"paragraph/paragraph10\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim1\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim2\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim3\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim4\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim5\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim6\", false);\n        suite.addTestsFromResource(\"verbatim/verbatim7\", false);\n        \n        // Tables\n        suite.addTestsFromResource(\"table/table1\", false);\n        suite.addTestsFromResource(\"table/table2\", false);\n        suite.addTestsFromResource(\"table/table3\", false);\n        suite.addTestsFromResource(\"table/table4\", false);\n        suite.addTestsFromResource(\"table/table5\", false);\n\n        // Macros\n        suite.addTestsFromResource(\"macros/macro1\", false);\n        suite.addTestsFromResource(\"macros/macro2\", false);\n        suite.addTestsFromResource(\"macros/macro3\", false);\n        suite.addTestsFromResource(\"macros/macro4\", false);\n        suite.addTestsFromResource(\"macros/macro5\", false);\n        suite.addTestsFromResource(\"macros/macro6\", true);\n        suite.addTestsFromResource(\"macros/macro7\", true);\n        suite.addTestsFromResource(\"macros/macro8\", true);\n        suite.addTestsFromResource(\"macros/macro9\", true);\n\n        // Links\n        suite.addTestsFromResource(\"link/links1\", false);\n        suite.addTestsFromResource(\"link/links2\", false);\n        suite.addTestsFromResource(\"link/links3\", false);\n        suite.addTestsFromResource(\"link/links4\", false);\n        suite.addTestsFromResource(\"link/links5\", false);\n        suite.addTestsFromResource(\"link/links6\", false);\n        suite.addTestsFromResource(\"link/links7\", false);\n        suite.addTestsFromResource(\"link/links8\", false);\n        suite.addTestsFromResource(\"link/links9\", false);\n        suite.addTestsFromResource(\"link/links10\", false);\n        suite.addTestsFromResource(\"link/links11\", false);\n        suite.addTestsFromResource(\"link/links12\", false);\n        suite.addTestsFromResource(\"link/links13\", false);\n        suite.addTestsFromResource(\"link/links14\", false);\n        suite.addTestsFromResource(\"link/links15\", false);\n        suite.addTestsFromResource(\"link/links16\", false);\n        suite.addTestsFromResource(\"link/links17\", false);\n\n        // Lists\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"list/list2\", false);\n        suite.addTestsFromResource(\"list/list3\", false);\n        suite.addTestsFromResource(\"list/list4\", false);\n        suite.addTestsFromResource(\"list/list5\", false);\n        suite.addTestsFromResource(\"list/list6\", false);\n        suite.addTestsFromResource(\"list/list7\", false);\n        suite.addTestsFromResource(\"list/list8\", false);\n        suite.addTestsFromResource(\"list/list9\", false);\n        suite.addTestsFromResource(\"list/list10\", false);\n        suite.addTestsFromResource(\"list/list11\", false);\n        suite.addTestsFromResource(\"list/list12\", false);\n        suite.addTestsFromResource(\"list/definitionlist1\", false);\n        suite.addTestsFromResource(\"list/definitionlist2\", false);\n        suite.addTestsFromResource(\"list/definitionlist3\", false);\n        suite.addTestsFromResource(\"list/definitionlist4\", false);\n        suite.addTestsFromResource(\"list/definitionlist5\", false);\n        suite.addTestsFromResource(\"list/definitionlist6\", false);\n\n        // Sections\n        suite.addTestsFromResource(\"section/section1\", false);\n        suite.addTestsFromResource(\"section/section2\", false);\n        suite.addTestsFromResource(\"section/section3\", true);\n        suite.addTestsFromResource(\"section/section4\", false);\n        suite.addTestsFromResource(\"section/section5\", false);\n        suite.addTestsFromResource(\"section/section6\", false);\n        suite.addTestsFromResource(\"section/section7\", false);\n        suite.addTestsFromResource(\"section/section8\", false);\n        \n        // Other\n        suite.addTestsFromResource(\"escape/escape1\", false);\n        suite.addTestsFromResource(\"escape/escape2\", false);\n        suite.addTestsFromResource(\"escape/escape3\", false);\n        suite.addTestsFromResource(\"escape/escape4\", false);\n        suite.addTestsFromResource(\"escape/escape5\", false);\n        suite.addTestsFromResource(\"escape/escape6\", false);\n        suite.addTestsFromResource(\"escape/escape7\", false);\n        suite.addTestsFromResource(\"escape/escape8\", false);\n        suite.addTestsFromResource(\"escape/escape9\", false);\n        suite.addTestsFromResource(\"escape/escape10\", false);\n        suite.addTestsFromResource(\"escape/escape11\", false);\n        suite.addTestsFromResource(\"escape/escape12\", false);\n        suite.addTestsFromResource(\"escape/escape13\", false);\n        suite.addTestsFromResource(\"escape/escape14\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline1\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline2\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline3\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline4\", false);\n        suite.addTestsFromResource(\"horizontalline/horizontalline5\", false);\n        suite.addTestsFromResource(\"quote/quote1\", false);\n        suite.addTestsFromResource(\"quote/quote2\", false);\n        suite.addTestsFromResource(\"quote/quote3\", false);\n        suite.addTestsFromResource(\"quote/quote4\", false);\n        suite.addTestsFromResource(\"misc/misc1\", false);\n        suite.addTestsFromResource(\"misc/misc2\", false);\n        suite.addTestsFromResource(\"misc/misc3\", false);\n        suite.addTestsFromResource(\"misc/misc4\", false);\n        suite.addTestsFromResource(\"misc/misc5\", false);\n        suite.addTestsFromResource(\"misc/misc6\", false);\n        suite.addTestsFromResource(\"encoding/encoding1\", false);\n        suite.addTestsFromResource(\"image/image1\", false);\n        suite.addTestsFromResource(\"image/image2\", false);\n        suite.addTestsFromResource(\"image/image3\", false);\n        suite.addTestsFromResource(\"image/image4\", false);\n        \n        return new RenderingPlexusTestSetup(suite);\n    }","commit_id":"90a74f2f2750f1d652f84ab9084acfa621db34f1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String convert(String name, List<String> parameters, FilterContext context)\n    {\n        StringBuffer begin = new StringBuffer();\n        String content = convertContent(parameters, context);\n        StringBuffer end = new StringBuffer();\n\n        begin.append(\"{{\");\n        begin.append(convertName(name));\n        if (parameters.size() > 0) {\n            begin.append(' ');\n            appendParameters(begin, convertParameters(parameters));\n        }\n\n        StringBuffer result = new StringBuffer();\n\n        if (content != null) {\n            begin.append(\"}}\");\n            end.append(\"{{/\");\n            end.append(convertName(name));\n            end.append(\"}}\");\n\n            result.append(!protectResult() ? context.addProtectedContent(begin.toString(), isInline()) : begin);\n            result.append(content);\n            result.append(!protectResult() ? context.addProtectedContent(end.toString(), isInline()) : end);\n        } else {\n            begin.append(\"/\");\n            begin.append(\"}}\");\n\n            result.append(!protectResult() ? context.addProtectedContent(begin.toString(), isInline()) : begin);\n        }\n\n        return result.toString();\n    }","id":7937,"modified_method":"public String convert(String name, List<String> parameters, FilterContext context)\n    {\n        StringBuffer begin = new StringBuffer();\n        String content = convertContent(parameters, context);\n        Map<String, String> params = convertParameters(parameters);\n\n        begin.append(\"{{\");\n        begin.append(convertName(name));\n        if (params.size() > 0) {\n            begin.append(' ');\n            appendParameters(begin, params);\n        }\n\n        StringBuffer result = new StringBuffer();\n\n        if (content != null) {\n            begin.append(\"}}\");\n            result.append(!protectResult() ? context.addProtectedContent(begin.toString(), isInline()) : begin);\n\n            result.append(content);\n\n            StringBuffer end = new StringBuffer();\n            end.append(\"{{/\");\n            end.append(convertName(name));\n            end.append(\"}}\");\n            result.append(!protectResult() ? context.addProtectedContent(end.toString(), isInline()) : end);\n        } else {\n            begin.append(\"/\");\n            begin.append(\"}}\");\n\n            result.append(!protectResult() ? context.addProtectedContent(begin.toString(), isInline()) : begin);\n        }\n\n        return result.toString();\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.velocity.internal.util.VelocityParser#getDirective(char[], int, java.lang.StringBuffer,\n     *      org.xwiki.velocity.internal.util.VelocityParserContext)\n     */\n    @Override\n    public int getDirective(char[] array, int currentIndex, StringBuffer velocityBlock, VelocityParserContext context)\n        throws InvalidVelocityException\n    {\n        int i = currentIndex + 1;\n\n        ExtendedVelocityParserContext econtext = (ExtendedVelocityParserContext) context;\n\n        // Get macro name\n        StringBuffer directiveNameBuffer = new StringBuffer();\n        i = getDirectiveName(array, i, directiveNameBuffer, null, context);\n        String directiveName = directiveNameBuffer.toString();\n\n        StringBuffer directiveBuffer = new StringBuffer();\n        directiveBuffer.append(array, currentIndex, i - currentIndex);\n\n        if (VELOCITYDIRECTIVE_ALL.contains(directiveName)) {\n            // get the velocity directive\n            if (VELOCITYDIRECTIVE_BEGIN.contains(directiveName)) {\n                context.pushVelocityDepth();\n            } else if (VELOCITYDIRECTIVE_END.contains(directiveName)) {\n                context.popVelocityDepth();\n            }\n\n            if (!VELOCITYDIRECTIVE_NOPARAM.contains(directiveName)) {\n                // Skip spaces\n                for (; i < array.length && array[i] == ' '; ++i) {\n                    directiveBuffer.append(array[i]);\n                }\n\n                if (i < array.length && array[i] == '(') {\n                    // Skip condition\n                    i = getMethodParameters(array, i, directiveBuffer, context);\n                }\n            }\n\n            // consume the end of the line\n            i = getDirectiveEndOfLine(array, i, directiveBuffer, context);\n\n            econtext.setVelocity(true);\n            context.setType(VelocityParserContext.VelocityType.DIRECTIVE);\n        } else {\n            // Skip spaces\n            for (; i < array.length && array[i] == ' '; ++i) {\n                directiveBuffer.append(array[i]);\n            }\n\n            if (i < array.length) {\n                if (array[i] == '(') {\n                    ((ExtendedVelocityParserContext) context).setInline(true);\n\n                    List<String> parameters = new ArrayList<String>();\n                    // Get condition\n                    i = getMacroParameters(array, i, directiveBuffer, parameters, econtext);\n                    String convertedMacro = convertMacro(directiveName, parameters, econtext);\n\n                    if (convertedMacro != null) {\n                        // Apply conversion\n                        directiveBuffer.setLength(0);\n                        directiveBuffer.append(convertedMacro);\n                    } else {\n                        econtext.setVelocity(true);\n                        context.setType(ExtendedVelocityParserContext.VelocityType.DIRECTIVE);\n                    }\n                }\n            }\n        }\n\n        velocityBlock.append(directiveBuffer);\n\n        return i;\n    }","id":7938,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.velocity.internal.util.VelocityParser#getDirective(char[], int, java.lang.StringBuffer,\n     *      org.xwiki.velocity.internal.util.VelocityParserContext)\n     */\n    @Override\n    public int getDirective(char[] array, int currentIndex, StringBuffer velocityBlock, VelocityParserContext context)\n        throws InvalidVelocityException\n    {\n        int i = currentIndex + 1;\n\n        ExtendedVelocityParserContext econtext = (ExtendedVelocityParserContext) context;\n\n        // Get macro name\n        StringBuffer directiveNameBuffer = new StringBuffer();\n        i = getDirectiveName(array, i, directiveNameBuffer, null, context);\n        String directiveName = directiveNameBuffer.toString();\n\n        StringBuffer directiveBuffer = new StringBuffer();\n        directiveBuffer.append(array, currentIndex, i - currentIndex);\n\n        if (VELOCITYDIRECTIVE_ALL.contains(directiveName)) {\n            // get the velocity directive\n            if (VELOCITYDIRECTIVE_BEGIN.contains(directiveName)) {\n                context.pushVelocityDepth();\n            } else if (VELOCITYDIRECTIVE_END.contains(directiveName)) {\n                context.popVelocityDepth();\n            }\n\n            if (!VELOCITYDIRECTIVE_NOPARAM.contains(directiveName)) {\n                // Skip spaces\n                for (; i < array.length && array[i] == ' '; ++i) {\n                    directiveBuffer.append(array[i]);\n                }\n\n                if (i < array.length && array[i] == '(') {\n                    // Skip condition\n                    i = getMethodParameters(array, i, directiveBuffer, context);\n                } else {\n                    throw new InvalidVelocityException();\n                }\n            }\n\n            // consume the end of the line\n            i = getDirectiveEndOfLine(array, i, directiveBuffer, context);\n\n            econtext.setVelocity(true);\n            context.setType(VelocityParserContext.VelocityType.DIRECTIVE);\n        } else {\n            // Skip spaces\n            for (; i < array.length && array[i] == ' '; ++i) {\n                directiveBuffer.append(array[i]);\n            }\n\n            if (i < array.length && array[i] == '(') {\n                ((ExtendedVelocityParserContext) context).setInline(true);\n\n                List<String> parameters = new ArrayList<String>();\n                // Get condition\n                i = getMacroParameters(array, i, directiveBuffer, parameters, econtext);\n                String convertedMacro = convertMacro(directiveName, parameters, econtext);\n\n                if (convertedMacro != null) {\n                    // Apply conversion\n                    directiveBuffer.setLength(0);\n                    directiveBuffer.append(convertedMacro);\n                } else {\n                    econtext.setVelocity(true);\n                    context.setType(ExtendedVelocityParserContext.VelocityType.DIRECTIVE);\n                }\n            } else {\n                throw new InvalidVelocityException();\n            }\n        }\n\n        velocityBlock.append(directiveBuffer);\n\n        return i;\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private int getComment(char[] array, int currentIndex, StringBuffer commentBlock, HTMLFilterContext context)\n    {\n        context.setType(HTMLType.COMMENT);\n        context.setHTML(true);\n\n        int i = currentIndex + 4;\n\n        for (; i < array.length && (array[i - 1] == '>' || array[i - 2] != '-' || array[i - 2] != '-'); ++i) {\n        }\n\n        commentBlock.append(array, currentIndex, i - currentIndex);\n\n        return i;\n    }","id":7939,"modified_method":"private int getComment(char[] array, int currentIndex, StringBuffer commentBlock, HTMLFilterContext context)\n    {\n        context.setType(HTMLType.COMMENT);\n        context.setHTML(true);\n\n        int i = currentIndex + 4;\n\n        for (; i < array.length && (array[i - 1] != '>' || array[i - 2] != '-' || array[i - 3] != '-'); ++i) {\n        }\n\n        commentBlock.append(array, currentIndex, i - currentIndex);\n\n        return i;\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private int getElementContent(char[] array, int currentIndex, String currentElement, StringBuffer elementContent,\n        StringBuffer endElement, HTMLFilterContext context)\n    {\n        int i = currentIndex;\n\n        for (; i < array.length;) {\n            char c = array[i];\n\n            context.setConversion(false);\n\n            StringBuffer htmlBlock = new StringBuffer();\n\n            String elementName;\n            if (c == '<') {\n                try {\n                    StringBuffer elementNameBuffer = new StringBuffer();\n                    i = getHTMLBlock(array, i, elementNameBuffer, htmlBlock, context);\n                    elementName = elementNameBuffer.toString();\n\n                    if (context.peekType() == HTMLType.END\n                        && (currentElement.equals(elementName) || currentElement.startsWith(elementName))) {\n                        endElement.append(htmlBlock);\n                        break;\n                    }\n\n                    if (context.peekType() != null) {\n                        elementContent.append(htmlBlock);\n                    } else {\n                        elementContent.append(c);\n                        ++i;\n                    }\n                } catch (InvalidHtmlException e) {\n                    getLogger().debug(\"Invalid HTML block at char [\" + i + \"]\", e);\n                }\n            } else {\n                elementContent.append(c);\n                ++i;\n            }\n        }\n\n        return i;\n    }","id":7940,"modified_method":"private int getElementContent(char[] array, int currentIndex, String currentElement, StringBuffer elementContent,\n        StringBuffer endElement, HTMLFilterContext context)\n    {\n        int i = currentIndex;\n\n        for (; i < array.length;) {\n            char c = array[i];\n\n            context.setConversion(false);\n\n            StringBuffer htmlBlock = new StringBuffer();\n\n            String elementName;\n            if (c == '<') {\n                try {\n                    StringBuffer elementNameBuffer = new StringBuffer();\n                    i = getHTMLBlock(array, i, elementNameBuffer, htmlBlock, context);\n                    elementName = elementNameBuffer.toString();\n\n                    if (context.peekType() == HTMLType.END\n                        && (currentElement.equals(elementName) || currentElement.startsWith(elementName))) {\n                        if (endElement != null) {\n                            endElement.append(htmlBlock);\n                        }\n                        break;\n                    }\n\n                    if (context.peekType() != null) {\n                        elementContent.append(htmlBlock);\n                    } else {\n                        elementContent.append(c);\n                        ++i;\n                    }\n                } catch (InvalidHtmlException e) {\n                    getLogger().debug(\"Invalid HTML block at char [\" + i + \"]\", e);\n                }\n            } else {\n                elementContent.append(c);\n                ++i;\n            }\n        }\n\n        return i;\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        char[] array = content.toCharArray();\n\n        HTMLFilterContext context = new HTMLFilterContext(filterContext);\n\n        StringBuffer beforeHtmlBuffer = new StringBuffer();\n        StringBuffer htmlBuffer = new StringBuffer();\n        StringBuffer afterHtmlBuffer = new StringBuffer();\n\n        boolean inHTMLMacro = false;\n\n        int i = 0;\n        for (; i < array.length;) {\n            char c = array[i];\n\n            context.setConversion(false);\n            context.pushType();\n            context.setHTML(false);\n            context.setVelocityOpen(false);\n            context.setVelocityClose(false);\n            context.setInline(true);\n\n            StringBuffer nonHtmlbuffer = inHTMLMacro ? afterHtmlBuffer : beforeHtmlBuffer;\n\n            if (c == '<') {\n                try {\n                    StringBuffer htmlBlock = new StringBuffer();\n\n                    i = getHTMLBlock(array, i, null, htmlBlock, context);\n\n                    StringBuffer buffer;\n                    if (context.isHTML()) {\n                        if (!inHTMLMacro) {\n                            inHTMLMacro = true;\n                        } else {\n                            htmlBuffer.append(afterHtmlBuffer);\n                            afterHtmlBuffer.setLength(0);\n                        }\n\n                        buffer = htmlBuffer;\n                    } else {\n                        buffer = nonHtmlbuffer;\n                    }\n\n                    if (context.isVelocityOpen()) {\n                        VelocityFilter.appendVelocityOpen(buffer, filterContext, false);\n                    }\n\n                    if (context.isConversion()) {\n                        if (!context.isInline()) {\n                            if (htmlBuffer.length() > 0 || buffer.length() > 0) {\n                                CleanUtil.setTrailingNewLines(buffer, 2);\n                            }\n                        }\n                    }\n\n                    buffer.append(htmlBlock);\n\n                    if (context.isVelocityClose()) {\n                        VelocityFilter.appendVelocityClose(buffer, filterContext, false);\n                    }\n                } catch (InvalidHtmlException e) {\n                    getLogger().debug(\"Invalid HTML block at char [\" + i + \"]\", e);\n\n                    nonHtmlbuffer.append(c);\n                    ++i;\n                }\n            } else {\n                nonHtmlbuffer.append(c);\n                ++i;\n            }\n        }\n\n        String beforeHtmlContent = beforeHtmlBuffer.toString();\n        String htmlContent = htmlBuffer.toString();\n        String afterHtmlContent = afterHtmlBuffer.toString();\n\n        // Include velocity content as HTML content since lot of velocity generates html\n        if (htmlContent.length() > 0) {\n            Matcher velocityBeforeMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(beforeHtmlBuffer);\n            if (velocityBeforeMatcher.find()) {\n                htmlContent = beforeHtmlContent.substring(velocityBeforeMatcher.start()) + htmlContent;\n                beforeHtmlContent = beforeHtmlContent.substring(0, velocityBeforeMatcher.start());\n            }\n            Matcher velocityAfterMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(afterHtmlContent);\n            if (velocityAfterMatcher.find()) {\n                htmlContent = htmlContent + afterHtmlContent.substring(0, velocityAfterMatcher.end());\n                afterHtmlContent = afterHtmlContent.substring(velocityAfterMatcher.end());\n            }\n        } else {\n            Matcher velocityContentMatcher = VelocityFilter.VELOCITYCONTENT_PATTERN.matcher(beforeHtmlBuffer);\n\n            if (velocityContentMatcher.find()) {\n                htmlContent = velocityContentMatcher.group(0);\n                afterHtmlContent = beforeHtmlContent.substring(velocityContentMatcher.end());\n                beforeHtmlContent = beforeHtmlContent.substring(0, velocityContentMatcher.start());\n            }\n        }\n\n        if (htmlContent.length() > 0) {\n            boolean multilines = filterContext.unProtect(htmlContent).indexOf(\"\\n\") != -1;\n\n            // Make sure html macro does not start in a block and ends in another by \"eating\" them\n            if (multilines && htmlContent.indexOf(\"\\n\\n\") != -1) {\n                int beforeIndex = beforeHtmlContent.lastIndexOf(\"\\n\\n\");\n\n                if (beforeIndex == -1) {\n                    htmlContent = beforeHtmlContent + htmlContent;\n                    beforeHtmlContent = \"\";\n                } else {\n                    htmlContent = beforeHtmlContent.substring(beforeIndex + 2) + htmlContent;\n                    beforeHtmlContent = beforeHtmlContent.substring(0, beforeIndex + 2);\n                }\n\n                int afterIndex = afterHtmlContent.indexOf(\"\\n\\n\");\n\n                if (afterIndex == -1) {\n                    htmlContent += afterHtmlContent;\n                    afterHtmlContent = \"\";\n                } else {\n                    htmlContent += afterHtmlContent.substring(0, afterIndex);\n                    afterHtmlContent = afterHtmlContent.substring(afterIndex);\n                }\n            }\n\n            // velocity open\n            Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(htmlContent);\n            boolean velocityOpen = velocityOpenMatcher.find();\n            htmlContent = velocityOpenMatcher.replaceFirst(\"\");\n\n            // velocity close\n            Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(htmlContent);\n            boolean velocityClose = velocityCloseMatcher.find();\n            htmlContent = velocityCloseMatcher.replaceFirst(\"\");\n\n            // Make sure empty lines are taken into account\n            htmlContent = forceEmptyLines(htmlContent);\n            // Make sure \\\\ line breaks are taken into account\n            htmlContent = forceLineBreak(htmlContent);\n\n            // Print\n\n            // print before html\n            result.append(beforeHtmlContent);\n\n            // print html\n            // open html content\n            if (velocityOpen) {\n                VelocityFilter.appendVelocityOpen(result, filterContext, multilines);\n            }\n\n            appendHTMLOpen(result, filterContext, multilines);\n\n            // print html content\n            result.append(filterContext.addProtectedContent(escape20SyntaxFilter.filter(htmlContent, filterContext),\n                false));\n\n            appendHTMLClose(result, filterContext, multilines);\n\n            // close html content\n            if (velocityClose) {\n                VelocityFilter.appendVelocityClose(result, filterContext, multilines);\n            }\n\n            // print after html\n            result.append(afterHtmlContent);\n        } else {\n            result = beforeHtmlBuffer;\n        }\n\n        return result.toString();\n    }","id":7941,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.rendering.parser.xwiki10.Filter#filter(java.lang.String,\n     *      org.xwiki.rendering.parser.xwiki10.FilterContext)\n     */\n    public String filter(String content, FilterContext filterContext)\n    {\n        StringBuffer result = new StringBuffer();\n        char[] array = content.toCharArray();\n\n        HTMLFilterContext context = new HTMLFilterContext(filterContext);\n\n        StringBuffer beforeHtmlBuffer = new StringBuffer();\n        StringBuffer htmlBuffer = new StringBuffer();\n        StringBuffer afterHtmlBuffer = new StringBuffer();\n\n        boolean inHTMLMacro = false;\n\n        int i = 0;\n        for (; i < array.length;) {\n            char c = array[i];\n\n            context.setConversion(false);\n            context.pushType();\n            context.setHTML(false);\n            context.setVelocityOpen(false);\n            context.setVelocityClose(false);\n            context.setInline(true);\n\n            StringBuffer nonHtmlbuffer = inHTMLMacro ? afterHtmlBuffer : beforeHtmlBuffer;\n\n            if (c == '<') {\n                try {\n                    StringBuffer htmlBlock = new StringBuffer();\n\n                    int start = i;\n                    i = getHTMLBlock(array, i, null, htmlBlock, context);\n\n                    StringBuffer buffer;\n                    String str;\n                    if (context.isHTML()) {\n                        if (!inHTMLMacro) {\n                            inHTMLMacro = true;\n                        } else {\n                            htmlBuffer.append(afterHtmlBuffer);\n                            afterHtmlBuffer.setLength(0);\n                        }\n\n                        buffer = htmlBuffer;\n                        str = context.cleanContent(new String(array, start, i - start));\n                    } else {\n                        buffer = nonHtmlbuffer;\n                        str = htmlBlock.toString();\n                    }\n\n                    if (context.isVelocityOpen()) {\n                        VelocityFilter.appendVelocityOpen(buffer, filterContext, false);\n                    }\n\n                    if (context.isConversion()) {\n                        if (!context.isInline()) {\n                            if (htmlBuffer.length() > 0 || buffer.length() > 0) {\n                                CleanUtil.setTrailingNewLines(buffer, 2);\n                            }\n                        }\n                    }\n\n                    buffer.append(str);\n\n                    if (context.isVelocityClose()) {\n                        VelocityFilter.appendVelocityClose(buffer, filterContext, false);\n                    }\n                } catch (InvalidHtmlException e) {\n                    getLogger().debug(\"Invalid HTML block at char [\" + i + \"]\", e);\n\n                    nonHtmlbuffer.append(c);\n                    ++i;\n                }\n            } else {\n                nonHtmlbuffer.append(c);\n                ++i;\n            }\n        }\n\n        String beforeHtmlContent = beforeHtmlBuffer.toString();\n        String htmlContent = htmlBuffer.toString();\n        String afterHtmlContent = afterHtmlBuffer.toString();\n\n        // Include velocity content as HTML content since lot of velocity generates html\n        if (htmlContent.length() > 0) {\n            Matcher velocityBeforeMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(beforeHtmlBuffer);\n            if (velocityBeforeMatcher.find()) {\n                htmlContent = beforeHtmlContent.substring(velocityBeforeMatcher.start()) + htmlContent;\n                beforeHtmlContent = beforeHtmlContent.substring(0, velocityBeforeMatcher.start());\n            }\n            Matcher velocityAfterMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(afterHtmlContent);\n            if (velocityAfterMatcher.find()) {\n                htmlContent = htmlContent + afterHtmlContent.substring(0, velocityAfterMatcher.end());\n                afterHtmlContent = afterHtmlContent.substring(velocityAfterMatcher.end());\n            }\n        } else {\n            Matcher velocityContentMatcher = VelocityFilter.VELOCITYCONTENT_PATTERN.matcher(beforeHtmlBuffer);\n\n            if (velocityContentMatcher.find()) {\n                htmlContent = velocityContentMatcher.group(0);\n                afterHtmlContent = beforeHtmlContent.substring(velocityContentMatcher.end());\n                beforeHtmlContent = beforeHtmlContent.substring(0, velocityContentMatcher.start());\n            }\n        }\n\n        if (htmlContent.length() > 0) {\n            boolean multilines = filterContext.unProtect(htmlContent).indexOf(\"\\n\") != -1;\n\n            // Make sure html macro does not start in a block and ends in another by \"eating\" them\n            if (multilines && htmlContent.indexOf(\"\\n\\n\") != -1) {\n                int beforeIndex = beforeHtmlContent.lastIndexOf(\"\\n\\n\");\n\n                if (beforeIndex == -1) {\n                    htmlContent = beforeHtmlContent + htmlContent;\n                    beforeHtmlContent = \"\";\n                } else {\n                    htmlContent = beforeHtmlContent.substring(beforeIndex + 2) + htmlContent;\n                    beforeHtmlContent = beforeHtmlContent.substring(0, beforeIndex + 2);\n                }\n\n                int afterIndex = afterHtmlContent.indexOf(\"\\n\\n\");\n\n                if (afterIndex == -1) {\n                    htmlContent += afterHtmlContent;\n                    afterHtmlContent = \"\";\n                } else {\n                    htmlContent += afterHtmlContent.substring(0, afterIndex);\n                    afterHtmlContent = afterHtmlContent.substring(afterIndex);\n                }\n            }\n\n            // velocity open\n            Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(htmlContent);\n            boolean velocityOpen = velocityOpenMatcher.find();\n            htmlContent = velocityOpenMatcher.replaceFirst(\"\");\n\n            // velocity close\n            Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(htmlContent);\n            boolean velocityClose = velocityCloseMatcher.find();\n            htmlContent = velocityCloseMatcher.replaceFirst(\"\");\n\n            // Make sure empty lines are taken into account\n            htmlContent = forceEmptyLines(htmlContent);\n            // Make sure \\\\ line breaks are taken into account\n            htmlContent = forceLineBreak(htmlContent);\n\n            // Print\n\n            // print before html\n            result.append(beforeHtmlContent);\n\n            // print html\n            // open html content\n            if (velocityOpen) {\n                VelocityFilter.appendVelocityOpen(result, filterContext, multilines);\n            }\n\n            appendHTMLOpen(result, filterContext, multilines);\n\n            // print html content\n            result.append(filterContext.addProtectedContent(escape20SyntaxFilter.filter(htmlContent, filterContext),\n                false));\n\n            appendHTMLClose(result, filterContext, multilines);\n\n            // close html content\n            if (velocityClose) {\n                VelocityFilter.appendVelocityClose(result, filterContext, multilines);\n            }\n\n            // print after html\n            result.append(afterHtmlContent);\n        } else {\n            result = beforeHtmlBuffer;\n        }\n\n        return result.toString();\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private int getElement(char[] array, int currentIndex, StringBuffer elementNameBuffer, StringBuffer element,\n        HTMLFilterContext context) throws InvalidHtmlException\n    {\n        // If white space it's not html\n        if (Character.isWhitespace(array[currentIndex + 1])) {\n            throw new InvalidHtmlException();\n        }\n\n        // get begin element\n        StringBuffer beginElement = new StringBuffer();\n        Map<String, String> parameterMap = new LinkedHashMap<String, String>();\n        if (elementNameBuffer == null) {\n            elementNameBuffer = new StringBuffer();\n        }\n        int i = getBeginElement(array, currentIndex, elementNameBuffer, beginElement, parameterMap, context);\n\n        String elementName = elementNameBuffer.toString();\n\n        // force <br> as full element instead of just begin element\n        if (context.peekType() == HTMLType.BEGIN && elementName.equals(\"br\")) {\n            context.setType(HTMLType.ELEMENT);\n        }\n\n        // Get content\n        StringBuffer elementContent = null;\n        StringBuffer endElement = new StringBuffer();\n        if (context.peekType() == HTMLType.BEGIN) {\n            elementContent = new StringBuffer();\n            context.pushType();\n            i = getElementContent(array, i, elementName, elementContent, endElement, context);\n            context.popType();\n        }\n\n        // Convert\n        String convertedElement =\n            convertElement(elementName, elementContent != null ? elementContent.toString() : null, parameterMap,\n                context);\n\n        // Print\n        if (convertedElement != null) {\n            element.append(convertedElement);\n        } else {\n            element.append(context.cleanContent(beginElement.toString()));\n            if (elementContent != null) {\n                element.append(elementContent);\n                element.append(context.cleanContent(endElement.toString()));\n            }\n\n            context.setHTML(true);\n        }\n\n        context.setType(HTMLType.ELEMENT);\n\n        return i;\n    }","id":7942,"modified_method":"private int getElement(char[] array, int currentIndex, StringBuffer elementNameBuffer, StringBuffer element,\n        HTMLFilterContext context) throws InvalidHtmlException\n    {\n        // If white space it's not html\n        if (Character.isWhitespace(array[currentIndex + 1])) {\n            throw new InvalidHtmlException();\n        }\n\n        // get begin element\n        StringBuffer beginElement = new StringBuffer();\n        Map<String, String> parameterMap = new LinkedHashMap<String, String>();\n        if (elementNameBuffer == null) {\n            elementNameBuffer = new StringBuffer();\n        }\n        int i = getBeginElement(array, currentIndex, elementNameBuffer, beginElement, parameterMap, context);\n\n        String elementName = elementNameBuffer.toString();\n\n        // force <br> as full element instead of just begin element\n        if (context.peekType() == HTMLType.BEGIN && elementName.equals(\"br\")) {\n            context.setType(HTMLType.ELEMENT);\n        }\n\n        // Get content\n        StringBuffer elementContent = null;\n        if (context.peekType() == HTMLType.BEGIN) {\n            elementContent = new StringBuffer();\n            context.pushType();\n            i = getElementContent(array, i, elementName, elementContent, null, context);\n            context.popType();\n        }\n\n        // Convert\n        String convertedElement =\n            convertElement(elementName, elementContent != null ? elementContent.toString() : null, parameterMap,\n                context);\n\n        // Print\n        if (convertedElement != null) {\n            element.append(convertedElement);\n        } else {\n            context.setHTML(true);\n        }\n\n        context.setType(HTMLType.ELEMENT);\n\n        return i;\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String cleanContent(String content)\n        {\n            String cleanedContent = content;\n            if (!isVelocityOpen()) {\n                Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(content);\n                setVelocityOpen(isVelocityOpen() | velocityOpenMatcher.find());\n                cleanedContent = velocityOpenMatcher.replaceFirst(\"\");\n            }\n\n            if (!isVelocityClose()) {\n                Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(cleanedContent);\n                setVelocityClose(isVelocityClose() | velocityCloseMatcher.find());\n                cleanedContent = velocityCloseMatcher.replaceFirst(\"\");\n            }\n\n            return cleanedContent;\n        }","id":7943,"modified_method":"public String cleanContent(String content)\n        {\n            String cleanedContent = content;\n\n            Matcher velocityOpenMatcher = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(content);\n            setVelocityOpen(isVelocityOpen() | velocityOpenMatcher.find());\n            cleanedContent = velocityOpenMatcher.replaceFirst(\"\");\n\n            Matcher velocityCloseMatcher = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(cleanedContent);\n            setVelocityClose(isVelocityClose() | velocityCloseMatcher.find());\n            cleanedContent = velocityCloseMatcher.replaceFirst(\"\");\n\n            return cleanedContent;\n        }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String convertContent(List<String> parameters, FilterContext context)\n    {\n        String content = cleanQuotes(parameters.get(0));\n\n        return this.velocityFilter.filter(content, context);\n    }","id":7944,"modified_method":"@Override\n    protected String convertContent(List<String> parameters, FilterContext context)\n    {\n        String content = cleanQuotes(parameters.get(0));\n\n        content = this.velocityFilter.filter(content, context);\n\n        content = VelocityFilter.VELOCITYOPEN_PATTERN.matcher(content).replaceFirst(\"\");\n        content = VelocityFilter.VELOCITYCLOSE_PATTERN.matcher(content).replaceFirst(\"\");\n\n        return this.velocityFilter.filter(content, context);\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test XWiki1.0 -> XWiki2.0 conversion\");\n\n        // Velocity\n        suite.addTestsFromResource(\"velocity/velocity1\", false);\n        suite.addTestsFromResource(\"velocity/velocity2\", false);\n        suite.addTestsFromResource(\"velocity/velocity3\", false);\n        suite.addTestsFromResource(\"velocity/velocity4\", false);\n        suite.addTestsFromResource(\"velocity/velocity5\", false);\n        suite.addTestsFromResource(\"velocity/velocity6\", false);\n        suite.addTestsFromResource(\"velocity/velocity7\", false);\n        suite.addTestsFromResource(\"velocity/velocity8\", false);\n        suite.addTestsFromResource(\"velocity/velocity9\", false);\n        suite.addTestsFromResource(\"velocity/velocity10\", false);\n        suite.addTestsFromResource(\"velocity/velocity11\", false);\n        suite.addTestsFromResource(\"velocity/velocity12\", false);\n        suite.addTestsFromResource(\"velocity/velocity13\", false);\n        suite.addTestsFromResource(\"velocity/velocity14\", false);\n        suite.addTestsFromResource(\"velocity/velocity15\", false);\n        suite.addTestsFromResource(\"velocity/velocity16\", false);\n        suite.addTestsFromResource(\"velocity/velocity17\", false);\n        suite.addTestsFromResource(\"velocity/velocity18\", false);\n        suite.addTestsFromResource(\"velocity/velocity19\", false);\n        suite.addTestsFromResource(\"velocity/velocity20\", false);\n        suite.addTestsFromResource(\"velocity/velocity21\", false);\n        suite.addTestsFromResource(\"velocity/velocity22\", false);\n        suite.addTestsFromResource(\"velocity/velocity23\", false);\n        suite.addTestsFromResource(\"velocity/velocity24\", false);\n        suite.addTestsFromResource(\"velocity/velocity25\", false);\n\n        // Groovy\n        suite.addTestsFromResource(\"groovy/groovy1\", false);\n\n        // Velocity Macros\n        suite.addTestsFromResource(\"macros/velocity/include1\", false);\n        suite.addTestsFromResource(\"macros/velocity/toc1\", false);\n        suite.addTestsFromResource(\"macros/velocity/info1\", false);\n        suite.addTestsFromResource(\"macros/velocity/warning1\", false);\n        suite.addTestsFromResource(\"macros/velocity/error1\", false);\n\n        // Radeox Macros\n        suite.addTestsFromResource(\"macros/radeox/attach1\", false);\n        suite.addTestsFromResource(\"macros/radeox/image1\", false);\n        suite.addTestsFromResource(\"macros/radeox/code1\", false);\n        suite.addTestsFromResource(\"macros/radeox/table1\", false);\n        suite.addTestsFromResource(\"macros/radeox/quote1\", false);\n        suite.addTestsFromResource(\"macros/radeox/style1\", false);\n\n        suite.addTestsFromResource(\"pre/pre1\", false);\n        suite.addTestsFromResource(\"pre/pre2\", false);\n\n        // Wiki syntaxes\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"strikeout/strikeout1\", false);\n        suite.addTestsFromResource(\"link/link1\", false);\n        suite.addTestsFromResource(\"link/link2\", false);\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"list/list2\", false);\n        suite.addTestsFromResource(\"list/list3\", false);\n        suite.addTestsFromResource(\"list/list4\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        suite.addTestsFromResource(\"section/section2\", false);\n        suite.addTestsFromResource(\"section/section3\", false);\n        suite.addTestsFromResource(\"section/section4\", false);\n        suite.addTestsFromResource(\"hr/hr1\", false);\n\n        // HTML\n        suite.addTestsFromResource(\"html/html1\", false);\n        suite.addTestsFromResource(\"html/html2\", false);\n        suite.addTestsFromResource(\"html/html3\", false);\n        suite.addTestsFromResource(\"html/html4\", false);\n        suite.addTestsFromResource(\"html/html5\", false);\n        suite.addTestsFromResource(\"html/html6\", false);\n        suite.addTestsFromResource(\"html/html7\", false);\n        suite.addTestsFromResource(\"html/html8\", false);\n        suite.addTestsFromResource(\"html/html9\", false);\n        suite.addTestsFromResource(\"html/html10\", false);\n        suite.addTestsFromResource(\"html/html11\", false);\n        suite.addTestsFromResource(\"html/html12\", false);\n        suite.addTestsFromResource(\"html/html13\", false);\n        suite.addTestsFromResource(\"html/html14\", false);\n        suite.addTestsFromResource(\"html/html15\", false);\n        suite.addTestsFromResource(\"html/html16\", false);\n\n        // HTML elements\n        suite.addTestsFromResource(\"macros/html/br1\", false);\n        suite.addTestsFromResource(\"macros/html/div1\", false);\n        suite.addTestsFromResource(\"macros/html/span1\", false);\n\n        // Escape\n        suite.addTestsFromResource(\"escape/escape1\", false);\n        suite.addTestsFromResource(\"escape/escape2\", false);\n        suite.addTestsFromResource(\"escape/escape3\", false);\n\n        // Cleaning\n        suite.addTestsFromResource(\"cleaning/cleaning1\", false);\n\n        // Misc\n        suite.addTestsFromResource(\"misc/misc1\", false);\n        suite.addTestsFromResource(\"misc/misc2\", false);\n        suite.addTestsFromResource(\"misc/misc3\", false);\n\n        return new ComponentManagerTestSetup(suite);\n    }","id":7945,"modified_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test XWiki1.0 -> XWiki2.0 conversion\");\n\n        // Velocity\n        suite.addTestsFromResource(\"velocity/velocity1\", false);\n        suite.addTestsFromResource(\"velocity/velocity2\", false);\n        suite.addTestsFromResource(\"velocity/velocity3\", false);\n        suite.addTestsFromResource(\"velocity/velocity4\", false);\n        suite.addTestsFromResource(\"velocity/velocity5\", false);\n        suite.addTestsFromResource(\"velocity/velocity6\", false);\n        suite.addTestsFromResource(\"velocity/velocity7\", false);\n        suite.addTestsFromResource(\"velocity/velocity8\", false);\n        suite.addTestsFromResource(\"velocity/velocity9\", false);\n        suite.addTestsFromResource(\"velocity/velocity10\", false);\n        suite.addTestsFromResource(\"velocity/velocity11\", false);\n        suite.addTestsFromResource(\"velocity/velocity12\", false);\n        suite.addTestsFromResource(\"velocity/velocity13\", false);\n        suite.addTestsFromResource(\"velocity/velocity14\", false);\n        suite.addTestsFromResource(\"velocity/velocity15\", false);\n        suite.addTestsFromResource(\"velocity/velocity16\", false);\n        suite.addTestsFromResource(\"velocity/velocity17\", false);\n        suite.addTestsFromResource(\"velocity/velocity18\", false);\n        suite.addTestsFromResource(\"velocity/velocity19\", false);\n        suite.addTestsFromResource(\"velocity/velocity20\", false);\n        suite.addTestsFromResource(\"velocity/velocity21\", false);\n        suite.addTestsFromResource(\"velocity/velocity22\", false);\n        suite.addTestsFromResource(\"velocity/velocity23\", false);\n        suite.addTestsFromResource(\"velocity/velocity24\", false);\n        suite.addTestsFromResource(\"velocity/velocity25\", false);\n        suite.addTestsFromResource(\"velocity/velocity26\", false);\n        suite.addTestsFromResource(\"velocity/velocity27\", false);\n\n        // Groovy\n        suite.addTestsFromResource(\"groovy/groovy1\", false);\n\n        // Velocity Macros\n        suite.addTestsFromResource(\"macros/velocity/include1\", false);\n        suite.addTestsFromResource(\"macros/velocity/toc1\", false);\n        suite.addTestsFromResource(\"macros/velocity/info1\", false);\n        suite.addTestsFromResource(\"macros/velocity/warning1\", false);\n        suite.addTestsFromResource(\"macros/velocity/error1\", false);\n\n        // Radeox Macros\n        suite.addTestsFromResource(\"macros/radeox/attach1\", false);\n        suite.addTestsFromResource(\"macros/radeox/image1\", false);\n        suite.addTestsFromResource(\"macros/radeox/code1\", false);\n        suite.addTestsFromResource(\"macros/radeox/table1\", false);\n        suite.addTestsFromResource(\"macros/radeox/quote1\", false);\n        suite.addTestsFromResource(\"macros/radeox/style1\", false);\n\n        suite.addTestsFromResource(\"pre/pre1\", false);\n        suite.addTestsFromResource(\"pre/pre2\", false);\n\n        // Wiki syntaxes\n        suite.addTestsFromResource(\"italic/italic1\", false);\n        suite.addTestsFromResource(\"bold/bold1\", false);\n        suite.addTestsFromResource(\"underline/underline1\", false);\n        suite.addTestsFromResource(\"strikeout/strikeout1\", false);\n        suite.addTestsFromResource(\"link/link1\", false);\n        suite.addTestsFromResource(\"link/link2\", false);\n        suite.addTestsFromResource(\"list/list1\", false);\n        suite.addTestsFromResource(\"list/list2\", false);\n        suite.addTestsFromResource(\"list/list3\", false);\n        suite.addTestsFromResource(\"list/list4\", false);\n        suite.addTestsFromResource(\"section/section1\", false);\n        suite.addTestsFromResource(\"section/section2\", false);\n        suite.addTestsFromResource(\"section/section3\", false);\n        suite.addTestsFromResource(\"section/section4\", false);\n        suite.addTestsFromResource(\"hr/hr1\", false);\n\n        // HTML\n        suite.addTestsFromResource(\"html/html1\", false);\n        suite.addTestsFromResource(\"html/html2\", false);\n        suite.addTestsFromResource(\"html/html3\", false);\n        suite.addTestsFromResource(\"html/html4\", false);\n        suite.addTestsFromResource(\"html/html5\", false);\n        suite.addTestsFromResource(\"html/html6\", false);\n        suite.addTestsFromResource(\"html/html7\", false);\n        suite.addTestsFromResource(\"html/html8\", false);\n        suite.addTestsFromResource(\"html/html9\", false);\n        suite.addTestsFromResource(\"html/html10\", false);\n        suite.addTestsFromResource(\"html/html11\", false);\n        suite.addTestsFromResource(\"html/html12\", false);\n        suite.addTestsFromResource(\"html/html13\", false);\n        suite.addTestsFromResource(\"html/html14\", false);\n        suite.addTestsFromResource(\"html/html15\", false);\n        suite.addTestsFromResource(\"html/html16\", false);\n        suite.addTestsFromResource(\"html/html17\", false);\n        suite.addTestsFromResource(\"html/html18\", false);\n\n        // HTML elements\n        suite.addTestsFromResource(\"macros/html/br1\", false);\n        suite.addTestsFromResource(\"macros/html/div1\", false);\n        //suite.addTestsFromResource(\"macros/html/span1\", false);\n\n        // Escape\n        suite.addTestsFromResource(\"escape/escape1\", false);\n        suite.addTestsFromResource(\"escape/escape2\", false);\n        suite.addTestsFromResource(\"escape/escape3\", false);\n\n        // Cleaning\n        suite.addTestsFromResource(\"cleaning/cleaning1\", false);\n\n        // Misc\n        suite.addTestsFromResource(\"misc/misc1\", false);\n        suite.addTestsFromResource(\"misc/misc2\", false);\n        suite.addTestsFromResource(\"misc/misc3\", false);\n        \n        return new ComponentManagerTestSetup(suite);\n    }","commit_id":"da925f3d1400e676c05d0cc9ef464cf8c8f73e9f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/** \n     * Sets the database drivers to the given value \n     * \n     * @param databaseKey the key of the selected database server (e.g. \"mysql\", \"generic\" or \"oracle\")\n     */\n    public void setDatabase(String databaseKey) {\n        m_databaseKey = databaseKey;\n\n        String vfsDriver = getDbProperty(m_databaseKey + \".vfs.driver\");\n        String userDriver = getDbProperty(m_databaseKey + \".user.driver\");\n        String projectDriver = getDbProperty(m_databaseKey + \".project.driver\");\n        String workflowDriver = getDbProperty(m_databaseKey + \".workflow.driver\");\n        String backupDriver = getDbProperty(m_databaseKey + \".backup.driver\");\n\n        // Change/write configuration only if not available or database changed\n        setExtProperty(\"db.name\", m_databaseKey);\n        if (getExtProperty(\"db.vfs.driver\") == null || \"\".equals(getExtProperty(\"db.vfs.driver\"))) {\n            setExtProperty(\"db.vfs.driver\", vfsDriver);\n        }\n        if (getExtProperty(\"db.user.driver\") == null || \"\".equals(getExtProperty(\"db.user.driver\"))) {\n            setExtProperty(\"db.user.driver\", userDriver);\n        }\n        if (getExtProperty(\"db.project.driver\") == null || \"\".equals(getExtProperty(\"db.project.driver\"))) {\n            setExtProperty(\"db.project.driver\", projectDriver);\n        }\n        if (getExtProperty(\"db.workflow.driver\") == null || \"\".equals(getExtProperty(\"db.workflow.driver\"))) {\n            setExtProperty(\"db.workflow.driver\", workflowDriver);\n        }\n        if (getExtProperty(\"db.backup.driver\") == null || \"\".equals(getExtProperty(\"db.backup.driver\"))) {\n            setExtProperty(\"db.backup.driver\", backupDriver);\n        }\n    }","id":7946,"modified_method":"/** \n     * Sets the database drivers to the given value \n     * \n     * @param databaseKey the key of the selected database server (e.g. \"mysql\", \"generic\" or \"oracle\")\n     */\n    public void setDatabase(String databaseKey) {\n        m_databaseKey = databaseKey;\n\n        String vfsDriver = getDbProperty(m_databaseKey + \".vfs.driver\");\n        String userDriver = getDbProperty(m_databaseKey + \".user.driver\");\n        String projectDriver = getDbProperty(m_databaseKey + \".project.driver\");\n        String workflowDriver = getDbProperty(m_databaseKey + \".workflow.driver\");\n        String backupDriver = getDbProperty(m_databaseKey + \".backup.driver\");\n\n        setExtProperty(\"db.name\", m_databaseKey);\n        setExtProperty(\"db.vfs.driver\", vfsDriver);\n        setExtProperty(\"db.user.driver\", userDriver);\n        setExtProperty(\"db.project.driver\", projectDriver);\n        setExtProperty(\"db.workflow.driver\", workflowDriver);\n        setExtProperty(\"db.backup.driver\", backupDriver);\n    }","commit_id":"e94c42809e1a7c8d96da9f28a1dada2fc78f70fd","url":"https://github.com/alkacon/opencms-core"},{"original_method":"private void setCommonAttributes(NewAction action) {\n    action.setPost(true);\n    action.createParam(PARAM_PROJECT_UUID)\n      .setDescription(\"A project UUID. Either this parameter, or projectKey must be set.\");\n    action.createParam(PARAM_PROJECT_KEY)\n      .setDescription(\"A project key. Either this parameter, or projectUuid must be set.\");\n    action.createParam(PARAM_PROFILE_KEY)\n      .setDescription(\"A quality profile key. Either this parameter, or a combination of profileName + language must be set.\");\n    action.createParam(PARAM_PROFILE_NAME)\n      .setDescription(\"A quality profile name. If this parameter is set, profileKey must not be set and language must be set to disambiguate.\");\n    action.createParam(PARAM_LANGUAGE)\n      .setDescription(\"A quality profile language. If this parameter is set, profileKey must not be set and profileName must be set to disambiguate.\")\n      .setPossibleValues(Collections2.transform(Arrays.asList(languages.all()), new NonNullInputFunction<Language, String>() {\n        @Override\n        public String doApply(Language input) {\n          return input.getKey();\n        }\n      }));\n  }","id":7947,"modified_method":"private void setCommonAttributes(NewAction action) {\n    action.setPost(true);\n    action.createParam(PARAM_PROJECT_UUID)\n      .setDescription(\"A project UUID. Either this parameter, or projectKey must be set.\");\n    action.createParam(PARAM_PROJECT_KEY)\n      .setDescription(\"A project key. Either this parameter, or projectUuid must be set.\");\n    action.createParam(PARAM_PROFILE_KEY)\n      .setDescription(\"A quality profile key. Either this parameter, or a combination of profileName + language must be set.\");\n    action.createParam(PARAM_PROFILE_NAME)\n      .setDescription(\"A quality profile name. If this parameter is set, profileKey must not be set and language must be set to disambiguate.\");\n    action.createParam(PARAM_LANGUAGE)\n      .setDescription(\"A quality profile language. If this parameter is set, profileKey must not be set and profileName must be set to disambiguate.\")\n      .setPossibleValues(LanguageParamUtils.getLanguageKeys(languages));\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void define(WebService.NewController controller) {\n    NewAction search = controller.createAction(\"search\")\n      .setSince(\"5.2\")\n      .setDescription(\"List quality profiles.\")\n      .setHandler(this)\n      .setResponseExample(getClass().getResource(\"example-search.json\"));\n\n    search.createParam(PARAM_LANGUAGE)\n      .setDescription(\"The key of a language supported by the platform. If specified, only profiles for the given language are returned.\")\n      .setExampleValue(\"js\")\n      .setPossibleValues(Collections2.transform(Arrays.asList(languages.all()), new Function<Language, String>() {\n        @Override\n        public String apply(Language input) {\n          return input.getKey();\n        }\n      }));\n\n    search.createParam(PARAM_FIELDS)\n      .setDescription(\"Use to restrict returned fields.\")\n      .setExampleValue(\"key,language\")\n      .setPossibleValues(ALL_FIELDS);\n  }","id":7948,"modified_method":"@Override\n  public void define(WebService.NewController controller) {\n    NewAction search = controller.createAction(\"search\")\n      .setSince(\"5.2\")\n      .setDescription(\"List quality profiles.\")\n      .setHandler(this)\n      .setResponseExample(getClass().getResource(\"example-search.json\"));\n\n    search.createParam(PARAM_LANGUAGE)\n      .setDescription(\"The key of a language supported by the platform. If specified, only profiles for the given language are returned.\")\n      .setExampleValue(\"js\")\n      .setPossibleValues(LanguageParamUtils.getLanguageKeys(languages));\n\n    search.createParam(PARAM_FIELDS)\n      .setDescription(\"Use to restrict returned fields.\")\n      .setExampleValue(\"key,language\")\n      .setPossibleValues(ALL_FIELDS);\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    dbTester.truncateTables();\n    qualityProfileDao = new QualityProfileDao(dbTester.myBatis(), mock(System2.class));\n    dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), qualityProfileDao);\n    session = dbClient.openSession(false);\n\n    // TODO Replace with actual implementation after removal of DaoV2...\n    profileLoader = mock(QProfileLoader.class);\n\n    xoo1 = createLanguage(\"xoo1\");\n    xoo2 = createLanguage(\"xoo2\");\n\n    tester = new WsTester(new QProfilesWs(\n      mock(RuleActivationActions.class),\n      mock(BulkRuleActivationActions.class),\n      mock(ProjectAssociationActions.class),\n      new QProfileSearchAction(new Languages(xoo1, xoo2), new QProfileLookup(dbClient), profileLoader)));\n  }","id":7949,"modified_method":"@Before\n  public void setUp() throws Exception {\n    dbTester.truncateTables();\n    qualityProfileDao = new QualityProfileDao(dbTester.myBatis(), mock(System2.class));\n    dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), qualityProfileDao);\n    session = dbClient.openSession(false);\n\n    // TODO Replace with actual implementation after removal of DaoV2...\n    profileLoader = mock(QProfileLoader.class);\n\n    xoo1 = LanguageTesting.newLanguage(\"xoo1\");\n    xoo2 = LanguageTesting.newLanguage(\"xoo2\");\n\n    tester = new WsTester(new QProfilesWs(\n      mock(RuleActivationActions.class),\n      mock(BulkRuleActivationActions.class),\n      mock(ProjectAssociationActions.class),\n      new QProfileSearchAction(new Languages(xoo1, xoo2), new QProfileLookup(dbClient), profileLoader)));\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void define(WebService.NewController controller) {\n    NewAction setDefault = controller.createAction(\"set_default\")\n      .setSince(\"5.2\")\n      .setDescription(\"Select the default profile for a given language.\")\n      .setHandler(this)\n      .setResponseExample(getClass().getResource(\"example-search.json\"));\n\n    setDefault.createParam(PARAM_LANGUAGE)\n      .setDescription(\"The key of a language supported by the platform. If specified, profileName must be set to select the default profile for the selected language.\")\n      .setExampleValue(\"js\")\n      .setPossibleValues(Collections2.transform(Arrays.asList(languages.all()), new Function<Language, String>() {\n        @Override\n        public String apply(Language input) {\n          return input.getKey();\n        }\n      }));\n\n    setDefault.createParam(PARAM_PROFILE_NAME)\n      .setDescription(\"The name of a quality profile. If specified, language must be set. The matching profile will be used as default for the selected language.\")\n      .setExampleValue(\"sonar-way-js-12345\");\n\n    setDefault.createParam(PARAM_PROFILE_KEY)\n      .setDescription(\"The key of a quality profile. If specified, language and profileName must not be set. The matching profile will be used as default for its language.\")\n      .setExampleValue(\"sonar-way-js-12345\");\n  }","id":7950,"modified_method":"@Override\n  public void define(WebService.NewController controller) {\n    NewAction setDefault = controller.createAction(\"set_default\")\n      .setSince(\"5.2\")\n      .setDescription(\"Select the default profile for a given language.\")\n      .setPost(true)\n      .setHandler(this)\n      .setResponseExample(getClass().getResource(\"example-search.json\"));\n\n    setDefault.createParam(PARAM_LANGUAGE)\n      .setDescription(\"The key of a language supported by the platform. If specified, profileName must be set to select the default profile for the selected language.\")\n      .setExampleValue(\"js\")\n      .setPossibleValues(LanguageParamUtils.getLanguageKeys(languages));\n\n    setDefault.createParam(PARAM_PROFILE_NAME)\n      .setDescription(\"The name of a quality profile. If specified, language must be set. The matching profile will be used as default for the selected language.\")\n      .setExampleValue(\"sonar-way-js-12345\");\n\n    setDefault.createParam(PARAM_PROFILE_KEY)\n      .setDescription(\"The key of a quality profile. If specified, language and profileName must not be set. The matching profile will be used as default for its language.\")\n      .setExampleValue(\"sonar-way-js-12345\");\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() throws Exception {\n    dbTester.truncateTables();\n    qualityProfileDao = new QualityProfileDao(dbTester.myBatis(), mock(System2.class));\n    dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), qualityProfileDao);\n    session = dbClient.openSession(false);\n\n    xoo1 = createLanguage(\"xoo1\");\n    xoo2 = createLanguage(\"xoo2\");\n    createProfiles();\n\n    tester = new WsTester(new QProfilesWs(\n      mock(RuleActivationActions.class),\n      mock(BulkRuleActivationActions.class),\n      mock(ProjectAssociationActions.class),\n      new QProfileSetDefaultAction(new Languages(xoo1, xoo2), new QProfileLookup(dbClient), new QProfileFactory(dbClient))));\n  }","id":7951,"modified_method":"@Before\n  public void setUp() throws Exception {\n    dbTester.truncateTables();\n    qualityProfileDao = new QualityProfileDao(dbTester.myBatis(), mock(System2.class));\n    dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), qualityProfileDao);\n    session = dbClient.openSession(false);\n\n    createProfiles();\n\n    tester = new WsTester(new QProfilesWs(\n      mock(RuleActivationActions.class),\n      mock(BulkRuleActivationActions.class),\n      mock(ProjectAssociationActions.class),\n      new QProfileSetDefaultAction(LanguageTesting.newLanguages(xoo1Key, xoo2Key), new QProfileLookup(dbClient), new QProfileFactory(dbClient))));\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_default_profile_using_key() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n\n    checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(\"xoo2\", \"my-sonar-way-xoo2-34567\");\n\n    tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"sonar-way-xoo2-23456\").execute().assertNoContent();\n\n    checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(\"xoo2\", \"sonar-way-xoo2-23456\");\n    assertThat(dbClient.qualityProfileDao().getByKey(session, \"sonar-way-xoo2-23456\").isDefault()).isTrue();\n    assertThat(dbClient.qualityProfileDao().getByKey(session, \"my-sonar-way-xoo2-34567\").isDefault()).isFalse();\n\n    // One more time!\n    tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"sonar-way-xoo2-23456\").execute().assertNoContent();\n    checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(\"xoo2\", \"sonar-way-xoo2-23456\");\n  }","id":7952,"modified_method":"@Test\n  public void set_default_profile_using_key() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n\n    checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(xoo2Key, \"my-sonar-way-xoo2-34567\");\n\n    tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"sonar-way-xoo2-23456\").execute().assertNoContent();\n\n    checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(xoo2Key, \"sonar-way-xoo2-23456\");\n    assertThat(dbClient.qualityProfileDao().getByKey(session, \"sonar-way-xoo2-23456\").isDefault()).isTrue();\n    assertThat(dbClient.qualityProfileDao().getByKey(session, \"my-sonar-way-xoo2-34567\").isDefault()).isFalse();\n\n    // One more time!\n    tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"sonar-way-xoo2-23456\").execute().assertNoContent();\n    checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(xoo2Key, \"sonar-way-xoo2-23456\");\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void createProfiles() {\n    qualityProfileDao.insert(session,\n      QualityProfileDto.createFor(\"sonar-way-xoo1-12345\").setLanguage(xoo1.getKey()).setName(\"Sonar way\").setDefault(true),\n      QualityProfileDto.createFor(\"sonar-way-xoo2-23456\").setLanguage(xoo2.getKey()).setName(\"Sonar way\"),\n      QualityProfileDto.createFor(\"my-sonar-way-xoo2-34567\").setLanguage(xoo2.getKey()).setName(\"My Sonar way\").setParentKee(\"sonar-way-xoo2-23456\").setDefault(true)\n      );\n    session.commit();\n  }","id":7953,"modified_method":"private void createProfiles() {\n    qualityProfileDao.insert(session,\n      QualityProfileDto.createFor(\"sonar-way-xoo1-12345\").setLanguage(xoo1Key).setName(\"Sonar way\").setDefault(true),\n      QualityProfileDto.createFor(\"sonar-way-xoo2-23456\").setLanguage(xoo2Key).setName(\"Sonar way\"),\n      QualityProfileDto.createFor(\"my-sonar-way-xoo2-34567\").setLanguage(xoo2Key).setName(\"My Sonar way\").setParentKee(\"sonar-way-xoo2-23456\").setDefault(true)\n      );\n    session.commit();\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_default_profile_using_language_and_name() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n    tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"language\", \"xoo2\").setParam(\"profileName\", \"Sonar way\").execute().assertNoContent();\n\n    checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(\"xoo2\", \"sonar-way-xoo2-23456\");\n  }","id":7954,"modified_method":"@Test\n  public void set_default_profile_using_language_and_name() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n    tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"language\", xoo2Key).setParam(\"profileName\", \"Sonar way\").execute().assertNoContent();\n\n    checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n    checkDefaultProfile(xoo2Key, \"sonar-way-xoo2-23456\");\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_on_missing_permission() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\");\n\n    try {\n      tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"sonar-way-xoo2-23456\").execute().assertNoContent();\n      Fail.failBecauseExceptionWasNotThrown(ForbiddenException.class);\n    } catch(ForbiddenException forbidden) {\n      checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n      checkDefaultProfile(\"xoo2\", \"my-sonar-way-xoo2-34567\");\n    }\n  }","id":7955,"modified_method":"@Test\n  public void fail_on_missing_permission() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\");\n\n    try {\n      tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"sonar-way-xoo2-23456\").execute().assertNoContent();\n      Fail.failBecauseExceptionWasNotThrown(ForbiddenException.class);\n    } catch(ForbiddenException forbidden) {\n      checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n      checkDefaultProfile(xoo2Key, \"my-sonar-way-xoo2-34567\");\n    }\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_to_set_default_profile_using_key() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n    try {\n      tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"unknown-profile-666\").execute();\n      Fail.failBecauseExceptionWasNotThrown(IllegalArgumentException.class);\n    } catch(IllegalArgumentException nfe) {\n      assertThat(nfe).hasMessage(\"Quality profile not found: unknown-profile-666\");\n      checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n      checkDefaultProfile(\"xoo2\", \"my-sonar-way-xoo2-34567\");\n    }\n  }","id":7956,"modified_method":"@Test\n  public void fail_to_set_default_profile_using_key() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n    try {\n      tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"profileKey\", \"unknown-profile-666\").execute();\n      Fail.failBecauseExceptionWasNotThrown(IllegalArgumentException.class);\n    } catch(IllegalArgumentException nfe) {\n      assertThat(nfe).hasMessage(\"Quality profile not found: unknown-profile-666\");\n      checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n      checkDefaultProfile(xoo2Key, \"my-sonar-way-xoo2-34567\");\n    }\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_to_set_default_profile_using_language_and_name() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n    try {\n      tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"language\", \"xoo2\").setParam(\"profileName\", \"Unknown\").execute();\n      Fail.failBecauseExceptionWasNotThrown(NotFoundException.class);\n    } catch(NotFoundException nfe) {\n      assertThat(nfe).hasMessage(\"Unable to find a profile for language 'xoo2' with name 'Unknown'\");\n      checkDefaultProfile(\"xoo1\", \"sonar-way-xoo1-12345\");\n      checkDefaultProfile(\"xoo2\", \"my-sonar-way-xoo2-34567\");\n    }\n  }","id":7957,"modified_method":"@Test\n  public void fail_to_set_default_profile_using_language_and_name() throws Exception {\n    MockUserSession.set().setLogin(\"obiwan\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);\n\n    try {\n      tester.newPostRequest(\"api/qualityprofiles\", \"set_default\").setParam(\"language\", xoo2Key).setParam(\"profileName\", \"Unknown\").execute();\n      Fail.failBecauseExceptionWasNotThrown(NotFoundException.class);\n    } catch(NotFoundException nfe) {\n      assertThat(nfe).hasMessage(\"Unable to find a profile for language 'xoo2' with name 'Unknown'\");\n      checkDefaultProfile(xoo1Key, \"sonar-way-xoo1-12345\");\n      checkDefaultProfile(xoo2Key, \"my-sonar-way-xoo2-34567\");\n    }\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void define_controller() throws Exception {\n    assertThat(controller).isNotNull();\n    assertThat(controller.path()).isEqualTo(QProfilesWs.API_ENDPOINT);\n    assertThat(controller.description()).isNotEmpty();\n    assertThat(controller.actions()).hasSize(8);\n  }","id":7958,"modified_method":"@Test\n  public void define_controller() throws Exception {\n    assertThat(controller).isNotNull();\n    assertThat(controller.path()).isEqualTo(QProfilesWs.API_ENDPOINT);\n    assertThat(controller.description()).isNotEmpty();\n    assertThat(controller.actions()).hasSize(9);\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    Language xoo1 = new AbstractLanguage(\"xoo1\", \"Xoo1\") {\n      @Override\n      public String[] getFileSuffixes() {\n        return new String[] {\"xoo1\"};\n      }\n    };\n    Language xoo2 = new AbstractLanguage(\"xoo2\", \"Xoo2\") {\n      @Override\n      public String[] getFileSuffixes() {\n        return new String[] {\"xoo2\"};\n      }\n    };\n\n    QProfileService profileService = mock(QProfileService.class);\n    RuleService ruleService = mock(RuleService.class);\n    I18n i18n = mock(I18n.class);\n\n    xoo1 = createLanguage(\"xoo1\");\n    xoo2 = createLanguage(\"xoo2\");\n    Languages languages = new Languages(xoo1, xoo2);\n\n    controller = new WsTester(new QProfilesWs(\n      new RuleActivationActions(profileService),\n      new BulkRuleActivationActions(profileService, ruleService, i18n),\n      new ProjectAssociationActions(null, null, null, languages),\n      new QProfileRestoreBuiltInAction(\n        mock(QProfileService.class)),\n      new QProfileSearchAction(new Languages(xoo1, xoo2), null, null)\n    )).controller(QProfilesWs.API_ENDPOINT);\n  }","id":7959,"modified_method":"@Before\n  public void setUp() {\n    QProfileService profileService = mock(QProfileService.class);\n    RuleService ruleService = mock(RuleService.class);\n    I18n i18n = mock(I18n.class);\n\n    Languages languages = LanguageTesting.newLanguages(xoo1Key, xoo2Key);\n\n    controller = new WsTester(new QProfilesWs(\n      new RuleActivationActions(profileService),\n      new BulkRuleActivationActions(profileService, ruleService, i18n),\n      new ProjectAssociationActions(null, null, null, languages),\n      new QProfileRestoreBuiltInAction(null),\n      new QProfileSearchAction(languages, null, null),\n      new QProfileSetDefaultAction(languages, null, null)\n    )).controller(QProfilesWs.API_ENDPOINT);\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void define_search() throws Exception {\n    WebService.Action search = controller.action(\"search\");\n    assertThat(search).isNotNull();\n    assertThat(search.isPost()).isFalse();\n    assertThat(search.params()).hasSize(2);\n    assertThat(search.param(\"language\").possibleValues()).containsOnly(\"xoo1\", \"xoo2\");\n    assertThat(search.param(\"f\").possibleValues())\n      .containsOnly(\"key\", \"name\", \"language\", \"languageName\", \"isInherited\", \"parentKey\", \"parentName\", \"isDefault\", \"activeRuleCount\");\n  }","id":7960,"modified_method":"@Test\n  public void define_search() throws Exception {\n    WebService.Action search = controller.action(\"search\");\n    assertThat(search).isNotNull();\n    assertThat(search.isPost()).isFalse();\n    assertThat(search.params()).hasSize(2);\n    assertThat(search.param(\"language\").possibleValues()).containsOnly(xoo1Key, xoo2Key);\n    assertThat(search.param(\"f\").possibleValues())\n      .containsOnly(\"key\", \"name\", \"language\", \"languageName\", \"isInherited\", \"parentKey\", \"parentName\", \"isDefault\", \"activeRuleCount\");\n  }","commit_id":"b418299c41982e6b5c2d63ce342a5d550eab64d9","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void setAddresses(List<String> addresses) {\n        addressList.clear();\n        for (String address : addresses) {\n            addressList.addAll(parse(address));\n        }\n    }","id":7961,"modified_method":"public void setAddresses(List<String> addresses) {\n        addressList.clear();\n        for (String address : addresses) {\n            addressList.addAll(AddressHelper.getSocketAddresses(address));\n        }\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ClientConfig addAddress(String... addresses) {\n        for (String address : addresses) {\n            this.addressList.addAll(parse(address));\n        }\n        return this;\n    }","id":7962,"modified_method":"public ClientConfig addAddress(String... addresses) {\n        for (String address : addresses) {\n            this.addressList.addAll(AddressHelper.getSocketAddresses(address));\n        }\n        return this;\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public synchronized void memberRemoved(MembershipEvent membershipEvent) {\n        this.clusterMembers.remove(membershipEvent.getMember().getInetSocketAddress());\n    }","id":7963,"modified_method":"public void memberRemoved(MembershipEvent membershipEvent) {\n        InetSocketAddress address = membershipEvent.getMember().getInetSocketAddress();\n        Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getAddress(),\n                                                                                           address.getPort());\n        clusterMembers.removeAll(addresses);\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public synchronized void updateMembers() {\n        Set<Member> members = client.getCluster().getMembers();\n        clusterMembers.clear();\n        for (Member member : members) {\n            clusterMembers.add(member.getInetSocketAddress());\n        }\n    }","id":7964,"modified_method":"public void updateMembers() {\n        Set<Member> members = client.getCluster().getMembers();\n        clusterMembers.clear();\n        for (Member member : members) {\n            InetSocketAddress address = member.getInetSocketAddress();\n            Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getAddress(),\n                                                                                               address.getPort());\n            clusterMembers.addAll(addresses);\n        }\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void destroyConnection(final Connection connection) {\n        boolean lost = false;\n        synchronized (this) {\n            if (currentConnection != null &&\n                    connection != null &&\n                    currentConnection.getVersion() == connection.getVersion()) {\n                logger.log(Level.WARNING, \"Connection to \" + currentConnection + \" is lost\");\n                currentConnection = null;\n                lost = true;\n                try {\n                    connection.close();\n                } catch (IOException e) {\n                    logger.log(Level.FINEST, e.getMessage(), e);\n                }\n            }\n        }\n        if (lost) {\n            lifecycleService.fireLifecycleEvent(CLIENT_CONNECTION_LOST);\n        }\n    }","id":7965,"modified_method":"public void destroyConnection(final Connection connection) {\n        boolean lost = false;\n        synchronized (this) {\n            if (currentConnection != null &&\n                connection != null &&\n                currentConnection.getVersion() == connection.getVersion()) {\n                logger.log(Level.WARNING, \"Connection to \" + currentConnection + \" is lost\");\n                // remove current connection's address from member list.\n                // if address is IPv6 then remove all possible socket addresses (for all scopes)\n                while (clusterMembers.remove(currentConnection.getAddress())) ;\n                currentConnection = null;\n                lost = true;\n                try {\n                    connection.close();\n                } catch (IOException e) {\n                    logger.log(Level.FINEST, e.getMessage(), e);\n                }\n            }\n        }\n        if (lost) {\n            lifecycleService.fireLifecycleEvent(CLIENT_CONNECTION_LOST);\n        }\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public synchronized void memberAdded(MembershipEvent membershipEvent) {\n        if (!this.clusterMembers.contains(membershipEvent.getMember().getInetSocketAddress())) {\n            this.clusterMembers.add(membershipEvent.getMember().getInetSocketAddress());\n        }\n    }","id":7966,"modified_method":"public void memberAdded(MembershipEvent membershipEvent) {\n        InetSocketAddress address = membershipEvent.getMember().getInetSocketAddress();\n        Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getAddress(),\n                                                                                           address.getPort());\n        clusterMembers.addAll(addresses);\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public HazelcastInstance loadInstance() throws CacheException {\n        if (props == null) {\n            throw new NullPointerException(\"Hibernate environment properties is null!\");\n        }\n        if (client != null && client.getLifecycleService().isRunning()) {\n            logger.log(Level.WARNING, \"Current HazelcastClient is already active! Shutting it down...\");\n            unloadInstance();\n        }\n        String address = PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_ADDRESS, props, null);\n        if (address == null) {\n            String[] hosts = PropertiesHelper.toStringArray(CacheEnvironment.NATIVE_CLIENT_HOSTS, \",\", props);\n            if (hosts != null && hosts.length > 0) {\n                address = hosts[0];\n                logger.log(Level.WARNING, \"Hibernate property '\" + CacheEnvironment.NATIVE_CLIENT_HOSTS + \"' \" +\n                        \"is deprecated, use '\" + CacheEnvironment.NATIVE_CLIENT_ADDRESS + \"' instead!\");\n            }\n        }\n        String group = PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_GROUP, props, null);\n        String pass = PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_PASSWORD, props, null);\n        if (address == null || group == null || pass == null) {\n            throw new CacheException(\"Configuration properties \" + CacheEnvironment.NATIVE_CLIENT_ADDRESS + \", \"\n                    + CacheEnvironment.NATIVE_CLIENT_GROUP + \" and \" + CacheEnvironment.NATIVE_CLIENT_PASSWORD\n                    + \" are mandatory to use native client!\");\n        }\n        ClientConfig clientConfig = new ClientConfig();\n        clientConfig.setGroupConfig(new GroupConfig(group, pass)).addAddress(address);\n        clientConfig.setUpdateAutomatic(true);\n        return (client = HazelcastClient.newHazelcastClient(clientConfig));\n    }","id":7967,"modified_method":"public HazelcastInstance loadInstance() throws CacheException {\n        if (props == null) {\n            throw new NullPointerException(\"Hibernate environment properties is null!\");\n        }\n        if (client != null && client.getLifecycleService().isRunning()) {\n            logger.log(Level.WARNING, \"Current HazelcastClient is already active! Shutting it down...\");\n            unloadInstance();\n        }\n        String address = PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_ADDRESS, props, null);\n        if (address == null) {\n            String[] hosts = PropertiesHelper.toStringArray(CacheEnvironment.NATIVE_CLIENT_HOSTS, \",\", props);\n            if (hosts != null && hosts.length > 0) {\n                address = hosts[0];\n                logger.log(Level.WARNING, \"Hibernate property '\" + CacheEnvironment.NATIVE_CLIENT_HOSTS + \"' \" +\n                        \"is deprecated, use '\" + CacheEnvironment.NATIVE_CLIENT_ADDRESS + \"' instead!\");\n            }\n        }\n        String group = PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_GROUP, props, null);\n        String pass = PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_PASSWORD, props, null);\n        if (address == null || group == null || pass == null) {\n            throw new CacheException(\"Configuration properties \" + CacheEnvironment.NATIVE_CLIENT_ADDRESS + \", \"\n                    + CacheEnvironment.NATIVE_CLIENT_GROUP + \" and \" + CacheEnvironment.NATIVE_CLIENT_PASSWORD\n                    + \" are mandatory to use native client!\");\n        }\n        ClientConfig clientConfig = new ClientConfig();\n        clientConfig.setGroupConfig(new GroupConfig(group, pass)).addAddress(address);\n        clientConfig.setUpdateAutomatic(true);\n        clientConfig.setInitialConnectionAttemptLimit(3);\n        clientConfig.setReconnectionAttemptLimit(5);\n        return (client = HazelcastClient.newHazelcastClient(clientConfig));\n    }","commit_id":"6b90aa8fef9f5dc01a148a1359aaa1e5aa4b2d80","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public ClientConfig addAddress(String... addresses) {\n        for (String address : addresses) {\n            this.addressList.addAll(parse(address));\n        }\n        return this;\n    }","id":7968,"modified_method":"public ClientConfig addAddress(String... addresses) {\n        for (String address : addresses) {\n            this.addressList.addAll(AddressHelper.getSocketAddresses(address));\n        }\n        return this;\n    }","commit_id":"fa2f74c18e6d14cbc9bb1440121daa3a3baff0f9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void setAddresses(List<String> addresses) {\n        addressList.clear();\n        for (String address : addresses) {\n            addressList.addAll(parse(address));\n        }\n    }","id":7969,"modified_method":"public void setAddresses(List<String> addresses) {\n        addressList.clear();\n        for (String address : addresses) {\n            addressList.addAll(AddressHelper.getSocketAddresses(address));\n        }\n    }","commit_id":"fa2f74c18e6d14cbc9bb1440121daa3a3baff0f9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public synchronized void memberAdded(MembershipEvent membershipEvent) {\n        if (!this.clusterMembers.contains(membershipEvent.getMember().getInetSocketAddress())) {\n            this.clusterMembers.add(membershipEvent.getMember().getInetSocketAddress());\n        }\n    }","id":7970,"modified_method":"public void memberAdded(MembershipEvent membershipEvent) {\n        InetSocketAddress address = membershipEvent.getMember().getInetSocketAddress();\n        Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getAddress(),\n                                                                                           address.getPort());\n        clusterMembers.addAll(addresses);\n    }","commit_id":"fa2f74c18e6d14cbc9bb1440121daa3a3baff0f9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public synchronized void updateMembers() {\n        Set<Member> members = client.getCluster().getMembers();\n        clusterMembers.clear();\n        for (Member member : members) {\n            clusterMembers.add(member.getInetSocketAddress());\n        }\n    }","id":7971,"modified_method":"public void updateMembers() {\n        Set<Member> members = client.getCluster().getMembers();\n        clusterMembers.clear();\n        for (Member member : members) {\n            InetSocketAddress address = member.getInetSocketAddress();\n            Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getAddress(),\n                                                                                               address.getPort());\n            clusterMembers.addAll(addresses);\n        }\n    }","commit_id":"fa2f74c18e6d14cbc9bb1440121daa3a3baff0f9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void destroyConnection(final Connection connection) {\n        boolean lost = false;\n        synchronized (this) {\n            if (currentConnection != null &&\n                    connection != null &&\n                    currentConnection.getVersion() == connection.getVersion()) {\n                logger.log(Level.WARNING, \"Connection to \" + currentConnection + \" is lost\");\n                currentConnection = null;\n                lost = true;\n                try {\n                    connection.close();\n                } catch (IOException e) {\n                    logger.log(Level.FINEST, e.getMessage(), e);\n                }\n            }\n        }\n        if (lost) {\n            lifecycleService.fireLifecycleEvent(CLIENT_CONNECTION_LOST);\n        }\n    }","id":7972,"modified_method":"public void destroyConnection(final Connection connection) {\n        boolean lost = false;\n        synchronized (this) {\n            if (currentConnection != null &&\n                connection != null &&\n                currentConnection.getVersion() == connection.getVersion()) {\n                logger.log(Level.WARNING, \"Connection to \" + currentConnection + \" is lost\");\n                // remove current connection's address from member list.\n                // if address is IPv6 then remove all possible socket addresses (for all scopes)\n                while (clusterMembers.remove(currentConnection.getAddress())) ;\n                currentConnection = null;\n                lost = true;\n                try {\n                    connection.close();\n                } catch (IOException e) {\n                    logger.log(Level.FINEST, e.getMessage(), e);\n                }\n            }\n        }\n        if (lost) {\n            lifecycleService.fireLifecycleEvent(CLIENT_CONNECTION_LOST);\n        }\n    }","commit_id":"fa2f74c18e6d14cbc9bb1440121daa3a3baff0f9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public synchronized void memberRemoved(MembershipEvent membershipEvent) {\n        this.clusterMembers.remove(membershipEvent.getMember().getInetSocketAddress());\n    }","id":7973,"modified_method":"public void memberRemoved(MembershipEvent membershipEvent) {\n        InetSocketAddress address = membershipEvent.getMember().getInetSocketAddress();\n        Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getAddress(),\n                                                                                           address.getPort());\n        clusterMembers.removeAll(addresses);\n    }","commit_id":"fa2f74c18e6d14cbc9bb1440121daa3a3baff0f9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public NeoStore( File fileName, Config conf,\n                     IdGeneratorFactory idGeneratorFactory, WindowPoolFactory windowPoolFactory,\n                     FileSystemAbstraction fileSystemAbstraction,\n                     StringLogger stringLogger, RemoteTxHook txHook,\n                     RelationshipTypeTokenStore relTypeStore, LabelTokenStore labelTokenStore,\n                     PropertyStore propStore, RelationshipStore relStore,\n                     NodeStore nodeStore, SchemaStore schemaStore, RelationshipGroupStore relGroupStore,\n                     StoreVersionMismatchHandler versionMismatchHandler,\n                     Monitors monitors )\n    {\n        super( fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, windowPoolFactory,\n                fileSystemAbstraction, stringLogger, versionMismatchHandler, monitors );\n        this.relTypeStore = relTypeStore;\n        this.labelTokenStore = labelTokenStore;\n        this.propStore = propStore;\n        this.relStore = relStore;\n        this.nodeStore = nodeStore;\n        this.schemaStore = schemaStore;\n        this.relGroupStore = relGroupStore;\n        REL_GRAB_SIZE = conf.get( Configuration.relationship_grab_size );\n        this.txHook = txHook;\n\n        /* [MP:2012-01-03] Fix for the problem in 1.5.M02 where store version got upgraded but\n         * corresponding store version record was not added. That record was added in the release\n         * thereafter so this missing record doesn't trigger an upgrade of the neostore file and so any\n         * unclean shutdown on such a db with 1.5.M02 < neo4j version <= 1.6.M02 would make that\n         * db unable to start for that version with a \"Mismatching store version found\" exception.\n         *\n         * This will make a cleanly shut down 1.5.M02, then started and cleanly shut down with 1.6.M03 (or higher)\n         * successfully add the missing record.\n         */\n        setRecovered();\n        try\n        {\n            if ( getCreationTime() != 0 /*Store that wasn't just now created*/ &&\n                    getStoreVersion() == 0 /*Store is missing the store version record*/ )\n            {\n                setStoreVersion( versionStringToLong( CommonAbstractStore.ALL_STORES_VERSION ) );\n                updateHighId();\n            }\n        }\n        finally\n        {\n            unsetRecovered();\n        }\n    }","id":7974,"modified_method":"public NeoStore( File fileName, Config conf,\n                     IdGeneratorFactory idGeneratorFactory, WindowPoolFactory windowPoolFactory,\n                     FileSystemAbstraction fileSystemAbstraction,\n                     StringLogger stringLogger, RemoteTxHook txHook,\n                     RelationshipTypeTokenStore relTypeStore, LabelTokenStore labelTokenStore,\n                     PropertyStore propStore, RelationshipStore relStore,\n                     NodeStore nodeStore, SchemaStore schemaStore, RelationshipGroupStore relGroupStore,\n                     StoreVersionMismatchHandler versionMismatchHandler,\n                     Monitors monitors )\n    {\n        super( fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, windowPoolFactory,\n                fileSystemAbstraction, stringLogger, versionMismatchHandler, monitors );\n        this.relTypeStore = relTypeStore;\n        this.labelTokenStore = labelTokenStore;\n        this.propStore = propStore;\n        this.relStore = relStore;\n        this.nodeStore = nodeStore;\n        this.schemaStore = schemaStore;\n        this.relGroupStore = relGroupStore;\n        REL_GRAB_SIZE = conf.get( Configuration.relationship_grab_size );\n        this.txHook = txHook;\n\n        pageCache = new WindowPoolPageCache( windowPoolFactory, fileSystemAbstraction );\n        try\n        {\n            storeFile = pageCache.map( fileName, RECORD_SIZE * 128, RECORD_SIZE );\n        }\n        catch ( IOException e )\n        {\n            // TODO: Just throw IOException, add proper handling further up\n            throw new UnderlyingStorageException( e );\n        }\n        pageSize = storeFile.pageSize();\n\n        /* [MP:2012-01-03] Fix for the problem in 1.5.M02 where store version got upgraded but\n         * corresponding store version record was not added. That record was added in the release\n         * thereafter so this missing record doesn't trigger an upgrade of the neostore file and so any\n         * unclean shutdown on such a db with 1.5.M02 < neo4j version <= 1.6.M02 would make that\n         * db unable to start for that version with a \"Mismatching store version found\" exception.\n         *\n         * This will make a cleanly shut down 1.5.M02, then started and cleanly shut down with 1.6.M03 (or higher)\n         * successfully add the missing record.\n         */\n        setRecovered();\n        try\n        {\n            if ( getCreationTime() != 0 /*Store that wasn't just now created*/ &&\n                    getStoreVersion() == 0 /*Store is missing the store version record*/ )\n            {\n                setStoreVersion( versionStringToLong( CommonAbstractStore.ALL_STORES_VERSION ) );\n                updateHighId();\n            }\n        }\n        finally\n        {\n            unsetRecovered();\n        }\n    }","commit_id":"31e357e46b96c5d34526ee925a7467f196eb2379","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void setRecord( long id, long value )\n    {\n        PersistenceWindow window = acquireWindow( id, OperationType.WRITE );\n        try\n        {\n            Buffer buffer = window.getOffsettedBuffer( id );\n            buffer.put( Record.IN_USE.byteValue() ).putLong( value );\n            registerIdFromUpdateRecord( id );\n        }\n        finally\n        {\n            releaseWindow( window );\n        }\n    }","id":7975,"modified_method":"private void setRecord( long id, long value )\n    {\n        PageCursor cursor = pageCache.newCursor();\n        try\n        {\n            storeFile.pin( cursor, PageLock.WRITE, pageIdForRecord( id ) );\n        }\n        catch ( IOException e )\n        {\n            throw new UnderlyingStorageException( e );\n        }\n        try\n        {\n            cursor.setOffset( (int) (id * RECORD_SIZE % pageSize) );\n            cursor.putByte(Record.IN_USE.byteValue());\n            cursor.putLong(value);\n        }\n        finally\n        {\n            storeFile.unpin( cursor );\n        }\n    }","commit_id":"31e357e46b96c5d34526ee925a7467f196eb2379","url":"https://github.com/neo4j/neo4j"},{"original_method":"private long getRecord( long id )\n    {\n        PersistenceWindow window = acquireWindow( id, OperationType.READ );\n        try\n        {\n            Buffer buffer = window.getOffsettedBuffer( id );\n            buffer.get();\n            return buffer.getLong();\n        }\n        finally\n        {\n            releaseWindow( window );\n        }\n    }","id":7976,"modified_method":"private long getRecord( long id )\n    {\n        PageCursor cursor = pageCache.newCursor();\n        try\n        {\n            storeFile.pin( cursor, PageLock.READ, pageIdForRecord( id ) );\n        }\n        catch ( IOException e )\n        {\n            throw new UnderlyingStorageException( e );\n        }\n        try\n        {\n            cursor.setOffset( (int) (id * RECORD_SIZE % pageSize) );\n            cursor.getByte();\n            return cursor.getLong();\n        }\n        finally\n        {\n            storeFile.unpin( cursor );\n        }\n    }","commit_id":"31e357e46b96c5d34526ee925a7467f196eb2379","url":"https://github.com/neo4j/neo4j"},{"original_method":"void parseDocPercolate(PercolateRequest percolateRequest, RestRequest restRequest, RestChannel restChannel) {\n        percolateRequest.indices(Strings.splitStringByCommaToArray(restRequest.param(\"index\")));\n        percolateRequest.documentType(restRequest.param(\"type\"));\n        percolateRequest.routing(restRequest.param(\"routing\"));\n        percolateRequest.preference(restRequest.param(\"preference\"));\n        percolateRequest.source(restRequest.content(), restRequest.contentUnsafe());\n\n        percolateRequest.indicesOptions(IndicesOptions.fromRequest(restRequest, percolateRequest.indicesOptions()));\n        executePercolate(percolateRequest, restRequest, restChannel);\n    }","id":7977,"modified_method":"void parseDocPercolate(PercolateRequest percolateRequest, RestRequest restRequest, RestChannel restChannel) {\n        percolateRequest.indices(Strings.splitStringByCommaToArray(restRequest.param(\"index\")));\n        percolateRequest.documentType(restRequest.param(\"type\"));\n        percolateRequest.routing(restRequest.param(\"routing\"));\n        percolateRequest.preference(restRequest.param(\"preference\"));\n\n        BytesReference content = null;\n        if (restRequest.hasContent()) {\n            content = restRequest.content();\n        } else {\n            String source = restRequest.param(\"source\");\n            if (source != null) {\n                content = new BytesArray(source);\n            }\n        }\n\n        percolateRequest.source(content, restRequest.contentUnsafe());\n\n        percolateRequest.indicesOptions(IndicesOptions.fromRequest(restRequest, percolateRequest.indicesOptions()));\n        executePercolate(percolateRequest, restRequest, restChannel);\n    }","commit_id":"8706cf610a1fb4ce0903f6260929305299f11006","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void handleRequest(final RestRequest restRequest, final RestChannel restChannel) {\n        MultiPercolateRequest multiPercolateRequest = new MultiPercolateRequest();\n        multiPercolateRequest.indicesOptions(IndicesOptions.fromRequest(restRequest, multiPercolateRequest.indicesOptions()));\n        multiPercolateRequest.indices(Strings.splitStringByCommaToArray(restRequest.param(\"index\")));\n        multiPercolateRequest.documentType(restRequest.param(\"type\"));\n\n        try {\n            multiPercolateRequest.add(restRequest.content(), restRequest.contentUnsafe(), allowExplicitIndex);\n        } catch (Exception e) {\n            try {\n                restChannel.sendResponse(new XContentThrowableRestResponse(restRequest, e));\n            } catch (IOException e1) {\n                logger.error(\"Failed to send failure response\", e1);\n            }\n            return;\n        }\n\n        client.multiPercolate(multiPercolateRequest, new ActionListener<MultiPercolateResponse>() {\n\n            @Override\n            public void onResponse(MultiPercolateResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(restRequest);\n                    response.toXContent(builder, restRequest);\n                    restChannel.sendResponse(new XContentRestResponse(restRequest, OK, builder));\n                } catch (IOException e) {\n                    onFailure(e);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    restChannel.sendResponse(new XContentThrowableRestResponse(restRequest, e));\n                } catch (IOException e1) {\n                    logger.error(\"Failed to send failure response\", e1);\n                }\n            }\n        });\n    }","id":7978,"modified_method":"@Override\n    public void handleRequest(final RestRequest restRequest, final RestChannel restChannel) {\n        MultiPercolateRequest multiPercolateRequest = new MultiPercolateRequest();\n        multiPercolateRequest.indicesOptions(IndicesOptions.fromRequest(restRequest, multiPercolateRequest.indicesOptions()));\n        multiPercolateRequest.indices(Strings.splitStringByCommaToArray(restRequest.param(\"index\")));\n        multiPercolateRequest.documentType(restRequest.param(\"type\"));\n\n        BytesReference content = null;\n        if (restRequest.hasContent()) {\n            content = restRequest.content();\n        } else {\n            String source = restRequest.param(\"source\");\n            if (source != null) {\n                content = new BytesArray(source);\n            }\n        }\n\n        try {\n            multiPercolateRequest.add(content, restRequest.contentUnsafe(), allowExplicitIndex);\n        } catch (Exception e) {\n            try {\n                restChannel.sendResponse(new XContentThrowableRestResponse(restRequest, e));\n            } catch (IOException e1) {\n                logger.error(\"Failed to send failure response\", e1);\n            }\n            return;\n        }\n\n        client.multiPercolate(multiPercolateRequest, new ActionListener<MultiPercolateResponse>() {\n\n            @Override\n            public void onResponse(MultiPercolateResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(restRequest);\n                    response.toXContent(builder, restRequest);\n                    restChannel.sendResponse(new XContentRestResponse(restRequest, OK, builder));\n                } catch (IOException e) {\n                    onFailure(e);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    restChannel.sendResponse(new XContentThrowableRestResponse(restRequest, e));\n                } catch (IOException e1) {\n                    logger.error(\"Failed to send failure response\", e1);\n                }\n            }\n        });\n    }","commit_id":"03c02143dd52f03ad0f15f064a999119b3066919","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void handleRequest(final RestRequest request, final RestChannel channel) {\n        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n        multiSearchRequest.listenerThreaded(false);\n\n        String[] indices = Strings.splitStringByCommaToArray(request.param(\"index\"));\n        String[] types = Strings.splitStringByCommaToArray(request.param(\"type\"));\n        IndicesOptions indicesOptions = IndicesOptions.fromRequest(request, multiSearchRequest.indicesOptions());\n\n        try {\n            multiSearchRequest.add(request.content(), request.contentUnsafe(), indices, types, request.param(\"search_type\"), request.param(\"routing\"), indicesOptions, allowExplicitIndex);\n        } catch (Exception e) {\n            try {\n                XContentBuilder builder = restContentBuilder(request);\n                channel.sendResponse(new XContentRestResponse(request, BAD_REQUEST, builder.startObject().field(\"error\", e.getMessage()).endObject()));\n            } catch (IOException e1) {\n                logger.error(\"Failed to send failure response\", e1);\n            }\n            return;\n        }\n\n        client.multiSearch(multiSearchRequest, new ActionListener<MultiSearchResponse>() {\n            @Override\n            public void onResponse(MultiSearchResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(request);\n                    builder.startObject();\n                    response.toXContent(builder, request);\n                    builder.endObject();\n                    channel.sendResponse(new XContentRestResponse(request, OK, builder));\n                } catch (Throwable e) {\n                    onFailure(e);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, e));\n                } catch (IOException e1) {\n                    logger.error(\"Failed to send failure response\", e1);\n                }\n            }\n        });\n    }","id":7979,"modified_method":"@Override\n    public void handleRequest(final RestRequest request, final RestChannel channel) {\n        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n        multiSearchRequest.listenerThreaded(false);\n\n        String[] indices = Strings.splitStringByCommaToArray(request.param(\"index\"));\n        String[] types = Strings.splitStringByCommaToArray(request.param(\"type\"));\n        IndicesOptions indicesOptions = IndicesOptions.fromRequest(request, multiSearchRequest.indicesOptions());\n\n        BytesReference content = null;\n        if (request.hasContent()) {\n            content = request.content();\n        } else {\n            String source = request.param(\"source\");\n            if (source != null) {\n                content = new BytesArray(source);\n            }\n        }\n\n        try {\n            multiSearchRequest.add(content, request.contentUnsafe(), indices, types, request.param(\"search_type\"), request.param(\"routing\"), indicesOptions, allowExplicitIndex);\n        } catch (Exception e) {\n            try {\n                XContentBuilder builder = restContentBuilder(request);\n                channel.sendResponse(new XContentRestResponse(request, BAD_REQUEST, builder.startObject().field(\"error\", e.getMessage()).endObject()));\n            } catch (IOException e1) {\n                logger.error(\"Failed to send failure response\", e1);\n            }\n            return;\n        }\n\n        client.multiSearch(multiSearchRequest, new ActionListener<MultiSearchResponse>() {\n            @Override\n            public void onResponse(MultiSearchResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(request);\n                    builder.startObject();\n                    response.toXContent(builder, request);\n                    builder.endObject();\n                    channel.sendResponse(new XContentRestResponse(request, OK, builder));\n                } catch (Throwable e) {\n                    onFailure(e);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, e));\n                } catch (IOException e1) {\n                    logger.error(\"Failed to send failure response\", e1);\n                }\n            }\n        });\n    }","commit_id":"bf3d20eb0598afffa319ab59b433b4abf445f9d5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void handleRequest(final RestRequest request, final RestChannel channel) {\n        \n        MultiTermVectorsRequest multiTermVectorsRequest = new MultiTermVectorsRequest();\n        multiTermVectorsRequest.listenerThreaded(false);\n        TermVectorRequest template = new TermVectorRequest();\n        template.index(request.param(\"index\"));\n        template.type(request.param(\"type\"));\n        RestTermVectorAction.readURIParameters(template, request);\n        multiTermVectorsRequest.ids(Strings.commaDelimitedListToStringArray(request.param(\"ids\")));\n\n        try {\n            multiTermVectorsRequest.add(template, request.content());\n        } catch (Throwable t) {\n            try {\n                channel.sendResponse(new XContentThrowableRestResponse(request, t));\n            } catch (Throwable tIO) {\n                logger.error(\"Failed to send failure response\", tIO);\n            }\n            return;\n        }\n\n        client.multiTermVectors(multiTermVectorsRequest, new ActionListener<MultiTermVectorsResponse>() {\n            @Override\n            public void onResponse(MultiTermVectorsResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(request);\n                    response.toXContent(builder, request);\n                    channel.sendResponse(new XContentRestResponse(request, OK, builder));\n                } catch (Throwable t) {\n                    onFailure(t);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, e));\n                } catch (Throwable t) {\n                    logger.error(\"Failed to send failure response\", t);\n                }\n            }\n        });\n    }","id":7980,"modified_method":"@Override\n    public void handleRequest(final RestRequest request, final RestChannel channel) {\n        \n        MultiTermVectorsRequest multiTermVectorsRequest = new MultiTermVectorsRequest();\n        multiTermVectorsRequest.listenerThreaded(false);\n        TermVectorRequest template = new TermVectorRequest();\n        template.index(request.param(\"index\"));\n        template.type(request.param(\"type\"));\n        RestTermVectorAction.readURIParameters(template, request);\n        multiTermVectorsRequest.ids(Strings.commaDelimitedListToStringArray(request.param(\"ids\")));\n\n        BytesReference content = null;\n        if (request.hasContent()) {\n            content = request.content();\n        } else {\n            String source = request.param(\"source\");\n            if (source != null) {\n                content = new BytesArray(source);\n            }\n        }\n\n        try {\n            multiTermVectorsRequest.add(template, content);\n        } catch (Throwable t) {\n            try {\n                channel.sendResponse(new XContentThrowableRestResponse(request, t));\n            } catch (Throwable tIO) {\n                logger.error(\"Failed to send failure response\", tIO);\n            }\n            return;\n        }\n\n        client.multiTermVectors(multiTermVectorsRequest, new ActionListener<MultiTermVectorsResponse>() {\n            @Override\n            public void onResponse(MultiTermVectorsResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(request);\n                    response.toXContent(builder, request);\n                    channel.sendResponse(new XContentRestResponse(request, OK, builder));\n                } catch (Throwable t) {\n                    onFailure(t);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, e));\n                } catch (Throwable t) {\n                    logger.error(\"Failed to send failure response\", t);\n                }\n            }\n        });\n    }","commit_id":"71b8876d8343a478e1f87eb3506696be950e96d2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void handleRequest(final RestRequest request, final RestChannel channel) {\n        MultiGetRequest multiGetRequest = new MultiGetRequest();\n        multiGetRequest.listenerThreaded(false);\n        multiGetRequest.refresh(request.paramAsBoolean(\"refresh\", multiGetRequest.refresh()));\n        multiGetRequest.preference(request.param(\"preference\"));\n        multiGetRequest.realtime(request.paramAsBoolean(\"realtime\", null));\n\n        String[] sFields = null;\n        String sField = request.param(\"fields\");\n        if (sField != null) {\n            sFields = Strings.splitStringByCommaToArray(sField);\n        }\n\n        FetchSourceContext defaultFetchSource = FetchSourceContext.parseFromRestRequest(request);\n\n        try {\n            multiGetRequest.add(request.param(\"index\"), request.param(\"type\"), sFields, defaultFetchSource, request.param(\"routing\"), request.content(), allowExplicitIndex);\n        } catch (Exception e) {\n            try {\n                XContentBuilder builder = restContentBuilder(request);\n                channel.sendResponse(new XContentRestResponse(request, BAD_REQUEST, builder.startObject().field(\"error\", e.getMessage()).endObject()));\n            } catch (IOException e1) {\n                logger.error(\"Failed to send failure response\", e1);\n            }\n            return;\n        }\n\n        client.multiGet(multiGetRequest, new ActionListener<MultiGetResponse>() {\n            @Override\n            public void onResponse(MultiGetResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(request);\n                    response.toXContent(builder, request);\n                    channel.sendResponse(new XContentRestResponse(request, OK, builder));\n                } catch (Throwable e) {\n                    onFailure(e);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, e));\n                } catch (IOException e1) {\n                    logger.error(\"Failed to send failure response\", e1);\n                }\n            }\n        });\n    }","id":7981,"modified_method":"@Override\n    public void handleRequest(final RestRequest request, final RestChannel channel) {\n        MultiGetRequest multiGetRequest = new MultiGetRequest();\n        multiGetRequest.listenerThreaded(false);\n        multiGetRequest.refresh(request.paramAsBoolean(\"refresh\", multiGetRequest.refresh()));\n        multiGetRequest.preference(request.param(\"preference\"));\n        multiGetRequest.realtime(request.paramAsBoolean(\"realtime\", null));\n\n        String[] sFields = null;\n        String sField = request.param(\"fields\");\n        if (sField != null) {\n            sFields = Strings.splitStringByCommaToArray(sField);\n        }\n\n        FetchSourceContext defaultFetchSource = FetchSourceContext.parseFromRestRequest(request);\n\n        BytesReference content = null;\n        if (request.hasContent()) {\n            content = request.content();\n        } else {\n            String source = request.param(\"source\");\n            if (source != null) {\n                content = new BytesArray(source);\n            }\n        }\n\n        try {\n            multiGetRequest.add(request.param(\"index\"), request.param(\"type\"), sFields, defaultFetchSource, request.param(\"routing\"), content, allowExplicitIndex);\n        } catch (Exception e) {\n            try {\n                XContentBuilder builder = restContentBuilder(request);\n                channel.sendResponse(new XContentRestResponse(request, BAD_REQUEST, builder.startObject().field(\"error\", e.getMessage()).endObject()));\n            } catch (IOException e1) {\n                logger.error(\"Failed to send failure response\", e1);\n            }\n            return;\n        }\n\n        client.multiGet(multiGetRequest, new ActionListener<MultiGetResponse>() {\n            @Override\n            public void onResponse(MultiGetResponse response) {\n                try {\n                    XContentBuilder builder = restContentBuilder(request);\n                    response.toXContent(builder, request);\n                    channel.sendResponse(new XContentRestResponse(request, OK, builder));\n                } catch (Throwable e) {\n                    onFailure(e);\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, e));\n                } catch (IOException e1) {\n                    logger.error(\"Failed to send failure response\", e1);\n                }\n            }\n        });\n    }","commit_id":"4c50770a89991535b479d9ac5a6114d3a009437b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * The configuration string has a number of entries, separated by a ':' (colon).\n     * Each entry consists of the name of the protocol, followed by an optional configuration\n     * of that protocol. The configuration is enclosed in parentheses, and contains entries\n     * which are name/value pairs connected with an assignment sign (=) and separated by\n     * a semicolon.\n     * <pre>UDP(in_port=5555;out_port=4445):FRAG(frag_size=1024)<\/pre><p>\n     * The <em>first<\/em> entry defines the <em>bottommost<\/em> layer, the string is parsed\n     * left to right and the protocol stack constructed bottom up. Example: the string\n     * \"UDP(in_port=5555):FRAG(frag_size=32000):DEBUG\" results is the following stack:<pre>\n     *\n     *   -----------------------\n     *  | DEBUG                 |\n     *  |-----------------------|\n     *  | FRAG frag_size=32000  |\n     *  |-----------------------|\n     *  | UDP in_port=32000     |\n     *   -----------------------\n     * <\/pre>\n     */\n    public static Protocol setupProtocolStack(String configuration, ProtocolStack st) throws Exception {\n        Protocol protocol_stack=null;\n        Vector<ProtocolConfiguration> protocol_configs;\n        Vector<Protocol> protocols;\n\n        protocol_configs=parseConfigurations(configuration);\n        protocols=createProtocols(protocol_configs, st);\n        if(protocols == null)\n            return null;\n        protocol_stack=connectProtocols(protocols);\n        return protocol_stack;\n    }","id":7982,"modified_method":"/**\n     * The configuration string has a number of entries, separated by a ':' (colon).\n     * Each entry consists of the name of the protocol, followed by an optional configuration\n     * of that protocol. The configuration is enclosed in parentheses, and contains entries\n     * which are name/value pairs connected with an assignment sign (=) and separated by\n     * a semicolon.\n     * <pre>UDP(in_port=5555;out_port=4445):FRAG(frag_size=1024)<\/pre><p>\n     * The <em>first<\/em> entry defines the <em>bottommost<\/em> layer, the string is parsed\n     * left to right and the protocol stack constructed bottom up. Example: the string\n     * \"UDP(in_port=5555):FRAG(frag_size=32000):DEBUG\" results is the following stack:<pre>\n     *\n     *   -----------------------\n     *  | DEBUG                 |\n     *  |-----------------------|\n     *  | FRAG frag_size=32000  |\n     *  |-----------------------|\n     *  | UDP in_port=32000     |\n     *   -----------------------\n     * <\/pre>\n     */\n    private Protocol setupProtocolStack(String configuration, ProtocolStack st) throws Exception {       \n        Vector<ProtocolConfiguration> protocol_configs=parseConfigurations(configuration);\n        Vector<Protocol> protocols=createProtocols(protocol_configs, st);\n        if(protocols == null)\n            return null;\n        return connectProtocols(protocols);        \n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Takes vector of ProtocolConfigurations, iterates through it, creates Protocol for\n     * each ProtocolConfiguration and returns all Protocols in a vector.\n     * @param protocol_configs Vector of ProtocolConfigurations\n     * @param stack The protocol stack\n     * @return Vector of Protocols\n     */\n    private static Vector<Protocol> createProtocols(Vector<ProtocolConfiguration> protocol_configs, final ProtocolStack stack) throws Exception {\n        Vector<Protocol> retval=new Vector<Protocol>();\n        ProtocolConfiguration protocol_config;\n        Protocol layer;\n        String singleton_name;\n\n        for(int i=0; i < protocol_configs.size(); i++) {\n            protocol_config=protocol_configs.elementAt(i);\n            singleton_name=protocol_config.getProperties().getProperty(Global.SINGLETON_NAME);\n            if(singleton_name != null && singleton_name.trim().length() > 0) {\n                synchronized(stack) {\n                    if(i > 0) { // crude way to check whether protocol is a transport\n                        throw new IllegalArgumentException(\"Property 'singleton_name' can only be used in a transport\" +\n                                \" protocol (was used in \" + protocol_config.getProtocolName() + \")\");\n                    }\n                    Map<String,Tuple<TP, ProtocolStack.RefCounter>> singleton_transports=ProtocolStack.getSingletonTransports();\n                    Tuple<TP, ProtocolStack.RefCounter> val=singleton_transports.get(singleton_name);\n                    layer=val != null? val.getVal1() : null;\n                    if(layer != null) {\n                        retval.add(layer);\n                    }\n                    else {\n                        layer=protocol_config.createLayer(stack);\n                        if(layer == null)\n                            return null;\n                        singleton_transports.put(singleton_name, new Tuple<TP, ProtocolStack.RefCounter>((TP)layer,new ProtocolStack.RefCounter((short)0,(short)0)));\n                        retval.addElement(layer);\n                    }\n                }\n                continue;\n            }\n            layer=protocol_config.createLayer(stack);\n            if(layer == null)\n                return null;\n            retval.addElement(layer);\n        }\n        sanityCheck(retval);\n        return retval;\n    }","id":7983,"modified_method":"/**\n     * Takes vector of ProtocolConfigurations, iterates through it, creates Protocol for\n     * each ProtocolConfiguration and returns all Protocols in a vector.\n     * @param protocol_configs Vector of ProtocolConfigurations\n     * @param stack The protocol stack\n     * @return Vector of Protocols\n     */\n    private Vector<Protocol> createProtocols(Vector<ProtocolConfiguration> protocol_configs, final ProtocolStack stack) throws Exception {\n        Vector<Protocol> retval=new Vector<Protocol>();\n        ProtocolConfiguration protocol_config;\n        Protocol layer;\n        String singleton_name;\n\n        for(int i=0; i < protocol_configs.size(); i++) {\n            protocol_config=protocol_configs.elementAt(i);\n            singleton_name=protocol_config.getProperties().getProperty(Global.SINGLETON_NAME);\n            if(singleton_name != null && singleton_name.trim().length() > 0) {\n                synchronized(stack) {\n                    if(i > 0) { // crude way to check whether protocol is a transport\n                        throw new IllegalArgumentException(\"Property 'singleton_name' can only be used in a transport\" +\n                                \" protocol (was used in \" + protocol_config.getProtocolName() + \")\");\n                    }\n                    Map<String,Tuple<TP, ProtocolStack.RefCounter>> singleton_transports=ProtocolStack.getSingletonTransports();\n                    Tuple<TP, ProtocolStack.RefCounter> val=singleton_transports.get(singleton_name);\n                    layer=val != null? val.getVal1() : null;\n                    if(layer != null) {\n                        retval.add(layer);\n                    }\n                    else {\n                        layer=protocol_config.createLayer(stack);\n                        if(layer == null)\n                            return null;\n                        singleton_transports.put(singleton_name, new Tuple<TP, ProtocolStack.RefCounter>((TP)layer,new ProtocolStack.RefCounter((short)0,(short)0)));\n                        retval.addElement(layer);\n                    }\n                }\n                continue;\n            }\n            layer=protocol_config.createLayer(stack);\n            if(layer == null)\n                return null;\n            retval.addElement(layer);\n        }\n        sanityCheck(retval);\n        return retval;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Return a number of ProtocolConfigurations in a vector\n     * @param configuration protocol-stack configuration string\n     * @return Vector of ProtocolConfigurations\n     */\n    public static Vector<ProtocolConfiguration> parseConfigurations(String configuration) throws Exception {\n        Vector<ProtocolConfiguration> retval=new Vector<ProtocolConfiguration>();\n        Vector protocol_string=parseProtocols(configuration);\n        String component_string;\n        ProtocolConfiguration protocol_config;\n\n        if(protocol_string == null)\n            return null;\n        for(int i=0; i < protocol_string.size(); i++) {\n            component_string=(String)protocol_string.elementAt(i);\n            protocol_config=new ProtocolConfiguration(component_string);\n            retval.addElement(protocol_config);\n        }\n        return retval;\n    }","id":7984,"modified_method":"/**\n     * Return a number of ProtocolConfigurations in a vector\n     * @param configuration protocol-stack configuration string\n     * @return Vector of ProtocolConfigurations\n     */\n    public Vector<ProtocolConfiguration> parseConfigurations(String configuration) throws Exception {\n        Vector<ProtocolConfiguration> retval=new Vector<ProtocolConfiguration>();\n        Vector<String> protocol_string=parseProtocols(configuration);              \n\n        if(protocol_string == null)\n            return null;\n        \n        for(String component_string:protocol_string) {                       \n            retval.addElement(new ProtocolConfiguration(component_string));\n        }\n        return retval;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Creates a protocol stack by iterating through the protocol list and connecting\n     * adjacent layers. The list starts with the topmost layer and has the bottommost\n     * layer at the tail.\n     * @param protocol_list List of Protocol elements (from top to bottom)\n     * @return Protocol stack\n     */\n    public static Protocol connectProtocols(Vector protocol_list) {\n        Protocol current_layer=null, next_layer=null;\n\n        for(int i=0; i < protocol_list.size(); i++) {\n            current_layer=(Protocol)protocol_list.elementAt(i);\n            if(i + 1 >= protocol_list.size())\n                break;\n            next_layer=(Protocol)protocol_list.elementAt(i + 1);\n            next_layer.setDownProtocol(current_layer);\n            current_layer.setUpProtocol(next_layer);\n\n             if(current_layer instanceof TP) {\n                String singleton_name= ((TP)current_layer).getSingletonName();\n                if(singleton_name != null && singleton_name.length() > 0) {\n                    ConcurrentMap<String, Protocol> up_prots=((TP)current_layer).getUpProtocols();\n                    String key;\n                    synchronized(up_prots) {\n                        while(true) {\n                            key=Global.DUMMY + System.currentTimeMillis();\n                            if(up_prots.containsKey(key))\n                                continue;\n                            up_prots.put(key, next_layer);\n                            break;\n                        }\n                    }\n                    current_layer.setUpProtocol(null);\n                }\n            }\n        }\n        return current_layer;\n    }","id":7985,"modified_method":"/**\n     * Creates a protocol stack by iterating through the protocol list and connecting\n     * adjacent layers. The list starts with the topmost layer and has the bottommost\n     * layer at the tail.\n     * @param protocol_list List of Protocol elements (from top to bottom)\n     * @return Protocol stack\n     */\n    private Protocol connectProtocols(Vector<Protocol> protocol_list) {\n        Protocol current_layer=null, next_layer=null;\n\n        for(int i=0; i < protocol_list.size(); i++) {\n            current_layer=protocol_list.elementAt(i);\n            if(i + 1 >= protocol_list.size())\n                break;\n            next_layer=protocol_list.elementAt(i + 1);\n            next_layer.setDownProtocol(current_layer);\n            current_layer.setUpProtocol(next_layer);\n\n             if(current_layer instanceof TP) {\n                TP transport = (TP)current_layer;                \n                if(transport.isSingleton()) {                   \n                    ConcurrentMap<String, Protocol> up_prots=transport.getUpProtocols();\n                    String key;\n                    synchronized(up_prots) {\n                        while(true) {\n                            key=Global.DUMMY + System.currentTimeMillis();\n                            if(up_prots.containsKey(key))\n                                continue;\n                            up_prots.put(key, next_layer);\n                            break;\n                        }\n                    }\n                    current_layer.setUpProtocol(null);\n                }\n            }\n        }\n        return current_layer;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Get a string of the form \"P1(config_str1):P2:P3(config_str3)\" and return\n     * ProtocolConfigurations for it. That means, parse \"P1(config_str1)\", \"P2\" and\n     * \"P3(config_str3)\"\n     * @param config_str Configuration string\n     * @return Vector of strings\n     */\n    public static Vector<String> parseProtocols(String config_str) throws IOException {\n        Vector<String> retval=new Vector<String>();\n        PushbackReader reader=new PushbackReader(new StringReader(config_str));\n        int ch;\n        StringBuilder sb;\n        boolean running=true;\n\n        while(running) {\n            String protocol_name=readWord(reader);\n            sb=new StringBuilder();\n            sb.append(protocol_name);\n\n            ch=read(reader);\n            if(ch == -1) {\n                retval.add(sb.toString());\n                break;\n            }\n\n            if(ch == ':') {  // no attrs defined\n                retval.add(sb.toString());\n                continue;\n            }\n\n            if(ch == '(') { // more attrs defined\n                reader.unread(ch);\n                String attrs=readUntil(reader, ')');\n                sb.append(attrs);\n                retval.add(sb.toString());\n            }\n            else {\n                retval.add(sb.toString());\n            }\n\n            while(true) {\n                ch=read(reader);\n                if(ch == ':') {\n                    break;\n                }\n                if(ch == -1) {\n                    running=false;\n                    break;\n                }\n            }\n        }\n        reader.close();\n\n        return retval;\n    }","id":7986,"modified_method":"/**\n     * Get a string of the form \"P1(config_str1):P2:P3(config_str3)\" and return\n     * ProtocolConfigurations for it. That means, parse \"P1(config_str1)\", \"P2\" and\n     * \"P3(config_str3)\"\n     * @param config_str Configuration string\n     * @return Vector of strings\n     */\n    private Vector<String> parseProtocols(String config_str) throws IOException {\n        Vector<String> retval=new Vector<String>();\n        PushbackReader reader=new PushbackReader(new StringReader(config_str));\n        int ch;\n        StringBuilder sb;\n        boolean running=true;\n\n        while(running) {\n            String protocol_name=readWord(reader);\n            sb=new StringBuilder();\n            sb.append(protocol_name);\n\n            ch=read(reader);\n            if(ch == -1) {\n                retval.add(sb.toString());\n                break;\n            }\n\n            if(ch == ':') {  // no attrs defined\n                retval.add(sb.toString());\n                continue;\n            }\n\n            if(ch == '(') { // more attrs defined\n                reader.unread(ch);\n                String attrs=readUntil(reader, ')');\n                sb.append(attrs);\n                retval.add(sb.toString());\n            }\n            else {\n                retval.add(sb.toString());\n            }\n\n            while(true) {\n                ch=read(reader);\n                if(ch == ':') {\n                    break;\n                }\n                if(ch == -1) {\n                    running=false;\n                    break;\n                }\n            }\n        }\n        reader.close();\n\n        return retval;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void testInsertion() throws Exception {\n        stack.setup();\n        List protocols=stack.getProtocols();\n        assert protocols != null;\n        Assert.assertEquals(6, protocols.size());\n\n        for(int i=0; i < names.length; i++) {\n            String name=names[i];\n            Protocol p=(Protocol)protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n\n        // insert below\n        Protocol new_prot=(Protocol)Class.forName(\"org.jgroups.protocols.TRACE\").newInstance();\n        stack.insertProtocol(new_prot, ProtocolStack.BELOW, \"UNICAST\");\n        protocols=stack.getProtocols();\n        Assert.assertEquals(7, protocols.size());\n        for(int i=0; i < below.length; i++) {\n            String name=below[i];\n            Protocol p=(Protocol)protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n\n        // remove\n        Protocol prot=stack.removeProtocol(\"TRACE\");\n        assert prot != null;\n        protocols=stack.getProtocols();\n        Assert.assertEquals(6, protocols.size());\n        for(int i=0; i < names.length; i++) {\n            String name=names[i];\n            Protocol p=(Protocol)protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n\n        // insert above\n        new_prot=(Protocol)Class.forName(\"org.jgroups.protocols.TRACE\").newInstance();\n        stack.insertProtocol(new_prot, ProtocolStack.ABOVE, \"UNICAST\");\n        protocols=stack.getProtocols();\n        Assert.assertEquals(7, protocols.size());\n        for(int i=0; i < above.length; i++) {\n            String name=above[i];\n            Protocol p=(Protocol)protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n    }","id":7987,"modified_method":"public void testInsertion() throws Exception {\n        stack.setup();\n        List<Protocol> protocols=stack.getProtocols();\n        assert protocols != null;\n        Assert.assertEquals(6, protocols.size());\n\n        for(int i=0; i < names.length; i++) {\n            String name=names[i];\n            Protocol p=protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n\n        // insert below\n        Protocol new_prot=(Protocol)Class.forName(\"org.jgroups.protocols.TRACE\").newInstance();\n        stack.insertProtocol(new_prot, ProtocolStack.BELOW, \"UNICAST\");\n        protocols=stack.getProtocols();\n        Assert.assertEquals(7, protocols.size());\n        for(int i=0; i < below.length; i++) {\n            String name=below[i];\n            Protocol p=protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n\n        // remove\n        Protocol prot=stack.removeProtocol(\"TRACE\");\n        assert prot != null;\n        protocols=stack.getProtocols();\n        Assert.assertEquals(6, protocols.size());\n        for(int i=0; i < names.length; i++) {\n            String name=names[i];\n            Protocol p=protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n\n        // insert above\n        new_prot=(Protocol)Class.forName(\"org.jgroups.protocols.TRACE\").newInstance();\n        stack.insertProtocol(new_prot, ProtocolStack.ABOVE, \"UNICAST\");\n        protocols=stack.getProtocols();\n        Assert.assertEquals(7, protocols.size());\n        for(int i=0; i < above.length; i++) {\n            String name=above[i];\n            Protocol p=protocols.get(i);\n            Assert.assertEquals(name, p.getName());\n        }\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public static void testParsing() throws Exception {\n        String config=\"UDP(mcast_addr=ff18:eb72:479f::2:3;oob_thread_pool.max_threads=4;\" +\n                \"oob_thread_pool.keep_alive_time=5000;max_bundle_size=64000;mcast_send_buf_size=640000;\" +\n                \"oob_thread_pool.queue_max_size=10;mcast_recv_buf_size=25000000;\" +\n                \"use_concurrent_stack=true;tos=8;mcast_port=45522;loopback=true;thread_pool.min_threads=2;\" +\n                \"oob_thread_pool.rejection_policy=Run;thread_pool.max_threads=8;enable_diagnostics=true;\" +\n                \"thread_naming_pattern=cl;ucast_send_buf_size=640000;ucast_recv_buf_size=20000000;\" +\n                \"thread_pool.enabled=true;use_incoming_packet_handler=true;oob_thread_pool.enabled=true;ip_ttl=2;\" +\n                \"enable_bundling=true;thread_pool.rejection_policy=Run;discard_incompatible_packets=true;\" +\n                \"thread_pool.keep_alive_time=5000;thread_pool.queue_enabled=false;mcast_addr=228.10.10.15;\" +\n                \"max_bundle_timeout=30;oob_thread_pool.queue_enabled=false;oob_thread_pool.min_threads=2;\" +\n                \"thread_pool.queue_max_size=100):\" +\n                \"PING(num_initial_members=3;timeout=2000):\" +\n                \"MERGE2(min_interval=5000;max_interval=10000):\" +\n                \"FD_SOCK:\" +\n                \"FD(max_tries=3;timeout=2000):\" +\n                \"VERIFY_SUSPECT(timeout=1500):\" +\n                \"BARRIER:\" +\n                \"pbcast.NAKACK(gc_lag=0;use_mcast_xmit=false;retransmit_timeout=300,600,1200,2400,4800;\" +\n                \"discard_delivered_msgs=true):\" +\n                \"UNICAST(loopback=false;timeout=300,600,1200,2400,3600):\" +\n                \"pbcast.STABLE(desired_avg_gossip=50000;max_bytes=1000000;stability_delay=1000):\" +\n                \"VIEW_SYNC(avg_send_interval=60000):\" +\n                \"pbcast.GMS(print_local_addr=true;view_bundling=true;join_timeout=3000;\" +\n                \"shun=false):\" +\n                \"FC(max_block_time=10000;max_credits=5000000;min_threshold=0.25):\" +\n                \"FRAG2(frag_size=60000):\" +\n                \"pbcast.STREAMING_STATE_TRANSFER(use_reading_thread=true)\";\n        \n        Vector<Configurator.ProtocolConfiguration> ret=Configurator.parseConfigurations(config);\n        System.out.println(\"config:\\n\" + ret);\n        Assert.assertEquals(15, ret.size());\n\n        config=\"UDP(mcast_addr=ff18:eb72:479f::2:3;mcast_port=2453):pbcast.FD:FRAG(frag_size=2292):FD_SIMPLE(s=22;d=33):MERGE2(a=22)\";\n        ret=Configurator.parseConfigurations(config);\n        System.out.println(\"config:\\n\" + ret);\n        Assert.assertEquals(5, ret.size());\n\n        config=\"com.mycomp.Class:B:pbcast.C:H(a=b;c=d;e=f)\";\n        ret=Configurator.parseConfigurations(config);\n        System.out.println(\"config:\\n\" + ret);\n        Assert.assertEquals(4, ret.size());\n    }","id":7988,"modified_method":"public static void testParsing() throws Exception {\n        String config=\"UDP(mcast_addr=ff18:eb72:479f::2:3;oob_thread_pool.max_threads=4;\" +\n                \"oob_thread_pool.keep_alive_time=5000;max_bundle_size=64000;mcast_send_buf_size=640000;\" +\n                \"oob_thread_pool.queue_max_size=10;mcast_recv_buf_size=25000000;\" +\n                \"use_concurrent_stack=true;tos=8;mcast_port=45522;loopback=true;thread_pool.min_threads=2;\" +\n                \"oob_thread_pool.rejection_policy=Run;thread_pool.max_threads=8;enable_diagnostics=true;\" +\n                \"thread_naming_pattern=cl;ucast_send_buf_size=640000;ucast_recv_buf_size=20000000;\" +\n                \"thread_pool.enabled=true;use_incoming_packet_handler=true;oob_thread_pool.enabled=true;ip_ttl=2;\" +\n                \"enable_bundling=true;thread_pool.rejection_policy=Run;discard_incompatible_packets=true;\" +\n                \"thread_pool.keep_alive_time=5000;thread_pool.queue_enabled=false;mcast_addr=228.10.10.15;\" +\n                \"max_bundle_timeout=30;oob_thread_pool.queue_enabled=false;oob_thread_pool.min_threads=2;\" +\n                \"thread_pool.queue_max_size=100):\" +\n                \"PING(num_initial_members=3;timeout=2000):\" +\n                \"MERGE2(min_interval=5000;max_interval=10000):\" +\n                \"FD_SOCK:\" +\n                \"FD(max_tries=3;timeout=2000):\" +\n                \"VERIFY_SUSPECT(timeout=1500):\" +\n                \"BARRIER:\" +\n                \"pbcast.NAKACK(gc_lag=0;use_mcast_xmit=false;retransmit_timeout=300,600,1200,2400,4800;\" +\n                \"discard_delivered_msgs=true):\" +\n                \"UNICAST(loopback=false;timeout=300,600,1200,2400,3600):\" +\n                \"pbcast.STABLE(desired_avg_gossip=50000;max_bytes=1000000;stability_delay=1000):\" +\n                \"VIEW_SYNC(avg_send_interval=60000):\" +\n                \"pbcast.GMS(print_local_addr=true;view_bundling=true;join_timeout=3000;\" +\n                \"shun=false):\" +\n                \"FC(max_block_time=10000;max_credits=5000000;min_threshold=0.25):\" +\n                \"FRAG2(frag_size=60000):\" +\n                \"pbcast.STREAMING_STATE_TRANSFER(use_reading_thread=true)\";\n        \n        Vector<Configurator.ProtocolConfiguration> ret=new Configurator().parseConfigurations(config);\n        System.out.println(\"config:\\n\" + ret);\n        Assert.assertEquals(15, ret.size());\n\n        config=\"UDP(mcast_addr=ff18:eb72:479f::2:3;mcast_port=2453):pbcast.FD:FRAG(frag_size=2292):FD_SIMPLE(s=22;d=33):MERGE2(a=22)\";\n        ret=new Configurator().parseConfigurations(config);\n        System.out.println(\"config:\\n\" + ret);\n        Assert.assertEquals(5, ret.size());\n\n        config=\"com.mycomp.Class:B:pbcast.C:H(a=b;c=d;e=f)\";\n        ret=new Configurator().parseConfigurations(config);\n        System.out.println(\"config:\\n\" + ret);\n        Assert.assertEquals(4, ret.size());\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void destroy() {\n        if(top_prot != null) {\n            Configurator.destroyProtocolStack(getProtocols(), singleton_transports);           // destroys msg queues and threads\n            \n            /*\n             *Do not null top_prot reference since we need recreation of channel properties (JChannel#getProperties)\n             *during channel recreation, especially if those properties were modified after channel was created.\n             *We modify channel properties after channel creation in some tests for example\n             * \n             */\n            //top_prot=null;\n        }        \n    }","id":7989,"modified_method":"public void destroy() {\n        if(top_prot != null) {\n            for(Protocol prot: getProtocols()) {\n                if(prot instanceof TP) {\n                    TP transport=(TP)prot;\n                    if(transport.isSingleton()) {\n                        String singleton_name=transport.getSingletonName();\n                        synchronized(singleton_transports) {\n                            Tuple<TP, ProtocolStack.RefCounter> val=singleton_transports.get(singleton_name);\n                            if(val != null) {\n                                ProtocolStack.RefCounter counter=val.getVal2();\n                                short num_inits=counter.decrementInitCount();\n                                if(num_inits >= 1) {\n                                    continue;\n                                }\n                                else\n                                    singleton_transports.remove(singleton_name);\n                            }\n                        }\n                    }\n                }\n                prot.destroy();\n            }\n            \n            /*\n             *Do not null top_prot reference since we need recreation of channel properties (JChannel#getProperties)\n             *during channel recreation, especially if those properties were modified after channel was created.\n             *We modify channel properties after channel creation in some tests for example\n             * \n             */\n            //top_prot=null;\n        }        \n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Removes a protocol from the stack. Stops the protocol and readjusts the linked lists of\n     * protocols.\n     * @param prot_name The name of the protocol. Since all protocol names in a stack have to be unique\n     *                  (otherwise the stack won't be created), the name refers to just 1 protocol.\n     * @exception Exception Thrown if the protocol cannot be stopped correctly.\n     */\n    public Protocol removeProtocol(String prot_name) throws Exception {\n        return Configurator.removeProtocol(top_prot, prot_name);\n    }","id":7990,"modified_method":"/**\n     * Removes a protocol from the stack. Stops the protocol and readjusts the linked lists of\n     * protocols.\n     * @param prot_name The name of the protocol. Since all protocol names in a stack have to be unique\n     *                  (otherwise the stack won't be created), the name refers to just 1 protocol.\n     * @exception Exception Thrown if the protocol cannot be stopped correctly.\n     */\n    public Protocol removeProtocol(String prot_name) throws Exception {\n        if(prot_name == null) return null;\n        Protocol prot=findProtocol(prot_name);\n        if(prot == null) return null;        \n        Protocol above=prot.getUpProtocol(), below=prot.getDownProtocol();\n        checkAndSwitchTop(prot, below);     \n        if(above != null)\n            above.setDownProtocol(below);\n        if(below != null)\n            below.setUpProtocol(above);\n        prot.setUpProtocol(null);\n        prot.setDownProtocol(null);\n        return prot;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void setup(ProtocolStack stack) throws Exception {\n        Vector<Protocol> protocols=stack.copyProtocols(this);\n        Collections.reverse(protocols);\n        if(top_prot == null) {\n            top_prot=Configurator.connectProtocols(protocols);\n            top_prot.setUpProtocol(this);\n            bottom_prot=Configurator.getBottommostProtocol(top_prot);\n            Collections.reverse(protocols);\n            Configurator.initProtocolStack(protocols, singleton_transports);         // calls init() on each protocol, from bottom to top\n        }\n    }","id":7991,"modified_method":"public void setup(ProtocolStack stack) throws Exception {      \n        if(top_prot == null) {\n            top_prot=getProtocolStackFactory().setupProtocolStack(stack);\n            top_prot.setUpProtocol(this);\n            this.setDownProtocol(top_prot);\n            bottom_prot=getBottomProtocol();           \n            initProtocolStack();\n        }\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"private static Field findField(Object target, List<String> possible_names) {\n        if(target == null)\n            return null;\n        for(Class clazz=target.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n            for(String name: possible_names) {\n                try {\n                    Field field=clazz.getDeclaredField(name);\n                    if(field != null)\n                        return field;\n                }\n                catch(NoSuchFieldException e) {\n                }\n            }\n        }\n\n        return null;\n    }","id":7992,"modified_method":"private static Field findField(Object target, List<String> possible_names) {\n        if(target == null)\n            return null;\n        for(Class<?> clazz=target.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n            for(String name: possible_names) {\n                try {\n                    Field field=clazz.getDeclaredField(name);\n                    if(field != null)\n                        return field;\n                }\n                catch(NoSuchFieldException e) {\n                }\n            }\n        }\n\n        return null;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public ProtocolStack(JChannel channel, String setup_string) throws ChannelException {\n        if(setup_string != null)\n            this.setup_string=setup_string;\n        this.channel=channel;\n        // ClassConfigurator.getInstance(true); // will create the singleton\n\n        Class tmp=ClassConfigurator.class; // load this class, trigger init()\n        try {\n            tmp.newInstance();\n        }\n        catch(Exception e) {\n            throw new ChannelException(\"failed initializing ClassConfigurator\", e);\n        }\n    }","id":7993,"modified_method":"public ProtocolStack(JChannel channel, String setup_string) throws ChannelException {\n        \n        this.setup_string=setup_string;\n        this.channel=channel;       \n\n        Class<?> tmp=ClassConfigurator.class; // load this class, trigger init()\n        try {\n            tmp.newInstance();\n        }\n        catch(Exception e) {\n            throw new ChannelException(\"failed initializing ClassConfigurator\", e);\n        }\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public Vector<Protocol> copyProtocols(ProtocolStack st) throws IllegalAccessException, InstantiationException {\n        Vector<Protocol> list=getProtocols();\n        Vector<Protocol> retval=new Vector<Protocol>(list.size());\n        for(Protocol prot: list) {\n            Protocol new_prot=prot.getClass().newInstance();\n            new_prot.setProtocolStack(st);\n            retval.add(new_prot);\n\n            for(Class<?> clazz=prot.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n\n                // copy all fields marked with @Property\n                Field[] fields=clazz.getDeclaredFields();\n                for(Field field: fields) {\n                    if(field.isAnnotationPresent(Property.class)) {\n                        Object value=Configurator.getField(field, prot);\n                        Configurator.setField(field, new_prot, value);\n                    }\n                }\n\n                // copy all setters marked with @Property\n                Method[] methods=clazz.getDeclaredMethods();\n                for(Method method: methods) {\n                    String methodName=method.getName();\n                    if(method.isAnnotationPresent(Property.class) && Configurator.isSetPropertyMethod(method)) {\n                        Property annotation=method.getAnnotation(Property.class);\n                        List<String> possible_names=new LinkedList<String>();\n                        if(annotation.name() != null)\n                            possible_names.add(annotation.name());\n                        possible_names.add(methodName.substring(3));\n                        possible_names.add(Configurator.renameFromJavaCodingConvention(methodName.substring(3)));\n                        Field field=findField(prot, possible_names);\n                        if(field != null) {\n                            Object value=Configurator.getField(field, prot);\n                            Configurator.setField(field, new_prot, value);\n                        }\n                    }\n                }\n            }\n        }\n        return retval;\n    }","id":7994,"modified_method":"public Vector<Protocol> copyProtocols(ProtocolStack targetStack) throws IllegalAccessException, InstantiationException {\n        Vector<Protocol> list=getProtocols();\n        Vector<Protocol> retval=new Vector<Protocol>(list.size());\n        for(Protocol prot: list) {\n            Protocol new_prot=prot.getClass().newInstance();\n            new_prot.setProtocolStack(targetStack);\n            retval.add(new_prot);\n\n            for(Class<?> clazz=prot.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n\n                // copy all fields marked with @Property\n                Field[] fields=clazz.getDeclaredFields();\n                for(Field field: fields) {\n                    if(field.isAnnotationPresent(Property.class)) {\n                        Object value=Configurator.getField(field, prot);\n                        Configurator.setField(field, new_prot, value);\n                    }\n                }\n\n                // copy all setters marked with @Property\n                Method[] methods=clazz.getDeclaredMethods();\n                for(Method method: methods) {\n                    String methodName=method.getName();\n                    if(method.isAnnotationPresent(Property.class) && Configurator.isSetPropertyMethod(method)) {\n                        Property annotation=method.getAnnotation(Property.class);\n                        List<String> possible_names=new LinkedList<String>();\n                        if(annotation.name() != null)\n                            possible_names.add(annotation.name());\n                        possible_names.add(methodName.substring(3));\n                        possible_names.add(Configurator.renameFromJavaCodingConvention(methodName.substring(3)));\n                        Field field=findField(prot, possible_names);\n                        if(field != null) {\n                            Object value=Configurator.getField(field, prot);\n                            Configurator.setField(field, new_prot, value);\n                        }\n                    }\n                }\n            }\n        }\n        return retval;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void setup() throws Exception {\n        if(top_prot == null) {\n            top_prot=Configurator.setupProtocolStack(setup_string, this);\n            top_prot.setUpProtocol(this);\n            bottom_prot=Configurator.getBottommostProtocol(top_prot);\n            List<Protocol> protocols=getProtocols();\n            Configurator.initProtocolStack(protocols, singleton_transports);         // calls init() on each protocol, from bottom to top\n        }\n    }","id":7995,"modified_method":"public void setup() throws Exception {\n        if(top_prot == null) {\n            top_prot=getProtocolStackFactory().setupProtocolStack();\n            top_prot.setUpProtocol(this);\n            this.setDownProtocol(top_prot);\n            bottom_prot=getBottomProtocol();           \n            initProtocolStack();\n        }\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Start all layers. The {@link Protocol#start()} method is called in each protocol,\n     * <em>from top to bottom<\/em>.\n     * Each layer can perform some initialization, e.g. create a multicast socket\n     */\n    public void startStack(String cluster_name) throws Exception {\n        if(stopped == false) return;\n        Configurator.startProtocolStack(getProtocols(), cluster_name, singleton_transports);\n        stopped=false;\n    }","id":7996,"modified_method":"/**\n     * Start all layers. The {@link Protocol#start()} method is called in each protocol,\n     * <em>from top to bottom<\/em>.\n     * Each layer can perform some initialization, e.g. create a multicast socket\n     */\n    public void startStack(String cluster_name) throws Exception {\n        if(stopped == false) return;\n        \n        Protocol above_prot=null;        \n        for(final Protocol prot: getProtocols()) {\n            if(prot instanceof TP) {\n                String singleton_name=((TP)prot).getSingletonName();\n                TP transport=(TP)prot;\n                if(transport.isSingleton() && cluster_name != null) {\n                    final Map<String, Protocol> up_prots=transport.getUpProtocols();\n                    synchronized(up_prots) {\n                        Set<String> keys=up_prots.keySet();\n                        if(keys.contains(cluster_name))\n                            throw new IllegalStateException(\"cluster '\" + cluster_name + \"' is already connected to singleton \" +\n                                    \"transport: \" + keys);\n\n                        for(Iterator<Map.Entry<String,Protocol>> it=up_prots.entrySet().iterator(); it.hasNext();) {\n                            Map.Entry<String,Protocol> entry=it.next();\n                            Protocol tmp=entry.getValue();\n                            if(tmp == above_prot) {\n                                it.remove();\n                            }\n                        }\n\n                        if(above_prot != null) {\n                            TP.ProtocolAdapter ad=new TP.ProtocolAdapter(cluster_name, prot.getName(), above_prot, prot, \n                                                                         transport.getThreadNamingPattern(),\n                                                                         transport.getLocalAddress());\n                            ad.setProtocolStack(above_prot.getProtocolStack());\n                            above_prot.setDownProtocol(ad);\n                            up_prots.put(cluster_name, ad);\n                        }\n                    }\n                    synchronized(singleton_transports) {\n                        Tuple<TP, ProtocolStack.RefCounter> val=singleton_transports.get(singleton_name);\n                        if(val != null) {\n                            ProtocolStack.RefCounter counter=val.getVal2();\n                            short num_starts=counter.incrementStartCount();\n                            if(num_starts >= 1) {\n                                if(above_prot != null)\n                                    above_prot.up(new Event(Event.SET_LOCAL_ADDRESS, transport.getLocalAddress()));\n                                continue;\n                            }\n                        }\n                    }\n                }\n            }                       \n            prot.start();\n            above_prot=prot;\n        }\n        \n        stopped=false;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"static Map<String,String> getProps(Protocol prot) {\n        Map<String,String> retval=new HashMap<String,String>();\n\n        for(Class<?> clazz=prot.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n\n            // copy all fields marked with @Property\n            Field[] fields=clazz.getDeclaredFields();\n            Property annotation;\n            for(Field field: fields) {\n                if(field.isAnnotationPresent(Property.class)) {\n                    Object value=Configurator.getField(field, prot);\n                    if(value != null) {\n                        annotation=field.getAnnotation(Property.class);\n                        Class<?> conv_class=annotation.converter();\n                        PropertyConverter conv=null;\n                        try {\n                            conv=(PropertyConverter)conv_class.newInstance();\n                        }\n                        catch(Exception e) {\n                        }\n                        String tmp=conv != null? conv.toString(value) : value.toString();\n                        retval.put(field.getName(), tmp);\n                    }\n                }\n            }\n\n            // copy all setters marked with @Property\n            Method[] methods=clazz.getDeclaredMethods();\n            for(Method method: methods) {\n                String methodName=method.getName();\n                if(method.isAnnotationPresent(Property.class) && Configurator.isSetPropertyMethod(method)) {\n                    annotation=method.getAnnotation(Property.class);\n                    List<String> possible_names=new LinkedList<String>();\n                    if(annotation.name() != null)\n                        possible_names.add(annotation.name());\n                    possible_names.add(methodName.substring(3));\n                    possible_names.add(Configurator.renameFromJavaCodingConvention(methodName.substring(3)));\n                    Field field=findField(prot, possible_names);\n                    if(field != null) {\n                        Object value=Configurator.getField(field, prot);\n                        if(value != null) {\n                            Class<?> conv_class=annotation.converter();\n                            PropertyConverter conv=null;\n                            try {\n                                conv=(PropertyConverter)conv_class.newInstance();\n                            }\n                            catch(Exception e) {\n                            }\n                            String tmp=conv != null? conv.toString(value) : value.toString();\n                            retval.put(field.getName(), tmp);\n                        }\n                    }\n                }\n            }\n        }\n        return retval;\n    }","id":7997,"modified_method":"private static Map<String,String> getProps(Protocol prot) {\n        Map<String,String> retval=new HashMap<String,String>();\n\n        for(Class<?> clazz=prot.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n\n            // copy all fields marked with @Property\n            Field[] fields=clazz.getDeclaredFields();\n            Property annotation;\n            for(Field field: fields) {\n                if(field.isAnnotationPresent(Property.class)) {\n                    Object value=Configurator.getField(field, prot);\n                    if(value != null) {\n                        annotation=field.getAnnotation(Property.class);\n                        Class<?> conv_class=annotation.converter();\n                        PropertyConverter conv=null;\n                        try {\n                            conv=(PropertyConverter)conv_class.newInstance();\n                        }\n                        catch(Exception e) {\n                        }\n                        String tmp=conv != null? conv.toString(value) : value.toString();\n                        retval.put(field.getName(), tmp);\n                    }\n                }\n            }\n\n            // copy all setters marked with @Property\n            Method[] methods=clazz.getDeclaredMethods();\n            for(Method method: methods) {\n                String methodName=method.getName();\n                if(method.isAnnotationPresent(Property.class) && Configurator.isSetPropertyMethod(method)) {\n                    annotation=method.getAnnotation(Property.class);\n                    List<String> possible_names=new LinkedList<String>();\n                    if(annotation.name() != null)\n                        possible_names.add(annotation.name());\n                    possible_names.add(methodName.substring(3));\n                    possible_names.add(Configurator.renameFromJavaCodingConvention(methodName.substring(3)));\n                    Field field=findField(prot, possible_names);\n                    if(field != null) {\n                        Object value=Configurator.getField(field, prot);\n                        if(value != null) {\n                            Class<?> conv_class=annotation.converter();\n                            PropertyConverter conv=null;\n                            try {\n                                conv=(PropertyConverter)conv_class.newInstance();\n                            }\n                            catch(Exception e) {\n                            }\n                            String tmp=conv != null? conv.toString(value) : value.toString();\n                            retval.put(field.getName(), tmp);\n                        }\n                    }\n                }\n            }\n        }\n        return retval;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void insertProtocol(Protocol prot, int position, Class<? extends Protocol> neighbor_prot) throws Exception {\n        Configurator.insertProtocol(prot, position, neighbor_prot, this);\n    }","id":7998,"modified_method":"public void insertProtocol(Protocol prot, int position, Class<? extends Protocol> neighbor_prot) throws Exception {\n        if(neighbor_prot == null) throw new IllegalArgumentException(\"Configurator.insertProtocol(): neighbor_prot is null\");\n        if(position != ProtocolStack.ABOVE && position != ProtocolStack.BELOW)\n            throw new IllegalArgumentException(\"position has to be ABOVE or BELOW\");\n\n        Protocol neighbor=findProtocol(neighbor_prot);\n        if(neighbor == null)\n            throw new IllegalArgumentException(\"protocol \\\"\" + neighbor_prot + \"\\\" not found in \" + stack.printProtocolSpec(false));\n        \n        insertProtocolInStack(prot, neighbor,  position);\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Iterates through all the protocols <em>from top to bottom<\/em> and does the following:\n     * <ol>\n     * <li>Waits until all messages in the down queue have been flushed (ie., size is 0)\n     * <li>Calls stop() on the protocol\n     * <\/ol>\n     */\n    public void stopStack(String cluster_name) {\n        if(stopped) return;\n        Configurator.stopProtocolStack(getProtocols(), cluster_name, singleton_transports);\n        stopped=true;\n    }","id":7999,"modified_method":"/**\n     * Iterates through all the protocols <em>from top to bottom<\/em> and does the following:\n     * <ol>\n     * <li>Waits until all messages in the down queue have been flushed (ie., size is 0)\n     * <li>Calls stop() on the protocol\n     * <\/ol>\n     */\n    public void stopStack(String cluster_name) {\n        if(stopped) return;\n        for(final Protocol prot: getProtocols()) {\n            if(prot instanceof TP) {\n                TP transport=(TP)prot;                \n                if(transport.isSingleton()) {\n                    String singleton_name=transport.getSingletonName();                    \n                    final Map<String,Protocol> up_prots=transport.getUpProtocols();\n                    synchronized(up_prots) {\n                        up_prots.remove(cluster_name);\n                    }\n                    synchronized(singleton_transports) {\n                        Tuple<TP, ProtocolStack.RefCounter> val=singleton_transports.get(singleton_name);\n                        if(val != null) {\n                            ProtocolStack.RefCounter counter=val.getVal2();\n                            short num_starts=counter.decrementStartCount();\n                            if(num_starts > 0) {\n                                continue; // don't call TP.stop() if we still have references to the transport\n                            }\n                            //else\n                                // singletons.remove(singleton_name); // do the removal in destroyProtocolStack()\n                        }\n                    }\n                }\n            }\n            prot.stop();\n        }\n        stopped=true;\n    }","commit_id":"6a7ecb27b42171b82958c047c7dc9a910505aa9a","url":"https://github.com/belaban/JGroups"}]